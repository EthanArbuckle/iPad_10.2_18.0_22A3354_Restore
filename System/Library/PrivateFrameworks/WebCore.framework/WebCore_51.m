uint64_t WebCore::Notification::scriptExecutionContext(WebCore::Notification *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

unsigned int *WebCore::Notification::dispatchErrorEvent(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  _DWORD *v12;
  void *v13;
  int v14;
  unsigned int *v15;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      v4 = *(unsigned __int8 *)(v2 + 178);
      if (*(_BYTE *)(v2 + 178))
      {
        if (v4 == 1 || v4 == 2)
          ++*(_DWORD *)(v2 + 216);
      }
      else
      {
        *(_DWORD *)(v2 - 264) += 2;
      }
      v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
        v6 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v7 = *(_QWORD *)(v6 + 40);
      if (!v7)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
        v7 = *(_QWORD *)(v6 + 40);
      }
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      *(_QWORD *)v8 = off_1E33A4B48;
      *(_QWORD *)(v8 + 8) = 0;
      v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1E8200;
      v11 = *(_QWORD *)(v7 + 784) != 0;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v10 | v11;
      v12 = *(_DWORD **)(v7 + 784);
      if (v12)
        *v12 += 2;
      *(_QWORD *)(v8 + 24) = v12;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = v9;
      *(_QWORD *)(v8 + 64) = 0;
      v15 = (unsigned int *)v8;
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(v3, (uint64_t)(v3 + 8), 20, (uint64_t *)&v15);
      this = v15;
      if (v15)
      {
        if (v15[4] == 1)
          this = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 8))();
        else
          --v15[4];
      }
      v14 = *(unsigned __int8 *)(v2 + 178);
      if (*(_BYTE *)(v2 + 178))
      {
        if (v14 == 1)
        {
          if (*(_DWORD *)(v2 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
          else
            --*(_DWORD *)(v2 + 216);
        }
        else if (v14 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
        }
      }
      else if (*(_DWORD *)(v2 - 264) == 2)
      {
        if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v13);
      }
      else
      {
        *(_DWORD *)(v2 - 264) -= 2;
      }
    }
  }
  return this;
}

void WebCore::Notification::close(WebCore::Notification *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  _QWORD v11[32];

  v11[31] = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 53);
  if (v2 == 1)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(unsigned __int8 *)(v5 + 178);
        if (*(_BYTE *)(v5 + 178))
        {
          if (v6 == 1 || v6 == 2)
            ++*(_DWORD *)(v5 + 216);
        }
        else
        {
          *(_DWORD *)(v5 - 264) += 2;
        }
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 144))(v5 - 96);
        v9 = *(unsigned __int8 *)(v5 + 178);
        if (*(_BYTE *)(v5 + 178))
        {
          if (v9 == 1)
          {
            if (*(_DWORD *)(v5 + 216) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 40))(v5 - 96);
            else
              --*(_DWORD *)(v5 + 216);
          }
          else if (v9 == 2)
          {
            WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
          }
        }
        else if (*(_DWORD *)(v5 - 264) == 2)
        {
          if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v7);
        }
        else
        {
          *(_DWORD *)(v5 - 264) -= 2;
        }
        if (v8)
        {
          WebCore::Notification::data(this, (uint64_t)v11);
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 8))(v8, v11);
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v11, v10);
        }
      }
    }
  }
  else if (!v2)
  {
    v3 = *((_QWORD *)this + 33);
    if (v3)
      WebCore::NotificationResourcesLoader::stop(v3);
  }
}

uint64_t WebCore::Notification::data@<X0>(WebCore::Notification *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::SecurityContext *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::SecurityOriginData *v22;
  _QWORD *v23;
  WTF::MonotonicTime *v24;
  _DWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  WebCore::Notification *v33;
  char v34;
  char *v35;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = (_OWORD *)(v5 - 96);
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v6 + 152))(v6);
  if (!(_BYTE)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1954D7868);
  }
  v9 = v7;
  v10 = (_DWORD *)*((_QWORD *)this + 10);
  if (v10)
    *v10 += 2;
  *(_QWORD *)a2 = v10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 104);
  v11 = (_DWORD *)*((_QWORD *)this + 15);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(a2 + 40) = v11;
  v12 = (_DWORD *)*((_QWORD *)this + 18);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(a2 + 48) = v12;
  v13 = (_DWORD *)*((_QWORD *)this + 20);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(a2 + 56) = v13;
  v14 = (_DWORD *)*((_QWORD *)this + 19);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(a2 + 64) = v14;
  v15 = (_DWORD *)*((_QWORD *)this + 17);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(a2 + 72) = v15;
  *(_BYTE *)(a2 + 80) = *((_BYTE *)this + 128);
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
      v18 = (WebCore::SecurityContext *)(v17 - 96);
    else
      v18 = 0;
  }
  else
  {
    v18 = 0;
  }
  WebCore::SecurityContext::securityOrigin(v18, v8);
  v20 = *(unsigned int *)(v19 + 32);
  if ((_DWORD)v20 == 1)
  {
    v24 = (WTF::MonotonicTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    if ((_DWORD)v20 == -1)
    {
      v33 = (WebCore::Notification *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::Notification::stop(v33);
    }
    v21 = v19;
    v22 = (WebCore::SecurityOriginData *)(v19 + 8);
    v35 = &v34;
    v23 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v20])(&v35, v19 + 8);
    if (MEMORY[0x19AEA53F4](*v23, "file", 4) && *(_BYTE *)(v21 + 59))
      v24 = (WTF::MonotonicTime *)WTF::String::String((_QWORD *)(a2 + 88), (uint64_t)"null", 5);
    else
      v24 = (WTF::MonotonicTime *)WebCore::SecurityOriginData::toString(v22, (_QWORD *)(a2 + 88));
  }
  v25 = (_DWORD *)*((_QWORD *)this + 28);
  if (v25)
    *v25 += 2;
  *(_QWORD *)(a2 + 96) = v25;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)((char *)this + 248);
  v26 = *((_QWORD *)this + 9);
  *(_QWORD *)(a2 + 144) = *((_QWORD *)this + 8);
  *(_QWORD *)(a2 + 152) = v26;
  v27 = v6[15];
  *(_OWORD *)(a2 + 160) = v6[14];
  *(_OWORD *)(a2 + 176) = v27;
  *(_QWORD *)(a2 + 192) = v9;
  result = WTF::MonotonicTime::now(v24);
  *(_QWORD *)(a2 + 200) = v29;
  v30 = *((_QWORD *)this + 25);
  v31 = (WTF *)*(unsigned int *)(v30 + 20);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_DWORD *)(a2 + 220) = (_DWORD)v31;
  if ((_DWORD)v31)
  {
    v32 = (void *)WTF::fastMalloc(v31);
    *(_DWORD *)(a2 + 216) = (_DWORD)v31;
    *(_QWORD *)(a2 + 208) = v32;
    result = (uint64_t)memcpy(v32, *(const void **)(v30 + 8), *(unsigned int *)(v30 + 20));
  }
  *(_WORD *)(a2 + 224) = *((_WORD *)this + 104);
  return result;
}

void WebCore::Notification::stop(WebCore::Notification *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  _QWORD v10[32];

  v10[31] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 33);
  if (v2)
    WebCore::NotificationResourcesLoader::stop(v2);
  if (!*((_QWORD *)this + 28))
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(unsigned __int8 *)(v4 + 178);
        if (*(_BYTE *)(v4 + 178))
        {
          if (v5 == 1 || v5 == 2)
            ++*(_DWORD *)(v4 + 216);
        }
        else
        {
          *(_DWORD *)(v4 - 264) += 2;
        }
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 144))(v4 - 96);
        v8 = *(unsigned __int8 *)(v4 + 178);
        if (*(_BYTE *)(v4 + 178))
        {
          if (v8 == 1)
          {
            if (*(_DWORD *)(v4 + 216) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 40))(v4 - 96);
            else
              --*(_DWORD *)(v4 + 216);
          }
          else if (v8 == 2)
          {
            WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
          }
        }
        else if (*(_DWORD *)(v4 - 264) == 2)
        {
          if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v6);
        }
        else
        {
          *(_DWORD *)(v4 - 264) -= 2;
        }
        if (v7)
        {
          WebCore::Notification::data(this, (uint64_t)v10);
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v10);
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v10, v9);
        }
      }
    }
  }
}

uint64_t WebCore::Notification::finalize(uint64_t this)
{
  if (*(_DWORD *)(this + 212) != 2)
    *(_DWORD *)(this + 212) = 2;
  return this;
}

unsigned int *WebCore::Notification::dispatchShowEvent(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  _DWORD *v13;
  unsigned int *v14;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      v5 = *(unsigned __int8 *)(v3 + 178);
      if (*(_BYTE *)(v3 + 178))
      {
        if (v5 == 1 || v5 == 2)
          ++*(_DWORD *)(v3 + 216);
      }
      else
      {
        *(_DWORD *)(v3 - 264) += 2;
      }
      if (*((_BYTE *)this + 217) != 2)
      {
        v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
          v7 = WebCore::threadGlobalDataSlow((WebCore *)this);
        v8 = *(_QWORD *)(v7 + 40);
        if (!v8)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
          v8 = *(_QWORD *)(v7 + 40);
        }
        v9 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
        *(_QWORD *)v9 = off_1E33A4B48;
        *(_QWORD *)(v9 + 8) = 0;
        v11 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x1E8200;
        v12 = *(_QWORD *)(v8 + 1848) != 0;
        *(_DWORD *)(v9 + 16) = 1;
        *(_DWORD *)(v9 + 20) = v11 | v12;
        v13 = *(_DWORD **)(v8 + 1848);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v9 + 24) = v13;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = v10;
        *(_QWORD *)(v9 + 64) = 0;
        v14 = (unsigned int *)v9;
        WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(v4, (uint64_t)(v4 + 8), 20, (uint64_t *)&v14);
        this = v14;
        if (v14)
        {
          if (v14[4] == 1)
            this = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 8))();
          else
            --v14[4];
        }
        v5 = *(unsigned __int8 *)(v3 + 178);
      }
      if (v5)
      {
        if (v5 == 1)
        {
          if (*(_DWORD *)(v3 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
          else
            --*(_DWORD *)(v3 + 216);
        }
        else if (v5 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
        }
      }
      else if (*(_DWORD *)(v3 - 264) == 2)
      {
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
      }
      else
      {
        *(_DWORD *)(v3 - 264) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::Notification::dispatchClickEvent(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (**v12)();
  int v13;
  unsigned int *v14;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return this;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return this;
  v3 = this;
  v4 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v4 == 1 || v4 == 2)
      ++*(_DWORD *)(v2 + 216);
  }
  else
  {
    *(_DWORD *)(v2 - 264) += 2;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3364768;
  v5[1] = v3;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = v3[6];
  *(_QWORD *)(v6 + 8) = v3;
  ++*((_QWORD *)v3 + 2);
  v3[6] = v7 + 2;
  this = (unsigned int *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)this = off_1E33646F0;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = v5;
  v14 = this;
  v8 = *((_QWORD *)v3 + 1);
  if (!v8)
  {
    v14 = 0;
    v12 = off_1E33646F0;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v14 = 0;
    goto LABEL_10;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 20, (uint64_t *)&v14);
  this = v14;
  v14 = 0;
  if (this)
  {
LABEL_10:
    v12 = *(uint64_t (***)())this;
LABEL_11:
    this = (unsigned int *)v12[1]();
  }
  v13 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v13 == 1)
    {
      if (*(_DWORD *)(v2 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
      else
        --*(_DWORD *)(v2 + 216);
    }
    else if (v13 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
    }
  }
  else if (*(_DWORD *)(v2 - 264) == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v11);
  }
  else
  {
    *(_DWORD *)(v2 - 264) -= 2;
  }
  return this;
}

unsigned int *WebCore::Notification::dispatchCloseEvent(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  _DWORD *v12;
  void *v13;
  int v14;
  unsigned int *v15;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (uint64_t)this;
      v4 = *(unsigned __int8 *)(v2 + 178);
      if (*(_BYTE *)(v2 + 178))
      {
        if (v4 == 1 || v4 == 2)
          ++*(_DWORD *)(v2 + 216);
      }
      else
      {
        *(_DWORD *)(v2 - 264) += 2;
      }
      v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
        v6 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v7 = *(_QWORD *)(v6 + 40);
      if (!v7)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
        v7 = *(_QWORD *)(v6 + 40);
      }
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      *(_QWORD *)v8 = off_1E33A4B48;
      *(_QWORD *)(v8 + 8) = 0;
      v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1E8200;
      v11 = *(_QWORD *)(v7 + 408) != 0;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v10 | v11;
      v12 = *(_DWORD **)(v7 + 408);
      if (v12)
        *v12 += 2;
      *(_QWORD *)(v8 + 24) = v12;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = v9;
      *(_QWORD *)(v8 + 64) = 0;
      v15 = (unsigned int *)v8;
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v3, v3 + 32, 20, (uint64_t *)&v15);
      this = v15;
      if (v15)
      {
        if (v15[4] == 1)
          this = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 8))();
        else
          --v15[4];
      }
      if (*(_DWORD *)(v3 + 212) != 2)
        *(_DWORD *)(v3 + 212) = 2;
      v14 = *(unsigned __int8 *)(v2 + 178);
      if (*(_BYTE *)(v2 + 178))
      {
        if (v14 == 1)
        {
          if (*(_DWORD *)(v2 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
          else
            --*(_DWORD *)(v2 + 216);
        }
        else if (v14 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
        }
      }
      else if (*(_DWORD *)(v2 - 264) == 2)
      {
        if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v13);
      }
      else
      {
        *(_DWORD *)(v2 - 264) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::Notification::requestPermission(WebCore::Document *this, WTF::StringImpl *a2, uint64_t *a3)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::LocalDOMWindow *v14;
  WTF::StringImpl *v15;
  void *v16;
  unsigned int *result;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28[2];

  v3 = this;
  *((_DWORD *)this + 6) += 2;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = *((_QWORD *)this + 66);
  if (!v6)
    goto LABEL_19;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_19;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    goto LABEL_19;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_19;
  ++*(_DWORD *)v9;
  v28[0] = (WTF::StringImpl *)"NotificationController";
  v28[1] = (WTF::StringImpl *)23;
  v10 = *((_QWORD *)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v9 + 8), (const char **)v28)[2]+ 1);
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
    if (v10)
      goto LABEL_7;
LABEL_19:
    v19 = WebCore::Document::eventLoop(v3, a2);
    v20 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v20 = &off_1E33646A8;
    *(_QWORD *)(v20 + 8) = v4;
    *(_QWORD *)(v20 + 16) = v5;
    *(_DWORD *)(v20 + 24) = 1;
    v28[0] = (WTF::StringImpl *)v20;
    WebCore::EventLoopTaskGroup::queueTask(v19, 0, (uint64_t *)v28);
    result = (unsigned int *)v28[0];
    v28[0] = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    goto LABEL_32;
  }
  WebCore::Page::~Page(v9);
  WTF::fastFree(v26, v27);
  if (!v10)
    goto LABEL_19;
LABEL_7:
  if ((WebCore::Document::isSecureContext(v3, a2) & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::Document::addConsoleMessage(v3, 8, 2, v28, 0);
    v18 = v28[0];
    v28[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    goto LABEL_19;
  }
  v11 = *((_QWORD *)v3 + 66);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0 || (v13 = *(_QWORD *)(v12 + 296)) == 0)
  {
    v14 = 0;
    goto LABEL_22;
  }
  v14 = *(WebCore::LocalDOMWindow **)(v13 + 696);
  if (!v14)
  {
LABEL_22:
    v21 = 1;
    goto LABEL_24;
  }
  ++*((_DWORD *)v14 + 6);
  if ((WebCore::LocalDOMWindow::consumeTransientActivation(v14) & 1) == 0)
  {
    v21 = 0;
LABEL_24:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::Document::addConsoleMessage(v3, 8, 2, v28, 0);
    v23 = v28[0];
    v28[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = WebCore::Document::eventLoop(v3, v22);
    v25 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v25 = &off_1E33646A8;
    *(_QWORD *)(v25 + 8) = v4;
    *(_QWORD *)(v25 + 16) = v5;
    *(_DWORD *)(v25 + 24) = 1;
    v28[0] = (WTF::StringImpl *)v25;
    WebCore::EventLoopTaskGroup::queueTask(v24, 0, (uint64_t *)v28);
    result = (unsigned int *)v28[0];
    v28[0] = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    if ((v21 & 1) != 0)
      goto LABEL_32;
    goto LABEL_30;
  }
  v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = &off_1E3364790;
  *((_QWORD *)v15 + 1) = v3;
  *((_QWORD *)v15 + 2) = v4;
  *((_QWORD *)v15 + 3) = v5;
  v28[0] = v15;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 32))(v10, (uint64_t)v3 + 192, v28);
  result = (unsigned int *)v28[0];
  v28[0] = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  v3 = 0;
LABEL_30:
  if (*((_DWORD *)v14 + 6) == 1)
  {
    result = (unsigned int *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v14 + 72))(v14);
    if (!v3)
      return result;
  }
  else
  {
    --*((_DWORD *)v14 + 6);
    if (!v3)
      return result;
  }
LABEL_32:
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v3, v16);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
  return result;
}

WebCore::EventNames **WebCore::Notification::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;

  v1 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v4 = (uint64_t)this;
  }
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v5 = *(_QWORD *)(v4 + 40);
  }
  v6 = (unint64_t)v1[6];
  if ((v6 & 0x1000000000000) != 0)
  {
    v20 = v6 & 0xFFFFFFFFFFFFLL;
    v21 = *(unsigned int *)(v20 + 28);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD **)(v20 + 16);
      v23 = *(_QWORD *)(v5 + 400);
      v24 = 32 * v21;
      while (*v22 != v23)
      {
        v22 += 4;
        v24 -= 32;
        if (!v24)
          goto LABEL_7;
      }
      goto LABEL_49;
    }
  }
LABEL_7:
  v7 = *(_QWORD *)(StatusReg + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v8 = (uint64_t)this;
  }
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = (unint64_t)v1[6];
  if ((v10 & 0x1000000000000) != 0)
  {
    v25 = v10 & 0xFFFFFFFFFFFFLL;
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD **)(v25 + 16);
      v28 = *(_QWORD *)(v9 + 408);
      v29 = 32 * v26;
      while (*v27 != v28)
      {
        v27 += 4;
        v29 -= 32;
        if (!v29)
          goto LABEL_13;
      }
      goto LABEL_49;
    }
  }
LABEL_13:
  v11 = *(_QWORD *)(StatusReg + 736);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v12 = (uint64_t)this;
  }
  v13 = *(_QWORD *)(v12 + 40);
  if (!v13)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
    v13 = *(_QWORD *)(v12 + 40);
  }
  v14 = (unint64_t)v1[6];
  if ((v14 & 0x1000000000000) != 0)
  {
    v30 = v14 & 0xFFFFFFFFFFFFLL;
    v31 = *(unsigned int *)(v30 + 28);
    if ((_DWORD)v31)
    {
      v32 = *(_QWORD **)(v30 + 16);
      v33 = *(_QWORD *)(v13 + 784);
      v34 = 32 * v31;
      while (*v32 != v33)
      {
        v32 += 4;
        v34 -= 32;
        if (!v34)
          goto LABEL_19;
      }
LABEL_49:
      v19 = 1;
      goto LABEL_26;
    }
  }
LABEL_19:
  v15 = *(_QWORD *)(StatusReg + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v16 = (uint64_t)this;
  }
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
    v17 = *(_QWORD *)(v16 + 40);
  }
  v18 = (unint64_t)v1[6];
  if ((v18 & 0x1000000000000) != 0 && (v35 = v18 & 0xFFFFFFFFFFFFLL, v36 = *(unsigned int *)(v35 + 28), (_DWORD)v36))
  {
    v37 = *(uint64_t **)(v35 + 16);
    v38 = *(_QWORD *)(v17 + 1848);
    v39 = 32 * v36 - 32;
    do
    {
      v40 = *v37;
      v37 += 4;
      v19 = v40 == v38;
      v41 = v40 == v38 || v39 == 0;
      v39 -= 32;
    }
    while (!v41);
  }
  else
  {
    v19 = 0;
  }
LABEL_26:
  *((_BYTE *)v1 + 216) = v19;
  return this;
}

WebCore::EventNames **`non-virtual thunk to'WebCore::Notification::eventListenersDidChange(WebCore::EventNames **this)
{
  return WebCore::Notification::eventListenersDidChange(this - 4);
}

BOOL WebCore::Notification::virtualHasPendingActivity(WebCore::Notification *this)
{
  return *((_DWORD *)this + 53) == 1 && *((_BYTE *)this + 216) != 0;
}

uint64_t WebCore::Notification::ensureOnNotificationThread(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  _QWORD *v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a1[1];
  v17[0] = *a1;
  v17[1] = v6;
  v7 = *a4;
  *a4 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v8 = &off_1E33647B8;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v7;
  v15 = v8;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v17);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v10[4]) & 1) != 0)
      {
        v12 = 1;
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v11 + 336))(v11, &v15);
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_11:
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v12)
LABEL_14:
    (*(void (**)(_QWORD *, uint64_t))(*v15 + 16))(v15, v11);
LABEL_15:
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::Notification::ensureOnNotificationThread(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  _QWORD *v13;
  char v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 176);
  v15[0] = *(_OWORD *)(a1 + 160);
  v15[1] = v2;
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v6 = &off_1E33647B8;
  v6[2] = v3;
  v6[3] = v4;
  v6[4] = v5;
  v13 = v6;
  v14 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v15);
  if (v8)
  {
    v9 = v8[4];
    if (v9)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v8[4]) & 1) != 0)
      {
        v10 = 1;
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v9 + 336))(v9, &v13);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_11:
  v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v11 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v10)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v10)
LABEL_14:
    (*(void (**)(_QWORD *, uint64_t))(*v13 + 16))(v13, v9);
LABEL_15:
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::NotificationController::~NotificationController(WebCore::NotificationController *this)
{
  *(_QWORD *)this = off_1E3364678;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_1E3364678;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
  WTF::fastFree(this, v2);
}

const char **WebCore::NotificationController::clientFrom(WebCore::NotificationController *this, WebCore::Page *a2)
{
  const char **result;
  const char *v3;
  const char *v4[2];

  v4[0] = "NotificationController";
  v4[1] = (const char *)23;
  result = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 1, v4);
  if (result)
  {
    v3 = result[2];
    if (v3)
      return (const char **)*((_QWORD *)v3 + 1);
    else
      return 0;
  }
  return result;
}

const char *WebCore::NotificationController::supplementName(WebCore::NotificationController *this)
{
  return "NotificationController";
}

uint64_t WebCore::NotificationData::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  WTF *v6;
  void *v7;

  WTF::URL::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 80);
  WTF::String::isolatedCopy();
  result = WTF::URL::isolatedCopy();
  v5 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 160) = v5;
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
  v6 = (WTF *)*(unsigned int *)(a1 + 220);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_DWORD *)(a2 + 220) = (_DWORD)v6;
  if ((_DWORD)v6)
  {
    v7 = (void *)WTF::fastMalloc(v6);
    *(_DWORD *)(a2 + 216) = (_DWORD)v6;
    *(_QWORD *)(a2 + 208) = v7;
    result = (uint64_t)memcpy(v7, *(const void **)(a1 + 208), *(unsigned int *)(a1 + 220));
  }
  *(_WORD *)(a2 + 224) = *(_WORD *)(a1 + 224);
  return result;
}

double WebCore::NotificationData::isolatedCopy@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  double result;

  WTF::URL::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 80);
  WTF::String::isolatedCopy();
  WTF::URL::isolatedCopy();
  v4 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 160) = v4;
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 208) = *(_QWORD *)(a1 + 208);
  result = *(double *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(double *)(a2 + 216) = result;
  *(_WORD *)(a2 + 224) = *(_WORD *)(a1 + 224);
  return result;
}

uint64_t WebCore::NotificationEvent::create@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  WebCore::Notification *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t result;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  bmalloc::api *v21;
  void *v22;

  v8 = (WebCore::Notification *)*((_QWORD *)a2 + 1);
  if (v8)
    ++*((_DWORD *)v8 + 6);
  v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v9)
    *(_DWORD *)v9 += 2;
  v10 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
  v14 = *a2;
  v15 = a2[1];
  v16 = a2[2];
  *(_QWORD *)(v10 + 8) = 0;
  if (a3)
    v17 = 721408;
  else
    v17 = 720896;
  v18 = v17 | (2 * v14) | (4 * v15) | (8 * v16) | (*a1 != 0) | *(_DWORD *)(v10 + 20) & 0xFFC00000;
  *(_DWORD *)(v10 + 16) = 1;
  *(_DWORD *)(v10 + 20) = v18;
  v19 = (_DWORD *)*a1;
  if (*a1)
  {
    *v19 += 2;
    v18 = *(_DWORD *)(v10 + 20);
  }
  *(_QWORD *)(v10 + 24) = v19;
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_QWORD *)(v10 + 56) = v13;
  *(_DWORD *)(v10 + 20) = v18 | 0x4000;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_DWORD *)(v10 + 80) = 0;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_QWORD *)v10 = off_1E33648E8;
  if (v8)
    ++*((_DWORD *)v8 + 6);
  *(_QWORD *)(v10 + 104) = v8;
  if (v9)
  {
    v20 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    *(_QWORD *)(v10 + 112) = v9;
    *a4 = v10;
    if (v20)
      *(_DWORD *)v9 = v20;
    else
      result = WTF::StringImpl::destroy(v9, v12);
  }
  else
  {
    *(_QWORD *)(v10 + 112) = 0;
    *a4 = v10;
  }
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 1)
    {
      WebCore::Notification::~Notification(v8, v12);
      return bmalloc::api::isoDeallocate(v21, v22);
    }
    else
    {
      --*((_DWORD *)v8 + 6);
    }
  }
  return result;
}

void WebCore::NotificationEvent::~NotificationEvent(WebCore::NotificationEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::Notification *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::Notification *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::Notification::~Notification(v4, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
}

{
  WTF::StringImpl *v3;
  WebCore::Notification *v4;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::Notification *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::Notification::~Notification(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

WTF::StringImpl *WebCore::NotificationJSONParser::parseNotificationPayload@<X0>(WebCore::NotificationJSONParser *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const char **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::JSONImpl::Value *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::JSONImpl::Value *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::JSONImpl::Value *v29;
  WTF::StringImpl *result;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  WTF::JSONImpl::Value *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  __int16 v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unsigned __int16 v60;
  BOOL v61;
  WTF::JSONImpl::Value *v62;
  WTF::StringImpl *v63;
  int v64;
  uint64_t v65;
  WTF::JSONImpl::Value *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::JSONImpl::Value *v70;
  unint64_t v71;
  char v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::JSONImpl::Value *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  __int128 v87;
  __int128 v88;
  WTF::JSONImpl::Value *v89;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  char *v93;
  int v94;
  const char *v95;
  __int128 v96;
  __int128 v97;
  const char **v98;
  __int16 v99;
  unsigned int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v86 = 0;
  WTF::URL::invalidate((WTF::URL *)&v86);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v95);
  v6 = (WTF::StringImpl *)v95;
  v95 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = &v95;
  if (v89)
  {
    if (*((_DWORD *)v89 + 1) != 4)
    {
      v95 = "Push message with Notification disposition: '";
      LODWORD(v96) = 45;
      v93 = "default_action_url";
      v94 = 18;
      v91 = (WTF::StringImpl *)"' member is specified but is not a string";
      v92 = 41;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v95, (uint64_t)&v93, (uint64_t)&v91, &v85);
      v26 = v85;
      if (!v85)
      {
        __break(0xC471u);
        JUMPOUT(0x1954D9860);
      }
      *(_BYTE *)a2 = 9;
      *(_QWORD *)(a2 + 8) = v26;
      *(_DWORD *)(a2 + 136) = 1;
      v85 = 0;
      goto LABEL_49;
    }
    WTF::JSONImpl::Value::asString(v89);
    MEMORY[0x19AEA52D4](&v95, &v93, 0);
    v9 = (WTF::StringImpl *)v95;
    v95 = 0;
    v10 = v86;
    v86 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        v11 = (WTF::StringImpl *)v95;
      }
      else
      {
        v11 = 0;
        *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      v11 = 0;
    }
    v87 = v96;
    LODWORD(v96) = v96 & 0xFFFFFFFE;
    v88 = v97;
    v95 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = (WTF::StringImpl *)v93;
    v93 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v89;
    v89 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v13;
    }
  }
  if ((v87 & 1) == 0)
  {
    v95 = "Push message with Notification disposition: '";
    LODWORD(v96) = 45;
    v93 = "default_action_url";
    v94 = 18;
    v91 = (WTF::StringImpl *)"' member is specified but does not represent a valid URL";
    v92 = 56;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v95, (uint64_t)&v93, (uint64_t)&v91, &v84);
    v15 = v84;
    if (v84)
    {
      *(_BYTE *)a2 = 9;
      *(_QWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 136) = 1;
      v84 = 0;
      goto LABEL_52;
    }
    goto LABEL_168;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (char *)v95;
  WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v93);
  v17 = (WTF::StringImpl *)v93;
  v93 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (!v89)
  {
    v18 = 0;
    goto LABEL_42;
  }
  if (*((_DWORD *)v89 + 1) != 4)
  {
    v95 = "Push message with Notification disposition: '";
    LODWORD(v96) = 45;
    v93 = "title";
    v94 = 5;
    v91 = (WTF::StringImpl *)"' member is specified but is not a string";
    v92 = 41;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v95, (uint64_t)&v93, (uint64_t)&v91, &v83);
    v28 = v83;
    if (!v83)
    {
      __break(0xC471u);
      JUMPOUT(0x1954D9870);
    }
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 8) = v28;
    *(_DWORD *)(a2 + 136) = 1;
    v83 = 0;
LABEL_49:
    v29 = v89;
    v89 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v29;
    }
    goto LABEL_52;
  }
  WTF::JSONImpl::Value::asString(v89);
  v18 = (WTF::StringImpl *)v95;
  v19 = v89;
  v89 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WTF::JSONImpl::Value::operator delete();
      if (!v18)
        goto LABEL_42;
      goto LABEL_30;
    }
    --*(_DWORD *)v19;
  }
  if (!v18)
  {
LABEL_42:
    v95 = "Push message with Notification disposition: '";
    LODWORD(v96) = 45;
    v93 = "title";
    v94 = 5;
    v91 = (WTF::StringImpl *)"' member is missing or is an empty string";
    v92 = 41;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v95, (uint64_t)&v93, (uint64_t)&v91, &v82);
    v27 = v82;
    if (!v82)
    {
      __break(0xC471u);
      JUMPOUT(0x1954D9868);
    }
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 8) = v27;
    *(_DWORD *)(a2 + 136) = 1;
    v82 = 0;
    goto LABEL_44;
  }
LABEL_30:
  if (!*((_DWORD *)v18 + 1))
    goto LABEL_42;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (char *)v95;
  WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v93);
  v21 = (WTF::StringImpl *)v93;
  v93 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (!v89)
  {
    LOBYTE(v25) = 0;
    v31 = 0;
    goto LABEL_103;
  }
  v22 = *((_DWORD *)v89 + 1);
  if ((v22 - 2) >= 2)
  {
    if (v22 != 4)
    {
      v95 = "Push message with Notification disposition: '";
      LODWORD(v96) = 45;
      v93 = "app_badge";
      v94 = 9;
      v91 = (WTF::StringImpl *)"' member is specified but is not a string or a number";
      v92 = 53;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v95, (uint64_t)&v93, (uint64_t)&v91, &v80);
      v43 = v80;
      if (!v80)
      {
        __break(0xC471u);
        JUMPOUT(0x1954D988CLL);
      }
      *(_BYTE *)a2 = 9;
      *(_QWORD *)(a2 + 8) = v43;
      *(_DWORD *)(a2 + 136) = 1;
      v80 = 0;
      goto LABEL_148;
    }
    WTF::JSONImpl::Value::asString(v89);
    v33 = (WTF::StringImpl *)v95;
    if (!v95)
      goto LABEL_166;
    v34 = *((unsigned int *)v95 + 1);
    if ((v95[16] & 4) != 0)
    {
      if ((_DWORD)v34)
      {
        v35 = 0;
        v44 = (unsigned __int8 *)*((_QWORD *)v95 + 1);
        do
        {
          v45 = *v44;
          if ((v45 - 48) > 9)
            goto LABEL_95;
          v38 = 0;
          v25 = 0;
          v46 = !is_mul_ok(v35, 0xAuLL);
          if (is_mul_ok(v35, 0xAuLL))
            v35 *= 10;
          v47 = (v45 - 48);
          v41 = __CFADD__(v35, v47);
          v35 += v47;
          if (v41 || v46)
            goto LABEL_96;
          ++v44;
          --v34;
        }
        while (v34);
LABEL_92:
        v38 = 1;
        v25 = v35;
        goto LABEL_96;
      }
    }
    else if ((_DWORD)v34)
    {
      v35 = 0;
      v36 = (unsigned __int16 *)*((_QWORD *)v95 + 1);
      while (1)
      {
        v37 = *v36;
        if ((v37 - 48) > 9)
          break;
        v38 = 0;
        v25 = 0;
        v39 = !is_mul_ok(v35, 0xAuLL);
        if (is_mul_ok(v35, 0xAuLL))
          v35 *= 10;
        v40 = (v37 - 48);
        v41 = __CFADD__(v35, v40);
        v35 += v40;
        if (v41 || v39)
          goto LABEL_96;
        ++v36;
        if (!--v34)
          goto LABEL_92;
      }
LABEL_95:
      v25 = 0;
      v38 = 0;
LABEL_96:
      v24 = v25 >> 8;
      goto LABEL_97;
    }
    v24 = 0;
    LOBYTE(v25) = 0;
    v38 = 1;
LABEL_97:
    v95 = 0;
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::destroy(v33, v32);
      if (v38)
        goto LABEL_99;
    }
    else
    {
      *(_DWORD *)v33 -= 2;
      if (v38)
        goto LABEL_99;
    }
    v95 = "Push message with Notification disposition: '";
    LODWORD(v96) = 45;
    v93 = "app_badge";
    v94 = 9;
    v91 = (WTF::StringImpl *)"' member is specified as a string that did not parse to a valid unsigned long long";
    v92 = 82;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v95, (uint64_t)&v93, (uint64_t)&v91, &v81);
    v69 = v81;
    if (!v81)
    {
      __break(0xC471u);
LABEL_179:
      JUMPOUT(0x1954D9858);
    }
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 8) = v69;
    *(_DWORD *)(a2 + 136) = 1;
    v81 = 0;
LABEL_148:
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v70;
    }
    goto LABEL_44;
  }
  v23 = WTF::JSONImpl::Value::asInteger(v89);
  if ((v23 & 0xFF00000000) == 0 || (v23 & 0x80000000) != 0)
  {
    v95 = "Push message with Notification disposition: '";
    LODWORD(v96) = 45;
    v93 = "app_badge";
    v94 = 9;
    v91 = (WTF::StringImpl *)"' member is specified as an number but is not a valid unsigned long long";
    v92 = 72;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v95, (uint64_t)&v93, (uint64_t)&v91, &v79);
    v42 = v79;
    if (!v79)
    {
      __break(0xC471u);
      JUMPOUT(0x1954D9884);
    }
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 8) = v42;
    *(_DWORD *)(a2 + 136) = 1;
    v79 = 0;
    goto LABEL_148;
  }
  v24 = v23 >> 8;
  LOBYTE(v25) = v23;
  while (1)
  {
LABEL_99:
    v48 = v89;
    v89 = 0;
    v71 = v24;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v48;
    }
    v31 = 1;
LABEL_103:
    WebCore::NotificationJSONParser::parseNotificationOptions(this, (uint64_t)&v95);
    v49 = v100;
    if (v100)
    {
      if (v100 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_168:
        __break(0xC471u);
        goto LABEL_179;
      }
      v50 = v96;
      if ((_QWORD)v96)
      {
        v51 = *(_DWORD *)(v96 + 4);
        *(_DWORD *)v96 += 2;
        if (v51 < 0 || (v52 = (v51 + 45), __OFADD__(v51, 45)))
        {
          v78 = 0;
          goto LABEL_173;
        }
        v53 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
      }
      else
      {
        v53 = 1;
        v52 = 45;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v52, v53, (int8x16_t *)"Push message with Notification disposition: '", 0x2Du, v50, &v78);
      v55 = v78;
      if (v78)
      {
        *(_BYTE *)a2 = 9;
        *(_QWORD *)(a2 + 8) = v55;
        *(_DWORD *)(a2 + 136) = 1;
        v78 = 0;
        if (!v50)
          goto LABEL_162;
        if (*(_DWORD *)v50 != 2)
        {
          *(_DWORD *)v50 -= 2;
          goto LABEL_162;
        }
        v68 = (WTF::StringImpl *)v50;
        goto LABEL_161;
      }
LABEL_173:
      __break(0xC471u);
      JUMPOUT(0x1954D987CLL);
    }
    v72 = (char)v95;
    v74 = (WTF::StringImpl *)*((_QWORD *)&v96 + 1);
    v75 = (WTF::StringImpl *)v96;
    *(_OWORD *)(v7 + 1) = 0u;
    v56 = (WTF::StringImpl *)*((_QWORD *)&v97 + 1);
    v73 = (WTF::StringImpl *)v97;
    *(_OWORD *)(v7 + 3) = 0u;
    v7 = v98;
    v98 = 0;
    v57 = v99;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v91 = (WTF::StringImpl *)v93;
    WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v91);
    v59 = v91;
    v91 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v58);
      else
        *(_DWORD *)v59 -= 2;
    }
    if (!v77)
    {
      v61 = 0;
      goto LABEL_122;
    }
    if (*((_DWORD *)v77 + 1) != 1)
      break;
    v60 = WTF::JSONImpl::Value::asBoolean(v77);
    if (v60 > 0xFFu)
    {
      v61 = v60 != 0;
      v62 = v77;
      v77 = 0;
      if (*(_DWORD *)v62 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v62;
LABEL_122:
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a2 = v63;
      v64 = v87;
      *(_OWORD *)(a2 + 8) = v87;
      LODWORD(v87) = v64 & 0xFFFFFFFE;
      *(_OWORD *)(a2 + 24) = v88;
      *(_QWORD *)(a2 + 40) = v18;
      *(_QWORD *)(a2 + 48) = v25 | (v71 << 8);
      *(_BYTE *)(a2 + 56) = v31;
      *(_BYTE *)(a2 + 64) = v72;
      *(_QWORD *)(a2 + 72) = v75;
      *(_QWORD *)(a2 + 80) = v74;
      *(_QWORD *)(a2 + 88) = v73;
      *(_QWORD *)(a2 + 96) = v56;
      *(_QWORD *)(a2 + 104) = v7;
      *(_WORD *)(a2 + 112) = v57;
      *(_BYTE *)(a2 + 120) = 1;
      *(_BYTE *)(a2 + 128) = v61;
      *(_DWORD *)(a2 + 136) = 0;
      v18 = 0;
      goto LABEL_162;
    }
    __break(1u);
LABEL_166:
    LOBYTE(v25) = 0;
    v24 = 0;
  }
  v93 = "Push message with Notification disposition: '";
  v94 = 45;
  v91 = (WTF::StringImpl *)"mutable";
  v92 = 7;
  v89 = (WTF::JSONImpl::Value *)"' member is specified but is not a BOOLean";
  v90 = 42;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v93, (uint64_t)&v91, (uint64_t)&v89, &v76);
  v65 = v76;
  if (!v76)
  {
    __break(0xC471u);
    JUMPOUT(0x1954D9894);
  }
  *(_BYTE *)a2 = 9;
  *(_QWORD *)(a2 + 8) = v65;
  *(_DWORD *)(a2 + 136) = 1;
  v66 = v77;
  v76 = 0;
  v77 = 0;
  if (v66)
  {
    v67 = v75;
    if (*(_DWORD *)v66 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v66;
  }
  else
  {
    v67 = v75;
  }
  if (!v7)
  {
LABEL_130:
    if (!v56)
      goto LABEL_133;
    goto LABEL_131;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_130;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v7, v54);
  if (v56)
  {
LABEL_131:
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v54);
    else
      *(_DWORD *)v56 -= 2;
  }
LABEL_133:
  if (!v73)
    goto LABEL_136;
  if (*(_DWORD *)v73 == 2)
  {
    WTF::StringImpl::destroy(v73, v54);
    if (v74)
      goto LABEL_137;
  }
  else
  {
    *(_DWORD *)v73 -= 2;
LABEL_136:
    if (v74)
    {
LABEL_137:
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v54);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (v67)
  {
    if (*(_DWORD *)v67 != 2)
    {
      *(_DWORD *)v67 -= 2;
      goto LABEL_162;
    }
    v68 = v67;
LABEL_161:
    WTF::StringImpl::destroy(v68, v54);
  }
LABEL_162:
  (*(&off_1E33646C0 + v49))((int)&v93, (WebCore::ApplePayInstallmentItem *)&v95);
LABEL_44:
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
LABEL_52:
  result = v86;
  v86 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::NotificationJSONParser::parseNotificationOptions@<X0>(WebCore::NotificationJSONParser *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int16 v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::JSONImpl::Value *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::JSONImpl::Value *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::JSONImpl::Value *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::JSONImpl::Value *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int16 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  WTF::JSONImpl::Value *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::JSONImpl::Value *v51;
  WTF::JSONImpl::Value *v52;
  WTF::StringImpl *v53;
  WTF::JSONImpl::Value *v54;
  WTF::JSONImpl::Value *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::JSONImpl::Value *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::JSONImpl::Value *v70;
  uint64_t v71;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v63);
  v6 = v63;
  v63 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (!v58)
  {
    v11 = 0;
LABEL_18:
    v14 = 1;
    goto LABEL_21;
  }
  if (*((_DWORD *)v58 + 1) == 4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = v63;
    WTF::JSONImpl::ObjectBase::getString(this, (const WTF::String *)&v70);
    v8 = v70;
    v70 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v10 = WebCore::parseEnumerationFromString<WebCore::NotificationDirection>((uint64_t *)&v63);
    v11 = v10;
    if (v10 <= 0xFFu)
    {
      WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v69, 39, "dir", 4, "' member is specified but is not a valid NotificationDirection", 63);
      v12 = v69;
      if (!v69)
      {
        __break(0xC471u);
        JUMPOUT(0x1954DA234);
      }
      v11 = 0;
      *(_BYTE *)a2 = 9;
      *(_QWORD *)(a2 + 8) = v12;
      *(_DWORD *)(a2 + 56) = 1;
      v69 = 0;
    }
    v13 = v63;
    v63 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (v10 < 0x100u)
    {
      v14 = 0;
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v71, 39, "dir", 4, "' member is specified but is not a string", 42);
  v15 = v71;
  if (!v71)
  {
    __break(0xC471u);
    goto LABEL_162;
  }
  v14 = 0;
  v11 = 0;
  *(_BYTE *)a2 = 9;
  *(_QWORD *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 56) = 1;
  v71 = 0;
LABEL_21:
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      if (!v14)
        return result;
      goto LABEL_25;
    }
    --*(_DWORD *)result;
  }
  if (!v14)
    return result;
LABEL_25:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v70 = v63;
  WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v70);
  v18 = v70;
  v70 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (!v58)
  {
    v19 = 0;
LABEL_33:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = v63;
    WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v70);
    v22 = v70;
    v70 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (v58)
    {
      if (*((_DWORD *)v58 + 1) != 4)
      {
        WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v67, 39, "body", 5, "' member is specified but is not a string", 42);
        v31 = v67;
        if (!v67)
        {
          __break(0xC471u);
          JUMPOUT(0x1954DA244);
        }
        *(_BYTE *)a2 = 9;
        *(_QWORD *)(a2 + 8) = v31;
        *(_DWORD *)(a2 + 56) = 1;
        v67 = 0;
        result = v58;
        v58 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
        goto LABEL_127;
      }
      WTF::JSONImpl::Value::asString(v58);
      v23 = v63;
      v24 = v58;
      v58 = 0;
      if (*(_DWORD *)v24 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v24;
    }
    else
    {
      v23 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = v63;
    WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v70);
    v27 = v70;
    v70 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (v58)
    {
      if (*((_DWORD *)v58 + 1) != 4)
      {
        WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v66, 39, "tag", 4, "' member is specified but is not a string", 42);
        v40 = v66;
        if (!v66)
        {
          __break(0xC471u);
          JUMPOUT(0x1954DA24CLL);
        }
        *(_BYTE *)a2 = 9;
        *(_QWORD *)(a2 + 8) = v40;
        *(_DWORD *)(a2 + 56) = 1;
        v66 = 0;
        result = v58;
        v58 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
        goto LABEL_124;
      }
      WTF::JSONImpl::Value::asString(v58);
      v28 = v63;
      v29 = v58;
      v58 = 0;
      if (*(_DWORD *)v29 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v29;
    }
    else
    {
      v28 = 0;
    }
    v63 = 0;
    WTF::URL::invalidate((WTF::URL *)&v63);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v62 = v58;
    WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v62);
    v33 = v62;
    v62 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (v70)
    {
      if (*((_DWORD *)v70 + 1) != 4)
      {
        WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v61, 39, "icon", 5, "' member is specified but is not a string", 42);
        v41 = v61;
        if (!v61)
        {
          __break(0xC471u);
          JUMPOUT(0x1954DA254);
        }
        *(_BYTE *)a2 = 9;
        *(_QWORD *)(a2 + 8) = v41;
        *(_DWORD *)(a2 + 56) = 1;
        v61 = 0;
        goto LABEL_103;
      }
      WTF::JSONImpl::Value::asString(v70);
      MEMORY[0x19AEA52D4](&v58, &v62, 0);
      v35 = v58;
      v58 = 0;
      v36 = v63;
      v63 = v35;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v34);
          v37 = v58;
        }
        else
        {
          v37 = 0;
          *(_DWORD *)v36 -= 2;
        }
      }
      else
      {
        v37 = 0;
      }
      v64 = v59;
      LODWORD(v59) = v59 & 0xFFFFFFFE;
      v65 = v60;
      v58 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v34);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = v62;
      v62 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
      if ((v64 & 1) == 0)
      {
        WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v57, 39, "icon", 5, "' member is specified but does not represent a valid URL", 57);
        v39 = v57;
        if (!v57)
        {
          __break(0xC471u);
          JUMPOUT(0x1954DA25CLL);
        }
        *(_BYTE *)a2 = 9;
        *(_QWORD *)(a2 + 8) = v39;
        *(_DWORD *)(a2 + 56) = 1;
        v57 = 0;
        goto LABEL_103;
      }
      v42 = v70;
      v70 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v42;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v62 = v58;
    WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v62);
    v44 = v62;
    v62 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v43);
      else
        *(_DWORD *)v44 -= 2;
    }
    if (!v70)
    {
      v47 = 0;
      v46 = 0;
LABEL_96:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v70 = v58;
      WTF::JSONImpl::ObjectBase::getValue(this, (const WTF::String *)&v70);
      v49 = v70;
      v70 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v30);
        else
          *(_DWORD *)v49 -= 2;
      }
      if (v58)
      {
        WTF::JSONImpl::Value::toJSONString(v58);
      }
      else
      {
        v52 = (WTF::JSONImpl::Value *)*MEMORY[0x1E0CBF6F0];
        if (*MEMORY[0x1E0CBF6F0])
          *(_DWORD *)v52 += 2;
        v70 = v52;
      }
      v53 = v63;
      if (v63)
        *(_DWORD *)v63 += 2;
      v54 = v70;
      *(_BYTE *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v19;
      *(_QWORD *)(a2 + 16) = v23;
      *(_QWORD *)(a2 + 24) = v28;
      *(_QWORD *)(a2 + 32) = v53;
      *(_QWORD *)(a2 + 40) = v54;
      *(_WORD *)(a2 + 48) = v46 | (v47 << 8);
      *(_DWORD *)(a2 + 56) = 0;
      v55 = v58;
      v58 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v55;
      }
      v28 = 0;
      v23 = 0;
      v19 = 0;
LABEL_118:
      result = v63;
      v63 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
          if (!v28)
            goto LABEL_124;
          goto LABEL_122;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v28)
        goto LABEL_124;
LABEL_122:
      if (*(_DWORD *)v28 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v30);
      else
        *(_DWORD *)v28 -= 2;
LABEL_124:
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v30);
        else
          *(_DWORD *)v23 -= 2;
      }
LABEL_127:
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v19, v30);
        else
          *(_DWORD *)v19 -= 2;
      }
      return result;
    }
    if (*((_DWORD *)v70 + 1) == 1)
    {
      v45 = WTF::JSONImpl::Value::asBoolean(v70);
      v46 = v45;
      v47 = HIBYTE(v45);
      v48 = v70;
      v70 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v48;
      }
      goto LABEL_96;
    }
    WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v56, 39, "silent", 7, "' member is specified but is not a BOOLean", 43);
    v50 = v56;
    if (v56)
    {
      *(_BYTE *)a2 = 9;
      *(_QWORD *)(a2 + 8) = v50;
      *(_DWORD *)(a2 + 56) = 1;
      v56 = 0;
LABEL_103:
      v51 = v70;
      v70 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v51;
      }
      goto LABEL_118;
    }
    __break(0xC471u);
LABEL_162:
    JUMPOUT(0x1954DA22CLL);
  }
  if (*((_DWORD *)v58 + 1) == 4)
  {
    WTF::JSONImpl::Value::asString(v58);
    v19 = v63;
    v20 = v58;
    v58 = 0;
    if (*(_DWORD *)v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v20;
    goto LABEL_33;
  }
  WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v68, 39, "lang", 5, "' member is specified but is not a string", 42);
  v25 = v68;
  if (!v68)
  {
    __break(0xC471u);
    JUMPOUT(0x1954DA23CLL);
  }
  *(_BYTE *)a2 = 9;
  *(_QWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 56) = 1;
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::NotificationJSONParser *WebCore::NotificationPayload::parseJSON@<X0>(uint64_t a1@<X8>)
{
  unsigned int v4;
  WebCore::NotificationJSONParser *result;
  WebCore::NotificationJSONParser *v6;

  WTF::JSONImpl::Value::parseJSON();
  if (!v6 || (v4 = *((_DWORD *)v6 + 1), v4 < 5))
  {
LABEL_3:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a1 = 9;
    *(_DWORD *)(a1 + 136) = 1;
    goto LABEL_4;
  }
  if (v4 != 5)
  {
    if (v4 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x1954DA340);
    }
    goto LABEL_3;
  }
  ++*(_DWORD *)v6;
  WebCore::NotificationJSONParser::parseNotificationPayload(v6, a1);
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v6;
LABEL_4:
  result = v6;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      return (WebCore::NotificationJSONParser *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v6;
  }
  return result;
}

uint64_t WebCore::Notification::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::Notification *WebCore::Notification::deref(WebCore::Notification *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::Notification::~Notification(this, a2);
    return (WebCore::Notification *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::Notification::eventTargetInterface(WebCore::Notification *this)
{
  return 15;
}

uint64_t WebCore::Notification::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::Notification *WebCore::Notification::derefEventTarget(WebCore::Notification *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::Notification::~Notification(this, a2);
    return (WebCore::Notification *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Notification::eventTargetInterface(WebCore::Notification *this)
{
  return 15;
}

uint64_t `non-virtual thunk to'WebCore::Notification::scriptExecutionContext(WebCore::Notification *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::Notification::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Notification::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::Notification::~Notification((WebCore::Notification *)(this - 32), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

_QWORD *WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::add<WebCore::Notification *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;
  int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v6 = qword_1ECE82098;
  if (qword_1ECE82098
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(0),
        (v6 = qword_1ECE82098) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = a2[1];
  v10 = (v9 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v9 - 1640531527) << 16) ^ ((unsigned __int16)v9
                                                                                           - 1640531527);
  v11 = (v9 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v9) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v9) + (v10 >> 11));
  v12 = v11 + (unsigned __int16)*a2 + (v11 >> 11);
  v13 = (*a2 >> 5) & 0x7FFF800 ^ (v12 << 16) ^ v12;
  v14 = v13 + (unsigned __int16)WORD2(*a2) + (v13 >> 11);
  v15 = (*a2 >> 37) & 0x7FFF800 ^ (v14 << 16) ^ v14;
  v16 = (v15 + (v15 >> 11)) ^ (8 * (v15 + (v15 >> 11)));
  v17 = (v16 + (v16 >> 5)) ^ (4 * (v16 + (v16 >> 5)));
  v18 = (v17 + (v17 >> 15)) ^ ((v17 + (v17 >> 15)) << 10);
  if (!v18)
    v18 = 0x800000;
  v19 = v18 & v8;
  v20 = (_QWORD *)(v6 + 32 * v19);
  v22 = *v20;
  v21 = v20[1];
  if (*(_OWORD *)v20 == 0)
  {
LABEL_17:
    result = v20;
  }
  else
  {
    result = 0;
    v24 = 1;
    do
    {
      if (v21 == v9 && v22 == *a2)
      {
        if ((v7 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v6 - 4);
        v31 = 0;
        v32 = v6 + 32 * v28;
        goto LABEL_33;
      }
      if (!(v22 ^ 1 | v21))
        result = v20;
      v19 = ((_DWORD)v19 + v24) & v8;
      v20 = (_QWORD *)(v6 + 32 * v19);
      v22 = *v20;
      v21 = v20[1];
      ++v24;
    }
    while (*(_OWORD *)v20 != 0);
    if (!result)
      goto LABEL_17;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    --*(_DWORD *)(v6 - 16);
    v6 = qword_1ECE82098;
  }
  *(_OWORD *)result = *(_OWORD *)a2;
  result[2] = *a3;
  ++*(_DWORD *)(v6 - 12);
  v26 = qword_1ECE82098;
  if (qword_1ECE82098)
    v27 = *(_DWORD *)(qword_1ECE82098 - 12);
  else
    v27 = 0;
  v29 = (*(_DWORD *)(qword_1ECE82098 - 16) + v27);
  v30 = *(unsigned int *)(qword_1ECE82098 - 4);
  if (v30 > 0x400)
  {
    if (v30 <= 2 * v29)
    {
LABEL_25:
      result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand((uint64_t)result);
      v26 = qword_1ECE82098;
      if (qword_1ECE82098)
        v30 = *(unsigned int *)(qword_1ECE82098 - 4);
      else
        v30 = 0;
    }
  }
  else if (3 * v30 <= 4 * v29)
  {
    goto LABEL_25;
  }
  v32 = v26 + 32 * v30;
  v31 = 1;
  v20 = result;
LABEL_33:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *result;

  v2 = qword_1ECE82098;
  if (qword_1ECE82098)
  {
    LODWORD(v3) = *(_DWORD *)(qword_1ECE82098 - 4);
    v4 = *(_DWORD *)(qword_1ECE82098 - 12);
    if ((_DWORD)v3)
    {
      v5 = (_DWORD)v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = v5;
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  if (v5)
  {
    v9 = v7 + 4;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9 += 4;
      --v6;
    }
    while (v6);
  }
  qword_1ECE82098 = (uint64_t)(v7 + 4);
  v7[2] = v5 - 1;
  v7[3] = v5;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE82098 - 12) = v4;
  v10 = 0;
  if ((_DWORD)v3)
  {
    v3 = v3;
    v11 = v2;
    do
    {
      v8 = *(void **)(v11 + 8);
      if (*(_OWORD *)v11 >= 2uLL)
      {
        v12 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::lookupForReinsert(*(_QWORD *)v11, (unint64_t)v8);
        v13 = *(_OWORD *)(v11 + 16);
        *v12 = *(_OWORD *)v11;
        v12[1] = v13;
        if (v11 == a1)
          v10 = v12;
      }
      v11 += 32;
      --v3;
    }
    while (v3);
  }
  else
  {
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v8);
  return v10;
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::lookupForReinsert(unint64_t a1, unint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _OWORD *result;

  if (qword_1ECE82098)
    v2 = *(_DWORD *)(qword_1ECE82098 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                          - 1640531527);
  v5 = (a2 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a2) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a2) + (v4 >> 11));
  v6 = (a1 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a1 + (v5 >> 11)) << 16) ^ (v5
                                                                                               + (unsigned __int16)a1
                                                                                               + (v5 >> 11));
  v7 = (a1 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a1) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a1) + (v6 >> 11));
  v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
  v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
  v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
  if (!v10)
    v10 = 0x800000;
  do
  {
    v11 = v10 & v2;
    result = (_OWORD *)(qword_1ECE82098 + 32 * v11);
    v10 = ++v3 + v11;
  }
  while (*result != 0);
  return result;
}

void std::default_delete<WebCore::NotificationResourcesLoader>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;

  if (this)
  {
    v3 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr((unsigned int *)v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)v3));
      if (!v5)
      {
        atomic_store(1u, (unsigned int *)v3);
        v11 = *(_DWORD **)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v11)
        {
          if (v11[2] == 1)
          {
            v12 = v3;
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
            v3 = v12;
          }
          else
          {
            --v11[2];
          }
        }
        WTF::fastFree((WTF *)v3, this);
      }
    }
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v7)
      {
        v8 = (uint64_t *)*((_QWORD *)this + 3);
        do
        {
          v9 = *v8;
          if (*v8 != -1)
          {
            *v8 = 0;
            if (v9)
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          }
          ++v8;
          --v7;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)(v6 - 16), this);
    }
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WTF::fastFree(this, this);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Notification::requestPermission(WebCore::Document &,WTF::RefPtr<WebCore::NotificationPermissionCallback,WTF::RawPtrTraits<WebCore::NotificationPermissionCallback>,WTF::DefaultRefDerefTraits<WebCore::NotificationPermissionCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::NotificationPermission)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E33646A8;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Notification::requestPermission(WebCore::Document &,WTF::RefPtr<WebCore::NotificationPermissionCallback,WTF::RawPtrTraits<WebCore::NotificationPermissionCallback>,WTF::DefaultRefDerefTraits<WebCore::NotificationPermissionCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::NotificationPermission)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33646A8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Notification::requestPermission(WebCore::Document &,WTF::RefPtr<WebCore::NotificationPermissionCallback,WTF::RawPtrTraits<WebCore::NotificationPermissionCallback>,WTF::DefaultRefDerefTraits<WebCore::NotificationPermissionCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::NotificationPermission)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  int v16;
  _BYTE v17[8];

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(unsigned int *)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_QWORD *)v4 && (*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = (WTF::StringImpl *)*(unsigned int *)(a1 + 24);
    v6 = *(_QWORD *)(v3 + 32);
    if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
      v7 = 0;
    else
      v7 = *(uint64_t **)v6;
    v8 = v7[7];
    MEMORY[0x19AEA3294](v17, v8);
    v9 = (objc_class *)WebCore::convertEnumerationToJS<WebCore::NotificationPermission>(v7[7], v5);
    v10 = *(_QWORD *)(v8 + 16);
    if (!v10)
    {
      WebCore::DeferredPromise::callFunction(v3, v7, 0, v9);
      v10 = *(_QWORD *)(v8 + 16);
      if (!v10)
        return MEMORY[0x19AEA32A0](v17);
    }
    v11 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
    if (!(*(unsigned int (**)(_QWORD *))(*v11 + 64))(v11))
    {
LABEL_14:
      WebCore::reportException((JSC::JSGlobalObject *)v7, v10, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v17);
    }
    v12 = v11[43];
    if (*(_QWORD *)(v8 + 24) == v10)
    {
LABEL_28:
      *(_BYTE *)(*(_QWORD *)(v12 + 8) + 93442) = 1;
      *(_BYTE *)(v3 + 44) = 1;
      goto LABEL_14;
    }
    if (!v12)
      goto LABEL_14;
    v13 = (unsigned __int8 *)(v12 + 40);
    if (__ldaxr((unsigned __int8 *)(v12 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_22;
    }
    MEMORY[0x19AEA534C](v12 + 40);
LABEL_22:
    v15 = *(unsigned __int8 *)(v12 + 41);
    v16 = __ldxr(v13);
    if (v16 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_27:
        if (!v15)
          goto LABEL_14;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 40));
    goto LABEL_27;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26NotificationOptionsPayloadENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayInstallmentItem *this)
{
  WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26NotificationOptionsPayloadENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::Notification>(WebCore::Notification &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::Notification>(WebCore::Notification &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::Notification>(WebCore::Notification &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::Notification>(WebCore::Notification &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::Notification *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E33646F0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::Notification::~Notification((WebCore::Notification *)v7, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::Notification *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::Notification::~Notification(v5, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Notification::showSoon(void)::$_0,void>::call(uint64_t a1)
{
  unsigned int *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(unsigned int **)(a1 + 8);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E32C3F40;
  v4 = v2;
  WebCore::Notification::show(v1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Notification::show(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3364740;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Notification::show(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3364740;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::Notification::show(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t (***v14)(_QWORD, uint64_t, _BYTE *, WTF **, uint64_t *);
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v23;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  _BYTE v30[248];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v4 = a1[3];
  a1[3] = 0;
  v5 = *(_QWORD *)(v3 + 8);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = v6 - 96;
    v8 = *(unsigned __int8 *)(v6 + 178);
    if (*(_BYTE *)(v6 + 178))
    {
      if (v8 == 1 || v8 == 2)
      {
        v9 = 0;
        ++*(_DWORD *)(v6 + 216);
      }
      else
      {
        v9 = 0;
      }
    }
    else
    {
      v9 = 0;
      *(_DWORD *)(v6 - 264) += 2;
    }
  }
  else
  {
    v7 = 0;
    v9 = 1;
  }
  v10 = *a2;
  *a2 = 0;
  v11 = *(_QWORD *)(v3 + 272);
  *(_QWORD *)(v3 + 272) = v10;
  if (!v11)
    goto LABEL_9;
  do
  {
    v12 = __ldaxr((unsigned int *)v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)v11));
  if (v13)
  {
LABEL_9:
    if (!v7)
      goto LABEL_21;
    goto LABEL_10;
  }
  atomic_store(1u, (unsigned int *)v11);
  v25 = *(_DWORD **)(v11 + 8);
  *(_QWORD *)(v11 + 8) = 0;
  if (v25)
  {
    if (v25[2] == 1)
    {
      v27 = v11;
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
      v11 = v27;
    }
    else
    {
      --v25[2];
    }
  }
  WTF::fastFree((WTF *)v11, a2);
  if (v7)
  {
LABEL_10:
    if (!*(_DWORD *)(v3 + 212))
    {
      v14 = (uint64_t (***)(_QWORD, uint64_t, _BYTE *, WTF **, uint64_t *))a1[2];
      WebCore::Notification::data((WebCore::Notification *)v3, (uint64_t)v30);
      v15 = *(unsigned int **)(v3 + 272);
      if (v15)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      v28 = v4;
      v29 = (WTF *)v15;
      v18 = (**v14)(v14, v7, v30, &v29, &v28);
      v19 = v28;
      v28 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      v20 = v29;
      v29 = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr((unsigned int *)v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, (unsigned int *)v20));
        if (!v22)
        {
          atomic_store(1u, (unsigned int *)v20);
          v26 = (_DWORD *)*((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          if (v26)
          {
            if (v26[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[2];
          }
          WTF::fastFree(v20, v17);
        }
      }
      WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v30, v17);
      if (v18)
      {
        v4 = 0;
        *(_DWORD *)(v3 + 212) = 1;
      }
      else
      {
        v4 = 0;
      }
    }
  }
LABEL_21:
  v23 = *(WTF **)(v3 + 264);
  *(_QWORD *)(v3 + 264) = 0;
  if (v23)
    std::default_delete<WebCore::NotificationResourcesLoader>::operator()[abi:sn180100](v3 + 264, v23);
  if ((v9 & 1) == 0)
  {
    v24 = *(unsigned __int8 *)(v7 + 274);
    if (*(_BYTE *)(v7 + 274))
    {
      if (v24 == 1)
      {
        if (*(_DWORD *)(v7 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        else
          --*(_DWORD *)(v7 + 312);
      }
      else if (v24 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 312));
      }
    }
    else if (*(_DWORD *)(v7 - 168) == 2)
    {
      if ((*(_WORD *)(v7 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 192), v23);
    }
    else
    {
      *(_DWORD *)(v7 - 168) -= 2;
    }
  }
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

WTF *WTF::Detail::CallableWrapper<WebCore::Notification::dispatchClickEvent(void)::$_0,void>::call(WebCore *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::EventTarget *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  _DWORD *v11;
  WTF *result;

  v1 = *((_QWORD *)a1 + 1);
  v2 = WebCore::s_windowFocusAllowed;
  WebCore::s_windowFocusAllowed = 1;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow(a1);
  v5 = (WebCore::EventTarget *)(v1 + 32);
  v6 = *(_QWORD *)(v4 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v6 = *(_QWORD *)(v4 + 40);
  }
  v7 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  *(_QWORD *)v7 = off_1E33A4B48;
  *(_QWORD *)(v7 + 8) = 0;
  v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8200;
  v10 = *(_QWORD *)(v6 + 400) != 0;
  *(_DWORD *)(v7 + 16) = 1;
  *(_DWORD *)(v7 + 20) = v9 | v10;
  v11 = *(_DWORD **)(v6 + 400);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v7 + 24) = v11;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = 0;
  result = WebCore::EventTarget::dispatchEvent(v5, (WebCore::Event *)v7);
  if (*(_DWORD *)(v7 + 16) == 1)
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  else
    --*(_DWORD *)(v7 + 16);
  WebCore::s_windowFocusAllowed = v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Notification::requestPermission(WebCore::Document &,WTF::RefPtr<WebCore::NotificationPermissionCallback,WTF::RawPtrTraits<WebCore::NotificationPermissionCallback>,WTF::DefaultRefDerefTraits<WebCore::NotificationPermissionCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::NotificationPermission>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  *a1 = &off_1E3364790;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Notification::requestPermission(WebCore::Document &,WTF::RefPtr<WebCore::NotificationPermissionCallback,WTF::RawPtrTraits<WebCore::NotificationPermissionCallback>,WTF::DefaultRefDerefTraits<WebCore::NotificationPermissionCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::NotificationPermission>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3364790;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Notification::requestPermission(WebCore::Document &,WTF::RefPtr<WebCore::NotificationPermissionCallback,WTF::RawPtrTraits<WebCore::NotificationPermissionCallback>,WTF::DefaultRefDerefTraits<WebCore::NotificationPermissionCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::NotificationPermission>::call(uint64_t a1, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;

  v2 = (int)a2;
  v4 = WebCore::Document::eventLoop(*(WebCore::Document **)(a1 + 8), a2);
  v7 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = &off_1E33646A8;
  *(_OWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 24) = v2;
  v8 = v5;
  WebCore::EventLoopTaskGroup::queueTask(v4, 0, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Notification::ensureOnNotificationThread(WebCore::ProcessQualified<WTF::UUID>,WTF::UUID,WTF::Function<void ()(WebCore::Notification*)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33647B8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Notification::ensureOnNotificationThread(WebCore::ProcessQualified<WTF::UUID>,WTF::UUID,WTF::Function<void ()(WebCore::Notification*)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33647B8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Notification::ensureOnNotificationThread(WebCore::ProcessQualified<WTF::UUID>,WTF::UUID,WTF::Function<void ()(WebCore::Notification*)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t *v19;
  BOOL v20;
  WebCore::Notification *v21;
  char v22;
  int v23;
  uint64_t result;
  void *v25;
  bmalloc::api *v26;
  void *v27;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_144))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_144))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_144);
LABEL_5:
  if ((byte_1ECE82091 & 1) != 0)
  {
    if (qword_1ECE82098)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v3 = *(_QWORD *)(a1 + 24);
      v5 = *(_DWORD *)(qword_1ECE82098 - 8);
      v6 = (v3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v3 - 1640531527) << 16) ^ ((unsigned __int16)v3
                                                                                              - 1640531527);
      v7 = (v3 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(v3) + (v6 >> 11)) << 16) ^ (v6 + WORD2(v3) + (v6 >> 11));
      v8 = (v4 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v4 + (v7 >> 11)) << 16) ^ (v7 + (unsigned __int16)v4 + (v7 >> 11));
      v9 = (v4 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v4) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v4) + (v8 >> 11));
      v10 = (v9 + (v9 >> 11)) ^ (8 * (v9 + (v9 >> 11)));
      v11 = (v10 + (v10 >> 5)) ^ (4 * (v10 + (v10 >> 5)));
      v12 = (v11 + (v11 >> 15)) ^ ((v11 + (v11 >> 15)) << 10);
      if (!v12)
        v12 = 0x800000;
      v13 = v5 & v12;
      v14 = (uint64_t *)(qword_1ECE82098 + 32 * v13);
      v15 = *v14;
      v16 = v14[1];
      if (v16 == v3 && v15 == v4)
      {
LABEL_20:
        v21 = *(WebCore::Notification **)(qword_1ECE82098 + 32 * v13 + 16);
        if (v21)
        {
          v22 = 0;
          ++*((_DWORD *)v21 + 6);
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      v18 = 1;
      while (v15 | v16)
      {
        v13 = ((_DWORD)v13 + v18) & v5;
        v19 = (uint64_t *)(qword_1ECE82098 + 32 * v13);
        v15 = *v19;
        v16 = v19[1];
        v20 = v16 == v3 && v15 == v4;
        ++v18;
        if (v20)
          goto LABEL_20;
      }
    }
    v21 = 0;
LABEL_23:
    v22 = 1;
    goto LABEL_24;
  }
  v21 = 0;
  qword_1ECE82098 = 0;
  v22 = 1;
  byte_1ECE82091 = 1;
LABEL_24:
  v23 = __ldxr((unsigned __int8 *)&_MergedGlobals_144);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_144))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_144);
  result = (*(uint64_t (**)(_QWORD, WebCore::Notification *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v21);
  if ((v22 & 1) == 0)
  {
    if (*((_DWORD *)v21 + 6) == 1)
    {
      WebCore::Notification::~Notification(v21, v25);
      return bmalloc::api::isoDeallocate(v26, v27);
    }
    else
    {
      --*((_DWORD *)v21 + 6);
    }
  }
  return result;
}

_BYTE *WTF::tryMakeString<char,WTF::ASCIILiteral,WTF::ASCIILiteral>(_BYTE *result, char a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  _QWORD *v9;
  size_t v10;
  size_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v9 = result;
  if (a4)
  {
    v10 = a4 - 1;
    if ((unint64_t)(a4 - 1) >> 31)
      goto LABEL_23;
  }
  else
  {
    v10 = 0;
  }
  if (a6)
  {
    v11 = a6 - 1;
    if (!((unint64_t)(a6 - 1) >> 31))
      goto LABEL_5;
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1954DB7A8);
  }
  v11 = 0;
LABEL_5:
  v12 = v10 + v11;
  if (__OFADD__((_DWORD)v10, (_DWORD)v11)
    || (v13 = (v12 + 1), __OFADD__(v12, 1))
    || (v13 & 0x80000000) != 0)
  {
    v14 = 0;
    goto LABEL_15;
  }
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
  v14 = v16;
  if (v16)
  {
    *(_DWORD *)v16 = 2;
    *(_DWORD *)(v16 + 4) = v13;
    *(_BYTE *)(v16 + 20) = a2;
    *(_QWORD *)(v16 + 8) = v16 + 20;
    *(_DWORD *)(v16 + 16) = 4;
    v15 = (_BYTE *)(v16 + 21);
    if ((_DWORD)v10)
    {
      if ((_DWORD)v10 == 1)
      {
        *v15 = *a3;
        if (!(_DWORD)v11)
          goto LABEL_15;
LABEL_13:
        result = &v15[v10];
        if ((_DWORD)v11 == 1)
          *result = *a5;
        else
          result = memcpy(result, a5, v11);
        goto LABEL_15;
      }
      result = memcpy((void *)(v16 + 21), a3, v10);
    }
    if (!(_DWORD)v11)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_15:
  *v9 = v14;
  return result;
}

uint64_t WebCore::NotificationResourcesLoader::stop(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  WTF *v39;

  if (!*(_BYTE *)(this + 8))
  {
    v1 = this;
    *(_BYTE *)(this + 8) = 1;
    v3 = *(_QWORD *)(this + 16);
    v2 = *(_QWORD **)(this + 24);
    for (*(_QWORD *)(this + 16) = 0; v2; v2 = *(_QWORD **)(v1 + 24))
    {
      if (!*((_DWORD *)v2 - 3))
        break;
      v4 = *((unsigned int *)v2 - 1);
      v5 = v2;
      if ((_DWORD)v4)
      {
        v6 = 8 * v4;
        v5 = v2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          ++v5;
          v6 -= 8;
          if (!v6)
            goto LABEL_15;
        }
      }
      if (&v2[v4] == v5)
      {
LABEL_15:
        v7 = 0;
      }
      else
      {
        v7 = (_QWORD *)*v5;
        *v5 = 0;
        v8 = *(_QWORD **)(v1 + 24);
        if (!v8 || (v8 += *((unsigned int *)v8 - 1), v8 != v5))
        {
          if (v8 != v5)
          {
            *v5 = -1;
            ++*(_DWORD *)(*(_QWORD *)(v1 + 24) - 16);
            v9 = *(_QWORD *)(v1 + 24);
            v10 = v9 ? *(_DWORD *)(v9 - 12) - 1 : -1;
            *(_DWORD *)(v9 - 12) = v10;
            v15 = *(_QWORD *)(v1 + 24);
            if (v15)
            {
              v16 = *(_DWORD *)(v15 - 12);
              v17 = *(unsigned int *)(v15 - 4);
              if (6 * v16 < v17 && v17 >= 9)
              {
                v19 = WTF::fastZeroedMalloc((WTF *)(8 * (v17 >> 1) + 16));
                v21 = 0;
                *(_QWORD *)(v1 + 24) = v19 + 16;
                *(_DWORD *)(v19 + 12) = v17 >> 1;
                *(_DWORD *)(*(_QWORD *)(v1 + 24) - 8) = (v17 >> 1) - 1;
                *(_DWORD *)(*(_QWORD *)(v1 + 24) - 16) = 0;
                *(_DWORD *)(*(_QWORD *)(v1 + 24) - 12) = v16;
                do
                {
                  v22 = *(_QWORD *)(v15 + 8 * v21);
                  if (v22 != -1)
                  {
                    if (v22)
                    {
                      v23 = *(_QWORD *)(v1 + 24);
                      if (v23)
                        v24 = *(_DWORD *)(v23 - 8);
                      else
                        v24 = 0;
                      v25 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
                      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
                      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
                      v28 = v24 & ((v27 >> 31) ^ v27);
                      v29 = 1;
                      do
                      {
                        v30 = v28;
                        v31 = *(_QWORD *)(v23 + 8 * v28);
                        v28 = (v28 + v29++) & v24;
                      }
                      while (v31);
                      *(_QWORD *)(v23 + 8 * v30) = 0;
                      v32 = *(_QWORD *)(v15 + 8 * v21);
                      *(_QWORD *)(v15 + 8 * v21) = 0;
                      *(_QWORD *)(v23 + 8 * v30) = v32;
                      v33 = *(_QWORD *)(v15 + 8 * v21);
                      *(_QWORD *)(v15 + 8 * v21) = 0;
                      if (v33)
                        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 64))(v33);
                    }
                    else
                    {
                      *(_QWORD *)(v15 + 8 * v21) = 0;
                    }
                  }
                  ++v21;
                }
                while (v21 != v17);
                WTF::fastFree((WTF *)(v15 - 16), v20);
              }
            }
          }
        }
      }
      v11 = v7[5];
      v12 = v7[6];
      v7[6] = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v13 = v7[5];
      v7[5] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      if (v12)
      {
        v39 = 0;
        (*(void (**)(uint64_t, _QWORD *, WTF **))(*(_QWORD *)v12 + 16))(v12, v7, &v39);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v14 = v39;
        v39 = 0;
        if (v14)
        {
          if (*((_DWORD *)v14 + 2) == 1)
            (*(void (**)(WTF *))(*(_QWORD *)v14 + 8))(v14);
          else
            --*((_DWORD *)v14 + 2);
        }
      }
      this = (*(uint64_t (**)(_QWORD *))(*v7 + 64))(v7);
    }
    if (v3)
    {
      v39 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v39);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v35 = v39;
      v39 = 0;
      if (v35)
      {
        do
        {
          v36 = __ldaxr((unsigned int *)v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, (unsigned int *)v35));
        if (!v37)
        {
          atomic_store(1u, (unsigned int *)v35);
          v38 = (_DWORD *)*((_QWORD *)v35 + 1);
          *((_QWORD *)v35 + 1) = 0;
          if (v38)
          {
            if (v38[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
            else
              --v38[2];
          }
          return WTF::fastFree(v35, v34);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::MerchantValidationEvent::create@<X0>(WebCore::Document *a1@<X0>, _QWORD *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  int v18;
  __int128 v19;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[40];
  int v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  char v33;

  WebCore::Document::completeURL(a1, (_QWORD *)a3 + 2, (uint64_t)a1 + 848, 1, (WTF::URL *)&v30);
  if ((v31 & 1) != 0)
  {
    v8 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = 0;
    v29 = v8;
    if (v8 && *((_DWORD *)v8 + 1))
    {
      result = (uint64_t)WebCore::convertAndValidatePaymentMethodIdentifier(&v29, (uint64_t)v26);
      if (!v28)
      {
        v21 = *((_DWORD *)v8 + 1);
        *(_DWORD *)v8 += 2;
        if (v21 < 0
          || (v22 = __OFADD__(v21, 42), v23 = v21 + 42, v22)
          || (result = (v23 + 1), __OFADD__(v23, 1)))
        {
          v25 = 0;
        }
        else
        {
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, (*((_DWORD *)v8 + 4) >> 2) & 1, 34, (uint64_t)v8, (int8x16_t *)"\" is an invalid payment method identifier.", 0x2Au, &v25);
          v24 = v25;
          if (v25)
          {
            *(_BYTE *)a4 = 32;
            *(_QWORD *)(a4 + 8) = v24;
            *(_DWORD *)(a4 + 16) = 1;
            v25 = 0;
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v7);
            else
              *(_DWORD *)v8 -= 2;
            if (v28 && v27 != -1)
              ((void (*)(char *, _BYTE *))off_1E3364A68[v27])(&v33, v26);
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v7);
            else
              *(_DWORD *)v8 -= 2;
            goto LABEL_10;
          }
        }
        __break(0xC471u);
        return result;
      }
      if (v27 != -1)
        ((void (*)(char *, _BYTE *))off_1E3364A68[v27])(&v33, v26);
    }
    v9 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
    v11 = *a3;
    v12 = a3[1];
    v13 = a3[2];
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 1;
    if (v11)
      v14 = 753666;
    else
      v14 = 753664;
    v15 = v14 | (4 * v12) | (8 * v13) | (*a2 != 0) | *(_DWORD *)(v9 + 20) & 0xFFC00000;
    *(_DWORD *)(v9 + 20) = v15;
    v16 = (_DWORD *)*a2;
    if (*a2)
    {
      *v16 += 2;
      v15 = *(_DWORD *)(v9 + 20);
    }
    *(_QWORD *)(v9 + 24) = v16;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = v10;
    *(_QWORD *)(v9 + 64) = 0;
    *(_DWORD *)(v9 + 20) = v15 | 0x4000;
    *(_QWORD *)v9 = off_1E33649B0;
    *(_BYTE *)(v9 + 72) = 0;
    v17 = v30;
    v30 = 0;
    *(_QWORD *)(v9 + 80) = v8;
    *(_QWORD *)(v9 + 88) = v17;
    v18 = v31;
    v19 = v32;
    *(_OWORD *)(v9 + 96) = v31;
    *(_OWORD *)(v9 + 112) = v19;
    LODWORD(v31) = v18 & 0xFFFFFFFE;
    *(_QWORD *)a4 = v9;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 33;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
LABEL_10:
  result = (uint64_t)v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::convertAndValidatePaymentMethodIdentifier@<X0>(WTF::StringImpl **this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  __int128 v27;
  WTF::StringImpl *v28;

  v5 = *this;
  if (*this)
    *(_DWORD *)v5 += 2;
  v28 = v5;
  MEMORY[0x19AEA52D4](&v22, &v28, 0);
  v7 = v28;
  v28 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if ((v23 & 1) != 0)
  {
    if (WTF::URL::protocolIs())
    {
      v14 = v26;
      v15 = v24;
      if (v26 <= v24)
      {
        *(_QWORD *)a2 = v22;
        v16 = v23;
        v17 = v25;
        *(_DWORD *)(a2 + 8) = v23;
        *(_DWORD *)(a2 + 12) = v15;
        v22 = 0;
        *(_DWORD *)(a2 + 16) = v17;
        *(_DWORD *)(a2 + 20) = v14;
        *(_OWORD *)(a2 + 24) = v27;
        v23 = v16 & 0xFFFFFFFE;
        v18 = 1;
        *(_DWORD *)(a2 + 40) = 1;
        goto LABEL_42;
      }
    }
    goto LABEL_41;
  }
  v8 = *this;
  if (*this)
  {
    v9 = *((unsigned int *)v8 + 1);
    if ((_DWORD)v9)
    {
      v10 = (unsigned __int16 *)*((_QWORD *)v8 + 1);
      if ((*((_BYTE *)v8 + 16) & 4) != 0)
      {
        v11 = 0;
        while (1)
        {
          v13 = *(unsigned __int8 *)v10;
          v10 = (unsigned __int16 *)((char *)v10 + 1);
          v12 = v13;
          if (v11 - 2 < 2)
          {
            if ((v12 - 97) < 0x1A)
              goto LABEL_16;
            if ((v12 - 48) >= 0xA)
            {
              if (v12 != 45)
                goto LABEL_41;
              v11 = 1;
            }
            else
            {
              v11 = 3;
            }
          }
          else if (v11 <= 1)
          {
            if ((v12 - 97) >= 0x1A)
              goto LABEL_41;
LABEL_16:
            v11 = 2;
          }
          if (!--v9)
            goto LABEL_39;
        }
      }
      v11 = 0;
      while (1)
      {
        v20 = *v10++;
        v19 = v20;
        if (v11 < 2)
          break;
        if (v11 - 2 <= 1)
        {
          if ((v19 - 97) >= 0x1A)
          {
            if ((v19 - 48) >= 0xA)
            {
              if (v19 != 45)
                goto LABEL_41;
              v11 = 1;
            }
            else
            {
              v11 = 3;
            }
            goto LABEL_35;
          }
          goto LABEL_34;
        }
LABEL_35:
        if (!--v9)
        {
LABEL_39:
          if ((v11 & 0xFFFFFFFE) == 2)
          {
            *(_DWORD *)v8 += 2;
            *(_QWORD *)a2 = v8;
            *(_DWORD *)(a2 + 40) = 0;
            v18 = 1;
            goto LABEL_42;
          }
          goto LABEL_41;
        }
      }
      if ((v19 - 97) > 0x19)
        goto LABEL_41;
LABEL_34:
      v11 = 2;
      goto LABEL_35;
    }
  }
LABEL_41:
  v18 = 0;
  *(_BYTE *)a2 = 0;
LABEL_42:
  *(_BYTE *)(a2 + 48) = v18;
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MerchantValidationEvent::MerchantValidationEvent(uint64_t a1, _QWORD *a2, _DWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 20) & 0xFFC00000 | 0xB8200 | (*a2 != 0);
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v9;
  v10 = (_DWORD *)*a2;
  if (*a2)
    *v10 += 2;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_1E33649B0;
  *(_BYTE *)(a1 + 72) = 0;
  v11 = *a3;
  if (*a3)
    *v11 += 2;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = *(_DWORD *)(a1 + 96) & 0xFFFFFFFE | a4[1] & 1;
  *(_DWORD *)(a1 + 96) = v13;
  v14 = v13 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a4 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 96) = v14;
  v15 = v14 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a4 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 96) = v15;
  v16 = v15 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a4 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 96) = v16;
  *(_DWORD *)(a1 + 96) = a4[1] & 0xFFFFFFC0 | v16 & 0x3F;
  *(_OWORD *)(a1 + 100) = *(_OWORD *)((char *)a4 + 12);
  *(_QWORD *)(a1 + 116) = *(uint64_t *)((char *)a4 + 28);
  *(_DWORD *)(a1 + 124) = *((_DWORD *)a4 + 9);
  *((_DWORD *)a4 + 2) &= ~1u;
  return a1;
}

uint64_t WebCore::MerchantValidationEvent::complete@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  JSC::Structure *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(result + 21) & 2) != 0)
  {
    v4 = result;
    if (!*(_BYTE *)(result + 72))
    {
      v6 = *(_QWORD *)(result + 48);
      if (v6)
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 16))(*(_QWORD *)(result + 48));
        if ((result & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1954DC320);
        }
      }
      v7 = v6 ? v6 - 24 : 0;
      if (*(_DWORD *)(v7 + 224) == 1)
      {
        *(_DWORD *)(v4 + 20) |= 0x30u;
        v8 = *a2;
        *a2 = 0;
        v9 = *(_DWORD **)(v7 + 272);
        *(_QWORD *)(v7 + 272) = v8;
        if (v9)
        {
          if (v9[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
            v8 = *(_QWORD *)(v7 + 272);
          }
          else
          {
            --v9[4];
          }
        }
        ++*(_DWORD *)(v7 + 48);
        v10 = operator new(0x18uLL);
        *v10 = &off_1E3364CC0;
        v10[1] = v7;
        v10[2] = v7;
        v11 = *(_QWORD *)(v8 + 32);
        if (!v11 || (*(_BYTE *)(v11 + 8) & 3) != 0)
          v12 = 0;
        else
          v12 = *(JSC::JSGlobalObject **)v11;
        v13 = **(_QWORD **)(v8 + 24);
        if ((v13 & 0xFFFE000000000002) != 0)
        {
          v14 = 0;
        }
        else if (*(_BYTE *)(v13 + 5) == 68)
        {
          v14 = **(JSC::Structure ***)(v8 + 24);
        }
        else
        {
          v14 = 0;
        }
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v15 = &off_1E3392A30;
        v15[4] = v10;
        v19 = 0;
        v17 = v15;
        WebCore::DOMPromise::whenPromiseIsSettled(v12, v14, (uint64_t *)&v17);
        if (v17)
          (*(void (**)(_QWORD *))(*v17 + 8))(v17);
        result = (uint64_t)v19;
        if (v19 == v18)
        {
          v16 = 4;
          result = (uint64_t)v18;
        }
        else
        {
          if (!v19)
          {
LABEL_28:
            *(_BYTE *)(v4 + 72) = 1;
            a3[1] = 0;
            a3[2] = 0;
            *a3 = 0;
            return result;
          }
          v16 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v16))();
        goto LABEL_28;
      }
    }
  }
  *(_BYTE *)a3 = 8;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

uint64_t WebCore::PaymentAddress::PaymentAddress(uint64_t result, _DWORD **a2, uint64_t a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, _DWORD **a7, _DWORD **a8, _DWORD **a9, _DWORD **a10, _DWORD **a11)
{
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD **v30;
  uint64_t v31;
  _DWORD *v32;

  v17 = result;
  *(_DWORD *)result = 1;
  v18 = *a2;
  if (*a2)
    *v18 += 2;
  v19 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = v18;
  *(_DWORD *)(result + 28) = v19;
  if ((_DWORD)v19)
  {
    if (v19 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(v17 + 24) = v19;
    *(_QWORD *)(v17 + 16) = v28;
    v29 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v29)
    {
      v30 = *(_DWORD ***)a3;
      v31 = 8 * v29;
      do
      {
        v32 = *v30;
        if (*v30)
          *v32 += 2;
        *v28++ = v32;
        ++v30;
        v31 -= 8;
      }
      while (v31);
    }
  }
  v20 = *a4;
  if (*a4)
    *v20 += 2;
  *(_QWORD *)(v17 + 32) = v20;
  v21 = *a5;
  if (*a5)
    *v21 += 2;
  *(_QWORD *)(v17 + 40) = v21;
  v22 = *a6;
  if (*a6)
    *v22 += 2;
  *(_QWORD *)(v17 + 48) = v22;
  v23 = *a7;
  if (*a7)
    *v23 += 2;
  *(_QWORD *)(v17 + 56) = v23;
  v24 = *a8;
  if (*a8)
    *v24 += 2;
  *(_QWORD *)(v17 + 64) = v24;
  v25 = *a9;
  if (*a9)
    *v25 += 2;
  *(_QWORD *)(v17 + 72) = v25;
  v26 = *a10;
  if (*a10)
    *v26 += 2;
  *(_QWORD *)(v17 + 80) = v26;
  v27 = *a11;
  if (*a11)
    *v27 += 2;
  *(_QWORD *)(v17 + 88) = v27;
  return v17;
}

uint64_t WebCore::PaymentMethodChangeEvent::PaymentMethodChangeEvent(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *Allocator;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    v10 = 786434;
  else
    v10 = 786432;
  v11 = v10 | (4 * v8) | (8 * v9) | (*a2 != 0) | *(_DWORD *)(a1 + 20) & 0xFFC00000;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v11;
  v12 = (_DWORD *)*a2;
  if (*a2)
  {
    *v12 += 2;
    v11 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = v11 | 0x4000;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_1E3364D70;
  v13 = *((_QWORD *)a3 + 1);
  v14 = (uint64_t *)*((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)(a1 + 80) = v13;
  v15 = (_QWORD *)(a1 + 88);
  if (v14)
  {
    v16 = *v14;
    *v15 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    if ((v16 & 0xFFFE000000000002) != 0)
    {
      *v15 = v16;
      goto LABEL_12;
    }
    if (!v16)
    {
      Allocator = 0;
      goto LABEL_10;
    }
    if ((v16 & 8) != 0)
      v21 = (v16 - 112) | 1;
    else
      v21 = v16 & 0xFFFFFFFFFFFFC000;
    if ((v21 & 1) != 0)
      v22 = v21 + 47;
    else
      v22 = *(_QWORD *)v21 + 32;
    Allocator = *(_QWORD **)(v22 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v22 + 16) = *Allocator;
    *Allocator = v16;
    v15 = Allocator + 1;
  }
  else
  {
    Allocator = 0;
  }
  *v15 = 0;
  v15[1] = 0;
LABEL_10:
  __dmb(0xAu);
  v18 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = Allocator;
  if (v18)
    *(_QWORD *)(v18 + 8) = 3;
LABEL_12:
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  __dmb(0xAu);
  v19 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v19)
    *(_QWORD *)(v19 + 8) = 3;
  return a1;
}

WTF *WebCore::PaymentRequest::create@<X0>(WebCore::PaymentSession *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  WTF *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSCell *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  BOOL v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::ContextDestructionObserver *v71;
  WebCore::ContextDestructionObserver *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  WTF::StringImpl *v85;
  char v86;
  uint64_t *v87;
  WTF *v88;
  WTF::StringImpl *v89[2];
  unsigned int v90;
  uint64_t v91;
  _QWORD v92[5];
  int v93;
  char v94;
  WTF *v95;
  WTF *v96;
  uint64_t v97;
  char v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  WTF::StringImpl *v104;
  unsigned int v105;
  uint64_t v106;

  v8 = (uint64_t)a1;
  v106 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WebCore::PaymentSession::canCreateSession(a1, (uint64_t)&v99);
  if ((_BYTE)v101)
  {
    v11 = v100;
    *(_BYTE *)a5 = 14;
    *(_QWORD *)(a5 + 8) = v11;
LABEL_3:
    *(_DWORD *)(a5 + 16) = 1;
    return result;
  }
  if (!*(_QWORD *)(a3 + 72))
  {
    WTF::createVersion4UUIDString(result);
    v13 = v99;
    v99 = 0;
    v14 = *(WTF::StringImpl **)(a3 + 72);
    *(_QWORD *)(a3 + 72) = v13;
    if (v14)
    {
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
      {
LABEL_8:
        *(_DWORD *)v14 = v15;
        goto LABEL_9;
      }
      WTF::StringImpl::destroy(v14, v12);
      v14 = v99;
      v99 = 0;
      if (v14)
      {
        v15 = *(_DWORD *)v14 - 2;
        if (*(_DWORD *)v14 != 2)
          goto LABEL_8;
        WTF::StringImpl::destroy(v14, v85);
      }
    }
  }
LABEL_9:
  v16 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v16)
  {
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 33;
    goto LABEL_3;
  }
  v97 = 0;
  if (v16 >= 0x4924925)
  {
    __break(0xC471u);
    goto LABEL_140;
  }
  v87 = a4;
  LODWORD(v97) = 56 * (int)v16 / 0x38u;
  v88 = (WTF *)WTF::fastMalloc((WTF *)(56 * v16));
  v95 = 0;
  v96 = v88;
  v17 = *((unsigned int *)a2 + 3);
  v18 = (JSC::JSCell *)off_1E3364A68;
  v19 = 0;
  if (!(_DWORD)v17)
  {
LABEL_91:
    WebCore::checkAndCanonicalizeAmount((uint64_t)&v99, (uint64_t *)(a3 + 88));
    if ((_BYTE)v101)
    {
      v57 = (char)v99;
      v58 = v100;
LABEL_100:
      *(_BYTE *)a5 = v57;
      *(_QWORD *)(a5 + 8) = v58;
      *(_DWORD *)(a5 + 16) = 1;
      goto LABEL_101;
    }
    v59 = *(_QWORD *)(a3 + 96);
    if (v59 && *(_DWORD *)(v59 + 4))
    {
      v60 = *(unsigned __int8 **)(v59 + 8);
      v61 = (*(_BYTE *)(v59 + 16) & 4) != 0 ? *v60 : *(unsigned __int16 *)v60;
      if (v61 == 45)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v58 = v92[0];
        v57 = 33;
        goto LABEL_100;
      }
    }
    WebCore::checkAndCanonicalizeDetails((uint64_t)&v99, (void *)(v8 + 192), a3, *((unsigned __int8 *)v87 + 3), 0);
    v66 = v102;
    if (v102)
    {
      if (v102 != 1)
LABEL_136:
        std::__throw_bad_variant_access[abi:sn180100]();
      v67 = v100;
      v100 = 0;
      *(_BYTE *)a5 = (_BYTE)v99;
      *(_QWORD *)(a5 + 8) = v67;
      goto LABEL_128;
    }
    v68 = v99;
    v69 = v100;
    v99 = 0;
    v100 = 0;
    v70 = v101;
    v101 = 0;
    v71 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v72 = v71;
    v73 = *(_QWORD *)(v8 + 704);
    if (v73)
    {
      v74 = *(_QWORD *)(v73 + 8);
      if (v74)
        v8 = v74;
    }
    *(_QWORD *)v71 = &off_1E33A18C0;
    *((_QWORD *)v71 + 1) = 0;
    WebCore::ContextDestructionObserver::observeContext(v71, (WebCore::ScriptExecutionContext *)(v8 + 192));
    *(_QWORD *)v72 = &off_1E33A0540;
    *((_QWORD *)v72 + 2) = 0;
    if (!*(_BYTE *)(v8 + 470))
    {
      v89[0] = v72;
      WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v8 + 320), (uint64_t *)v89, (uint64_t)v92);
      *((_QWORD *)v72 + 4) = 0;
      *((_QWORD *)v72 + 5) = 0;
      *((_DWORD *)v72 + 12) = 1;
      *(_QWORD *)v72 = &off_1E3364E38;
      *((_QWORD *)v72 + 3) = &unk_1E3364EB8;
      v75 = *v87;
      v76 = *((_DWORD *)v87 + 2);
      *((_BYTE *)v72 + 64) = 0;
      *((_DWORD *)v72 + 15) = v76;
      *(_QWORD *)((char *)v72 + 52) = v75;
      *((_BYTE *)v72 + 80) = 0;
      if (*(_BYTE *)(a3 + 16))
      {
        *((_QWORD *)v72 + 8) = 0;
        *((_QWORD *)v72 + 9) = 0;
        v77 = *(_QWORD *)a3;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)v72 + 8) = v77;
        LODWORD(v77) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = 0;
        *((_DWORD *)v72 + 18) = v77;
        LODWORD(v77) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a3 + 12) = 0;
        *((_DWORD *)v72 + 19) = v77;
        *((_BYTE *)v72 + 80) = 1;
      }
      *((_BYTE *)v72 + 88) = 0;
      *((_BYTE *)v72 + 104) = 0;
      if (*(_BYTE *)(a3 + 40))
      {
        *((_QWORD *)v72 + 11) = 0;
        *((_QWORD *)v72 + 12) = 0;
        v78 = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
        *((_QWORD *)v72 + 11) = v78;
        LODWORD(v78) = *(_DWORD *)(a3 + 32);
        *(_DWORD *)(a3 + 32) = 0;
        *((_DWORD *)v72 + 24) = v78;
        LODWORD(v78) = *(_DWORD *)(a3 + 36);
        *(_DWORD *)(a3 + 36) = 0;
        *((_DWORD *)v72 + 25) = v78;
        *((_BYTE *)v72 + 104) = 1;
      }
      *((_BYTE *)v72 + 112) = 0;
      *((_BYTE *)v72 + 128) = 0;
      if (*(_BYTE *)(a3 + 64))
      {
        *((_QWORD *)v72 + 14) = 0;
        *((_QWORD *)v72 + 15) = 0;
        v79 = *(_QWORD *)(a3 + 48);
        *(_QWORD *)(a3 + 48) = 0;
        *((_QWORD *)v72 + 14) = v79;
        LODWORD(v79) = *(_DWORD *)(a3 + 56);
        *(_DWORD *)(a3 + 56) = 0;
        *((_DWORD *)v72 + 30) = v79;
        LODWORD(v79) = *(_DWORD *)(a3 + 60);
        *(_DWORD *)(a3 + 60) = 0;
        *((_DWORD *)v72 + 31) = v79;
        *((_BYTE *)v72 + 128) = 1;
      }
      v80 = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a3 + 72) = 0;
      *((_QWORD *)v72 + 17) = v80;
      v81 = *(_QWORD *)(a3 + 80);
      *(_QWORD *)(a3 + 80) = 0;
      *((_QWORD *)v72 + 18) = v81;
      v82 = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a3 + 88) = 0;
      *((_QWORD *)v72 + 19) = v82;
      v83 = *(_QWORD *)(a3 + 96);
      *(_QWORD *)(a3 + 96) = 0;
      *((_QWORD *)v72 + 20) = v83;
      *((_BYTE *)v72 + 168) = *(_BYTE *)(a3 + 104);
      *((_QWORD *)v72 + 22) = v69;
      *((_QWORD *)v72 + 23) = v70;
      v84 = v96;
      v96 = 0;
      *((_QWORD *)v72 + 24) = v84;
      *((_QWORD *)v72 + 25) = v97;
      *((_QWORD *)v72 + 26) = v68;
      *((_QWORD *)v72 + 27) = 0;
      *((_DWORD *)v72 + 56) = 0;
      *((_QWORD *)v72 + 29) = 0;
      *((_BYTE *)v72 + 240) = 0;
      *((_BYTE *)v72 + 256) = 0;
      *((_WORD *)v72 + 144) = 0;
      *((_QWORD *)v72 + 34) = 0;
      *((_QWORD *)v72 + 35) = 0;
      *((_QWORD *)v72 + 33) = 0;
      WebCore::ActiveDOMObject::suspendIfNeeded(v72);
      v19 = 0;
      *(_QWORD *)a5 = v72;
LABEL_128:
      *(_DWORD *)(a5 + 16) = v66;
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3364AB8[v66])(v92, &v99);
LABEL_101:
      result = v95;
      if (v95)
        goto LABEL_134;
      goto LABEL_102;
    }
    __break(0xC471u);
LABEL_140:
    JUMPOUT(0x1954DD154);
  }
  v20 = *a2;
  v21 = 16 * v17;
  while (1)
  {
    WebCore::convertAndValidatePaymentMethodIdentifier((WTF::StringImpl **)v20, (uint64_t)v92);
    if (!v94)
    {
      v27 = *(WTF::StringImpl **)v20;
      if (*(_QWORD *)v20)
      {
        v28 = *((_DWORD *)v27 + 1);
        *(_DWORD *)v27 += 2;
        if (v28 < 0)
          goto LABEL_137;
      }
      else
      {
        v28 = 0;
      }
      v29 = __OFADD__(v28, 42);
      v30 = v28 + 42;
      if (v29 || __OFADD__(v30, 1))
      {
LABEL_137:
        v91 = 0;
LABEL_138:
        __break(0xC471u);
        JUMPOUT(0x1954DD168);
      }
      v31 = !v27 || (*((_BYTE *)v27 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v30 + 1), v31, 34, (uint64_t)v27, (int8x16_t *)"\" is an invalid payment method identifier.", 0x2Au, &v91);
      v32 = v91;
      if (!v91)
        goto LABEL_138;
      *(_BYTE *)a5 = 32;
      *(_QWORD *)(a5 + 8) = v32;
      *(_DWORD *)(a5 + 16) = 1;
      v91 = 0;
      goto LABEL_32;
    }
    if (v93 == -1)
      goto LABEL_136;
    v99 = (WTF::StringImpl *)&v98;
    ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD *))off_1E3364A78[v93])(v89, &v99, v92);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v95, v89, v22, (uint64_t)&v99);
    v24 = v101;
    result = v89[0];
    v89[0] = 0;
    if (!result)
      goto LABEL_18;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_18:
      if (!v24)
        goto LABEL_55;
      goto LABEL_19;
    }
    result = (WTF *)WTF::StringImpl::destroy(result, v23);
    if (!v24)
    {
LABEL_55:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 32;
      *(_DWORD *)(a5 + 16) = 1;
      goto LABEL_56;
    }
LABEL_19:
    v25 = *(_QWORD **)(v20 + 8);
    if (!v25 || !*v25)
    {
      v27 = 0;
LABEL_36:
      if (!v94)
        goto LABEL_133;
      LOBYTE(v99) = 0;
      v103 = -1;
      v33 = v93;
      if (v93 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, _QWORD *))off_1E3364A98[v93])(v89, &v99, v92);
        v103 = v33;
      }
      v104 = v27;
      v34 = v19;
      if (v19 == (_DWORD)v97)
      {
        v35 = WTF::Vector<WebCore::PaymentRequest::Method,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v96, v19 + 1, (unint64_t)&v99);
        v36 = HIDWORD(v97);
        v88 = v96;
        v37 = (char *)v96 + 56 * HIDWORD(v97);
        *v37 = 0;
        *((_DWORD *)v37 + 10) = -1;
        v38 = *(unsigned int *)(v35 + 40);
        if ((_DWORD)v38 != -1)
        {
          ((void (*)(WTF::StringImpl **, char *, unint64_t))off_1E3364A98[v38])(v89, v37, v35);
          *((_DWORD *)v37 + 10) = v38;
        }
        v39 = (WTF::StringImpl **)((char *)v88 + 56 * v36 + 48);
        v40 = (WTF::StringImpl **)(v35 + 48);
        v18 = (JSC::JSCell *)off_1E3364A68;
      }
      else
      {
        v44 = (char *)v88 + 56 * v19;
        *v44 = 0;
        *((_DWORD *)v44 + 10) = -1;
        v45 = v103;
        if (v103 != -1)
        {
          ((void (*)(WTF::StringImpl **, char *, WTF::StringImpl **))off_1E3364A98[v103])(v89, v44, &v99);
          *((_DWORD *)v44 + 10) = v45;
        }
        v39 = (WTF::StringImpl **)((char *)v88 + 56 * v34 + 48);
        v36 = HIDWORD(v97);
        v40 = &v104;
      }
      v46 = *v40;
      *v40 = 0;
      *v39 = v46;
      v19 = v36 + 1;
      HIDWORD(v97) = v19;
      v47 = v104;
      v104 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v23);
        else
          *(_DWORD *)v47 -= 2;
      }
      if (v103 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3364A68[v103])(v89, &v99);
      LOBYTE(v24) = 1;
      goto LABEL_56;
    }
    v26 = *(_QWORD *)(WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v8 + 192)) + 56);
    WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v8 + 192));
    JSC::JSONStringify();
    v27 = v99;
    if (*(_QWORD *)(v26 + 16))
    {
      *(_BYTE *)a5 = 37;
      *(_QWORD *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = 1;
      goto LABEL_32;
    }
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 192) + 344))(v8 + 192);
    WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v8 + 192));
    result = (WTF *)JSC::JSONParse();
    if (!*(_QWORD *)(v41 + 16))
      break;
    LOBYTE(v89[0]) = 37;
    v42 = 1;
    v90 = 1;
    v89[1] = 0;
    *(_BYTE *)a5 = 37;
    *(_QWORD *)(a5 + 8) = 0;
    v43 = 1;
    *(_DWORD *)(a5 + 16) = 1;
    v18 = (JSC::JSCell *)off_1E3364A68;
LABEL_80:
    result = (WTF *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3364A88[v43])(&v99, v89);
LABEL_81:
    if (!v42)
      goto LABEL_36;
LABEL_32:
    if (!v27)
      goto LABEL_63;
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, v23);
LABEL_63:
      LOBYTE(v24) = 0;
      goto LABEL_56;
    }
    LOBYTE(v24) = 0;
    *(_DWORD *)v27 -= 2;
LABEL_56:
    if (v94 && v93 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3364A68[v93])(&v99, v92);
    if ((v24 & 1) == 0)
      goto LABEL_101;
    v20 += 16;
    v21 -= 16;
    if (!v21)
      goto LABEL_91;
  }
  v18 = result;
  v89[0] = result;
  v90 = 0;
  if (v94)
  {
    if (v93 != 1)
      goto LABEL_78;
    v48 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)v92);
    result = (WTF *)WTF::operator==(v48, v49, "apple.com", 10);
    if ((_DWORD)result)
    {
      v50 = (unsigned __int8 *)WTF::URL::path((WTF::URL *)v92);
      result = (WTF *)WTF::operator==(v50, v51, "/apple-pay", 11);
      if ((_DWORD)result)
      {
        WebCore::convertAndValidateApplePayRequest((uint64_t)&v99, (_QWORD *)v8, v18);
        if (v105)
        {
          if (v105 != 1)
            goto LABEL_136;
          v86 = v100;
          v52 = v101;
          v42 = 1;
          v101 = 0;
        }
        else
        {
          v86 = 0;
          v52 = 0;
          v42 = 0;
        }
        result = (WTF *)(*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15ApplePayRequestENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
                         + v105))((int)&v98, (WebCore::ApplePayRequestBase *)&v100);
        goto LABEL_87;
      }
    }
    if (v93 == 1
      && (v53 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)v92),
          result = (WTF *)WTF::operator==(v53, v54, "apple.com", 10),
          (_DWORD)result)
      && (v55 = (unsigned __int8 *)WTF::URL::path((WTF::URL *)v92),
          result = (WTF *)WTF::operator==(v55, v56, "/ams-ui", 8),
          (_DWORD)result))
    {
      WebCore::convertAndValidateApplePayAMSUIRequest((uint64_t)&v99, v8, v18);
      if ((_DWORD)v101)
      {
        if ((_DWORD)v101 != 1)
          goto LABEL_136;
        v86 = (char)v99;
        v52 = v100;
        v42 = 1;
        v100 = 0;
      }
      else
      {
        v86 = 0;
        v52 = 0;
        v42 = 0;
      }
      result = (WTF *)((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20ApplePayAMSUIRequestENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v101])(&v98, &v99);
LABEL_87:
      if (v42)
      {
        *(_BYTE *)a5 = v86;
        *(_QWORD *)(a5 + 8) = v52;
        v42 = 1;
        *(_DWORD *)(a5 + 16) = 1;
      }
    }
    else
    {
LABEL_78:
      v42 = 0;
    }
    v43 = v90;
    v18 = (JSC::JSCell *)off_1E3364A68;
    if (v90 == -1)
      goto LABEL_81;
    goto LABEL_80;
  }
LABEL_133:
  __break(1u);
LABEL_134:
  result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v23);
LABEL_102:
  v62 = v96;
  if (v19)
  {
    v63 = 56 * v19;
    v64 = v96;
    do
    {
      result = (WTF *)*((_QWORD *)v64 + 6);
      *((_QWORD *)v64 + 6) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF *)WTF::StringImpl::destroy(result, v23);
        else
          *(_DWORD *)result -= 2;
      }
      v65 = *((unsigned int *)v64 + 10);
      if ((_DWORD)v65 != -1)
        result = (WTF *)(*((uint64_t (**)(WTF::StringImpl **, WTF *))v18 + v65))(&v99, v64);
      *((_DWORD *)v64 + 10) = -1;
      v64 = (WTF *)((char *)v64 + 56);
      v63 -= 56;
    }
    while (v63);
  }
  if (v62)
    return (WTF *)WTF::fastFree(v62, v23);
  return result;
}

WTF *WebCore::checkAndCanonicalizeDetails(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *result;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  unsigned int v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  WTF *v51;
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  BOOL v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  int v65;
  char v66;
  WTF *v67;
  uint64_t v68;
  char v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;

  if (*(_BYTE *)(a3 + 16))
  {
    v10 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      v12 = (uint64_t *)(*(_QWORD *)a3 + 8);
      do
      {
        result = WebCore::checkAndCanonicalizeAmount((uint64_t)&v62, v12);
        if ((_BYTE)v64)
        {
          v22 = v63;
          *(_BYTE *)a1 = (_BYTE)v62;
          *(_QWORD *)(a1 + 8) = v22;
          *(_DWORD *)(a1 + 24) = 1;
          return result;
        }
        v12 += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  if (!a4)
  {
    if (!a5 && *(_BYTE *)(a3 + 40))
    {
      v20 = *(_DWORD *)(a3 + 36);
      if (v20)
        WTF::VectorDestructor<true,WebCore::PaymentShippingOption>::destruct(*(WTF::StringImpl **)(a3 + 24), (WTF::StringImpl *)(*(_QWORD *)(a3 + 24) + 40 * v20));
      v21 = *(WTF **)(a3 + 24);
      if (v21)
      {
        *(_QWORD *)(a3 + 24) = 0;
        *(_DWORD *)(a3 + 32) = 0;
        WTF::fastFree(v21, a2);
      }
      v18 = 0;
      *(_BYTE *)(a3 + 40) = 0;
      goto LABEL_49;
    }
LABEL_34:
    v18 = 0;
    goto LABEL_49;
  }
  if (!*(_BYTE *)(a3 + 40))
  {
    if (!a5)
    {
      v62 = 0;
      v63 = 0;
      LOBYTE(v64) = 1;
      std::__optional_storage_base<WTF::Vector<WebCore::PaymentShippingOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::PaymentShippingOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(a3 + 24, (uint64_t *)&v62);
      if ((_BYTE)v64)
      {
        v23 = v62;
        if (HIDWORD(v63))
          WTF::VectorDestructor<true,WebCore::PaymentShippingOption>::destruct(v62, (WTF *)((char *)v62 + 40 * HIDWORD(v63)));
        if (v23)
          WTF::fastFree(v23, a2);
      }
    }
    goto LABEL_34;
  }
  v70 = 0;
  v14 = *(unsigned int *)(a3 + 36);
  if (!(_DWORD)v14)
  {
    v15 = 0;
    goto LABEL_48;
  }
  v15 = 0;
  v16 = *(_QWORD *)(a3 + 24);
  v17 = 40 * v14;
  do
  {
    v18 = v15;
    WebCore::checkAndCanonicalizeAmount((uint64_t)&v62, (uint64_t *)(v16 + 16));
    if ((_BYTE)v64)
    {
      v24 = v63;
      *(_BYTE *)a1 = (_BYTE)v62;
      *(_QWORD *)(a1 + 8) = v24;
      goto LABEL_43;
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v70, (WTF::StringImpl **)v16, v19, (uint64_t)&v67);
    if (!v69)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v25 = v71;
      *(_BYTE *)a1 = 33;
      *(_QWORD *)(a1 + 8) = v25;
LABEL_43:
      *(_DWORD *)(a1 + 24) = 1;
      result = v70;
      if (!v70)
        goto LABEL_111;
      result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v70, (WTF::StringImpl *)a2);
      if (!v15)
        return result;
      goto LABEL_112;
    }
    if (*(_BYTE *)(v16 + 32))
    {
      v15 = *(WTF::StringImpl **)v16;
      if (*(_QWORD *)v16)
        *(_DWORD *)v15 += 2;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
          if ((_BYTE)v64 && v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v63 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    v16 += 40;
    v17 -= 40;
  }
  while (v17);
  if (v70)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v70, (WTF::StringImpl *)a2);
LABEL_48:
  v18 = v15;
LABEL_49:
  v67 = 0;
  v68 = 0;
  if (!*(_BYTE *)(a3 + 64))
  {
    LODWORD(v26) = 0;
    if (!a5)
    {
      result = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_BYTE *)(a3 + 64) = 1;
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  v26 = *(unsigned int *)(a3 + 60);
  if (!(_DWORD)v26)
  {
LABEL_104:
    result = 0;
    goto LABEL_108;
  }
  if (v26 >> 29)
    goto LABEL_146;
  result = (WTF *)WTF::fastMalloc((WTF *)(8 * v26));
  LODWORD(v68) = v26;
  v67 = result;
  if (!*(_BYTE *)(a3 + 64))
  {
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  v27 = *(_DWORD *)(a3 + 60);
  if (!v27)
  {
LABEL_108:
    v50 = HIDWORD(v68);
    v67 = 0;
    v68 = 0;
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = result;
    *(_DWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 20) = v50;
    v18 = 0;
    goto LABEL_109;
  }
  v28 = *(_QWORD *)(a3 + 48);
  v29 = v28 + 72 * v27;
  while (2)
  {
    if (a5 == 1)
    {
      WebCore::convertAndValidatePaymentMethodIdentifier((WTF::StringImpl **)v28, (uint64_t)&v62);
      if (v66)
      {
        if (v65 != -1)
          ((void (*)(WTF::StringImpl **, WTF **))off_1E3364A68[v65])(&v71, &v62);
        goto LABEL_59;
      }
      v54 = *(WTF::StringImpl **)v28;
      if (!*(_QWORD *)v28)
      {
        v55 = 0;
        goto LABEL_121;
      }
      v55 = *((_DWORD *)v54 + 1);
      *(_DWORD *)v54 += 2;
      if ((v55 & 0x80000000) == 0)
      {
LABEL_121:
        v56 = __OFADD__(v55, 42);
        v57 = v55 + 42;
        if (!v56 && !__OFADD__(v57, 1))
        {
          v58 = !v54 || (*((_BYTE *)v54 + 16) & 4) != 0;
          result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v57 + 1), v58, 34, (uint64_t)v54, (int8x16_t *)"\" is an invalid payment method identifier.", 0x2Au, &v61);
          v59 = v61;
          if (v61)
          {
            *(_BYTE *)a1 = 32;
            *(_QWORD *)(a1 + 8) = v59;
            *(_DWORD *)(a1 + 24) = 1;
            v61 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                result = (WTF *)WTF::StringImpl::destroy(v54, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v54 -= 2;
            }
            if (v66 && v65 != -1)
              result = (WTF *)((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E3364A68[v65])(&v71, &v62);
            goto LABEL_109;
          }
LABEL_149:
          __break(0xC471u);
          JUMPOUT(0x1954DD8C0);
        }
      }
LABEL_148:
      v61 = 0;
      goto LABEL_149;
    }
LABEL_59:
    if (!*(_BYTE *)(v28 + 40))
      goto LABEL_66;
    result = WebCore::checkAndCanonicalizeAmount((uint64_t)&v62, (uint64_t *)(v28 + 16));
    if ((_BYTE)v64)
    {
      v52 = (char)v62;
      v53 = v63;
      goto LABEL_118;
    }
    if ((v30 = *(_QWORD *)(v28 + 24)) == 0
      || !*(_DWORD *)(v30 + 4)
      || ((v31 = *(unsigned __int16 **)(v30 + 8), (*(_BYTE *)(v30 + 16) & 4) == 0)
        ? (v32 = *v31)
        : (v32 = *(unsigned __int8 *)v31),
          v32 != 45))
    {
LABEL_66:
      v33 = *(unsigned int *)(v28 + 60);
      if ((_DWORD)v33)
      {
        v34 = 32 * v33;
        v35 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 8);
        while (1)
        {
          result = WebCore::checkAndCanonicalizeAmount((uint64_t)&v62, v35);
          if ((_BYTE)v64)
            break;
          v35 += 4;
          v34 -= 32;
          if (!v34)
            goto LABEL_70;
        }
        v49 = v63;
        *(_BYTE *)a1 = (_BYTE)v62;
        *(_QWORD *)(a1 + 8) = v49;
        goto LABEL_106;
      }
LABEL_70:
      v70 = 0;
      v36 = *(_QWORD **)(v28 + 64);
      if (!v36 || !*v36)
        goto LABEL_82;
      v37 = *(_QWORD *)(WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)a2) + 56);
      JSC::JSONStringify();
      v38 = v71;
      if (!*(_QWORD *)(v37 + 16))
      {
        JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::clear((uint64_t *)(v28 + 64));
        v64 = 0;
        goto LABEL_78;
      }
      v39 = 37;
      LOBYTE(v62) = 37;
      v63 = 0;
      v64 = 1;
      if (v71)
      {
        if (*(_DWORD *)v71 != 2)
        {
          v40 = 0;
          *(_DWORD *)v71 -= 2;
          v39 = 37;
          goto LABEL_76;
        }
        WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
        if (v64 != 1)
        {
          if (!v64)
          {
            v38 = v62;
LABEL_78:
            v62 = 0;
            v42 = v70;
            v70 = v38;
            if (v42)
            {
              if (*(_DWORD *)v42 != 2)
              {
                v43 = 0;
                *(_DWORD *)v42 -= 2;
                goto LABEL_81;
              }
              WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
              v43 = v64;
              if (v64 == -1)
              {
LABEL_82:
                v44 = HIDWORD(v68);
                if (HIDWORD(v68) == (_DWORD)v68)
                {
                  v48 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, HIDWORD(v68) + 1, (unint64_t)&v70);
                  v44 = HIDWORD(v68);
                  v45 = HIDWORD(v68) + 1;
                  v46 = v67;
                  v47 = *v48;
                  *v48 = 0;
                }
                else
                {
                  v45 = HIDWORD(v68) + 1;
                  v46 = v67;
                  v47 = v70;
                  v70 = 0;
                }
                *((_QWORD *)v46 + v44) = v47;
                HIDWORD(v68) = v45;
                v41 = 1;
LABEL_85:
                result = v70;
                v70 = 0;
                if (result)
                {
                  if (*(_DWORD *)result != 2)
                  {
                    *(_DWORD *)result -= 2;
                    goto LABEL_88;
                  }
                  result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
                  if (!v41)
                    goto LABEL_109;
                }
                else
                {
LABEL_88:
                  if (!v41)
                    goto LABEL_109;
                }
                v28 += 72;
                if (v28 == v29)
                {
                  result = v67;
                  LODWORD(v26) = v68;
                  goto LABEL_108;
                }
                continue;
              }
            }
            else
            {
              v43 = 0;
            }
LABEL_81:
            ((void (*)(WTF::StringImpl **, WTF **))off_1E3364AA8[v43])(&v71, &v62);
            goto LABEL_82;
          }
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_146:
          __break(0xC471u);
          goto LABEL_147;
        }
        v39 = (char)v62;
        v40 = v63;
      }
      else
      {
        v40 = 0;
      }
LABEL_76:
      v41 = 0;
      *(_BYTE *)a1 = v39;
      *(_QWORD *)(a1 + 8) = v40;
      *(_DWORD *)(a1 + 24) = 1;
      goto LABEL_85;
    }
    break;
  }
  result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v53 = v71;
  v52 = 33;
LABEL_118:
  *(_BYTE *)a1 = v52;
  *(_QWORD *)(a1 + 8) = v53;
LABEL_106:
  *(_DWORD *)(a1 + 24) = 1;
LABEL_109:
  v51 = v67;
  if (!HIDWORD(v68))
  {
    if (!v67)
      goto LABEL_111;
LABEL_141:
    v67 = 0;
    LODWORD(v68) = 0;
    result = (WTF *)WTF::fastFree(v51, a2);
    if (!v18)
      return result;
LABEL_112:
    if (*(_DWORD *)v18 == 2)
      return (WTF *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    *(_DWORD *)v18 -= 2;
    return result;
  }
  v60 = 8 * HIDWORD(v68);
  do
  {
    result = *(WTF **)v51;
    *(_QWORD *)v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v51 = (WTF *)((char *)v51 + 8);
    v60 -= 8;
  }
  while (v60);
  v51 = v67;
  if (v67)
    goto LABEL_141;
LABEL_111:
  if (v18)
    goto LABEL_112;
  return result;
}

void WebCore::PaymentRequest::~PaymentRequest(WebCore::PaymentRequest *this, void *a2)
{
  WebCore::PaymentResponse *v3;
  _DWORD *v4;
  _DWORD *v5;
  WTF *v6;
  char *v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  WebCore::PaymentAddress *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  void *v22;
  bmalloc::api *v23;
  void *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  bmalloc::api *v28;
  void *v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  char v33;

  v3 = (WebCore::PaymentResponse *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::PaymentResponse::~PaymentResponse(v3, a2);
      bmalloc::api::isoDeallocate(v23, v24);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  if (*((_BYTE *)this + 256))
  {
    v6 = (WTF *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        v27 = *((_QWORD *)v6 + 1);
        --*(_QWORD *)(v27 + 16);
        *((_QWORD *)v6 + 1) = 0;
        if (*(_DWORD *)(v27 + 48) == 1)
        {
          WebCore::PaymentRequest::~PaymentRequest((WebCore::PaymentRequest *)v27);
          bmalloc::api::isoDeallocate(v28, v29);
        }
        else
        {
          --*(_DWORD *)(v27 + 48);
        }
        WTF::fastFree(v6, a2);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
    v7 = (char *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = 0;
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v7 - 24);
      if (*(_DWORD *)&v7[v8 + 8] == 1)
        (*(void (**)(char *))(*(_QWORD *)&v7[v8] + 8))(&v7[v8]);
      else
        --*(_DWORD *)&v7[v8 + 8];
    }
  }
  v9 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v9)
  {
    v10 = *(_DWORD **)v9;
    *(_QWORD *)v9 = 0;
    if (v10)
    {
      if (v10[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[4];
    }
    WTF::fastFree(v9, a2);
  }
  v11 = (WebCore::PaymentAddress *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v11, (WTF::StringImpl *)a2);
      WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((unsigned int *)this + 51);
  if ((_DWORD)v13)
  {
    v14 = *((_QWORD *)this + 24);
    v15 = 56 * v13;
    do
    {
      v16 = *(WTF::StringImpl **)(v14 + 48);
      *(_QWORD *)(v14 + 48) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *(unsigned int *)(v14 + 40);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, uint64_t))off_1E3364A68[v17])(&v33, v14);
      *(_DWORD *)(v14 + 40) = -1;
      v14 += 56;
      v15 -= 56;
    }
    while (v15);
  }
  v18 = (WTF *)*((_QWORD *)this + 24);
  if (v18)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = *((unsigned int *)this + 47);
  if ((_DWORD)v19)
  {
    v30 = (WTF::StringImpl **)*((_QWORD *)this + 22);
    v31 = 8 * v19;
    do
    {
      v32 = *v30;
      *v30 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v32 -= 2;
      }
      ++v30;
      v31 -= 8;
    }
    while (v31);
  }
  v20 = (WTF *)*((_QWORD *)this + 22);
  if (v20)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v20, a2);
  }
  WebCore::PaymentDetailsInit::~PaymentDetailsInit((WebCore::PaymentRequest *)((char *)this + 64), (WTF::StringImpl *)a2);
  WebCore::EventTarget::~EventTarget((WebCore::PaymentRequest *)((char *)this + 24), v21);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v22);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::PaymentRequest::~PaymentRequest(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::PaymentRequest::~PaymentRequest(WebCore::PaymentRequest *this, void *a2)
{
  WebCore::PaymentRequest::~PaymentRequest((WebCore::PaymentRequest *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::PaymentRequest::~PaymentRequest((WebCore::PaymentRequest *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::PaymentRequest::show(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::LocalDOMWindow *v8;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t (*v24)();
  uint64_t v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  objc_class *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  char *v54;
  WTF::StringImpl *v55;
  void *v56;
  WTF::StringImpl *v57;
  char *v58;
  uint64_t v59;
  WTF *v60;
  _DWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  JSC::JSGlobalObject *v64;
  uint64_t v65;
  JSC::Structure *v66;
  objc_class *v67;
  objc_class *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  bmalloc::api *v73;
  void *v74;
  char *v75;
  objc_class *v76[2];
  int v77;
  objc_class *v78;
  WTF::StringImpl *v79;
  int v80;
  char v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 528);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    v15 = *a4;
    v78 = 0;
    LOBYTE(v82) = 16;
    v83 = 0;
    WebCore::DeferredPromise::reject(v15, (unsigned __int8 *)&v82, 0, &v78);
    result = v83;
    v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v7 = *(_QWORD *)(v6 + 296);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_162;
  }
  v8 = *(WebCore::LocalDOMWindow **)(v7 + 696);
  if (!v8)
  {
LABEL_162:
    v17 = 1;
LABEL_14:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = *a4;
    LOBYTE(v78) = 14;
    v76[0] = 0;
    LOBYTE(v82) = 14;
    v19 = v79;
    if (v79)
      *(_DWORD *)v79 += 2;
    v83 = v19;
    WebCore::DeferredPromise::reject(v18, (unsigned __int8 *)&v82, 0, v76);
    v21 = v83;
    v83 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    result = v79;
    v79 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      else
        *(_DWORD *)result -= 2;
    }
    if ((v17 & 1) == 0)
      goto LABEL_36;
    return result;
  }
  ++*((_DWORD *)v8 + 6);
  if ((WebCore::LocalDOMWindow::consumeTransientActivation(v8) & 1) == 0)
  {
    v17 = 0;
    goto LABEL_14;
  }
  if (*(_DWORD *)(a1 + 224))
  {
    v12 = *a4;
    v78 = 0;
    LOBYTE(v82) = 8;
    v83 = 0;
    WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v82, 0, &v78);
    result = v83;
    v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_36;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 528) + 8) + 24) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v22 + 1240) + 16))
    v23 = WTF::RefPtr<WebCore::PaymentSession,WTF::RawPtrTraits<WebCore::PaymentSession>,WTF::DefaultRefDerefTraits<WebCore::PaymentSession>>::unspecifiedBoolTypeInstance;
  else
    v23 = 0;
  if (v23
    || (*(_QWORD *)(v22 + 1248)
      ? (v24 = WTF::RefPtr<WebCore::ApplePayAMSUIPaymentHandler,WTF::RawPtrTraits<WebCore::ApplePayAMSUIPaymentHandler>,WTF::DefaultRefDerefTraits<WebCore::ApplePayAMSUIPaymentHandler>>::unspecifiedBoolTypeInstance)
      : (v24 = 0),
        v24))
  {
    v25 = *a4;
    v78 = 0;
    LOBYTE(v82) = 16;
    v83 = 0;
    WebCore::DeferredPromise::reject(v25, (unsigned __int8 *)&v82, 0, &v78);
    result = v83;
    v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
      else
        *(_DWORD *)result -= 2;
    }
    *(_DWORD *)(a1 + 224) = 2;
    goto LABEL_36;
  }
  *(_DWORD *)(a1 + 224) = 1;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v29 = *a4;
  *a4 = 0;
  *v27 = v29;
  v30 = *(WTF **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v27;
  if (v30)
  {
    v31 = *(_DWORD **)v30;
    *(_QWORD *)v30 = 0;
    if (v31)
    {
      if (v31[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
      else
        --v31[4];
    }
    WTF::fastFree(v30, v28);
  }
  v32 = *(unsigned int *)(a1 + 204);
  if (!(_DWORD)v32)
  {
LABEL_96:
    LOBYTE(v82) = 6;
    v83 = 0;
    v84 = 1;
    result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(a1, (uint64_t)&v82);
    if (v84 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v84])(&v78, &v82);
    goto LABEL_36;
  }
  v75 = 0;
  v33 = *(unsigned int **)(a1 + 192);
  v34 = 56 * v32;
  do
  {
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 192) + 344))(a2 + 192);
    WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(a2 + 192));
    v36 = JSC::JSONParse();
    if (*(_QWORD *)(v35 + 16))
    {
      LOBYTE(v82) = 37;
      v84 = 1;
      v83 = 0;
      LOBYTE(v78) = 37;
      v79 = 0;
      v80 = 1;
      result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(a1, (uint64_t)&v78);
      if (v80 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, objc_class **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v80])(v76, &v78);
      v37 = 1;
      goto LABEL_54;
    }
    v82 = v36;
    v84 = 0;
    if (v33[10] == 1)
    {
      v39 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)v33);
      result = (WTF::StringImpl *)WTF::operator==(v39, v40, "apple.com", 10);
      if ((_DWORD)result
        && (v41 = (unsigned __int8 *)WTF::URL::path((WTF::URL *)v33),
            result = (WTF::StringImpl *)WTF::operator==(v41, v42, "/apple-pay", 11),
            (_DWORD)result))
      {
        v43 = WTF::fastMalloc((WTF *)0x2D0);
        *(_DWORD *)(v43 + 712) = 1;
        *(_QWORD *)v43 = &unk_1E3352868;
        *(_QWORD *)(v43 + 8) = &unk_1E3352900;
        *(_QWORD *)(v43 + 704) = &unk_1E3352968;
        *(_QWORD *)(v43 + 16) = &off_1E33A18C0;
        *(_QWORD *)(v43 + 24) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v43 + 16), (WebCore::ScriptExecutionContext *)(a2 + 192));
        *(_QWORD *)(v43 + 704) = &unk_1E3352660;
        *(_QWORD *)v43 = &off_1E3352520;
        *(_QWORD *)(v43 + 8) = &unk_1E33525D0;
        *(_QWORD *)(v43 + 16) = &unk_1E3352630;
        *(_BYTE *)(v43 + 32) = 0;
        *(_DWORD *)(v43 + 72) = -1;
        v44 = v33[10];
        if ((_DWORD)v44 != -1)
        {
          ((void (*)(objc_class **, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_3URLEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS9_LNS0_6_TraitE1EEEEEvRSA_OT_EUlRSI_OT0_E_JSH_SG_EEEDcmSJ_DpOT0____fdiagonal[v44])(&v78, v43 + 32, v33);
          *(_DWORD *)(v43 + 72) = v44;
        }
        ++*(_DWORD *)(a1 + 48);
        *(_QWORD *)(v43 + 80) = a1;
        *(_BYTE *)(v43 + 88) = 0;
        *(_BYTE *)(v43 + 680) = 0;
        *(_BYTE *)(v43 + 688) = 0;
        *(_BYTE *)(v43 + 692) = 0;
        v45 = (_BYTE *)(v43 + 696);
      }
      else
      {
        if (v33[10] != 1
          || (v46 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)v33),
              result = (WTF::StringImpl *)WTF::operator==(v46, v47, "apple.com", 10),
              !(_DWORD)result)
          || (v48 = (unsigned __int8 *)WTF::URL::path((WTF::URL *)v33),
              result = (WTF::StringImpl *)WTF::operator==(v48, v49, "/ams-ui", 8),
              !(_DWORD)result))
        {
          v37 = 3;
          goto LABEL_54;
        }
        v43 = WTF::fastMalloc((WTF *)0x70);
        *(_DWORD *)(v43 + 104) = 1;
        *(_QWORD *)v43 = &unk_1E3352990;
        *(_QWORD *)(v43 + 96) = &unk_1E3352A00;
        *(_QWORD *)(v43 + 8) = &off_1E33A18C0;
        *(_QWORD *)(v43 + 16) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v43 + 8), (WebCore::ScriptExecutionContext *)(a2 + 192));
        *(_QWORD *)v43 = &off_1E3352688;
        *(_QWORD *)(v43 + 96) = &unk_1E3352720;
        *(_QWORD *)(v43 + 8) = &unk_1E33526F0;
        *(_BYTE *)(v43 + 24) = 0;
        *(_DWORD *)(v43 + 64) = -1;
        v50 = v33[10];
        if ((_DWORD)v50 != -1)
        {
          ((void (*)(objc_class **, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_3URLEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS9_LNS0_6_TraitE1EEEEEvRSA_OT_EUlRSI_OT0_E_JSH_SG_EEEDcmSJ_DpOT0____fdiagonal[v50])(&v78, v43 + 24, v33);
          *(_DWORD *)(v43 + 64) = v50;
        }
        ++*(_DWORD *)(a1 + 48);
        *(_QWORD *)(v43 + 72) = a1;
        *(_BYTE *)(v43 + 80) = 0;
        v45 = (_BYTE *)(v43 + 88);
      }
      *v45 = 0;
      if (v84)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_165;
      }
      result = (WTF::StringImpl *)(**(_QWORD *(***)(objc_class **__return_ptr, uint64_t, uint64_t, uint64_t))v43)(&v78, v43, a2, v82);
      if ((_BYTE)v80)
      {
        v51 = v79;
        v79 = 0;
        LOBYTE(v76[0]) = (_BYTE)v78;
        v76[1] = v51;
        v77 = 1;
        result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(a1, (uint64_t)v76);
        if (v77 != -1)
          result = (WTF::StringImpl *)((uint64_t (*)(char *, objc_class **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v77])(&v81, v76);
        if ((_BYTE)v80)
        {
          result = v79;
          v79 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v52);
            else
              *(_DWORD *)result -= 2;
          }
        }
        v37 = 1;
      }
      else
      {
        v37 = 0;
        if (!v75)
        {
          v75 = (char *)v43;
          goto LABEL_54;
        }
      }
      v53 = *(_QWORD *)(*(_QWORD *)v43 - 24);
      if (*(_DWORD *)(v43 + v53 + 8) == 1)
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 + v53) + 8))(v43 + v53);
      else
        --*(_DWORD *)(v43 + v53 + 8);
LABEL_54:
      v38 = v84;
      if (v84 == -1)
        goto LABEL_64;
      goto LABEL_63;
    }
    v38 = 0;
    v37 = 3;
LABEL_63:
    result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, uint64_t *))off_1E3364A88[v38])(&v78, &v82);
LABEL_64:
    if (v37 != 3 && v37)
    {
      v54 = v75;
      if (!v75)
        goto LABEL_36;
      goto LABEL_146;
    }
    v33 += 14;
    v34 -= 56;
  }
  while (v34);
  v54 = v75;
  if (!v75)
    goto LABEL_96;
  (*(void (**)(objc_class **__return_ptr, char *, uint64_t))(*(_QWORD *)v75 + 8))(&v78, v75, a2);
  if (!(_BYTE)v80)
  {
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    v57 = result;
    *(_DWORD *)result = 1;
    ++*(_DWORD *)(a1 + 48);
    *((_QWORD *)result + 1) = a1;
    ++*(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(a1 + 256))
    {
      v58 = *(char **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v75;
      if (v58)
      {
        v59 = *(_QWORD *)(*(_QWORD *)v58 - 24);
        if (*(_DWORD *)&v58[v59 + 8] == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(char *))(*(_QWORD *)&v58[v59] + 8))(&v58[v59]);
        else
          --*(_DWORD *)&v58[v59 + 8];
      }
      v60 = *(WTF **)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v57;
      if (v60)
      {
        if (*(_DWORD *)v60 == 1)
        {
          v69 = *((_QWORD *)v60 + 1);
          --*(_QWORD *)(v69 + 16);
          *((_QWORD *)v60 + 1) = 0;
          if (*(_DWORD *)(v69 + 48) == 1)
          {
            WebCore::PaymentRequest::~PaymentRequest((WebCore::PaymentRequest *)v69, v56);
            bmalloc::api::isoDeallocate(v73, v74);
          }
          else
          {
            --*(_DWORD *)(v69 + 48);
          }
          result = (WTF::StringImpl *)WTF::fastFree(v60, v56);
        }
        else
        {
          --*(_DWORD *)v60;
        }
      }
    }
    else
    {
      *(_QWORD *)(a1 + 240) = v75;
      *(_QWORD *)(a1 + 248) = result;
      *(_BYTE *)(a1 + 256) = 1;
    }
    v43 = *a3;
    if (!*a3)
      goto LABEL_140;
    *a3 = 0;
    if (*(_DWORD *)(a1 + 224) != 1 || *(_BYTE *)(a1 + 288))
    {
      LOBYTE(v82) = 8;
      v83 = 0;
      LOBYTE(v84) = 1;
LABEL_112:
      result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v82, (uint64_t)&v78);
      if ((_BYTE)v84)
      {
        result = v83;
        v83 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v56);
            if (v43)
              goto LABEL_117;
            goto LABEL_140;
          }
          *(_DWORD *)result -= 2;
        }
      }
      if (v43)
      {
LABEL_117:
        if (*(_DWORD *)(v43 + 16) != 1)
        {
          v54 = 0;
          --*(_DWORD *)(v43 + 16);
          goto LABEL_141;
        }
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
      }
LABEL_140:
      v54 = 0;
      goto LABEL_141;
    }
    *(_BYTE *)(a1 + 288) = 1;
    v61 = *(_DWORD **)(a1 + 264);
    *(_QWORD *)(a1 + 264) = v43;
    if (v61)
    {
      if (v61[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 16))(v61);
        v43 = *(_QWORD *)(a1 + 264);
      }
      else
      {
        --v61[4];
      }
    }
    ++*(_DWORD *)(a1 + 48);
    v62 = operator new(0x20uLL);
    *v62 = &off_1E3364C78;
    v62[1] = a1;
    v62[2] = a1;
    *((_DWORD *)v62 + 6) = 0;
    v85 = v62;
    v63 = *(_QWORD *)(v43 + 32);
    if (v63 && (*(_BYTE *)(v63 + 8) & 3) == 0)
    {
      v64 = *(JSC::JSGlobalObject **)v63;
      goto LABEL_126;
    }
LABEL_165:
    v64 = 0;
LABEL_126:
    v65 = **(_QWORD **)(v43 + 24);
    if ((v65 & 0xFFFE000000000002) != 0)
    {
      v66 = 0;
    }
    else if (*(_BYTE *)(v65 + 5) == 68)
    {
      v66 = **(JSC::Structure ***)(v43 + 24);
    }
    else
    {
      v66 = 0;
    }
    v67 = (objc_class *)WTF::fastMalloc((WTF *)0x28);
    v68 = v67;
    *(_QWORD *)v67 = &off_1E3392A30;
    if (v85)
    {
      if (v85 == &v82)
      {
        *((_QWORD *)v67 + 4) = (char *)v67 + 8;
        (*(void (**)(uint64_t *))(v82 + 24))(&v82);
      }
      else
      {
        *((_QWORD *)v67 + 4) = v85;
        v85 = 0;
      }
    }
    else
    {
      *((_QWORD *)v67 + 4) = 0;
    }
    v76[0] = v68;
    WebCore::DOMPromise::whenPromiseIsSettled(v64, v66, (uint64_t *)v76);
    if (v76[0])
      (*(void (**)(objc_class *))(*(_QWORD *)v76[0] + 8))(v76[0]);
    v71 = v85;
    if (v85 == &v82)
    {
      v72 = 4;
      v71 = &v82;
    }
    else
    {
      if (!v85)
      {
LABEL_159:
        v43 = 0;
        LOBYTE(v82) = 0;
        LOBYTE(v84) = 0;
        goto LABEL_112;
      }
      v72 = 5;
    }
    (*(void (**)(void))(*v71 + 8 * v72))();
    goto LABEL_159;
  }
  v55 = v79;
  v79 = 0;
  LOBYTE(v82) = (_BYTE)v78;
  v83 = v55;
  v84 = 1;
  result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(a1, (uint64_t)&v82);
  if (v84 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v84])(v76, &v82);
LABEL_141:
  if ((_BYTE)v80 && (result = v79, v79 = 0, result))
  {
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_145;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v56);
    if (!v54)
      goto LABEL_36;
  }
  else
  {
LABEL_145:
    if (!v54)
      goto LABEL_36;
  }
LABEL_146:
  v70 = *(_QWORD *)(*(_QWORD *)v54 - 24);
  if (*(_DWORD *)&v54[v70 + 8] == 1)
    result = (WTF::StringImpl *)(*(uint64_t (**)(char *))(*(_QWORD *)&v54[v70] + 8))(&v54[v70]);
  else
    --*(_DWORD *)&v54[v70 + 8];
LABEL_36:
  if (*((_DWORD *)v8 + 6) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v8 + 72))(v8);
  --*((_DWORD *)v8 + 6);
  return result;
}

uint64_t WebCore::PaymentRequest::settleShowPromise(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  unsigned __int8 v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WebCore::PaymentRequest *v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;
  objc_class *v13;

  v2 = *(uint64_t **)(result + 232);
  *(_QWORD *)(result + 232) = 0;
  if (!v2)
    return result;
  v3 = *(_DWORD *)(a2 + 16);
  if (!v3)
  {
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PaymentResponse>>(*v2, *(_QWORD *)a2);
    goto LABEL_13;
  }
  if (v3 != 1)
  {
    v10 = (WebCore::PaymentRequest *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::PaymentRequest::closeActivePaymentHandler(v10);
  }
  v4 = *(_BYTE *)a2;
  v5 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *v2;
  v13 = 0;
  v11[0] = v4;
  if (v5)
    *(_DWORD *)v5 += 2;
  v12 = v5;
  WebCore::DeferredPromise::reject(v6, v11, 0, &v13);
  v8 = v12;
  v12 = 0;
  if (!v8)
    goto LABEL_9;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_9:
    if (v5)
      goto LABEL_10;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v8, v7);
  if (v5)
  {
LABEL_10:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_13:
  v9 = (_DWORD *)*v2;
  *v2 = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  return WTF::fastFree((WTF *)v2, v7);
}

uint64_t WebCore::PaymentRequest::closeActivePaymentHandler(WebCore::PaymentRequest *this, void *a2)
{
  char *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v10;
  void *v11;

  v3 = (char *)this + 240;
  if (*((_BYTE *)this + 256))
  {
    v4 = *((_QWORD *)this + 30);
    v5 = (WTF *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 31) = 0;
    std::__optional_destruct_base<WebCore::PaymentRequest::PaymentHandlerWithPendingActivity,false>::reset[abi:sn180100]((uint64_t)v3, a2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        v9 = *((_QWORD *)v5 + 1);
        --*(_QWORD *)(v9 + 16);
        *((_QWORD *)v5 + 1) = 0;
        if (*(_DWORD *)(v9 + 48) == 1)
        {
          WebCore::PaymentRequest::~PaymentRequest((WebCore::PaymentRequest *)v9, v7);
          bmalloc::api::isoDeallocate(v10, v11);
        }
        else
        {
          --*(_DWORD *)(v9 + 48);
        }
        result = WTF::fastFree(v5, v7);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
    v8 = *(_QWORD *)(*(_QWORD *)v4 - 24);
    if (*(_DWORD *)(v4 + v8 + 8) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + v8) + 8))(v4 + v8);
    else
      --*(_DWORD *)(v4 + v8 + 8);
  }
  else
  {
    result = std::__optional_destruct_base<WebCore::PaymentRequest::PaymentHandlerWithPendingActivity,false>::reset[abi:sn180100]((uint64_t)v3, a2);
  }
  *((_BYTE *)this + 288) = 0;
  *((_DWORD *)this + 56) = 2;
  return result;
}

_QWORD *WebCore::PaymentRequest::stop(WebCore::PaymentRequest *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;

  WebCore::PaymentRequest::closeActivePaymentHandler(this, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3364B50;
  v3[1] = this;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *((_DWORD *)this + 12);
  *(_QWORD *)(v4 + 8) = this;
  ++*((_QWORD *)this + 2);
  *((_DWORD *)this + 12) = v5 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3364B28;
  result[1] = this;
  result[2] = v4;
  result[3] = v3;
  v11 = result;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
  {
    v11 = 0;
    v10 = off_1E3364B28;
    return (_QWORD *)v10[1]();
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v9, 12, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_6:
    v10 = (uint64_t (**)())*result;
    return (_QWORD *)v10[1]();
  }
  return result;
}

WebCore::PaymentRequest *WebCore::PaymentRequest::suspend(WebCore::PaymentRequest *this, void *a2)
{
  if ((_DWORD)a2 == 2)
  {
    if (*((_BYTE *)this + 256))
      return (WebCore::PaymentRequest *)WebCore::PaymentRequest::stop(this, a2);
  }
  return this;
}

uint64_t WebCore::PaymentRequest::abort(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  objc_class *v15;
  WTF::StringImpl *v16;
  unsigned __int8 v17[8];
  WTF::StringImpl *v18;
  int v19;
  char v20;

  v4 = *(_QWORD *)(a1 + 280);
  if ((!v4 || !*(_QWORD *)(v4 + 152)) && *(_DWORD *)(a1 + 224) == 1)
  {
    if (!*(_BYTE *)(a1 + 256))
    {
      LOBYTE(v15) = 16;
      v16 = 0;
      goto LABEL_12;
    }
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 16))(*(_QWORD *)(a1 + 240));
    if ((result & 1) != 0)
    {
      v6 = *(_DWORD *)(a1 + 224);
      LOBYTE(v15) = 16;
      v16 = 0;
      if (v6 == 2)
      {
LABEL_19:
        v11 = *a2;
        v12 = *(_QWORD *)(v11 + 24);
        if (v12 && *(_QWORD *)v12 && (*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          v13 = *(_QWORD *)(v11 + 32);
          if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
            v14 = 0;
          else
            v14 = *(uint64_t **)v13;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v11, v14, 0, (objc_class *)0xA);
          return MEMORY[0x19AEA32A0](v17);
        }
        return result;
      }
LABEL_12:
      WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)a1, a2);
      v9 = *(_QWORD *)(a1 + 280);
      if (v9)
      {
        WebCore::PaymentResponse::abortWithException(v9, (WTF::StringImpl *)&v15);
        result = (uint64_t)v16;
        v16 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        v16 = 0;
        v17[0] = 16;
        v18 = 0;
        v19 = 1;
        result = WebCore::PaymentRequest::settleShowPromise(a1, (uint64_t)v17);
        if (v19 != -1)
          result = ((uint64_t (*)(char *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v20, v17);
        v16 = 0;
      }
      goto LABEL_19;
    }
  }
  v7 = *a2;
  v15 = 0;
  v17[0] = 8;
  v18 = 0;
  WebCore::DeferredPromise::reject(v7, v17, 0, &v15);
  result = (uint64_t)v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::PaymentRequest::canMakePayment(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::URL *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  objc_class *v29;

  if (*(_DWORD *)(a1 + 224))
  {
    v4 = *a3;
    v28 = 0;
    v29 = 0;
    LOBYTE(v27) = 8;
    WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v27, 0, &v29);
    result = v28;
    v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v8 = *(unsigned int *)(a1 + 204);
  if (!(_DWORD)v8)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*a3, 0);
  v10 = *(WTF::URL **)(a1 + 192);
  v11 = 56 * v8;
  while (1)
  {
    if (*((_DWORD *)v10 + 10) != 1)
      goto LABEL_14;
    v12 = (unsigned __int8 *)WTF::URL::host(v10);
    if (WTF::operator==(v12, v13, "apple.com", 10))
    {
      v14 = (unsigned __int8 *)WTF::URL::path(v10);
      if (WTF::operator==(v14, v15, "/apple-pay", 11))
        break;
    }
    if (*((_DWORD *)v10 + 10) == 1)
    {
      v16 = (unsigned __int8 *)WTF::URL::host(v10);
      if (WTF::operator==(v16, v17, "apple.com", 10))
      {
        v18 = (unsigned __int8 *)WTF::URL::path(v10);
        if (WTF::operator==(v18, v19, "/ams-ui", 8))
        {
          v20 = WTF::fastMalloc((WTF *)0x70);
          *(_DWORD *)(v20 + 104) = 1;
          *(_QWORD *)v20 = &unk_1E3352990;
          *(_QWORD *)(v20 + 96) = &unk_1E3352A00;
          *(_QWORD *)(v20 + 8) = &off_1E33A18C0;
          *(_QWORD *)(v20 + 16) = 0;
          WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v20 + 8), (WebCore::ScriptExecutionContext *)(a2 + 192));
          *(_QWORD *)v20 = &off_1E3352688;
          *(_QWORD *)(v20 + 96) = &unk_1E3352720;
          *(_QWORD *)(v20 + 8) = &unk_1E33526F0;
          *(_BYTE *)(v20 + 24) = 0;
          *(_DWORD *)(v20 + 64) = -1;
          v23 = *((unsigned int *)v10 + 10);
          if ((_DWORD)v23 != -1)
          {
            ((void (*)(WTF::StringImpl **, uint64_t, WTF::URL *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_3URLEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS9_LNS0_6_TraitE1EEEEEvRSA_OT_EUlRSI_OT0_E_JSH_SG_EEEDcmSJ_DpOT0____fdiagonal[v23])(&v27, v20 + 24, v10);
            *(_DWORD *)(v20 + 64) = v23;
          }
          ++*(_DWORD *)(a1 + 48);
          *(_QWORD *)(v20 + 72) = a1;
          *(_BYTE *)(v20 + 80) = 0;
          v22 = (_BYTE *)(v20 + 88);
          goto LABEL_23;
        }
      }
    }
LABEL_14:
    v10 = (WTF::URL *)((char *)v10 + 56);
    v11 -= 56;
    if (!v11)
      return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*a3, 0);
  }
  v20 = WTF::fastMalloc((WTF *)0x2D0);
  *(_DWORD *)(v20 + 712) = 1;
  *(_QWORD *)v20 = &unk_1E3352868;
  *(_QWORD *)(v20 + 8) = &unk_1E3352900;
  *(_QWORD *)(v20 + 704) = &unk_1E3352968;
  *(_QWORD *)(v20 + 16) = &off_1E33A18C0;
  *(_QWORD *)(v20 + 24) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v20 + 16), (WebCore::ScriptExecutionContext *)(a2 + 192));
  *(_QWORD *)(v20 + 704) = &unk_1E3352660;
  *(_QWORD *)v20 = &off_1E3352520;
  *(_QWORD *)(v20 + 8) = &unk_1E33525D0;
  *(_QWORD *)(v20 + 16) = &unk_1E3352630;
  *(_BYTE *)(v20 + 32) = 0;
  *(_DWORD *)(v20 + 72) = -1;
  v21 = *((unsigned int *)v10 + 10);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t, WTF::URL *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_3URLEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS9_LNS0_6_TraitE1EEEEEvRSA_OT_EUlRSI_OT0_E_JSH_SG_EEEDcmSJ_DpOT0____fdiagonal[v21])(&v27, v20 + 32, v10);
    *(_DWORD *)(v20 + 72) = v21;
  }
  ++*(_DWORD *)(a1 + 48);
  *(_QWORD *)(v20 + 80) = a1;
  *(_BYTE *)(v20 + 88) = 0;
  *(_BYTE *)(v20 + 680) = 0;
  *(_BYTE *)(v20 + 688) = 0;
  *(_BYTE *)(v20 + 692) = 0;
  v22 = (_BYTE *)(v20 + 696);
LABEL_23:
  *v22 = 0;
  v24 = *a3;
  *a3 = 0;
  v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v25 = &off_1E3364B78;
  *((_QWORD *)v25 + 1) = v24;
  v27 = v25;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 32))(v20, a2, &v27);
  result = v27;
  v27 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  v26 = *(_QWORD *)(*(_QWORD *)v20 - 24);
  if (*(_DWORD *)(v20 + v26 + 8) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 + v26) + 8))(v20 + v26);
  --*(_DWORD *)(v20 + v26 + 8);
  return result;
}

WebCore::PaymentRequest *WebCore::PaymentRequest::whenDetailsSettled(WebCore::PaymentRequest *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  WebCore::PaymentRequest *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::PaymentRequest *v8;
  _QWORD *v9;
  WebCore::PaymentRequest *result;
  WebCore::PaymentRequest *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  JSC::Structure *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  bmalloc::api *v22;
  void *v23;
  _QWORD *v24;
  WebCore::PaymentRequest *v25;
  WebCore::PaymentRequest *v26;
  WebCore::PaymentRequest *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _BYTE v30[24];
  _BYTE *v31;
  WebCore::PaymentRequest *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v4 = a1;
  v35 = *MEMORY[0x1E0C80C00];
  v32 = a1;
  v5 = v33;
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v34 = v33;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v33);
    }
    else
    {
      v34 = (_QWORD *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v34 = 0;
  }
  v7 = *((_QWORD *)v4 + 33);
  if (!v7)
  {
    if (v34)
    {
      result = (WebCore::PaymentRequest *)(*(uint64_t (**)(_QWORD *))(*v34 + 48))(v34);
      goto LABEL_42;
    }
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_51;
  }
  ++*((_DWORD *)v4 + 12);
  v25 = v4;
  v26 = v4;
  v8 = v32;
  v9 = v34;
  v27 = v32;
  v2 = v28;
  if (!v34)
  {
    v29 = 0;
    goto LABEL_13;
  }
  if (v34 != v33)
  {
    v29 = v34;
    v34 = 0;
LABEL_13:
    v11 = v4;
    goto LABEL_15;
  }
  v29 = v28;
  (*(void (**)(_QWORD *, _QWORD *))(v33[0] + 24))(v33, v28);
  v11 = v25;
  v4 = v26;
  v8 = v27;
  v9 = v29;
LABEL_15:
  v12 = operator new(0x40uLL);
  v3 = v12;
  *v12 = &off_1E3364D08;
  v12[1] = v11;
  v26 = 0;
  v12[2] = v4;
  v12[3] = v8;
  if (v9)
  {
    if (v9 == v28)
    {
      v12[7] = v12 + 4;
      (*(void (**)(_QWORD *))(v28[0] + 24))(v28);
    }
    else
    {
      v12[7] = v9;
      v29 = 0;
    }
  }
  else
  {
    v12[7] = 0;
  }
  v13 = *(_QWORD *)(v7 + 32);
  if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
    v4 = 0;
  else
    v4 = *(WebCore::PaymentRequest **)v13;
  v14 = **(_QWORD **)(v7 + 24);
  if ((v14 & 0xFFFE000000000002) != 0)
  {
LABEL_51:
    v15 = 0;
    goto LABEL_27;
  }
  if (*(_BYTE *)(v14 + 5) == 68)
    v15 = **(JSC::Structure ***)(v7 + 24);
  else
    v15 = 0;
LABEL_27:
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v16 = &off_1E3392A30;
  v16[4] = v3;
  v31 = 0;
  v24 = v16;
  WebCore::DOMPromise::whenPromiseIsSettled(v4, v15, (uint64_t *)&v24);
  if (v24)
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  v18 = v31;
  if (v31 == v30)
  {
    v19 = 4;
    v18 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_34;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_34:
  if (v29 == v2)
  {
    v20 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_39;
    v20 = 5;
    v2 = v29;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v20))(v2);
LABEL_39:
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(result, v17);
      result = (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v22, v23);
    }
    else
    {
      --*((_DWORD *)result + 12);
    }
  }
LABEL_42:
  if (v34 == v33)
  {
    v21 = 4;
  }
  else
  {
    if (!v34)
      return result;
    v21 = 5;
    v5 = v34;
  }
  return (WebCore::PaymentRequest *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v21))(v5);
}

uint64_t WebCore::PaymentRequest::paymentMethodChanged(WebCore::PaymentRequest *a1, WTF::StringImpl **a2, _QWORD *a3)
{
  WTF::StringImpl *v4;
  _QWORD *v5;
  _QWORD *v6;
  WebCore::PaymentRequest *v7;
  WebCore::PaymentRequest *v8;
  _QWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  ++*((_DWORD *)a1 + 12);
  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v5 = v18;
  v6 = (_QWORD *)a3[3];
  if (!v6)
  {
    v19 = 0;
    goto LABEL_7;
  }
  if (v6 != a3)
  {
    v19 = (_QWORD *)a3[3];
    a3[3] = 0;
LABEL_7:
    v7 = a1;
    v8 = a1;
    goto LABEL_9;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v18);
  v8 = a1;
  v7 = a1;
LABEL_9:
  v9 = operator new(0x40uLL);
  v10 = v9;
  *v9 = &off_1E3364C30;
  v9[1] = v8;
  v9[2] = v7;
  if (v4)
    *(_DWORD *)v4 += 2;
  v9[3] = v4;
  if (v19)
  {
    if (v19 == v18)
    {
      v9[7] = v9 + 4;
      (*(void (**)(_QWORD *))(v18[0] + 24))(v18);
    }
    else
    {
      v9[7] = v19;
      v19 = 0;
    }
  }
  else
  {
    v9[7] = 0;
  }
  v21 = v10;
  WebCore::PaymentRequest::whenDetailsSettled(a1, v20);
  v12 = v21;
  if (v21 == v20)
  {
    v13 = 4;
    v12 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_21;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_21:
  if (v19 == v18)
  {
    v14 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_26;
    v14 = 5;
    v5 = v19;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v14))(v5);
LABEL_26:
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v11);
    else
      *(_DWORD *)v4 -= 2;
  }
  return 0;
}

WTF::StringImpl *WebCore::PaymentRequest::dispatchAndCheckUpdateEvent(uint64_t a1, WebCore::Event **a2)
{
  WTF::StringImpl *result;
  WebCore::Event *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(a1 + 24), *a2);
  v5 = *a2;
  if (!*((_BYTE *)*a2 + 72))
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = v7 - 96;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    v9 = *((_QWORD *)v5 + 3);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      *(_DWORD *)v9 += 2;
      if (v10 < 0)
        goto LABEL_26;
    }
    else
    {
      v10 = 0;
    }
    v11 = __OFADD__(v10, 2);
    v12 = v10 + 2;
    if (!v11 && !__OFADD__(v12, 59))
    {
      v13 = !v9 || (*(_BYTE *)(v9 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v12 + 59), v13, (int8x16_t *)"updateWith() should be called synchronously when handling \"", 0x3Bu, v9, (int8x16_t *)"\".", 2u, &v15);
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v8 + 248))(v8, 15, 1, &v15, 0);
        result = v15;
        v15 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
            if (!v9)
              return result;
            goto LABEL_18;
          }
          *(_DWORD *)result -= 2;
        }
        if (!v9)
          return result;
LABEL_18:
        if (*(_DWORD *)v9 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
        *(_DWORD *)v9 -= 2;
        return result;
      }
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1954DF578);
    }
LABEL_26:
    v15 = 0;
    goto LABEL_27;
  }
  return result;
}

uint64_t WebCore::PaymentRequest::scriptExecutionContext(WebCore::PaymentRequest *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

WTF::StringImpl *WebCore::PaymentRequest::accept(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  WebCore::ScriptExecutionContext *v9;
  WebCore::PaymentResponse *v10;
  WebCore::PaymentResponse *v11;
  WebCore::PaymentResponse *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::PaymentAddress *v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *result;
  WTF *v36;
  _DWORD *v37;
  WTF *v38;
  void *v39;
  bmalloc::api *v40;
  void *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  char v45;

  if (*(_QWORD *)(a1 + 280))
    v6 = WTF::RefPtr<WebCore::PaymentResponse,WTF::RawPtrTraits<WebCore::PaymentResponse>,WTF::DefaultRefDerefTraits<WebCore::PaymentResponse>>::unspecifiedBoolTypeInstance;
  else
    v6 = 0;
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (WebCore::ScriptExecutionContext *)(v8 - 96);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    v10 = (WebCore::PaymentResponse *)bmalloc::api::isoAllocate();
    v11 = WebCore::PaymentResponse::PaymentResponse(v10, v9, (WebCore::PaymentRequest *)a1);
    WebCore::PaymentResponse::finishConstruction(v11);
    v12 = *(WebCore::PaymentResponse **)(a1 + 280);
    *(_QWORD *)(a1 + 280) = v10;
    if (v12)
    {
      if (*((_DWORD *)v12 + 12) == 1)
      {
        WebCore::PaymentResponse::~PaymentResponse(v12, a2);
        bmalloc::api::isoDeallocate(v40, v41);
        v10 = *(WebCore::PaymentResponse **)(a1 + 280);
      }
      else
      {
        --*((_DWORD *)v12 + 12);
      }
    }
    v13 = *(_DWORD **)(a1 + 136);
    if (v13)
      *v13 += 2;
    v14 = (WTF::StringImpl *)*((_QWORD *)v10 + 8);
    *((_QWORD *)v10 + 8) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v15 = *(_QWORD *)(a1 + 280);
  v16 = (_DWORD *)*a2;
  if (*a2)
    *v16 += 2;
  v17 = *(WTF::StringImpl **)(v15 + 72);
  *(_QWORD *)(v15 + 72) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(_QWORD **)(a1 + 280);
  v19 = *a3;
  *a3 = 0;
  v20 = v18[10];
  v18[10] = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v18[11] = 0;
  v21 = v18[12];
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 3;
    v18[12] = 0;
  }
  v22 = *(_QWORD *)(a1 + 280);
  v23 = *(WebCore::PaymentAddress **)(v22 + 104);
  *(_QWORD *)(v22 + 104) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v23, (WTF::StringImpl *)a2);
      WTF::fastFree(v38, v39);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  v24 = *(_QWORD *)(a1 + 280);
  v25 = (_DWORD **)MEMORY[0x1E0CBF6F0];
  v26 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(v24 + 112);
  *(_QWORD *)(v24 + 112) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
      v26 = *v25;
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *(_QWORD *)(a1 + 280);
  if (v26)
    *v26 += 2;
  v29 = *(WTF::StringImpl **)(v28 + 120);
  *(_QWORD *)(v28 + 120) = v26;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
      v26 = *v25;
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = *(_QWORD *)(a1 + 280);
  if (v26)
    *v26 += 2;
  v31 = *(WTF::StringImpl **)(v30 + 128);
  *(_QWORD *)(v30 + 128) = v26;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
      v26 = *v25;
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = *(_QWORD *)(a1 + 280);
  if (v26)
    *v26 += 2;
  v33 = *(WTF::StringImpl **)(v32 + 136);
  *(_QWORD *)(v32 + 136) = v26;
  if (!v33)
  {
LABEL_49:
    if (v6)
      goto LABEL_50;
    goto LABEL_66;
  }
  if (*(_DWORD *)v33 != 2)
  {
    *(_DWORD *)v33 -= 2;
    goto LABEL_49;
  }
  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)a2);
  if (v6)
  {
LABEL_50:
    v34 = *(_QWORD *)(a1 + 280);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    result = *(WTF::StringImpl **)(v34 + 152);
    if (result)
    {
      result = WebCore::DOMPromiseDeferred<void>::settle(result, (uint64_t)&v42);
      v36 = *(WTF **)(v34 + 152);
      *(_QWORD *)(v34 + 152) = 0;
      if (v36)
      {
        v37 = *(_DWORD **)v36;
        *(_QWORD *)v36 = 0;
        if (v37)
        {
          if (v37[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
          else
            --v37[4];
        }
        result = (WTF::StringImpl *)WTF::fastFree(v36, a2);
      }
    }
    if ((_BYTE)v44)
    {
      result = v43;
      v43 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_68;
  }
LABEL_66:
  v42 = *(_QWORD *)(a1 + 280);
  LODWORD(v44) = 0;
  result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(a1, (uint64_t)&v42);
  if ((_DWORD)v44 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v44])(&v45, &v42);
LABEL_68:
  *(_DWORD *)(a1 + 224) = 2;
  return result;
}

WTF::StringImpl *WebCore::PaymentRequest::accept(uint64_t a1, _QWORD *a2, uint64_t *a3, _DWORD **a4, WTF::StringImpl **a5, WTF::StringImpl **a6, WTF::StringImpl **a7)
{
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  WebCore::ScriptExecutionContext *v17;
  WebCore::PaymentResponse *v18;
  WebCore::PaymentResponse *v19;
  WebCore::PaymentResponse *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  WebCore::PaymentAddress *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  char v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *result;
  WTF *v52;
  _DWORD *v53;
  WTF *v54;
  void *v55;
  bmalloc::api *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  char v61;

  if (*(_QWORD *)(a1 + 280))
    v14 = WTF::RefPtr<WebCore::PaymentResponse,WTF::RawPtrTraits<WebCore::PaymentResponse>,WTF::DefaultRefDerefTraits<WebCore::PaymentResponse>>::unspecifiedBoolTypeInstance;
  else
    v14 = 0;
  if (!v14)
  {
    v15 = *(_QWORD *)(a1 + 8);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        v17 = (WebCore::ScriptExecutionContext *)(v16 - 96);
      else
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
    v18 = (WebCore::PaymentResponse *)bmalloc::api::isoAllocate();
    v19 = WebCore::PaymentResponse::PaymentResponse(v18, v17, (WebCore::PaymentRequest *)a1);
    WebCore::PaymentResponse::finishConstruction(v19);
    v20 = *(WebCore::PaymentResponse **)(a1 + 280);
    *(_QWORD *)(a1 + 280) = v18;
    if (v20)
    {
      if (*((_DWORD *)v20 + 12) == 1)
      {
        WebCore::PaymentResponse::~PaymentResponse(v20, a2);
        bmalloc::api::isoDeallocate(v56, v57);
        v18 = *(WebCore::PaymentResponse **)(a1 + 280);
      }
      else
      {
        --*((_DWORD *)v20 + 12);
      }
    }
    v21 = *(_DWORD **)(a1 + 136);
    if (v21)
      *v21 += 2;
    v22 = (WTF::StringImpl *)*((_QWORD *)v18 + 8);
    *((_QWORD *)v18 + 8) = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  v23 = *(_QWORD *)(a1 + 280);
  v24 = (_DWORD *)*a2;
  if (*a2)
    *v24 += 2;
  v25 = *(WTF::StringImpl **)(v23 + 72);
  *(_QWORD *)(v23 + 72) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(_QWORD **)(a1 + 280);
  v27 = *a3;
  *a3 = 0;
  v28 = v26[10];
  v26[10] = v27;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v26[11] = 0;
  v29 = v26[12];
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 3;
    v26[12] = 0;
  }
  v30 = *(_QWORD *)(a1 + 280);
  v31 = *(unsigned __int8 *)(a1 + 55);
  if (*(_BYTE *)(a1 + 55))
  {
    v32 = *a4;
    if (*a4)
      ++*v32;
  }
  else
  {
    v32 = 0;
  }
  v33 = *(WebCore::PaymentAddress **)(v30 + 104);
  *(_QWORD *)(v30 + 104) = v32;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v33, (WTF::StringImpl *)a2);
      WTF::fastFree(v54, v55);
      v31 = *(unsigned __int8 *)(a1 + 55);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  v34 = *(_QWORD *)(a1 + 280);
  if (v31)
  {
    v35 = *(WTF::StringImpl **)(a1 + 208);
    if (v35)
    {
      v36 = 0;
      *(_DWORD *)v35 += 4;
      goto LABEL_38;
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = 1;
LABEL_38:
  v37 = *(WTF::StringImpl **)(v34 + 112);
  *(_QWORD *)(v34 + 112) = v35;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
      if ((v36 & 1) != 0)
        goto LABEL_44;
      goto LABEL_42;
    }
    *(_DWORD *)v37 -= 2;
  }
  if ((v36 & 1) != 0)
    goto LABEL_44;
LABEL_42:
  if (*(_DWORD *)v35 == 2)
    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v35 -= 2;
LABEL_44:
  v38 = *(_QWORD *)(a1 + 280);
  if (*(_BYTE *)(a1 + 52))
  {
    v39 = *a5;
    if (v39)
    {
      v40 = 0;
      *(_DWORD *)v39 += 4;
      goto LABEL_49;
    }
  }
  else
  {
    v39 = 0;
  }
  v40 = 1;
LABEL_49:
  v41 = *(WTF::StringImpl **)(v38 + 120);
  *(_QWORD *)(v38 + 120) = v39;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)a2);
      if ((v40 & 1) != 0)
        goto LABEL_55;
      goto LABEL_53;
    }
    *(_DWORD *)v41 -= 2;
  }
  if ((v40 & 1) != 0)
    goto LABEL_55;
LABEL_53:
  if (*(_DWORD *)v39 == 2)
    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v39 -= 2;
LABEL_55:
  v42 = *(_QWORD *)(a1 + 280);
  if (*(_BYTE *)(a1 + 53))
  {
    v43 = *a6;
    if (v43)
    {
      v44 = 0;
      *(_DWORD *)v43 += 4;
      goto LABEL_60;
    }
  }
  else
  {
    v43 = 0;
  }
  v44 = 1;
LABEL_60:
  v45 = *(WTF::StringImpl **)(v42 + 128);
  *(_QWORD *)(v42 + 128) = v43;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)a2);
      if ((v44 & 1) != 0)
        goto LABEL_66;
      goto LABEL_64;
    }
    *(_DWORD *)v45 -= 2;
  }
  if ((v44 & 1) != 0)
    goto LABEL_66;
LABEL_64:
  if (*(_DWORD *)v43 == 2)
    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v43 -= 2;
LABEL_66:
  v46 = *(_QWORD *)(a1 + 280);
  if (*(_BYTE *)(a1 + 54))
  {
    v47 = *a7;
    if (v47)
    {
      v48 = 0;
      *(_DWORD *)v47 += 4;
      goto LABEL_71;
    }
  }
  else
  {
    v47 = 0;
  }
  v48 = 1;
LABEL_71:
  v49 = *(WTF::StringImpl **)(v46 + 136);
  *(_QWORD *)(v46 + 136) = v47;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)a2);
      if ((v48 & 1) != 0)
        goto LABEL_77;
      goto LABEL_75;
    }
    *(_DWORD *)v49 -= 2;
  }
  if ((v48 & 1) != 0)
    goto LABEL_77;
LABEL_75:
  if (*(_DWORD *)v47 == 2)
    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v47 -= 2;
LABEL_77:
  if (v14)
  {
    v50 = *(_QWORD *)(a1 + 280);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    result = *(WTF::StringImpl **)(v50 + 152);
    if (result)
    {
      result = WebCore::DOMPromiseDeferred<void>::settle(result, (uint64_t)&v58);
      v52 = *(WTF **)(v50 + 152);
      *(_QWORD *)(v50 + 152) = 0;
      if (v52)
      {
        v53 = *(_DWORD **)v52;
        *(_QWORD *)v52 = 0;
        if (v53)
        {
          if (v53[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 16))(v53);
          else
            --v53[4];
        }
        result = (WTF::StringImpl *)WTF::fastFree(v52, a2);
      }
    }
    if ((_BYTE)v60)
    {
      result = v59;
      v59 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v58 = *(_QWORD *)(a1 + 280);
    LODWORD(v60) = 0;
    result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(a1, (uint64_t)&v58);
    if ((_DWORD)v60 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v60])(&v61, &v58);
  }
  *(_DWORD *)(a1 + 224) = 2;
  return result;
}

WTF::StringImpl *WebCore::PaymentRequest::complete@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;

  if (*((_BYTE *)result + 256))
  {
    v3 = (uint64_t)result + 240;
    v4 = (char *)*((_QWORD *)result + 30);
    v5 = *(_QWORD *)v4;
    ++*(_DWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 24) + 8];
    result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr, char *))(v5 + 56))(&v10, v4);
    if (v12)
    {
      v7 = v10;
      *(_QWORD *)(a2 + 8) = v11;
      *(_BYTE *)a2 = v7;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::PaymentRequest::PaymentHandlerWithPendingActivity,false>::reset[abi:sn180100](v3, v6);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      if (v12)
      {
        result = v11;
        v11 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v9 = *(_QWORD *)(*(_QWORD *)v4 - 24);
    if (*(_DWORD *)&v4[v9 + 8] == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(char *))(*(_QWORD *)&v4[v9] + 8))(&v4[v9]);
    else
      --*(_DWORD *)&v4[v9 + 8];
  }
  else
  {
    *(_BYTE *)a2 = 16;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::PaymentRequest::cancel(WebCore::PaymentRequest *this, void *a2)
{
  WTF::StringImpl *result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10[8];
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[2];
  int v13;
  char v14;

  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::PaymentRequest::PaymentHandlerWithPendingActivity,false>::reset[abi:sn180100]((uint64_t)this + 240, a2);
  if (*((_BYTE *)this + 288))
  {
    *((_BYTE *)this + 289) = 1;
    v5 = *((_QWORD *)this + 1);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        v7 = v6 - 96;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v7 + 248))(v7, 15, 2, v12, 0);
    result = v12[0];
    v12[0] = 0;
    if (result)
    {
LABEL_7:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v10[0] = 16;
    v11 = 0;
    if (*((_DWORD *)this + 56) == 2)
      return result;
    WebCore::PaymentRequest::closeActivePaymentHandler(this, v4);
    v9 = *((_QWORD *)this + 35);
    if (v9)
    {
      WebCore::PaymentResponse::abortWithException(v9, (WTF::StringImpl *)v10);
      result = v11;
      if (!v11)
        return result;
      goto LABEL_7;
    }
    LOBYTE(v12[0]) = 16;
    v12[1] = 0;
    v13 = 1;
    result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise((uint64_t)this, (uint64_t)v12);
    if (v13 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13])(&v14, v12);
  }
  return result;
}

void WebCore::PaymentRequestUpdateEvent::~PaymentRequestUpdateEvent(WebCore::PaymentRequestUpdateEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::PaymentRequestUpdateEvent::updateWith@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  char v6;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  JSC::JSGlobalObject *v25;
  uint64_t v26;
  JSC::Structure *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(result + 20);
  if ((v4 & 0x200) == 0)
    goto LABEL_3;
  v5 = result;
  if (*(_BYTE *)(result + 72))
    goto LABEL_3;
  *(_DWORD *)(result + 20) = v4 | 0x30;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD *)(StatusReg + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
  {
    result = WebCore::threadGlobalDataSlow((WebCore *)result);
    v10 = result;
  }
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  if (*(_QWORD *)(v5 + 24) == *(_QWORD *)(v11 + 1816))
  {
    v18 = 1;
  }
  else
  {
    v12 = *(_QWORD *)(StatusReg + 736);
    if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    {
      result = WebCore::threadGlobalDataSlow((WebCore *)result);
      v13 = result;
    }
    v14 = *(_QWORD *)(v13 + 40);
    if (!v14)
    {
      result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
      v14 = *(_QWORD *)(v13 + 40);
    }
    if (*(_QWORD *)(v5 + 24) == *(_QWORD *)(v14 + 1840))
    {
      v18 = 2;
    }
    else
    {
      v15 = *(_QWORD *)(StatusReg + 736);
      if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
      {
        result = WebCore::threadGlobalDataSlow((WebCore *)result);
        v16 = result;
      }
      v17 = *(_QWORD *)(v16 + 40);
      if (!v17)
      {
        result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
        v17 = *(_QWORD *)(v16 + 40);
      }
      if (*(_QWORD *)(v5 + 24) != *(_QWORD *)(v17 + 1448))
      {
        v6 = 33;
        goto LABEL_4;
      }
      v18 = 3;
    }
  }
  v19 = *(_QWORD *)(v5 + 48);
  if (v19)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 16))(*(_QWORD *)(v5 + 48));
    if ((result & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1954E02F0);
    }
  }
  v20 = v19 ? v19 - 24 : 0;
  if (*(_DWORD *)(v20 + 224) != 1 || *(_BYTE *)(v20 + 288))
  {
LABEL_3:
    v6 = 8;
LABEL_4:
    *(_BYTE *)a3 = v6;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  *(_BYTE *)(v20 + 288) = 1;
  v21 = *a2;
  *a2 = 0;
  v22 = *(_DWORD **)(v20 + 264);
  *(_QWORD *)(v20 + 264) = v21;
  if (v22)
  {
    if (v22[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
      v21 = *(_QWORD *)(v20 + 264);
    }
    else
    {
      --v22[4];
    }
  }
  ++*(_DWORD *)(v20 + 48);
  v23 = operator new(0x20uLL);
  *v23 = &off_1E3364C78;
  v23[1] = v20;
  v23[2] = v20;
  *((_DWORD *)v23 + 6) = v18;
  v24 = *(_QWORD *)(v21 + 32);
  if (!v24 || (*(_BYTE *)(v24 + 8) & 3) != 0)
    v25 = 0;
  else
    v25 = *(JSC::JSGlobalObject **)v24;
  v26 = **(_QWORD **)(v21 + 24);
  if ((v26 & 0xFFFE000000000002) != 0)
  {
    v27 = 0;
  }
  else if (*(_BYTE *)(v26 + 5) == 68)
  {
    v27 = **(JSC::Structure ***)(v21 + 24);
  }
  else
  {
    v27 = 0;
  }
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v28 = &off_1E3392A30;
  v28[4] = v23;
  v32 = 0;
  v30 = v28;
  WebCore::DOMPromise::whenPromiseIsSettled(v25, v27, (uint64_t *)&v30);
  if (v30)
    (*(void (**)(_QWORD *))(*v30 + 8))(v30);
  result = (uint64_t)v32;
  if (v32 == v31)
  {
    v29 = 4;
    result = (uint64_t)v31;
    goto LABEL_50;
  }
  if (v32)
  {
    v29 = 5;
LABEL_50:
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v29))();
  }
  *(_BYTE *)(v5 + 72) = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  return result;
}

BOOL WebCore::isValidDecimalMonetaryValue(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v8;
  int v9;

  v2 = a2;
  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v3 = 0;
      while (2)
      {
        v5 = *(unsigned __int8 *)a1;
        a1 = (unsigned __int16 *)((char *)a1 + 1);
        v4 = v5;
        switch(v3)
        {
          case 0:
            if (v4 != 45)
              goto LABEL_9;
            v3 = 1;
            goto LABEL_15;
          case 1:
            goto LABEL_9;
          case 2:
            if (v4 == 46)
            {
              v3 = 3;
            }
            else
            {
LABEL_9:
              if ((v4 - 48) >= 0xA)
                return 0;
              v3 = 2;
            }
LABEL_15:
            if (!--v2)
              return v3 == 2 || v3 == 4;
            continue;
          case 3:
            if ((v4 - 48) >= 0xA)
              return 0;
            goto LABEL_14;
          case 4:
            if ((v4 - 48) > 9)
              return 0;
LABEL_14:
            v3 = 4;
            goto LABEL_15;
          default:
            goto LABEL_15;
        }
      }
    }
    v3 = 0;
    while (1)
    {
      v9 = *a1++;
      v8 = v9;
      switch(v3)
      {
        case 0:
          if (v8 == 45)
          {
            v3 = 1;
            goto LABEL_36;
          }
          if ((v8 - 48) > 9)
            return 0;
          goto LABEL_35;
        case 1:
          goto LABEL_32;
        case 2:
          if (v8 == 46)
          {
            v3 = 3;
          }
          else
          {
LABEL_32:
            if ((v8 - 48) >= 0xA)
              return 0;
LABEL_35:
            v3 = 2;
          }
LABEL_36:
          if (!--v2)
            return v3 == 2 || v3 == 4;
          break;
        case 3:
        case 4:
          if ((v8 - 48) >= 0xA)
            return 0;
          v3 = 4;
          goto LABEL_36;
        default:
          goto LABEL_36;
      }
    }
  }
  v3 = 0;
  return v3 == 2 || v3 == 4;
}

uint64_t WebCore::PaymentRequest::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

WebCore::PaymentRequest *WebCore::PaymentRequest::deref(WebCore::PaymentRequest *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 12) == 1)
  {
    WebCore::PaymentRequest::~PaymentRequest(this, a2);
    return (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 12);
  }
  return this;
}

uint64_t WebCore::PaymentRequest::eventTargetInterface(WebCore::PaymentRequest *this)
{
  return 17;
}

uint64_t WebCore::PaymentRequest::isPaymentRequest(WebCore::PaymentRequest *this)
{
  return 1;
}

uint64_t WebCore::PaymentRequest::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

WebCore::PaymentRequest *WebCore::PaymentRequest::derefEventTarget(WebCore::PaymentRequest *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 12) == 1)
  {
    WebCore::PaymentRequest::~PaymentRequest(this, a2);
    return (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 12);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::PaymentRequest::eventTargetInterface(WebCore::PaymentRequest *this)
{
  return 17;
}

uint64_t `non-virtual thunk to'WebCore::PaymentRequest::scriptExecutionContext(WebCore::PaymentRequest *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::PaymentRequest::isPaymentRequest(WebCore::PaymentRequest *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::PaymentRequest::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::PaymentRequest::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this + 24) == 1)
  {
    WebCore::PaymentRequest::~PaymentRequest((WebCore::PaymentRequest *)(this - 24), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this + 24);
  }
  return this;
}

void WebCore::MerchantValidationEvent::~MerchantValidationEvent(WebCore::MerchantValidationEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::PaymentMethodChangeEvent::~PaymentMethodChangeEvent(WebCore::PaymentMethodChangeEvent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v3 = *((_QWORD *)this + 17);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 17) = 0;
  }
  v4 = *((unsigned int *)this + 30);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3364D50[v4])(&v6, (char *)this + 88);
  *((_DWORD *)this + 30) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  char v8;

  v3 = *((_QWORD *)this + 17);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 17) = 0;
  }
  v4 = *((unsigned int *)this + 30);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3364D50[v4])(&v8, (char *)this + 88);
  *((_DWORD *)this + 30) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stringify(std::variant<WTF::String,WTF::URL> const&)::$_0,WebCore::stringify(std::variant<WTF::String,WTF::URL> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::URL> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stringify(std::variant<WTF::String,WTF::URL> const&)::$_0,WebCore::stringify(std::variant<WTF::String,WTF::URL> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::URL> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_3URLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_3URLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD *)(a2 + 8) & 0xFFFFFFFE | a3[1] & 1;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a3 + 2) >> 1) & 1));
  *(_DWORD *)(a2 + 8) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
  *(_DWORD *)(a2 + 8) = v6;
  v7 = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 8) = a3[1] & 0xFFFFFFC0 | v7 & 0x3F;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)a3 + 12);
  result = *(double *)((char *)a3 + 28);
  *(double *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 2) &= ~1u;
  return result;
}

WTF::StringImpl *WebCore::checkAndCanonicalizeAmount(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  BOOL v11;
  int v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  if (!*a2)
  {
    v4 = 0;
    goto LABEL_20;
  }
  v4 = *(_DWORD *)(v3 + 4);
  if (v4 != 3)
  {
    *(_DWORD *)v3 += 2;
    if (v4 < 0)
      goto LABEL_43;
    goto LABEL_20;
  }
  v6 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((*v6 | 0x20u) - 97 >= 0x1A || (v6[1] | 0x20u) - 97 > 0x19)
      goto LABEL_19;
    v7 = v6[2];
  }
  else
  {
    if ((*(unsigned __int16 *)v6 | 0x20u) - 97 >= 0x1A || (*((unsigned __int16 *)v6 + 1) | 0x20u) - 97 > 0x19)
      goto LABEL_19;
    v7 = *((unsigned __int16 *)v6 + 2);
  }
  if ((v7 | 0x20u) - 97 >= 0x1A)
  {
LABEL_19:
    *(_DWORD *)v3 += 2;
    v4 = 3;
LABEL_20:
    v11 = __OFADD__(v4, 31);
    v12 = v4 + 31;
    if (!v11 && !__OFADD__(v12, 1))
    {
      v13 = !v3 || (*(_BYTE *)(v3 + 16) & 4) != 0;
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v12 + 1), v13, 34, v3, (int8x16_t *)"\" is not a valid currency code.", 0x1Fu, &v20);
      v15 = v20;
      if (v20)
      {
        *(_BYTE *)a1 = 32;
        *(_QWORD *)(a1 + 8) = v15;
        *(_BYTE *)(a1 + 16) = 1;
        v20 = 0;
        if (!v3)
          return result;
LABEL_27:
        if (*(_DWORD *)v3 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v3, v14);
        *(_DWORD *)v3 -= 2;
        return result;
      }
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x1954E0A8CLL);
    }
LABEL_43:
    v20 = 0;
    goto LABEL_44;
  }
  v3 = a2[1];
  if (!v3)
  {
    LODWORD(v8) = 0;
LABEL_32:
    if (!__OFADD__((_DWORD)v8, 40) && !__OFADD__(v8 + 40, 1))
    {
      v16 = !v3 || (*(_BYTE *)(v3 + 16) & 4) != 0;
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v8 + 41), v16, 34, v3, (int8x16_t *)"\" is not a valid decimal monetary value.", 0x28u, &v19);
      v17 = v19;
      if (v19)
      {
        *(_BYTE *)a1 = 33;
        *(_QWORD *)(a1 + 8) = v17;
        *(_BYTE *)(a1 + 16) = 1;
        v19 = 0;
        if (!v3)
          return result;
        goto LABEL_27;
      }
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x1954E0AA0);
    }
LABEL_46:
    v19 = 0;
    goto LABEL_47;
  }
  v8 = *(unsigned int *)(v3 + 4);
  if (!WebCore::isValidDecimalMonetaryValue(*(unsigned __int16 **)(v3 + 8), v8 | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32)))
  {
    *(_DWORD *)v3 += 2;
    if ((v8 & 0x80000000) != 0)
      goto LABEL_46;
    goto LABEL_32;
  }
  WTF::String::convertToASCIIUppercase((WTF::String *)a2);
  result = (WTF::StringImpl *)*a2;
  *a2 = (uint64_t)v18;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v9);
      result = 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringENS9_6VectorISA_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *result;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v3)
  {
    v6 = *(WTF::StringImpl ***)(a2 + 8);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringENS9_6VectorISA_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::PaymentShippingOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::PaymentShippingOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = *(_DWORD *)(result + 12);
      if (v4)
        WTF::VectorDestructor<true,WebCore::PaymentShippingOption>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 40 * v4));
      result = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v5 = *a2;
      *a2 = 0;
      *(_QWORD *)v3 = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(v3 + 8) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v5;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    v6 = *(_DWORD *)(result + 12);
    if (v6)
      WTF::VectorDestructor<true,WebCore::PaymentShippingOption>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 40 * v6));
    result = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v7;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PaymentDetailsUpdateENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::PaymentDetailsUpdate *this)
{
  WebCore::PaymentDetailsUpdate::~PaymentDetailsUpdate(this, this);
}

uint64_t std::__optional_destruct_base<WebCore::PaymentRequest::PaymentHandlerWithPendingActivity,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;

  if (*(_BYTE *)(result + 16))
  {
    v2 = result;
    v3 = *(WTF **)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v6 = *((_QWORD *)v3 + 1);
        --*(_QWORD *)(v6 + 16);
        *((_QWORD *)v3 + 1) = 0;
        if (*(_DWORD *)(v6 + 48) == 1)
        {
          WebCore::PaymentRequest::~PaymentRequest((WebCore::PaymentRequest *)v6, a2);
          bmalloc::api::isoDeallocate(v7, v8);
        }
        else
        {
          --*(_DWORD *)(v6 + 48);
        }
        result = WTF::fastFree(v3, a2);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    v4 = *(char **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v4 - 24);
      if (*(_DWORD *)&v4[v5 + 8] == 1)
        result = (*(uint64_t (**)(char *))(*(_QWORD *)&v4[v5] + 8))(&v4[v5]);
      else
        --*(_DWORD *)&v4[v5 + 8];
    }
    *(_BYTE *)(v2 + 16) = 0;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::PaymentRequest::Method,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 56 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::PaymentRequest::Method,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::PaymentRequest::Method,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::PaymentRequest::Method,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  char v16;
  char v17;

  if (result[2] < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 56 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(56 * a2));
      v2[2] = v5 / 0x38;
      v15 = v2;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 56 * v4;
        do
        {
          v10 = &v7[v8 / 4];
          v11 = (char *)v3 + v8;
          *(_BYTE *)v10 = 0;
          v10[10] = -1;
          v12 = *(unsigned int *)((char *)v3 + v8 + 40);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, unsigned int *, char *))off_1E3364A98[v12])(&v16, &v7[v8 / 4], (char *)v3 + v8);
            v10[10] = v12;
          }
          v13 = *((_QWORD *)v11 + 6);
          *((_QWORD *)v11 + 6) = 0;
          *((_QWORD *)v10 + 6) = v13;
          result = (unsigned int *)*((_QWORD *)v11 + 6);
          *((_QWORD *)v11 + 6) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v14 = *((unsigned int *)v11 + 10);
          if ((_DWORD)v14 != -1)
            result = (unsigned int *)((uint64_t (*)(char *, char *))off_1E3364A68[v14])(&v17, (char *)v3 + v8);
          *((_DWORD *)v11 + 10) = -1;
          v8 += 56;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v15 == v3)
        {
          *(_QWORD *)v15 = 0;
          v15[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PaymentResponse>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::PaymentResponse>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::PaymentRequest>(WebCore::PaymentRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::PaymentRequest>(WebCore::PaymentRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::PaymentRequest>(WebCore::PaymentRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::PaymentRequest>(WebCore::PaymentRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::PaymentRequest *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3364B28;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 48) == 1)
      {
        WebCore::PaymentRequest::~PaymentRequest((WebCore::PaymentRequest *)v7, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 48);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::PaymentRequest *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v5, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 12);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentRequest::stop(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v3[8];
  uint64_t v4;
  int v5;
  char v6;

  v1 = *(_QWORD *)(a1 + 8);
  v3[0] = 16;
  v4 = 0;
  v5 = 1;
  result = WebCore::PaymentRequest::settleShowPromise(v1, (uint64_t)v3);
  if (v5 != -1)
    return ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v6, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PaymentRequest::canMakePayment(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364B78;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentRequest::canMakePayment(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364B78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentRequest::canMakePayment(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::shippingAddressChanged(WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&)::$_0,std::allocator<WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&>,void ()(void)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::PaymentAddress *v3;
  WebCore::PaymentRequest *v4;
  WTF *v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  *a1 = &off_1E3364BA0;
  v3 = (WebCore::PaymentAddress *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::PaymentRequest::shippingAddressChanged(WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&)::$_0,std::allocator<WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&>,void ()(void)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::PaymentAddress *v3;
  WebCore::PaymentRequest *v4;
  WTF *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  *a1 = &off_1E3364BA0;
  v3 = (WebCore::PaymentAddress *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::shippingAddressChanged(WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&)::$_0,std::allocator<WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  result = operator new(0x20uLL);
  v3 = a1[1];
  v4 = a1[2];
  *result = &off_1E3364BA0;
  result[1] = v3;
  ++*(_DWORD *)(v4 + 48);
  v5 = (_DWORD *)a1[3];
  ++*v5;
  result[2] = v4;
  result[3] = v5;
  return result;
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::shippingAddressChanged(WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&)::$_0,std::allocator<WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  v2 = result[1];
  *a2 = &off_1E3364BA0;
  a2[1] = v2;
  v3 = result[2];
  ++*(_DWORD *)(v3 + 48);
  a2[2] = v3;
  v4 = (_DWORD *)result[3];
  ++*v4;
  a2[3] = v4;
  return result;
}

WebCore::PaymentRequest *std::__function::__func<WebCore::PaymentRequest::shippingAddressChanged(WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&)::$_0,std::allocator<WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&>,void ()(void)>::destroy(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::PaymentAddress *v3;
  WebCore::PaymentRequest *result;
  WTF *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = *(WebCore::PaymentAddress **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  result = *(WebCore::PaymentRequest **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(result, a2);
      return (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)result + 12);
    }
  }
  return result;
}

void std::__function::__func<WebCore::PaymentRequest::shippingAddressChanged(WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&)::$_0,std::allocator<WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&>,void ()(void)>::destroy_deallocate(_QWORD *__p, WTF::StringImpl *a2)
{
  WebCore::PaymentAddress *v3;
  WebCore::PaymentRequest *v4;
  WTF *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (WebCore::PaymentAddress *)__p[3];
  __p[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::PaymentRequest *)__p[2];
  __p[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  operator delete(__p);
}

WTF::StringImpl *std::__function::__func<WebCore::PaymentRequest::shippingAddressChanged(WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&)::$_0,std::allocator<WTF::Ref<WebCore::PaymentAddress,WTF::RawPtrTraits<WebCore::PaymentAddress>,WTF::DefaultRefDerefTraits<WebCore::PaymentAddress>> &&>,void ()(void)>::operator()(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::PaymentAddress *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  WTF::StringImpl *result;
  WTF *v13;
  void *v14;
  WebCore::Event *v15;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(WebCore::PaymentAddress **)(v2 + 216);
  *(_QWORD *)(v2 + 216) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v4, a2);
      v4 = (WebCore::PaymentAddress *)WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(v4);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  v8 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0xC8200 | (*(_QWORD *)(v7 + 1816) != 0);
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v10;
  v11 = *(_DWORD **)(v7 + 1816);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v8 + 24) = v11;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)v8 = off_1E3364F30;
  *(_BYTE *)(v8 + 72) = 0;
  v15 = (WebCore::Event *)v8;
  result = WebCore::PaymentRequest::dispatchAndCheckUpdateEvent(v2, &v15);
  if (*(_DWORD *)(v8 + 16) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  --*(_DWORD *)(v8 + 16);
  return result;
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0,std::allocator<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0>,void ()(void)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E3364BE8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0,std::allocator<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0>,void ()(void)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  bmalloc::api *v5;
  void *v6;

  *a1 = &off_1E3364BE8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0,std::allocator<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  result = operator new(0x20uLL);
  v3 = a1[1];
  v4 = a1[2];
  *result = &off_1E3364BE8;
  result[1] = v3;
  ++*(_DWORD *)(v4 + 48);
  result[2] = v4;
  v5 = (_DWORD *)a1[3];
  if (v5)
    *v5 += 2;
  result[3] = v5;
  return result;
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0,std::allocator<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  v2 = result[1];
  *a2 = &off_1E3364BE8;
  a2[1] = v2;
  v3 = result[2];
  ++*(_DWORD *)(v3 + 48);
  a2[2] = v3;
  v4 = (_DWORD *)result[3];
  if (v4)
    *v4 += 2;
  a2[3] = v4;
  return result;
}

WebCore::PaymentRequest *std::__function::__func<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0,std::allocator<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0>,void ()(void)>::destroy(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *result;
  bmalloc::api *v5;
  void *v6;

  v3 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WebCore::PaymentRequest **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(result, a2);
      return (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)result + 12);
    }
  }
  return result;
}

void std::__function::__func<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0,std::allocator<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::PaymentRequest *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)__p[3];
  __p[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::PaymentRequest *)__p[2];
  __p[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v4, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v4 + 12);
    }
  }
  operator delete(__p);
}

WTF::StringImpl *std::__function::__func<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0,std::allocator<WebCore::PaymentRequest::shippingOptionChanged(WTF::String const&)::$_0>,void ()(void)>::operator()(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  WTF::StringImpl *result;
  WebCore::Event *v13;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD **)(a1 + 24);
  if (v3)
    *v3 += 2;
  v4 = *(WTF::StringImpl **)(v2 + 208);
  *(_QWORD *)(v2 + 208) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(v4);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  v8 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0xC8200 | (*(_QWORD *)(v7 + 1840) != 0);
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v10;
  v11 = *(_DWORD **)(v7 + 1840);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v8 + 24) = v11;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)v8 = off_1E3364F30;
  *(_BYTE *)(v8 + 72) = 0;
  v13 = (WebCore::Event *)v8;
  result = WebCore::PaymentRequest::dispatchAndCheckUpdateEvent(v2, &v13);
  if (*(_DWORD *)(v8 + 16) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  --*(_DWORD *)(v8 + 16);
  return result;
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::paymentMethodChanged(WTF::String const&,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&)::$_0,std::allocator<std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&>,void ()(void)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::PaymentRequest *v7;
  bmalloc::api *v9;
  void *v10;

  *a1 = &off_1E3364C30;
  v3 = a1 + 4;
  v4 = (_QWORD *)a1[7];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v7, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v7 + 12);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::PaymentRequest::paymentMethodChanged(WTF::String const&,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&)::$_0,std::allocator<std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&>,void ()(void)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::PaymentRequest *v7;
  bmalloc::api *v8;
  void *v9;

  *a1 = &off_1E3364C30;
  v3 = a1 + 4;
  v4 = (_QWORD *)a1[7];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v7, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v7 + 12);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::paymentMethodChanged(WTF::String const&,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&)::$_0,std::allocator<std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;

  v2 = operator new(0x40uLL);
  v3 = v2;
  v4 = a1[1];
  v5 = a1[2];
  *v2 = &off_1E3364C30;
  v2[1] = v4;
  ++*(_DWORD *)(v5 + 48);
  v2[2] = v5;
  v6 = (_DWORD *)a1[3];
  if (v6)
    *v6 += 2;
  v2[3] = v6;
  v7 = (_QWORD *)a1[7];
  if (v7)
  {
    if (v7 == a1 + 4)
    {
      v3[7] = v3 + 4;
      (*(void (**)(_QWORD *))(*v7 + 24))(v7);
    }
    else
    {
      v3[7] = (*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v3[7] = 0;
  }
  return v3;
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::paymentMethodChanged(WTF::String const&,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&)::$_0,std::allocator<std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;

  v3 = result[1];
  *a2 = &off_1E3364C30;
  a2[1] = v3;
  v4 = result[2];
  ++*(_DWORD *)(v4 + 48);
  a2[2] = v4;
  v5 = (_DWORD *)result[3];
  if (v5)
    *v5 += 2;
  a2[3] = v5;
  v6 = (_QWORD *)result[7];
  if (v6)
  {
    if (v6 == result + 4)
    {
      a2[7] = a2 + 4;
      return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)result[7] + 24))(result[7]);
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v6 + 16))(result[7]);
      a2[7] = result;
    }
  }
  else
  {
    a2[7] = 0;
  }
  return result;
}

WebCore::PaymentRequest *std::__function::__func<WebCore::PaymentRequest::paymentMethodChanged(WTF::String const&,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&)::$_0,std::allocator<std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&>,void ()(void)>::destroy(_QWORD *a1, WTF::StringImpl *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::PaymentRequest *result;
  bmalloc::api *v8;
  void *v9;

  v3 = a1 + 4;
  v4 = (_QWORD *)a1[7];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(result, a2);
      return (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)result + 12);
    }
  }
  return result;
}

void std::__function::__func<WebCore::PaymentRequest::paymentMethodChanged(WTF::String const&,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&)::$_0,std::allocator<std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&>,void ()(void)>::destroy_deallocate(char *__p, WTF::StringImpl *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::PaymentRequest *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = __p + 32;
  v4 = (char *)*((_QWORD *)__p + 7);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (WTF::StringImpl *)*((_QWORD *)__p + 3);
  *((_QWORD *)__p + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WebCore::PaymentRequest *)*((_QWORD *)__p + 2);
  *((_QWORD *)__p + 2) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v7, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v7 + 12);
    }
  }
  operator delete(__p);
}

WTF::StringImpl *std::__function::__func<WebCore::PaymentRequest::paymentMethodChanged(WTF::String const&,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&)::$_0,std::allocator<std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> &&>,void ()(void)>::operator()(WebCore *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _OWORD v31[6];
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  char v35;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow(a1);
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v5 = *(_QWORD *)(v4 + 40);
  }
  v6 = *(_QWORD *)(v2 + 40);
  if ((v6 & 0x1000000000000) == 0 || (v18 = v6 & 0xFFFFFFFFFFFFLL, v19 = *(unsigned int *)(v18 + 28), !(_DWORD)v19))
  {
LABEL_7:
    if (*(_BYTE *)(v2 + 256))
      v7 = *(uint64_t **)(v2 + 240);
    else
      v7 = 0;
    v8 = *v7;
    ++*(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8);
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    v28 = 0;
    v29 = 0;
    v30 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, WTF::StringImpl **, _OWORD *, WTF::StringImpl **, _QWORD))(v8 + 40))(&v33, v7, 3, &v32, v31, &v28, 0);
    if (v35)
    {
      v10 = v34;
      v34 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    v11 = v30;
    v30 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v29;
    v29 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v28;
    v28 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    WebCore::AddressErrors::~AddressErrors((WebCore::AddressErrors *)v31, v9);
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
    v16 = *(_QWORD *)(*v7 - 24);
    if (*(_DWORD *)((char *)v7 + v16 + 8) != 1)
    {
      --*(_DWORD *)((char *)v7 + v16 + 8);
      return result;
    }
    v17 = *(uint64_t (**)(void))(*(uint64_t *)((char *)v7 + v16) + 8);
    return (WTF::StringImpl *)v17();
  }
  v20 = *(_QWORD **)(v18 + 16);
  v21 = 32 * v19;
  while (*v20 != *(_QWORD *)(v5 + 1448))
  {
    v20 += 4;
    v21 -= 32;
    if (!v21)
      goto LABEL_7;
  }
  v22 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v22);
  *(_QWORD *)(v22 + 8) = 0;
  *(_DWORD *)(v22 + 16) = 1;
  *(_DWORD *)(v22 + 20) = *(_DWORD *)(v22 + 20) & 0xFFC00000 | (*(_QWORD *)(v5 + 1448) != 0) | 0xC0200;
  v24 = *(_DWORD **)(v5 + 1448);
  if (v24)
    *v24 += 2;
  *(_QWORD *)(v22 + 24) = v24;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 56) = v23;
  *(_QWORD *)(v22 + 64) = 0;
  *(_BYTE *)(v22 + 72) = 0;
  *(_QWORD *)v22 = off_1E3364D70;
  v25 = (_DWORD *)*((_QWORD *)a1 + 3);
  if (v25)
    *v25 += 2;
  *(_QWORD *)(v22 + 80) = v25;
  v26 = (_QWORD *)*((_QWORD *)a1 + 7);
  if (v26)
  {
    if (v26 == (_QWORD *)((char *)a1 + 32))
    {
      *(_QWORD *)(v22 + 112) = v22 + 88;
      (*(void (**)(_QWORD))(**((_QWORD **)a1 + 7) + 24))(*((_QWORD *)a1 + 7));
    }
    else
    {
      *(_QWORD *)(v22 + 112) = v26;
      *((_QWORD *)a1 + 7) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v22 + 112) = 0;
  }
  *(_DWORD *)(v22 + 120) = 1;
  *(_QWORD *)(v22 + 128) = 0;
  *(_QWORD *)(v22 + 136) = 0;
  __dmb(0xAu);
  v27 = *(_QWORD *)(v22 + 136);
  *(_QWORD *)(v22 + 136) = 0;
  if (v27)
    *(_QWORD *)(v27 + 8) = 3;
  *(_QWORD *)&v31[0] = v22;
  result = WebCore::PaymentRequest::dispatchAndCheckUpdateEvent(v2, (WebCore::Event **)v31);
  if (*(_DWORD *)(v22 + 16) == 1)
  {
    v17 = *(uint64_t (**)(void))(*(_QWORD *)v22 + 8);
    return (WTF::StringImpl *)v17();
  }
  --*(_DWORD *)(v22 + 16);
  return result;
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::updateWith(WebCore::PaymentRequest::UpdateReason,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  WebCore::PaymentRequest *v3;
  bmalloc::api *v5;
  void *v6;

  *a1 = &off_1E3364C78;
  v3 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::PaymentRequest::updateWith(WebCore::PaymentRequest::UpdateReason,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  WebCore::PaymentRequest *v3;
  bmalloc::api *v4;
  void *v5;

  *a1 = &off_1E3364C78;
  v3 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v3, a2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::updateWith(WebCore::PaymentRequest::UpdateReason,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = operator new(0x20uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *result = &off_1E3364C78;
  result[1] = v3;
  ++*(_DWORD *)(v4 + 48);
  result[2] = v4;
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<WebCore::PaymentRequest::updateWith(WebCore::PaymentRequest::UpdateReason,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E3364C78;
  *(_QWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 16);
  ++*(_DWORD *)(v3 + 48);
  *(_QWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

WebCore::PaymentRequest *std::__function::__func<WebCore::PaymentRequest::updateWith(WebCore::PaymentRequest::UpdateReason,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::destroy(uint64_t a1, void *a2)
{
  WebCore::PaymentRequest *result;
  bmalloc::api *v4;
  void *v5;

  result = *(WebCore::PaymentRequest **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(result, a2);
      return (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 12);
    }
  }
  return result;
}

void std::__function::__func<WebCore::PaymentRequest::updateWith(WebCore::PaymentRequest::UpdateReason,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::destroy_deallocate(_QWORD *__p, void *a2)
{
  WebCore::PaymentRequest *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WebCore::PaymentRequest *)__p[2];
  __p[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v3, a2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  operator delete(__p);
}

_DWORD *std::__function::__func<WebCore::PaymentRequest::updateWith(WebCore::PaymentRequest::UpdateReason,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::ScriptExecutionContext *v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSPromise *v17;
  JSC::JSCell *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  char v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WebCore::PaymentDetailsModifier *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  WTF *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  char v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  _DWORD *result;
  WTF::StringImpl **v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl **v93;
  WTF::StringImpl *v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  WTF::StringImpl *v98;
  char v99[8];
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  char v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  int v110;
  uint64_t v111[2];
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  char v119;
  unsigned __int8 v120;
  _OWORD v121[6];
  __int128 v122;
  uint64_t v123;
  _QWORD *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  int v127;
  char v128;
  char v129[8];
  uint64_t v130;
  WTF::StringImpl *v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  char v142;
  unsigned __int8 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  _QWORD *v152;
  unsigned int v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 224) == 1)
  {
    if (*(_BYTE *)(v2 + 289))
    {
      LOBYTE(v108) = 16;
      v109 = 0;
LABEL_4:
      WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)v2, a2);
      v3 = *(_QWORD *)(v2 + 280);
      if (v3)
      {
        WebCore::PaymentResponse::abortWithException(v3, (WTF::StringImpl *)&v108);
        v5 = v109;
        v109 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, v4);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      else
      {
        v109 = 0;
        v129[0] = 16;
        v130 = 0;
        LODWORD(v131) = 1;
        WebCore::PaymentRequest::settleShowPromise(v2, (uint64_t)v129);
        if ((_DWORD)v131 != -1)
          ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v131])(&v104, v129);
        v109 = 0;
      }
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 264);
      v7 = **(_QWORD **)(v6 + 24);
      if ((v7 & 0xFFFE000000000002) != 0)
        goto LABEL_198;
      if (*(_BYTE *)(v7 + 5) != 68)
        v7 = 0;
      while (1)
      {
        v8 = *(unsigned int *)(a1 + 24);
        if (JSC::JSPromise::status((JSC::JSPromise *)v7, *(JSC::VM **)(**(_QWORD **)(v6 + 32) + 56)) >= 2)
          break;
        if (*(_BYTE *)(v2 + 256))
          v9 = *(_QWORD *)(v2 + 240);
        else
          v9 = 0;
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v9 - 24) + v9 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)(v2 + 264) + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
            v13 = (WebCore::ScriptExecutionContext *)(v12 - 96);
          else
            v13 = 0;
        }
        else
        {
          v13 = 0;
        }
        (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v13 + 344))(v13);
        v14 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(v13);
        v15 = *(_QWORD *)(v2 + 264);
        v16 = **(_QWORD **)(v15 + 24);
        if ((v16 & 0xFFFE000000000002) != 0)
        {
          v17 = 0;
        }
        else if (*(_BYTE *)(v16 + 5) == 68)
        {
          v17 = **(JSC::JSPromise ***)(v15 + 24);
        }
        else
        {
          v17 = 0;
        }
        v18 = (JSC::JSCell *)JSC::JSPromise::result(v17, *(JSC::VM **)(**(_QWORD **)(v15 + 32) + 56));
        WebCore::convertDictionary<WebCore::PaymentDetailsUpdate>(v18, v14, (uint64_t)v129);
        if (v153)
        {
          LOBYTE(v104) = 37;
          v105 = 0;
          if (*(_DWORD *)(v2 + 224) != 2)
          {
            WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)v2, v19);
            v20 = *(_QWORD *)(v2 + 280);
            if (v20)
            {
              WebCore::PaymentResponse::abortWithException(v20, (WTF::StringImpl *)&v104);
              if (v105)
              {
                if (*(_DWORD *)v105 == 2)
                  WTF::StringImpl::destroy(v105, v21);
                else
                  *(_DWORD *)v105 -= 2;
              }
            }
            else
            {
              LOBYTE(v108) = 37;
              v109 = 0;
              v110 = 1;
              WebCore::PaymentRequest::settleShowPromise(v2, (uint64_t)&v108);
              if (v110 != -1)
                ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v110])(&v125, &v108);
            }
          }
          goto LABEL_154;
        }
        LOBYTE(v108) = 0;
        LOBYTE(v110) = 0;
        if (v132)
        {
          v108 = v130;
          v22 = v131;
          v130 = 0;
          v131 = 0;
          v109 = v22;
          LOBYTE(v110) = 1;
        }
        LOBYTE(v111[0]) = 0;
        v112 = 0;
        if (v135)
        {
          v111[0] = v133;
          v23 = v134;
          v133 = 0;
          v134 = 0;
          v111[1] = v23;
          v112 = 1;
        }
        LOBYTE(v113) = 0;
        v115 = 0;
        if (v138)
        {
          v113 = v136;
          v24 = v137;
          v136 = 0;
          v137 = 0;
          v114 = v24;
          v115 = 1;
        }
        v25 = v139;
        v139 = 0;
        v116 = v25;
        LOBYTE(v117) = 0;
        v120 = 0;
        v26 = v143;
        if (v143)
        {
          v27 = v140;
          v140 = 0uLL;
          v117 = v27;
          v28 = v141;
          v141 = 0;
          v118 = v28;
          v119 = v142;
          v26 = 1;
          v120 = 1;
        }
        v121[0] = v144;
        v121[1] = v145;
        v121[2] = v146;
        v121[3] = v147;
        v29 = v149;
        v121[4] = v148;
        v144 = 0u;
        v145 = 0u;
        v146 = 0u;
        v147 = 0u;
        v148 = 0u;
        v149 = 0u;
        v121[5] = v29;
        v30 = v150;
        v150 = 0u;
        v122 = v30;
        v31 = v151;
        v151 = 0;
        v123 = v31;
        v124 = 0;
        if (v152)
        {
          v32 = *(_QWORD *)(((unint64_t)(v152 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v33 = *(_QWORD **)(v32 + 40);
          if (!v33)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v152 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
            v33 = *(_QWORD **)(v32 + 40);
          }
          *(_QWORD *)(v32 + 40) = *v33;
          v33[2] = 0;
          v34 = v33 + 2;
          *v33 = 0;
          v33[1] = 0;
          v124 = v33 + 2;
          v35 = v152;
          if (v152)
            v35 = (_QWORD *)*v152;
          v36 = (unint64_t)(v34 - 2);
          if ((v35 != 0) != (*v34 != 0))
          {
            if (v35)
            {
              v37 = *(unint64_t **)((v36 & 0xFFFFFFFFFFFFF000) + 0x10);
              v38 = v37[3];
              v37 += 3;
              *(_QWORD *)v36 = v38;
              *(v34 - 1) = v37;
              *v37 = v36;
              *(_QWORD *)(v38 + 8) = v36;
            }
            else
            {
              v96 = *(_QWORD *)v36;
              v95 = (_QWORD *)*(v34 - 1);
              *v95 = *(_QWORD *)v36;
              *(_QWORD *)(v96 + 8) = v95;
              *(_QWORD *)v36 = 0;
              *(_QWORD *)(v36 + 8) = 0;
              v34 = v124;
            }
          }
          *v34 = v35;
          v26 = v120;
        }
        if (v26)
        {
          WebCore::checkAndCanonicalizeAmount((uint64_t)&v104, (uint64_t *)&v117 + 1);
          if ((_BYTE)v106)
          {
            v40 = (char)v104;
            v41 = v105;
            goto LABEL_63;
          }
          if (v118 && *(_DWORD *)(v118 + 4))
          {
            v42 = *(unsigned __int8 **)(v118 + 8);
            v43 = (*(_BYTE *)(v118 + 16) & 4) != 0 ? *v42 : *(unsigned __int16 *)v42;
            if (v43 == 45)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v41 = v125;
              v40 = 33;
LABEL_63:
              LOBYTE(v125) = v40;
              v126 = v41;
              if (*(_DWORD *)(v2 + 224) == 2)
              {
LABEL_66:
                v126 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, v39);
                  else
                    *(_DWORD *)v41 -= 2;
                }
              }
              else
              {
                WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)v2, v39);
                v44 = *(_QWORD *)(v2 + 280);
                if (v44)
                {
                  WebCore::PaymentResponse::abortWithException(v44, (WTF::StringImpl *)&v125);
                  v41 = v126;
                  goto LABEL_66;
                }
                LOBYTE(v104) = v40;
                v105 = v41;
                LODWORD(v106) = 1;
                WebCore::PaymentRequest::settleShowPromise(v2, (uint64_t)&v104);
                if ((_DWORD)v106 != -1)
                  ((void (*)(uint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v106])(&v101, &v104);
              }
LABEL_153:
              WebCore::PaymentDetailsUpdate::~PaymentDetailsUpdate((WebCore::PaymentDetailsUpdate *)&v108, v39);
LABEL_154:
              if (v153 != -1)
                (*(&off_1E3364AD8 + v153))((int)&v108, (WebCore::PaymentDetailsUpdate *)&v130);
              v87 = *(_QWORD *)(*(_QWORD *)v9 - 24);
              if (*(_DWORD *)(v9 + v87 + 8) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)(v9 + v87) + 8))(v9 + v87);
              else
                --*(_DWORD *)(v9 + v87 + 8);
              goto LABEL_158;
            }
          }
        }
        WebCore::checkAndCanonicalizeDetails((uint64_t)&v104, v13, (uint64_t)&v108, *(unsigned __int8 *)(v2 + 55), 1);
        if (!v107)
        {
          v50 = v104;
          v51 = v105;
          v104 = 0;
          v105 = 0;
          v52 = v106;
          v53 = HIDWORD(v106);
          v106 = 0;
          if (v120)
          {
            v54 = v117;
            *(_QWORD *)&v117 = 0;
            v55 = *(WTF::StringImpl **)(v2 + 144);
            *(_QWORD *)(v2 + 144) = v54;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v45);
              else
                *(_DWORD *)v55 -= 2;
            }
            v56 = *((_QWORD *)&v117 + 1);
            *((_QWORD *)&v117 + 1) = 0;
            v57 = *(WTF::StringImpl **)(v2 + 152);
            *(_QWORD *)(v2 + 152) = v56;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, v45);
              else
                *(_DWORD *)v57 -= 2;
            }
            v58 = v118;
            v118 = 0;
            v59 = *(WTF::StringImpl **)(v2 + 160);
            *(_QWORD *)(v2 + 160) = v58;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
                WTF::StringImpl::destroy(v59, v45);
              else
                *(_DWORD *)v59 -= 2;
            }
            *(_BYTE *)(v2 + 168) = v119;
          }
          if ((_BYTE)v110)
          {
            if (*(_BYTE *)(v2 + 80))
            {
              v60 = *(unsigned int *)(v2 + 76);
              if ((_DWORD)v60)
              {
                v61 = 32 * v60;
                v62 = (WTF::StringImpl **)(*(_QWORD *)(v2 + 64) + 16);
                do
                {
                  v63 = *v62;
                  *v62 = 0;
                  if (v63)
                  {
                    if (*(_DWORD *)v63 == 2)
                      WTF::StringImpl::destroy(v63, v45);
                    else
                      *(_DWORD *)v63 -= 2;
                  }
                  v64 = *(v62 - 1);
                  *(v62 - 1) = 0;
                  if (v64)
                  {
                    if (*(_DWORD *)v64 == 2)
                      WTF::StringImpl::destroy(v64, v45);
                    else
                      *(_DWORD *)v64 -= 2;
                  }
                  v65 = *(v62 - 2);
                  *(v62 - 2) = 0;
                  if (v65)
                  {
                    if (*(_DWORD *)v65 == 2)
                      WTF::StringImpl::destroy(v65, v45);
                    else
                      *(_DWORD *)v65 -= 2;
                  }
                  v62 += 4;
                  v61 -= 32;
                }
                while (v61);
              }
              v66 = *(WTF **)(v2 + 64);
              if (v66)
              {
                *(_QWORD *)(v2 + 64) = 0;
                *(_DWORD *)(v2 + 72) = 0;
                WTF::fastFree(v66, v45);
              }
              *(_QWORD *)(v2 + 64) = v108;
              v67 = v109;
              v108 = 0;
              v109 = 0;
              *(_QWORD *)(v2 + 72) = v67;
            }
            else
            {
              *(_QWORD *)(v2 + 64) = v108;
              v68 = v109;
              v108 = 0;
              v109 = 0;
              *(_QWORD *)(v2 + 72) = v68;
              *(_BYTE *)(v2 + 80) = 1;
            }
          }
          if (v112 && *(_BYTE *)(v2 + 55))
          {
            std::__optional_storage_base<WTF::Vector<WebCore::PaymentShippingOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::PaymentShippingOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(v2 + 88, v111);
            v69 = *(WTF::StringImpl **)(v2 + 208);
            *(_QWORD *)(v2 + 208) = v50;
            if (v69)
            {
              if (*(_DWORD *)v69 != 2)
              {
                v50 = 0;
                *(_DWORD *)v69 -= 2;
                goto LABEL_121;
              }
              WTF::StringImpl::destroy(v69, v45);
            }
            v50 = 0;
          }
LABEL_121:
          if (v115)
          {
            v97 = v52;
            v98 = v50;
            if (*(_BYTE *)(v2 + 128))
            {
              v70 = *(unsigned int *)(v2 + 124);
              if ((_DWORD)v70)
              {
                v71 = *(WebCore::PaymentDetailsModifier **)(v2 + 112);
                v72 = 72 * v70;
                do
                {
                  WebCore::PaymentDetailsModifier::~PaymentDetailsModifier(v71, v45);
                  v71 = (WebCore::PaymentDetailsModifier *)(v73 + 72);
                  v72 -= 72;
                }
                while (v72);
              }
              v74 = v53;
              v75 = *(WTF **)(v2 + 112);
              if (v75)
              {
                *(_QWORD *)(v2 + 112) = 0;
                *(_DWORD *)(v2 + 120) = 0;
                WTF::fastFree(v75, v45);
              }
              v76 = v51;
              *(_QWORD *)(v2 + 112) = v113;
              v77 = v114;
              v113 = 0;
              v114 = 0;
              *(_QWORD *)(v2 + 120) = v77;
            }
            else
            {
              v74 = v53;
              v76 = v51;
              *(_QWORD *)(v2 + 112) = v113;
              v78 = v114;
              v113 = 0;
              v114 = 0;
              *(_QWORD *)(v2 + 120) = v78;
              *(_BYTE *)(v2 + 128) = 1;
            }
            v79 = *(unsigned int *)(v2 + 188);
            if ((_DWORD)v79)
            {
              v89 = *(WTF::StringImpl ***)(v2 + 176);
              v90 = 8 * v79;
              do
              {
                v91 = *v89;
                *v89 = 0;
                if (v91)
                {
                  if (*(_DWORD *)v91 == 2)
                    WTF::StringImpl::destroy(v91, v45);
                  else
                    *(_DWORD *)v91 -= 2;
                }
                ++v89;
                v90 -= 8;
              }
              while (v90);
            }
            v80 = *(WTF **)(v2 + 176);
            if (v80)
            {
              *(_QWORD *)(v2 + 176) = 0;
              *(_DWORD *)(v2 + 184) = 0;
              WTF::fastFree(v80, v45);
            }
            *(_QWORD *)(v2 + 176) = v76;
            *(_DWORD *)(v2 + 184) = v97;
            *(_DWORD *)(v2 + 188) = v74;
            v53 = 0;
            v51 = 0;
            v50 = v98;
          }
          if (v124)
            v81 = *v124;
          else
            v81 = 0;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, _OWORD *, __int128 *, uint64_t))(*(_QWORD *)v9 + 40))(&v101, v9, v8, &v116, v121, &v122, v81);
          if (!v103)
            goto LABEL_147;
          v83 = v101;
          v99[0] = v101;
          v84 = v102;
          v102 = 0;
          v100 = v84;
          if (*(_DWORD *)(v2 + 224) == 2)
          {
LABEL_140:
            if (v84)
            {
              if (*(_DWORD *)v84 == 2)
                WTF::StringImpl::destroy(v84, v82);
              else
                *(_DWORD *)v84 -= 2;
            }
          }
          else
          {
            WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)v2, v82);
            v85 = *(_QWORD *)(v2 + 280);
            if (v85)
            {
              WebCore::PaymentResponse::abortWithException(v85, (WTF::StringImpl *)v99);
              v84 = v100;
              goto LABEL_140;
            }
            LOBYTE(v125) = v83;
            v126 = v84;
            v127 = 1;
            WebCore::PaymentRequest::settleShowPromise(v2, (uint64_t)&v125);
            if (v127 != -1)
              ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v127])(&v128, &v125);
          }
          if (v103 && (v86 = v102, v102 = 0, v86))
          {
            if (*(_DWORD *)v86 != 2)
            {
              *(_DWORD *)v86 -= 2;
              goto LABEL_147;
            }
            WTF::StringImpl::destroy(v86, v82);
            if (v53)
            {
LABEL_185:
              v92 = 8 * v53;
              v93 = (WTF::StringImpl **)v51;
              do
              {
                v94 = *v93;
                *v93 = 0;
                if (v94)
                {
                  if (*(_DWORD *)v94 == 2)
                    WTF::StringImpl::destroy(v94, v82);
                  else
                    *(_DWORD *)v94 -= 2;
                }
                ++v93;
                v92 -= 8;
              }
              while (v92);
            }
          }
          else
          {
LABEL_147:
            if (v53)
              goto LABEL_185;
          }
          if (v51)
          {
            WTF::fastFree(v51, v82);
            if (!v50)
              goto LABEL_177;
LABEL_150:
            if (*(_DWORD *)v50 == 2)
            {
              WTF::StringImpl::destroy(v50, v82);
              goto LABEL_177;
            }
            v49 = 0;
            *(_DWORD *)v50 -= 2;
          }
          else
          {
            if (v50)
              goto LABEL_150;
LABEL_177:
            v49 = 0;
          }
LABEL_152:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3364AB8[v49])(&v125, &v104);
          goto LABEL_153;
        }
        if (v107 == 1)
        {
          v46 = (char)v104;
          LOBYTE(v101) = (_BYTE)v104;
          v47 = v105;
          v105 = 0;
          v102 = v47;
          if (*(_DWORD *)(v2 + 224) == 2)
          {
LABEL_74:
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v45);
              else
                *(_DWORD *)v47 -= 2;
            }
          }
          else
          {
            WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)v2, v45);
            v48 = *(_QWORD *)(v2 + 280);
            if (v48)
            {
              WebCore::PaymentResponse::abortWithException(v48, (WTF::StringImpl *)&v101);
              v47 = v102;
              goto LABEL_74;
            }
            LOBYTE(v125) = v46;
            v126 = v47;
            v127 = 1;
            WebCore::PaymentRequest::settleShowPromise(v2, (uint64_t)&v125);
            if (v127 != -1)
              ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v127])(v99, &v125);
          }
          v49 = 1;
          goto LABEL_152;
        }
        a1 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_198:
        v7 = 0;
      }
      v10 = *(_DWORD *)(v2 + 224);
      LOBYTE(v108) = 16;
      v109 = 0;
      if (v10 != 2)
        goto LABEL_4;
    }
  }
LABEL_158:
  *(_WORD *)(v2 + 288) = 0;
  result = *(_DWORD **)(v2 + 264);
  *(_QWORD *)(v2 + 264) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::completeMerchantValidation(WebCore::Event &,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  WebCore::PaymentRequest *v3;
  bmalloc::api *v5;
  void *v6;

  *a1 = &off_1E3364CC0;
  v3 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::PaymentRequest::completeMerchantValidation(WebCore::Event &,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  WebCore::PaymentRequest *v3;
  bmalloc::api *v4;
  void *v5;

  *a1 = &off_1E3364CC0;
  v3 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v3, a2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::completeMerchantValidation(WebCore::Event &,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *result = &off_1E3364CC0;
  result[1] = v3;
  ++*(_DWORD *)(v4 + 48);
  result[2] = v4;
  return result;
}

uint64_t std::__function::__func<WebCore::PaymentRequest::completeMerchantValidation(WebCore::Event &,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3364CC0;
  a2[1] = v2;
  v3 = *(_QWORD *)(result + 16);
  ++*(_DWORD *)(v3 + 48);
  a2[2] = v3;
  return result;
}

WebCore::PaymentRequest *std::__function::__func<WebCore::PaymentRequest::completeMerchantValidation(WebCore::Event &,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::destroy(uint64_t a1, void *a2)
{
  WebCore::PaymentRequest *result;
  bmalloc::api *v4;
  void *v5;

  result = *(WebCore::PaymentRequest **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(result, a2);
      return (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 12);
    }
  }
  return result;
}

void std::__function::__func<WebCore::PaymentRequest::completeMerchantValidation(WebCore::Event &,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::destroy_deallocate(_QWORD *__p, void *a2)
{
  WebCore::PaymentRequest *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WebCore::PaymentRequest *)__p[2];
  __p[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v3, a2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  operator delete(__p);
}

WTF::StringImpl *std::__function::__func<WebCore::PaymentRequest::completeMerchantValidation(WebCore::Event &,WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&)::$_0,std::allocator<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>> &&>,void ()(void)>::operator()(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  JSC::JSPromise *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSPromise *v11;
  void *v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  char v25;

  v1 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v1 + 224) == 1)
  {
    v2 = *(_QWORD *)(v1 + 272);
    v3 = **(_QWORD **)(v2 + 24);
    if ((v3 & 0xFFFE000000000002) != 0)
    {
      v4 = 0;
    }
    else if (*(_BYTE *)(v3 + 5) == 68)
    {
      v4 = **(JSC::JSPromise ***)(v2 + 24);
    }
    else
    {
      v4 = 0;
    }
    result = (WTF::StringImpl *)JSC::JSPromise::status(v4, *(JSC::VM **)(**(_QWORD **)(v2 + 32) + 56));
    if (result < 2)
    {
      if (*(_BYTE *)(v1 + 256))
        v6 = *(_QWORD *)(v1 + 240);
      else
        v6 = 0;
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v6 - 24) + v6 + 8);
      v9 = *(_QWORD *)(v1 + 272);
      v10 = **(_QWORD **)(v9 + 24);
      if ((v10 & 0xFFFE000000000002) != 0)
      {
        v11 = 0;
      }
      else if (*(_BYTE *)(v10 + 5) == 68)
      {
        v11 = **(JSC::JSPromise ***)(v9 + 24);
      }
      else
      {
        v11 = 0;
      }
      v22 = JSC::JSPromise::result(v11, *(JSC::VM **)(**(_QWORD **)(v9 + 32) + 56));
      result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(&v19, v6, &v22);
      if (!v21)
        goto LABEL_30;
      v13 = v19;
      v17[0] = v19;
      v14 = v20;
      v20 = 0;
      v18 = v14;
      if (*(_DWORD *)(v1 + 224) != 2)
      {
        WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)v1, v12);
        v15 = *(_QWORD *)(v1 + 280);
        if (!v15)
        {
          LOBYTE(v22) = v13;
          v23 = v14;
          v24 = 1;
          result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(v1, (uint64_t)&v22);
          if (v24 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24])(&v25, &v22);
          goto LABEL_26;
        }
        result = WebCore::PaymentResponse::abortWithException(v15, (WTF::StringImpl *)v17);
        v14 = v18;
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        else
          *(_DWORD *)v14 -= 2;
      }
LABEL_26:
      if (v21)
      {
        result = v20;
        v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
          else
            *(_DWORD *)result -= 2;
        }
      }
LABEL_30:
      v16 = *(_QWORD *)(*(_QWORD *)v6 - 24);
      if (*(_DWORD *)(v6 + v16 + 8) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + v16) + 8))(v6 + v16);
      --*(_DWORD *)(v6 + v16 + 8);
      return result;
    }
    LOBYTE(v19) = 16;
    v20 = 0;
    if (*(_DWORD *)(v1 + 224) != 2)
    {
      WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)v1, v5);
      v7 = *(_QWORD *)(v1 + 280);
      if (v7)
      {
        WebCore::PaymentResponse::abortWithException(v7, (WTF::StringImpl *)&v19);
        result = v20;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v8);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      else
      {
        LOBYTE(v22) = 16;
        v23 = 0;
        v24 = 1;
        result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(v1, (uint64_t)&v22);
        if (v24 != -1)
          return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24])(v17, &v22);
      }
    }
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  unsigned __int128 *v21;
  unsigned __int128 *v22;
  unsigned __int128 v23;
  char v24;
  uint64_t v25;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v25;
        if (v25)
        {
          v16 = (_BYTE *)(v25 + 20);
          *(_DWORD *)v25 = 2;
          *(_DWORD *)(v25 + 4) = v13;
          *(_QWORD *)(v25 + 8) = v25 + 20;
          *(_DWORD *)(v25 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v16 = a3->i8[0];
            else
              result = (uint64_t)memcpy((void *)(v25 + 20), a3, a4);
          }
          v17 = &v16[a4];
          if (a5)
          {
            v18 = *(_BYTE **)(a5 + 8);
            v19 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v19)
              {
                if ((_DWORD)v19 == 1)
                  *v17 = *v18;
                else
                  result = (uint64_t)memcpy(v17, v18, v19);
              }
            }
            else
            {
              if (v19 < 0x10)
              {
                v21 = (unsigned __int128 *)v17;
              }
              else
              {
                v21 = (unsigned __int128 *)&v17[v19 & 0xFFFFFFF0];
                v22 = (unsigned __int128 *)v17;
                do
                {
                  v23 = (unsigned __int128)vld2q_s8(v18);
                  v18 += 32;
                  *v22++ = v23;
                }
                while (v22 != v21);
              }
              while (v21 != (unsigned __int128 *)&v17[v19])
              {
                v24 = *v18;
                v18 += 2;
                *(_BYTE *)v21 = v24;
                v21 = (unsigned __int128 *)((char *)v21 + 1);
              }
            }
            v20 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v20 = 0;
          }
          if (a7)
          {
            result = (uint64_t)&v17[v20];
            if (a7 == 1)
              *(_BYTE *)result = a6->i8[0];
            else
              result = (uint64_t)memcpy((void *)result, a6, a7);
          }
        }
        goto LABEL_17;
      }
LABEL_27:
      v15 = 0;
      goto LABEL_17;
    }
LABEL_26:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_17;
  }
  if (!(_DWORD)result)
    goto LABEL_26;
  if (result > 0x7FFFFFEF)
    goto LABEL_27;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v25;
  if (v25)
  {
    *(_DWORD *)v25 = 2;
    *(_DWORD *)(v25 + 4) = v13;
    *(_QWORD *)(v25 + 8) = v25 + 20;
    *(_DWORD *)(v25 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v25 + 20), a3, a4, a5, a6, a7);
  }
LABEL_17:
  *a8 = v15;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6)
{
  char *v9;
  char *v10;
  __int128 v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  int8x16_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;

  v9 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v10 = &result[2 * (a3 & 0xFFFFFFC0)];
    v11 = 0uLL;
    do
    {
      v44.val[0] = *a2;
      v12 = a2[1];
      v47.val[0] = a2[2];
      v13 = a2[3];
      a2 += 4;
      v14 = v13;
      v47.val[1] = 0uLL;
      v50.val[0] = v12;
      v44.val[1] = 0uLL;
      v15 = result;
      vst2q_s8(v15, v44);
      v15 += 32;
      v50.val[1] = 0uLL;
      vst2q_s8(v15, v50);
      v16 = result + 64;
      vst2q_s8(v16, v47);
      v17 = result + 96;
      vst2q_s8(v17, *(int8x16x2_t *)(&v11 - 1));
      result += 128;
    }
    while (result != v10);
    result = v10;
  }
  while (result != v9)
  {
    v18 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v18;
    result += 2;
  }
  if (a4)
  {
    v19 = *(int8x16_t **)(a4 + 8);
    v20 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v21 = &v9[2 * v20];
      if (v20 >= 0x40)
      {
        v22 = &v9[2 * (v20 & 0xFFFFFFC0)];
        v24 = 0uLL;
        v25 = v9;
        do
        {
          v45.val[0] = *v19;
          v26 = v19[1];
          v48.val[0] = v19[2];
          v27 = v19[3];
          v19 += 4;
          v28 = v27;
          v48.val[1] = 0uLL;
          v51.val[0] = v26;
          v45.val[1] = 0uLL;
          v29 = v25;
          vst2q_s8(v29, v45);
          v29 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v29, v51);
          v30 = v25 + 64;
          vst2q_s8(v30, v48);
          v31 = v25 + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
          v25 += 128;
        }
        while (v25 != v22);
      }
      else
      {
        v22 = v9;
      }
      while (v22 != v21)
      {
        v32 = v19->u8[0];
        v19 = (int8x16_t *)((char *)v19 + 1);
        *(_WORD *)v22 = v32;
        v22 += 2;
      }
    }
    else if ((_DWORD)v20 == 1)
    {
      *(_WORD *)v9 = v19->i16[0];
    }
    else if ((_DWORD)v20)
    {
      result = (char *)memcpy(v9, v19, 2 * v20);
    }
    v23 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v23 = 0;
  }
  v33 = &v9[2 * v23];
  v34 = &v33[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v35 = &v33[2 * (a6 & 0xFFFFFFC0)];
    v36 = 0uLL;
    do
    {
      v46.val[0] = *a5;
      v37 = a5[1];
      v49.val[0] = a5[2];
      v38 = a5[3];
      a5 += 4;
      v39 = v38;
      v49.val[1] = 0uLL;
      v52.val[0] = v37;
      v46.val[1] = 0uLL;
      v40 = v33;
      vst2q_s8(v40, v46);
      v40 += 32;
      v52.val[1] = 0uLL;
      vst2q_s8(v40, v52);
      v41 = v33 + 64;
      vst2q_s8(v41, v49);
      v42 = v33 + 96;
      vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
      v33 += 128;
    }
    while (v33 != v35);
    v33 = v35;
  }
  while (v33 != v34)
  {
    v43 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v33 = v43;
    v33 += 2;
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::whenDetailsSettled(std::function<void ()(void)> &&)::$_1,std::allocator<std::function<void ()(void)> &&>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  WebCore::PaymentRequest *v6;
  bmalloc::api *v8;
  void *v9;

  *a1 = &off_1E3364D08;
  v3 = a1 + 4;
  v4 = (_QWORD *)a1[7];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v6, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v6 + 12);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::PaymentRequest::whenDetailsSettled(std::function<void ()(void)> &&)::$_1,std::allocator<std::function<void ()(void)> &&>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  WebCore::PaymentRequest *v6;
  bmalloc::api *v7;
  void *v8;

  *a1 = &off_1E3364D08;
  v3 = a1 + 4;
  v4 = (_QWORD *)a1[7];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (WebCore::PaymentRequest *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v6, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v6 + 12);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::PaymentRequest::whenDetailsSettled(std::function<void ()(void)> &&)::$_1,std::allocator<std::function<void ()(void)> &&>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v2 = operator new(0x40uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E3364D08;
  v2[1] = v3;
  v4 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v2 + 1) = v4;
  ++*(_DWORD *)(v4 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    if (v5 == a1 + 32)
    {
      v2[7] = v2 + 4;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    }
    else
    {
      v2[7] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    v2[7] = 0;
  }
  return v2;
}

uint64_t std::__function::__func<WebCore::PaymentRequest::whenDetailsSettled(std::function<void ()(void)> &&)::$_1,std::allocator<std::function<void ()(void)> &&>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E3364D08;
  *(_QWORD *)(a2 + 8) = v3;
  v4 = *(_OWORD *)(result + 16);
  *(_OWORD *)(a2 + 16) = v4;
  ++*(_DWORD *)(v4 + 48);
  v5 = *(_QWORD *)(result + 56);
  if (v5)
  {
    if (v5 == result + 32)
    {
      *(_QWORD *)(a2 + 56) = a2 + 32;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 56) + 24))(*(_QWORD *)(result + 56));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 16))(*(_QWORD *)(result + 56));
      *(_QWORD *)(a2 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
  }
  return result;
}

WebCore::PaymentRequest *std::__function::__func<WebCore::PaymentRequest::whenDetailsSettled(std::function<void ()(void)> &&)::$_1,std::allocator<std::function<void ()(void)> &&>,void ()(void)>::destroy(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  WebCore::PaymentRequest *result;
  bmalloc::api *v7;
  void *v8;

  v3 = (_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 56);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = *(WebCore::PaymentRequest **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(result, a2);
      return (WebCore::PaymentRequest *)bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)result + 12);
    }
  }
  return result;
}

void std::__function::__func<WebCore::PaymentRequest::whenDetailsSettled(std::function<void ()(void)> &&)::$_1,std::allocator<std::function<void ()(void)> &&>,void ()(void)>::destroy_deallocate(char *__p, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  WebCore::PaymentRequest *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = __p + 32;
  v4 = (char *)*((_QWORD *)__p + 7);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (WebCore::PaymentRequest *)*((_QWORD *)__p + 2);
  *((_QWORD *)__p + 2) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 12) == 1)
    {
      WebCore::PaymentRequest::~PaymentRequest(v6, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v6 + 12);
    }
  }
  operator delete(__p);
}

uint64_t std::__function::__func<WebCore::PaymentRequest::whenDetailsSettled(std::function<void ()(void)> &&)::$_1,std::allocator<std::function<void ()(void)> &&>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_DWORD *)(*(_QWORD *)(result + 8) + 224) == 1)
  {
    v1 = *(_QWORD *)(result + 56);
    if (v1)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
    }
    else
    {
      v2 = std::__throw_bad_function_call[abi:sn180100]();
      return WTF::RefPtr<WebCore::PaymentResponse,WTF::RawPtrTraits<WebCore::PaymentResponse>,WTF::DefaultRefDerefTraits<WebCore::PaymentResponse>>::unspecifiedBoolTypeInstance(v2);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22JSValueInWrappedObjectENS_8functionIFN3JSC6StrongINSB_8JSObjectELNSB_30ShouldStrongDestructorGrabLockE0EEERNSB_14JSGlobalObjectEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 3;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22JSValueInWrappedObjectENS_8functionIFN3JSC6StrongINSB_8JSObjectELNSB_30ShouldStrongDestructorGrabLockE0EEERNSB_14JSGlobalObjectEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

WebCore::PaymentResponse *WebCore::PaymentResponse::PaymentResponse(WebCore::PaymentResponse *this, WebCore::ScriptExecutionContext *a2, WebCore::PaymentRequest *a3)
{
  WebCore::ScriptExecutionContext *v4;
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  WebCore::PaymentResponse *v14;

  v4 = a2;
  if (a2 && !*((_BYTE *)a2 + 274))
  {
    v6 = (char *)a2 - 192;
    v7 = *((_QWORD *)a2 + 64);
    if (v7)
    {
      v8 = *(char **)(v7 + 8);
      if (v8)
        v6 = v8;
    }
    v4 = (WebCore::ScriptExecutionContext *)(v6 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v4);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*((_BYTE *)v4 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x1954E3BF8);
    }
    v14 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v4 + 16, (uint64_t *)&v14, (uint64_t)&v13);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 1;
  *(_QWORD *)this = &off_1E33652B8;
  *((_QWORD *)this + 3) = &unk_1E3365330;
  v9 = (unsigned int *)WTF::WeakPtr<WebCore::PaymentRequest,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::PaymentRequest>((uint64_t)a3);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *((_QWORD *)this + 7) = v9;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  __dmb(0xAu);
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
    *(_QWORD *)(v11 + 8) = 3;
  *(_OWORD *)((char *)this + 132) = 0uLL;
  *(_OWORD *)((char *)this + 120) = 0uLL;
  *(_OWORD *)((char *)this + 104) = 0uLL;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  return this;
}

_QWORD *WebCore::PaymentResponse::finishConstruction(WebCore::PaymentResponse *this)
{
  uint64_t v2;
  void *v3;
  WTF *v4;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v2 = 1;
  ++*((_DWORD *)this + 12);
  *(_QWORD *)(v2 + 8) = this;
  ++*((_QWORD *)this + 2);
  v4 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v2;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 48) == 1)
      {
        WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)v6, v3);
        bmalloc::api::isoDeallocate(v7, v8);
      }
      else
      {
        --*(_DWORD *)(v6 + 48);
      }
      WTF::fastFree(v4, v3);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WebCore::ActiveDOMObject::suspendIfNeeded(this);
}

void WebCore::PaymentResponse::~PaymentResponse(WebCore::PaymentResponse *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebCore::PaymentAddress *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  bmalloc::api *v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v19 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v19 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v19 + 48) == 1)
      {
        WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)v19);
        bmalloc::api::isoDeallocate(v22, v23);
      }
      else
      {
        --*(_DWORD *)(v19 + 48);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    v5 = *(_DWORD **)v4;
    *(_QWORD *)v4 = 0;
    if (v5)
    {
      if (v5[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
      else
        --v5[4];
    }
    WTF::fastFree(v4, a2);
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WebCore::PaymentAddress *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::PaymentAddress::~PaymentAddress(v10, (WTF::StringImpl *)a2);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *((_QWORD *)this + 12);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 12) = 0;
  }
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v24 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v24)
      {
        v27 = v15;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v24));
        v15 = v27;
      }
      v25 = *(WTF **)(v15 + 16);
      if (v25)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        v26 = v15;
        WTF::fastFree(v25, a2);
        v15 = v26;
      }
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  WebCore::EventTarget::~EventTarget((WebCore::PaymentResponse *)((char *)this + 24), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v18);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::PaymentResponse::~PaymentResponse(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::PaymentResponse::~PaymentResponse(WebCore::PaymentResponse *this, void *a2)
{
  WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::PaymentResponse::complete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, WTF::StringImpl *a5)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  JSC::HandleSet *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t **v17;
  unint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  void *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  bmalloc::api *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  WTF *v42;
  unint64_t **v43;
  JSC::HandleSet *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  objc_class *v49;

  v6 = *(_DWORD *)(a1 + 144);
  if (v6 != 2)
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if (v6 == 1 || *(_QWORD *)(a1 + 152))
        {
          v10 = *(_QWORD *)a5;
          v49 = 0;
          v11 = 8;
          goto LABEL_8;
        }
        v48 = 0;
        if (*((_BYTE *)a4 + 8) && *a4)
        {
          v14 = *(JSC::HandleSet **)(((unint64_t)(*a4 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v15 = *((_QWORD *)v14 + 5);
          if (!v15)
          {
            v41 = a4;
            v44 = *(JSC::HandleSet **)(((unint64_t)(*a4 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v39 = a2;
            JSC::HandleSet::grow(v14);
            a4 = v41;
            v14 = v44;
            a2 = v39;
            v15 = *((_QWORD *)v44 + 5);
          }
          *((_QWORD *)v14 + 5) = *(_QWORD *)v15;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
          if (*a4)
          {
            v16 = **a4;
            v17 = (unint64_t **)(v15 & 0xFFFFFFFFFFFFF000 | 0x10);
            if (v16)
            {
              v40 = (uint64_t *)v15;
              v43 = (unint64_t **)(v15 & 0xFFFFFFFFFFFFF000 | 0x10);
              v29 = *v17;
              v30 = v29[3];
              v29 += 3;
              *(_QWORD *)v15 = v30;
              *(_QWORD *)(v15 + 8) = v29;
              *v29 = v15;
              *(_QWORD *)(v30 + 8) = v15;
              *(_QWORD *)(v15 + 16) = v16;
              v31 = (WebCore::ScriptExecutionContext *)(a2 + 192);
              v32 = *(_QWORD *)(WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(a2 + 192))
                              + 56);
              WebCore::ScriptExecutionContext::globalObject(v31);
              JSC::JSONStringify();
              v33 = v45;
              v48 = v45;
              if (*(_QWORD *)(v32 + 16))
              {
                v34 = *(_QWORD *)a5;
                v49 = 0;
                LOBYTE(v45) = 37;
                v46 = 0;
                WebCore::DeferredPromise::reject(v34, (unsigned __int8 *)&v45, 0, &v49);
                v35 = v46;
                v46 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, v12);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                v36 = *v43;
                v37 = (uint64_t *)v40[1];
                if (v37)
                {
                  v38 = *v40;
                  *v37 = *v40;
                  *(_QWORD *)(v38 + 8) = v37;
                  *v40 = 0;
                  v40[1] = 0;
                }
                *v40 = v36[5];
                v36[5] = (unint64_t)v40;
                result = v33;
LABEL_37:
                v48 = 0;
                if (!result)
                  return result;
                goto LABEL_9;
              }
              v15 = (unint64_t)v40;
              v17 = v43;
            }
          }
          else
          {
            v17 = (unint64_t **)(v15 & 0xFFFFFFFFFFFFF000 | 0x10);
          }
          v18 = *v17;
          v19 = *(_QWORD **)(v15 + 8);
          if (v19)
          {
            v20 = *(_QWORD *)v15;
            *v19 = *(_QWORD *)v15;
            *(_QWORD *)(v20 + 8) = v19;
            *(_QWORD *)v15 = 0;
            *(_QWORD *)(v15 + 8) = 0;
          }
          *(_QWORD *)v15 = v18[5];
          v18[5] = v15;
          v21 = *(_QWORD *)(a1 + 56);
          if (!v21)
          {
            v22 = 0;
LABEL_27:
            WebCore::PaymentRequest::complete(v22, (uint64_t)&v45);
            if (!v47)
            {
              v24 = *(WTF **)(a1 + 160);
              *(_QWORD *)(a1 + 160) = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 1)
                {
                  v26 = *((_QWORD *)v24 + 1);
                  --*(_QWORD *)(v26 + 16);
                  *((_QWORD *)v24 + 1) = 0;
                  if (*(_DWORD *)(v26 + 48) == 1)
                  {
                    v42 = v24;
                    WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)v26, v23);
                    bmalloc::api::isoDeallocate(v27, v28);
                    v24 = v42;
                  }
                  else
                  {
                    --*(_DWORD *)(v26 + 48);
                  }
                  WTF::fastFree(v24, v23);
                }
                else
                {
                  --*(_DWORD *)v24;
                }
              }
              *(_DWORD *)(a1 + 144) = 1;
            }
            WebCore::DOMPromiseDeferred<void>::settle(a5, (uint64_t)&v45);
            if (v47)
            {
              v25 = v46;
              v46 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v12);
                else
                  *(_DWORD *)v25 -= 2;
              }
            }
            result = v48;
            goto LABEL_37;
          }
          v9 = *(_QWORD *)(v21 + 8);
        }
        if (v9)
          v22 = (WTF::StringImpl *)(v9 - 24);
        else
          v22 = 0;
        goto LABEL_27;
      }
    }
  }
  v10 = *(_QWORD *)a5;
  v49 = 0;
  v11 = 16;
LABEL_8:
  LOBYTE(v45) = v11;
  v46 = 0;
  WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v45, 0, &v49);
  result = v46;
  v46 = 0;
  if (!result)
    return result;
LABEL_9:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
  *(_DWORD *)result -= 2;
  return result;
}

WTF::StringImpl *WebCore::PaymentResponse::retry(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  WTF::StringImpl *result;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  _DWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  objc_class *v23;
  WTF::StringImpl *v24;
  objc_class *v25;

  v4 = *(_DWORD *)(a1 + 144);
  if (v4 == 2 || (v6 = *(_QWORD *)(a1 + 56)) == 0 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    v8 = *a3;
    v23 = 0;
    v9 = 16;
    goto LABEL_8;
  }
  if (v4 != 1 && !*(_QWORD *)(a1 + 152))
  {
    if (*(_BYTE *)(v7 + 232))
    {
      *(_DWORD *)(v7 + 200) = 1;
      v12 = *(char **)(v7 + 216);
      v13 = *(_QWORD *)v12;
      ++*(_DWORD *)&v12[*(_QWORD *)(*(_QWORD *)v12 - 24) + 8];
      (*(void (**)(uint64_t *__return_ptr, char *))(v13 + 64))(&v20, v12);
      v14 = *(_QWORD *)(*(_QWORD *)v12 - 24);
      if (*(_DWORD *)&v12[v14 + 8] == 1)
        (*(void (**)(char *))(*(_QWORD *)&v12[v14] + 8))(&v12[v14]);
      else
        --*(_DWORD *)&v12[v14 + 8];
    }
    else
    {
      LOBYTE(v20) = 16;
      v21 = 0;
      v22 = 1;
    }
    if (!v22)
    {
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
      v17 = *a3;
      *a3 = 0;
      *(_QWORD *)result = v17;
      v18 = *(WTF **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = result;
      if (v18)
      {
        v19 = *(_DWORD **)v18;
        *(_QWORD *)v18 = 0;
        if (v19)
        {
          if (v19[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
          else
            --v19[4];
        }
        result = (WTF::StringImpl *)WTF::fastFree(v18, v10);
      }
LABEL_32:
      if (!v22)
        return result;
      goto LABEL_9;
    }
    v15 = v21;
    v21 = 0;
    v16 = *a3;
    v25 = 0;
    LOBYTE(v23) = v20;
    if (v15)
      *(_DWORD *)v15 += 2;
    v24 = v15;
    WebCore::DeferredPromise::reject(v16, (unsigned __int8 *)&v23, 0, &v25);
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
        if (!v15)
          goto LABEL_32;
        goto LABEL_25;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v15)
      goto LABEL_32;
LABEL_25:
    if (*(_DWORD *)v15 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v15 -= 2;
    goto LABEL_32;
  }
  v8 = *a3;
  v23 = 0;
  v9 = 8;
LABEL_8:
  LOBYTE(v20) = v9;
  v21 = 0;
  WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v20, 0, &v23);
LABEL_9:
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::PaymentResponse::abortWithException(uint64_t a1, WTF::StringImpl *a2)
{
  char v3;
  WTF::StringImpl *result;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  bmalloc::api *v9;
  void *v10;
  _BYTE v11[8];
  WTF::StringImpl *v12;
  char v13;

  v3 = *(_BYTE *)a2;
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v11[0] = v3;
  v12 = result;
  v13 = 1;
  if (!*(_QWORD *)(a1 + 152))
  {
LABEL_9:
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_12;
  }
  result = WebCore::DOMPromiseDeferred<void>::settle(*(WTF::StringImpl **)(a1 + 152), (uint64_t)v11);
  v5 = *(WTF **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v5)
  {
    v6 = *(_DWORD **)v5;
    *(_QWORD *)v5 = 0;
    if (v6)
    {
      if (v6[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      else
        --v6[4];
    }
    result = (WTF::StringImpl *)WTF::fastFree(v5, a2);
  }
  if (v13)
  {
    result = v12;
    goto LABEL_9;
  }
LABEL_12:
  v7 = *(WTF **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v8 = *((_QWORD *)v7 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v7 + 1) = 0;
      if (*(_DWORD *)(v8 + 48) == 1)
      {
        WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)v8, a2);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      else
      {
        --*(_DWORD *)(v8 + 48);
      }
      result = (WTF::StringImpl *)WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  *(_DWORD *)(a1 + 144) = 1;
  return result;
}

_QWORD *WebCore::PaymentResponse::stop(WebCore::PaymentResponse *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;

  v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = &off_1E3365130;
  v3[1] = this;
  v3[2] = v2;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *((_DWORD *)this + 12);
  *(_QWORD *)(v4 + 8) = this;
  ++*((_QWORD *)this + 2);
  *((_DWORD *)this + 12) = v5 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3365108;
  result[1] = this;
  result[2] = v4;
  result[3] = v3;
  v11 = result;
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v9, 12, (uint64_t *)&v11);
      result = v11;
      v11 = 0;
      if (!result)
        goto LABEL_8;
    }
    else
    {
      v11 = 0;
    }
    v10 = (uint64_t (**)())*result;
  }
  else
  {
    v11 = 0;
    v10 = off_1E3365108;
  }
  result = (_QWORD *)v10[1]();
LABEL_8:
  *((_DWORD *)this + 36) = 2;
  return result;
}

WebCore::PaymentResponse *WebCore::PaymentResponse::suspend(WebCore::PaymentResponse *this, int a2)
{
  if (a2 == 2 && !*((_DWORD *)this + 36))
    return (WebCore::PaymentResponse *)WebCore::PaymentResponse::stop(this);
  return this;
}

void WebCore::MainThreadPermissionObserver::~MainThreadPermissionObserver(WebCore::MainThreadPermissionObserver *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  char v23;
  char v24;

  {
    if (WebCore::sharedController(void)::controller)
      goto LABEL_8;
  }
  else
  {
    WebCore::sharedController(void)::controller = 0;
  }
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3365088;
  v3 = (unsigned int *)WebCore::sharedController(void)::controller;
  WebCore::sharedController(void)::controller = v2;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
LABEL_8:
  (*(void (**)(uint64_t, WebCore::MainThreadPermissionObserver *))(*(_QWORD *)WebCore::sharedController(void)::controller
                                                                           + 32))(WebCore::sharedController(void)::controller, this);
  v8 = *((unsigned int *)this + 34);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E33650B8[v8])(&v23, (char *)this + 112);
  *((_DWORD *)this + 34) = -1;
  v9 = *((unsigned int *)this + 26);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E33650B8[v9])(&v24, (char *)this + 80);
  *((_DWORD *)this + 26) = -1;
  v10 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v7);
    }
  }
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_21:
    v15 = *(_QWORD *)(v13 + 16) - 1;
    *(_QWORD *)(v13 + 16) = v15;
    if (!v15)
    {
      v16 = *(_QWORD *)(v13 + 8);
      v17 = __ldxr((unsigned __int8 *)v13);
      if (v17 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
        {
          if (v16)
            goto LABEL_29;
LABEL_28:
          WTF::fastFree((WTF *)v13, v7);
          goto LABEL_29;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (v16)
        goto LABEL_29;
      goto LABEL_28;
    }
    v22 = __ldxr((unsigned __int8 *)v13);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
LABEL_29:
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v7);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::MainThreadPermissionObserver::~MainThreadPermissionObserver(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::MainThreadPermissionObserver::stateChanged(uint64_t a1, char a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 64) = a2;
  v4 = *(_OWORD *)(a1 + 48);
  v19[0] = *(_OWORD *)(a1 + 32);
  v19[1] = v4;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 16);
    v7 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
  v9 = *(_QWORD *)(a1 + 24);
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = &off_1E3365158;
  *(_QWORD *)(v10 + 8) = v7;
  *(_QWORD *)(v10 + 16) = v9;
  *(_BYTE *)(v10 + 24) = a2;
  v17 = v10;
  v18 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_17:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v19);
  if (v12)
  {
    v13 = v12[4];
    if (v13)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v12[4]) & 1) != 0)
      {
        v14 = 1;
        goto LABEL_23;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 336))(v13, &v17);
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
LABEL_23:
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v14)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v14)
LABEL_26:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v13);
LABEL_27:
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::NavigatorPermissions::permissions(WebCore::NavigatorPermissions *this)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  bmalloc::api *v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v12;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    v3 = *((_QWORD *)this + 2);
    v1 = bmalloc::api::isoAllocate();
    *(_DWORD *)v1 = 1;
    WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 24), v3);
    v5 = *(unsigned int **)(v3 + 24);
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    *(_QWORD *)(v1 + 8) = v5;
    v7 = (bmalloc::api *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v1;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        v9 = (unsigned int *)*((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        if (v9)
        {
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v9);
            v12 = v7;
            WTF::fastFree((WTF *)v9, v4);
            v7 = v12;
          }
        }
        bmalloc::api::isoDeallocate(v7, v4);
        return *((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  return v1;
}

unsigned int *WebCore::PermissionController::setSharedController(uint64_t *a1)
{
  uint64_t v1;
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  {
    WebCore::sharedController(void)::controller = 0;
  }
  v1 = *a1;
  *a1 = 0;
  result = (unsigned int *)WebCore::sharedController(void)::controller;
  WebCore::sharedController(void)::controller = v1;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WebCore::ContextDestructionObserver *WebCore::PermissionStatus::PermissionStatus(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, char a3, char a4, char a5, uint64_t *a6)
{
  WebCore::ScriptExecutionContext *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  int v38;
  void *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  char v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[19];
  uint64_t v53;
  _BYTE v54[24];
  int v55;
  char v56[24];
  int v57;
  uint64_t v58;
  uint64_t v59[3];
  int v60;
  _BYTE v61[24];
  int v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[3];
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v13 = (char *)a2 - 192;
    v14 = *((_QWORD *)a2 + 64);
    if (v14)
    {
      v15 = *(char **)(v14 + 8);
      if (v15)
        v13 = v15;
    }
    v12 = (WebCore::ScriptExecutionContext *)(v13 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v12);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v12 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1954E51ACLL);
  }
  v59[0] = (uint64_t)this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v12 + 16, v59, (uint64_t)&v50);
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v16 = 0;
  *(_OWORD *)(v16 + 8) = xmmword_19689B170;
  *(_QWORD *)(v16 + 24) = this;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &off_1E33653A8;
  *((_QWORD *)this + 3) = v16;
  *((_QWORD *)this + 4) = &unk_1E3365428;
  *((_BYTE *)this + 56) = a3;
  *((_BYTE *)this + 57) = a4;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 0;
  WebCore::SecurityContext::securityOrigin(a2, v17);
  v19 = v18;
  if (v18)
  {
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 + 1, v18));
    LOBYTE(v63) = 0;
    DWORD2(v64) = -1;
    v21 = v18[8];
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(__int128 *, __int128 *, unsigned int *))off_1E33650C8[v21])(&v50, &v63, v18 + 2);
      DWORD2(v64) = v21;
    }
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  v22 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 256))(a2);
  LOBYTE(v59[0]) = 0;
  v60 = -1;
  v23 = *(unsigned int *)(v22 + 32);
  if ((_DWORD)v23 != -1)
  {
    ((void (*)(__int128 *, uint64_t *, uint64_t))off_1E33650C8[v23])(&v50, v59, v22 + 8);
    v60 = v23;
  }
  v61[0] = 0;
  v62 = -1;
  v24 = DWORD2(v64);
  if (DWORD2(v64) != -1)
  {
    ((void (*)(__int128 *, _BYTE *, __int128 *))off_1E33650D8[DWORD2(v64)])(&v50, v61, &v63);
    v62 = v24;
  }
  *((_QWORD *)this + 8) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v25 = *((_QWORD *)this + 3);
  if (!v25)
  {
    v27 = 0;
    goto LABEL_27;
  }
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
LABEL_19:
    MEMORY[0x19AEA534C](v25);
    goto LABEL_20;
  }
  if (__stxr(1u, (unsigned __int8 *)v25))
    goto LABEL_19;
LABEL_20:
  if (*(_QWORD *)(v25 + 24))
  {
    ++*(_QWORD *)(v25 + 16);
    v27 = v25;
  }
  else
  {
    v27 = 0;
  }
  v28 = __ldxr((unsigned __int8 *)v25);
  if (v28 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v25))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_27:
  *(_QWORD *)&v50 = v27;
  *((_QWORD *)&v50 + 1) = this;
  v29 = *((_OWORD *)a2 + 15);
  v51 = *((_OWORD *)a2 + 14);
  *(_OWORD *)v52 = v29;
  *(_WORD *)&v52[16] = *((_WORD *)this + 28);
  v52[18] = a5;
  v30 = *a6;
  *a6 = 0;
  v53 = v30;
  if (v60 == -1)
    goto LABEL_66;
  v49 = &v48;
  ((void (*)(_QWORD *__return_ptr, char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v60])(v65, &v49, v59);
  v54[0] = 0;
  v55 = -1;
  v31 = v66;
  if (v66 != -1)
  {
    ((void (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v66])(&v49, v54, v65);
    v55 = v31;
    if (v66 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v66])(&v49, v65);
  }
  if (v62 == -1)
LABEL_66:
    std::__throw_bad_variant_access[abi:sn180100]();
  v49 = &v48;
  ((void (*)(_QWORD *__return_ptr, char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v62])(v65, &v49, v61);
  v56[0] = 0;
  v57 = -1;
  v32 = v66;
  if (v66 != -1)
  {
    ((void (*)(char **, char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v66])(&v49, v56, v65);
    v57 = v32;
    if (v66 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v66])(&v49, v65);
  }
  v58 = *((_QWORD *)this + 8);
  v33 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)v33 = off_1E3365190;
  v34 = v50;
  v50 = 0uLL;
  *(_OWORD *)(v33 + 16) = v34;
  *(_DWORD *)(v33 + 63) = *(_DWORD *)&v52[15];
  v35 = *(_OWORD *)v52;
  *(_OWORD *)(v33 + 32) = v51;
  *(_OWORD *)(v33 + 48) = v35;
  v36 = v53;
  v53 = 0;
  *(_QWORD *)(v33 + 72) = v36;
  *(_BYTE *)(v33 + 80) = 0;
  *(_DWORD *)(v33 + 104) = -1;
  v37 = v55;
  if (v55 != -1)
  {
    ((void (*)(_QWORD *, uint64_t, _BYTE *))off_1E33650D8[v55])(v65, v33 + 80, v54);
    *(_DWORD *)(v33 + 104) = v37;
  }
  *(_BYTE *)(v33 + 112) = 0;
  *(_DWORD *)(v33 + 136) = -1;
  v38 = v57;
  if (v57 != -1)
  {
    ((void (*)(_QWORD *))off_1E33650D8[v57])(v65);
    *(_DWORD *)(v33 + 136) = v38;
  }
  *(_QWORD *)(v33 + 144) = v58;
  v65[0] = v33;
  WTF::ensureOnMainThread();
  v40 = v65[0];
  v65[0] = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  WebCore::PermissionStatus::PermissionStatus(WebCore::ScriptExecutionContext &,WebCore::PermissionState,WebCore::PermissionDescriptor,WebCore::PermissionQuerySource,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0::~$_0((uint64_t *)&v50, v39);
  if (v62 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E33650B8[v62])(&v50, v61);
  v62 = -1;
  if (v60 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E33650B8[v60])(&v50, v59);
  if (DWORD2(v64) != -1)
    ((void (*)(__int128 *, __int128 *))off_1E33650B8[DWORD2(v64)])(&v50, &v63);
  if (v19)
  {
    do
    {
      v42 = __ldaxr(v19);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v19));
    if (!v43)
    {
      atomic_store(1u, v19);
      v45 = (WTF::StringImpl *)*((_QWORD *)v19 + 6);
      *((_QWORD *)v19 + 6) = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v41);
        else
          *(_DWORD *)v45 -= 2;
      }
      v46 = (WTF::StringImpl *)*((_QWORD *)v19 + 5);
      *((_QWORD *)v19 + 5) = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v41);
        else
          *(_DWORD *)v46 -= 2;
      }
      v47 = v19[8];
      if ((_DWORD)v47 != -1)
        ((void (*)(__int128 *, unsigned int *))off_1E33650B8[v47])(&v50, v19 + 2);
      v19[8] = -1;
      WTF::fastFree((WTF *)v19, v41);
    }
  }
  return this;
}

uint64_t *WebCore::PermissionStatus::PermissionStatus(WebCore::ScriptExecutionContext &,WebCore::PermissionState,WebCore::PermissionDescriptor,WebCore::PermissionQuerySource,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0::~$_0(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  char v15;
  char v16;

  v3 = *((unsigned int *)a1 + 30);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t *))off_1E33650B8[v3])(&v15, a1 + 12);
  *((_DWORD *)a1 + 30) = -1;
  v4 = *((unsigned int *)a1 + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t *))off_1E33650B8[v4])(&v16, a1 + 8);
  *((_DWORD *)a1 + 22) = -1;
  v5 = (unsigned int *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *a1;
  *a1 = 0;
  if (!v8)
    return a1;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_14:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    return a1;
  }
  v11 = *(_QWORD *)(v8 + 8);
  v12 = __ldxr((unsigned __int8 *)v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (!v11)
        goto LABEL_21;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
LABEL_21:
    WTF::fastFree((WTF *)v8, a2);
  return a1;
}

void WebCore::PermissionStatus::~PermissionStatus(WebCore::PermissionStatus *this, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;

  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E33651B8;
    v4[1] = v3;
    v6 = v4;
    WTF::callOnMainThread();
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  WebCore::EventTarget::~EventTarget((WebCore::PermissionStatus *)((char *)this + 32), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v5);
}

{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;
  _QWORD *v8;

  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E33651B8;
    v4[1] = v3;
    v8 = v4;
    WTF::callOnMainThread();
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  }
  WebCore::EventTarget::~EventTarget((WebCore::PermissionStatus *)((char *)this + 32), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v5);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::PermissionStatus::~PermissionStatus(WebCore::PermissionStatus *this, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E33651B8;
    v4[1] = v3;
    v6 = v4;
    WTF::callOnMainThread();
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  WebCore::EventTarget::~EventTarget(this, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::PermissionStatus *)((char *)this - 32), v5);
}

{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;
  _QWORD *v8;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E33651B8;
    v4[1] = v3;
    v8 = v4;
    WTF::callOnMainThread();
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  }
  WebCore::EventTarget::~EventTarget(this, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::PermissionStatus *)((char *)this - 32), v5);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::PermissionStatus::scriptExecutionContext(WebCore::PermissionStatus *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

BOOL WebCore::PermissionStatus::virtualHasPendingActivity(WebCore::PermissionStatus *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (!*((_BYTE *)this + 72))
    return 0;
  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 178))
    return 1;
  v4 = *(_QWORD *)(v2 + 240);
  return v4 && *(_QWORD *)(v4 + 8) != 0;
}

WebCore::EventNames **WebCore::PermissionStatus::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[6];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 368);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 72) = v6;
  return this;
}

WebCore::EventNames **`non-virtual thunk to'WebCore::PermissionStatus::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 368);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 40) = v6;
  return this;
}

uint64_t WebCore::Permissions::sourceFromContext(WebCore::Permissions *this, const WebCore::ScriptExecutionContext *a2)
{
  int v2;
  int v4;

  v2 = *((unsigned __int8 *)this + 274);
  if (!*((_BYTE *)this + 274))
    goto LABEL_12;
  if ((*(unsigned int (**)(WebCore::Permissions *, const WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 64))(this, a2)&& !(*(unsigned int (**)(WebCore::Permissions *))(*(_QWORD *)this + 488))(this))
  {
    v2 = 1;
LABEL_12:
    v4 = 1;
    return v2 | (v4 << 8);
  }
  if ((*(unsigned int (**)(WebCore::Permissions *))(*(_QWORD *)this + 64))(this)
    && (*(unsigned int (**)(WebCore::Permissions *))(*(_QWORD *)this + 488))(this) == 2)
  {
    v4 = 1;
    v2 = 2;
  }
  else if ((*(unsigned int (**)(WebCore::Permissions *))(*(_QWORD *)this + 64))(this)
         && (*(unsigned int (**)(WebCore::Permissions *))(*(_QWORD *)this + 488))(this) == 1)
  {
    v4 = 1;
    v2 = 3;
  }
  else
  {
    v2 = 0;
    v4 = 0;
  }
  return v2 | (v4 << 8);
}

uint64_t WebCore::Permissions::toPermissionName(WebCore::Permissions *this, const WTF::String *a2)
{
  int v3;
  int v4;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "camera", 6) & 1) != 0)
  {
    v3 = 1;
    v4 = 3;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "geolocation", 11) & 1) != 0)
  {
    v3 = 1;
    v4 = 5;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "microphone", 10) & 1) != 0)
  {
    v3 = 1;
    v4 = 8;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "notifications", 13) & 1) != 0)
  {
    v3 = 1;
    v4 = 11;
  }
  else
  {
    v3 = MEMORY[0x19AEA53F4](*(_QWORD *)this, "push", 4);
    if (v3)
      v4 = 12;
    else
      v4 = 0;
  }
  return v4 | (v3 << 8);
}

unsigned int *WebCore::Permissions::query(uint64_t a1, JSC::JSCell ***a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::Document *v24;
  uint64_t v25;
  JSC::VM **v26;
  JSC::JSCell *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int *v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  char v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  unsigned int v51;
  int *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  objc_class *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned __int8 **v81;
  WebCore::ContextDestructionObserver *v82;
  void *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  char v93;
  __int128 v94;
  __int128 v95;
  unsigned int *v96;
  objc_class *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char v106[4];
  int v107;
  objc_class *v108;
  _BYTE v109[24];
  int v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char v114;
  unsigned int *v115;
  WTF *v116;
  WTF::StringImpl *v117;
  int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char v122;
  unsigned int *v123;
  __int128 v124;
  __int128 v125;
  objc_class *v126;
  WTF::StringImpl *v127;
  int v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    v10 = 0;
    v13 = 1;
LABEL_15:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = *a3;
    LOBYTE(v126) = 8;
    *(_QWORD *)&v124 = 0;
    LOBYTE(v116) = 8;
    v15 = v127;
    if (v127)
      *(_DWORD *)v127 += 2;
    v117 = v15;
    WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v116, 0, (objc_class **)&v124);
    v17 = v117;
    v117 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = (unsigned int *)v127;
    v127 = 0;
    if (result)
    {
      if (*result == 2)
      {
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
        if ((v13 & 1) != 0)
          return result;
        goto LABEL_24;
      }
      *result -= 2;
    }
    if ((v13 & 1) != 0)
      return result;
    goto LABEL_24;
  }
  v10 = (unsigned __int8 *)(v8 - 96);
  v11 = *(unsigned __int8 *)(v8 + 178);
  if (*(_BYTE *)(v8 + 178))
  {
    if (v11 == 1 || v11 == 2)
      ++*(_DWORD *)(v8 + 216);
  }
  else
  {
    *(_DWORD *)(v8 - 264) += 2;
  }
  if (!WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v8 - 96)))
  {
    v13 = 0;
    goto LABEL_15;
  }
  if (*(_BYTE *)(v8 + 178))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 64))(v8 - 96)
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 488))(v8 - 96))
    {
      v12 = 1;
    }
    else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 64))(v8 - 96)
           && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 488))(v8 - 96) == 2)
    {
      v12 = 2;
    }
    else
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 64))(v8 - 96)
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 488))(v8 - 96) != 1)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v21 = *a3;
        LOBYTE(v126) = 6;
        *(_QWORD *)&v124 = 0;
        LOBYTE(v116) = 6;
        v22 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        v117 = v22;
        WebCore::DeferredPromise::reject(v21, (unsigned __int8 *)&v116, 0, (objc_class **)&v124);
        v23 = v117;
        v117 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v16);
          else
            *(_DWORD *)v23 -= 2;
        }
        result = (unsigned int *)v127;
        v127 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
          else
            *result -= 2;
        }
        goto LABEL_24;
      }
      v12 = 3;
    }
    v24 = (WebCore::Document *)(v8 - 288);
    if (*(_BYTE *)(v8 + 178))
    {
      v20 = 0;
      v25 = 0;
      goto LABEL_51;
    }
    v20 = v8 - 288;
  }
  else
  {
    v12 = 0;
    v20 = v8 - 288;
  }
  *(_DWORD *)(v8 - 264) += 2;
  if ((WebCore::Document::isFullyActive((WebCore::Document *)v20) & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v43 = *a3;
    LOBYTE(v126) = 8;
    *(_QWORD *)&v124 = 0;
    LOBYTE(v116) = 8;
    v44 = v127;
    if (v127)
      *(_DWORD *)v127 += 2;
    v117 = v44;
    WebCore::DeferredPromise::reject(v43, (unsigned __int8 *)&v116, 0, (objc_class **)&v124);
    v45 = v117;
    v117 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v16);
      else
        *(_DWORD *)v45 -= 2;
    }
    result = (unsigned int *)v127;
    v127 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      else
        *result -= 2;
    }
    goto LABEL_189;
  }
  v25 = 1;
  v24 = (WebCore::Document *)v20;
LABEL_51:
  WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v8 - 96));
  v26 = (JSC::VM **)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v8 - 96));
  if (*a2)
    v27 = **a2;
  else
    v27 = 0;
  WebCore::convertDictionary<WebCore::PermissionDescriptor>(v27, v26, (uint64_t)v106);
  if (!v107)
  {
    v29 = v106[0];
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 - 96), v28);
    v32 = v30;
    if (v30)
    {
      do
        v33 = __ldaxr(v30);
      while (__stlxr(v33 + 1, v30));
      LOBYTE(v124) = 0;
      DWORD2(v125) = -1;
      v3 = v30[8];
      if ((_DWORD)v3 != -1)
      {
        ((void (*)(WTF **, __int128 *, unsigned int *))off_1E33650C8[v3])(&v116, &v124, v30 + 2);
        DWORD2(v125) = v3;
      }
      if ((_DWORD)v25)
      {
LABEL_59:
        v34 = *(_QWORD *)(v8 + 240);
        if (!v34 || (v35 = *(_QWORD *)(v34 + 8)) == 0 || (v36 = *(_QWORD *)(v35 + 24)) == 0)
        {
          v3 = 0;
          v46 = 1;
          goto LABEL_89;
        }
        v105 = v25;
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
        {
          v3 = *(_QWORD *)(v37 + 16);
          if (v3)
            goto LABEL_219;
          v3 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v3 = 1;
          *(_QWORD *)(v3 + 8) = v37;
          v38 = *(unsigned int **)(v37 + 16);
          *(_QWORD *)(v37 + 16) = v3;
          if (!v38)
            goto LABEL_219;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            atomic_store(1u, v38);
            WTF::fastFree((WTF *)v38, v31);
          }
          v3 = *(_QWORD *)(v37 + 16);
          if (v3)
          {
LABEL_219:
            do
              v41 = __ldaxr((unsigned int *)v3);
            while (__stlxr(v41 + 1, (unsigned int *)v3));
            LODWORD(v25) = v105;
            if (*(_QWORD *)(v3 + 8))
            {
              switch((_DWORD)v29)
              {
                case 3:
                  v42 = 0;
                  break;
                case 8:
                  v42 = 1;
                  break;
                case 5:
                  v42 = 5;
                  break;
                default:
                  goto LABEL_106;
              }
              if ((WebCore::PermissionsPolicy::isFeatureEnabled(v42, v24, 0) & 1) == 0)
              {
                v74 = *(_QWORD *)(v3 + 8);
                v75 = *(_QWORD *)(v74 + 16);
                if (v75)
                  goto LABEL_220;
                v75 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v75 = 1;
                *(_QWORD *)(v75 + 8) = v74;
                v77 = *(unsigned int **)(v74 + 16);
                *(_QWORD *)(v74 + 16) = v75;
                if (!v77)
                  goto LABEL_220;
                do
                {
                  v78 = __ldaxr(v77);
                  v79 = v78 - 1;
                }
                while (__stlxr(v79, v77));
                if (!v79)
                {
                  atomic_store(1u, v77);
                  WTF::fastFree((WTF *)v77, v76);
                }
                v75 = *(_QWORD *)(v74 + 16);
                if (v75)
                {
LABEL_220:
                  do
                    v80 = __ldaxr((unsigned int *)v75);
                  while (__stlxr(v80 + 1, (unsigned int *)v75));
                }
                v116 = (WTF *)v75;
                v81 = (unsigned __int8 **)bmalloc::api::isoAllocate();
                v82 = WebCore::PermissionStatus::PermissionStatus((WebCore::ContextDestructionObserver *)v81, (WebCore::ScriptExecutionContext *)(v8 - 96), 1, v29, 0, (uint64_t *)&v116);
                WebCore::ActiveDOMObject::suspendIfNeeded(v82);
                WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PermissionStatus>>(*a3, (WebCore::JSDOMGlobalObject *)v81);
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(v81[3], v83);
                result = (unsigned int *)v116;
                v116 = 0;
                if (result)
                {
                  do
                  {
                    v84 = __ldaxr(result);
                    v85 = v84 - 1;
                  }
                  while (__stlxr(v85, result));
                  if (!v85)
                  {
                    atomic_store(1u, result);
                    result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
                  }
                }
                goto LABEL_98;
              }
LABEL_106:
              v52 = &webThreadDelegateMessageScopeCount;
              v25 = (uint64_t)&webThreadDelegateMessageScopeCount;
              {
                if (WebCore::sharedController(void)::controller)
                {
LABEL_113:
                  v104 = *(_QWORD *)(v25 + 1504);
                  WebCore::Document::topOrigin(v24, (WTF::StringImpl *)v31);
                  LOBYTE(v116) = 0;
                  v118 = -1;
                  v59 = *(unsigned int *)(v58 + 32);
                  if ((_DWORD)v59 != -1)
                  {
                    ((void (*)(objc_class **, WTF **, uint64_t))off_1E33650C8[v59])(&v126, &v116, v58 + 8);
                    v118 = v59;
                  }
                  LOBYTE(v119) = 0;
                  DWORD2(v120) = -1;
                  v60 = DWORD2(v125);
                  if (DWORD2(v125) != -1)
                  {
                    ((void (*)(objc_class **))off_1E33650D8[DWORD2(v125)])(&v126);
                    DWORD2(v120) = v60;
                  }
                  v61 = *(_QWORD *)(v3 + 8);
                  v62 = *(_QWORD *)(v61 + 16);
                  if (v62)
                    goto LABEL_221;
                  v62 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v62 = 1;
                  *(_QWORD *)(v62 + 8) = v61;
                  v64 = *(unsigned int **)(v61 + 16);
                  *(_QWORD *)(v61 + 16) = v62;
                  if (!v64)
                    goto LABEL_221;
                  do
                  {
                    v65 = __ldaxr(v64);
                    v66 = v65 - 1;
                  }
                  while (__stlxr(v66, v64));
                  if (!v66)
                  {
                    atomic_store(1u, v64);
                    WTF::fastFree((WTF *)v64, v63);
                  }
                  v62 = *(_QWORD *)(v61 + 16);
                  if (v62)
                  {
LABEL_221:
                    do
                      v67 = __ldaxr((unsigned int *)v62);
                    while (__stlxr(v67 + 1, (unsigned int *)v62));
                  }
                  v126 = (objc_class *)v62;
                  *(_DWORD *)(v8 - 264) += 2;
                  do
                    v68 = __ldaxr((unsigned int *)v3);
                  while (__stlxr(v68 + 1, (unsigned int *)v3));
                  v69 = *a3;
                  *a3 = 0;
                  v70 = WTF::fastMalloc((WTF *)0x28);
                  *(_QWORD *)v70 = &off_1E33651F0;
                  *(_QWORD *)(v70 + 8) = v24;
                  *(_QWORD *)(v70 + 16) = v3;
                  *(_BYTE *)(v70 + 24) = v29;
                  *(_QWORD *)(v70 + 32) = v69;
                  v108 = (objc_class *)v70;
                  (*(void (**)(uint64_t, WTF **, uint64_t, objc_class **, uint64_t, objc_class **))(*(_QWORD *)v104 + 16))(v104, &v116, v29, &v126, v12, &v108);
                  v71 = v108;
                  v108 = 0;
                  if (v71)
                    (*(void (**)(objc_class *))(*(_QWORD *)v71 + 8))(v71);
                  result = (unsigned int *)v126;
                  v126 = 0;
                  LODWORD(v25) = v105;
                  if (result)
                  {
                    do
                    {
                      v72 = __ldaxr(result);
                      v73 = v72 - 1;
                    }
                    while (__stlxr(v73, result));
                    if (!v73)
                    {
                      atomic_store(1u, result);
                      result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
                    }
                  }
                  if (DWORD2(v120) != -1)
                    result = (unsigned int *)((uint64_t (*)(objc_class **, __int128 *))off_1E33650B8[DWORD2(v120)])(&v126, &v119);
                  DWORD2(v120) = -1;
                  if (v118 != -1)
                    result = (unsigned int *)((uint64_t (*)(objc_class **, WTF **))off_1E33650B8[v118])(&v126, &v116);
                  goto LABEL_98;
                }
LABEL_108:
                v53 = WTF::fastMalloc((WTF *)0x10);
                *(_DWORD *)(v53 + 8) = 1;
                *(_QWORD *)v53 = off_1E3365088;
                v54 = *(unsigned int **)(v25 + 1504);
                *(_QWORD *)(v25 + 1504) = v53;
                if (v54)
                {
                  v55 = v54 + 2;
                  do
                  {
                    v56 = __ldaxr(v55);
                    v57 = v56 - 1;
                  }
                  while (__stlxr(v57, v55));
                  if (!v57)
                  {
                    atomic_store(1u, v54 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
                  }
                }
                goto LABEL_113;
              }
LABEL_215:
              *(_QWORD *)(v25 + 1504) = 0;
              *((_BYTE *)v52 + 1512) = 1;
              goto LABEL_108;
            }
            v46 = 0;
LABEL_89:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v47 = *a3;
            LOBYTE(v126) = 8;
            v108 = 0;
            LOBYTE(v116) = 8;
            v48 = v127;
            if (v127)
              *(_DWORD *)v127 += 2;
            v117 = v48;
            WebCore::DeferredPromise::reject(v47, (unsigned __int8 *)&v116, 0, &v108);
            v49 = v117;
            v117 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, v16);
              else
                *(_DWORD *)v49 -= 2;
            }
            result = (unsigned int *)v127;
            v127 = 0;
            if (result)
            {
              if (*result == 2)
              {
                result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
                if ((v46 & 1) == 0)
                {
                  do
                  {
LABEL_98:
                    v50 = __ldaxr((unsigned int *)v3);
                    v51 = v50 - 1;
                  }
                  while (__stlxr(v51, (unsigned int *)v3));
                  if (!v51)
                  {
                    atomic_store(1u, (unsigned int *)v3);
                    result = (unsigned int *)WTF::fastFree((WTF *)v3, v16);
                  }
                }
LABEL_183:
                if (DWORD2(v125) != -1)
                  result = (unsigned int *)((uint64_t (*)(WTF **, __int128 *))off_1E33650B8[DWORD2(v125)])(&v116, &v124);
                if (v32)
                {
                  do
                  {
                    v99 = __ldaxr(v32);
                    v100 = v99 - 1;
                  }
                  while (__stlxr(v100, v32));
                  if (!v100)
                  {
                    atomic_store(1u, v32);
                    v101 = (WTF::StringImpl *)*((_QWORD *)v32 + 6);
                    *((_QWORD *)v32 + 6) = 0;
                    if (v101)
                    {
                      if (*(_DWORD *)v101 == 2)
                        WTF::StringImpl::destroy(v101, v16);
                      else
                        *(_DWORD *)v101 -= 2;
                    }
                    v102 = (WTF::StringImpl *)*((_QWORD *)v32 + 5);
                    *((_QWORD *)v32 + 5) = 0;
                    if (v102)
                    {
                      if (*(_DWORD *)v102 == 2)
                        WTF::StringImpl::destroy(v102, v16);
                      else
                        *(_DWORD *)v102 -= 2;
                    }
                    v103 = v32[8];
                    if ((_DWORD)v103 != -1)
                      ((void (*)(WTF **, unsigned int *))off_1E33650B8[v103])(&v116, v32 + 2);
                    v32[8] = -1;
                    result = (unsigned int *)WTF::fastFree((WTF *)v32, v16);
                  }
                }
                goto LABEL_188;
              }
              *result -= 2;
            }
            if ((v46 & 1) == 0)
              goto LABEL_98;
            goto LABEL_183;
          }
        }
        else
        {
          v3 = 0;
        }
        v46 = 1;
        LODWORD(v25) = v105;
        goto LABEL_89;
      }
    }
    else
    {
      v124 = 0u;
      v125 = 0u;
      if ((_DWORD)v25)
        goto LABEL_59;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 64))(v8 - 96) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1954E65DCLL);
    }
    if (DWORD2(v125) != -1)
    {
      v116 = (WTF *)&v108;
      ((void (*)(objc_class **__return_ptr, WTF **, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[DWORD2(v125)])(&v126, &v116, &v124);
      LOBYTE(v116) = 0;
      v118 = -1;
      v87 = v128;
      if (v128 != -1)
      {
        ((void (*)(objc_class **, WTF **, objc_class **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v128])(&v108, &v116, &v126);
        v118 = v87;
        if (v128 != -1)
          ((void (*)(objc_class **, objc_class **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v128])(&v108, &v126);
      }
      LOBYTE(v119) = v29;
      v88 = *(_OWORD *)(v8 + 144);
      v120 = *(_OWORD *)(v8 + 128);
      v121 = v88;
      v122 = v12;
      result = (unsigned int *)*a3;
      *a3 = 0;
      v123 = result;
      v89 = *(_QWORD *)(*(_QWORD *)(v8 + 264) + 128);
      if (v89)
      {
        v109[0] = 0;
        v110 = -1;
        v90 = v118;
        if (v118 != -1)
        {
          ((void (*)(objc_class **, _BYTE *, WTF **))off_1E33650D8[v118])(&v126, v109, &v116);
          v110 = v90;
          result = v123;
        }
        v111 = v119;
        v112 = v120;
        v113 = v121;
        v114 = v122;
        v123 = 0;
        v115 = result;
        v91 = WTF::fastMalloc((WTF *)0x70);
        *(_QWORD *)v91 = &off_1E3365218;
        *(_BYTE *)(v91 + 16) = 0;
        *(_DWORD *)(v91 + 40) = -1;
        v92 = v110;
        if (v110 != -1)
        {
          ((void (*)(objc_class **, uint64_t, _BYTE *))off_1E33650D8[v110])(&v126, v91 + 16, v109);
          *(_DWORD *)(v91 + 40) = v92;
        }
        v93 = v114;
        v95 = v112;
        v94 = v113;
        *(_OWORD *)(v91 + 48) = v111;
        *(_OWORD *)(v91 + 64) = v95;
        *(_OWORD *)(v91 + 80) = v94;
        *(_BYTE *)(v91 + 96) = v93;
        v96 = v115;
        v115 = 0;
        *(_QWORD *)(v91 + 104) = v96;
        v126 = (objc_class *)v91;
        LOBYTE(v127) = 0;
        (*(void (**)(uint64_t, objc_class **))(*(_QWORD *)v89 + 56))(v89, &v126);
        v97 = v126;
        v126 = 0;
        if (v97)
          (*(void (**)(objc_class *))(*(_QWORD *)v97 + 8))(v97);
        v98 = v115;
        v115 = 0;
        if (v98)
        {
          if (v98[4] == 1)
            (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 16))(v98);
          else
            --v98[4];
        }
        if (v110 != -1)
          ((void (*)(objc_class **, _BYTE *))off_1E33650B8[v110])(&v108, v109);
        v110 = -1;
        result = v123;
      }
      v123 = 0;
      if (result)
      {
        if (result[4] == 1)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
        else
          --result[4];
      }
      if (v118 != -1)
        result = (unsigned int *)((uint64_t (*)(objc_class **, WTF **))off_1E33650B8[v118])(&v126, &v116);
      goto LABEL_183;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_215;
  }
  v86 = *a3;
  v126 = 0;
  LOBYTE(v116) = 37;
  v117 = 0;
  WebCore::DeferredPromise::reject(v86, (unsigned __int8 *)&v116, 0, &v126);
  result = (unsigned int *)v117;
  v117 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
    else
      *result -= 2;
  }
LABEL_188:
  if ((_DWORD)v25)
  {
LABEL_189:
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v20, v16);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
LABEL_24:
  v19 = v10[274];
  if (v10[274])
  {
    if (v19 == 1)
    {
      if (*((_DWORD *)v10 + 78) == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 40))(v10);
      else
        --*((_DWORD *)v10 + 78);
    }
    else if (v19 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v10 + 78);
    }
  }
  else if (*((_DWORD *)v10 - 42) == 2)
  {
    if ((*((_WORD *)v10 - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 192), v16);
  }
  else
  {
    *((_DWORD *)v10 - 42) -= 2;
  }
  return result;
}

uint64_t WebCore::WorkerNavigatorPermissions::permissions(WebCore::WorkerNavigatorPermissions *this, WebCore::WorkerNavigator *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  const char *v9[3];
  const char *v10[2];

  v3 = (uint64_t *)((char *)this + 56);
  v9[0] = "WorkerNavigatorPermissions";
  v9[1] = (const char *)27;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 7, v9);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = off_1E3365068;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = this;
    v8 = (unsigned __int8 *)v5;
    v10[0] = "WorkerNavigatorPermissions";
    v10[1] = (const char *)27;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v3, v10, &v8, (uint64_t)v9);
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v6 + 8))(v6);
  }
  return WebCore::NavigatorPermissions::permissions((WebCore::NavigatorPermissions *)v5);
}

void WebCore::DocumentPictureInPicture::exitPictureInPicture(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  const char **v5;
  WebCore::HTMLVideoElementPictureInPicture *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::HTMLVideoElementPictureInPicture *v11;
  WTF::StringImpl *v12[3];
  const char *v13[2];

  v3 = *(_QWORD *)(a1 + 3032);
  if (v3 && (v4 = *(uint64_t **)(v3 + 8)) != 0)
  {
    v12[0] = (WTF::StringImpl *)"HTMLVideoElementPictureInPicture";
    v12[1] = (WTF::StringImpl *)33;
    v5 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(v4 + 232, (const char **)v12);
    if (!v5 || (v6 = (WebCore::HTMLVideoElementPictureInPicture *)v5[2]) == 0)
    {
      v6 = (WebCore::HTMLVideoElementPictureInPicture *)bmalloc::api::isoAllocate();
      v11 = WebCore::HTMLVideoElementPictureInPicture::HTMLVideoElementPictureInPicture(v6, (WebCore::HTMLVideoElement *)v4);
      v13[0] = "HTMLVideoElementPictureInPicture";
      v13[1] = (const char *)33;
      WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v4 + 232, v13, (unsigned __int8 **)&v11, (uint64_t)v12);
      v7 = (unsigned __int8 *)v11;
      v11 = 0;
      if (v7)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v7 + 8))(v7);
    }
    WebCore::HTMLVideoElementPictureInPicture::exitPictureInPicture(v6, a2);
  }
  else
  {
    v8 = *a2;
    v12[0] = 0;
    WebCore::DeferredPromise::reject(v8, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v12, 0);
    v10 = v12[0];
    v12[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t WebCore::PaymentResponse::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

WebCore::PaymentResponse *WebCore::PaymentResponse::deref(WebCore::PaymentResponse *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 12) == 1)
  {
    WebCore::PaymentResponse::~PaymentResponse(this, a2);
    return (WebCore::PaymentResponse *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 12);
  }
  return this;
}

uint64_t WebCore::PaymentResponse::eventTargetInterface(WebCore::PaymentResponse *this)
{
  return 18;
}

uint64_t WebCore::PaymentResponse::scriptExecutionContext(WebCore::PaymentResponse *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::PaymentResponse::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

WebCore::PaymentResponse *WebCore::PaymentResponse::derefEventTarget(WebCore::PaymentResponse *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 12) == 1)
  {
    WebCore::PaymentResponse::~PaymentResponse(this, a2);
    return (WebCore::PaymentResponse *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 12);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::PaymentResponse::eventTargetInterface(WebCore::PaymentResponse *this)
{
  return 18;
}

uint64_t `non-virtual thunk to'WebCore::PaymentResponse::scriptExecutionContext(WebCore::PaymentResponse *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::PaymentResponse::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::PaymentResponse::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this + 24) == 1)
  {
    WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)(this - 24), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this + 24);
  }
  return this;
}

uint64_t WebCore::MainThreadPermissionObserver::currentState(WebCore::MainThreadPermissionObserver *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t WebCore::MainThreadPermissionObserver::origin(WebCore::MainThreadPermissionObserver *this)
{
  return (uint64_t)this + 80;
}

uint64_t WebCore::MainThreadPermissionObserver::descriptor(WebCore::MainThreadPermissionObserver *this)
{
  return *((unsigned __int8 *)this + 65);
}

uint64_t WebCore::MainThreadPermissionObserver::source(WebCore::MainThreadPermissionObserver *this)
{
  return *((unsigned __int8 *)this + 66);
}

uint64_t WebCore::MainThreadPermissionObserver::page(WebCore::MainThreadPermissionObserver *this)
{
  return (uint64_t)this + 72;
}

uint64_t WebCore::PermissionStatus::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::PermissionStatus::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t WebCore::PermissionStatus::eventTargetInterface(WebCore::PermissionStatus *this)
{
  return 70;
}

uint64_t WebCore::PermissionStatus::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::PermissionStatus::derefEventTarget(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t `non-virtual thunk to'WebCore::PermissionStatus::eventTargetInterface(WebCore::PermissionStatus *this)
{
  return 70;
}

uint64_t `non-virtual thunk to'WebCore::PermissionStatus::scriptExecutionContext(WebCore::PermissionStatus *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::PermissionStatus::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebCore::PermissionStatus::derefEventTarget(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(*(this - 1), a2);
}

void WebCore::NavigatorPermissions::~NavigatorPermissions(WebCore::NavigatorPermissions *this, void *a2)
{
  bmalloc::api *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;

  v3 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = v3;
          WTF::fastFree((WTF *)v4, a2);
          v3 = v7;
        }
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

{
  bmalloc::api *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;

  v3 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = v3;
          WTF::fastFree((WTF *)v4, a2);
          v3 = v7;
        }
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::WorkerNavigatorPermissions::~WorkerNavigatorPermissions(WebCore::WorkerNavigatorPermissions *this, void *a2)
{
  bmalloc::api *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;

  v3 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = v3;
          WTF::fastFree((WTF *)v4, a2);
          v3 = v7;
        }
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

{
  bmalloc::api *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;

  v3 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = v3;
          WTF::fastFree((WTF *)v4, a2);
          v3 = v7;
        }
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::DummyPermissionController::query(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;

  v6 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v14 = *((_QWORD *)v2 + 2);
    v6 = (_QWORD *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v14 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    v9 = v6[8];
    if (v9)
    {
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E33651B8;
      v10[1] = v9;
      v15 = v10;
      WTF::callOnMainThread();
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v6 + 4), a2);
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v6, v11);
    this = (unsigned __int8 *)bmalloc::api::isoDeallocate(v12, v13);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WTF::WeakPtr<WebCore::PaymentRequest,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::PaymentRequest>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v2 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = a1 + 24;
    *(_BYTE *)(v2 + 32) = 0;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v4 & 0xFFFF000000000000 | v2;
    v5 = v4 & 0xFFFFFFFFFFFFLL;
    if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v9 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v9)
        {
          v12 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
          v5 = v12;
        }
        v10 = *(WTF **)(v5 + 16);
        if (v10)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v11 = v5;
          WTF::fastFree(v10, v3);
          v5 = v11;
        }
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  return *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFLL;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::PaymentResponse>(WebCore::PaymentResponse &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::PaymentResponse>(WebCore::PaymentResponse &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::PaymentResponse>(WebCore::PaymentResponse &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::PaymentResponse>(WebCore::PaymentResponse &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::PaymentResponse *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3365108;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 48) == 1)
      {
        WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)v7, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 48);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::PaymentResponse *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 12) == 1)
    {
      WebCore::PaymentResponse::~PaymentResponse(v5, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 12);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PaymentResponse::stop(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E3365130;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 48) == 1)
      {
        WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 48);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PaymentResponse::stop(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E3365130;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 48) == 1)
      {
        WebCore::PaymentResponse::~PaymentResponse((WebCore::PaymentResponse *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 48);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PaymentResponse::stop(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  void *v3;
  WTF *v4;
  _DWORD *v5;
  char v6[8];
  WTF::StringImpl *v7;
  char v8;

  v1 = *(_QWORD *)(a1 + 8);
  v6[0] = 16;
  v7 = 0;
  v8 = 1;
  result = *(WTF::StringImpl **)(v1 + 152);
  if (result)
  {
    result = WebCore::DOMPromiseDeferred<void>::settle(result, (uint64_t)v6);
    v4 = *(WTF **)(v1 + 152);
    *(_QWORD *)(v1 + 152) = 0;
    if (v4)
    {
      v5 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v5)
      {
        if (v5[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
        else
          --v5[4];
      }
      result = (WTF::StringImpl *)WTF::fastFree(v4, v3);
    }
    if (v8)
    {
      result = v7;
      v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v3);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MainThreadPermissionObserver::stateChanged(WebCore::PermissionState)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3365158;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MainThreadPermissionObserver::stateChanged(WebCore::PermissionState)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3365158;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MainThreadPermissionObserver::stateChanged(WebCore::PermissionState)::$_0,void,WebCore::ScriptExecutionContext &>::call(unsigned __int8 *result, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL4 v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;

  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
  {
    __clrex();
LABEL_36:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v4)
      goto LABEL_12;
    return result;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_36;
  if (v4)
  {
LABEL_12:
    v7 = v3[24];
    if (*(unsigned __int8 *)(v4 + 56) == v7)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 24), a2);
    v8 = *(_QWORD *)(v4 + 8);
    if (!v8)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 24), a2);
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 24), a2);
    if (*(_BYTE *)(v9 + 178))
    {
      if (*(unsigned __int8 *)(v9 + 178) - 1 <= 1)
        ++*(_DWORD *)(v9 + 216);
      v11 = 0;
      v10 = (WebCore::Node *)(v9 - 288);
    }
    else
    {
      v10 = (WebCore::Node *)(v9 - 288);
      *(_DWORD *)(v9 - 264) += 4;
      result = (unsigned __int8 *)WebCore::Document::isFullyActive((WebCore::Document *)(v9 - 288));
      if (!(_DWORD)result)
        goto LABEL_29;
      v11 = 1;
    }
    *(_BYTE *)(v4 + 56) = v7;
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
      v13 = WebCore::threadGlobalDataSlow((WebCore *)result);
    v14 = *(_QWORD *)(v13 + 40);
    if (!v14)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
      v14 = *(_QWORD *)(v13 + 40);
    }
    v15 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
    *(_QWORD *)v15 = off_1E33A4B48;
    *(_QWORD *)(v15 + 8) = 0;
    v17 = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x1E8200;
    v18 = *(_QWORD *)(v14 + 368) != 0;
    *(_DWORD *)(v15 + 16) = 1;
    *(_DWORD *)(v15 + 20) = v17 | v18;
    v19 = *(_DWORD **)(v14 + 368);
    if (v19)
      *v19 += 2;
    *(_QWORD *)(v15 + 24) = v19;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = v16;
    *(_QWORD *)(v15 + 64) = 0;
    v21 = (_DWORD *)v15;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v4, v4 + 32, 14, (uint64_t *)&v21);
    if (v21)
    {
      if (v21[4] == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v21 + 8))();
        if (v11)
        {
LABEL_29:
          if (*(_DWORD *)(v9 - 264) == 2)
          {
            if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10, a2);
          }
          else
          {
            *(_DWORD *)(v9 - 264) -= 2;
          }
        }
LABEL_31:
        v20 = *(unsigned __int8 *)(v9 + 178);
        if (*(_BYTE *)(v9 + 178))
        {
          if (v20 == 1)
          {
            if (*(_DWORD *)(v9 + 216) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 40))(v9 - 96);
            else
              --*(_DWORD *)(v9 + 216);
          }
          else if (v20 == 2)
          {
            WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v9 + 216));
          }
        }
        else if (*(_DWORD *)(v9 - 264) == 2)
        {
          if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, a2);
        }
        else
        {
          *(_DWORD *)(v9 - 264) -= 2;
        }
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 24), a2);
      }
      --v21[4];
    }
    if (v11)
      goto LABEL_29;
    goto LABEL_31;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PermissionStatus::PermissionStatus(WebCore::ScriptExecutionContext &,WebCore::PermissionState,WebCore::PermissionDescriptor,WebCore::PermissionQuerySource,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3365190;
  WebCore::PermissionStatus::PermissionStatus(WebCore::ScriptExecutionContext &,WebCore::PermissionState,WebCore::PermissionDescriptor,WebCore::PermissionQuerySource,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0::~$_0(a1 + 2, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PermissionStatus::PermissionStatus(WebCore::ScriptExecutionContext &,WebCore::PermissionState,WebCore::PermissionDescriptor,WebCore::PermissionQuerySource,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0,void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E3365190;
  WebCore::PermissionStatus::PermissionStatus(WebCore::ScriptExecutionContext &,WebCore::PermissionState,WebCore::PermissionDescriptor,WebCore::PermissionQuerySource,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0::~$_0(a1 + 2, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

WebCore::MainThreadPermissionObserver *WTF::Detail::CallableWrapper<WebCore::PermissionStatus::PermissionStatus(WebCore::ScriptExecutionContext &,WebCore::PermissionState,WebCore::PermissionDescriptor,WebCore::PermissionQuerySource,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  WebCore::MainThreadPermissionObserver *result;
  WTF *v29;
  void *v30;
  int v31;
  WTF *v32;
  void *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = WTF::fastMalloc((WTF *)0x90);
  v4 = *(_OWORD *)(a1 + 48);
  v39 = *(_OWORD *)(a1 + 32);
  v3 = v39;
  v40 = v4;
  v5 = *(_WORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 66);
  *(_QWORD *)v2 = off_1E3364FF8;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(v2 + 24) = v7;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  *(_WORD *)(v2 + 64) = v5;
  *(_BYTE *)(v2 + 66) = v6;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(v2 + 72) = v8;
  *(_BYTE *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 104) = -1;
  v9 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E33650D8[v9])(&v38, v2 + 80, a1 + 80);
    *(_DWORD *)(v2 + 104) = v9;
  }
  *(_BYTE *)(v2 + 112) = 0;
  *(_DWORD *)(v2 + 136) = -1;
  v10 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(char *))off_1E33650D8[v10])(&v38);
    *(_DWORD *)(v2 + 136) = v10;
  }
  {
    if (WebCore::sharedController(void)::controller)
      goto LABEL_12;
  }
  else
  {
    WebCore::sharedController(void)::controller = 0;
  }
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E3365088;
  v12 = (unsigned int *)WebCore::sharedController(void)::controller;
  WebCore::sharedController(void)::controller = v11;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)WebCore::sharedController(void)::controller + 24))(WebCore::sharedController(void)::controller, v2);
  if ((_MergedGlobals_145 & 1) != 0)
  {
    v16 = qword_1ECE820A8;
    v17 = (uint64_t *)(a1 + 144);
    if (qword_1ECE820A8)
    {
LABEL_15:
      v18 = *(_DWORD *)(v16 - 8);
      goto LABEL_16;
    }
  }
  else
  {
    qword_1ECE820A8 = 0;
    _MergedGlobals_145 = 1;
    v17 = (uint64_t *)(a1 + 144);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
  v16 = qword_1ECE820A8;
  if (qword_1ECE820A8)
    goto LABEL_15;
  v18 = 0;
LABEL_16:
  v19 = *v17;
  v20 = *v17 + ~(*v17 << 32);
  v21 = 9
      * (((v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13)) ^ (((v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v18 & ((v22 >> 31) ^ v22);
  v24 = (_QWORD *)(v16 + 16 * v23);
  v25 = *v24;
  if (*v24)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v25 == v19)
      {
        WebCore::MainThreadPermissionObserver::~MainThreadPermissionObserver((WebCore::MainThreadPermissionObserver *)v2);
        return (WebCore::MainThreadPermissionObserver *)WTF::fastFree(v32, v33);
      }
      if (v25 == -1)
        v26 = v24;
      v23 = (v23 + v27) & v18;
      v24 = (_QWORD *)(v16 + 16 * v23);
      v25 = *v24;
      ++v27;
    }
    while (*v24);
    if (v26)
    {
      *v26 = 0;
      v26[1] = 0;
      --*(_DWORD *)(v16 - 16);
      v19 = *v17;
      v24 = v26;
    }
  }
  result = (WebCore::MainThreadPermissionObserver *)v24[1];
  *v24 = v19;
  v24[1] = v2;
  if (result)
  {
    WebCore::MainThreadPermissionObserver::~MainThreadPermissionObserver(result);
    result = (WebCore::MainThreadPermissionObserver *)WTF::fastFree(v29, v30);
  }
  if (qword_1ECE820A8)
    v31 = *(_DWORD *)(qword_1ECE820A8 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(qword_1ECE820A8 - 12) = v31;
  if (qword_1ECE820A8)
    v34 = *(_DWORD *)(qword_1ECE820A8 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(qword_1ECE820A8 - 16) + v34);
  v36 = *(unsigned int *)(qword_1ECE820A8 - 4);
  if (v36 <= 0x400)
  {
    if (3 * v36 > 4 * v35)
      return result;
    if (!(_DWORD)v36)
    {
      v37 = 8;
      return (WebCore::MainThreadPermissionObserver *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v37);
    }
LABEL_36:
    v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE820A8 - 12) >= (2 * v36));
    return (WebCore::MainThreadPermissionObserver *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v37);
  }
  if (v36 <= 2 * v35)
    goto LABEL_36;
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::MainThreadPermissionObserver *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  WebCore::MainThreadPermissionObserver *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  void *v27;

  v2 = qword_1ECE820A8;
  if (qword_1ECE820A8)
  {
    v3 = *(_DWORD *)(qword_1ECE820A8 - 4);
    v4 = *(_DWORD *)(qword_1ECE820A8 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE820A8 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE820A8 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t *)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (qword_1ECE820A8)
            v12 = *(_DWORD *)(qword_1ECE820A8 - 8);
          else
            v12 = 0;
          v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = 1;
          do
          {
            v18 = v16;
            v19 = *(_QWORD *)(qword_1ECE820A8 + 16 * v16);
            v16 = (v16 + v17++) & v12;
          }
          while (v19);
          v20 = (uint64_t *)(qword_1ECE820A8 + 16 * v18);
          v21 = (WebCore::MainThreadPermissionObserver *)v20[1];
          v20[1] = 0;
          if (v21)
          {
            WebCore::MainThreadPermissionObserver::~MainThreadPermissionObserver(v21);
            WTF::fastFree(v22, v23);
          }
          *v20 = *v8;
          v24 = v2 + 16 * v7;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v20[1] = v25;
          v11 = *(WebCore::MainThreadPermissionObserver **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v11)
            goto LABEL_19;
LABEL_18:
          WebCore::MainThreadPermissionObserver::~MainThreadPermissionObserver(v11);
          WTF::fastFree(v26, v27);
          goto LABEL_19;
        }
        v10 = v2 + 16 * v7;
        v11 = *(WebCore::MainThreadPermissionObserver **)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v11)
          goto LABEL_18;
      }
LABEL_19:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

WebCore::MainThreadPermissionObserver *WTF::Detail::CallableWrapper<WebCore::PermissionStatus::~PermissionStatus()::$_0,void>::call(WebCore::MainThreadPermissionObserver *result)
{
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  if ((_MergedGlobals_145 & 1) != 0)
  {
    if (qword_1ECE820A8)
    {
      v1 = *((_QWORD *)result + 1);
      v2 = *(_DWORD *)(qword_1ECE820A8 - 8);
      v3 = (v1 + ~(v1 << 32)) ^ ((unint64_t)(v1 + ~(v1 << 32)) >> 22);
      v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
      v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
      v6 = v2 & ((v5 >> 31) ^ v5);
      v7 = *(_QWORD *)(qword_1ECE820A8 + 16 * v6);
      if (v7 != v1)
      {
        v8 = 1;
        while (v7)
        {
          v6 = ((_DWORD)v6 + v8) & v2;
          v7 = *(_QWORD *)(qword_1ECE820A8 + 16 * v6);
          ++v8;
          if (v7 == v1)
            goto LABEL_9;
        }
        v6 = *(unsigned int *)(qword_1ECE820A8 - 4);
      }
LABEL_9:
      if (v6 != *(_DWORD *)(qword_1ECE820A8 - 4))
      {
        v9 = (_QWORD *)(qword_1ECE820A8 + 16 * v6);
        result = (WebCore::MainThreadPermissionObserver *)v9[1];
        *v9 = -1;
        v9[1] = 0;
        if (result)
        {
          WebCore::MainThreadPermissionObserver::~MainThreadPermissionObserver(result);
          result = (WebCore::MainThreadPermissionObserver *)WTF::fastFree(v10, v11);
        }
        v12 = qword_1ECE820A8;
        ++*(_DWORD *)(qword_1ECE820A8 - 16);
        if (v12)
          v13 = *(_DWORD *)(v12 - 12) - 1;
        else
          v13 = -1;
        *(_DWORD *)(v12 - 12) = v13;
        if (qword_1ECE820A8)
        {
          v14 = *(_DWORD *)(qword_1ECE820A8 - 4);
          if (6 * *(_DWORD *)(qword_1ECE820A8 - 12) < v14 && v14 >= 9)
            return (WebCore::MainThreadPermissionObserver *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::MainThreadPermissionObserver>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::MainThreadPermissionObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MainThreadPermissionObserverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v14 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1ECE820A8 = 0;
    _MergedGlobals_145 = 1;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PermissionStatus>>(uint64_t result, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::PermissionStatus>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Permissions::query(JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PermissionStatus>> &&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *a1 = &off_1E33651F0;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Permissions::query(JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PermissionStatus>> &&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E33651F0;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::Permissions::query(JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PermissionStatus>> &&)::$_0,void,std::optional<WebCore::PermissionState>>::call(uint64_t a1, __int16 a2)
{
  char v3;
  WebCore::ScriptExecutionContext *v4;
  char v5;
  unsigned __int8 **v6;
  WebCore::ContextDestructionObserver *v7;
  void *v8;
  unsigned __int8 *result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  if ((a2 & 0xFF00) != 0)
  {
    v3 = a2;
    v4 = (WebCore::ScriptExecutionContext *)(*(_QWORD *)(a1 + 8) + 192);
    v5 = *(_BYTE *)(a1 + 24);
    v6 = (unsigned __int8 **)bmalloc::api::isoAllocate();
    v7 = WebCore::PermissionStatus::PermissionStatus((WebCore::ContextDestructionObserver *)v6, v4, v3, v5, 0, (uint64_t *)(a1 + 16));
    WebCore::ActiveDOMObject::suspendIfNeeded(v7);
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PermissionStatus>>(*(_QWORD *)(a1 + 32), (WebCore::JSDOMGlobalObject *)v6);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(v6[3], v8);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = *(_QWORD *)(a1 + 32);
    v16 = 0;
    v14[0] = 6;
    if (v13)
      *(_DWORD *)v13 += 2;
    v15 = v13;
    WebCore::DeferredPromise::reject(v10, v14, 0, &v16);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = (unsigned __int8 *)v13;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return (unsigned __int8 *)WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Permissions::query(JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PermissionStatus>> &&)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_1E3365218;
  v2 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E33650B8[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Permissions::query(JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PermissionStatus>> &&)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)this = &off_1E3365218;
  v3 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E33650B8[v4])(&v6, (char *)this + 16);
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Permissions::query(JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PermissionStatus>> &&)::$_1,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Document *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int *result;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1954E8690);
  }
  v3 = *(_QWORD *)(a2 + 336);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = (WebCore::Document *)(a2 - 192);
          if (*(_BYTE *)(a1 + 96) == 1)
          {
            v8 = *(_QWORD *)(v6 + 16);
            if (v8)
              goto LABEL_61;
            v8 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v8 = 1;
            *(_QWORD *)(v8 + 8) = v6;
            v9 = *(unsigned int **)(v6 + 16);
            *(_QWORD *)(v6 + 16) = v8;
            if (!v9)
              goto LABEL_61;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              WTF::fastFree((WTF *)v9, (void *)a2);
            }
            v8 = *(_QWORD *)(v6 + 16);
            if (v8)
            {
LABEL_61:
              do
                v12 = __ldaxr((unsigned int *)v8);
              while (__stlxr(v12 + 1, (unsigned int *)v8));
            }
          }
          else
          {
            v8 = 0;
          }
          v41 = (WTF *)v8;
          {
            if (WebCore::sharedController(void)::controller)
            {
LABEL_39:
              v26 = WebCore::sharedController(void)::controller;
              WebCore::Document::topOrigin(v7, (WTF::StringImpl *)a2);
              LOBYTE(v44) = 0;
              DWORD2(v45) = -1;
              v28 = *(unsigned int *)(v27 + 32);
              if ((_DWORD)v28 != -1)
              {
                ((void (*)(__int128 *, __int128 *, uint64_t))off_1E33650C8[v28])(&v42, &v44, v27 + 8);
                DWORD2(v45) = v28;
              }
              v46[0] = 0;
              v47 = -1;
              v29 = *(unsigned int *)(a1 + 40);
              if ((_DWORD)v29 != -1)
              {
                ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E33650D8[v29])(&v42, v46, a1 + 16);
                v47 = v29;
              }
              v30 = *(unsigned __int8 *)(a1 + 48);
              v31 = *(unsigned __int8 *)(a1 + 96);
              v42 = *(_OWORD *)(a1 + 64);
              *(_QWORD *)&v43 = *(_QWORD *)(a1 + 80);
              v32 = *(_QWORD *)(a1 + 104);
              *(_QWORD *)(a1 + 104) = 0;
              v33 = v41;
              if (v41)
              {
                do
                  v34 = __ldaxr((unsigned int *)v41);
                while (__stlxr(v34 + 1, (unsigned int *)v41));
              }
              v35 = WTF::fastMalloc((WTF *)0x50);
              *(_QWORD *)v35 = &off_1E3365268;
              *(_OWORD *)(v35 + 16) = v42;
              *(_OWORD *)(v35 + 32) = v43;
              *(_BYTE *)(v35 + 48) = v30;
              *(_QWORD *)(v35 + 56) = v32;
              *(_BYTE *)(v35 + 64) = v31;
              *(_QWORD *)(v35 + 72) = v33;
              v40 = v35;
              (*(void (**)(uint64_t, __int128 *, uint64_t, WTF **, uint64_t, uint64_t *))(*(_QWORD *)v26 + 16))(v26, &v44, v30, &v41, v31, &v40);
              v37 = v40;
              v40 = 0;
              if (v37)
                (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
              if (v47 != -1)
                ((void (*)(__int128 *, _BYTE *))off_1E33650B8[v47])(&v42, v46);
              v47 = -1;
              if (DWORD2(v45) != -1)
                ((void (*)(__int128 *, __int128 *))off_1E33650B8[DWORD2(v45)])(&v42, &v44);
              result = (unsigned int *)v41;
              v41 = 0;
              if (result)
              {
                do
                {
                  v38 = __ldaxr(result);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, result));
                if (!v39)
                {
                  atomic_store(1u, result);
                  return (unsigned int *)WTF::fastFree((WTF *)result, v36);
                }
              }
              return result;
            }
          }
          else
          {
            WebCore::sharedController(void)::controller = 0;
          }
          v21 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)(v21 + 8) = 1;
          *(_QWORD *)v21 = off_1E3365088;
          v22 = (unsigned int *)WebCore::sharedController(void)::controller;
          WebCore::sharedController(void)::controller = v21;
          if (v22)
          {
            v23 = v22 + 2;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v22 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
            }
          }
          goto LABEL_39;
        }
      }
    }
  }
  v13 = *(_OWORD *)(a1 + 80);
  v44 = *(_OWORD *)(a1 + 64);
  v45 = v13;
  v14 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E3365240;
  v15[1] = v14;
  *(_QWORD *)&v42 = v15;
  BYTE8(v42) = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_19:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v17 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)&v44);
  if (v17)
  {
    v18 = v17[4];
    if (v18)
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 336))(v18, &v42);
  }
  v19 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (unsigned int *)v42;
  *(_QWORD *)&v42 = 0;
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_EUlSK_E_vJRSH_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3365240;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_EUlSK_E_vJRSH_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3365240;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_EUlSK_E_vJRSH_EE4callESM_(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  unsigned __int8 v7[8];
  WTF::StringImpl *v8;
  objc_class *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 8);
  v9 = 0;
  v7[0] = 8;
  if (v6)
    *(_DWORD *)v6 += 2;
  v8 = v6;
  WebCore::DeferredPromise::reject(v2, v7, 0, &v9);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (uint64_t)v6;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_EUlSJ_E_vJNSt3__18optionalINS2_15PermissionStateEEEEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E3365268;
  v3 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[7];
  a1[7] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_EUlSJ_E_vJNSt3__18optionalINS2_15PermissionStateEEEEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E3365268;
  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_EUlSJ_E_vJNSt3__18optionalINS2_15PermissionStateEEEEE4callESP_(uint64_t a1, unsigned __int16 a2)
{
  int v2;
  __int128 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = *(_OWORD *)(a1 + 32);
  v16[0] = *(_OWORD *)(a1 + 16);
  v16[1] = v3;
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v5 = *(unsigned __int8 *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v7 = *(unsigned __int8 *)(a1 + 64);
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = &off_1E3365290;
  *(_QWORD *)(v8 + 8) = v4;
  *(_DWORD *)(v8 + 16) = v2 | (v5 << 16) | (v7 << 24);
  *(_QWORD *)(v8 + 24) = v6;
  v14 = v8;
  v15 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v16);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 336))(v11, &v14);
  }
  v12 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_ENUlSJ_E_clINSt3__18optionalINS2_15PermissionStateEEEEESI_SJ_EUlSK_E_vJRSH_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E3365290;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_ENUlSJ_E_clINSt3__18optionalINS2_15PermissionStateEEEEESI_SJ_EUlSK_E_vJRSH_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E3365290;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore11Permissions5queryEN3JSC6StrongINS4_8JSObjectELNS4_30ShouldStrongDestructorGrabLockE0EEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PermissionStatusEEEEEEN3__1clINS2_22ScriptExecutionContextEEEDaRT_ENUlSJ_E_clINSt3__18optionalINS2_15PermissionStateEEEEESI_SJ_EUlSK_E_vJRSH_EE4callESS_(uint64_t a1, WebCore::ScriptExecutionContext *a2)
{
  char v4;
  char v5;
  char v6;
  unsigned __int8 **v7;
  WebCore::ContextDestructionObserver *v8;
  void *v9;
  unsigned __int8 *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int8 v15[8];
  WTF::StringImpl *v16;
  objc_class *v17;

  if (*(_BYTE *)(a1 + 17))
  {
    v4 = *(_BYTE *)(a1 + 16);
    v5 = *(_BYTE *)(a1 + 18);
    v6 = *(_BYTE *)(a1 + 19);
    v7 = (unsigned __int8 **)bmalloc::api::isoAllocate();
    v8 = WebCore::PermissionStatus::PermissionStatus((WebCore::ContextDestructionObserver *)v7, a2, v4, v5, v6, (uint64_t *)(a1 + 24));
    WebCore::ActiveDOMObject::suspendIfNeeded(v8);
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PermissionStatus>>(*(_QWORD *)(a1 + 8), (WebCore::JSDOMGlobalObject *)v7);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PermissionStatus,(WTF::DestructionThread)0>(v7[3], v9);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *(_QWORD *)(a1 + 8);
    v17 = 0;
    v15[0] = 6;
    if (v14)
      *(_DWORD *)v14 += 2;
    v16 = v14;
    WebCore::DeferredPromise::reject(v11, v15, 0, &v17);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = (unsigned __int8 *)v14;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        return (unsigned __int8 *)WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  return result;
}

WebCore::HTMLVideoElementPictureInPicture *WebCore::HTMLVideoElementPictureInPicture::HTMLVideoElementPictureInPicture(WebCore::HTMLVideoElementPictureInPicture *this, WebCore::HTMLVideoElement *a2)
{
  char *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WebCore::ContextDestructionObserver *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD v33[4];
  uint64_t v34;

  *((_QWORD *)this + 1) = &unk_1E33654F8;
  v4 = (char *)this + 8;
  *(_QWORD *)this = off_1E33654A0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E3365530;
  *((_WORD *)this + 16) = 0;
  if (!*((_QWORD *)a2 + 37))
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a2;
    v7 = (unsigned int *)*((_QWORD *)a2 + 37);
    *((_QWORD *)a2 + 37) = v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  v10 = (unsigned int *)*((_QWORD *)a2 + 37);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 5) = v10;
  v12 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v13 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v14 = (uint64_t)v13;
  v15 = *(_QWORD *)(v12 + 704);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
      v12 = v16;
  }
  *(_QWORD *)v13 = &off_1E33A18C0;
  *((_QWORD *)v13 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v13, (WebCore::ScriptExecutionContext *)(v12 + 192));
  *(_QWORD *)v14 = &off_1E33A0540;
  *(_QWORD *)(v14 + 16) = 0;
  if (*(_BYTE *)(v12 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x1954E8F98);
  }
  v34 = v14;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v12 + 320), &v34, (uint64_t)v33);
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)v14 = &off_1E3365D88;
  *(_QWORD *)(v14 + 24) = &unk_1E3365E00;
  *(_QWORD *)(v14 + 48) = 1;
  *(_DWORD *)(v14 + 56) = 0;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v14);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = v14;
  v17 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8));
  v18 = (unsigned int *)(v17 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *((_QWORD *)this + 9) = v17;
  v20 = WTF::cryptographicallyRandomNumber<unsigned long long>();
  *((_QWORD *)this + 10) = v20;
  v22 = *((_QWORD *)this + 9);
  v33[0] = "HTMLVideoElementPictureInPicture";
  v33[1] = 33;
  v33[2] = "HTMLVideoElementPictureInPicture";
  v33[3] = v20;
  if (*(_BYTE *)(v22 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v33);
  v23 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v24 = *((_QWORD *)this + 2);
  if (v24)
    goto LABEL_32;
  v24 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v24 = 1;
  *(_QWORD *)(v24 + 8) = v4;
  v25 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v24;
  if (!v25)
    goto LABEL_32;
  do
  {
    v26 = __ldaxr(v25);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v25));
  if (!v27)
  {
    atomic_store(1u, v25);
    WTF::fastFree((WTF *)v25, v21);
  }
  v24 = *((_QWORD *)this + 2);
  if (v24)
  {
LABEL_32:
    do
      v28 = __ldaxr((unsigned int *)v24);
    while (__stlxr(v28 + 1, (unsigned int *)v24));
  }
  v29 = *(unsigned int **)(v23 + 1896);
  *(_QWORD *)(v23 + 1896) = v24;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v21);
    }
  }
  return this;
}

uint64_t WebCore::HTMLVideoElementPictureInPicture::logger(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return *((_QWORD *)this + 9);
}

char *WebCore::HTMLVideoElementPictureInPicture::logChannel(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return &WebCore::LogMedia;
}

const char *WebCore::HTMLVideoElementPictureInPicture::logClassName(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return "HTMLVideoElementPictureInPicture";
}

uint64_t WebCore::HTMLVideoElementPictureInPicture::logIdentifier(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return *((_QWORD *)this + 10);
}

void `non-virtual thunk to'WebCore::HTMLVideoElementPictureInPicture::~HTMLVideoElementPictureInPicture(WebCore::HTMLVideoElementPictureInPicture *this, void *a2)
{
  WebCore::HTMLVideoElementPictureInPicture::~HTMLVideoElementPictureInPicture((WebCore::HTMLVideoElementPictureInPicture *)((char *)this - 8), a2);
}

{
  WebCore::HTMLVideoElementPictureInPicture::~HTMLVideoElementPictureInPicture((WebCore::HTMLVideoElementPictureInPicture *)((char *)this - 24), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElementPictureInPicture::~HTMLVideoElementPictureInPicture((WebCore::HTMLVideoElementPictureInPicture *)((char *)this - 8), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElementPictureInPicture::~HTMLVideoElementPictureInPicture((WebCore::HTMLVideoElementPictureInPicture *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::HTMLVideoElementPictureInPicture::requestPictureInPicture(WTF *a1, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  const char **v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::HTMLVideoElementPictureInPicture *v22;
  const char *v23[2];
  WTF::StringImpl *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;

  v3 = a1;
  if (HIBYTE(WebCore::isPictureInPictureSupported))
  {
    if ((_BYTE)WebCore::isPictureInPictureSupported)
      goto LABEL_3;
LABEL_18:
    v11 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v11;
LABEL_19:
    v13 = 6;
    goto LABEL_28;
  }
  a1 = (WTF *)-[objc_class isPictureInPictureSupported](getAVPictureInPictureControllerClass(), "isPictureInPictureSupported");
  if ((a1 & 1) == 0)
    goto LABEL_18;
LABEL_3:
  if (!*((_DWORD *)v3 + 226))
  {
    v14 = *a2;
    goto LABEL_22;
  }
  v4 = *((_QWORD *)v3 + 170);
  if (!v4 || !*(_DWORD *)(v4 + 68))
  {
    v14 = *a2;
LABEL_22:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v14;
    v13 = 8;
    goto LABEL_28;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 3032);
  if (v5 && *(_QWORD *)(v5 + 8))
    goto LABEL_8;
  if (!WTF::isMainThread(a1))
  {
LABEL_26:
    v10 = *a2;
    goto LABEL_27;
  }
  {
    WebCore::currentToken(void)::token = 0;
    goto LABEL_26;
  }
  if (!WebCore::currentToken(void)::token
    || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
    || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
  {
    goto LABEL_26;
  }
LABEL_8:
  v24 = (WTF::StringImpl *)"HTMLVideoElementPictureInPicture";
  v25 = 33;
  v6 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)v3 + 232, (const char **)&v24);
  if (!v6 || (v7 = (uint64_t *)v6[2]) == 0)
  {
    v7 = (uint64_t *)bmalloc::api::isoAllocate();
    v22 = WebCore::HTMLVideoElementPictureInPicture::HTMLVideoElementPictureInPicture((WebCore::HTMLVideoElementPictureInPicture *)v7, v3);
    v23[0] = "HTMLVideoElementPictureInPicture";
    v23[1] = (const char *)33;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>((uint64_t *)v3 + 232, v23, (unsigned __int8 **)&v22, (uint64_t)&v24);
    v8 = (unsigned __int8 *)v22;
    v22 = 0;
    if (v8)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 3032);
  if (v9 && *(WTF **)(v9 + 8) == v3)
  {
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PictureInPictureWindow>>(*a2, v7[6]);
    return;
  }
  if (v7[7] || v7[8])
  {
    v10 = *a2;
LABEL_27:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v10;
    v13 = 31;
LABEL_28:
    WebCore::DeferredPromise::reject(v12, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v24, 0);
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    return;
  }
  if (HIBYTE(WebCore::isPictureInPictureSupported))
  {
    if ((_BYTE)WebCore::isPictureInPictureSupported)
      goto LABEL_36;
LABEL_47:
    v18 = *a2;
    goto LABEL_48;
  }
  if ((-[objc_class isPictureInPictureSupported](getAVPictureInPictureControllerClass(), "isPictureInPictureSupported") & 1) == 0)
    goto LABEL_47;
LABEL_36:
  v17 = WebCore::HTMLVideoElement::supportsFullscreen(v3, 2);
  v18 = *a2;
  if (!v17)
  {
LABEL_48:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v18;
    goto LABEL_19;
  }
  *a2 = 0;
  v19 = (_DWORD *)v7[7];
  v7[7] = v18;
  if (v19)
  {
    if (v19[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
    else
      --v19[4];
  }
  LODWORD(v23[0]) = 2;
  v20 = *((_QWORD *)v3 + 228);
  v21 = *((_QWORD *)v3 + 229);
  v24 = (WTF::StringImpl *)"HTMLMediaElement";
  v25 = 17;
  v26 = "webkitSetPresentationMode";
  v27 = v21;
  if (*(_BYTE *)(v20 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WebCore::HTMLVideoElement::VideoPresentationMode>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v24, ", mode = ", (unsigned int *)v23);
  if (((*(unsigned int *)((char *)v3 + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)v3 + 1269) << 32)) & 0x200000000) == 0)
    WebCore::HTMLVideoElement::setPresentationMode(v3, (void *)LODWORD(v23[0]));
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PictureInPictureWindow>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::PictureInPictureWindow>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

void WebCore::HTMLVideoElementPictureInPicture::exitPictureInPicture(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unsigned int v19;

  v4 = a1[9];
  v5 = a1[10];
  v15 = (WTF::StringImpl *)"HTMLVideoElementPictureInPicture";
  v16 = 33;
  v17 = "exitPictureInPicture";
  v18 = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v15);
  }
  if (a1[7] || a1[8])
  {
    v7 = *a2;
    v15 = 0;
    WebCore::DeferredPromise::reject(v7, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v15, 0);
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v10 = *a2;
    *a2 = 0;
    v11 = (_DWORD *)a1[8];
    a1[8] = v10;
    if (v11)
    {
      if (v11[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
      else
        --v11[4];
    }
    v12 = *(_QWORD *)(a1[5] + 8);
    v19 = 0;
    v13 = *(_QWORD *)(v12 + 1824);
    v14 = *(_QWORD *)(v12 + 1832);
    v15 = (WTF::StringImpl *)"HTMLMediaElement";
    v16 = 17;
    v17 = "webkitSetPresentationMode";
    v18 = v14;
    if (*(_BYTE *)(v13 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WebCore::HTMLVideoElement::VideoPresentationMode>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v15, ", mode = ", &v19);
    if (((*(unsigned int *)(v12 + 1265) | ((unint64_t)*(unsigned __int16 *)(v12 + 1269) << 32)) & 0x200000000) == 0)
      WebCore::HTMLVideoElement::setPresentationMode((WebCore::HTMLVideoElement *)v12, (void *)v19);
  }
}

_DWORD *WebCore::HTMLVideoElementPictureInPicture::didEnterPictureInPicture(WebCore::HTMLVideoElementPictureInPicture *this, const WebCore::IntSize *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *result;
  uint64_t v19[4];

  v4 = *((_QWORD *)this + 9);
  v5 = *((_QWORD *)this + 10);
  v19[0] = (uint64_t)"HTMLVideoElementPictureInPicture";
  v19[1] = 33;
  v19[2] = (uint64_t)"didEnterPictureInPicture";
  v19[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v19);
  }
  WebCore::Document::setPictureInPictureElement(*(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 40) + 8), *(unsigned int ***)(*((_QWORD *)this + 5) + 8));
  v7 = (WebCore *)WebCore::PictureInPictureWindow::setSize(*((_DWORD **)this + 6), a2);
  v8 = *((_QWORD *)this + 6);
  if (v8)
    ++*(_DWORD *)(v8 + 48);
  v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    v11 = WebCore::threadGlobalDataSlow(v7);
  v12 = *(_QWORD *)(v11 + 40);
  if (!v12)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *(_QWORD *)(v11 + 40);
  }
  v13 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
  *(_QWORD *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 16) = 1;
  v15 = *(_DWORD *)(v13 + 20) & 0xFFC00000 | 0xD0002 | (*(_QWORD *)(v12 + 776) != 0);
  *(_DWORD *)(v13 + 20) = v15;
  v16 = *(_DWORD **)(v12 + 776);
  if (v16)
  {
    *v16 += 2;
    v15 = *(_DWORD *)(v13 + 20);
  }
  *(_QWORD *)(v13 + 24) = v16;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = v14;
  *(_DWORD *)(v13 + 20) = v15 | 0x4000;
  *(_QWORD *)v13 = off_1E3365CC0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = v8;
  v19[0] = v13;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v9 + 112), v9, 9, v9 + 824, v19);
  v17 = (_DWORD *)v19[0];
  v19[0] = 0;
  if (v17)
  {
    if (v17[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[4];
  }
  result = (_DWORD *)*((_QWORD *)this + 7);
  if (result)
  {
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PictureInPictureWindow>>((uint64_t)result, *((_QWORD *)this + 6));
    result = (_DWORD *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (result)
    {
      if (result[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[4];
    }
  }
  return result;
}

_DWORD *WebCore::PictureInPictureWindow::setSize(_DWORD *this, const WebCore::IntSize *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  _DWORD *v11;

  v2 = this;
  if (this[13] != *(_DWORD *)a2 || this[14] != *((_DWORD *)a2 + 1))
  {
    *(_QWORD *)(this + 13) = *(_QWORD *)a2;
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
      v4 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = *(_QWORD *)(v4 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
      v5 = *(_QWORD *)(v4 + 40);
    }
    v6 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    *(_QWORD *)v6 = off_1E33A4B48;
    *(_QWORD *)(v6 + 8) = 0;
    v8 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8200;
    v9 = *(_QWORD *)(v5 + 1696) != 0;
    *(_DWORD *)(v6 + 16) = 1;
    *(_DWORD *)(v6 + 20) = v8 | v9;
    v10 = *(_DWORD **)(v5 + 1696);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v6 + 24) = v10;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = 0;
    v11 = (_DWORD *)v6;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(v2, (uint64_t)(v2 + 3), 9, (uint64_t *)&v11);
    this = v11;
    if (v11)
    {
      if (v11[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
      else
        --v11[4];
    }
  }
  return this;
}

_DWORD *`non-virtual thunk to'WebCore::HTMLVideoElementPictureInPicture::didEnterPictureInPicture(WebCore::HTMLVideoElementPictureInPicture *this, const WebCore::IntSize *a2)
{
  return WebCore::HTMLVideoElementPictureInPicture::didEnterPictureInPicture((WebCore::HTMLVideoElementPictureInPicture *)((char *)this - 8), a2);
}

_DWORD *WebCore::HTMLVideoElementPictureInPicture::didExitPictureInPicture(WebCore::HTMLVideoElementPictureInPicture *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20[4];

  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 10);
  v20[0] = (uint64_t)"HTMLVideoElementPictureInPicture";
  v20[1] = 33;
  v20[2] = (uint64_t)"didExitPictureInPicture";
  v20[3] = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v20);
  }
  *(_QWORD *)(*((_QWORD *)this + 6) + 52) = 0;
  v5 = WebCore::Document::setPictureInPictureElement(*(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 40) + 8), 0);
  v6 = *((_QWORD *)this + 6);
  if (v6)
    ++*(_DWORD *)(v6 + 48);
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow((WebCore *)v5);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
  *(_QWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 16) = 1;
  v13 = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0xD0002 | (*(_QWORD *)(v10 + 1088) != 0);
  *(_DWORD *)(v11 + 20) = v13;
  v14 = *(_DWORD **)(v10 + 1088);
  if (v14)
  {
    *v14 += 2;
    v13 = *(_DWORD *)(v11 + 20);
  }
  *(_QWORD *)(v11 + 24) = v14;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = v12;
  *(_DWORD *)(v11 + 20) = v13 | 0x4000;
  *(_QWORD *)v11 = off_1E3365CC0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = v6;
  v20[0] = v11;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v7 + 112), v7, 9, v7 + 824, v20);
  result = (_DWORD *)v20[0];
  v20[0] = 0;
  if (result)
  {
    if (result[4] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  v16 = *((_QWORD *)this + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 24);
    if (!v17 || !*(_QWORD *)v17 || (*(_BYTE *)(v17 + 8) & 3) != 0)
    {
      *((_QWORD *)this + 8) = 0;
LABEL_28:
      if (*(_DWORD *)(v16 + 16) == 1)
        return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      --*(_DWORD *)(v16 + 16);
      return result;
    }
    v18 = *(_QWORD *)(v16 + 32);
    if (!v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
      v19 = 0;
    else
      v19 = *(uint64_t **)v18;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v16, v19, 0, (objc_class *)0xA);
    result = (_DWORD *)MEMORY[0x19AEA32A0](v20);
    v16 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v16)
      goto LABEL_28;
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::HTMLVideoElementPictureInPicture::didExitPictureInPicture(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return WebCore::HTMLVideoElementPictureInPicture::didExitPictureInPicture((WebCore::HTMLVideoElementPictureInPicture *)((char *)this - 8));
}

_DWORD *WebCore::HTMLVideoElementPictureInPicture::pictureInPictureWindowResized(WebCore::HTMLVideoElementPictureInPicture *this, const WebCore::IntSize *a2)
{
  return WebCore::PictureInPictureWindow::setSize(*((_DWORD **)this + 6), a2);
}

_DWORD *`non-virtual thunk to'WebCore::HTMLVideoElementPictureInPicture::pictureInPictureWindowResized(WebCore::HTMLVideoElementPictureInPicture *this, const WebCore::IntSize *a2)
{
  return WebCore::PictureInPictureWindow::setSize(*((_DWORD **)this + 5), a2);
}

char *`non-virtual thunk to'WebCore::HTMLVideoElementPictureInPicture::logChannel(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return &WebCore::LogMedia;
}

void `non-virtual thunk to'WebCore::PictureInPictureWindow::~PictureInPictureWindow(WebCore::PictureInPictureWindow *this, void *a2)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;

  v2 = (WebCore::PictureInPictureWindow *)((char *)this - 24);
  WebCore::EventTarget::~EventTarget(this, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
}

{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::PictureInPictureWindow *)((char *)this - 24);
  WebCore::EventTarget::~EventTarget(this, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::YouTubePluginReplacement::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];

  result = WTF::fastMalloc((WTF *)0x28);
  v9 = (_QWORD *)result;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3365570;
  if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 8) = a1;
    *(_BYTE *)(v10 + 32) = 0;
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v12 & 0xFFFF000000000000 | v10;
    result = v12 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)result));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)result);
        v19 = *(unsigned int *)(result + 28);
        if ((_DWORD)v19)
        {
          v22 = result;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v19));
          result = v22;
        }
        v20 = *(WTF **)(result + 16);
        if (v20)
        {
          *(_QWORD *)(result + 16) = 0;
          *(_DWORD *)(result + 24) = 0;
          v21 = result;
          WTF::fastFree(v20, v11);
          result = v21;
        }
        result = WTF::fastFree((WTF *)result, v11);
      }
    }
  }
  v15 = (unsigned int *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v9[4] = 0;
  v9[2] = v15;
  v9[3] = 0;
  if (*(_DWORD *)(a2 + 12))
  {
    v17 = 0;
    v18 = 0;
    do
    {
      if (v18 >= *(unsigned int *)(a3 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1954E9EA4);
      }
      result = (uint64_t)WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add<WTF::AtomString const&>(v9 + 4, (WTF::StringImpl *)(*(_QWORD *)a2 + v17), (WTF::StringImpl **)(*(_QWORD *)a3 + v17), (uint64_t)v23);
      ++v18;
      v17 += 8;
    }
    while (v18 < *(unsigned int *)(a2 + 12));
  }
  *a4 = v9;
  return result;
}

BOOL WebCore::YouTubePluginReplacement::supportsMIMEType(WebCore::YouTubePluginReplacement *this, const WTF::String *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = *(_DWORD *)(v2 + 4);
  if (v4 != 29)
  {
    if (v4 == 24)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v5 & 0xDF) == 0x41
          && (*(_BYTE *)(v5 + 1) & 0xDF) == 0x50
          && (*(_BYTE *)(v5 + 2) & 0xDF) == 0x50
          && (*(_BYTE *)(v5 + 3) & 0xDF) == 0x4C
          && (*(_BYTE *)(v5 + 4) & 0xDF) == 0x49
          && (*(_BYTE *)(v5 + 5) & 0xDF) == 0x43
          && (*(_BYTE *)(v5 + 6) & 0xDF) == 0x41
          && (*(_BYTE *)(v5 + 7) & 0xDF) == 0x54
          && (*(_BYTE *)(v5 + 8) & 0xDF) == 0x49
          && (*(_BYTE *)(v5 + 9) & 0xDF) == 0x4F
          && (*(_BYTE *)(v5 + 10) & 0xDF) == 0x4E
          && (*(_BYTE *)(v5 + 11) & 0xDF) == 0xF
          && (*(_BYTE *)(v5 + 12) & 0xDF) == 0x46
          && (*(_BYTE *)(v5 + 13) & 0xDF) == 0x55
          && (*(_BYTE *)(v5 + 14) & 0xDF) == 0x54
          && (*(_BYTE *)(v5 + 15) & 0xDF) == 0x55
          && (*(_BYTE *)(v5 + 16) & 0xDF) == 0x52
          && (*(_BYTE *)(v5 + 17) & 0xDF) == 0x45
          && (*(_BYTE *)(v5 + 18) & 0xDF) == 0x53
          && (*(_BYTE *)(v5 + 19) & 0xDF) == 0x50
          && (*(_BYTE *)(v5 + 20) & 0xDF) == 0x4C
          && (*(_BYTE *)(v5 + 21) & 0xDF) == 0x41
          && (*(_BYTE *)(v5 + 22) & 0xDF) == 0x53)
        {
          v6 = *(unsigned __int8 *)(v5 + 23);
          return (v6 & 0xFFFFFFDF) == 72;
        }
      }
      else if ((*(_WORD *)v5 & 0xFFDF) == 0x41
             && (*(_WORD *)(v5 + 2) & 0xFFDF) == 0x50
             && (*(_WORD *)(v5 + 4) & 0xFFDF) == 0x50
             && (*(_WORD *)(v5 + 6) & 0xFFDF) == 0x4C
             && (*(_WORD *)(v5 + 8) & 0xFFDF) == 0x49
             && (*(_WORD *)(v5 + 10) & 0xFFDF) == 0x43
             && (*(_WORD *)(v5 + 12) & 0xFFDF) == 0x41
             && (*(_WORD *)(v5 + 14) & 0xFFDF) == 0x54
             && (*(_WORD *)(v5 + 16) & 0xFFDF) == 0x49
             && (*(_WORD *)(v5 + 18) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v5 + 20) & 0xFFDF) == 0x4E
             && (*(_WORD *)(v5 + 22) & 0xFFDF) == 0xF
             && (*(_WORD *)(v5 + 24) & 0xFFDF) == 0x46
             && (*(_WORD *)(v5 + 26) & 0xFFDF) == 0x55
             && (*(_WORD *)(v5 + 28) & 0xFFDF) == 0x54
             && (*(_WORD *)(v5 + 30) & 0xFFDF) == 0x55
             && (*(_WORD *)(v5 + 32) & 0xFFDF) == 0x52
             && (*(_WORD *)(v5 + 34) & 0xFFDF) == 0x45
             && (*(_WORD *)(v5 + 36) & 0xFFDF) == 0x53
             && (*(_WORD *)(v5 + 38) & 0xFFDF) == 0x50
             && (*(_WORD *)(v5 + 40) & 0xFFDF) == 0x4C
             && (*(_WORD *)(v5 + 42) & 0xFFDF) == 0x41
             && (*(_WORD *)(v5 + 44) & 0xFFDF) == 0x53)
      {
        v6 = *(unsigned __int16 *)(v5 + 46);
        return (v6 & 0xFFFFFFDF) == 72;
      }
    }
    return 0;
  }
  v7 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v7 & 0xDF) != 0x41
      || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x50
      || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x50
      || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x4C
      || (*(_BYTE *)(v7 + 4) & 0xDF) != 0x49
      || (*(_BYTE *)(v7 + 5) & 0xDF) != 0x43
      || (*(_BYTE *)(v7 + 6) & 0xDF) != 0x41
      || (*(_BYTE *)(v7 + 7) & 0xDF) != 0x54
      || (*(_BYTE *)(v7 + 8) & 0xDF) != 0x49
      || (*(_BYTE *)(v7 + 9) & 0xDF) != 0x4F
      || (*(_BYTE *)(v7 + 10) & 0xDF) != 0x4E
      || (*(_BYTE *)(v7 + 11) & 0xDF) != 0xF
      || (*(_BYTE *)(v7 + 12) & 0xDF) != 0x58
      || (*(_BYTE *)(v7 + 13) & 0xDF) != 0xD
      || (*(_BYTE *)(v7 + 14) & 0xDF) != 0x53
      || (*(_BYTE *)(v7 + 15) & 0xDF) != 0x48
      || (*(_BYTE *)(v7 + 16) & 0xDF) != 0x4F
      || (*(_BYTE *)(v7 + 17) & 0xDF) != 0x43
      || (*(_BYTE *)(v7 + 18) & 0xDF) != 0x4B
      || (*(_BYTE *)(v7 + 19) & 0xDF) != 0x57
      || (*(_BYTE *)(v7 + 20) & 0xDF) != 0x41
      || (*(_BYTE *)(v7 + 21) & 0xDF) != 0x56
      || (*(_BYTE *)(v7 + 22) & 0xDF) != 0x45
      || (*(_BYTE *)(v7 + 23) & 0xDF) != 0xD
      || (*(_BYTE *)(v7 + 24) & 0xDF) != 0x46
      || (*(_BYTE *)(v7 + 25) & 0xDF) != 0x4C
      || (*(_BYTE *)(v7 + 26) & 0xDF) != 0x41
      || (*(_BYTE *)(v7 + 27) & 0xDF) != 0x53)
    {
      return 0;
    }
    v8 = *(unsigned __int8 *)(v7 + 28);
  }
  else
  {
    if ((*(_WORD *)v7 & 0xFFDF) != 0x41
      || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x50
      || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x50
      || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v7 + 8) & 0xFFDF) != 0x49
      || (*(_WORD *)(v7 + 10) & 0xFFDF) != 0x43
      || (*(_WORD *)(v7 + 12) & 0xFFDF) != 0x41
      || (*(_WORD *)(v7 + 14) & 0xFFDF) != 0x54
      || (*(_WORD *)(v7 + 16) & 0xFFDF) != 0x49
      || (*(_WORD *)(v7 + 18) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v7 + 20) & 0xFFDF) != 0x4E
      || (*(_WORD *)(v7 + 22) & 0xFFDF) != 0xF
      || (*(_WORD *)(v7 + 24) & 0xFFDF) != 0x58
      || (*(_WORD *)(v7 + 26) & 0xFFDF) != 0xD
      || (*(_WORD *)(v7 + 28) & 0xFFDF) != 0x53
      || (*(_WORD *)(v7 + 30) & 0xFFDF) != 0x48
      || (*(_WORD *)(v7 + 32) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v7 + 34) & 0xFFDF) != 0x43
      || (*(_WORD *)(v7 + 36) & 0xFFDF) != 0x4B
      || (*(_WORD *)(v7 + 38) & 0xFFDF) != 0x57
      || (*(_WORD *)(v7 + 40) & 0xFFDF) != 0x41
      || (*(_WORD *)(v7 + 42) & 0xFFDF) != 0x56
      || (*(_WORD *)(v7 + 44) & 0xFFDF) != 0x45
      || (*(_WORD *)(v7 + 46) & 0xFFDF) != 0xD
      || (*(_WORD *)(v7 + 48) & 0xFFDF) != 0x46
      || (*(_WORD *)(v7 + 50) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v7 + 52) & 0xFFDF) != 0x41
      || (*(_WORD *)(v7 + 54) & 0xFFDF) != 0x53)
    {
      return 0;
    }
    v8 = *(unsigned __int16 *)(v7 + 56);
  }
  return (v8 & 0xFFFFFFDF) == 0x48;
}

BOOL WebCore::YouTubePluginReplacement::supportsFileExtension(uint64_t a1, uint64_t a2)
{
  int v3;

  if ((_DWORD)a2 != 3)
    return 0;
  if ((a2 & 0xFF00000000) == 0)
  {
    if ((*(_WORD *)a1 & 0xFFDF) == 0x53)
    {
      if ((*(_WORD *)(a1 + 2) & 0xFFDF) == 0x50 && (*(_WORD *)(a1 + 4) & 0xFFDF) == 0x4C)
        return 1;
      if ((*(_WORD *)(a1 + 2) & 0xFFDF) == 0x57)
      {
        v3 = *(unsigned __int16 *)(a1 + 4);
        return (v3 & 0xFFFFFFDF) == 70;
      }
    }
    return 0;
  }
  if ((*(_BYTE *)a1 & 0xDF) != 0x53)
    return 0;
  if ((*(_BYTE *)(a1 + 1) & 0xDF) == 0x50 && (*(_BYTE *)(a1 + 2) & 0xDF) == 0x4C)
    return 1;
  if ((*(_BYTE *)(a1 + 1) & 0xDF) != 0x57)
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 2);
  return (v3 & 0xFFFFFFDF) == 70;
}

uint64_t WebCore::YouTubePluginReplacement::isEnabledBySettings(WebCore::YouTubePluginReplacement *this, const WebCore::Settings *a2)
{
  return (*((_QWORD *)this + 88) >> 38) & 1;
}

uint64_t WebCore::YouTubePluginReplacement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v6 = bmalloc::api::isoAllocate();
    result = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 1, v4, a2, 76, 1);
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_QWORD *)result = off_1E341F9F8;
    *(_DWORD *)(result + 200) = -1;
    *(_BYTE *)(result + 204) &= 0xFCu;
    *(_BYTE *)(result + 208) = 0;
    *(_BYTE *)(result + 212) = 0;
    *(_DWORD *)(result + 240) = 0;
    *(_QWORD *)(result + 216) = 0;
    *(_QWORD *)(result + 224) = 0;
    *(_DWORD *)(result + 20) |= 0x40000u;
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

unsigned int *WebCore::YouTubePluginReplacement::installReplacement(WebCore::YouTubePluginReplacement *this, WebCore::ShadowRoot *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int i;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int j;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WebCore::Document *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  unsigned int *result;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  char v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  char v89;
  WTF::StringImpl *v90;
  _BYTE v91[8];
  WTF::StringImpl *v92;
  char v93;
  WTF::StringImpl *v94[5];

  WebCore::YouTubeEmbedShadowElement::create(*(WebCore::YouTubeEmbedShadowElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40) + 8), (uint64_t *)v94);
  v4 = v94[0];
  v5 = *((_QWORD *)this + 3);
  *((WTF::StringImpl **)this + 3) = v94[0];
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
        v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  WebCore::ContainerNode::appendChild((uint64_t)a2, v4, (uint64_t)v91);
  if (v93)
  {
    v7 = v92;
    v92 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40) + 8);
  v9 = bmalloc::api::isoAllocate();
  v10 = v9;
  *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v9 + 24) = 0x141C00000002;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v8 + 96;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  ++*(_DWORD *)(v8 + 3324);
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v11 = WebCore::HTMLNames::iframeTag;
  if (WebCore::HTMLNames::iframeTag)
    ++*(_DWORD *)WebCore::HTMLNames::iframeTag;
  *(_QWORD *)(v9 + 104) = 0;
  v12 = (uint64_t *)(v9 + 104);
  *(_QWORD *)(v9 + 96) = v11;
  *(_QWORD *)(v9 + 112) = 0;
  *(_DWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 128) = 0;
  *(_BYTE *)(v9 + 136) = 0;
  *(_QWORD *)v9 = off_1E33C09B8;
  *(_QWORD *)(v9 + 144) = 0;
  *(_BYTE *)(v9 + 152) = 0;
  *(_QWORD *)(v9 + 160) = 0;
  v13 = *((_QWORD *)this + 4);
  if (!v13)
    goto LABEL_74;
  v14 = 0;
  v15 = 11517827;
  v16 = *(_DWORD *)(v13 - 8);
  for (i = 12902275; ; i = v14 + v18)
  {
    v18 = i & v16;
    v19 = *(_QWORD *)(v13 + 16 * (i & v16));
    if (v19 != -1)
    {
      if (!v19)
        goto LABEL_33;
      if ((MEMORY[0x19AEA53F4](v19, "width", 5) & 1) != 0)
        break;
    }
    ++v14;
  }
  WTF::AtomStringImpl::add();
  v90 = v94[0];
  v20 = *v12;
  if (!*v12)
    goto LABEL_29;
  v21 = *(_DWORD *)(v20 + 4);
  if ((v21 & 1) == 0)
  {
    v22 = (uint64_t *)(v20 + 32);
    v23 = v21 >> 5;
    if (!v23)
      goto LABEL_29;
LABEL_22:
    v24 = 0;
    while (1)
    {
      v25 = *v22;
      if (*v22 == WebCore::HTMLNames::widthAttr
        || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
        && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
      {
        goto LABEL_30;
      }
      ++v24;
      v22 += 2;
      if (v23 == v24)
        goto LABEL_29;
    }
  }
  v22 = *(uint64_t **)(v20 + 40);
  v23 = *(_DWORD *)(v20 + 52);
  if (v23)
    goto LABEL_22;
LABEL_29:
  v24 = 0xFFFFFFFFLL;
LABEL_30:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, &v90, 0);
  v27 = v90;
  v90 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
LABEL_33:
  v28 = *((_QWORD *)this + 4);
  if (!v28)
    goto LABEL_74;
  v29 = 0;
  v30 = *(_DWORD *)(v28 - 8);
  for (j = 6697833; ; j = v29 + v32)
  {
    v32 = j & v30;
    v33 = *(_QWORD *)(v28 + 16 * v32);
    if (v33 != -1)
    {
      if (!v33)
      {
        v34 = *((_QWORD *)this + 4);
        if (!v34)
          goto LABEL_74;
        v35 = *(unsigned int *)(v34 - 4);
        v36 = v34 + 16 * v35;
        goto LABEL_43;
      }
      if ((MEMORY[0x19AEA53F4](v33, "height", 6) & 1) != 0)
        break;
    }
    ++v29;
  }
  v36 = v28 + 16 * v32;
  v34 = *((_QWORD *)this + 4);
  if (v34)
  {
    v35 = *(unsigned int *)(v34 - 4);
LABEL_43:
    v37 = v34 + 16 * v35;
    goto LABEL_44;
  }
  v37 = 0;
LABEL_44:
  if (v37 != v36)
  {
    WTF::AtomStringImpl::add();
    v90 = v94[0];
    WebCore::Element::setAttribute((WebCore::Element *)v10, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, &v90, 0, &v87, v38);
    if (v89)
    {
      v40 = v88;
      v88 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v39);
        else
          *(_DWORD *)v40 -= 2;
      }
    }
    v41 = v90;
    v90 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v39);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = *v12;
    if (!*v12)
      goto LABEL_66;
    v43 = *(_DWORD *)(v42 + 4);
    if ((v43 & 1) != 0)
    {
      v44 = *(uint64_t **)(v42 + 40);
      v45 = *(_DWORD *)(v42 + 52);
      if (!v45)
      {
LABEL_66:
        v46 = 0xFFFFFFFFLL;
LABEL_67:
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v46, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, (WTF::StringImpl **)(v36 + 8), 0);
        v34 = *((_QWORD *)this + 4);
        goto LABEL_68;
      }
    }
    else
    {
      v44 = (uint64_t *)(v42 + 32);
      v45 = v43 >> 5;
      if (!v45)
        goto LABEL_66;
    }
    v46 = 0;
    while (1)
    {
      v47 = *v44;
      if (*v44 == WebCore::HTMLNames::heightAttr
        || *(_QWORD *)(v47 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
        && *(_QWORD *)(v47 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
      {
        goto LABEL_67;
      }
      ++v46;
      v44 += 2;
      if (v45 == v46)
        goto LABEL_66;
    }
  }
LABEL_68:
  if (!v34)
  {
LABEL_74:
    v52 = 0;
    goto LABEL_75;
  }
  v48 = 0;
  v49 = *(_DWORD *)(v34 - 8);
  while (1)
  {
    v50 = v15 & v49;
    v51 = *(_QWORD *)(v34 + 16 * v50);
    if (v51 != -1)
    {
      if (!v51)
        goto LABEL_74;
      if ((MEMORY[0x19AEA53F4](v51, "src", 3) & 1) != 0)
        break;
    }
    v15 = ++v48 + v50;
  }
  v52 = *(WTF::StringImpl **)(v34 + 16 * v50 + 8);
  if (v52)
    *(_DWORD *)v52 += 2;
LABEL_75:
  v86 = v52;
  v53 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40) + 8);
  WebCore::Document::completeURL(v53, &v86, (uint64_t)v53 + 848, 0, (WTF::URL *)v94);
  WebCore::YouTubePluginReplacement::youTubeURLFromAbsoluteURL((WebCore::YouTubePluginReplacement *)v94, (const WTF::URL *)&v86, (int16x8_t **)&v90);
  v55 = v94[0];
  v94[0] = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v54);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = *v12;
  if (!*v12)
    goto LABEL_90;
  v57 = *(_DWORD *)(v56 + 4);
  if ((v57 & 1) != 0)
  {
    v58 = *(uint64_t **)(v56 + 40);
    v59 = *(_DWORD *)(v56 + 52);
    if (!v59)
    {
LABEL_90:
      v60 = 0xFFFFFFFFLL;
      goto LABEL_91;
    }
  }
  else
  {
    v58 = (uint64_t *)(v56 + 32);
    v59 = v57 >> 5;
    if (!v59)
      goto LABEL_90;
  }
  v60 = 0;
  while (1)
  {
    v61 = *v58;
    if (*v58 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v61 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v61 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    ++v60;
    v58 += 2;
    if (v59 == v60)
      goto LABEL_90;
  }
LABEL_91:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v60, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v90, 0);
  v63 = v90;
  v90 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v62);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = v86;
  v86 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v62);
    else
      *(_DWORD *)v64 -= 2;
  }
  WTF::AtomStringImpl::add();
  v65 = *v12;
  if (!*v12)
    goto LABEL_109;
  v66 = *(_DWORD *)(v65 + 4);
  if ((v66 & 1) != 0)
  {
    v67 = *(uint64_t **)(v65 + 40);
    v68 = *(_DWORD *)(v65 + 52);
    if (!v68)
    {
LABEL_109:
      v69 = 0xFFFFFFFFLL;
      goto LABEL_110;
    }
  }
  else
  {
    v67 = (uint64_t *)(v65 + 32);
    v68 = v66 >> 5;
    if (!v68)
      goto LABEL_109;
  }
  v69 = 0;
  while (1)
  {
    v70 = *v67;
    if (*v67 == WebCore::HTMLNames::frameborderAttr
      || *(_QWORD *)(v70 + 24) == *(_QWORD *)(WebCore::HTMLNames::frameborderAttr + 24)
      && *(_QWORD *)(v70 + 32) == *(_QWORD *)(WebCore::HTMLNames::frameborderAttr + 32))
    {
      break;
    }
    ++v69;
    v67 += 2;
    if (v68 == v69)
      goto LABEL_109;
  }
LABEL_110:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v69, (WebCore::TreeScope *)&WebCore::HTMLNames::frameborderAttr, v94, 0);
  v72 = v94[0];
  v94[0] = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v71);
    else
      *(_DWORD *)v72 -= 2;
  }
  WTF::AtomStringImpl::add();
  v73 = *v12;
  if (!*v12)
    goto LABEL_125;
  v74 = *(_DWORD *)(v73 + 4);
  if ((v74 & 1) != 0)
  {
    v75 = *(uint64_t **)(v73 + 40);
    v76 = *(_DWORD *)(v73 + 52);
    if (!v76)
    {
LABEL_125:
      v77 = 0xFFFFFFFFLL;
      goto LABEL_126;
    }
  }
  else
  {
    v75 = (uint64_t *)(v73 + 32);
    v76 = v74 >> 5;
    if (!v76)
      goto LABEL_125;
  }
  v77 = 0;
  while (1)
  {
    v78 = *v75;
    if (*v75 == WebCore::HTMLNames::scrollingAttr
      || *(_QWORD *)(v78 + 24) == *(_QWORD *)(WebCore::HTMLNames::scrollingAttr + 24)
      && *(_QWORD *)(v78 + 32) == *(_QWORD *)(WebCore::HTMLNames::scrollingAttr + 32))
    {
      break;
    }
    ++v77;
    v75 += 2;
    if (v76 == v77)
      goto LABEL_125;
  }
LABEL_126:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v77, (WebCore::TreeScope *)&WebCore::HTMLNames::scrollingAttr, v94, 0);
  v80 = v94[0];
  v94[0] = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v79);
    else
      *(_DWORD *)v80 -= 2;
  }
  result = (unsigned int *)WebCore::ContainerNode::appendChild(*((_QWORD *)this + 3), (WebCore::Node *)v10, (uint64_t)&v83);
  if (v85)
  {
    result = (unsigned int *)v84;
    v84 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v82);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v10, v82);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::YouTubePluginReplacement::youTubeURLFromAbsoluteURL@<X0>(WebCore::YouTubePluginReplacement *this@<X0>, const WTF::URL *a2@<X1>, int16x8_t **a3@<X8>)
{
  uint64_t result;
  const WTF::URL *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  int16x8_t *v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int16x8_t *v34;
  int v35;
  int16x8_t *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t PathComponent;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char *v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  char *v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl *v63;
  const WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  int k;
  uint64_t v76;
  WTF *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  const WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  const WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int i;
  uint64_t v99;
  WTF *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF::StringImpl **v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  const WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  int m;
  uint64_t v121;
  WTF *v122;
  uint64_t *v123;
  uint64_t v124;
  _BYTE *v125;
  unint64_t v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  WTF::StringImpl **v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  int j;
  uint64_t v134;
  WTF *v135;
  uint64_t *v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  WTF::StringImpl **v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int16x8_t *v149;
  int16x8_t v150;
  int16x8_t *v151;
  int8x16_t v152;
  __int8 *v153;
  int16x8_t v154;
  char *v155;
  uint64_t v156;
  WTF::StringImpl **v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  int16x8_t *v161;
  int16x8_t v162;
  int16x8_t *v163;
  int8x16_t v164;
  int16x8_t *v165;
  char *v166;
  int16x8_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  unint64_t v177;
  int16x8_t *v178;
  uint64_t v179;
  int v180;
  WTF::StringImpl *v181;
  char ii;
  int v183;
  uint64_t v184;
  unsigned int v185;
  int16x8_t *v186;
  int16x8_t *v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  int v201;
  int v202;
  BOOL v203;
  int v204;
  int v205;
  BOOL v206;
  unsigned int v207;
  uint64_t v208;
  _BOOL4 v209;
  _DWORD *v210;
  _BYTE *v211;
  _BYTE *v212;
  size_t v213;
  uint64_t v214;
  int16x8_t *v215;
  __int8 *v216;
  __int8 *v217;
  _BYTE *v218;
  _BYTE *v219;
  size_t v220;
  uint64_t v221;
  char *v222;
  _WORD *v223;
  int8x16_t *v224;
  uint64_t v225;
  WTF::StringImpl *v226;
  uint64_t v227;
  char *v228;
  int8x16_t *v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  int v234;
  uint64_t v235;
  __int128 v236;
  char *v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  char *v241;
  char *v242;
  char *v243;
  __int16 v244;
  char *v245;
  char *v246;
  char *v247;
  __int128 v248;
  int8x16_t v249;
  __int128 v250;
  __int128 v251;
  char *v252;
  char *v253;
  char *v254;
  __int16 v255;
  __int128 v256;
  char *v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  char *v261;
  char *v262;
  char *v263;
  __int16 v264;
  char *v265;
  char *v266;
  char *v267;
  __int128 v268;
  int8x16_t v269;
  __int128 v270;
  __int128 v271;
  char *v272;
  char *v273;
  char *v274;
  __int16 v275;
  uint64_t v276;
  WTF::StringImpl **v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  unsigned __int128 *p_dst;
  unsigned __int128 *v281;
  unsigned __int128 v282;
  unsigned __int128 *v283;
  unsigned __int128 *v284;
  unsigned __int128 *v285;
  const char *v286;
  unsigned __int128 v287;
  unsigned __int128 *v288;
  unsigned __int128 *v289;
  unsigned __int128 v290;
  unsigned __int128 *v291;
  unsigned __int128 *v292;
  unsigned __int128 *v293;
  unsigned __int128 v294;
  char v295;
  char *n;
  char v297;
  char v298;
  char v299;
  uint64_t v300;
  __int8 *__src;
  char v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  uint64_t v306;
  WTF::StringImpl *v307[5];
  WTF::StringImpl *v308;
  unint64_t v309;
  WTF::StringImpl *v310;
  unint64_t v311;
  int16x8_t *__dst;
  unint64_t v313;
  uint64_t v314;
  int8x16x2_t v315;
  int8x16x2_t v316;
  int8x16x2_t v317;
  int8x16x2_t v318;
  int8x16x2_t v319;
  int8x16x2_t v320;
  int8x16x2_t v321;
  int8x16x2_t v322;
  int8x16x2_t v323;
  int8x16x2_t v324;
  int8x16x2_t v325;
  int8x16x2_t v326;

  v314 = *MEMORY[0x1E0C80C00];
  result = WebCore::isYouTubeURL(this, a2);
  if ((result & 1) != 0)
  {
    if (!WebCore::isYouTubeURL(this, v8))
      goto LABEL_403;
    v9 = WTF::URL::host(this);
    if ((_DWORD)v10 == 13)
    {
      if ((v10 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v9 & 0xDF) != 0x4D
          || (*(_BYTE *)(v9 + 1) & 0xDF) != 0xE
          || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x59
          || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x4F
          || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x55
          || (*(_BYTE *)(v9 + 5) & 0xDF) != 0x54
          || (*(_BYTE *)(v9 + 6) & 0xDF) != 0x55
          || (*(_BYTE *)(v9 + 7) & 0xDF) != 0x42
          || (*(_BYTE *)(v9 + 8) & 0xDF) != 0x45
          || (*(_BYTE *)(v9 + 9) & 0xDF) != 0xE
          || (*(_BYTE *)(v9 + 10) & 0xDF) != 0x43
          || (*(_BYTE *)(v9 + 11) & 0xDF) != 0x4F)
        {
          goto LABEL_5;
        }
        v58 = *(unsigned __int8 *)(v9 + 12);
      }
      else
      {
        if ((*(_WORD *)v9 & 0xFFDF) != 0x4D
          || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0xE
          || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x59
          || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x55
          || (*(_WORD *)(v9 + 10) & 0xFFDF) != 0x54
          || (*(_WORD *)(v9 + 12) & 0xFFDF) != 0x55
          || (*(_WORD *)(v9 + 14) & 0xFFDF) != 0x42
          || (*(_WORD *)(v9 + 16) & 0xFFDF) != 0x45
          || (*(_WORD *)(v9 + 18) & 0xFFDF) != 0xE
          || (*(_WORD *)(v9 + 20) & 0xFFDF) != 0x43
          || (*(_WORD *)(v9 + 22) & 0xFFDF) != 0x4F)
        {
          goto LABEL_5;
        }
        v58 = *(unsigned __int16 *)(v9 + 24);
      }
      v11 = (v58 & 0xFFFFFFDF) == 77;
LABEL_6:
      v12 = WTF::URL::path(this);
      v14 = v13;
      v15 = (WTF::StringImpl *)WTF::URL::query(this);
      v17 = v16;
      v18 = (int16x8_t *)WTF::URL::fragmentIdentifier(this);
      __dst = v18;
      v313 = v19;
      if (!v11)
      {
        v21 = (WTF::StringImpl *)v12;
LABEL_33:
        if (v14 != 6)
        {
          if (v14 < 3uLL)
            goto LABEL_403;
          if ((v14 & 0xFF00000000) != 0)
          {
            v37 = *(_BYTE *)v21 & 0xDF;
            if (v14 == 3)
            {
              if (v37 != 15)
                goto LABEL_403;
              v38 = *((_BYTE *)v21 + 1) & 0xDF;
              if (v38 == 86)
                goto LABEL_47;
              goto LABEL_46;
            }
            if (v37 == 15)
            {
              v39 = *((unsigned __int8 *)v21 + 1);
              goto LABEL_42;
            }
LABEL_44:
            if ((*(_BYTE *)v21 & 0xDF) != 0xF)
              goto LABEL_403;
            v38 = *((_BYTE *)v21 + 1) & 0xDF;
LABEL_46:
            if (v38 != 69)
              goto LABEL_403;
LABEL_47:
            v40 = *((unsigned __int8 *)v21 + 2);
            goto LABEL_48;
          }
          if ((*(_WORD *)v21 & 0xFFDF) != 0xF)
            goto LABEL_403;
          v56 = *((unsigned __int16 *)v21 + 1);
LABEL_85:
          v57 = v56 & 0xFFFFFFDF;
          if (v57 != 86 && v57 != 69)
            goto LABEL_403;
          v40 = *((unsigned __int16 *)v21 + 2);
LABEL_48:
          if ((v40 & 0xFFFFFFDF) == 0xF)
            goto LABEL_49;
LABEL_403:
          v307[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v307);
          goto LABEL_404;
        }
        if ((v14 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)v21 & 0xDF) != 0xF)
            goto LABEL_44;
          v39 = *((unsigned __int8 *)v21 + 1);
          if ((v39 & 0xFFFFFFDF) != 0x57
            || (*((_BYTE *)v21 + 2) & 0xDF) != 0x41
            || (*((_BYTE *)v21 + 3) & 0xDF) != 0x54
            || (*((_BYTE *)v21 + 4) & 0xDF) != 0x43
            || (*((_BYTE *)v21 + 5) & 0xDF) != 0x48)
          {
LABEL_42:
            if ((v39 & 0xFFFFFFDF) == 0x56 && (*((_BYTE *)v21 + 2) & 0xDF) == 0xF)
            {
LABEL_49:
              PathComponent = WTF::URL::lastPathComponent(this);
              v43 = (char *)PathComponent;
              v21 = (WTF::StringImpl *)v19;
              v44 = v19 & 0xFF00000000;
              if ((v19 & 0xFF00000000) != 0)
              {
                if (!(_DWORD)v19)
                  goto LABEL_396;
                v45 = 0;
                v46 = 16;
                if ((v19 & 0xFFFFFFF0) == 0)
                  v46 = v19;
                while (*(_BYTE *)(PathComponent + v45) != 38)
                {
                  if (v46 == ++v45)
                  {
                    if (v19 < 0x11uLL)
                      goto LABEL_396;
                    v47 = memchr((void *)(PathComponent + v46), 38, v19 - v46);
                    if (!v47)
                      goto LABEL_396;
LABEL_59:
                    v48 = v47 - v43;
                    goto LABEL_60;
                  }
                }
                v47 = (_BYTE *)(PathComponent + v45);
                goto LABEL_59;
              }
              v27 = v19;
              if (!(_DWORD)v19)
                goto LABEL_396;
              v147 = 2 * v19;
              if (v147 <= -2)
                goto LABEL_347;
              v148 = PathComponent + 2 * v19;
              if ((unint64_t)v147 <= 0x3E)
              {
                v169 = 0;
                while (*(_WORD *)(PathComponent + v169) != 38)
                {
                  v169 += 2;
                  v54 = 1;
                  if (v147 == v169)
                    goto LABEL_397;
                }
                v155 = (char *)(PathComponent + v169);
              }
              else
              {
                v149 = (int16x8_t *)PathComponent;
                if (v19 < 8uLL)
                {
LABEL_344:
                  if ((unint64_t)v149 >= v148)
                    goto LABEL_396;
                  v151 = (int16x8_t *)(v148 - 16);
                  v154.i64[0] = 0x26002600260026;
                  v154.i64[1] = 0x26002600260026;
                  v152 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v148 - 16), v154);
                  v154.i16[0] = vmaxvq_u16((uint16x8_t)v152);
                  if (!v154.i32[0])
                    goto LABEL_396;
                }
                else
                {
                  v150.i64[0] = 0x26002600260026;
                  v150.i64[1] = 0x26002600260026;
                  v151 = (int16x8_t *)PathComponent;
                  while (1)
                  {
                    v152 = (int8x16_t)vceqq_s16(*v151, v150);
                    LOWORD(v42) = vmaxvq_u16((uint16x8_t)v152);
                    if (v42)
                      break;
                    v149 = v151 + 1;
                    v153 = &v151[1].i8[14];
                    ++v151;
                    if ((unint64_t)v153 >= v148)
                      goto LABEL_344;
                  }
                }
                v155 = &v151->i8[2
                               * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v152))];
              }
              if (v155 != (char *)v148)
              {
                v48 = (uint64_t)&v155[-PathComponent] >> 1;
LABEL_60:
                if (v48 != -1)
                {
                  v49 = 0x100000000;
                  v50 = v48 | 0x100000000;
                  if (!v44)
                    v50 = v48;
                  v51 = (_DWORD)v21 - v48;
                  if (v21 <= v48)
                    v50 = (uint64_t)v21;
                  if ((_DWORD)v21)
                    v52 = v43;
                  else
                    v52 = "";
                  if ((_DWORD)v21)
                    v49 = v50;
                  v27 = (v48 + 1);
                  if (v21 <= v27)
                  {
                    BYTE4(v21) = 1;
                  }
                  else
                  {
                    if ((int)v21 - (int)v27 > v51)
                      goto LABEL_72;
                    if ((_DWORD)v27)
                    {
                      v51 = (_DWORD)v21 - v27;
LABEL_72:
                      v53 = v21 - (unint64_t)v27;
                      if (v44)
                      {
                        if (v53 >= v51)
                        {
                          BYTE4(v21) = 1;
                          goto LABEL_78;
                        }
                        goto LABEL_347;
                      }
                      if (v53 >= v51)
                      {
                        v21 = (WTF::StringImpl *)v51;
                        goto LABEL_78;
                      }
LABEL_347:
                      __break(1u);
LABEL_348:
                      v146 = *(unsigned int *)(v27 - 4);
                      v88 = v27 + 16 * v146;
                      goto LABEL_349;
                    }
                  }
LABEL_78:
                  v54 = BYTE4(v21);
                  if (!(_DWORD)v49)
                    goto LABEL_403;
LABEL_398:
                  v174 = v49 & 0xFFFFFFFFFFLL;
                  if (v54)
                    WTF::String::String();
                  else
                    WTF::String::String();
                  v73 = v307[0];
                  v175 = *MEMORY[0x1E0CBF738];
                  if (*MEMORY[0x1E0CBF738])
                  {
                    v176 = *(WTF::StringImpl **)(v175 + 8);
                    v177 = *(unsigned int *)(v175 + 4) | ((unint64_t)((*(_DWORD *)(v175 + 16) >> 2) & 1) << 32);
                  }
                  else
                  {
                    v176 = 0;
                    v177 = 0x100000000;
                  }
                  WebCore::createYouTubeURL((uint64_t)v307, v52, v174, v176, v177);
                  goto LABEL_405;
                }
              }
LABEL_396:
              v54 = 1;
LABEL_397:
              v49 = (uint64_t)v21;
              v52 = v43;
              if (!(_DWORD)v21)
                goto LABEL_403;
              goto LABEL_398;
            }
            goto LABEL_44;
          }
        }
        else
        {
          if ((*(_WORD *)v21 & 0xFFDF) != 0xF)
            goto LABEL_403;
          v56 = *((unsigned __int16 *)v21 + 1);
          if ((v56 & 0xFFFFFFDF) != 0x57
            || (*((_WORD *)v21 + 2) & 0xFFDF) != 0x41
            || (*((_WORD *)v21 + 3) & 0xFFDF) != 0x54
            || (*((_WORD *)v21 + 4) & 0xFFDF) != 0x43
            || (*((_WORD *)v21 + 5) & 0xFFDF) != 0x48)
          {
            goto LABEL_85;
          }
        }
        if (!(_DWORD)v17)
        {
LABEL_161:
          if (!WTF::StringView::startsWith() || v313 < 2)
            goto LABEL_403;
          v27 = v313 - 1;
          v81 = v27;
          if (BYTE4(v313))
          {
            if (v27 < v27)
              goto LABEL_347;
            v82 = (WTF::StringImpl *)&__dst->i8[1];
            v81 = v27 | 0x100000000;
          }
          else
          {
            if (v27 < v27)
              goto LABEL_347;
            v82 = (WTF::StringImpl *)&__dst->i16[1];
          }
          if ((_DWORD)v81)
          {
            WebCore::queryKeysAndValues((WTF::StringImpl *)&v310, v82, v81 | v17 & 0xFFFFFF0000000000);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v21 = v307[0];
            v84 = v310;
            if (!v310)
            {
              v88 = 0;
              v27 = 0;
              goto LABEL_189;
            }
            v85 = *((_DWORD *)v310 - 2);
            v86 = *((_DWORD *)v307[0] + 4);
            if (v86 < 0x100)
              v87 = WTF::StringImpl::hashSlowCase(v307[0]);
            else
              v87 = v86 >> 8;
            for (i = 0; ; v87 = i + v99)
            {
              v99 = v87 & v85;
              v100 = (WTF *)*((_QWORD *)v84 + 2 * v99);
              if (v100 != (WTF *)-1)
              {
                if (!v100)
                {
                  v27 = (unint64_t)v310;
                  if (v310)
                    goto LABEL_348;
                  v88 = 0;
                  goto LABEL_189;
                }
                if ((WTF::equal(v100, v307[0], v83) & 1) != 0)
                  break;
              }
              ++i;
            }
            v88 = (unint64_t)v84 + 16 * v99;
            v27 = (unint64_t)v310;
            if (!v310)
              goto LABEL_189;
            v146 = *((unsigned int *)v310 - 1);
LABEL_349:
            v27 += 16 * v146;
LABEL_189:
            v101 = (uint64_t *)MEMORY[0x1E0CBF738];
            if (v88 == v27)
              v102 = (uint64_t *)MEMORY[0x1E0CBF738];
            else
              v102 = (uint64_t *)(v88 + 8);
            v103 = *v102;
            if (*v102)
              *(_DWORD *)v103 += 2;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
              {
                WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v19);
                if (!v103)
                  goto LABEL_198;
                goto LABEL_242;
              }
              *(_DWORD *)v21 -= 2;
            }
            if (!v103)
              goto LABEL_198;
LABEL_242:
            if (*(_DWORD *)(v103 + 4))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v113 = v307[0];
              v114 = v310;
              if (v310)
              {
                v115 = *((_DWORD *)v310 - 2);
                v116 = *((_DWORD *)v307[0] + 4);
                if (v116 < 0x100)
                  v117 = WTF::StringImpl::hashSlowCase(v307[0]);
                else
                  v117 = v116 >> 8;
                for (j = 0; ; v117 = j + v134)
                {
                  v134 = v117 & v115;
                  v135 = (WTF *)*((_QWORD *)v114 + 2 * v134);
                  if (v135 != (WTF *)-1)
                  {
                    if (!v135)
                    {
                      v119 = v310;
                      if (!v310)
                      {
                        v118 = 0;
                        goto LABEL_298;
                      }
                      v170 = *((unsigned int *)v310 - 1);
                      v118 = (WTF::StringImpl *)((char *)v310 + 16 * v170);
                      goto LABEL_614;
                    }
                    if ((WTF::equal(v135, v307[0], v112) & 1) != 0)
                      break;
                  }
                  ++j;
                }
                v118 = (WTF::StringImpl *)((char *)v114 + 16 * v134);
                v119 = v310;
                if (!v310)
                  goto LABEL_298;
                v170 = *((unsigned int *)v310 - 1);
LABEL_614:
                v119 = (WTF::StringImpl *)((char *)v119 + 16 * v170);
              }
              else
              {
                v118 = 0;
                v119 = 0;
              }
LABEL_298:
              if (v118 == v119)
                v136 = v101;
              else
                v136 = (uint64_t *)((char *)v118 + 8);
              v137 = *v136;
              if (*v136)
                *(_DWORD *)v137 += 2;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, v111);
                else
                  *(_DWORD *)v113 -= 2;
              }
              v138 = *(_BYTE **)(v103 + 8);
              v139 = *(unsigned int *)(v103 + 4);
              v140 = (unint64_t)((*(_DWORD *)(v103 + 16) >> 2) & 1) << 32;
              if (v137)
              {
                WebCore::createYouTubeURL((uint64_t)v307, v138, v140 | v139, *(WTF::StringImpl **)(v137 + 8), *(unsigned int *)(v137 + 4) | ((unint64_t)((*(_DWORD *)(v137 + 16) >> 2) & 1) << 32));
                if (*(_DWORD *)v137 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v137, v72);
                else
                  *(_DWORD *)v137 -= 2;
              }
              else
              {
                WebCore::createYouTubeURL((uint64_t)v307, v138, v140 | v139, 0, 0x100000000);
              }
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v103, v72);
              else
                *(_DWORD *)v103 -= 2;
              v128 = v310;
              if (!v310)
                goto LABEL_404;
              v141 = *((unsigned int *)v310 - 1);
              if ((_DWORD)v141)
              {
                v142 = (WTF::StringImpl **)v310;
                do
                {
                  v143 = *v142;
                  if (*v142 != (WTF::StringImpl *)-1)
                  {
                    v144 = v142[1];
                    v142[1] = 0;
                    if (v144)
                    {
                      if (*(_DWORD *)v144 == 2)
                      {
                        WTF::StringImpl::destroy(v144, v72);
                        v143 = *v142;
                      }
                      else
                      {
                        *(_DWORD *)v144 -= 2;
                      }
                    }
                    *v142 = 0;
                    if (v143)
                    {
                      if (*(_DWORD *)v143 == 2)
                        WTF::StringImpl::destroy(v143, v72);
                      else
                        *(_DWORD *)v143 -= 2;
                    }
                  }
                  v142 += 2;
                  --v141;
                }
                while (v141);
              }
              goto LABEL_384;
            }
            if (*(_DWORD *)v103 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v103, (WTF::StringImpl *)v19);
            else
              *(_DWORD *)v103 -= 2;
LABEL_198:
            v104 = v310;
            if (v310)
            {
              v105 = *((unsigned int *)v310 - 1);
              if ((_DWORD)v105)
              {
                v106 = (WTF::StringImpl **)v310;
                do
                {
                  v107 = *v106;
                  if (*v106 != (WTF::StringImpl *)-1)
                  {
                    v108 = v106[1];
                    v106[1] = 0;
                    if (v108)
                    {
                      if (*(_DWORD *)v108 == 2)
                      {
                        WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v19);
                        v107 = *v106;
                      }
                      else
                      {
                        *(_DWORD *)v108 -= 2;
                      }
                    }
                    *v106 = 0;
                    if (v107)
                    {
                      if (*(_DWORD *)v107 == 2)
                        WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v107 -= 2;
                    }
                  }
                  v106 += 2;
                  --v105;
                }
                while (v105);
              }
              WTF::fastFree((WTF::StringImpl *)((char *)v104 - 16), (void *)v19);
            }
            goto LABEL_403;
          }
          goto LABEL_403;
        }
        WebCore::queryKeysAndValues((WTF::StringImpl *)&v310, v15, v17);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v65 = v307[0];
        v66 = v310;
        if (v310)
        {
          v67 = *((_DWORD *)v310 - 2);
          v68 = *((_DWORD *)v307[0] + 4);
          if (v68 < 0x100)
            v69 = WTF::StringImpl::hashSlowCase(v307[0]);
          else
            v69 = v68 >> 8;
          for (k = 0; ; v69 = k + v76)
          {
            v76 = v69 & v67;
            v77 = (WTF *)*((_QWORD *)v66 + 2 * v76);
            if (v77 != (WTF *)-1)
            {
              if (!v77)
              {
                v71 = v310;
                if (!v310)
                {
                  v70 = 0;
                  goto LABEL_151;
                }
                v145 = *((unsigned int *)v310 - 1);
                v70 = (WTF::StringImpl *)((char *)v310 + 16 * v145);
                goto LABEL_334;
              }
              if ((WTF::equal(v77, v307[0], v64) & 1) != 0)
                break;
            }
            ++k;
          }
          v70 = (WTF::StringImpl *)((char *)v66 + 16 * v76);
          v71 = v310;
          if (!v310)
            goto LABEL_151;
          v145 = *((unsigned int *)v310 - 1);
LABEL_334:
          v71 = (WTF::StringImpl *)((char *)v71 + 16 * v145);
        }
        else
        {
          v70 = 0;
          v71 = 0;
        }
LABEL_151:
        v78 = (uint64_t *)MEMORY[0x1E0CBF738];
        if (v70 == v71)
          v79 = (uint64_t *)MEMORY[0x1E0CBF738];
        else
          v79 = (uint64_t *)((char *)v70 + 8);
        v80 = *v79;
        if (*v79)
          *(_DWORD *)v80 += 2;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
          {
            WTF::StringImpl::destroy(v65, v63);
            if (!v80)
            {
LABEL_160:
              v21 = v310;
              if (v310)
              {
                v156 = *((unsigned int *)v310 - 1);
                if ((_DWORD)v156)
                {
                  v157 = (WTF::StringImpl **)v310;
                  do
                  {
                    v158 = *v157;
                    if (*v157 != (WTF::StringImpl *)-1)
                    {
                      v159 = v157[1];
                      v157[1] = 0;
                      if (v159)
                      {
                        if (*(_DWORD *)v159 == 2)
                        {
                          WTF::StringImpl::destroy(v159, v63);
                          v158 = *v157;
                        }
                        else
                        {
                          *(_DWORD *)v159 -= 2;
                        }
                      }
                      *v157 = 0;
                      if (v158)
                      {
                        if (*(_DWORD *)v158 == 2)
                          WTF::StringImpl::destroy(v158, v63);
                        else
                          *(_DWORD *)v158 -= 2;
                      }
                    }
                    v157 += 2;
                    --v156;
                  }
                  while (v156);
                }
                WTF::fastFree((WTF::StringImpl *)((char *)v21 - 16), v63);
              }
              goto LABEL_161;
            }
LABEL_174:
            if (*(_DWORD *)(v80 + 4))
            {
              v89 = (WTF::StringImpl *)WTF::URL::fragmentIdentifier(this);
              WebCore::queryKeysAndValues((WTF::StringImpl *)&v308, v89, v90);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v93 = v307[0];
              v94 = v308;
              if (v308)
              {
                v95 = *((_DWORD *)v308 - 2);
                v96 = *((_DWORD *)v307[0] + 4);
                if (v96 < 0x100)
                  v97 = WTF::StringImpl::hashSlowCase(v307[0]);
                else
                  v97 = v96 >> 8;
                for (m = 0; ; v97 = m + v121)
                {
                  v121 = v97 & v95;
                  v122 = (WTF *)*((_QWORD *)v94 + 2 * v121);
                  if (v122 != (WTF *)-1)
                  {
                    if (!v122)
                    {
                      v110 = v308;
                      if (!v308)
                      {
                        v109 = 0;
                        goto LABEL_258;
                      }
                      v160 = *((unsigned int *)v308 - 1);
                      v109 = (WTF::StringImpl *)((char *)v308 + 16 * v160);
                      goto LABEL_382;
                    }
                    if ((WTF::equal(v122, v307[0], v92) & 1) != 0)
                      break;
                  }
                  ++m;
                }
                v109 = (WTF::StringImpl *)((char *)v94 + 16 * v121);
                v110 = v308;
                if (!v308)
                  goto LABEL_258;
                v160 = *((unsigned int *)v308 - 1);
LABEL_382:
                v110 = (WTF::StringImpl *)((char *)v110 + 16 * v160);
              }
              else
              {
                v109 = 0;
                v110 = 0;
              }
LABEL_258:
              if (v109 == v110)
                v123 = v78;
              else
                v123 = (uint64_t *)((char *)v109 + 8);
              v124 = *v123;
              if (*v123)
                *(_DWORD *)v124 += 2;
              if (v93)
              {
                if (*(_DWORD *)v93 == 2)
                  WTF::StringImpl::destroy(v93, v91);
                else
                  *(_DWORD *)v93 -= 2;
              }
              v125 = *(_BYTE **)(v80 + 8);
              v126 = *(unsigned int *)(v80 + 4) | ((((unint64_t)*(unsigned int *)(v80 + 16) >> 2) & 1) << 32);
              if (v124)
              {
                WebCore::createYouTubeURL((uint64_t)v307, v125, v126, *(WTF::StringImpl **)(v124 + 8), *(unsigned int *)(v124 + 4) | ((unint64_t)((*(_DWORD *)(v124 + 16) >> 2) & 1) << 32));
                if (*(_DWORD *)v124 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v124, v72);
                else
                  *(_DWORD *)v124 -= 2;
              }
              else
              {
                WebCore::createYouTubeURL((uint64_t)v307, v125, v126, 0, 0x100000000);
              }
              v127 = v308;
              if (v308)
              {
                v276 = *((unsigned int *)v308 - 1);
                if ((_DWORD)v276)
                {
                  v277 = (WTF::StringImpl **)v308;
                  do
                  {
                    v278 = *v277;
                    if (*v277 != (WTF::StringImpl *)-1)
                    {
                      v279 = v277[1];
                      v277[1] = 0;
                      if (v279)
                      {
                        if (*(_DWORD *)v279 == 2)
                        {
                          WTF::StringImpl::destroy(v279, v72);
                          v278 = *v277;
                        }
                        else
                        {
                          *(_DWORD *)v279 -= 2;
                        }
                      }
                      *v277 = 0;
                      if (v278)
                      {
                        if (*(_DWORD *)v278 == 2)
                          WTF::StringImpl::destroy(v278, v72);
                        else
                          *(_DWORD *)v278 -= 2;
                      }
                    }
                    v277 += 2;
                    --v276;
                  }
                  while (v276);
                }
                WTF::fastFree((WTF::StringImpl *)((char *)v127 - 16), v72);
              }
              if (*(_DWORD *)v80 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v80, v72);
              else
                *(_DWORD *)v80 -= 2;
              v128 = v310;
              if (!v310)
                goto LABEL_404;
              v129 = *((unsigned int *)v310 - 1);
              if ((_DWORD)v129)
              {
                v130 = (WTF::StringImpl **)v310;
                do
                {
                  v131 = *v130;
                  if (*v130 != (WTF::StringImpl *)-1)
                  {
                    v132 = v130[1];
                    v130[1] = 0;
                    if (v132)
                    {
                      if (*(_DWORD *)v132 == 2)
                      {
                        WTF::StringImpl::destroy(v132, v72);
                        v131 = *v130;
                      }
                      else
                      {
                        *(_DWORD *)v132 -= 2;
                      }
                    }
                    *v130 = 0;
                    if (v131)
                    {
                      if (*(_DWORD *)v131 == 2)
                        WTF::StringImpl::destroy(v131, v72);
                      else
                        *(_DWORD *)v131 -= 2;
                    }
                  }
                  v130 += 2;
                  --v129;
                }
                while (v129);
              }
LABEL_384:
              WTF::fastFree((WTF::StringImpl *)((char *)v128 - 16), v72);
LABEL_404:
              v73 = 0;
LABEL_405:
              v74 = 1;
              goto LABEL_406;
            }
            if (*(_DWORD *)v80 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v80, v63);
            else
              *(_DWORD *)v80 -= 2;
            goto LABEL_160;
          }
          *(_DWORD *)v65 -= 2;
        }
        if (!v80)
          goto LABEL_160;
        goto LABEL_174;
      }
      v21 = (WTF::StringImpl *)v18;
      v22 = v19;
      v23 = v19 & 0xFF00000000;
      if ((v19 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v19)
        {
          v24 = 16;
          if ((v19 & 0xFFFFFFF0) == 0)
            v24 = v19;
          v25 = v24;
          do
          {
            if (v18->i8[0] == 63)
              goto LABEL_16;
            v18 = (int16x8_t *)((char *)v18 + 1);
            --v25;
          }
          while (v25);
          if (v19 >= 0x11)
          {
            v18 = (int16x8_t *)memchr((char *)v21 + v24, 63, v19 - v24);
            if (v18)
            {
LABEL_16:
              v26 = (char *)v18 - (char *)v21;
              goto LABEL_17;
            }
          }
        }
      }
      else if ((_DWORD)v19)
      {
        v161 = (int16x8_t *)((char *)v18 + 2 * v19);
        if (v19 <= 0x1F)
        {
          v171 = 2 * v19;
          v168 = (char *)v18;
          while (*(_WORD *)v168 != 63)
          {
            v168 += 2;
            v171 -= 2;
            if (!v171)
              goto LABEL_388;
          }
LABEL_374:
          if (v168 != (char *)v161)
          {
            v26 = (v168 - (char *)v18) >> 1;
LABEL_17:
            if (v26 != -1)
            {
              v27 = 0x100000000;
              v28 = "";
              v29 = v26;
              if (v23)
                v29 = v26 | 0x100000000;
              if (v22 <= v26)
                v29 = v22;
              if ((_DWORD)v22)
              {
                v28 = (const char *)v21;
                v27 = v29;
              }
              v30 = (v26 + 1);
              v31 = (v22 - v30);
              if (v22 <= v30)
              {
                v22 = 0x100000000;
                v15 = (WTF::StringImpl *)"";
              }
              else
              {
                v15 = v21;
                if ((_DWORD)v30)
                {
                  v55 = v22 - (unint64_t)v30;
                  if (v23)
                  {
                    if (v55 < v31)
                      goto LABEL_347;
                    v15 = (WTF::StringImpl *)((char *)v21 + v30);
                    v22 = v31 | 0x100000000;
                  }
                  else
                  {
                    if (v55 < v31)
                      goto LABEL_347;
                    v15 = (WTF::StringImpl *)((char *)v21 + 2 * v30);
                    v22 = (v22 - v30);
                  }
                }
              }
              v14 = v14 & 0xFFFFFF0000000000 | v27 & 0xFFFFFFFFFFLL;
              v17 = v17 & 0xFFFFFF0000000000 | v22 & 0xFFFFFFFFFFLL;
              v32 = *MEMORY[0x1E0CBF738];
              v21 = (WTF::StringImpl *)v28;
              if (!*MEMORY[0x1E0CBF738])
                goto LABEL_391;
              goto LABEL_27;
            }
          }
        }
        else
        {
          v162.i64[0] = 0x3F003F003F003FLL;
          v162.i64[1] = 0x3F003F003F003FLL;
          v163 = v18;
          do
          {
            v164 = (int8x16_t)vceqq_s16(*v163, v162);
            LOWORD(v20) = vmaxvq_u16((uint16x8_t)v164);
            if (v20)
              goto LABEL_373;
            v165 = v163 + 1;
            v166 = &v163[1].i8[14];
            ++v163;
          }
          while (v166 < (char *)v161);
          if (v165 < v161)
          {
            v167.i64[0] = 0x3F003F003F003FLL;
            v167.i64[1] = 0x3F003F003F003FLL;
            v164 = (int8x16_t)vceqq_s16(v161[-1], v167);
            v167.i16[0] = vmaxvq_u16((uint16x8_t)v164);
            if (v167.i32[0])
            {
              v163 = v161 - 1;
LABEL_373:
              v168 = &v163->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v164))];
              goto LABEL_374;
            }
          }
        }
      }
LABEL_388:
      v14 = v14 & 0xFFFFFF0000000000 | v22 & 0xFFFFFFFFFFLL;
      v32 = *MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        v15 = *(WTF::StringImpl **)(v32 + 8);
        v172 = *(_DWORD *)(v32 + 4);
        v173 = ((unint64_t)*(unsigned int *)(v32 + 16) >> 2) & 1;
      }
      else
      {
        v15 = 0;
        v172 = 0;
        v173 = 1;
      }
      v17 = v17 & 0xFFFFFF0000000000 | v172 | (v173 << 32);
      if (!v32)
      {
LABEL_391:
        v34 = 0;
        LOBYTE(v35) = 1;
        goto LABEL_28;
      }
LABEL_27:
      v33 = *(unsigned __int8 *)(v32 + 16);
      v34 = *(int16x8_t **)(v32 + 8);
      LODWORD(v32) = *(_DWORD *)(v32 + 4);
      v35 = (v33 >> 2) & 1;
LABEL_28:
      __dst = v34;
      LODWORD(v313) = v32;
      BYTE4(v313) = v35;
      goto LABEL_33;
    }
    if ((_DWORD)v10 != 8)
      goto LABEL_5;
    if ((v10 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) != 0x59
        || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x55
        || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x55
        || (*(_BYTE *)(v9 + 5) & 0xDF) != 0xE
        || (*(_BYTE *)(v9 + 6) & 0xDF) != 0x42)
      {
        goto LABEL_5;
      }
      v59 = *(unsigned __int8 *)(v9 + 7);
    }
    else
    {
      if ((*(_WORD *)v9 & 0xFFDF) != 0x59
        || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x55
        || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x55
        || (*(_WORD *)(v9 + 10) & 0xFFDF) != 0xE
        || (*(_WORD *)(v9 + 12) & 0xFFDF) != 0x42)
      {
        goto LABEL_5;
      }
      v59 = *(unsigned __int16 *)(v9 + 14);
    }
    if ((v59 & 0xFFFFFFDF) != 0x45)
    {
LABEL_5:
      v11 = 0;
      goto LABEL_6;
    }
    v60 = (char *)WTF::URL::lastPathComponent(this);
    if ((_DWORD)v61)
    {
      if (v60 == "/" || v61 != 1)
      {
        if (v60 != "/" || v61 != 1)
        {
LABEL_140:
          WebCore::createYouTubeURL((uint64_t)v307, v60, v61, 0, 0x100000000);
          goto LABEL_139;
        }
      }
      else
      {
        if ((v61 & 0xFF00000000) != 0)
          v62 = *v60;
        else
          v62 = *(unsigned __int16 *)v60;
        if (v62 != 47)
          goto LABEL_140;
      }
    }
    v307[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v307);
LABEL_139:
    v73 = 0;
    v74 = 0;
LABEL_406:
    result = (uint64_t)v307[0];
    if (!v307[0] || !*((_DWORD *)v307[0] + 1))
    {
      v178 = *(int16x8_t **)a2;
      if (*(_QWORD *)a2)
        v178->i32[0] += 2;
      *a3 = v178;
LABEL_410:
      v307[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v72);
          if (!v73)
            return result;
          goto LABEL_414;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v73)
        return result;
LABEL_414:
      if (*(_DWORD *)v73 == 2)
        return WTF::StringImpl::destroy(v73, v72);
      *(_DWORD *)v73 -= 2;
      return result;
    }
    v305 = WTF::URL::path(this);
    v306 = v179;
    WTF::URL::protocol((WTF::URL *)v307);
    v181 = v307[0];
    if (v307[0])
    {
      if (v180 == -1 && (*((_DWORD *)v307[0] + 1) & 0x80000000) == 0)
      {
        *(_DWORD *)v307[0] += 2;
LABEL_422:
        ii = 0;
        goto LABEL_423;
      }
      WTF::StringImpl::substring(v307[0]);
      v181 = (WTF::StringImpl *)__dst;
      if (__dst)
        goto LABEL_422;
      ii = 1;
    }
    else
    {
      ii = 1;
    }
LABEL_423:
    if (WTF::StringView::find() != -1)
    {
      __dst = 0;
      LODWORD(v313) = 0;
      LOBYTE(v183) = 1;
      BYTE4(v313) = 1;
      v184 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v185 = *(unsigned __int8 *)(v184 + 16);
        v186 = *(int16x8_t **)(v184 + 8);
        LODWORD(v184) = *(_DWORD *)(v184 + 4);
        __dst = v186;
        v183 = (v185 >> 2) & 1;
      }
      LODWORD(v313) = v184;
      BYTE4(v313) = v183;
      v188 = WTF::StringView::find();
      goto LABEL_435;
    }
    if ((_DWORD)v306 == 6)
    {
      if ((v306 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v305 & 0xDF) != 0xF
          || (*(_BYTE *)(v305 + 1) & 0xDF) != 0x57
          || (*(_BYTE *)(v305 + 2) & 0xDF) != 0x41
          || (*(_BYTE *)(v305 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v305 + 4) & 0xDF) != 0x43)
        {
          goto LABEL_431;
        }
        v234 = *(unsigned __int8 *)(v305 + 5);
      }
      else
      {
        if ((*(_WORD *)v305 & 0xFFDF) != 0xF
          || (*(_WORD *)(v305 + 2) & 0xFFDF) != 0x57
          || (*(_WORD *)(v305 + 4) & 0xFFDF) != 0x41
          || (*(_WORD *)(v305 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v305 + 8) & 0xFFDF) != 0x43)
        {
          goto LABEL_431;
        }
        v234 = *(unsigned __int16 *)(v305 + 10);
      }
      if ((v234 & 0xFFFFFFDF) == 0x48)
      {
        if (!*(_QWORD *)a2)
          goto LABEL_533;
        v188 = WTF::StringImpl::find();
LABEL_435:
        v189 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v190 = *(unsigned int *)(v189 + 4);
          if ((_DWORD)v190)
          {
            v191 = *(const char **)(v189 + 8);
            v192 = (*(_DWORD *)(v189 + 16) >> 2) & 1;
            if (v190 <= v188)
              v193 = v190 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v192 & 1) << 32);
            else
              v193 = (v192 << 32) | v188;
LABEL_440:
            v194 = WTF::URL::query(this);
            v196 = v195;
            if ((_DWORD)v195)
            {
              v304 = (WTF::StringImpl *)v194;
            }
            else
            {
              if (v73)
              {
                v304 = (WTF::StringImpl *)*((_QWORD *)v73 + 1);
                v197 = *((unsigned int *)v73 + 1);
                v198 = (unint64_t)((*((_DWORD *)v73 + 4) >> 2) & 1) << 32;
              }
              else
              {
                v304 = 0;
                v197 = 0;
                v198 = 0x100000000;
              }
              v196 = v197 | v198 | v195 & 0xFFFFFF0000000000;
            }
            if ((ii & 1) == 0)
              *(_DWORD *)v181 += 2;
            if ((_DWORD)v196)
              v199 = "?";
            else
              v199 = "";
            v200 = 1;
            if ((_DWORD)v196)
              v200 = 2;
            if (v74)
              v72 = (WTF::StringImpl *)v191;
            else
              v72 = (WTF::StringImpl *)"http://www.youtube.com";
            if (!v74)
              v193 = 0x100000016;
            if ((ii & 1) == 0)
              *(_DWORD *)v181 += 2;
            v300 = v200 - 1;
            if ((unint64_t)(v200 - 1) >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x1954ECD9CLL);
            }
            if (v181)
            {
              v201 = *((_DWORD *)v181 + 1);
              if ((v196 & 0x80000000) != 0)
                goto LABEL_522;
            }
            else
            {
              v201 = 0;
              if ((v196 & 0x80000000) != 0)
                goto LABEL_522;
            }
            v202 = v300 + v196;
            if (!__OFADD__((_DWORD)v300, (_DWORD)v196) && (v201 & 0x80000000) == 0)
            {
              v203 = __OFADD__(v201, v202);
              v204 = v201 + v202;
              if (!v203)
              {
                v203 = __OFADD__(v204, 7);
                v205 = v204 + 7;
                v206 = v203;
                if ((v193 & 0x80000000) == 0 && !v206)
                {
                  v207 = v193 + v205;
                  if (!__OFADD__((_DWORD)v193, v205))
                  {
                    v208 = v193 & 0x100000000;
                    v303 = v300;
                    v209 = (v193 & 0x100000000) != 0
                        && (!v181 || (*((_BYTE *)v181 + 16) & 4) != 0)
                        && (v196 & 0xFF00000000) != 0;
                    if (v207 <= 0x3F)
                    {
                      if (v209)
                      {
                        if (v208)
                        {
                          if ((_DWORD)v193)
                          {
                            if ((_DWORD)v193 == 1)
                              LOBYTE(__dst) = *(_BYTE *)v72;
                            else
                              memcpy(&__dst, v72, v193);
                          }
                        }
                        else
                        {
                          p_dst = (unsigned __int128 *)&__dst;
                          if (v193 < 0x10)
                          {
                            v281 = (unsigned __int128 *)&__dst;
                          }
                          else
                          {
                            v281 = (unsigned __int128 *)((char *)&__dst + (v193 & 0xFFFFFFF0));
                            do
                            {
                              v282 = (unsigned __int128)vld2q_s8((const char *)v72);
                              v72 = (WTF::StringImpl *)((char *)v72 + 32);
                              *p_dst++ = v282;
                            }
                            while (p_dst != v281);
                          }
                          while (v281 != (unsigned __int128 *)((char *)&__dst + v193))
                          {
                            v295 = *(_BYTE *)v72;
                            v72 = (WTF::StringImpl *)((char *)v72 + 2);
                            *(_BYTE *)v281 = v295;
                            v281 = (unsigned __int128 *)((char *)v281 + 1);
                          }
                        }
                        v210 = (_DWORD *)((char *)&__dst + v193);
                        *(_DWORD *)((char *)v210 + 3) = 795108706;
                        *v210 = 1651336495;
                        v211 = (char *)v210 + 7;
                        if (v181)
                        {
                          v212 = (_BYTE *)*((_QWORD *)v181 + 1);
                          v213 = *((unsigned int *)v181 + 1);
                          if ((*((_BYTE *)v181 + 16) & 4) != 0)
                          {
                            if ((_DWORD)v213)
                            {
                              if ((_DWORD)v213 == 1)
                                *v211 = *v212;
                              else
                                memcpy(v211, v212, v213);
                            }
                          }
                          else
                          {
                            if (v213 < 0x10)
                            {
                              v288 = (unsigned __int128 *)((char *)v210 + 7);
                            }
                            else
                            {
                              v288 = (unsigned __int128 *)&v211[v213 & 0xFFFFFFF0];
                              v289 = (unsigned __int128 *)((char *)v210 + 7);
                              do
                              {
                                v290 = (unsigned __int128)vld2q_s8(v212);
                                v212 += 32;
                                *v289++ = v290;
                              }
                              while (v289 != v288);
                            }
                            while (v288 != (unsigned __int128 *)&v211[v213])
                            {
                              v298 = *v212;
                              v212 += 2;
                              *(_BYTE *)v288 = v298;
                              v288 = (unsigned __int128 *)((char *)v288 + 1);
                            }
                          }
                          v214 = *((unsigned int *)v181 + 1);
                        }
                        else
                        {
                          v214 = 0;
                        }
                        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(&v211[v214], v199, v303, v304, v196);
                        WTF::AtomStringImpl::add();
                      }
                      else
                      {
                        v308 = v72;
                        v309 = v193;
                        WTF::StringView::getCharacters<char16_t>(&v308, (char *)&__dst);
                        v222 = (char *)&__dst + 2 * v309;
                        *(_QWORD *)v222 = 0x62006D0065002FLL;
                        *((_DWORD *)v222 + 2) = 6553701;
                        *((_WORD *)v222 + 6) = 47;
                        v223 = v222 + 14;
                        if (v181)
                        {
                          v224 = (int8x16_t *)*((_QWORD *)v181 + 1);
                          v225 = *((unsigned int *)v181 + 1);
                          if ((*((_BYTE *)v181 + 16) & 4) != 0)
                          {
                            if (v225 >= 0x40)
                            {
                              v231 = (char *)&v223[v225 & 0xFFFFFFC0];
                              v236 = 0uLL;
                              v237 = v222 + 14;
                              do
                              {
                                v315.val[0] = *v224;
                                v238 = v224[1];
                                v319.val[0] = v224[2];
                                v239 = v224[3];
                                v224 += 4;
                                v240 = v239;
                                v319.val[1] = 0uLL;
                                v323.val[0] = v238;
                                v315.val[1] = 0uLL;
                                v241 = v237;
                                vst2q_s8(v241, v315);
                                v241 += 32;
                                v323.val[1] = 0uLL;
                                vst2q_s8(v241, v323);
                                v242 = v237 + 64;
                                vst2q_s8(v242, v319);
                                v243 = v237 + 96;
                                vst2q_s8(v243, *(int8x16x2_t *)(&v236 - 1));
                                v237 += 128;
                              }
                              while (v237 != v231);
                            }
                            else
                            {
                              v231 = v222 + 14;
                            }
                            while (v231 != (char *)&v223[v225])
                            {
                              v244 = v224->u8[0];
                              v224 = (int8x16_t *)((char *)v224 + 1);
                              *(_WORD *)v231 = v244;
                              v231 += 2;
                            }
                          }
                          else if ((_DWORD)v225 == 1)
                          {
                            *v223 = v224->i16[0];
                          }
                          else if ((_DWORD)v225)
                          {
                            memcpy(v223, v224, 2 * v225);
                          }
                        }
                        else
                        {
                          v225 = 0;
                        }
                        v245 = (char *)&v223[v225];
                        v246 = &v245[2 * v303];
                        if ((v303 & 0x7FFFFFC0) != 0)
                        {
                          v247 = &v245[2 * (v303 & 0x7FFFFFC0)];
                          v248 = 0uLL;
                          do
                          {
                            v316.val[0] = *(int8x16_t *)v199;
                            v249 = *((int8x16_t *)v199 + 1);
                            v320.val[0] = (int8x16_t)*((_OWORD *)v199 + 2);
                            v250 = *((_OWORD *)v199 + 3);
                            v199 += 64;
                            v251 = v250;
                            v320.val[1] = 0uLL;
                            v324.val[0] = v249;
                            v316.val[1] = 0uLL;
                            v252 = v245;
                            vst2q_s8(v252, v316);
                            v252 += 32;
                            v324.val[1] = 0uLL;
                            vst2q_s8(v252, v324);
                            v253 = v245 + 64;
                            vst2q_s8(v253, v320);
                            v254 = v245 + 96;
                            vst2q_s8(v254, *(int8x16x2_t *)(&v248 - 1));
                            v245 += 128;
                          }
                          while (v245 != v247);
                          v245 = v247;
                        }
                        while (v245 != v246)
                        {
                          v255 = *v199++;
                          *(_WORD *)v245 = v255;
                          v245 += 2;
                        }
                        v310 = v304;
                        v311 = v196;
                        WTF::StringView::getCharacters<char16_t>(&v310, v246);
                        WTF::AtomStringImpl::add();
                      }
LABEL_575:
                      if ((ii & 1) != 0)
                      {
                        if (*a3)
                        {
LABEL_583:
                          result = (uint64_t)v307[0];
                          goto LABEL_410;
                        }
                      }
                      else
                      {
                        if (*(_DWORD *)v181 == 2)
                          WTF::StringImpl::destroy(v181, v72);
                        else
                          *(_DWORD *)v181 -= 2;
                        if (*a3)
                        {
                          if (*(_DWORD *)v181 == 2)
                            WTF::StringImpl::destroy(v181, v72);
                          else
                            *(_DWORD *)v181 -= 2;
LABEL_581:
                          if (*(_DWORD *)v181 == 2)
                            WTF::StringImpl::destroy(v181, v72);
                          else
                            *(_DWORD *)v181 -= 2;
                          goto LABEL_583;
                        }
                      }
                      __break(0xC471u);
                      JUMPOUT(0x1954ECB10);
                    }
                    v302 = ii;
                    if (v209)
                    {
                      __src = (__int8 *)v72;
                      if ((v207 & 0x80000000) == 0)
                      {
                        WTF::tryFastCompactMalloc((WTF *)(v207 + 20));
                        v215 = __dst;
                        if (__dst)
                        {
                          v216 = &__dst[1].i8[4];
                          __dst->i32[0] = 2;
                          v215->i32[1] = v207;
                          v215->i64[1] = (uint64_t)v215[1].i64 + 4;
                          v215[1].i32[0] = 4;
                          if (v208)
                          {
                            if ((_DWORD)v193)
                            {
                              if ((_DWORD)v193 == 1)
                                *v216 = *__src;
                              else
                                memcpy((char *)v215[1].i64 + 4, __src, v193);
                            }
                          }
                          else
                          {
                            v283 = (unsigned __int128 *)&v216[v193];
                            if (v193 < 0x10)
                            {
                              v284 = (unsigned __int128 *)((char *)v215[1].i64 + 4);
                            }
                            else
                            {
                              v284 = (unsigned __int128 *)&v216[v193 & 0xFFFFFFF0];
                              v285 = (unsigned __int128 *)((char *)v215[1].i64 + 4);
                              do
                              {
                                v286 = __src;
                                v287 = (unsigned __int128)vld2q_s8(v286);
                                v286 += 32;
                                *v285++ = v287;
                                __src = (__int8 *)v286;
                              }
                              while (v285 != v284);
                            }
                            for (n = __src; v284 != v283; v284 = (unsigned __int128 *)((char *)v284 + 1))
                            {
                              v297 = *n;
                              n += 2;
                              *(_BYTE *)v284 = v297;
                            }
                          }
                          v217 = &v216[v193];
                          *(_DWORD *)(v217 + 3) = 795108706;
                          *(_DWORD *)v217 = 1651336495;
                          v218 = v217 + 7;
                          if (v181)
                          {
                            v219 = (_BYTE *)*((_QWORD *)v181 + 1);
                            v220 = *((unsigned int *)v181 + 1);
                            ii = v302;
                            if ((*((_BYTE *)v181 + 16) & 4) != 0)
                            {
                              if ((_DWORD)v220)
                              {
                                if ((_DWORD)v220 == 1)
                                  *v218 = *v219;
                                else
                                  memcpy(v218, v219, v220);
                              }
                            }
                            else
                            {
                              v291 = (unsigned __int128 *)&v218[v220];
                              if (v220 < 0x10)
                              {
                                v292 = (unsigned __int128 *)v218;
                              }
                              else
                              {
                                v292 = (unsigned __int128 *)&v218[v220 & 0xFFFFFFF0];
                                v293 = (unsigned __int128 *)v218;
                                do
                                {
                                  v294 = (unsigned __int128)vld2q_s8(v219);
                                  v219 += 32;
                                  *v293++ = v294;
                                }
                                while (v293 != v292);
                              }
                              for (ii = v302; v292 != v291; v292 = (unsigned __int128 *)((char *)v292 + 1))
                              {
                                v299 = *v219;
                                v219 += 2;
                                *(_BYTE *)v292 = v299;
                              }
                            }
                            v221 = *((unsigned int *)v181 + 1);
                          }
                          else
                          {
                            v221 = 0;
                            ii = v302;
                          }
                          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(&v218[v221], v199, v303, v304, v196);
LABEL_571:
                          if ((v215[1].i8[0] & 0x10) != 0)
                          {
                            v215->i32[0] += 2;
                            *a3 = v215;
                          }
                          else
                          {
                            WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v215, v72);
                          }
                          if (v215->i32[0] == 2)
                            WTF::StringImpl::destroy((WTF::StringImpl *)v215, v72);
                          else
                            v215->i32[0] -= 2;
                          goto LABEL_575;
                        }
                      }
                    }
                    else if (v207 <= 0x7FFFFFEF)
                    {
                      v226 = v72;
                      WTF::tryFastCompactMalloc((WTF *)(2 * v207 + 20));
                      v215 = __dst;
                      if (__dst)
                      {
                        __dst->i32[0] = 2;
                        v215->i32[1] = v207;
                        v215->i64[1] = (uint64_t)v215[1].i64 + 4;
                        v215[1].i32[0] = 0;
                        v310 = v226;
                        v311 = v193;
                        WTF::StringView::getCharacters<char16_t>(&v310, &v215[1].i8[4]);
                        v227 = (uint64_t)v215[1].i64 + 2 * v311 + 4;
                        *(_QWORD *)v227 = 0x62006D0065002FLL;
                        *(_DWORD *)(v227 + 8) = 6553701;
                        *(_WORD *)(v227 + 12) = 47;
                        v228 = (char *)(v227 + 14);
                        if (v181)
                        {
                          v229 = (int8x16_t *)*((_QWORD *)v181 + 1);
                          v230 = *((unsigned int *)v181 + 1);
                          if ((*((_BYTE *)v181 + 16) & 4) != 0)
                          {
                            v232 = &v228[2 * v230];
                            if (v230 >= 0x40)
                            {
                              v233 = &v228[2 * (v230 & 0xFFFFFFC0)];
                              v256 = 0uLL;
                              v257 = v228;
                              do
                              {
                                v317.val[0] = *v229;
                                v258 = v229[1];
                                v321.val[0] = v229[2];
                                v259 = v229[3];
                                v229 += 4;
                                v260 = v259;
                                v321.val[1] = 0uLL;
                                v325.val[0] = v258;
                                v317.val[1] = 0uLL;
                                v261 = v257;
                                vst2q_s8(v261, v317);
                                v261 += 32;
                                v325.val[1] = 0uLL;
                                vst2q_s8(v261, v325);
                                v262 = v257 + 64;
                                vst2q_s8(v262, v321);
                                v263 = v257 + 96;
                                vst2q_s8(v263, *(int8x16x2_t *)(&v256 - 1));
                                v257 += 128;
                              }
                              while (v257 != v233);
                            }
                            else
                            {
                              v233 = v228;
                            }
                            while (v233 != v232)
                            {
                              v264 = v229->u8[0];
                              v229 = (int8x16_t *)((char *)v229 + 1);
                              *(_WORD *)v233 = v264;
                              v233 += 2;
                            }
                          }
                          else if ((_DWORD)v230 == 1)
                          {
                            *(_WORD *)v228 = v229->i16[0];
                          }
                          else if ((_DWORD)v230)
                          {
                            memcpy(v228, v229, 2 * v230);
                          }
                          v235 = *((unsigned int *)v181 + 1);
                        }
                        else
                        {
                          v235 = 0;
                        }
                        v265 = &v228[2 * v235];
                        v266 = &v265[2 * v303];
                        if ((v303 & 0x7FFFFFC0) != 0)
                        {
                          v267 = &v265[2 * (v303 & 0x7FFFFFC0)];
                          v268 = 0uLL;
                          do
                          {
                            v318.val[0] = *(int8x16_t *)v199;
                            v269 = *((int8x16_t *)v199 + 1);
                            v322.val[0] = (int8x16_t)*((_OWORD *)v199 + 2);
                            v270 = *((_OWORD *)v199 + 3);
                            v199 += 64;
                            v271 = v270;
                            v322.val[1] = 0uLL;
                            v326.val[0] = v269;
                            v318.val[1] = 0uLL;
                            v272 = v265;
                            vst2q_s8(v272, v318);
                            v272 += 32;
                            v326.val[1] = 0uLL;
                            vst2q_s8(v272, v326);
                            v273 = v265 + 64;
                            vst2q_s8(v273, v322);
                            v274 = v265 + 96;
                            vst2q_s8(v274, *(int8x16x2_t *)(&v268 - 1));
                            v265 += 128;
                          }
                          while (v265 != v267);
                          v265 = v267;
                        }
                        while (v265 != v266)
                        {
                          v275 = *v199++;
                          *(_WORD *)v265 = v275;
                          v265 += 2;
                        }
                        __dst = (int16x8_t *)v304;
                        v313 = v196;
                        WTF::StringView::getCharacters<char16_t>(&__dst, v266);
                        goto LABEL_571;
                      }
                    }
                    *a3 = 0;
                    goto LABEL_575;
                  }
                }
              }
            }
LABEL_522:
            *a3 = 0;
            goto LABEL_575;
          }
        }
LABEL_533:
        v193 = 0x100000000;
        v191 = "";
        goto LABEL_440;
      }
    }
LABEL_431:
    v187 = *(int16x8_t **)a2;
    if (*(_QWORD *)a2)
      v187->i32[0] += 2;
    *a3 = v187;
    if ((ii & 1) != 0)
      goto LABEL_583;
    goto LABEL_581;
  }
  v36 = (int16x8_t *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    v36->i32[0] += 2;
  *a3 = v36;
  return result;
}

BOOL WebCore::isYouTubeURL(WebCore *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v7;
  int v8;

  if ((*((_BYTE *)this + 8) & 2) == 0)
    return 0;
  v3 = WTF::URL::host(this);
  v2 = 0;
  switch((int)v4)
  {
    case 8:
      if ((v4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v3 & 0xDF) != 0x59
          || (*(_BYTE *)(v3 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v3 + 2) & 0xDF) != 0x55
          || (*(_BYTE *)(v3 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v3 + 4) & 0xDF) != 0x55
          || (*(_BYTE *)(v3 + 5) & 0xDF) != 0xE
          || (*(_BYTE *)(v3 + 6) & 0xDF) != 0x42)
        {
          return 0;
        }
        v7 = *(unsigned __int8 *)(v3 + 7);
      }
      else
      {
        if ((*(_WORD *)v3 & 0xFFDF) != 0x59
          || (*(_WORD *)(v3 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v3 + 4) & 0xFFDF) != 0x55
          || (*(_WORD *)(v3 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v3 + 8) & 0xFFDF) != 0x55
          || (*(_WORD *)(v3 + 10) & 0xFFDF) != 0xE
          || (*(_WORD *)(v3 + 12) & 0xFFDF) != 0x42)
        {
          return 0;
        }
        v7 = *(unsigned __int16 *)(v3 + 14);
      }
      return (v7 & 0xFFFFFFDF) == 0x45;
    case 9:
    case 10:
    case 12:
    case 14:
      return v2;
    case 11:
      if ((v4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v3 & 0xDF) == 0x59
          && (*(_BYTE *)(v3 + 1) & 0xDF) == 0x4F
          && (*(_BYTE *)(v3 + 2) & 0xDF) == 0x55
          && (*(_BYTE *)(v3 + 3) & 0xDF) == 0x54
          && (*(_BYTE *)(v3 + 4) & 0xDF) == 0x55
          && (*(_BYTE *)(v3 + 5) & 0xDF) == 0x42
          && (*(_BYTE *)(v3 + 6) & 0xDF) == 0x45
          && (*(_BYTE *)(v3 + 7) & 0xDF) == 0xE
          && (*(_BYTE *)(v3 + 8) & 0xDF) == 0x43
          && (*(_BYTE *)(v3 + 9) & 0xDF) == 0x4F)
        {
          v5 = *(unsigned __int8 *)(v3 + 10);
          return (v5 & 0xFFFFFFDF) == 0x4D;
        }
      }
      else if ((*(_WORD *)v3 & 0xFFDF) == 0x59
             && (*(_WORD *)(v3 + 2) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v3 + 4) & 0xFFDF) == 0x55
             && (*(_WORD *)(v3 + 6) & 0xFFDF) == 0x54
             && (*(_WORD *)(v3 + 8) & 0xFFDF) == 0x55
             && (*(_WORD *)(v3 + 10) & 0xFFDF) == 0x42
             && (*(_WORD *)(v3 + 12) & 0xFFDF) == 0x45
             && (*(_WORD *)(v3 + 14) & 0xFFDF) == 0xE
             && (*(_WORD *)(v3 + 16) & 0xFFDF) == 0x43
             && (*(_WORD *)(v3 + 18) & 0xFFDF) == 0x4F)
      {
        v5 = *(unsigned __int16 *)(v3 + 20);
        return (v5 & 0xFFFFFFDF) == 0x4D;
      }
      return 0;
    case 13:
      if ((v4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v3 & 0xDF) == 0x4D
          && (*(_BYTE *)(v3 + 1) & 0xDF) == 0xE
          && (*(_BYTE *)(v3 + 2) & 0xDF) == 0x59
          && (*(_BYTE *)(v3 + 3) & 0xDF) == 0x4F
          && (*(_BYTE *)(v3 + 4) & 0xDF) == 0x55
          && (*(_BYTE *)(v3 + 5) & 0xDF) == 0x54
          && (*(_BYTE *)(v3 + 6) & 0xDF) == 0x55
          && (*(_BYTE *)(v3 + 7) & 0xDF) == 0x42
          && (*(_BYTE *)(v3 + 8) & 0xDF) == 0x45
          && (*(_BYTE *)(v3 + 9) & 0xDF) == 0xE
          && (*(_BYTE *)(v3 + 10) & 0xDF) == 0x43
          && (*(_BYTE *)(v3 + 11) & 0xDF) == 0x4F)
        {
          v5 = *(unsigned __int8 *)(v3 + 12);
          return (v5 & 0xFFFFFFDF) == 0x4D;
        }
      }
      else if ((*(_WORD *)v3 & 0xFFDF) == 0x4D
             && (*(_WORD *)(v3 + 2) & 0xFFDF) == 0xE
             && (*(_WORD *)(v3 + 4) & 0xFFDF) == 0x59
             && (*(_WORD *)(v3 + 6) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v3 + 8) & 0xFFDF) == 0x55
             && (*(_WORD *)(v3 + 10) & 0xFFDF) == 0x54
             && (*(_WORD *)(v3 + 12) & 0xFFDF) == 0x55
             && (*(_WORD *)(v3 + 14) & 0xFFDF) == 0x42
             && (*(_WORD *)(v3 + 16) & 0xFFDF) == 0x45
             && (*(_WORD *)(v3 + 18) & 0xFFDF) == 0xE
             && (*(_WORD *)(v3 + 20) & 0xFFDF) == 0x43
             && (*(_WORD *)(v3 + 22) & 0xFFDF) == 0x4F)
      {
        v5 = *(unsigned __int16 *)(v3 + 24);
        return (v5 & 0xFFFFFFDF) == 0x4D;
      }
      return 0;
    case 15:
      if ((v4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v3 & 0xDF) == 0x57
          && (*(_BYTE *)(v3 + 1) & 0xDF) == 0x57
          && (*(_BYTE *)(v3 + 2) & 0xDF) == 0x57
          && (*(_BYTE *)(v3 + 3) & 0xDF) == 0xE
          && (*(_BYTE *)(v3 + 4) & 0xDF) == 0x59
          && (*(_BYTE *)(v3 + 5) & 0xDF) == 0x4F
          && (*(_BYTE *)(v3 + 6) & 0xDF) == 0x55
          && (*(_BYTE *)(v3 + 7) & 0xDF) == 0x54
          && (*(_BYTE *)(v3 + 8) & 0xDF) == 0x55
          && (*(_BYTE *)(v3 + 9) & 0xDF) == 0x42
          && (*(_BYTE *)(v3 + 10) & 0xDF) == 0x45
          && (*(_BYTE *)(v3 + 11) & 0xDF) == 0xE
          && (*(_BYTE *)(v3 + 12) & 0xDF) == 0x43
          && (*(_BYTE *)(v3 + 13) & 0xDF) == 0x4F)
        {
          v5 = *(unsigned __int8 *)(v3 + 14);
          return (v5 & 0xFFFFFFDF) == 0x4D;
        }
      }
      else if ((*(_WORD *)v3 & 0xFFDF) == 0x57
             && (*(_WORD *)(v3 + 2) & 0xFFDF) == 0x57
             && (*(_WORD *)(v3 + 4) & 0xFFDF) == 0x57
             && (*(_WORD *)(v3 + 6) & 0xFFDF) == 0xE
             && (*(_WORD *)(v3 + 8) & 0xFFDF) == 0x59
             && (*(_WORD *)(v3 + 10) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v3 + 12) & 0xFFDF) == 0x55
             && (*(_WORD *)(v3 + 14) & 0xFFDF) == 0x54
             && (*(_WORD *)(v3 + 16) & 0xFFDF) == 0x55
             && (*(_WORD *)(v3 + 18) & 0xFFDF) == 0x42
             && (*(_WORD *)(v3 + 20) & 0xFFDF) == 0x45
             && (*(_WORD *)(v3 + 22) & 0xFFDF) == 0xE
             && (*(_WORD *)(v3 + 24) & 0xFFDF) == 0x43
             && (*(_WORD *)(v3 + 26) & 0xFFDF) == 0x4F)
      {
        v5 = *(unsigned __int16 *)(v3 + 28);
        return (v5 & 0xFFFFFFDF) == 0x4D;
      }
      return 0;
    default:
      if ((_DWORD)v4 != 24)
      {
        if ((_DWORD)v4 != 20)
          return v2;
        if ((v4 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)v3 & 0xDF) == 0x59
            && (*(_BYTE *)(v3 + 1) & 0xDF) == 0x4F
            && (*(_BYTE *)(v3 + 2) & 0xDF) == 0x55
            && (*(_BYTE *)(v3 + 3) & 0xDF) == 0x54
            && (*(_BYTE *)(v3 + 4) & 0xDF) == 0x55
            && (*(_BYTE *)(v3 + 5) & 0xDF) == 0x42
            && (*(_BYTE *)(v3 + 6) & 0xDF) == 0x45
            && (*(_BYTE *)(v3 + 7) & 0xDF) == 0xD
            && (*(_BYTE *)(v3 + 8) & 0xDF) == 0x4E
            && (*(_BYTE *)(v3 + 9) & 0xDF) == 0x4F
            && (*(_BYTE *)(v3 + 10) & 0xDF) == 0x43
            && (*(_BYTE *)(v3 + 11) & 0xDF) == 0x4F
            && (*(_BYTE *)(v3 + 12) & 0xDF) == 0x4F
            && (*(_BYTE *)(v3 + 13) & 0xDF) == 0x4B
            && (*(_BYTE *)(v3 + 14) & 0xDF) == 0x49
            && (*(_BYTE *)(v3 + 15) & 0xDF) == 0x45
            && (*(_BYTE *)(v3 + 16) & 0xDF) == 0xE
            && (*(_BYTE *)(v3 + 17) & 0xDF) == 0x43
            && (*(_BYTE *)(v3 + 18) & 0xDF) == 0x4F)
          {
            v8 = *(unsigned __int8 *)(v3 + 19);
            return (v8 & 0xFFFFFFDF) == 77;
          }
        }
        else if ((*(_WORD *)v3 & 0xFFDF) == 0x59
               && (*(_WORD *)(v3 + 2) & 0xFFDF) == 0x4F
               && (*(_WORD *)(v3 + 4) & 0xFFDF) == 0x55
               && (*(_WORD *)(v3 + 6) & 0xFFDF) == 0x54
               && (*(_WORD *)(v3 + 8) & 0xFFDF) == 0x55
               && (*(_WORD *)(v3 + 10) & 0xFFDF) == 0x42
               && (*(_WORD *)(v3 + 12) & 0xFFDF) == 0x45
               && (*(_WORD *)(v3 + 14) & 0xFFDF) == 0xD
               && (*(_WORD *)(v3 + 16) & 0xFFDF) == 0x4E
               && (*(_WORD *)(v3 + 18) & 0xFFDF) == 0x4F
               && (*(_WORD *)(v3 + 20) & 0xFFDF) == 0x43
               && (*(_WORD *)(v3 + 22) & 0xFFDF) == 0x4F
               && (*(_WORD *)(v3 + 24) & 0xFFDF) == 0x4F
               && (*(_WORD *)(v3 + 26) & 0xFFDF) == 0x4B
               && (*(_WORD *)(v3 + 28) & 0xFFDF) == 0x49
               && (*(_WORD *)(v3 + 30) & 0xFFDF) == 0x45
               && (*(_WORD *)(v3 + 32) & 0xFFDF) == 0xE
               && (*(_WORD *)(v3 + 34) & 0xFFDF) == 0x43
               && (*(_WORD *)(v3 + 36) & 0xFFDF) == 0x4F)
        {
          v8 = *(unsigned __int16 *)(v3 + 38);
          return (v8 & 0xFFFFFFDF) == 77;
        }
        return 0;
      }
      if ((v4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v3 & 0xDF) != 0x57
          || (*(_BYTE *)(v3 + 1) & 0xDF) != 0x57
          || (*(_BYTE *)(v3 + 2) & 0xDF) != 0x57
          || (*(_BYTE *)(v3 + 3) & 0xDF) != 0xE
          || (*(_BYTE *)(v3 + 4) & 0xDF) != 0x59
          || (*(_BYTE *)(v3 + 5) & 0xDF) != 0x4F
          || (*(_BYTE *)(v3 + 6) & 0xDF) != 0x55
          || (*(_BYTE *)(v3 + 7) & 0xDF) != 0x54
          || (*(_BYTE *)(v3 + 8) & 0xDF) != 0x55
          || (*(_BYTE *)(v3 + 9) & 0xDF) != 0x42
          || (*(_BYTE *)(v3 + 10) & 0xDF) != 0x45
          || (*(_BYTE *)(v3 + 11) & 0xDF) != 0xD
          || (*(_BYTE *)(v3 + 12) & 0xDF) != 0x4E
          || (*(_BYTE *)(v3 + 13) & 0xDF) != 0x4F
          || (*(_BYTE *)(v3 + 14) & 0xDF) != 0x43
          || (*(_BYTE *)(v3 + 15) & 0xDF) != 0x4F
          || (*(_BYTE *)(v3 + 16) & 0xDF) != 0x4F
          || (*(_BYTE *)(v3 + 17) & 0xDF) != 0x4B
          || (*(_BYTE *)(v3 + 18) & 0xDF) != 0x49
          || (*(_BYTE *)(v3 + 19) & 0xDF) != 0x45
          || (*(_BYTE *)(v3 + 20) & 0xDF) != 0xE
          || (*(_BYTE *)(v3 + 21) & 0xDF) != 0x43
          || (*(_BYTE *)(v3 + 22) & 0xDF) != 0x4F)
        {
          return 0;
        }
        v5 = *(unsigned __int8 *)(v3 + 23);
      }
      else
      {
        if ((*(_WORD *)v3 & 0xFFDF) != 0x57
          || (*(_WORD *)(v3 + 2) & 0xFFDF) != 0x57
          || (*(_WORD *)(v3 + 4) & 0xFFDF) != 0x57
          || (*(_WORD *)(v3 + 6) & 0xFFDF) != 0xE
          || (*(_WORD *)(v3 + 8) & 0xFFDF) != 0x59
          || (*(_WORD *)(v3 + 10) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v3 + 12) & 0xFFDF) != 0x55
          || (*(_WORD *)(v3 + 14) & 0xFFDF) != 0x54
          || (*(_WORD *)(v3 + 16) & 0xFFDF) != 0x55
          || (*(_WORD *)(v3 + 18) & 0xFFDF) != 0x42
          || (*(_WORD *)(v3 + 20) & 0xFFDF) != 0x45
          || (*(_WORD *)(v3 + 22) & 0xFFDF) != 0xD
          || (*(_WORD *)(v3 + 24) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v3 + 26) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v3 + 28) & 0xFFDF) != 0x43
          || (*(_WORD *)(v3 + 30) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v3 + 32) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v3 + 34) & 0xFFDF) != 0x4B
          || (*(_WORD *)(v3 + 36) & 0xFFDF) != 0x49
          || (*(_WORD *)(v3 + 38) & 0xFFDF) != 0x45
          || (*(_WORD *)(v3 + 40) & 0xFFDF) != 0xE
          || (*(_WORD *)(v3 + 42) & 0xFFDF) != 0x43
          || (*(_WORD *)(v3 + 44) & 0xFFDF) != 0x4F)
        {
          return 0;
        }
        v5 = *(unsigned __int16 *)(v3 + 46);
      }
      return (v5 & 0xFFFFFFDF) == 0x4D;
  }
}

uint64_t WebCore::PushRecord::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  result = WTF::String::isolatedCopy();
  v5 = (WTF *)*(unsigned int *)(a1 + 92);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 92) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *(_DWORD *)(a2 + 88) = (_DWORD)v5;
    *(_QWORD *)(a2 + 80) = v6;
    result = (uint64_t)memcpy(v6, *(const void **)(a1 + 80), *(unsigned int *)(a1 + 92));
  }
  v7 = (WTF *)*(unsigned int *)(a1 + 108);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 108) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *(_DWORD *)(a2 + 104) = (_DWORD)v7;
    *(_QWORD *)(a2 + 96) = v8;
    result = (uint64_t)memcpy(v8, *(const void **)(a1 + 96), *(unsigned int *)(a1 + 108));
  }
  v9 = (WTF *)*(unsigned int *)(a1 + 124);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 124) = (_DWORD)v9;
  if ((_DWORD)v9)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    *(_DWORD *)(a2 + 120) = (_DWORD)v9;
    *(_QWORD *)(a2 + 112) = v10;
    result = (uint64_t)memcpy(v10, *(const void **)(a1 + 112), *(unsigned int *)(a1 + 124));
  }
  v11 = (WTF *)*(unsigned int *)(a1 + 140);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a2 + 140) = (_DWORD)v11;
  if ((_DWORD)v11)
  {
    v12 = (void *)WTF::fastMalloc(v11);
    *(_DWORD *)(a2 + 136) = (_DWORD)v11;
    *(_QWORD *)(a2 + 128) = v12;
    result = (uint64_t)memcpy(v12, *(const void **)(a1 + 128), *(unsigned int *)(a1 + 140));
  }
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_BYTE *)(a2 + 152) = *(_BYTE *)(a1 + 152);
  return result;
}

double WebCore::PushRecord::isolatedCopy@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a2 + 80) = v4;
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a2 + 88) = v5;
  v6 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a2 + 96) = v6;
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a2 + 104) = v7;
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a2 + 112) = v8;
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a2 + 120) = v9;
  v10 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a2 + 128) = v10;
  result = *(double *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  *(double *)(a2 + 136) = result;
  v12 = *(_QWORD *)(a1 + 144);
  *(_BYTE *)(a2 + 152) = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a2 + 144) = v12;
  return result;
}

void *WebCore::RemovedPushRecord::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *result;
  WTF *v5;
  void *v6;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = (void *)WTF::String::isolatedCopy();
  v5 = (WTF *)*(unsigned int *)(a1 + 28);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *(_DWORD *)(a2 + 24) = (_DWORD)v5;
    *(_QWORD *)(a2 + 16) = v6;
    return memcpy(v6, *(const void **)(a1 + 16), *(unsigned int *)(a1 + 28));
  }
  return result;
}

double WebCore::RemovedPushRecord::isolatedCopy@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  WTF::String::isolatedCopy();
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  result = *(double *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(double *)(a2 + 24) = result;
  return result;
}

uint64_t WebCore::PushTopics::isolatedCopy@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(unsigned int *)(result + 12);
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
      goto LABEL_12;
    result = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a2 + 8) = v4;
    *(_QWORD *)a2 = result;
    v5 = *(unsigned int *)(v2 + 12);
    if ((_DWORD)v5)
    {
      v6 = result;
      v7 = 0;
      v8 = *(_QWORD *)v2;
      v9 = 8 * v5;
      do
      {
        result = WTF::String::isolatedCopy();
        *(_QWORD *)(v6 + 8 * v7++) = v16;
        *(_DWORD *)(a2 + 12) = v7;
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(unsigned int *)(v2 + 28);
  if (!(_DWORD)v10)
    return result;
  if (v10 >> 29)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1954EDD3CLL);
  }
  result = WTF::fastMalloc((WTF *)(8 * v10));
  *(_DWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 16) = result;
  v11 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v11)
  {
    v12 = result;
    v13 = 0;
    v14 = *(_QWORD *)(v2 + 16);
    v15 = 8 * v11;
    do
    {
      result = WTF::String::isolatedCopy();
      *(_QWORD *)(v12 + 8 * v13++) = v16;
      *(_DWORD *)(a2 + 28) = v13;
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

unsigned int *WebCore::PushTopics::isolatedCopy@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(a1, a2);
  return WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(a1 + 4, a2 + 16);
}

uint64_t WebCore::PushDatabase::create(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  WTF::WorkQueue::create();
  v3 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  v8 = v12;
  WTF::String::isolatedCopy();
  v4 = *a2;
  *a2 = 0;
  v10 = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E3365630;
  v5[1] = v8;
  v5[2] = v9;
  v5[3] = v10;
  v11 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, &v11);
  v6 = v11;
  v11 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

void WebCore::PushDatabase::~PushDatabase(WebCore::PushDatabase *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  sqlite3_stmt **v13;
  void *v14;
  unsigned int *v15;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  WTF *v27;
  void *v28;
  __int128 v29;
  _QWORD *v30;

  v2 = *(_QWORD *)this;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33657C0;
  v30 = v3;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 24))(v2, &v30);
  v4 = v30;
  v30 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  v5 = *(_QWORD *)this;
  v29 = *(_OWORD *)((char *)this + 8);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E33657E8;
  *(_OWORD *)(v6 + 8) = v29;
  v30 = (_QWORD *)v6;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 24))(v5, &v30);
  v8 = v30;
  v30 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)(v9 + 24 * i) != -1)
        {
          v12 = v9 + 24 * i;
          v13 = *(sqlite3_stmt ***)(v12 + 16);
          *(_QWORD *)(v12 + 16) = 0;
          if (v13)
          {
            sqlite3_finalize(v13[1]);
            v15 = (unsigned int *)*v13;
            *v13 = 0;
            if (v15)
            {
              if (!atomic_load(v15))
              {
                __break(0xC471u);
                JUMPOUT(0x1954EE0CCLL);
              }
              do
                v17 = __ldaxr(v15);
              while (__stlxr(v17 - 1, v15));
            }
            WTF::fastFree((WTF *)v13, v14);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v9 - 16), v7);
  }
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v18);
    v20 = *(WTF **)(v18 + 56);
    *(_QWORD *)(v18 + 56) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, v19);
      else
        --*(_DWORD *)v20;
    }
    v21 = *(unsigned int **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::Thread::~Thread((WTF::Thread *)v21);
        WTF::fastFree(v27, v28);
      }
    }
    v24 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v24, (WTF::StringImpl *)v19);
    if (atomic_load((unsigned int *)v18))
    {
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v18, v19);
    }
  }
  v26 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26);
}

void WebCore::PushDatabase::cachedStatementOnQueue(sqlite3_stmt ***a1, uint64_t a2, const char *a3, const char *a4)
{
  const char *v4;
  sqlite3_stmt ***v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  sqlite3_stmt ***v18;
  const char *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  int v26;
  int v27;
  NSObject *v28;
  sqlite3_stmt **v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  const char *v35;
  unsigned int v36;
  int v37;
  const char *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  const char **v43;
  const char *v44;
  const char **v45;
  int v46;
  int v48;
  const char *v49;
  int v51;
  sqlite3_stmt **v52;
  void *v53;
  unsigned int *v54;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  void *v64;
  unsigned int *v65;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  WTF *v70;
  uint64_t *v71;
  sqlite3_stmt **v72;
  sqlite3_stmt ***v73;
  sqlite3_stmt **v75;
  int v76;
  uint8_t buf[4];
  uint64_t v78;
  __int16 v79;
  int v80;
  __int16 v81;
  const char *v82;
  uint64_t v83;

  v4 = a4;
  v7 = a1;
  v83 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    goto LABEL_22;
  v10 = *(_DWORD *)(v9 - 8);
  if (!a4)
  {
    v17 = (uint64_t *)(a2 + 16);
    v18 = a1;
    v22 = 0;
    goto LABEL_13;
  }
  v11 = -1640531527;
  v12 = (_DWORD)a4 - 1;
  if ((_DWORD)a4 == 1)
  {
    v17 = (uint64_t *)(a2 + 16);
LABEL_8:
    v18 = a1;
    goto LABEL_11;
  }
  if ((_DWORD)a4 == 2)
  {
    v17 = (uint64_t *)(a2 + 16);
    v18 = a1;
    v19 = a3;
  }
  else
  {
    v13 = v12 >> 1;
    v14 = a3;
    do
    {
      v15 = v11 + *(unsigned __int8 *)v14;
      v16 = (v15 << 16) ^ (*((unsigned __int8 *)v14 + 1) << 11);
      v11 = (v16 ^ v15) + ((v16 ^ v15) >> 11);
      v14 += 2;
      --v13;
    }
    while (v13);
    v17 = (uint64_t *)(a2 + 16);
    if ((v12 & 1) == 0)
      goto LABEL_8;
    v18 = a1;
    v19 = &a3[2 * (v12 >> 1)];
  }
  v11 = ((v11 + *(unsigned __int8 *)v19) ^ ((v11 + *(unsigned __int8 *)v19) << 11))
      + (((v11 + *(unsigned __int8 *)v19) ^ ((v11 + *(unsigned __int8 *)v19) << 11)) >> 17);
LABEL_11:
  v20 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
  v21 = (v20 ^ (4 * v20)) + ((v20 ^ (4 * v20)) >> 15);
  v22 = v21 ^ (v21 << 10);
  if (!v22)
    v22 = 0x800000;
LABEL_13:
  v23 = v22 & v10;
  v24 = v9 + 24 * (v22 & v10);
  v25 = *(const char **)v24;
  if (!*(_QWORD *)v24)
    goto LABEL_19;
  if (!a3)
  {
    if (v25 != (const char *)-1 && v25 == 0)
      goto LABEL_20;
    v48 = 1;
    while (1)
    {
      v23 = (v23 + v48) & v10;
      v24 = v9 + 24 * v23;
      v49 = *(const char **)v24;
      if (!*(_QWORD *)v24)
        break;
      ++v48;
      if (v49 != (const char *)-1 && v49 == 0)
        goto LABEL_20;
    }
LABEL_19:
    v24 = v9 + 24 * *(unsigned int *)(v9 - 4);
    goto LABEL_20;
  }
  v26 = 1;
  while (v25 == (const char *)-1 || strcmp(v25, a3))
  {
    v23 = (v23 + v26) & v10;
    v24 = v9 + 24 * v23;
    v25 = *(const char **)v24;
    ++v26;
    if (!*(_QWORD *)v24)
      goto LABEL_19;
  }
LABEL_20:
  v7 = v18;
  v8 = v17;
  v4 = a4;
  if (v24 != v9 + 24 * *(unsigned int *)(v9 - 4))
  {
    *v7 = *(sqlite3_stmt ***)(v24 + 16);
    return;
  }
LABEL_22:
  WebCore::SQLiteDatabase::prepareHeapStatement(*(unsigned int **)(a2 + 8), a3, (int)v4, &v75);
  v27 = v76;
  if (!v76)
  {
    v29 = v75;
    v75 = 0;
    v30 = *v8;
    if (*v8
      || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::UniqueRef<WebCore::SQLiteStatement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v8, 8u), (v30 = *v8) != 0))
    {
      v31 = *(_DWORD *)(v30 - 8);
    }
    else
    {
      v31 = 0;
    }
    v73 = v7;
    if (!v4)
    {
      v41 = 0;
      goto LABEL_38;
    }
    v32 = -1640531527;
    v33 = (_DWORD)v4 - 1;
    if ((_DWORD)v4 != 1)
    {
      if ((_DWORD)v4 == 2)
      {
        v38 = a3;
        goto LABEL_35;
      }
      v34 = v33 >> 1;
      v35 = a3;
      do
      {
        v36 = v32 + *(unsigned __int8 *)v35;
        v37 = (v36 << 16) ^ (*((unsigned __int8 *)v35 + 1) << 11);
        v32 = (v37 ^ v36) + ((v37 ^ v36) >> 11);
        v35 += 2;
        --v34;
      }
      while (v34);
      if ((v33 & 1) != 0)
      {
        v38 = &a3[2 * (v33 >> 1)];
LABEL_35:
        v32 = ((v32 + *(unsigned __int8 *)v38) ^ ((v32 + *(unsigned __int8 *)v38) << 11))
            + (((v32 + *(unsigned __int8 *)v38) ^ ((v32 + *(unsigned __int8 *)v38) << 11)) >> 17);
      }
    }
    v39 = (v32 ^ (8 * v32)) + ((v32 ^ (8 * v32)) >> 5);
    v40 = (v39 ^ (4 * v39)) + ((v39 ^ (4 * v39)) >> 15);
    v41 = v40 ^ (v40 << 10);
    if (!v41)
      v41 = 0x800000;
LABEL_38:
    v42 = v41 & v31;
    v43 = (const char **)(v30 + 24 * (v41 & v31));
    v44 = *v43;
    if (*v43)
    {
      v72 = v29;
      v45 = 0;
      if (a3)
      {
        v46 = 1;
        while (1)
        {
          if (v44 != (const char *)-1)
          {
            v43 = v45;
            if (!strcmp(v44, a3))
              break;
          }
          v45 = v43;
          v42 = (v42 + v46) & v31;
          v43 = (const char **)(v30 + 24 * v42);
          v44 = *v43;
          ++v46;
          if (!*v43)
            goto LABEL_61;
        }
      }
      else
      {
        v51 = 1;
        while (1)
        {
          if (v44 != (const char *)-1)
          {
            v43 = v45;
            if (!v44)
              break;
          }
          v45 = v43;
          v42 = (v42 + v51) & v31;
          v43 = (const char **)(v30 + 24 * v42);
          v44 = *v43;
          ++v51;
          if (!*v43)
          {
LABEL_61:
            v29 = v72;
            if (v45)
            {
              *v45 = 0;
              v45[1] = 0;
              v45[2] = 0;
              --*(_DWORD *)(*v8 - 16);
              v43 = v45;
            }
            goto LABEL_63;
          }
        }
      }
      *v73 = v72;
      if (v72)
      {
        sqlite3_finalize(v72[1]);
        v65 = (unsigned int *)*v72;
        *v72 = 0;
        if (v65)
        {
          if (!atomic_load(v65))
          {
            __break(0xC471u);
            JUMPOUT(0x1954EE6B8);
          }
          do
            v67 = __ldaxr(v65);
          while (__stlxr(v67 - 1, v65));
        }
        WTF::fastFree((WTF *)v72, v64);
      }
      goto LABEL_88;
    }
LABEL_63:
    *v43 = a3;
    v43[1] = v4;
    v52 = (sqlite3_stmt **)v43[2];
    v43[2] = (const char *)v29;
    if (v52)
    {
      sqlite3_finalize(v52[1]);
      v54 = (unsigned int *)*v52;
      *v52 = 0;
      if (v54)
      {
        if (!atomic_load(v54))
        {
          __break(0xC471u);
          JUMPOUT(0x1954EE698);
        }
        do
          v56 = __ldaxr(v54);
        while (__stlxr(v56 - 1, v54));
      }
      WTF::fastFree((WTF *)v52, v53);
    }
    v57 = *v8;
    if (*v8)
      v58 = *(_DWORD *)(v57 - 12) + 1;
    else
      v58 = 1;
    *(_DWORD *)(v57 - 12) = v58;
    v59 = *v8;
    if (*v8)
      v60 = *(_DWORD *)(v59 - 12);
    else
      v60 = 0;
    v61 = (*(_DWORD *)(v59 - 16) + v60);
    v62 = *(unsigned int *)(v59 - 4);
    if (v62 > 0x400)
    {
      if (v62 > 2 * v61)
        goto LABEL_87;
    }
    else
    {
      if (3 * v62 > 4 * v61)
      {
LABEL_87:
        *v73 = v29;
        goto LABEL_88;
      }
      if (!(_DWORD)v62)
      {
        v63 = 8;
        goto LABEL_86;
      }
    }
    v63 = (_DWORD)v62 << (6 * *(_DWORD *)(v59 - 12) >= (2 * v62));
LABEL_86:
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::UniqueRef<WebCore::SQLiteStatement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v8, v63);
    goto LABEL_87;
  }
  v28 = off_1ECE7C7C0;
  if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
  {
    if (v27 != 1)
    {
      v68 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::PushDatabase::updatePublicToken(v68, v69, v70, v71);
      return;
    }
    *(_DWORD *)buf = 134218498;
    v78 = a2;
    v79 = 1024;
    v80 = (int)v75;
    v81 = 2082;
    v82 = a3;
    _os_log_error_impl(&dword_1940B8000, v28, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d preparing statement: %{public}s", buf, 0x1Cu);
  }
  *v7 = 0;
LABEL_88:
  if (v76 != -1)
    ((void (*)(uint8_t *, sqlite3_stmt ***))off_1E3365598[v76])(buf, &v75);
}

uint64_t WebCore::PushDatabase::updatePublicToken(_QWORD *a1, uint64_t a2, WTF *this, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::RunLoop *v13;
  uint64_t result;
  uint64_t v15;

  if (this)
  {
    if ((unint64_t)this >> 32)
    {
LABEL_11:
      __break(0xC471u);
      JUMPOUT(0x1954EE7BCLL);
    }
    v8 = WTF::fastMalloc(this);
    v9 = v8;
    v10 = 0;
    do
    {
      *((_BYTE *)v10 + v8) = *((_BYTE *)v10 + a2);
      v10 = (WTF *)((char *)v10 + 1);
    }
    while (this != v10);
  }
  else
  {
    v9 = 0;
  }
  v11 = *a4;
  *a4 = 0;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = &off_1E3365810;
  *(_QWORD *)(v12 + 8) = a1;
  *(_QWORD *)(v12 + 16) = v9;
  *(_DWORD *)(v12 + 24) = (_DWORD)this;
  *(_DWORD *)(v12 + 28) = (_DWORD)this;
  *(_QWORD *)(v12 + 32) = v11;
  v15 = v12;
  v13 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v12);
  if ((WTF::RunLoop::isCurrent(v13) & 1) == 0)
    goto LABEL_11;
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 32))(*a1, &v15);
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::PushDatabase::getPublicToken(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::RunLoop *v4;
  WTF::RunLoop *v5;
  uint64_t result;
  WTF::RunLoop *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E3365860;
  *((_QWORD *)v4 + 1) = a1;
  *((_QWORD *)v4 + 2) = v3;
  v7 = v4;
  v5 = (WTF::RunLoop *)WTF::RunLoop::main(v4);
  if ((WTF::RunLoop::isCurrent(v5) & 1) != 0)
  {
    (*(void (**)(_QWORD, WTF::RunLoop **))(*(_QWORD *)*a1 + 32))(*a1, &v7);
    result = (uint64_t)v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    result = 302;
    __break(0xC471u);
  }
  return result;
}

void WebCore::PushDatabase::insertRecord(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::RunLoop *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  WebCore::PushRecord::isolatedCopy(a2, (uint64_t)v19);
  v5 = *a3;
  *a3 = 0;
  v33 = v5;
  v6 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v6 = off_1E33658B0;
  *(_QWORD *)(v6 + 16) = v18;
  *(_QWORD *)(v6 + 32) = v19[0];
  *(_OWORD *)(v6 + 48) = v20;
  *(_OWORD *)(v6 + 64) = v21;
  v20 = 0u;
  *(_OWORD *)(v6 + 80) = v22;
  v7 = v23;
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)(v6 + 96) = v7;
  v8 = v24;
  v24 = 0;
  *(_QWORD *)(v6 + 112) = v8;
  *(_QWORD *)&v7 = v25;
  v25 = 0;
  *(_QWORD *)(v6 + 120) = v7;
  v9 = v26;
  v26 = 0;
  *(_QWORD *)(v6 + 128) = v9;
  *(_QWORD *)&v7 = v27;
  v27 = 0;
  *(_QWORD *)(v6 + 136) = v7;
  v10 = v28;
  v28 = 0;
  *(_QWORD *)(v6 + 144) = v10;
  *(_QWORD *)&v7 = v29;
  v29 = 0;
  *(_QWORD *)(v6 + 152) = v7;
  v11 = v30;
  v30 = 0;
  *(_QWORD *)(v6 + 160) = v11;
  *(_QWORD *)&v7 = v31;
  v31 = 0;
  *(_QWORD *)(v6 + 168) = v7;
  *(_OWORD *)(v6 + 176) = v32;
  v12 = v33;
  v33 = 0;
  *(_QWORD *)(v6 + 192) = v12;
  v17 = v6;
  v13 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v6);
  if ((WTF::RunLoop::isCurrent(v13) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1954EEA20);
  }
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 32))(*a1, &v17);
  v15 = v17;
  v17 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v33;
  v33 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)v19, v14);
}

uint64_t WebCore::PushDatabase::removeRecordByIdentifier(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  WTF::RunLoop *v6;
  WTF::RunLoop *v7;
  uint64_t result;
  WTF::RunLoop *v9;

  v5 = *a3;
  *a3 = 0;
  v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E3365958;
  *((_QWORD *)v6 + 1) = a1;
  *((_QWORD *)v6 + 2) = a2;
  *((_QWORD *)v6 + 3) = v5;
  v9 = v6;
  v7 = (WTF::RunLoop *)WTF::RunLoop::main(v6);
  if ((WTF::RunLoop::isCurrent(v7) & 1) != 0)
  {
    (*(void (**)(_QWORD, WTF::RunLoop **))(*(_QWORD *)*a1 + 32))(*a1, &v9);
    result = (uint64_t)v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    result = 302;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::PushDatabase::getRecordByTopic(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  WTF::RunLoop *v6;
  WTF::RunLoop *v7;
  WTF::RunLoop *v8;
  uint64_t result;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::RunLoop *v13;

  WTF::String::isolatedCopy();
  v5 = *a3;
  *a3 = 0;
  v12 = v5;
  v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E33659A8;
  *((_QWORD *)v6 + 1) = a1;
  *((_QWORD *)v6 + 2) = v11;
  *((_QWORD *)v6 + 3) = v12;
  v13 = v6;
  v7 = (WTF::RunLoop *)WTF::RunLoop::main(v6);
  if ((WTF::RunLoop::isCurrent(v7) & 1) != 0)
  {
    (*(void (**)(_QWORD, WTF::RunLoop **))(*(_QWORD *)*a1 + 32))(*a1, &v13);
    v8 = v13;
    v13 = 0;
    if (v8)
      (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
    return 0;
  }
  else
  {
    result = 302;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::PushDatabase::getRecordBySubscriptionSetAndScope(_QWORD *a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t v10;
  uint64_t result;
  WTF::StringImpl *v13[2];
  __int128 v14;
  WTF::StringImpl *v15[2];
  uint64_t v16;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v14 = *(_OWORD *)(a2 + 16);
  WTF::String::isolatedCopy();
  v7 = *a4;
  *a4 = 0;
  v15[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v8 = &off_1E33659D0;
  *(_QWORD *)(v8 + 16) = a1;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v13;
  *(_OWORD *)(v8 + 48) = v14;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)v15;
  v16 = v8;
  v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v8);
  if ((WTF::RunLoop::isCurrent(v9) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 32))(*a1, &v16);
    v10 = v16;
    v16 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return 0;
  }
  else
  {
    result = 302;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::PushDatabase::getIdentifiers(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::RunLoop *v4;
  WTF::RunLoop *v5;
  uint64_t result;
  WTF::RunLoop *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E33659F8;
  *((_QWORD *)v4 + 1) = a1;
  *((_QWORD *)v4 + 2) = v3;
  v7 = v4;
  v5 = (WTF::RunLoop *)WTF::RunLoop::main(v4);
  if ((WTF::RunLoop::isCurrent(v5) & 1) != 0)
  {
    (*(void (**)(_QWORD, WTF::RunLoop **))(*(_QWORD *)*a1 + 32))(*a1, &v7);
    result = (uint64_t)v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    result = 302;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::PushDatabase::getTopics(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::RunLoop *v4;
  WTF::RunLoop *v5;
  uint64_t result;
  WTF::RunLoop *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E3365A48;
  *((_QWORD *)v4 + 1) = a1;
  *((_QWORD *)v4 + 2) = v3;
  v7 = v4;
  v5 = (WTF::RunLoop *)WTF::RunLoop::main(v4);
  if ((WTF::RunLoop::isCurrent(v5) & 1) != 0)
  {
    (*(void (**)(_QWORD, WTF::RunLoop **))(*(_QWORD *)*a1 + 32))(*a1, &v7);
    result = (uint64_t)v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    result = 302;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::PushDatabase::incrementSilentPushCount(_QWORD *a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t v10;
  uint64_t result;
  WTF::StringImpl *v13[2];
  __int128 v14;
  WTF::StringImpl *v15[2];
  uint64_t v16;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v14 = *(_OWORD *)(a2 + 16);
  WTF::String::isolatedCopy();
  v7 = *a4;
  *a4 = 0;
  v15[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v8 = &off_1E3365AC0;
  *(_QWORD *)(v8 + 16) = a1;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v13;
  *(_OWORD *)(v8 + 48) = v14;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)v15;
  v16 = v8;
  v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v8);
  if ((WTF::RunLoop::isCurrent(v9) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 32))(*a1, &v16);
    v10 = v16;
    v16 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return 0;
  }
  else
  {
    result = 302;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::PushDatabase::removeRecordsBySubscriptionSet(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  WTF::RunLoop *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v19 = *(_OWORD *)(a2 + 16);
  v6 = *a3;
  *a3 = 0;
  v20 = v6;
  v7 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v7 = &off_1E3365B38;
  *(_QWORD *)(v7 + 16) = v17;
  v8 = *(_OWORD *)v18;
  v18[0] = 0;
  v18[1] = 0;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v19;
  v9 = v20;
  v20 = 0;
  *(_QWORD *)(v7 + 64) = v9;
  v16 = v7;
  v10 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v7);
  if ((WTF::RunLoop::isCurrent(v10) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1954EF1E8);
  }
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 32))(*a1, &v16);
  v12 = v16;
  v16 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v20;
  v20 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v18[1];
  v18[1] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v18[0];
  v18[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::PushDatabase::removeRecordsBySubscriptionSetAndSecurityOrigin(_QWORD *a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t v10;
  uint64_t result;
  WTF::StringImpl *v13[2];
  __int128 v14;
  WTF::StringImpl *v15[2];
  uint64_t v16;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v14 = *(_OWORD *)(a2 + 16);
  WTF::String::isolatedCopy();
  v7 = *a4;
  *a4 = 0;
  v15[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v8 = &off_1E3365B88;
  *(_QWORD *)(v8 + 16) = a1;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v13;
  *(_OWORD *)(v8 + 48) = v14;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)v15;
  v16 = v8;
  v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v8);
  if ((WTF::RunLoop::isCurrent(v9) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 32))(*a1, &v16);
    v10 = v16;
    v16 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return 0;
  }
  else
  {
    result = 302;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::PushDatabase::setPushesEnabledForOrigin(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  WTF::RunLoop *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22[2];
  __int128 v23;
  WTF::StringImpl *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v23 = *(_OWORD *)(a2 + 16);
  WTF::String::isolatedCopy();
  v25 = a4;
  v9 = *a5;
  *a5 = 0;
  v26 = v9;
  v10 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v10 = &off_1E3365BB0;
  *(_QWORD *)(v10 + 16) = v21;
  v11 = *(_OWORD *)v22;
  v22[0] = 0;
  v22[1] = 0;
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v23;
  *(_QWORD *)(v10 + 64) = v24;
  *(_BYTE *)(v10 + 72) = v25;
  v12 = v26;
  v24 = 0;
  v26 = 0;
  *(_QWORD *)(v10 + 80) = v12;
  v20 = v10;
  v13 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v10);
  if ((WTF::RunLoop::isCurrent(v13) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1954EF56CLL);
  }
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 32))(*a1, &v20);
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v26;
  v26 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v22[1];
  v22[1] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v22[0];
  v22[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::PushEvent::create@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t result;
  uint64_t v21;
  _QWORD v22[2];
  char v23;
  char *v24;

  v9 = a2[24];
  if (a2[24])
  {
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 == -1)
    {
      v21 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::PushEvent::create(v21);
    }
    v24 = &v23;
    ((void (*)(_QWORD *__return_ptr, char **, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL27dataFromPushMessageDataInitERNS_7variantIJNS6_6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSA_INSB_11ArrayBufferENSD_ISI_EENSF_ISI_EEEENS6_6StringEEEEE3__0JZNS8_L27dataFromPushMessageDataInitESO_E3__1ZNS8_L27dataFromPushMessageDataInitESO_E3__2EEEEEJRNS0_6__implIJSH_SL_SM_EEEEEEDcOT_DpOT0____fmatrix[v10])(v22, &v24, a2 + 8);
    v11 = v22[0];
    v4 = v22[1];
  }
  else
  {
    v11 = 0;
  }
  v12 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
  v14 = *a2;
  v15 = a2[1];
  v16 = a2[2];
  *(_QWORD *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 16) = 1;
  if (a3)
    v17 = 2818560;
  else
    v17 = 2818048;
  v18 = v17 | (2 * v14) | (4 * v15) | (8 * v16) | (*a1 != 0) | *(_DWORD *)(v12 + 20) & 0xFFC00000;
  *(_DWORD *)(v12 + 20) = v18;
  v19 = (_DWORD *)*a1;
  if (*a1)
  {
    *v19 += 2;
    v18 = *(_DWORD *)(v12 + 20);
  }
  *(_QWORD *)(v12 + 24) = v19;
  *(_QWORD *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = v13;
  *(_DWORD *)(v12 + 20) = v18 | 0x4000;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_DWORD *)(v12 + 80) = 0;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_QWORD *)v12 = off_1E3365E78;
  if (v9)
  {
    result = bmalloc::api::isoAllocate();
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v11;
    *(_QWORD *)(result + 16) = v4;
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(v12 + 104) = result;
  *a4 = v12;
  return result;
}

uint64_t WebCore::PushEvent::create@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t result;
  uint64_t v19;

  v10 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  *(_QWORD *)(v10 + 8) = 0;
  if (a4)
    v15 = 2818560;
  else
    v15 = 2818048;
  v16 = v15 | (2 * v12) | (4 * v13) | (8 * v14) | (*a1 != 0) | *(_DWORD *)(v10 + 20) & 0xFFC00000;
  *(_DWORD *)(v10 + 16) = 1;
  *(_DWORD *)(v10 + 20) = v16;
  v17 = (_DWORD *)*a1;
  if (*a1)
  {
    *v17 += 2;
    v16 = *(_DWORD *)(v10 + 20);
  }
  *(_QWORD *)(v10 + 24) = v17;
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_QWORD *)(v10 + 56) = v11;
  *(_DWORD *)(v10 + 20) = v16 | 0x4000;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_DWORD *)(v10 + 80) = 0;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_QWORD *)v10 = off_1E3365E78;
  if (*((_BYTE *)a3 + 16))
  {
    result = bmalloc::api::isoAllocate();
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v19 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 8) = v19;
    LODWORD(v19) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(result + 16) = v19;
    LODWORD(v19) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(result + 20) = v19;
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(v10 + 104) = result;
  *a5 = v10;
  return result;
}

void WebCore::PushEvent::~PushEvent(WebCore::PushEvent *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = *(WTF **)(v3 + 8);
      if (v4)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v4, a2);
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;
  WTF *v6;

  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *(WTF **)(v3 + 8);
      if (v6)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v6, a2);
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

_QWORD *WebCore::PushManager::supportedContentEncodings@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 8) = 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)a1 = result;
  if (v6)
    *(_DWORD *)v6 += 2;
  *result = v6;
  if (v6)
  {
    v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    result[1] = v6;
    *(_DWORD *)(a1 + 12) = 2;
    if (v5)
      *(_DWORD *)v6 = v5;
    else
      result = (_QWORD *)WTF::StringImpl::destroy(v6, v4);
  }
  else
  {
    result[1] = 0;
    *(_DWORD *)(a1 + 12) = 2;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

uint64_t WebCore::PushManager::subscribe(_QWORD *a1, char *a2, char *a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v19;
  char v20;
  char v21[8];
  int v22;
  char v23;
  char v24;
  _DWORD *v25;
  uint64_t v26;
  char v27;

  if (((*(uint64_t (**)(char *))(*(_QWORD *)a2 + 24))(a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1954EFCBCLL);
  }
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)a2 + 104))(a2);
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v9 = a2[274];
  if (v9 <= 2)
    *(_DWORD *)&a2[qword_1968DEDE0[v9]] += dword_1968DEDF8[v9];
  v19 = a2;
  v20 = 0;
  v24 = 0;
  if (a3[32])
  {
    v20 = *a3;
    v21[0] = 0;
    v23 = 0;
    if (a3[24])
    {
      v22 = -1;
      v10 = *((unsigned int *)a3 + 4);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(uint64_t *, char *, char *))off_1E33655D8[v10])(&v26, v21, a3 + 8);
        v22 = v10;
      }
      v23 = 1;
    }
    v24 = 1;
  }
  v11 = (_DWORD *)*a4;
  *a4 = 0;
  v25 = v11;
  v12 = WTF::fastMalloc((WTF *)0x50);
  v13 = v12;
  *(_QWORD *)v12 = &off_1E3365BF8;
  *(_QWORD *)(v12 + 8) = a1;
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v19;
  *(_BYTE *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 64) = 0;
  if (v24)
  {
    *(_BYTE *)(v12 + 40) = 0;
    *(_BYTE *)(v12 + 32) = v20;
    *(_BYTE *)(v12 + 56) = 0;
    if (v23)
    {
      *(_DWORD *)(v12 + 48) = -1;
      v14 = v22;
      if (v22 != -1)
      {
        ((void (*)(uint64_t *))off_1E33655D8[v22])(&v26);
        *(_DWORD *)(v13 + 48) = v14;
      }
      *(_BYTE *)(v13 + 56) = 1;
    }
    *(_BYTE *)(v13 + 64) = 1;
  }
  v15 = v25;
  v25 = 0;
  *(_QWORD *)(v13 + 72) = v15;
  v26 = v13;
  WebCore::EventLoopTaskGroup::queueTask(v8, 11, &v26);
  v16 = v26;
  v26 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v25;
  v25 = 0;
  if (v17)
  {
    if (v17[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
    else
      --v17[4];
  }
  if (v24 && v23)
  {
    if (v22 != -1)
      ((void (*)(char *, char *))off_1E33655C0[v22])(&v27, v21);
    v22 = -1;
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLVideoElementPictureInPicture::logger(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return *((_QWORD *)this + 6);
}

const char *`non-virtual thunk to'WebCore::HTMLVideoElementPictureInPicture::logClassName(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return "HTMLVideoElementPictureInPicture";
}

uint64_t `non-virtual thunk to'WebCore::HTMLVideoElementPictureInPicture::logIdentifier(WebCore::HTMLVideoElementPictureInPicture *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t WebCore::PictureInPictureWindow::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

_DWORD *WebCore::PictureInPictureWindow::deref(_DWORD *this, void *a2)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ActiveDOMObject *)this;
  if (this[12] == 1)
  {
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(this + 6), a2);
    WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
    return (_DWORD *)bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --this[12];
  }
  return this;
}

uint64_t WebCore::PictureInPictureWindow::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

_DWORD *WebCore::PictureInPictureWindow::derefEventTarget(_DWORD *this, void *a2)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ActiveDOMObject *)this;
  if (this[12] == 1)
  {
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(this + 6), a2);
    WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
    return (_DWORD *)bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --this[12];
  }
  return this;
}

uint64_t WebCore::PictureInPictureWindow::eventTargetInterface(WebCore::PictureInPictureWindow *this)
{
  return 19;
}

uint64_t WebCore::PictureInPictureWindow::scriptExecutionContext(WebCore::PictureInPictureWindow *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::PictureInPictureWindow::eventTargetInterface(WebCore::PictureInPictureWindow *this)
{
  return 19;
}

uint64_t `non-virtual thunk to'WebCore::PictureInPictureWindow::scriptExecutionContext(WebCore::PictureInPictureWindow *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::PictureInPictureWindow::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::EventTarget *`non-virtual thunk to'WebCore::PictureInPictureWindow::derefEventTarget(WebCore::EventTarget *this, void *a2)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  if (*((_DWORD *)this + 6) == 1)
  {
    v2 = (WebCore::EventTarget *)((char *)this - 24);
    WebCore::EventTarget::~EventTarget(this, a2);
    WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
    return (WebCore::EventTarget *)bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

void WebCore::YouTubePluginReplacement::~YouTubePluginReplacement(WebCore::YouTubePluginReplacement *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::YouTubePluginReplacement::~YouTubePluginReplacement(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      v9 = (WTF::StringImpl **)*((_QWORD *)this + 4);
      do
      {
        v10 = *v9;
        if (*v9 != (WTF::StringImpl *)-1)
        {
          v11 = v9[1];
          v9[1] = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              WTF::StringImpl::destroy(v11, a2);
              v10 = *v9;
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v12 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v12)
      {
        v15 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v12));
        v5 = v15;
      }
      v13 = *(WTF **)(v5 + 16);
      if (v13)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v14 = v5;
        WTF::fastFree(v13, a2);
        v5 = v14;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

BOOL WebCore::YouTubePluginReplacement::willCreateRenderer(WebCore::YouTubePluginReplacement *this)
{
  uint64_t (*v1)();

  v1 = WTF::RefPtr<WebCore::YouTubeEmbedShadowElement,WTF::RawPtrTraits<WebCore::YouTubeEmbedShadowElement>,WTF::DefaultRefDerefTraits<WebCore::YouTubeEmbedShadowElement>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 3))
    v1 = 0;
  return v1 != 0;
}

void WebCore::PictureInPictureEvent::~PictureInPictureEvent(WebCore::PictureInPictureEvent *this, void *a2)
{
  _DWORD *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[12] == 1)
    {
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v3 + 6), a2);
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v3, v4);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --v3[12];
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[12] == 1)
    {
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v3 + 6), a2);
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v3, v6);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --v3[12];
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

WTF::StringImpl *WebCore::createYouTubeURL(uint64_t a1, _BYTE *a2, uint64_t a3, WTF::StringImpl *a4, uint64_t a5)
{
  char *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  uint64_t v33;
  WTF::StringImpl *v34[5];
  _BYTE *v35;
  uint64_t v36;
  WTF::StringImpl *v37[2];
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;

  v34[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v34);
  if ((_DWORD)a5)
    v10 = "t=";
  else
    v10 = "";
  v11 = 3;
  if (!(_DWORD)a5)
    v11 = 1;
  v33 = v11 - 1;
  if ((unint64_t)(v11 - 1) >> 31 || (a5 & 0x80000000) != 0)
    goto LABEL_47;
  v12 = v33 + a5;
  v13 = __OFADD__((_DWORD)v33, (_DWORD)a5);
  if ((a3 & 0x80000000) != 0)
    goto LABEL_47;
  if (v13)
    goto LABEL_47;
  v14 = __OFADD__((_DWORD)a3, v12);
  v15 = a3 + v12;
  if (v14)
    goto LABEL_47;
  v16 = (v15 + 8);
  if (__OFADD__(v15, 8))
    goto LABEL_47;
  if ((a3 & 0xFF00000000) != 0 && (a5 & 0xFF00000000) != 0)
  {
    if (v15 != -8)
    {
      if ((v16 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
        v17 = v37[0];
        if (v37[0])
        {
          *(_DWORD *)v37[0] = 2;
          *((_DWORD *)v17 + 1) = v16;
          *(_QWORD *)((char *)v17 + 20) = 0x3A65627574756F79;
          *((_QWORD *)v17 + 1) = (char *)v17 + 20;
          *((_DWORD *)v17 + 4) = 4;
          v18 = (char *)v17 + 28;
          if ((_DWORD)a3)
          {
            if ((_DWORD)a3 == 1)
              *v18 = *a2;
            else
              memcpy((char *)v17 + 28, a2, a3);
          }
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(&v18[a3], v10, v33, a4, a5);
          goto LABEL_34;
        }
      }
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x1954F0208);
    }
LABEL_44:
    v17 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_34;
  }
  if (v15 == -8)
    goto LABEL_44;
  if (v16 > 0x7FFFFFEF)
    goto LABEL_47;
  WTF::tryFastCompactMalloc((WTF *)(2 * v16 + 20));
  v17 = v37[0];
  if (!v37[0])
    goto LABEL_47;
  *(_OWORD *)((char *)v37[0] + 20) = xmmword_1968DEDC0;
  *(_DWORD *)v17 = 2;
  *((_DWORD *)v17 + 1) = v16;
  *((_QWORD *)v17 + 1) = (char *)v17 + 20;
  *((_DWORD *)v17 + 4) = 0;
  v35 = a2;
  v36 = a3;
  WTF::StringView::getCharacters<char16_t>(&v35, (char *)v17 + 36);
  v19 = (char *)v17 + 2 * v36 + 36;
  v20 = &v19[2 * v33];
  if ((v33 & 0x7FFFFFC0) != 0)
  {
    v21 = &v19[2 * (v33 & 0x7FFFFFC0)];
    v22 = 0uLL;
    do
    {
      v38.val[0] = *(int8x16_t *)v10;
      v23 = *((int8x16_t *)v10 + 1);
      v39.val[0] = (int8x16_t)*((_OWORD *)v10 + 2);
      v24 = *((_OWORD *)v10 + 3);
      v10 += 64;
      v25 = v24;
      v39.val[1] = 0uLL;
      v40.val[0] = v23;
      v38.val[1] = 0uLL;
      v26 = v19;
      vst2q_s8(v26, v38);
      v26 += 32;
      v40.val[1] = 0uLL;
      vst2q_s8(v26, v40);
      v27 = v19 + 64;
      vst2q_s8(v27, v39);
      v28 = v19 + 96;
      vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
      v19 += 128;
    }
    while (v19 != v21);
    v19 = v21;
  }
  while (v19 != v20)
  {
    v29 = *v10++;
    *(_WORD *)v19 = v29;
    v19 += 2;
  }
  v37[0] = a4;
  v37[1] = (WTF::StringImpl *)a5;
  WTF::StringView::getCharacters<char16_t>(v37, v20);
LABEL_34:
  v37[0] = v17;
  MEMORY[0x19AEA52F8](a1, v34, v37, 0);
  v31 = v37[0];
  v37[0] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  result = v34[0];
  v34[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::queryKeysAndValues(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int i;
  unsigned int v32;
  WTF **v33;
  WTF *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  int16x8_t *v45;
  unint64_t v46;
  int16x8_t v47;
  int8x16_t v48;
  int16x8_t *v49;
  __int8 *v50;
  int16x8_t *v51;
  unint64_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int16x8_t *v55;
  __int8 *v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t *v59;
  unint64_t v60;
  WTF **v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65[2];
  WTF::StringImpl *v66;

  v62 = (uint64_t *)result;
  *(_QWORD *)result = 0;
  if (!(_DWORD)a3)
    return result;
  v5 = 0;
  v6 = a3;
  v7 = a3 - 1;
  v64 = a3 & 0xFF00000000;
  v60 = (unint64_t)a2 + 2 * a3;
  v59 = (int16x8_t *)(v60 - 16);
  v8 = a3;
  v63 = v7;
  do
  {
    if (v5 >= v7 || !v8)
      return result;
    if (v64)
    {
      if (a3 <= v5)
        return result;
      v9 = v6 - v5;
      if (v9 >= 0x10)
        v10 = 16;
      else
        v10 = v6 - v5;
      if (v10)
      {
        v11 = v10;
        result = (WTF::StringImpl *)((char *)a2 + v5);
        while (*(_BYTE *)result != 61)
        {
          result = (WTF::StringImpl *)((char *)result + 1);
          if (!--v11)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        if (v9 < 0x11)
          return result;
        result = (WTF::StringImpl *)memchr((char *)a2 + v5 + v10, 61, v9 - v10);
        if (!result)
          return result;
      }
      v12 = result - a2;
    }
    else
    {
      if (v6 <= v5)
        return result;
      v45 = (int16x8_t *)((char *)a2 + 2 * v5);
      v46 = v60 - (_QWORD)v45;
      if ((uint64_t)(v60 - (_QWORD)v45) <= -2)
      {
LABEL_146:
        __break(1u);
        return result;
      }
      if (v46 <= 0x3E)
      {
        while (v45->i16[0] != 61)
        {
          v45 = (int16x8_t *)((char *)v45 + 2);
          v46 -= 2;
          if (!v46)
            return result;
        }
      }
      else
      {
        if ((unint64_t)&v45->u64[1] + 6 >= v60)
        {
          v49 = (int16x8_t *)((char *)a2 + 2 * v5);
LABEL_127:
          if ((unint64_t)v49 >= v60)
            return result;
          v45 = (int16x8_t *)(v60 - 16);
          v57.i64[0] = 0x3D003D003D003DLL;
          v57.i64[1] = 0x3D003D003D003DLL;
          v48 = (int8x16_t)vceqq_s16(*v59, v57);
          v57.i16[0] = vmaxvq_u16((uint16x8_t)v48);
          if (!v57.i32[0])
            return result;
        }
        else
        {
          while (1)
          {
            v47.i64[0] = 0x3D003D003D003DLL;
            v47.i64[1] = 0x3D003D003D003DLL;
            v48 = (int8x16_t)vceqq_s16(*v45, v47);
            v47.i16[0] = vmaxvq_u16((uint16x8_t)v48);
            if (v47.i32[0])
              break;
            v49 = v45 + 1;
            v50 = &v45[1].i8[14];
            ++v45;
            if ((unint64_t)v50 >= v60)
              goto LABEL_127;
          }
        }
        v45 = (int16x8_t *)((char *)v45
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v48)));
      }
      v7 = v63;
      if (v45 == (int16x8_t *)v60)
        return result;
      v12 = ((char *)v45 - (char *)a2) >> 1;
    }
    if (v12 == -1 || v12 >= v7)
      return result;
    v13 = v12 + 1;
    if (!v64)
    {
      if (v6 > v13)
      {
        v51 = (int16x8_t *)((char *)a2 + 2 * (v12 + 1));
        v52 = v60 - (_QWORD)v51;
        if ((uint64_t)(v60 - (_QWORD)v51) <= -2)
          goto LABEL_146;
        if (v52 <= 0x3E)
        {
          v7 = v63;
          while (v51->i16[0] != 38)
          {
            v51 = (int16x8_t *)((char *)v51 + 2);
            v17 = -1;
            v52 -= 2;
            if (!v52)
              goto LABEL_31;
          }
          goto LABEL_140;
        }
        if ((unint64_t)&v51->u64[1] + 6 < v60)
        {
          while (1)
          {
            v53.i64[0] = 0x26002600260026;
            v53.i64[1] = 0x26002600260026;
            v54 = (int8x16_t)vceqq_s16(*v51, v53);
            v53.i16[0] = vmaxvq_u16((uint16x8_t)v54);
            if (v53.i32[0])
              break;
            v55 = v51 + 1;
            v56 = &v51[1].i8[14];
            ++v51;
            if ((unint64_t)v56 >= v60)
              goto LABEL_137;
          }
LABEL_139:
          v51 = (int16x8_t *)((char *)v51
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v54)));
LABEL_140:
          if (v51 == (int16x8_t *)v60)
            v17 = -1;
          else
            v17 = ((char *)v51 - (char *)a2) >> 1;
          goto LABEL_144;
        }
        v55 = (int16x8_t *)((char *)a2 + 2 * (v12 + 1));
LABEL_137:
        if ((unint64_t)v55 < v60)
        {
          v51 = (int16x8_t *)(v60 - 16);
          v58.i64[0] = 0x26002600260026;
          v58.i64[1] = 0x26002600260026;
          v54 = (int8x16_t)vceqq_s16(*v59, v58);
          v58.i16[0] = vmaxvq_u16((uint16x8_t)v54);
          if (v58.i32[0])
            goto LABEL_139;
        }
      }
      v17 = -1;
LABEL_144:
      v7 = v63;
      goto LABEL_31;
    }
    if (a3 > v13)
    {
      v14 = v6 - v13;
      if (v14 >= 0x10)
        v15 = 16;
      else
        v15 = v6 - v13;
      if (v15)
      {
        v16 = v15;
        result = (WTF::StringImpl *)((char *)a2 + v13);
        while (*(_BYTE *)result != 38)
        {
          result = (WTF::StringImpl *)((char *)result + 1);
          if (!--v16)
            goto LABEL_28;
        }
LABEL_30:
        v17 = result - a2;
        goto LABEL_31;
      }
LABEL_28:
      if (v14 >= 0x11)
      {
        result = (WTF::StringImpl *)memchr((char *)a2 + v13 + v15, 38, v14 - v15);
        if (result)
          goto LABEL_30;
      }
    }
    v17 = -1;
LABEL_31:
    if (v17 == -1)
      v18 = a3;
    else
      v18 = v17;
    if (v12 == v5)
      goto LABEL_59;
    v19 = v18 - v13;
    if (v18 == v13)
      goto LABEL_59;
    if (a3 <= v5)
    {
      v20 = 0x100000000;
      v22 = (WTF::StringImpl *)"";
    }
    else
    {
      LODWORD(v20) = v12 - v5;
      if ((int)a3 - (int)v5 > (v12 - v5))
        goto LABEL_38;
      v22 = a2;
      v20 = a3;
      if ((_DWORD)v5)
      {
        LODWORD(v20) = a3 - v5;
LABEL_38:
        v20 = v20;
        v21 = v6 - v5;
        if (v64)
        {
          if (v21 < v20)
            goto LABEL_146;
          v22 = (WTF::StringImpl *)((char *)a2 + v5);
          v20 = v20 | 0x100000000;
        }
        else
        {
          if (v21 < v20)
            goto LABEL_146;
          v22 = (WTF::StringImpl *)((char *)a2 + 2 * v5);
        }
      }
    }
    v65[0] = v22;
    v65[1] = (WTF::StringImpl *)v20;
    result = (WTF::StringImpl *)WTF::StringView::convertToASCIILowercase((WTF::StringView *)v65);
    if (a3 > v13)
    {
      if ((int)a3 - (int)v13 > v19)
        goto LABEL_46;
      result = a2;
      if ((_DWORD)v12 != -1)
      {
        v19 = a3 - v13;
LABEL_46:
        v23 = v6 - v13;
        if (v64)
        {
          if (v23 < v19)
            goto LABEL_146;
        }
        else if (v23 < v19)
        {
          goto LABEL_146;
        }
      }
    }
    WTF::makeStringByReplacingAll();
    if (!v66 || !*((_DWORD *)v66 + 1))
      goto LABEL_53;
    v7 = v63;
    if (!v65[0])
      goto LABEL_56;
    if (!*((_DWORD *)v65[0] + 1))
      goto LABEL_53;
    v27 = *v62;
    if (*v62
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v62, 8u, 0), (v27 = *v62) != 0))
    {
      v28 = *(_DWORD *)(v27 - 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = *((_DWORD *)v66 + 4);
    if (v29 < 0x100)
      v30 = WTF::StringImpl::hashSlowCase(v66);
    else
      v30 = v29 >> 8;
    v61 = 0;
    for (i = 1; ; ++i)
    {
      v32 = v30 & v28;
      v33 = (WTF **)(v27 + 16 * (v30 & v28));
      v34 = *v33;
      if (*v33 == (WTF *)-1)
      {
        v61 = (WTF **)(v27 + 16 * v32);
        goto LABEL_81;
      }
      if (!v34)
        break;
      if ((WTF::equal(v34, v66, v25) & 1) != 0)
        goto LABEL_53;
LABEL_81:
      v30 = i + v32;
    }
    if (v61)
    {
      *v61 = 0;
      v61[1] = 0;
      --*(_DWORD *)(*v62 - 16);
      v33 = v61;
    }
    v35 = v66;
    if (v66)
      *(_DWORD *)v66 += 2;
    *v33 = v35;
    v36 = v65[0];
    if (v65[0])
      *(_DWORD *)v65[0] += 2;
    v37 = v33[1];
    v33[1] = v36;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v24);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = *v62;
    if (*v62)
      v39 = *(_DWORD *)(v38 - 12) + 1;
    else
      v39 = 1;
    *(_DWORD *)(v38 - 12) = v39;
    v40 = *v62;
    if (*v62)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    v42 = (*(_DWORD *)(v40 - 16) + v41);
    v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 <= 2 * v42)
      {
LABEL_98:
        v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
        goto LABEL_101;
      }
    }
    else if (3 * v43 <= 4 * v42)
    {
      if ((_DWORD)v43)
        goto LABEL_98;
      v44 = 8;
LABEL_101:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v62, v44, v33);
    }
LABEL_53:
    v26 = v65[0];
    v65[0] = 0;
    v7 = v63;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
LABEL_56:
    result = v66;
    v66 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_59:
    v8 = v6 - (v17 + 1);
    v5 = v17 + 1;
  }
  while (v17 != -1);
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, _BYTE *a4, uint64_t a5)
{
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>>(&__dst[a3], a4, a5);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>>(_BYTE *result, _BYTE *a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  unsigned __int128 v5;
  char v6;

  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 1)
        *result = *a2;
      else
        return memcpy(result, a2, a3);
    }
  }
  else
  {
    v3 = &result[a3];
    if (a3 >= 0x10)
    {
      v4 = &result[a3 & 0xFFFFFFF0];
      do
      {
        v5 = (unsigned __int128)vld2q_s8(a2);
        a2 += 32;
        *(_OWORD *)result = v5;
        result += 16;
      }
      while (result != v4);
      result = v4;
    }
    while (result != v3)
    {
      v6 = *a2;
      a2 += 2;
      *result++ = v6;
    }
  }
  return result;
}

unsigned int *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int **v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int **v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;

  v2 = result;
  v4 = *(unsigned int ***)result;
  v5 = result[3];
  if ((_DWORD)v5)
  {
    v7 = &v4[v5];
    do
    {
      WTF::String::isolatedCopy();
      v9 = (unsigned int *)v10;
      v10 = 0;
      result = *v4;
      *v4 = v9;
      if (result)
      {
        if (*result == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
          result = 0;
          v10 = 0;
        }
        else
        {
          *result -= 2;
        }
      }
      ++v4;
    }
    while (v4 < v7);
    v4 = *(unsigned int ***)v2;
    LODWORD(v5) = v2[3];
  }
  *(_QWORD *)a2 = v4;
  v6 = v2[2];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

void WebCore::PushRecord::~PushRecord(WebCore::PushRecord *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = (WTF *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
}

JSC::ArrayBufferView *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_0,WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_1,WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &>@<X0>(JSC::ArrayBufferView **a1@<X1>, uint64_t a2@<X8>)
{
  JSC::ArrayBufferView *result;
  WTF *v4;
  WTF *v5;
  JSC::ArrayBufferView *v6;
  char v7;

  result = *a1;
  if (*a1)
  {
    result = (JSC::ArrayBufferView *)JSC::ArrayBufferView::span(result);
    v5 = v4;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = (_DWORD)v4;
    if (v4)
    {
      if ((unint64_t)v4 >> 32)
      {
        __break(0xC471u);
      }
      else
      {
        v6 = result;
        result = (JSC::ArrayBufferView *)WTF::fastMalloc(v4);
        *(_DWORD *)(a2 + 8) = (_DWORD)v5;
        *(_QWORD *)a2 = result;
        do
        {
          v7 = *(_BYTE *)v6;
          v6 = (JSC::ArrayBufferView *)((char *)v6 + 1);
          *(_BYTE *)result = v7;
          result = (JSC::ArrayBufferView *)((char *)result + 1);
          v5 = (WTF *)((char *)v5 - 1);
        }
        while (v5);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_0,WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_1,WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v5)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          v4 = (v4 & 0x3FFFFFFFFLL) + v5;
      }
    }
    if (*(_BYTE *)(v3 + 64) && (v9 = *(_QWORD *)(v3 + 32)) != 0)
      v6 = *(WTF **)(v9 + 32);
    else
      v6 = *(WTF **)(v3 + 48);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = (_DWORD)v6;
    if (v6)
    {
      if ((unint64_t)v6 >> 32)
      {
        __break(0xC471u);
      }
      else
      {
        v7 = (_BYTE *)WTF::fastMalloc(v6);
        *(_DWORD *)(a2 + 8) = (_DWORD)v6;
        *(_QWORD *)a2 = v7;
        do
        {
          v8 = *(_BYTE *)v4++;
          *v7++ = v8;
          v6 = (WTF *)((char *)v6 - 1);
        }
        while (v6);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_0,WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_1,WebCore::dataFromPushMessageDataInit(std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::String> &>@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  WTF *result;
  WTF *v4;
  char *v5;
  _BYTE *v6;
  char v7;
  WTF *v8;

  WTF::String::utf8();
  result = v8;
  if (!v8)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return result;
  }
  v4 = (WTF *)*((_QWORD *)v8 + 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = (_DWORD)v4;
  if (v4)
  {
    if ((unint64_t)v4 >> 32)
    {
      __break(0xC471u);
      return result;
    }
    v5 = (char *)v8 + 16;
    v6 = (_BYTE *)WTF::fastMalloc(v4);
    *(_DWORD *)(a1 + 8) = (_DWORD)v4;
    *(_QWORD *)a1 = v6;
    do
    {
      v7 = *v5++;
      *v6++ = v7;
      v4 = (WTF *)((char *)v4 - 1);
    }
    while (v4);
    result = v8;
  }
  if (*(_DWORD *)result == 1)
    return (WTF *)WTF::fastFree(result, v2);
  --*(_DWORD *)result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::create(WTF::String const&,WTF::CompletionHandler<void ()(std::unique_ptr<WebCore::PushDatabase> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E3365630;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::create(WTF::String const&,WTF::CompletionHandler<void ()(std::unique_ptr<WebCore::PushDatabase> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3365630;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::create(WTF::String const&,WTF::CompletionHandler<void ()(std::unique_ptr<WebCore::PushDatabase> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  WTF::StringImpl **v2;
  const WTF::String *v3;
  NSObject *v4;
  WTF *v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  unsigned int v14;
  _BOOL4 v16;
  WTF **v17;
  WTF **v18;
  uint64_t v19;
  uint64_t v20;
  WTF **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  WTF *v34;
  WebCore *v35;
  const WTF::String *v36;
  char v37[8];
  unsigned int v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  int v42;
  char v43;
  _BYTE buf[24];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = (WTF::StringImpl **)(a1 + 2);
  WebCore::openAndMigrateDatabaseImpl((WebCore *)&v39, (const WTF::String *)(a1 + 2));
  if (!v40)
  {
LABEL_49:
    v11 = 0;
    v10 = v39;
    v39 = 0;
    goto LABEL_50;
  }
  if (v40 != 1)
  {
    v35 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::openAndMigrateDatabaseImpl(v35, v36);
    return;
  }
  if (!(_BYTE)v39)
    goto LABEL_10;
  if ((MEMORY[0x19AEA53F4](*v2, ":memory:", 8) & 1) != 0
    || (WebCore::SQLiteFileSystem::deleteDatabaseFile(v2, v3) & 1) == 0)
  {
    v9 = off_1ECE7C7C0;
    if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (v41)
        v30 = (char *)v41 + 16;
      else
        v30 = 0;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v30;
      _os_log_error_impl(&dword_1940B8000, v9, OS_LOG_TYPE_ERROR, "Failed to delete PushDatabase at path %s; bailing on recreating from scratch",
        buf,
        0xCu);
      v5 = v41;
      v41 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
          v5 = (WTF *)WTF::fastFree(v5, v31);
        else
          --*(_DWORD *)v5;
      }
      v11 = v40;
      goto LABEL_61;
    }
LABEL_10:
    v10 = 0;
    v11 = 1;
LABEL_50:
    v5 = (WTF *)((uint64_t (*)(_BYTE *, uint64_t *))off_1E3365748[v11])(buf, &v39);
    goto LABEL_51;
  }
  v4 = off_1ECE7C7C0;
  if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
  {
    WTF::String::utf8();
    v32 = v41 ? (char *)v41 + 16 : 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v32;
    _os_log_error_impl(&dword_1940B8000, v4, OS_LOG_TYPE_ERROR, "Deleted PushDatabase at path %s and recreating from scratch", buf, 0xCu);
    v34 = v41;
    v41 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v33);
      else
        --*(_DWORD *)v34;
    }
  }
  WebCore::openAndMigrateDatabaseImpl((WebCore *)v37, (const WTF::String *)v2);
  LOBYTE(v41) = 0;
  v42 = -1;
  v6 = v38;
  if (v38 == -1)
  {
    v7 = v40;
    v8 = v40 == -1;
    if (v40 == -1)
      goto LABEL_46;
  }
  else
  {
    v5 = (WTF *)((uint64_t (*)(_BYTE *, WTF **, char *))off_1E3365758[v38])(buf, &v41, v37);
    v42 = v6;
    v7 = v40;
    v8 = v40 == -1;
  }
  if ((_DWORD)v6 == -1)
    v12 = -1;
  else
    v12 = v6;
  if (v8)
    v13 = v6 == -1;
  else
    v13 = v12 == v7;
  if (v13)
  {
    v5 = (WTF *)((uint64_t (*)(_BYTE *, WTF **, uint64_t *))off_1E3365768[v12])(buf, &v41, &v39);
  }
  else
  {
    v14 = v7 + 1;
    v16 = (v6 - 2) < 0xFFFFFFFD || v14 < 3;
    if (v16)
      v17 = &v41;
    else
      v17 = (WTF **)&v39;
    if (v16)
      v18 = (WTF **)&v39;
    else
      v18 = &v41;
    buf[0] = 0;
    *(_DWORD *)&buf[8] = -1;
    v19 = *((unsigned int *)v18 + 2);
    if ((_DWORD)v19 != -1)
    {
      v5 = (WTF *)((uint64_t (*)(char *, _BYTE *, WTF **))off_1E3365758[v19])(&v43, buf, v18);
      *(_DWORD *)&buf[8] = v19;
      v20 = *((unsigned int *)v18 + 2);
      if ((_DWORD)v20 != -1)
        v5 = (WTF *)((uint64_t (*)(char *, WTF **))off_1E3365748[v20])(&v43, v18);
    }
    *((_DWORD *)v18 + 2) = -1;
    if (v16)
      v21 = &v41;
    else
      v21 = (WTF **)&v39;
    v22 = *((unsigned int *)v21 + 2);
    if ((_DWORD)v22 != -1)
    {
      v5 = (WTF *)((uint64_t (*)(char *, WTF **, WTF **))off_1E3365778[v22])(&v43, v18, v17);
      *((_DWORD *)v18 + 2) = v22;
      v23 = *((unsigned int *)v21 + 2);
      if ((_DWORD)v23 != -1)
        v5 = (WTF *)((uint64_t (*)(char *, WTF **))off_1E3365748[v23])(&v43, v17);
    }
    *((_DWORD *)v21 + 2) = -1;
    v24 = *(_DWORD *)&buf[8];
    if (*(_DWORD *)&buf[8] != -1)
    {
      v5 = (WTF *)((uint64_t (*)(char *, WTF **, _BYTE *))off_1E3365778[*(unsigned int *)&buf[8]])(&v43, v17, buf);
      *((_DWORD *)v21 + 2) = v24;
      if (*(_DWORD *)&buf[8] != -1)
        v5 = (WTF *)((uint64_t (*)(char *, _BYTE *))off_1E3365748[*(unsigned int *)&buf[8]])(&v43, buf);
    }
  }
  if (v42 != -1)
    v5 = (WTF *)((uint64_t (*)(_BYTE *, WTF **))off_1E3365748[v42])(buf, &v41);
LABEL_46:
  if (v38 != -1)
    v5 = (WTF *)((uint64_t (*)(_BYTE *, char *))off_1E3365748[v38])(buf, v37);
  v11 = v40;
  if (!v40)
    goto LABEL_49;
LABEL_61:
  v10 = 0;
  if (v11 != -1)
    goto LABEL_50;
LABEL_51:
  v25 = WTF::WorkQueue::main(v5);
  v26 = a1[1];
  a1[1] = 0;
  v27 = a1[3];
  a1[3] = 0;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v28 = &off_1E3365798;
  v28[1] = v26;
  v28[2] = v10;
  v28[3] = v27;
  *(_QWORD *)buf = v28;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 32))(v25, buf);
  v29 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
}

void WebCore::openAndMigrateDatabaseImpl(WebCore *this, const WTF::String *a2)
{
  const WTF::String *v4;
  const WTF::String *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  char AllDirectories;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  NSObject *v13;
  WebCore::SQLiteDatabaseTracker *v14;
  int v15;
  int v16;
  const WTF::String *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  char ***v29;
  char **v30;
  uint64_t v31;
  const char *v32;
  uint64_t v34;
  char *v35;
  char v36;
  WTF::StringImpl *v37;
  char v38;
  NSObject *v39;
  NSObject *v40;
  void *v41;
  WTF *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  void *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  NSObject *v53;
  WebCore::SQLiteDatabaseTracker *v54;
  unsigned __int8 *v55;
  uint64_t v57;
  void *v58;
  WTF *v59;
  uint64_t v60;
  sqlite3 *v61;
  int v62;
  void *v63;
  WebCore::SQLiteDatabaseTracker *v64;
  int v65;
  int v66;
  WebCore::SQLiteDatabaseTracker *v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  sqlite3 *v71;
  int v72;
  void *v73;
  WTF *v74;
  _BYTE buf[24];
  int v76;
  _BYTE v77[24];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, ":memory:", 8) & 1) != 0
    || (WTF::FileSystemImpl::fileExists(a2, v4) & 1) != 0)
  {
    goto LABEL_7;
  }
  WTF::FileSystemImpl::parentPath(a2, v5);
  AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)buf, v6);
  v9 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (!v9)
    goto LABEL_6;
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, v7);
    if ((AllDirectories & 1) == 0)
      goto LABEL_85;
LABEL_7:
    v10 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 16) = -1;
    *(_WORD *)(v10 + 20) = 0;
    *(_BYTE *)(v10 + 22) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_BYTE *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 0;
    *(_DWORD *)(v10 + 52) = 1;
    *(_QWORD *)(v10 + 56) = 0;
    if ((WebCore::SQLiteDatabase::open(v10, a2, 2u, 0) & 1) == 0)
    {
      v13 = off_1ECE7C7C0;
      if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
      {
        WTF::String::utf8();
        if (*(_QWORD *)v77)
          v48 = *(_QWORD *)v77 + 16;
        else
          v48 = 0;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v48;
        v23 = "Couldn't open PushDatabase at path %s";
        v24 = v13;
        v25 = 12;
LABEL_75:
        _os_log_error_impl(&dword_1940B8000, v24, OS_LOG_TYPE_ERROR, v23, buf, v25);
        v50 = *(WTF **)v77;
        *(_QWORD *)v77 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1)
            WTF::fastFree(v50, v49);
          else
            --*(_DWORD *)v50;
        }
      }
LABEL_12:
      *(_BYTE *)this = 1;
      *((_DWORD *)this + 2) = 1;
LABEL_59:
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v10);
      v42 = *(WTF **)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
          WTF::fastFree(v42, v41);
        else
          --*(_DWORD *)v42;
      }
      v43 = *(unsigned int **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = 0;
      if (v43)
      {
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v43);
          WTF::Thread::~Thread((WTF::Thread *)v43);
          WTF::fastFree(v68, v69);
        }
      }
      v46 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      if (v46)
        WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v46, (WTF::StringImpl *)v41);
      if (atomic_load((unsigned int *)v10))
      {
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)v10 = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, v41);
      }
      return;
    }
    WebCore::SQLiteDatabase::prepareStatement(v10, "PRAGMA user_version", 20, (uint64_t)buf);
    if (*(_DWORD *)&buf[16])
      goto LABEL_29;
    v11 = (unsigned __int8 *)(*(_QWORD *)buf + 32);
    if (__ldaxr((unsigned __int8 *)(*(_QWORD *)buf + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
LABEL_15:
      if (*(_BYTE *)(*(_QWORD *)buf + 20)
        || (v14 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(*(sqlite3_stmt **)&buf[8]), (_DWORD)v14))
      {
        v15 = sqlite3_step(*(sqlite3_stmt **)&buf[8]);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v14);
        v54 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(*(sqlite3_stmt **)&buf[8]);
        v15 = (int)v54;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v54);
      }
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
        {
LABEL_23:
          if (v15 == 100)
          {
            if (*(_DWORD *)&buf[16])
            {
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_137;
            }
            if (sqlite3_stmt_busy(*(sqlite3_stmt **)&buf[8]))
            {
LABEL_26:
              if (sqlite3_data_count(*(sqlite3_stmt **)&buf[8]) >= 1)
              {
                LODWORD(v18) = sqlite3_column_int(*(sqlite3_stmt **)&buf[8], 0);
LABEL_28:
                v19 = 1;
LABEL_31:
                if (*(_DWORD *)&buf[16] != -1)
                  ((void (*)(_BYTE *, _BYTE *))off_1E3365698[*(unsigned int *)&buf[16]])(v77, buf);
                if (!v19)
                  goto LABEL_59;
                if (v18 >= 6)
                {
                  v21 = off_1ECE7C7C0;
                  if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
                  {
                    WTF::String::utf8();
                    if (*(_QWORD *)v77)
                      v22 = *(_QWORD *)v77 + 16;
                    else
                      v22 = 0;
                    *(_DWORD *)buf = 67109634;
                    *(_DWORD *)&buf[4] = v18;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = 5;
                    *(_WORD *)&buf[14] = 2080;
                    *(_QWORD *)&buf[16] = v22;
                    v23 = "Found unexpected PushDatabase version: %d (expected: %d) at path: %s";
                    v24 = v21;
                    v25 = 24;
                    goto LABEL_75;
                  }
                  goto LABEL_12;
                }
                if ((_DWORD)v18 == 5)
                {
LABEL_41:
                  *(_QWORD *)this = v10;
                  *((_DWORD *)this + 2) = 0;
                  return;
                }
                WTF::FileSystemImpl::parentPath(a2, v17);
                WTF::FileSystemImpl::setExcludedFromBackup((WTF::FileSystemImpl *)buf, (const WTF::String *)1);
                v27 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2)
                    WTF::StringImpl::destroy(v27, v26);
                  else
                    *(_DWORD *)v27 -= 2;
                }
                *(_QWORD *)v77 = v10;
                do
                  v28 = __ldaxr((unsigned int *)v10);
                while (__stlxr(v28 + 1, (unsigned int *)v10));
                *(_WORD *)&v77[8] = 0;
                WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)v77);
                v18 = v18;
                while (2)
                {
                  v29 = &(&WebCore::pushDatabaseSchemaStatements)[2 * v18];
                  v30 = *v29;
                  v31 = (uint64_t)&(*v29)[2 * (_QWORD)v29[1]];
                  do
                  {
                    v32 = *v30;
                    if ((WebCore::SQLiteDatabase::executeCommand(v10, *v30, (int)v30[1]) & 1) == 0)
                    {
                      v40 = off_1ECE7C7C0;
                      if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
                      {
                        WTF::String::utf8();
                        v60 = v74 ? (uint64_t)v74 + 16 : 0;
                        v61 = *(sqlite3 **)(v10 + 8);
                        v62 = v61 ? sqlite3_errcode(v61) : *(_DWORD *)(v10 + 52);
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = v32;
                        *(_WORD *)&buf[12] = 2080;
                        *(_QWORD *)&buf[14] = v60;
                        *(_WORD *)&buf[22] = 1024;
                        v76 = v62;
                        _os_log_error_impl(&dword_1940B8000, v40, OS_LOG_TYPE_ERROR, "Error executing PushDatabase DDL statement %s at path %s: %d", buf, 0x1Cu);
                        if (v74)
                        {
                          if (*(_DWORD *)v74 == 1)
                            WTF::fastFree(v74, v63);
                          else
                            --*(_DWORD *)v74;
                        }
                      }
                      *(_BYTE *)this = 1;
                      *((_DWORD *)this + 2) = 1;
                      WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)v77);
                      goto LABEL_59;
                    }
                    v30 += 2;
                  }
                  while (v30 != (char **)v31);
                  if ((int)v18++ < 4)
                    continue;
                  break;
                }
                WTF::tryFastCompactMalloc((WTF *)0x2B);
                v34 = *(_QWORD *)buf;
                if (*(_QWORD *)buf)
                {
                  v35 = (char *)(*(_QWORD *)buf + 20);
                  **(_QWORD **)buf = 0x1700000002;
                  *(_QWORD *)(v34 + 8) = v34 + 20;
                  *(_DWORD *)(v34 + 16) = 4;
                  qmemcpy((void *)(v34 + 20), "PRAGMA user_version = 5", 23);
                  v36 = WebCore::SQLiteDatabase::executeCommandSlow((WTF *)v10, v35, 0x100000017uLL);
                  v38 = v36;
                  if (*(_DWORD *)v34 == 2)
                  {
                    WTF::StringImpl::destroy((WTF::StringImpl *)v34, v37);
                    if ((v38 & 1) == 0)
                    {
LABEL_55:
                      v39 = off_1ECE7C7C0;
                      if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
                      {
                        WTF::String::utf8();
                        v70 = v74 ? (uint64_t)v74 + 16 : 0;
                        v71 = *(sqlite3 **)(v10 + 8);
                        v72 = v71 ? sqlite3_errcode(v71) : *(_DWORD *)(v10 + 52);
                        *(_DWORD *)buf = 136315394;
                        *(_QWORD *)&buf[4] = v70;
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v72;
                        _os_log_error_impl(&dword_1940B8000, v39, OS_LOG_TYPE_ERROR, "Error setting user version for PushDatabase at path %s: %d", buf, 0x12u);
                        if (v74)
                        {
                          if (*(_DWORD *)v74 == 1)
                            WTF::fastFree(v74, v73);
                          else
                            --*(_DWORD *)v74;
                        }
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)v34 -= 2;
                    if ((v36 & 1) == 0)
                      goto LABEL_55;
                  }
                  WebCore::SQLiteTransaction::commit((uint64_t)v77);
                  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)v77);
                  goto LABEL_41;
                }
LABEL_137:
                __break(0xC471u);
                return;
              }
LABEL_116:
              LODWORD(v18) = 0;
              goto LABEL_28;
            }
            v55 = (unsigned __int8 *)(*(_QWORD *)buf + 32);
            if (__ldaxr((unsigned __int8 *)(*(_QWORD *)buf + 32)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v55))
            {
LABEL_107:
              if (*(_BYTE *)(*(_QWORD *)buf + 20)
                || (v64 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(*(sqlite3_stmt **)&buf[8]), (_DWORD)v64))
              {
                v65 = sqlite3_step(*(sqlite3_stmt **)&buf[8]);
              }
              else
              {
                WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v64);
                v67 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(*(sqlite3_stmt **)&buf[8]);
                v65 = (int)v67;
                WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v67);
              }
              v66 = __ldxr(v55);
              if (v66 == 1)
              {
                if (!__stlxr(0, v55))
                {
LABEL_115:
                  if (v65 != 100)
                    goto LABEL_116;
                  goto LABEL_26;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v55);
              goto LABEL_115;
            }
            MEMORY[0x19AEA534C](v55);
            goto LABEL_107;
          }
LABEL_29:
          v20 = off_1ECE7C7C0;
          if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
          {
            WTF::String::utf8();
            v51 = v74 ? (uint64_t)v74 + 16 : 0;
            *(_DWORD *)v77 = 136315138;
            *(_QWORD *)&v77[4] = v51;
            _os_log_error_impl(&dword_1940B8000, v20, OS_LOG_TYPE_ERROR, "Couldn't get PushDatabase version at path %s", v77, 0xCu);
            v52 = v74;
            v74 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 1)
                WTF::fastFree(v52, v17);
              else
                --*(_DWORD *)v52;
            }
          }
          LODWORD(v18) = 0;
          v19 = 0;
          *(_BYTE *)this = 1;
          *((_DWORD *)this + 2) = 1;
          goto LABEL_31;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v11);
    goto LABEL_15;
  }
  *(_DWORD *)v9 -= 2;
LABEL_6:
  if ((AllDirectories & 1) != 0)
    goto LABEL_7;
LABEL_85:
  v53 = off_1ECE7C7C0;
  if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
  {
    WTF::String::utf8();
    v57 = *(_QWORD *)v77 ? *(_QWORD *)v77 + 16 : 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v57;
    _os_log_error_impl(&dword_1940B8000, v53, OS_LOG_TYPE_ERROR, "Couldn't create PushDatabase parent directories for path %s", buf, 0xCu);
    v59 = *(WTF **)v77;
    *(_QWORD *)v77 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1)
        WTF::fastFree(v59, v58);
      else
        --*(_DWORD *)v59;
    }
  }
  *(_BYTE *)this = 0;
  *((_DWORD *)this + 2) = 1;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore14SQLiteDatabaseEEENSA_20ShouldDeleteAndRetryEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  double result;
  WTF *v11;
  void *v12;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v2);
    v4 = *(WTF **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, v3);
      else
        --*(_DWORD *)v4;
    }
    v5 = *(unsigned int **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::Thread::~Thread((WTF::Thread *)v5);
        WTF::fastFree(v11, v12);
      }
    }
    v8 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v8)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v8, (WTF::StringImpl *)v3);
    if (atomic_load((unsigned int *)v2))
    {
      result = 0.0;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_OWORD *)(v2 + 48) = 0u;
      *(_OWORD *)v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v2, v3);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore14SQLiteDatabaseEEENSA_20ShouldDeleteAndRetryEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore14SQLiteDatabaseEEENSA_20ShouldDeleteAndRetryEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9UniqueRefIN7WebCore14SQLiteDatabaseEEENS9_20ShouldDeleteAndRetryEEE6__swapB8sn180100ERSD_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SC_EEESO_EEEDcSF_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  double result;
  uint64_t v15;
  void *v16;
  WTF *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = *a2;
  *a2 = v5;
  if (v6)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v6);
    v8 = *(WTF **)(v6 + 56);
    *(_QWORD *)(v6 + 56) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v7);
      else
        --*(_DWORD *)v8;
    }
    v9 = *(unsigned int **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::Thread::~Thread((WTF::Thread *)v9);
        WTF::fastFree(v23, v24);
      }
    }
    v12 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    if (v12)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v12, (WTF::StringImpl *)v7);
    if (atomic_load((unsigned int *)v6))
    {
      result = 0.0;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v6, v7);
    }
  }
  v15 = *a3;
  *a3 = v4;
  if (v15)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v15);
    v17 = *(WTF **)(v15 + 56);
    *(_QWORD *)(v15 + 56) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v16);
      else
        --*(_DWORD *)v17;
    }
    v18 = *(unsigned int **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::Thread::~Thread((WTF::Thread *)v18);
        WTF::fastFree(v25, v26);
      }
    }
    v21 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    if (v21)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v21, (WTF::StringImpl *)v16);
    if (atomic_load((unsigned int *)v15))
    {
      result = 0.0;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v15, v16);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9UniqueRefIN7WebCore14SQLiteDatabaseEEENS9_20ShouldDeleteAndRetryEEE6__swapB8sn180100ERSD_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SC_EEESO_EEEDcSF_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore14SQLiteDatabaseEEENSA_20ShouldDeleteAndRetryEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SD_EEEEEvRSF_OT_EUlRSK_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEOST_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore14SQLiteDatabaseEEENSA_20ShouldDeleteAndRetryEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SD_EEEEEvRSF_OT_EUlRSK_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEOST_EEEDcSK_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::create(WTF::String const&,WTF::CompletionHandler<void ()(std::unique_ptr<WebCore::PushDatabase> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  WTF *v13;
  void *v14;

  *a1 = &off_1E3365798;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v3);
    v5 = *(WTF **)(v3 + 56);
    *(_QWORD *)(v3 + 56) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, v4);
      else
        --*(_DWORD *)v5;
    }
    v6 = *(unsigned int **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::Thread::~Thread((WTF::Thread *)v6);
        WTF::fastFree(v13, v14);
      }
    }
    v9 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v9)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v9, (WTF::StringImpl *)v4);
    if (atomic_load((unsigned int *)v3))
    {
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v3, v4);
    }
  }
  v11 = a1[1];
  a1[1] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::create(WTF::String const&,WTF::CompletionHandler<void ()(std::unique_ptr<WebCore::PushDatabase> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  WTF *v13;
  void *v14;

  *(_QWORD *)this = &off_1E3365798;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v4);
    v5 = *(WTF **)(v4 + 56);
    *(_QWORD *)(v4 + 56) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    v6 = *(unsigned int **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::Thread::~Thread((WTF::Thread *)v6);
        WTF::fastFree(v13, v14);
      }
    }
    v9 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    if (v9)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v9, (WTF::StringImpl *)a2);
    if (atomic_load((unsigned int *)v4))
    {
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
  return WTF::fastFree(this, a2);
}

WebCore::PushDatabase *WTF::Detail::CallableWrapper<WebCore::PushDatabase::create(WTF::String const&,WTF::CompletionHandler<void ()(std::unique_ptr<WebCore::PushDatabase> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebCore::PushDatabase *v2;
  __int128 v3;
  uint64_t v4;
  WebCore::PushDatabase *result;
  WTF *v6;
  void *v7;
  WebCore::PushDatabase *v8;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = (WebCore::PushDatabase *)WTF::fastMalloc((WTF *)0x18);
    v3 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)v2 = v3;
    *((_QWORD *)v2 + 2) = 0;
    v8 = v2;
  }
  else
  {
    v8 = 0;
  }
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, WebCore::PushDatabase **))(*(_QWORD *)v4 + 16))(v4, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = v8;
  v8 = 0;
  if (result)
  {
    WebCore::PushDatabase::~PushDatabase(result);
    return (WebCore::PushDatabase *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::~PushDatabase()::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  sqlite3_stmt **v7;
  void *v8;
  unsigned int *v9;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v21;
  void *v22;

  *a1 = &off_1E33657E8;
  v3 = a1[2];
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -1)
        {
          v6 = v3 + 24 * i;
          v7 = *(sqlite3_stmt ***)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v7)
          {
            sqlite3_finalize(v7[1]);
            v9 = (unsigned int *)*v7;
            *v7 = 0;
            if (v9)
            {
              if (!atomic_load(v9))
              {
                __break(0xC471u);
                JUMPOUT(0x1954F240CLL);
              }
              do
                v11 = __ldaxr(v9);
              while (__stlxr(v11 - 1, v9));
            }
            WTF::fastFree((WTF *)v7, v8);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v12 = a1[1];
  a1[1] = 0;
  if (v12)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v12);
    v14 = *(WTF **)(v12 + 56);
    *(_QWORD *)(v12 + 56) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v13);
      else
        --*(_DWORD *)v14;
    }
    v15 = *(unsigned int **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::Thread::~Thread((WTF::Thread *)v15);
        WTF::fastFree(v21, v22);
      }
    }
    v18 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    if (v18)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v18, (WTF::StringImpl *)v13);
    if (atomic_load((unsigned int *)v12))
    {
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v12, v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::~PushDatabase()::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  sqlite3_stmt **v7;
  void *v8;
  unsigned int *v9;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v20;
  void *v21;

  *(_QWORD *)this = &off_1E33657E8;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -1)
        {
          v6 = v3 + 24 * i;
          v7 = *(sqlite3_stmt ***)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v7)
          {
            sqlite3_finalize(v7[1]);
            v9 = (unsigned int *)*v7;
            *v7 = 0;
            if (v9)
            {
              if (!atomic_load(v9))
              {
                __break(0xC471u);
                JUMPOUT(0x1954F2584);
              }
              do
                v11 = __ldaxr(v9);
              while (__stlxr(v11 - 1, v9));
            }
            WTF::fastFree((WTF *)v7, v8);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v12);
    v13 = *(WTF **)(v12 + 56);
    *(_QWORD *)(v12 + 56) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, a2);
      else
        --*(_DWORD *)v13;
    }
    v14 = *(unsigned int **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::Thread::~Thread((WTF::Thread *)v14);
        WTF::fastFree(v20, v21);
      }
    }
    v17 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    if (v17)
      WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v17, (WTF::StringImpl *)a2);
    if (atomic_load((unsigned int *)v12))
    {
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::~PushDatabase()::$_1,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  void *v8;
  unsigned int *v9;
  unsigned int v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    goto LABEL_12;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v4)
  {
LABEL_11:
    WTF::fastFree((WTF *)(v3 - 16), a2);
LABEL_12:
    WebCore::SQLiteDatabase::close(*(WebCore::SQLiteDatabase **)(a1 + 8));
    return;
  }
  v5 = 0;
  while (1)
  {
    if (*(_QWORD *)(v3 + 24 * v5) == -1)
      goto LABEL_10;
    v6 = v3 + 24 * v5;
    v7 = *(sqlite3_stmt ***)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0;
    if (!v7)
      goto LABEL_10;
    sqlite3_finalize(v7[1]);
    v9 = (unsigned int *)*v7;
    *v7 = 0;
    if (v9)
      break;
LABEL_9:
    WTF::fastFree((WTF *)v7, v8);
LABEL_10:
    if (++v5 == v4)
      goto LABEL_11;
  }
  if (atomic_load(v9))
  {
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    goto LABEL_9;
  }
  __break(0xC471u);
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::UniqueRef<WebCore::SQLiteStatement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::UniqueRef<WebCore::SQLiteStatement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  sqlite3_stmt **v14;
  void *v15;
  unsigned int *v16;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  sqlite3_stmt **v37;
  sqlite3_stmt **v38;
  void *v39;
  unsigned int *v40;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v47;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (unsigned __int8 **)(v4 + 24 * v9);
      v12 = *v11;
      if (*v11 != (unsigned __int8 *)-1)
      {
        if (v12)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = v11[1];
          if (v21)
          {
            v22 = -1640531527;
            v23 = (_DWORD)v21 - 1;
            if (v23)
            {
              if (v23 == 1)
                goto LABEL_23;
              v24 = v23 >> 1;
              v25 = *v11;
              do
              {
                v26 = v22 + *v25;
                v27 = (v26 << 16) ^ (v25[1] << 11);
                v22 = (v27 ^ v26) + ((v27 ^ v26) >> 11);
                v25 += 2;
                --v24;
              }
              while (v24);
              if ((v23 & 1) != 0)
              {
                v12 += 2 * (v23 >> 1);
LABEL_23:
                v28 = (v22 + *v12) ^ ((v22 + *v12) << 11);
                v22 = v28 + (v28 >> 17);
              }
            }
            v29 = (v22 ^ (8 * v22)) + ((v22 ^ (8 * v22)) >> 5);
            v30 = (v29 ^ (4 * v29)) + ((v29 ^ (4 * v29)) >> 15);
            v31 = v30 ^ (v30 << 10);
            if (!v31)
              v31 = 0x800000;
          }
          else
          {
            v31 = 0;
          }
          v32 = 0;
          do
          {
            v33 = v31 & v20;
            v34 = (_QWORD *)(v19 + 24 * (v31 & v20));
            v31 = ++v32 + (v31 & v20);
          }
          while (*v34);
          v35 = v19 + 24 * v33;
          v38 = *(sqlite3_stmt ***)(v35 + 16);
          v36 = (_QWORD *)(v35 + 16);
          v37 = v38;
          *v36 = 0;
          if (v38)
          {
            sqlite3_finalize(v37[1]);
            v40 = (unsigned int *)*v37;
            *v37 = 0;
            if (v40)
            {
              if (!atomic_load(v40))
              {
                __break(0xC471u);
                JUMPOUT(0x1954F2974);
              }
              do
                v42 = __ldaxr(v40);
              while (__stlxr(v42 - 1, v40));
            }
            WTF::fastFree((WTF *)v37, v39);
          }
          *(_OWORD *)v34 = *(_OWORD *)v11;
          v43 = v4 + 24 * v9;
          v44 = *(_QWORD *)(v43 + 16);
          *(_QWORD *)(v43 + 16) = 0;
          *v36 = v44;
          v14 = *(sqlite3_stmt ***)(v43 + 16);
          *(_QWORD *)(v43 + 16) = 0;
          if (!v14)
            goto LABEL_38;
          sqlite3_finalize(v14[1]);
          v45 = (unsigned int *)*v14;
          *v14 = 0;
          if (v45)
          {
            if (!atomic_load(v45))
            {
LABEL_46:
              __break(0xC471u);
              JUMPOUT(0x1954F2954);
            }
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
          }
          goto LABEL_37;
        }
        v13 = v4 + 24 * v9;
        v14 = *(sqlite3_stmt ***)(v13 + 16);
        *(_QWORD *)(v13 + 16) = 0;
        if (v14)
        {
          sqlite3_finalize(v14[1]);
          v16 = (unsigned int *)*v14;
          *v14 = 0;
          if (v16)
          {
            if (!atomic_load(v16))
              goto LABEL_46;
            do
              v18 = __ldaxr(v16);
            while (__stlxr(v18 - 1, v16));
          }
LABEL_37:
          WTF::fastFree((WTF *)v14, v15);
        }
      }
LABEL_38:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::updatePublicToken(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(WebCore::PushDatabase::PublicTokenChanged)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E3365810;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::updatePublicToken(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(WebCore::PushDatabase::PublicTokenChanged)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E3365810;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::updatePublicToken(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(WebCore::PushDatabase::PublicTokenChanged)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WTF::WorkQueue *v5;
  sqlite3_stmt **v6;
  void *v7;
  unsigned int v8;
  sqlite3_stmt **v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  NSObject *v14;
  sqlite3_stmt *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  sqlite3_stmt **v23;
  char v24;
  uint64_t v25;
  sqlite3 *v26;
  int v27;
  sqlite3 *v28;
  const char *v29;
  WTF::WorkQueue *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  __int16 v34;
  WebCore::SQLiteStatement *v35;
  _BYTE buf[12];
  _BYTE v37[6];
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(v2 + 8);
  v33 = v3;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v34 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v33);
  WebCore::PushDatabase::bindStatementOnQueue<WTF::ASCIILiteral const&>((sqlite3_stmt ***)&v35, v2);
  v6 = (sqlite3_stmt **)v35;
  if (!v35)
  {
    v7 = 0;
    goto LABEL_22;
  }
  if (WebCore::SQLiteStatement::step((sqlite3_stmt **)v35) == 100)
  {
    WebCore::SQLiteStatement::columnBlob(v6, 0, (uint64_t)buf);
    v7 = *(void **)buf;
    v8 = *(_DWORD *)v37;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  sqlite3_reset(v6[1]);
  sqlite3_clear_bindings(v6[1]);
  if (v8 == *(_DWORD *)(a1 + 28))
  {
    v5 = (WTF::WorkQueue *)memcmp(v7, *(const void **)(a1 + 16), v8);
    if (!(_DWORD)v5)
      goto LABEL_22;
  }
  WebCore::PushDatabase::cachedStatementOnQueue((sqlite3_stmt ***)&v35, v2, "REPLACE INTO Metadata(key, value) VALUES(?, ?)", (const char *)0x2F);
  v9 = (sqlite3_stmt **)v35;
  if (!v35 || WebCore::SQLiteStatement::bindText((uint64_t)v35, 1, "publicToken", 0x10000000BLL))
    goto LABEL_18;
  v10 = *(_DWORD *)(a1 + 28);
  if (v10)
  {
    v11 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 28));
    memcpy(v11, *(const void **)(a1 + 16), *(unsigned int *)(a1 + 28));
  }
  else
  {
    v11 = 0;
  }
  v13 = sqlite3_bind_blob(v9[1], 2, v11, v10, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v11)
    WTF::fastFree((WTF *)v11, v12);
  if (v13)
  {
LABEL_18:
    v14 = off_1ECE7C7C0;
    v5 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)v5)
    {
      if (v9)
      {
LABEL_20:
        sqlite3_reset(v9[1]);
        v15 = v9[1];
LABEL_21:
        v5 = (WTF::WorkQueue *)sqlite3_clear_bindings(v15);
      }
LABEL_22:
      v16 = WTF::WorkQueue::main(v5);
      v17 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      v18 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v18 = &off_1E3365838;
      *(_QWORD *)(v18 + 8) = v17;
      *(_BYTE *)(v18 + 16) = 0;
      goto LABEL_23;
    }
    v25 = *(_QWORD *)(v2 + 8);
    v26 = *(sqlite3 **)(v25 + 8);
    if (v26)
    {
      v27 = sqlite3_errcode(v26);
      v25 = *(_QWORD *)(v2 + 8);
      v28 = *(sqlite3 **)(v25 + 8);
      if (v28)
      {
        v29 = sqlite3_errmsg(v28);
        goto LABEL_48;
      }
    }
    else
    {
      v27 = *(_DWORD *)(v25 + 52);
    }
    v32 = *(_QWORD *)(v25 + 56);
    if (v32)
      v29 = (const char *)(v32 + 16);
    else
      v29 = "database is not open";
LABEL_48:
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = v2;
    *(_WORD *)v37 = 1024;
    *(_DWORD *)&v37[2] = v27;
    v38 = 2082;
    v39 = v29;
    v40 = 2082;
    v41 = "REPLACE INTO Metadata(key, value) VALUES(?, ?)";
    _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
    if (!v9)
      goto LABEL_22;
    goto LABEL_20;
  }
  v21 = WebCore::SQLiteStatement::step(v9);
  sqlite3_reset(v9[1]);
  v5 = (WTF::WorkQueue *)sqlite3_clear_bindings(v9[1]);
  if (v21 != 101)
    goto LABEL_22;
  if (!v8)
  {
    v24 = 0;
    goto LABEL_39;
  }
  WebCore::PushDatabase::cachedStatementOnQueue((sqlite3_stmt ***)buf, v2, "DELETE FROM SubscriptionSets", (const char *)0x1D);
  WebCore::PushDatabase::cachedStatementOnQueue((sqlite3_stmt ***)&v35, v2, "DELETE FROM Subscriptions", (const char *)0x1A);
  v23 = (sqlite3_stmt **)v35;
  v22 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf || !v35)
  {
    if (!v35)
    {
LABEL_42:
      if (!v22)
        goto LABEL_22;
      sqlite3_reset(*(sqlite3_stmt **)(v22 + 8));
      v15 = *(sqlite3_stmt **)(v22 + 8);
      goto LABEL_21;
    }
LABEL_41:
    sqlite3_reset(v23[1]);
    v5 = (WTF::WorkQueue *)sqlite3_clear_bindings(v23[1]);
    goto LABEL_42;
  }
  if (WebCore::SQLiteStatement::step(*(sqlite3_stmt ***)buf) != 101
    || WebCore::SQLiteStatement::step(v23) != 101)
  {
    goto LABEL_41;
  }
  sqlite3_reset(v23[1]);
  sqlite3_clear_bindings(v23[1]);
  sqlite3_reset(*(sqlite3_stmt **)(v22 + 8));
  sqlite3_clear_bindings(*(sqlite3_stmt **)(v22 + 8));
  v24 = 1;
LABEL_39:
  v30 = (WTF::WorkQueue *)WebCore::SQLiteTransaction::commit((uint64_t)&v33);
  v16 = WTF::WorkQueue::main(v30);
  v31 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v18 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v18 = &off_1E3365838;
  *(_QWORD *)(v18 + 8) = v31;
  *(_BYTE *)(v18 + 16) = v24;
LABEL_23:
  *(_QWORD *)buf = v18;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 32))(v16, buf);
  v20 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v7)
    WTF::fastFree((WTF *)v7, v19);
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v33);
}

void WebCore::PushDatabase::bindStatementOnQueue<WTF::ASCIILiteral const&>(sqlite3_stmt ***a1, uint64_t a2)
{
  sqlite3_stmt **v4;
  NSObject *v5;
  uint64_t v6;
  sqlite3 *v7;
  int v8;
  sqlite3 *v9;
  const char *v10;
  uint64_t v11;
  sqlite3_stmt **v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WebCore::PushDatabase::cachedStatementOnQueue(&v12, a2, "SELECT value FROM Metadata WHERE key = ?", (const char *)0x29);
  v4 = v12;
  if (v12 && !WebCore::SQLiteStatement::bindText((uint64_t)v12, 1, "publicToken", 0x10000000BLL))
  {
    *a1 = v4;
    return;
  }
  v5 = off_1ECE7C7C0;
  if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(sqlite3 **)(v6 + 8);
    if (v7)
    {
      v8 = sqlite3_errcode(v7);
      v6 = *(_QWORD *)(a2 + 8);
      v9 = *(sqlite3 **)(v6 + 8);
      if (v9)
      {
        v10 = sqlite3_errmsg(v9);
LABEL_15:
        *(_DWORD *)buf = 134218754;
        v14 = a2;
        v15 = 1024;
        v16 = v8;
        v17 = 2082;
        v18 = v10;
        v19 = 2082;
        v20 = "SELECT value FROM Metadata WHERE key = ?";
        _os_log_error_impl(&dword_1940B8000, v5, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
        goto LABEL_4;
      }
    }
    else
    {
      v8 = *(_DWORD *)(v6 + 52);
    }
    v11 = *(_QWORD *)(v6 + 56);
    if (v11)
      v10 = (const char *)(v11 + 16);
    else
      v10 = "database is not open";
    goto LABEL_15;
  }
LABEL_4:
  *a1 = 0;
  if (v4)
  {
    sqlite3_reset(v4[1]);
    sqlite3_clear_bindings(v4[1]);
  }
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushDatabase::PublicTokenChanged,WebCore::PushDatabase::PublicTokenChanged&>(WTF::CompletionHandler<void ()(WebCore::PushDatabase::PublicTokenChanged)> &&,WebCore::PushDatabase::PublicTokenChanged&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3365838;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushDatabase::PublicTokenChanged,WebCore::PushDatabase::PublicTokenChanged&>(WTF::CompletionHandler<void ()(WebCore::PushDatabase::PublicTokenChanged)> &&,WebCore::PushDatabase::PublicTokenChanged&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3365838;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushDatabase::PublicTokenChanged,WebCore::PushDatabase::PublicTokenChanged&>(WTF::CompletionHandler<void ()(WebCore::PushDatabase::PublicTokenChanged)> &&,WebCore::PushDatabase::PublicTokenChanged&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::getPublicToken(WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3365860;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::getPublicToken(WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3365860;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::getPublicToken(WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WTF::WorkQueue *v5;
  sqlite3_stmt **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::WorkQueue *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  WebCore::SQLiteStatement *v20;
  unsigned int *v21;
  __int16 v22;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(v2 + 8);
  v21 = v3;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v22 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v21);
  WebCore::PushDatabase::bindStatementOnQueue<WTF::ASCIILiteral const&>((sqlite3_stmt ***)&v20, v2);
  v6 = (sqlite3_stmt **)v20;
  if (v20)
  {
    if (WebCore::SQLiteStatement::step((sqlite3_stmt **)v20) == 100)
    {
      WebCore::SQLiteStatement::columnBlob(v6, 0, (uint64_t)v19);
      v7 = v19[0];
      v8 = v19[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v18 = v8;
    v13 = (WTF::WorkQueue *)WebCore::SQLiteTransaction::commit((uint64_t)&v21);
    v14 = WTF::WorkQueue::main(v13);
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v16 = &off_1E3365888;
    v16[1] = v15;
    v16[2] = v7;
    v16[3] = v18;
    v19[0] = v16;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 32))(v14, v19);
    v17 = v19[0];
    v19[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    sqlite3_reset(v6[1]);
    sqlite3_clear_bindings(v6[1]);
  }
  else
  {
    v9 = WTF::WorkQueue::main(v5);
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v11 = &off_1E3365888;
    v11[1] = v10;
    v11[2] = 0;
    v11[3] = 0;
    v19[0] = v11;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 32))(v9, v19);
    v12 = v19[0];
    v19[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v21);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E3365888;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3365888;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::insertRecord(WebCore::PushRecord const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E33658B0;
  v3 = a1[24];
  a1[24] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 4), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::insertRecord(WebCore::PushRecord const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *a1 = off_1E33658B0;
  v3 = a1[24];
  a1[24] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 4), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::insertRecord(WebCore::PushRecord const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  char v12;
  WebCore::SQLiteStatement *v13;
  BOOL v14;
  _BYTE *v15;
  uint64_t *v16;
  sqlite3_stmt **v17;
  unsigned int v18;
  sqlite3_stmt *v19;
  sqlite3_int64 insert_rowid;
  void *v21;
  time_t v22;
  int v23;
  time_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  sqlite3_stmt **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  BOOL v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  int v46;
  int v47;
  sqlite3 *v48;
  char v49;
  NSObject *v50;
  void *v51;
  uint64_t v52;
  sqlite3 *v53;
  int v54;
  sqlite3 *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  size_t v67;
  void *v68;
  void *v69;
  WTF *v70;
  WTF *v71;
  size_t v72;
  void *v73;
  void *v74;
  WTF *v75;
  size_t v76;
  void *v77;
  void *v78;
  WTF *v79;
  WTF *v80;
  size_t v81;
  void *v82;
  uint64_t v83;
  WTF *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  NSObject *v91;
  sqlite3 *v92;
  void *v93;
  uint64_t v94;
  sqlite3 *v95;
  int v96;
  sqlite3 *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  sqlite3_stmt ***v104;
  uint64_t v105;
  const char *v106;
  const char *v107;
  uint64_t *v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  uint64_t *v111;
  WTF *v112;
  WTF *v113;
  WTF *v114;
  WTF *v115;
  WTF *v116;
  WTF *v117;
  _OWORD *v118;
  WTF *v119;
  WTF *v120;
  uint64_t v121;
  WebCore::SQLiteStatement *v122;
  uint64_t v123;
  unsigned int *v124;
  __int16 v125;
  sqlite3_stmt **v126;
  int v127;
  sqlite3_stmt **v128;
  __int128 v129;
  char v130;
  _BYTE buf[40];
  int *v132;
  char v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int **)(v2 + 8);
  v124 = v3;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v125 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v124);
  v5 = (uint64_t *)MEMORY[0x1E0CBF738];
  if (*(_QWORD *)(a1 + 48))
    v6 = (uint64_t *)(a1 + 48);
  else
    v6 = (uint64_t *)MEMORY[0x1E0CBF738];
  if (*(_QWORD *)(a1 + 56))
    v7 = (WTF::StringImpl **)(a1 + 56);
  else
    v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = (_OWORD *)(a1 + 64);
  v11 = v8 | v9;
  if (*(_OWORD *)(a1 + 64) == 0)
  {
    v12 = 0;
    buf[0] = 0;
  }
  else
  {
    *(_OWORD *)buf = *v10;
    v12 = 1;
    v11 = 16;
  }
  buf[16] = v12;
  v13 = (WebCore::SQLiteStatement *)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  v14 = (v8 | v9) == 0;
  v15 = buf;
  if (v14)
    v15 = &WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  *(_QWORD *)&v129 = v15;
  *((_QWORD *)&v129 + 1) = v11;
  v16 = (uint64_t *)(a1 + 80);
  WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>((sqlite3_stmt ***)&v122, v2, "SELECT rowID FROM SubscriptionSets WHERE bundleID = ? AND pushPartition = ? AND dataStoreUUID = ? AND securityOrigin = ?", (const char *)0x79, v6, v7, (uint64_t)&v129, (uint64_t *)(a1 + 80));
  v17 = (sqlite3_stmt **)v122;
  if (*(double *)&v122 == 0.0)
  {
    buf[0] = 0;
    v133 = 0;
    WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>((WTF::WorkQueue *)(a1 + 192), (uint64_t)buf);
    if (v133)
      WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v21);
    goto LABEL_170;
  }
  v18 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v122);
  v19 = v17[1];
  if (v18 != 100)
  {
    sqlite3_reset(v19);
    sqlite3_clear_bindings(v17[1]);
    goto LABEL_27;
  }
  if ((sqlite3_stmt_busy(v19) || WebCore::SQLiteStatement::step(v17) == 100)
    && sqlite3_data_count(v17[1]) >= 1)
  {
    insert_rowid = sqlite3_column_int64(v17[1], 0);
  }
  else
  {
    insert_rowid = 0;
  }
  sqlite3_reset(v17[1]);
  sqlite3_clear_bindings(v17[1]);
  if (!insert_rowid)
  {
LABEL_27:
    v24 = time(0);
    v26 = *(_QWORD *)v10;
    v25 = *(_QWORD *)(a1 + 72);
    v27 = *(_QWORD *)v10 | v25;
    v121 = v2;
    if (v27)
    {
      v129 = *v10;
      LOBYTE(v27) = 1;
      v28 = 16;
    }
    else
    {
      v28 = 0;
      LOBYTE(v129) = 0;
    }
    v29 = *(_QWORD *)(a1 + 48);
    v119 = *(WTF **)(a1 + 56);
    v130 = v27;
    if (v26 | v25)
      v13 = (WebCore::SQLiteStatement *)&v129;
    v122 = v13;
    v123 = v28;
    WebCore::PushDatabase::cachedStatementOnQueue(&v128, v121, "INSERT INTO SubscriptionSets VALUES(NULL, ?, ?, ?, ?, ?, 0, 0)", (const char *)0x3F);
    v30 = v128;
    if (!v128 || sqlite3_bind_int64(v128[1], 1, v24))
      goto LABEL_70;
    if (v29)
      v31 = (uint64_t *)(a1 + 48);
    else
      v31 = v5;
    v32 = *v31;
    if (*v31)
    {
      v33 = *(unsigned int *)(v32 + 4);
      *(_DWORD *)v32 += 4;
      v34 = *(char **)(v32 + 8);
      v35 = v33 | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v34 = 0;
      v35 = 0x100000000;
    }
    if (WebCore::SQLiteStatement::bindText((uint64_t)v30, 2, v34, v35))
      goto LABEL_40;
    if (v119)
      v44 = (WTF::StringImpl **)(a1 + 56);
    else
      v44 = (WTF::StringImpl **)v5;
    v45 = *v44;
    if (*v44)
    {
      *(_DWORD *)v45 += 2;
      v37 = WebCore::SQLiteStatement::bindImpl<WTF::String,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>((uint64_t)v30, 3, (uint64_t)v45, (uint64_t)&v122, (uint64_t *)(a1 + 80));
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
        goto LABEL_56;
      }
      v62 = v45;
      goto LABEL_92;
    }
    if (WebCore::SQLiteStatement::bindText((uint64_t)v30, 3, 0, 0x100000000)
      || sqlite3_bind_blob(v30[1], 4, v13, v28, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_40:
      v37 = 0;
      goto LABEL_56;
    }
    v100 = *v16;
    if (*v16)
    {
      v101 = *(unsigned int *)(v100 + 4);
      *(_DWORD *)v100 += 2;
      v102 = *(char **)(v100 + 8);
      v103 = v101 | ((unint64_t)((*(_DWORD *)(v100 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v102 = 0;
      v103 = 0x100000000;
    }
    v37 = WebCore::SQLiteStatement::bindText((uint64_t)v30, 5, v102, v103) == 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
        v62 = (WTF::StringImpl *)v100;
LABEL_92:
        WTF::StringImpl::destroy(v62, v36);
        goto LABEL_56;
      }
      *(_DWORD *)v100 -= 2;
    }
LABEL_56:
    if (v32)
    {
      v46 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v32, v36);
        v46 = *(_DWORD *)v32;
      }
      else
      {
        *(_DWORD *)v32 = v46;
      }
      v47 = v46 - 2;
      if (!v47)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v32, v36);
        if (v37)
          goto LABEL_62;
        goto LABEL_70;
      }
      *(_DWORD *)v32 = v47;
    }
    if (v37)
    {
LABEL_62:
      if (WebCore::SQLiteStatement::step(v30) == 101)
      {
        v2 = v121;
        v48 = *(sqlite3 **)(*(_QWORD *)(v121 + 8) + 8);
        if (v48)
          insert_rowid = sqlite3_last_insert_rowid(v48);
        else
          insert_rowid = 0;
        v10 = (_OWORD *)(a1 + 64);
        sqlite3_reset(v30[1]);
        sqlite3_clear_bindings(v30[1]);
        goto LABEL_25;
      }
      v49 = 0;
LABEL_74:
      buf[0] = 0;
      v133 = 0;
      WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>((WTF::WorkQueue *)(a1 + 192), (uint64_t)buf);
      if (v133)
        WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v51);
      if ((v49 & 1) != 0)
        goto LABEL_170;
      goto LABEL_169;
    }
LABEL_70:
    v50 = off_1ECE7C7C0;
    if (!os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
    {
      if (!v30)
      {
LABEL_73:
        v30 = 0;
        v49 = 1;
        goto LABEL_74;
      }
LABEL_72:
      sqlite3_reset(v30[1]);
      sqlite3_clear_bindings(v30[1]);
      goto LABEL_73;
    }
    v52 = *(_QWORD *)(v121 + 8);
    v53 = *(sqlite3 **)(v52 + 8);
    if (v53)
    {
      v54 = sqlite3_errcode(v53);
      v52 = *(_QWORD *)(v121 + 8);
      v55 = *(sqlite3 **)(v52 + 8);
      if (v55)
      {
        v56 = sqlite3_errmsg(v55);
        goto LABEL_89;
      }
    }
    else
    {
      v54 = *(_DWORD *)(v52 + 52);
    }
    v61 = *(_QWORD *)(v52 + 56);
    if (v61)
      v56 = (const char *)(v61 + 16);
    else
      v56 = "database is not open";
LABEL_89:
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = v121;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v54;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v56;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = "INSERT INTO SubscriptionSets VALUES(NULL, ?, ?, ?, ?, ?, 0, 0)";
    _os_log_error_impl(&dword_1940B8000, v50, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
    if (!v30)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_25:
  v22 = time(0);
  v23 = *(unsigned __int8 *)(a1 + 184);
  if (*(_BYTE *)(a1 + 184))
  {
    *(double *)&v122 = (double)*(unint64_t *)(a1 + 176) / 1000.0;
    v23 = 2;
  }
  else
  {
    *(double *)&v122 = 0.0;
  }
  LODWORD(v123) = v23;
  WebCore::PushDatabase::cachedStatementOnQueue(&v126, v2, "INSERT INTO Subscriptions VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (const char *)0x45);
  v30 = v126;
  if (!v126 || sqlite3_bind_int64(v126[1], 1, v22) || sqlite3_bind_int64(v30[1], 2, insert_rowid))
    goto LABEL_156;
  v38 = *(_QWORD *)(a1 + 88);
  if (v38)
  {
    v39 = *(unsigned int *)(v38 + 4);
    *(_DWORD *)v38 += 4;
    v40 = *(char **)(v38 + 8);
    v41 = v39 | ((unint64_t)((*(_DWORD *)(v38 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v40 = 0;
    v41 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v30, 3, v40, v41))
  {
    if (!v38)
      goto LABEL_156;
    v43 = 0;
    goto LABEL_151;
  }
  v57 = *(_QWORD *)(a1 + 96);
  if (v57)
  {
    v58 = *(unsigned int *)(v57 + 4);
    *(_DWORD *)v57 += 4;
    v59 = *(char **)(v57 + 8);
    v60 = v58 | ((unint64_t)((*(_DWORD *)(v57 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v59 = 0;
    v60 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v30, 4, v59, v60))
  {
    v43 = 0;
LABEL_145:
    if (v57)
    {
      v87 = *(_DWORD *)v57 - 2;
      if (*(_DWORD *)v57 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v57, v42);
        v87 = *(_DWORD *)v57;
      }
      else
      {
        *(_DWORD *)v57 = v87;
      }
      v88 = v87 - 2;
      if (!v88)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v57, v42);
        if (!v38)
          goto LABEL_155;
        goto LABEL_151;
      }
      *(_DWORD *)v57 = v88;
    }
    if (!v38)
      goto LABEL_155;
LABEL_151:
    v89 = *(_DWORD *)v38 - 2;
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v38, v42);
      v89 = *(_DWORD *)v38;
    }
    else
    {
      *(_DWORD *)v38 = v89;
    }
    v90 = v89 - 2;
    if (v90)
      *(_DWORD *)v38 = v90;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v38, v42);
LABEL_155:
    if (v43)
      goto LABEL_159;
LABEL_156:
    v91 = off_1ECE7C7C0;
    if (!os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
    {
      if (v30)
      {
LABEL_158:
        sqlite3_reset(v30[1]);
        sqlite3_clear_bindings(v30[1]);
        v30 = 0;
      }
LABEL_159:
      if ((_DWORD)v123 != -1)
        off_1E33658F0[v123](buf, &v122);
      if (v30 && WebCore::SQLiteStatement::step(v30) == 101)
      {
        v92 = *(sqlite3 **)(*(_QWORD *)(v2 + 8) + 8);
        if (v92)
          v92 = (sqlite3 *)sqlite3_last_insert_rowid(v92);
        *(_QWORD *)(a1 + 32) = v92;
        sqlite3_reset(v30[1]);
        sqlite3_clear_bindings(v30[1]);
        WebCore::SQLiteTransaction::commit((uint64_t)&v124);
        WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,WebCore::PushRecord>((WTF::WorkQueue *)(a1 + 192), (uint64_t)(v10 - 2));
        goto LABEL_170;
      }
      buf[0] = 0;
      v133 = 0;
      WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>((WTF::WorkQueue *)(a1 + 192), (uint64_t)buf);
      if (v133)
        WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v93);
      if (!v30)
        goto LABEL_170;
LABEL_169:
      sqlite3_reset(v30[1]);
      sqlite3_clear_bindings(v30[1]);
LABEL_170:
      WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v124);
      return;
    }
    v94 = *(_QWORD *)(v2 + 8);
    v95 = *(sqlite3 **)(v94 + 8);
    if (v95)
    {
      v96 = sqlite3_errcode(v95);
      v94 = *(_QWORD *)(v2 + 8);
      v97 = *(sqlite3 **)(v94 + 8);
      if (v97)
      {
        v98 = sqlite3_errmsg(v97);
        goto LABEL_178;
      }
    }
    else
    {
      v96 = *(_DWORD *)(v94 + 52);
    }
    v99 = *(_QWORD *)(v94 + 56);
    if (v99)
      v98 = (const char *)(v99 + 16);
    else
      v98 = "database is not open";
LABEL_178:
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v96;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v98;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = "INSERT INTO Subscriptions VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    _os_log_error_impl(&dword_1940B8000, v91, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
    if (!v30)
      goto LABEL_159;
    goto LABEL_158;
  }
  v118 = v10;
  v63 = *(_QWORD *)(a1 + 104);
  if (v63)
  {
    v64 = *(unsigned int *)(v63 + 4);
    *(_DWORD *)v63 += 4;
    v65 = *(char **)(v63 + 8);
    v66 = v64 | ((unint64_t)((*(_DWORD *)(v63 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v65 = 0;
    v66 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v30, 5, v65, v66))
  {
    v43 = 0;
    if (!v63)
      goto LABEL_144;
    goto LABEL_140;
  }
  v67 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v67)
  {
    v68 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 124));
    memcpy(v68, *(const void **)(a1 + 112), *(unsigned int *)(a1 + 124));
    v69 = (void *)WTF::fastMalloc((WTF *)v67);
    v120 = (WTF *)v68;
    memcpy(v69, v68, v67);
    v70 = (WTF *)v69;
  }
  else
  {
    v120 = 0;
    v70 = 0;
  }
  v117 = v70;
  if (sqlite3_bind_blob(v30[1], 6, v70, v67, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
  {
    v43 = 0;
    v71 = v120;
    goto LABEL_137;
  }
  v72 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v72)
  {
    v73 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 140));
    memcpy(v73, *(const void **)(a1 + 128), *(unsigned int *)(a1 + 140));
    v74 = (void *)WTF::fastMalloc((WTF *)v72);
    v116 = (WTF *)v73;
    memcpy(v74, v73, v72);
    v75 = (WTF *)v74;
  }
  else
  {
    v116 = 0;
    v75 = 0;
  }
  v115 = v75;
  if (sqlite3_bind_blob(v30[1], 7, v75, v72, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
  {
    v43 = 0;
    v71 = v120;
LABEL_133:
    if (v115)
      WTF::fastFree(v115, v42);
    if (v116)
      WTF::fastFree(v116, v42);
LABEL_137:
    if (v117)
    {
      WTF::fastFree(v117, v42);
      if (!v71)
      {
LABEL_139:
        if (!v63)
        {
LABEL_144:
          v10 = v118;
          goto LABEL_145;
        }
LABEL_140:
        v85 = *(_DWORD *)v63 - 2;
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)v63, v42);
          v85 = *(_DWORD *)v63;
        }
        else
        {
          *(_DWORD *)v63 = v85;
        }
        v86 = v85 - 2;
        if (v86)
          *(_DWORD *)v63 = v86;
        else
          WTF::StringImpl::destroy((WTF::StringImpl *)v63, v42);
        goto LABEL_144;
      }
    }
    else if (!v71)
    {
      goto LABEL_139;
    }
    WTF::fastFree(v71, v42);
    if (!v63)
      goto LABEL_144;
    goto LABEL_140;
  }
  v76 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v76)
  {
    v77 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 156));
    memcpy(v77, *(const void **)(a1 + 144), *(unsigned int *)(a1 + 156));
    v78 = (void *)WTF::fastMalloc((WTF *)v76);
    v114 = (WTF *)v77;
    memcpy(v78, v77, v76);
    v79 = (WTF *)v78;
  }
  else
  {
    v114 = 0;
    v79 = 0;
  }
  v80 = v79;
  if (sqlite3_bind_blob(v30[1], 8, v79, v76, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
  {
    v43 = 0;
LABEL_129:
    v71 = v120;
    v84 = v114;
    if (v80)
    {
      WTF::fastFree(v80, v42);
      v84 = v114;
    }
    if (v84)
      WTF::fastFree(v84, v42);
    goto LABEL_133;
  }
  v81 = *(unsigned int *)(a1 + 172);
  if ((_DWORD)v81)
  {
    v82 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 172));
    memcpy(v82, *(const void **)(a1 + 160), *(unsigned int *)(a1 + 172));
    v112 = (WTF *)v82;
    v113 = (WTF *)WTF::fastMalloc((WTF *)v81);
    memcpy(v113, v82, v81);
  }
  else
  {
    v112 = 0;
    v113 = 0;
  }
  if (sqlite3_bind_blob(v30[1], 9, v113, v81, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
  {
    v43 = 0;
LABEL_125:
    if (v113)
      WTF::fastFree(v113, v42);
    if (v112)
      WTF::fastFree(v112, v42);
    goto LABEL_129;
  }
  LOBYTE(v129) = 0;
  DWORD2(v129) = -1;
  v83 = v123;
  if ((_DWORD)v123 != -1)
  {
    ((void (*)(_BYTE *, __int128 *, WebCore::SQLiteStatement **))off_1E3365908[v123])(buf, &v129, &v122);
    DWORD2(v129) = v83;
  }
  v127 = 10;
  *(_QWORD *)buf = v30;
  *(_QWORD *)&buf[8] = &v127;
  *(_QWORD *)&buf[16] = v30;
  *(_QWORD *)&buf[24] = &v127;
  *(_QWORD *)&buf[32] = v30;
  v132 = &v127;
  if ((_DWORD)v83 != -1)
  {
    v128 = (sqlite3_stmt **)buf;
    v43 = ((unsigned int (*)(sqlite3_stmt ***, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15SQLiteStatement9bindValueEiRKNS_7variantIJDnNS6_6StringEdEEEE3__0JZNS9_9bindValueEiSE_E3__1ZNS9_9bindValueEiSE_E3__2EEEEEJRKNS0_6__implIJDnSB_dEEEEEEDcOT_DpOT0____fmatrix[v83])(&v128, &v129) == 0;
    if (DWORD2(v129) != -1)
      off_1E33658F0[DWORD2(v129)](buf, (WebCore::SQLiteStatement **)&v129);
    DWORD2(v129) = -1;
    goto LABEL_125;
  }
  v104 = (sqlite3_stmt ***)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>(v104, v105, v106, v107, v108, v109, v110, v111);
}

void WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>(sqlite3_stmt ***a1, uint64_t a2, const char *a3, const char *a4, uint64_t *a5, WTF::StringImpl **a6, uint64_t a7, uint64_t *a8)
{
  sqlite3_stmt **v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  BOOL v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  sqlite3 *v28;
  int v29;
  sqlite3 *v30;
  const char *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  sqlite3_stmt **v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  WebCore::PushDatabase::cachedStatementOnQueue(&v38, a2, a3, a4);
  v15 = v38;
  if (!v38)
    goto LABEL_21;
  v16 = *a5;
  if (v16)
  {
    v17 = *(unsigned int *)(v16 + 4);
    *(_DWORD *)v16 += 6;
    v18 = *(char **)(v16 + 8);
    v19 = v17 | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v18 = 0;
    v19 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v15, 1, v18, v19))
    goto LABEL_5;
  v22 = *a6;
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v21 = WebCore::SQLiteStatement::bindImpl<WTF::String,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>((uint64_t)v15, 2, (uint64_t)v22, a7, a8);
    if (*(_DWORD *)v22 != 2)
    {
      *(_DWORD *)v22 -= 2;
      goto LABEL_9;
    }
    v32 = v22;
    goto LABEL_29;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v15, 2, 0, 0x100000000)
    || sqlite3_bind_blob(v15[1], 3, *(const void **)a7, *(_DWORD *)(a7 + 8), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_5:
    v21 = 0;
    goto LABEL_9;
  }
  v34 = *a8;
  if (*a8)
  {
    v35 = *(unsigned int *)(v34 + 4);
    *(_DWORD *)v34 += 2;
    v36 = *(char **)(v34 + 8);
    v37 = v35 | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v36 = 0;
    v37 = 0x100000000;
  }
  v21 = WebCore::SQLiteStatement::bindText((uint64_t)v15, 4, v36, v37) == 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      v32 = (WTF::StringImpl *)v34;
LABEL_29:
      WTF::StringImpl::destroy(v32, v20);
      goto LABEL_9;
    }
    *(_DWORD *)v34 -= 2;
  }
LABEL_9:
  if (v16)
  {
    v23 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v16, v20);
      v23 = *(_DWORD *)v16;
    }
    else
    {
      *(_DWORD *)v16 = v23;
    }
    v24 = v23 - 2;
    if (v24)
    {
      *(_DWORD *)v16 = v24;
    }
    else
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v16, v20);
      v24 = *(_DWORD *)v16;
    }
    v25 = v24 - 2;
    if (!v25)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v16, v20);
      if (v21)
        goto LABEL_17;
      goto LABEL_21;
    }
    *(_DWORD *)v16 = v25;
  }
  if (v21)
  {
LABEL_17:
    *a1 = v15;
    return;
  }
LABEL_21:
  v26 = off_1ECE7C7C0;
  if (!os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
    goto LABEL_22;
  v27 = *(_QWORD *)(a2 + 8);
  v28 = *(sqlite3 **)(v27 + 8);
  if (!v28)
  {
    v29 = *(_DWORD *)(v27 + 52);
LABEL_31:
    v33 = *(_QWORD *)(v27 + 56);
    if (v33)
      v31 = (const char *)(v33 + 16);
    else
      v31 = "database is not open";
    goto LABEL_34;
  }
  v29 = sqlite3_errcode(v28);
  v27 = *(_QWORD *)(a2 + 8);
  v30 = *(sqlite3 **)(v27 + 8);
  if (!v30)
    goto LABEL_31;
  v31 = sqlite3_errmsg(v30);
LABEL_34:
  *(_DWORD *)buf = 134218754;
  v40 = a2;
  v41 = 1024;
  v42 = v29;
  v43 = 2082;
  v44 = v31;
  v45 = 2082;
  v46 = a3;
  _os_log_error_impl(&dword_1940B8000, v26, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
LABEL_22:
  *a1 = 0;
  if (v15)
  {
    sqlite3_reset(v15[1]);
    sqlite3_clear_bindings(v15[1]);
  }
}

uint64_t WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>(WTF::WorkQueue *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t result;
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = WTF::WorkQueue::main(a1);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v42 = v5;
  v6 = *(_BYTE *)(a2 + 160);
  if (v6)
  {
    WebCore::PushRecord::isolatedCopy(a2, (uint64_t)v28);
    v44 = v29;
    v45 = v30;
    v7 = v31;
    v8 = v32;
    v29 = 0u;
    v31 = 0u;
    v32 = 0u;
    v43 = v28[0];
    v46 = v7;
    v47 = v8;
    v9 = v33;
    v33 = 0;
    v48 = v9;
    v10 = v34;
    v34 = 0;
    v49 = v10;
    v11 = v35;
    v35 = 0;
    v50 = v11;
    v12 = v36;
    v36 = 0;
    v51 = v12;
    v13 = v37;
    v37 = 0;
    v52 = v13;
    v14 = v38;
    v38 = 0;
    v53 = v14;
    v15 = v39;
    v39 = 0;
    v54 = v15;
    v16 = v40;
    v40 = 0;
    v55 = v16;
    v56 = v41;
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)v28, v17);
    v6 = 1;
  }
  else
  {
    LOBYTE(v43) = 0;
  }
  v57 = v6;
  v18 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v18 = &off_1E33658D8;
  v19 = v42;
  v42 = 0;
  *(_QWORD *)(v18 + 16) = v19;
  *(_BYTE *)(v18 + 32) = 0;
  *(_BYTE *)(v18 + 192) = 0;
  if (v57)
  {
    *(_QWORD *)(v18 + 32) = v43;
    *(_OWORD *)(v18 + 48) = v44;
    *(_OWORD *)(v18 + 64) = v45;
    v44 = 0u;
    *(_OWORD *)(v18 + 80) = v46;
    v20 = v47;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)(v18 + 96) = v20;
    v21 = v48;
    v48 = 0;
    *(_QWORD *)(v18 + 112) = v21;
    *(_QWORD *)&v20 = v49;
    v49 = 0;
    *(_QWORD *)(v18 + 120) = v20;
    v22 = v50;
    v50 = 0;
    *(_QWORD *)(v18 + 128) = v22;
    *(_QWORD *)&v20 = v51;
    v51 = 0;
    *(_QWORD *)(v18 + 136) = v20;
    v23 = v52;
    v52 = 0;
    *(_QWORD *)(v18 + 144) = v23;
    *(_QWORD *)&v20 = v53;
    v53 = 0;
    *(_QWORD *)(v18 + 152) = v20;
    v24 = v54;
    v54 = 0;
    *(_QWORD *)(v18 + 160) = v24;
    *(_QWORD *)&v20 = v55;
    v55 = 0;
    *(_QWORD *)(v18 + 168) = v20;
    *(_OWORD *)(v18 + 176) = v56;
    *(_BYTE *)(v18 + 192) = 1;
  }
  v28[0] = v18;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, v28);
  v26 = v28[0];
  v28[0] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v57)
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)&v43, v25);
  result = v42;
  v42 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,WebCore::PushRecord>(WTF::WorkQueue *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = WTF::WorkQueue::main(a1);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v15 = v5;
  WebCore::PushRecord::isolatedCopy(a2, (uint64_t)v16);
  v6 = WTF::fastMalloc((WTF *)0xC0);
  *(_QWORD *)v6 = off_1E3365930;
  *(_QWORD *)(v6 + 16) = v15;
  *(_QWORD *)(v6 + 32) = v16[0];
  *(_OWORD *)(v6 + 48) = v17;
  *(_OWORD *)(v6 + 64) = v18;
  v17 = 0u;
  *(_OWORD *)(v6 + 80) = v19;
  v7 = v20;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)(v6 + 96) = v7;
  v8 = v21;
  v21 = 0;
  *(_QWORD *)(v6 + 112) = v8;
  *(_QWORD *)&v7 = v22;
  v22 = 0;
  *(_QWORD *)(v6 + 120) = v7;
  v9 = v23;
  v23 = 0;
  *(_QWORD *)(v6 + 128) = v9;
  *(_QWORD *)&v7 = v24;
  v24 = 0;
  *(_QWORD *)(v6 + 136) = v7;
  v10 = v25;
  v25 = 0;
  *(_QWORD *)(v6 + 144) = v10;
  *(_QWORD *)&v7 = v26;
  v26 = 0;
  *(_QWORD *)(v6 + 152) = v7;
  v11 = v27;
  v27 = 0;
  *(_QWORD *)(v6 + 160) = v11;
  *(_QWORD *)&v7 = v28;
  v28 = 0;
  *(_QWORD *)(v6 + 168) = v7;
  *(_OWORD *)(v6 + 176) = v29;
  v30 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, &v30);
  v13 = v30;
  v30 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)v16, v12);
  return 0;
}

BOOL WebCore::SQLiteStatement::bindImpl<WTF::String,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v7;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  _BOOL8 v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;

  v7 = (WTF::StringImpl *)a3;
  if (a3)
  {
    v10 = *(unsigned int *)(a3 + 4);
    *(_DWORD *)a3 += 2;
    a3 = *(_QWORD *)(a3 + 8);
    v11 = v10 | ((unint64_t)((*((_DWORD *)v7 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText(a1, a2, (char *)a3, v11)
    || sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 8), a2 + 1, *(const void **)a4, *(_DWORD *)(a4 + 8), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL))
  {
    v13 = 0;
  }
  else
  {
    v15 = *a5;
    if (v15)
    {
      v16 = *(unsigned int *)(v15 + 4);
      *(_DWORD *)v15 += 2;
      v17 = *(char **)(v15 + 8);
      v18 = v16 | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v17 = 0;
      v18 = 0x100000000;
    }
    v13 = WebCore::SQLiteStatement::bindText(a1, a2 + 2, v17, v18) == 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v12);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v13;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&,std::optional<WebCore::PushRecord> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E33658D8;
  if (*(_BYTE *)(a1 + 192))
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 32), a2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&,std::optional<WebCore::PushRecord> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33658D8;
  if (*((_BYTE *)this + 192))
    WebCore::PushRecord::~PushRecord((WTF *)((char *)this + 32), a2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&,std::optional<WebCore::PushRecord> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,WebCore::PushRecord>(WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&,WebCore::PushRecord &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E3365930;
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 4), a2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,WebCore::PushRecord>(WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&,WebCore::PushRecord &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *a1 = off_1E3365930;
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 4), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,WebCore::PushRecord>(WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&,WebCore::PushRecord &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = *(_OWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = 0u;
  v16 = v1;
  v17 = v2;
  v3 = *(_OWORD *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v15[0] = *(_QWORD *)(a1 + 32);
  v18 = v3;
  v19 = v4;
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  v20 = v5;
  v6 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  v21 = v6;
  v7 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  v22 = v7;
  v8 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  v23 = v8;
  v9 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  v24 = v9;
  v10 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  v25 = v10;
  v11 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  v26 = v11;
  v12 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  v27 = v12;
  v28 = *(_OWORD *)(a1 + 176);
  v29 = 1;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 16))(v13, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v29)
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)v15, v14);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordByIdentifier(WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3365958;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordByIdentifier(WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3365958;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordByIdentifier(WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WTF::WorkQueue *v5;
  sqlite3_stmt **v6;
  sqlite3_int64 v7;
  WTF::WorkQueue *v8;
  WebCore::SQLiteStatement *v9;
  unsigned int v10;
  WTF::WorkQueue *v11;
  WebCore::SQLiteStatement *v12;
  WTF::WorkQueue *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::SQLiteStatement *v28;
  sqlite3_int64 v29;
  unsigned int *v30;
  __int16 v31;
  uint64_t v32;

  v2 = a1[1];
  v3 = *(unsigned int **)(v2 + 8);
  v30 = v3;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v31 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v30);
  WebCore::PushDatabase::bindStatementOnQueue<unsigned long long &>((sqlite3_stmt ***)&v28, v2, "SELECT subscriptionSetID FROM Subscriptions WHERE rowid = ?", (const char *)0x3C, a1 + 2);
  v6 = (sqlite3_stmt **)v28;
  if (!v28)
    goto LABEL_16;
  v5 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v28);
  if ((_DWORD)v5 != 100)
    goto LABEL_16;
  v7 = (sqlite3_stmt_busy(v6[1]) || WebCore::SQLiteStatement::step(v6) == 100)
    && sqlite3_data_count(v6[1]) >= 1
     ? sqlite3_column_int(v6[1], 0)
     : 0;
  v29 = v7;
  sqlite3_reset(v6[1]);
  sqlite3_clear_bindings(v6[1]);
  WebCore::PushDatabase::bindStatementOnQueue<unsigned long long &>((sqlite3_stmt ***)&v28, v2, "DELETE FROM Subscriptions WHERE rowid = ?", (const char *)0x2A, a1 + 2);
  v6 = (sqlite3_stmt **)v28;
  if (v28 && (v5 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v28), (_DWORD)v5 == 101))
  {
    sqlite3_reset(v6[1]);
    sqlite3_clear_bindings(v6[1]);
    WebCore::PushDatabase::bindStatementOnQueue<unsigned long long &>((sqlite3_stmt ***)&v28, v2, "SELECT rowid FROM Subscriptions WHERE subscriptionSetID = ?", (const char *)0x3C, &v29);
    v9 = v28;
    if (!v28)
    {
      v14 = WTF::WorkQueue::main(v8);
      v22 = a1[3];
      a1[3] = 0;
      v16 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v16 = &off_1E3365980;
      *(_QWORD *)(v16 + 8) = v22;
      *(_BYTE *)(v16 + 16) = 0;
LABEL_23:
      v32 = v16;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 32))(v14, &v32);
      v23 = v32;
      v32 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      goto LABEL_21;
    }
    v10 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v28);
    sqlite3_reset(*((sqlite3_stmt **)v9 + 1));
    sqlite3_clear_bindings(*((sqlite3_stmt **)v9 + 1));
    if (v10 != 101)
    {
LABEL_15:
      v13 = (WTF::WorkQueue *)WebCore::SQLiteTransaction::commit((uint64_t)&v30);
      v14 = WTF::WorkQueue::main(v13);
      v15 = a1[3];
      a1[3] = 0;
      v16 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v16 = &off_1E3365980;
      *(_QWORD *)(v16 + 8) = v15;
      *(_BYTE *)(v16 + 16) = 1;
      goto LABEL_23;
    }
    WebCore::PushDatabase::bindStatementOnQueue<unsigned long long &>((sqlite3_stmt ***)&v28, v2, "DELETE FROM SubscriptionSets WHERE rowid = ?", (const char *)0x2D, &v29);
    v12 = v28;
    if (v28)
    {
      v11 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v28);
      if ((_DWORD)v11 == 101)
      {
        sqlite3_reset(*((sqlite3_stmt **)v12 + 1));
        sqlite3_clear_bindings(*((sqlite3_stmt **)v12 + 1));
        goto LABEL_15;
      }
    }
    v24 = WTF::WorkQueue::main(v11);
    v25 = a1[3];
    a1[3] = 0;
    v26 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v26 = &off_1E3365980;
    *(_QWORD *)(v26 + 8) = v25;
    *(_BYTE *)(v26 + 16) = 0;
    v32 = v26;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 32))(v24, &v32);
    v27 = v32;
    v32 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (v12)
    {
      sqlite3_reset(*((sqlite3_stmt **)v12 + 1));
      v21 = (sqlite3_stmt *)*((_QWORD *)v12 + 1);
      goto LABEL_20;
    }
  }
  else
  {
LABEL_16:
    v17 = WTF::WorkQueue::main(v5);
    v18 = a1[3];
    a1[3] = 0;
    v19 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v19 = &off_1E3365980;
    *(_QWORD *)(v19 + 8) = v18;
    *(_BYTE *)(v19 + 16) = 0;
    v32 = v19;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 32))(v17, &v32);
    v20 = v32;
    v32 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v6)
    {
      sqlite3_reset(v6[1]);
      v21 = v6[1];
LABEL_20:
      sqlite3_clear_bindings(v21);
    }
  }
LABEL_21:
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v30);
}

void WebCore::PushDatabase::bindStatementOnQueue<unsigned long long &>(sqlite3_stmt ***a1, uint64_t a2, const char *a3, const char *a4, sqlite3_int64 *a5)
{
  sqlite3_stmt **v9;
  NSObject *v10;
  uint64_t v11;
  sqlite3 *v12;
  int v13;
  sqlite3 *v14;
  const char *v15;
  uint64_t v16;
  sqlite3_stmt **v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WebCore::PushDatabase::cachedStatementOnQueue(&v17, a2, a3, a4);
  v9 = v17;
  if (v17 && !sqlite3_bind_int64(v17[1], 1, *a5))
  {
    *a1 = v9;
    return;
  }
  v10 = off_1ECE7C7C0;
  if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(sqlite3 **)(v11 + 8);
    if (v12)
    {
      v13 = sqlite3_errcode(v12);
      v11 = *(_QWORD *)(a2 + 8);
      v14 = *(sqlite3 **)(v11 + 8);
      if (v14)
      {
        v15 = sqlite3_errmsg(v14);
LABEL_15:
        *(_DWORD *)buf = 134218754;
        v19 = a2;
        v20 = 1024;
        v21 = v13;
        v22 = 2082;
        v23 = v15;
        v24 = 2082;
        v25 = a3;
        _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
        goto LABEL_4;
      }
    }
    else
    {
      v13 = *(_DWORD *)(v11 + 52);
    }
    v16 = *(_QWORD *)(v11 + 56);
    if (v16)
      v15 = (const char *)(v16 + 16);
    else
      v15 = "database is not open";
    goto LABEL_15;
  }
LABEL_4:
  *a1 = 0;
  if (v9)
  {
    sqlite3_reset(v9[1]);
    sqlite3_clear_bindings(v9[1]);
  }
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<BOOL,BOOL>(WTF::CompletionHandler<void ()(BOOL)> &&,BOOL &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3365980;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<BOOL,BOOL>(WTF::CompletionHandler<void ()(BOOL)> &&,BOOL &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3365980;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<BOOL,BOOL>(WTF::CompletionHandler<void ()(BOOL)> &&,BOOL &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::getRecordByTopic(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E33659A8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::getRecordByTopic(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E33659A8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::getRecordByTopic(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  sqlite3_stmt **v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  char v11;
  void *v12;
  void *v13;
  uint64_t v14;
  sqlite3 *v15;
  int v16;
  sqlite3 *v17;
  const char *v18;
  uint64_t v19;
  sqlite3_stmt **v20;
  sqlite3_stmt **v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  WebCore::PushDatabase::cachedStatementOnQueue(&v21, v2, "SELECT  sub.rowID, ss.bundleID, ss.pushPartition, ss.dataStoreUUID, ss.securityOrigin, sub.scope, sub.endpoint, sub.topic, sub.serverVAPIDPublicKey, sub.clientPublicKey, sub.clientPrivateKey, sub.sharedAuthSecret, sub.expirationTime FROM Subscriptions sub CROSS JOIN SubscriptionSets ss ON sub.subscriptionSetID = ss.rowid WHERE sub.topic = ?", (const char *)0x157);
  v3 = v21;
  if (!v21)
    goto LABEL_7;
  v4 = a1[2];
  if (!v4)
  {
    if (!WebCore::SQLiteStatement::bindText((uint64_t)v21, 1, 0, 0x100000000))
      goto LABEL_18;
    goto LABEL_7;
  }
  v5 = *(unsigned int *)(v4 + 4);
  *(_DWORD *)v4 += 4;
  v7 = WebCore::SQLiteStatement::bindText((uint64_t)v3, 1, *(char **)(v4 + 8), v5 | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32));
  v8 = *(_DWORD *)v4 - 2;
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v6);
    v8 = *(_DWORD *)v4;
  }
  else
  {
    *(_DWORD *)v4 = v8;
  }
  v9 = v8 - 2;
  if (!v9)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v6);
    if (!v7)
      goto LABEL_18;
LABEL_7:
    v10 = off_1ECE7C7C0;
    if (!os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
    {
      if (!v3)
      {
LABEL_10:
        v11 = 1;
        goto LABEL_11;
      }
LABEL_9:
      sqlite3_reset(v3[1]);
      sqlite3_clear_bindings(v3[1]);
      v3 = 0;
      goto LABEL_10;
    }
    v14 = *(_QWORD *)(v2 + 8);
    v15 = *(sqlite3 **)(v14 + 8);
    if (v15)
    {
      v16 = sqlite3_errcode(v15);
      v14 = *(_QWORD *)(v2 + 8);
      v17 = *(sqlite3 **)(v14 + 8);
      if (v17)
      {
        v18 = sqlite3_errmsg(v17);
        goto LABEL_28;
      }
    }
    else
    {
      v16 = *(_DWORD *)(v14 + 52);
    }
    v19 = *(_QWORD *)(v14 + 56);
    if (v19)
      v18 = (const char *)(v19 + 16);
    else
      v18 = "database is not open";
LABEL_28:
    *(_DWORD *)buf = 134218754;
    v23 = v2;
    v24 = 1024;
    v25 = v16;
    v26 = 2082;
    v27 = v18;
    v28 = 2082;
    v29 = "SELECT  sub.rowID, ss.bundleID, ss.pushPartition, ss.dataStoreUUID, ss.securityOrigin, sub.scope, sub.endpoint"
          ", sub.topic, sub.serverVAPIDPublicKey, sub.clientPublicKey, sub.clientPrivateKey, sub.sharedAuthSecret, sub.ex"
          "pirationTime FROM Subscriptions sub CROSS JOIN SubscriptionSets ss ON sub.subscriptionSetID = ss.rowid WHERE sub.topic = ?";
    _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
    if (!v3)
      goto LABEL_10;
    goto LABEL_9;
  }
  *(_DWORD *)v4 = v9;
  if (v7)
    goto LABEL_7;
LABEL_18:
  v20 = v3;
  if (WebCore::SQLiteStatement::step(v3) == 100)
  {
    WebCore::makePushRecordFromRow((WebCore *)buf, &v20);
    WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,WebCore::PushRecord>((WTF::WorkQueue *)(a1 + 3), (uint64_t)buf);
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v13);
LABEL_14:
    sqlite3_reset(v3[1]);
    sqlite3_clear_bindings(v3[1]);
    return;
  }
  v11 = 0;
LABEL_11:
  buf[0] = 0;
  v30 = 0;
  WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>((WTF::WorkQueue *)(a1 + 3), (uint64_t)buf);
  if (v30)
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v12);
  if ((v11 & 1) == 0)
    goto LABEL_14;
}

void WebCore::makePushRecordFromRow(WebCore *this, sqlite3_stmt ***a2)
{
  sqlite3_stmt **v4;
  sqlite3_int64 v5;
  sqlite3_stmt **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  double v14;
  unsigned int v15;
  char v16;

  v4 = *a2;
  if ((sqlite3_stmt_busy((*a2)[1]) || WebCore::SQLiteStatement::step(v4) == 100)
    && sqlite3_data_count(v4[1]) >= 1)
  {
    v5 = sqlite3_column_int64(v4[1], 0);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)this = v5;
  WebCore::SQLiteStatement::columnText(*a2, 1, (_QWORD *)this + 2);
  WebCore::SQLiteStatement::columnText(*a2, 2, (_QWORD *)this + 3);
  v6 = *a2;
  if ((sqlite3_stmt_busy((*a2)[1]) || WebCore::SQLiteStatement::step(v6) == 100)
    && sqlite3_data_count(v6[1]) >= 4
    && (v7 = (uint64_t *)sqlite3_column_blob(v6[1], 3)) != 0
    && (v8 = v7, sqlite3_column_bytes(v6[1], 3) == 16))
  {
    v9 = *v8;
    v10 = v8[1];
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *((_QWORD *)this + 4) = v9;
  *((_QWORD *)this + 5) = v10;
  WebCore::SQLiteStatement::columnText(*a2, 4, (_QWORD *)this + 6);
  WebCore::SQLiteStatement::columnText(*a2, 5, (_QWORD *)this + 7);
  WebCore::SQLiteStatement::columnText(*a2, 6, (_QWORD *)this + 8);
  WebCore::SQLiteStatement::columnText(*a2, 7, (_QWORD *)this + 9);
  WebCore::SQLiteStatement::columnBlob(*a2, 8, (uint64_t)this + 80);
  WebCore::SQLiteStatement::columnBlob(*a2, 9, (uint64_t)this + 96);
  WebCore::SQLiteStatement::columnBlob(*a2, 10, (uint64_t)this + 112);
  WebCore::SQLiteStatement::columnBlob(*a2, 11, (uint64_t)this + 128);
  WebCore::SQLiteStatement::columnValue(*a2, 12, (uint64_t)&v14);
  v11 = v15;
  v12 = (unint64_t)(v14 * 1000.0);
  v13 = v15 == 2;
  if (v15 != 2)
    v12 = 0;
  *((_QWORD *)this + 18) = v12;
  *((_QWORD *)this + 19) = v13;
  if ((_DWORD)v11 != -1)
    off_1E33658F0[v11](&v16, (WebCore::SQLiteStatement **)&v14);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::getRecordBySubscriptionSetAndScope(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E33659D0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::getRecordBySubscriptionSetAndScope(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E33659D0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::getRecordBySubscriptionSetAndScope(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PushRecord> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  sqlite3_stmt **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  BOOL v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  int v22;
  void *v23;
  char v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  sqlite3 *v28;
  int v29;
  sqlite3 *v30;
  const char *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  int v38;
  int v39;
  _QWORD v40[2];
  sqlite3_stmt **v41;
  sqlite3_stmt **v42;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  char v51;
  __int128 v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = a1[2];
  v3 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  if (a1[5])
    v4 = a1 + 5;
  else
    v4 = (uint64_t *)MEMORY[0x1E0CBF738];
  v5 = a1[6];
  v6 = a1[7];
  if (*((_OWORD *)a1 + 3) == 0)
  {
    v8 = 0;
    v7 = 0;
    LOBYTE(v52) = 0;
  }
  else
  {
    v52 = *((_OWORD *)a1 + 3);
    v7 = 1;
    v8 = 16;
  }
  v9 = a1[4];
  v53 = v7;
  if (v5 | v6)
    v10 = &v52;
  else
    v10 = (__int128 *)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  v40[0] = v10;
  v40[1] = v8;
  WebCore::PushDatabase::cachedStatementOnQueue(&v42, v2, "SELECT  sub.rowID, ss.bundleID, ss.pushPartition, ss.dataStoreUUID, ss.securityOrigin, sub.scope, sub.endpoint, sub.topic, sub.serverVAPIDPublicKey, sub.clientPublicKey, sub.clientPrivateKey, sub.sharedAuthSecret, sub.expirationTime FROM Subscriptions sub CROSS JOIN SubscriptionSets ss ON sub.subscriptionSetID = ss.rowid WHERE sub.scope = ? AND ss.bundleID = ? AND ss.pushPartition = ? AND ss.dataStoreUUID = ?", (const char *)0x19D);
  v11 = v42;
  if (!v42)
    goto LABEL_35;
  v12 = a1[8];
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 4);
    *(_DWORD *)v12 += 6;
    v14 = *(char **)(v12 + 8);
    v15 = v13 | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v14 = 0;
    v15 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v11, 1, v14, v15))
    goto LABEL_14;
  v18 = (WTF::StringImpl **)(a1 + 4);
  if (!v9)
    v18 = v3;
  v19 = *v18;
  if (*v18)
  {
    *(_DWORD *)v19 += 2;
    v17 = WebCore::SQLiteStatement::bindImpl<WTF::String,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>>((uint64_t)v11, 2, (uint64_t)v19, v4, (uint64_t)v40);
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
      goto LABEL_21;
    }
    v32 = v19;
    goto LABEL_48;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v11, 2, 0, 0x100000000))
  {
LABEL_14:
    if (!v12)
      goto LABEL_35;
    v17 = 0;
    goto LABEL_22;
  }
  v34 = *v4;
  if (v34)
  {
    v35 = *(unsigned int *)(v34 + 4);
    *(_DWORD *)v34 += 4;
    v36 = *(char **)(v34 + 8);
    v37 = v35 | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v36 = 0;
    v37 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText((uint64_t)v11, 3, v36, v37))
    v17 = 0;
  else
    v17 = sqlite3_bind_blob(v11[1], 4, v10, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL) == 0;
  if (v34)
  {
    v38 = *(_DWORD *)v34 - 2;
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v16);
      v38 = *(_DWORD *)v34;
    }
    else
    {
      *(_DWORD *)v34 = v38;
    }
    v39 = v38 - 2;
    if (!v39)
    {
      v32 = (WTF::StringImpl *)v34;
LABEL_48:
      WTF::StringImpl::destroy(v32, v16);
      goto LABEL_21;
    }
    *(_DWORD *)v34 = v39;
  }
LABEL_21:
  if (!v12)
    goto LABEL_28;
LABEL_22:
  v20 = *(_DWORD *)v12 - 2;
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, v16);
    v20 = *(_DWORD *)v12;
  }
  else
  {
    *(_DWORD *)v12 = v20;
  }
  v21 = v20 - 2;
  if (v21)
  {
    *(_DWORD *)v12 = v21;
  }
  else
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, v16);
    v21 = *(_DWORD *)v12;
  }
  v22 = v21 - 2;
  if (!v22)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, v16);
    if (v17)
      goto LABEL_29;
LABEL_35:
    v25 = off_1ECE7C7C0;
    if (!os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
    {
      if (!v11)
      {
LABEL_38:
        v24 = 1;
        goto LABEL_39;
      }
LABEL_37:
      sqlite3_reset(v11[1]);
      sqlite3_clear_bindings(v11[1]);
      v11 = 0;
      goto LABEL_38;
    }
    v27 = *(_QWORD *)(v2 + 8);
    v28 = *(sqlite3 **)(v27 + 8);
    if (v28)
    {
      v29 = sqlite3_errcode(v28);
      v27 = *(_QWORD *)(v2 + 8);
      v30 = *(sqlite3 **)(v27 + 8);
      if (v30)
      {
        v31 = sqlite3_errmsg(v30);
        goto LABEL_53;
      }
    }
    else
    {
      v29 = *(_DWORD *)(v27 + 52);
    }
    v33 = *(_QWORD *)(v27 + 56);
    if (v33)
      v31 = (const char *)(v33 + 16);
    else
      v31 = "database is not open";
LABEL_53:
    *(_DWORD *)buf = 134218754;
    v44 = v2;
    v45 = 1024;
    v46 = v29;
    v47 = 2082;
    v48 = v31;
    v49 = 2082;
    v50 = "SELECT  sub.rowID, ss.bundleID, ss.pushPartition, ss.dataStoreUUID, ss.securityOrigin, sub.scope, sub.endpoint"
          ", sub.topic, sub.serverVAPIDPublicKey, sub.clientPublicKey, sub.clientPrivateKey, sub.sharedAuthSecret, sub.ex"
          "pirationTime FROM Subscriptions sub CROSS JOIN SubscriptionSets ss ON sub.subscriptionSetID = ss.rowid WHERE s"
          "ub.scope = ? AND ss.bundleID = ? AND ss.pushPartition = ? AND ss.dataStoreUUID = ?";
    _os_log_error_impl(&dword_1940B8000, v25, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
    if (!v11)
      goto LABEL_38;
    goto LABEL_37;
  }
  *(_DWORD *)v12 = v22;
LABEL_28:
  if (!v17)
    goto LABEL_35;
LABEL_29:
  v41 = v11;
  if (WebCore::SQLiteStatement::step(v11) == 100)
  {
    WebCore::makePushRecordFromRow((WebCore *)buf, &v41);
    WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,WebCore::PushRecord>((WTF::WorkQueue *)(a1 + 9), (uint64_t)buf);
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v23);
LABEL_42:
    sqlite3_reset(v11[1]);
    sqlite3_clear_bindings(v11[1]);
    return;
  }
  v24 = 0;
LABEL_39:
  buf[0] = 0;
  v51 = 0;
  WebCore::completeOnMainQueue<std::optional<WebCore::PushRecord> &&,std::optional<WebCore::PushRecord>>((WTF::WorkQueue *)(a1 + 9), (uint64_t)buf);
  if (v51)
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v26);
  if ((v24 & 1) == 0)
    goto LABEL_42;
}

BOOL WebCore::SQLiteStatement::bindImpl<WTF::String,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>>(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  WTF::StringImpl *v7;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  int v18;
  int v19;

  v7 = (WTF::StringImpl *)a3;
  if (a3)
  {
    v10 = *(unsigned int *)(a3 + 4);
    *(_DWORD *)a3 += 2;
    a3 = *(_QWORD *)(a3 + 8);
    v11 = v10 | ((unint64_t)((*((_DWORD *)v7 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText(a1, a2, (char *)a3, v11))
  {
    v13 = 0;
    if (!v7)
      return v13;
    goto LABEL_17;
  }
  v14 = *a4;
  if (v14)
  {
    v15 = *(unsigned int *)(v14 + 4);
    *(_DWORD *)v14 += 4;
    v16 = *(char **)(v14 + 8);
    v17 = v15 | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  if (WebCore::SQLiteStatement::bindText(a1, a2 + 1, v16, v17))
  {
    v13 = 0;
    if (!v14)
    {
LABEL_16:
      if (!v7)
        return v13;
      goto LABEL_17;
    }
  }
  else
  {
    v13 = sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 8), a2 + 2, *(const void **)a5, *(_DWORD *)(a5 + 8), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL) == 0;
    if (!v14)
      goto LABEL_16;
  }
  v18 = *(_DWORD *)v14 - 2;
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v14, v12);
    v18 = *(_DWORD *)v14;
  }
  else
  {
    *(_DWORD *)v14 = v18;
  }
  v19 = v18 - 2;
  if (v19)
  {
    *(_DWORD *)v14 = v19;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v14, v12);
  if (!v7)
    return v13;
LABEL_17:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v12);
  else
    *(_DWORD *)v7 -= 2;
  return v13;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::getIdentifiers(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33659F8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::getIdentifiers(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33659F8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::getIdentifiers(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::WorkQueue *v3;
  sqlite3_stmt **v4;
  sqlite3_int64 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v26;
  void *v27;
  uint64_t result;
  WebCore::SQLiteStatement *v29;
  uint64_t v30;
  sqlite3_int64 v31;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 8);
  v30 = 0;
  WebCore::PushDatabase::cachedStatementOnQueue((sqlite3_stmt ***)&v29, v2, "SELECT rowid FROM Subscriptions", (const char *)0x20);
  v4 = (sqlite3_stmt **)v29;
  if (v29 && (v3 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v29), (_DWORD)v3 == 100))
  {
    do
    {
      if ((sqlite3_stmt_busy(v4[1]) || WebCore::SQLiteStatement::step(v4) == 100)
        && sqlite3_data_count(v4[1]) >= 1)
      {
        v5 = sqlite3_column_int64(v4[1], 0);
      }
      else
      {
        v5 = 0;
      }
      v31 = v5;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v33, &v30, &v31);
      v3 = WebCore::SQLiteStatement::step(v4);
    }
    while ((_DWORD)v3 == 100);
    v6 = v30;
  }
  else
  {
    v6 = 0;
  }
  v7 = WTF::WorkQueue::main(v3);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v31 = v8;
  if (v6)
    v9 = *(_DWORD *)(v6 - 12);
  else
    v9 = 0;
  v10 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = (v11 | HIWORD(v11)) + 1;
  if (v12 > 0x400)
  {
    if (v12 > 2 * (unint64_t)v9)
      goto LABEL_19;
  }
  else if (3 * v12 > 4 * (unint64_t)v9)
  {
LABEL_17:
    v13 = (double)v9;
    v14 = (double)v12;
    v15 = 0.604166667;
    goto LABEL_20;
  }
  LODWORD(v12) = 2 * v12;
  if (v12 <= 0x400)
    goto LABEL_17;
LABEL_19:
  v13 = (double)v9;
  v14 = (double)v12;
  v15 = 0.416666667;
LABEL_20:
  if (v14 * v15 <= v13)
    LODWORD(v12) = 2 * v12;
  if (v12 <= 8)
    v16 = 8;
  else
    v16 = v12;
  v17 = WTF::fastZeroedMalloc((WTF *)(8 * v16 + 16));
  v18 = v17 + 16;
  v32 = v17 + 16;
  *(_DWORD *)(v17 + 8) = v16 - 1;
  *(_DWORD *)(v17 + 12) = v16;
  *(_QWORD *)v17 = 0;
  if (v6)
  {
    do
    {
      if (!*(_DWORD *)(v6 - 12))
        break;
      v19 = *(unsigned int *)(v6 - 4);
      v20 = (uint64_t *)v6;
      if ((_DWORD)v19)
      {
        v21 = 0;
        while ((unint64_t)(*(_QWORD *)(v6 + v21) + 1) <= 1)
        {
          v21 += 8;
          if (8 * v19 == v21)
            goto LABEL_40;
        }
        v20 = (uint64_t *)(v6 + v21);
      }
      if ((uint64_t *)(v6 + 8 * v19) == v20)
      {
LABEL_40:
        v22 = 0;
      }
      else
      {
        v22 = *v20;
        *v20 = -1;
        v6 = v30;
        v23 = *(_DWORD *)(v30 - 12) - 1;
        ++*(_DWORD *)(v30 - 16);
        *(_DWORD *)(v6 - 12) = v23;
        v24 = *(_DWORD *)(v6 - 4);
        if (6 * v23 < v24 && v24 >= 9)
        {
          WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(&v30, v24 >> 1, 0);
          v6 = v30;
        }
      }
      v34 = v22;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v33, &v32, &v34);
    }
    while (v6);
    v8 = v31;
    v18 = v32;
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v26 = &off_1E3365A20;
  v26[1] = v8;
  v26[2] = v18;
  v33[0] = (uint64_t)v26;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, v33);
  result = v33[0];
  v33[0] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v4)
  {
    sqlite3_reset(v4[1]);
    result = sqlite3_clear_bindings(v4[1]);
  }
  if (v6)
    return WTF::fastFree((WTF *)(v6 - 16), v27);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_33;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_28;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_29:
    result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(a2, v25, v14);
    v14 = result;
    v21 = *a2;
    if (*a2)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_33:
  *v5 = (uint64_t)v14;
  v5[1] = v27;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)> &&,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E3365A20;
  v3 = a1[2];
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)> &&,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3365A20;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)> &&,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::getTopics(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3365A48;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::getTopics(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3365A48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::PushDatabase::getTopics(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::WorkQueue *v3;
  sqlite3_stmt **v4;
  WTF::WorkQueue *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  int v22;
  int v23;
  WTF::StringImpl **v24;
  int v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *result;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WebCore::SQLiteStatement *v54;
  WTF *v55[2];
  WTF *v56[2];
  WTF::StringImpl *v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v55 = 0u;
  *(_OWORD *)v56 = 0u;
  WebCore::PushDatabase::cachedStatementOnQueue((sqlite3_stmt ***)&v54, v2, "SELECT sub.topic, ss.state FROM Subscriptions sub JOIN SubscriptionSets ss ON sub.subscriptionSetID = ss.rowid", (const char *)0x6F);
  v4 = (sqlite3_stmt **)v54;
  if (!v54)
  {
    v30 = WTF::WorkQueue::main(v3);
    v31 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v57[0] = v31;
    WebCore::PushTopics::isolatedCopy((uint64_t)v55, (uint64_t)&v57[1]);
    v32 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v32 = off_1E3365A70;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)v57;
    *(_QWORD *)(v32 + 24) = v58;
    *(_QWORD *)(v32 + 32) = v59;
    *(_QWORD *)(v32 + 40) = v60;
    v61 = v32;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 32))(v30, &v61);
    v33 = v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    goto LABEL_32;
  }
  v5 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v54);
  if ((_DWORD)v5 == 100)
  {
    while ((sqlite3_stmt_busy(v4[1]) || WebCore::SQLiteStatement::step(v4) == 100)
         && sqlite3_data_count(v4[1]) >= 2)
    {
      v6 = sqlite3_column_int(v4[1], 1);
      if (v6 == 1)
      {
        WebCore::SQLiteStatement::columnText(v4, 0, v57);
        LODWORD(v10) = HIDWORD(v56[1]);
        if (HIDWORD(v56[1]) == LODWORD(v56[1]))
        {
          v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, HIDWORD(v56[1]) + 1, (unint64_t)v57);
          v10 = HIDWORD(v56[1]);
          v17 = v56[0];
          v18 = *v16;
          *v16 = 0;
          *((_QWORD *)v17 + v10) = v18;
        }
        else
        {
          v11 = v57[0];
          v57[0] = 0;
          *((_QWORD *)v56[0] + HIDWORD(v56[1])) = v11;
        }
        HIDWORD(v56[1]) = v10 + 1;
LABEL_13:
        v12 = v57[0];
        v57[0] = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v7);
          else
            *(_DWORD *)v12 -= 2;
        }
        goto LABEL_16;
      }
      if (!v6)
        break;
LABEL_16:
      v5 = WebCore::SQLiteStatement::step(v4);
      if ((_DWORD)v5 != 100)
        goto LABEL_23;
    }
    WebCore::SQLiteStatement::columnText(v4, 0, v57);
    LODWORD(v8) = HIDWORD(v55[1]);
    if (HIDWORD(v55[1]) == LODWORD(v55[1]))
    {
      v13 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, HIDWORD(v55[1]) + 1, (unint64_t)v57);
      v8 = HIDWORD(v55[1]);
      v14 = v55[0];
      v15 = *v13;
      *v13 = 0;
      *((_QWORD *)v14 + v8) = v15;
    }
    else
    {
      v9 = v57[0];
      v57[0] = 0;
      *((_QWORD *)v55[0] + HIDWORD(v55[1])) = v9;
    }
    HIDWORD(v55[1]) = v8 + 1;
    goto LABEL_13;
  }
LABEL_23:
  v19 = WTF::WorkQueue::main(v5);
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v21 = (WTF::StringImpl **)v55[0];
  if (!HIDWORD(v55[1]))
  {
    v22 = 0;
    goto LABEL_25;
  }
  v42 = (WTF::StringImpl **)((char *)v55[0] + 8 * HIDWORD(v55[1]));
  do
  {
    WTF::String::isolatedCopy();
    v44 = v57[0];
    v57[0] = 0;
    v45 = *v21;
    *v21 = v44;
    if (!v45)
      goto LABEL_57;
    v46 = *(_DWORD *)v45 - 2;
    if (*(_DWORD *)v45 != 2)
    {
LABEL_56:
      *(_DWORD *)v45 = v46;
      goto LABEL_57;
    }
    WTF::StringImpl::destroy(v45, v43);
    v45 = v57[0];
    v57[0] = 0;
    if (v45)
    {
      v46 = *(_DWORD *)v45 - 2;
      if (*(_DWORD *)v45 != 2)
        goto LABEL_56;
      WTF::StringImpl::destroy(v45, v47);
    }
LABEL_57:
    ++v21;
  }
  while (v21 < v42);
  v21 = (WTF::StringImpl **)v55[0];
  v22 = HIDWORD(v55[1]);
LABEL_25:
  v23 = (int)v55[1];
  v55[0] = 0;
  v55[1] = 0;
  v24 = (WTF::StringImpl **)v56[0];
  if (!HIDWORD(v56[1]))
  {
    v25 = 0;
    goto LABEL_27;
  }
  v48 = (WTF::StringImpl **)((char *)v56[0] + 8 * HIDWORD(v56[1]));
  while (2)
  {
    WTF::String::isolatedCopy();
    v50 = v57[0];
    v57[0] = 0;
    v51 = *v24;
    *v24 = v50;
    if (v51)
    {
      v52 = *(_DWORD *)v51 - 2;
      if (*(_DWORD *)v51 != 2)
        goto LABEL_65;
      WTF::StringImpl::destroy(v51, v49);
      v51 = v57[0];
      v57[0] = 0;
      if (v51)
      {
        v52 = *(_DWORD *)v51 - 2;
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v53);
        else
LABEL_65:
          *(_DWORD *)v51 = v52;
      }
    }
    if (++v24 < v48)
      continue;
    break;
  }
  v24 = (WTF::StringImpl **)v56[0];
  v25 = HIDWORD(v56[1]);
LABEL_27:
  v26 = (int)v56[1];
  v56[0] = 0;
  v56[1] = 0;
  v27 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v27 = off_1E3365A98;
  *(_QWORD *)(v27 + 8) = v20;
  *(_QWORD *)(v27 + 16) = v21;
  *(_DWORD *)(v27 + 24) = v23;
  *(_DWORD *)(v27 + 28) = v22;
  *(_QWORD *)(v27 + 32) = v24;
  *(_DWORD *)(v27 + 40) = v26;
  *(_DWORD *)(v27 + 44) = v25;
  v57[0] = (WTF::StringImpl *)v27;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v19 + 32))(v19, v57);
  v28 = v57[0];
  v57[0] = 0;
  if (v28)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
  sqlite3_reset(v4[1]);
  sqlite3_clear_bindings(v4[1]);
LABEL_32:
  if (HIDWORD(v56[1]))
  {
    v36 = (WTF::StringImpl **)v56[0];
    v37 = 8 * HIDWORD(v56[1]);
    do
    {
      v38 = *v36;
      *v36 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v29);
        else
          *(_DWORD *)v38 -= 2;
      }
      ++v36;
      v37 -= 8;
    }
    while (v37);
  }
  v34 = v56[0];
  if (v56[0])
  {
    v56[0] = 0;
    LODWORD(v56[1]) = 0;
    WTF::fastFree(v34, v29);
  }
  if (HIDWORD(v55[1]))
  {
    v39 = (WTF::StringImpl **)v55[0];
    v40 = 8 * HIDWORD(v55[1]);
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v29);
        else
          *(_DWORD *)v41 -= 2;
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  result = v55[0];
  if (v55[0])
  {
    v55[0] = 0;
    LODWORD(v55[1]) = 0;
    return (WTF *)WTF::fastFree(result, v29);
  }
  return result;
}

uint64_t *WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics&>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics&)::{lambda(void)#1}::~CompletionHandler(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v3 = *((unsigned int *)a1 + 9);
  if ((_DWORD)v3)
  {
    v9 = (WTF::StringImpl **)a1[3];
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)a1[3];
  if (v4)
  {
    a1[3] = 0;
    *((_DWORD *)a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v5)
  {
    v12 = (WTF::StringImpl **)a1[1];
    v13 = 8 * v5;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v6 = (WTF *)a1[1];
  if (v6)
  {
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics&>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3365A70;
  WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics&>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics&)::{lambda(void)#1}::~CompletionHandler(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics&>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E3365A70;
  WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics&>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics&)::{lambda(void)#1}::~CompletionHandler(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics&>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3365A98;
  WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics&>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics&)::{lambda(void)#1}::~CompletionHandler(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E3365A98;
  WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics&>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics&)::{lambda(void)#1}::~CompletionHandler(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WebCore::PushTopics &&,WebCore::PushTopics>(WTF::CompletionHandler<void ()(WebCore::PushTopics &&)> &&,WebCore::PushTopics &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E3365AC0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3365AC0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  __int128 *v14;
  WTF::WorkQueue *v15;
  WebCore::SQLiteStatement *v16;
  uint64_t *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  sqlite3_stmt *v27;
  __int128 *v28;
  WTF::WorkQueue *v29;
  sqlite3_stmt **v30;
  int v31;
  WTF::WorkQueue *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  WebCore::SQLiteStatement *v43;
  unsigned int *v44;
  __int16 v45;
  __int128 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = a1[2];
  v3 = *(unsigned int **)(v2 + 8);
  v44 = v3;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v45 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v44);
  v5 = (uint64_t *)MEMORY[0x1E0CBF738];
  if (a1[4])
    v6 = a1 + 4;
  else
    v6 = (uint64_t *)MEMORY[0x1E0CBF738];
  if (a1[5])
    v7 = (WTF::StringImpl **)(a1 + 5);
  else
    v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v8 = a1[6];
  v9 = a1[7];
  v10 = (__int128 *)(a1 + 6);
  v11 = v8 | v9;
  if (*((_OWORD *)a1 + 3) == 0)
  {
    v12 = 0;
    LOBYTE(v46) = 0;
  }
  else
  {
    v46 = *v10;
    v12 = 1;
    v11 = 16;
  }
  v47 = v12;
  v13 = (v8 | v9) == 0;
  v14 = &v46;
  if (v13)
    v14 = (__int128 *)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  v41 = v14;
  v42 = v11;
  WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>((sqlite3_stmt ***)&v43, v2, "UPDATE SubscriptionSets SET silentPushCount = silentPushCount + 1 WHERE bundleID = ? AND pushPartition = ? AND dataStoreUUID = ? AND securityOrigin = ?", (const char *)0x98, v6, v7, (uint64_t)&v41, a1 + 8);
  v16 = v43;
  if (v43 && (v15 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v43), (_DWORD)v15 == 101))
  {
    sqlite3_reset(*((sqlite3_stmt **)v16 + 1));
    sqlite3_clear_bindings(*((sqlite3_stmt **)v16 + 1));
    if (a1[4])
      v17 = a1 + 4;
    else
      v17 = v5;
    if (a1[5])
      v18 = (WTF::StringImpl **)(a1 + 5);
    else
      v18 = (WTF::StringImpl **)v5;
    v20 = *(_QWORD *)v10;
    v19 = a1[7];
    v21 = *(_QWORD *)v10 | v19;
    if (v21)
    {
      v46 = *v10;
      v22 = 1;
      v21 = 16;
    }
    else
    {
      v22 = 0;
      LOBYTE(v46) = 0;
    }
    v47 = v22;
    v13 = (v20 | v19) == 0;
    v28 = &v46;
    if (v13)
      v28 = (__int128 *)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
    v41 = v28;
    v42 = v21;
    WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>((sqlite3_stmt ***)&v43, v2, "SELECT silentPushCount FROM SubscriptionSets WHERE bundleID = ? AND pushPartition = ? AND dataStoreUUID = ? AND securityOrigin = ?", (const char *)0x83, v17, v18, (uint64_t)&v41, a1 + 8);
    v30 = (sqlite3_stmt **)v43;
    if (v43)
    {
      v29 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v43);
      if ((_DWORD)v29 == 100)
      {
        if ((sqlite3_stmt_busy(v30[1]) || WebCore::SQLiteStatement::step(v30) == 100)
          && sqlite3_data_count(v30[1]) >= 1)
        {
          v31 = sqlite3_column_int(v30[1], 0);
        }
        else
        {
          v31 = 0;
        }
        sqlite3_reset(v30[1]);
        sqlite3_clear_bindings(v30[1]);
        v32 = (WTF::WorkQueue *)WebCore::SQLiteTransaction::commit((uint64_t)&v44);
        v33 = WTF::WorkQueue::main(v32);
        v34 = a1[9];
        a1[9] = 0;
        v35 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v35 = &off_1E3365B10;
        *(_QWORD *)(v35 + 8) = v34;
        *(_DWORD *)(v35 + 16) = v31;
        *(_QWORD *)&v46 = v35;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v33 + 32))(v33, &v46);
        v36 = v46;
        *(_QWORD *)&v46 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        goto LABEL_43;
      }
    }
    v37 = WTF::WorkQueue::main(v29);
    v38 = a1[9];
    a1[9] = 0;
    v39 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v39 = &off_1E3365AE8;
    *(_QWORD *)(v39 + 8) = v38;
    *(_DWORD *)(v39 + 16) = 0;
    *(_QWORD *)&v46 = v39;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v37 + 32))(v37, &v46);
    v40 = v46;
    *(_QWORD *)&v46 = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    if (v30)
    {
      sqlite3_reset(v30[1]);
      v27 = v30[1];
      goto LABEL_42;
    }
  }
  else
  {
    v23 = WTF::WorkQueue::main(v15);
    v24 = a1[9];
    a1[9] = 0;
    v25 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v25 = &off_1E3365AE8;
    *(_QWORD *)(v25 + 8) = v24;
    *(_DWORD *)(v25 + 16) = 0;
    *(_QWORD *)&v46 = v25;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 32))(v23, &v46);
    v26 = v46;
    *(_QWORD *)&v46 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (v16)
    {
      sqlite3_reset(*((sqlite3_stmt **)v16 + 1));
      v27 = (sqlite3_stmt *)*((_QWORD *)v16 + 1);
LABEL_42:
      sqlite3_clear_bindings(v27);
    }
  }
LABEL_43:
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v44);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<unsigned int,unsigned int>(WTF::CompletionHandler<void ()(unsigned int)> &&,unsigned int &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3365AE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<unsigned int,unsigned int>(WTF::CompletionHandler<void ()(unsigned int)> &&,unsigned int &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3365AE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<unsigned int,unsigned int>(WTF::CompletionHandler<void ()(unsigned int)> &&,unsigned int &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<unsigned int,int &>(WTF::CompletionHandler<void ()(unsigned int)> &&,int &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3365B10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<unsigned int,int &>(WTF::CompletionHandler<void ()(unsigned int)> &&,int &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3365B10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<unsigned int,int &>(WTF::CompletionHandler<void ()(unsigned int)> &&,int &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordsBySubscriptionSet(WebCore::PushSubscriptionSetIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E3365B38;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordsBySubscriptionSet(WebCore::PushSubscriptionSetIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E3365B38;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordsBySubscriptionSet(WebCore::PushSubscriptionSetIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  WTF::WorkQueue *v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  WTF::StringImpl **v17;
  sqlite3_stmt **v18;
  int v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  WTF::StringImpl **v41;
  WebCore::SQLiteStatement *v42;
  unsigned int v43;
  WTF::StringImpl **v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  WTF::StringImpl **v50;
  WebCore::SQLiteStatement *v51;
  unsigned int v52;
  char v53;
  void *v54;
  WTF *v55;
  uint64_t v56;
  char *v57;
  WTF *v58;
  WTF::StringImpl *v59;
  void *v60;
  WTF *v61;
  uint64_t v62;
  char *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl **v67;
  uint64_t v68;
  WebCore::SQLiteStatement *v69;
  unsigned int *v70;
  __int16 v71;
  WTF *v72;
  uint64_t v73;
  WTF::StringImpl *v74[2];
  WTF *v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v2 = a1[2];
  v3 = (WTF::WorkQueue *)(a1 + 8);
  v72 = 0;
  v73 = 0;
  v4 = *(unsigned int **)(v2 + 8);
  v70 = v4;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v71 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v70);
  v6 = (WTF::StringImpl **)(a1 + 4);
  v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  if (a1[4])
    v8 = (WTF::StringImpl **)(a1 + 4);
  else
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v9 = a1 + 5;
  if (a1[5])
    v10 = a1 + 5;
  else
    v10 = (uint64_t *)MEMORY[0x1E0CBF738];
  v11 = a1[6];
  v12 = a1[7];
  v13 = a1 + 6;
  v14 = v11 | v12;
  if (v11 | v12)
  {
    *(_OWORD *)v74 = *(_OWORD *)v13;
    v15 = 1;
    v14 = 16;
  }
  else
  {
    v15 = 0;
    LOBYTE(v74[0]) = 0;
  }
  LOBYTE(v75) = v15;
  v16 = (v11 | v12) == 0;
  v17 = v74;
  if (v16)
    v17 = (WTF::StringImpl **)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  v67 = v17;
  v68 = v14;
  WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>>((sqlite3_stmt ***)&v69, v2, "SELECT sub.subscriptionSetID, sub.rowid, sub.topic, sub.serverVAPIDPublicKey FROM SubscriptionSets ss JOIN Subscriptions sub ON ss.rowid = sub.subscriptionSetID WHERE ss.bundleID = ? AND ss.pushPartition = ? AND ss.dataStoreUUID = ?", (const char *)0xE9, v8, v10, (uint64_t)&v67);
  v18 = (sqlite3_stmt **)v69;
  if (!v69)
    goto LABEL_61;
  while (WebCore::SQLiteStatement::step(v18) == 100)
  {
    if ((sqlite3_stmt_busy(v18[1]) || WebCore::SQLiteStatement::step(v18) == 100)
      && sqlite3_data_count(v18[1]) >= 2)
    {
      v19 = sqlite3_column_int(v18[1], 1);
    }
    else
    {
      v19 = 0;
    }
    v20 = (WTF::StringImpl *)v19;
    WebCore::SQLiteStatement::columnText(v18, 2, &v66);
    WebCore::SQLiteStatement::columnBlob(v18, 3, (uint64_t)&v67);
    v74[0] = v20;
    v74[1] = v66;
    v22 = (WTF *)v67;
    v66 = 0;
    v67 = 0;
    v75 = v22;
    v23 = v68;
    v68 = 0;
    v76 = v23;
    v24 = HIDWORD(v73);
    if (HIDWORD(v73) == (_DWORD)v73)
    {
      v25 = WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v72, HIDWORD(v73) + 1, (unint64_t)v74);
      v24 = HIDWORD(v73);
      v26 = (char *)v72 + 32 * HIDWORD(v73);
      *(_QWORD *)v26 = *(_QWORD *)v25;
      v27 = *(_QWORD *)(v25 + 8);
      *(_QWORD *)(v25 + 8) = 0;
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 3) = 0;
      *((_QWORD *)v26 + 1) = v27;
      v28 = *(_QWORD *)(v25 + 16);
      *(_QWORD *)(v25 + 16) = 0;
      *((_QWORD *)v26 + 2) = v28;
      LODWORD(v28) = *(_DWORD *)(v25 + 24);
      *(_DWORD *)(v25 + 24) = 0;
      *((_DWORD *)v26 + 6) = v28;
      v29 = *(_DWORD *)(v25 + 28);
      *(_DWORD *)(v25 + 28) = 0;
    }
    else
    {
      v26 = (char *)v72 + 32 * HIDWORD(v73);
      *(_QWORD *)v26 = v20;
      v30 = v74[1];
      v74[1] = 0;
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 3) = 0;
      *((_QWORD *)v26 + 1) = v30;
      v31 = v75;
      v75 = 0;
      *((_QWORD *)v26 + 2) = v31;
      LODWORD(v31) = v76;
      LODWORD(v76) = 0;
      *((_DWORD *)v26 + 6) = (_DWORD)v31;
      v29 = HIDWORD(v76);
      HIDWORD(v76) = 0;
    }
    *((_DWORD *)v26 + 7) = v29;
    HIDWORD(v73) = v24 + 1;
    v32 = v75;
    if (v75)
    {
      v75 = 0;
      LODWORD(v76) = 0;
      WTF::fastFree(v32, v21);
    }
    v33 = v74[1];
    v74[1] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v66;
    v66 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  sqlite3_reset(v18[1]);
  sqlite3_clear_bindings(v18[1]);
  if (*v6)
    v35 = v6;
  else
    v35 = v7;
  if (*v9)
    v36 = v9;
  else
    v36 = (uint64_t *)v7;
  v38 = *v13;
  v37 = v13[1];
  v39 = *v13 | v37;
  if (v39)
  {
    *(_OWORD *)v74 = *(_OWORD *)v13;
    v40 = 1;
    v39 = 16;
  }
  else
  {
    v40 = 0;
    LOBYTE(v74[0]) = 0;
  }
  LOBYTE(v75) = v40;
  v16 = (v38 | v37) == 0;
  v41 = v74;
  if (v16)
    v41 = (WTF::StringImpl **)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  v67 = v41;
  v68 = v39;
  WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>>((sqlite3_stmt ***)&v69, v2, "DELETE FROM Subscriptions WHERE subscriptionSetID IN(   SELECT rowid FROM SubscriptionSets     WHERE bundleID = ? AND pushPartition = ? AND dataStoreUUID = ?)", (const char *)0xA2, v35, v36, (uint64_t)&v67);
  v42 = v69;
  if (!v69)
    goto LABEL_61;
  v43 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v69);
  sqlite3_reset(*((sqlite3_stmt **)v42 + 1));
  sqlite3_clear_bindings(*((sqlite3_stmt **)v42 + 1));
  if (v43 != 101)
    goto LABEL_61;
  if (*v6)
    v44 = v6;
  else
    v44 = v7;
  if (*v9)
    v45 = v9;
  else
    v45 = (uint64_t *)v7;
  v47 = *v13;
  v46 = v13[1];
  v48 = *v13 | v46;
  if (v48)
  {
    *(_OWORD *)v74 = *(_OWORD *)v13;
    v49 = 1;
    v48 = 16;
  }
  else
  {
    v49 = 0;
    LOBYTE(v74[0]) = 0;
  }
  LOBYTE(v75) = v49;
  v16 = (v47 | v46) == 0;
  v50 = v74;
  if (v16)
    v50 = (WTF::StringImpl **)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  v67 = v50;
  v68 = v48;
  WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>>((sqlite3_stmt ***)&v69, v2, "DELETE FROM SubscriptionSets WHERE bundleID = ? AND pushPartition = ? AND dataStoreUUID = ?", (const char *)0x5C, v44, v45, (uint64_t)&v67);
  v51 = v69;
  if (v69
    && (v52 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v69),
        sqlite3_reset(*((sqlite3_stmt **)v51 + 1)),
        sqlite3_clear_bindings(*((sqlite3_stmt **)v51 + 1)),
        v52 == 101))
  {
    WebCore::SQLiteTransaction::commit((uint64_t)&v70);
    WebCore::completeOnMainQueue<WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, (unint64_t *)&v72);
    v53 = 1;
  }
  else
  {
LABEL_61:
    v53 = 0;
  }
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v70);
  v55 = v72;
  if (HIDWORD(v73))
  {
    v56 = 32 * HIDWORD(v73);
    v57 = (char *)v72 + 16;
    do
    {
      v58 = *(WTF **)v57;
      if (*(_QWORD *)v57)
      {
        *(_QWORD *)v57 = 0;
        *((_DWORD *)v57 + 2) = 0;
        WTF::fastFree(v58, v54);
      }
      v59 = (WTF::StringImpl *)*((_QWORD *)v57 - 1);
      *((_QWORD *)v57 - 1) = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v54);
        else
          *(_DWORD *)v59 -= 2;
      }
      v57 += 32;
      v56 -= 32;
    }
    while (v56);
  }
  if (v55)
    WTF::fastFree(v55, v54);
  if ((v53 & 1) == 0)
  {
    v74[0] = 0;
    v74[1] = 0;
    WebCore::completeOnMainQueue<WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, (unint64_t *)v74);
    v61 = v74[0];
    if (HIDWORD(v74[1]))
    {
      v62 = 32 * HIDWORD(v74[1]);
      v63 = (char *)v74[0] + 16;
      do
      {
        v64 = *(WTF **)v63;
        if (*(_QWORD *)v63)
        {
          *(_QWORD *)v63 = 0;
          *((_DWORD *)v63 + 2) = 0;
          WTF::fastFree(v64, v60);
        }
        v65 = (WTF::StringImpl *)*((_QWORD *)v63 - 1);
        *((_QWORD *)v63 - 1) = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v60);
          else
            *(_DWORD *)v65 -= 2;
        }
        v63 += 32;
        v62 -= 32;
      }
      while (v62);
    }
    if (v61)
      WTF::fastFree(v61, v60);
  }
}

void WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>>(sqlite3_stmt ***a1, uint64_t a2, const char *a3, const char *a4, WTF::StringImpl **a5, uint64_t *a6, uint64_t a7)
{
  sqlite3_stmt **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  BOOL v16;
  int v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  sqlite3 *v21;
  int v22;
  sqlite3 *v23;
  const char *v24;
  uint64_t v25;
  sqlite3_stmt **v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  WebCore::PushDatabase::cachedStatementOnQueue(&v26, a2, a3, a4);
  v13 = v26;
  if (v26)
  {
    v14 = *a5;
    if (v14)
    {
      *(_DWORD *)v14 += 4;
      v16 = WebCore::SQLiteStatement::bindImpl<WTF::String,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>>((uint64_t)v13, 1, (uint64_t)v14, a6, a7);
      v17 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v15);
        v17 = *(_DWORD *)v14;
      }
      else
      {
        *(_DWORD *)v14 = v17;
      }
      v18 = v17 - 2;
      if (v18)
      {
        *(_DWORD *)v14 = v18;
        if (v16)
        {
LABEL_7:
          *a1 = v13;
          return;
        }
      }
      else
      {
        WTF::StringImpl::destroy(v14, v15);
        if (v16)
          goto LABEL_7;
      }
    }
    else if (WebCore::SQLiteStatement::bindImpl<WTF::String,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>>((uint64_t)v26, 1, 0, a6, a7))
    {
      goto LABEL_7;
    }
  }
  v19 = off_1ECE7C7C0;
  if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
  {
    v20 = *(_QWORD *)(a2 + 8);
    v21 = *(sqlite3 **)(v20 + 8);
    if (v21)
    {
      v22 = sqlite3_errcode(v21);
      v20 = *(_QWORD *)(a2 + 8);
      v23 = *(sqlite3 **)(v20 + 8);
      if (v23)
      {
        v24 = sqlite3_errmsg(v23);
LABEL_21:
        *(_DWORD *)buf = 134218754;
        v28 = a2;
        v29 = 1024;
        v30 = v22;
        v31 = 2082;
        v32 = v24;
        v33 = 2082;
        v34 = a3;
        _os_log_error_impl(&dword_1940B8000, v19, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
        goto LABEL_11;
      }
    }
    else
    {
      v22 = *(_DWORD *)(v20 + 52);
    }
    v25 = *(_QWORD *)(v20 + 56);
    if (v25)
      v24 = (const char *)(v25 + 16);
    else
      v24 = "database is not open";
    goto LABEL_21;
  }
LABEL_11:
  *a1 = 0;
  if (v13)
  {
    sqlite3_reset(v13[1]);
    sqlite3_clear_bindings(v13[1]);
  }
}

uint64_t WebCore::completeOnMainQueue<WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::WorkQueue *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  WTF *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = WTF::WorkQueue::main(a1);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v6 = *a2;
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v8 = v6 + 32 * v7;
    do
    {
      v23 = *(_QWORD *)v6;
      WTF::String::isolatedCopy();
      v10 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      v25 = v10;
      v11 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v26 = v11;
      *(_QWORD *)v6 = v23;
      v12 = v24;
      v24 = 0;
      v13 = *(WTF::StringImpl **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v9);
          v18 = *(WTF **)(v6 + 16);
          if (v18)
          {
            *(_QWORD *)(v6 + 16) = 0;
            *(_DWORD *)(v6 + 24) = 0;
            WTF::fastFree(v18, v9);
          }
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      v14 = v25;
      v15 = v26;
      LODWORD(v26) = 0;
      *(_DWORD *)(v6 + 24) = v15;
      v16 = HIDWORD(v26);
      HIDWORD(v26) = 0;
      *(_DWORD *)(v6 + 28) = v16;
      v17 = v24;
      v24 = 0;
      v25 = 0;
      *(_QWORD *)(v6 + 16) = v14;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v9);
        else
          *(_DWORD *)v17 -= 2;
      }
      v6 += 32;
    }
    while (v6 < v8);
    v6 = *a2;
    v19 = *((_DWORD *)a2 + 3);
  }
  else
  {
    v19 = 0;
  }
  v20 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  v21 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v21 = &off_1E3365B60;
  *(_QWORD *)(v21 + 8) = v5;
  *(_QWORD *)(v21 + 16) = v6;
  *(_DWORD *)(v21 + 24) = v20;
  *(_DWORD *)(v21 + 28) = v19;
  v23 = v21;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, &v23);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 32 * v5;
        v9 = (char *)v4 + 16;
        do
        {
          *(_QWORD *)v7 = *((_QWORD *)v9 - 2);
          v10 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 3) = 0;
          *((_QWORD *)v7 + 1) = v10;
          v11 = *(WTF **)v9;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v7 + 2) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          v7[6] = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[7] = v11;
          v12 = *(WTF **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            WTF::fastFree(v12, v6);
          }
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
            else
              *result -= 2;
          }
          v9 += 32;
          v7 += 8;
          v8 -= 32;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E3365B60;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = *(_QWORD *)(a1 + 16) + 16;
    do
    {
      v6 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
        WTF::fastFree(v6, a2);
      }
      v7 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  v8 = *(WTF **)(a1 + 16);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E3365B60;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = *((_QWORD *)this + 2) + 16;
    do
    {
      v6 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
        WTF::fastFree(v6, a2);
      }
      v7 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::completeOnMainQueue<WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordsBySubscriptionSetAndSecurityOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E3365B88;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordsBySubscriptionSetAndSecurityOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3365B88;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::removeRecordsBySubscriptionSetAndSecurityOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  WTF::WorkQueue *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  WTF::StringImpl **v13;
  sqlite3_stmt **v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  void *v18;
  WebCore::SQLiteStatement *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WebCore::SQLiteStatement *v33;
  unsigned int v34;
  WebCore::SQLiteStatement *v35;
  unsigned int v36;
  void *v37;
  WTF *v38;
  uint64_t v39;
  char *v40;
  WTF *v41;
  WTF::StringImpl *v42;
  void *v43;
  WTF *v44;
  uint64_t v45;
  char *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WebCore::SQLiteStatement *v50;
  uint64_t v51;
  WebCore::SQLiteStatement *v52;
  unsigned int *v53;
  __int16 v54;
  WTF *v55;
  uint64_t v56;
  WTF::StringImpl *v57[2];
  WTF *v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = a1[2];
  v3 = (WTF::WorkQueue *)(a1 + 9);
  v55 = 0;
  v56 = 0;
  v4 = *(unsigned int **)(v2 + 8);
  v53 = v4;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v54 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v53);
  if (a1[4])
    v6 = a1 + 4;
  else
    v6 = (uint64_t *)MEMORY[0x1E0CBF738];
  if (a1[5])
    v7 = (WTF::StringImpl **)(a1 + 5);
  else
    v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v8 = a1[6];
  v9 = a1[7];
  v10 = v8 | v9;
  if (*((_OWORD *)a1 + 3) == 0)
  {
    v11 = 0;
    LOBYTE(v57[0]) = 0;
  }
  else
  {
    *(_OWORD *)v57 = *((_OWORD *)a1 + 3);
    v10 = 1;
    v11 = 16;
  }
  LOBYTE(v58) = v10;
  v12 = (v8 | v9) == 0;
  v13 = v57;
  if (v12)
    v13 = (WTF::StringImpl **)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  v50 = (WebCore::SQLiteStatement *)v13;
  v51 = v11;
  WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>((sqlite3_stmt ***)&v52, v2, "SELECT sub.subscriptionSetID, sub.rowid, sub.topic, sub.serverVAPIDPublicKey FROM SubscriptionSets ss JOIN Subscriptions sub ON ss.rowid = sub.subscriptionSetID WHERE ss.bundleID = ? AND ss.pushPartition = ? AND ss.dataStoreUUID = ? AND ss.securityOrigin = ?", (const char *)0x103, v6, v7, (uint64_t)&v50, a1 + 8);
  v14 = (sqlite3_stmt **)v52;
  if (v52)
  {
    if (WebCore::SQLiteStatement::step((sqlite3_stmt **)v52) == 100)
    {
      do
      {
        if ((sqlite3_stmt_busy(v14[1]) || WebCore::SQLiteStatement::step(v14) == 100)
          && sqlite3_data_count(v14[1]) >= 1)
        {
          v15 = sqlite3_column_int(v14[1], 0);
        }
        else
        {
          v15 = 0;
        }
        if ((sqlite3_stmt_busy(v14[1]) || WebCore::SQLiteStatement::step(v14) == 100)
          && sqlite3_data_count(v14[1]) >= 2)
        {
          v16 = sqlite3_column_int(v14[1], 1);
        }
        else
        {
          v16 = 0;
        }
        v17 = (WTF::StringImpl *)v16;
        WebCore::SQLiteStatement::columnText(v14, 2, &v49);
        WebCore::SQLiteStatement::columnBlob(v14, 3, (uint64_t)&v50);
        v57[0] = v17;
        v57[1] = v49;
        v19 = v50;
        v49 = 0;
        v50 = 0;
        v58 = v19;
        v20 = v51;
        v51 = 0;
        v59 = v20;
        v21 = HIDWORD(v56);
        if (HIDWORD(v56) == (_DWORD)v56)
        {
          v22 = WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v55, HIDWORD(v56) + 1, (unint64_t)v57);
          v21 = HIDWORD(v56);
          v23 = (char *)v55 + 32 * HIDWORD(v56);
          *(_QWORD *)v23 = *(_QWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          *((_QWORD *)v23 + 2) = 0;
          *((_QWORD *)v23 + 3) = 0;
          *((_QWORD *)v23 + 1) = v24;
          v25 = *(_QWORD *)(v22 + 16);
          *(_QWORD *)(v22 + 16) = 0;
          *((_QWORD *)v23 + 2) = v25;
          LODWORD(v25) = *(_DWORD *)(v22 + 24);
          *(_DWORD *)(v22 + 24) = 0;
          *((_DWORD *)v23 + 6) = v25;
          v26 = *(_DWORD *)(v22 + 28);
          *(_DWORD *)(v22 + 28) = 0;
        }
        else
        {
          v23 = (char *)v55 + 32 * HIDWORD(v56);
          *(_QWORD *)v23 = v17;
          v27 = v57[1];
          v57[1] = 0;
          *((_QWORD *)v23 + 2) = 0;
          *((_QWORD *)v23 + 3) = 0;
          *((_QWORD *)v23 + 1) = v27;
          v28 = v58;
          v58 = 0;
          *((_QWORD *)v23 + 2) = v28;
          LODWORD(v28) = v59;
          LODWORD(v59) = 0;
          *((_DWORD *)v23 + 6) = (_DWORD)v28;
          v26 = HIDWORD(v59);
          HIDWORD(v59) = 0;
        }
        *((_DWORD *)v23 + 7) = v26;
        HIDWORD(v56) = v21 + 1;
        v29 = v58;
        if (v58)
        {
          v58 = 0;
          LODWORD(v59) = 0;
          WTF::fastFree(v29, v18);
        }
        v30 = v57[1];
        v57[1] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v18);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v49;
        v49 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v18);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
      while (WebCore::SQLiteStatement::step(v14) == 100);
      v32 = (WTF::StringImpl *)v15;
    }
    else
    {
      v32 = 0;
    }
    v57[0] = v32;
    sqlite3_reset(v14[1]);
    sqlite3_clear_bindings(v14[1]);
    WebCore::PushDatabase::bindStatementOnQueue<unsigned long long &>((sqlite3_stmt ***)&v50, v2, "DELETE FROM Subscriptions WHERE subscriptionSetID = ?", (const char *)0x36, (sqlite3_int64 *)v57);
    v33 = v50;
    if (!v50)
      goto LABEL_47;
    v34 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v50);
    sqlite3_reset(*((sqlite3_stmt **)v33 + 1));
    sqlite3_clear_bindings(*((sqlite3_stmt **)v33 + 1));
    if (v34 != 101)
      goto LABEL_47;
    WebCore::PushDatabase::bindStatementOnQueue<unsigned long long &>((sqlite3_stmt ***)&v50, v2, "DELETE FROM SubscriptionSets WHERE rowid = ?", (const char *)0x2D, (sqlite3_int64 *)v57);
    v35 = v50;
    if (v50
      && (v36 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v50),
          sqlite3_reset(*((sqlite3_stmt **)v35 + 1)),
          sqlite3_clear_bindings(*((sqlite3_stmt **)v35 + 1)),
          v36 == 101))
    {
      WebCore::SQLiteTransaction::commit((uint64_t)&v53);
      WebCore::completeOnMainQueue<WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, (unint64_t *)&v55);
      LOBYTE(v14) = 1;
    }
    else
    {
LABEL_47:
      LOBYTE(v14) = 0;
    }
  }
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v53);
  v38 = v55;
  if (HIDWORD(v56))
  {
    v39 = 32 * HIDWORD(v56);
    v40 = (char *)v55 + 16;
    do
    {
      v41 = *(WTF **)v40;
      if (*(_QWORD *)v40)
      {
        *(_QWORD *)v40 = 0;
        *((_DWORD *)v40 + 2) = 0;
        WTF::fastFree(v41, v37);
      }
      v42 = (WTF::StringImpl *)*((_QWORD *)v40 - 1);
      *((_QWORD *)v40 - 1) = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v37);
        else
          *(_DWORD *)v42 -= 2;
      }
      v40 += 32;
      v39 -= 32;
    }
    while (v39);
  }
  if (v38)
    WTF::fastFree(v38, v37);
  if ((v14 & 1) == 0)
  {
    v57[0] = 0;
    v57[1] = 0;
    WebCore::completeOnMainQueue<WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, (unint64_t *)v57);
    v44 = v57[0];
    if (HIDWORD(v57[1]))
    {
      v45 = 32 * HIDWORD(v57[1]);
      v46 = (char *)v57[0] + 16;
      do
      {
        v47 = *(WTF **)v46;
        if (*(_QWORD *)v46)
        {
          *(_QWORD *)v46 = 0;
          *((_DWORD *)v46 + 2) = 0;
          WTF::fastFree(v47, v43);
        }
        v48 = (WTF::StringImpl *)*((_QWORD *)v46 - 1);
        *((_QWORD *)v46 - 1) = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v43);
          else
            *(_DWORD *)v48 -= 2;
        }
        v46 += 32;
        v45 -= 32;
      }
      while (v45);
    }
    if (v44)
      WTF::fastFree(v44, v43);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushDatabase::setPushesEnabledForOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E3365BB0;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushDatabase::setPushesEnabledForOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3365BB0;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PushDatabase::setPushesEnabledForOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  sqlite3_stmt **v14;
  sqlite3_stmt **v15;
  int v16;
  sqlite3_int64 v17;
  NSObject *v18;
  WTF::WorkQueue *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  WTF::WorkQueue *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  sqlite3 *v31;
  int v32;
  sqlite3 *v33;
  const char *v34;
  uint64_t v35;
  sqlite3_stmt **v36[2];
  WebCore::SQLiteStatement *v37;
  unsigned int *v38;
  __int16 v39;
  _BYTE buf[18];
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int **)(v2 + 8);
  v38 = v3;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v39 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v38);
  v5 = *(unsigned __int8 *)(a1 + 72);
  v6 = *(_BYTE *)(a1 + 72) == 0;
  if (*(_QWORD *)(a1 + 32))
    v7 = (uint64_t *)(a1 + 32);
  else
    v7 = (uint64_t *)MEMORY[0x1E0CBF738];
  if (*(_QWORD *)(a1 + 40))
    v8 = (WTF::StringImpl **)(a1 + 40);
  else
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = v9 | v10;
  if (*(_OWORD *)(a1 + 48) == 0)
  {
    v12 = 0;
    buf[0] = 0;
  }
  else
  {
    *(_OWORD *)buf = *(_OWORD *)(a1 + 48);
    v11 = 1;
    v12 = 16;
  }
  buf[16] = v11;
  v13 = (v9 | v10) == 0;
  v14 = (sqlite3_stmt **)buf;
  if (v13)
    v14 = (sqlite3_stmt **)&WebCore::uuidToSpan(std::optional<WTF::UUID> const&)::junk;
  v36[0] = v14;
  v36[1] = (sqlite3_stmt **)v12;
  WebCore::PushDatabase::bindStatementOnQueue<WTF::String const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul>,WTF::String&>((sqlite3_stmt ***)&v37, v2, "SELECT rowid, state FROM SubscriptionSets WHERE bundleID = ? AND pushPartition = ? AND dataStoreUUID = ? AND securityOrigin = ?", (const char *)0x80, v7, v8, (uint64_t)v36, (uint64_t *)(a1 + 64));
  v15 = (sqlite3_stmt **)v37;
  if (!v37)
    goto LABEL_31;
  if (WebCore::SQLiteStatement::step((sqlite3_stmt **)v37) != 100)
    goto LABEL_30;
  v16 = (sqlite3_stmt_busy(v15[1]) || WebCore::SQLiteStatement::step(v15) == 100)
     && sqlite3_data_count(v15[1]) >= 2
      ? sqlite3_column_int(v15[1], 1)
      : 0;
  if (v16 == v6)
    goto LABEL_30;
  if ((sqlite3_stmt_busy(v15[1]) || WebCore::SQLiteStatement::step(v15) == 100)
    && sqlite3_data_count(v15[1]) >= 1)
  {
    v17 = sqlite3_column_int64(v15[1], 0);
  }
  else
  {
    v17 = 0;
  }
  sqlite3_reset(v15[1]);
  sqlite3_clear_bindings(v15[1]);
  WebCore::PushDatabase::cachedStatementOnQueue(v36, v2, "UPDATE SubscriptionSets SET state = ? WHERE rowid = ?", (const char *)0x36);
  v15 = v36[0];
  if (!v36[0] || sqlite3_bind_int64(v36[0][1], 1, v5 == 0) || sqlite3_bind_int64(v15[1], 2, v17))
  {
    v18 = off_1ECE7C7C0;
    if (!os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
    {
      if (!v15)
        goto LABEL_31;
      goto LABEL_30;
    }
    v30 = *(_QWORD *)(v2 + 8);
    v31 = *(sqlite3 **)(v30 + 8);
    if (v31)
    {
      v32 = sqlite3_errcode(v31);
      v30 = *(_QWORD *)(v2 + 8);
      v33 = *(sqlite3 **)(v30 + 8);
      if (v33)
      {
        v34 = sqlite3_errmsg(v33);
        goto LABEL_47;
      }
    }
    else
    {
      v32 = *(_DWORD *)(v30 + 52);
    }
    v35 = *(_QWORD *)(v30 + 56);
    if (v35)
      v34 = (const char *)(v35 + 16);
    else
      v34 = "database is not open";
LABEL_47:
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v32;
    v41 = 2082;
    v42 = v34;
    v43 = 2082;
    v44 = "UPDATE SubscriptionSets SET state = ? WHERE rowid = ?";
    _os_log_error_impl(&dword_1940B8000, v18, OS_LOG_TYPE_ERROR, "%p - PushDatabase::Failed with %d (%{public}s) while binding statement: %{public}s", buf, 0x26u);
    if (!v15)
    {
LABEL_31:
      WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v38);
      v20 = WTF::WorkQueue::main(v19);
      v21 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      v22 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v22 = &off_1E3365980;
      *(_QWORD *)(v22 + 8) = v21;
      *(_BYTE *)(v22 + 16) = 0;
      *(_QWORD *)buf = v22;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 32))(v20, buf);
      v23 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return;
    }
LABEL_30:
    sqlite3_reset(v15[1]);
    sqlite3_clear_bindings(v15[1]);
    goto LABEL_31;
  }
  v24 = WebCore::SQLiteStatement::step(v15);
  sqlite3_reset(v15[1]);
  sqlite3_clear_bindings(v15[1]);
  if (v24 != 101)
    goto LABEL_31;
  v25 = (WTF::WorkQueue *)WebCore::SQLiteTransaction::commit((uint64_t)&v38);
  v26 = WTF::WorkQueue::main(v25);
  v27 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  v28 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v28 = &off_1E3365980;
  *(_QWORD *)(v28 + 8) = v27;
  *(_BYTE *)(v28 + 16) = 1;
  *(_QWORD *)buf = v28;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v26 + 32))(v26, buf);
  v29 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v38);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  char v9;

  *(_QWORD *)a1 = &off_1E3365BF8;
  v3 = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 56))
  {
    v4 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E33655C0[v4])(&v9, a1 + 40);
    *(_DWORD *)(a1 + 48) = -1;
  }
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 24))(*v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  char v9;

  *(_QWORD *)this = &off_1E3365BF8;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  if (*((_BYTE *)this + 64) && *((_BYTE *)this + 56))
  {
    v4 = *((unsigned int *)this + 12);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E33655C0[v4])(&v9, (char *)this + 40);
    *((_DWORD *)this + 12) = -1;
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 24))(*v7);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  WebCore::SecurityOrigin *v27;
  WebCore::SecurityOrigin *v28;
  WTF::StringImpl *v29;
  const WebCore::SecurityOrigin *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::MonotonicTime *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  char v42;
  double v43;
  double v44;
  NSObject *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  objc_class *v56;
  WTF::StringImpl *v57;
  objc_class *v58;
  __int128 buf;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v2 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v2 == -1)
        goto LABEL_92;
      v3 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)&buf = &v56;
      ((void (*)(uint64_t *__return_ptr, __int128 *, uint64_t))off_1E3365C10[v2])(&v53, &buf, a1 + 40);
      if (v55)
      {
        if (v55 == 1)
        {
          v4 = v54;
          v54 = 0;
          v5 = *(_QWORD *)(a1 + 72);
          v56 = 0;
          LOBYTE(buf) = v53;
          if (v4)
            *(_DWORD *)v4 += 2;
          *((_QWORD *)&buf + 1) = v4;
          WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&buf, 0, &v56);
          result = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (!result)
          {
LABEL_12:
            if (!v4)
              goto LABEL_37;
            goto LABEL_13;
          }
          if (*(_DWORD *)result != 2)
          {
            *(_DWORD *)result -= 2;
            goto LABEL_12;
          }
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
          if (v4)
          {
LABEL_13:
            if (*(_DWORD *)v4 != 2)
            {
              *(_DWORD *)v4 -= 2;
              goto LABEL_37;
            }
            result = v4;
LABEL_53:
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
          }
LABEL_37:
          if (v55 != -1)
            return (WTF::StringImpl *)((uint64_t (*)(__int128 *, uint64_t *))off_1E3365C50[v55])(&buf, &v53);
          return result;
        }
LABEL_92:
        v52 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0::operator()(void)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &)#1},WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>>)::WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &::operator()(void)::{lambda(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&<$_0::ArrayBufferView,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &)#1},WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>>)::WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &::operator()(void)::{lambda(WTF::String &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&<$_0::ArrayBufferView,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &> &>(v52);
      }
      *(_QWORD *)&buf = 0;
      v13 = CCECCryptorImportKey();
      if (!(_QWORD)buf || (MEMORY[0x19AEA00D8](), v13))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = *(_QWORD *)(a1 + 72);
        v15 = 12;
        goto LABEL_29;
      }
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3) & 1) == 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = *(_QWORD *)(a1 + 72);
        v15 = 8;
        goto LABEL_29;
      }
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24));
      if (!v18)
        goto LABEL_56;
      v19 = v18;
      v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, *(_QWORD *)(a1 + 24));
      if (v20)
      {
        if (v20 != 1)
        {
          if (v20 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1954F91B0);
          }
          if (!v55)
          {
            v22 = *v3;
            *(_QWORD *)&buf = v53;
            v23 = v54;
            v53 = 0;
            v54 = 0;
            *((_QWORD *)&buf + 1) = v23;
            (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v22 + 40))(v22, &buf, a1 + 72);
            result = (WTF::StringImpl *)buf;
            if ((_QWORD)buf)
            {
              *(_QWORD *)&buf = 0;
              DWORD2(buf) = 0;
              result = (WTF::StringImpl *)WTF::fastFree(result, v24);
            }
            goto LABEL_37;
          }
          goto LABEL_92;
        }
        goto LABEL_56;
      }
      v25 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v25 + 274)
        || (v26 = (_QWORD *)(v25 - 192),
            WebCore::SecurityContext::securityOrigin(*(WebCore::SecurityContext **)(a1 + 24), v21),
            v28 = v27,
            WebCore::Document::topOrigin((WebCore::Document *)(v25 - 192), v29),
            !WebCore::SecurityOrigin::isSameOriginAs(v28, v30)))
      {
LABEL_56:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = *(_QWORD *)(a1 + 72);
        v15 = 31;
LABEL_29:
        LOBYTE(v56) = v15;
        v58 = 0;
        LOBYTE(buf) = v15;
        v16 = v57;
        if (v57)
          *(_DWORD *)v57 += 2;
        *((_QWORD *)&buf + 1) = v16;
        WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&buf, 0, &v58);
        v17 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v6);
          else
            *(_DWORD *)v17 -= 2;
        }
        result = v57;
        v57 = 0;
        if (!result)
          goto LABEL_37;
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          goto LABEL_37;
        }
        goto LABEL_53;
      }
      v31 = *(_QWORD *)(v25 + 336);
      if (v31 && (v32 = *(_QWORD *)(v31 + 8)) != 0 && (v33 = *(_QWORD *)(v32 + 296)) != 0)
      {
        v34 = *(_QWORD *)(v33 + 696);
        if (v34)
        {
          ++*(_DWORD *)(v34 + 24);
          v35 = (WTF::MonotonicTime *)WebCore::LocalDOMWindow::consumeTransientActivation((WebCore::LocalDOMWindow *)v34);
          if ((v35 & 1) != 0)
          {
            v37 = *(_QWORD *)(a1 + 16);
            v36 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = 0;
            if (v55)
              goto LABEL_92;
            v38 = v53;
            v39 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 72) = 0;
            v40 = v54;
            v53 = 0;
            v54 = 0;
            v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
            *v41 = &off_1E3365C38;
            v41[1] = v3;
            v41[2] = v37;
            v41[3] = v38;
            v41[4] = v40;
            v41[5] = v39;
            *(_QWORD *)&buf = v41;
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v19 + 32))(v19, v36, &buf);
            result = (WTF::StringImpl *)buf;
            *(_QWORD *)&buf = 0;
            if (result)
              result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
LABEL_84:
            if (*(_DWORD *)(v34 + 24) == 1)
              result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 72))(v34);
            else
              --*(_DWORD *)(v34 + 24);
            goto LABEL_37;
          }
          WTF::MonotonicTime::now(v35);
          v42 = 0;
          v43 = v44 - *(double *)(v34 + 296);
LABEL_70:
          v45 = off_1ECE7C7C0;
          if (os_log_type_enabled((os_log_t)off_1ECE7C7C0, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 134217984;
            *(double *)((char *)&buf + 4) = v43;
            _os_log_error_impl(&dword_1940B8000, v45, OS_LOG_TYPE_ERROR, "Failing PushManager.subscribe call due to failed transient activation check; last activated %.2f sec ago",
              (uint8_t *)&buf,
              0xCu);
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WebCore::Document::addConsoleMessage(v26, 8, 2, (WTF::StringImpl **)&buf, 0);
          v47 = (WTF::StringImpl *)buf;
          *(_QWORD *)&buf = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v46);
            else
              *(_DWORD *)v47 -= 2;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v48 = *(_QWORD *)(a1 + 72);
          LOBYTE(v56) = 31;
          v58 = 0;
          LOBYTE(buf) = 31;
          v49 = v57;
          if (v57)
            *(_DWORD *)v57 += 2;
          *((_QWORD *)&buf + 1) = v49;
          WebCore::DeferredPromise::reject(v48, (unsigned __int8 *)&buf, 0, &v58);
          v51 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v50);
            else
              *(_DWORD *)v51 -= 2;
          }
          result = v57;
          v57 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v50);
              if ((v42 & 1) != 0)
                goto LABEL_37;
              goto LABEL_84;
            }
            *(_DWORD *)result -= 2;
          }
          if ((v42 & 1) != 0)
            goto LABEL_37;
          goto LABEL_84;
        }
      }
      else
      {
        v34 = 0;
      }
      v42 = 1;
      v43 = INFINITY;
      goto LABEL_70;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = *(_QWORD *)(a1 + 72);
    v9 = 6;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = *(_QWORD *)(a1 + 72);
    v9 = 31;
  }
  LOBYTE(buf) = v9;
  v56 = 0;
  LOBYTE(v53) = v9;
  v10 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
    **((_DWORD **)&buf + 1) += 2;
  v54 = v10;
  WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v53, 0, &v56);
  v12 = v54;
  v54 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

JSC::ArrayBufferView *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0::operator()(void)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &)#1},WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>>)::WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &::operator()(void)::{lambda(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&<$_0::ArrayBufferView,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &)#1},WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>>)::WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &::operator()(void)::{lambda(WTF::String &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&<$_0::ArrayBufferView,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &> &>@<X0>(JSC::ArrayBufferView **a1@<X1>, uint64_t a2@<X8>)
{
  JSC::ArrayBufferView *result;
  WTF *v4;
  WTF *v5;
  JSC::ArrayBufferView *v6;
  WTF *v7;

  result = *a1;
  if (!*a1)
  {
    LODWORD(v5) = 0;
LABEL_9:
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = (_DWORD)v5;
    *(_DWORD *)(a2 + 12) = (_DWORD)v5;
    *(_DWORD *)(a2 + 16) = 0;
    return result;
  }
  result = (JSC::ArrayBufferView *)JSC::ArrayBufferView::span(result);
  v5 = v4;
  if (!v4)
  {
    result = 0;
    goto LABEL_9;
  }
  if (!((unint64_t)v4 >> 32))
  {
    v6 = result;
    result = (JSC::ArrayBufferView *)WTF::fastMalloc(v4);
    v7 = 0;
    do
    {
      *((_BYTE *)v7 + (_QWORD)result) = *((_BYTE *)v7 + (_QWORD)v6);
      v7 = (WTF *)((char *)v7 + 1);
    }
    while (v5 != v7);
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0::operator()(void)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &)#1},WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>>)::WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &::operator()(void)::{lambda(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&<$_0::ArrayBufferView,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &)#1},WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>>)::WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &::operator()(void)::{lambda(WTF::String &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&<$_0::ArrayBufferView,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &> &>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *i;
  uint64_t v9;

  v3 = *a1;
  if (!*a1)
  {
    v7 = 0;
    LODWORD(v6) = 0;
LABEL_16:
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 8) = (_DWORD)v6;
    *(_DWORD *)(a2 + 12) = (_DWORD)v6;
    *(_DWORD *)(a2 + 16) = 0;
    return;
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v5)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v4 = (v4 & 0x3FFFFFFFFLL) + v5;
    }
  }
  if (*(_BYTE *)(v3 + 64) && (v9 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v6 = *(WTF **)(v9 + 32);
    if (!v6)
      goto LABEL_15;
  }
  else
  {
    v6 = *(WTF **)(v3 + 48);
    if (!v6)
    {
LABEL_15:
      v7 = 0;
      goto LABEL_16;
    }
  }
  if (!((unint64_t)v6 >> 32))
  {
    v7 = WTF::fastMalloc(v6);
    for (i = 0; i != v6; i = (WTF *)((char *)i + 1))
      *((_BYTE *)i + v7) = *((_BYTE *)i + v4);
    goto LABEL_16;
  }
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0::operator()(void)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &)#1},WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>>)::WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &::operator()(void)::{lambda(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&<$_0::ArrayBufferView,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &)#1},WebCore::PushManager::subscribe(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>>)::WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &::operator()(void)::{lambda(WTF::String &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::DefaultRefDerefTraits,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&<$_0::ArrayBufferView,JSC<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>,WTF::RawPtrTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &>> &> &>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  WTF *v3;
  uint64_t v4;
  char v5;

  result = WTF::base64Decode();
  if (v5)
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a1 = 3;
    *(_DWORD *)(a1 + 16) = 1;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11PushManager9subscribeERNS2_22ScriptExecutionContextEONSt3__18optionalINS2_27PushSubscriptionOptionsInitEEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PushSubscriptionEEEEEEN3__0clEvEUlT_E_vJNS2_22NotificationPermissionEEED1Ev(uint64_t a1, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E3365C38;
  v3 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *(WTF **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11PushManager9subscribeERNS2_22ScriptExecutionContextEONSt3__18optionalINS2_27PushSubscriptionOptionsInitEEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PushSubscriptionEEEEEEN3__0clEvEUlT_E_vJNS2_22NotificationPermissionEEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  _QWORD *v5;

  *(_QWORD *)this = &off_1E3365C38;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11PushManager9subscribeERNS2_22ScriptExecutionContextEONSt3__18optionalINS2_27PushSubscriptionOptionsInitEEEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_16PushSubscriptionEEEEEEN3__0clEvEUlT_E_vJNS2_22NotificationPermissionEEE4callESK_(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned __int8 v8[8];
  WTF::StringImpl *v9;
  objc_class *v10;

  if (a2 == 2)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8), a1 + 24, a1 + 40);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = *(_QWORD *)(a1 + 40);
  v10 = 0;
  v8[0] = 31;
  if (v7)
    *(_DWORD *)v7 += 2;
  v9 = v7;
  WebCore::DeferredPromise::reject(v4, v8, 0, &v10);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (uint64_t)v7;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushManager::getSubscription(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3365C70;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_QWORD *)a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushManager::getSubscription(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_1E3365C70;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushManager::getSubscription(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 56))(**(_QWORD **)(a1 + 8), a1 + 24);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushManager::permissionState(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::PushPermissionState>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;

  *a1 = &off_1E3365C98;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushManager::permissionState(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::PushPermissionState>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)this = &off_1E3365C98;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushManager::permissionState(WebCore::ScriptExecutionContext &,std::optional<WebCore::PushSubscriptionOptionsInit> &&,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::PushPermissionState>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 8));
    if (v3)
      v4 = v3 == 2;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::PushPermissionState>>(*(_QWORD *)(a1 + 16), (WTF::StringImpl *)v4);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::PushPermissionState>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::convertEnumerationToJS<WebCore::PushPermissionState>(v6[7], a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

double WebCore::PushCrypto::ClientKeys::generate@<D0>(uint64_t *a1@<X8>)
{
  _QWORD *v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  WTF::cryptographicallyRandomValues();
  WebCore::PushCrypto::P256DHKeyPair::generate(a1);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)&result = 0x1000000010;
  a1[5] = 0x1000000010;
  a1[4] = (uint64_t)v3;
  *v3 = v5;
  v3[1] = v6;
  return result;
}

void WebCore::PushCrypto::decryptAES128GCMPayload(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const void *v12;
  size_t v13;
  WTF *v14;
  size_t v15;
  void *v16;
  WTF *v17;
  void *v18;
  __int128 *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  WTF *v40;
  WTF *v41;
  unsigned int v42;
  char v43;
  char data[14];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  char v55;
  __int128 key;
  _BYTE v57[70];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 12) != 65)
    goto LABEL_12;
  if (*(_DWORD *)(a1 + 28) != 32 || *(_DWORD *)(a1 + 44) != 16)
    goto LABEL_12;
  if ((unint64_t)(a3 - 0x10000) <= 0xFFFFFFFFFFFF0066)
    goto LABEL_12;
  v8 = a2[1];
  key = *a2;
  *(_OWORD *)v57 = v8;
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  *(_QWORD *)&v57[62] = *(_QWORD *)((char *)a2 + 78);
  *(_OWORD *)&v57[32] = v10;
  *(_OWORD *)&v57[48] = v11;
  *(_OWORD *)&v57[16] = v9;
  if (v57[4] != 65)
    goto LABEL_12;
  WebCore::PushCrypto::computeP256DHSharedSecret(65, a1, (uint64_t)&v41);
  if (v43)
  {
    v12 = *(const void **)(a1 + 32);
    v13 = *(unsigned int *)(a1 + 44);
    v14 = v41;
    v15 = v42;
    v16 = (void *)WTF::fastMalloc((WTF *)0x20);
    v40 = v14;
    v17 = v14;
    v18 = v16;
    CCHmac(2u, v12, v13, v17, v15, v16);
    strcpy(data, "WebPush: info");
    v55 = 1;
    v19 = *(__int128 **)a1;
    v45 = *(_OWORD *)*(_QWORD *)a1;
    v20 = *((_BYTE *)v19 + 64);
    v21 = v19[3];
    v22 = v19[1];
    v47 = v19[2];
    v48 = v21;
    v49 = v20;
    v46 = v22;
    v50 = *(_OWORD *)&v57[5];
    v54 = v57[69];
    v53 = *(_OWORD *)&v57[53];
    v52 = *(_OWORD *)&v57[37];
    v51 = *(_OWORD *)&v57[21];
    v23 = (void *)WTF::fastMalloc((WTF *)0x20);
    CCHmac(2u, v18, 0x20uLL, data, 0x91uLL, v23);
    v24 = (void *)WTF::fastMalloc((WTF *)0x20);
    CCHmac(2u, &key, 0x10uLL, v23, 0x20uLL, v24);
    v25 = (void *)WTF::fastMalloc((WTF *)0x20);
    CCHmac(2u, v24, 0x20uLL, "Content-Encoding: aes128gcm", 0x1DuLL, v25);
    v26 = (void *)WTF::fastMalloc((WTF *)0x20);
    CCHmac(2u, v24, 0x20uLL, "Content-Encoding: nonce", 0x19uLL, v26);
    v27 = (WTF *)WTF::fastMalloc((WTF *)(a3 - 102));
    if (CCCryptorGCMOneshotDecrypt())
    {
      WTF::fastFree(v27, v28);
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 16) = 0;
      v29 = v40;
    }
    else
    {
      v30 = (char *)v27 + a3;
      v31 = -103;
      do
      {
        v32 = (unint64_t)&v30[v31];
        v33 = v30[v31--];
      }
      while (v32 > (unint64_t)v27 && v33 == 0);
      v29 = v40;
      if (v33 != 2 || v31 == -102)
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 16) = 0;
        WTF::fastFree(v27, v28);
      }
      else
      {
        *(_QWORD *)a4 = v27;
        *(_DWORD *)(a4 + 8) = a3 - 102;
        *(_DWORD *)(a4 + 12) = a3 + v31 + 1;
        *(_BYTE *)(a4 + 16) = 1;
      }
    }
    WTF::fastFree((WTF *)v26, v28);
    WTF::fastFree((WTF *)v25, v35);
    WTF::fastFree((WTF *)v24, v36);
    WTF::fastFree((WTF *)v23, v37);
    WTF::fastFree((WTF *)v18, v38);
    if (v29)
      WTF::fastFree(v29, v39);
  }
  else
  {
LABEL_12:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
}

void WebCore::PushCrypto::decryptAESGCMPayload(_DWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  BOOL v9;
  const void *v13;
  size_t v14;
  WTF *v15;
  size_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  void *v28;
  unint64_t v29;
  WTF *v30;
  void *v31;
  void *v32;
  WTF *v33;
  WTF *v34;
  _BYTE *v35;
  unsigned int v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  WTF *v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  unsigned int v53;
  char v54;
  char v55[24];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  __int16 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  char v68;
  char data[25];
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;
  __int16 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (a1[3] == 65
    && (a1[7] == 32 ? (v9 = a1[11] == 16) : (v9 = 0),
        v9
     && a3 == 65
     && a5 == 16
     && (unint64_t)(a6 - 0x10000) > 0xFFFFFFFFFFFF0011
     && (WebCore::PushCrypto::computeP256DHSharedSecret(65, (uint64_t)a1, (uint64_t)&v52), v54)))
  {
    v13 = (const void *)*((_QWORD *)a1 + 4);
    v14 = a1[11];
    v15 = v52;
    v16 = v53;
    v17 = (void *)WTF::fastMalloc((WTF *)0x20);
    v50 = v15;
    v18 = v15;
    v19 = v17;
    CCHmac(2u, v13, v14, v18, v16, v17);
    v20 = (void *)WTF::fastMalloc((WTF *)0x20);
    CCHmac(2u, v19, 0x20uLL, "Content-Encoding: auth", 0x18uLL, v20);
    v21 = (void *)WTF::fastMalloc((WTF *)0x20);
    v49 = (WTF *)v20;
    CCHmac(2u, a4, 0x10uLL, v20, 0x20uLL, v21);
    v22 = *(__int128 **)a1;
    v23 = *(_OWORD *)(*(_QWORD *)a1 + 48);
    v90 = *(_OWORD *)(*(_QWORD *)a1 + 32);
    v91 = v23;
    v92 = *((_BYTE *)v22 + 64);
    v24 = v22[1];
    v88 = *v22;
    v89 = v24;
    v25 = a2[3];
    v85 = a2[2];
    v86 = v25;
    v87 = *((_BYTE *)a2 + 64);
    v26 = a2[1];
    v83 = *a2;
    v84 = v26;
    strcpy(data, "Content-Encoding: aesgcm");
    v70 = 0x4100003635322D50;
    v72 = v89;
    v73 = v90;
    v74 = v91;
    v75 = v92;
    v71 = v88;
    v76 = 16640;
    v77 = v83;
    v81 = v87;
    v80 = v25;
    v79 = v85;
    v78 = v26;
    v82 = 1;
    v27 = (void *)WTF::fastMalloc((WTF *)0x20);
    CCHmac(2u, v21, 0x20uLL, data, 0xA6uLL, v27);
    strcpy(v55, "Content-Encoding: nonce");
    v56 = 0x4100003635322D50;
    v59 = v90;
    v60 = v91;
    v61 = v92;
    v57 = v88;
    v58 = v89;
    v62 = 16640;
    v63 = v83;
    v67 = v87;
    v66 = v86;
    v65 = v85;
    v64 = v84;
    v68 = 1;
    v28 = (void *)WTF::fastMalloc((WTF *)0x20);
    CCHmac(2u, v21, 0x20uLL, v55, 0xA5uLL, v28);
    v29 = a6 - 16;
    v30 = (WTF *)WTF::fastMalloc((WTF *)(a6 - 16));
    if (CCCryptorGCMOneshotDecrypt())
    {
      WTF::fastFree(v30, v31);
      *(_BYTE *)a7 = 0;
      *(_BYTE *)(a7 + 16) = 0;
      v34 = (WTF *)v20;
      v33 = v50;
    }
    else
    {
      v35 = (char *)v30 + 2;
      v36 = bswap32(*(unsigned __int16 *)v30) >> 16;
      if (v29 != 2)
      {
        do
        {
          if (*v35)
            v37 = 1;
          else
            v37 = (unsigned __int16)v36 == 0;
          if (v37)
            break;
          ++v35;
          LOWORD(v36) = v36 - 1;
        }
        while (v35 < (_BYTE *)v30 + v29);
      }
      if ((_WORD)v36 || (v38 = v35 - (_BYTE *)v30, v38 == -1))
      {
        v43 = 0;
        *(_BYTE *)a7 = 0;
        v34 = (WTF *)v20;
        v33 = v50;
      }
      else
      {
        v51 = v19;
        v39 = v29 - v38;
        if (v29 < v38)
          __break(1u);
        if (v29 == v38)
        {
          v41 = 0;
          v34 = (WTF *)v20;
          v33 = v50;
        }
        else
        {
          if (HIDWORD(v39))
          {
            __break(0xC471u);
            return;
          }
          v40 = (char *)v30 + v38;
          v41 = WTF::fastMalloc((WTF *)(v29 - v38));
          v42 = 0;
          v34 = v49;
          v33 = v50;
          do
          {
            *(_BYTE *)(v41 + v42) = v40[v42];
            ++v42;
          }
          while (v39 != v42);
        }
        *(_QWORD *)a7 = v41;
        v43 = 1;
        *(_DWORD *)(a7 + 8) = v39;
        *(_DWORD *)(a7 + 12) = v39;
        v19 = v51;
      }
      *(_BYTE *)(a7 + 16) = v43;
      WTF::fastFree(v30, v31);
    }
    WTF::fastFree((WTF *)v28, v32);
    WTF::fastFree((WTF *)v27, v44);
    WTF::fastFree((WTF *)v21, v45);
    WTF::fastFree(v34, v46);
    WTF::fastFree((WTF *)v19, v47);
    if (v33)
      WTF::fastFree(v33, v48);
  }
  else
  {
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 16) = 0;
  }
}

uint64_t WebCore::PushMessageData::arrayBuffer@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;

  result = JSC::ArrayBuffer::tryCreate();
  v4 = v12;
  if (v12)
  {
    v11 = 0;
    v12 = 0;
    *(_QWORD *)a1 = v4;
    result = (uint64_t)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v11);
    v5 = v12;
    *(_DWORD *)(a1 + 16) = 0;
    v12 = 0;
    if (v5)
    {
      v6 = *(_DWORD *)v5 == 2;
      *(_DWORD *)v5 -= 2;
      if (v6)
      {
        v7 = v5[10];
        if (v7)
        {
          *(_QWORD *)(v7 + 8) = 3;
          v5[10] = 0;
        }
        if ((v5[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
        v9 = (WTF *)v5[1];
        if ((v9 & 1) == 0 && v9)
        {
          v10 = *(WTF **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            WTF::fastFree(v10, v8);
          }
          WTF::fastFree(v9, v8);
        }
        return WTF::fastFree((WTF *)v5, v8);
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 36;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
  }
  return result;
}

WTF *WebCore::PushMessageData::blob@<X0>(const void **this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF *v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *result;
  WTF::StringImpl *v12;
  WTF *v13;
  int v14;
  int v15;

  v5 = (WTF *)*((unsigned int *)this + 5);
  v13 = 0;
  v14 = 0;
  v15 = (int)v5;
  if ((_DWORD)v5)
  {
    v14 = (int)v5;
    v13 = (WTF *)WTF::fastMalloc(v5);
    memcpy(v13, this[1], *((unsigned int *)this + 5));
  }
  v12 = 0;
  v7 = bmalloc::api::isoAllocate();
  v8 = WebCore::Blob::Blob(v7, a2, (uint64_t)&v13, &v12);
  *a3 = v8;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v8 + 24));
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v13;
  if (v13)
    return (WTF *)WTF::fastFree(v13, v9);
  return result;
}

uint64_t WebCore::PushMessageData::json@<X0>(const char **this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v10;
  _BYTE v11[8];

  JSC::JSLockHolder::JSLockHolder();
  WebCore::TextResourceDecoder::textFromUTF8(this[1], *((unsigned int *)this + 5), &v10);
  v6 = JSC::JSONParse();
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      if (v6)
        goto LABEL_5;
LABEL_7:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 9;
      v8 = 1;
      goto LABEL_8;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (!v6)
    goto LABEL_7;
LABEL_5:
  v8 = 0;
  *(_QWORD *)a2 = v6;
LABEL_8:
  *(_DWORD *)(a2 + 16) = v8;
  return MEMORY[0x19AEA32A0](v11);
}

void *WebCore::PushSubscription::bisoHeap(WebCore::PushSubscription *this)
{
  return &WebCore::PushSubscription::bisoHeap(void)::heap;
}

uint64_t WebCore::PushSubscription::operator new(uint64_t this)
{
  if (this == 104)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

__n128 WebCore::PushSubscription::PushSubscription(uint64_t a1, __n128 *a2, uint64_t *a3)
{
  unint64_t v3;
  __n128 result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2->n128_u64[0];
  v3 = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  *(_QWORD *)(a1 + 16) = v3;
  result = a2[1];
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 40) = v5;
  LODWORD(v5) = a2[2].n128_u32[2];
  a2[2].n128_u32[2] = 0;
  *(_DWORD *)(a1 + 48) = v5;
  LODWORD(v5) = a2[2].n128_u32[3];
  a2[2].n128_u32[3] = 0;
  *(_DWORD *)(a1 + 52) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 56) = v6;
  LODWORD(v6) = a2[3].n128_u32[2];
  a2[3].n128_u32[2] = 0;
  *(_DWORD *)(a1 + 64) = v6;
  LODWORD(v6) = a2[3].n128_u32[3];
  a2[3].n128_u32[3] = 0;
  *(_DWORD *)(a1 + 68) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v7 = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 72) = v7;
  LODWORD(v7) = a2[4].n128_u32[2];
  a2[4].n128_u32[2] = 0;
  *(_DWORD *)(a1 + 80) = v7;
  LODWORD(v7) = a2[4].n128_u32[3];
  a2[4].n128_u32[3] = 0;
  *(_DWORD *)(a1 + 84) = v7;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

{
  unint64_t v3;
  __n128 result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2->n128_u64[0];
  v3 = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  *(_QWORD *)(a1 + 16) = v3;
  result = a2[1];
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 40) = v5;
  LODWORD(v5) = a2[2].n128_u32[2];
  a2[2].n128_u32[2] = 0;
  *(_DWORD *)(a1 + 48) = v5;
  LODWORD(v5) = a2[2].n128_u32[3];
  a2[2].n128_u32[3] = 0;
  *(_DWORD *)(a1 + 52) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 56) = v6;
  LODWORD(v6) = a2[3].n128_u32[2];
  a2[3].n128_u32[2] = 0;
  *(_DWORD *)(a1 + 64) = v6;
  LODWORD(v6) = a2[3].n128_u32[3];
  a2[3].n128_u32[3] = 0;
  *(_DWORD *)(a1 + 68) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v7 = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 72) = v7;
  LODWORD(v7) = a2[4].n128_u32[2];
  a2[4].n128_u32[2] = 0;
  *(_DWORD *)(a1 + 80) = v7;
  LODWORD(v7) = a2[4].n128_u32[3];
  a2[4].n128_u32[3] = 0;
  *(_DWORD *)(a1 + 84) = v7;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

void WebCore::PushSubscription::~PushSubscription(WebCore::PushSubscription *this, void *a2)
{
  WebCore::PushSubscriptionOptions *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  bmalloc::api *v9;
  void *v10;

  v3 = (WebCore::PushSubscriptionOptions *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PushSubscriptionOptions::~PushSubscriptionOptions(v3, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = (WTF *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t WebCore::PushSubscription::data(WebCore::PushSubscription *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebCore::PushSubscription::toJSON@<X0>(WebCore::PushSubscription *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  if (v3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)this + 24);
  WTF::base64EncodeToString();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::base64EncodeToString();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a2 + 32) = 2;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(a2 + 24) = v4;
  if (v10)
    *(_DWORD *)v10 += 2;
  *v4 = v10;
  if (v9)
    *(_DWORD *)v9 += 2;
  v4[1] = v9;
  if (v10)
    *(_DWORD *)v10 += 2;
  v4[2] = v10;
  if (v8)
  {
    v6 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    v4[3] = v8;
    *(_DWORD *)(a2 + 36) = 2;
    if (v6)
      *(_DWORD *)v8 = v6;
    else
      WTF::StringImpl::destroy(v8, v5);
  }
  else
  {
    v4[3] = 0;
    *(_DWORD *)(a2 + 36) = 2;
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v5);
      if (!v9)
        goto LABEL_18;
      goto LABEL_16;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v9)
    goto LABEL_18;
LABEL_16:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v5);
  else
    *(_DWORD *)v9 -= 2;
LABEL_18:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  return 0;
}

void WebCore::PushSubscriptionChangeEvent::~PushSubscriptionChangeEvent(WebCore::PushSubscriptionChangeEvent *this, void *a2)
{
  WebCore::PushSubscription *v3;
  WebCore::PushSubscription *v4;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (WebCore::PushSubscription *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PushSubscription::~PushSubscription(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::PushSubscription *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::PushSubscription::~PushSubscription(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
}

{
  WebCore::PushSubscription *v3;
  WebCore::PushSubscription *v4;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v3 = (WebCore::PushSubscription *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PushSubscription::~PushSubscription(v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::PushSubscription *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::PushSubscription::~PushSubscription(v4, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void *WebCore::PushSubscriptionData::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *result;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = (void *)WTF::String::isolatedCopy();
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 24);
  v5 = (WTF *)*(unsigned int *)(a1 + 44);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 44) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *(_DWORD *)(a2 + 40) = (_DWORD)v5;
    *(_QWORD *)(a2 + 32) = v6;
    result = memcpy(v6, *(const void **)(a1 + 32), *(unsigned int *)(a1 + 44));
  }
  v7 = (WTF *)*(unsigned int *)(a1 + 60);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 60) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *(_DWORD *)(a2 + 56) = (_DWORD)v7;
    *(_QWORD *)(a2 + 48) = v8;
    result = memcpy(v8, *(const void **)(a1 + 48), *(unsigned int *)(a1 + 60));
  }
  v9 = (WTF *)*(unsigned int *)(a1 + 76);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 76) = (_DWORD)v9;
  if ((_DWORD)v9)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    *(_DWORD *)(a2 + 72) = (_DWORD)v9;
    *(_QWORD *)(a2 + 64) = v10;
    return memcpy(v10, *(const void **)(a1 + 64), *(unsigned int *)(a1 + 76));
  }
  return result;
}

double WebCore::PushSubscriptionData::isolatedCopy@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  WTF::String::isolatedCopy();
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v4;
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a2 + 40) = v5;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a2 + 48) = v6;
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a2 + 56) = v7;
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a2 + 64) = v8;
  result = *(double *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  *(double *)(a2 + 72) = result;
  return result;
}

WTF::StringImpl *WebCore::makePushTopic@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  _OWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  uint64_t v20;
  const char *v21;
  int v22;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v6 = a1 + 2;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v16);
  v8 = *a1;
  if (!v18 && !v17)
  {
    if (v8)
      *(_DWORD *)v8 += 2;
    v9 = v16;
    v16 = (WTF::StringImpl *)v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v7);
        v8 = *a1;
        if (!*a1)
          goto LABEL_10;
        goto LABEL_9;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (!v8)
    {
LABEL_10:
      v18 = v8;
      goto LABEL_11;
    }
LABEL_9:
    LODWORD(v8) = *(_DWORD *)(v8 + 4);
    goto LABEL_10;
  }
  if (v8 && (*(_BYTE *)(v8 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_11:
  v10 = a1[1];
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    v20 = a1[1];
    v21 = " part:";
    v22 = 6;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v16, (uint64_t)&v21, &v20);
  }
  if (*v6 != 0)
  {
    WTF::UUID::toString((WTF::UUID *)(a1 + 2));
    v22 = 4;
    v20 = (uint64_t)v15;
    v21 = " ds:";
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v16, (uint64_t)&v21, &v20);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v22 = 1;
  v20 = *a2;
  v21 = " ";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v16, (uint64_t)&v21, &v20);
  result = v16;
  if (v16
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16),
        (result = v16) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a3 = result;
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v12);
      result = v16;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::PushSubscriptionSetIdentifier::debugDescription@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  _OWORD *v4;
  int8x16_t *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  _WORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  __int8 *v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _DWORD *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  BOOL v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *result;
  int v39;
  uint64_t v40;
  __int8 *v41;
  __int8 *v42;
  unsigned __int128 v43;
  __int8 v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  char v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;

  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 1;
  v4 = this + 2;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v45);
  LOBYTE(v49) = 91;
  v50 = *this;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v45, (char *)&v49, (uint64_t *)&v50);
  v6 = this[1];
  if (v6 && *((_DWORD *)v6 + 1))
  {
    v49 = this[1];
    v50 = (WTF::StringImpl *)" part:";
    v51 = 6;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v45, (uint64_t)&v50, (uint64_t *)&v49);
  }
  if (*v4 != 0)
  {
    WTF::UUID::toString((WTF::UUID *)(this + 2));
    v7 = v50;
    if (v50)
    {
      v8 = *((_DWORD *)v50 + 1);
      if (v8 >= 0xFFFFFFFA)
        v9 = -1;
      else
        v9 = v8 + 6;
    }
    else
    {
      v9 = 6;
    }
    if (__CFADD__(v9, v47))
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9 + v47;
    v11 = v46;
    if ((v46 || (v11 = v45) != 0) && (*((_BYTE *)v11 + 16) & 4) == 0)
    {
LABEL_15:
      v12 = (_QWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v45);
      if (v12)
      {
        *v12 = 0x3A007300640020;
        v13 = v12 + 1;
        if (v7)
        {
          v5 = (int8x16_t *)*((_QWORD *)v7 + 1);
          v14 = *((unsigned int *)v7 + 1);
          if ((*((_BYTE *)v7 + 16) & 4) != 0)
          {
            v20 = (char *)&v13[v14];
            if (v14 >= 0x40)
            {
              v21 = (char *)&v13[v14 & 0xFFFFFFC0];
              v24 = 0uLL;
              v25 = (char *)(v12 + 1);
              do
              {
                v52.val[0] = *v5;
                v26 = v5[1];
                v53.val[0] = v5[2];
                v27 = v5[3];
                v5 += 4;
                v28 = v27;
                v53.val[1] = 0uLL;
                v54.val[0] = v26;
                v52.val[1] = 0uLL;
                v29 = v25;
                vst2q_s8(v29, v52);
                v29 += 32;
                v54.val[1] = 0uLL;
                vst2q_s8(v29, v54);
                v30 = v25 + 64;
                vst2q_s8(v30, v53);
                v31 = v25 + 96;
                vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
                v25 += 128;
              }
              while (v25 != v21);
            }
            else
            {
              v21 = (char *)(v12 + 1);
            }
            while (v21 != v20)
            {
              v32 = v5->u8[0];
              v5 = (int8x16_t *)((char *)v5 + 1);
              *(_WORD *)v21 = v32;
              v21 += 2;
            }
          }
          else if ((_DWORD)v14 == 1)
          {
            *v13 = v5->i16[0];
          }
          else if ((_DWORD)v14)
          {
            memcpy(v12 + 1, v5, 2 * v14);
          }
          v23 = *((unsigned int *)v7 + 1);
        }
        else
        {
          v23 = 0;
        }
        *(_DWORD *)&v13[v23] = 3670064;
      }
      goto LABEL_45;
    }
    if (v50)
    {
      if ((*((_BYTE *)v50 + 16) & 4) == 0)
        goto LABEL_15;
      v15 = (_DWORD *)MEMORY[0x19AEA4824](&v45, v10);
      if (v15)
      {
        v16 = v15;
        *v15 = 980640800;
        v17 = (__int8 *)(v15 + 1);
        v5 = (int8x16_t *)*((_QWORD *)v7 + 1);
        v18 = *((unsigned int *)v7 + 1);
        if ((*((_BYTE *)v7 + 16) & 4) != 0)
        {
          if ((_DWORD)v18)
          {
            if ((_DWORD)v18 == 1)
              *v17 = v5->i8[0];
            else
              memcpy(v17, v5, v18);
          }
        }
        else
        {
          v41 = &v17[v18];
          if (v18 >= 0x10)
          {
            v42 = &v17[v18 & 0xFFFFFFF0];
            do
            {
              v43 = (unsigned __int128)vld2q_s8(v5->i8);
              v5 += 2;
              *(_OWORD *)v17 = v43;
              v17 += 16;
            }
            while (v17 != v42);
            v17 = v42;
          }
          while (v17 != v41)
          {
            v44 = v5->i8[0];
            v5 = (int8x16_t *)((char *)v5 + 2);
            *v17++ = v44;
          }
        }
        v19 = *((unsigned int *)v7 + 1);
        goto LABEL_28;
      }
    }
    else
    {
      v22 = (_DWORD *)MEMORY[0x19AEA4824](&v45, v10);
      if (v22)
      {
        v16 = v22;
        v19 = 0;
        *v22 = 980640800;
LABEL_28:
        *(_WORD *)((char *)v16 + v19 + 4) = 14384;
      }
    }
LABEL_45:
    v33 = v50;
    v50 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  LOBYTE(v50) = 93;
  if (v46 && ((v34 = v47, v47 < *((_DWORD *)v46 + 1)) ? (v35 = v45 == 0) : (v35 = 0), v35))
  {
    v39 = *((_DWORD *)v46 + 4);
    v40 = *((_QWORD *)v46 + 1);
    ++v47;
    if ((v39 & 4) != 0)
      *(_BYTE *)(v40 + v34) = 93;
    else
      *(_WORD *)(v40 + 2 * v34) = 93;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v36 = v45;
  if (v45
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v45),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v45),
        (v36 = v45) != 0))
  {
    *(_DWORD *)v36 += 2;
  }
  *a2 = v36;
  v37 = v46;
  v46 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v37 -= 2;
  }
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::PushSubscriptionOptions::~PushSubscriptionOptions(WebCore::PushSubscriptionOptions *this, void *a2)
{
  _QWORD *v3;
  BOOL v4;
  WTF *v5;
  uint64_t v6;
  void *v7;
  WTF **v8;
  WTF *v9;
  WTF *v10;

  v3 = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = *(_DWORD *)v3 == 2;
    *(_DWORD *)v3 -= 2;
    if (v4)
    {
      v6 = v3[10];
      if (v6)
      {
        *(_QWORD *)(v6 + 8) = 3;
        v3[10] = 0;
      }
      if ((v3[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v3 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v3 + 2));
      v8 = (WTF **)v3[1];
      if ((v8 & 1) == 0 && v8)
      {
        v10 = (WTF *)v3[1];
        v9 = *v8;
        if (*v8)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v9, v7);
        }
        WTF::fastFree(v10, v7);
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v5, a2);
  }
}

uint64_t WebCore::PushSubscriptionOptions::applicationServerKey@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  _DWORD *v12;

  v3 = *(_DWORD **)(this + 24);
  if (v3)
    goto LABEL_6;
  v4 = this;
  this = JSC::ArrayBuffer::tryCreate();
  v3 = v12;
  v5 = *(_QWORD **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v12;
  if (v5)
  {
    v6 = *(_DWORD *)v5 == 2;
    *(_DWORD *)v5 -= 2;
    if (v6)
    {
      v8 = v5[10];
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        v5[10] = 0;
      }
      if ((v5[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
      v10 = (WTF *)v5[1];
      if ((v10 & 1) == 0 && v10)
      {
        v11 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v11, v9);
        }
        WTF::fastFree(v10, v9);
      }
      this = WTF::fastFree((WTF *)v5, v9);
    }
    v3 = *(_DWORD **)(v4 + 24);
  }
  if (v3)
  {
LABEL_6:
    v7 = 0;
    *v3 += 2;
    *(_QWORD *)a2 = v3;
  }
  else
  {
    *(_BYTE *)a2 = 36;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = 1;
  }
  *(_DWORD *)(a2 + 16) = v7;
  return this;
}

void WebCore::PushNotificationEvent::~PushNotificationEvent(WebCore::PushNotificationEvent *this, void *a2)
{
  WebCore::Notification *v3;
  bmalloc::api *v4;
  void *v5;

  if (*((_BYTE *)this + 368))
    WebCore::NotificationData::~NotificationData((WebCore::PushNotificationEvent *)((char *)this + 128), a2);
  v3 = (WebCore::Notification *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::Notification::~Notification(v3, a2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
}

{
  WebCore::Notification *v3;
  bmalloc::api *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  if (*((_BYTE *)this + 368))
    WebCore::NotificationData::~NotificationData((WebCore::PushNotificationEvent *)((char *)this + 128), a2);
  v3 = (WebCore::Notification *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::Notification::~Notification(v3, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  WebCore::ExtendableEvent::~ExtendableEvent(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PushSubscription::unsubscribe(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  WebCore::PushSubscription *v4;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E3366100;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::PushSubscription *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::PushSubscription::~PushSubscription(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushSubscription::unsubscribe(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  WebCore::PushSubscription *v4;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E3366100;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::PushSubscription *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::PushSubscription::~PushSubscription(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PushSubscription::unsubscribe(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[1] + 88);
  if (v1)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(*(_QWORD *)v1 + 48))(*(_QWORD *)(a1[1] + 88), a1[3], a1 + 4);
  else
    return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(a1[4], 0);
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, char *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  unsigned __int128 v13;
  char v14;

  v5 = *a3;
  v6 = *((_QWORD *)a1 + 1);
  if ((v6 || (v6 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0 || v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, *a2, *a3);
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v8 = *a3;
      *result++ = *a2;
      if (v8)
      {
        v9 = *(char **)(v8 + 8);
        v10 = *(unsigned int *)(v8 + 4);
        if ((*(_BYTE *)(v8 + 16) & 4) != 0)
        {
          if ((_DWORD)v10)
          {
            if ((_DWORD)v10 == 1)
              *result = *v9;
            else
              return (char *)memcpy(result, v9, v10);
          }
        }
        else
        {
          v11 = &result[v10];
          if (v10 >= 0x10)
          {
            v12 = &result[v10 & 0xFFFFFFF0];
            do
            {
              v13 = (unsigned __int128)vld2q_s8(v9);
              v9 += 32;
              *(_OWORD *)result = v13;
              result += 16;
            }
            while (result != v12);
            result = v12;
          }
          while (result != v11)
          {
            v14 = *v9;
            v9 += 2;
            *result++ = v14;
          }
        }
      }
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(_WORD *a1, char a2, uint64_t a3)
{
  char *result;
  int8x16_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  int8x16x2_t v16;
  int8x16x2_t v17;
  int8x16x2_t v18;

  *a1 = a2;
  result = (char *)(a1 + 1);
  if (a3)
  {
    v4 = *(int8x16_t **)(a3 + 8);
    v5 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v6 = &result[2 * v5];
      if (v5 >= 0x40)
      {
        v7 = &result[2 * (v5 & 0xFFFFFFC0)];
        v8 = 0uLL;
        do
        {
          v16.val[0] = *v4;
          v9 = v4[1];
          v17.val[0] = v4[2];
          v10 = v4[3];
          v4 += 4;
          v11 = v10;
          v17.val[1] = 0uLL;
          v18.val[0] = v9;
          v16.val[1] = 0uLL;
          v12 = result;
          vst2q_s8(v12, v16);
          v12 += 32;
          v18.val[1] = 0uLL;
          vst2q_s8(v12, v18);
          v13 = result + 64;
          vst2q_s8(v13, v17);
          v14 = result + 96;
          vst2q_s8(v14, *(int8x16x2_t *)(&v8 - 1));
          result += 128;
        }
        while (result != v7);
        result = v7;
      }
      while (result != v6)
      {
        v15 = v4->u8[0];
        v4 = (int8x16_t *)((char *)v4 + 1);
        *(_WORD *)result = v15;
        result += 2;
      }
    }
    else if ((_DWORD)v5 == 1)
    {
      *(_WORD *)result = v4->i16[0];
    }
    else if ((_DWORD)v5)
    {
      return (char *)memcpy(result, v4, 2 * v5);
    }
  }
  return result;
}

void WebCore::ServiceWorkerRegistrationPushAPI::~ServiceWorkerRegistrationPushAPI(WebCore::ServiceWorkerRegistrationPushAPI *this, void *a2)
{
  bmalloc::api *v3;

  *(_QWORD *)this = off_1E3366148;
  v3 = (bmalloc::api *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    bmalloc::api::isoDeallocate(v3, a2);
}

{
  bmalloc::api *v3;

  *(_QWORD *)this = off_1E3366148;
  v3 = (bmalloc::api *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    bmalloc::api::isoDeallocate(v3, a2);
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::ServiceWorkerRegistrationPushAPI::pushManager(WebCore::ServiceWorkerRegistrationPushAPI *this, WebCore::ServiceWorkerRegistration *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *result;
  uint64_t v8;
  void *v9;
  bmalloc::api *v10;
  unsigned __int8 *v11;
  const char *v12[3];
  const char *v13[2];

  v3 = (uint64_t *)((char *)this + 32);
  v12[0] = "ServiceWorkerRegistrationPushAPI";
  v12[1] = (const char *)33;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 4, v12);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = off_1E3366148;
    *(_QWORD *)(v5 + 8) = this;
    *(_QWORD *)(v5 + 16) = 0;
    v11 = (unsigned __int8 *)v5;
    v13[0] = "ServiceWorkerRegistrationPushAPI";
    v13[1] = (const char *)33;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v3, v13, &v11, (uint64_t)v12);
    v6 = v11;
    v11 = 0;
    if (v6)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v6 + 8))(v6);
  }
  result = *(_QWORD **)(v5 + 16);
  if (!result)
  {
    v8 = *(_QWORD *)(v5 + 8);
    result = (_QWORD *)bmalloc::api::isoAllocate();
    *result = v8 + 64;
    v10 = *(bmalloc::api **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = result;
    if (v10)
    {
      bmalloc::api::isoDeallocate(v10, v9);
      return *(_QWORD **)(v5 + 16);
    }
  }
  return result;
}

uint64_t WebCore::PushCrypto::P256DHKeyPair::generate@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;

  if (CCECCryptorGeneratePair())
  {
    __break(0xC471u);
    JUMPOUT(0x1954FBB04);
  }
  if (CCECCryptorExportKey())
  {
    __break(0xC471u);
    JUMPOUT(0x1954FBB24);
  }
  if (CCECCryptorExportKey())
  {
    __break(0xC471u);
    JUMPOUT(0x1954FBAE4);
  }
  v3 = WTF::fastMalloc((WTF *)0x41);
  a1[1] = 0x4100000041;
  *a1 = v3;
  *(_OWORD *)(v3 + 32) = v10;
  *(_OWORD *)(v3 + 48) = v11;
  *(_BYTE *)(v3 + 64) = v12;
  *(_OWORD *)v3 = v8;
  *(_OWORD *)(v3 + 16) = v9;
  v4 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  a1[3] = 0x2000000020;
  a1[2] = (uint64_t)v4;
  *v4 = v6;
  v4[1] = v7;
  return 0;
}

void WebCore::PushCrypto::computeP256DHSharedSecret(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  WTF *v4;
  void *v5;

  if (a1 == 65 && *(_DWORD *)(a2 + 12) == 65 && *(_DWORD *)(a2 + 28) == 32)
  {
    if (CCECCryptorImportKey() || CCECCryptorImportKey())
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
    }
    else
    {
      v4 = (WTF *)WTF::fastMalloc((WTF *)0x20);
      if (CCECCryptorComputeSharedSecret())
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
        WTF::fastFree(v4, v5);
      }
      else
      {
        *(_QWORD *)a3 = v4;
        *(_QWORD *)(a3 + 8) = 0x2000000020;
        *(_BYTE *)(a3 + 16) = 1;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

void WebCore::PushCrypto::hmacSHA256(const void *a1@<X0>, size_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v10;

  v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  a5[1] = 0x2000000020;
  *a5 = v10;
  CCHmac(2u, a1, a2, a3, a4, v10);
}

void WebCore::PushCrypto::decryptAES128GCM(unint64_t a1@<X5>, uint64_t a2@<X8>)
{
  unint64_t v3;
  WTF *v4;
  void *v5;

  if (a1 <= 0xF)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  v3 = a1 - 16;
  if (a1 == 16)
  {
    v4 = 0;
  }
  else
  {
    if (HIDWORD(v3))
    {
      __break(0xC471u);
      return;
    }
    v4 = (WTF *)WTF::fastMalloc((WTF *)(a1 - 16));
  }
  if (CCCryptorGCMOneshotDecrypt())
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (v4)
      WTF::fastFree(v4, v5);
  }
  else
  {
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 12) = v3;
    *(_BYTE *)(a2 + 16) = 1;
  }
}

_QWORD *WebCore::RemotePlayback::create@<X0>(WebCore::RemotePlayback *this@<X0>, WebCore::RemotePlayback **a2@<X8>)
{
  WebCore::RemotePlayback *v5;
  WebCore::RemotePlayback *v6;

  v5 = (WebCore::RemotePlayback *)bmalloc::api::isoAllocate();
  v6 = WebCore::RemotePlayback::RemotePlayback(v5, this);
  *a2 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v6);
}

WebCore::RemotePlayback *WebCore::RemotePlayback::RemotePlayback(WebCore::RemotePlayback *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  WebCore::RemotePlayback *v20;

  *((_DWORD *)this + 6) = 1;
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v5 = *(_QWORD *)(v4 + 704);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v4 = v6;
  }
  if (!*(_BYTE *)(v4 + 466))
  {
    v7 = *(_QWORD *)(v4 + 704);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v4 = v8;
    }
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::ScriptExecutionContext *)(v4 + 192));
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*(_BYTE *)(v4 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x1954FBFD8);
  }
  v20 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v4 + 320), (uint64_t *)&v20, (uint64_t)&v19);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &off_1E3366168;
  *((_QWORD *)this + 4) = &unk_1E33661E0;
  v9 = *((_QWORD *)a2 + 228);
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 7) = v9;
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 229);
  v12 = *((_QWORD *)a2 + 37);
  if (v12)
    goto LABEL_23;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a2;
  v14 = (unsigned int *)*((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v12;
  if (!v14)
    goto LABEL_23;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v13);
  }
  v12 = *((_QWORD *)a2 + 37);
  if (v12)
  {
LABEL_23:
    do
      v17 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v17 + 1, (unsigned int *)v12));
  }
  *((_QWORD *)this + 9) = v12;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 2;
  *((_BYTE *)this + 148) = 0;
  return this;
}

void `non-virtual thunk to'WebCore::RemotePlayback::~RemotePlayback(WebCore::RemotePlayback *this, void *a2)
{
  WebCore::RemotePlayback::~RemotePlayback((WebCore::RemotePlayback *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RemotePlayback::~RemotePlayback((WebCore::RemotePlayback *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t (***WebCore::RemotePlayback::watchAvailability(uint64_t a1, uint64_t *a2, uint64_t *a3))()
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t (***result)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t (***v22)();

  *(_QWORD *)&v20 = "RemotePlayback";
  *((_QWORD *)&v20 + 1) = 15;
  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v21 = "watchAvailability";
  *((_QWORD *)&v21 + 1) = v6;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v20);
  v8 = *a2;
  *a2 = 0;
  v9 = *a3;
  *a3 = 0;
  v18 = v20;
  v19 = v21;
  v10 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v10 = &off_1E3366398;
  *(_QWORD *)(v10 + 8) = a1;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v9;
  *(_OWORD *)(v10 + 32) = v18;
  *(_OWORD *)(v10 + 48) = v19;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  v12 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v11 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v12 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3366370;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v11;
  result[3] = (uint64_t (**)())v10;
  v22 = result;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14)
  {
    v22 = 0;
    v17 = off_1E3366370;
    return (uint64_t (***)())v17[1]();
  }
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
  {
    v22 = 0;
    goto LABEL_8;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v16, 9, (uint64_t *)&v22);
  result = v22;
  v22 = 0;
  if (result)
  {
LABEL_8:
    v17 = *result;
    return (uint64_t (***)())v17[1]();
  }
  return result;
}

uint64_t (***WebCore::RemotePlayback::cancelWatchAvailability(uint64_t a1, uint64_t a2, uint64_t *a3))()
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t (***result)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t (***v21)();

  *(_QWORD *)&v19 = "RemotePlayback";
  *((_QWORD *)&v19 + 1) = 15;
  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v20 = "cancelWatchAvailability";
  *((_QWORD *)&v20 + 1) = v6;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v19);
  v8 = *a3;
  *a3 = 0;
  v17 = v19;
  v18 = v20;
  v9 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v9 = &off_1E3366410;
  *(_QWORD *)(v9 + 8) = a1;
  *(_BYTE *)(v9 + 20) = BYTE4(a2);
  *(_DWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = v8;
  *(_OWORD *)(v9 + 32) = v17;
  *(_OWORD *)(v9 + 48) = v18;
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  v11 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v10 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v11 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3366370;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v10;
  result[3] = (uint64_t (**)())v9;
  v21 = result;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13)
  {
    v21 = 0;
    v16 = off_1E3366370;
    return (uint64_t (***)())v16[1]();
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
  {
    v21 = 0;
    goto LABEL_8;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v15, 9, (uint64_t *)&v21);
  result = v21;
  v21 = 0;
  if (result)
  {
LABEL_8:
    v16 = *result;
    return (uint64_t (***)())v16[1]();
  }
  return result;
}

uint64_t (***WebCore::RemotePlayback::prompt(WTF *a1, uint64_t *a2))()
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t (***result)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  __int128 v18;
  uint64_t (***v19)();
  _BYTE v20[39];
  uint64_t v21;

  v3 = a1;
  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v17 = "RemotePlayback";
  *((_QWORD *)&v17 + 1) = 15;
  v5 = *((_QWORD *)a1 + 7);
  v4 = *((_QWORD *)a1 + 8);
  *(_QWORD *)&v18 = "prompt";
  *((_QWORD *)&v18 + 1) = v4;
  if (*(_BYTE *)(v5 + 12))
    a1 = (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v17);
  v6 = *a2;
  *a2 = 0;
  if (!WTF::isMainThread(a1))
    goto LABEL_6;
  {
    if (WebCore::currentToken(void)::token && !*(_DWORD *)(WebCore::currentToken(void)::token + 68))
    {
      v7 = *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1;
      goto LABEL_7;
    }
LABEL_6:
    v7 = 0;
    goto LABEL_7;
  }
  v7 = 0;
  WebCore::currentToken(void)::token = 0;
LABEL_7:
  *(_OWORD *)&v20[7] = v17;
  *(_OWORD *)&v20[23] = v18;
  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v8 = &off_1E3366438;
  *(_QWORD *)(v8 + 8) = v3;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v7;
  v9 = *(_OWORD *)&v20[16];
  *(_OWORD *)(v8 + 25) = *(_OWORD *)v20;
  *(_OWORD *)(v8 + 41) = v9;
  *(_QWORD *)(v8 + 56) = *(_QWORD *)&v20[31];
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  v11 = *((_DWORD *)v3 + 6);
  *(_QWORD *)(v10 + 8) = v3;
  ++*((_QWORD *)v3 + 2);
  *((_DWORD *)v3 + 6) = v11 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3366370;
  result[1] = (uint64_t (**)())v3;
  result[2] = (uint64_t (**)())v10;
  result[3] = (uint64_t (**)())v8;
  v19 = result;
  v13 = *((_QWORD *)v3 + 1);
  if (!v13)
  {
    v19 = 0;
    v16 = off_1E3366370;
    return (uint64_t (***)())v16[1]();
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
  {
    v19 = 0;
    goto LABEL_12;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v15, 9, (uint64_t *)&v19);
  result = v19;
  v19 = 0;
  if (result)
  {
LABEL_12:
    v16 = *result;
    return (uint64_t (***)())v16[1]();
  }
  return result;
}

uint64_t (**WebCore::RemotePlayback::shouldPlayToRemoteTargetChanged(uint64_t (**this)(), void *a2))()
{
  int v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t (***v54)();
  uint64_t v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (**v64)();
  uint64_t v65;
  int v66;
  uint64_t v67;
  WTF::String *v68;
  _QWORD v69[4];
  WTF::Logger *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  const char *v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  uint64_t v89;

  v2 = (int)a2;
  v3 = (uint64_t)this;
  v89 = *MEMORY[0x1E0C80C00];
  v4 = this[7];
  v5 = this[8];
  v69[0] = "RemotePlayback";
  v69[1] = 15;
  v69[2] = "shouldPlayToRemoteTargetChanged";
  v69[3] = v5;
  if (!*((_BYTE *)v4 + 12))
    goto LABEL_90;
  v68 = (WTF::String *)*((unsigned int *)this + 35);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v69);
  WTF::String::String((WTF::String *)&v74, "shouldPlay = ");
  if (v2)
    v6 = 5;
  else
    v6 = 6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v73, ", promise count = ");
  WTF::String::number(v68);
  v79 = v7;
  *(_QWORD *)&buf = v75;
  v70 = v74;
  v77 = v72;
  v78 = v73;
  this = (uint64_t (**)())WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v70, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, &v76);
  if (!v76)
  {
    __break(0xC471u);
    return this;
  }
  v9 = v72;
  v72 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v73;
  v73 = 0;
  if (!v10)
  {
LABEL_12:
    if (v7)
      goto LABEL_13;
    goto LABEL_15;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (v7)
  {
LABEL_13:
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v8);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_15:
  v11 = v74;
  v74 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v75;
  v75 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = qword_1ECE7C4A0;
  v14 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v14)
  {
    WTF::String::utf8();
    v15 = v70 ? (char *)v70 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v14 = (uint64_t)v70;
    v70 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        v14 = WTF::fastFree((WTF *)v14, a2);
      else
        --*(_DWORD *)v14;
    }
  }
  if (WebCore::LogMedia)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v66 = v2;
          v19 = WTF::Logger::observers((WTF::Logger *)v14);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v67 = *(_QWORD *)v19 + 8 * v20;
            v22 = v6 - 1;
            do
            {
              v23 = *v21;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v69);
              LODWORD(v81) = 0;
              WTF::String::String((WTF::String *)&v82, "shouldPlay = ");
              v83 = 0;
              if (v22)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v24 = v70;
              }
              else
              {
                v42 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
                v24 = v42;
              }
              v84 = v24;
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, ", promise count = ");
              v87 = 0;
              WTF::String::number(v68);
              v70 = 0;
              v71 = 0;
              v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
              LODWORD(v71) = 5;
              v70 = v25;
              v26 = HIDWORD(v71);
              *((_DWORD *)v25 + 4 * HIDWORD(v71)) = buf;
              v27 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v25 + 2 * v26 + 1) = v27;
              *((_DWORD *)v25 + 4 * (v26 + 1)) = (_DWORD)v81;
              v28 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
              *((_DWORD *)v25 + 4 * (v26 + 2)) = v83;
              v29 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v25 + 2 * (v26 + 2) + 1) = v29;
              *((_DWORD *)v25 + 4 * (v26 + 3)) = v85;
              v30 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v25 + 2 * (v26 + 3) + 1) = v30;
              *((_DWORD *)v25 + 4 * (v26 + 4)) = v87;
              v31 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v25 + 2 * (v26 + 4) + 1) = v31;
              HIDWORD(v71) = v26 + 5;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogMedia, 0, &v70);
              v32 = v70;
              if (HIDWORD(v71))
              {
                v33 = v6;
                v34 = 16 * HIDWORD(v71);
                v35 = (WTF::StringImpl **)((char *)v70 + 8);
                do
                {
                  v36 = *v35;
                  *v35 = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  v35 += 2;
                  v34 -= 16;
                }
                while (v34);
                v32 = v70;
                v6 = v33;
              }
              if (v32)
              {
                v70 = 0;
                LODWORD(v71) = 0;
                WTF::fastFree(v32, a2);
              }
              v37 = v88;
              v88 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = v86;
              v86 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v84;
              v84 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = v82;
              v82 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v41 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v67);
          }
          v43 = __ldxr(v16);
          if (v43 == 1)
          {
            v2 = v66;
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
            v2 = v66;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  this = (uint64_t (**)())v76;
  v76 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (uint64_t (**)())WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_90:
  if (v2)
    this = (uint64_t (**)())WebCore::RemotePlayback::setState(v3, 0);
  v44 = *(WTF **)(v3 + 128);
  v45 = *(unsigned int *)(v3 + 140);
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  if ((_DWORD)v45)
  {
    v46 = v2;
    v47 = 8 * v45;
    v48 = 8 * v45;
    v49 = (uint64_t *)v44;
    do
    {
      v50 = *v49;
      v51 = *(_QWORD *)(*v49 + 24);
      if (v51 && *(_QWORD *)v51 && (*(_BYTE *)(v51 + 8) & 3) == 0)
      {
        v52 = *(_QWORD *)(v50 + 32);
        if (!v52 || (*(_BYTE *)(v52 + 8) & 3) != 0)
          v53 = 0;
        else
          v53 = *(uint64_t **)v52;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v50, v53, 0, (objc_class *)0xA);
        MEMORY[0x19AEA32A0](&buf);
      }
      ++v49;
      v48 -= 8;
    }
    while (v48);
    v54 = (uint64_t (***)())v44;
    LOBYTE(v2) = v46;
    do
    {
      this = *v54;
      *v54 = 0;
      if (this)
      {
        if (*((_DWORD *)this + 4) == 1)
          this = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 2))(this);
        else
          --*((_DWORD *)this + 4);
      }
      ++v54;
      v47 -= 8;
    }
    while (v47);
  }
  if (v44)
    this = (uint64_t (**)())WTF::fastFree(v44, a2);
  if ((v2 & 1) != 0 || *(_DWORD *)(v3 + 144) == 2)
    goto LABEL_122;
  v55 = *(_QWORD *)(v3 + 56);
  v56 = *(WTF::StringImpl **)(v3 + 64);
  *(_QWORD *)&buf = "RemotePlayback";
  *((_QWORD *)&buf + 1) = 15;
  v81 = "disconnect";
  v82 = v56;
  if (*(_BYTE *)(v55 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v57 = off_1E3366460;
  v57[1] = v3;
  v58 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v58 = 1;
  v59 = *(_DWORD *)(v3 + 24);
  *(_QWORD *)(v58 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 24) = v59 + 2;
  v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v60 = off_1E3366370;
  v60[1] = v3;
  v60[2] = v58;
  v60[3] = v57;
  *(_QWORD *)&buf = v60;
  v61 = *(_QWORD *)(v3 + 8);
  if (v61 && (v62 = *(_QWORD *)(v61 + 8)) != 0)
  {
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v62 - 96) + 104))(v62 - 96);
    WebCore::EventLoopTaskGroup::queueTask(v63, 9, (uint64_t *)&buf);
    this = (uint64_t (**)())buf;
    *(_QWORD *)&buf = 0;
    if (!this)
      goto LABEL_122;
    v64 = (uint64_t (**)())*this;
  }
  else
  {
    *(_QWORD *)&buf = 0;
    v64 = off_1E3366370;
  }
  this = (uint64_t (**)())v64[1]();
LABEL_122:
  v65 = *(_QWORD *)(v3 + 72);
  if (v65)
  {
    this = *(uint64_t (***)())(v65 + 8);
    if (this)
      return WebCore::HTMLMediaElement::remoteHasAvailabilityCallbacksChanged(this);
  }
  return this;
}

uint64_t WebCore::RemotePlayback::setState(uint64_t result, WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  unint64_t StatusReg;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  WTF::Logger *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  __int128 buf;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 144) != (_DWORD)a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 56);
    v5 = *(_QWORD *)(result + 64);
    v52[0] = "RemotePlayback";
    v52[1] = 15;
    v52[2] = "setState";
    v52[3] = v5;
    if (!*(_BYTE *)(v4 + 12))
      goto LABEL_67;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v52);
    result = WTF::String::number(a2);
    if (v56)
    {
      v6 = *((_DWORD *)v56 + 1);
      if (v55)
      {
LABEL_5:
        v7 = *((_DWORD *)v55 + 1);
LABEL_6:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v57 = 0;
          goto LABEL_111;
        }
        if (v56)
        {
          v8 = *((_DWORD *)v56 + 4);
          v9 = (v8 >> 2) & 1;
          if (v55 && (v8 & 4) != 0)
            goto LABEL_11;
        }
        else
        {
          if (v55)
          {
LABEL_11:
            v9 = (*((unsigned __int8 *)v55 + 16) >> 2) & 1;
            goto LABEL_12;
          }
          v9 = 1;
        }
LABEL_12:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v56, (uint64_t)v55, &v57);
        if (v57)
        {
          v11 = v55;
          v55 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v56;
          v56 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = qword_1ECE7C4A0;
          v14 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v53 ? (char *)v53 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v14 = (uint64_t)v53;
            v53 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (WebCore::LogMedia)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v51 = v3;
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v52);
                      v59 = 0;
                      WTF::String::number(a2);
                      v53 = 0;
                      v54 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v54) = 2;
                      v53 = v25;
                      v26 = HIDWORD(v54);
                      *((_DWORD *)v25 + 4 * HIDWORD(v54)) = buf;
                      v27 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v59;
                      v28 = v60;
                      if (v60)
                        *(_DWORD *)v60 += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v54) = v26 + 2;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, &WebCore::LogMedia, 0, &v53);
                      v29 = v53;
                      if (HIDWORD(v54))
                      {
                        v30 = 16 * HIDWORD(v54);
                        v31 = (WTF::StringImpl **)((char *)v53 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v53;
                      }
                      if (v29)
                      {
                        v53 = 0;
                        LODWORD(v54) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v60;
                      v60 = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    v3 = v51;
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v3 = v51;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = (uint64_t)v57;
          v57 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)result -= 2;
          }
LABEL_67:
          *(_DWORD *)(v3 + 144) = (_DWORD)a2;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          if ((_DWORD)a2)
          {
            if ((_DWORD)a2 == 2)
            {
              v37 = *(_QWORD *)(StatusReg + 736);
              if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
                v38 = WebCore::threadGlobalDataSlow((WebCore *)result);
              v39 = *(_QWORD *)(v38 + 40);
              if (!v39)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v38);
                v39 = *(_QWORD *)(v38 + 40);
              }
              v40 = *(WTF::StringImpl **)(v39 + 632);
              if (v40)
LABEL_75:
                *(_DWORD *)v40 += 2;
            }
            else
            {
              v48 = *(_QWORD *)(StatusReg + 736);
              if (!v48 || (v49 = *(_QWORD *)(v48 + 96)) == 0)
                v49 = WebCore::threadGlobalDataSlow((WebCore *)result);
              v50 = *(_QWORD *)(v49 + 40);
              if (!v50)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v49);
                v50 = *(_QWORD *)(v49 + 40);
              }
              v40 = *(WTF::StringImpl **)(v50 + 464);
              if (v40)
                goto LABEL_75;
            }
          }
          else
          {
            v45 = *(_QWORD *)(StatusReg + 736);
            if (!v45 || (v46 = *(_QWORD *)(v45 + 96)) == 0)
              v46 = WebCore::threadGlobalDataSlow((WebCore *)result);
            v47 = *(_QWORD *)(v46 + 40);
            if (!v47)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v46);
              v47 = *(_QWORD *)(v46 + 40);
            }
            v40 = *(WTF::StringImpl **)(v47 + 472);
            if (v40)
              goto LABEL_75;
          }
          v41 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v41);
          *(_QWORD *)v41 = off_1E33A4B48;
          *(_QWORD *)(v41 + 8) = 0;
          v43 = *(_DWORD *)(v41 + 20) & 0xFFC00000 | (v40 != 0) | 0x1E8200;
          *(_DWORD *)(v41 + 16) = 1;
          *(_DWORD *)(v41 + 20) = v43;
          if (v40)
            *(_DWORD *)v40 += 2;
          *(_QWORD *)(v41 + 24) = v40;
          *(_QWORD *)(v41 + 32) = 0;
          *(_QWORD *)(v41 + 40) = 0;
          *(_QWORD *)(v41 + 48) = 0;
          *(_QWORD *)(v41 + 56) = v42;
          *(_QWORD *)(v41 + 64) = 0;
          *(_QWORD *)&buf = v41;
          WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v3, v3 + 32, 9, (uint64_t *)&buf);
          result = buf;
          *(_QWORD *)&buf = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              if (!v40)
                return result;
              goto LABEL_82;
            }
            --*(_DWORD *)(result + 16);
          }
          if (!v40)
            return result;
LABEL_82:
          if (*(_DWORD *)v40 == 2)
            return WTF::StringImpl::destroy(v40, v44);
          *(_DWORD *)v40 -= 2;
          return result;
        }
LABEL_111:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v55)
        goto LABEL_5;
    }
    v7 = 0;
    goto LABEL_6;
  }
  return result;
}

uint64_t WebCore::RemotePlayback::stop(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v2 = *(_QWORD *)(this + 88);
  if (v2)
  {
    *(_QWORD *)(this + 88) = 0;
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (_DWORD **)(v2 + 8);
      do
      {
        if (*((_DWORD *)v4 - 2) != -1)
        {
          v5 = *v4;
          *v4 = 0;
          if (v5)
          {
            if (v5[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
            else
              --v5[4];
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    return WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  return this;
}

uint64_t (**WebCore::RemotePlayback::playbackTargetPickerWasDismissed(uint64_t (**this)()))()
{
  uint64_t v1;
  uint64_t (**v2)();
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t (*v10)();
  WTF::StringImpl *v11;

  v1 = *((unsigned int *)this + 35);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = 0;
    v4 = (WTF *)this[16];
    v5 = 8 * v1;
    this[16] = 0;
    this[17] = 0;
    do
    {
      v6 = *(_QWORD *)((char *)v4 + v3);
      v11 = 0;
      WebCore::DeferredPromise::reject(v6, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v11, 0);
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      v3 += 8;
    }
    while (v5 != v3);
    v9 = 0;
    do
    {
      this = *(uint64_t (***)())((char *)v4 + v9);
      *(_QWORD *)((char *)v4 + v9) = 0;
      if (this)
      {
        if (*((_DWORD *)this + 4) == 1)
          this = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 2))(this);
        else
          --*((_DWORD *)this + 4);
      }
      v9 += 8;
    }
    while (v5 != v9);
    if (v4)
      this = (uint64_t (**)())WTF::fastFree(v4, v7);
    v10 = v2[9];
    if (v10)
    {
      this = (uint64_t (**)())*((_QWORD *)v10 + 1);
      if (this)
        return WebCore::HTMLMediaElement::remoteHasAvailabilityCallbacksChanged(this);
    }
  }
  return this;
}

uint64_t WebCore::RemotePlayback::availabilityChanged(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  uint64_t v16[4];

  if (*(unsigned __int8 *)(this + 148) != a2)
  {
    v2 = a2;
    v3 = this;
    *(_BYTE *)(this + 148) = a2;
    v4 = *(_QWORD *)(this + 56);
    v5 = *(_QWORD *)(this + 64);
    v16[0] = (uint64_t)"RemotePlayback";
    v16[1] = 15;
    v16[2] = (uint64_t)"availabilityChanged";
    v16[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v16);
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v6 = off_1E3366488;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v2;
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    v8 = *(_DWORD *)(v3 + 24);
    *(_QWORD *)(v7 + 8) = v3;
    ++*(_QWORD *)(v3 + 16);
    *(_DWORD *)(v3 + 24) = v8 + 2;
    this = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)this = off_1E3366370;
    *(_QWORD *)(this + 8) = v3;
    *(_QWORD *)(this + 16) = v7;
    *(_QWORD *)(this + 24) = v6;
    v16[0] = this;
    v12 = *(_QWORD *)(v3 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 104))(v13 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v14, 9, v16);
        this = v16[0];
        v16[0] = 0;
        if (!this)
          return this;
      }
      else
      {
        v16[0] = 0;
      }
      v15 = *(uint64_t (***)())this;
    }
    else
    {
      v16[0] = 0;
      v15 = off_1E3366370;
    }
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15[1])(this, v9, v10, v11);
  }
  return this;
}

uint64_t WebCore::DeprecationReportBody::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3366258;
  v15 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v15;
  *(double *)(result + 24) = a7;
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 32) = v16;
  v17 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 40) = v17;
  *(_QWORD *)(result + 48) = a4;
  *(_QWORD *)(result + 56) = a5;
  *a6 = result;
  return result;
}

uint64_t *WebCore::DeprecationReportBody::type(WebCore::DeprecationReportBody *this)
{
  if ((_MergedGlobals_146 & 1) == 0)
  {
    WebCore::DeprecationReportBody::type(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE820B8 = (uint64_t)&WebCore::DeprecationReportBody::type(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_146 = 1;
  }
  return &qword_1ECE820B8;
}

uint64_t *WebCore::DeprecationReportBody::createReportFormDataForViolation@<X0>(WebCore::DeprecationReportBody *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  double v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  const WTF::String *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t *v33;
  const WTF::String *v34;
  WTF::StringImpl *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  WTF::JSONImpl::Value *v43;
  WTF::StringImpl *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t *v51;
  WTF::JSONImpl::Value *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  const WTF::String *v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  const WTF::String *v70;
  WTF::StringImpl *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  WTF *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t *result;
  _DWORD **v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD **v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD **v101;
  uint64_t v102;
  _DWORD *v103;
  _DWORD **v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD **v107;
  uint64_t v108;
  _DWORD *v109;
  _DWORD **v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD **v113;
  uint64_t v114;
  _DWORD *v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  WTF *v122[2];
  __int128 v123;
  int v124;
  char v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  uint64_t *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130[2];
  __int128 v131;
  int v132;

  WTF::JSONImpl::Object::create(this);
  v4 = v128;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WebCore::DeprecationReportBody *)((char *)this + 16), v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v128 + 2, &v129, (const WTF::StringImpl *)v130, (uint64_t)v122);
  if ((_BYTE)v123)
  {
    v7 = v4 + 3;
    v8 = *((unsigned int *)v4 + 9);
    if ((_DWORD)v8 == *((_DWORD *)v4 + 8))
    {
      v95 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v129);
      v8 = *((unsigned int *)v4 + 9);
      v96 = v4[3];
      v97 = *v95;
      if (*v95)
        *v97 += 2;
      *(_QWORD *)(v96 + 8 * v8) = v97;
    }
    else
    {
      v9 = *v7;
      v10 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *((_DWORD *)v4 + 9) = v8 + 1;
  }
  v11 = v130[0];
  v130[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v11;
  }
  v12 = v129;
  v129 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v128;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v127 = v122[0];
  v14 = *((double *)this + 3) * 1000.0;
  LOBYTE(v132) = 0;
  *(_OWORD *)v130 = 0u;
  v131 = 0u;
  if (COERCE__INT64(fabs(v14)) <= 0x7FEFFFFFFFFFFFFFLL
    && (WebCore::DateComponents::setMillisecondsSinceEpochForDateInternal((WebCore::DateComponents *)v130, round(v14)),
        SDWORD2(v131) >= 1)
    && (DWORD2(v131) < 0x43530 || SDWORD1(v131) < 8 || (int)v131 < 14))
  {
    LOBYTE(v132) = 1;
    *(_OWORD *)v122 = *(_OWORD *)v130;
    v123 = v131;
    v124 = v132;
    v125 = 1;
    WebCore::DateComponents::toString((int8x16_t *)v122, 0, (uint64_t *)&v126);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v126, v15);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v13 + 2, &v127, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if ((_BYTE)v131)
    {
      v17 = v13 + 3;
      v18 = *((unsigned int *)v13 + 9);
      if ((_DWORD)v18 == *((_DWORD *)v13 + 8))
      {
        v98 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v18 + 1, (unint64_t)&v127);
        v18 = *((unsigned int *)v13 + 9);
        v99 = v13[3];
        v100 = *v98;
        if (*v98)
          *v100 += 2;
        *(_QWORD *)(v99 + 8 * v18) = v100;
      }
      else
      {
        v19 = *v17;
        v20 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v19 + 8 * v18) = v20;
      }
      *((_DWORD *)v13 + 9) = v18 + 1;
    }
    v21 = v129;
    v129 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v21;
    }
    v22 = v126;
    v126 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v16);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v127;
    v127 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v16);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v128;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v129 = v122[0];
    WTF::JSONImpl::Value::create((WebCore::DeprecationReportBody *)((char *)this + 32), v25);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v24 + 2, &v129, (const WTF::StringImpl *)v130, (uint64_t)v122);
    if ((_BYTE)v123)
    {
      v27 = v24 + 3;
      v28 = *((unsigned int *)v24 + 9);
      if ((_DWORD)v28 == *((_DWORD *)v24 + 8))
      {
        v101 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)&v129);
        v28 = *((unsigned int *)v24 + 9);
        v102 = v24[3];
        v103 = *v101;
        if (*v101)
          *v103 += 2;
        *(_QWORD *)(v102 + 8 * v28) = v103;
      }
      else
      {
        v29 = *v27;
        v30 = v129;
        if (v129)
          *(_DWORD *)v129 += 2;
        *(_QWORD *)(v29 + 8 * v28) = v30;
      }
      *((_DWORD *)v24 + 9) = v28 + 1;
    }
    v31 = v130[0];
    v130[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v31;
    }
    v32 = v129;
    v129 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        v32 = (WTF::StringImpl *)WTF::StringImpl::destroy(v32, v26);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (*((_QWORD *)this + 5))
    {
      v33 = v128;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v129 = v122[0];
      WTF::JSONImpl::Value::create((WebCore::DeprecationReportBody *)((char *)this + 40), v34);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33 + 2, &v129, (const WTF::StringImpl *)v130, (uint64_t)v122);
      if ((_BYTE)v123)
      {
        v36 = v33 + 3;
        v37 = *((unsigned int *)v33 + 9);
        if ((_DWORD)v37 == *((_DWORD *)v33 + 8))
        {
          v113 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v129);
          v37 = *((unsigned int *)v33 + 9);
          v114 = v33[3];
          v115 = *v113;
          if (*v113)
            *v115 += 2;
          *(_QWORD *)(v114 + 8 * v37) = v115;
        }
        else
        {
          v38 = *v36;
          v39 = v129;
          if (v129)
            *(_DWORD *)v129 += 2;
          *(_QWORD *)(v38 + 8 * v37) = v39;
        }
        *((_DWORD *)v33 + 9) = v37 + 1;
      }
      v40 = v130[0];
      v130[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v40;
      }
      v41 = v129;
      v129 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v35);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v128;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v129 = v122[0];
      if (*((_BYTE *)this + 52))
        v43 = (WTF::JSONImpl::Value *)*((unsigned int *)this + 12);
      else
        v43 = 0;
      WTF::JSONImpl::Value::create(v43);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v42 + 2, &v129, (const WTF::StringImpl *)v130, (uint64_t)v122);
      if ((_BYTE)v123)
      {
        v45 = v42 + 3;
        v46 = *((unsigned int *)v42 + 9);
        if ((_DWORD)v46 == *((_DWORD *)v42 + 8))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v129);
          v46 = *((unsigned int *)v42 + 9);
          v117 = v42[3];
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v46) = v118;
        }
        else
        {
          v47 = *v45;
          v48 = v129;
          if (v129)
            *(_DWORD *)v129 += 2;
          *(_QWORD *)(v47 + 8 * v46) = v48;
        }
        *((_DWORD *)v42 + 9) = v46 + 1;
      }
      v49 = v130[0];
      v130[0] = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v49;
      }
      v50 = v129;
      v129 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v44);
        else
          *(_DWORD *)v50 -= 2;
      }
      v51 = v128;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v129 = v122[0];
      if (*((_BYTE *)this + 60))
        v52 = (WTF::JSONImpl::Value *)*((unsigned int *)this + 14);
      else
        v52 = 0;
      WTF::JSONImpl::Value::create(v52);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51 + 2, &v129, (const WTF::StringImpl *)v130, (uint64_t)v122);
      if ((_BYTE)v123)
      {
        v54 = v51 + 3;
        v55 = *((unsigned int *)v51 + 9);
        if ((_DWORD)v55 == *((_DWORD *)v51 + 8))
        {
          v119 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)&v129);
          v55 = *((unsigned int *)v51 + 9);
          v120 = v51[3];
          v121 = *v119;
          if (*v119)
            *v121 += 2;
          *(_QWORD *)(v120 + 8 * v55) = v121;
        }
        else
        {
          v56 = *v54;
          v57 = v129;
          if (v129)
            *(_DWORD *)v129 += 2;
          *(_QWORD *)(v56 + 8 * v55) = v57;
        }
        *((_DWORD *)v51 + 9) = v55 + 1;
      }
      v58 = v130[0];
      v130[0] = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v58;
      }
      v32 = v129;
      v129 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          v32 = (WTF::StringImpl *)WTF::StringImpl::destroy(v32, v53);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    WTF::JSONImpl::Object::create(v32);
    v59 = v129;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v127 = v122[0];
    if ((_MergedGlobals_146 & 1) == 0)
    {
      WebCore::DeprecationReportBody::type(void)::$_0::operator() const(void)::impl += 2;
      qword_1ECE820B8 = (uint64_t)&WebCore::DeprecationReportBody::type(void)::$_0::operator() const(void)::impl;
      _MergedGlobals_146 = 1;
    }
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&qword_1ECE820B8, v60);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v59 + 2, &v127, (const WTF::StringImpl *)v130, (uint64_t)v122);
    if ((_BYTE)v123)
    {
      v62 = (uint64_t *)((char *)v59 + 24);
      v63 = *((unsigned int *)v59 + 9);
      if ((_DWORD)v63 == *((_DWORD *)v59 + 8))
      {
        v104 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v127);
        v63 = *((unsigned int *)v59 + 9);
        v105 = *((_QWORD *)v59 + 3);
        v106 = *v104;
        if (*v104)
          *v106 += 2;
        *(_QWORD *)(v105 + 8 * v63) = v106;
      }
      else
      {
        v64 = *v62;
        v65 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v64 + 8 * v63) = v65;
      }
      *((_DWORD *)v59 + 9) = v63 + 1;
    }
    v66 = v130[0];
    v130[0] = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v66;
    }
    v67 = v127;
    v127 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v61);
      else
        *(_DWORD *)v67 -= 2;
    }
    v68 = v129;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v127 = v122[0];
    v69 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v126 = v69;
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v126, v70);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v68 + 2, &v127, (const WTF::StringImpl *)v130, (uint64_t)v122);
    if ((_BYTE)v123)
    {
      v72 = (uint64_t *)((char *)v68 + 24);
      v73 = *((unsigned int *)v68 + 9);
      if ((_DWORD)v73 == *((_DWORD *)v68 + 8))
      {
        v107 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)&v127);
        v73 = *((unsigned int *)v68 + 9);
        v108 = *((_QWORD *)v68 + 3);
        v109 = *v107;
        if (*v107)
          *v109 += 2;
        *(_QWORD *)(v108 + 8 * v73) = v109;
      }
      else
      {
        v74 = *v72;
        v75 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v74 + 8 * v73) = v75;
      }
      *((_DWORD *)v68 + 9) = v73 + 1;
    }
    v76 = v130[0];
    v130[0] = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v76;
    }
    v77 = v126;
    v126 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v71);
      else
        *(_DWORD *)v77 -= 2;
    }
    v78 = v127;
    v127 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v71);
      else
        *(_DWORD *)v78 -= 2;
    }
    v79 = v129;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v130[0] = v122[0];
    v127 = (WTF::StringImpl *)v128;
    v128 = 0;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v79 + 2, v130, (const WTF::StringImpl *)&v127, (uint64_t)v122);
    if ((_BYTE)v123)
    {
      v81 = (uint64_t *)((char *)v79 + 24);
      v82 = *((unsigned int *)v79 + 9);
      if ((_DWORD)v82 == *((_DWORD *)v79 + 8))
      {
        v110 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v81, v82 + 1, (unint64_t)v130);
        v82 = *((unsigned int *)v79 + 9);
        v111 = *((_QWORD *)v79 + 3);
        v112 = *v110;
        if (*v110)
          *v112 += 2;
        *(_QWORD *)(v111 + 8 * v82) = v112;
      }
      else
      {
        v83 = *v81;
        v84 = v130[0];
        if (v130[0])
          *(_DWORD *)v130[0] += 2;
        *(_QWORD *)(v83 + 8 * v82) = v84;
      }
      *((_DWORD *)v79 + 9) = v82 + 1;
    }
    v85 = v127;
    v127 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v85;
    }
    v86 = v130[0];
    v130[0] = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, v80);
      else
        *(_DWORD *)v86 -= 2;
    }
    WTF::JSONImpl::Value::toJSONString(v129);
    WTF::String::utf8();
    if (v122[0])
    {
      v87 = (char *)v122[0] + 16;
      v88 = *((_QWORD *)v122[0] + 1);
      goto LABEL_129;
    }
  }
  else
  {
    LOBYTE(v122[0]) = 0;
    v125 = 0;
    __break(1u);
  }
  v88 = 0;
  v87 = 0;
LABEL_129:
  v89 = bmalloc::api::isoAllocate();
  *(_DWORD *)v89 = 1;
  *(_BYTE *)(v89 + 64) = 0;
  *(_QWORD *)(v89 + 16) = 0;
  *(_QWORD *)(v89 + 24) = 0;
  *(_QWORD *)(v89 + 8) = 0;
  *(_BYTE *)(v89 + 32) = 0;
  *(_QWORD *)(v89 + 40) = 0;
  *(_QWORD *)(v89 + 48) = 0;
  *(_BYTE *)(v89 + 56) = 0;
  *a2 = v89;
  WebCore::FormData::appendData(v89, v87, v88);
  v91 = v122[0];
  v122[0] = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::fastFree(v91, v90);
    else
      --*(_DWORD *)v91;
  }
  v92 = v130[0];
  v130[0] = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v90);
    else
      *(_DWORD *)v92 -= 2;
  }
  v93 = v129;
  v129 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v93;
  }
  result = v128;
  v128 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

void *WebCore::Report::bisoHeap(WebCore::Report *this)
{
  return &WebCore::Report::bisoHeap(void)::heap;
}

uint64_t WebCore::Report::operator new(uint64_t this)
{
  if (this == 32)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::Report::create@<X0>(_DWORD **a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)result = 1;
  v9 = *a1;
  if (*a1)
    *v9 += 2;
  *(_QWORD *)(result + 8) = v9;
  v10 = *a2;
  if (*a2)
    *v10 += 2;
  *(_QWORD *)(result + 16) = v10;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v11;
  *a4 = result;
  return result;
}

uint64_t WebCore::Report::Report(uint64_t result, _DWORD **a2, _DWORD **a3, uint64_t *a4)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  *(_DWORD *)result = 1;
  v4 = *a2;
  if (*a2)
    *v4 += 2;
  *(_QWORD *)(result + 8) = v4;
  v5 = *a3;
  if (*a3)
    *v5 += 2;
  *(_QWORD *)(result + 16) = v5;
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  *(_DWORD *)result = 1;
  v4 = *a2;
  if (*a2)
    *v4 += 2;
  *(_QWORD *)(result + 8) = v4;
  v5 = *a3;
  if (*a3)
    *v5 += 2;
  *(_QWORD *)(result + 16) = v5;
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

void WebCore::Report::~Report(WebCore::Report *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebCore::Report::type(WebCore::Report *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebCore::Report::url(WebCore::Report *this)
{
  return (uint64_t)this + 16;
}

uint64_t WebCore::Report::body(WebCore::Report *this)
{
  return (uint64_t)this + 24;
}

_DWORD *WebCore::Report::createReportFormDataForViolation@<X0>(WTF::JSONImpl::Object *a1@<X0>, WTF::JSONImpl::Value *a2@<X1>, WTF::JSONImpl::Value *a3@<X2>, WTF::JSONImpl::Value *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  WTF::JSONImpl::Object *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  const WTF::String *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  const WTF::String *v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  const WTF::String *v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  const WTF::String *v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  _DWORD *result;
  WTF::JSONImpl::Value *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  _BYTE *v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::JSONImpl::Value *v90;
  _DWORD *v91;
  _DWORD **v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD **v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD **v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD **v101;
  uint64_t v102;
  _DWORD *v103;
  _DWORD **v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD **v107;
  uint64_t v108;
  _DWORD *v109;
  _DWORD **v110;
  uint64_t v111;
  _DWORD *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::JSONImpl::Value *v117[2];
  char v118;

  WTF::JSONImpl::Object::create(a1);
  v12 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(_QWORD, WTF::StringImpl *))(*(_QWORD *)*a5 + 16))(*a5, v115);
  WTF::JSONImpl::Object::create(v12);
  v13 = v114;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = v115;
  v115 = 0;
  v113 = v14;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v114 + 16), &v116, (const WTF::StringImpl *)&v113, (uint64_t)v117);
  if (v118)
  {
    v16 = (uint64_t *)(v13 + 24);
    v17 = *(unsigned int *)(v13 + 36);
    if ((_DWORD)v17 == *(_DWORD *)(v13 + 32))
    {
      v92 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v116);
      v17 = *(unsigned int *)(v13 + 36);
      v93 = *(_QWORD *)(v13 + 24);
      v94 = *v92;
      if (*v92)
        *v94 += 2;
      *(_QWORD *)(v93 + 8 * v17) = v94;
    }
    else
    {
      v18 = *v16;
      v19 = v116;
      if (v116)
        *(_DWORD *)v116 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *(_DWORD *)(v13 + 36) = v17 + 1;
  }
  v20 = v113;
  v113 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v20;
  }
  v21 = v116;
  v116 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v114;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v113 = v117[0];
  WTF::JSONImpl::Value::create(a3, v23);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v22 + 16), &v113, (const WTF::StringImpl *)&v116, (uint64_t)v117);
  if (v118)
  {
    v25 = (uint64_t *)(v22 + 24);
    v26 = *(unsigned int *)(v22 + 36);
    if ((_DWORD)v26 == *(_DWORD *)(v22 + 32))
    {
      v95 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v113);
      v26 = *(unsigned int *)(v22 + 36);
      v96 = *(_QWORD *)(v22 + 24);
      v97 = *v95;
      if (*v95)
        *v97 += 2;
      *(_QWORD *)(v96 + 8 * v26) = v97;
    }
    else
    {
      v27 = *v25;
      v28 = v113;
      if (v113)
        *(_DWORD *)v113 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
    }
    *(_DWORD *)(v22 + 36) = v26 + 1;
  }
  v29 = v116;
  v116 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  v30 = v113;
  v113 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v114;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v113 = v117[0];
  WTF::JSONImpl::Value::create(a4, v32);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v31 + 16), &v113, (const WTF::StringImpl *)&v116, (uint64_t)v117);
  if (v118)
  {
    v34 = (uint64_t *)(v31 + 24);
    v35 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v35 == *(_DWORD *)(v31 + 32))
    {
      v98 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v113);
      v35 = *(unsigned int *)(v31 + 36);
      v99 = *(_QWORD *)(v31 + 24);
      v100 = *v98;
      if (*v98)
        *v100 += 2;
      *(_QWORD *)(v99 + 8 * v35) = v100;
    }
    else
    {
      v36 = *v34;
      v37 = v113;
      if (v113)
        *(_DWORD *)v113 += 2;
      *(_QWORD *)(v36 + 8 * v35) = v37;
    }
    *(_DWORD *)(v31 + 36) = v35 + 1;
  }
  v38 = v116;
  v116 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v38;
  }
  v39 = v113;
  v113 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v33);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v114;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v113 = v117[0];
  WTF::JSONImpl::Value::create(a1, v41);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v40 + 16), &v113, (const WTF::StringImpl *)&v116, (uint64_t)v117);
  if (v118)
  {
    v43 = (uint64_t *)(v40 + 24);
    v44 = *(unsigned int *)(v40 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v40 + 32))
    {
      v101 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v113);
      v44 = *(unsigned int *)(v40 + 36);
      v102 = *(_QWORD *)(v40 + 24);
      v103 = *v101;
      if (*v101)
        *v103 += 2;
      *(_QWORD *)(v102 + 8 * v44) = v103;
    }
    else
    {
      v45 = *v43;
      v46 = v113;
      if (v113)
        *(_DWORD *)v113 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v40 + 36) = v44 + 1;
  }
  v47 = v116;
  v116 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v47;
  }
  v48 = v113;
  v113 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v42);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v114;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v113 = v117[0];
  WTF::JSONImpl::Value::create(0);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v49 + 16), &v113, (const WTF::StringImpl *)&v116, (uint64_t)v117);
  if (v118)
  {
    v51 = (uint64_t *)(v49 + 24);
    v52 = *(unsigned int *)(v49 + 36);
    if ((_DWORD)v52 == *(_DWORD *)(v49 + 32))
    {
      v104 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v113);
      v52 = *(unsigned int *)(v49 + 36);
      v105 = *(_QWORD *)(v49 + 24);
      v106 = *v104;
      if (*v104)
        *v106 += 2;
      *(_QWORD *)(v105 + 8 * v52) = v106;
    }
    else
    {
      v53 = *v51;
      v54 = v113;
      if (v113)
        *(_DWORD *)v113 += 2;
      *(_QWORD *)(v53 + 8 * v52) = v54;
    }
    *(_DWORD *)(v49 + 36) = v52 + 1;
  }
  v55 = v116;
  v116 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v55;
  }
  v56 = v113;
  v113 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v50);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = v114;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v113 = v117[0];
  WTF::JSONImpl::Value::create(0);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v57 + 16), &v113, (const WTF::StringImpl *)&v116, (uint64_t)v117);
  if (v118)
  {
    v59 = (uint64_t *)(v57 + 24);
    v60 = *(unsigned int *)(v57 + 36);
    if ((_DWORD)v60 == *(_DWORD *)(v57 + 32))
    {
      v107 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v113);
      v60 = *(unsigned int *)(v57 + 36);
      v108 = *(_QWORD *)(v57 + 24);
      v109 = *v107;
      if (*v107)
        *v109 += 2;
      *(_QWORD *)(v108 + 8 * v60) = v109;
    }
    else
    {
      v61 = *v59;
      v62 = v113;
      if (v113)
        *(_DWORD *)v113 += 2;
      *(_QWORD *)(v61 + 8 * v60) = v62;
    }
    *(_DWORD *)(v57 + 36) = v60 + 1;
  }
  v63 = v116;
  v116 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v63;
  }
  v64 = v113;
  v113 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      v64 = (WTF::StringImpl *)WTF::StringImpl::destroy(v64, v58);
    else
      *(_DWORD *)v64 -= 2;
  }
  if ((*((_BYTE *)a2 + 8) & 1) != 0)
  {
    v65 = v114;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v113 = v117[0];
    WTF::JSONImpl::Value::create(a2, v66);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v65 + 16), &v113, (const WTF::StringImpl *)&v116, (uint64_t)v117);
    if (v118)
    {
      v68 = (uint64_t *)(v65 + 24);
      v69 = *(unsigned int *)(v65 + 36);
      if ((_DWORD)v69 == *(_DWORD *)(v65 + 32))
      {
        v110 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v113);
        v69 = *(unsigned int *)(v65 + 36);
        v111 = *(_QWORD *)(v65 + 24);
        v112 = *v110;
        if (*v110)
          *v112 += 2;
        *(_QWORD *)(v111 + 8 * v69) = v112;
      }
      else
      {
        v70 = *v68;
        v71 = v113;
        if (v113)
          *(_DWORD *)v113 += 2;
        *(_QWORD *)(v70 + 8 * v69) = v71;
      }
      *(_DWORD *)(v65 + 36) = v69 + 1;
    }
    v72 = v116;
    v116 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v72;
    }
    v64 = v113;
    v113 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        v64 = (WTF::StringImpl *)WTF::StringImpl::destroy(v64, v67);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
  result = (_DWORD *)WTF::JSONImpl::Array::create(v64);
  v74 = v117[0];
  v75 = v114;
  ++*(_DWORD *)v114;
  v76 = *((unsigned int *)v74 + 7);
  if ((_DWORD)v76 == *((_DWORD *)v74 + 6))
  {
    v77 = v76 + (v76 >> 2);
    if (v77 >= 0x10)
      v78 = v77 + 1;
    else
      v78 = 16;
    if (v78 <= v76 + 1)
      v79 = v76 + 1;
    else
      v79 = v78;
    if (v79 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v80 = (void *)*((_QWORD *)v74 + 2);
    v81 = (void *)WTF::fastMalloc((WTF *)(8 * v79));
    *((_DWORD *)v74 + 6) = v79;
    *((_QWORD *)v74 + 2) = v81;
    memcpy(v81, v80, 8 * v76);
    if (v80)
    {
      if (*((void **)v74 + 2) == v80)
      {
        *((_QWORD *)v74 + 2) = 0;
        *((_DWORD *)v74 + 6) = 0;
      }
      WTF::fastFree((WTF *)v80, v82);
    }
    v76 = *((unsigned int *)v74 + 7);
    v83 = (_QWORD *)(*((_QWORD *)v74 + 2) + 8 * v76);
  }
  else
  {
    v83 = (_QWORD *)(*((_QWORD *)v74 + 2) + 8 * v76);
  }
  *v83 = v75;
  *((_DWORD *)v74 + 7) = v76 + 1;
  WTF::JSONImpl::Value::toJSONString(v117[0]);
  WTF::String::utf8();
  if (v116)
  {
    v84 = (char *)v116 + 16;
    v85 = *((_QWORD *)v116 + 1);
  }
  else
  {
    v85 = 0;
    v84 = 0;
  }
  v86 = bmalloc::api::isoAllocate();
  *(_DWORD *)v86 = 1;
  *(_BYTE *)(v86 + 64) = 0;
  *(_QWORD *)(v86 + 16) = 0;
  *(_QWORD *)(v86 + 24) = 0;
  *(_QWORD *)(v86 + 8) = 0;
  *(_BYTE *)(v86 + 32) = 0;
  *(_QWORD *)(v86 + 40) = 0;
  *(_QWORD *)(v86 + 48) = 0;
  *(_BYTE *)(v86 + 56) = 0;
  *a6 = v86;
  WebCore::FormData::appendData(v86, v84, v85);
  v88 = v116;
  v116 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::fastFree(v88, v87);
    else
      --*(_DWORD *)v88;
  }
  v89 = v113;
  v113 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v87);
    else
      *(_DWORD *)v89 -= 2;
  }
  v90 = v117[0];
  v117[0] = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v90;
  }
  v91 = (_DWORD *)v114;
  v114 = 0;
  if (v91)
  {
    if (*v91 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v91;
  }
  result = v115;
  v115 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

void *WebCore::ReportBody::bisoHeap(WebCore::ReportBody *this)
{
  return &WebCore::ReportBody::bisoHeap(void)::heap;
}

uint64_t WebCore::ReportBody::operator new(uint64_t this)
{
  if (this == 16)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WebCore::ContextDestructionObserver *WebCore::ReportingObserver::ReportingObserver(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, uint64_t *a3, uint64_t *a4)
{
  WebCore::ScriptExecutionContext *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::ReportingScope *v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  bmalloc::api *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WebCore::ContextDestructionObserver *v34;

  *((_DWORD *)this + 6) = 1;
  v8 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v8 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v8);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v8 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1954FF018);
  }
  v34 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v8 + 16, (uint64_t *)&v34, (uint64_t)&v33);
  *(_QWORD *)this = &off_1E3366288;
  if (*((_BYTE *)a2 + 274))
  {
    if (!(*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 64))(a2))
    {
      __break(0xC471u);
      JUMPOUT(0x1954FF04CLL);
    }
    ++*((_DWORD *)a2 + 78);
    v26 = *((_QWORD *)a2 + 75);
    v27 = *(_QWORD *)(v26 + 24);
    if (v27)
      goto LABEL_44;
    v27 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v27 = 1;
    *(_QWORD *)(v27 + 8) = v26;
    v29 = *(unsigned int **)(v26 + 24);
    *(_QWORD *)(v26 + 24) = v27;
    if (!v29)
      goto LABEL_44;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
    v27 = *(_QWORD *)(v26 + 24);
    if (v27)
    {
LABEL_44:
      do
        v32 = __ldaxr((unsigned int *)v27);
      while (__stlxr(v32 + 1, (unsigned int *)v27));
    }
    *((_QWORD *)this + 4) = v27;
    if (*((_DWORD *)a2 + 78) == 1)
      (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 40))(a2);
    else
      --*((_DWORD *)a2 + 78);
  }
  else
  {
    *((_DWORD *)a2 - 42) += 2;
    v12 = *((_QWORD *)a2 + 374);
    if (!v12)
    {
      v12 = bmalloc::api::isoAllocate();
      *(_DWORD *)(v12 + 16) = 1;
      *(_QWORD *)v12 = &off_1E33A18C0;
      *(_QWORD *)(v12 + 8) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v12, a2);
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)v12 = &off_1E33662E0;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 93) = 0u;
      v14 = (WebCore::ReportingScope *)*((_QWORD *)a2 + 374);
      *((_QWORD *)a2 + 374) = v12;
      if (v14)
      {
        if (*((_DWORD *)v14 + 4) == 1)
        {
          WebCore::ReportingScope::~ReportingScope(v14, v13);
          bmalloc::api::isoDeallocate(v24, v25);
          v12 = *((_QWORD *)a2 + 374);
        }
        else
        {
          --*((_DWORD *)v14 + 4);
        }
      }
    }
    v15 = *(_QWORD *)(v12 + 24);
    if (v15)
      goto LABEL_45;
    v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = v12;
    v17 = *(unsigned int **)(v12 + 24);
    *(_QWORD *)(v12 + 24) = v15;
    if (!v17)
      goto LABEL_45;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
    v15 = *(_QWORD *)(v12 + 24);
    if (v15)
    {
LABEL_45:
      do
        v20 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v20 + 1, (unsigned int *)v15));
    }
    *((_QWORD *)this + 4) = v15;
    if (*((_DWORD *)a2 - 42) == 2)
    {
      if ((*((_WORD *)a2 - 81) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::ScriptExecutionContext *)((char *)a2 - 192));
    }
    else
    {
      *((_DWORD *)a2 - 42) -= 2;
    }
  }
  v21 = *a3;
  *a3 = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 5) = v21;
  *((_BYTE *)this + 64) = 0;
  if (*((_BYTE *)a4 + 16))
  {
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    v22 = *a4;
    *a4 = 0;
    *((_QWORD *)this + 6) = v22;
    LODWORD(v22) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *((_DWORD *)this + 14) = v22;
    LODWORD(v22) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *((_DWORD *)this + 15) = v22;
    *((_BYTE *)this + 64) = 1;
  }
  *((_BYTE *)this + 72) = *((_BYTE *)a4 + 24);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  return this;
}

void WebCore::ReportingObserver::~ReportingObserver(WebCore::ReportingObserver *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  bmalloc::api **v4;
  uint64_t v5;
  bmalloc::api *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v4 = (bmalloc::api **)*((_QWORD *)this + 10);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebCore::Report>::deref(v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  if (*((_BYTE *)this + 64))
  {
    v8 = *((unsigned int *)this + 15);
    if ((_DWORD)v8)
    {
      v14 = (WTF::StringImpl **)*((_QWORD *)this + 6);
      v15 = 8 * v8;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    v9 = (WTF *)*((_QWORD *)this + 6);
    if (v9)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  v10 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (v10[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[4];
  }
  v11 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ReportingObserver::~ReportingObserver(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::ReportingObserver ***WebCore::ReportingScope::unregisterReportingObserver(WebCore::ReportingObserver ***this, WebCore::ReportingObserver *a2)
{
  uint64_t v2;
  WebCore::ReportingObserver ***v3;
  WebCore::ReportingObserver **v4;
  WebCore::ReportingObserver **v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;

  v2 = *((unsigned int *)this + 11);
  if ((_DWORD)v2)
  {
    v3 = this;
    v4 = this[4];
    v5 = v4 + 1;
    v6 = *((unsigned int *)this + 11);
    while (*v4 != a2)
    {
      ++v4;
      ++v5;
      if (!--v6)
        return this;
    }
    *v4 = 0;
    if (*((_DWORD *)a2 + 6) == 1)
    {
      WebCore::ReportingObserver::~ReportingObserver(a2, a2);
      bmalloc::api::isoDeallocate(v7, v8);
      v2 = *((unsigned int *)v3 + 11);
    }
    else
    {
      --*((_DWORD *)a2 + 6);
    }
    this = (WebCore::ReportingObserver ***)memmove(v4, v4 + 1, (char *)&v3[4][v2] - (char *)v5);
    --*((_DWORD *)v3 + 11);
  }
  return this;
}

uint64_t WebCore::ReportingScope::registerReportingObserver(uint64_t this, WebCore::ReportingObserver *a2)
{
  uint64_t v3;
  unint64_t v4;
  WebCore::ReportingObserver **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;

  v3 = this;
  v4 = *(unsigned int *)(this + 44);
  if ((_DWORD)v4)
  {
    v5 = *(WebCore::ReportingObserver ***)(this + 32);
    v6 = *(unsigned int *)(this + 44);
    while (*v5 != a2)
    {
      ++v5;
      if (!--v6)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if ((_DWORD)v4 == *(_DWORD *)(this + 40))
    {
      v7 = v4 + (v4 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v4 + 1)
        v9 = v4 + 1;
      else
        v9 = v8;
      if (v9 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v10 = *(void **)(this + 32);
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
      *(_DWORD *)(v3 + 40) = v9;
      *(_QWORD *)(v3 + 32) = v11;
      this = (uint64_t)memcpy(v11, v10, 8 * v4);
      if (v10)
      {
        if (*(void **)(v3 + 32) == v10)
        {
          *(_QWORD *)(v3 + 32) = 0;
          *(_DWORD *)(v3 + 40) = 0;
        }
        this = WTF::fastFree((WTF *)v10, v12);
      }
      v4 = *(unsigned int *)(v3 + 44);
      v13 = (_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v4);
    }
    else
    {
      v13 = (_QWORD *)(*(_QWORD *)(this + 32) + 8 * v4);
    }
    ++*((_DWORD *)a2 + 6);
    *v13 = a2;
    *(_DWORD *)(v3 + 44) = v4 + 1;
  }
  return this;
}

uint64_t WebCore::ReportingScope::appendQueuedReportsForRelevantType(uint64_t this, WebCore::ReportingObserver *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(this + 48);
  v3 = *(_QWORD *)(this + 56);
  if (v4 != v3)
  {
    v6 = this;
    do
    {
      this = WebCore::ReportingObserver::appendQueuedReportIfCorrectType((uint64_t)a2, (char **)(*(_QWORD *)(v6 + 64) + 8 * v4), a3);
      v7 = *(unsigned int *)(v6 + 72);
      v4 += v7 + 1;
      do
        v4 -= v7;
      while (v4 >= v7);
    }
    while (v3 != v4);
  }
  return this;
}

uint64_t WebCore::ReportingObserver::appendQueuedReportIfCorrectType(uint64_t result, char **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  void *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  WTF::StringImpl *v34;

  v4 = result;
  v5 = *a2;
  v6 = &qword_1ECE82000;
  if ((byte_1ECE820B1 & 1) != 0)
    goto LABEL_2;
  v33 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v24 = v34;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = v34;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = v34;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = v34;
  qword_1ECE820C0 = 0;
  *(_QWORD *)&dword_1ECE820C8 = 0;
  result = WTF::fastMalloc((WTF *)0x20);
  dword_1ECE820C8 = 4;
  qword_1ECE820C0 = result;
  v29 = dword_1ECE820CC;
  if (v34)
    *(_DWORD *)v34 += 2;
  *(_QWORD *)(result + 8 * v29) = v24;
  if (v25)
    *(_DWORD *)v25 += 2;
  *(_QWORD *)(result + 8 * (v29 + 1)) = v25;
  v30 = (v29 + 3);
  if (v26)
    *(_DWORD *)v26 += 2;
  *(_QWORD *)(result + 8 * (v29 + 2)) = v26;
  v31 = v29 + 4;
  if (v27)
  {
    v32 = *(_DWORD *)v27;
    *(_DWORD *)v27 += 2;
    *(_QWORD *)(result + 8 * v30) = v27;
    dword_1ECE820CC = v31;
    if (v32)
      *(_DWORD *)v27 = v32;
    else
      result = WTF::StringImpl::destroy(v27, v28);
  }
  else
  {
    *(_QWORD *)(result + 8 * v30) = 0;
    dword_1ECE820CC = v31;
  }
  if (!v26)
  {
LABEL_51:
    if (v25)
      goto LABEL_52;
    goto LABEL_54;
  }
  if (*(_DWORD *)v26 != 2)
  {
    *(_DWORD *)v26 -= 2;
    goto LABEL_51;
  }
  result = WTF::StringImpl::destroy(v26, v28);
  if (v25)
  {
LABEL_52:
    if (*(_DWORD *)v25 == 2)
      result = WTF::StringImpl::destroy(v25, v28);
    else
      *(_DWORD *)v25 -= 2;
  }
LABEL_54:
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      result = WTF::StringImpl::destroy(v24, v28);
    else
      *(_DWORD *)v24 -= 2;
  }
  byte_1ECE820B1 = 1;
  v5 = v33;
  v6 = &qword_1ECE82000;
LABEL_2:
  if (!*((_DWORD *)v6 + 51))
    return result;
  v7 = 0;
  while (1)
  {
    result = WTF::equal(*(WTF **)(qword_1ECE820C0 + 8 * v7), *((const WTF::StringImpl **)v5 + 1), a3);
    if ((result & 1) != 0)
      break;
    if (++v7 >= (unint64_t)*((unsigned int *)v6 + 51))
      return result;
  }
  if (*(_BYTE *)(v4 + 64))
  {
    if (!*(_DWORD *)(v4 + 60))
      return result;
    v8 = 0;
    v9 = *a2;
    while (1)
    {
      result = WTF::equal(*(WTF **)(*(_QWORD *)(v4 + 48) + 8 * v8), *((const WTF::StringImpl **)v9 + 1), a3);
      if ((result & 1) != 0)
        break;
      if (++v8 >= (unint64_t)*(unsigned int *)(v4 + 60))
        return result;
    }
  }
  result = v4 + 80;
  v10 = *(unsigned int *)(v4 + 92);
  if ((_DWORD)v10 == *(_DWORD *)(v4 + 88))
  {
    result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v10 + 1, (unint64_t)a2);
    v10 = *(unsigned int *)(v4 + 92);
    v11 = *(char **)(v4 + 80);
    v12 = *(char **)result;
    ++**(_DWORD **)result;
  }
  else
  {
    v11 = *(char **)result;
    v12 = *a2;
    ++*(_DWORD *)*a2;
  }
  *(_QWORD *)&v11[8 * v10] = v12;
  v13 = v10 + 1;
  *(_DWORD *)(v4 + 92) = v13;
  if (v13 <= 1)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = v15 - 96;
        v17 = *(unsigned __int8 *)(v15 + 178);
        if (*(_BYTE *)(v15 + 178))
        {
          if (v17 == 1 || v17 == 2)
            ++*(_DWORD *)(v15 + 216);
        }
        else
        {
          *(_DWORD *)(v15 - 264) += 2;
        }
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
        ++*(_DWORD *)(v4 + 24);
        v19 = *(_QWORD *)(v4 + 40);
        ++*(_DWORD *)(v19 + 16);
        v20 = *(unsigned __int8 *)(v15 + 178);
        if (*(_BYTE *)(v15 + 178))
        {
          if (v20 == 1 || v20 == 2)
            ++*(_DWORD *)(v15 + 216);
        }
        else
        {
          *(_DWORD *)(v15 - 264) += 2;
        }
        v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v21 = &off_1E33664F0;
        *((_QWORD *)v21 + 1) = v4;
        *((_QWORD *)v21 + 2) = v19;
        *((_QWORD *)v21 + 3) = v16;
        v34 = v21;
        WebCore::EventLoopTaskGroup::queueTask(v18, 16, (uint64_t *)&v34);
        result = (uint64_t)v34;
        v34 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v23 = *(unsigned __int8 *)(v15 + 178);
        if (*(_BYTE *)(v15 + 178))
        {
          if (v23 == 1)
          {
            if (*(_DWORD *)(v15 + 216) == 1)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v15 - 96);
            else
              --*(_DWORD *)(v15 + 216);
          }
          else if (v23 == 2)
          {
            return (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 216));
          }
        }
        else if (*(_DWORD *)(v15 - 264) == 2)
        {
          if ((*(_WORD *)(v15 - 258) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 288), v22);
        }
        else
        {
          *(_DWORD *)(v15 - 264) -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ReportingObserver::virtualHasPendingActivity(WebCore::ReportingObserver *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::ReportingObserver **v3;
  uint64_t v4;
  WebCore::ReportingObserver *v5;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (v1)
    {
      v2 = *(unsigned int *)(v1 + 44);
      if ((_DWORD)v2)
      {
        v3 = *(WebCore::ReportingObserver ***)(v1 + 32);
        v4 = v2 - 1;
        do
        {
          v5 = *v3++;
          v1 = v5 == this;
        }
        while (v5 != this && v4-- != 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

BOOL WebCore::ReportingScope::containsObserver(WebCore::ReportingScope *this, const WebCore::ReportingObserver *a2)
{
  uint64_t v2;
  const WebCore::ReportingObserver **v3;
  uint64_t v4;
  const WebCore::ReportingObserver *v5;
  _BOOL8 result;

  v2 = *((unsigned int *)this + 11);
  if (!(_DWORD)v2)
    return 0;
  v3 = (const WebCore::ReportingObserver **)*((_QWORD *)this + 4);
  v4 = v2 - 1;
  do
  {
    v5 = *v3++;
    result = v5 == a2;
  }
  while (v5 != a2 && v4-- != 0);
  return result;
}

void *WebCore::ReportingScope::bisoHeap(WebCore::ReportingScope *this)
{
  return &WebCore::ReportingScope::bisoHeap(void)::heap;
}

uint64_t WebCore::ReportingScope::operator new(uint64_t this)
{
  if (this == 112)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::ReportingScope::create@<D0>(WebCore::ReportingScope *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  double result;

  v5 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v5 + 16) = 1;
  *(_QWORD *)v5 = &off_1E33A18C0;
  *(_QWORD *)(v5 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v5, this);
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)v5 = &off_1E33662E0;
  result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 93) = 0u;
  *a2 = v5;
  return result;
}

WebCore::ReportingScope *WebCore::ReportingScope::ReportingScope(WebCore::ReportingScope *this, WebCore::ScriptExecutionContext *a2)
{
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E33662E0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 93) = 0u;
  return this;
}

{
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E33662E0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 93) = 0u;
  return this;
}

unsigned int *WebCore::ReportingScope::removeAllObservers(unsigned int *this, void *a2)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;

  if (this[10])
  {
    v2 = (unsigned int **)(this + 8);
    v4 = this;
    if (this[11])
    {
      v3 = (unsigned int **)(this + 8);
      WTF::Vector<WTF::Ref<WebCore::ReportingObserver,WTF::RawPtrTraits<WebCore::ReportingObserver>,WTF::DefaultRefDerefTraits<WebCore::ReportingObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(this + 8, 0);
      v2 = v3;
    }
    this = *v2;
    if (*v2)
    {
      *((_QWORD *)v4 + 4) = 0;
      v4[10] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

WTF *WebCore::ReportingScope::clearReports(WebCore::ReportingScope *this, WTF::StringImpl *a2)
{
  void *v3;
  WTF *result;
  uint64_t v5;

  WTF::Deque<WTF::Ref<WebCore::Report,WTF::RawPtrTraits<WebCore::Report>,WTF::DefaultRefDerefTraits<WebCore::Report>>,0ul>::destroyAll((WebCore::ReportingScope *)((char *)this + 48), a2);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  result = (WTF *)*((_QWORD *)this + 8);
  if (result)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    result = (WTF *)WTF::fastFree(result, v3);
  }
  v5 = *((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 10) = 0;
    return (WTF *)WTF::fastFree((WTF *)(v5 - 16), v3);
  }
  return result;
}

WebCore::ReportingObserver *WebCore::ReportingScope::notifyReportObservers(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  WebCore::ReportingObserver *result;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::ReportingObserver *v26;
  int v27;
  WebCore::ReportingObserver *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  char *v44;
  int v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  bmalloc::api **v65;
  bmalloc::api *v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  WTF *v80;
  bmalloc::api *v81;
  void *v82;
  int v83;

  v4 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v4)
  {
    v13 = 0;
    v7 = 0;
LABEL_11:
    v16 = 1;
    goto LABEL_13;
  }
  if (v4 >> 29)
    goto LABEL_109;
  v5 = WTF::fastMalloc((WTF *)(8 * v4));
  v7 = (WTF *)v5;
  v8 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v8)
  {
    v16 = 1;
    v13 = (WTF *)v5;
    goto LABEL_13;
  }
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = 8 * v8;
  do
  {
    v12 = *(_QWORD *)(v10 + v9);
    ++*(_DWORD *)(v12 + 24);
    *(_QWORD *)(v5 + v9) = v12;
    v9 += 8;
  }
  while (v11 != v9);
  v13 = (WTF *)(v5 + v9);
  if (!v9)
    goto LABEL_11;
  v14 = (uint64_t *)v5;
  do
  {
    v15 = *v14++;
    WebCore::ReportingObserver::appendQueuedReportIfCorrectType(v15, a2, v6);
    v9 -= 8;
  }
  while (v9);
  v16 = 0;
LABEL_13:
  result = (WebCore::ReportingObserver *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)*a2 + 3) + 24))(*((_QWORD *)*a2 + 3));
  v19 = (int)result;
  v21 = (uint64_t *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 80);
  if (v20
    || (result = (WebCore::ReportingObserver *)WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash((uint64_t *)(a1 + 80), 8u, 0), (v20 = *v21) != 0))
  {
    v22 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v22 = 0;
  }
  v23 = 9 * ((~(v19 << 15) + v19) ^ ((~(v19 << 15) + v19) >> 10));
  v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
  v83 = v24 ^ HIWORD(v24);
  v25 = v22 & v83;
  v26 = (WebCore::ReportingObserver *)(v20 + 8 * (v22 & v83));
  v27 = *(unsigned __int8 *)v26;
  if (v27 == 255)
  {
LABEL_24:
    *(_BYTE *)v26 = v19;
    *((_DWORD *)v26 + 1) = 0;
    v30 = *v21;
    if (*v21)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v32 = *v21;
    if (*v21)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    v34 = (*(_DWORD *)(v32 - 16) + v33);
    v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34)
        goto LABEL_37;
    }
    else
    {
      if (3 * v35 > 4 * v34)
        goto LABEL_37;
      if (!(_DWORD)v35)
      {
        v36 = 8;
        goto LABEL_36;
      }
    }
    v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
LABEL_36:
    result = (WebCore::ReportingObserver *)WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash((uint64_t *)(a1 + 80), v36, v26);
    v26 = result;
    goto LABEL_37;
  }
  v28 = 0;
  v29 = 1;
  while (v27 != v19)
  {
    if (v27 == 254)
      v28 = v26;
    v25 = (v25 + v29) & v22;
    v26 = (WebCore::ReportingObserver *)(v20 + 8 * v25);
    v27 = *(unsigned __int8 *)v26;
    ++v29;
    if (v27 == 255)
    {
      if (v28)
      {
        *(_BYTE *)v28 = -1;
        *((_DWORD *)v28 + 1) = 0;
        --*(_DWORD *)(*v21 - 16);
        v26 = v28;
      }
      goto LABEL_24;
    }
  }
LABEL_37:
  ++*((_DWORD *)v26 + 1);
  v37 = *(_QWORD *)(a1 + 48);
  v38 = *(_QWORD *)(a1 + 56);
  if (v37)
  {
    if (v38 + 1 != v37)
      goto LABEL_51;
    LODWORD(v39) = *(_DWORD *)(a1 + 72);
  }
  else
  {
    v39 = *(unsigned int *)(a1 + 72);
    if (v38)
    {
      if (v38 != v39 - 1)
        goto LABEL_51;
    }
    else if ((_DWORD)v39)
    {
      goto LABEL_51;
    }
  }
  v40 = v16;
  v41 = v39;
  v42 = ((unint64_t)v39 >> 2) + v39;
  if (v42 <= 0xF)
    v42 = 15;
  if (v42 >= 0x1FFFFFFF)
  {
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x195500168);
  }
  v43 = v13;
  v44 = *(char **)(a1 + 64);
  v45 = v42 + 1;
  v46 = (char *)WTF::fastMalloc((WTF *)(8 * (v42 + 1)));
  *(_DWORD *)(a1 + 72) = v45;
  *(_QWORD *)(a1 + 64) = v46;
  v48 = *(_QWORD *)(a1 + 48);
  v47 = *(_QWORD *)(a1 + 56);
  if (v48 <= v47)
  {
    result = (WebCore::ReportingObserver *)memcpy(&v46[8 * v48], &v44[8 * v48], 8 * v47 - 8 * v48);
  }
  else
  {
    memcpy(v46, v44, 8 * v47);
    v49 = *(_QWORD *)(a1 + 48);
    v50 = v49 - v41 + *(unsigned int *)(a1 + 72);
    result = (WebCore::ReportingObserver *)memcpy((void *)(*(_QWORD *)(a1 + 64) + 8 * v50), &v44[8 * v49], 8 * v41 - 8 * v49);
    *(_QWORD *)(a1 + 48) = v50;
  }
  v13 = v43;
  v16 = v40;
  if (v44)
  {
    if (*(char **)(a1 + 64) == v44)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
    }
    result = (WebCore::ReportingObserver *)WTF::fastFree((WTF *)v44, v18);
    v13 = v43;
    v16 = v40;
  }
LABEL_51:
  v52 = *(_QWORD *)(a1 + 56);
  v51 = *(_QWORD *)(a1 + 64);
  v53 = *a2;
  *a2 = 0;
  *(_QWORD *)(v51 + 8 * v52) = v53;
  if (v52 == *(unsigned int *)(a1 + 72) - 1)
    v54 = 0;
  else
    v54 = v52 + 1;
  *(_QWORD *)(a1 + 56) = v54;
  v55 = *(_QWORD *)(a1 + 80);
  if (v55)
  {
    v56 = *(_DWORD *)(v55 - 8);
    v57 = v56 & v83;
    v58 = *(unsigned __int8 *)(v55 + 8 * v57);
    if (v58 == v19)
    {
LABEL_59:
      if (*(_DWORD *)(v55 + 8 * v57 + 4) > 0x64u)
      {
        v60 = *(_QWORD *)(a1 + 48);
        if (v60 != v54)
        {
          while (1)
          {
            v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v60) + 24);
            result = (WebCore::ReportingObserver *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
            if ((_DWORD)result == v19)
              break;
            v62 = *(unsigned int *)(a1 + 72);
            v60 += v62 + 1;
            do
              v60 -= v62;
            while (v60 >= v62);
            if (*(_QWORD *)(a1 + 56) == v60)
              goto LABEL_75;
          }
          if (*(_QWORD *)(a1 + 56) != v60)
          {
            v63 = v16;
            v64 = *(_QWORD *)(a1 + 64);
            v65 = (bmalloc::api **)(v64 + 8 * v60);
            v66 = *v65;
            *v65 = 0;
            if (v66)
              WTF::RefCounted<WebCore::Report>::deref(v66, (WTF::StringImpl *)v18);
            v67 = *(_QWORD *)(a1 + 48);
            if (v67 <= v60)
            {
              result = (WebCore::ReportingObserver *)memmove((void *)(v64 + 8 * v67 + 8), (const void *)(v64 + 8 * v67), 8 * v60 - 8 * v67);
              *(_QWORD *)(a1 + 48) = (*(_QWORD *)(a1 + 48) + 1) % (unint64_t)*(unsigned int *)(a1 + 72);
            }
            else
            {
              result = (WebCore::ReportingObserver *)memmove((void *)(v64 + 8 * v60), (const void *)(v64 + 8 * v60 + 8), 8 * *(_QWORD *)(a1 + 56) - (8 * v60 + 8));
              *(_QWORD *)(a1 + 56) = (*(_QWORD *)(a1 + 56) + (unint64_t)*(unsigned int *)(a1 + 72) - 1)
                                   % *(unsigned int *)(a1 + 72);
            }
            v16 = v63;
          }
        }
LABEL_75:
        v68 = *v21;
        if (*v21)
        {
          v69 = *(_DWORD *)(v68 - 8);
          v70 = v69 & v83;
          v71 = *(unsigned __int8 *)(v68 + 8 * v70);
          if (v71 != v19)
          {
            v72 = 1;
            while (v71 != 255)
            {
              v70 = ((_DWORD)v70 + v72) & v69;
              v71 = *(unsigned __int8 *)(v68 + 8 * v70);
              ++v72;
              if (v71 == v19)
                goto LABEL_82;
            }
            v70 = *(unsigned int *)(v68 - 4);
          }
LABEL_82:
          if (v70 != *(_DWORD *)(v68 - 4))
          {
            v73 = v68 + 8 * v70;
            if (*(_DWORD *)(v73 + 4) == 1)
            {
              *(_BYTE *)v73 = -2;
              ++*(_DWORD *)(*v21 - 16);
              v74 = *v21;
              if (*v21)
                v75 = *(_DWORD *)(v74 - 12) - 1;
              else
                v75 = -1;
              *(_DWORD *)(v74 - 12) = v75;
              v76 = *v21;
              if (*v21)
              {
                v77 = 6 * *(_DWORD *)(v76 - 12);
                v78 = *(_DWORD *)(v76 - 4);
                if (v77 < v78 && v78 >= 9)
                  result = (WebCore::ReportingObserver *)WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash((uint64_t *)(a1 + 80), v78 >> 1, 0);
              }
            }
            else
            {
              --*(_DWORD *)(v73 + 4);
            }
          }
        }
      }
    }
    else
    {
      v59 = 1;
      while (v58 != 255)
      {
        v57 = ((_DWORD)v57 + v59) & v56;
        v58 = *(unsigned __int8 *)(v55 + 8 * v57);
        ++v59;
        if (v58 == v19)
          goto LABEL_59;
      }
    }
  }
  if ((v16 & 1) == 0)
  {
    v80 = v7;
    do
    {
      result = *(WebCore::ReportingObserver **)v80;
      *(_QWORD *)v80 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 1)
        {
          WebCore::ReportingObserver::~ReportingObserver(result, (WTF::StringImpl *)v18);
          result = (WebCore::ReportingObserver *)bmalloc::api::isoDeallocate(v81, v82);
        }
        else
        {
          --*((_DWORD *)result + 6);
        }
      }
      v80 = (WTF *)((char *)v80 + 8);
    }
    while (v80 != v13);
  }
  if (v7)
    return (WebCore::ReportingObserver *)WTF::fastFree(v7, v18);
  return result;
}

uint64_t WebCore::ReportingScope::parseReportingEndpoints(WebCore::ReportingScope *this, const WTF::String *a2, const WTF::URL *a3)
{
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  char v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  char v23;

  result = (uint64_t)WebCore::ReportingScope::parseReportingEndpointsFromHeader(a2, a3, &v20);
  v6 = v22;
  v22 = 0;
  v7 = v23;
  v23 = 0;
  v8 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v20;
  v9 = *((unsigned int *)this + 24);
  v10 = v21;
  v20 = 0;
  v21 = 0;
  *((_QWORD *)this + 12) = v10;
  *((_DWORD *)this + 26) = v6;
  *((_BYTE *)this + 108) = v7;
  if (v8)
  {
    if ((_DWORD)v9)
    {
      v11 = (WTF::StringImpl **)((char *)v8 + 8);
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v5);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = *(v11 - 1);
        *(v11 - 1) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v5);
          else
            *(_DWORD *)v13 -= 2;
        }
        v11 += 2;
        --v9;
      }
      while (v9);
    }
    result = WTF::fastFree(v8, v5);
    v15 = v20;
    if (v20)
    {
      v16 = v21;
      if ((_DWORD)v21)
      {
        v17 = (WTF::StringImpl **)((char *)v20 + 8);
        do
        {
          v18 = *v17;
          *v17 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v14);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = *(v17 - 1);
          *(v17 - 1) = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v14);
            else
              *(_DWORD *)v19 -= 2;
          }
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      return WTF::fastFree(v15, v14);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ReportingScope::parseReportingEndpointsFromHeader@<X0>(WebCore::ReportingScope *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  WTF::StringImpl *result;
  const WTF::URL *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  _QWORD *v23;
  char v24;

  *a3 = 0;
  a3[1] = 0;
  *(_QWORD *)((char *)a3 + 13) = 0;
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v7 = *(unsigned __int8 **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  result = (WTF::StringImpl *)RFC8941::parseDictionaryStructuredFieldValue(v7, (WTF::StringImpl *)v8, &v23);
  if (!v24)
    return result;
  v11 = v23;
  if (v23)
  {
    v12 = *((unsigned int *)v23 - 1);
    v13 = &v23[6 * v12];
    if (*((_DWORD *)v23 - 3))
    {
      v14 = v23;
      if ((_DWORD)v12)
      {
        v15 = 48 * v12;
        v14 = v23;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 6;
          v15 -= 48;
          if (!v15)
          {
            v14 = v13;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v14 = &v23[6 * v12];
  }
  else
  {
    v14 = 0;
    LODWORD(v12) = 0;
  }
  v13 = &v23[6 * v12];
  if (v23)
  {
LABEL_11:
    v16 = &v23[6 * *((unsigned int *)v23 - 1)];
    goto LABEL_16;
  }
  v16 = 0;
LABEL_16:
  if (v16 == v14)
  {
    if (!v23)
      return result;
    goto LABEL_36;
  }
  do
  {
    if (!*((_DWORD *)v14 + 8) && !*((_DWORD *)v14 + 6))
    {
      MEMORY[0x19AEA52F8](&v21, a2, v14 + 2, 0);
      if ((v22 & 1) != 0 && WebCore::shouldTreatAsPotentiallyTrustworthy((WebCore *)&v21, v10))
        WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::String const&>((uint64_t)a3, (WTF::StringImpl **)v14, (const WTF::StringImpl *)&v21, (uint64_t)&v20);
      result = v21;
      v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    v17 = v14 + 6;
    v14 = v13;
    if (v17 != v13)
    {
      v14 = v17;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        v14 += 6;
        if (v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  while (v14 != v16);
  if (v24)
  {
    v11 = v23;
    if (v23)
    {
LABEL_36:
      v18 = *((unsigned int *)v11 - 1);
      if ((_DWORD)v18)
      {
        v19 = v11;
        do
        {
          if (*v19 != -1)
            v19 = (_QWORD *)WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair((uint64_t)v19, v10);
          v19 += 6;
          --v18;
        }
        while (v18);
      }
      return (WTF::StringImpl *)WTF::fastFree((WTF *)(v11 - 2), v10);
    }
  }
  return result;
}

WTF *WebCore::ReportingScope::endpointURIForToken@<X0>(WebCore::ReportingScope *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebCore::ReportingScope *)((char *)this + 88), a2, a3, a4);
}

WTF::StringImpl *WebCore::ReportingScope::generateTestReport(uint64_t a1, uint64_t *a2, WTF::JSONImpl::Value *a3)
{
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::URL *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  WebCore::FormData *v33;
  WTF::StringImpl *v34;
  int v35;
  char v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *result;
  bmalloc::api *v43;
  void *v44;
  WTF *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF *v51;
  uint64_t v52;
  WebCore::FormData *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;

  v57 = 0;
  WTF::URL::invalidate((WTF::URL *)&v57);
  v7 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0 || *(_BYTE *)(v9 + 178))
  {
    v10 = bmalloc::api::isoAllocate();
    v11 = 0;
    v12 = 1;
    *(_DWORD *)(v10 + 8) = 1;
    *(_QWORD *)v10 = off_1E3366550;
    v13 = *a2;
    *a2 = 0;
    *(_QWORD *)(v10 + 16) = v13;
    v54 = (_DWORD *)v10;
    v14 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    goto LABEL_36;
  }
  *(_DWORD *)(v9 - 264) += 2;
  v15 = *(WTF::StringImpl **)(v9 + 448);
  if (v15)
    *(_DWORD *)v15 += 2;
  v16 = v57;
  v57 = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v6);
    else
      *(_DWORD *)v16 -= 2;
  }
  v11 = v9 - 288;
  v17 = (const WTF::URL *)(v9 + 448);
  v18 = *(_OWORD *)(v9 + 472);
  v58 = *(_OWORD *)(v9 + 456);
  v59 = v18;
  WTF::URL::strippedForUseAsReferrer((WTF::URL *)&v57);
  v14 = v55;
  v55 = 0;
  if (*v7 == 2)
  {
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEF70], v19);
    v55 = 0;
  }
  else
  {
    *v7 -= 2;
  }
  v20 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)v20 = off_1E3366550;
  v21 = *a2;
  *a2 = 0;
  *(_QWORD *)(v20 + 16) = v21;
  v54 = (_DWORD *)v20;
  {
    WebCore::TestReportBody::type(void)::$_0::operator() const(void)::impl += 2;
    WebCore::TestReportBody::type(void)const::testReportType = (uint64_t)&WebCore::TestReportBody::type(void)::$_0::operator() const(void)::impl;
  }
  WebCore::Document::userAgent((WebCore::Document *)v11, v17, (uint64_t *)&v55);
  v22 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v22 = off_1E3366528;
  *((_QWORD *)v22 + 1) = &v54;
  v51 = v22;
  WebCore::Report::createReportFormDataForViolation((WTF::JSONImpl::Object *)&WebCore::TestReportBody::type(void)const::testReportType, (WTF::JSONImpl::Value *)&v57, (WTF::JSONImpl::Value *)&v55, a3, &v51, (uint64_t *)&v53);
  (*(void (**)(WTF *))(*(_QWORD *)v22 + 8))(v22);
  v24 = v55;
  v55 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
  {
    v55 = 0;
    v56 = 0;
LABEL_23:
    *(_DWORD *)v25 += 2;
    goto LABEL_24;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = v55;
  v27 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = v55;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, v26);
      v25 = *(WTF::StringImpl **)a3;
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v55 = 0;
  v56 = 0;
  if (v25)
    goto LABEL_23;
LABEL_24:
  v51 = 0;
  v52 = 0;
  v28 = (WTF *)WTF::fastMalloc((WTF *)8);
  LODWORD(v52) = 1;
  v51 = v28;
  v29 = HIDWORD(v52);
  if (v25)
    *(_DWORD *)v25 += 2;
  *((_QWORD *)v28 + v29) = v25;
  HIDWORD(v52) = v29 + 1;
  WebCore::Document::sendReportToEndpoints((WTF::StringImpl *)v11, (uint64_t)&v57, (unsigned int *)&v55, (uint64_t)&v51, &v53, 6u);
  if (HIDWORD(v52))
  {
    v45 = v51;
    v46 = 8 * HIDWORD(v52);
    do
    {
      v47 = *(WTF::StringImpl **)v45;
      *(_QWORD *)v45 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v30);
        else
          *(_DWORD *)v47 -= 2;
      }
      v45 = (WTF *)((char *)v45 + 8);
      v46 -= 8;
    }
    while (v46);
  }
  v31 = v51;
  if (v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v31, v30);
    if (v25)
    {
LABEL_29:
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v30);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  else if (v25)
  {
    goto LABEL_29;
  }
  if (HIDWORD(v56))
  {
    v48 = v55;
    v49 = 8 * HIDWORD(v56);
    do
    {
      v50 = *(WTF::StringImpl **)v48;
      *(_QWORD *)v48 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v30);
        else
          *(_DWORD *)v50 -= 2;
      }
      v48 = (WTF::StringImpl *)((char *)v48 + 8);
      v49 -= 8;
    }
    while (v49);
  }
  v32 = v55;
  if (v55)
  {
    v55 = 0;
    LODWORD(v56) = 0;
    WTF::fastFree(v32, v30);
  }
  v33 = v53;
  v53 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      WebCore::FormData::~FormData(v33, v30);
      bmalloc::api::isoDeallocate(v43, v44);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  v12 = 0;
LABEL_36:
  {
    v34 = (WTF::StringImpl *)&WebCore::TestReportBody::type(void)::$_0::operator() const(void)::impl;
    v35 = WebCore::TestReportBody::type(void)::$_0::operator() const(void)::impl + 2;
    WebCore::TestReportBody::type(void)::$_0::operator() const(void)::impl += 2;
    WebCore::TestReportBody::type(void)const::testReportType = (uint64_t)&WebCore::TestReportBody::type(void)::$_0::operator() const(void)::impl;
    goto LABEL_39;
  }
  v34 = (WTF::StringImpl *)WebCore::TestReportBody::type(void)const::testReportType;
  if (WebCore::TestReportBody::type(void)const::testReportType)
  {
    v35 = *(_DWORD *)WebCore::TestReportBody::type(void)const::testReportType;
LABEL_39:
    v36 = 0;
    *(_DWORD *)v34 = v35 + 2;
    goto LABEL_40;
  }
  v36 = 1;
LABEL_40:
  v37 = v54;
  v54 = 0;
  v38 = (WTF::StringImpl *)bmalloc::api::isoAllocate();
  *(_DWORD *)v38 = 1;
  if ((v36 & 1) == 0)
    *(_DWORD *)v34 += 2;
  *((_QWORD *)v38 + 1) = v34;
  if (v14)
    *(_DWORD *)v14 += 2;
  *((_QWORD *)v38 + 2) = v14;
  *((_QWORD *)v38 + 3) = v37;
  v55 = v38;
  WebCore::ReportingScope::notifyReportObservers(a1, (char **)&v55);
  v40 = v55;
  v55 = 0;
  if (v40)
    WTF::RefCounted<WebCore::Report>::deref(v40, v39);
  if ((v36 & 1) == 0)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v39);
    else
      *(_DWORD *)v34 -= 2;
  }
  v41 = v54;
  v54 = 0;
  if (v41)
  {
    if (v41[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
      if ((v12 & 1) != 0)
        goto LABEL_55;
      goto LABEL_53;
    }
    --v41[2];
  }
  if ((v12 & 1) != 0)
    goto LABEL_55;
LABEL_53:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v39);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
LABEL_55:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v39);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v57;
  v57 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RemotePlayback::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RemotePlayback *WebCore::RemotePlayback::deref(WebCore::RemotePlayback *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback(this, a2);
    return (WebCore::RemotePlayback *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::RemotePlayback::eventTargetInterface(WebCore::RemotePlayback *this)
{
  return 46;
}

uint64_t WebCore::RemotePlayback::scriptExecutionContext(WebCore::RemotePlayback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::RemotePlayback::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RemotePlayback *WebCore::RemotePlayback::derefEventTarget(WebCore::RemotePlayback *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback(this, a2);
    return (WebCore::RemotePlayback *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RemotePlayback::eventTargetInterface(WebCore::RemotePlayback *this)
{
  return 46;
}

uint64_t `non-virtual thunk to'WebCore::RemotePlayback::scriptExecutionContext(WebCore::RemotePlayback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::RemotePlayback::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RemotePlayback::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback((WebCore::RemotePlayback *)(this - 32), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

void WebCore::DeprecationReportBody::~DeprecationReportBody(WebCore::DeprecationReportBody *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::DeprecationReportBody::reportBodyType(WebCore::DeprecationReportBody *this)
{
  return 4;
}

uint64_t WebCore::ReportingObserver::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::ReportingObserver *WebCore::ReportingObserver::deref(WebCore::ReportingObserver *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::ReportingObserver::~ReportingObserver(this, a2);
    return (WebCore::ReportingObserver *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v11;
  char v12;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        v6 = *(WTF::StringImpl **)(v5 - 8);
        if (v6 != (WTF::StringImpl *)-1)
        {
          v7 = *(unsigned int *)(v5 + 8);
          if ((_DWORD)v7 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E3366328[v7])(&v11, v5);
            v6 = *(WTF::StringImpl **)(v5 - 8);
          }
          *(_DWORD *)(v5 + 8) = -1;
          *(_QWORD *)(v5 - 8) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E3366340[v8])(&v12, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  v9 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7RFC89415TokenEbEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_bEEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7RFC89415TokenEbEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_bEEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6StringEN7RFC89415TokenEbEEENS9_6VectorINS_4pairISD_NSB_10ParametersEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSD_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3366328[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6StringEN7RFC89415TokenEbEEENS9_6VectorINS_4pairISD_NSB_10ParametersEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSD_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  WTF *result;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3)
    WTF::VectorDestructor<true,std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>>::destruct(*(_QWORD *)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 24 * v3));
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  if ((WTF::StringImpl *)result != a2)
  {
    v14 = v2;
    v15 = v3;
    v5 = result;
    do
    {
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        v7 = *(unsigned int *)(v6 - 4);
        if ((_DWORD)v7)
        {
          v8 = v6 + 8;
          do
          {
            v9 = *(WTF::StringImpl **)(v8 - 8);
            if (v9 != (WTF::StringImpl *)-1)
            {
              v10 = *(unsigned int *)(v8 + 8);
              if ((_DWORD)v10 != -1)
              {
                ((void (*)(char *, uint64_t))off_1E3366328[v10])(&v12, v8);
                v9 = *(WTF::StringImpl **)(v8 - 8);
              }
              *(_DWORD *)(v8 + 8) = -1;
              *(_QWORD *)(v8 - 8) = 0;
              if (v9)
              {
                if (*(_DWORD *)v9 == 2)
                  WTF::StringImpl::destroy(v9, a2);
                else
                  *(_DWORD *)v9 -= 2;
              }
            }
            v8 += 24;
            --v7;
          }
          while (v7);
        }
        result = WTF::fastFree((WTF *)(v6 - 16), a2);
      }
      v11 = *(unsigned int *)(v5 + 8);
      if ((_DWORD)v11 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E3366328[v11])(&v13, v5);
      *(_DWORD *)(v5 + 8) = -1;
      v5 += 24;
    }
    while ((WTF::StringImpl *)v5 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RemotePlayback>(WebCore::RemotePlayback &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RemotePlayback>(WebCore::RemotePlayback &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RemotePlayback>(WebCore::RemotePlayback &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RemotePlayback>(WebCore::RemotePlayback &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::RemotePlayback *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3366370;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::RemotePlayback::~RemotePlayback((WebCore::RemotePlayback *)v7, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::RemotePlayback *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::RemotePlayback::~RemotePlayback(v5, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RemotePlayback::watchAvailability(WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E3366398;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RemotePlayback::watchAvailability(WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3366398;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::RemotePlayback::watchAvailability(WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>> &&)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  WebCore::ActiveDOMCallback *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v42;
  int v43;
  WTF::StringImpl *v44;

  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 180))
    return result;
  v4 = result;
  v5 = *(_QWORD *)(v1 + 72);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || *(_BYTE *)(v6 + 1696))
  {
    if (*(_BYTE *)(*(_QWORD *)(v1 + 56) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::StringImpl *)((char *)result + 32), "promise rejected, remote playback disabled");
    v7 = *((_QWORD *)v4 + 3);
    v44 = 0;
    WebCore::DeferredPromise::reject(v7, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v44, 0);
    result = v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v10 = (uint64_t *)(v1 + 88);
  v9 = *(_QWORD *)(v1 + 88);
  v11 = *(_DWORD *)(v1 + 80);
  v12 = (v11 + 1);
  *(_DWORD *)(v1 + 80) = v12;
  if (v9
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)(v1 + 88), 8u), (v9 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = 9 * ((v11 - ((_DWORD)v12 << 15)) ^ ((v11 - ((_DWORD)v12 << 15)) >> 10));
  v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
  v16 = v13 & (v15 ^ HIWORD(v15));
  v17 = (_QWORD *)(v9 + 16 * v16);
  v18 = *(_DWORD *)v17;
  if (!*(_DWORD *)v17)
  {
LABEL_24:
    *(_DWORD *)v17 = v12;
    v21 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    v22 = (_DWORD *)v17[1];
    v17[1] = v21;
    if (v22)
    {
      if (v22[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
      else
        --v22[4];
    }
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v10;
    if (*v10)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_41;
    }
    else
    {
      if (3 * v28 > 4 * v27)
        goto LABEL_41;
      if (!(_DWORD)v28)
      {
        v29 = 8;
        goto LABEL_40;
      }
    }
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_40:
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)(v1 + 88), v29);
    goto LABEL_41;
  }
  v19 = 0;
  v20 = 1;
  while (v18 != (_DWORD)v12)
  {
    if (v18 == -1)
      v19 = v17;
    v16 = (v16 + v20) & v13;
    v17 = (_QWORD *)(v9 + 16 * v16);
    v18 = *(_DWORD *)v17;
    ++v20;
    if (!*(_DWORD *)v17)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*v10 - 16);
        v17 = v19;
      }
      goto LABEL_24;
    }
  }
LABEL_41:
  v30 = (WebCore::ActiveDOMCallback *)*((_QWORD *)v4 + 3);
  ++*(_DWORD *)(v1 + 24);
  v31 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v31 = &off_1E33663C0;
  *(_QWORD *)(v31 + 8) = v1;
  *(_QWORD *)(v31 + 16) = v1;
  *(_DWORD *)(v31 + 24) = v12;
  v44 = (WTF::StringImpl *)v31;
  WebCore::DeferredPromise::whenSettled(v30, (uint64_t *)&v44);
  result = v44;
  v44 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  v32 = *((_QWORD *)v4 + 3);
  v33 = *(_QWORD *)(v32 + 24);
  if (v33 && *(_QWORD *)v33 && (*(_BYTE *)(v33 + 8) & 3) == 0)
  {
    v34 = *(_QWORD *)(v32 + 32);
    if (!v34 || (*(_BYTE *)(v34 + 8) & 3) != 0)
      v35 = 0;
    else
      v35 = *(uint64_t **)v34;
    v36 = v35[7];
    MEMORY[0x19AEA3294](&v44, v36);
    v37 = *(_QWORD *)(v36 + 16);
    if (!v37)
    {
      WebCore::DeferredPromise::callFunction(v32, v35, 0, (objc_class *)(v12 | 0xFFFE000000000000));
      v37 = *(_QWORD *)(v36 + 16);
      if (!v37)
        return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v44);
    }
    v38 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v35);
    if (!(*(unsigned int (**)(_QWORD *))(*v38 + 64))(v38))
    {
LABEL_56:
      WebCore::reportException((JSC::JSGlobalObject *)v35, v37, 0, 0, 0);
      return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v44);
    }
    v39 = v38[43];
    if (*(_QWORD *)(v36 + 24) == v37)
    {
LABEL_70:
      *(_BYTE *)(*(_QWORD *)(v39 + 8) + 93442) = 1;
      *(_BYTE *)(v32 + 44) = 1;
      goto LABEL_56;
    }
    if (!v39)
      goto LABEL_56;
    v40 = (unsigned __int8 *)(v39 + 40);
    if (__ldaxr((unsigned __int8 *)(v39 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v40))
    {
      goto LABEL_64;
    }
    MEMORY[0x19AEA534C](v39 + 40);
LABEL_64:
    v42 = *(unsigned __int8 *)(v39 + 41);
    v43 = __ldxr(v40);
    if (v43 == 1)
    {
      if (!__stlxr(0, v40))
      {
LABEL_69:
        if (!v42)
          goto LABEL_56;
        goto LABEL_70;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v39 + 40));
    goto LABEL_69;
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (int *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
          v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
          do
          {
            v19 = v18 & v15;
            v18 = ++v16 + v19;
          }
          while (*(_DWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(_DWORD **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            if (v21[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
            else
              --v21[4];
          }
          *(_DWORD *)v20 = *v10;
          v22 = v4 + 16 * v9;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v23;
          v13 = *(_DWORD **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (!v13)
            goto LABEL_22;
          if (v13[4] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
            goto LABEL_22;
          }
          --v13[4];
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(_DWORD **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[4] == 1)
              goto LABEL_24;
            --v13[4];
          }
        }
      }
LABEL_22:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RemotePlayback::watchAvailability(WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::RemotePlayback *v3;
  bmalloc::api *v5;
  void *v6;

  *a1 = &off_1E33663C0;
  v3 = (WebCore::RemotePlayback *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::RemotePlayback::~RemotePlayback(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RemotePlayback::watchAvailability(WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::RemotePlayback *v3;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &off_1E33663C0;
  v3 = (WebCore::RemotePlayback *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::RemotePlayback::~RemotePlayback(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (**WTF::Detail::CallableWrapper<WebCore::RemotePlayback::watchAvailability(WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1))()
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t (**result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)();
  uint64_t v19[4];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_BYTE *)(v1 + 148);
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E33663E8;
  *(_QWORD *)(v4 + 8) = v1;
  *(_DWORD *)(v4 + 16) = v2;
  *(_BYTE *)(v4 + 20) = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)(v5 + 8) = v1;
  ++*(_QWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 24) = v6 + 2;
  result = (uint64_t (**)())WTF::fastMalloc((WTF *)0x20);
  *result = (uint64_t (*)())off_1E3366370;
  result[1] = (uint64_t (*)())v1;
  result[2] = (uint64_t (*)())v5;
  result[3] = (uint64_t (*)())v4;
  v19[0] = (uint64_t)result;
  v8 = *(_QWORD *)(v1 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v10, 9, v19);
      result = (uint64_t (**)())v19[0];
      v19[0] = 0;
      if (!result)
        goto LABEL_8;
    }
    else
    {
      v19[0] = 0;
    }
    v11 = (uint64_t (**)())*result;
  }
  else
  {
    v19[0] = 0;
    v11 = off_1E3366370;
  }
  result = (uint64_t (**)())((uint64_t (*)(uint64_t (**)()))v11[1])(result);
LABEL_8:
  v12 = *(_QWORD *)(v1 + 72);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 1600);
      if (!v14)
      {
        WebCore::HTMLMediaElement::initializeMediaSession(*(WebCore::HTMLMediaElement **)(v12 + 8));
        v14 = *(_QWORD *)(v13 + 1600);
      }
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 32) + 248))(*(_QWORD *)(v14 + 32));
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 32) + 256))(*(_QWORD *)(v14 + 32));
      v19[0] = (uint64_t)"MediaElementSession";
      v19[1] = 20;
      v19[2] = (uint64_t)"hasWirelessPlaybackTargets";
      v19[3] = v16;
      if (*(_BYTE *)(v15 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v19, "returning ");
      WebCore::RemotePlayback::availabilityChanged(v1, *(unsigned __int8 *)(v14 + 249));
      v17 = *(_QWORD *)(v1 + 72);
      if (v17)
        v18 = *(uint64_t (***)())(v17 + 8);
      else
        v18 = 0;
      return WebCore::HTMLMediaElement::remoteHasAvailabilityCallbacksChanged(v18);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RemotePlayback::watchAvailability(WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>> &&>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  v1 = result[1];
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
      {
        v4 = *(_QWORD *)(v1 + 88);
        if (v4)
        {
          v5 = *(_DWORD *)(v4 - 8);
          v6 = *((_DWORD *)result + 4);
          v7 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
          v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
          v9 = (v8 ^ HIWORD(v8)) & v5;
          v10 = *(_DWORD *)(v4 + 16 * v9);
          if (v10 != v6)
          {
            v11 = 1;
            while (v10)
            {
              v9 = ((_DWORD)v9 + v11) & v5;
              v10 = *(_DWORD *)(v4 + 16 * v9);
              ++v11;
              if (v10 == v6)
                goto LABEL_12;
            }
            v9 = *(unsigned int *)(v4 - 4);
          }
LABEL_12:
          if (v9 != *(_DWORD *)(v4 - 4))
            return (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16 * v9 + 8)
                                                                                    + 40))(&v12, *(_QWORD *)(v4 + 16 * v9 + 8), *((unsigned __int8 *)result + 20));
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RemotePlayback::cancelWatchAvailability(std::optional<int>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3366410;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RemotePlayback::cancelWatchAvailability(std::optional<int>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3366410;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::RemotePlayback::cancelWatchAvailability(std::optional<int>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(WTF::StringImpl *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD **v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v42;

  v2 = (_QWORD *)*((_QWORD *)result + 1);
  v3 = v2[1];
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || *(_BYTE *)(v4 + 180))
    return result;
  v5 = result;
  v6 = v2[9];
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 1696))
  {
    if (*(_BYTE *)(v2[7] + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::StringImpl *)((char *)result + 32), "promise rejected, remote playback disabled");
    v8 = *((_QWORD *)v5 + 3);
    v42 = 0;
    v9 = 8;
    goto LABEL_10;
  }
  if (*((_BYTE *)result + 20))
  {
    v11 = *((_DWORD *)result + 4);
    if ((v11 - 1) >= 0xFFFFFFFE)
    {
      if (*(_BYTE *)(v2[7] + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::StringImpl *)((char *)result + 32), "promise rejected, invalid identifier");
      goto LABEL_49;
    }
    v12 = v2 + 11;
    v13 = v2[11];
    if (!v13)
      goto LABEL_73;
    v14 = *(_DWORD *)(v13 - 8);
    v15 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
    v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
    v17 = v14 & (v16 ^ HIWORD(v16));
    v18 = *(_DWORD *)(v13 + 16 * v17);
    if (v18 != v11)
    {
      v19 = 1;
      while (v18)
      {
        v17 = ((_DWORD)v17 + v19) & v14;
        v18 = *(_DWORD *)(v13 + 16 * v17);
        ++v19;
        if (v18 == v11)
          goto LABEL_46;
      }
      v17 = *(unsigned int *)(v13 - 4);
    }
LABEL_46:
    v30 = *(unsigned int *)(v13 - 4);
    if (v17 == v30)
    {
LABEL_73:
      if (*(_BYTE *)(v2[7] + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::StringImpl *)((char *)v5 + 32), "promise rejected, no matching callback");
LABEL_49:
      v8 = *((_QWORD *)v5 + 3);
      v42 = 0;
      v9 = 5;
LABEL_10:
      WebCore::DeferredPromise::reject(v8, (JSC::JSGlobalObject *)v9, (JSC::JSGlobalObject *)&v42, 0);
      result = v42;
      v42 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    v31 = v14 & 0x62BAF5A0;
    v32 = *(_DWORD *)(v13 + 16 * v31);
    if (v32 == 1)
    {
LABEL_54:
      if (v31 != v30)
      {
        v34 = v13 + 16 * v31;
        *(_DWORD *)v34 = -1;
        v35 = *(_DWORD **)(v34 + 8);
        *(_QWORD *)(v34 + 8) = 0;
        if (v35)
        {
          if (v35[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
            v12 = v2 + 11;
          }
          else
          {
            --v35[4];
          }
        }
        ++*(_DWORD *)(*v12 - 16);
        v36 = *v12;
        if (*v12)
          v37 = *(_DWORD *)(v36 - 12) - 1;
        else
          v37 = -1;
        *(_DWORD *)(v36 - 12) = v37;
        v38 = *v12;
        if (*v12)
        {
          v39 = 6 * *(_DWORD *)(v38 - 12);
          v40 = *(_DWORD *)(v38 - 4);
          if (v39 < v40 && v40 >= 9)
            WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::RemotePlaybackAvailabilityCallback,WTF::RawPtrTraits<WebCore::RemotePlaybackAvailabilityCallback>,WTF::DefaultRefDerefTraits<WebCore::RemotePlaybackAvailabilityCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v12, v40 >> 1);
        }
      }
    }
    else
    {
      v33 = 1;
      while (v32)
      {
        v31 = ((_DWORD)v31 + v33) & v14;
        v32 = *(_DWORD *)(v13 + 16 * v31);
        ++v33;
        if (v32 == 1)
          goto LABEL_54;
      }
    }
  }
  else
  {
    v20 = v2[11];
    if (v20)
    {
      v2[11] = 0;
      v21 = *(unsigned int *)(v20 - 4);
      if ((_DWORD)v21)
      {
        v22 = (_DWORD **)(v20 + 8);
        do
        {
          if (*((_DWORD *)v22 - 2) != -1)
          {
            v23 = *v22;
            *v22 = 0;
            if (v23)
            {
              if (v23[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
              else
                --v23[4];
            }
          }
          v22 += 2;
          --v21;
        }
        while (v21);
      }
      WTF::fastFree((WTF *)(v20 - 16), a2);
    }
  }
  v24 = v2[9];
  if (v24)
    v25 = *(uint64_t (***)())(v24 + 8);
  else
    v25 = 0;
  result = (WTF::StringImpl *)WebCore::HTMLMediaElement::remoteHasAvailabilityCallbacksChanged(v25);
  v26 = *((_QWORD *)v5 + 3);
  v27 = *(_QWORD *)(v26 + 24);
  if (v27 && *(_QWORD *)v27 && (*(_BYTE *)(v27 + 8) & 3) == 0)
  {
    v28 = *(_QWORD *)(v26 + 32);
    if (!v28 || (*(_BYTE *)(v28 + 8) & 3) != 0)
      v29 = 0;
    else
      v29 = *(uint64_t **)v28;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v26, v29, 0, (objc_class *)0xA);
    return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v42);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RemotePlayback::prompt(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3366438;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RemotePlayback::prompt(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3366438;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::RemotePlayback::prompt(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char **v10;
  char *v11;
  uint64_t v12;
  char *v13;
  WebCore::HTMLMediaElement *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WTF::String *v40;
  WTF::Logger *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::Logger *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::Logger::LogSiteIdentifier *v60;
  WTF::Logger *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  __int128 buf;
  const char *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 180))
    return result;
  v4 = result;
  v5 = *(_QWORD *)(v1 + 72);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || *(_BYTE *)(v6 + 1696))
  {
    if (*(_BYTE *)(*(_QWORD *)(v1 + 56) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)(result + 8), "promise rejected, remote playback disabled");
    v7 = *((_QWORD *)v4 + 2);
    *(_QWORD *)&buf = 0;
    v8 = 8;
LABEL_10:
    WebCore::DeferredPromise::reject(v7, (JSC::JSGlobalObject *)v8, (JSC::JSGlobalObject *)&buf, 0);
    result = (unsigned int *)buf;
    *(_QWORD *)&buf = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      else
        *result -= 2;
    }
    return result;
  }
  if (!*((_BYTE *)result + 24))
  {
    if (*(_BYTE *)(*(_QWORD *)(v1 + 56) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)(result + 8), "promise rejected, user gesture required");
    v7 = *((_QWORD *)v4 + 2);
    *(_QWORD *)&buf = 0;
    v8 = 12;
    goto LABEL_10;
  }
  if (*(_DWORD *)(v1 + 144) == 2 && !*(_BYTE *)(v1 + 148))
  {
    if (*(_BYTE *)(*(_QWORD *)(v1 + 56) + 12))
    {
      v60 = (WTF::Logger::LogSiteIdentifier *)(result + 8);
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(result + 8));
      WTF::String::String((WTF::String *)&v65, "promise rejected, state = ");
      WTF::String::number((WTF::String *)*(unsigned int *)(v1 + 144));
      WTF::String::String((WTF::String *)&v63, ", available = ");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v23 = (WTF::StringImpl *)buf;
      v61 = v65;
      v70 = v64;
      *(_QWORD *)&buf = v66;
      v68 = v23;
      v69 = v63;
      result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v61, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v67);
      if (!v67)
      {
        __break(0xC471u);
        return result;
      }
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v24);
        else
          *(_DWORD *)v23 -= 2;
      }
      v25 = v63;
      v63 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v64;
      v64 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v24);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v65;
      v65 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v24);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v66;
      v66 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v24);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = qword_1ECE7C4A0;
      v30 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v30)
      {
        WTF::String::utf8();
        v32 = v61 ? (char *)v61 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v32;
        _os_log_impl(&dword_1940B8000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v30 = (uint64_t)v61;
        v61 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
            v30 = WTF::fastFree((WTF *)v30, v31);
          else
            --*(_DWORD *)v30;
        }
      }
      if (WebCore::LogMedia && byte_1ECE7C490)
      {
        v33 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v34 = *v33;
          if ((v34 & 1) != 0)
            break;
          v35 = __ldaxr(v33);
          if (v35 == v34)
          {
            if (!__stxr(v34 | 1, v33))
            {
              v36 = WTF::Logger::observers((WTF::Logger *)v30);
              v37 = *(unsigned int *)(v36 + 12);
              if ((_DWORD)v37)
              {
                v38 = *(uint64_t **)v36;
                v59 = *(_QWORD *)v36 + 8 * v37;
                do
                {
                  v39 = *v38;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString(v60);
                  LODWORD(v72) = 0;
                  WTF::String::String((WTF::String *)&v73, "promise rejected, state = ");
                  v40 = (WTF::String *)*(unsigned int *)(v1 + 144);
                  v74 = 0;
                  WTF::String::number(v40);
                  v76 = 0;
                  WTF::String::String((WTF::String *)&v77, ", available = ");
                  v78 = 0;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v79 = v61;
                  v61 = 0;
                  v62 = 0;
                  v41 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v62) = 5;
                  v61 = v41;
                  v42 = HIDWORD(v62);
                  *((_DWORD *)v41 + 4 * HIDWORD(v62)) = buf;
                  v43 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v41 + 2 * v42 + 1) = v43;
                  *((_DWORD *)v41 + 4 * (v42 + 1)) = (_DWORD)v72;
                  v44 = v73;
                  if (v73)
                    *(_DWORD *)v73 += 2;
                  *((_QWORD *)v41 + 2 * (v42 + 1) + 1) = v44;
                  *((_DWORD *)v41 + 4 * (v42 + 2)) = v74;
                  v45 = v75;
                  if (v75)
                    *(_DWORD *)v75 += 2;
                  *((_QWORD *)v41 + 2 * (v42 + 2) + 1) = v45;
                  *((_DWORD *)v41 + 4 * (v42 + 3)) = v76;
                  v46 = v77;
                  if (v77)
                    *(_DWORD *)v77 += 2;
                  *((_QWORD *)v41 + 2 * (v42 + 3) + 1) = v46;
                  *((_DWORD *)v41 + 4 * (v42 + 4)) = v78;
                  v47 = v79;
                  if (v79)
                    *(_DWORD *)v79 += 2;
                  *((_QWORD *)v41 + 2 * (v42 + 4) + 1) = v47;
                  HIDWORD(v62) = v42 + 5;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v39 + 16))(v39, &WebCore::LogMedia, 1, &v61);
                  v48 = v61;
                  if (HIDWORD(v62))
                  {
                    v49 = 16 * HIDWORD(v62);
                    v50 = (WTF::StringImpl **)((char *)v61 + 8);
                    do
                    {
                      v51 = *v50;
                      *v50 = 0;
                      if (v51)
                      {
                        if (*(_DWORD *)v51 == 2)
                          WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v31);
                        else
                          *(_DWORD *)v51 -= 2;
                      }
                      v50 += 2;
                      v49 -= 16;
                    }
                    while (v49);
                    v48 = v61;
                  }
                  if (v48)
                  {
                    v61 = 0;
                    LODWORD(v62) = 0;
                    WTF::fastFree(v48, v31);
                  }
                  v52 = v79;
                  v79 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v31);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                  v53 = v77;
                  v77 = 0;
                  if (v53)
                  {
                    if (*(_DWORD *)v53 == 2)
                      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v31);
                    else
                      *(_DWORD *)v53 -= 2;
                  }
                  v54 = v75;
                  v75 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v31);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  v55 = v73;
                  v73 = 0;
                  if (v55)
                  {
                    if (*(_DWORD *)v55 == 2)
                      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v31);
                    else
                      *(_DWORD *)v55 -= 2;
                  }
                  v56 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v31);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  ++v38;
                }
                while (v38 != (uint64_t *)v59);
              }
              v57 = __ldxr(v33);
              if (v57 == 1)
              {
                if (!__stlxr(0, v33))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v58 = v67;
      v67 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v31);
        else
          *(_DWORD *)v58 -= 2;
      }
    }
    v7 = *((_QWORD *)v4 + 2);
    *(_QWORD *)&buf = 0;
    v8 = 6;
    goto LABEL_10;
  }
  v10 = (char **)(v1 + 128);
  v11 = (char *)(v4 + 4);
  v12 = *(unsigned int *)(v1 + 140);
  if ((_DWORD)v12 == *(_DWORD *)(v1 + 136))
  {
    v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v12 + 1, (unint64_t)v11);
    v12 = *(unsigned int *)(v1 + 140);
    v13 = (char *)(*(_QWORD *)(v1 + 128) + 8 * v12);
  }
  else
  {
    v13 = &(*v10)[8 * v12];
  }
  v14 = 0;
  v15 = *(_QWORD *)v11;
  *(_QWORD *)v11 = 0;
  *(_QWORD *)v13 = v15;
  *(_DWORD *)(v1 + 140) = v12 + 1;
  v16 = *(_QWORD *)(v1 + 72);
  if (v16)
    v14 = *(WebCore::HTMLMediaElement **)(v16 + 8);
  v17 = *((_QWORD *)v14 + 200);
  if (!v17)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(v14);
    v17 = *((_QWORD *)v14 + 200);
  }
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 32) + 248))(*(_QWORD *)(v17 + 32));
  v19 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 32) + 256))(*(_QWORD *)(v17 + 32));
  *(_QWORD *)&buf = "MediaElementSession";
  *((_QWORD *)&buf + 1) = 20;
  v72 = "hasWirelessPlaybackTargets";
  v73 = v19;
  if (*(_BYTE *)(v18 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "returning ");
  WebCore::RemotePlayback::availabilityChanged(v1, *(unsigned __int8 *)(v17 + 249));
  v20 = *(_QWORD *)(v1 + 72);
  if (v20)
    v21 = *(uint64_t (***)())(v20 + 8);
  else
    v21 = 0;
  WebCore::HTMLMediaElement::remoteHasAvailabilityCallbacksChanged(v21);
  v22 = *(_QWORD *)(v1 + 72);
  if (v22)
    return WebCore::HTMLMediaElement::webkitShowPlaybackTargetPicker(*(WebCore::HTMLMediaElement **)(v22 + 8));
  else
    return WebCore::HTMLMediaElement::webkitShowPlaybackTargetPicker(0);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RemotePlayback::disconnect(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
        return WebCore::RemotePlayback::setState(result, (WTF::String *)2);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RemotePlayback::availabilityChanged(BOOL)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || *(_BYTE *)(v4 + 180))
    return result;
  v5 = result;
  v6 = *(_QWORD *)(v2 + 88);
  if (!v6)
  {
    v9 = 0;
    v7 = 0;
LABEL_13:
    v8 = v6 + 16 * v7;
    goto LABEL_14;
  }
  v7 = *(unsigned int *)(v6 - 4);
  v8 = v6 + 16 * v7;
  if (!*(_DWORD *)(v6 - 12))
  {
    v9 = v6 + 16 * v7;
    goto LABEL_13;
  }
  v9 = v6;
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = v6;
    while ((*(_DWORD *)v9 + 1) <= 1)
    {
      v9 += 16;
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_14:
  if (v6)
  {
    v11 = v6 + 16 * *(unsigned int *)(v6 - 4);
    v12 = *(unsigned int *)(v6 - 12);
    if ((_DWORD)v12)
    {
      if (v12 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v12));
      v13 = (WTF *)result;
      goto LABEL_20;
    }
  }
  else
  {
    v11 = 0;
  }
  v13 = 0;
LABEL_20:
  if (v11 != v9)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = v15;
      v17 = *(_QWORD *)(v9 + 8);
      ++*(_DWORD *)(v17 + 16);
      *((_QWORD *)v13 + v14) = v17;
      v18 = v9 + 16;
      v9 = v8;
      if (v18 != v8)
      {
        v9 = v18;
        while ((*(_DWORD *)v9 + 1) <= 1)
        {
          v9 += 16;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
      ++v14;
      v15 = v16 + 1;
    }
    while (v9 != v11);
    if (v14)
    {
      v19 = 8 * v16;
      v20 = v13;
      do
      {
        v21 = *(_QWORD *)v20;
        v20 = (WTF *)((char *)v20 + 8);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v21 + 40))(&v24, v21, *(unsigned __int8 *)(v5 + 16));
        v19 -= 8;
      }
      while (v19);
      v22 = 8 * v16;
      v23 = (uint64_t *)v13;
      do
      {
        result = *v23;
        *v23 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 16);
        }
        ++v23;
        v22 -= 8;
      }
      while (v22);
    }
  }
  if (v13)
    return WTF::fastFree(v13, a2);
  return result;
}

bmalloc::api *WTF::RefCounted<WebCore::Report>::deref(bmalloc::api *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (bmalloc::api *)bmalloc::api::isoDeallocate(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ReportingObserver::appendQueuedReportIfCorrectType(WTF::Ref<WebCore::Report,WTF::RawPtrTraits<WebCore::Report>,WTF::DefaultRefDerefTraits<WebCore::Report>> const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  WebCore::ReportingObserver *v6;
  bmalloc::api *v8;
  void *v9;

  *a1 = &off_1E33664F0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1)
      {
        if (*(_DWORD *)(v3 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        else
          --*(_DWORD *)(v3 + 312);
      }
      else if (v4 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
      }
    }
    else if (*(_DWORD *)(v3 - 168) == 2)
    {
      if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v3 - 168) -= 2;
    }
  }
  v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (WebCore::ReportingObserver *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 1)
    {
      WebCore::ReportingObserver::~ReportingObserver(v6, (WTF::StringImpl *)a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v6 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ReportingObserver::appendQueuedReportIfCorrectType(WTF::Ref<WebCore::Report,WTF::RawPtrTraits<WebCore::Report>,WTF::DefaultRefDerefTraits<WebCore::Report>> const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  WebCore::ReportingObserver *v6;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E33664F0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1)
      {
        if (*(_DWORD *)(v3 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        else
          --*(_DWORD *)(v3 + 312);
      }
      else if (v4 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
      }
    }
    else if (*(_DWORD *)(v3 - 168) == 2)
    {
      if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v3 - 168) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (WebCore::ReportingObserver *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 1)
    {
      WebCore::ReportingObserver::~ReportingObserver(v6, (WTF::StringImpl *)a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v6 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::ReportingObserver::appendQueuedReportIfCorrectType(WTF::Ref<WebCore::Report,WTF::RawPtrTraits<WebCore::Report>,WTF::DefaultRefDerefTraits<WebCore::Report>> const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::InspectorInstrumentation *v4;
  WebCore::ScriptExecutionContext *v5;
  WTF::StringImpl *v7;
  WebCore::ScriptExecutionContext *v8;
  WTF *v10;
  uint64_t v11;
  bmalloc::api *v12;
  WTF *result;
  WTF::JSONImpl::Object *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 8);
  v18 = *(WTF **)(v2 + 80);
  v3 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  v19 = v3;
  v4 = *(WebCore::InspectorInstrumentation **)(a1 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v14 = (WTF::JSONImpl::Object *)WebCore::InspectorInstrumentation::instrumentingAgents(v4, v5);
    if (v14)
      WebCore::InspectorInstrumentation::willFireObserverCallbackImpl(v14, (WebCore::TimelineRecordFactory *)&v17, (uint64_t)v4);
  }
  v7 = v17;
  v17 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  (*(void (**)(_QWORD, WTF **, _QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), &v18, *(_QWORD *)(a1 + 8));
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v15 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(a1 + 24), v8);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 232);
      if (v16)
        WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v16);
    }
  }
  if (HIDWORD(v19))
  {
    v10 = v18;
    v11 = 8 * HIDWORD(v19);
    do
    {
      v12 = *(bmalloc::api **)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
        WTF::RefCounted<WebCore::Report>::deref(v12, v8);
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  result = v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    return (WTF *)WTF::fastFree(result, v8);
  }
  return result;
}

bmalloc::api *WTF::Deque<WTF::Ref<WebCore::Report,WTF::RawPtrTraits<WebCore::Report>,WTF::DefaultRefDerefTraits<WebCore::Report>>,0ul>::destroyAll(bmalloc::api *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  bmalloc::api **v5;
  uint64_t v6;
  bmalloc::api **v7;
  uint64_t v8;
  bmalloc::api **v9;
  uint64_t v10;
  bmalloc::api *v11;
  bmalloc::api **v12;

  v2 = *(_QWORD *)result;
  v3 = *((_QWORD *)result + 1);
  if (*(_QWORD *)result > v3)
  {
    v11 = result;
    v12 = (bmalloc::api **)*((_QWORD *)result + 2);
    if (v3)
    {
      v10 = 8 * v3;
      do
      {
        result = *v12;
        *v12 = 0;
        if (result)
          result = WTF::RefCounted<WebCore::Report>::deref(result, a2);
        ++v12;
        v10 -= 8;
      }
      while (v10);
      v12 = (bmalloc::api **)*((_QWORD *)v11 + 2);
      v2 = *(_QWORD *)v11;
    }
    v4 = *((unsigned int *)v11 + 6);
    if (v2 != v4)
    {
      v5 = &v12[v2];
      v6 = 8 * v4 - 8 * v2;
      do
      {
        result = *v5;
        *v5 = 0;
        if (result)
          result = WTF::RefCounted<WebCore::Report>::deref(result, a2);
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else if (*(_QWORD *)result != v3)
  {
    v7 = (bmalloc::api **)(*((_QWORD *)result + 2) + 8 * v2);
    v8 = 8 * v3 - 8 * v2;
    do
    {
      result = *v7;
      v9 = v7;
      *v7 = 0;
      if (result)
        result = WTF::RefCounted<WebCore::Report>::deref(result, a2);
      v7 = v9 + 1;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::ReportingObserver,WTF::RawPtrTraits<WebCore::ReportingObserver>,WTF::DefaultRefDerefTraits<WebCore::ReportingObserver>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 8 * (_QWORD)a2);
    v6 = 8 * v4 - 8 * (_QWORD)a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (result[6] == 1)
        {
          WebCore::ReportingObserver::~ReportingObserver((WebCore::ReportingObserver *)result, a2);
          result = (unsigned int *)bmalloc::api::isoDeallocate(v7, v8);
        }
        else
        {
          --result[6];
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>@<X0>(WTF *result@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD **v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  v5 = *(_DWORD **)result;
  if (*(_QWORD *)result)
  {
    v7 = (_DWORD **)result;
    v8 = *((_DWORD *)result + 2);
    v9 = v8 - 1;
    v10 = *((_DWORD *)result + 4);
    v11 = *((_DWORD *)*a2 + 4);
    if (v11 < 0x100)
    {
      v12 = WTF::StringImpl::hashSlowCase(*a2);
      v5 = *v7;
    }
    else
    {
      v12 = v11 >> 8;
    }
    v13 = (v12 ^ v10) & v9;
    v14 = (uint64_t)&v5[4 * v13];
    result = *(WTF **)v14;
    if (*(_QWORD *)v14)
    {
      v15 = -1;
      do
      {
        v16 = *((_DWORD *)result + 4);
        result = v16 < 0x100 ? (WTF *)WTF::StringImpl::hashSlowCase(result) : (WTF *)(v16 >> 8);
        if (++v15 > ((v13 + v8 - ((result ^ v10) & v9)) & v9))
          break;
        if ((_DWORD)result == v12)
        {
          result = (WTF *)WTF::equal(*(WTF **)v14, *a2, a3);
          if ((result & 1) != 0)
          {
            v5 = *(_DWORD **)(v14 + 8);
            if (v5)
              *v5 += 2;
            goto LABEL_15;
          }
        }
        v13 = (v13 + 1) & v9;
        v14 = (uint64_t)&(*v7)[4 * v13];
        result = *(WTF **)v14;
      }
      while (*(_QWORD *)v14);
    }
    v5 = 0;
  }
LABEL_15:
  *a4 = v5;
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::ReportingScope::generateTestReport(WTF::String &&,WTF::String &)::$_0,void,WTF::JSONImpl::Object &>::call(uint64_t a1, uint64_t a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(**(_QWORD **)(a1 + 8) + 16), v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)(a2 + 24);
    v7 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 32))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *(unsigned int *)(a2 + 36);
      v13 = *(_QWORD *)(a2 + 24);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(a2 + 36) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::TestReportBody::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3366550;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v5;
  *a2 = result;
  return result;
}

uint64_t *WebCore::TestReportBody::type(WebCore::TestReportBody *this)
{
  {
    WebCore::TestReportBody::type(void)::$_0::operator() const(void)::impl += 2;
    WebCore::TestReportBody::type(void)const::testReportType = (uint64_t)&WebCore::TestReportBody::type(void)::$_0::operator() const(void)::impl;
  }
  return &WebCore::TestReportBody::type(void)const::testReportType;
}

uint64_t WebCore::TestReportBody::message(WebCore::TestReportBody *this)
{
  return (uint64_t)this + 16;
}

void WebCore::NavigatorScreenWakeLock::~NavigatorScreenWakeLock(WebCore::NavigatorScreenWakeLock *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
}

void WebCore::NavigatorScreenWakeLock::~NavigatorScreenWakeLock(WebCore::NavigatorScreenWakeLock *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::NavigatorScreenWakeLock::from(WebCore::NavigatorScreenWakeLock *this, WebCore::Navigator *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  const char *v6;
  const char *v8;
  unsigned __int8 *v9[2];

  v3 = (uint64_t *)((char *)this + 72);
  v9[0] = "NavigatorScreenWakeLock";
  v9[1] = (unsigned __int8 *)24;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v9);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = off_1E3366580;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = this;
    v8 = (const char *)v5;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v3, "NavigatorScreenWakeLock", (unsigned __int8 *)0x18, &v8);
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return v5;
}

uint64_t WebCore::NavigatorScreenWakeLock::wakeLock(WebCore::NavigatorScreenWakeLock *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScriptExecutionContext *v5;
  _DWORD *v6;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return v1;
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v1 = WTF::fastMalloc((WTF *)0x18);
    v5 = 0;
LABEL_7:
    *(_QWORD *)v1 = &off_1E33A18C0;
    *(_QWORD *)(v1 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v1, v5);
    *(_DWORD *)(v1 + 16) = 1;
    *(_QWORD *)v1 = &off_1E33668A0;
    *(_BYTE *)(v1 + 20) = 0;
    v6 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v1;
    if (v6)
    {
      if (v6[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        return *((_QWORD *)this + 1);
      }
      else
      {
        --v6[4];
      }
    }
    return v1;
  }
  if (!*(_BYTE *)(v4 + 178))
  {
    v1 = WTF::fastMalloc((WTF *)0x18);
    v5 = (WebCore::ScriptExecutionContext *)(v4 - 96);
    goto LABEL_7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::WakeLock::request(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::LocalDOMWindow *v14;
  char v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *result;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  BOOL hasTransientActivation;
  uint64_t v54;
  char v55;
  WTF::StringImpl *v56;
  char v57;
  WTF::StringImpl *v58;
  char v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unsigned __int8 v62[8];
  WTF::StringImpl *v63;
  int v64;
  _BYTE v65[24];
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v8 = 0;
    v15 = 1;
    goto LABEL_15;
  }
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195503A4CLL);
  }
  v8 = v5 - 288;
  v9 = (_DWORD *)(v5 - 264);
  *(_DWORD *)(v5 - 264) += 2;
  if (!WebCore::Document::isFullyActive((WebCore::Document *)(v5 - 288))
    || (v10 = *(_QWORD *)(v5 + 240)) == 0
    || (v11 = *(_QWORD *)(v10 + 8)) == 0
    || (v12 = *(_QWORD *)(v11 + 24)) == 0
    || !*(_QWORD *)(v12 + 8))
  {
    v15 = 0;
LABEL_15:
    v16 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v59 = 31;
    v61 = 0;
    v62[0] = 31;
    v17 = v60;
    if (v60)
      *(_DWORD *)v60 += 2;
    v63 = v17;
    WebCore::DeferredPromise::reject(v16, v62, 0, &v61);
    v19 = v63;
    v63 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    result = (unsigned int *)v60;
    v60 = 0;
    if (result)
    {
      if (*result == 2)
      {
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
        if ((v15 & 1) != 0)
          return result;
        goto LABEL_24;
      }
      *result -= 2;
    }
    if ((v15 & 1) != 0)
      return result;
    goto LABEL_24;
  }
  if ((WebCore::PermissionsPolicy::isFeatureEnabled(7u, (_QWORD *)(v5 - 288), 1) & 1) != 0)
  {
    if ((WebCore::Document::visibilityState((WebCore::Document *)(v5 - 288)) & 1) != 0)
    {
      v14 = *(WebCore::LocalDOMWindow **)(v5 + 408);
      if (v14)
        hasTransientActivation = WebCore::LocalDOMWindow::hasTransientActivation(v14);
      else
        hasTransientActivation = 0;
      {
        if (WebCore::sharedController(void)::controller)
        {
LABEL_55:
          v32 = WebCore::sharedController(void)::controller;
          WebCore::Document::topOrigin((WebCore::Document *)(v5 - 288), v13);
          v62[0] = 0;
          v64 = -1;
          v35 = *(unsigned int *)(v33 + 32);
          if ((_DWORD)v35 != -1)
          {
            ((void (*)(WTF **, unsigned __int8 *, uint64_t))off_1E33667F0[v35])(&v61, v62, v33 + 8);
            v64 = v35;
          }
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), v34);
          v65[0] = 0;
          v66 = -1;
          v37 = *(unsigned int *)(v36 + 32);
          if ((_DWORD)v37 != -1)
          {
            ((void (*)(WTF **, _BYTE *, uint64_t))off_1E33667F0[v37])(&v61, v65, v36 + 8);
            v66 = v37;
          }
          v38 = *(_QWORD *)(v5 + 240);
          if (v38 && (v39 = *(_QWORD *)(v38 + 8)) != 0 && (v40 = *(_QWORD *)(v39 + 24)) != 0)
            v41 = *(_QWORD *)(v40 + 8);
          else
            v41 = 0;
          v42 = *(_QWORD *)(v41 + 16);
          if (v42)
            goto LABEL_89;
          v42 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v42 = 1;
          *(_QWORD *)(v42 + 8) = v41;
          v44 = *(unsigned int **)(v41 + 16);
          *(_QWORD *)(v41 + 16) = v42;
          if (!v44)
            goto LABEL_89;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, v44);
            WTF::fastFree((WTF *)v44, v43);
          }
          v42 = *(_QWORD *)(v41 + 16);
          if (v42)
          {
LABEL_89:
            do
              v47 = __ldaxr((unsigned int *)v42);
            while (__stlxr(v47 + 1, (unsigned int *)v42));
          }
          v61 = (WTF *)v42;
          ++*(_DWORD *)(a1 + 16);
          *v9 += 2;
          v48 = *a3;
          *a3 = 0;
          v49 = WTF::fastMalloc((WTF *)0x38);
          *(_QWORD *)v49 = &off_1E3366820;
          *(_QWORD *)(v49 + 8) = a1;
          *(_QWORD *)(v49 + 16) = a1;
          *(_QWORD *)(v49 + 24) = v8;
          *(_BYTE *)(v49 + 32) = hasTransientActivation;
          *(_QWORD *)(v49 + 40) = v48;
          *(_BYTE *)(v49 + 48) = a2;
          v54 = v49;
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **, _QWORD, uint64_t *))(*(_QWORD *)v32 + 16))(v32, v62, 13, &v61, 0, &v54);
          v50 = v54;
          v54 = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          result = (unsigned int *)v61;
          v61 = 0;
          if (result)
          {
            do
            {
              v51 = __ldaxr(result);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, result));
            if (!v52)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
            }
          }
          if (v66 != -1)
            result = (unsigned int *)((uint64_t (*)(WTF **, _BYTE *))off_1E3366768[v66])(&v61, v65);
          v66 = -1;
          if (v64 != -1)
            result = (unsigned int *)((uint64_t (*)(WTF **, unsigned __int8 *))off_1E3366768[v64])(&v61, v62);
          goto LABEL_24;
        }
      }
      else
      {
        WebCore::sharedController(void)::controller = 0;
      }
      v27 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)(v27 + 8) = 1;
      *(_QWORD *)v27 = off_1E3365088;
      v28 = (unsigned int *)WebCore::sharedController(void)::controller;
      WebCore::sharedController(void)::controller = v27;
      if (v28)
      {
        v29 = v28 + 2;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
        }
      }
      goto LABEL_55;
    }
    v24 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v55 = 31;
    v61 = 0;
    v62[0] = 31;
    v25 = v56;
    if (v56)
      *(_DWORD *)v56 += 2;
    v63 = v25;
    WebCore::DeferredPromise::reject(v24, v62, 0, &v61);
    v26 = v63;
    v63 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v18);
      else
        *(_DWORD *)v26 -= 2;
    }
    result = (unsigned int *)v56;
    v56 = 0;
    if (!result)
      goto LABEL_24;
  }
  else
  {
    v21 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57 = 31;
    v61 = 0;
    v62[0] = 31;
    v22 = v58;
    if (v58)
      *(_DWORD *)v58 += 2;
    v63 = v22;
    WebCore::DeferredPromise::reject(v21, v62, 0, &v61);
    v23 = v63;
    v63 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v18);
      else
        *(_DWORD *)v23 -= 2;
    }
    result = (unsigned int *)v58;
    v58 = 0;
    if (!result)
      goto LABEL_24;
  }
  if (*result == 2)
    result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
  else
    *result -= 2;
LABEL_24:
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v8, v18);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return result;
}

void WebCore::WakeLockManager::~WakeLockManager(WebCore::WakeLockManager *this)
{
  void *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 2) + 1912, this);
  v3 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    {
      if (WebCore::sleepDisablerClient(void)::client)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)v3 + 1), *((_QWORD *)v3 + 3), *((_QWORD *)v3 + 4));
    }
    else
    {
      WebCore::sleepDisablerClient(void)::client = 0;
    }
    v4 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WTF::fastFree(v3, v2);
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
    WTF::HashTable<WebCore::WakeLockType,WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::WakeLockType>,WTF::HashMap<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::WakeLockType>,WTF::StrongEnumHashTraits<WebCore::WakeLockType>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::WakeLockType>>::deallocateTable(v5, v2);
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::WakeLockManager::~WakeLockManager(this);
  WTF::fastFree(v1, v2);
}

_QWORD *WebCore::WakeLockManager::removeWakeLock(_QWORD *this, WebCore::WakeLockSentinel *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::WakeLockSentinel **v16;
  uint64_t v17;
  WebCore::WakeLockSentinel *v18;
  WebCore::WakeLockSentinel **v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v27;
  void *v28;
  bmalloc::api *v29;
  void *v30;

  v3 = this + 3;
  v2 = this[3];
  if (v2)
  {
    v5 = this;
    v6 = *((unsigned __int8 *)a2 + 56);
    v7 = *(_DWORD *)(v2 - 8);
    v8 = 9 * ((~(v6 << 15) + v6) ^ ((~(v6 << 15) + v6) >> 10));
    v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
    v10 = v7 & (v9 ^ HIWORD(v9));
    v11 = (unsigned __int8 *)(v2 + 24 * v10);
    v12 = *v11;
    if (v12 != v6)
    {
      v13 = 1;
      while (v12 != 255)
      {
        v10 = (v10 + v13) & v7;
        v11 = (unsigned __int8 *)(v2 + 24 * v10);
        v12 = *v11;
        ++v13;
        if (v12 == v6)
          goto LABEL_8;
      }
      v11 = (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
    }
LABEL_8:
    v14 = *(_DWORD *)(v2 - 4);
    if (v11 != (unsigned __int8 *)(v2 + 24 * v14))
    {
      v15 = *((unsigned int *)v11 + 5);
      if (!(_DWORD)v15)
        goto LABEL_21;
      v16 = (WebCore::WakeLockSentinel **)*((_QWORD *)v11 + 1);
      if (*v16 != a2)
      {
        v17 = 0;
        while (v15 - 1 != v17)
        {
          v18 = v16[++v17];
          if (v18 == a2)
            goto LABEL_16;
        }
        return this;
      }
      v17 = 0;
LABEL_16:
      v19 = &v16[v17];
      *v19 = 0;
      if (*((_DWORD *)a2 + 6) == 1)
      {
        WebCore::EventTarget::~EventTarget((WebCore::WakeLockSentinel *)((char *)a2 + 32), a2);
        WebCore::ActiveDOMObject::~ActiveDOMObject(a2, v28);
        bmalloc::api::isoDeallocate(v29, v30);
        v15 = *((unsigned int *)v11 + 5);
      }
      else
      {
        --*((_DWORD *)a2 + 6);
      }
      this = memmove(v19, v19 + 1, *((_QWORD *)v11 + 1) + 8 * v15 - (_QWORD)(v19 + 1));
      v20 = *((_DWORD *)v11 + 5) - 1;
      *((_DWORD *)v11 + 5) = v20;
      if (!v20)
      {
        v2 = *v3;
        if (!*v3)
          goto LABEL_22;
        v14 = *(_DWORD *)(v2 - 4);
LABEL_21:
        v2 += 24 * v14;
        if ((unsigned __int8 *)v2 == v11)
        {
LABEL_32:
          if (!*((_BYTE *)a2 + 56))
          {
            v26 = (WTF *)v5[4];
            v5[4] = 0;
            if (v26)
            {
              {
                if (WebCore::sleepDisablerClient(void)::client)
                  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                          + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)v26 + 1), *((_QWORD *)v26 + 3), *((_QWORD *)v26 + 4));
              }
              else
              {
                WebCore::sleepDisablerClient(void)::client = 0;
              }
              v27 = *(_QWORD *)v26;
              *(_QWORD *)v26 = 0;
              if (v27)
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
              return (_QWORD *)WTF::fastFree(v26, a2);
            }
          }
          return this;
        }
LABEL_22:
        if ((unsigned __int8 *)v2 != v11)
        {
          *v11 = -2;
          this = (_QWORD *)*((_QWORD *)v11 + 1);
          if (this)
          {
            *((_QWORD *)v11 + 1) = 0;
            *((_DWORD *)v11 + 4) = 0;
            this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
          }
          ++*(_DWORD *)(*v3 - 16);
          v21 = *v3;
          if (*v3)
            v22 = *(_DWORD *)(v21 - 12) - 1;
          else
            v22 = -1;
          *(_DWORD *)(v21 - 12) = v22;
          v23 = *v3;
          if (*v3)
          {
            v24 = 6 * *(_DWORD *)(v23 - 12);
            v25 = *(_DWORD *)(v23 - 4);
            if (v24 < v25 && v25 >= 9)
              this = WTF::HashTable<WebCore::WakeLockType,WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::WakeLockType>,WTF::HashMap<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::WakeLockType>,WTF::StrongEnumHashTraits<WebCore::WakeLockType>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::WakeLockType>>::rehash(v3, v25 >> 1, 0);
          }
        }
        goto LABEL_32;
      }
    }
  }
  return this;
}

uint64_t WebCore::WakeLockManager::visibilityStateChanged(WebCore::Document **this)
{
  uint64_t result;

  result = WebCore::Document::visibilityState(this[2]);
  if ((result & 1) == 0)
    return WebCore::WakeLockManager::releaseAllLocks((uint64_t)this, 0);
  return result;
}

uint64_t WebCore::WakeLockManager::releaseAllLocks(uint64_t result, int a2)
{
  uint64_t v2;
  WebCore::WakeLockManager *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  _DWORD *v11;
  void *v12;
  void *v13;
  bmalloc::api *v14;
  void *v15;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v3 = (WebCore::WakeLockManager *)result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = v4 & (v6 ^ HIWORD(v6));
    v8 = (unsigned __int8 *)(v2 + 24 * v7);
    v9 = *v8;
    if (v9 != a2)
    {
      v10 = 1;
      while (v9 != 255)
      {
        v7 = (v7 + v10) & v4;
        v8 = (unsigned __int8 *)(v2 + 24 * v7);
        v9 = *v8;
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
    }
LABEL_8:
    if (v8 != (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4)))
    {
      while (*((_DWORD *)v8 + 5))
      {
        v11 = (_DWORD *)**((_QWORD **)v8 + 1);
        if (v11)
          ++v11[6];
        result = (uint64_t)WebCore::WakeLockSentinel::release((WebCore::WakeLockSentinel *)v11, v3);
        if (v11[6] == 1)
        {
          WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v11 + 8), v12);
          WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v11, v13);
          result = bmalloc::api::isoDeallocate(v14, v15);
        }
        else
        {
          --v11[6];
        }
      }
    }
  }
  return result;
}

WebCore *WebCore::WakeLockSentinel::release(WebCore::WakeLockSentinel *this, WebCore::WakeLockManager *a2)
{
  WebCore *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::EventTarget *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;

  result = (WebCore *)WebCore::WakeLockManager::removeWakeLock(a2, this);
  *((_BYTE *)this + 57) = 1;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (!*(_BYTE *)(v5 + 180))
      {
        v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
          v7 = WebCore::threadGlobalDataSlow(result);
        v8 = (WebCore::WakeLockSentinel *)((char *)this + 32);
        v9 = *(_QWORD *)(v7 + 40);
        if (!v9)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
          v9 = *(_QWORD *)(v7 + 40);
        }
        v10 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
        *(_QWORD *)v10 = off_1E33A4B48;
        *(_QWORD *)(v10 + 8) = 0;
        v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200;
        v13 = *(_QWORD *)(v9 + 1648) != 0;
        *(_DWORD *)(v10 + 16) = 1;
        *(_DWORD *)(v10 + 20) = v12 | v13;
        v14 = *(_DWORD **)(v9 + 1648);
        if (v14)
          *v14 += 2;
        *(_QWORD *)(v10 + 24) = v14;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = 0;
        *(_QWORD *)(v10 + 48) = 0;
        *(_QWORD *)(v10 + 56) = v11;
        *(_QWORD *)(v10 + 64) = 0;
        result = WebCore::EventTarget::dispatchEvent(v8, (WebCore::Event *)v10);
        if (*(_DWORD *)(v10 + 16) == 1)
          return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        else
          --*(_DWORD *)(v10 + 16);
      }
    }
  }
  return result;
}

uint64_t WebCore::WakeLockSentinel::release(uint64_t this, uint64_t *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WebCore::WakeLockManager *v7;
  WebCore::WakeLockManager *v8;
  WTF *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  bmalloc::api *v17;
  void *v18;
  _BYTE v19[24];

  if (!*(_BYTE *)(this + 57))
  {
    v3 = (_DWORD *)this;
    v4 = *(_QWORD *)(this + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x195504254);
        }
        v6 = (_DWORD *)(v5 - 264);
        *(_DWORD *)(v5 - 264) += 2;
        ++*(_DWORD *)(this + 24);
        v7 = *(WebCore::WakeLockManager **)(v5 + 2904);
        if (!v7)
        {
          v7 = (WebCore::WakeLockManager *)WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v7 = off_1E33665A0;
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 3) = 0;
          *((_QWORD *)v7 + 4) = 0;
          *((_QWORD *)v7 + 2) = v5 - 288;
          WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v5 + 1624, v7, (uint64_t)v19);
          v8 = *(WebCore::WakeLockManager **)(v5 + 2904);
          *(_QWORD *)(v5 + 2904) = v7;
          if (v8)
          {
            WebCore::WakeLockManager::~WakeLockManager(v8);
            WTF::fastFree(v9, v10);
            v7 = *(WebCore::WakeLockManager **)(v5 + 2904);
          }
        }
        this = (uint64_t)WebCore::WakeLockSentinel::release((WebCore::WakeLockSentinel *)v3, v7);
        if (v3[6] == 1)
        {
          WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v3 + 8), v11);
          WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v3, v16);
          this = bmalloc::api::isoDeallocate(v17, v18);
        }
        else
        {
          --v3[6];
        }
        if (*v6 == 2)
        {
          if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v11);
        }
        else
        {
          *v6 -= 2;
        }
      }
    }
  }
  v12 = *a2;
  v13 = *(_QWORD *)(v12 + 24);
  if (v13 && *(_QWORD *)v13 && (*(_BYTE *)(v13 + 8) & 3) == 0)
  {
    v14 = *(_QWORD *)(v12 + 32);
    if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
      v15 = 0;
    else
      v15 = *(uint64_t **)v14;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v12, v15, 0, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v19);
  }
  return this;
}

uint64_t WebCore::WakeLockSentinel::scriptExecutionContext(WebCore::WakeLockSentinel *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

BOOL WebCore::WakeLockSentinel::virtualHasPendingActivity(WebCore::WakeLockSentinel *this)
{
  return *((_BYTE *)this + 58) && *((_BYTE *)this + 57) == 0;
}

WebCore::EventNames **WebCore::WakeLockSentinel::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[6];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 1648);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 58) = v6;
  return this;
}

WebCore::EventNames **`non-virtual thunk to'WebCore::WakeLockSentinel::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 1648);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 26) = v6;
  return this;
}

void WebCore::LocalDOMWindowSpeechSynthesis::~LocalDOMWindowSpeechSynthesis(WebCore::LocalDOMWindowSpeechSynthesis *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33665C8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 64))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33665C8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 64))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::LocalDOMWindowSpeechSynthesis::from(WebCore::LocalDOMWindowSpeechSynthesis *this, WebCore::DOMWindow *a2)
{
  uint64_t v3;
  const char **v4;
  unsigned int *v5;
  WebCore::LocalDOMWindowSpeechSynthesis *v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  unsigned int v10;
  unsigned __int8 *v11;
  const char *v12[3];
  const char *v13[2];

  if (!this || *((_BYTE *)this + 56))
    return 0;
  ++*((_DWORD *)this + 6);
  v12[0] = "LocalDOMWindowSpeechSynthesis";
  v12[1] = (const char *)30;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 10, v12);
  if (!v4 || (v3 = (uint64_t)v4[2]) == 0)
  {
    v3 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v3 = &unk_1E3353630;
    if (*((_BYTE *)this + 56))
    {
      v5 = 0;
    }
    else
    {
      v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
      if (v5)
      {
        do
          v10 = __ldaxr(v5);
        while (__stlxr(v10 + 1, v5));
      }
    }
    *(_QWORD *)v3 = off_1E33665C8;
    *(_QWORD *)(v3 + 8) = v5;
    *(_QWORD *)(v3 + 16) = 0;
    if (*((_BYTE *)this + 56))
      v6 = 0;
    else
      v6 = this;
    if (v6)
      v7 = (uint64_t *)((char *)v6 + 80);
    else
      v7 = 0;
    v11 = (unsigned __int8 *)v3;
    v13[0] = "LocalDOMWindowSpeechSynthesis";
    v13[1] = (const char *)30;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v7, v13, &v11, (uint64_t)v12);
    v8 = v11;
    v11 = 0;
    if (v8)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::LocalDOMWindowSpeechSynthesis *))(*(_QWORD *)this + 72))(this);
  else
    --*((_DWORD *)this + 6);
  return v3;
}

uint64_t WebCore::LocalDOMWindowSpeechSynthesis::speechSynthesis(WebCore::LocalDOMWindowSpeechSynthesis *this, WebCore::DOMWindow *a2)
{
  WebCore::LocalDOMWindowSpeechSynthesis *v2;

  v2 = (WebCore::LocalDOMWindowSpeechSynthesis *)WebCore::LocalDOMWindowSpeechSynthesis::from(this, a2);
  return WebCore::LocalDOMWindowSpeechSynthesis::speechSynthesis(v2);
}

uint64_t WebCore::LocalDOMWindowSpeechSynthesis::speechSynthesis(WebCore::LocalDOMWindowSpeechSynthesis *this)
{
  WebCore::SpeechSynthesis *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  WebCore::SpeechSynthesis *v11;
  _DWORD *v12;
  uint64_t result;

  v1 = (WebCore::SpeechSynthesis *)*((_QWORD *)this + 2);
  if (v1)
    return (uint64_t)v1;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  if (!*(_BYTE *)(v6 + 178))
  {
    v7 = *(_QWORD *)(v6 + 240);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 296);
        if (v9)
        {
          v10 = (WebCore::ScriptExecutionContext *)(v9 + 192);
          v1 = (WebCore::SpeechSynthesis *)bmalloc::api::isoAllocate();
          v11 = WebCore::SpeechSynthesis::SpeechSynthesis(v1, v10);
          WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v11 + 4);
          v12 = (_DWORD *)*((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v1;
          if (v12)
          {
            if (v12[6] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 64))(v12);
              return *((_QWORD *)this + 2);
            }
            else
            {
              --v12[6];
            }
          }
          return (uint64_t)v1;
        }
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::SpeechRecognition::SpeechRecognition(WebCore::SpeechRecognition *this, WebCore::Document *a2)
{
  uint64_t v4;
  WebCore::Document *v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  *((_QWORD *)this + 1) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E3366788;
  v4 = *((_QWORD *)a2 + 88);
  v5 = a2;
  if (v4)
  {
    v6 = *(WebCore::Document **)(v4 + 8);
    if (v6)
      v5 = v6;
    else
      v5 = a2;
  }
  *((_QWORD *)this + 3) = &off_1E33A18C0;
  *((_QWORD *)this + 4) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::SpeechRecognition *)((char *)this + 24), (WebCore::Document *)((char *)v5 + 192));
  *((_QWORD *)this + 3) = &off_1E33A0540;
  *((_QWORD *)this + 5) = 0;
  if (*((_BYTE *)v5 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v15 = (uint64_t)this + 24;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v5 + 40, &v15, (uint64_t)&v14);
    *((_DWORD *)this + 12) = 1;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *(_QWORD *)this = off_1E33665E8;
    *((_QWORD *)this + 3) = &unk_1E33666A8;
    *((_QWORD *)this + 7) = &unk_1E3366700;
    *((_QWORD *)this + 8) = 0;
    *((_WORD *)this + 44) = 0;
    *((_QWORD *)this + 12) = 1;
    *((_DWORD *)this + 26) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 14) = 0;
    v7 = *((_QWORD *)a2 + 66);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 280) + 16))(*(_QWORD *)(v10 + 280));
            ++v11[2];
            v12 = (_DWORD *)*((_QWORD *)this + 16);
            *((_QWORD *)this + 16) = v11;
            if (v12)
            {
              if (v12[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
                v11 = (_DWORD *)*((_QWORD *)this + 16);
              }
              else
              {
                --v12[2];
              }
            }
            (*(void (**)(_DWORD *, WebCore::SpeechRecognition *))(*(_QWORD *)v11 + 16))(v11, this);
          }
        }
      }
    }
    return (uint64_t)this;
  }
  return result;
}

uint64_t WebCore::SpeechRecognition::suspend(uint64_t result)
{
  uint64_t v1;

  if ((*(_DWORD *)(result + 104) | 4) != 4)
  {
    v1 = result;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 128) + 48))(*(_QWORD *)(result + 128), *(_QWORD *)(result + 8));
    *(_DWORD *)(v1 + 104) = 4;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognition::suspend(uint64_t result)
{
  uint64_t v1;

  if ((*(_DWORD *)(result + 80) | 4) != 4)
  {
    v1 = result;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 104) + 48))(*(_QWORD *)(result + 104), *(_QWORD *)(result - 16));
    *(_DWORD *)(v1 + 80) = 4;
  }
  return result;
}

unsigned int *WebCore::SpeechRecognition::startRecognition@<X0>(WebCore::SpeechRecognition *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *result;
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int *v30;
  WTF::StringImpl *v31;
  int v32;
  _BYTE v33[24];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 26))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 8;
LABEL_3:
    *(_BYTE *)a2 = v4;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }
  if (!*((_QWORD *)this + 16))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = 24;
    goto LABEL_3;
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v8 = v7 - 96;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(v8 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195504D20);
  }
  v9 = (WebCore::Node *)(v8 - 192);
  *(_DWORD *)(v8 - 168) += 2;
  v10 = *(_QWORD *)(v8 + 336);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if ((WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v8 - 192), 0) & 1) != 0)
    {
      v15 = *((_QWORD *)this + 16);
      v28 = *((_QWORD *)this + 1);
      v16 = *((unsigned __int8 *)this + 88);
      v17 = *((unsigned __int8 *)this + 89);
      v27 = *((_QWORD *)this + 12);
      WebCore::Document::topOrigin((WebCore::Document *)(v8 - 192), v14);
      LOBYTE(v30) = 0;
      v32 = -1;
      v20 = *(unsigned int *)(v18 + 32);
      if ((_DWORD)v20 != -1)
      {
        ((void (*)(char *, unsigned int **, uint64_t))off_1E33667F0[v20])(&v29, &v30, v18 + 8);
        v32 = v20;
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v8, v19);
      v33[0] = 0;
      v34 = -1;
      v22 = *(unsigned int *)(v21 + 32);
      if ((_DWORD)v22 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E33667F0[v22])(&v29, v33, v21 + 8);
        v34 = v22;
      }
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, char *, BOOL, BOOL, uint64_t, unsigned int **))(*(_QWORD *)v15 + 32))(v15, v28, (char *)this + 80, v16 != 0, v17 != 0, v27, &v30);
      if (v34 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E3366768[v34])(&v29, v33);
      v34 = -1;
      if (v32 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, unsigned int **))off_1E3366768[v32])(&v29, &v30);
      *((_DWORD *)this + 26) = 1;
      v9 = (WebCore::Node *)(v8 - 192);
    }
    else
    {
      LOBYTE(v30) = 4;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::SpeechRecognition::didError((uint64_t)this, (WTF::StringImpl *)&v30);
      result = (unsigned int *)v31;
      v31 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
        else
          *result -= 2;
      }
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    do
    {
      v24 = __ldaxr(v12);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v12));
    if (!v25)
    {
      atomic_store(1u, v12);
      v26 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v26 = off_1E31FE290;
      *((_QWORD *)v26 + 1) = v12;
      v30 = v26;
      WTF::ensureOnMainThread();
      result = v30;
      v30 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 24;
    *(_BYTE *)(a2 + 16) = 1;
  }
  if (*(_DWORD *)(v8 - 168) == 2)
  {
    if ((*(_WORD *)(v8 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v9, v23);
  }
  else
  {
    *(_DWORD *)(v8 - 168) -= 2;
  }
  return result;
}

uint64_t WebCore::SpeechRecognition::scriptExecutionContext(WebCore::SpeechRecognition *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

_DWORD *WebCore::SpeechRecognition::didError(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *result;
  _DWORD *v18;

  v3 = a1;
  if (*(_DWORD *)(a1 + 120))
  {
    v4 = *(unsigned int *)(a1 + 124);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)(a1 + 112);
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
          WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v7, a2);
        ++v5;
        v6 -= 8;
      }
      while (v6);
      *(_DWORD *)(v3 + 124) = 0;
    }
    a1 = *(_QWORD *)(v3 + 112);
    if (a1)
    {
      *(_QWORD *)(v3 + 112) = 0;
      *(_DWORD *)(v3 + 120) = 0;
      a1 = WTF::fastFree((WTF *)a1, a2);
    }
  }
  *(_DWORD *)(v3 + 104) = 0;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = *(_BYTE *)a2;
  v12 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
  *(_QWORD *)(v12 + 8) = 0;
  v14 = *(_DWORD *)(v12 + 20) & 0xFFC00000 | 0x2C8200 | (*(_QWORD *)(v10 + 784) != 0);
  *(_DWORD *)(v12 + 16) = 1;
  *(_DWORD *)(v12 + 20) = v14;
  v15 = *(_DWORD **)(v10 + 784);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(v12 + 24) = v15;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = v13;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)v12 = off_1E3366A90;
  *(_BYTE *)(v12 + 72) = v11;
  v16 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(v12 + 80) = v16;
  v18 = (_DWORD *)v12;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v3 + 24), v3 + 56, 18, (uint64_t *)&v18);
  result = v18;
  if (v18)
  {
    if (v18[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8))();
    else
      --v18[4];
  }
  return result;
}

WebCore::Page *WebCore::SpeechRecognition::stop(WebCore::SpeechRecognition *this)
{
  WebCore::Page *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  unsigned int v7;
  unsigned int v8;

  if ((*((_DWORD *)this + 26) | 4) != 4)
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 16) + 48))(*((_QWORD *)this + 16), *((_QWORD *)this + 1));
    *((_DWORD *)this + 26) = 4;
  }
  result = (WebCore::Page *)*((_QWORD *)this + 16);
  if (result)
  {
    (*(void (**)(WebCore::Page *, WebCore::SpeechRecognition *))(*(_QWORD *)result + 24))(result, this);
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v4 = v5 - 96;
      else
        v4 = 0;
    }
    if (*(_BYTE *)(v4 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x195505010);
    }
    result = *(WebCore::Page **)(v4 + 2488);
    if (result && *((_QWORD *)result + 1))
    {
      v6 = (WebCore::Document *)(v4 - 192);
      *(_QWORD *)(v4 + 2488) = 0;
      do
      {
        v7 = __ldaxr((unsigned int *)result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)result));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)result);
        WTF::fastFree(result, v3);
      }
      return WebCore::Document::updateIsPlayingMedia(v6);
    }
  }
  return result;
}

WebCore::Page *`non-virtual thunk to'WebCore::SpeechRecognition::stop(WebCore::SpeechRecognition *this)
{
  WebCore::Page *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  unsigned int v7;
  unsigned int v8;

  if ((*((_DWORD *)this + 20) | 4) != 4)
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), *((_QWORD *)this - 2));
    *((_DWORD *)this + 20) = 4;
  }
  result = (WebCore::Page *)*((_QWORD *)this + 13);
  if (result)
  {
    (*(void (**)(WebCore::Page *, char *))(*(_QWORD *)result + 24))(result, (char *)this - 24);
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v4 = v5 - 96;
      else
        v4 = 0;
    }
    if (*(_BYTE *)(v4 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1955050FCLL);
    }
    result = *(WebCore::Page **)(v4 + 2488);
    if (result && *((_QWORD *)result + 1))
    {
      v6 = (WebCore::Document *)(v4 - 192);
      *(_QWORD *)(v4 + 2488) = 0;
      do
      {
        v7 = __ldaxr((unsigned int *)result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)result));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)result);
        WTF::fastFree(result, v3);
      }
      return WebCore::Document::updateIsPlayingMedia(v6);
    }
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didStart(WebCore::SpeechRecognition *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  _DWORD *result;
  _DWORD *v11;

  if (*((_DWORD *)this + 26) == 1)
    *((_DWORD *)this + 26) = 2;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 1960) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 1960);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  v11 = (_DWORD *)v5;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this + 56, 18, (uint64_t *)&v11);
  result = v11;
  if (v11)
  {
    if (v11[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --v11[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didStartCapturingAudio(WebCore::SpeechRecognition *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  _DWORD *v12;
  _DWORD *result;
  _DWORD *v14;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v2 = v3 - 96;
    else
      v2 = 0;
  }
  if (*(_BYTE *)(v2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195505394);
  }
  v4 = WebCore::Document::setActiveSpeechRecognition((WebCore::Page *)(v2 - 192), this);
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(v4);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  v8 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)v8 = off_1E33A4B48;
  *(_QWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1E8200;
  v11 = *(_QWORD *)(v7 + 168) != 0;
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v10 | v11;
  v12 = *(_DWORD **)(v7 + 168);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(v8 + 24) = v12;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = 0;
  v14 = (_DWORD *)v8;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this + 56, 18, (uint64_t *)&v14);
  result = v14;
  if (v14)
  {
    if (v14[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 8))();
    else
      --v14[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didStartCapturingSound(WebCore::SpeechRecognition *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  _DWORD *result;
  _DWORD *v11;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 1880) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 1880);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  v11 = (_DWORD *)v5;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this + 56, 18, (uint64_t *)&v11);
  result = v11;
  if (v11)
  {
    if (v11[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --v11[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didStartCapturingSpeech(WebCore::SpeechRecognition *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  _DWORD *result;
  _DWORD *v11;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 1920) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 1920);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  v11 = (_DWORD *)v5;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this + 56, 18, (uint64_t *)&v11);
  result = v11;
  if (v11)
  {
    if (v11[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --v11[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didStopCapturingSpeech(WebCore::SpeechRecognition *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  _DWORD *result;
  _DWORD *v11;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 1912) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 1912);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  v11 = (_DWORD *)v5;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this + 56, 18, (uint64_t *)&v11);
  result = v11;
  if (v11)
  {
    if (v11[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --v11[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didStopCapturingSound(WebCore::SpeechRecognition *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  _DWORD *result;
  _DWORD *v11;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 1872) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 1872);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  v11 = (_DWORD *)v5;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this + 56, 18, (uint64_t *)&v11);
  result = v11;
  if (v11)
  {
    if (v11[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --v11[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didStopCapturingAudio(WebCore::SpeechRecognition *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *updated;
  WebCore::Document *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  _DWORD *v16;
  _DWORD *result;
  _DWORD *v18;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v3 = v4 - 96;
    else
      v3 = 0;
  }
  if (*(_BYTE *)(v3 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195505994);
  }
  updated = *(WebCore::Page **)(v3 + 2488);
  if (updated && *((_QWORD *)updated + 1))
  {
    v6 = (WebCore::Document *)(v3 - 192);
    *(_QWORD *)(v3 + 2488) = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)updated);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)updated));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)updated);
      WTF::fastFree(updated, a2);
    }
    updated = WebCore::Document::updateIsPlayingMedia(v6);
  }
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(updated);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v12 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
  *(_QWORD *)v12 = off_1E33A4B48;
  *(_QWORD *)(v12 + 8) = 0;
  v14 = *(_DWORD *)(v12 + 20) & 0xFFC00000 | 0x1E8200;
  v15 = *(_QWORD *)(v11 + 152) != 0;
  *(_DWORD *)(v12 + 16) = 1;
  *(_DWORD *)(v12 + 20) = v14 | v15;
  v16 = *(_DWORD **)(v11 + 152);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(v12 + 24) = v16;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = v13;
  *(_QWORD *)(v12 + 64) = 0;
  v18 = (_DWORD *)v12;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this + 56, 18, (uint64_t *)&v18);
  result = v18;
  if (v18)
  {
    if (v18[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8))();
    else
      --v18[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didFindNoMatch(WebCore::SpeechRecognition *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *result;
  _DWORD *v10;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x2D0200 | (*(_QWORD *)(v4 + 1320) != 0);
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7;
  v8 = *(_DWORD **)(v4 + 1320);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)v5 = off_1E3366B58;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  v10 = (_DWORD *)v5;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 3, (uint64_t)this + 56, 18, (uint64_t *)&v10);
  result = v10;
  if (v10)
  {
    if (v10[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 8))();
    else
      --v10[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didReceiveResult(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char **v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *result;
  int v59;
  char **v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  int v65;
  _DWORD *v66;
  char *v67;
  uint64_t v68;

  v3 = a1;
  v67 = 0;
  v68 = 0;
  v4 = *(unsigned int *)(a1 + 124);
  v5 = *((unsigned int *)a2 + 3) + v4;
  if (v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195505F80);
    }
    v6 = (char *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v68) = v5;
    v67 = v6;
    v4 = *(unsigned int *)(v3 + 124);
    LODWORD(v7) = v5;
  }
  else
  {
    LODWORD(v7) = 0;
    v6 = 0;
  }
  v8 = (char **)(v3 + 112);
  if ((_DWORD)v4)
  {
    v9 = *v8;
    if (v4 <= v5)
    {
      v14 = v6;
    }
    else
    {
      v10 = v5 + (v5 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v4)
        v7 = v4;
      else
        v7 = v11;
      if (v7 >> 29)
      {
        __break(0xC471u);
LABEL_73:
        JUMPOUT(0x195505F78);
      }
      v12 = (char *)WTF::fastMalloc((WTF *)(8 * v7));
      v14 = v12;
      LODWORD(v68) = v7;
      v67 = v12;
      if (v6)
      {
        if (v12 == v6)
        {
          LODWORD(v7) = 0;
          v14 = 0;
          v67 = 0;
          LODWORD(v68) = 0;
        }
        WTF::fastFree((WTF *)v6, v13);
      }
    }
    v15 = 0;
    do
    {
      v16 = *(_DWORD **)&v9[v15];
      ++*v16;
      *(_QWORD *)&v14[v15] = v16;
      v15 += 8;
    }
    while (8 * v4 != v15);
    HIDWORD(v68) = v4;
  }
  else
  {
    v14 = v6;
  }
  v17 = *((_DWORD *)a2 + 3);
  v18 = v4;
  if (v17)
  {
    v19 = *a2;
    v62 = (uint64_t)&(*a2)[3 * v17];
    v63 = v14;
    v59 = v4;
    v60 = (char **)(v3 + 112);
    v18 = v4;
    v61 = v3;
    while (1)
    {
      v20 = *((unsigned int *)v19 + 3);
      v21 = 16 * v20;
      v64 = v18;
      v65 = *((_DWORD *)v19 + 3);
      if ((_DWORD)v20)
      {
        if (v20 >> 28)
        {
          __break(0xC471u);
          goto LABEL_73;
        }
        v22 = WTF::fastMalloc((WTF *)(16 * v20));
        v23 = (WTF *)v22;
        v24 = *((unsigned int *)v19 + 3);
        if ((_DWORD)v24)
        {
          v25 = *v19;
          v26 = *v19 + 16 * v24;
          v27 = (_QWORD *)v22;
          do
          {
            v28 = *(_DWORD **)v25;
            if (*(_QWORD *)v25)
              *v28 += 2;
            *v27 = v28;
            v27[1] = *(_QWORD *)(v25 + 8);
            v25 += 16;
            v27 += 2;
          }
          while (v25 != v26);
        }
        v29 = *((unsigned __int8 *)v19 + 16);
        v30 = WTF::fastMalloc((WTF *)(8 * v20));
        v31 = 0;
        LODWORD(v20) = 0;
        do
        {
          v32 = v20;
          v33 = *(_QWORD *)((char *)v23 + v31 + 8);
          v34 = bmalloc::api::isoAllocate();
          *(_DWORD *)v34 = 1;
          v35 = *(_QWORD *)((char *)v23 + v31);
          *(_QWORD *)((char *)v23 + v31) = 0;
          *(_QWORD *)(v34 + 8) = v35;
          *(_QWORD *)(v34 + 16) = v33;
          LODWORD(v20) = v20 + 1;
          *(_QWORD *)(v30 + 8 * v32) = v34;
          v31 += 16;
        }
        while (v21 != v31);
        v8 = v60;
        v3 = v61;
      }
      else
      {
        v30 = 0;
        v23 = 0;
        v29 = *((unsigned __int8 *)v19 + 16);
      }
      v36 = (_DWORD *)bmalloc::api::isoAllocate();
      *v36 = 1;
      *((_QWORD *)v36 + 1) = v30;
      LODWORD(v30) = v64;
      v36[4] = v65;
      v36[5] = v20;
      *((_BYTE *)v36 + 24) = v29;
      v66 = v36;
      if (v29)
      {
        v38 = *(unsigned int *)(v3 + 124);
        if ((_DWORD)v38 == *(_DWORD *)(v3 + 120))
        {
          v39 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v38 + 1, (unint64_t)&v66);
          v38 = *(unsigned int *)(v3 + 124);
          v40 = *(_QWORD *)(v3 + 112);
          v41 = *(_DWORD **)v39;
          *v41 = **(_DWORD **)v39 + 1;
          *(_QWORD *)(v40 + 8 * v38) = v41;
        }
        else
        {
          v42 = *v8;
          *v36 = 2;
          *(_QWORD *)&v42[8 * v38] = v36;
        }
        *(_DWORD *)(v3 + 124) = v38 + 1;
      }
      if (v64 == (_DWORD)v68)
      {
        v43 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v67, v64 + 1, (unint64_t)&v66);
        v30 = HIDWORD(v68);
        v44 = v67;
        v45 = *(_QWORD *)v43;
        *(_QWORD *)v43 = 0;
        v63 = v44;
        *(_QWORD *)&v44[8 * v30] = v45;
      }
      else
      {
        v46 = v66;
        v66 = 0;
        *(_QWORD *)&v63[8 * v64] = v46;
      }
      v47 = (uint64_t)v66;
      v18 = v30 + 1;
      HIDWORD(v68) = v18;
      v66 = 0;
      if (v47)
        WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v47, v37);
      if (v65)
      {
        v48 = (WTF::StringImpl **)v23;
        do
        {
          v49 = *v48;
          *v48 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v37);
            else
              *(_DWORD *)v49 -= 2;
          }
          v48 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v23)
        WTF::fastFree(v23, v37);
      v19 += 3;
      if (v19 == (uint64_t *)v62)
      {
        LODWORD(v7) = v68;
        LODWORD(v4) = v59;
        break;
      }
    }
  }
  v50 = bmalloc::api::isoAllocate();
  v51 = v50;
  *(_DWORD *)v50 = 1;
  *(_QWORD *)(v50 + 8) = v67;
  *(_DWORD *)(v50 + 16) = v7;
  *(_DWORD *)(v50 + 20) = v18;
  v52 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v52 || (v53 = *(_QWORD *)(v52 + 96)) == 0)
    v53 = WebCore::threadGlobalDataSlow((WebCore *)v50);
  v54 = *(_QWORD *)(v53 + 40);
  if (!v54)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v53);
    v54 = *(_QWORD *)(v53 + 40);
  }
  v55 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v55);
  *(_QWORD *)(v55 + 8) = 0;
  *(_DWORD *)(v55 + 16) = 1;
  *(_DWORD *)(v55 + 20) = *(_DWORD *)(v55 + 20) & 0xFFC00000 | 0x2D0200 | (*(_QWORD *)(v54 + 1712) != 0);
  v57 = *(_DWORD **)(v54 + 1712);
  if (v57)
    *v57 += 2;
  *(_QWORD *)(v55 + 24) = v57;
  *(_QWORD *)(v55 + 32) = 0;
  *(_QWORD *)(v55 + 40) = 0;
  *(_QWORD *)(v55 + 48) = 0;
  *(_QWORD *)(v55 + 56) = v56;
  *(_QWORD *)v55 = off_1E3366B58;
  *(_QWORD *)(v55 + 64) = 0;
  *(_QWORD *)(v55 + 72) = v4;
  *(_QWORD *)(v55 + 80) = v51;
  v66 = (_DWORD *)v55;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v3 + 24), v3 + 56, 18, (uint64_t *)&v66);
  result = v66;
  if (v66)
  {
    if (v66[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 8))();
    else
      --v66[4];
  }
  return result;
}

_DWORD *WebCore::SpeechRecognition::didEnd(uint64_t **this, WTF::StringImpl *a2)
{
  WebCore::SpeechRecognition *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;
  _DWORD *result;
  _DWORD *v16;

  v2 = (WebCore::SpeechRecognition *)this;
  if (*((_DWORD *)this + 30))
  {
    v3 = *((unsigned int *)this + 31);
    if ((_DWORD)v3)
    {
      v4 = this[14];
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
          WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v6, a2);
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)v2 + 31) = 0;
    }
    this = (uint64_t **)*((_QWORD *)v2 + 14);
    if (this)
    {
      *((_QWORD *)v2 + 14) = 0;
      *((_DWORD *)v2 + 30) = 0;
      this = (uint64_t **)WTF::fastFree((WTF *)this, a2);
    }
  }
  *((_DWORD *)v2 + 26) = 0;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
  *(_QWORD *)v10 = off_1E33A4B48;
  *(_QWORD *)(v10 + 8) = 0;
  v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200;
  v13 = *(_QWORD *)(v9 + 736) != 0;
  *(_DWORD *)(v10 + 16) = 1;
  *(_DWORD *)(v10 + 20) = v12 | v13;
  v14 = *(_DWORD **)(v9 + 736);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(v10 + 24) = v14;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = v11;
  *(_QWORD *)(v10 + 64) = 0;
  v16 = (_DWORD *)v10;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2 + 3, (uint64_t)v2 + 56, 18, (uint64_t *)&v16);
  result = v16;
  if (v16)
  {
    if (v16[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 8))();
    else
      --v16[4];
  }
  return result;
}

void WebCore::SpeechRecognition::~SpeechRecognition(WebCore::SpeechRecognition *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((unsigned int *)this + 31);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 14);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v7, a2);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 14);
  if (v8)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::EventTarget::~EventTarget((WebCore::SpeechRecognition *)((char *)this + 56), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::SpeechRecognition *)((char *)this + 24), v10);
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v11);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechRecognition::~SpeechRecognition(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SpeechRecognition::~SpeechRecognition(WebCore::SpeechRecognition *this, WTF::StringImpl *a2)
{
  WebCore::SpeechRecognition::~SpeechRecognition((WebCore::SpeechRecognition *)((char *)this - 24), a2);
}

{
  WebCore::SpeechRecognition::~SpeechRecognition((WebCore::SpeechRecognition *)((char *)this - 56), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechRecognition::~SpeechRecognition((WebCore::SpeechRecognition *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechRecognition::~SpeechRecognition((WebCore::SpeechRecognition *)((char *)this - 56), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

BOOL WebCore::SpeechRecognition::virtualHasPendingActivity(WebCore::SpeechRecognition *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 26) && (v1 = *((_QWORD *)this + 9), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

BOOL `non-virtual thunk to'WebCore::SpeechRecognition::virtualHasPendingActivity(WebCore::SpeechRecognition *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 20) && (v1 = *((_QWORD *)this + 6), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

void WebCore::TestReportBody::~TestReportBody(WebCore::TestReportBody *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::TestReportBody::reportBodyType(WebCore::TestReportBody *this)
{
  return 6;
}

void WebCore::WakeLockSentinel::~WakeLockSentinel(WebCore::WakeLockSentinel *this, void *a2)
{
  void *v3;

  WebCore::EventTarget::~EventTarget((WebCore::WakeLockSentinel *)((char *)this + 32), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v3);
}

{
  void *v3;
  bmalloc::api *v4;
  void *v5;

  WebCore::EventTarget::~EventTarget((WebCore::WakeLockSentinel *)((char *)this + 32), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::WakeLockSentinel::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::WakeLockSentinel::deref(_DWORD *this, void *a2)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ActiveDOMObject *)this;
  if (this[6] == 1)
  {
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(this + 8), a2);
    WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
    return (_DWORD *)bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --this[6];
  }
  return this;
}

uint64_t WebCore::WakeLockSentinel::eventTargetInterface(WebCore::WakeLockSentinel *this)
{
  return 80;
}

uint64_t WebCore::WakeLockSentinel::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::WakeLockSentinel::derefEventTarget(_DWORD *this, void *a2)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ActiveDOMObject *)this;
  if (this[6] == 1)
  {
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(this + 8), a2);
    WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
    return (_DWORD *)bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --this[6];
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WakeLockSentinel::eventTargetInterface(WebCore::WakeLockSentinel *this)
{
  return 80;
}

uint64_t `non-virtual thunk to'WebCore::WakeLockSentinel::scriptExecutionContext(WebCore::WakeLockSentinel *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void `non-virtual thunk to'WebCore::WakeLockSentinel::~WakeLockSentinel(WebCore::WakeLockSentinel *this, void *a2)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;

  v2 = (WebCore::WakeLockSentinel *)((char *)this - 32);
  WebCore::EventTarget::~EventTarget(this, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
}

{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::WakeLockSentinel *)((char *)this - 32);
  WebCore::EventTarget::~EventTarget(this, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t `non-virtual thunk to'WebCore::WakeLockSentinel::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

WebCore::EventTarget *`non-virtual thunk to'WebCore::WakeLockSentinel::derefEventTarget(WebCore::EventTarget *this, void *a2)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  if (*((_DWORD *)this - 2) == 1)
  {
    v2 = (WebCore::EventTarget *)((char *)this - 32);
    WebCore::EventTarget::~EventTarget(this, a2);
    WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
    return (WebCore::EventTarget *)bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --*((_DWORD *)this - 2);
  }
  return this;
}

uint64_t WebCore::SpeechRecognition::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

WebCore::SpeechRecognition *WebCore::SpeechRecognition::deref(WebCore::SpeechRecognition *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 12) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition(this, a2);
    return (WebCore::SpeechRecognition *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 12);
  }
  return this;
}

uint64_t WebCore::SpeechRecognition::eventTargetInterface(WebCore::SpeechRecognition *this)
{
  return 78;
}

uint64_t WebCore::SpeechRecognition::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

WebCore::SpeechRecognition *WebCore::SpeechRecognition::derefEventTarget(WebCore::SpeechRecognition *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 12) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition(this, a2);
    return (WebCore::SpeechRecognition *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 12);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognition::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognition::deref(uint64_t this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this + 24) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore::SpeechRecognition *)(this - 24), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this + 24);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognition::eventTargetInterface(WebCore::SpeechRecognition *this)
{
  return 78;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognition::scriptExecutionContext(WebCore::SpeechRecognition *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognition::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognition::derefEventTarget(uint64_t this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::SpeechRecognition::~SpeechRecognition((WebCore::SpeechRecognition *)(this - 56), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

void WebCore::WakeLock::~WakeLock(WebCore::WakeLock *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WTF::HashTable<WebCore::WakeLockType,WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::WakeLockType>,WTF::HashMap<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::WakeLockType>,WTF::StrongEnumHashTraits<WebCore::WakeLockType>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::WakeLockType>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WTF **v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  _DWORD *v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;
  WTF *v14;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(unsigned __int8 *)(a1 + 24 * i) != 254)
      {
        v5 = a1 + 24 * i;
        v6 = (WTF **)(v5 + 8);
        v7 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v7)
        {
          v8 = *v6;
          v9 = 8 * v7;
          do
          {
            v10 = *(_DWORD **)v8;
            *(_QWORD *)v8 = 0;
            if (v10)
            {
              if (v10[6] == 1)
              {
                WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v10 + 8), a2);
                WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v10, v11);
                bmalloc::api::isoDeallocate(v12, v13);
              }
              else
              {
                --v10[6];
              }
            }
            v8 = (WTF *)((char *)v8 + 8);
            v9 -= 8;
          }
          while (v9);
        }
        v14 = *v6;
        if (*v6)
        {
          *v6 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v14, a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WakeLock::request(WebCore::WakeLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  *a1 = &off_1E3366820;
  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WakeLock::request(WebCore::WakeLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E3366820;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WakeLock::request(WebCore::WakeLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::PermissionState>>::call(uint64_t a1, WTF::StringImpl *a2)
{
  __int16 v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  uint64_t v14;

  v3 = a2;
  v4 = (unint64_t)a2 >> 8;
  v5 = *(_QWORD *)(a1 + 8);
  if (a2 != 2 && BYTE1(a2) != 0)
  {
    if (a2 != 1)
    {
LABEL_14:
      v7 = v4;
      goto LABEL_15;
    }
    LOBYTE(v7) = 0;
LABEL_13:
    *(_BYTE *)(v5 + 20) = v7;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = 0;
    LOBYTE(v7) = 1;
LABEL_12:
    LOWORD(v4) = 1;
    goto LABEL_13;
  }
  v7 = 1;
  if (*(_BYTE *)(v5 + 20))
  {
    v3 = 0;
    goto LABEL_12;
  }
  v3 = 1;
LABEL_15:
  v8 = WebCore::Document::eventLoop(*(WebCore::Document **)(a1 + 24), a2);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE *)(a1 + 48);
  v13 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E3366848;
  *(_OWORD *)(v11 + 8) = v13;
  *(_QWORD *)(v11 + 24) = v9;
  *(_BYTE *)(v11 + 32) = v10;
  *(_WORD *)(v11 + 33) = v3 | (v7 << 8);
  v14 = v11;
  WebCore::EventLoopTaskGroup::queueTask(v8, 17, &v14);
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WakeLock::request(WebCore::WakeLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(std::optional<WebCore::PermissionState>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  *a1 = &off_1E3366848;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WakeLock::request(WebCore::WakeLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(std::optional<WebCore::PermissionState>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E3366848;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

WebCore::WakeLockManager *WTF::Detail::CallableWrapper<WebCore::WakeLock::request(WebCore::WakeLockType,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(std::optional<WebCore::PermissionState>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  BOOL v2;
  WebCore::Document *v3;
  char v4;
  uint64_t v5;
  WebCore::ContextDestructionObserver *v6;
  WebCore::WakeLockManager *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  WebCore::WakeLockManager *v37;
  int v38;
  WTF *v39;
  WebCore::WakeLockManager *v40;
  int v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  void *v46;
  bmalloc::api *v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t *v63;
  int8x16_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t IdentifierInternal;
  WTF::StringImpl *v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  PAL::SleepDisablerCocoa *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  int v78;
  int v79;
  int8x16_t v80;
  int8x16_t v81;
  WTF::StringImpl *v82;
  objc_class *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;

  if (*(_BYTE *)(a1 + 34))
    v2 = *(_BYTE *)(a1 + 33) == 1;
  else
    v2 = 0;
  if (v2)
  {
    v27 = *(_QWORD *)(a1 + 24);
LABEL_27:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v83 = 0;
    LOBYTE(v84) = 31;
    if (v82)
      *(_DWORD *)v82 += 2;
    v85 = v82;
    WebCore::DeferredPromise::reject(v27, (unsigned __int8 *)&v84, 0, &v83);
    v29 = v85;
    v85 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    result = v82;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        return (WebCore::WakeLockManager *)WTF::StringImpl::destroy(v82, v28);
      else
        *(_DWORD *)v82 -= 2;
    }
    return result;
  }
  if ((WebCore::Document::isFullyActive(*(WebCore::Document **)(a1 + 16)) & 1) == 0)
  {
    v27 = *(_QWORD *)(a1 + 24);
    goto LABEL_27;
  }
  if ((WebCore::Document::visibilityState(*(WebCore::Document **)(a1 + 16)) & 1) == 0)
  {
    v27 = *(_QWORD *)(a1 + 24);
    goto LABEL_27;
  }
  v3 = *(WebCore::Document **)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v5 + 24) = 1;
  v6 = WebCore::ActiveDOMObject::ActiveDOMObject((WebCore::ActiveDOMObject *)v5, v3);
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *(_QWORD *)v6 = &off_1E33668C8;
  *((_QWORD *)v6 + 4) = &unk_1E3366948;
  *((_BYTE *)v6 + 56) = v4;
  *(_WORD *)((char *)v6 + 57) = 0;
  result = (WebCore::WakeLockManager *)WebCore::ActiveDOMObject::suspendIfNeeded(v6);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 24);
  if (v10 && *(_QWORD *)v10 && (*(_BYTE *)(v10 + 8) & 3) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
    if (!v11 || (*(_BYTE *)(v11 + 8) & 3) != 0)
      v12 = 0;
    else
      v12 = *(uint64_t **)v11;
    v13 = v12[7];
    MEMORY[0x19AEA3294](&v84, v13);
    v14 = (objc_class *)WebCore::wrap<WebCore::WakeLockSentinel>((int)v12, **(JSC::VM ***)(v9 + 32), v5);
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      WebCore::DeferredPromise::callFunction(v9, v12, 0, v14);
      v15 = *(_QWORD *)(v13 + 16);
      if (!v15)
        goto LABEL_15;
    }
    v70 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v12);
    if (!(*(unsigned int (**)(_QWORD *))(*v70 + 64))(v70))
    {
LABEL_96:
      WebCore::reportException((JSC::JSGlobalObject *)v12, v15, 0, 0, 0);
LABEL_15:
      result = (WebCore::WakeLockManager *)MEMORY[0x19AEA32A0](&v84);
      goto LABEL_16;
    }
    v71 = v70[43];
    if (*(_QWORD *)(v13 + 24) == v15)
    {
LABEL_124:
      *(_BYTE *)(*(_QWORD *)(v71 + 8) + 93442) = 1;
      *(_BYTE *)(v9 + 44) = 1;
      goto LABEL_96;
    }
    if (!v71)
      goto LABEL_96;
    v72 = (unsigned __int8 *)(v71 + 40);
    if (__ldaxr((unsigned __int8 *)(v71 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v72))
    {
      goto LABEL_118;
    }
    MEMORY[0x19AEA534C](v71 + 40);
LABEL_118:
    v78 = *(unsigned __int8 *)(v71 + 41);
    v79 = __ldxr(v72);
    if (v79 == 1)
    {
      if (!__stlxr(0, v72))
      {
LABEL_123:
        if (!v78)
          goto LABEL_96;
        goto LABEL_124;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v71 + 40));
    goto LABEL_123;
  }
LABEL_16:
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD **)(v16 + 3192);
  if (!v17)
  {
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v17 = off_1E33665A0;
    v17[1] = 0;
    v17[3] = 0;
    v17[4] = 0;
    v17[2] = v16;
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v16 + 1912, v17, (uint64_t)&v84);
    result = *(WebCore::WakeLockManager **)(v16 + 3192);
    *(_QWORD *)(v16 + 3192) = v17;
    if (result)
    {
      WebCore::WakeLockManager::~WakeLockManager(result);
      result = (WebCore::WakeLockManager *)WTF::fastFree(v18, v19);
      v17 = *(_QWORD **)(v16 + 3192);
    }
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 528);
  v81 = 0u;
  if (v20 && (v21 = *(_QWORD *)(v20 + 8)) != 0 && (v22 = *(_QWORD *)(v21 + 24)) != 0)
  {
    v23 = *(int8x16_t **)(v22 + 8);
    v80 = 0uLL;
    if (v23)
    {
      v24 = v23[2];
      v25.i64[0] = -256;
      v25.i64[1] = -256;
      v26 = vandq_s8(v24, v25);
      v25.i64[0] = 255;
      v25.i64[1] = 255;
      v80 = v26;
      v81 = vandq_s8(v24, v25);
    }
  }
  else
  {
    v80 = 0uLL;
  }
  v30 = *(unsigned __int8 *)(v5 + 56);
  v32 = v17 + 3;
  v31 = v17[3];
  if (v31
    || (result = (WebCore::WakeLockManager *)WTF::HashTable<WebCore::WakeLockType,WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::WakeLockType>,WTF::HashMap<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::WakeLockType>,WTF::StrongEnumHashTraits<WebCore::WakeLockType>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::WakeLockType>>::rehash(v17 + 3, 8u, 0), (v31 = *v32) != 0))
  {
    v33 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    v33 = 0;
  }
  v34 = 9 * ((~(v30 << 15) + v30) ^ ((~(v30 << 15) + v30) >> 10));
  v35 = (v34 ^ (v34 >> 6)) + ~((v34 ^ (v34 >> 6)) << 11);
  v36 = v33 & (v35 ^ HIWORD(v35));
  v37 = (WebCore::WakeLockManager *)(v31 + 24 * v36);
  v38 = *(unsigned __int8 *)v37;
  if (v38 == 255)
  {
LABEL_43:
    v39 = (WTF *)*((_QWORD *)v37 + 1);
    v40 = v37;
LABEL_51:
    *(_BYTE *)v40 = v30;
    v42 = (WTF **)((char *)v40 + 8);
    v43 = *((unsigned int *)v40 + 5);
    if ((_DWORD)v43)
    {
      v44 = 8 * v43;
      do
      {
        v45 = *(_DWORD **)v39;
        *(_QWORD *)v39 = 0;
        if (v45)
        {
          if (v45[6] == 1)
          {
            WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v45 + 8), v8);
            WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v45, v46);
            result = (WebCore::WakeLockManager *)bmalloc::api::isoDeallocate(v47, v48);
          }
          else
          {
            --v45[6];
          }
        }
        v39 = (WTF *)((char *)v39 + 8);
        v44 -= 8;
      }
      while (v44);
      v39 = *v42;
    }
    if (v39)
    {
      *((_QWORD *)v40 + 1) = 0;
      *((_DWORD *)v40 + 4) = 0;
      result = (WebCore::WakeLockManager *)WTF::fastFree(v39, v8);
    }
    *v42 = 0;
    *((_QWORD *)v40 + 2) = 0;
    v49 = *v32;
    if (*v32)
      v50 = *(_DWORD *)(v49 - 12) + 1;
    else
      v50 = 1;
    *(_DWORD *)(v49 - 12) = v50;
    v51 = *v32;
    if (*v32)
      v52 = *(_DWORD *)(v51 - 12);
    else
      v52 = 0;
    v53 = (*(_DWORD *)(v51 - 16) + v52);
    v54 = *(unsigned int *)(v51 - 4);
    if (v54 > 0x400)
    {
      if (v54 > 2 * v53)
        goto LABEL_69;
    }
    else
    {
      if (3 * v54 > 4 * v53)
      {
LABEL_69:
        v37 = v40;
        goto LABEL_75;
      }
      if (!(_DWORD)v54)
      {
        v55 = 8;
        goto LABEL_74;
      }
    }
    v55 = (_DWORD)v54 << (6 * *(_DWORD *)(v51 - 12) >= (2 * v54));
LABEL_74:
    result = (WebCore::WakeLockManager *)WTF::HashTable<WebCore::WakeLockType,WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::WakeLockType>,WTF::HashMap<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::WakeLockType>,WTF::StrongEnumHashTraits<WebCore::WakeLockType>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::WakeLockType>>::rehash(v17 + 3, v55, v40);
    v37 = result;
    goto LABEL_75;
  }
  v40 = 0;
  v41 = 1;
  while (v38 != v30)
  {
    if (v38 == 254)
      v40 = v37;
    v36 = (v36 + v41) & v33;
    v37 = (WebCore::WakeLockManager *)(v31 + 24 * v36);
    v38 = *(unsigned __int8 *)v37;
    ++v41;
    if (v38 == 255)
    {
      if (!v40)
        goto LABEL_43;
      v39 = 0;
      *(_BYTE *)v40 = -1;
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = 0;
      --*(_DWORD *)(*v32 - 16);
      goto LABEL_51;
    }
  }
LABEL_75:
  v56 = *((unsigned int *)v37 + 5);
  if ((_DWORD)v56 == *((_DWORD *)v37 + 4))
  {
    v57 = v56 + (v56 >> 2);
    if (v57 >= 0x10)
      v58 = v57 + 1;
    else
      v58 = 16;
    if (v58 <= v56 + 1)
      v59 = v56 + 1;
    else
      v59 = v58;
    if (v59 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v60 = (void *)*((_QWORD *)v37 + 1);
    v61 = (void *)WTF::fastMalloc((WTF *)(8 * v59));
    *((_DWORD *)v37 + 4) = v59;
    *((_QWORD *)v37 + 1) = v61;
    result = (WebCore::WakeLockManager *)memcpy(v61, v60, 8 * v56);
    if (v60)
    {
      if (*((void **)v37 + 1) == v60)
      {
        *((_QWORD *)v37 + 1) = 0;
        *((_DWORD *)v37 + 4) = 0;
      }
      result = (WebCore::WakeLockManager *)WTF::fastFree((WTF *)v60, v62);
    }
    v56 = *((unsigned int *)v37 + 5);
    v63 = (uint64_t *)(*((_QWORD *)v37 + 1) + 8 * v56);
  }
  else
  {
    v63 = (uint64_t *)(*((_QWORD *)v37 + 1) + 8 * v56);
  }
  *v63 = v5;
  *((_DWORD *)v37 + 5) = v56 + 1;
  if (!(v56 | v30))
  {
    v64 = vorrq_s8(v81, v80);
    v65 = v64.i64[1];
    v66 = v64.i64[0];
    v67 = WTF::fastMalloc((WTF *)0x28);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)v67 = 0;
    *(_QWORD *)(v67 + 8) = 0;
    *(_DWORD *)(v67 + 16) = 1;
    *(_QWORD *)(v67 + 24) = v66;
    *(_QWORD *)(v67 + 32) = v65;
    {
      if (WebCore::sleepDisablerClient(void)::client)
      {
        IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
        *(_QWORD *)(v67 + 8) = IdentifierInternal;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                                                + 16))(WebCore::sleepDisablerClient(void)::client, IdentifierInternal, &v84, 1, v66, v65);
LABEL_105:
        result = v84;
        v84 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WebCore::WakeLockManager *)WTF::StringImpl::destroy(result, v69);
          else
            *(_DWORD *)result -= 2;
        }
        v76 = (WTF *)v17[4];
        v17[4] = v67;
        if (v76)
        {
          {
            if (WebCore::sleepDisablerClient(void)::client)
              (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                      + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)v76 + 1), *((_QWORD *)v76 + 3), *((_QWORD *)v76 + 4));
          }
          else
          {
            WebCore::sleepDisablerClient(void)::client = 0;
          }
          v77 = *(_QWORD *)v76;
          *(_QWORD *)v76 = 0;
          if (v77)
            (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
          return (WebCore::WakeLockManager *)WTF::fastFree(v76, v69);
        }
        return result;
      }
    }
    else
    {
      WebCore::sleepDisablerClient(void)::client = 0;
    }
    v74 = (PAL::SleepDisablerCocoa *)operator new();
    PAL::SleepDisablerCocoa::SleepDisablerCocoa(v74, (WTF::String *)&v84, 1);
    v75 = *(_QWORD *)v67;
    *(_QWORD *)v67 = v74;
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
    goto LABEL_105;
  }
  return result;
}

_BYTE *WTF::HashTable<WebCore::WakeLockType,WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::WakeLockType>,WTF::HashMap<WebCore::WakeLockType,WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::WakeLockType>,WTF::StrongEnumHashTraits<WebCore::WakeLockType>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::WakeLockSentinel,WTF::RawPtrTraits<WebCore::WakeLockSentinel>,WTF::DefaultRefDerefTraits<WebCore::WakeLockSentinel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::WakeLockType>>::rehash(uint64_t *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  void *v21;
  bmalloc::api *v22;
  void *v23;
  uint64_t v24;
  int v25;
  WTF *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  WTF **v36;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  void *v40;
  bmalloc::api *v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  int v47;
  int v48;
  uint64_t v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  void *v53;
  bmalloc::api *v54;
  void *v55;
  WTF *v56;
  _BYTE *result;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v62;
  _BYTE *v63;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 24);
    do
    {
      *((_BYTE *)v10 - 8) = -1;
      *v10 = 0;
      v10[1] = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v58 = v5;
    v59 = v4;
    do
    {
      v14 = *(unsigned __int8 *)(v4 + 24 * v11);
      if (v14 != 254)
      {
        if (v14 == 255)
        {
          v15 = v4 + 24 * v11;
          v16 = (WTF **)(v15 + 8);
          v17 = *(unsigned int *)(v15 + 20);
          if ((_DWORD)v17)
          {
            v18 = *v16;
            v19 = 8 * v17;
            do
            {
              v20 = *(_DWORD **)v18;
              *(_QWORD *)v18 = 0;
              if (v20)
              {
                if (v20[6] == 1)
                {
                  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v20 + 8), v8);
                  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v20, v21);
                  bmalloc::api::isoDeallocate(v22, v23);
                }
                else
                {
                  --v20[6];
                }
              }
              v18 = (WTF *)((char *)v18 + 8);
              v19 -= 8;
            }
            while (v19);
          }
          v26 = *v16;
          if (*v16)
          {
            *v16 = 0;
            *(_DWORD *)(v4 + 24 * v11 + 16) = 0;
            WTF::fastFree(v26, v8);
          }
        }
        else
        {
          v24 = *a1;
          v63 = (_BYTE *)(v4 + 24 * v11);
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v62 = v12;
          v27 = 0;
          v28 = 9 * ((~(v14 << 15) + v14) ^ ((~(v14 << 15) + v14) >> 10));
          v29 = ((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) ^ (((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) >> 16);
          do
          {
            v30 = v29 & v25;
            v31 = (_BYTE *)(v24 + 24 * (v29 & v25));
            v29 = ++v27 + (v29 & v25);
          }
          while (*v31 != 255);
          v32 = v24 + 24 * v30;
          v35 = *(_DWORD *)(v32 + 20);
          v34 = (_DWORD *)(v32 + 20);
          v33 = v35;
          v36 = (WTF **)(v34 - 3);
          if (v35)
          {
            v37 = *v36;
            v38 = 8 * v33;
            do
            {
              v39 = *(_DWORD **)v37;
              *(_QWORD *)v37 = 0;
              if (v39)
              {
                if (v39[6] == 1)
                {
                  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v39 + 8), v8);
                  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v39, v40);
                  bmalloc::api::isoDeallocate(v41, v42);
                }
                else
                {
                  --v39[6];
                }
              }
              v37 = (WTF *)((char *)v37 + 8);
              v38 -= 8;
            }
            while (v38);
          }
          v43 = *v36;
          if (*v36)
          {
            *v36 = 0;
            *(_DWORD *)(v24 + 24 * v30 + 16) = 0;
            WTF::fastFree(v43, v8);
          }
          *v31 = *v63;
          v4 = v59;
          v44 = v59 + 24 * v11;
          *v36 = 0;
          *(_QWORD *)(v34 - 1) = 0;
          v46 = *(WTF **)(v44 + 8);
          v45 = v44 + 8;
          *(_QWORD *)v45 = 0;
          *v36 = v46;
          v47 = *(_DWORD *)(v45 + 8);
          *(_DWORD *)(v45 + 8) = 0;
          *(_DWORD *)(v24 + 24 * v30 + 16) = v47;
          v48 = *(_DWORD *)(v45 + 12);
          *(_DWORD *)(v45 + 12) = 0;
          *v34 = v48;
          v49 = *(unsigned int *)(v45 + 12);
          v13 = v58;
          if ((_DWORD)v49)
          {
            v50 = *(_DWORD ***)v45;
            v51 = 8 * v49;
            do
            {
              v52 = *v50;
              *v50 = 0;
              if (v52)
              {
                if (v52[6] == 1)
                {
                  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v52 + 8), v8);
                  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v52, v53);
                  bmalloc::api::isoDeallocate(v54, v55);
                }
                else
                {
                  --v52[6];
                }
              }
              ++v50;
              v51 -= 8;
            }
            while (v51);
          }
          v56 = *(WTF **)v45;
          if (*(_QWORD *)v45)
          {
            *(_QWORD *)v45 = 0;
            *(_DWORD *)(v45 + 8) = 0;
            WTF::fastFree(v56, v8);
          }
          v12 = v62;
          if (v63 == a3)
            v12 = v31;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WebCore::SpeechRecognitionCaptureSource::mute(WebCore::SpeechRecognitionCaptureSource *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)this + 56) + 80))(*(_QWORD *)(*(_QWORD *)this + 56), 1);
}

unsigned int *WebCore::SpeechRecognitionCaptureSource::findCaptureDevice@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v3;
  uint64_t (***v4)(_QWORD);
  unsigned int *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;

  *a1 = 0;
  a1[40] = 0;
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  v3 = (uint64_t *)qword_1ECE91218;
  if (!qword_1ECE91218)
    v3 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
  v4 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
  result = (unsigned int *)(**v4)(v4);
  v7 = result[3];
  v29 = 0;
  v30 = 0;
  v31 = v7;
  if (!(_DWORD)v7)
    return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v29, v6);
  if (v7 < 0x6666667)
  {
    v8 = (uint64_t)result;
    v9 = WTF::fastMalloc((WTF *)(40 * v7));
    v10 = v9;
    v30 = 40 * (int)v7 / 0x28u;
    v29 = v9;
    v11 = *(_DWORD *)(v8 + 12);
    if (v11)
    {
      v12 = *(_QWORD *)v8;
      v13 = *(_QWORD *)v8 + 40 * v11;
      v14 = v9;
      do
      {
        v15 = *(_DWORD **)v12;
        if (*(_QWORD *)v12)
          *v15 += 2;
        *(_QWORD *)v14 = v15;
        *(_BYTE *)(v14 + 8) = *(_BYTE *)(v12 + 8);
        v16 = *(_DWORD **)(v12 + 16);
        if (v16)
          *v16 += 2;
        *(_QWORD *)(v14 + 16) = v16;
        v17 = *(_DWORD **)(v12 + 24);
        if (v17)
          *v17 += 2;
        *(_QWORD *)(v14 + 24) = v17;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v12 + 32);
        v12 += 40;
        v14 += 40;
      }
      while (v12 != v13);
    }
    v18 = v9 + 40 * v7;
    while (1)
    {
      v19 = *(WTF::StringImpl **)v10;
      if (*(_QWORD *)v10)
        *(_DWORD *)v19 += 2;
      v24 = v19;
      v25 = *(_BYTE *)(v10 + 8);
      v20 = *(WTF::StringImpl **)(v10 + 16);
      if (v20)
        *(_DWORD *)v20 += 2;
      v26 = v20;
      v21 = *(WTF::StringImpl **)(v10 + 24);
      if (v21)
        *(_DWORD *)v21 += 2;
      v27 = v21;
      v22 = *(_DWORD *)(v10 + 32);
      v28 = v22;
      if ((_BYTE)v22)
      {
        if (!a1[40])
          std::optional<WebCore::CaptureDevice>::operator=[abi:sn180100]<WebCore::CaptureDevice&,void>((uint64_t)a1, (uint64_t)&v24);
        if ((v22 & 0xFF00) != 0)
        {
          std::optional<WebCore::CaptureDevice>::operator=[abi:sn180100]<WebCore::CaptureDevice&,void>((uint64_t)a1, (uint64_t)&v24);
          v23 = 2;
          if (!v21)
            goto LABEL_34;
        }
        else
        {
          v23 = 0;
          if (!v21)
            goto LABEL_34;
        }
      }
      else
      {
        v23 = 3;
        if (!v21)
          goto LABEL_34;
      }
      if (*(_DWORD *)v21 != 2)
      {
        *(_DWORD *)v21 -= 2;
LABEL_34:
        if (v20)
          goto LABEL_35;
        goto LABEL_37;
      }
      WTF::StringImpl::destroy(v21, v6);
      if (v20)
      {
LABEL_35:
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v6);
        else
          *(_DWORD *)v20 -= 2;
      }
LABEL_37:
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v6);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (v23 == 3 || !v23)
      {
        v10 += 40;
        if (v10 != v18)
          continue;
      }
      return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v29, v6);
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t std::optional<WebCore::CaptureDevice>::operator=[abi:sn180100]<WebCore::CaptureDevice&,void>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = *(_DWORD **)a2;
  if (*(_BYTE *)(a1 + 40))
  {
    if (v4)
      *v4 += 2;
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v6 = *(_DWORD **)(a2 + 16);
    if (v6)
      *v6 += 2;
    v7 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(_DWORD **)(a2 + 24);
    if (v8)
      *v8 += 2;
    v9 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  }
  else
  {
    if (v4)
      *v4 += 2;
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v10 = *(_DWORD **)(a2 + 16);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(a1 + 16) = v10;
    v11 = *(_DWORD **)(a2 + 24);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(a1 + 24) = v11;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

WTF::StringImpl *WebCore::SpeechRecognitionCaptureSource::createRealtimeMediaSource(WebCore::RealtimeMediaSourceCenter *a1, uint64_t a2)
{
  WebCore::RealtimeMediaSourceCenter *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = a1;
  {
    a1 = WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  v4 = (uint64_t *)qword_1ECE91218;
  if (!qword_1ECE91218)
    v4 = WebCore::CoreAudioCaptureSourceFactory::singleton(a1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = v10;
  (*(void (**)(uint64_t *, WebCore::RealtimeMediaSourceCenter *, WTF::StringImpl **, _QWORD, uint64_t))(*v4 + 16))(v4, v3, &v8, 0, a2);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::SpeechRecognitionCaptureSourceImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v20;
  void *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  _BYTE v28[24];

  *(_QWORD *)(a1 + 16) = &unk_1E3366A48;
  v6 = a1 + 16;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E33669C0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if ((_MergedGlobals_147 & 1) != 0)
  {
    if (qword_1ECE820D8)
      goto LABEL_14;
  }
  else
  {
    qword_1ECE820D8 = 0;
    _MergedGlobals_147 = 1;
  }
  v10 = WTF::fastMalloc((WTF *)0x18);
  v11 = v10;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E335DEC0;
  *(_BYTE *)(v10 + 12) = 1;
  *(_QWORD *)(v10 + 16) = a1;
  if ((_MergedGlobals_147 & 1) != 0)
  {
    v12 = (unsigned int *)qword_1ECE820D8;
    qword_1ECE820D8 = v11;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
      if (_MergedGlobals_147 == 1)
      {
        v11 = qword_1ECE820D8;
      }
      else
      {
        v11 = 0;
        qword_1ECE820D8 = 0;
        _MergedGlobals_147 = 1;
      }
    }
  }
  else
  {
    _MergedGlobals_147 = 1;
    qword_1ECE820D8 = v10;
  }
  if (*(_QWORD *)(v11 + 16) == a1)
    *(_BYTE *)(v11 + 12) = 0;
  v9 = *(_QWORD *)(a1 + 56);
LABEL_14:
  if (byte_1ECE820D1 == 1)
  {
    v16 = qword_1ECE820E0;
  }
  else
  {
    v16 = WTF::cryptographicallyRandomNumber<unsigned int>();
    byte_1ECE820D1 = 1;
  }
  qword_1ECE820E0 = v16 + 1;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 272))(v9);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = (unsigned __int8 *)(v17 + 144);
  if (__ldaxr((unsigned __int8 *)(v17 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v17 + 144);
LABEL_20:
  v27 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v17 + 152), &v27, (uint64_t)v28);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
  v20 = __ldxr(v18);
  if (v20 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v17 + 144));
LABEL_27:
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(a1 + 56) + 128, (_QWORD *)a1, (uint64_t)v28);
  WebCore::RealtimeMediaSource::start(*(_BYTE **)(a1 + 56));
  if (!*(_QWORD *)(a1 + 8))
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = a1;
    v23 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v22;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v21);
      }
    }
  }
  return a1;
}

void WebCore::SpeechRecognitionCaptureSourceImpl::~SpeechRecognitionCaptureSourceImpl(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  uint64_t v2;
  char *v3;
  unsigned __int8 *v4;
  int v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[4];

  v2 = *((_QWORD *)this + 7);
  v3 = (char *)this + 16;
  v4 = (unsigned __int8 *)(v2 + 144);
  if (__ldaxr((unsigned __int8 *)(v2 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 144);
LABEL_5:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v2 + 152), (uint64_t)v3);
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 144));
  v7 = (_QWORD *)*((_QWORD *)this + 7);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v7 + 16), this);
  v9 = v7[16];
  if (!v9 || !*(_DWORD *)(v9 - 12))
    goto LABEL_11;
  v26 = *(unsigned int *)(v9 - 4);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    v28 = (uint64_t *)v7[16];
    while ((unint64_t)(*v28 + 1) <= 1)
    {
      ++v28;
      v27 -= 8;
      if (!v27)
        goto LABEL_11;
    }
  }
  else
  {
    v28 = (uint64_t *)v7[16];
  }
  v29 = (uint64_t *)(v9 + 8 * v26);
  if (v28 == v29)
    goto LABEL_11;
  v30 = *v28;
LABEL_43:
  if (!*(_QWORD *)(v30 + 8))
  {
    while (++v28 != v29)
    {
      v30 = *v28;
      if ((unint64_t)(*v28 + 1) > 1)
      {
        if (v28 != v29)
          goto LABEL_43;
        break;
      }
    }
LABEL_11:
    (*(void (**)(_QWORD *))(*v7 + 392))(v7);
  }
  v10 = *((_QWORD *)this + 7);
  if (*(_BYTE *)(v10 + 292))
  {
    v11 = *(_QWORD *)(v10 + 40);
    if (v11)
    {
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 24))(*((_QWORD *)this + 7));
      v13 = *(_QWORD *)(v10 + 48);
      v33[0] = v12;
      v33[1] = v14;
      v33[2] = "stop";
      v33[3] = v13;
      if (*(_BYTE *)(v11 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v33);
    }
    *(_BYTE *)(v10 + 292) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 368))(v10);
  }
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 8);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = off_1E331A460;
      v31[1] = v16;
      v33[0] = v31;
      WTF::ensureOnMainRunLoop();
      v32 = v33[0];
      v33[0] = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 144))(v19);
  v20 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 1);
  if (v22)
  {
    *(_QWORD *)(v22 + 8) = 0;
    v23 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v1;
  void *v2;

  WebCore::SpeechRecognitionCaptureSourceImpl::~SpeechRecognitionCaptureSourceImpl(this);
  if (*(_DWORD *)(v1 + 24))
  {
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

void `non-virtual thunk to'WebCore::SpeechRecognitionCaptureSourceImpl::~SpeechRecognitionCaptureSourceImpl(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  WebCore::SpeechRecognitionCaptureSourceImpl::~SpeechRecognitionCaptureSourceImpl((WebCore::SpeechRecognitionCaptureSourceImpl *)((char *)this - 16));
}

{
  WTF *v2;
  void *v3;

  WebCore::SpeechRecognitionCaptureSourceImpl::~SpeechRecognitionCaptureSourceImpl((WebCore::SpeechRecognitionCaptureSourceImpl *)((char *)this - 16));
  if (*((_DWORD *)this + 2))
  {
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree(v2, v3);
  }
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(uint64_t a1, _QWORD *a2, _QWORD *a3, WTF *a4, unint64_t a5)
{
  uint64_t result;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  OpaqueAudioConverter **v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t (**v34)();
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _Unwind_Exception *v60;
  void *v61;
  __int128 v62;
  _QWORD *v63;
  __int128 v64;
  _QWORD *v65;
  _QWORD *v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[32];
  __int128 v70;
  __int128 v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  void (**v75)(WebCore::CAAudioStreamDescription *__hidden);
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;

  result = WTF::isMainThread((WTF *)a1);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, WTF *, unint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2, a3, a4, a5);
  v11 = (unsigned __int8 *)(a1 + 72);
  do
  {
    while (1)
    {
      v12 = *v11;
      if ((v12 & 1) != 0)
        return result;
      v13 = __ldaxr(v11);
      if (v13 == v12)
        break;
      __clrex();
    }
  }
  while (__stxr(v12 | 1, v11));
  v14 = (*(uint64_t (**)(WTF *))(*(_QWORD *)a4 + 16))(a4);
  if (*(_DWORD *)(v14 + 16) != 1)
    goto LABEL_75;
  v15 = *(__int128 **)(v14 + 8);
  v75 = off_1E34087C0;
  v16 = *v15;
  v17 = v15[1];
  *(_QWORD *)&v78 = *((_QWORD *)v15 + 4);
  v76 = v16;
  v77 = v17;
  DWORD2(v78) = 0;
  *(_QWORD *)&v79 = 0;
  DWORD2(v79) = 0;
  v80 = 0;
  v18 = *(_QWORD *)(a1 + 64);
  if (v18 && *(_BYTE *)(v18 + 96) && *(_DWORD *)(*(uint64_t (**)(WTF *))(*(_QWORD *)a4 + 16))(a4) == 1)
  {
    v19 = (*(uint64_t (**)(WTF *))(*(_QWORD *)a4 + 16))(a4);
    if (*(_DWORD *)(v19 + 16) == 1)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (*(double *)(v18 + 24) == *(double *)v20
        && *(_DWORD *)(v18 + 32) == *(_DWORD *)(v20 + 8)
        && *(_DWORD *)(v18 + 36) == *(_DWORD *)(v20 + 12)
        && *(_DWORD *)(v18 + 40) == *(_DWORD *)(v20 + 16)
        && *(_DWORD *)(v18 + 44) == *(_DWORD *)(v20 + 20)
        && *(_DWORD *)(v18 + 48) == *(_DWORD *)(v20 + 24)
        && *(_DWORD *)(v18 + 52) == *(_DWORD *)(v20 + 28)
        && *(_DWORD *)(v18 + 56) == *(_DWORD *)(v20 + 32))
      {
        goto LABEL_59;
      }
      goto LABEL_22;
    }
LABEL_75:
    v60 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    WTF::fastFree(a4, v61);
    _Unwind_Resume(v60);
  }
LABEL_22:
  v21 = *(_QWORD *)(a1 + 56);
  v22 = WTF::fastMalloc((WTF *)0x180);
  WebCore::AudioSampleDataSource::AudioSampleDataSource(v22, (unint64_t)*(double *)&v76, v21, 2);
  v62 = v76;
  v67 = v77;
  *(_OWORD *)v69 = v78;
  *(_OWORD *)&v69[16] = v79;
  v24 = v80;
  if (*(_BYTE *)(v22 + 96))
  {
    v25 = v78;
    v26 = v77;
    *(_OWORD *)(v22 + 24) = v76;
    *(_OWORD *)(v22 + 40) = v26;
    *(_QWORD *)(v22 + 56) = v25;
    *(_OWORD *)(v22 + 64) = *(_OWORD *)&v69[8];
    *(_QWORD *)(v22 + 80) = *(_QWORD *)&v69[24];
  }
  else
  {
    *(_QWORD *)(v22 + 16) = off_1E34087C0;
    *(_OWORD *)(v22 + 24) = v62;
    *(_OWORD *)(v22 + 40) = v67;
    *(_OWORD *)(v22 + 56) = *(_OWORD *)v69;
    *(_OWORD *)(v22 + 72) = *(_OWORD *)&v69[16];
    *(_BYTE *)(v22 + 96) = 1;
  }
  *(_DWORD *)(v22 + 88) = v24;
  if (*(_BYTE *)(v22 + 184)
    && WebCore::AudioSampleDataConverter::setFormats(v22 + 256, (_DWORD *)(v22 + 16), v22 + 104, v23))
  {
    v27 = *(_QWORD *)(a1 + 8);
    if (v27)
      goto LABEL_78;
    v27 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v27 = 1;
    *(_QWORD *)(v27 + 8) = a1;
    v29 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v27;
    if (!v29)
      goto LABEL_78;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
    v27 = *(_QWORD *)(a1 + 8);
    if (v27)
    {
LABEL_78:
      do
        v32 = __ldaxr((unsigned int *)v27);
      while (__stlxr(v32 + 1, (unsigned int *)v27));
    }
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v34 = &off_1E3366C60;
    goto LABEL_44;
  }
  if (WebCore::AudioSampleDataSource::setOutputFormat((WebCore::AudioSampleDataSource *)v22, (const WebCore::CAAudioStreamDescription *)&v75))
  {
    v27 = *(_QWORD *)(a1 + 8);
    if (v27)
      goto LABEL_79;
    v27 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v27 = 1;
    *(_QWORD *)(v27 + 8) = a1;
    v36 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v27;
    if (!v36)
      goto LABEL_79;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, v35);
    }
    v27 = *(_QWORD *)(a1 + 8);
    if (v27)
    {
LABEL_79:
      do
        v39 = __ldaxr((unsigned int *)v27);
      while (__stlxr(v39 + 1, (unsigned int *)v27));
    }
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v34 = &off_1E3366C88;
LABEL_44:
    *v33 = v34;
    v33[1] = a1;
    v33[2] = v27;
    v63 = v33;
    WTF::callOnMainThread();
    result = (uint64_t)v63;
    if (v63)
      result = (*(uint64_t (**)(_QWORD *))(*v63 + 8))(v63);
    v40 = (unsigned int *)(v22 + 8);
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (v42)
      goto LABEL_49;
    atomic_store(1u, v40);
    v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v58 = off_1E331A460;
    v58[1] = v40;
    v65 = v58;
    WTF::ensureOnMainRunLoop();
    result = (uint64_t)v65;
    if (!v65)
      goto LABEL_49;
LABEL_70:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    goto LABEL_49;
  }
  v44 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v22;
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v59 = off_1E331A460;
      v59[1] = v45;
      v66 = v59;
      WTF::ensureOnMainRunLoop();
      if (v66)
        (*(void (**)(_QWORD *))(*v66 + 8))(v66);
    }
  }
LABEL_59:
  WebCore::AudioSampleDataSource::pushSamples(*(_QWORD *)(a1 + 64), (uint64_t)a2, a3, a5);
  v48 = *(_QWORD *)(a1 + 8);
  if (v48)
    goto LABEL_80;
  v48 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v48 = 1;
  *(_QWORD *)(v48 + 8) = a1;
  v50 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v48;
  if (!v50)
    goto LABEL_80;
  do
  {
    v51 = __ldaxr(v50);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, v50));
  if (!v52)
  {
    atomic_store(1u, v50);
    WTF::fastFree((WTF *)v50, v49);
  }
  v48 = *(_QWORD *)(a1 + 8);
  if (v48)
  {
LABEL_80:
    do
      v53 = __ldaxr((unsigned int *)v48);
    while (__stlxr(v53 + 1, (unsigned int *)v48));
  }
  v54 = *(_QWORD *)(a1 + 64);
  if (v54)
  {
    v55 = (unsigned int *)(v54 + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
  }
  *(_QWORD *)&v73 = *a2;
  *(_QWORD *)((char *)&v73 + 5) = *(_QWORD *)((char *)a2 + 5);
  v70 = v78;
  v71 = v79;
  v72 = v80;
  v64 = v76;
  v68 = v77;
  v57 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v57 = &off_1E3366CB0;
  *(_QWORD *)(v57 + 8) = a1;
  *(_QWORD *)(v57 + 16) = v48;
  *(_QWORD *)(v57 + 24) = v54;
  *(_OWORD *)(v57 + 32) = v73;
  *(_QWORD *)(v57 + 48) = off_1E34087C0;
  *(_OWORD *)(v57 + 72) = v68;
  *(_OWORD *)(v57 + 88) = v70;
  *(_OWORD *)(v57 + 104) = v71;
  *(_DWORD *)(v57 + 120) = v72;
  *(_OWORD *)(v57 + 56) = v64;
  *(_QWORD *)(v57 + 128) = a5;
  v74 = v57;
  WTF::callOnMainThread();
  result = v74;
  if (v74)
    goto LABEL_70;
LABEL_49:
  v43 = __ldxr(v11);
  if (v43 == 1)
  {
    if (!__stlxr(0, v11))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v11);
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(uint64_t a1, _QWORD *a2, _QWORD *a3, WTF *a4, unint64_t a5)
{
  return WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(a1 - 16, a2, a3, a4, a5);
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::sourceStarted(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  _BYTE v4[16];
  int v5;
  char v6;

  v2 = *((_QWORD *)this + 4);
  v3 = 1;
  v4[0] = 0;
  v5 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), &v2);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS7_27SpeechRecognitionResultDataELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v5])(&v6, v4);
  return result;
}

uint64_t WebCore::SpeechRecognitionUpdate::create@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::sourceStopped(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11[8];
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v2 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v9;
  if (v9)
  {
    v5 = *(_DWORD *)v9;
    v9 = v2;
    v10 = 9;
    v11[0] = 2;
    *(_DWORD *)v4 = v5 + 4;
    v12 = v4;
    v13 = 1;
    v6 = v5 + 2;
    if (v6)
      *(_DWORD *)v4 = v6;
    else
      WTF::StringImpl::destroy(v4, v3);
  }
  else
  {
    v9 = v2;
    v10 = 9;
    v11[0] = 2;
    v12 = 0;
    v13 = 1;
  }
  result = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), &v9);
  if (v13 != -1)
    result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS7_27SpeechRecognitionResultDataELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v13])(&v14, v11);
  v13 = -1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v8);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SpeechRecognitionUpdate::createError@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  WTF::StringImpl *result;
  int v6;

  v4 = *(_BYTE *)a2;
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (result)
  {
    v6 = *(_DWORD *)result;
    *(_QWORD *)a3 = a1;
    *(_BYTE *)(a3 + 8) = 9;
    *(_BYTE *)(a3 + 16) = v4;
    *(_DWORD *)result = v6 + 4;
    *(_QWORD *)(a3 + 24) = result;
    *(_DWORD *)(a3 + 32) = 1;
    if (v6 == -2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result = v6 + 2;
  }
  else
  {
    *(_QWORD *)a3 = a1;
    *(_BYTE *)(a3 + 8) = 9;
    *(_BYTE *)(a3 + 16) = v4;
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = 1;
  }
  return result;
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::sourceMutedChanged(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11[8];
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v2 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v9;
  if (v9)
  {
    v5 = *(_DWORD *)v9;
    v9 = v2;
    v10 = 9;
    v11[0] = 2;
    *(_DWORD *)v4 = v5 + 4;
    v12 = v4;
    v13 = 1;
    v6 = v5 + 2;
    if (v6)
      *(_DWORD *)v4 = v6;
    else
      WTF::StringImpl::destroy(v4, v3);
  }
  else
  {
    v9 = v2;
    v10 = 9;
    v11[0] = 2;
    v12 = 0;
    v13 = 1;
  }
  result = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), &v9);
  if (v13 != -1)
    result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS7_27SpeechRecognitionResultDataELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v13])(&v14, v11);
  v13 = -1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v8);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

uint64_t WebCore::SpeechRecognitionRequest::SpeechRecognitionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 64) = -1;
  v6 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *))off_1E3366C10[v6])(&v9);
    *(_DWORD *)(a1 + 64) = v6;
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  v7 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E3366C10[v7])(&v10);
    *(_DWORD *)(a1 + 96) = v7;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 96);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 64) = -1;
  v6 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *))off_1E3366C10[v6])(&v9);
    *(_DWORD *)(a1 + 64) = v6;
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  v7 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E3366C10[v7])(&v10);
    *(_DWORD *)(a1 + 96) = v7;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 96);
  return a1;
}

uint64_t WebCore::SpeechRecognitionUpdate::SpeechRecognitionUpdate(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v5 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3366C38[v5])(&v7, a1 + 16, a4);
    *(_DWORD *)(a1 + 32) = v5;
  }
  return a1;
}

{
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v5 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3366C38[v5])(&v7, a1 + 16, a4);
    *(_DWORD *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t WebCore::SpeechRecognitionUpdate::createResult@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v6[2];
  int v7;
  char v8;

  WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v6, a2);
  v7 = 2;
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = 7;
  *(_BYTE *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 32) = -1;
  result = WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3 + 16, v6);
  *(_DWORD *)(a3 + 32) = 2;
  if (v7 != -1)
    return ((uint64_t (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS7_27SpeechRecognitionResultDataELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v7])(&v8, v6);
  return result;
}

uint64_t WebCore::SpeechRecognitionUpdate::error(WebCore::SpeechRecognitionUpdate *this)
{
  uint64_t v1;
  WebCore::SpeechRecognitionUpdate *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 8);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::SpeechRecognitionUpdate *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SpeechRecognitionUpdate::result(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, char *))off_1E3366D08[v1])(&v5, (char *)this + 16);
  }
}

uint64_t WebCore::SpeechRecognitionUpdate::result(WebCore::SpeechRecognitionUpdate *this)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *((unsigned int *)this + 8);
  if ((_DWORD)v1 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x195508D24);
  }
  v4 = &v3;
  return ((uint64_t (*)(char **, char *))off_1E3366D20[v1])(&v4, (char *)this + 16);
}

uint64_t WebCore::RealtimeMediaSourceObserver::preventSourceFromEnding(WebCore::RealtimeMediaSourceObserver *this)
{
  return 0;
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::ptrCount(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::ptrCountWithoutThreadCheck(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::SpeechRecognitionCaptureSourceImpl::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 24);
  if (v1)
  {
    *(_DWORD *)(this + 24) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognitionCaptureSourceImpl::ptrCount(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognitionCaptureSourceImpl::ptrCountWithoutThreadCheck(WebCore::SpeechRecognitionCaptureSourceImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognitionCaptureSourceImpl::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechRecognitionCaptureSourceImpl::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 8);
  if (v1)
  {
    *(_DWORD *)(this + 8) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void WebCore::SpeechRecognitionErrorEvent::~SpeechRecognitionErrorEvent(WebCore::SpeechRecognitionErrorEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::SpeechRecognitionEvent::~SpeechRecognitionEvent(WebCore::SpeechRecognitionEvent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v4)
      {
        v5 = *(uint64_t **)(v3 + 8);
        v6 = 8 * v4;
        do
        {
          v7 = *v5;
          *v5 = 0;
          if (v7)
            WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v7, a2);
          ++v5;
          v6 -= 8;
        }
        while (v6);
      }
      v8 = *(WTF **)(v3 + 8);
      if (v8)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v8, a2);
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v6)
      {
        v7 = *(uint64_t **)(v3 + 8);
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
            WTF::RefCounted<WebCore::SpeechRecognitionResult>::deref(v9, a2);
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v10 = *(WTF **)(v3 + 8);
      if (v10)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v10, a2);
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0xAAAAAAB)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x1955090B0);
    }
    v5 = 24 * v3;
    v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = v6;
      v9 = *a2;
      v10 = &v9[3 * v7];
      do
      {
        v11 = *((unsigned int *)v9 + 3);
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 12) = v11;
        if ((_DWORD)v11)
        {
          if (v11 >> 28)
            goto LABEL_14;
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v11));
          *(_DWORD *)(v8 + 8) = v11;
          *(_QWORD *)v8 = v12;
          v13 = *((unsigned int *)v9 + 3);
          if ((_DWORD)v13)
          {
            v14 = *v9;
            v15 = *v9 + 16 * v13;
            do
            {
              v16 = *(_DWORD **)v14;
              if (*(_QWORD *)v14)
                *v16 += 2;
              *v12 = v16;
              v12[1] = *(_QWORD *)(v14 + 8);
              v14 += 16;
              v12 += 2;
            }
            while (v14 != v15);
          }
        }
        *(_BYTE *)(v8 + 16) = *((_BYTE *)v9 + 16);
        v8 += 24;
        v9 += 3;
      }
      while (v9 != v10);
    }
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_DWORD **)(a3 + 8);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  return WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, a3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3366C60;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3366C60;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11[8];
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(WTF::StringImpl **)(v2 + 32);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v9;
    if (v9)
    {
      v6 = *(_DWORD *)v9;
      v9 = v3;
      v10 = 9;
      v11[0] = 2;
      *(_DWORD *)v5 = v6 + 4;
      v12 = v5;
      v13 = 1;
      v7 = v6 + 2;
      if (v7)
        *(_DWORD *)v5 = v7;
      else
        WTF::StringImpl::destroy(v5, v4);
    }
    else
    {
      v9 = v3;
      v10 = 9;
      v11[0] = 2;
      v12 = 0;
      v13 = 1;
    }
    result = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v2 + 48) + 16))(*(_QWORD *)(v2 + 48), &v9);
    if (v13 != -1)
      result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS7_27SpeechRecognitionResultDataELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v13])(&v14, v11);
    v13 = -1;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return WTF::StringImpl::destroy(v5, v8);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3366C88;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3366C88;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_1,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11[8];
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(WTF::StringImpl **)(v2 + 32);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v9;
    if (v9)
    {
      v6 = *(_DWORD *)v9;
      v9 = v3;
      v10 = 9;
      v11[0] = 2;
      *(_DWORD *)v5 = v6 + 4;
      v12 = v5;
      v13 = 1;
      v7 = v6 + 2;
      if (v7)
        *(_DWORD *)v5 = v7;
      else
        WTF::StringImpl::destroy(v5, v4);
    }
    else
    {
      v9 = v3;
      v10 = 9;
      v11[0] = 2;
      v12 = 0;
      v13 = 1;
    }
    result = (*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v2 + 48) + 16))(*(_QWORD *)(v2 + 48), &v9);
    if (v13 != -1)
      result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS7_27SpeechRecognitionResultDataELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v13])(&v14, v11);
    v13 = -1;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return WTF::StringImpl::destroy(v5, v8);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = &off_1E3366CB0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E331A460;
      v11[1] = v4;
      v12 = v11;
      WTF::ensureOnMainRunLoop();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *(_QWORD *)this = &off_1E3366CB0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E331A460;
      v11[1] = v4;
      v12 = v11;
      WTF::ensureOnMainRunLoop();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SpeechRecognitionCaptureSourceImpl::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_2,void>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void *v7;
  unsigned __int8 *v8;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  WTF *v14;
  CFTypeRef v15;
  AudioBufferList *v16;
  _QWORD v17[4];
  _QWORD *v18;
  AudioBufferList *v19;
  CFTypeRef cf;
  WTF *v21;
  int v22;

  v1 = result[2];
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return result;
  v2 = result;
  v3 = result[1];
  v4 = result[3];
  v5 = result + 6;
  v6 = result[16];
  WebCore::WebAudioBufferList::WebAudioBufferList((WebCore::WebAudioBufferList *)v17, (const WebCore::CAAudioStreamDescription *)(result + 6));
  WebCore::WebAudioBufferList::setSampleCount(v17, v6);
  v8 = (unsigned __int8 *)(v3 + 72);
  if (__ldaxr((unsigned __int8 *)(v3 + 72)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3 + 72);
LABEL_7:
  if (*(_QWORD *)(v3 + 64) == v4)
  {
    v12 = v2[4];
    v11 = v2 + 4;
    WebCore::AudioSampleDataSource::pullSamples(v4, v19, v6, v12, 0);
    v13 = __ldxr(v8);
    if (v13 == 1)
    {
      if (!__stlxr(0, v8))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 72));
LABEL_18:
    (*(void (**)(_QWORD, _QWORD *, _QWORD *, _QWORD *, unint64_t))(**(_QWORD **)(v3 + 40) + 16))(*(_QWORD *)(v3 + 40), v11, v17, v5, v6);
    goto LABEL_19;
  }
  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 72));
LABEL_19:
  v14 = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    WTF::fastFree(v14, v7);
  }
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  v16 = v19;
  v19 = 0;
  if (v16)
    MEMORY[0x19AEA7644](v16, 0x1080C404ACF7207);
  result = v18;
  v18 = 0;
  if (result)
    return (_QWORD *)MEMORY[0x19AEA7644](result, 0x1080C404ACF7207);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SpeechRecognitionUpdate::error(void)::$_0,WebCore::SpeechRecognitionUpdate::error(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SpeechRecognitionUpdate::error(void)::$_0,WebCore::SpeechRecognitionUpdate::error(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a1 + 8);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  if (v2)
    *v2 += 2;
  *(_QWORD *)(a2 + 8) = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SpeechRecognitionUpdate::error(void)::$_0,WebCore::SpeechRecognitionUpdate::error(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SpeechRecognitionUpdate::result(void)::$_0,WebCore::SpeechRecognitionUpdate::result(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SpeechRecognitionUpdate::result(void)::$_0,WebCore::SpeechRecognitionUpdate::result(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SpeechRecognitionUpdate::result(void)::$_0,WebCore::SpeechRecognitionUpdate::result(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  return WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, a1);
}

uint64_t WebCore::SpeechRecognizer::SpeechRecognizer(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero[16];
  return a1;
}

uint64_t WebCore::SpeechRecognizer::abort(uint64_t result, char *a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  WTF::StringImpl *v6;
  int v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;

  v2 = *(_DWORD *)(result + 32);
  if (v2)
    v3 = v2 == 3;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = result;
    *(_DWORD *)(result + 32) = 3;
    if (a2[16])
    {
      v5 = *a2;
      v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      if (v6)
      {
        v7 = *(_DWORD *)v6;
        v11 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
        LOBYTE(v12) = 9;
        LOBYTE(v13) = v5;
        *(_DWORD *)v6 = v7 + 4;
        v14 = v6;
        v15 = 1;
        if (v7 == -2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 = v7 + 2;
      }
      else
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
        LOBYTE(v12) = 9;
        LOBYTE(v13) = v5;
        v14 = 0;
        v15 = 1;
      }
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8), &v11);
      if (v15 != -1)
        ((void (*)(char *, uint64_t *))off_1E3367210[v15])(&v16, &v13);
    }
    v8 = *(WTF **)(v4 + 24);
    if (v8)
    {
      *(_QWORD *)(v4 + 24) = 0;
      v9 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree(v8, a2);
      v10 = *(_QWORD *)(v4 + 8);
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
      LOBYTE(v12) = 6;
      LOBYTE(v13) = 0;
      v15 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 16))(v10, &v11);
      if (v15 != -1)
        ((void (*)(char *, uint64_t *))off_1E3367210[v15])(&v16, &v13);
    }
    return objc_msgSend(*(id *)(v4 + 40), "abort", v11, v12, v13, v14);
  }
  return result;
}

uint64_t WebCore::SpeechRecognizer::clientIdentifier(WebCore::SpeechRecognizer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 8);
}

uint64_t WebCore::SpeechRecognizer::stop(uint64_t this, void *a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[16];
  int v11;
  char v12;

  v2 = *(_DWORD *)(this + 32);
  if (v2)
    v3 = v2 == 3;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = this;
    *(_DWORD *)(this + 32) = 2;
    v5 = *(WTF **)(this + 24);
    if (v5)
    {
      *(_QWORD *)(this + 24) = 0;
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v5, a2);
      v7 = *(_QWORD *)(v4 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
      v9 = 6;
      v10[0] = 0;
      v11 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v8);
      if (v11 != -1)
        ((void (*)(char *, _BYTE *))off_1E3367210[v11])(&v12, v10);
    }
    return objc_msgSend(*(id *)(v4 + 40), "stop");
  }
  return this;
}

uint64_t WebCore::SpeechRecognizer::prepareForDestruction(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE v7[16];
  int v8;
  char v9;

  if (*(_DWORD *)(this + 32))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = 0;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3367238;
    v4 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = v3;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
    v6 = 10;
    v7[0] = 0;
    v8 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v5);
    if (v8 != -1)
      ((void (*)(char *, _BYTE *))off_1E3367210[v8])(&v9, v7);
    *(_DWORD *)(v1 + 32) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

WTF::StringImpl *WebCore::SpeechRecognizer::start(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *result;
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  char v32;
  char v33[8];
  WTF::StringImpl *v34;
  int v35;
  _QWORD *v36;
  WTF::StringImpl *v37;
  char v38;

  if (WebCore::SpeechRecognizer::startRecognition((uint64_t *)a1, a3, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (_QWORD *)(*(_QWORD *)(a1 + 16) + 16), *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 24), *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 25), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)))
  {
    *(_DWORD *)(a1 + 32) = 1;
    v5 = *(_QWORD *)(a1 + 8);
    v31 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 8);
    v32 = 0;
    v33[0] = 0;
    v35 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, &v31);
    if (v35 != -1)
      ((void (*)(_QWORD **, char *))off_1E3367210[v35])(&v36, v33);
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      goto LABEL_11;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a1;
    v8 = *(unsigned int **)a1;
    *(_QWORD *)a1 = v6;
    if (!v8)
      goto LABEL_11;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
LABEL_11:
      do
        v11 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v11 + 1, (unsigned int *)v6));
      v12 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        goto LABEL_40;
    }
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = a1;
    v14 = *(unsigned int **)a1;
    *(_QWORD *)a1 = v12;
    if (!v14)
      goto LABEL_40;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    v12 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
LABEL_40:
      do
        v17 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v17 + 1, (unsigned int *)v12));
    }
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = &off_1E3367260;
    *((_QWORD *)v20 + 1) = v6;
    v31 = v20;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = &off_1E3367288;
    v21[1] = v12;
    v36 = v21;
    v22 = WTF::fastMalloc((WTF *)0x50);
    *v19 = WebCore::SpeechRecognitionCaptureSourceImpl::SpeechRecognitionCaptureSourceImpl(v22, v18, (uint64_t *)&v31, (uint64_t *)&v36, a2);
    if (v36)
      (*(void (**)(_QWORD *))(*v36 + 8))(v36);
    result = v31;
    if (v31)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
    v25 = *(WTF **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v19;
    if (v25)
    {
      v26 = *(_QWORD *)v25;
      *(_QWORD *)v25 = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      return (WTF::StringImpl *)WTF::fastFree(v25, v23);
    }
  }
  else
  {
    LOBYTE(v36) = 5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = v37;
    if (v37)
    {
      v29 = *(_DWORD *)v37;
      v31 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 8);
      v32 = 9;
      v33[0] = 5;
      *(_DWORD *)v37 = v29 + 4;
      v34 = v28;
      v35 = 1;
      if (v29 == -2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 = v29 + 2;
    }
    else
    {
      v31 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 8);
      v32 = 9;
      v33[0] = 5;
      v34 = 0;
      v35 = 1;
    }
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v31);
    if (v35 != -1)
      ((void (*)(char *, char *))off_1E3367210[v35])(&v38, v33);
    result = v37;
    v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::SpeechSynthesis::create@<X0>(WebCore::SpeechSynthesis *this@<X0>, WebCore::SpeechSynthesis **a2@<X8>)
{
  WebCore::SpeechSynthesis *v5;
  WebCore::SpeechSynthesis *v6;

  v5 = (WebCore::SpeechSynthesis *)bmalloc::api::isoAllocate();
  v6 = WebCore::SpeechSynthesis::SpeechSynthesis(v5, this);
  *a2 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6 + 4);
}

WebCore::SpeechSynthesis *WebCore::SpeechSynthesis::SpeechSynthesis(WebCore::SpeechSynthesis *this, WebCore::ScriptExecutionContext *a2)
{
  char *v4;
  char *v5;
  WebCore::ScriptExecutionContext *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v38;
  _BYTE v39[24];
  char *v40;

  *(_QWORD *)this = &unk_1E33672B0;
  *((_QWORD *)this + 1) = off_1E3367308;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 1;
  v5 = (char *)this + 32;
  v6 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v7 = (char *)a2 - 192;
    v8 = *((_QWORD *)a2 + 64);
    if (v8)
    {
      v9 = *(char **)(v8 + 8);
      if (v9)
        v7 = v9;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v7 + 192);
  }
  *((_QWORD *)this + 4) = &off_1E33A18C0;
  *((_QWORD *)this + 5) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::SpeechSynthesis *)((char *)this + 32), v6);
  *((_QWORD *)this + 4) = &off_1E33A0540;
  *((_QWORD *)this + 6) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19550A2E8);
  }
  v40 = v5;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v40, (uint64_t)v39);
  *(_QWORD *)this = off_1E3366D48;
  *((_QWORD *)this + 1) = &unk_1E3366E18;
  *((_QWORD *)this + 4) = &unk_1E3366E70;
  *((_QWORD *)this + 7) = &unk_1E3366EC8;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_DWORD *)this + 39) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  if (!*((_BYTE *)a2 + 274))
  {
    *((_DWORD *)a2 - 42) += 2;
    v11 = *((_QWORD *)a2 + 42);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 280) + 88);
        if (v13)
        {
          if (*(WebCore::ScriptExecutionContext **)(v12 + 296) == (WebCore::ScriptExecutionContext *)((char *)a2 - 192))
          {
            v14 = *(_DWORD *)(v13 + 24);
            *(_DWORD *)(v13 + 24) = v14 + 1;
            v15 = *(unsigned __int8 *)(v13 + 3520);
            if (v14)
            {
              *(_DWORD *)(v13 + 24) = v14;
              if (v15)
                goto LABEL_14;
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
              if (v15)
              {
LABEL_14:
                if ((v15 & 0xFE) != 2)
                {
LABEL_16:
                  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 42) + 8) + 24) + 8)
                                  + 272);
                  if (v16)
                  {
                    v17 = *(_QWORD *)(v16 + 8);
                    if (v17)
                      goto LABEL_56;
                    v17 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v17 = 1;
                    *(_QWORD *)(v17 + 8) = v16;
                    v18 = *(unsigned int **)(v16 + 8);
                    *(_QWORD *)(v16 + 8) = v17;
                    if (!v18)
                      goto LABEL_56;
                    do
                    {
                      v19 = __ldaxr(v18);
                      v20 = v19 - 1;
                    }
                    while (__stlxr(v20, v18));
                    if (!v20)
                    {
                      atomic_store(1u, v18);
                      WTF::fastFree((WTF *)v18, v10);
                    }
                    v17 = *(_QWORD *)(v16 + 8);
                    if (v17)
                    {
LABEL_56:
                      do
                        v21 = __ldaxr((unsigned int *)v17);
                      while (__stlxr(v21 + 1, (unsigned int *)v17));
                    }
                  }
                  else
                  {
                    v17 = 0;
                  }
                  v22 = (unsigned int *)*((_QWORD *)this + 20);
                  *((_QWORD *)this + 20) = v17;
                  if (v22)
                  {
                    do
                    {
                      v23 = __ldaxr(v22);
                      v24 = v23 - 1;
                    }
                    while (__stlxr(v24, v22));
                    if (!v24)
                    {
                      atomic_store(1u, v22);
                      WTF::fastFree((WTF *)v22, v10);
                    }
                  }
                  if (*((_DWORD *)a2 - 42) == 2)
                  {
                    if ((*((_WORD *)a2 - 81) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::ScriptExecutionContext *)((char *)a2 - 192), v10);
                  }
                  else
                  {
                    *((_DWORD *)a2 - 42) -= 2;
                  }
                  goto LABEL_32;
                }
LABEL_15:
                *((_DWORD *)this + 39) = 1;
                goto LABEL_16;
              }
            }
          }
        }
      }
    }
    if ((*(_QWORD *)(*((_QWORD *)a2 + 61) + 688) & 0x100000000000) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_32:
  v25 = *((_QWORD *)this + 20);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
    {
      v27 = *((_QWORD *)this + 2);
      if (v27)
        goto LABEL_57;
      v27 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = v4;
      v29 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v27;
      if (!v29)
        goto LABEL_57;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v28);
      }
      v27 = *((_QWORD *)this + 2);
      if (v27)
      {
LABEL_57:
        do
          v32 = __ldaxr((unsigned int *)v27);
        while (__stlxr(v32 + 1, (unsigned int *)v27));
      }
      v38 = (WTF *)v27;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v26 + 16))(v26, &v38);
      v34 = (unsigned int *)v38;
      v38 = 0;
      if (v34)
      {
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v34);
          WTF::fastFree((WTF *)v34, v33);
        }
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 20) + 8) + 72))(*(_QWORD *)(*((_QWORD *)this + 20) + 8));
    }
  }
  return this;
}

void WebCore::SpeechSynthesis::~SpeechSynthesis(WebCore::SpeechSynthesis *this, void *a2)
{
  WebCore::ActiveDOMObject *v3;
  WebCore::EventTarget *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  WebCore::SpeechSynthesisUtterance *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  _DWORD *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  bmalloc::api *v24;
  void *v25;

  *(_QWORD *)this = off_1E3366D48;
  *((_QWORD *)this + 1) = &unk_1E3366E18;
  *((_QWORD *)this + 4) = &unk_1E3366E70;
  v3 = (WebCore::SpeechSynthesis *)((char *)this + 32);
  *((_QWORD *)this + 7) = &unk_1E3366EC8;
  v4 = (WebCore::SpeechSynthesis *)((char *)this + 56);
  v5 = (unsigned int *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::Deque<WTF::Ref<WebCore::SpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::SpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::SpeechSynthesisUtterance>>,0ul>::destroyAll((uint64_t)this + 120, a2);
  v9 = (WTF *)*((_QWORD *)this + 17);
  if (v9)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v9, v8);
  }
  v10 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    v11 = *(WebCore::SpeechSynthesisUtterance **)v10;
    *((_DWORD *)v11 + 22) = *(_DWORD *)(*(_QWORD *)v10 + 88) - 1;
    *(_QWORD *)v10 = 0;
    if (*((_DWORD *)v11 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v11, v8);
      bmalloc::api::isoDeallocate(v24, v25);
    }
    else
    {
      --*((_DWORD *)v11 + 8);
    }
    WTF::fastFree(v10, v8);
  }
  if (*((_BYTE *)this + 104))
  {
    v12 = *((unsigned int *)this + 25);
    if ((_DWORD)v12)
    {
      v13 = (_DWORD **)*((_QWORD *)this + 11);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          else
            --v15[2];
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v16 = (WTF *)*((_QWORD *)this + 11);
    if (v16)
    {
      *((_QWORD *)this + 11) = 0;
      *((_DWORD *)this + 24) = 0;
      WTF::fastFree(v16, v8);
    }
  }
  v17 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  WebCore::EventTarget::~EventTarget(v4, v8);
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3, v18);
  v20 = *((_QWORD *)this + 2);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    v21 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v19);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechSynthesis::~SpeechSynthesis(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SpeechSynthesis::~SpeechSynthesis(WebCore::SpeechSynthesis *this, void *a2)
{
  WebCore::SpeechSynthesis::~SpeechSynthesis((WebCore::SpeechSynthesis *)((char *)this - 8), a2);
}

{
  WebCore::SpeechSynthesis::~SpeechSynthesis((WebCore::SpeechSynthesis *)((char *)this - 32), a2);
}

{
  WebCore::SpeechSynthesis::~SpeechSynthesis((WebCore::SpeechSynthesis *)((char *)this - 56), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechSynthesis::~SpeechSynthesis((WebCore::SpeechSynthesis *)((char *)this - 8), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechSynthesis::~SpeechSynthesis((WebCore::SpeechSynthesis *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechSynthesis::~SpeechSynthesis((WebCore::SpeechSynthesis *)((char *)this - 56), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::SpeechSynthesis::setPlatformSynthesizer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;
  unsigned int *result;
  unsigned int v14;
  unsigned int v15;

  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)(v3 + 8);
  v4 = *(_DWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD ***)(a1 + 88);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (v8[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          else
            --v8[2];
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v9 = *(WTF **)(a1 + 88);
    if (v9)
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v9, a2);
    }
    *(_BYTE *)(a1 + 104) = 0;
  }
  WTF::Deque<WTF::Ref<WebCore::SpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::SpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::SpeechSynthesisUtterance>>,0ul>::destroyAll(a1 + 120, a2);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v11 = *(WTF **)(a1 + 136);
  if (v11)
  {
    *(_QWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    WTF::fastFree(v11, v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  *(_BYTE *)(a1 + 152) = 0;
  result = *(unsigned int **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (result)
  {
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v12);
    }
  }
  return result;
}

uint64_t WebCore::SpeechSynthesis::voicesDidChange(WebCore::SpeechSynthesis *this, void *a2)
{
  WebCore::SpeechSynthesis *v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  _DWORD *v15;
  uint64_t result;

  v2 = this;
  if (*((_BYTE *)this + 104))
  {
    v3 = *((unsigned int *)this + 25);
    if ((_DWORD)v3)
    {
      v4 = (_DWORD **)*((_QWORD *)this + 11);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (v6[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[2];
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    this = (WebCore::SpeechSynthesis *)*((_QWORD *)v2 + 11);
    if (this)
    {
      *((_QWORD *)v2 + 11) = 0;
      *((_DWORD *)v2 + 24) = 0;
      this = (WebCore::SpeechSynthesis *)WTF::fastFree(this, a2);
    }
    *((_BYTE *)v2 + 104) = 0;
  }
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(this);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = (char *)v2 + 56;
  v11 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
  *(_QWORD *)v11 = off_1E33A4B48;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8200;
  v14 = *(_QWORD *)(v9 + 2256) != 0;
  *(_DWORD *)(v11 + 16) = 1;
  *(_DWORD *)(v11 + 20) = v13 | v14;
  v15 = *(_DWORD **)(v9 + 2256);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(v11 + 24) = v15;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = v12;
  *(_QWORD *)(v11 + 64) = 0;
  result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v10 + 48))(v10, v11);
  if (*(_DWORD *)(v11 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  --*(_DWORD *)(v11 + 16);
  return result;
}

WTF **WebCore::SpeechSynthesis::getVoices(WTF **this, void *a2)
{
  WTF **v2;
  WTF **v3;
  WTF *v4;
  WTF **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;

  v2 = this + 11;
  if (*((_BYTE *)this + 104))
    return v2;
  v3 = this;
  v4 = this[20];
  if (v4 && (this = (WTF **)*((_QWORD *)v4 + 1)) != 0)
  {
    this = (WTF **)(*((uint64_t (**)(WTF **))*this + 4))(this);
    v5 = this;
  }
  else
  {
    v6 = (uint64_t)v3[10];
    if (!v6)
    {
      v6 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v6 + 8) = 1;
      *(_QWORD *)v6 = off_1E3209BC0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_BYTE *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = v3;
      *(_QWORD *)(v6 + 48) = 0;
      this = (WTF **)v3[10];
      v3[10] = (WTF *)v6;
      if (this)
      {
        if (*((_DWORD *)this + 2) == 1)
        {
          this = (WTF **)(*((uint64_t (**)(WTF **))*this + 1))(this);
          v6 = (uint64_t)v3[10];
        }
        else
        {
          --*((_DWORD *)this + 2);
        }
      }
    }
    if (!*(_BYTE *)(v6 + 32))
    {
      this = (WTF **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      *(_BYTE *)(v6 + 32) = 1;
    }
    v5 = (WTF **)(v6 + 16);
  }
  v7 = *((unsigned int *)v5 + 3);
  if (!(_DWORD)v7)
  {
    LODWORD(v9) = 0;
    v8 = 0;
LABEL_20:
    if (*((_BYTE *)v3 + 104))
    {
      v13 = *((unsigned int *)v3 + 25);
      if ((_DWORD)v13)
      {
        v14 = *v2;
        v15 = 8 * v13;
        do
        {
          v16 = *(_DWORD **)v14;
          *(_QWORD *)v14 = 0;
          if (v16)
          {
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[2];
          }
          v14 = (WTF *)((char *)v14 + 8);
          v15 -= 8;
        }
        while (v15);
      }
      v17 = *v2;
      if (*v2)
      {
        v3[11] = 0;
        *((_DWORD *)v3 + 24) = 0;
        WTF::fastFree(v17, a2);
      }
      v3[11] = (WTF *)v8;
      *((_DWORD *)v3 + 24) = v7;
      *((_DWORD *)v3 + 25) = v9;
      if (*((_BYTE *)v3 + 104))
        return v2;
      __break(1u);
    }
    v3[11] = (WTF *)v8;
    *((_DWORD *)v3 + 24) = v7;
    *((_DWORD *)v3 + 25) = v9;
    *((_BYTE *)v3 + 104) = 1;
    return v2;
  }
  if (!(v7 >> 29))
  {
    v8 = WTF::fastMalloc((WTF *)(8 * v7));
    if (*((_DWORD *)v5 + 3))
    {
      v9 = 0;
      do
      {
        v10 = v9;
        v11 = (_DWORD *)*((_QWORD *)*v5 + v9);
        v12 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)(v12 + 8) = 1;
        *(_QWORD *)v12 = off_1E33671C0;
        ++*v11;
        *(_QWORD *)(v12 + 16) = v11;
        v9 = v10 + 1;
        *(_QWORD *)(v8 + 8 * v10) = v12;
      }
      while (v10 + 1 < (unint64_t)*((unsigned int *)v5 + 3));
    }
    else
    {
      LODWORD(v9) = 0;
    }
    goto LABEL_20;
  }
  __break(0xC471u);
  return this;
}

WTF *WebCore::SpeechSynthesis::startSpeakingImmediately(WebCore::SpeechSynthesis *this, WebCore::SpeechSynthesisUtterance *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  int v7;
  WTF *v8;
  WebCore::SpeechSynthesisUtterance *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF *result;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  bmalloc::api *v18;
  void *v19;
  bmalloc::api *v20;
  void *v21;
  WTF *v22;
  WTF *v23;

  WTF::MonotonicTime::now(this);
  *(_QWORD *)(*((_QWORD *)a2 + 8) + 56) = v4;
  ++*((_DWORD *)a2 + 8);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v7 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7 + 1;
  *v5 = a2;
  ++*((_DWORD *)a2 + 22);
  v8 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v5;
  if (v8)
  {
    v9 = *(WebCore::SpeechSynthesisUtterance **)v8;
    *((_DWORD *)v9 + 22) = *(_DWORD *)(*(_QWORD *)v8 + 88) - 1;
    *(_QWORD *)v8 = 0;
    if (*((_DWORD *)v9 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v9, v6);
      bmalloc::api::isoDeallocate(v20, v21);
    }
    else
    {
      --*((_DWORD *)v9 + 8);
    }
    WTF::fastFree(v8, v6);
    v7 = *((_DWORD *)a2 + 8) - 1;
  }
  if (v7)
  {
    *((_DWORD *)a2 + 8) = v7;
  }
  else
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(a2, v6);
    bmalloc::api::isoDeallocate(v18, v19);
  }
  *((_BYTE *)this + 152) = 0;
  v10 = *((_QWORD *)this + 20);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = (WTF *)*((_QWORD *)a2 + 8);
      if (v12)
        ++*(_DWORD *)v12;
      v23 = v12;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v11 + 40))(v11, &v23);
      result = v23;
      v23 = 0;
      if (!result)
        return result;
      return WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(result, v13);
    }
  }
  v15 = *((_QWORD *)this + 10);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v15 + 8) = 1;
    *(_QWORD *)v15 = off_1E3209BC0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_BYTE *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = this;
    *(_QWORD *)(v15 + 48) = 0;
    v16 = (_DWORD *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v15;
    if (v16)
    {
      if (v16[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        v15 = *((_QWORD *)this + 10);
      }
      else
      {
        --v16[2];
      }
    }
  }
  v17 = (WTF *)*((_QWORD *)a2 + 8);
  if (v17)
    ++*(_DWORD *)v17;
  v22 = v17;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v15 + 16))(v15, &v22);
  result = v22;
  v22 = 0;
  if (result)
    return WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(result, v13);
  return result;
}

WTF *WebCore::SpeechSynthesis::speak(WebCore::SpeechSynthesis *this, WebCore::SpeechSynthesisUtterance *a2)
{
  WTF *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = (WTF *)WTF::isMainThread(this);
  if (!(_DWORD)result)
    goto LABEL_4;
  {
    WebCore::currentToken(void)::token = 0;
    goto LABEL_4;
  }
  if (!WebCore::currentToken(void)::token
    || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
    || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
  {
LABEL_4:
    if ((*((_BYTE *)this + 156) & 1) != 0)
      return result;
    goto LABEL_5;
  }
  *((_DWORD *)this + 39) &= ~1u;
LABEL_5:
  result = (WTF *)WTF::Deque<WTF::Ref<WebCore::SpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::SpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::SpeechSynthesisUtterance>>,0ul>::append<WebCore::SpeechSynthesisUtterance&>((uint64_t)this + 120, (uint64_t)a2);
  v5 = *((_QWORD *)this + 15);
  v6 = *((_QWORD *)this + 16);
  v7 = v6;
  if (v5 > v6)
    v7 = v6 + *((unsigned int *)this + 36);
  if (v7 - v5 == 1)
  {
    if (v5 == v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19550ACC0);
    }
    return WebCore::SpeechSynthesis::startSpeakingImmediately(this, *(WebCore::SpeechSynthesisUtterance **)(*((_QWORD *)this + 17) + 8 * v5));
  }
  return result;
}

uint64_t WTF::Deque<WTF::Ref<WebCore::SpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::SpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::SpeechSynthesisUtterance>>,0ul>::append<WebCore::SpeechSynthesisUtterance&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_18;
    LODWORD(v5) = *(_DWORD *)(result + 24);
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_18;
    }
    else if ((_DWORD)v5)
    {
      goto LABEL_18;
    }
  }
  v6 = v5;
  v7 = ((unint64_t)v5 >> 2) + v5;
  if (v7 <= 0xF)
    v7 = 15;
  if (v7 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v8 = *(char **)(result + 16);
  v9 = v7 + 1;
  v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
  *(_DWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 16) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 > v11)
  {
    memcpy(v10, v8, 8 * v11);
    v12 = *(_QWORD *)v3 - v6 + *(unsigned int *)(v3 + 24);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v12), &v8[8 * *(_QWORD *)v3], 8 * v6 - 8 * *(_QWORD *)v3);
    *(_QWORD *)v3 = v12;
    if (!v8)
      goto LABEL_18;
LABEL_15:
    if (*(char **)(v3 + 16) == v8)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v8, v13);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy(&v10[8 * *(_QWORD *)v3], &v8[8 * *(_QWORD *)v3], 8 * v11 - 8 * *(_QWORD *)v3);
  if (v8)
    goto LABEL_15;
LABEL_18:
  v14 = *(_QWORD *)(v3 + 8);
  v15 = *(_DWORD *)(a2 + 32) + 1;
  *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v14) = a2;
  *(_DWORD *)(a2 + 32) = v15;
  if (v14 == *(unsigned int *)(v3 + 24) - 1)
    v16 = 0;
  else
    v16 = v14 + 1;
  *(_QWORD *)(v3 + 8) = v16;
  return result;
}

uint64_t WebCore::SpeechSynthesis::cancel(WebCore::SpeechSynthesis *this, void *a2)
{
  WebCore::SpeechSynthesisUtterance **v3;
  WebCore::SpeechSynthesisUtterance *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  WTF *v10;
  WebCore::SpeechSynthesisUtterance *v11;
  bmalloc::api *v12;
  void *v13;
  bmalloc::api *v14;
  void *v15;

  v3 = (WebCore::SpeechSynthesisUtterance **)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
      ++*((_DWORD *)v4 + 8);
  }
  else
  {
    v4 = 0;
  }
  WTF::Deque<WTF::Ref<WebCore::SpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::SpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::SpeechSynthesisUtterance>>,0ul>::destroyAll((uint64_t)this + 120, a2);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v6 = (WTF *)*((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v6, v5);
  }
  v7 = *((_QWORD *)this + 20);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    result = (*(uint64_t (**)(WebCore::SpeechSynthesis *))(*(_QWORD *)this + 120))(this);
    v10 = (WTF *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v10)
    {
      v11 = *(WebCore::SpeechSynthesisUtterance **)v10;
      *((_DWORD *)v11 + 22) = *(_DWORD *)(*(_QWORD *)v10 + 88) - 1;
      *(_QWORD *)v10 = 0;
      if (*((_DWORD *)v11 + 8) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v11, v5);
        bmalloc::api::isoDeallocate(v14, v15);
      }
      else
      {
        --*((_DWORD *)v11 + 8);
      }
      result = WTF::fastFree(v10, v5);
    }
  }
  else
  {
    result = *((_QWORD *)this + 10);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  if (v4)
  {
    if (*((_DWORD *)v4 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v4, v5);
      return bmalloc::api::isoDeallocate(v12, v13);
    }
    else
    {
      --*((_DWORD *)v4 + 8);
    }
  }
  return result;
}

uint64_t WebCore::SpeechSynthesis::handleSpeakingCompleted(WTF **this, WebCore::SpeechSynthesisUtterance *a2, int a3)
{
  WebCore::SpeechSynthesis *v5;
  WTF *v6;
  WebCore::SpeechSynthesisUtterance *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WebCore::SpeechSynthesisUtterance *v19;
  uint64_t v20;
  unint64_t v21;
  bmalloc::api *v22;
  void *v23;
  bmalloc::api *v24;
  void *v25;
  bmalloc::api *v26;
  void *v27;
  bmalloc::api *v28;
  void *v29;
  WTF::StringImpl *v30;

  v5 = (WebCore::SpeechSynthesis *)this;
  ++*((_DWORD *)a2 + 8);
  v6 = this[14];
  this[14] = 0;
  if (v6)
  {
    v7 = *(WebCore::SpeechSynthesisUtterance **)v6;
    *((_DWORD *)v7 + 22) = *(_DWORD *)(*(_QWORD *)v6 + 88) - 1;
    *(_QWORD *)v6 = 0;
    if (*((_DWORD *)v7 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v7, a2);
      bmalloc::api::isoDeallocate(v24, v25);
    }
    else
    {
      --*((_DWORD *)v7 + 8);
    }
    this = (WTF **)WTF::fastFree(v6, a2);
  }
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (a3)
  {
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    result = (uint64_t)WebCore::SpeechSynthesisUtterance::errorEventOccurred((uint64_t)a2, (_QWORD *)(v10 + 784), 0);
  }
  else
  {
    if (!v8 || (v13 = *(_QWORD *)(v8 + 96)) == 0)
      v13 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v14 = *(_QWORD *)(v13 + 40);
    if (!v14)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
      v14 = *(_QWORD *)(v13 + 40);
    }
    v30 = 0;
    result = (uint64_t)WebCore::SpeechSynthesisUtterance::eventOccurred(a2, (const WTF::AtomString *)(v14 + 736), 0, 0, &v30);
  }
  v15 = *((_QWORD *)v5 + 15);
  v16 = *((_QWORD *)v5 + 16);
  v17 = v16;
  if (v15 > v16)
    v17 = v16 + *((unsigned int *)v5 + 36);
  if (v17 != v15)
  {
    if (v15 == v16)
    {
      result = 80;
      __break(0xC471u);
      return result;
    }
    v18 = *((_QWORD *)v5 + 17);
    v19 = *(WebCore::SpeechSynthesisUtterance **)(v18 + 8 * v15);
    *(_QWORD *)(v18 + 8 * v15) = 0;
    v20 = *((_QWORD *)v5 + 17);
    result = *(_QWORD *)(v20 + 8 * v15);
    *(_QWORD *)(v20 + 8 * v15) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 32) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)result, v12);
        result = bmalloc::api::isoDeallocate(v26, v27);
        v15 = *((_QWORD *)v5 + 15);
        v16 = *((_QWORD *)v5 + 16);
      }
      else
      {
        --*(_DWORD *)(result + 32);
      }
    }
    if (v15 == *((unsigned int *)v5 + 36) - 1)
      v21 = 0;
    else
      v21 = v15 + 1;
    *((_QWORD *)v5 + 15) = v21;
    if (v21 != v16)
      result = (uint64_t)WebCore::SpeechSynthesis::startSpeakingImmediately(v5, *(WebCore::SpeechSynthesisUtterance **)(*((_QWORD *)v5 + 17) + 8 * v21));
    if (v19)
    {
      if (*((_DWORD *)v19 + 8) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v19, v12);
        result = bmalloc::api::isoDeallocate(v28, v29);
      }
      else
      {
        --*((_DWORD *)v19 + 8);
      }
    }
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(a2, v12);
    return bmalloc::api::isoDeallocate(v22, v23);
  }
  else
  {
    --*((_DWORD *)a2 + 8);
  }
  return result;
}

WTF *WebCore::SpeechSynthesisUtterance::errorEventOccurred(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  WTF *result;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    return (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a1);
  WTF::MonotonicTime::now(0);
  v9 = v8 - *(double *)(*(_QWORD *)(a1 + 64) + 56);
  ++*(_DWORD *)(a1 + 32);
  v10 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
  *(_QWORD *)(v10 + 8) = 0;
  v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | (*a2 != 0) | 0xD8200;
  *(_DWORD *)(v10 + 16) = 1;
  *(_DWORD *)(v10 + 20) = v12;
  v13 = (_DWORD *)*a2;
  if (*a2)
    *v13 += 2;
  *(_QWORD *)(v10 + 24) = v13;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = v11;
  ++*(_DWORD *)(a1 + 32);
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = a1;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(float *)(v10 + 96) = v9;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E3366F40;
  *(_DWORD *)(v10 + 112) = a3;
  result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(a1 + 40), (WebCore::Event *)v10);
  if (*(_DWORD *)(v10 + 16) == 1)
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  else
    --*(_DWORD *)(v10 + 16);
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)a1, v14);
    return (WTF *)bmalloc::api::isoDeallocate(v15, v16);
  }
  else
  {
    --*(_DWORD *)(a1 + 32);
  }
  return result;
}

WTF::MonotonicTime *WebCore::SpeechSynthesisUtterance::eventOccurred(WTF::MonotonicTime *this, const WTF::AtomString *a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v13;
  double v14;
  WTF::StringImpl *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  bmalloc::api *v22;
  void *v23;

  v6 = (uint64_t)this;
  if (!*((_QWORD *)this + 10))
  {
    WTF::MonotonicTime::now(this);
    v14 = v13 - *(double *)(*(_QWORD *)(v6 + 64) + 56);
    ++*(_DWORD *)(v6 + 32);
    v15 = *a5;
    if (v15)
      *(_DWORD *)v15 += 2;
    v16 = v14;
    v17 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
    *(_QWORD *)(v17 + 8) = 0;
    v19 = *(_DWORD *)(v17 + 20) & 0xFFC00000 | (*(_QWORD *)a2 != 0) | 0xE0200;
    *(_DWORD *)(v17 + 16) = 1;
    *(_DWORD *)(v17 + 20) = v19;
    v20 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v20 += 2;
    *(_QWORD *)(v17 + 24) = v20;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0;
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = v18;
    *(_QWORD *)v17 = off_1E3367008;
    ++*(_DWORD *)(v6 + 32);
    *(_QWORD *)(v17 + 64) = 0;
    *(_QWORD *)(v17 + 72) = v6;
    *(_QWORD *)(v17 + 80) = a3;
    *(_QWORD *)(v17 + 88) = a4;
    *(float *)(v17 + 96) = v16;
    if (v15)
      *(_DWORD *)v15 += 2;
    *(_QWORD *)(v17 + 104) = v15;
    this = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v6 + 40), (WebCore::Event *)v17);
    if (*(_DWORD *)(v17 + 16) == 1)
    {
      this = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (v15)
      {
LABEL_17:
        if (*(_DWORD *)v15 == 2)
          this = (WTF::MonotonicTime *)WTF::StringImpl::destroy(v15, v21);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    else
    {
      --*(_DWORD *)(v17 + 16);
      if (v15)
        goto LABEL_17;
    }
    if (*(_DWORD *)(v6 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v6, v21);
      return (WTF::MonotonicTime *)bmalloc::api::isoDeallocate(v22, v23);
    }
    else
    {
      --*(_DWORD *)(v6 + 32);
    }
    return this;
  }
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
  {
    this = (WTF::MonotonicTime *)WebCore::threadGlobalDataSlow(this);
    v8 = (uint64_t)this;
  }
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    this = (WTF::MonotonicTime *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  if (*(_QWORD *)a2 == *(_QWORD *)(v9 + 736))
    return (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 80) + 16))(*(_QWORD *)(v6 + 80), v6);
  return this;
}

WebCore *WebCore::SpeechSynthesis::boundaryEventOccurred(WebCore *result, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v7;
  WTF::MonotonicTime *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;

  if ((_MergedGlobals_109 & 1) == 0)
  {
    _MergedGlobals_34 += 2;
    qword_1EE337928 = (uint64_t)&_MergedGlobals_34;
    _MergedGlobals_109 = 1;
  }
  if ((byte_1EE337921 & 1) == 0)
  {
    dword_1ECE7B400 += 2;
    qword_1EE337930 = &dword_1ECE7B400;
    byte_1EE337921 = 1;
  }
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  if (v7)
    v8 = (WTF::MonotonicTime *)(v7 - 24);
  else
    v8 = 0;
  if (a3 == 1)
  {
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13 || (v10 = *(_QWORD *)(v13 + 96)) == 0)
      v10 = WebCore::threadGlobalDataSlow(result);
    v11 = *(_QWORD *)(v10 + 40);
    v12 = (WTF::StringImpl **)&qword_1EE337930;
    if (v11)
      return WebCore::SpeechSynthesisUtterance::eventOccurred(v8, (const WTF::AtomString *)(v11 + 312), a4, a5, v12);
    goto LABEL_21;
  }
  if (a3)
    return result;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(result);
  v11 = *(_QWORD *)(v10 + 40);
  v12 = (WTF::StringImpl **)&qword_1EE337928;
  if (!v11)
  {
LABEL_21:
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  return WebCore::SpeechSynthesisUtterance::eventOccurred(v8, (const WTF::AtomString *)(v11 + 312), a4, a5, v12);
}

uint64_t WebCore::SpeechSynthesis::didStartSpeaking(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v1 = *(uint64_t **)(this + 112);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
      ++*(_DWORD *)(v2 + 32);
    this = (**(uint64_t (***)(uint64_t, _QWORD))this)(this, *(_QWORD *)(v2 + 64));
    if (*(_DWORD *)(v2 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v2, v3);
      return bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)(v2 + 32);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::didStartSpeaking(uint64_t this)
{
  uint64_t *v1;
  uint64_t (***v2)(_QWORD, _QWORD);
  uint64_t v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v1 = *(uint64_t **)(this + 104);
  if (v1)
  {
    v2 = (uint64_t (***)(_QWORD, _QWORD))(this - 8);
    v3 = *v1;
    if (*v1)
      ++*(_DWORD *)(v3 + 32);
    this = (**v2)(v2, *(_QWORD *)(v3 + 64));
    if (*(_DWORD *)(v3 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v3, v4);
      return bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)(v3 + 32);
    }
  }
  return this;
}

_QWORD *WebCore::SpeechSynthesis::didFinishSpeaking(_QWORD *this)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v1 = (uint64_t *)this[14];
  if (v1)
  {
    v2 = *v1;
    if (*v1)
      ++*(_DWORD *)(v2 + 32);
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 8))(this, *(_QWORD *)(v2 + 64));
    if (*(_DWORD *)(v2 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v2, v3);
      return (_QWORD *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)(v2 + 32);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::didFinishSpeaking(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v1 = *(uint64_t **)(this + 104);
  if (v1)
  {
    v2 = this - 8;
    v3 = *v1;
    if (*v1)
      ++*(_DWORD *)(v3 + 32);
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 8))(v2, *(_QWORD *)(v3 + 64));
    if (*(_DWORD *)(v3 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v3, v4);
      return bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)(v3 + 32);
    }
  }
  return this;
}

_QWORD *WebCore::SpeechSynthesis::didPauseSpeaking(_QWORD *this)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v1 = (uint64_t *)this[14];
  if (v1)
  {
    v2 = *v1;
    if (*v1)
      ++*(_DWORD *)(v2 + 32);
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 16))(this, *(_QWORD *)(v2 + 64));
    if (*(_DWORD *)(v2 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v2, v3);
      return (_QWORD *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)(v2 + 32);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::didPauseSpeaking(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v1 = *(uint64_t **)(this + 104);
  if (v1)
  {
    v2 = this - 8;
    v3 = *v1;
    if (*v1)
      ++*(_DWORD *)(v3 + 32);
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *(_QWORD *)(v3 + 64));
    if (*(_DWORD *)(v3 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v3, v4);
      return bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)(v3 + 32);
    }
  }
  return this;
}

_QWORD *WebCore::SpeechSynthesis::didResumeSpeaking(_QWORD *this)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v1 = (uint64_t *)this[14];
  if (v1)
  {
    v2 = *v1;
    if (*v1)
      ++*(_DWORD *)(v2 + 32);
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 24))(this, *(_QWORD *)(v2 + 64));
    if (*(_DWORD *)(v2 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v2, v3);
      return (_QWORD *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)(v2 + 32);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::didResumeSpeaking(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v1 = *(uint64_t **)(this + 104);
  if (v1)
  {
    v2 = this - 8;
    v3 = *v1;
    if (*v1)
      ++*(_DWORD *)(v3 + 32);
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 24))(v2, *(_QWORD *)(v3 + 64));
    if (*(_DWORD *)(v3 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v3, v4);
      return bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)(v3 + 32);
    }
  }
  return this;
}

_QWORD *WebCore::SpeechSynthesis::speakingErrorOccurred(_QWORD *this)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v1 = (uint64_t *)this[14];
  if (v1)
  {
    v2 = *v1;
    if (*v1)
      ++*(_DWORD *)(v2 + 32);
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 32))(this, *(_QWORD *)(v2 + 64));
    if (*(_DWORD *)(v2 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v2, v3);
      return (_QWORD *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)(v2 + 32);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::speakingErrorOccurred(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v1 = *(uint64_t **)(this + 104);
  if (v1)
  {
    v2 = this - 8;
    v3 = *v1;
    if (*v1)
      ++*(_DWORD *)(v3 + 32);
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, *(_QWORD *)(v3 + 64));
    if (*(_DWORD *)(v3 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v3, v4);
      return bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)(v3 + 32);
    }
  }
  return this;
}

_QWORD *WebCore::SpeechSynthesis::boundaryEventOccurred(_QWORD *this, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v4 = (uint64_t *)this[14];
  if (v4)
  {
    v5 = *v4;
    if (*v4)
      ++*(_DWORD *)(v5 + 32);
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(*this + 40))(this, *(_QWORD *)(v5 + 64), a2 ^ 1u, a3, a4);
    if (*(_DWORD *)(v5 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v5, v6);
      return (_QWORD *)bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*(_DWORD *)(v5 + 32);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::boundaryEventOccurred(uint64_t this, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  v4 = *(uint64_t **)(this + 104);
  if (v4)
  {
    v5 = this - 8;
    v6 = *v4;
    if (*v4)
      ++*(_DWORD *)(v6 + 32);
    this = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v6 + 64), a2 ^ 1u, a3, a4);
    if (*(_DWORD *)(v6 + 32) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)v6, v7);
      return bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)(v6 + 32);
    }
  }
  return this;
}

uint64_t WebCore::SpeechSynthesis::voicesChanged(WebCore::SpeechSynthesis *this)
{
  return (*(uint64_t (**)(WebCore::SpeechSynthesis *))(*(_QWORD *)this + 48))(this);
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::voicesChanged(WebCore::SpeechSynthesis *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 1) + 48))((char *)this - 8);
}

WTF::MonotonicTime *WebCore::SpeechSynthesis::didStartSpeaking(WTF::MonotonicTime *this, PlatformSpeechSynthesisUtterance *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::MonotonicTime *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::MonotonicTime *v7;
  WTF::StringImpl *v8;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (WTF::MonotonicTime *)(v3 - 24);
      v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5 || (this = *(WTF::MonotonicTime **)(v5 + 96)) == 0)
        this = (WTF::MonotonicTime *)WebCore::threadGlobalDataSlow(this);
      v6 = *((_QWORD *)this + 5);
      if (!v6)
      {
        v7 = this;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
        v6 = *((_QWORD *)v7 + 5);
      }
      v8 = 0;
      return WebCore::SpeechSynthesisUtterance::eventOccurred(v4, (const WTF::AtomString *)(v6 + 1960), 0, 0, &v8);
    }
  }
  return this;
}

WTF::MonotonicTime *WebCore::SpeechSynthesis::didPauseSpeaking(WTF::MonotonicTime *this, PlatformSpeechSynthesisUtterance *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::MonotonicTime *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::MonotonicTime *v7;
  WTF::StringImpl *v8;

  *((_BYTE *)this + 152) = 1;
  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (WTF::MonotonicTime *)(v3 - 24);
      v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5 || (this = *(WTF::MonotonicTime **)(v5 + 96)) == 0)
        this = (WTF::MonotonicTime *)WebCore::threadGlobalDataSlow(this);
      v6 = *((_QWORD *)this + 5);
      if (!v6)
      {
        v7 = this;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
        v6 = *((_QWORD *)v7 + 5);
      }
      v8 = 0;
      return WebCore::SpeechSynthesisUtterance::eventOccurred(v4, (const WTF::AtomString *)(v6 + 1424), 0, 0, &v8);
    }
  }
  return this;
}

WTF::MonotonicTime *WebCore::SpeechSynthesis::didResumeSpeaking(WTF::MonotonicTime *this, PlatformSpeechSynthesisUtterance *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::MonotonicTime *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::MonotonicTime *v7;
  WTF::StringImpl *v8;

  *((_BYTE *)this + 152) = 0;
  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (WTF::MonotonicTime *)(v3 - 24);
      v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5 || (this = *(WTF::MonotonicTime **)(v5 + 96)) == 0)
        this = (WTF::MonotonicTime *)WebCore::threadGlobalDataSlow(this);
      v6 = *((_QWORD *)this + 5);
      if (!v6)
      {
        v7 = this;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
        v6 = *((_QWORD *)v7 + 5);
      }
      v8 = 0;
      return WebCore::SpeechSynthesisUtterance::eventOccurred(v4, (const WTF::AtomString *)(v6 + 1720), 0, 0, &v8);
    }
  }
  return this;
}

WTF **WebCore::SpeechSynthesis::didFinishSpeaking(WTF **this, PlatformSpeechSynthesisUtterance *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return (WTF **)WebCore::SpeechSynthesis::handleSpeakingCompleted(this, (WebCore::SpeechSynthesisUtterance *)(v3 - 24), 0);
  }
  return this;
}

WTF **WebCore::SpeechSynthesis::speakingErrorOccurred(WTF **this, PlatformSpeechSynthesisUtterance *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return (WTF **)WebCore::SpeechSynthesis::handleSpeakingCompleted(this, (WebCore::SpeechSynthesisUtterance *)(v3 - 24), 1);
  }
  return this;
}

_QWORD *WebCore::SpeechSynthesis::simulateVoicesListChange(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this[20];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = 17;
  }
  else
  {
    if (!this[10])
      return this;
    v2 = 6;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v2))();
}

BOOL WebCore::SpeechSynthesis::virtualHasPendingActivity(WebCore::SpeechSynthesis *this)
{
  return *((_BYTE *)this + 104) && *((_BYTE *)this + 168) != 0;
}

BOOL `non-virtual thunk to'WebCore::SpeechSynthesis::virtualHasPendingActivity(WebCore::SpeechSynthesis *this)
{
  return *((_BYTE *)this + 72) && *((_BYTE *)this + 136) != 0;
}

WebCore::EventNames **WebCore::SpeechSynthesis::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[9];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 2256);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 168) = v6;
  return this;
}

WebCore::EventNames **`non-virtual thunk to'WebCore::SpeechSynthesis::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 2256);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 112) = v6;
  return this;
}

void *WebCore::SpeechSynthesisUtterance::bisoHeap(WebCore::SpeechSynthesisUtterance *this)
{
  return &WebCore::SpeechSynthesisUtterance::bisoHeap(void)::heap;
}

uint64_t WebCore::SpeechSynthesisUtterance::operator new(uint64_t this)
{
  if (this == 96)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

_QWORD *WebCore::SpeechSynthesisUtterance::create@<X0>(WebCore::SpeechSynthesisUtterance *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  uint64_t v30;

  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_QWORD *)(v7 + 24) = 0;
  v9 = (unsigned int **)(v7 + 24);
  *(_DWORD *)(v7 + 32) = 1;
  if (!*((_BYTE *)this + 274))
  {
    v10 = (char *)this - 192;
    v11 = *((_QWORD *)this + 64);
    if (v11)
    {
      v12 = *(char **)(v11 + 8);
      if (v12)
        v10 = v12;
    }
    this = (WebCore::SpeechSynthesisUtterance *)(v10 + 192);
  }
  *(_QWORD *)v7 = &off_1E33A18C0;
  *(_QWORD *)(v7 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v7, this);
  *(_QWORD *)v8 = &off_1E33A0540;
  *(_QWORD *)(v8 + 16) = 0;
  if (*((_BYTE *)this + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19550C11CLL);
  }
  v30 = v8;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 16, &v30, (uint64_t)&v29);
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)v8 = &off_1E33670D0;
  *(_QWORD *)(v8 + 40) = &unk_1E3367148;
  v14 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v14 = 1;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15)
    goto LABEL_25;
  v15 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v9;
  v16 = *v9;
  *v9 = (unsigned int *)v15;
  if (!v16)
    goto LABEL_25;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v13);
  }
  v15 = (uint64_t)*v9;
  if (*v9)
  {
LABEL_25:
    do
      v19 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v19 + 1, (unsigned int *)v15));
  }
  *(_QWORD *)(v14 + 8) = v15;
  *(_QWORD *)(v14 + 16) = 0;
  v20 = (WTF::StringImpl **)(v14 + 16);
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v14 + 40) = _D0;
  *(_DWORD *)(v14 + 48) = 1065353216;
  *(_QWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v8 + 64) = v14;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_DWORD *)(v8 + 88) = 0;
  v26 = *a2;
  if (*a2)
    *(_DWORD *)v26 += 2;
  v27 = *v20;
  *v20 = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v27 -= 2;
  }
  *a4 = v8;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8);
}

WebCore::ContextDestructionObserver *WebCore::SpeechSynthesisUtterance::SpeechSynthesisUtterance(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, _DWORD **a3, uint64_t *a4)
{
  WebCore::ScriptExecutionContext *v6;
  unsigned int **v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  WebCore::ContextDestructionObserver *v30;

  v6 = a2;
  *((_QWORD *)this + 3) = 0;
  v8 = (unsigned int **)((char *)this + 24);
  *((_DWORD *)this + 8) = 1;
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19550C2FCLL);
  }
  v30 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v30, (uint64_t)&v29);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_1E33670D0;
  *((_QWORD *)this + 5) = &unk_1E3367148;
  v13 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v13 = 1;
  v14 = *((_QWORD *)this + 3);
  if (v14)
    goto LABEL_25;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v8;
  v15 = *v8;
  *v8 = (unsigned int *)v14;
  if (!v15)
    goto LABEL_25;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v12);
  }
  v14 = (uint64_t)*v8;
  if (*v8)
  {
LABEL_25:
    do
      v18 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v18 + 1, (unsigned int *)v14));
  }
  *(_QWORD *)(v13 + 8) = v14;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v13 + 40) = _D0;
  *(_DWORD *)(v13 + 48) = 1065353216;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *((_QWORD *)this + 8) = v13;
  *((_QWORD *)this + 9) = 0;
  v24 = *a4;
  *a4 = 0;
  *((_QWORD *)this + 10) = v24;
  *((_DWORD *)this + 22) = 0;
  v25 = *((_QWORD *)this + 8);
  v26 = *a3;
  if (*a3)
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(v25 + 16);
  *(_QWORD *)(v25 + 16) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v27 -= 2;
  }
  return this;
}

{
  WebCore::ScriptExecutionContext *v6;
  unsigned int **v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  WebCore::ContextDestructionObserver *v30;

  v6 = a2;
  *((_QWORD *)this + 3) = 0;
  v8 = (unsigned int **)((char *)this + 24);
  *((_DWORD *)this + 8) = 1;
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19550C6DCLL);
  }
  v30 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v30, (uint64_t)&v29);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_1E33670D0;
  *((_QWORD *)this + 5) = &unk_1E3367148;
  v13 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v13 = 1;
  v14 = *((_QWORD *)this + 3);
  if (v14)
    goto LABEL_25;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v8;
  v15 = *v8;
  *v8 = (unsigned int *)v14;
  if (!v15)
    goto LABEL_25;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v12);
  }
  v14 = (uint64_t)*v8;
  if (*v8)
  {
LABEL_25:
    do
      v18 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v18 + 1, (unsigned int *)v14));
  }
  *(_QWORD *)(v13 + 8) = v14;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v13 + 40) = _D0;
  *(_DWORD *)(v13 + 48) = 1065353216;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *((_QWORD *)this + 8) = v13;
  *((_QWORD *)this + 9) = 0;
  v24 = *a4;
  *a4 = 0;
  *((_QWORD *)this + 10) = v24;
  *((_DWORD *)this + 22) = 0;
  v25 = *((_QWORD *)this + 8);
  v26 = *a3;
  if (*a3)
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(v25 + 16);
  *(_QWORD *)(v25 + 16) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v27 -= 2;
  }
  return this;
}

_QWORD *WebCore::SpeechSynthesisUtterance::create@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v31;
  uint64_t v32;

  v8 = bmalloc::api::isoAllocate();
  v9 = v8;
  *(_QWORD *)(v8 + 24) = 0;
  v10 = (unsigned int **)(v8 + 24);
  *(_DWORD *)(v8 + 32) = 1;
  if (!*(_BYTE *)(a1 + 274))
  {
    v11 = a1 - 192;
    v12 = *(_QWORD *)(a1 + 512);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        v11 = v13;
    }
    a1 = v11 + 192;
  }
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v9 = &off_1E33A0540;
  *(_QWORD *)(v9 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19550C4FCLL);
  }
  v32 = v9;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v32, (uint64_t)&v31);
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)v9 = &off_1E33670D0;
  *(_QWORD *)(v9 + 40) = &unk_1E3367148;
  v15 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v15 = 1;
  v16 = *(_QWORD *)(v9 + 24);
  if (v16)
    goto LABEL_25;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = v10;
  v17 = *v10;
  *v10 = (unsigned int *)v16;
  if (!v17)
    goto LABEL_25;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v14);
  }
  v16 = (uint64_t)*v10;
  if (*v10)
  {
LABEL_25:
    do
      v20 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v20 + 1, (unsigned int *)v16));
  }
  *(_QWORD *)(v15 + 8) = v16;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v15 + 40) = _D0;
  *(_DWORD *)(v15 + 48) = 1065353216;
  *(_QWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v9 + 64) = v15;
  *(_QWORD *)(v9 + 72) = 0;
  v26 = *a3;
  *a3 = 0;
  *(_QWORD *)(v9 + 80) = v26;
  *(_DWORD *)(v9 + 88) = 0;
  v27 = *(_QWORD *)(v9 + 64);
  v28 = *a2;
  if (*a2)
    *v28 += 2;
  v29 = *(WTF::StringImpl **)(v27 + 16);
  *(_QWORD *)(v27 + 16) = v28;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v29 -= 2;
  }
  *a4 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9);
}

void WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(WebCore::SpeechSynthesisUtterance *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *((_QWORD *)this + 8);
  v4 = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v9, (WTF::StringImpl *)a2);
  WebCore::EventTarget::~EventTarget((WebCore::SpeechSynthesisUtterance *)((char *)this + 40), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v10);
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v11);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(WebCore::SpeechSynthesisUtterance *this, void *a2)
{
  WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)((char *)this - 40), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)((char *)this - 40), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SpeechSynthesisUtterance::voice(WebCore::SpeechSynthesisUtterance *this)
{
  return *((_QWORD *)this + 9);
}

WTF::StringImpl **WebCore::SpeechSynthesisUtterance::setVoice(WTF::StringImpl **result, uint64_t a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  if (a2)
  {
    v3 = result;
    ++*(_DWORD *)(a2 + 8);
    v4 = result[9];
    v3[9] = (WTF::StringImpl *)a2;
    if (v4)
    {
      if (*((_DWORD *)v4 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v4 + 8))(v4);
      else
        --*((_DWORD *)v4 + 2);
    }
    v5 = v3[8];
    v6 = *(_DWORD **)(a2 + 16);
    if (v6)
      ++*v6;
    result = (WTF::StringImpl **)*((_QWORD *)v5 + 4);
    *((_QWORD *)v5 + 4) = v6;
    if (result)
      return WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(result, (WTF::StringImpl *)a2);
  }
  return result;
}

uint64_t WebCore::SpeechSynthesisUtterance::incrementActivityCountForEventDispatch(uint64_t this)
{
  ++*(_DWORD *)(this + 88);
  return this;
}

uint64_t WebCore::SpeechSynthesisUtterance::decrementActivityCountForEventDispatch(uint64_t this)
{
  --*(_DWORD *)(this + 88);
  return this;
}

BOOL WebCore::SpeechSynthesisUtterance::virtualHasPendingActivity(WebCore::SpeechSynthesisUtterance *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 22) && (v1 = *((_QWORD *)this + 7), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

void WebCore::StorageManager::persisted(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::NavigatorBase *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  objc_class *v14;
  WebCore *v15;
  WebCore::NavigatorBase *v16;
  objc_class *v17;
  uint64_t v18;
  WTF::StringImpl *v19[3];
  int v20;
  _BYTE v21[24];
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = *(WebCore::NavigatorBase **)(v3 + 8);
  else
    v4 = 0;
  WebCore::connectionInfo((WebCore *)&v23, v4);
  if (!v28)
  {
    v18 = v23;
    LOBYTE(v19[0]) = 0;
    v20 = -1;
    v9 = v25;
    if (v25 != -1)
    {
      ((void (*)(objc_class **, WTF::StringImpl **, WTF::StringImpl **))off_1E3367370[v25])(&v17, v19, &v24);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = v27;
    if (v27 != -1)
    {
      ((void (*)(objc_class **, _BYTE *, uint64_t *))off_1E3367370[v27])(&v17, v21, &v26);
      v22 = v10;
    }
    v11 = v18;
    v12 = *a2;
    *a2 = 0;
    v13 = (objc_class *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = &off_1E3367410;
    *((_QWORD *)v13 + 1) = v12;
    v17 = v13;
    (*(void (**)(uint64_t, WTF::StringImpl **, objc_class **))(*(_QWORD *)v11 + 16))(v11, v19, &v17);
    v14 = v17;
    v17 = 0;
    if (v14)
      (*(void (**)(objc_class *))(*(_QWORD *)v14 + 8))(v14);
    if (v22 != -1)
      ((void (*)(objc_class **, _BYTE *))off_1E3367350[v22])(&v17, v21);
    v22 = -1;
    if (v20 != -1)
      ((void (*)(objc_class **, WTF::StringImpl **))off_1E3367350[v20])(&v17, v19);
    goto LABEL_24;
  }
  if (v28 != 1)
  {
    v15 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::connectionInfo(v15, v16);
    return;
  }
  v5 = v24;
  v24 = 0;
  v6 = *a2;
  v17 = 0;
  LOBYTE(v18) = v23;
  if (v5)
    *(_DWORD *)v5 += 2;
  v19[0] = v5;
  WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)&v18, 0, &v17);
  v8 = v19[0];
  v19[0] = 0;
  if (!v8)
  {
LABEL_11:
    if (v5)
      goto LABEL_12;
    goto LABEL_24;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v8, v7);
  if (v5)
  {
LABEL_12:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_24:
  if (v28 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3367380[v28])(&v18, &v23);
}

void WebCore::connectionInfo(WebCore *this, WebCore::NavigatorBase *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WebCore::SecurityOrigin *v9;
  int v10;
  WebCore::SecurityOrigin *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _BYTE v61[24];
  int v62;
  _BYTE v63[24];
  unsigned int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v3 = *((_QWORD *)a2 + 1)) == 0 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = v60;
    *(_BYTE *)this = 8;
    *((_QWORD *)this + 1) = v31;
    *((_DWORD *)this + 18) = 1;
    return;
  }
  v5 = v4 - 96;
  v6 = *(unsigned __int8 *)(v4 + 178);
  if (*(_BYTE *)(v4 + 178))
  {
    if (v6 == 1 || v6 == 2)
      ++*(_DWORD *)(v4 + 216);
  }
  else
  {
    *(_DWORD *)(v4 - 264) += 2;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 - 96), a2);
  if (!v7)
    goto LABEL_57;
  v9 = (const WebCore::SecurityOrigin *)v7;
  if (*(_DWORD *)(v7 + 32) == 1 || *(_BYTE *)(v7 + 63) && !*(_BYTE *)(v7 + 60) && !*(_BYTE *)(v7 + 56))
    goto LABEL_57;
  v10 = *(unsigned __int8 *)(v4 + 176);
  if (v10 == 1)
  {
    v11 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 256))(v4 - 96);
    WebCore::SecurityOrigin::isSameOriginAs(v11, v9);
    goto LABEL_11;
  }
  if (v10 != 2)
  {
LABEL_11:
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 - 96), v8);
    v13 = v12;
    if (v12)
    {
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 + 1, v12));
    }
    v15 = *(unsigned __int8 *)(v4 + 178);
    if (!*(_BYTE *)(v4 + 178))
    {
      v16 = (_DWORD *)(v4 - 264);
      *(_DWORD *)(v4 - 264) += 2;
      v17 = (WebCore::Node *)(v4 - 288);
      v18 = *(_QWORD *)(v4 + 240);
      if (v18
        && (v19 = *(_QWORD *)(v18 + 8)) != 0
        && (v20 = *(_QWORD *)(v19 + 24)) != 0
        && (v21 = *(_QWORD *)(v20 + 8)) != 0)
      {
        v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 1744) + 16))(*(_QWORD *)(v21 + 1744));
        v24 = (unsigned int *)(v22 + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        v58 = v22;
        v60 = v22;
        WebCore::Document::topOrigin((WebCore::Document *)(v4 - 288), v23);
        v61[0] = 0;
        v62 = -1;
        v27 = *(unsigned int *)(v26 + 32);
        if ((_DWORD)v27 != -1)
        {
          ((void (*)(char *, _BYTE *, uint64_t))off_1E3367360[v27])(&v59, v61, v26 + 8);
          v62 = v27;
        }
        v63[0] = 0;
        v64 = -1;
        v28 = v13[8];
        if ((_DWORD)v28 != -1)
        {
          ((void (*)(char *, _BYTE *, unsigned int *))off_1E3367360[v28])(&v59, v63, v13 + 2);
          v64 = v28;
          LODWORD(v27) = v62;
        }
        *(_QWORD *)this = v60;
        *((_BYTE *)this + 8) = 0;
        *((_DWORD *)this + 8) = -1;
        if ((_DWORD)v27 != -1)
        {
          ((void (*)(char *, char *, _BYTE *))off_1E3367370[v27])(&v59, (char *)this + 8, v61);
          *((_DWORD *)this + 8) = v27;
          LODWORD(v28) = v64;
        }
        *((_BYTE *)this + 40) = 0;
        v29 = (char *)this + 40;
        *((_DWORD *)this + 16) = -1;
        if ((_DWORD)v28 == -1)
        {
          *((_DWORD *)this + 18) = 0;
          v17 = (WebCore::Node *)(v4 - 288);
        }
        else
        {
          ((void (*)(char *))off_1E3367370[v28])(&v59);
          *((_DWORD *)this + 16) = v28;
          v30 = v64;
          *((_DWORD *)this + 18) = 0;
          v17 = (WebCore::Node *)(v4 - 288);
          if ((_DWORD)v30 != -1)
            ((void (*)(char *, _BYTE *))off_1E3367350[v30])(&v59, v63);
        }
        v64 = -1;
        if (v62 != -1)
          ((void (*)(char *, _BYTE *))off_1E3367350[v62])(&v59, v61);
        do
        {
          v33 = __ldaxr(v24);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v24));
        if (!v34)
        {
          v56 = v58;
          atomic_store(1u, (unsigned int *)(v58 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = v60;
        *(_BYTE *)this = 8;
        *((_QWORD *)this + 1) = v32;
        *((_DWORD *)this + 18) = 1;
      }
      if (*v16 == 2)
      {
        if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v29);
      }
      else
      {
        *v16 -= 2;
      }
      goto LABEL_39;
    }
    if (v15 == 1)
    {
      v42 = *(_DWORD *)(v4 + 216);
      *(_DWORD *)(v4 + 216) = v42 + 1;
      if (v42)
        *(_DWORD *)(v4 + 216) = v42;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v4 - 96);
    }
    else
    {
      if (v15 != 2)
        goto LABEL_73;
      ++*(_DWORD *)(v4 + 216);
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
    }
    v15 = *(unsigned __int8 *)(v4 + 178);
LABEL_73:
    if (v15)
    {
      if (v15 == 1 || v15 == 2)
        ++*(_DWORD *)(v4 + 216);
    }
    else
    {
      *(_DWORD *)(v4 - 264) += 2;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 64))(v4 - 96))
    {
      v43 = *(_QWORD *)(v4 + 1104);
      if (!v43)
      {
        v44 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v44 + 8) = 1;
        *(_QWORD *)v44 = off_1E33671E0;
        v45 = (unsigned int *)WTF::WeakPtr<WebCore::WorkerGlobalScope,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::WorkerGlobalScope>(v4 - 96);
        if (v45)
        {
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
        }
        *(_QWORD *)(v44 + 16) = v45;
        *(_OWORD *)(v44 + 24) = 0u;
        *(_OWORD *)(v44 + 40) = 0u;
        v47 = *(unsigned int **)(v4 + 1104);
        *(_QWORD *)(v4 + 1104) = v44;
        if (v47)
        {
          v48 = v47 + 2;
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            atomic_store(1u, v47 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
          }
        }
        v43 = *(_QWORD *)(v4 + 1104);
      }
      v60 = v43;
      v51 = *(_QWORD *)(v4 + 472);
      v61[0] = 0;
      v62 = -1;
      v52 = *(unsigned int *)(v51 + 32);
      if ((_DWORD)v52 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E3367360[v52])(&v59, v61, v51 + 8);
        v62 = v52;
      }
      v63[0] = 0;
      v64 = -1;
      v53 = v13[8];
      if ((_DWORD)v53 != -1)
      {
        ((void (*)(char *, _BYTE *, unsigned int *))off_1E3367360[v53])(&v59, v63, v13 + 2);
        v64 = v53;
        LODWORD(v52) = v62;
      }
      v54 = v60;
      *((_BYTE *)this + 8) = 0;
      *(_QWORD *)this = v54;
      *((_DWORD *)this + 8) = -1;
      if ((_DWORD)v52 != -1)
      {
        ((void (*)(char *, char *, _BYTE *))off_1E3367370[v52])(&v59, (char *)this + 8, v61);
        *((_DWORD *)this + 8) = v52;
        LODWORD(v53) = v64;
      }
      *((_BYTE *)this + 40) = 0;
      v29 = (char *)this + 40;
      *((_DWORD *)this + 16) = -1;
      if ((_DWORD)v53 == -1)
      {
        *((_DWORD *)this + 18) = 0;
      }
      else
      {
        ((void (*)(char *))off_1E3367370[v53])(&v59);
        *((_DWORD *)this + 16) = v53;
        v55 = v64;
        *((_DWORD *)this + 18) = 0;
        if ((_DWORD)v55 != -1)
          ((void (*)(char *, _BYTE *))off_1E3367350[v55])(&v59, v63);
      }
      v64 = -1;
      if (v62 != -1)
        ((void (*)(char *, _BYTE *))off_1E3367350[v62])(&v59, v61);
      if (*(_DWORD *)(v4 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v4 - 96);
      else
        --*(_DWORD *)(v4 + 216);
      goto LABEL_40;
    }
    v57 = *(unsigned __int8 *)(v4 + 178);
    if (*(_BYTE *)(v4 + 178))
    {
      if (v57 == 1)
      {
        if (*(_DWORD *)(v4 + 216) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v4 - 96);
        else
          --*(_DWORD *)(v4 + 216);
      }
      else if (v57 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
      }
    }
    else if (*(_DWORD *)(v4 - 264) == 2)
    {
      if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v29);
    }
    else
    {
      *(_DWORD *)(v4 - 264) -= 2;
    }
    *(_BYTE *)this = 6;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 18) = 1;
LABEL_39:
    if (!v13)
      goto LABEL_58;
    do
    {
LABEL_40:
      v35 = __ldaxr(v13);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v13));
    if (!v36)
    {
      atomic_store(1u, v13);
      v37 = (WTF::StringImpl *)*((_QWORD *)v13 + 6);
      *((_QWORD *)v13 + 6) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = (WTF::StringImpl *)*((_QWORD *)v13 + 5);
      *((_QWORD *)v13 + 5) = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = v13[8];
      if ((_DWORD)v39 != -1)
        ((void (*)(uint64_t *, unsigned int *))off_1E3367350[v39])(&v60, v13 + 2);
      v13[8] = -1;
      WTF::fastFree((WTF *)v13, v29);
    }
    goto LABEL_58;
  }
LABEL_57:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v40 = v60;
  *(_BYTE *)this = 33;
  *((_QWORD *)this + 1) = v40;
  *((_DWORD *)this + 18) = 1;
LABEL_58:
  v41 = *(unsigned __int8 *)(v4 + 178);
  if (*(_BYTE *)(v4 + 178))
  {
    if (v41 == 1)
    {
      if (*(_DWORD *)(v4 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v4 - 96);
      else
        --*(_DWORD *)(v4 + 216);
    }
    else if (v41 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
    }
  }
  else if (*(_DWORD *)(v4 - 264) == 2)
  {
    if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v29);
  }
  else
  {
    *(_DWORD *)(v4 - 264) -= 2;
  }
}

WTF::StringImpl *WebCore::StorageManager::persist(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::NavigatorBase *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  uint64_t v14;
  objc_class *v15;
  uint64_t v16;
  WTF::StringImpl *v17[3];
  int v18;
  _BYTE v19[24];
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = *(WebCore::NavigatorBase **)(v3 + 8);
  else
    v4 = 0;
  WebCore::connectionInfo((WebCore *)&v21, v4);
  if (!v26)
  {
    v16 = v21;
    LOBYTE(v17[0]) = 0;
    v18 = -1;
    v9 = v23;
    if (v23 != -1)
    {
      ((void (*)(objc_class **, WTF::StringImpl **, WTF::StringImpl **))off_1E3367370[v23])(&v15, v17, &v22);
      v18 = v9;
    }
    v19[0] = 0;
    v20 = -1;
    v10 = v25;
    if (v25 != -1)
    {
      ((void (*)(objc_class **, _BYTE *, uint64_t *))off_1E3367370[v25])(&v15, v19, &v24);
      v20 = v10;
    }
    v11 = v16;
    v12 = *a2;
    *a2 = 0;
    v13 = (objc_class *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = &off_1E3367438;
    *((_QWORD *)v13 + 1) = v12;
    v15 = v13;
    (*(void (**)(uint64_t, WTF::StringImpl **, objc_class **))(*(_QWORD *)v11 + 24))(v11, v17, &v15);
    result = v15;
    v15 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v20 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, _BYTE *))off_1E3367350[v20])(&v15, v19);
    v20 = -1;
    if (v18 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, WTF::StringImpl **))off_1E3367350[v18])(&v15, v17);
    goto LABEL_24;
  }
  if (v26 != 1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::StorageManager::estimate(v14);
  }
  v5 = v22;
  v22 = 0;
  v6 = *a2;
  v15 = 0;
  LOBYTE(v16) = v21;
  if (v5)
    *(_DWORD *)v5 += 2;
  v17[0] = v5;
  WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)&v16, 0, &v15);
  result = v17[0];
  v17[0] = 0;
  if (!result)
  {
LABEL_11:
    if (v5)
      goto LABEL_12;
    goto LABEL_24;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_11;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (v5)
  {
LABEL_12:
    if (*(_DWORD *)v5 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_24:
  if (v26 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E3367380[v26])(&v16, &v21);
  return result;
}

WTF::StringImpl *WebCore::StorageManager::estimate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::NavigatorBase *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  uint64_t v14;
  objc_class *v15;
  uint64_t v16;
  WTF::StringImpl *v17[3];
  int v18;
  _BYTE v19[24];
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = *(WebCore::NavigatorBase **)(v3 + 8);
  else
    v4 = 0;
  WebCore::connectionInfo((WebCore *)&v21, v4);
  if (!v26)
  {
    v16 = v21;
    LOBYTE(v17[0]) = 0;
    v18 = -1;
    v9 = v23;
    if (v23 != -1)
    {
      ((void (*)(objc_class **, WTF::StringImpl **, WTF::StringImpl **))off_1E3367370[v23])(&v15, v17, &v22);
      v18 = v9;
    }
    v19[0] = 0;
    v20 = -1;
    v10 = v25;
    if (v25 != -1)
    {
      ((void (*)(objc_class **, _BYTE *, uint64_t *))off_1E3367370[v25])(&v15, v19, &v24);
      v20 = v10;
    }
    v11 = v16;
    v12 = *a2;
    *a2 = 0;
    v13 = (objc_class *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = &off_1E3367460;
    *((_QWORD *)v13 + 1) = v12;
    v15 = v13;
    (*(void (**)(uint64_t, WTF::StringImpl **, objc_class **))(*(_QWORD *)v11 + 40))(v11, v17, &v15);
    result = v15;
    v15 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v20 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, _BYTE *))off_1E3367350[v20])(&v15, v19);
    v20 = -1;
    if (v18 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, WTF::StringImpl **))off_1E3367350[v18])(&v15, v17);
    goto LABEL_24;
  }
  if (v26 != 1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::StorageManager::fileSystemAccessGetDirectory(v14);
  }
  v5 = v22;
  v22 = 0;
  v6 = *a2;
  v15 = 0;
  LOBYTE(v16) = v21;
  if (v5)
    *(_DWORD *)v5 += 2;
  v17[0] = v5;
  WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)&v16, 0, &v15);
  result = v17[0];
  v17[0] = 0;
  if (!result)
  {
LABEL_11:
    if (v5)
      goto LABEL_12;
    goto LABEL_24;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_11;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (v5)
  {
LABEL_12:
    if (*(_DWORD *)v5 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_24:
  if (v26 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E3367380[v26])(&v16, &v21);
  return result;
}

WTF::StringImpl *WebCore::StorageManager::fileSystemAccessGetDirectory(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WebCore::NavigatorBase *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  objc_class *v16;
  WebCore::WorkerStorageConnection *v17;
  objc_class *v18;
  uint64_t v19;
  WTF::StringImpl *v20[3];
  int v21;
  _BYTE v22[24];
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = *(WebCore::NavigatorBase **)(v4 + 8);
  else
    v5 = 0;
  WebCore::connectionInfo((WebCore *)&v24, v5);
  if (!v29)
  {
    v19 = v24;
    LOBYTE(v20[0]) = 0;
    v21 = -1;
    v10 = v26;
    if (v26 != -1)
    {
      ((void (*)(objc_class **, WTF::StringImpl **, WTF::StringImpl **))off_1E3367370[v26])(&v18, v20, &v25);
      v21 = v10;
    }
    v22[0] = 0;
    v23 = -1;
    v11 = v28;
    if (v28 != -1)
    {
      ((void (*)(objc_class **, _BYTE *, uint64_t *))off_1E3367370[v28])(&v18, v22, &v27);
      v23 = v11;
    }
    v12 = v19;
    v13 = *a2;
    *a2 = 0;
    v14 = *(unsigned int **)(a1 + 8);
    if (v14)
    {
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    v16 = (objc_class *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v16 = &off_1E3367488;
    *((_QWORD *)v16 + 1) = v13;
    *((_QWORD *)v16 + 2) = v14;
    v18 = v16;
    (*(void (**)(uint64_t, WTF::StringImpl **, objc_class **))(*(_QWORD *)v12 + 32))(v12, v20, &v18);
    result = v18;
    v18 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v23 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, _BYTE *))off_1E3367350[v23])(&v18, v22);
    v23 = -1;
    if (v21 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, WTF::StringImpl **))off_1E3367350[v21])(&v18, v20);
    goto LABEL_26;
  }
  if (v29 != 1)
  {
    v17 = (WebCore::WorkerStorageConnection *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::WorkerStorageConnection::scopeClosed(v17);
  }
  v6 = v25;
  v25 = 0;
  v7 = *a2;
  v18 = 0;
  LOBYTE(v19) = v24;
  if (v6)
    *(_DWORD *)v6 += 2;
  v20[0] = v6;
  WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)&v19, 0, &v18);
  result = v20[0];
  v20[0] = 0;
  if (!result)
  {
LABEL_11:
    if (v6)
      goto LABEL_12;
    goto LABEL_26;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_11;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  if (v6)
  {
LABEL_12:
    if (*(_DWORD *)v6 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
LABEL_26:
  if (v29 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E3367380[v29])(&v19, &v24);
  return result;
}

uint64_t WebCore::WorkerStorageConnection::scopeClosed(WebCore::WorkerStorageConnection *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32[8];
  uint64_t v33;
  int v34;
  char v35;

  v3 = 0;
  v4 = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v5)
    goto LABEL_2;
  v4 = *((unsigned int *)v5 - 1);
  v6 = &v5[2 * v4];
  if (!*((_DWORD *)v5 - 3))
  {
    v3 = &v5[2 * v4];
LABEL_2:
    v6 = &v5[2 * v4];
    goto LABEL_3;
  }
  v3 = v5;
  if ((_DWORD)v4)
  {
    v26 = 16 * v4;
    v3 = v5;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      v3 += 2;
      v26 -= 16;
      if (!v26)
      {
        v3 = v6;
        break;
      }
    }
  }
LABEL_3:
  if (v5)
    v7 = &v5[2 * *((unsigned int *)v5 - 1)];
  else
    v7 = 0;
  while (v3 != v7)
  {
    v8 = v3[1];
    v3[1] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v3 + 2;
    v3 = v6;
    if (v9 != v6)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        v3 += 2;
        if (v3 == v6)
        {
          v3 = v6;
          break;
        }
      }
    }
  }
  v10 = (_QWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    v11 = *((unsigned int *)v10 - 1);
    v12 = &v10[2 * v11];
    if (*((_DWORD *)v10 - 3))
    {
      v13 = v10;
      if ((_DWORD)v11)
      {
        v14 = 16 * v11;
        v13 = v10;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 2;
          v14 -= 16;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v13 = &v10[2 * v11];
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = &v10[2 * v11];
  if (v10)
  {
LABEL_19:
    v15 = &v10[2 * *((unsigned int *)v10 - 1)];
    goto LABEL_24;
  }
  v15 = 0;
LABEL_24:
  while (v13 != v15)
  {
    v32[0] = 8;
    v33 = 0;
    v34 = 1;
    v16 = v13[1];
    v13[1] = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v34 != -1)
      ((void (*)(char *, char *))off_1E3367390[v34])(&v35, v32);
    v17 = v13 + 2;
    v13 = v12;
    if (v17 != v12)
    {
      v13 = v17;
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        v13 += 2;
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!result)
    goto LABEL_36;
  do
  {
    v19 = __ldaxr((unsigned int *)result);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)result));
  if (v20)
  {
LABEL_36:
    if (!v10)
      goto LABEL_44;
    goto LABEL_37;
  }
  atomic_store(1u, (unsigned int *)result);
  v24 = *(unsigned int *)(result + 28);
  if ((_DWORD)v24)
  {
    v31 = result;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v24));
    result = v31;
  }
  v25 = *(WTF **)(result + 16);
  if (v25)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    v30 = result;
    WTF::fastFree(v25, a2);
    result = v30;
  }
  result = WTF::fastFree((WTF *)result, a2);
  if (v10)
  {
LABEL_37:
    v21 = *((unsigned int *)v10 - 1);
    if ((_DWORD)v21)
    {
      v22 = v10 + 1;
      do
      {
        if (*(v22 - 1) != -1)
        {
          v23 = *v22;
          *v22 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    result = WTF::fastFree((WTF *)(v10 - 2), a2);
  }
LABEL_44:
  if (v5)
  {
    v27 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v27)
    {
      v28 = v5 + 1;
      do
      {
        if (*(v28 - 1) != -1)
        {
          v29 = *v28;
          *v28 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        }
        v28 += 2;
        --v27;
      }
      while (v27);
    }
    return WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  return result;
}

uint64_t WebCore::WorkerStorageConnection::getPersisted(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[24];
  int v30;
  _BYTE v31[24];
  int v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1[2] + 8);
  if (v3)
    v4 = v3 - 320;
  else
    v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 360) + 128);
  if (v5)
  {
    v8 = a1[3] + 1;
    a1[3] = v8;
    v23 = v8;
    WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(BOOL)>>(a1 + 4, &v23, a3, (uint64_t)&v33);
    *(_QWORD *)&v26 = v23;
    v9 = a1[2];
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v9 = v10 - 320;
      else
        v9 = 0;
    }
    v11 = *(_OWORD *)(v9 + 240);
    v27 = *(_OWORD *)(v9 + 224);
    v28 = v11;
    v12 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v12 == -1)
      goto LABEL_29;
    v25 = &v24;
    ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v12])(&v33, &v25, a2);
    v29[0] = 0;
    v30 = -1;
    v13 = v35;
    if (v35 != -1)
    {
      ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v35])(&v25, v29, &v33);
      v30 = v13;
      if (v35 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v35])(&v25, &v33);
    }
    v14 = *(unsigned int *)(a2 + 56);
    if ((_DWORD)v14 == -1)
LABEL_29:
      std::__throw_bad_variant_access[abi:sn180100]();
    v25 = &v24;
    ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v14])(&v33, &v25, a2 + 32);
    v31[0] = 0;
    v32 = -1;
    v15 = v35;
    if (v35 != -1)
    {
      ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v35])(&v25, v31, &v33);
      v32 = v15;
      if (v35 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v35])(&v25, &v33);
    }
    v16 = WTF::fastMalloc((WTF *)0x80);
    *(_QWORD *)v16 = &off_1E33674B0;
    v17 = v28;
    v18 = v27;
    *(_OWORD *)(v16 + 16) = v26;
    *(_OWORD *)(v16 + 32) = v18;
    *(_BYTE *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 48) = v17;
    *(_DWORD *)(v16 + 88) = -1;
    v19 = v30;
    if (v30 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3367370[v30])(&v33, v16 + 64, v29);
      *(_DWORD *)(v16 + 88) = v19;
    }
    *(_BYTE *)(v16 + 96) = 0;
    *(_DWORD *)(v16 + 120) = -1;
    v20 = v32;
    if (v32 != -1)
    {
      ((void (*)(uint64_t *))off_1E3367370[v32])(&v33);
      *(_DWORD *)(v16 + 120) = v20;
    }
    v33 = v16;
    v34 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 56))(v5, &v33);
    result = v33;
    v33 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v32 != -1)
      result = ((uint64_t (*)(char **, _BYTE *))off_1E3367350[v32])(&v25, v31);
    v32 = -1;
    if (v30 != -1)
      return ((uint64_t (*)(char **, _BYTE *))off_1E3367350[v30])(&v25, v29);
  }
  else
  {
    v22 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  return result;
}

uint64_t *WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(BOOL)>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v28;
        goto LABEL_30;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  *v16 = v11;
  v16[1] = v20;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_21;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_27:
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v6, v27, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_29;
    }
LABEL_21:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_27;
  }
LABEL_29:
  v30 = v23 + 16 * v26;
  v29 = 1;
LABEL_30:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t *WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *result;
  if (!*result)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = *a2 + ~(*a2 << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == *a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v8 != *(_DWORD *)(v3 - 4))
  {
    v11 = 0;
    v12 = (_QWORD *)(v3 + 16 * v8);
    v13 = v12[1];
    v12[1] = 0;
    *a3 = v13;
    if (!*result || (v11 = *result + 16 * *(unsigned int *)(*result - 4), (_QWORD *)v11 != v12))
    {
      if ((_QWORD *)v11 != v12)
      {
        *v12 = -1;
        v12[1] = 0;
        ++*(_DWORD *)(*result - 16);
        v14 = *result;
        if (*result)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *result;
        if (*result)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(result, v18 >> 1, 0);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::WorkerStorageConnection::getEstimate(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  int v44;
  char v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[24];
  int v51;
  _BYTE v52[24];
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1[2] + 8);
  if (v4)
    v5 = v4 - 320;
  else
    v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 360) + 128);
  if (v6)
  {
    v10 = a1 + 5;
    v9 = a1[5];
    v11 = a1[3];
    v12 = v11 + 1;
    a1[3] = v11 + 1;
    if (v9
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 5, 8u), (v9 = *v10) != 0))
    {
      v13 = *(_DWORD *)(v9 - 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (v11 - (v12 << 32)) ^ ((unint64_t)(v11 - (v12 << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = (_QWORD *)(v9 + 16 * v17);
    v19 = *v18;
    if (*v18)
    {
      v20 = 0;
      v21 = 1;
      while (v19 != v12)
      {
        if (v19 == -1)
          v20 = v18;
        v17 = (v17 + v21) & v13;
        v18 = (_QWORD *)(v9 + 16 * v17);
        v19 = *v18;
        ++v21;
        if (!*v18)
        {
          if (v20)
          {
            *v20 = 0;
            v20[1] = 0;
            --*(_DWORD *)(*v10 - 16);
            v18 = v20;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_33;
    }
LABEL_16:
    *v18 = v12;
    v22 = *a3;
    *a3 = 0;
    v23 = v18[1];
    v18[1] = v22;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = *v10;
    if (*v10)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v28 = *v10;
    if (*v10)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_33;
    }
    else
    {
      if (3 * v31 > 4 * v30)
      {
LABEL_33:
        *(_QWORD *)&v47 = v12;
        v33 = a1[2];
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (v34)
            v33 = v34 - 320;
          else
            v33 = 0;
        }
        v35 = *(_OWORD *)(v33 + 240);
        v48 = *(_OWORD *)(v33 + 224);
        v49 = v35;
        v36 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v36 == -1)
          goto LABEL_58;
        v46 = &v45;
        ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v36])(&v54, &v46, a2);
        v50[0] = 0;
        v51 = -1;
        v37 = v57;
        if (v57 != -1)
        {
          ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v57])(&v46, v50, &v54);
          v51 = v37;
          if (v57 != -1)
            ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v57])(&v46, &v54);
        }
        v38 = *(unsigned int *)(a2 + 56);
        if ((_DWORD)v38 == -1)
LABEL_58:
          std::__throw_bad_variant_access[abi:sn180100]();
        v46 = &v45;
        ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v38])(&v54, &v46, a2 + 32);
        v52[0] = 0;
        v53 = -1;
        v39 = v57;
        if (v57 != -1)
        {
          ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v57])(&v46, v52, &v54);
          v53 = v39;
          if (v57 != -1)
            ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v57])(&v46, &v54);
        }
        v40 = WTF::fastMalloc((WTF *)0x80);
        *(_QWORD *)v40 = &off_1E3367528;
        v41 = v49;
        v42 = v48;
        *(_OWORD *)(v40 + 16) = v47;
        *(_OWORD *)(v40 + 32) = v42;
        *(_BYTE *)(v40 + 64) = 0;
        *(_QWORD *)(v40 + 48) = v41;
        *(_DWORD *)(v40 + 88) = -1;
        v43 = v51;
        if (v51 != -1)
        {
          ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3367370[v51])(&v54, v40 + 64, v50);
          *(_DWORD *)(v40 + 88) = v43;
        }
        *(_BYTE *)(v40 + 96) = 0;
        *(_DWORD *)(v40 + 120) = -1;
        v44 = v53;
        if (v53 != -1)
        {
          ((void (*)(uint64_t *))off_1E3367370[v53])(&v54);
          *(_DWORD *)(v40 + 120) = v44;
        }
        v54 = v40;
        LOBYTE(v55) = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 56))(v6, &v54);
        result = v54;
        v54 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        if (v53 != -1)
          result = ((uint64_t (*)(char **, _BYTE *))off_1E3367350[v53])(&v46, v52);
        v53 = -1;
        if (v51 != -1)
          return ((uint64_t (*)(char **, _BYTE *))off_1E3367350[v51])(&v46, v50);
        return result;
      }
      if (!(_DWORD)v31)
      {
        v32 = 8;
        goto LABEL_32;
      }
    }
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_32:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v10, v32);
    goto LABEL_33;
  }
  LOBYTE(v54) = 8;
  v55 = 0;
  v56 = 1;
  v26 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 16))(v26, &v54);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v56 != -1)
    return ((uint64_t (*)(char **, uint64_t *))off_1E33673A0[v56])(&v46, &v54);
  return result;
}

uint64_t WebCore::WorkerStorageConnection::fileSystemGetDirectory(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  int v44;
  char v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[24];
  int v51;
  _BYTE v52[24];
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1[2] + 8);
  if (v4)
    v5 = v4 - 320;
  else
    v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 360) + 128);
  if (v6)
  {
    v10 = a1 + 6;
    v9 = a1[6];
    v11 = a1[3];
    v12 = v11 + 1;
    a1[3] = v11 + 1;
    if (v9
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1 + 6, 8u), (v9 = *v10) != 0))
    {
      v13 = *(_DWORD *)(v9 - 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (v11 - (v12 << 32)) ^ ((unint64_t)(v11 - (v12 << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = (_QWORD *)(v9 + 16 * v17);
    v19 = *v18;
    if (*v18)
    {
      v20 = 0;
      v21 = 1;
      while (v19 != v12)
      {
        if (v19 == -1)
          v20 = v18;
        v17 = (v17 + v21) & v13;
        v18 = (_QWORD *)(v9 + 16 * v17);
        v19 = *v18;
        ++v21;
        if (!*v18)
        {
          if (v20)
          {
            *v20 = 0;
            v20[1] = 0;
            --*(_DWORD *)(*v10 - 16);
            v18 = v20;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_33;
    }
LABEL_16:
    *v18 = v12;
    v22 = *a3;
    *a3 = 0;
    v23 = v18[1];
    v18[1] = v22;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = *v10;
    if (*v10)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v28 = *v10;
    if (*v10)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_33;
    }
    else
    {
      if (3 * v31 > 4 * v30)
      {
LABEL_33:
        *(_QWORD *)&v47 = v12;
        v33 = a1[2];
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (v34)
            v33 = v34 - 320;
          else
            v33 = 0;
        }
        v35 = *(_OWORD *)(v33 + 240);
        v48 = *(_OWORD *)(v33 + 224);
        v49 = v35;
        v36 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v36 == -1)
          goto LABEL_58;
        v46 = &v45;
        ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v36])(&v54, &v46, a2);
        v50[0] = 0;
        v51 = -1;
        v37 = v57;
        if (v57 != -1)
        {
          ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v57])(&v46, v50, &v54);
          v51 = v37;
          if (v57 != -1)
            ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v57])(&v46, &v54);
        }
        v38 = *(unsigned int *)(a2 + 56);
        if ((_DWORD)v38 == -1)
LABEL_58:
          std::__throw_bad_variant_access[abi:sn180100]();
        v46 = &v45;
        ((void (*)(uint64_t *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v38])(&v54, &v46, a2 + 32);
        v52[0] = 0;
        v53 = -1;
        v39 = v57;
        if (v57 != -1)
        {
          ((void (*)(char **, _BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v57])(&v46, v52, &v54);
          v53 = v39;
          if (v57 != -1)
            ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v57])(&v46, &v54);
        }
        v40 = WTF::fastMalloc((WTF *)0x80);
        *(_QWORD *)v40 = &off_1E33675B0;
        v41 = v49;
        v42 = v48;
        *(_OWORD *)(v40 + 16) = v47;
        *(_OWORD *)(v40 + 32) = v42;
        *(_BYTE *)(v40 + 64) = 0;
        *(_QWORD *)(v40 + 48) = v41;
        *(_DWORD *)(v40 + 88) = -1;
        v43 = v51;
        if (v51 != -1)
        {
          ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E3367370[v51])(&v54, v40 + 64, v50);
          *(_DWORD *)(v40 + 88) = v43;
        }
        *(_BYTE *)(v40 + 96) = 0;
        *(_DWORD *)(v40 + 120) = -1;
        v44 = v53;
        if (v53 != -1)
        {
          ((void (*)(uint64_t *))off_1E3367370[v53])(&v54);
          *(_DWORD *)(v40 + 120) = v44;
        }
        v54 = v40;
        LOBYTE(v55) = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 56))(v6, &v54);
        result = v54;
        v54 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        if (v53 != -1)
          result = ((uint64_t (*)(char **, _BYTE *))off_1E3367350[v53])(&v46, v52);
        v53 = -1;
        if (v51 != -1)
          return ((uint64_t (*)(char **, _BYTE *))off_1E3367350[v51])(&v46, v50);
        return result;
      }
      if (!(_DWORD)v31)
      {
        v32 = 8;
        goto LABEL_32;
      }
    }
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_32:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v10, v32);
    goto LABEL_33;
  }
  LOBYTE(v54) = 8;
  v55 = 0;
  v56 = 1;
  v26 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 16))(v26, &v54);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v56 != -1)
    return ((uint64_t (*)(char **, uint64_t *))off_1E3367390[v56])(&v46, &v54);
  return result;
}

void WebCore::WorkerStorageConnection::didGetDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t FileSystemStorageConnection;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  char v51;

  if (*(_DWORD *)(a3 + 16))
  {
    v5 = 0;
  }
  else
  {
    v5 = *(unsigned int **)(a3 + 8);
    if (v5)
    {
      v7 = v5 + 2;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 + 1, v7));
      v6 = 0;
      goto LABEL_9;
    }
  }
  v6 = 1;
LABEL_9:
  v10 = (uint64_t *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  if (!v11)
    goto LABEL_33;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = *(_QWORD *)(v11 + 16 * v16);
  if (v17 != a2)
  {
    v18 = 1;
    while (v17)
    {
      v16 = ((_DWORD)v16 + v18) & v12;
      v17 = *(_QWORD *)(v11 + 16 * v16);
      ++v18;
      if (v17 == a2)
        goto LABEL_16;
    }
    v16 = *(unsigned int *)(v11 - 4);
  }
LABEL_16:
  if (v16 == *(_DWORD *)(v11 - 4))
    goto LABEL_33;
  v19 = (_QWORD *)(v11 + 16 * v16);
  v20 = v19[1];
  v19[1] = 0;
  v21 = *v10;
  if (!*v10 || (v21 += 16 * *(unsigned int *)(v21 - 4), (_QWORD *)v21 != v19))
  {
    if ((_QWORD *)v21 != v19)
    {
      *v19 = -1;
      v19[1] = 0;
      ++*(_DWORD *)(*v10 - 16);
      v22 = *v10;
      v23 = *v10 ? *(_DWORD *)(v22 - 12) - 1 : -1;
      *(_DWORD *)(v22 - 12) = v23;
      v24 = *v10;
      if (*v10)
      {
        v25 = 6 * *(_DWORD *)(v24 - 12);
        v26 = *(_DWORD *)(v24 - 4);
        if (v25 < v26 && v26 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v10, v26 >> 1);
      }
    }
  }
  if (!v20)
    goto LABEL_33;
  if (*(_DWORD *)(a3 + 16))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
LABEL_33:
    if ((v6 & 1) != 0)
      return;
    v28 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = &off_1E3367660;
    *((_QWORD *)v28 + 1) = v5;
    v48 = v28;
    WTF::callOnMainThread();
    v29 = v48;
    v48 = 0;
    if (v29)
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
    goto LABEL_36;
  }
  v33 = *(_QWORD *)(a1 + 16);
  if (!v33 || (v34 = *(_QWORD *)(v33 + 8)) == 0)
  {
    LOBYTE(v48) = 8;
    v49 = 0;
    v50 = 1;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v20 + 16))(v20, &v48);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v50 != -1)
      ((void (*)(char *, unsigned int **))off_1E3367390[v50])(&v51, &v48);
    goto LABEL_33;
  }
  v35 = v34 - 320;
  v36 = v5 + 2;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 + 1, v36));
  v48 = v5;
  FileSystemStorageConnection = WebCore::WorkerGlobalScope::getFileSystemStorageConnection(v35, (int *)&v48);
  v39 = v48;
  v48 = 0;
  if (v39)
  {
    v40 = v39 + 2;
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v39 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  if (*(_DWORD *)(a3 + 16))
  {
    v47 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::SpeechSynthesis::ref(v47);
    return;
  }
  v43 = (unsigned int *)(FileSystemStorageConnection + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 + 1, v43));
  v48 = *(unsigned int **)a3;
  v49 = FileSystemStorageConnection;
  v50 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v20 + 16))(v20, &v48);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v50 != -1)
    ((void (*)(char *, unsigned int **))off_1E3367390[v50])(&v51, &v48);
  if (!v5)
    goto LABEL_58;
  do
  {
    v45 = __ldaxr(v36);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v36));
  if (!v46)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    if ((v6 & 1) != 0)
      return;
  }
  else
  {
LABEL_58:
    if ((v6 & 1) != 0)
      return;
  }
LABEL_36:
  v30 = v5 + 2;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebCore::SpeechSynthesis::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::SpeechSynthesis::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 64))(this);
  --this[6];
  return this;
}

uint64_t WebCore::SpeechSynthesis::scriptExecutionContext(WebCore::SpeechSynthesis *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::SpeechSynthesis::eventTargetInterface(WebCore::SpeechSynthesis *this)
{
  return 20;
}

uint64_t WebCore::SpeechSynthesis::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::SpeechSynthesis::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 64))(this);
  --this[6];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 64))(this - 32);
  --*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::eventTargetInterface(WebCore::SpeechSynthesis *this)
{
  return 20;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::scriptExecutionContext(WebCore::SpeechSynthesis *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 32);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesis::derefEventTarget(uint64_t this)
{
  if (*(_DWORD *)(this - 32) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 56) + 64))(this - 56);
  --*(_DWORD *)(this - 32);
  return this;
}

uint64_t WebCore::SpeechSynthesisUtterance::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 32);
  return this;
}

WebCore::SpeechSynthesisUtterance *WebCore::SpeechSynthesisUtterance::deref(WebCore::SpeechSynthesisUtterance *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 8) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(this, a2);
    return (WebCore::SpeechSynthesisUtterance *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 8);
  }
  return this;
}

uint64_t WebCore::SpeechSynthesisUtterance::scriptExecutionContext(WebCore::SpeechSynthesisUtterance *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::SpeechSynthesisUtterance::eventTargetInterface(WebCore::SpeechSynthesisUtterance *this)
{
  return 21;
}

uint64_t WebCore::SpeechSynthesisUtterance::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 32);
  return this;
}

WebCore::SpeechSynthesisUtterance *WebCore::SpeechSynthesisUtterance::derefEventTarget(WebCore::SpeechSynthesisUtterance *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 8) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(this, a2);
    return (WebCore::SpeechSynthesisUtterance *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 8);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesisUtterance::eventTargetInterface(WebCore::SpeechSynthesisUtterance *this)
{
  return 21;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesisUtterance::scriptExecutionContext(WebCore::SpeechSynthesisUtterance *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesisUtterance::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SpeechSynthesisUtterance::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)(this - 40), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

void WebCore::WorkerStorageConnection::~WorkerStorageConnection(WebCore::WorkerStorageConnection *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::WorkerStorageConnection::~WorkerStorageConnection(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)(v7 + 8);
      do
      {
        if (*(v9 - 1) != -1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    v17 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)(v11 + 8);
      do
      {
        if (*(v18 - 1) != -1)
        {
          v19 = *v18;
          *v18 = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v15 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v15)
      {
        v21 = v12;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v15));
        v12 = v21;
      }
      v16 = *(WTF **)(v12 + 16);
      if (v16)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        v20 = v12;
        WTF::fastFree(v16, a2);
        v12 = v20;
      }
      WTF::fastFree((WTF *)v12, a2);
    }
  }
}

uint64_t WebCore::StorageConnection::persist(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::SpeechSynthesisErrorEvent::~SpeechSynthesisErrorEvent(WebCore::SpeechSynthesisErrorEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::SpeechSynthesisUtterance *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = off_1E3367008;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::SpeechSynthesisUtterance *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v4, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v4 + 8);
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WebCore::SpeechSynthesisUtterance *v4;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  *(_QWORD *)this = off_1E3367008;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::SpeechSynthesisUtterance *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 8);
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::SpeechSynthesisEvent::~SpeechSynthesisEvent(WebCore::SpeechSynthesisEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::SpeechSynthesisUtterance *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = off_1E3367008;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::SpeechSynthesisUtterance *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v4, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v4 + 8);
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WebCore::SpeechSynthesisUtterance *v4;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  *(_QWORD *)this = off_1E3367008;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::SpeechSynthesisUtterance *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v4 + 8);
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::SpeechSynthesisVoice::~SpeechSynthesisVoice(WebCore::SpeechSynthesisVoice *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  *(_QWORD *)this = off_1E33671C0;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v3, a2);
}

{
  WTF::StringImpl **v3;

  *(_QWORD *)this = off_1E33671C0;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SpeechRecognizer::startCapture(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,void,WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3367260;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SpeechRecognizer::startCapture(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,void,WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367260;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::SpeechRecognizer::startCapture(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,void,WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long>::call(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      WebCore::SpeechRecognizer::dataCaptured(v6, a2, a3, a4, a5);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SpeechRecognizer::startCapture(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_1,void,WebCore::SpeechRecognitionUpdate const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3367288;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SpeechRecognizer::startCapture(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_1,void,WebCore::SpeechRecognitionUpdate const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367288;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SpeechRecognizer::startCapture(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_1,void,WebCore::SpeechRecognitionUpdate const&>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8));
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14ConnectionInfoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3367350[v3])(&v6, a2 + 40);
  *(_DWORD *)(a2 + 64) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3367350[v5])(&v7, a2 + 8);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14ConnectionInfoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15StorageEstimateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Deque<WTF::Ref<WebCore::SpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::SpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::SpeechSynthesisUtterance>>,0ul>::destroyAll(uint64_t result, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  bmalloc::api *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  bmalloc::api *v16;
  void *v17;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  v4 = *(uint64_t **)(result + 16);
  if (*(_QWORD *)result <= v3)
  {
    if (*(_QWORD *)result != v3)
    {
      v9 = &v4[v2];
      v10 = 8 * v3 - 8 * v2;
      do
      {
        result = *v9;
        *v9 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 32) == 1)
          {
            WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)result, a2);
            result = bmalloc::api::isoDeallocate(v11, v12);
          }
          else
          {
            --*(_DWORD *)(result + 32);
          }
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else
  {
    v5 = result;
    if (v3)
    {
      v6 = 8 * v3;
      do
      {
        result = *v4;
        *v4 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 32) == 1)
          {
            WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)result, a2);
            result = bmalloc::api::isoDeallocate(v7, v8);
          }
          else
          {
            --*(_DWORD *)(result + 32);
          }
        }
        ++v4;
        v6 -= 8;
      }
      while (v6);
      v4 = *(uint64_t **)(v5 + 16);
      v2 = *(_QWORD *)v5;
    }
    v13 = *(unsigned int *)(v5 + 24);
    if (v2 != v13)
    {
      v14 = &v4[v2];
      v15 = 8 * v13 - 8 * v2;
      do
      {
        result = *v14;
        *v14 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 32) == 1)
          {
            WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance((WebCore::SpeechSynthesisUtterance *)result, a2);
            result = bmalloc::api::isoDeallocate(v16, v17);
          }
          else
          {
            --*(_DWORD *)(result + 32);
          }
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::StorageManager::persisted(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3367410;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageManager::persisted(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367410;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageManager::persisted(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::StorageManager::persist(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3367438;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageManager::persist(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367438;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageManager::persist(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::StorageManager::estimate(WebCore::DOMPromiseDeferred<WebCore::IDLDictionary<WebCore::StorageEstimate>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::StorageEstimate> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3367460;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageManager::estimate(WebCore::DOMPromiseDeferred<WebCore::IDLDictionary<WebCore::StorageEstimate>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::StorageEstimate> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367460;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::StorageManager::estimate(WebCore::DOMPromiseDeferred<WebCore::IDLDictionary<WebCore::StorageEstimate>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::StorageEstimate> &&>::call(WTF::StringImpl *result, char *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  _QWORD *v16;
  int v18;
  int v19;
  WTF::StringImpl *v20[2];
  objc_class *v21;

  v7 = *((_DWORD *)a2 + 4);
  if (v7)
  {
    if (v7 == 1)
    {
      v8 = *a2;
      v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v10 = *((_QWORD *)result + 1);
      v21 = 0;
      LOBYTE(v20[0]) = v8;
      if (v9)
        *(_DWORD *)v9 += 2;
      v20[1] = v9;
      WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)v20, 0, &v21);
      result = v20[1];
      v20[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          if (!v9)
            return result;
          goto LABEL_9;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v9)
        return result;
LABEL_9:
      if (*(_DWORD *)v9 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v11);
      *(_DWORD *)v9 -= 2;
      return result;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_32;
  }
  *(_OWORD *)v20 = *(_OWORD *)a2;
  v2 = *((_QWORD *)result + 1);
  v12 = *(_QWORD *)(v2 + 24);
  if (v12 && *(_QWORD *)v12 && (*(_BYTE *)(v12 + 8) & 3) == 0)
  {
    v13 = *(_QWORD *)(v2 + 32);
    if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
      v3 = 0;
    else
      v3 = *(uint64_t **)v13;
    v14 = v3[7];
    MEMORY[0x19AEA3294](&v21, v14);
    v15 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v3, **(_QWORD **)(v2 + 32), (unint64_t *)v20);
    v4 = *(_QWORD *)(v14 + 16);
    if (!v4)
    {
      WebCore::DeferredPromise::callFunction(v2, v3, 0, v15);
      v4 = *(_QWORD *)(v14 + 16);
      if (!v4)
        return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v21);
    }
    v16 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v3);
    if (!(*(unsigned int (**)(_QWORD *))(*v16 + 64))(v16))
      goto LABEL_25;
    v6 = v16[43];
    if (*(_QWORD *)(v14 + 24) == v4)
    {
LABEL_40:
      *(_BYTE *)(*(_QWORD *)(v6 + 8) + 93442) = 1;
      *(_BYTE *)(v2 + 44) = 1;
      goto LABEL_25;
    }
    if (!v6)
    {
LABEL_25:
      WebCore::reportException((JSC::JSGlobalObject *)v3, v4, 0, 0, 0);
      return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v21);
    }
    v5 = (unsigned __int8 *)(v6 + 40);
    if (__ldaxr((unsigned __int8 *)(v6 + 40)))
    {
      __clrex();
LABEL_33:
      MEMORY[0x19AEA534C](v5);
LABEL_34:
      v18 = *(unsigned __int8 *)(v6 + 41);
      v19 = __ldxr(v5);
      if (v19 == 1)
      {
        if (!__stlxr(0, v5))
        {
LABEL_39:
          if (v18)
            goto LABEL_40;
          goto LABEL_25;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_39;
    }
LABEL_32:
    if (!__stxr(1u, v5))
      goto LABEL_34;
    goto LABEL_33;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::StorageManager::fileSystemAccessGetDirectory(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>> &&)::$_0,void,WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E3367488;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageManager::fileSystemAccessGetDirectory(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>> &&)::$_0,void,WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E3367488;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::StorageManager::fileSystemAccessGetDirectory(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>> &&)::$_0,void,WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&>::call(uint64_t a1, char *a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  objc_class *v36;

  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = *a2;
      v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v8 = *(_QWORD *)(a1 + 8);
      v32 = 0;
      LOBYTE(v34) = v6;
      if (v7)
        *(_DWORD *)v7 += 2;
      v35 = v7;
      WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v34, 0, &v32);
      result = v35;
      v35 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
          if (!v7)
            return result;
          goto LABEL_9;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v7)
        return result;
LABEL_9:
      if (*(_DWORD *)v7 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v9);
      *(_DWORD *)v7 -= 2;
      return result;
    }
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_63;
  }
  v11 = *(_QWORD *)a2;
  v2 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v3 = *(_QWORD *)(v14 + 8);
        if (v3)
        {
          v15 = *(unsigned __int8 *)(v3 + 178);
          if (*(_BYTE *)(v3 + 178))
          {
            if (v15 == 1 || v15 == 2)
              ++*(_DWORD *)(v3 + 216);
          }
          else
          {
            *(_DWORD *)(v3 - 264) += 2;
          }
          v32 = 0;
          v16 = v2 + 2;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
          v36 = (objc_class *)v2;
          WebCore::FileSystemDirectoryHandle::create(v3 - 96, (uint64_t *)&v32, v11, (uint64_t *)&v36, (uint64_t *)&v34);
          v18 = v34;
          WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FileSystemDirectoryHandle>>(*(_QWORD *)(a1 + 8), (uint64_t)v34);
          v34 = 0;
          if (v18[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
          else
            --v18[6];
          v20 = (unsigned int *)v36;
          v36 = 0;
          if (v20)
          {
            v21 = v20 + 2;
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v20 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
            }
          }
          result = v32;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(v32, v19);
            else
              *(_DWORD *)v32 -= 2;
          }
          v24 = *(unsigned __int8 *)(v3 + 178);
          if (!*(_BYTE *)(v3 + 178))
          {
            if (*(_DWORD *)(v3 - 264) == 2)
            {
              if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
                result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v19);
            }
            else
            {
              *(_DWORD *)(v3 - 264) -= 2;
            }
LABEL_32:
            if (!v2)
              return result;
            goto LABEL_42;
          }
          if (v24 == 1)
          {
            if (*(_DWORD *)(v3 + 216) == 1)
              result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
            else
              --*(_DWORD *)(v3 + 216);
            goto LABEL_32;
          }
LABEL_63:
          if (v24 == 2)
            result = (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
          goto LABEL_32;
        }
      }
    }
  }
  (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v2 + 24))(v2, v11);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = *(_QWORD *)(a1 + 8);
  LOBYTE(v32) = 8;
  v36 = 0;
  LOBYTE(v34) = 8;
  v26 = v33;
  if (v33)
    *(_DWORD *)v33 += 2;
  v35 = v26;
  WebCore::DeferredPromise::reject(v25, (unsigned __int8 *)&v34, 0, &v36);
  v28 = v35;
  v35 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_42:
  v29 = v2 + 2;
  do
  {
    v30 = __ldaxr(v29);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v29));
  if (!v31)
  {
    atomic_store(1u, v2 + 2);
    return (WTF::StringImpl *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (uint64_t *)(v20 + 16 * v27);
          v30 = v29[1];
          v29[1] = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          *v29 = *v16;
          v31 = v6 + 16 * v13;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v29[1] = v32;
          v33 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          if (v16 == a3)
            v14 = v29;
        }
        else
        {
          v18 = v6 + 16 * v13;
          v19 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::getPersisted(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  *(_QWORD *)a1 = &off_1E33674B0;
  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3367350[v2])(&v5, a1 + 96);
  *(_DWORD *)(a1 + 120) = -1;
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3367350[v3])(&v6, a1 + 64);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::getPersisted(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)this = &off_1E33674B0;
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3367350[v3])(&v6, (char *)this + 96);
  *((_DWORD *)this + 30) = -1;
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3367350[v4])(&v7, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::getPersisted(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  char v19;
  _BYTE v20[40];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195510A00);
  }
  v3 = *(_QWORD *)(a2 + 336);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 24)) == 0 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v20[24] = *(_QWORD *)(a1 + 48);
    *(_OWORD *)&v20[8] = *(_OWORD *)(a1 + 32);
    v21[0] = *(_OWORD *)&v20[8];
    v21[1] = *(_OWORD *)&v20[24];
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E33674D8;
    v13[1] = v12;
    v13[2] = 0;
    v18 = v13;
    v19 = 0;
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v15 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v21);
    if (v15)
    {
      v16 = v15[4];
      if (v16)
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v16 + 336))(v16, &v18);
    }
    v17 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v17 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      {
LABEL_22:
        result = (uint64_t)v18;
        v18 = 0;
        if (!result)
          return result;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_22;
  }
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 1744) + 16))(*(_QWORD *)(v6 + 1744));
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)&v20[8] = *(_OWORD *)(a1 + 32);
  *(_QWORD *)&v20[24] = *(_QWORD *)(a1 + 48);
  v9 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v9 = off_1E3367500;
  *(_QWORD *)(v9 + 16) = v8;
  v10 = *(_OWORD *)&v20[16];
  *(_OWORD *)(v9 + 24) = *(_OWORD *)v20;
  *(_OWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 56) = *(_QWORD *)&v20[32];
  *(_QWORD *)&v21[0] = v9;
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v7 + 16))(v7, a1 + 64, v21);
  result = *(_QWORD *)&v21[0];
  *(_QWORD *)&v21[0] = 0;
  if (!result)
    return result;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection12getPersistedEONS2_12ClientOriginEONS_17CompletionHandlerIFvbEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlbE_clEbEUlSF_E_vJRSC_EE4callESI_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t *result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195510B68);
  }
  v4 = a2[150];
  if (!v4)
  {
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = off_1E33671E0;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::WorkerGlobalScope,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::WorkerGlobalScope>((uint64_t)a2);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)(v5 + 16) = v6;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    v8 = (unsigned int *)a2[150];
    a2[150] = v5;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    v4 = a2[150];
  }
  v12 = *(unsigned __int8 *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 8);
  result = WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::take((uint64_t *)(v4 + 32), &v16, &v15);
  v14 = v15;
  if (v15)
  {
    v15 = 0;
    (*(void (**)(uint64_t *, BOOL))(*v14 + 16))(v14, v12 != 0);
    (*(void (**)(uint64_t *))(*v14 + 8))(v14);
    result = v15;
    v15 = 0;
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore23WorkerStorageConnection12getPersistedEONS2_12ClientOriginEONS_17CompletionHandlerIFvbEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_EUlbE_vJbEE4callEb(uint64_t a1, unsigned int a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  _QWORD *v11;
  char v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 48);
  v13[0] = *(_OWORD *)(a1 + 32);
  v13[1] = v2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = a2;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E33674D8;
  v5[1] = v3;
  v5[2] = v4;
  v11 = v5;
  v12 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v13);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 336))(v8, &v11);
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  *(_QWORD *)a1 = &off_1E3367528;
  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3367350[v2])(&v5, a1 + 96);
  *(_DWORD *)(a1 + 120) = -1;
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3367350[v3])(&v6, a1 + 64);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)this = &off_1E3367528;
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3367350[v3])(&v6, (char *)this + 96);
  *((_DWORD *)this + 30) = -1;
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3367350[v4])(&v7, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t result;
  __int128 v11;
  int v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195510F54);
  }
  v3 = *(_QWORD *)(a2 + 336);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 24)) != 0 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 1744) + 16))(*(_QWORD *)(v6 + 1744));
    *(_QWORD *)&v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)&v16 = *(_QWORD *)(a1 + 48);
    v8 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v8 = off_1E3367588;
    v9 = v15;
    *(_OWORD *)(v8 + 16) = v14;
    *(_OWORD *)(v8 + 32) = v9;
    *(_OWORD *)(v8 + 48) = v16;
    *(_QWORD *)&v11 = v8;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v7 + 40))(v7, a1 + 64, &v11);
    result = v11;
    *(_QWORD *)&v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *(_QWORD *)&v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)&v16 = *(_QWORD *)(a1 + 48);
    LOBYTE(v11) = 8;
    *((_QWORD *)&v11 + 1) = 0;
    v12 = 1;
    result = _ZZZN7WebCore23WorkerStorageConnection11getEstimateEONS_12ClientOriginEON3WTF17CompletionHandlerIFvONS_11ExceptionOrINS_15StorageEstimateEEEEEEEN3__0clINS_22ScriptExecutionContextEEEDaRT_ENUlS8_E_clES8_((uint64_t *)&v14, &v11);
    if (v12 != -1)
      return ((uint64_t (*)(char *, __int128 *))off_1E33673A0[v12])(&v13, &v11);
  }
  return result;
}

uint64_t _ZZZN7WebCore23WorkerStorageConnection11getEstimateEONS_12ClientOriginEON3WTF17CompletionHandlerIFvONS_11ExceptionOrINS_15StorageEstimateEEEEEEEN3__0clINS_22ScriptExecutionContextEEEDaRT_ENUlS8_E_clES8_(uint64_t *a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  __int128 v17;
  int v18;
  _BYTE v19[8];
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *((_OWORD *)a1 + 2);
  v23[0] = *((_OWORD *)a1 + 1);
  v23[1] = v2;
  v3 = *a1;
  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    if (v4 != 1)
    {
      v16 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection11getEstimateEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_15StorageEstimateEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlSA_E_clESA_EUlSJ_E_vJRSG_EED1Ev(v16);
    }
    v19[0] = *(_BYTE *)a2;
    v5 = v19[0];
    v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v20 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v21) = v5;
    LOBYTE(v17) = v5;
    *((_QWORD *)&v17 + 1) = v22;
    v18 = 1;
    v22 = 0;
    v8 = v20;
    v20 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v17 = *a2;
    v18 = 0;
  }
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = &off_1E3367550;
  *(_QWORD *)(v10 + 8) = v3;
  *(_BYTE *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 32) = -1;
  ((void (*)(uint64_t *, uint64_t, __int128 *))off_1E3367568[v9])(&v21, v10 + 16, &v17);
  *(_DWORD *)(v10 + 32) = v9;
  v21 = v10;
  LOBYTE(v22) = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v23);
  if (v12)
  {
    v13 = v12[4];
    if (v13)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 336))(v13, &v21);
  }
  v14 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v14 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_22:
  result = v21;
  v21 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v18 != -1)
    return ((uint64_t (*)(_BYTE *, __int128 *))off_1E33673A0[v18])(v19, &v17);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection11getEstimateEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_15StorageEstimateEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlSA_E_clESA_EUlSJ_E_vJRSG_EED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3367550;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E33673A0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection11getEstimateEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_15StorageEstimateEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlSA_E_clESA_EUlSJ_E_vJRSG_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3367550;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33673A0[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection11getEstimateEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_15StorageEstimateEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlSA_E_clESA_EUlSJ_E_vJRSG_EE4callESM_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19551147CLL);
  }
  v4 = a2[150];
  if (!v4)
  {
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = off_1E33671E0;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::WorkerGlobalScope,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::WorkerGlobalScope>((uint64_t)a2);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)(v5 + 16) = v6;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    v8 = (unsigned int *)a2[150];
    a2[150] = v5;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    v4 = a2[150];
  }
  v14 = *(_QWORD *)(v4 + 40);
  v12 = (uint64_t *)(v4 + 40);
  v13 = v14;
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_DWORD *)(v13 - 8);
    v17 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(_QWORD *)(v13 + 16 * v20);
    if (v21 != v15)
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(_QWORD *)(v13 + 16 * v20);
        ++v22;
        if (v21 == v15)
          goto LABEL_18;
      }
      v20 = *(unsigned int *)(v13 - 4);
    }
LABEL_18:
    if (v20 != *(_DWORD *)(v13 - 4))
    {
      v23 = (_QWORD *)(v13 + 16 * v20);
      v24 = v23[1];
      v23[1] = 0;
      v25 = *v12;
      if (!*v12 || (v25 += 16 * *(unsigned int *)(v25 - 4), (_QWORD *)v25 != v23))
      {
        if ((_QWORD *)v25 != v23)
        {
          *v23 = -1;
          v23[1] = 0;
          ++*(_DWORD *)(*v12 - 16);
          v26 = *v12;
          v27 = *v12 ? *(_DWORD *)(v26 - 12) - 1 : -1;
          *(_DWORD *)(v26 - 12) = v27;
          v28 = *v12;
          if (*v12)
          {
            v29 = 6 * *(_DWORD *)(v28 - 12);
            v30 = *(_DWORD *)(v28 - 4);
            if (v29 < v30 && v30 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WebCore::ExceptionOr<BOOL> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WorkerFileSystemStorageConnectionCallbackIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WebCore::ExceptionOr<BOOL> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v12, v30 >> 1);
          }
        }
      }
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, a1 + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
    }
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore15StorageEstimateENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore15StorageEstimateENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore23WorkerStorageConnection11getEstimateEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINS2_15StorageEstimateEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_EUlSA_E_vJSA_EE4callESA_(uint64_t a1, __int128 *a2)
{
  return _ZZZN7WebCore23WorkerStorageConnection11getEstimateEONS_12ClientOriginEON3WTF17CompletionHandlerIFvONS_11ExceptionOrINS_15StorageEstimateEEEEEEEN3__0clINS_22ScriptExecutionContextEEEDaRT_ENUlS8_E_clES8_((uint64_t *)(a1 + 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  *(_QWORD *)a1 = &off_1E33675B0;
  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3367350[v2])(&v5, a1 + 96);
  *(_DWORD *)(a1 + 120) = -1;
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3367350[v3])(&v6, a1 + 64);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)this = &off_1E33675B0;
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3367350[v3])(&v6, (char *)this + 96);
  *((_DWORD *)this + 30) = -1;
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3367350[v4])(&v7, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  char v22;
  _BYTE v23[40];
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195511874);
  }
  v3 = *(_QWORD *)(a2 + 336);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 1744) + 16))(*(_QWORD *)(v6 + 1744));
          v8 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)&v23[8] = *(_OWORD *)(a1 + 32);
          *(_QWORD *)&v23[24] = *(_QWORD *)(a1 + 48);
          v9 = WTF::fastMalloc((WTF *)0x40);
          *(_QWORD *)v9 = off_1E3367600;
          *(_QWORD *)(v9 + 16) = v8;
          v10 = *(_OWORD *)&v23[16];
          *(_OWORD *)(v9 + 24) = *(_OWORD *)v23;
          *(_OWORD *)(v9 + 40) = v10;
          *(_QWORD *)(v9 + 56) = *(_QWORD *)&v23[32];
          *(_QWORD *)&v24[0] = v9;
          (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v7 + 32))(v7, a1 + 64, v24);
          result = *(_QWORD *)&v24[0];
          *(_QWORD *)&v24[0] = 0;
          if (result)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          return result;
        }
      }
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v23[24] = *(_QWORD *)(a1 + 48);
  *(_OWORD *)&v23[8] = *(_OWORD *)(a1 + 32);
  v19 = v12;
  v24[0] = *(_OWORD *)&v23[8];
  v24[1] = *(_OWORD *)&v23[24];
  WTF::String::isolatedCopy();
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v13 = &off_1E33675D8;
  *(_QWORD *)(v13 + 8) = v19;
  *(_BYTE *)(v13 + 16) = 8;
  v21 = v13;
  *(_QWORD *)(v13 + 24) = v20;
  v22 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v15 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v24);
  if (v15)
  {
    v16 = v15[4];
    if (v16)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 336))(v16, &v21);
  }
  v17 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v17 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_22:
  v18 = v21;
  v21 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return 0;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection22fileSystemGetDirectoryEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINSt3__14pairINS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_6RefPtrINS2_27FileSystemStorageConnectionENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEEEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlOSW_E_clINS2_9ExceptionEEESV_SY_EUlSX_E_vJRSU_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E33675D8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection22fileSystemGetDirectoryEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINSt3__14pairINS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_6RefPtrINS2_27FileSystemStorageConnectionENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEEEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlOSW_E_clINS2_9ExceptionEEESV_SY_EUlSX_E_vJRSU_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E33675D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection22fileSystemGetDirectoryEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINSt3__14pairINS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_6RefPtrINS2_27FileSystemStorageConnectionENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEEEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlOSW_E_clINS2_9ExceptionEEESV_SY_EUlSX_E_vJRSU_EE4callES13_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  char v18;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195511A58);
  }
  v4 = a2[150];
  if (!v4)
  {
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = off_1E33671E0;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::WorkerGlobalScope,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::WorkerGlobalScope>((uint64_t)a2);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)(v5 + 16) = v6;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    v8 = (unsigned int *)a2[150];
    a2[150] = v5;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    v4 = a2[150];
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_BYTE *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v15[0] = v13;
  v16 = v14;
  v17 = 1;
  WebCore::WorkerStorageConnection::didGetDirectory(v4, v12, (uint64_t)v15);
  if (v17 != -1)
    ((void (*)(char *, _BYTE *))off_1E3367390[v17])(&v18, v15);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore23WorkerStorageConnection22fileSystemGetDirectoryEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINSt3__14pairINS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_6RefPtrINS2_27FileSystemStorageConnectionENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEEEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_EUlOSW_E_vJSO_EE4callESO_(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  uint64_t v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 48);
  v26[0] = *(_OWORD *)(a1 + 32);
  v26[1] = v2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    if (v4 != 1)
    {
      v18 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection22fileSystemGetDirectoryEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINSt3__14pairINS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_6RefPtrINS2_27FileSystemStorageConnectionENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEEEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlOSW_E_clISN_EESV_SY_EUlSX_E_vJRSU_EED1Ev(v18);
    }
    v22[0] = *(_BYTE *)a2;
    v5 = v22[0];
    v6 = (WTF::StringImpl *)a2[1];
    a2[1] = 0;
    v23 = v6;
    WTF::String::isolatedCopy();
    LOBYTE(v24) = v5;
    LOBYTE(v19) = v5;
    v20 = v25;
    v21 = 1;
    v25 = 0;
    v8 = v23;
    v23 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v10 = *a2;
    v11 = a2[1];
    a2[1] = 0;
    v19 = v10;
    v20 = v11;
    v21 = 0;
  }
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = &off_1E3367628;
  *(_QWORD *)(v12 + 8) = v3;
  *(_BYTE *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 32) = -1;
  ((void (*)(uint64_t *, uint64_t, uint64_t *))off_1E3367640[v9])(&v24, v12 + 16, &v19);
  *(_DWORD *)(v12 + 32) = v9;
  v24 = v12;
  LOBYTE(v25) = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v26);
  if (v14)
  {
    v15 = v14[4];
    if (v15)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 336))(v15, &v24);
  }
  v16 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v16 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_22:
  result = v24;
  v24 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v21 != -1)
    return ((uint64_t (*)(_BYTE *, uint64_t *))off_1E3367390[v21])(v22, &v19);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection22fileSystemGetDirectoryEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINSt3__14pairINS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_6RefPtrINS2_27FileSystemStorageConnectionENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEEEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlOSW_E_clISN_EESV_SY_EUlSX_E_vJRSU_EED1Ev(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E3367628;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3367390[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection22fileSystemGetDirectoryEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINSt3__14pairINS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_6RefPtrINS2_27FileSystemStorageConnectionENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEEEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlOSW_E_clISN_EESV_SY_EUlSX_E_vJRSU_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E3367628;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3367390[v3])(&v5, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore23WorkerStorageConnection22fileSystemGetDirectoryEONS2_12ClientOriginEONS_17CompletionHandlerIFvONS2_11ExceptionOrINSt3__14pairINS_23ObjectIdentifierGenericINS2_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_6RefPtrINS2_27FileSystemStorageConnectionENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEEEEEEEEEN3__0clINS2_22ScriptExecutionContextEEEDaRT_ENUlOSW_E_clISN_EESV_SY_EUlSX_E_vJRSU_EE4callES12_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (((*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195511E50);
  }
  v4 = a2[150];
  if (!v4)
  {
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = off_1E33671E0;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::WorkerGlobalScope,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::WorkerGlobalScope>((uint64_t)a2);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)(v5 + 16) = v6;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    v8 = (unsigned int *)a2[150];
    a2[150] = v5;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    v4 = a2[150];
  }
  WebCore::WorkerStorageConnection::didGetDirectory(v4, *(_QWORD *)(a1 + 8), a1 + 16);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEEEENSB_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  *a2 = *a3;
  v3 = a3[1];
  a3[1] = 0;
  a2[1] = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEEEENSB_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::didGetDirectory(unsigned long long,WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WebCore::FileSystemStorageConnection>,WTF::DefaultRefDerefTraits<WebCore::FileSystemStorageConnection>>>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3367660;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerStorageConnection::didGetDirectory(unsigned long long,WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WebCore::FileSystemStorageConnection>,WTF::DefaultRefDerefTraits<WebCore::FileSystemStorageConnection>>>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367660;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WebCore::ReadableStream::createFromJSValues@<X0>(WebCore::JSDOMGlobalObject *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *result;
  int v16;
  WebCore::ReadableStream *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;

  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  v9 = v8;
  if (v8)
  {
    v10 = *(unsigned __int8 *)(v8 + 274);
    if (*(_BYTE *)(v8 + 274))
    {
      if (v10 == 1 || v10 == 2)
        ++*(_DWORD *)(v8 + 312);
    }
    else
    {
      *(_DWORD *)(v8 - 168) += 2;
    }
  }
  WebCore::InternalReadableStream::createFromUnderlyingSource(a1, a2, a3, (uint64_t)&v19);
  v11 = v21;
  if (v21)
  {
    if (v21 != 1)
    {
      v17 = (WebCore::ReadableStream *)std::__throw_bad_variant_access[abi:sn180100]();
      return (_DWORD *)WebCore::ReadableStream::tee(v17, v18);
    }
    v12 = v20;
    v20 = 0;
    *(_BYTE *)a4 = v19;
    *(_QWORD *)(a4 + 8) = v12;
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x10);
    v14 = v19;
    v19 = 0;
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = v14;
    *(_QWORD *)a4 = v13;
  }
  *(_DWORD *)(a4 + 16) = v11;
  result = (_DWORD *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalReadableStreamENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v11])(&v22, &v19);
  if (v9)
  {
    v16 = *(unsigned __int8 *)(v9 + 274);
    if (*(_BYTE *)(v9 + 274))
    {
      if (v16 == 1)
      {
        if (*(_DWORD *)(v9 + 312) == 1)
          return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        else
          --*(_DWORD *)(v9 + 312);
      }
      else if (v16 == 2)
      {
        return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v9 + 312));
      }
    }
    else if (*(_DWORD *)(v9 - 168) == 2)
    {
      if ((*(_WORD *)(v9 - 162) & 0x400) == 0)
        return (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 192));
    }
    else
    {
      *(_DWORD *)(v9 - 168) -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::ReadableStream::tee@<X0>(WTF::StringImpl **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  _QWORD *result;
  void *v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  WebCore::JSReadableStream *v15;
  JSC::JSGlobalObject *v16;
  JSC::CallFrame *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;

  WebCore::InternalReadableStream::tee(this[1], a2, (uint64_t)&v18);
  if (v20)
  {
    if (v20 != 1)
    {
      v15 = (WebCore::JSReadableStream *)std::__throw_bad_variant_access[abi:sn180100]();
      return (_QWORD *)WebCore::JSReadableStream::cancel(v15, v16, v17);
    }
    v4 = v19;
    v19 = 0;
    *(_BYTE *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v4;
    v5 = 1;
    *(_DWORD *)(a3 + 16) = 1;
    return (_QWORD *)((uint64_t (*)(char *, uint64_t *))off_1E3367810[v5])(&v21, &v18);
  }
  v6 = v18;
  v7 = v19;
  v18 = 0;
  v19 = 0;
  v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *((_QWORD *)v8 + 1) = v6;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *((_QWORD *)v9 + 1) = v7;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  ++*(_DWORD *)v8;
  *result = v8;
  v12 = (*(_DWORD *)v9)++;
  result[1] = v9;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = 0x200000002;
  *(_DWORD *)(a3 + 16) = 0;
  if (v12)
  {
    *(_DWORD *)v9 = v12;
  }
  else
  {
    v13 = (_DWORD *)*((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = 0;
    if (v13)
    {
      if (v13[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[4];
    }
    result = (_QWORD *)WTF::fastFree(v9, v11);
  }
  if (*(_DWORD *)v8 == 1)
  {
    v14 = (_DWORD *)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0;
    if (v14)
    {
      if (v14[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      else
        --v14[4];
    }
    result = (_QWORD *)WTF::fastFree(v8, v11);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  v5 = v20;
  if (v20 != -1)
    return (_QWORD *)((uint64_t (*)(char *, uint64_t *))off_1E3367810[v5])(&v21, &v18);
  return result;
}

uint64_t WebCore::JSReadableStream::cancel(WebCore::JSReadableStream *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*((_DWORD *)a3 + 8) == 1)
    v4 = 10;
  else
    v4 = *((_QWORD *)a3 + 6);
  return WebCore::InternalReadableStream::cancel(v3, a2, v4, 0);
}

uint64_t WebCore::JSReadableStream::getReader(WebCore::JSReadableStream *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*((_DWORD *)a3 + 8) == 1)
    v4 = 10;
  else
    v4 = *((_QWORD *)a3 + 6);
  return WebCore::InternalReadableStream::getReader(v3, a2, v4);
}

uint64_t WebCore::JSReadableStream::pipeTo(WebCore::JSReadableStream *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v4 = *((int *)a3 + 8) - 1;
  if (*((_DWORD *)a3 + 8) == 1)
  {
    v6 = 10;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)a3 + 6);
  if (v4 == 1)
  {
LABEL_6:
    v7 = 10;
    return WebCore::InternalReadableStream::pipeTo(v3, a2, v6, v7);
  }
  v7 = *((_QWORD *)a3 + 7);
  return WebCore::InternalReadableStream::pipeTo(v3, a2, v6, v7);
}

uint64_t WebCore::JSReadableStream::pipeThrough(WebCore::JSReadableStream *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v4 = *((int *)a3 + 8) - 1;
  if (*((_DWORD *)a3 + 8) == 1)
  {
    v6 = 10;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)a3 + 6);
  if (v4 == 1)
  {
LABEL_6:
    v7 = 10;
    return WebCore::InternalReadableStream::pipeThrough(v3, a2, v6, v7);
  }
  v7 = *((_QWORD *)a3 + 7);
  return WebCore::InternalReadableStream::pipeThrough(v3, a2, v6, v7);
}

uint64_t WebCore::ReadableStreamToSharedBufferSink::enqueue(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  _QWORD v33[2];
  char v34;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      if ((v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v4 & 0x3FFFFFFFFLL) + v5)
      {
        v6 = *(_BYTE *)(v2 + 6);
        if ((v6 & 3) != 0)
        {
          if (*(_BYTE *)(v3 + 64) && (v29 = *(_QWORD *)(v3 + 32)) != 0)
          {
            v16 = atomic_load((unint64_t *)(v29 + 32));
            v6 = *(_BYTE *)(v2 + 6);
          }
          else
          {
            v16 = *(_QWORD *)(v3 + 48);
          }
          v17 = *(_QWORD *)(v2 + 8);
          if ((v6 & 4) != 0)
          {
            v25 = v16 >= v17;
            v19 = v16 - v17;
            if (v25)
              return result;
            v20 = *(_BYTE *)(v2 + 4) - 4;
            if (v20 > 7u)
              LOBYTE(v21) = 0;
            else
              v21 = qword_1968DEE78[(char)v20];
            v7 = (-1 << v21) & v19;
          }
          else
          {
            v7 = *(_QWORD *)(v2 + 16);
            if (v16 >= v17 && v7 + v17 <= v16)
              return result;
          }
        }
        else
        {
          v7 = *(_QWORD *)(v2 + 16);
        }
        if (v7 && *(_QWORD *)(result + 16))
        {
          v8 = *a2;
          v9 = *(_QWORD *)(*a2 + 32);
          if (!v9 || (v10 = *(_QWORD *)(v9 + 16)) == 0)
          {
            v13 = 0;
            goto LABEL_20;
          }
          v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (!v11 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
          {
            v13 = *(_QWORD *)(v8 + 24);
LABEL_39:
            v22 = *(_BYTE *)(v8 + 6);
            if ((v22 & 3) == 0)
            {
              v15 = *(_QWORD *)(v8 + 16);
LABEL_41:
              v33[0] = v13;
              v33[1] = v15;
              v31[0] = v33;
              v32 = 0;
              result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16), v31);
              if (v32 != -1)
                return ((uint64_t (*)(char *, _QWORD *))off_1E3367820[v32])(&v34, v31);
              return result;
            }
            if (*(_BYTE *)(v9 + 64) && (v30 = *(_QWORD *)(v9 + 32)) != 0)
            {
              v23 = atomic_load((unint64_t *)(v30 + 32));
              v22 = *(_BYTE *)(v8 + 6);
            }
            else
            {
              v23 = *(_QWORD *)(v9 + 48);
            }
            v24 = *(_QWORD *)(v8 + 8);
            if ((v22 & 4) == 0)
            {
              v15 = *(_QWORD *)(v8 + 16);
              v25 = v15 + v24 <= v23 && v23 >= v24;
              if (v25)
                v15 = 0;
              goto LABEL_41;
            }
            v25 = v23 >= v24;
            v26 = v23 - v24;
            if (!v25)
            {
              v27 = *(_BYTE *)(v8 + 4) - 4;
              if (v27 > 7u)
                LOBYTE(v28) = 0;
              else
                v28 = qword_1968DEE78[(char)v27];
              v15 = (-1 << v28) & v26;
              goto LABEL_41;
            }
LABEL_20:
            v15 = 0;
            goto LABEL_41;
          }
          v12 = v10 & 0x3FFFFFFFFLL;
          if (v12 + v11)
          {
            v13 = *(_QWORD *)(v8 + 24);
            if (v13)
            {
              if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
                goto LABEL_39;
              v13 = (v13 & 0x3FFFFFFFFLL) + v11;
            }
          }
          else
          {
            v13 = 0;
          }
          v14 = -v11;
          if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && v12 == v14)
            goto LABEL_20;
          goto LABEL_39;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ReadableStreamToSharedBufferSink::close(uint64_t this)
{
  uint64_t v1;
  _QWORD v2[2];
  int v3;
  char v4;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    *(_QWORD *)(this + 16) = 0;
    v2[0] = 0;
    v3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v2);
    if (v3 != -1)
      ((void (*)(char *, _QWORD *))off_1E3367820[v3])(&v4, v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return this;
}

uint64_t WebCore::ReadableStreamToSharedBufferSink::error(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4[8];
  uint64_t v5;
  int v6;
  char v7;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    *(_QWORD *)(result + 16) = 0;
    v3 = *a2;
    *a2 = 0;
    v4[0] = 33;
    v5 = v3;
    v6 = 1;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 16))(v2, v4);
    if (v6 != -1)
      ((void (*)(char *, char *))off_1E3367820[v6])(&v7, v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

uint64_t WebCore::ReadableStreamSource::ReadableStreamSource(uint64_t this)
{
  *(_QWORD *)this = off_1E33676C0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

void WebCore::ReadableStreamSource::~ReadableStreamSource(WebCore::ReadableStreamSource *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(_DWORD **)v2;
    *(_QWORD *)v2 = 0;
    if (v3)
    {
      if (v3[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[4];
    }
    WTF::fastFree(v2, a2);
  }
}

uint64_t WebCore::ReadableStreamSource::startFinished(WebCore::ReadableStreamSource *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _DWORD *v8;
  _BYTE v10[8];

  v3 = (WTF *)*((_QWORD *)this + 1);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (!v5 || !*(_QWORD *)v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
  {
    *((_QWORD *)this + 1) = 0;
LABEL_8:
    v8 = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (v8)
    {
      if (v8[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[4];
    }
    WTF::fastFree(v3, a2);
    return (*(uint64_t (**)(WebCore::ReadableStreamSource *))(*(_QWORD *)this + 40))(this);
  }
  v6 = *(_QWORD *)(v4 + 32);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(uint64_t **)v6;
  JSC::JSLockHolder::JSLockHolder();
  WebCore::DeferredPromise::callFunction(v4, v7, 0, (objc_class *)0xA);
  MEMORY[0x19AEA32A0](v10);
  v3 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    goto LABEL_8;
  return (*(uint64_t (**)(WebCore::ReadableStreamSource *))(*(_QWORD *)this + 40))(this);
}

uint64_t WebCore::SimpleReadableStreamSource::doCancel(uint64_t this)
{
  *(_BYTE *)(this + 48) = 1;
  return this;
}

uint64_t WebCore::JSTransformStream::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(unint64_t **)(*(_QWORD *)(result + 24) + 16);
  if (v2)
  {
    if ((v2[1] & 3) == 0)
    {
      v3 = *v2;
      if (v3)
      {
        if ((v3 & 8) != 0)
        {
          if ((*(_BYTE *)(v3 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v4 = v3 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v7 = v3 & 0xFFFFFFFFFFFFC000;
            v5 = v3;
            v6 = a2;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v3 & 0xFFFFFFFFFFFFC000));
            v4 = v7;
            v3 = v5;
            a2 = v6;
          }
          if (((*(_QWORD *)(v4 + 8 * ((v3 >> 10) & 0xF) + 40) >> (v3 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t WebCore::TransformStream::create@<X0>(JSC::Structure *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _DWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSCell *v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  _DWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _BOOL4 v31;
  char **v32;
  BOOL v33;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  _DWORD *v55;
  _DWORD *v56;
  int v57;
  _QWORD v58[3];
  WTF *v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  uint64_t v63;
  int v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t *v68;
  _QWORD v69[3];
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  if (*(_BYTE *)(a2 + 8))
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v8 = *(_QWORD *)v8;
  }
  else
  {
    v8 = 10;
  }
  if (*(_BYTE *)(a3 + 8))
  {
    v9 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
      v9 = *(_QWORD *)v9;
  }
  else
  {
    v9 = 10;
  }
  if (*(_BYTE *)(a4 + 8))
  {
    v10 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
      v10 = *(_QWORD *)v10;
  }
  else
  {
    v10 = 10;
  }
  v11 = *((_QWORD *)a1 + 7);
  v12 = *(_QWORD *)(v11 + 41456);
  LOBYTE(v65) = 0;
  v68 = 0;
  v70 = 0u;
  v71 = 0u;
  v72 = 0;
  v67 = (WTF *)v69;
  v69[0] = v8;
  v69[1] = v9;
  v69[2] = v10;
  v66 = 0x800000003;
  MEMORY[0x19AEA3294](&v59, v11);
  v13 = JSC::JSObject::get(a1, a1, *(_QWORD *)(v12 + 7080));
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v54) = 0;
  }
  else if (*(_BYTE *)(v13 + 5) == 26)
  {
    JSC::JSFunction::getCallData((JSC::JSFunction *)v13, v14);
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v13 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v54, v13);
  }
  v62 = v67;
  LODWORD(v63) = v66;
  v15 = JSC::call();
  if (*(_DWORD *)(v11 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11))
  {
    LOBYTE(v22) = 37;
    LOBYTE(v62) = 37;
    v42 = 1;
    v64 = 1;
    MEMORY[0x19AEA32A0](&v59);
    v28 = 0;
    v63 = 0;
    LOBYTE(v54) = 37;
    v55 = 0;
    v43 = 1;
    v57 = 1;
  }
  else
  {
    v62 = (WTF *)v15;
    v64 = 0;
    MEMORY[0x19AEA32A0](&v59);
    v58[0] = *((_QWORD *)a1 + 7);
    if ((v15 & 0xFFFE000000000002) != 0 || (v16 = *(unsigned __int8 *)(v15 + 5), v16 <= 0x16))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v18 = v54;
      v54 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      v61 = 1;
    }
    else if (v16 == 36 && (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)v15) & 1) != 0)
    {
      WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLObject>>::convertArray((JSC::VM **)a1, v15, (uint64_t)&v59);
    }
    else
    {
      WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLObject>>::convert(a1, v15, (uint64_t)&v59);
    }
    v19 = v61;
    if (v61)
    {
      v28 = 0;
      LOBYTE(v22) = 37;
      LOBYTE(v54) = 37;
      v55 = 0;
      v42 = 1;
      v57 = 1;
    }
    else
    {
      v20 = v59;
      v21 = HIDWORD(v60);
      v59 = 0;
      v60 = 0;
      if (!(_DWORD)v21)
        goto LABEL_100;
      if (*(_QWORD *)v20)
        v22 = **(WTF::StringImpl ***)v20;
      else
        v22 = 0;
      v58[0] = v22;
      if (v21 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195512EF0);
      }
      v23 = (_QWORD *)*((_QWORD *)v20 + 1);
      if (v23)
        v23 = (_QWORD *)*v23;
      v24 = *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C);
      v25 = *(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v24)
      {
        v26 = 16 * v24;
        if ((char **)v26 != &WebCore::JSReadableStream::s_info)
        {
          do
          {
            v26 = *(_QWORD *)(v26 + 16);
            v25 = v26 != 0;
          }
          while ((char **)v26 != &WebCore::JSReadableStream::s_info && v26 != 0);
        }
      }
      if (!v25)
        v23 = 0;
      v28 = (_DWORD *)v23[3];
      ++*v28;
      if (v21 <= 2)
      {
LABEL_100:
        __break(0xC471u);
        JUMPOUT(0x195512EE8);
      }
      v29 = (_QWORD *)*((_QWORD *)v20 + 2);
      if (v29)
        v29 = (_QWORD *)*v29;
      v30 = *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C);
      v31 = *(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) != 0;
      v32 = (char **)(16 * v30);
      if ((_DWORD)v30)
        v33 = v32 == &WebCore::JSWritableStream::s_info;
      else
        v33 = 1;
      if (!v33)
      {
        do
        {
          v32 = (char **)v32[2];
          v31 = v32 != 0;
        }
        while (v32 != &WebCore::JSWritableStream::s_info && v32 != 0);
      }
      if (!v31)
        v29 = 0;
      v5 = (_DWORD *)v29[3];
      ++*v5;
      v54 = v22;
      v55 = v28;
      v58[1] = 0;
      v58[2] = 0;
      v56 = v5;
      v57 = 0;
      WebCore::CreateInternalTransformStreamResult::~CreateInternalTransformStreamResult((WebCore::CreateInternalTransformStreamResult *)v58, v17);
      v36 = 0;
      do
      {
        v37 = *(_QWORD *)((char *)v20 + v36);
        if (v37)
        {
          v38 = (uint64_t *)(v37 - 16);
          v39 = *(_QWORD *)(((v37 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v40 = *(uint64_t **)(v37 - 8);
          if (v40)
          {
            v41 = *v38;
            *v40 = *v38;
            *(_QWORD *)(v41 + 8) = v40;
            *v38 = 0;
            v38[1] = 0;
          }
          *v38 = *(_QWORD *)(v39 + 40);
          *(_QWORD *)(v39 + 40) = v38;
          *(_QWORD *)((char *)v20 + v36) = 0;
        }
        v36 += 8;
      }
      while (8 * v21 != v36);
      WTF::fastFree(v20, v35);
      v42 = 0;
      v19 = v61;
    }
    if (v19 != -1)
      ((void (*)(_QWORD *, WTF **))off_1E3367840[v19])(v58, &v59);
    v43 = 0;
  }
  ((void (*)(WTF **, WTF **))off_1E3367850[v43])(&v59, &v62);
  v45 = v68;
  if (v68)
  {
    v62 = (WTF *)&v66;
    v52 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v68, (uint64_t *)&v62);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v45, v52);
  }
  if (v67 != (WTF *)v69 && v67)
    WTF::fastFree(v67, v44);
  if (v42)
  {
    v55 = 0;
    *(_BYTE *)a5 = (_BYTE)v22;
    *(_QWORD *)(a5 + 8) = v28;
    *(_DWORD *)(a5 + 16) = 1;
  }
  else
  {
    v46 = v54;
    v65 = v54;
    v55 = 0;
    v56 = 0;
    v48 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v48 = 1;
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v48 + 16) = 0;
    if (((unint64_t)v46 & 0xFFFE000000000002) != 0)
    {
      *(_QWORD *)(v48 + 8) = v46;
    }
    else
    {
      if (v46)
      {
        if ((v46 & 8) != 0)
          v47 = ((unint64_t)v46 - 112) | 1;
        else
          v47 = (unint64_t)v46 & 0xFFFFFFFFFFFFC000;
        if ((v47 & 1) != 0)
          v53 = v47 + 47;
        else
          v53 = *(_QWORD *)v47 + 32;
        Allocator = *(_QWORD **)(v53 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v53 + 16) = *Allocator;
        *Allocator = v46;
        Allocator[1] = 0;
        Allocator[2] = 0;
      }
      else
      {
        Allocator = 0;
      }
      __dmb(0xAu);
      v50 = *(_QWORD *)(v48 + 16);
      *(_QWORD *)(v48 + 16) = Allocator;
      if (v50)
        *(_QWORD *)(v50 + 8) = 3;
    }
    v66 = 0;
    v67 = 0;
    *(_QWORD *)(v48 + 24) = v28;
    *(_QWORD *)(v48 + 32) = v5;
    *(_QWORD *)a5 = v48;
    *(_DWORD *)(a5 + 16) = 0;
    WebCore::CreateInternalTransformStreamResult::~CreateInternalTransformStreamResult((WebCore::CreateInternalTransformStreamResult *)&v65, (void *)v47);
  }
  return (*(&off_1E3367830 + v42))((int)&v65, (WebCore::CreateInternalTransformStreamResult *)&v54);
}

void WebCore::TransformStream::~TransformStream(WebCore::TransformStream *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;

  v3 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = (_DWORD *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      v7 = *((_QWORD *)v3 + 1);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 0;
        v8 = (unsigned int *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v3 + 1) = 0;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v11 = (_DWORD *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::WritableStream::create@<X0>(JSC::Structure *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::Structure *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;

  if (*(_BYTE *)(a2 + 8))
  {
    if (*(_QWORD *)a2)
      v5 = **(_QWORD **)a2;
    else
      v5 = 0;
  }
  else
  {
    v5 = 10;
  }
  if (*(_BYTE *)(a3 + 8))
  {
    if (*(_QWORD *)a3)
      v6 = **(_QWORD **)a3;
    else
      v6 = 0;
  }
  else
  {
    v6 = 10;
  }
  WebCore::InternalWritableStream::createFromUnderlyingSink(a1, v5, v6, (uint64_t)&v15);
  v7 = v17;
  if (!v17)
  {
    v9 = WTF::fastMalloc((WTF *)0x18);
    v10 = v15;
    v15 = 0;
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)a4 = v9;
    goto LABEL_13;
  }
  if (v17 == 1)
  {
    v8 = v16;
    v16 = 0;
    *(_BYTE *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v8;
LABEL_13:
    *(_DWORD *)(a4 + 16) = v7;
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalWritableStreamENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v7])(&v18, &v15);
  }
  v12 = (JSC::Structure *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WritableStream::create(v12, v13, v14);
}

uint64_t WebCore::WritableStream::create@<X0>(JSC::Structure *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;

  v5 = WebCore::createWrapper<WebCore::WritableStreamSink,WebCore::WritableStreamSink>((uint64_t)a1, a2);
  WebCore::InternalWritableStream::createFromUnderlyingSink(a1, v5, 0xAuLL, (uint64_t)&v12);
  v6 = v14;
  if (!v14)
  {
    v8 = WTF::fastMalloc((WTF *)0x18);
    v9 = v12;
    v12 = 0;
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)a3 = v8;
    goto LABEL_5;
  }
  if (v14 == 1)
  {
    v7 = v13;
    v13 = 0;
    *(_BYTE *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v7;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v6;
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalWritableStreamENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v15, &v12);
  }
  v11 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebLockManager::MainThreadBridge::releaseLock(v11);
}

uint64_t WebCore::WebLockManager::MainThreadBridge::releaseLock(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  do
    v3 = __ldaxr(a1);
  while (__stlxr(v3 + 1, a1));
  *(_QWORD *)&v8 = a2;
  *((_QWORD *)&v8 + 1) = a3;
  WTF::String::isolatedCopy();
  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v4 = &off_1E33679A0;
  *(_QWORD *)(v4 + 8) = a1;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 40) = v9;
  v10 = v4;
  WTF::callOnMainThread();
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return 0;
}

_QWORD *WebCore::WebLockManager::create@<X0>(WebCore::WebLockManager *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::ScriptExecutionContext *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::WebLockManager::MainThreadBridge *v16;
  uint64_t v18;
  _QWORD *v19;

  v5 = WTF::fastMalloc((WTF *)0x40);
  v6 = (_QWORD *)v5;
  *(_DWORD *)(v5 + 24) = 1;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = *((_QWORD *)this + 1);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    if (*(_BYTE *)(v8 + 178))
    {
      v9 = v8 - 96;
    }
    else
    {
      v10 = v8 - 288;
      v11 = *(_QWORD *)(v8 + 416);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v10 = v12;
      }
      v9 = v10 + 192;
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)v5 = &off_1E33A18C0;
  *(_QWORD *)(v5 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v5, (WebCore::ScriptExecutionContext *)v9);
  *v6 = &off_1E33A0540;
  v6[2] = 0;
  if (v9)
  {
    if (*(_BYTE *)(v9 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x1955133FCLL);
    }
    v19 = v6;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v9 + 128), (uint64_t *)&v19, (uint64_t)&v18);
  }
  *v6 = &off_1E3367718;
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
      v16 = (WebCore::WebLockManager::MainThreadBridge *)(v15 - 96);
    else
      v16 = 0;
  }
  else
  {
    v16 = 0;
  }
  WebCore::WebLockManager::MainThreadBridge::create(v16, v13, v6 + 5);
  v6[6] = 0;
  v6[7] = 0;
  *a2 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v6);
}

void WebCore::WebLockManager::MainThreadBridge::create(WebCore::WebLockManager::MainThreadBridge *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v3;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WebCore::WebLockManager *v23;
  char v24;
  char *v25;
  _BYTE v26[24];
  int v27;
  _BYTE v28[24];
  int v29;
  char v30;
  _QWORD v31[3];
  int v32;
  _BYTE v33[24];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (this && (WebCore::SecurityContext::securityOrigin(this, a2), v6))
  {
    v3 = v6;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (v6[8] == 1)
    {
      v26[0] = 0;
      v30 = 0;
    }
    else
    {
      v8 = (*(uint64_t (**)(WebCore::WebLockManager::MainThreadBridge *))(*(_QWORD *)this + 256))(this);
      LOBYTE(v31[0]) = 0;
      v32 = -1;
      v9 = *(unsigned int *)(v8 + 32);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(_BYTE *, _QWORD *, uint64_t))off_1E33678A8[v9])(v26, v31, v8 + 8);
        v32 = v9;
      }
      v33[0] = 0;
      v34 = -1;
      v10 = v3[8];
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(_BYTE *, _BYTE *, unsigned int *))off_1E33678A8[v10])(v26, v33, v3 + 2);
        v34 = v10;
        LODWORD(v9) = v32;
      }
      v26[0] = 0;
      v27 = -1;
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(char **, _BYTE *, _QWORD *))off_1E33678B8[v9])(&v25, v26, v31);
        v27 = v9;
        LODWORD(v10) = v34;
      }
      v28[0] = 0;
      v29 = -1;
      if ((_DWORD)v10 == -1)
      {
        v30 = 1;
      }
      else
      {
        ((void (*)(char **, _BYTE *, _BYTE *))off_1E33678B8[v10])(&v25, v28, v33);
        v29 = v10;
        v30 = 1;
        if (v34 != -1)
          ((void (*)(char **, _BYTE *))off_1E3367898[v34])(&v25, v33);
      }
      v34 = -1;
      if (v32 != -1)
        ((void (*)(char **, _QWORD *))off_1E3367898[v32])(&v25, v31);
    }
    do
    {
      v11 = __ldaxr(v3);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v3));
    if (!v12)
    {
      atomic_store(1u, v3);
      v16 = *((_QWORD *)v3 + 6);
      *((_QWORD *)v3 + 6) = 0;
      if (!v16)
        goto LABEL_44;
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
        goto LABEL_44;
      }
      goto LABEL_51;
    }
  }
  else
  {
    v26[0] = 0;
    v30 = 0;
  }
  while (1)
  {
    if (!v30)
    {
      *a3 = 0;
      return;
    }
    v13 = (*(uint64_t (**)(WebCore::WebLockManager::MainThreadBridge *, WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 152))(this, a2);
    if (!v14)
    {
      v17 = 0;
      goto LABEL_35;
    }
    v15 = v13;
    v16 = WTF::fastMalloc((WTF *)0x80);
    if (v30)
      break;
    __break(1u);
LABEL_51:
    WTF::StringImpl::destroy((WTF::StringImpl *)v16, a2);
LABEL_44:
    v21 = (WTF::StringImpl *)*((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v3[8];
    if ((_DWORD)v22 != -1)
      ((void (*)(_QWORD *, unsigned int *))off_1E3367898[v22])(v31, v3 + 2);
    v3[8] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  v17 = v16;
  *(_DWORD *)v16 = 1;
  v18 = *((_OWORD *)this + 15);
  *(_OWORD *)(v16 + 16) = *((_OWORD *)this + 14);
  *(_OWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 48) = v15;
  if (v27 == -1)
    goto LABEL_53;
  v25 = &v24;
  ((void (*)(_QWORD *__return_ptr, char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v27])(v31, &v25, v26);
  *(_BYTE *)(v17 + 56) = 0;
  *(_DWORD *)(v17 + 80) = -1;
  v19 = v32;
  if (v32 != -1)
  {
    ((void (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v32])(&v25, v17 + 56, v31);
    *(_DWORD *)(v17 + 80) = v19;
    if (v32 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v32])(&v25, v31);
  }
  if (v29 == -1)
  {
LABEL_53:
    v23 = (WebCore::WebLockManager *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::WebLockManager::~WebLockManager(v23);
    return;
  }
  v25 = &v24;
  ((void (*)(_QWORD *__return_ptr, char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v29])(v31, &v25, v28);
  *(_BYTE *)(v17 + 88) = 0;
  *(_DWORD *)(v17 + 112) = -1;
  v20 = v32;
  if (v32 != -1)
  {
    ((void (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v32])(&v25, v17 + 88, v31);
    *(_DWORD *)(v17 + 112) = v20;
    if (v32 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v32])(&v25, v31);
  }
LABEL_35:
  *a3 = v17;
  if (v30)
  {
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E3367898[v29])(v31, v28);
    v29 = -1;
    if (v27 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E3367898[v27])(v31, v26);
  }
}

void WebCore::WebLockManager::~WebLockManager(WebCore::WebLockManager *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  *(_QWORD *)this = &off_1E3367718;
  WebCore::WebLockManager::clientIsGoingAway(this, a2);
  v4 = *((_QWORD *)this + 7);
  if (v4)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v4, v3);
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (_DWORD **)(v5 + 16);
      do
      {
        if (*(v7 - 1) != (_DWORD *)-1)
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
          {
            if (v8[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
            else
              --v8[4];
          }
        }
        v7 += 3;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), v3);
  }
  v9 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E3367880;
      v17[1] = v9;
      v18 = v17;
      WTF::ensureOnMainThread();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v3);
  v13 = *((_QWORD *)this + 4);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v12);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebLockManager::~WebLockManager(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WebLockManager::clientIsGoingAway(WebCore::WebLockManager *this, void *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  result = *((_QWORD *)this + 7);
  if (!result || !*(_DWORD *)(result - 12))
  {
    v4 = *((_QWORD *)this + 6);
    if (!v4 || !*(_DWORD *)(v4 - 12))
      return result;
    if (!result)
      goto LABEL_7;
  }
  *((_QWORD *)this + 7) = 0;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(result, a2);
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
LABEL_7:
    *((_QWORD *)this + 6) = 0;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (_DWORD **)(v4 + 16);
      do
      {
        if (*(v6 - 1) != (_DWORD *)-1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (v7[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
            else
              --v7[4];
          }
        }
        v6 += 3;
        --v5;
      }
      while (v5);
    }
    result = WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 5);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E3367AB8;
    v10[1] = v8;
    v10[2] = v8;
    v11 = (uint64_t)v10;
    WTF::callOnMainThread();
    result = v11;
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return result;
}

void WebCore::WebLockManager::request(_QWORD *a1, WTF::StringImpl **a2, char *a3, _DWORD **a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t IdentifierInternal;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int *v51;
  uint64_t v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t *v66;
  WTF::StringImpl *v67;
  char v68;
  _DWORD *v69;
  WebCore::AbortSignal *v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  WTF::StringImpl *v80;
  _DWORD *v81;
  WebCore::AbortSignal *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  void *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t v98;
  void *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  _QWORD *v104;
  unsigned int v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  __int128 v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  WTF::StringImpl **v118;
  WTF::StringImpl **v119;
  bmalloc::api *v120;
  void *v121;
  char v122;
  bmalloc::api *v123;
  void *v124;
  uint64_t v125;
  int v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128[2];
  __int128 v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  WTF::StringImpl **v133;

  v6 = a1[1];
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    v13 = *a5;
LABEL_16:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = v13;
    v16 = 8;
    goto LABEL_25;
  }
  if (!*(_BYTE *)(v7 + 178) && (WebCore::Document::isFullyActive((WebCore::Document *)(v7 - 288)) & 1) == 0)
  {
    v13 = *a5;
    goto LABEL_16;
  }
  if (!a1[5])
  {
    v14 = *a5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = v14;
    v16 = 14;
    goto LABEL_25;
  }
  if (*a2)
  {
    if (WTF::StringImpl::startsWith())
    {
      v12 = *a5;
LABEL_23:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_24;
    }
    if (*a2 && *((_DWORD *)*a2 + 1) >= 0x401u)
    {
      v12 = *a5;
      WTF::tryFastCompactMalloc((WTF *)0x4A);
      v17 = v127;
      if (v127)
      {
        *(_QWORD *)v127 = 0x3600000002;
        qmemcpy((char *)v17 + 20, "Lock name cannot cannot be longer than 1024 characters", 54);
        *((_QWORD *)v17 + 1) = (char *)v17 + 20;
        *((_DWORD *)v17 + 4) = 4;
        v127 = v17;
LABEL_24:
        v15 = v12;
        v16 = 6;
        goto LABEL_25;
      }
      __break(0xC471u);
      goto LABEL_170;
    }
  }
  if (a3[2] && a3[1])
  {
    v12 = *a5;
    goto LABEL_23;
  }
  if (a3[2] && !*a3)
  {
    v12 = *a5;
    goto LABEL_23;
  }
  v20 = *((_QWORD *)a3 + 1);
  if (v20)
  {
    if (a3[2] || a3[1])
    {
      v12 = *a5;
      goto LABEL_23;
    }
    if (*(_BYTE *)(v20 + 156))
    {
      v21 = *a5;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = v21;
      v16 = 16;
LABEL_25:
      WebCore::DeferredPromise::reject(v15, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v127, 0);
      v19 = v127;
      v127 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      return;
    }
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v24 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v24 != -1)
  {
    v127 = (WTF::StringImpl *)&v132;
    v133 = &v127;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v133, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
  {
LABEL_170:
    __break(1u);
    return;
  }
  v25 = WebCore::Process::globalIdentifier;
  v27 = a1 + 6;
  v26 = a1[6];
  if (v26
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1 + 6, 8u), (v26 = *v27) != 0))
  {
    v28 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v28 = 0;
  }
  v29 = (IdentifierInternal >> 5) & 0x7FFF800 ^ (((unsigned __int16)IdentifierInternal - 1640531527) << 16) ^ ((unsigned __int16)IdentifierInternal - 1640531527);
  v30 = (IdentifierInternal >> 37) & 0x7FFF800 ^ ((v29 + WORD2(IdentifierInternal) + (v29 >> 11)) << 16) ^ (v29 + WORD2(IdentifierInternal) + (v29 >> 11));
  v31 = (v25 >> 5) & 0x7FFF800 ^ ((v30 + (v30 >> 11) + (unsigned __int16)v25) << 16) ^ (v30 + (v30 >> 11) + (unsigned __int16)v25);
  v32 = (v25 >> 37) & 0x7FFF800 ^ ((v31 + WORD2(v25) + (v31 >> 11)) << 16) ^ (v31 + WORD2(v25) + (v31 >> 11));
  v33 = (v32 + (v32 >> 11)) ^ (8 * (v32 + (v32 >> 11)));
  v34 = (v33 + (v33 >> 5)) ^ (4 * (v33 + (v33 >> 5)));
  v35 = (v34 + (v34 >> 15)) ^ ((v34 + (v34 >> 15)) << 10);
  if (!v35)
    v35 = 0x800000;
  v126 = v35;
  v36 = v28 & v35;
  v37 = (unint64_t *)(v26 + 24 * (v28 & v35));
  v39 = *v37;
  v38 = v37[1];
  if (*(_OWORD *)v37 == 0)
  {
LABEL_52:
    *v37 = IdentifierInternal;
    v37[1] = v25;
    v42 = *a5;
    *a5 = 0;
    v43 = (_DWORD *)v37[2];
    v37[2] = v42;
    if (v43)
    {
      if (v43[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 16))(v43);
      else
        --v43[4];
    }
    v44 = *v27;
    if (*v27)
      v45 = *(_DWORD *)(v44 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(v44 - 12) = v45;
    v46 = *v27;
    if (*v27)
      v47 = *(_DWORD *)(v46 - 12);
    else
      v47 = 0;
    v48 = (*(_DWORD *)(v46 - 16) + v47);
    v49 = *(unsigned int *)(v46 - 4);
    if (v49 > 0x400)
    {
      if (v49 > 2 * v48)
        goto LABEL_69;
    }
    else
    {
      if (3 * v49 > 4 * v48)
        goto LABEL_69;
      if (!(_DWORD)v49)
      {
        v50 = 8;
        goto LABEL_68;
      }
    }
    v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
LABEL_68:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1 + 6, v50);
    goto LABEL_69;
  }
  v40 = 0;
  v41 = 1;
  while (v39 != IdentifierInternal || v38 != v25)
  {
    if (v38 == -1)
      v40 = v37;
    v36 = (v36 + v41) & v28;
    v37 = (unint64_t *)(v26 + 24 * v36);
    v39 = *v37;
    v38 = v37[1];
    ++v41;
    if (*(_OWORD *)v37 == 0)
    {
      if (v40)
      {
        *v40 = 0;
        v40[1] = 0;
        v40[2] = 0;
        --*(_DWORD *)(*v27 - 16);
        v37 = v40;
      }
      goto LABEL_52;
    }
  }
LABEL_69:
  v51 = (unsigned int *)*((_QWORD *)a3 + 1);
  if (v51)
  {
    v52 = a1[4];
    if (v52)
      goto LABEL_173;
    v52 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v52 = 1;
    *(_QWORD *)(v52 + 8) = a1;
    v54 = (unsigned int *)a1[4];
    a1[4] = v52;
    if (!v54)
      goto LABEL_173;
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      WTF::fastFree((WTF *)v54, v53);
    }
    v52 = a1[4];
    if (v52)
    {
LABEL_173:
      do
        v57 = __ldaxr((unsigned int *)v52);
      while (__stlxr(v57 + 1, (unsigned int *)v52));
    }
    v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v58 = &off_1E3367AE0;
    *((_QWORD *)v58 + 1) = v52;
    *((_QWORD *)v58 + 2) = IdentifierInternal;
    *((_QWORD *)v58 + 3) = v25;
    v59 = v51[38] + 1;
    v51[38] = v59;
    LODWORD(v127) = v59;
    v128[0] = v58;
    v60 = v51[15];
    if ((_DWORD)v60 == v51[14])
    {
      v61 = WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51 + 12, v60 + 1, (unint64_t)&v127);
      v62 = v51[15];
      v63 = *((_QWORD *)v51 + 6) + 16 * v62;
      *(_DWORD *)v63 = *v61;
      v64 = *((_QWORD *)v61 + 1);
      *((_QWORD *)v61 + 1) = 0;
      *(_QWORD *)(v63 + 8) = v64;
      v65 = v128[0];
      v51[15] = v62 + 1;
      v128[0] = 0;
      if (v65)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v65 + 8))(v65);
    }
    else
    {
      v125 = *((_QWORD *)v51 + 6) + 16 * v60;
      *(_DWORD *)v125 = v59;
      *(_QWORD *)(v125 + 8) = v58;
      v51[15] = v60 + 1;
    }
  }
  v66 = a1 + 7;
  v67 = *a2;
  if (*a2)
    *(_DWORD *)v67 += 2;
  v68 = *a3;
  v69 = *a4;
  *a4 = 0;
  v70 = (WebCore::AbortSignal *)*((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  v71 = *v66;
  if (*v66
    || (v72 = v68,
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1 + 7, 8u, 0), v68 = v72, (v71 = *v66) != 0))
  {
    v73 = *(_DWORD *)(v71 - 8);
  }
  else
  {
    v73 = 0;
  }
  v74 = v73 & v126;
  v75 = v71 + (v74 << 6);
  v77 = *(_QWORD *)v75;
  v76 = *(_QWORD *)(v75 + 8);
  if (*(_OWORD *)v75 != 0)
  {
    v78 = 0;
    v79 = 1;
    while (v77 != IdentifierInternal || v76 != v25)
    {
      if (v76 == -1)
        v78 = v75;
      v74 = ((_DWORD)v74 + v79) & v73;
      v75 = v71 + (v74 << 6);
      v77 = *(_QWORD *)v75;
      v76 = *(_QWORD *)(v75 + 8);
      ++v79;
      if (*(_OWORD *)v75 == 0)
      {
        if (v78)
        {
          *(_OWORD *)(v78 + 16) = 0u;
          *(_OWORD *)(v78 + 32) = 0u;
          *(_OWORD *)v78 = 0u;
          *(_BYTE *)(v78 + 40) = 1;
          *(_QWORD *)(v78 + 48) = 0;
          *(_QWORD *)(v78 + 56) = 0;
          --*(_DWORD *)(*v66 - 16);
          v75 = v78;
        }
        goto LABEL_94;
      }
    }
    if (v70)
    {
      if (*((_DWORD *)v70 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v70, v22);
        bmalloc::api::isoDeallocate(v123, v124);
        if (!v69)
          goto LABEL_119;
        goto LABEL_117;
      }
      --*((_DWORD *)v70 + 6);
    }
    if (!v69)
      goto LABEL_119;
LABEL_117:
    if (v69[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 16))(v69);
    else
      --v69[4];
LABEL_119:
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v67 -= 2;
    }
    goto LABEL_125;
  }
LABEL_94:
  *(_QWORD *)v75 = IdentifierInternal;
  *(_QWORD *)(v75 + 8) = v25;
  *(_QWORD *)(v75 + 16) = IdentifierInternal;
  *(_QWORD *)(v75 + 24) = v25;
  v80 = *(WTF::StringImpl **)(v75 + 32);
  *(_QWORD *)(v75 + 32) = v67;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      v122 = v68;
      WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v22);
      v68 = v122;
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  *(_BYTE *)(v75 + 40) = v68;
  v81 = *(_DWORD **)(v75 + 48);
  *(_QWORD *)(v75 + 48) = v69;
  if (v81)
  {
    if (v81[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 16))(v81);
    else
      --v81[4];
  }
  v82 = *(WebCore::AbortSignal **)(v75 + 56);
  *(_QWORD *)(v75 + 56) = v70;
  if (v82)
  {
    if (*((_DWORD *)v82 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v82, v22);
      bmalloc::api::isoDeallocate(v120, v121);
    }
    else
    {
      --*((_DWORD *)v82 + 6);
    }
  }
  v83 = *v66;
  if (*v66)
    v84 = *(_DWORD *)(v83 - 12) + 1;
  else
    v84 = 1;
  *(_DWORD *)(v83 - 12) = v84;
  v85 = *v66;
  if (*v66)
    v86 = *(_DWORD *)(v85 - 12);
  else
    v86 = 0;
  v87 = (*(_DWORD *)(v85 - 16) + v86);
  v88 = *(unsigned int *)(v85 - 4);
  if (v88 > 0x400)
  {
    if (v88 > 2 * v87)
      goto LABEL_125;
    goto LABEL_112;
  }
  if (3 * v88 <= 4 * v87)
  {
    if (!(_DWORD)v88)
    {
      v89 = 8;
      goto LABEL_124;
    }
LABEL_112:
    v89 = (_DWORD)v88 << (6 * *(_DWORD *)(v85 - 12) >= (2 * v88));
LABEL_124:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1 + 7, v89, (unint64_t *)v75);
  }
LABEL_125:
  v90 = a1[4];
  v91 = (WTF::StringImpl *)a1[5];
  if (v90)
    goto LABEL_174;
  v90 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v90 = 1;
  *(_QWORD *)(v90 + 8) = a1;
  v93 = (unsigned int *)a1[4];
  a1[4] = v90;
  if (!v93)
    goto LABEL_174;
  do
  {
    v94 = __ldaxr(v93);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, v93));
  if (!v95)
  {
    atomic_store(1u, v93);
    WTF::fastFree((WTF *)v93, v92);
  }
  v90 = a1[4];
  if (v90)
  {
LABEL_174:
    do
      v96 = __ldaxr((unsigned int *)v90);
    while (__stlxr(v96 + 1, (unsigned int *)v90));
  }
  v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v97 = &off_1E3367B08;
  v97[1] = v90;
  v97[2] = IdentifierInternal;
  v97[3] = v25;
  v98 = a1[4];
  if (v98)
    goto LABEL_175;
  v98 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v98 = 1;
  *(_QWORD *)(v98 + 8) = a1;
  v100 = (unsigned int *)a1[4];
  a1[4] = v98;
  if (!v100)
    goto LABEL_175;
  do
  {
    v101 = __ldaxr(v100);
    v102 = v101 - 1;
  }
  while (__stlxr(v102, v100));
  if (!v102)
  {
    atomic_store(1u, v100);
    WTF::fastFree((WTF *)v100, v99);
  }
  v98 = a1[4];
  if (v98)
  {
LABEL_175:
    do
      v103 = __ldaxr((unsigned int *)v98);
    while (__stlxr(v103 + 1, (unsigned int *)v98));
  }
  v104 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v104 = &off_1E3367B30;
  v104[1] = v98;
  v104[2] = IdentifierInternal;
  v104[3] = v25;
  v127 = v91;
  do
    v105 = __ldaxr((unsigned int *)v91);
  while (__stlxr(v105 + 1, (unsigned int *)v91));
  v128[0] = v91;
  WTF::String::isolatedCopy();
  LOBYTE(v129) = *a3;
  BYTE1(v129) = a3[2];
  BYTE2(v129) = a3[1];
  *((_QWORD *)&v129 + 1) = IdentifierInternal;
  v130 = v25;
  *(_QWORD *)&v131 = v97;
  *((_QWORD *)&v131 + 1) = v104;
  v106 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v106 = &off_1E33678D8;
  *(_QWORD *)(v106 + 8) = v127;
  *(WTF::StringImpl **)(v106 + 16) = v128[0];
  v107 = v128[1];
  *(_OWORD *)v128 = 0u;
  *(_QWORD *)(v106 + 24) = v107;
  v108 = v129;
  *(_QWORD *)(v106 + 48) = v130;
  *(_OWORD *)(v106 + 32) = v108;
  *(_QWORD *)(v106 + 56) = v131;
  v109 = *((_QWORD *)&v131 + 1);
  v131 = 0u;
  *(_QWORD *)(v106 + 64) = v109;
  v132 = v106;
  WTF::callOnMainThread();
  v111 = v132;
  v132 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *((_QWORD *)&v131 + 1);
  *((_QWORD *)&v131 + 1) = 0;
  if (v112)
    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
  v113 = v131;
  *(_QWORD *)&v131 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = v128[1];
  v128[1] = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v110);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = (unsigned int *)v128[0];
  v128[0] = 0;
  if (v115)
  {
    do
    {
      v116 = __ldaxr(v115);
      v117 = v116 - 1;
    }
    while (__stlxr(v117, v115));
    if (!v117)
    {
      atomic_store(1u, v115);
      v118 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
      *v118 = (WTF::StringImpl *)off_1E3367880;
      v118[1] = (WTF::StringImpl *)v115;
      v133 = v118;
      WTF::ensureOnMainThread();
      v119 = v133;
      v133 = 0;
      if (v119)
        (*((void (**)(WTF::StringImpl **))*v119 + 1))(v119);
    }
  }
}

WTF::StringImpl *WebCore::WebLockManager::query(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v3 = a1[1];
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v18 = *a2;
LABEL_20:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = v18;
    v21 = 8;
    goto LABEL_21;
  }
  if (!*(_BYTE *)(v4 + 178) && (WebCore::Document::isFullyActive((WebCore::Document *)(v4 - 288)) & 1) == 0)
  {
    v18 = *a2;
    goto LABEL_20;
  }
  v6 = (unsigned int *)a1[5];
  if (v6)
  {
    v7 = a1[4];
    if (v7)
      goto LABEL_28;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a1;
    v9 = (unsigned int *)a1[4];
    a1[4] = v7;
    if (!v9)
      goto LABEL_28;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
    v7 = a1[4];
    if (v7)
    {
LABEL_28:
      do
        v12 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v12 + 1, (unsigned int *)v7));
    }
    v13 = *a2;
    *a2 = 0;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E3367BE0;
    v14[1] = v7;
    v14[2] = v13;
    do
      v15 = __ldaxr(v6);
    while (__stlxr(v15 + 1, v6));
    v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v16 = &off_1E3367A40;
    *((_QWORD *)v16 + 1) = v6;
    *((_QWORD *)v16 + 2) = v6;
    *((_QWORD *)v16 + 3) = v14;
    v23 = v16;
    WTF::callOnMainThread();
    result = v23;
    v23 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v19 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = v19;
  v21 = 14;
LABEL_21:
  WebCore::DeferredPromise::reject(v20, (JSC::JSGlobalObject *)v21, (JSC::JSGlobalObject *)&v23, 0);
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(_QWORD *result, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;

  v4 = *a2;
  if (!*a2)
    goto LABEL_23;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a3 - 1640531527) << 16) ^ ((unsigned __int16)a3
                                                                                          - 1640531527);
  v7 = (a3 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a3) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a3) + (v6 >> 11));
  v8 = (a4 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)a4 + (v7 >> 11)) << 16) ^ (v7
                                                                                               + (unsigned __int16)a4
                                                                                               + (v7 >> 11));
  v9 = (a4 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(a4) + (v8 >> 11)) << 16) ^ (v8 + WORD2(a4) + (v8 >> 11));
  v10 = (v9 + (v9 >> 11)) ^ (8 * (v9 + (v9 >> 11)));
  v11 = (v10 + (v10 >> 5)) ^ (4 * (v10 + (v10 >> 5)));
  v12 = (v11 + (v11 >> 15)) ^ ((v11 + (v11 >> 15)) << 10);
  if (!v12)
    v12 = 0x800000;
  v13 = v5 & v12;
  v14 = (uint64_t *)(v4 + 24 * (v5 & v12));
  v15 = *v14;
  v16 = v14[1];
  if (*v14 == a3 && v16 == a4)
  {
LABEL_15:
    v20 = *(_DWORD *)(v4 - 4);
  }
  else
  {
    v18 = 1;
    while (v15 | v16)
    {
      v13 = (v13 + v18) & v5;
      v14 = (uint64_t *)(v4 + 24 * v13);
      v15 = *v14;
      v16 = v14[1];
      ++v18;
      if (*v14 == a3 && v16 == a4)
        goto LABEL_15;
    }
    v20 = *(_DWORD *)(v4 - 4);
    v14 = (uint64_t *)(v4 + 24 * v20);
  }
  if ((uint64_t *)(v4 + 24 * v20) == v14)
  {
LABEL_23:
    *result = 0;
  }
  else
  {
    v21 = v14[2];
    v14[2] = 0;
    *result = v21;
    v22 = (uint64_t *)*a2;
    if (!*a2 || (v22 += 3 * *((unsigned int *)v22 - 1), v22 != v14))
    {
      if (v22 != v14)
      {
        *(_OWORD *)v14 = xmmword_1968C18F0;
        v14[2] = 0;
        ++*(_DWORD *)(*a2 - 16);
        v23 = *a2;
        v24 = *a2 ? *(_DWORD *)(v23 - 12) - 1 : -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *a2;
        if (*a2)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
            return (_QWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a2, v27 >> 1);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebLockManager::settleReleasePromise(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  WTF::StringImpl *result;
  _DWORD *v6;
  int v7;
  unsigned __int8 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  objc_class *v12;
  uint64_t v13;
  uint64_t *v14;
  WebCore::WebLockManager *v15;
  uint64_t v16;
  unsigned __int8 v17[8];
  WTF::StringImpl *v18;
  objc_class *v19;

  result = (WTF::StringImpl *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v16, (uint64_t *)(a1 + 48), a2, a3);
  v6 = (_DWORD *)v16;
  if (v16)
  {
    v7 = *(_DWORD *)(a4 + 16);
    if (!v7)
    {
      v11 = *(_QWORD *)(v16 + 24);
      if (v11 && *(_QWORD *)v11 && (*(_BYTE *)(v11 + 8) & 3) == 0)
      {
        v12 = *(objc_class **)a4;
        v13 = *(_QWORD *)(v16 + 32);
        if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
          v14 = 0;
        else
          v14 = *(uint64_t **)v13;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction((uint64_t)v6, v14, 0, v12);
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v17);
      }
      goto LABEL_19;
    }
    if (v7 != 1)
    {
      v15 = (WebCore::WebLockManager *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::WebLockManager::stop(v15);
    }
    v8 = *(_BYTE *)a4;
    v9 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v19 = 0;
    v17[0] = v8;
    if (v9)
      *(_DWORD *)v9 += 2;
    v18 = v9;
    WebCore::DeferredPromise::reject((uint64_t)v6, v17, 0, &v19);
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        if (v9)
        {
LABEL_10:
          if (*(_DWORD *)v9 == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v10);
          else
            *(_DWORD *)v9 -= 2;
        }
LABEL_19:
        if (v6[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        --v6[4];
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (v9)
      goto LABEL_10;
    goto LABEL_19;
  }
  return result;
}

uint64_t *WebCore::WebLockRegistry::setSharedRegistry(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if ((_MergedGlobals_148 & 1) != 0)
  {
    result = (uint64_t *)qword_1ECE820F0;
    v2 = *v1;
    *v1 = 0;
    qword_1ECE820F0 = v2;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    _MergedGlobals_148 = 1;
    v3 = *result;
    *result = 0;
    qword_1ECE820F0 = v3;
  }
  return result;
}

void WebCore::LocalWebLockRegistry::~LocalWebLockRegistry(WebCore::LocalWebLockRegistry *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  char v18;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = v3 + 80 * i;
        if (*(_QWORD *)v6 != -1)
        {
          v7 = v3 + 80 * i;
          v8 = *(unsigned int **)(v7 + 72);
          *(_QWORD *)(v7 + 72) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v8);
              WTF::fastFree((WTF *)v8, a2);
            }
          }
          v11 = *(unsigned int *)(v6 + 64);
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, uint64_t))off_1E3367898[v11])(&v17, v6 + 40);
          *(_DWORD *)(v6 + 64) = -1;
          v12 = *(unsigned int *)(v6 + 32);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, uint64_t))off_1E3367898[v12])(&v18, v6 + 8);
          *(_DWORD *)(v6 + 32) = -1;
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::LocalWebLockRegistry::~LocalWebLockRegistry(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LocalWebLockRegistry::existingRegistryForOrigin(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  _BYTE v17[24];
  int v18;
  _BYTE v19[24];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  v17[0] = 0;
  v18 = -1;
  v7 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E33678A8[v7])(&v15, v17, a4);
    v18 = v7;
  }
  v19[0] = 0;
  v20 = -1;
  v8 = *(unsigned int *)(a4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E33678A8[v8])(&v15, v19, a4 + 32);
    v20 = v8;
  }
  result = WTF::HashTable<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>>,std::pair<PAL::SessionID,WebCore::ClientOrigin>>(*(_QWORD *)(a2 + 24), (uint64_t)&v16);
  if (result && (result = *(_QWORD *)(result + 72)) != 0)
  {
    do
      v11 = __ldaxr((unsigned int *)result);
    while (__stlxr(v11 + 1, (unsigned int *)result));
    v12 = *(_DWORD **)(result + 8);
    if (v12)
      ++*v12;
    *a1 = v12;
    do
    {
      v13 = __ldaxr((unsigned int *)result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)result));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v10);
    }
  }
  else
  {
    *a1 = 0;
  }
  if (v20 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E3367898[v20])(&v15, v19);
  v20 = -1;
  if (v18 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3367898[v18])(&v15, v17);
  return result;
}

void WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(WebCore::LocalWebLockRegistry::PerOriginRegistry *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  _BOOL4 v19;
  _BOOL4 v21;
  char v22;
  uint64_t v23;
  _BOOL4 v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  WTF *v45;
  uint64_t v46;
  uint64_t j;
  char *v48;
  WebCore::LocalWebLockRegistry::PerOriginRegistry **v49;
  WebCore::LocalWebLockRegistry::PerOriginRegistry ***v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v53;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v54;
  WTF *v55;
  void *v56;
  WTF::StringImpl *v57;
  WTF *v58;
  uint64_t v59;
  unint64_t *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  char *v72;
  uint64_t v73;
  _BYTE v74[24];
  int v75;
  _BYTE v76[24];
  int v77;
  char **v78;
  _QWORD v79[2];
  int v80;
  int v81;
  _QWORD v82[2];
  int v83;
  unsigned int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_99;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_99;
  v73 = *((_QWORD *)this + 3);
  v74[0] = 0;
  v75 = -1;
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char ***, _BYTE *, char *))off_1E33678A8[v5])(&v78, v74, (char *)this + 32);
    v75 = v5;
  }
  v6 = (uint64_t *)(v4 + 24);
  v76[0] = 0;
  v77 = -1;
  v7 = *((unsigned int *)this + 22);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char ***, _BYTE *, char *))off_1E33678A8[v7])(&v78, v76, (char *)this + 64);
    v77 = v7;
  }
  v8 = *v6;
  if (!*v6)
    goto LABEL_95;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = WTF::PairHash<PAL::SessionID,WebCore::ClientOrigin>::hash(&v73);
  for (i = 0; ; v10 = i + v12)
  {
    v12 = v10 & v9;
    v13 = (uint64_t *)(v8 + 80 * (v10 & v9));
    v84 = 0;
    v82[0] = 0;
    v82[1] = 0;
    v83 = 0;
    v79[0] = 0;
    v79[1] = 0;
    v78 = 0;
    v81 = 0;
    v80 = 0;
    if (*v13)
    {
LABEL_12:
      v14 = 0;
      v15 = 0;
LABEL_13:
      ((void (*)(char **, _QWORD *))off_1E3367898[v15])(&v72, v82);
      goto LABEL_14;
    }
    if (v13 == (uint64_t *)&v78)
    {
      v15 = 0;
      v14 = 1;
      goto LABEL_13;
    }
    if (*((_DWORD *)v13 + 8))
      goto LABEL_12;
    v72 = &v71;
    v27 = std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>((uint64_t)&v72, (uint64_t)(v13 + 1), (uint64_t)v79);
    v15 = v84;
    if (v27)
    {
      v28 = *((unsigned int *)v13 + 16);
      v29 = v84 == v28;
      if (v84 == 0xFFFFFFFFLL)
        v29 = 0;
      if (v28 == 0xFFFFFFFFLL)
        v14 = v84 == 0xFFFFFFFFLL;
      else
        v14 = v29;
      if ((_DWORD)v28 != -1 && v29)
      {
        v72 = &v71;
        v14 = ((uint64_t (*)(char **, uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v84])(&v72, v13 + 5, v82);
        v15 = v84;
      }
    }
    else
    {
      v14 = 0;
    }
    if (v15 != 0xFFFFFFFFLL)
      goto LABEL_13;
LABEL_14:
    v84 = -1;
    if (v81 != -1)
      ((void (*)(char **, _QWORD *))off_1E3367898[v81])(&v72, v79);
    if ((v14 & 1) != 0)
    {
      v31 = v6;
      v32 = (uint64_t *)*v6;
      if (!*v6)
        goto LABEL_95;
      v33 = *((_DWORD *)v32 - 1);
      v13 = &v32[10 * v33];
      goto LABEL_75;
    }
    if (*v13 == -1 || *v13 != v73)
      goto LABEL_54;
    if (v13 == &v73)
      break;
    v17 = *((unsigned int *)v13 + 8);
    v19 = v75 == (_DWORD)v17 && v75 != -1;
    if ((_DWORD)v17 == -1 || !v19)
    {
      if ((_DWORD)v17 == -1)
        v21 = v75 == -1;
      else
        v21 = v19;
      if (!v21)
        goto LABEL_54;
    }
    else
    {
      v78 = &v72;
      v22 = ((uint64_t (*)(char ***, uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v17])(&v78, v13 + 1, v74);
      if ((v22 & 1) == 0)
        goto LABEL_54;
    }
    v23 = *((unsigned int *)v13 + 16);
    v25 = v77 == (_DWORD)v23 && v77 != -1;
    if ((_DWORD)v23 == -1 || !v25)
    {
      if ((_DWORD)v23 == -1)
        v26 = v77 == -1;
      else
        v26 = v25;
      if (v26)
        goto LABEL_73;
    }
    else
    {
      v78 = &v72;
      if ((((uint64_t (*)(char ***, uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v23])(&v78, v13 + 5, v76) & 1) != 0)goto LABEL_73;
    }
LABEL_54:
    ++i;
  }
  v13 = &v73;
LABEL_73:
  v31 = v6;
  v32 = (uint64_t *)*v6;
  if (!*v6)
    goto LABEL_76;
  v33 = *((_DWORD *)v32 - 1);
LABEL_75:
  v32 += 10 * v33;
  if (v32 == v13)
    goto LABEL_95;
LABEL_76:
  if (v32 != v13)
  {
    v34 = *((unsigned int *)v13 + 16);
    if ((_DWORD)v34 != -1)
      ((void (*)(char ***, uint64_t *))off_1E3367898[v34])(&v78, v13 + 5);
    *((_DWORD *)v13 + 16) = -1;
    v35 = *((unsigned int *)v13 + 8);
    if ((_DWORD)v35 != -1)
      ((void (*)(char ***, uint64_t *))off_1E3367898[v35])(&v78, v13 + 1);
    *((_DWORD *)v13 + 8) = -1;
    *v13 = -1;
    v36 = (unsigned int *)v13[9];
    v13[9] = 0;
    if (v36)
    {
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, a2);
      }
    }
    ++*(_DWORD *)(*v31 - 16);
    v39 = *v31;
    if (*v31)
      v40 = *(_DWORD *)(v39 - 12) - 1;
    else
      v40 = -1;
    *(_DWORD *)(v39 - 12) = v40;
    v41 = *v31;
    if (*v31)
    {
      v42 = 6 * *(_DWORD *)(v41 - 12);
      v43 = *(_DWORD *)(v41 - 4);
      if (v42 < v43 && v43 >= 9)
        WTF::HashTable<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>::rehash(v31, v43 >> 1, 0);
    }
  }
LABEL_95:
  if (v77 != -1)
    ((void (*)(char ***, _BYTE *))off_1E3367898[v77])(&v78, v76);
  v77 = -1;
  if (v75 != -1)
    ((void (*)(char ***, _BYTE *))off_1E3367898[v75])(&v78, v74);
LABEL_99:
  v45 = (WTF *)*((_QWORD *)this + 15);
  if (v45)
  {
    v46 = *((unsigned int *)this + 32);
    if ((_DWORD)v46)
    {
      for (j = 0; j != v46; ++j)
      {
        v48 = (char *)v45 + 24 * j;
        v50 = (WebCore::LocalWebLockRegistry::PerOriginRegistry ***)(v48 + 8);
        v49 = (WebCore::LocalWebLockRegistry::PerOriginRegistry **)*((_QWORD *)v48 + 1);
        v51 = *((unsigned int *)v48 + 5);
        if ((_DWORD)v51)
        {
          v52 = 80 * v51;
          do
          {
            v53 = v49[9];
            v49[9] = 0;
            if (v53)
              (*(void (**)(WebCore::LocalWebLockRegistry::PerOriginRegistry *))(*(_QWORD *)v53 + 8))(v53);
            v54 = *v49;
            *v49 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 1)
              {
                WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v54);
                WTF::fastFree(v55, v56);
              }
              else
              {
                --*(_DWORD *)v54;
              }
            }
            v49 += 10;
            v52 -= 80;
          }
          while (v52);
          v49 = *v50;
        }
        if (v49)
        {
          *v50 = 0;
          *((_DWORD *)v48 + 4) = 0;
          WTF::fastFree((WTF *)v49, a2);
        }
        v57 = *(WTF::StringImpl **)v48;
        *(_QWORD *)v48 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v57 -= 2;
        }
      }
    }
    WTF::fastFree(v45, a2);
  }
  v58 = (WTF *)*((_QWORD *)this + 12);
  if (v58)
  {
    v59 = *((unsigned int *)this + 26);
    if ((_DWORD)v59)
    {
      v60 = (unint64_t *)((char *)v58 + 8);
      do
      {
        WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque(v60, (WTF::StringImpl *)a2);
        v61 = (WTF::StringImpl *)*(v60 - 1);
        *(v60 - 1) = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v61 -= 2;
        }
        v60 += 5;
        --v59;
      }
      while (v59);
    }
    WTF::fastFree(v58, a2);
  }
  v62 = *((unsigned int *)this + 22);
  if ((_DWORD)v62 != -1)
    ((void (*)(char ***, char *))off_1E3367898[v62])(&v78, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  v63 = *((unsigned int *)this + 14);
  if ((_DWORD)v63 != -1)
    ((void (*)(char ***, char *))off_1E3367898[v63])(&v78, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  v64 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v64)
  {
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      WTF::fastFree((WTF *)v64, a2);
    }
  }
  v67 = *((_QWORD *)this + 1);
  if (v67)
  {
    *(_QWORD *)(v67 + 8) = 0;
    v68 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v68)
    {
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        atomic_store(1u, v68);
        WTF::fastFree((WTF *)v68, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

WebCore::LocalWebLockRegistry::PerOriginRegistry *WebCore::LocalWebLockRegistry::requestLock(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, WTF::StringImpl **a7, char a8, char a9, char a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int i;
  unsigned int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v53;
  _BOOL4 v55;
  char v56;
  uint64_t v57;
  _BOOL4 v59;
  _BOOL4 v60;
  int v61;
  uint64_t v62;
  _BOOL4 v63;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  char v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  _DWORD *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  int v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl **v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  uint64_t v175;
  WTF::StringImpl **v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *result;
  void *v187;
  WTF *v188;
  void *v189;
  __int128 v191;
  uint64_t v193;
  uint64_t *v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t *v199;
  char v200;
  WTF::StringImpl *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  WTF::StringImpl *v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE v210[24];
  int v211;
  WTF::StringImpl **v212;
  __int128 v213;
  _BYTE v214[44];
  uint64_t v215;
  WTF::StringImpl *v216;
  uint64_t v217;
  uint64_t v218;

  *(_QWORD *)&v191 = a4;
  *((_QWORD *)&v191 + 1) = a5;
  v218 = *MEMORY[0x1E0C80C00];
  v212 = (WTF::StringImpl **)a2;
  LOBYTE(v213) = 0;
  *(_DWORD *)&v214[8] = -1;
  v15 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(WTF::StringImpl **, __int128 *, uint64_t))off_1E33678A8[v15])(&v206, &v213, a3);
    *(_DWORD *)&v214[8] = v15;
  }
  v195 = (uint64_t *)(a1 + 24);
  v214[16] = 0;
  *(_DWORD *)&v214[40] = -1;
  v16 = *(unsigned int *)(a3 + 56);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33678A8[v16])(&v206, &v214[16], a3 + 32);
    *(_DWORD *)&v214[40] = v16;
  }
  v17 = WTF::HashTable<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>>,std::pair<PAL::SessionID,WebCore::ClientOrigin>>(*v195, (uint64_t)&v212);
  if (v17)
  {
    v20 = *(_QWORD *)(v17 + 72);
    v21 = a7;
    if (v20)
    {
      do
        v22 = __ldaxr((unsigned int *)v20);
      while (__stlxr(v22 + 1, (unsigned int *)v20));
    }
  }
  else
  {
    v20 = 0;
    v21 = a7;
  }
  if (*(_DWORD *)&v214[40] != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3367898[*(unsigned int *)&v214[40]])(&v206, &v214[16]);
  *(_DWORD *)&v214[40] = -1;
  if (*(_DWORD *)&v214[8] != -1)
    ((void (*)(WTF::StringImpl **, __int128 *))off_1E3367898[*(unsigned int *)&v214[8]])(&v206, &v213);
  if (v20)
  {
    v23 = *(_QWORD *)(v20 + 8);
    if (v23)
      ++*(_DWORD *)v23;
    do
    {
      v24 = __ldaxr((unsigned int *)v20);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v20));
    if (v25)
    {
      if (v23)
        goto LABEL_142;
    }
    else
    {
      atomic_store(1u, (unsigned int *)v20);
      WTF::fastFree((WTF *)v20, v18);
      if (v23)
        goto LABEL_142;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)v26 = 1;
  *(_QWORD *)(v26 + 8) = 0;
  v27 = *(_QWORD *)(a1 + 16);
  if (v27)
    goto LABEL_265;
  v27 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v27 = 1;
  *(_QWORD *)(v27 + 8) = a1;
  v29 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v27;
  if (!v29)
    goto LABEL_265;
  do
  {
    v30 = __ldaxr(v29);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v29));
  if (!v31)
  {
    atomic_store(1u, v29);
    WTF::fastFree((WTF *)v29, v28);
  }
  v27 = *(_QWORD *)(a1 + 16);
  if (v27)
  {
LABEL_265:
    do
      v32 = __ldaxr((unsigned int *)v27);
    while (__stlxr(v32 + 1, (unsigned int *)v27));
  }
  *(_BYTE *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = v27;
  *(_QWORD *)(v26 + 24) = a2;
  *(_DWORD *)(v26 + 56) = -1;
  v33 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v33 != -1)
  {
    ((void (*)(WTF::StringImpl ***))off_1E33678A8[v33])(&v212);
    *(_DWORD *)(v26 + 56) = v33;
  }
  *(_BYTE *)(v26 + 64) = 0;
  *(_DWORD *)(v26 + 88) = -1;
  v34 = *(unsigned int *)(a3 + 56);
  if ((_DWORD)v34 != -1)
  {
    ((void (*)(WTF::StringImpl ***))off_1E33678A8[v34])(&v212);
    *(_DWORD *)(v26 + 88) = v34;
  }
  *(_QWORD *)(v26 + 96) = 0;
  *(_QWORD *)(v26 + 104) = 0;
  *(_QWORD *)(v26 + 109) = 0;
  *(_QWORD *)(v26 + 120) = 0;
  *(_QWORD *)(v26 + 128) = 0;
  *(_QWORD *)(v26 + 133) = 0;
  v206 = a2;
  LOBYTE(v207) = 0;
  LODWORD(v209) = -1;
  v35 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v35 != -1)
  {
    ((void (*)(WTF::StringImpl ***, __int128 *, uint64_t))off_1E33678A8[v35])(&v212, &v207, a3);
    LODWORD(v209) = v35;
  }
  v210[0] = 0;
  v211 = -1;
  v36 = *(unsigned int *)(a3 + 56);
  if ((_DWORD)v36 != -1)
  {
    ((void (*)(WTF::StringImpl ***, _BYTE *, uint64_t))off_1E33678A8[v36])(&v212, v210, a3 + 32);
    v211 = v36;
  }
  v37 = *(_QWORD *)(v26 + 8);
  if (v37)
    goto LABEL_266;
  v37 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v37 = 1;
  *(_QWORD *)(v37 + 8) = v26;
  v39 = *(unsigned int **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v37;
  if (!v39)
    goto LABEL_266;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v39);
    WTF::fastFree((WTF *)v39, v38);
  }
  v37 = *(_QWORD *)(v26 + 8);
  if (v37)
  {
LABEL_266:
    do
      v42 = __ldaxr((unsigned int *)v37);
    while (__stlxr(v42 + 1, (unsigned int *)v37));
  }
  v43 = *v195;
  if (*v195
    || (WTF::HashTable<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>::rehash(v195, 8u, 0), (v43 = *v195) != 0))
  {
    v44 = *(_DWORD *)(v43 - 8);
  }
  else
  {
    v44 = 0;
  }
  v45 = WTF::PairHash<PAL::SessionID,WebCore::ClientOrigin>::hash((uint64_t *)&v206);
  v197 = 0;
  for (i = 1; ; ++i)
  {
    v47 = v45 & v44;
    v48 = v43 + 80 * (v45 & v44);
    *(_DWORD *)&v214[8] = 0;
    *(_DWORD *)&v214[40] = 0;
    memset(&v214[16], 0, 20);
    v213 = 0uLL;
    v212 = 0;
    *(_DWORD *)v214 = 0;
    if (*(_QWORD *)v48)
    {
LABEL_49:
      v49 = 0;
      v50 = 0;
LABEL_50:
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3367898[v50])(&v201, &v214[16]);
      goto LABEL_51;
    }
    if ((WTF::StringImpl ***)v48 == &v212)
    {
      v50 = 0;
      v49 = 1;
      goto LABEL_50;
    }
    if (*(_DWORD *)(v48 + 32))
      goto LABEL_49;
    v201 = (WTF::StringImpl *)&v200;
    v61 = std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>((uint64_t)&v201, v48 + 8, (uint64_t)&v213);
    v50 = *(unsigned int *)&v214[40];
    if (v61)
    {
      v62 = *(unsigned int *)(v48 + 64);
      v63 = *(unsigned int *)&v214[40] == v62;
      if (*(unsigned int *)&v214[40] == 0xFFFFFFFFLL)
        v63 = 0;
      if (v62 == 0xFFFFFFFFLL)
        v49 = *(unsigned int *)&v214[40] == 0xFFFFFFFFLL;
      else
        v49 = v63;
      if ((_DWORD)v62 != -1 && v63)
      {
        v201 = (WTF::StringImpl *)&v200;
        v49 = ((uint64_t (*)(WTF::StringImpl **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[*(unsigned int *)&v214[40]])(&v201, v48 + 40, &v214[16]);
        v50 = *(unsigned int *)&v214[40];
      }
    }
    else
    {
      v49 = 0;
    }
    if (v50 != 0xFFFFFFFFLL)
      goto LABEL_50;
LABEL_51:
    *(_DWORD *)&v214[40] = -1;
    if (*(_DWORD *)&v214[8] != -1)
      ((void (*)(WTF::StringImpl **, __int128 *))off_1E3367898[*(unsigned int *)&v214[8]])(&v201, &v213);
    if ((v49 & 1) != 0)
      break;
    if (*(_QWORD *)v48 == -1)
    {
      v197 = v43 + 80 * v47;
      goto LABEL_89;
    }
    if (*(WTF::StringImpl **)v48 != v206)
      goto LABEL_89;
    if ((WTF::StringImpl **)v48 == &v206)
      goto LABEL_131;
    v51 = *(unsigned int *)(v48 + 32);
    v53 = (_DWORD)v209 == (_DWORD)v51 && (_DWORD)v209 != -1;
    if ((_DWORD)v51 == -1 || !v53)
    {
      if ((_DWORD)v51 == -1)
        v55 = v209 == -1;
      else
        v55 = v53;
      if (!v55)
        goto LABEL_89;
    }
    else
    {
      v212 = &v201;
      v56 = ((uint64_t (*)(WTF::StringImpl ***, uint64_t, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v51])(&v212, v48 + 8, &v207);
      if ((v56 & 1) == 0)
        goto LABEL_89;
    }
    v57 = *(unsigned int *)(v48 + 64);
    v59 = v211 == (_DWORD)v57 && v211 != -1;
    if ((_DWORD)v57 == -1 || !v59)
    {
      if ((_DWORD)v57 == -1)
        v60 = v211 == -1;
      else
        v60 = v59;
      if (v60)
      {
LABEL_131:
        v23 = v26;
        if (v37)
        {
          do
          {
            v77 = __ldaxr((unsigned int *)v37);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, (unsigned int *)v37));
          if (!v78)
          {
            atomic_store(1u, (unsigned int *)v37);
            WTF::fastFree((WTF *)v37, v18);
          }
        }
        goto LABEL_138;
      }
    }
    else
    {
      v212 = &v201;
      if ((((uint64_t (*)(WTF::StringImpl ***, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v57])(&v212, v48 + 40, v210) & 1) != 0)goto LABEL_131;
    }
LABEL_89:
    v45 = i + v47;
  }
  if (v197)
  {
    *(_DWORD *)(v197 + 32) = 0;
    *(_DWORD *)(v197 + 64) = 0;
    *(_QWORD *)(v197 + 40) = 0;
    *(_QWORD *)(v197 + 48) = 0;
    *(_DWORD *)(v197 + 56) = 0;
    *(_QWORD *)(v197 + 8) = 0;
    *(_QWORD *)(v197 + 16) = 0;
    *(_QWORD *)v197 = 0;
    *(_DWORD *)(v197 + 24) = 0;
    *(_QWORD *)(v197 + 72) = 0;
    --*(_DWORD *)(*v195 - 16);
    v48 = v197;
  }
  *(_QWORD *)v48 = v206;
  v65 = *(unsigned int *)(v48 + 32);
  v23 = v26;
  if ((_DWORD)v65 == -1)
  {
    if ((_DWORD)v209 != -1)
      goto LABEL_111;
  }
  else
  {
    if ((_DWORD)v209 == -1)
    {
      ((void (*)(WTF::StringImpl ***, uint64_t))off_1E3367898[v65])(&v212, v48 + 8);
      *(_DWORD *)(v48 + 32) = -1;
      goto LABEL_112;
    }
LABEL_111:
    v212 = (WTF::StringImpl **)(v48 + 8);
    ((void (*)(WTF::StringImpl ***))off_1E3367C48[v209])(&v212);
  }
LABEL_112:
  v18 = (void *)(v48 + 40);
  v66 = *(unsigned int *)(v48 + 64);
  if ((_DWORD)v66 == -1)
  {
    if (v211 == -1)
      goto LABEL_117;
LABEL_116:
    v212 = (WTF::StringImpl **)(v48 + 40);
    ((void (*)(WTF::StringImpl ***))off_1E3367C48[v211])(&v212);
    goto LABEL_117;
  }
  if (v211 != -1)
    goto LABEL_116;
  ((void (*)(WTF::StringImpl ***, void *))off_1E3367898[v66])(&v212, v18);
  *(_DWORD *)(v48 + 64) = -1;
LABEL_117:
  v67 = *(unsigned int **)(v48 + 72);
  *(_QWORD *)(v48 + 72) = v37;
  if (v67)
  {
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      WTF::fastFree((WTF *)v67, v18);
    }
  }
  v70 = *v195;
  if (*v195)
    v71 = *(_DWORD *)(v70 - 12) + 1;
  else
    v71 = 1;
  *(_DWORD *)(v70 - 12) = v71;
  v72 = *v195;
  if (*v195)
    v73 = *(_DWORD *)(v72 - 12);
  else
    v73 = 0;
  v74 = (*(_DWORD *)(v72 - 16) + v73);
  v75 = *(unsigned int *)(v72 - 4);
  if (v75 <= 0x400)
  {
    if (3 * v75 > 4 * v74)
      goto LABEL_138;
    if ((_DWORD)v75)
LABEL_130:
      v76 = (_DWORD)v75 << (6 * *(_DWORD *)(v72 - 12) >= (2 * v75));
    else
      v76 = 8;
    WTF::HashTable<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>::rehash(v195, v76, v48);
    goto LABEL_138;
  }
  if (v75 <= 2 * v74)
    goto LABEL_130;
LABEL_138:
  if (v211 != -1)
    ((void (*)(WTF::StringImpl ***, _BYTE *))off_1E3367898[v211])(&v212, v210);
  v211 = -1;
  v21 = a7;
  if ((_DWORD)v209 != -1)
    ((void (*)(WTF::StringImpl ***, __int128 *))off_1E3367898[v209])(&v212, &v207);
LABEL_142:
  v79 = a6[1];
  v204 = *a6;
  v80 = v204;
  v205 = v79;
  ++*(_DWORD *)v23;
  v212 = (WTF::StringImpl **)v23;
  v213 = v191;
  *(_OWORD *)&v214[8] = v80;
  *(_QWORD *)&v214[24] = v205;
  v214[40] = a8;
  v81 = *a12;
  *a12 = 0;
  v215 = v81;
  v82 = *v21;
  if (*v21)
    *(_DWORD *)v82 += 2;
  v83 = *a11;
  *a11 = 0;
  v216 = v82;
  v217 = v83;
  if (!a9)
  {
    if (!a10 || WebCore::LocalWebLockRegistry::PerOriginRegistry::isGrantable(v23, (uint64_t)&v212, v19))
      goto LABEL_154;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v217 + 16))(v217, 0);
    goto LABEL_239;
  }
  v84 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v23 + 120), v21, v19);
  v85 = *(_QWORD *)(v23 + 120);
  v86 = *(_DWORD *)(v23 + 128);
  if (v85 + 24 * v86 != v84)
  {
    v87 = v84;
    v88 = *(unsigned int *)(v84 + 20);
    if ((_DWORD)v88)
    {
      v89 = 80 * v88;
      v90 = (uint64_t *)(*(_QWORD *)(v84 + 8) + 72);
      do
      {
        v91 = *v90;
        v90 += 10;
        (*(void (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
        v89 -= 80;
      }
      while (v89);
      v85 = *(_QWORD *)(v23 + 120);
      v86 = *(_DWORD *)(v23 + 128);
    }
    if (v85 + 24 * v86 != v87)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::remove(v23 + 120, v87);
  }
LABEL_154:
  v199 = (uint64_t *)(v23 + 96);
  v93 = *(unsigned int *)(v23 + 104);
  v92 = *(unsigned int *)(v23 + 108);
  if (3 * v93 <= (unint64_t)(4 * v92) || v93 <= 2 * (int)v92 && *(_BYTE *)(v23 + 116))
  {
    if ((_DWORD)v93)
      v94 = 2 * v93;
    else
      v94 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::rehash(v199, v94);
    LODWORD(v93) = *(_DWORD *)(v23 + 104);
  }
  v95 = v93 - 1;
  v198 = *(_DWORD *)(v23 + 112);
  v96 = *((_DWORD *)*v21 + 4);
  v193 = v23;
  v196 = v93;
  if (v96 < 0x100)
  {
    v98 = WTF::StringImpl::hashSlowCase(*v21);
    LODWORD(v93) = v196;
    v97 = v98;
  }
  else
  {
    v97 = v96 >> 8;
  }
  v99 = (v97 ^ v198) & v95;
  v100 = *v199;
  v101 = *v199 + 40 * v99;
  v102 = *(WTF **)v101;
  if (*(_QWORD *)v101)
  {
    v103 = 0;
    while (1)
    {
      v104 = *((_DWORD *)v102 + 4);
      if (v104 < 0x100)
      {
        v105 = WTF::StringImpl::hashSlowCase(v102);
        LODWORD(v93) = v196;
      }
      else
      {
        v105 = v104 >> 8;
      }
      v106 = (v99 + v93 - ((v105 ^ v198) & v95)) & v95;
      if (v103 > v106)
        break;
      if (v105 == v97)
      {
        v107 = WTF::equal(*(WTF **)v101, *v21, v19);
        LODWORD(v93) = v196;
        if ((v107 & 1) != 0)
          goto LABEL_214;
      }
      v100 = *v199;
      v99 = ((_DWORD)v99 + 1) & v95;
      ++v103;
      v101 = *v199 + 40 * v99;
      v102 = *(WTF **)v101;
      if (!*(_QWORD *)v101)
      {
        if (v103 >= 0x80)
          *(_BYTE *)(v193 + 116) = 1;
        goto LABEL_175;
      }
    }
    if (v103 >= 0x80)
      *(_BYTE *)(v193 + 116) = 1;
    v114 = *(WTF::StringImpl **)v101;
    *(_QWORD *)v101 = 0;
    v201 = v114;
    v115 = v100 + 40 * v99;
    v202 = 0u;
    v203 = 0u;
    v116 = (unint64_t *)(v115 + 8);
    *(_QWORD *)&v202 = *(_QWORD *)(v115 + 8);
    *(_QWORD *)(v115 + 8) = 0;
    v118 = *(_QWORD *)(v115 + 16);
    v117 = v115 + 16;
    v119 = *((_QWORD *)&v202 + 1);
    *((_QWORD *)&v202 + 1) = v118;
    *(_QWORD *)v117 = v119;
    v120 = (uint64_t *)(v117 + 8);
    *(_QWORD *)&v203 = *(_QWORD *)(v117 + 8);
    *(_QWORD *)(v117 + 8) = 0;
    v121 = (_DWORD *)(v117 + 16);
    DWORD2(v203) = *(_DWORD *)(v117 + 16);
    *(_DWORD *)(v117 + 16) = 0;
    WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque(v116, (WTF::StringImpl *)v18);
    v123 = *(WTF::StringImpl **)v101;
    *(_QWORD *)v101 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, v122);
      else
        *(_DWORD *)v123 -= 2;
    }
    *(_QWORD *)(v101 + 32) = 0;
    *(_OWORD *)v101 = 0u;
    *(_OWORD *)(v101 + 16) = 0u;
    v124 = *v21;
    if (*v21)
      *(_DWORD *)v124 += 2;
    *(_QWORD *)v101 = v124;
    v208 = 0;
    v125 = (WTF::StringImpl *)*v116;
    *v116 = 0;
    v206 = v125;
    v126 = *(_QWORD *)v117;
    *(_QWORD *)v117 = 0;
    *(_QWORD *)&v207 = v126;
    v127 = *v120;
    *v120 = 0;
    *((_QWORD *)&v207 + 1) = v127;
    LODWORD(v127) = *v121;
    *v121 = 0;
    LODWORD(v208) = v127;
    WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)&v206, v122);
    v129 = (v99 + 1) & v95;
    v130 = *v199;
    v131 = *v199 + 40 * v129;
    v132 = *(WTF::StringImpl **)v131;
    if (*(_QWORD *)v131)
    {
      v133 = v196;
      do
      {
        v134 = *((_DWORD *)v132 + 4);
        if (v134 < 0x100)
        {
          v135 = WTF::StringImpl::hashSlowCase(v132);
          v133 = v196;
        }
        else
        {
          v135 = v134 >> 8;
        }
        ++v106;
        v136 = (v129 + v133 - ((v135 ^ v198) & v95)) & v95;
        if (v106 > v136)
        {
          v137 = v201;
          v139 = v202;
          v138 = v203;
          v207 = v202;
          v201 = 0;
          v202 = 0uLL;
          v208 = v203;
          *(_QWORD *)&v203 = 0;
          v140 = DWORD2(v203);
          v209 = DWORD2(v203);
          DWORD2(v203) = 0;
          v141 = *(WTF::StringImpl **)v131;
          *(_QWORD *)v131 = 0;
          v142 = v201;
          v201 = v141;
          if (v142)
          {
            if (*(_DWORD *)v142 == 2)
            {
              WTF::StringImpl::destroy(v142, v128);
              v143 = v202;
            }
            else
            {
              v143 = 0;
              *(_DWORD *)v142 -= 2;
            }
          }
          else
          {
            v143 = 0;
          }
          v144 = *(_QWORD *)(v131 + 16);
          *(_QWORD *)&v202 = *(_QWORD *)(v131 + 8);
          *(_QWORD *)(v131 + 8) = v143;
          v145 = *((_QWORD *)&v202 + 1);
          *((_QWORD *)&v202 + 1) = v144;
          *(_QWORD *)(v131 + 16) = v145;
          v146 = v203;
          *(_QWORD *)&v203 = *(_QWORD *)(v131 + 24);
          *(_QWORD *)(v131 + 24) = v146;
          LODWORD(v144) = DWORD2(v203);
          DWORD2(v203) = *(_DWORD *)(v131 + 32);
          *(_DWORD *)(v131 + 32) = v144;
          v206 = 0;
          v147 = *(WTF::StringImpl **)v131;
          *(_QWORD *)v131 = v137;
          if (v147)
          {
            if (*(_DWORD *)v147 == 2)
            {
              WTF::StringImpl::destroy(v147, v128);
              v145 = *(_QWORD *)(v131 + 16);
              v146 = *(_QWORD *)(v131 + 24);
            }
            else
            {
              *(_DWORD *)v147 -= 2;
            }
          }
          v148 = *(_QWORD *)(v131 + 8);
          *(_OWORD *)(v131 + 8) = v139;
          *(_QWORD *)&v207 = v148;
          *((_QWORD *)&v207 + 1) = v145;
          *(_QWORD *)(v131 + 24) = v138;
          v208 = v146;
          v149 = *(_DWORD *)(v131 + 32);
          *(_DWORD *)(v131 + 32) = v140;
          LODWORD(v209) = v149;
          WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)&v207, v128);
          v150 = v206;
          v206 = 0;
          v21 = a7;
          v133 = v196;
          if (v150)
          {
            if (*(_DWORD *)v150 == 2)
            {
              WTF::StringImpl::destroy(v150, v128);
              v133 = v196;
            }
            else
            {
              *(_DWORD *)v150 -= 2;
            }
          }
          v106 = v136;
        }
        v129 = (v129 + 1) & v95;
        v130 = *v199;
        v131 = *v199 + 40 * v129;
        v132 = *(WTF::StringImpl **)v131;
      }
      while (*(_QWORD *)v131);
    }
    v151 = v201;
    v201 = 0;
    v152 = *(WTF::StringImpl **)v131;
    *(_QWORD *)v131 = v151;
    v113 = v193;
    if (v152)
    {
      if (*(_DWORD *)v152 == 2)
        WTF::StringImpl::destroy(v152, v128);
      else
        *(_DWORD *)v152 -= 2;
    }
    v153 = v130 + 40 * v129;
    v154 = *(_QWORD *)(v153 + 8);
    *(_QWORD *)(v153 + 8) = v202;
    *(_QWORD *)&v202 = v154;
    v155 = *(_QWORD *)(v153 + 16);
    *(_QWORD *)(v153 + 16) = *((_QWORD *)&v202 + 1);
    *((_QWORD *)&v202 + 1) = v155;
    v156 = *(_QWORD *)(v153 + 24);
    *(_QWORD *)(v153 + 24) = v203;
    *(_QWORD *)&v203 = v156;
    LODWORD(v156) = *(_DWORD *)(v153 + 32);
    *(_DWORD *)(v153 + 32) = DWORD2(v203);
    DWORD2(v203) = v156;
    WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)&v202, v128);
    v158 = v201;
    v201 = 0;
    if (v158)
    {
      if (*(_DWORD *)v158 == 2)
        WTF::StringImpl::destroy(v158, v157);
      else
        *(_DWORD *)v158 -= 2;
    }
  }
  else
  {
LABEL_175:
    v108 = *v21;
    if (*v21)
      *(_DWORD *)v108 += 2;
    *(_QWORD *)v101 = v108;
    v109 = v100 + 40 * v99;
    v208 = 0;
    v110 = *(WTF::StringImpl **)(v109 + 8);
    *(_QWORD *)(v109 + 8) = 0;
    v206 = v110;
    v111 = *(_QWORD *)(v109 + 16);
    *(_QWORD *)(v109 + 16) = 0;
    *(_QWORD *)&v207 = v111;
    v112 = *(_QWORD *)(v109 + 24);
    *(_QWORD *)(v109 + 24) = 0;
    *((_QWORD *)&v207 + 1) = v112;
    LODWORD(v112) = *(_DWORD *)(v109 + 32);
    *(_DWORD *)(v109 + 32) = 0;
    LODWORD(v208) = v112;
    WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)&v206, (WTF::StringImpl *)v18);
    v113 = v193;
  }
  ++*(_DWORD *)(v113 + 108);
LABEL_214:
  v160 = *(_QWORD *)(v101 + 8);
  v159 = *(_QWORD *)(v101 + 16);
  v161 = (uint64_t *)(v101 + 8);
  if (a9)
  {
    if (v160)
    {
      v23 = v193;
      if (v159 + 1 != v160)
      {
LABEL_237:
        *(_QWORD *)(v101 + 8) = v160 - 1;
        v175 = *(_QWORD *)(v101 + 24) + 96 * (v160 - 1);
        v176 = v212;
        v212 = 0;
        *(_QWORD *)v175 = v176;
        v177 = v213;
        v178 = *(_OWORD *)v214;
        v179 = *(_OWORD *)&v214[16];
        *(_OWORD *)(v175 + 49) = *(_OWORD *)&v214[25];
        *(_OWORD *)(v175 + 40) = v179;
        *(_OWORD *)(v175 + 24) = v178;
        *(_OWORD *)(v175 + 8) = v177;
        v180 = v215;
        v215 = 0;
        *(_QWORD *)(v175 + 72) = v180;
        v181 = v216;
        v216 = 0;
        *(_QWORD *)(v175 + 80) = v181;
        v182 = v217;
        v217 = 0;
        *(_QWORD *)(v175 + 88) = v182;
        goto LABEL_238;
      }
LABEL_234:
      WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::expandCapacity(v101 + 8);
      v160 = *v161;
      if (*v161)
        goto LABEL_237;
      LODWORD(v160) = *(_DWORD *)(v101 + 32);
    }
    else
    {
      v160 = *(unsigned int *)(v101 + 32);
      if (v159)
      {
        v23 = v193;
        if (v159 == v160 - 1)
          goto LABEL_234;
      }
      else
      {
        v23 = v193;
        if (!(_DWORD)v160)
          goto LABEL_234;
      }
    }
    v160 = v160;
    goto LABEL_237;
  }
  if (v160)
  {
    v162 = v159 + 1 == v160;
    goto LABEL_225;
  }
  v163 = *(unsigned int *)(v101 + 32);
  if (!v159)
  {
    v23 = v193;
    if ((_DWORD)v163)
    {
      v159 = 0;
      goto LABEL_228;
    }
    goto LABEL_227;
  }
  v162 = v159 == v163 - 1;
LABEL_225:
  v23 = v193;
  if (v162)
  {
LABEL_227:
    WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::expandCapacity(v101 + 8);
    v159 = *(_QWORD *)(v101 + 16);
  }
LABEL_228:
  v164 = *(_QWORD *)(v101 + 24) + 96 * v159;
  v165 = v212;
  v212 = 0;
  *(_QWORD *)v164 = v165;
  v166 = v213;
  v167 = *(_OWORD *)v214;
  v168 = *(_OWORD *)&v214[16];
  *(_OWORD *)(v164 + 49) = *(_OWORD *)&v214[25];
  *(_OWORD *)(v164 + 40) = v168;
  *(_OWORD *)(v164 + 24) = v167;
  *(_OWORD *)(v164 + 8) = v166;
  v169 = v215;
  v215 = 0;
  *(_QWORD *)(v164 + 72) = v169;
  v170 = v216;
  v216 = 0;
  *(_QWORD *)(v164 + 80) = v170;
  v171 = v217;
  v217 = 0;
  *(_QWORD *)(v164 + 88) = v171;
  v172 = *(_QWORD *)(v101 + 16);
  if (v172 == *(unsigned int *)(v101 + 32) - 1)
    v173 = 0;
  else
    v173 = v172 + 1;
  *(_QWORD *)(v101 + 16) = v173;
LABEL_238:
  WebCore::LocalWebLockRegistry::PerOriginRegistry::processLockRequestQueue(v23, v21, (const WTF::StringImpl *)(v101 + 8));
LABEL_239:
  v183 = v217;
  v217 = 0;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = v216;
  v216 = 0;
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
      WTF::StringImpl::destroy(v184, v174);
    else
      *(_DWORD *)v184 -= 2;
  }
  v185 = v215;
  v215 = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)v212;
  v212 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(result, v174);
      result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)WTF::fastFree(v188, v189);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  if (*(_DWORD *)v23 == 1)
  {
    WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry((WebCore::LocalWebLockRegistry::PerOriginRegistry *)v23, v174);
    return (WebCore::LocalWebLockRegistry::PerOriginRegistry *)WTF::fastFree((WTF *)v23, v187);
  }
  else
  {
    --*(_DWORD *)v23;
  }
  return result;
}

BOOL WebCore::LocalWebLockRegistry::PerOriginRegistry::isGrantable(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  WTF **v36;
  WTF *v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  int v45;
  char v46;

  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(unsigned int *)(a1 + 104);
  if (v5)
  {
    v7 = v6 - 1;
    v8 = *(_DWORD *)(a1 + 112);
    v9 = *(WTF::StringImpl **)(a2 + 80);
    v10 = *((_DWORD *)v9 + 4);
    if (v10 < 0x100)
    {
      v11 = WTF::StringImpl::hashSlowCase(v9);
      v5 = *(_QWORD *)(a1 + 96);
    }
    else
    {
      v11 = v10 >> 8;
    }
    v13 = (v11 ^ v8) & v7;
    v12 = v5 + 40 * v13;
    v14 = *(WTF **)v12;
    if (*(_QWORD *)v12)
    {
      v15 = -1;
      while (1)
      {
        v16 = *((_DWORD *)v14 + 4);
        v17 = v16 < 0x100 ? WTF::StringImpl::hashSlowCase(v14) : v16 >> 8;
        if (++v15 > ((v13 + v6 - ((v17 ^ v8) & v7)) & v7))
          break;
        if (v17 == v11)
        {
          v18 = WTF::equal(*(WTF **)v12, *(const WTF::StringImpl **)(a2 + 80), a3);
          v5 = *(_QWORD *)(a1 + 96);
          if ((v18 & 1) != 0)
          {
            LODWORD(v6) = *(_DWORD *)(a1 + 104);
            goto LABEL_20;
          }
        }
        else
        {
          v5 = *(_QWORD *)(a1 + 96);
        }
        v13 = (v13 + 1) & v7;
        v12 = v5 + 40 * v13;
        v14 = *(WTF **)v12;
        if (!*(_QWORD *)v12)
          goto LABEL_19;
      }
      v5 = *(_QWORD *)(a1 + 96);
    }
LABEL_19:
    LODWORD(v6) = *(_DWORD *)(a1 + 104);
    v12 = v5 + 40 * v6;
  }
  else
  {
    v12 = 40 * v6;
  }
LABEL_20:
  if (v5 + 40 * v6 != v12)
  {
    v19 = *(_QWORD *)(v12 + 8);
    if (v19 == *(_QWORD *)(v12 + 16))
      goto LABEL_62;
    if (*(_QWORD *)(v12 + 24) + 96 * v19 != a2)
      return 0;
  }
  v21 = *(_QWORD *)(a1 + 120);
  if (!*(_BYTE *)(a2 + 64))
  {
    v28 = *(unsigned int *)(a1 + 128);
    if (v21)
    {
      v29 = v28 - 1;
      v30 = *(_DWORD *)(a1 + 136);
      v31 = *(WTF::StringImpl **)(a2 + 80);
      v32 = *((_DWORD *)v31 + 4);
      if (v32 < 0x100)
      {
        v33 = WTF::StringImpl::hashSlowCase(v31);
        v21 = *(_QWORD *)(a1 + 120);
      }
      else
      {
        v33 = v32 >> 8;
      }
      v41 = (v33 ^ v30) & v29;
      v34 = v21 + 24 * v41;
      v42 = *(WTF **)v34;
      if (*(_QWORD *)v34)
      {
        v43 = -1;
        while (1)
        {
          v44 = *((_DWORD *)v42 + 4);
          v45 = v44 < 0x100 ? WTF::StringImpl::hashSlowCase(v42) : v44 >> 8;
          if (++v43 > ((v41 + v28 - ((v45 ^ v30) & v29)) & v29))
            break;
          if (v45 == v33)
          {
            v46 = WTF::equal(*(WTF **)v34, *(const WTF::StringImpl **)(a2 + 80), a3);
            v21 = *(_QWORD *)(a1 + 120);
            if ((v46 & 1) != 0)
            {
              LODWORD(v28) = *(_DWORD *)(a1 + 128);
              goto LABEL_58;
            }
          }
          else
          {
            v21 = *(_QWORD *)(a1 + 120);
          }
          v41 = (v41 + 1) & v29;
          v34 = v21 + 24 * v41;
          v42 = *(WTF **)v34;
          if (!*(_QWORD *)v34)
            goto LABEL_57;
        }
        v21 = *(_QWORD *)(a1 + 120);
      }
LABEL_57:
      LODWORD(v28) = *(_DWORD *)(a1 + 128);
      v34 = v21 + 24 * v28;
    }
    else
    {
      v34 = 24 * v28;
    }
LABEL_58:
    if (v21 + 24 * v28 == v34)
      return 1;
    if (*(_DWORD *)(v34 + 20))
      return *(_BYTE *)(*(_QWORD *)(v34 + 8) + 64) == 0;
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x1955169CCLL);
  }
  if (v21)
  {
    v22 = *(_DWORD *)(a1 + 128);
    v23 = v22 - 1;
    v24 = *(_DWORD *)(a1 + 136);
    v25 = *(WTF::StringImpl **)(a2 + 80);
    v26 = *((_DWORD *)v25 + 4);
    if (v26 < 0x100)
    {
      v27 = WTF::StringImpl::hashSlowCase(v25);
      v21 = *(_QWORD *)(a1 + 120);
    }
    else
    {
      v27 = v26 >> 8;
    }
    v35 = (v27 ^ v24) & v23;
    v36 = (WTF **)(v21 + 24 * v35);
    v37 = *v36;
    if (*v36)
    {
      v38 = -1;
      do
      {
        v39 = *((_DWORD *)v37 + 4);
        v40 = v39 < 0x100 ? WTF::StringImpl::hashSlowCase(v37) : v39 >> 8;
        if (++v38 > ((v35 + v22 - ((v40 ^ v24) & v23)) & v23))
          break;
        if (v40 == v27 && (WTF::equal(*v36, *(const WTF::StringImpl **)(a2 + 80), a3) & 1) != 0)
          return 0;
        v35 = (v35 + 1) & v23;
        v36 = (WTF **)(*(_QWORD *)(a1 + 120) + 24 * v35);
        v37 = *v36;
      }
      while (*v36);
    }
  }
  return 1;
}

unint64_t *WebCore::LocalWebLockRegistry::PerOriginRegistry::processLockRequestQueue(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t *v9;
  unint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  int v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF **v48;
  WTF *v49;
  _DWORD *v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  WTF **v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v69;
  WTF *v70;
  void *v71;
  WTF *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  WTF *v78;
  int v79;
  void *v80;
  uint64_t v81;
  WTF *v82;
  WTF *v83;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v90;
  WTF *v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  WTF::StringImpl *v99;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v106;
  int v107;
  int v108;
  WTF *v109;
  WTF::StringImpl *v110;
  WTF *v111;
  int v112;
  int v113;
  WTF::StringImpl *v114;
  int v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _OWORD v120[2];
  uint64_t v121;

  v3 = a1;
  v121 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 == *((_QWORD *)a3 + 1))
  {
LABEL_2:
    v5 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v3 + 96), a2, a3);
    if (*(_QWORD *)(v3 + 96) + 40 * *(unsigned int *)(v3 + 104) == v5)
    {
      v116 = 0u;
      v117 = 0u;
      v118 = 0u;
      v119 = 0u;
      WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)&v118, v6);
    }
    else
    {
      v7 = (WTF::StringImpl *)v5;
      *((_QWORD *)&v117 + 1) = 0;
      v116 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)&v117 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      DWORD2(v117) = *(_DWORD *)(v5 + 32);
      *(_DWORD *)(v5 + 32) = 0;
      if (*(_QWORD *)(v3 + 96) + 40 * *(unsigned int *)(v3 + 104) != v5)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::remove(v3 + 96, v5);
    }
    return WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)&v116, v7);
  }
  else
  {
    v8 = a3;
    v9 = (uint64_t *)(a1 + 120);
    v106 = (uint64_t *)(a1 + 120);
    while (1)
    {
      result = (unint64_t *)WebCore::LocalWebLockRegistry::PerOriginRegistry::isGrantable(v3, *((_QWORD *)v8 + 2) + 96 * v4, a3);
      if (!(_DWORD)result)
        break;
      if (*(_QWORD *)v8 == *((_QWORD *)v8 + 1))
        goto LABEL_115;
      v11 = 3 * *(_QWORD *)v8;
      v12 = *((_QWORD *)v8 + 2) + 96 * *(_QWORD *)v8;
      v13 = *(_QWORD *)v12;
      *(_QWORD *)v12 = 0;
      v118 = *(_OWORD *)(v12 + 8);
      v119 = *(_OWORD *)(v12 + 24);
      v120[0] = *(_OWORD *)(v12 + 40);
      *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)(v12 + 49);
      v14 = *(WTF::StringImpl **)(v12 + 80);
      v102 = v13;
      v103 = *(_QWORD *)(v12 + 72);
      *(_QWORD *)(v12 + 72) = 0;
      *(_QWORD *)(v12 + 80) = 0;
      v104 = *(_QWORD *)(v12 + 88);
      *(_QWORD *)(v12 + 88) = 0;
      WTF::VectorTypeOperations<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::destruct((WebCore::LocalWebLockRegistry::PerOriginRegistry *)(*((_QWORD *)v8 + 2) + 32 * v11), (WTF::StringImpl *)(*((_QWORD *)v8 + 2) + 32 * v11 + 96));
      if (*(_QWORD *)v8 == *((unsigned int *)v8 + 6) - 1)
        v17 = 0;
      else
        v17 = *(_QWORD *)v8 + 1;
      *(_QWORD *)v8 = v17;
      v19 = *(unsigned int *)(v3 + 128);
      v18 = *(unsigned int *)(v3 + 132);
      if (3 * v19 <= (unint64_t)(4 * v18) || v19 <= 2 * (int)v18 && *(_BYTE *)(v3 + 140))
      {
        if ((_DWORD)v19)
          v20 = 2 * v19;
        else
          v20 = 8;
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::rehash((uint64_t)v9, v20);
        LODWORD(v19) = *(_DWORD *)(v3 + 128);
      }
      v115 = *(_DWORD *)(v3 + 136);
      v21 = *((_DWORD *)v14 + 4);
      if (v21 < 0x100)
        v22 = WTF::StringImpl::hashSlowCase(v14);
      else
        v22 = v21 >> 8;
      v23 = v19 - 1;
      v24 = (v22 ^ v115) & (v19 - 1);
      v25 = *v9;
      v26 = *v9 + 24 * v24;
      v27 = *(WTF **)v26;
      v114 = v14;
      if (*(_QWORD *)v26)
      {
        v28 = 0;
        do
        {
          v29 = *((_DWORD *)v27 + 4);
          if (v29 < 0x100)
            v30 = WTF::StringImpl::hashSlowCase(v27);
          else
            v30 = v29 >> 8;
          v31 = (v24 + v19 - ((v30 ^ v115) & v23)) & v23;
          if (v28 > v31)
          {
            if (v28 >= 0x80)
              *(_BYTE *)(a1 + 140) = 1;
            v33 = *(WTF **)v26;
            *(_QWORD *)v26 = 0;
            v34 = v25 + 24 * v24;
            v111 = *(WTF **)(v34 + 8);
            v112 = *(_DWORD *)(v34 + 16);
            v113 = *(_DWORD *)(v34 + 20);
            *(_QWORD *)(v34 + 8) = 0;
            *(_QWORD *)(v34 + 16) = 0;
            v35 = *(WTF::StringImpl **)v26;
            *(_QWORD *)v26 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v15);
              else
                *(_DWORD *)v35 -= 2;
            }
            *(_QWORD *)v26 = 0;
            *(_QWORD *)(v26 + 8) = 0;
            *(_QWORD *)(v26 + 16) = 0;
            WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WebCore::LocalWebLockRegistry::PerOriginRegistry::processLockRequestQueue(WTF::String const&,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul> &)::$_0>(v26, v114);
            v37 = ((_DWORD)v24 + 1) & v23;
            v38 = *v9;
            v39 = (WTF::StringImpl **)(*v9 + 24 * v37);
            v40 = *v39;
            if (*v39)
            {
              v41 = v33;
              do
              {
                v42 = *((_DWORD *)v40 + 4);
                if (v42 < 0x100)
                {
                  v44 = v41;
                  v43 = WTF::StringImpl::hashSlowCase(v40);
                  v41 = v44;
                }
                else
                {
                  v43 = v42 >> 8;
                }
                ++v31;
                v45 = (v37 + v19 - ((v43 ^ v115) & v23)) & v23;
                if (v31 > v45)
                {
                  v46 = *v39;
                  *v39 = 0;
                  v47 = v38 + 24 * v37;
                  v49 = *(WTF **)(v47 + 8);
                  v48 = (WTF **)(v47 + 8);
                  v109 = v49;
                  v110 = v46;
                  *v48 = 0;
                  v50 = v48 + 1;
                  v51 = (_DWORD *)v48 + 3;
                  v107 = *((_DWORD *)v48 + 3);
                  v108 = *((_DWORD *)v48 + 2);
                  *((_DWORD *)v48 + 2) = 0;
                  *((_DWORD *)v48 + 3) = 0;
                  v52 = *v39;
                  *v39 = v41;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, v36);
                    else
                      *(_DWORD *)v52 -= 2;
                    v53 = *v51;
                    if ((_DWORD)v53)
                    {
                      v54 = *v48;
                      v55 = 80 * v53;
                      do
                      {
                        v56 = *((_QWORD *)v54 + 9);
                        *((_QWORD *)v54 + 9) = 0;
                        if (v56)
                          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
                        v57 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v54;
                        *(_QWORD *)v54 = 0;
                        if (v57)
                        {
                          if (*(_DWORD *)v57 == 1)
                          {
                            WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v57, v36);
                            WTF::fastFree(v58, v59);
                          }
                          else
                          {
                            --*(_DWORD *)v57;
                          }
                        }
                        v54 = (WTF *)((char *)v54 + 80);
                        v55 -= 80;
                      }
                      while (v55);
                    }
                  }
                  v60 = *v48;
                  if (*v48)
                  {
                    *v48 = 0;
                    *v50 = 0;
                    WTF::fastFree(v60, v36);
                  }
                  v41 = v110;
                  *v48 = v111;
                  v111 = v109;
                  *v50 = v112;
                  *v51 = v113;
                  v112 = v108;
                  v113 = v107;
                  v31 = v45;
                  v9 = v106;
                }
                v37 = ((_DWORD)v37 + 1) & v23;
                v38 = *v9;
                v39 = (WTF::StringImpl **)(*v9 + 24 * v37);
                v40 = *v39;
              }
              while (*v39);
            }
            else
            {
              v41 = v33;
            }
            *v39 = v41;
            v61 = v38 + 24 * v37;
            v64 = *(_DWORD *)(v61 + 20);
            v63 = (_DWORD *)(v61 + 20);
            v62 = v64;
            v65 = (WTF **)(v63 - 3);
            if (v64)
            {
              v66 = *v65;
              v67 = 80 * v62;
              do
              {
                v68 = *((_QWORD *)v66 + 9);
                *((_QWORD *)v66 + 9) = 0;
                if (v68)
                  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                v69 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v66;
                *(_QWORD *)v66 = 0;
                if (v69)
                {
                  if (*(_DWORD *)v69 == 1)
                  {
                    WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v69, v36);
                    WTF::fastFree(v70, v71);
                  }
                  else
                  {
                    --*(_DWORD *)v69;
                  }
                }
                v66 = (WTF *)((char *)v66 + 80);
                v67 -= 80;
              }
              while (v67);
            }
            v72 = *v65;
            if (*v65)
            {
              *v65 = 0;
              *(_DWORD *)(v38 + 24 * v37 + 16) = 0;
              WTF::fastFree(v72, v36);
            }
            *v65 = v111;
            *(_DWORD *)(v38 + 24 * v37 + 16) = v112;
            *v63 = v113;
            v32 = a1;
            goto LABEL_79;
          }
          if (v30 == v22 && (WTF::equal(*(WTF **)v26, v114, v16) & 1) != 0)
            goto LABEL_80;
          v25 = *v9;
          v24 = ((_DWORD)v24 + 1) & v23;
          ++v28;
          v26 = *v9 + 24 * v24;
          v27 = *(WTF **)v26;
        }
        while (*(_QWORD *)v26);
        if (v28 >= 0x80)
        {
          v32 = a1;
          *(_BYTE *)(a1 + 140) = 1;
          v14 = v114;
          goto LABEL_64;
        }
        v14 = v114;
      }
      v32 = a1;
LABEL_64:
      WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WebCore::LocalWebLockRegistry::PerOriginRegistry::processLockRequestQueue(WTF::String const&,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul> &)::$_0>(v26, v14);
LABEL_79:
      ++*(_DWORD *)(v32 + 132);
LABEL_80:
      v73 = *(unsigned int *)(v26 + 20);
      if ((_DWORD)v73 == *(_DWORD *)(v26 + 16))
      {
        v74 = v73 + (v73 >> 2);
        if (v74 >= 0x10)
          v75 = v74 + 1;
        else
          v75 = 16;
        if (v75 <= v73 + 1)
          v76 = v73 + 1;
        else
          v76 = v75;
        v77 = v114;
        if (v76 >= 0x3333334)
        {
LABEL_115:
          __break(0xC471u);
          JUMPOUT(0x1955171B8);
        }
        v78 = *(WTF **)(v26 + 8);
        v79 = 80 * v76;
        v81 = WTF::fastMalloc((WTF *)(80 * v76));
        *(_DWORD *)(v26 + 16) = (v79 & 0xFFFFFFF0) / 0x50;
        *(_QWORD *)(v26 + 8) = v81;
        if ((_DWORD)v73)
        {
          v82 = (WTF *)((char *)v78 + 80 * v73);
          v83 = v78;
          v9 = v106;
          do
          {
            v84 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v83;
            *(_QWORD *)v83 = 0;
            *(_QWORD *)v81 = v84;
            v85 = *(_OWORD *)((char *)v83 + 8);
            v86 = *(_OWORD *)((char *)v83 + 24);
            v87 = *(_OWORD *)((char *)v83 + 40);
            *(_OWORD *)(v81 + 49) = *(_OWORD *)((char *)v83 + 49);
            *(_OWORD *)(v81 + 40) = v87;
            *(_OWORD *)(v81 + 24) = v86;
            *(_OWORD *)(v81 + 8) = v85;
            v88 = *((_QWORD *)v83 + 9);
            *((_QWORD *)v83 + 9) = 0;
            *(_QWORD *)(v81 + 72) = v88;
            v89 = *((_QWORD *)v83 + 9);
            *((_QWORD *)v83 + 9) = 0;
            if (v89)
              (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
            v90 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v83;
            *(_QWORD *)v83 = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 1)
              {
                WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v90, v80);
                WTF::fastFree(v91, v92);
              }
              else
              {
                --*(_DWORD *)v90;
              }
            }
            v83 = (WTF *)((char *)v83 + 80);
            v81 += 80;
          }
          while (v83 != v82);
          v81 = *(_QWORD *)(v26 + 8);
        }
        else
        {
          v9 = v106;
        }
        v3 = a1;
        if (v78)
        {
          if ((WTF *)v81 == v78)
          {
            *(_QWORD *)(v26 + 8) = 0;
            *(_DWORD *)(v26 + 16) = 0;
          }
          WTF::fastFree(v78, v80);
          v81 = *(_QWORD *)(v26 + 8);
        }
        v95 = v81 + 80 * *(unsigned int *)(v26 + 20);
        *(_QWORD *)v95 = v102;
        v96 = v118;
        v97 = v119;
        v98 = v120[0];
        *(_OWORD *)(v95 + 49) = *(_OWORD *)((char *)v120 + 9);
        *(_OWORD *)(v95 + 40) = v98;
        *(_OWORD *)(v95 + 24) = v97;
        *(_OWORD *)(v95 + 8) = v96;
        v94 = (_QWORD *)(v95 + 72);
      }
      else
      {
        v93 = *(_QWORD *)(v26 + 8) + 80 * v73;
        *(_QWORD *)v93 = v102;
        *(_OWORD *)(v93 + 8) = v118;
        *(_OWORD *)(v93 + 24) = v119;
        *(_OWORD *)(v93 + 40) = v120[0];
        *(_OWORD *)(v93 + 49) = *(_OWORD *)((char *)v120 + 9);
        v94 = (_QWORD *)(v93 + 72);
        v77 = v114;
        v3 = a1;
      }
      *v94 = v103;
      ++*(_DWORD *)(v26 + 20);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
      v8 = a3;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v99);
        else
          *(_DWORD *)v77 -= 2;
      }
      v4 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == *((_QWORD *)a3 + 1))
        goto LABEL_2;
    }
  }
  return result;
}

uint64_t WebCore::LocalWebLockRegistry::releaseLock(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::LocalWebLockRegistry::PerOriginRegistry *a4, WebCore::LocalWebLockRegistry::PerOriginRegistry *a5, uint64_t a6, WTF::StringImpl **a7)
{
  uint64_t result;
  const WTF::StringImpl *v11;
  uint64_t v12;
  void *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::LocalWebLockRegistry::PerOriginRegistry **v19;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v21;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v22;
  int v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;

  result = WebCore::LocalWebLockRegistry::existingRegistryForOrigin(&v28, a1, a2, a3);
  v12 = v28;
  if (v28)
  {
    result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v28 + 120), a7, v11);
    v15 = *(_QWORD *)(v12 + 120);
    v16 = *(_DWORD *)(v12 + 128);
    if (v15 + 24 * v16 == result)
    {
LABEL_22:
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry((WebCore::LocalWebLockRegistry::PerOriginRegistry *)v12, v13);
        return WTF::fastFree(v24, v25);
      }
      else
      {
        --*(_DWORD *)v12;
      }
      return result;
    }
    v17 = result;
    v18 = *(unsigned int *)(result + 20);
    if ((_DWORD)v18)
    {
      v19 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry ***)(result + 8);
      while (v19[1] != a4 || v19[2] != a5)
      {
        v19 += 10;
        if (!--v18)
          goto LABEL_20;
      }
      v21 = v19[9];
      v19[9] = 0;
      if (v21)
        (*(void (**)(WebCore::LocalWebLockRegistry::PerOriginRegistry *))(*(_QWORD *)v21 + 8))(v21);
      v22 = *v19;
      *v19 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v22, v13);
          WTF::fastFree(v26, v27);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo>::moveOverlapping((WebCore::LocalWebLockRegistry::PerOriginRegistry *)(v19 + 10), (WebCore::LocalWebLockRegistry::PerOriginRegistry *)(*(_QWORD *)(v17 + 8) + 80 * *(unsigned int *)(v17 + 20)), (unint64_t)v19);
      v23 = *(_DWORD *)(v17 + 20) - 1;
      *(_DWORD *)(v17 + 20) = v23;
      if (v23)
        goto LABEL_20;
      v15 = *(_QWORD *)(v12 + 120);
      v16 = *(_DWORD *)(v12 + 128);
    }
    if (v15 + 24 * v16 != v17)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::remove(v12 + 120, v17);
LABEL_20:
    result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v12 + 96), a7, v14);
    if (*(_QWORD *)(v12 + 96) + 40 * *(unsigned int *)(v12 + 104) != result)
      result = (uint64_t)WebCore::LocalWebLockRegistry::PerOriginRegistry::processLockRequestQueue(v12, a7, (const WTF::StringImpl *)(result + 8));
    goto LABEL_22;
  }
  return result;
}

uint64_t WebCore::LocalWebLockRegistry::abortLockRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl **a7, uint64_t *a8)
{
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;

  WebCore::LocalWebLockRegistry::existingRegistryForOrigin(&v35, a1, a2, a3);
  v13 = v35;
  if (v35)
  {
    v14 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v35 + 96), a7, v12);
    if (*(_QWORD *)(v13 + 96) + 40 * *(unsigned int *)(v13 + 104) == v14)
      goto LABEL_15;
    v15 = v14;
    v18 = *(_QWORD *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 16);
    v17 = (const WTF::StringImpl *)(v14 + 8);
    if (v18 != v16)
    {
      while (1)
      {
        v26 = *(_QWORD *)(v14 + 24) + 96 * v18;
        v28 = *(_QWORD *)(v26 + 8);
        v27 = *(_QWORD *)(v26 + 16);
        if (v28 == a4 && v27 == a5)
          break;
        v30 = *(unsigned int *)(v14 + 32);
        v18 += v30 + 1;
        do
          v18 -= v30;
        while (v18 >= v30);
        if (v16 == v18)
          goto LABEL_15;
      }
    }
    if (v18 == v16)
    {
LABEL_15:
      v31 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 0);
    }
    else
    {
      v19 = *(_QWORD *)(v14 + 24);
      v20 = v19 + 96 * v18;
      WTF::VectorTypeOperations<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::destruct((WebCore::LocalWebLockRegistry::PerOriginRegistry *)v20, (WTF::StringImpl *)(v20 + 96));
      v21 = *(_QWORD *)(v15 + 8);
      if (v21 <= v18)
      {
        WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::moveOverlapping((WebCore::LocalWebLockRegistry::PerOriginRegistry *)(v19 + 96 * v21), (WTF::StringImpl *)(v19 + 96 * v18), v19 + 96 * v21 + 96);
        v23 = *(_QWORD *)(v15 + 16);
        v22 = (*(_QWORD *)(v15 + 8) + 1) % (unint64_t)*(unsigned int *)(v15 + 32);
        *(_QWORD *)(v15 + 8) = v22;
      }
      else
      {
        WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::moveOverlapping((WebCore::LocalWebLockRegistry::PerOriginRegistry *)(v20 + 96), (WTF::StringImpl *)(v19 + 96 * *(_QWORD *)(v15 + 16)), v19 + 96 * v18);
        v22 = *(_QWORD *)(v15 + 8);
        v23 = (*(_QWORD *)(v15 + 16) + (unint64_t)*(unsigned int *)(v15 + 32) - 1) % *(unsigned int *)(v15 + 32);
        *(_QWORD *)(v15 + 16) = v23;
      }
      if (v22 == v23)
      {
        if (*(_QWORD *)(v13 + 96) + 40 * *(unsigned int *)(v13 + 104) != v15)
          WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::remove(v13 + 96, v15);
      }
      else
      {
        WebCore::LocalWebLockRegistry::PerOriginRegistry::processLockRequestQueue(v13, a7, v17);
      }
      v31 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, 1);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry((WebCore::LocalWebLockRegistry::PerOriginRegistry *)v13, v32);
      return WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  else
  {
    v24 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  return result;
}

unint64_t *WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque(unint64_t *a1, WTF::StringImpl *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v31;
  WTF *v32;
  void *v33;

  v3 = *a1;
  v4 = a1[1];
  v5 = (WTF *)a1[2];
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_36;
    v14 = 3 * v3;
    v15 = 96 * v4 - 32 * v14;
    v16 = (uint64_t *)((char *)v5 + 32 * v14 + 88);
    do
    {
      v17 = *v16;
      *v16 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v18 = (WTF::StringImpl *)*(v16 - 1);
      *(v16 - 1) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, a2);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = *(v16 - 2);
      *(v16 - 2) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      v20 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)*(v16 - 11);
      *(v16 - 11) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v20);
          WTF::fastFree(v21, v22);
        }
        else
        {
          --*(_DWORD *)v20;
        }
      }
      v16 += 12;
      v15 -= 96;
    }
    while (v15);
  }
  else
  {
    if (v4)
    {
      v6 = 96 * v4;
      v7 = (uint64_t *)((char *)v5 + 88);
      do
      {
        v8 = *v7;
        *v7 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        v9 = (WTF::StringImpl *)*(v7 - 1);
        *(v7 - 1) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, a2);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = *(v7 - 2);
        *(v7 - 2) = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v11 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)*(v7 - 11);
        *(v7 - 11) = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
          {
            WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v11);
            WTF::fastFree(v12, v13);
          }
          else
          {
            --*(_DWORD *)v11;
          }
        }
        v7 += 12;
        v6 -= 96;
      }
      while (v6);
      v5 = (WTF *)a1[2];
      v3 = *a1;
    }
    v23 = *((unsigned int *)a1 + 6);
    if (v3 != v23)
    {
      v25 = 3 * v3;
      v26 = 96 * v23 - 32 * v25;
      v27 = (uint64_t *)((char *)v5 + 32 * v25 + 88);
      do
      {
        v28 = *v27;
        *v27 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v29 = (WTF::StringImpl *)*(v27 - 1);
        *(v27 - 1) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, a2);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = *(v27 - 2);
        *(v27 - 2) = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        v31 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)*(v27 - 11);
        *(v27 - 11) = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 1)
          {
            WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v31);
            WTF::fastFree(v32, v33);
          }
          else
          {
            --*(_DWORD *)v31;
          }
        }
        v27 += 12;
        v26 -= 96;
      }
      while (v26);
    }
  }
  v5 = (WTF *)a1[2];
LABEL_36:
  if (v5)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

void WebCore::LocalWebLockRegistry::snapshot(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::UUID *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  void *v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;

  WebCore::LocalWebLockRegistry::existingRegistryForOrigin(&v58, a1, a2, a3);
  v5 = v58;
  if (v58)
  {
    v57 = a4;
    v62 = 0u;
    v63 = 0u;
    if (*(_DWORD *)(v58 + 108))
    {
      v6 = *(unsigned int *)(v58 + 104);
      if ((_DWORD)v6)
      {
        v7 = 40 * v6;
        v8 = *(_QWORD *)(v58 + 96);
        while (!*(_QWORD *)v8)
        {
          v8 += 40;
          v7 -= 40;
          if (!v7)
            goto LABEL_35;
        }
      }
      else
      {
        v8 = *(_QWORD *)(v58 + 96);
      }
      v11 = *(_QWORD *)(v58 + 96) + 40 * v6;
      if (v8 != v11)
      {
        v12 = 0;
        v13 = 0;
        v56 = v58;
        do
        {
          v15 = *(_QWORD *)(v8 + 8);
          v14 = *(_QWORD *)(v8 + 16);
          while (v14 != v15)
          {
            v16 = *(_QWORD *)(v8 + 24);
            v17 = *(WTF::StringImpl **)v8;
            if (*(_QWORD *)v8)
              *(_DWORD *)v17 += 2;
            v18 = v16 + 96 * v15;
            v59 = v17;
            v60 = *(_BYTE *)(v18 + 64);
            WTF::UUID::toString((WTF::UUID *)(v18 + 32));
            if (v13 == DWORD2(v63))
            {
              v20 = WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v63, v13 + 1, (unint64_t)&v59);
              v13 = HIDWORD(v63);
              v12 = v63;
              v21 = v63 + 24 * HIDWORD(v63);
              v22 = *(_QWORD *)v20;
              *(_QWORD *)v20 = 0;
              *(_QWORD *)v21 = v22;
              *(_BYTE *)(v21 + 8) = *(_BYTE *)(v20 + 8);
              v23 = (WTF::StringImpl **)(v21 + 16);
              v24 = (WTF::StringImpl **)(v20 + 16);
            }
            else
            {
              v25 = v12 + 24 * v13;
              v26 = v59;
              v59 = 0;
              *(_QWORD *)v25 = v26;
              *(_BYTE *)(v25 + 8) = v60;
              v23 = (WTF::StringImpl **)(v25 + 16);
              v24 = &v61;
            }
            v27 = *v24;
            *v24 = 0;
            *v23 = v27;
            HIDWORD(v63) = ++v13;
            v28 = v61;
            v61 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v19);
              else
                *(_DWORD *)v28 -= 2;
            }
            v29 = v59;
            v59 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v19);
              else
                *(_DWORD *)v29 -= 2;
            }
            v30 = *(unsigned int *)(v8 + 32);
            v15 += v30 + 1;
            do
              v15 -= v30;
            while (v15 >= v30);
          }
          v8 += 40;
          v5 = v56;
          if (v8 == v11)
            break;
          while (!*(_QWORD *)v8)
          {
            v8 += 40;
            if (v8 == v11)
              goto LABEL_35;
          }
        }
        while (v8 != v11);
      }
    }
LABEL_35:
    if (*(_DWORD *)(v5 + 132))
    {
      v31 = *(unsigned int *)(v5 + 128);
      if ((_DWORD)v31)
      {
        v32 = 24 * v31;
        v33 = *(_QWORD *)(v5 + 120);
        while (!*(_QWORD *)v33)
        {
          v33 += 24;
          v32 -= 24;
          if (!v32)
            goto LABEL_63;
        }
      }
      else
      {
        v33 = *(_QWORD *)(v5 + 120);
      }
      v34 = *(_QWORD *)(v5 + 120) + 24 * v31;
      if (v33 != v34)
      {
LABEL_43:
        v35 = *(unsigned int *)(v33 + 20);
        if ((_DWORD)v35)
        {
          v36 = 80 * v35;
          v37 = (WTF::UUID *)(*(_QWORD *)(v33 + 8) + 32);
          do
          {
            v38 = *(WTF::StringImpl **)v33;
            if (*(_QWORD *)v33)
              *(_DWORD *)v38 += 2;
            v59 = v38;
            v60 = *((_BYTE *)v37 + 32);
            WTF::UUID::toString(v37);
            v40 = HIDWORD(v62);
            if (HIDWORD(v62) == DWORD2(v62))
            {
              v41 = WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v62, HIDWORD(v62) + 1, (unint64_t)&v59);
              v40 = HIDWORD(v62);
              v42 = v62 + 24 * HIDWORD(v62);
              v43 = *(_QWORD *)v41;
              *(_QWORD *)v41 = 0;
              *(_QWORD *)v42 = v43;
              *(_BYTE *)(v42 + 8) = *(_BYTE *)(v41 + 8);
              v44 = (WTF::StringImpl **)(v42 + 16);
              v45 = (WTF::StringImpl **)(v41 + 16);
            }
            else
            {
              v46 = v62 + 24 * HIDWORD(v62);
              v47 = v59;
              v59 = 0;
              *(_QWORD *)v46 = v47;
              *(_BYTE *)(v46 + 8) = v60;
              v44 = (WTF::StringImpl **)(v46 + 16);
              v45 = &v61;
            }
            v48 = *v45;
            *v45 = 0;
            *v44 = v48;
            HIDWORD(v62) = v40 + 1;
            v49 = v61;
            v61 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, v39);
              else
                *(_DWORD *)v49 -= 2;
            }
            v50 = v59;
            v59 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v39);
              else
                *(_DWORD *)v50 -= 2;
            }
            v37 = (WTF::UUID *)((char *)v37 + 80);
            v36 -= 80;
          }
          while (v36);
        }
        while (1)
        {
          v33 += 24;
          if (v33 == v34)
            break;
          if (*(_QWORD *)v33)
          {
            if (v33 != v34)
              goto LABEL_43;
            break;
          }
        }
      }
    }
LABEL_63:
    v51 = *a4;
    *v57 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v51 + 16))(v51, &v62);
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot((WebCore::WebLockManagerSnapshot *)&v62, v52);
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry((WebCore::LocalWebLockRegistry::PerOriginRegistry *)v5, v53);
      WTF::fastFree(v54, v55);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v9 + 16))(v9, &v62);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot((WebCore::WebLockManagerSnapshot *)&v62, v10);
  }
}

uint64_t WebCore::LocalWebLockRegistry::clientIsGoingAway(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t result;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v6;
  _OWORD *v7;
  __int128 v8;
  const WTF::StringImpl *v9;
  void *v10;
  void *v11;
  _OWORD *v12;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = WebCore::LocalWebLockRegistry::existingRegistryForOrigin(&v13, a1, a2, a3);
  v6 = v13;
  if (v13)
  {
    v14 = *a4;
    *(_QWORD *)&v15 = *((_QWORD *)a4 + 2);
    v7 = (_OWORD *)WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v7 = off_1E3367C68;
    v8 = v15;
    v7[1] = v14;
    v7[2] = v8;
    v12 = v7;
    WebCore::LocalWebLockRegistry::PerOriginRegistry::clientsAreGoingAway((uint64_t)v6, &v12, v9);
    result = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v7 + 8))(v7);
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v6, v10);
      return WTF::fastFree(v6, v11);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::LocalWebLockRegistry::PerOriginRegistry::clientsAreGoingAway(uint64_t a1, _QWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v64;
  unint64_t v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v69;
  WTF *v70;
  void *v71;
  unsigned int v72;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v73;
  int v74;
  uint64_t v75;
  _DWORD **v76;
  WTF *v77;
  _DWORD *v78;
  WTF *v79;
  _DWORD *v80;
  WTF::StringImpl **v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  const WTF::StringImpl *v86;
  WTF::StringImpl **v87;
  WTF::StringImpl **v88;
  WTF::StringImpl **v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  WTF::StringImpl **result;
  WTF *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  WTF *v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  WTF::StringImpl **v106;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  WTF::StringImpl *v111[2];
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v4 = (uint64_t *)(a1 + 96);
  if (!*(_DWORD *)(a1 + 108))
    goto LABEL_64;
  v5 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v5)
  {
    v6 = 40 * v5;
    v7 = *(_QWORD *)(a1 + 96);
    while (!*(_QWORD *)v7)
    {
      v7 += 40;
      v6 -= 40;
      if (!v6)
        goto LABEL_64;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 96);
  }
  v8 = *(_QWORD *)(a1 + 96) + 40 * v5;
  if (v7 == v8)
    goto LABEL_64;
  do
  {
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 16);
    v11 = v10;
    if (v9 > v10)
      v11 = v10 + *(unsigned int *)(v7 + 32);
    v12 = v11 - v9;
    if (v11 != v9)
    {
      v13 = v11 - v9;
      while (1)
      {
        v14 = *(_QWORD *)(v7 + 8);
        if (v14 == *(_QWORD *)(v7 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x1955184D0);
        }
        v15 = 3 * v14;
        v16 = *(_QWORD *)(v7 + 24) + 32 * v15;
        v17 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v16;
        *(_QWORD *)v16 = 0;
        v107 = v17;
        v18 = *(_OWORD *)(v16 + 8);
        v19 = *(_OWORD *)(v16 + 24);
        v20 = *(_OWORD *)(v16 + 40);
        *(_OWORD *)((char *)v110 + 9) = *(_OWORD *)(v16 + 49);
        v109 = v19;
        v110[0] = v20;
        v108 = v18;
        v21 = *(_OWORD *)(v16 + 72);
        *(_QWORD *)(v16 + 72) = 0;
        *(_QWORD *)(v16 + 80) = 0;
        *(_OWORD *)v111 = v21;
        v22 = *(_QWORD *)(v16 + 88);
        *(_QWORD *)(v16 + 88) = 0;
        v112 = v22;
        WTF::VectorTypeOperations<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::destruct((WebCore::LocalWebLockRegistry::PerOriginRegistry *)(*(_QWORD *)(v7 + 24) + 32 * v15), (WTF::StringImpl *)(*(_QWORD *)(v7 + 24) + 32 * v15 + 96));
        v23 = *(_QWORD *)(v7 + 8);
        if (v23 == *(unsigned int *)(v7 + 32) - 1)
          v24 = 0;
        else
          v24 = v23 + 1;
        *(_QWORD *)(v7 + 8) = v24;
        if (((*(uint64_t (**)(_QWORD, WebCore::LocalWebLockRegistry::PerOriginRegistry **))(*(_QWORD *)*a2 + 16))(*a2, &v107) & 1) != 0)goto LABEL_31;
        v27 = *(_QWORD *)(v7 + 8);
        v26 = *(_QWORD *)(v7 + 16);
        if (v27)
          break;
        v28 = *(unsigned int *)(v7 + 32);
        if (v26)
        {
          if (v26 != v28 - 1)
            goto LABEL_27;
LABEL_26:
          WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::expandCapacity(v7 + 8);
          v26 = *(_QWORD *)(v7 + 16);
          goto LABEL_27;
        }
        if (!(_DWORD)v28)
          goto LABEL_26;
        v26 = 0;
LABEL_27:
        v29 = *(_QWORD *)(v7 + 24) + 96 * v26;
        v30 = v107;
        v107 = 0;
        *(_QWORD *)v29 = v30;
        v31 = v108;
        v32 = v109;
        v33 = v110[0];
        *(_OWORD *)(v29 + 49) = *(_OWORD *)((char *)v110 + 9);
        *(_OWORD *)(v29 + 40) = v33;
        *(_OWORD *)(v29 + 24) = v32;
        *(_OWORD *)(v29 + 8) = v31;
        v34 = v111[0];
        v111[0] = 0;
        *(_QWORD *)(v29 + 72) = v34;
        v35 = v111[1];
        v111[1] = 0;
        *(_QWORD *)(v29 + 80) = v35;
        v36 = v112;
        v112 = 0;
        *(_QWORD *)(v29 + 88) = v36;
        v37 = *(_QWORD *)(v7 + 16);
        if (v37 == *(unsigned int *)(v7 + 32) - 1)
          v38 = 0;
        else
          v38 = v37 + 1;
        *(_QWORD *)(v7 + 16) = v38;
LABEL_31:
        v39 = v112;
        v112 = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        v40 = v111[1];
        v111[1] = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v25);
          else
            *(_DWORD *)v40 -= 2;
        }
        v41 = v111[0];
        v111[0] = 0;
        if (v41)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
        v42 = v107;
        v107 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 1)
          {
            WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v42, v25);
            WTF::fastFree(v43, v44);
          }
          else
          {
            --*(_DWORD *)v42;
          }
        }
        if (!--v13)
        {
          v9 = *(_QWORD *)(v7 + 8);
          v10 = *(_QWORD *)(v7 + 16);
          goto LABEL_45;
        }
      }
      if (v26 + 1 != v27)
        goto LABEL_27;
      goto LABEL_26;
    }
LABEL_45:
    v45 = v10;
    if (v9 > v10)
      v45 = v10 + *(unsigned int *)(v7 + 32);
    if (v45 != v9 + v12)
    {
      if (v9 != v10)
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v106, (WTF::StringImpl **)v7, a3, (uint64_t)&v107);
        goto LABEL_56;
      }
      v46 = HIDWORD(v105);
      if (HIDWORD(v105) == (_DWORD)v105)
      {
        v47 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, HIDWORD(v105) + 1, v7);
        v46 = HIDWORD(v105);
        v48 = v104;
        v49 = *v47;
        if (!*v47)
          goto LABEL_55;
      }
      else
      {
        v48 = v104;
        v49 = *(WTF::StringImpl **)v7;
        if (!*(_QWORD *)v7)
        {
LABEL_55:
          *((_QWORD *)v48 + v46) = v49;
          HIDWORD(v105) = v46 + 1;
          goto LABEL_56;
        }
      }
      *(_DWORD *)v49 += 2;
      goto LABEL_55;
    }
    do
    {
LABEL_56:
      v7 += 40;
      if (v7 == v8)
        goto LABEL_59;
    }
    while (!*(_QWORD *)v7);
  }
  while (v7 != v8);
LABEL_59:
  if (HIDWORD(v105))
  {
    v50 = (WTF::StringImpl **)v104;
    v51 = 8 * HIDWORD(v105);
    do
    {
      v52 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v4, v50, a3);
      if (*(_QWORD *)(a1 + 96) + 40 * *(unsigned int *)(a1 + 104) != v52)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::remove((uint64_t)v4, v52);
      ++v50;
      v51 -= 8;
    }
    while (v51);
  }
LABEL_64:
  v102 = 0;
  v103 = 0;
  v54 = (uint64_t *)(a1 + 120);
  v53 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(a1 + 132))
  {
    v55 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v55)
    {
      v56 = 24 * v55;
      v57 = *(_QWORD *)(a1 + 120);
      while (!*(_QWORD *)v57)
      {
        v57 += 24;
        v56 -= 24;
        if (!v56)
          goto LABEL_112;
      }
    }
    else
    {
      v57 = *(_QWORD *)(a1 + 120);
    }
    v58 = v53 + 24 * v55;
    if (v57 != v58)
    {
      v100 = v53 + 24 * v55;
LABEL_73:
      v59 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)(v57 + 8);
      v60 = *(_DWORD *)(v57 + 20);
      v61 = (unint64_t)v59 + 80 * v60;
      if (v60)
      {
        v62 = 0;
        v63 = *(_QWORD *)(v57 + 8);
        v64 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v59 + 80 * v60);
        v65 = (unint64_t)v64;
        do
        {
          if ((*(unsigned int (**)(_QWORD, WebCore::LocalWebLockRegistry::PerOriginRegistry *))(*(_QWORD *)*a2 + 16))(*a2, v59))
          {
            v67 = v59;
            if (v65 != *(_QWORD *)(v57 + 8) + 80 * *(unsigned int *)(v57 + 20))
            {
              if (v59 == v64)
              {
                v67 = (_QWORD *)v65;
              }
              else
              {
                WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo>::moveOverlapping(v64, v59, v65);
                v67 = (_QWORD *)(v65 + v63 - (_QWORD)v64);
              }
            }
            v68 = *((_QWORD *)v59 + 9);
            *((_QWORD *)v59 + 9) = 0;
            if (v68)
              (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
            v69 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v59;
            *(_QWORD *)v59 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 1)
              {
                WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v69, v66);
                WTF::fastFree(v70, v71);
              }
              else
              {
                --*(_DWORD *)v69;
              }
            }
            v64 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v59 + 80);
            ++v62;
            v65 = (unint64_t)v67;
          }
          else
          {
            v67 = (_QWORD *)v65;
          }
          v59 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v59 + 80);
          v63 += 80;
        }
        while ((unint64_t)v59 < v61);
        v59 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)(v57 + 8);
        v72 = *(_DWORD *)(v57 + 20);
        v60 = v72;
        v61 = (unint64_t)v67;
        v58 = v100;
        v54 = (uint64_t *)(a1 + 120);
      }
      else
      {
        v72 = 0;
        v62 = 0;
        v64 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)(v57 + 8);
      }
      v73 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v59 + 80 * v72);
      if (v64 != v73)
      {
        WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo>::moveOverlapping(v64, v73, v61);
        v60 = *(_DWORD *)(v57 + 20);
      }
      v74 = v60 - v62;
      *(_DWORD *)(v57 + 20) = v74;
      if (v62)
      {
        if (!v74)
        {
          v75 = HIDWORD(v103);
          if (HIDWORD(v103) == (_DWORD)v103)
          {
            v76 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v102, HIDWORD(v103) + 1, v57);
            v75 = HIDWORD(v103);
            v77 = v102;
            v78 = *v76;
            if (*v76)
              *v78 += 2;
            *((_QWORD *)v77 + v75) = v78;
          }
          else
          {
            v79 = v102;
            v80 = *(_DWORD **)v57;
            if (*(_QWORD *)v57)
              *v80 += 2;
            *((_QWORD *)v79 + v75) = v80;
          }
          HIDWORD(v103) = v75 + 1;
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v106, (WTF::StringImpl **)v57, a3, (uint64_t)&v107);
      }
      while (1)
      {
        v57 += 24;
        if (v57 == v58)
          break;
        if (*(_QWORD *)v57)
        {
          if (v57 != v58)
            goto LABEL_73;
          break;
        }
      }
      if (HIDWORD(v103))
      {
        v81 = (WTF::StringImpl **)v102;
        v82 = 8 * HIDWORD(v103);
        do
        {
          v83 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v54, v81, a3);
          if (*(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 128) != v83)
            WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::remove((uint64_t)v54, v83);
          ++v81;
          v82 -= 8;
        }
        while (v82);
      }
    }
  }
LABEL_112:
  v84 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v106);
  v87 = v84;
  v88 = (WTF::StringImpl **)v85;
  if (v106)
    v89 = &v106[*((unsigned int *)v106 - 1)];
  else
    v89 = 0;
  if (v89 != v84)
  {
    do
    {
      v90 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v4, v87, v86);
      if (*(_QWORD *)(a1 + 96) + 40 * *(unsigned int *)(a1 + 104) != v90)
        WebCore::LocalWebLockRegistry::PerOriginRegistry::processLockRequestQueue(a1, v87, (const WTF::StringImpl *)(v90 + 8));
      while (++v87 != v88)
      {
        if ((unint64_t)*v87 + 1 > 1)
          goto LABEL_121;
      }
      v87 = v88;
LABEL_121:
      ;
    }
    while (v87 != v89);
  }
  if (HIDWORD(v103))
  {
    v94 = v102;
    v95 = 8 * HIDWORD(v103);
    do
    {
      v96 = *(WTF::StringImpl **)v94;
      *(_QWORD *)v94 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, v85);
        else
          *(_DWORD *)v96 -= 2;
      }
      v94 = (WTF *)((char *)v94 + 8);
      v95 -= 8;
    }
    while (v95);
  }
  v91 = v102;
  if (v102)
  {
    v102 = 0;
    LODWORD(v103) = 0;
    WTF::fastFree(v91, v85);
  }
  if (HIDWORD(v105))
  {
    v97 = v104;
    v98 = 8 * HIDWORD(v105);
    do
    {
      v99 = *(WTF::StringImpl **)v97;
      *(_QWORD *)v97 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
          WTF::StringImpl::destroy(v99, v85);
        else
          *(_DWORD *)v99 -= 2;
      }
      v97 = (WTF *)((char *)v97 + 8);
      v98 -= 8;
    }
    while (v98);
  }
  v92 = v104;
  if (v104)
  {
    v104 = 0;
    LODWORD(v105) = 0;
    WTF::fastFree(v92, v85);
  }
  result = v106;
  if (v106)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v106, v85);
  return result;
}

uint64_t WebCore::LocalWebLockRegistry::clientsAreGoingAway(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  int v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v36;
  char *v37;
  const WTF::StringImpl *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  char *v50;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;

  v2 = result;
  v60 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(result + 24);
  v45 = a2;
  if (!v3)
  {
    v12 = 0;
    LODWORD(v4) = 0;
    goto LABEL_33;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 80 * v4;
  if (!*(_DWORD *)(v3 - 12))
  {
    v12 = v3 + 80 * v4;
LABEL_33:
    v5 = v3 + 80 * v4;
    if (v3)
      goto LABEL_38;
    goto LABEL_36;
  }
  if (!(_DWORD)v4)
  {
    v12 = *(_QWORD *)(result + 24);
    goto LABEL_38;
  }
  v46 = result;
  v6 = 80 * v4;
  do
  {
    v59 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v52 = 0;
    v53 = 0;
    v51 = 0;
    v55 = 0;
    v54 = 0;
    if (*(_QWORD *)v3)
    {
LABEL_8:
      v7 = 0;
      v8 = 0;
LABEL_9:
      result = ((uint64_t (*)(char **, uint64_t *))off_1E3367898[v8])(&v50, &v56);
      goto LABEL_10;
    }
    if ((WebCore::LocalWebLockRegistry::PerOriginRegistry **)v3 == &v51)
    {
      v8 = 0;
      v7 = 1;
      goto LABEL_9;
    }
    if (*(_DWORD *)(v3 + 32))
      goto LABEL_8;
    v50 = &v49;
    result = std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>((uint64_t)&v50, v3 + 8, (uint64_t)&v52);
    v8 = v59;
    if ((_DWORD)result)
    {
      v10 = *(unsigned int *)(v3 + 64);
      v11 = v59 == v10;
      if (v59 == 0xFFFFFFFFLL)
        v11 = 0;
      if (v10 == 0xFFFFFFFFLL)
        v7 = v59 == 0xFFFFFFFFLL;
      else
        v7 = v11;
      if ((_DWORD)v10 != -1 && v11)
      {
        v50 = &v49;
        result = ((uint64_t (*)(char **, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v59])(&v50, v3 + 40, &v56);
        v7 = result;
        v8 = v59;
      }
    }
    else
    {
      v7 = 0;
    }
    if (v8 != 0xFFFFFFFFLL)
      goto LABEL_9;
LABEL_10:
    v59 = -1;
    if (v55 != -1)
      result = ((uint64_t (*)(char **, uint64_t *))off_1E3367898[v55])(&v50, &v52);
    v9 = *(_QWORD *)v3 == -1 || v7;
    if (v9 != 1)
      goto LABEL_37;
    v3 += 80;
    v6 -= 80;
  }
  while (v6);
  v3 = v5;
LABEL_37:
  v12 = v3;
  v2 = v46;
  v3 = *(_QWORD *)(v46 + 24);
  if (!v3)
  {
LABEL_36:
    v13 = 0;
LABEL_41:
    v15 = 0;
    goto LABEL_42;
  }
LABEL_38:
  v13 = v3 + 80 * *(unsigned int *)(v3 - 4);
  v14 = *(unsigned int *)(v3 - 12);
  if (!(_DWORD)v14)
    goto LABEL_41;
  if (v14 >= 0x38E38E4)
  {
    __break(0xC471u);
    return result;
  }
  result = WTF::fastMalloc((WTF *)(72 * v14));
  v15 = (WTF *)result;
LABEL_42:
  if (v13 == v12)
    goto LABEL_97;
  v47 = v2;
  v16 = 0;
  v17 = 1;
  while (2)
  {
    v48 = v17;
    v51 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v12;
    LOBYTE(v52) = 0;
    v55 = -1;
    v18 = *(unsigned int *)(v12 + 32);
    if ((_DWORD)v18 != -1)
    {
      result = ((uint64_t (*)(char **, uint64_t *, uint64_t))off_1E33678A8[v18])(&v50, &v52, v12 + 8);
      v55 = v18;
    }
    LOBYTE(v56) = 0;
    v59 = -1;
    v19 = *(unsigned int *)(v12 + 64);
    if ((_DWORD)v19 != -1)
    {
      result = ((uint64_t (*)(char **, uint64_t *, uint64_t))off_1E33678A8[v19])(&v50, &v56, v12 + 40);
      v59 = v19;
    }
    v20 = (char *)v15 + 72 * v16;
    *(_QWORD *)v20 = v51;
    v20[8] = 0;
    v21 = v20 + 8;
    *((_DWORD *)v20 + 8) = -1;
    v22 = (int *)(v20 + 32);
    v23 = v55;
    if (v55 != -1)
    {
      result = ((uint64_t (*)(char **, char *, uint64_t *))off_1E33678B8[v55])(&v50, v21, &v52);
      *v22 = v23;
    }
    v24 = (char *)v15 + 72 * v16;
    *((_DWORD *)v24 + 16) = -1;
    v25 = (unsigned int *)(v24 + 64);
    *((_BYTE *)v25 - 24) = 0;
    a2 = v25 - 6;
    v26 = v59;
    if (v59 != -1)
    {
      result = ((uint64_t (*)(char **, unsigned int *, uint64_t *))off_1E33678B8[v59])(&v50, a2, &v56);
      *v25 = v26;
      if (v59 != -1)
        result = ((uint64_t (*)(char **, uint64_t *))off_1E3367898[v59])(&v50, &v56);
    }
    v59 = -1;
    if (v55 != -1)
      result = ((uint64_t (*)(char **, uint64_t *))off_1E3367898[v55])(&v50, &v52);
    v27 = v12 + 80;
    v12 = v5;
    if (v27 != v5)
    {
      v12 = v27;
      while (1)
      {
        v59 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v52 = 0;
        v53 = 0;
        v51 = 0;
        v55 = 0;
        v54 = 0;
        if (!*(_QWORD *)v12)
        {
          if ((WebCore::LocalWebLockRegistry::PerOriginRegistry **)v12 == &v51)
          {
            v29 = 0;
            v28 = 1;
            goto LABEL_61;
          }
          if (!*(_DWORD *)(v12 + 32))
          {
            v50 = &v49;
            result = std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>((uint64_t)&v50, v12 + 8, (uint64_t)&v52);
            v29 = v59;
            if ((_DWORD)result)
            {
              v31 = *(unsigned int *)(v12 + 64);
              v32 = v59 == v31;
              if (v59 == 0xFFFFFFFFLL)
                v32 = 0;
              if (v31 == 0xFFFFFFFFLL)
                v28 = v59 == 0xFFFFFFFFLL;
              else
                v28 = v32;
              if ((_DWORD)v31 != -1 && v32)
              {
                v50 = &v49;
                result = ((uint64_t (*)(char **, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v59])(&v50, v12 + 40, &v56);
                v28 = result;
                v29 = v59;
              }
            }
            else
            {
              v28 = 0;
            }
            if (v29 == 0xFFFFFFFFLL)
              goto LABEL_62;
            goto LABEL_61;
          }
        }
        v28 = 0;
        v29 = 0;
LABEL_61:
        result = ((uint64_t (*)(char **, uint64_t *))off_1E3367898[v29])(&v50, &v56);
LABEL_62:
        v59 = -1;
        if (v55 != -1)
          result = ((uint64_t (*)(char **, uint64_t *))off_1E3367898[v55])(&v50, &v52);
        v30 = *(_QWORD *)v12 == -1 || v28;
        if (v30 != 1)
          break;
        v12 += 80;
        if (v12 == v5)
        {
          v12 = v5;
          break;
        }
      }
    }
    ++v16;
    v17 = v48 + 1;
    if (v12 != v13)
      continue;
    break;
  }
  if (v16)
  {
    v33 = (uint64_t *)v15;
    do
    {
      v35 = *v33;
      v34 = (uint64_t)(v33 + 1);
      result = WebCore::LocalWebLockRegistry::existingRegistryForOrigin(&v51, v47, v35, v34);
      v36 = v51;
      if (v51)
      {
        v37 = (char *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v37 = off_1E3367C90;
        *((_QWORD *)v37 + 1) = v45;
        v50 = v37;
        WebCore::LocalWebLockRegistry::PerOriginRegistry::clientsAreGoingAway((uint64_t)v36, &v50, v38);
        result = (*(uint64_t (**)(char *))(*(_QWORD *)v37 + 8))(v37);
        if (*(_DWORD *)v36 == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v36, a2);
          result = WTF::fastFree(v39, v40);
        }
        else
        {
          --*(_DWORD *)v36;
        }
      }
      v33 = (uint64_t *)(v34 + 64);
    }
    while (v33 != (uint64_t *)((char *)v15 + 72 * v16));
    v41 = 72 * v48;
    v42 = (_DWORD *)((char *)v15 + 64);
    do
    {
      v43 = *v42;
      if ((_DWORD)v43 != -1)
        result = ((uint64_t (*)(WebCore::LocalWebLockRegistry::PerOriginRegistry **, _DWORD *))off_1E3367898[v43])(&v51, v42 - 6);
      *v42 = -1;
      v44 = *(v42 - 8);
      if ((_DWORD)v44 != -1)
        result = ((uint64_t (*)(WebCore::LocalWebLockRegistry::PerOriginRegistry **, _DWORD *))off_1E3367898[v44])(&v51, v42 - 14);
      *(v42 - 8) = -1;
      v42 += 18;
      v41 -= 72;
    }
    while (v41);
  }
LABEL_97:
  if (v15)
    return WTF::fastFree(v15, a2);
  return result;
}

void WebCore::SimpleReadableStreamSource::~SimpleReadableStreamSource(WebCore::SimpleReadableStreamSource *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  _DWORD *v8;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = *(_DWORD **)v7;
    *(_QWORD *)v7 = 0;
    if (v8)
    {
      if (v8[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[4];
    }
    WTF::fastFree(v7, a2);
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  _DWORD *v8;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = *(_DWORD **)v7;
    *(_QWORD *)v7 = 0;
    if (v8)
    {
      if (v8[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[4];
    }
    WTF::fastFree(v7, a2);
  }
  WTF::fastFree(this, a2);
}

void WebCore::ReadableStreamToSharedBufferSink::~ReadableStreamToSharedBufferSink(WebCore::ReadableStreamToSharedBufferSink *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::ReadableStreamToSharedBufferSink::~ReadableStreamToSharedBufferSink(WebCore::ReadableStreamToSharedBufferSink *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebLockManager::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::WebLockManager::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalReadableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalReadableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF3RefIN7WebCore22InternalReadableStreamENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEESH_EENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF3RefIN7WebCore22InternalReadableStreamENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEESH_EENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CreateInternalTransformStreamResult::~CreateInternalTransformStreamResult(WebCore::CreateInternalTransformStreamResult *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;

  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (_DWORD *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v5)
      {
        if (v5[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
        else
          --v5[4];
      }
      v6 = *((_QWORD *)v3 + 1);
      if (v6)
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = (unsigned int *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v3 + 1) = 0;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v10 = (_DWORD *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v10)
      {
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[4];
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore35CreateInternalTransformStreamResultENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::CreateInternalTransformStreamResult *this)
{
  WebCore::CreateInternalTransformStreamResult::~CreateInternalTransformStreamResult(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore35CreateInternalTransformStreamResultENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalWritableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalWritableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::WebLockManager::MainThreadBridge,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v2 = *(unsigned int **)(result + 8);
  if (v2)
  {
    v3 = v2[28];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, unsigned int *))off_1E3367898[v3])(&v5, v2 + 22);
    v2[28] = -1;
    v4 = v2[20];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))off_1E3367898[v4])(&v6, v2 + 14);
    v2[20] = -1;
    return WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::AbortSignal **v4;
  WebCore::AbortSignal *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::AbortSignal **)(a1 + 56);
    do
    {
      if (*(v4 - 6) != (WebCore::AbortSignal *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*((_DWORD *)v5 + 6) == 1)
          {
            WebCore::AbortSignal::~AbortSignal(v5, a2);
            bmalloc::api::isoDeallocate(v8, v9);
          }
          else
          {
            --*((_DWORD *)v5 + 6);
          }
        }
        v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
        {
          if (v6[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
          else
            --v6[4];
        }
        v7 = *(v4 - 3);
        *(v4 - 3) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      v4 += 8;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot(WebCore::WebLockManagerSnapshot *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*((_QWORD *)this + 2) + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 3);
  if ((_DWORD)v9)
  {
    v10 = 24 * v9;
    v11 = (WTF::StringImpl **)(*(_QWORD *)this + 16);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(v11 - 2);
      *(v11 - 2) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  v14 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v14, a2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  *a1 = &off_1E33678D8;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[7];
  a1[7] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3367880;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  *(_QWORD *)this = &off_1E33678D8;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3367880;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if ((_MergedGlobals_148 & 1) != 0)
  {
    v3 = qword_1ECE820F0;
    if (qword_1ECE820F0)
      goto LABEL_6;
  }
  else
  {
    qword_1ECE820F0 = 0;
    _MergedGlobals_148 = 1;
  }
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E3367770;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  v4 = (_DWORD *)qword_1ECE820F0;
  qword_1ECE820F0 = v3;
  if (v4)
  {
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v3 = qword_1ECE820F0;
    }
    else
    {
      --v4[2];
    }
  }
LABEL_6:
  v18 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_OWORD *)(v2 + 32);
  v25[0] = *(_OWORD *)(v2 + 16);
  v25[1] = v7;
  v8 = *(unsigned __int8 *)(a1 + 32);
  v9 = *(_WORD *)(a1 + 33);
  v23 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)&v24 = *(_QWORD *)(v2 + 32);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v11 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v11 = &off_1E3367900;
  v12 = v24;
  *(_OWORD *)(v11 + 16) = v23;
  *(_OWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 48) = v10;
  v20 = v11;
  v21 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)&v22 = *(_QWORD *)(v2 + 32);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v14 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v14 = &off_1E3367950;
  v15 = v22;
  *(_OWORD *)(v14 + 16) = v21;
  *(_OWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 48) = v13;
  v19 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, __int16, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 16))(v3, v18, v2 + 56, v5, v6, v25, a1 + 24, v8, v9, &v20, &v19);
  v16 = v19;
  v19 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3367900;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3367900;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 16);
  v14[1] = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E3367928;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = a2;
  v12 = v5;
  v13 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v14);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v7[4]) & 1) != 0)
      {
        v9 = 1;
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 336))(v8, &v12);
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
LABEL_11:
  v10 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v10 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v9)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v9)
LABEL_14:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v8);
LABEL_15:
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge11requestLockENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringERKNS3_7OptionsEONS_8FunctionIFvbEEEONSI_IFvvEEEEN3__0clEvENUlbE_clEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3367928;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge11requestLockENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringERKNS3_7OptionsEONS_8FunctionIFvbEEEONSI_IFvvEEEEN3__0clEvENUlbE_clEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367928;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge11requestLockENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringERKNS3_7OptionsEONS_8FunctionIFvbEEEONSI_IFvvEEEEN3__0clEvENUlbE_clEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESV_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3367950;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3367950;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::requestLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::WebLockManager::Options const&,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  __int128 v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  _QWORD *v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_OWORD *)(a1 + 32);
  v12[0] = *(_OWORD *)(a1 + 16);
  v12[1] = v1;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E3367978;
  v3[1] = v2;
  v10 = v3;
  v11 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v12);
  if (v5)
  {
    v6 = v5[4];
    if (v6)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v5[4]) & 1) != 0)
      {
        v7 = 1;
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 336))(v6, &v10);
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
LABEL_11:
  v8 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v8 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v7)
LABEL_14:
    (*(void (**)(_QWORD *, uint64_t))(*v10 + 16))(v10, v6);
LABEL_15:
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge11requestLockENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringERKNS3_7OptionsEONS_8FunctionIFvbEEEONSI_IFvvEEEEN3__0clEvENUlvE_clEvEUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3367978;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge11requestLockENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringERKNS3_7OptionsEONS_8FunctionIFvbEEEONSI_IFvvEEEEN3__0clEvENUlvE_clEvEUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367978;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge11requestLockENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringERKNS3_7OptionsEONS_8FunctionIFvbEEEONSI_IFvvEEEEN3__0clEvENUlvE_clEvEUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESV_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::releaseLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E33679A0;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3367880;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::releaseLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E33679A0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3367880;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::releaseLock(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((_MergedGlobals_148 & 1) != 0)
  {
    v3 = qword_1ECE820F0;
    if (qword_1ECE820F0)
      goto LABEL_6;
  }
  else
  {
    qword_1ECE820F0 = 0;
    _MergedGlobals_148 = 1;
  }
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E3367770;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  v4 = (_DWORD *)qword_1ECE820F0;
  qword_1ECE820F0 = v3;
  if (v4)
  {
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v3 = qword_1ECE820F0;
    }
    else
    {
      --v4[2];
    }
  }
LABEL_6:
  v5 = *(_QWORD *)(v2 + 48);
  v6 = a1[3];
  v7 = a1[4];
  v8 = *(_OWORD *)(v2 + 32);
  v10[0] = *(_OWORD *)(v2 + 16);
  v10[1] = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, _QWORD *))(*(_QWORD *)v3 + 24))(v3, v5, v2 + 56, v6, v7, v10, a1 + 5);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::abortLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E33679C8;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3367880;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::abortLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33679C8;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3367880;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::abortLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((_MergedGlobals_148 & 1) != 0)
  {
    v3 = qword_1ECE820F0;
    if (qword_1ECE820F0)
      goto LABEL_6;
  }
  else
  {
    qword_1ECE820F0 = 0;
    _MergedGlobals_148 = 1;
  }
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E3367770;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  v4 = (_DWORD *)qword_1ECE820F0;
  qword_1ECE820F0 = v3;
  if (v4)
  {
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v3 = qword_1ECE820F0;
    }
    else
    {
      --v4[2];
    }
  }
LABEL_6:
  v5 = *(_QWORD *)(v2 + 48);
  v6 = v2 + 56;
  v7 = a1[3];
  v8 = a1[4];
  v9 = *(_OWORD *)(v2 + 32);
  v17[0] = *(_OWORD *)(v2 + 16);
  v17[1] = v9;
  v15 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)&v16 = *(_QWORD *)(v2 + 32);
  v10 = a1[6];
  a1[6] = 0;
  v11 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v11 = &off_1E33679F0;
  v12 = v16;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 48) = v10;
  v14 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, _QWORD *, uint64_t *))(*(_QWORD *)v3 + 32))(v3, v5, v6, v7, v8, v17, a1 + 5, &v14);
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::abortLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33679F0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::abortLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33679F0;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::abortLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 16);
  v14[1] = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E3367A18;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = a2;
  v12 = v5;
  v13 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v14);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v7[4]) & 1) != 0)
      {
        v9 = 1;
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 336))(v8, &v12);
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
LABEL_11:
  v10 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v10 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v9)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v9)
LABEL_14:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v8);
LABEL_15:
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge16abortLockRequestENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlbE_clEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3367A18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge16abortLockRequestENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlbE_clEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367A18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge16abortLockRequestENS2_16ProcessQualifiedINS_23ObjectIdentifierGenericINS2_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlbE_clEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESP_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::query(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E3367A40;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3367880;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::query(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E3367A40;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3367880;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::query(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if ((_MergedGlobals_148 & 1) != 0)
  {
    v3 = qword_1ECE820F0;
    if (qword_1ECE820F0)
      goto LABEL_6;
  }
  else
  {
    qword_1ECE820F0 = 0;
    _MergedGlobals_148 = 1;
  }
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E3367770;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  v4 = (_DWORD *)qword_1ECE820F0;
  qword_1ECE820F0 = v3;
  if (v4)
  {
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v3 = qword_1ECE820F0;
    }
    else
    {
      --v4[2];
    }
  }
LABEL_6:
  v5 = *(_QWORD *)(v2 + 48);
  v6 = v2 + 56;
  v12 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)&v13 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v8 = &off_1E3367A68;
  v9 = v13;
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 48) = v7;
  v11 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 40))(v3, v5, v6, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::query(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&)::$_0::operator()(void)::{lambda(WebCore::WebLockManagerSnapshot &)#1},void,WebCore::WebLockManagerSnapshot &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3367A68;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::query(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&)::$_0::operator()(void)::{lambda(WebCore::WebLockManagerSnapshot &)#1},void,WebCore::WebLockManagerSnapshot &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3367A68;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::query(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&)::$_0::operator()(void)::{lambda(WebCore::WebLockManagerSnapshot &)#1},void,WebCore::WebLockManagerSnapshot &>::call(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 32);
  v24[0] = *(_OWORD *)(a1 + 16);
  v24[1] = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v18 = 0;
  v19 = 0;
  v17 = v4;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore22WebLockManagerSnapshot4InfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_((uint64_t)&v18, a2);
  v20 = 0;
  v21 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore22WebLockManagerSnapshot4InfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_((uint64_t)&v20, a2 + 2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v5 = off_1E3367A90;
  v5[1] = v17;
  v6 = v18;
  v18 = 0;
  v5[2] = v6;
  v7 = v19;
  v19 = 0;
  v5[3] = v7;
  v8 = v20;
  v20 = 0;
  v5[4] = v8;
  v9 = v21;
  v21 = 0;
  v5[5] = v9;
  v22 = v5;
  v23 = 0;
  LODWORD(v8) = __ldaxr(WebCore::allScriptExecutionContextsMapLock);
  if ((_DWORD)v8)
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v24);
  if (v10)
  {
    v12 = v10[4];
    if (v12)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v10[4]) & 1) != 0)
      {
        v13 = 1;
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 336))(v12, &v22);
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
LABEL_11:
  v14 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v14 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v13)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v13)
LABEL_14:
    (*(void (**)(_QWORD *, uint64_t))(*v22 + 16))(v22, v12);
LABEL_15:
  v15 = v22;
  v22 = 0;
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot((WebCore::WebLockManagerSnapshot *)&v18, v11);
  return 0;
}

uint64_t _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore22WebLockManagerSnapshot4InfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v5 = 24 * v2;
      result = WTF::fastMalloc((WTF *)(24 * v2));
      *(_DWORD *)(v4 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v4 = result;
      v6 = *((_DWORD *)a2 + 3);
      if (v6)
      {
        v7 = *a2;
        v8 = *a2 + 24 * v6;
        do
        {
          WTF::String::isolatedCopy();
          v13 = *(_BYTE *)(v7 + 8);
          WTF::String::isolatedCopy();
          v9 = *(_DWORD *)(v4 + 12);
          v10 = v9 + 1;
          v11 = *(_QWORD *)v4 + 24 * v9;
          *(_QWORD *)v11 = v12;
          *(_BYTE *)(v11 + 8) = v13;
          *(_QWORD *)(v11 + 16) = v14;
          *(_DWORD *)(v4 + 12) = v10;
          v14 = 0;
          result = 0;
          v12 = 0;
          v7 += 24;
        }
        while (v7 != v8);
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge5queryEONS_17CompletionHandlerIFvONS2_22WebLockManagerSnapshotEEEEEN3__0clEvENUlS7_E_clES7_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E3367A90;
  WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot((WebCore::WebLockManagerSnapshot *)(a1 + 2), a2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge5queryEONS_17CompletionHandlerIFvONS2_22WebLockManagerSnapshotEEEEEN3__0clEvENUlS7_E_clES7_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;

  *a1 = off_1E3367A90;
  WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot((WebCore::WebLockManagerSnapshot *)(a1 + 2), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore14WebLockManager16MainThreadBridge5queryEONS_17CompletionHandlerIFvONS2_22WebLockManagerSnapshotEEEEEN3__0clEvENUlS7_E_clES7_EUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESH_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::clientIsGoingAway(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  *a1 = &off_1E3367AB8;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E3367880;
      v6[1] = v2;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::clientIsGoingAway(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *(_QWORD *)this = &off_1E3367AB8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3367880;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::MainThreadBridge::clientIsGoingAway(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if ((_MergedGlobals_148 & 1) != 0)
  {
    v2 = qword_1ECE820F0;
    if (qword_1ECE820F0)
      goto LABEL_6;
  }
  else
  {
    qword_1ECE820F0 = 0;
    _MergedGlobals_148 = 1;
  }
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3367770;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v3 = (_DWORD *)qword_1ECE820F0;
  qword_1ECE820F0 = v2;
  if (v3)
  {
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v2 = qword_1ECE820F0;
    }
    else
    {
      --v3[2];
    }
  }
LABEL_6:
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 32);
  v7[0] = *(_OWORD *)(v1 + 16);
  v7[1] = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v2 + 48))(v2, v4, v1 + 56, v7);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  _OWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  _QWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (unint64_t *)(v4 + 24 * v9);
      v12 = v11[1];
      if (v12 != -1)
      {
        v13 = *v11;
        if (*(_OWORD *)v11 == 0)
        {
          v16 = v4 + 24 * v9;
          v17 = *(_DWORD **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            if (v17[4] == 1)
              goto LABEL_27;
            --v17[4];
          }
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v18 = 0;
          v19 = (v13 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v13 - 1640531527) << 16) ^ ((unsigned __int16)v13 - 1640531527);
          v20 = (v13 >> 37) & 0x7FFF800 ^ ((v19 + WORD2(v13) + (v19 >> 11)) << 16) ^ (v19 + WORD2(v13) + (v19 >> 11));
          v21 = (v12 >> 5) & 0x7FFF800 ^ ((v20 + (v20 >> 11) + (unsigned __int16)v12) << 16) ^ (v20 + (v20 >> 11) + (unsigned __int16)v12);
          v22 = (v12 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v12) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v12) + (v21 >> 11));
          v23 = (v22 + (v22 >> 11)) ^ (8 * (v22 + (v22 >> 11)));
          v24 = (v23 + (v23 >> 5)) ^ (4 * (v23 + (v23 >> 5)));
          v25 = (v24 + (v24 >> 15)) ^ ((v24 + (v24 >> 15)) << 10);
          if (v25)
            v26 = v25;
          else
            v26 = 0x800000;
          do
          {
            v27 = v26 & v15;
            v28 = (_OWORD *)(v14 + 24 * (v26 & v15));
            v26 = ++v18 + (v26 & v15);
          }
          while (*v28 != 0);
          v29 = v14 + 24 * v27;
          v32 = *(_DWORD **)(v29 + 16);
          v31 = (_QWORD *)(v29 + 16);
          v30 = v32;
          *v31 = 0;
          if (v32)
          {
            if (v30[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
            else
              --v30[4];
          }
          *v28 = *(_OWORD *)v11;
          v33 = v4 + 24 * v9;
          v34 = *(_QWORD *)(v33 + 16);
          *(_QWORD *)(v33 + 16) = 0;
          *v31 = v34;
          v17 = *(_DWORD **)(v33 + 16);
          *(_QWORD *)(v33 + 16) = 0;
          if (!v17)
            goto LABEL_24;
          if (v17[4] == 1)
          {
LABEL_27:
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
            goto LABEL_24;
          }
          --v17[4];
        }
      }
LABEL_24:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_0,void,JSC::JSValue>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3367AE0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_0,void,JSC::JSValue>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367AE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_0,void,JSC::JSValue>::call(_QWORD *result, objc_class *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned int *v47;
  unsigned int *v48;
  __int128 v49;
  WTF::StringImpl *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;

  v2 = result[1];
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (v3)
    {
      v4 = v3[1];
      if (v4)
      {
        if (*(_QWORD *)(v4 + 8))
        {
          v5 = (unsigned int *)v3[5];
          if (v5)
          {
            v6 = v3[7];
            if (v6)
            {
              v8 = result[2];
              v9 = result[3];
              v10 = *(_DWORD *)(v6 - 8);
              v11 = (v8 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v8 - 1640531527) << 16) ^ ((unsigned __int16)v8 - 1640531527);
              v12 = (v8 >> 37) & 0x7FFF800 ^ ((v11 + WORD2(v8) + (v11 >> 11)) << 16) ^ (v11 + WORD2(v8) + (v11 >> 11));
              v13 = (v9 >> 5) & 0x7FFF800 ^ ((v12 + (unsigned __int16)v9 + (v12 >> 11)) << 16) ^ (v12 + (unsigned __int16)v9 + (v12 >> 11));
              v14 = (v9 >> 37) & 0x7FFF800 ^ ((v13 + WORD2(v9) + (v13 >> 11)) << 16) ^ (v13 + WORD2(v9) + (v13 >> 11));
              v15 = (v14 + (v14 >> 11)) ^ (8 * (v14 + (v14 >> 11)));
              v16 = (v15 + (v15 >> 5)) ^ (4 * (v15 + (v15 >> 5)));
              v17 = (v16 + (v16 >> 15)) ^ ((v16 + (v16 >> 15)) << 10);
              if (!v17)
                v17 = 0x800000;
              v18 = v10 & v17;
              v19 = (uint64_t *)(v6 + (v18 << 6));
              v20 = *v19;
              v21 = v19[1];
              if (*v19 != v8 || v21 != v9)
              {
                v23 = 1;
                while (v20 | v21)
                {
                  v18 = ((_DWORD)v18 + v23) & v10;
                  v19 = (uint64_t *)(v6 + (v18 << 6));
                  v20 = *v19;
                  v21 = v19[1];
                  ++v23;
                  if (*v19 == v8 && v21 == v9)
                    goto LABEL_22;
                }
                v19 = (uint64_t *)(v6 + ((unint64_t)*(unsigned int *)(v6 - 4) << 6));
              }
LABEL_22:
              if (v19 != (uint64_t *)(v6 + ((unint64_t)*(unsigned int *)(v6 - 4) << 6)))
              {
                v25 = v19[2];
                v26 = v19[3];
                v27 = v3[4];
                if (v27)
                  goto LABEL_52;
                v27 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v27 = 1;
                *(_QWORD *)(v27 + 8) = v3;
                v29 = (unsigned int *)v3[4];
                v3[4] = v27;
                if (!v29)
                  goto LABEL_52;
                do
                {
                  v30 = __ldaxr(v29);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v29));
                if (!v31)
                {
                  atomic_store(1u, v29);
                  WTF::fastFree((WTF *)v29, v28);
                }
                v27 = v3[4];
                if (v27)
                {
LABEL_52:
                  do
                    v32 = __ldaxr((unsigned int *)v27);
                  while (__stlxr(v32 + 1, (unsigned int *)v27));
                }
                v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *v33 = &off_1E3367C30;
                v33[1] = v27;
                v33[2] = v8;
                v33[3] = v9;
                v47 = v5;
                do
                  v34 = __ldaxr(v5);
                while (__stlxr(v34 + 1, v5));
                v48 = v5;
                *(_QWORD *)&v49 = v25;
                *((_QWORD *)&v49 + 1) = v26;
                WTF::String::isolatedCopy();
                v51 = v33;
                v35 = WTF::fastMalloc((WTF *)0x38);
                *(_QWORD *)v35 = &off_1E33679C8;
                *(_QWORD *)(v35 + 8) = v47;
                *(_QWORD *)(v35 + 16) = v48;
                *(_OWORD *)(v35 + 24) = v49;
                *(_QWORD *)(v35 + 40) = v50;
                v36 = v51;
                v48 = 0;
                v50 = 0;
                v51 = 0;
                *(_QWORD *)(v35 + 48) = v36;
                v52 = v35;
                WTF::callOnMainThread();
                v38 = v52;
                v52 = 0;
                if (v38)
                  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
                v39 = v51;
                v51 = 0;
                if (v39)
                  (*(void (**)(_QWORD *))(*v39 + 8))(v39);
                v40 = v50;
                v50 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, v37);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = v48;
                v48 = 0;
                if (v41)
                {
                  do
                  {
                    v42 = __ldaxr(v41);
                    v43 = v42 - 1;
                  }
                  while (__stlxr(v43, v41));
                  if (!v43)
                  {
                    atomic_store(1u, v41);
                    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v45 = off_1E3367880;
                    v45[1] = v41;
                    v53 = v45;
                    WTF::ensureOnMainThread();
                    v46 = v53;
                    v53 = 0;
                    if (v46)
                      (*(void (**)(_QWORD *))(*v46 + 8))(v46);
                  }
                }
                result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v47, v3 + 6, v8, v9);
                v44 = v47;
                if (v47)
                {
                  result = (_QWORD *)WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v47, a2, 0);
                  if (v44[4] == 1)
                    return (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v44 + 16))(v44);
                  else
                    --v44[4];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WebCore::AbortSignal *v20;
  _DWORD *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::AbortSignal *v34;
  uint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::AbortSignal *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  bmalloc::api *v52;
  void *v53;
  uint64_t v54;
  bmalloc::api *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  bmalloc::api *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  result = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  if (a2)
  {
    v10 = (_QWORD *)(result + 64);
    do
    {
      *((_OWORD *)v10 - 2) = 0uLL;
      *((_OWORD *)v10 - 1) = 0uLL;
      *((_OWORD *)v10 - 3) = 0uLL;
      *((_BYTE *)v10 - 8) = 1;
      *v10 = 0;
      v10[1] = 0;
      v10 += 8;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (unint64_t *)(v4 + (v11 << 6));
      v15 = v14[1];
      if (v15 != -1)
      {
        v16 = *v14;
        if (*(_OWORD *)v14 == 0)
        {
          v19 = v4 + (v11 << 6);
          v20 = *(WebCore::AbortSignal **)(v19 + 56);
          *(_QWORD *)(v19 + 56) = 0;
          if (v20)
          {
            if (*((_DWORD *)v20 + 6) == 1)
            {
              v59 = v12;
              WebCore::AbortSignal::~AbortSignal(v20, v9);
              bmalloc::api::isoDeallocate(v60, v61);
              v12 = v59;
            }
            else
            {
              --*((_DWORD *)v20 + 6);
            }
          }
          v21 = *(_DWORD **)(v19 + 48);
          *(_QWORD *)(v19 + 48) = 0;
          if (v21)
          {
            if (v21[4] == 1)
            {
              v62 = v12;
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
              v12 = v62;
            }
            else
            {
              --v21[4];
            }
          }
          v22 = v4 + (v11 << 6);
          v23 = *(WTF::StringImpl **)(v22 + 32);
          *(_QWORD *)(v22 + 32) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              v63 = v12;
              WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v9);
              v12 = v63;
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v24 = 0;
          v25 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16 - 1640531527);
          v26 = (v16 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v16) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v16) + (v25 >> 11));
          v27 = (v15 >> 5) & 0x7FFF800 ^ ((v26 + (v26 >> 11) + (unsigned __int16)v15) << 16) ^ (v26 + (v26 >> 11) + (unsigned __int16)v15);
          v28 = (v15 >> 37) & 0x7FFF800 ^ ((v27 + WORD2(v15) + (v27 >> 11)) << 16) ^ (v27 + WORD2(v15) + (v27 >> 11));
          v29 = (v28 + (v28 >> 11)) ^ (8 * (v28 + (v28 >> 11)));
          v30 = (v29 + (v29 >> 5)) ^ (4 * (v29 + (v29 >> 5)));
          v31 = (v30 + (v30 >> 15)) ^ ((v30 + (v30 >> 15)) << 10);
          if (!v31)
            v31 = 0x800000;
          do
          {
            v32 = v31 & v18;
            v33 = v17 + (v32 << 6);
            v31 = ++v24 + v32;
          }
          while (*(_OWORD *)v33 != 0);
          v34 = *(WebCore::AbortSignal **)(v33 + 56);
          *(_QWORD *)(v33 + 56) = 0;
          if (v34)
          {
            if (*((_DWORD *)v34 + 6) == 1)
            {
              v51 = v12;
              WebCore::AbortSignal::~AbortSignal(v34, v9);
              bmalloc::api::isoDeallocate(v52, v53);
              v12 = v51;
            }
            else
            {
              --*((_DWORD *)v34 + 6);
            }
          }
          v35 = v17 + (v32 << 6);
          v37 = (_QWORD *)(v35 + 48);
          v36 = *(_DWORD **)(v35 + 48);
          *(_QWORD *)(v35 + 48) = 0;
          if (v36)
          {
            if (v36[4] == 1)
            {
              v64 = v12;
              (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
              v12 = v64;
            }
            else
            {
              --v36[4];
            }
          }
          v40 = *(WTF::StringImpl **)(v35 + 32);
          v39 = (_QWORD *)(v35 + 32);
          v38 = v40;
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v38 == 2)
            {
              v65 = v12;
              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v9);
              v12 = v65;
            }
            else
            {
              *(_DWORD *)v38 -= 2;
            }
          }
          *(_OWORD *)v33 = *(_OWORD *)v14;
          v41 = v17 + (v32 << 6);
          v42 = v4 + (v11 << 6);
          *(_OWORD *)(v41 + 16) = *(_OWORD *)(v42 + 16);
          v44 = *(_QWORD *)(v42 + 32);
          v43 = (WTF::StringImpl **)(v42 + 32);
          *(_QWORD *)(v42 + 32) = 0;
          *v39 = v44;
          v46 = *(_QWORD *)(v42 + 48);
          v45 = (_QWORD *)(v42 + 48);
          *(_BYTE *)(v41 + 40) = *((_BYTE *)v45 - 8);
          *v45 = 0;
          *v37 = v46;
          v47 = v45[1];
          v45[1] = 0;
          *(_QWORD *)(v33 + 56) = v47;
          v48 = (WebCore::AbortSignal *)v45[1];
          v45[1] = 0;
          if (v48)
          {
            if (*((_DWORD *)v48 + 6) == 1)
            {
              v54 = v12;
              WebCore::AbortSignal::~AbortSignal(v48, v9);
              bmalloc::api::isoDeallocate(v55, v56);
              v12 = v54;
            }
            else
            {
              --*((_DWORD *)v48 + 6);
            }
          }
          v49 = (_DWORD *)*v45;
          *v45 = 0;
          if (v49)
          {
            if (v49[4] == 1)
            {
              v57 = v12;
              (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 16))(v49);
              v12 = v57;
            }
            else
            {
              --v49[4];
            }
          }
          v50 = *v43;
          *v43 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
            {
              v58 = v12;
              WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v9);
              v12 = v58;
            }
            else
            {
              *(_DWORD *)v50 -= 2;
            }
          }
          if (v14 == a3)
            v12 = v33;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3367B08;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367B08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_1,void,BOOL>::call(uint64_t (***result)(), char a2))()
{
  uint64_t (**v2)();
  uint64_t (*v3)();
  uint64_t (**v5)();
  uint64_t (**v6)();
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t (***v21)();

  v2 = result[1];
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v5 = result[2];
      v6 = result[3];
      v7 = *((_QWORD *)v3 + 4);
      if (v7)
        goto LABEL_18;
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = v3;
      v9 = (unsigned int *)*((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = v7;
      if (!v9)
        goto LABEL_18;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
      v7 = *((_QWORD *)v3 + 4);
      if (v7)
      {
LABEL_18:
        do
          v12 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v12 + 1, (unsigned int *)v7));
      }
      v13 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v13 = &off_1E3367B80;
      *(_QWORD *)(v13 + 8) = v3;
      *(_QWORD *)(v13 + 16) = v7;
      *(_QWORD *)(v13 + 24) = v5;
      *(_QWORD *)(v13 + 32) = v6;
      *(_BYTE *)(v13 + 40) = a2;
      v14 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 1;
      v15 = *((_DWORD *)v3 + 6);
      *(_QWORD *)(v14 + 8) = v3;
      ++*((_QWORD *)v3 + 2);
      *((_DWORD *)v3 + 6) = v15 + 2;
      v16 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
      *v16 = &off_1E3367B58;
      v16[1] = (uint64_t (**)())v3;
      v16[2] = (uint64_t (**)())v14;
      v16[3] = (uint64_t (**)())v13;
      v21 = v16;
      v17 = *((_QWORD *)v3 + 1);
      if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 - 96) + 104))(v18 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v19, 0, (uint64_t *)&v21);
        result = v21;
        v21 = 0;
        if (!result)
          return result;
        v20 = *result;
      }
      else
      {
        v21 = 0;
        v20 = &off_1E3367B58;
      }
      return (uint64_t (***)())v20[1]();
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3367B30;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367B30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebLockManager::request(WTF::String const&,WebCore::WebLockManager::Options &&,WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::WebLockManager::Options &&<WebCore::DeferredPromise,WebCore::WebLockGrantedCallback<WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::WebLockGrantedCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_2,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _BYTE v5[16];
  int v6;
  char v7;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *((_QWORD *)result + 2);
      v4 = *((_QWORD *)result + 3);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5[0] = 16;
      v6 = 1;
      result = WebCore::WebLockManager::settleReleasePromise(v2, v3, v4, (uint64_t)v5);
      if (v6 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E3367850[v6])(&v7, v5);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebLockManager>(WebCore::WebLockManager &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E3367B58;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebLockManager>(WebCore::WebLockManager &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3367B58;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebLockManager>(WebCore::WebLockManager &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::didCompleteLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3367B80;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::didCompleteLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3367B80;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebLockManager::didCompleteLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,BOOL)::$_0,void>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  WTF *v26;
  WebCore::AbortSignal *v27;
  uint64_t v28;
  WebCore::ActiveDOMCallback *v29;
  WebCore::AbortSignal *v30;
  WTF *v31;
  WTF::StringImpl *result;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  WebCore::ActiveDOMCallback *v38;
  bmalloc::api *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::Structure *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  WebCore::ActiveDOMCallback *v57;
  int v58;
  __int128 v59;
  WTF::StringImpl *v60;
  char v61;
  WTF *v62;
  WebCore::AbortSignal *v63;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (uint64_t *)(v4 + 56);
  v6 = *(_QWORD *)(v4 + 56);
  if (!v6)
    goto LABEL_27;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v6 - 8);
  v10 = (v7 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v7 - 1640531527) << 16) ^ ((unsigned __int16)v7
                                                                                           - 1640531527);
  v11 = (v7 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v7) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v7) + (v10 >> 11));
  v12 = (v8 >> 5) & 0x7FFF800 ^ ((v11 + (unsigned __int16)v8 + (v11 >> 11)) << 16) ^ (v11
                                                                                                  + (unsigned __int16)v8
                                                                                                  + (v11 >> 11));
  v13 = (v8 >> 37) & 0x7FFF800 ^ ((v12 + WORD2(v8) + (v12 >> 11)) << 16) ^ (v12 + WORD2(v8) + (v12 >> 11));
  v14 = (v13 + (v13 >> 11)) ^ (8 * (v13 + (v13 >> 11)));
  v15 = (v14 + (v14 >> 5)) ^ (4 * (v14 + (v14 >> 5)));
  v16 = (v15 + (v15 >> 15)) ^ ((v15 + (v15 >> 15)) << 10);
  if (!v16)
    v16 = 0x800000;
  v17 = v16 & v9;
  a2 = (uint64_t *)(v6 + (v17 << 6));
  v18 = *a2;
  v19 = a2[1];
  if (*a2 == v7 && v19 == v8)
  {
LABEL_15:
    v23 = *(unsigned int *)(v6 - 4);
  }
  else
  {
    v21 = 1;
    while (v18 | v19)
    {
      v17 = ((_DWORD)v17 + v21) & v9;
      a2 = (uint64_t *)(v6 + (v17 << 6));
      v18 = *a2;
      v19 = a2[1];
      ++v21;
      if (*a2 == v7 && v19 == v8)
        goto LABEL_15;
    }
    v23 = *(unsigned int *)(v6 - 4);
    a2 = (uint64_t *)(v6 + (v23 << 6));
  }
  if ((uint64_t *)(v6 + (v23 << 6)) == a2)
  {
LABEL_27:
    v59 = 0uLL;
    v60 = 0;
    v61 = 1;
    v62 = 0;
    v63 = 0;
    goto LABEL_28;
  }
  v59 = *((_OWORD *)a2 + 1);
  v24 = (WTF::StringImpl *)a2[4];
  a2[4] = 0;
  v60 = v24;
  v25 = *((_BYTE *)a2 + 40);
  v61 = v25;
  v26 = (WTF *)a2[6];
  v27 = (WebCore::AbortSignal *)a2[7];
  a2[6] = 0;
  a2[7] = 0;
  v62 = v26;
  v63 = v27;
  v28 = *v5;
  if (!*v5 || (v28 += (unint64_t)*(unsigned int *)(v28 - 4) << 6, (uint64_t *)v28 != a2))
  {
    if ((uint64_t *)v28 != a2)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v5, a2);
  }
  v29 = (WebCore::ActiveDOMCallback *)v59;
  if ((_QWORD)v59)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v2 = &v60;
      if (v27 && *((_BYTE *)v27 + 156))
      {
        WebCore::WebLockManager::MainThreadBridge::releaseLock(*(unsigned int **)(v4 + 40), v59, *((uint64_t *)&v59 + 1));
        goto LABEL_28;
      }
      v33 = *((_QWORD *)&v59 + 1);
      v34 = WTF::fastMalloc((WTF *)0x28);
      v26 = (WTF *)v34;
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = v29;
      *(_QWORD *)(v34 + 16) = v33;
      v35 = v60;
      if (v60)
        *(_DWORD *)v60 += 2;
      *(_QWORD *)(v34 + 24) = v35;
      *(_BYTE *)(v34 + 32) = v25;
      (*(void (**)(WebCore::ActiveDOMCallback **__return_ptr, WTF *, uint64_t))(*(_QWORD *)v62 + 40))(&v57, v62, v34);
      if (!v58)
      {
        v29 = v57;
        v57 = 0;
        if (!v29)
          goto LABEL_67;
        v41 = *((_QWORD *)v29 + 3);
        if (!v41
          || !*(_QWORD *)v41
          || (*(_BYTE *)(v41 + 8) & 3) != 0
          || !WebCore::ActiveDOMCallback::canInvokeCallback(v29, v36))
        {
          v49 = 0;
LABEL_80:
          WebCore::WebLockManager::MainThreadBridge::releaseLock(*(unsigned int **)(v4 + 40), v59, *((uint64_t *)&v59 + 1));
          LOBYTE(v55) = 37;
          *((_QWORD *)&v55 + 1) = 0;
          v56 = 1;
          WebCore::WebLockManager::settleReleasePromise(v4, v59, *((unint64_t *)&v59 + 1), (uint64_t)&v55);
          if (v56 != -1)
            ((void (*)(uint64_t *, __int128 *))off_1E3367850[v56])(&v54, &v55);
          if ((v49 & 1) != 0)
            goto LABEL_85;
          goto LABEL_83;
        }
        v42 = *((_QWORD *)v29 + 4);
        if (!v42 || (*(_BYTE *)(v42 + 8) & 3) != 0)
          v2 = 0;
        else
          v2 = *(WTF::StringImpl ***)v42;
        v43 = **((_QWORD **)v29 + 3);
        if ((v43 & 0xFFFE000000000002) == 0)
        {
          if (*(_BYTE *)(v43 + 5) == 68)
            v44 = (JSC::Structure *)**((_QWORD **)v29 + 3);
          else
            v44 = 0;
          goto LABEL_63;
        }
LABEL_106:
        v44 = 0;
LABEL_63:
        v45 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        v55 = v59;
        v46 = v60;
        if (v60)
          *(_DWORD *)v60 += 2;
        ++*((_DWORD *)v29 + 4);
        v47 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v47 = &off_1E3367BA8;
        *(_QWORD *)(v47 + 8) = v4;
        *(_QWORD *)(v47 + 16) = v45;
        *(_OWORD *)(v47 + 24) = v55;
        *(_QWORD *)(v47 + 40) = v46;
        *(_QWORD *)(v47 + 48) = v29;
        v54 = v47;
        WebCore::DOMPromise::whenPromiseIsSettled((JSC::JSGlobalObject *)v2, v44, &v54);
        v48 = v54;
        v54 = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
LABEL_83:
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
LABEL_85:
        if (v58 != -1)
          ((void (*)(__int128 *, WebCore::ActiveDOMCallback **))off_1E3367BC0[v58])(&v55, &v57);
        if (*(_DWORD *)v26 == 1)
        {
          v53 = (WTF::StringImpl *)*((_QWORD *)v26 + 3);
          *((_QWORD *)v26 + 3) = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v53 -= 2;
          }
          WTF::fastFree(v26, a2);
        }
        else
        {
          --*(_DWORD *)v26;
        }
        goto LABEL_28;
      }
      if (v58 == 1 && (_DWORD)v57)
      {
        v29 = 0;
LABEL_67:
        v49 = 1;
        goto LABEL_80;
      }
LABEL_105:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_106;
    }
    (*(void (**)(WebCore::ActiveDOMCallback **__return_ptr, WTF *, _QWORD))(*(_QWORD *)v26 + 40))(&v57, v26, 0);
    if (v58)
    {
      if (v58 != 1 || !(_DWORD)v57)
        goto LABEL_105;
      v38 = 0;
    }
    else
    {
      v38 = v57;
      v57 = 0;
      if (v38)
      {
        v50 = *((_QWORD *)v38 + 3);
        if (v50
          && *(_QWORD *)v50
          && (*(_BYTE *)(v50 + 8) & 3) == 0
          && WebCore::ActiveDOMCallback::canInvokeCallback(v38, v37))
        {
          v51 = **((_QWORD **)v38 + 3);
          if ((v51 & 0xFFFE000000000002) != 0)
          {
            v51 = 0;
          }
          else if (*(_BYTE *)(v51 + 5) != 68)
          {
            v51 = 0;
          }
          *(_QWORD *)&v55 = v51;
          v56 = 0;
          WebCore::WebLockManager::settleReleasePromise(v4, v59, *((unint64_t *)&v59 + 1), (uint64_t)&v55);
          if (v56 != -1)
            ((void (*)(uint64_t *, __int128 *))off_1E3367850[v56])(&v54, &v55);
LABEL_93:
          if (*((_DWORD *)v38 + 4) == 1)
            (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v38 + 16))(v38);
          else
            --*((_DWORD *)v38 + 4);
LABEL_95:
          if (v58 != -1)
            ((void (*)(__int128 *, WebCore::ActiveDOMCallback **))off_1E3367BC0[v58])(&v55, &v57);
          goto LABEL_28;
        }
        v52 = 0;
LABEL_90:
        LOBYTE(v55) = 37;
        *((_QWORD *)&v55 + 1) = 0;
        v56 = 1;
        WebCore::WebLockManager::settleReleasePromise(v4, v59, *((unint64_t *)&v59 + 1), (uint64_t)&v55);
        if (v56 != -1)
          ((void (*)(uint64_t *, __int128 *))off_1E3367850[v56])(&v54, &v55);
        if ((v52 & 1) != 0)
          goto LABEL_95;
        goto LABEL_93;
      }
    }
    v52 = 1;
    goto LABEL_90;
  }
LABEL_28:
  v30 = v63;
  v63 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v30, a2);
      bmalloc::api::isoDeallocate(v39, v40);
    }
    else
    {
      --*((_DWORD *)v30 + 6);
    }
  }
  v31 = v62;
  v62 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 4) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v31 + 16))(v31);
    else
      --*((_DWORD *)v31 + 4);
  }
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, _QWORD *a2)
{
  WebCore::AbortSignal *v4;
  _DWORD *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v13;
  void *v14;

  *(_OWORD *)a2 = xmmword_1968C18F0;
  v4 = (WebCore::AbortSignal *)a2[7];
  a2[7] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v4, a2);
      bmalloc::api::isoDeallocate(v13, v14);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  v5 = (_DWORD *)a2[6];
  a2[6] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  result = (WTF::StringImpl *)a2[4];
  a2[4] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  ++*(_DWORD *)(*a1 - 16);
  v7 = *a1;
  if (*a1)
    v8 = *(_DWORD *)(v7 - 12) - 1;
  else
    v8 = -1;
  *(_DWORD *)(v7 - 12) = v8;
  v9 = *a1;
  if (*a1)
  {
    v10 = 6 * *(_DWORD *)(v9 - 12);
    v11 = *(_DWORD *)(v9 - 4);
    if (v10 < v11 && v11 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v11 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::didCompleteLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,BOOL)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E3367BA8;
  v3 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::didCompleteLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,BOOL)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3367BA8;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebLockManager::didCompleteLockRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,BOOL)::$_0::operator()(void)::{lambda(void)#1},void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  int v8;
  char v9;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = (uint64_t *)result;
    v3 = *((_QWORD *)result + 1);
    WebCore::WebLockManager::MainThreadBridge::releaseLock(*(unsigned int **)(v3 + 40), v2[3], v2[4]);
    v4 = v2[3];
    v5 = v2[4];
    v6 = **(_QWORD **)(v2[6] + 24);
    if ((v6 & 0xFFFE000000000002) != 0)
    {
      v6 = 0;
    }
    else if (*(_BYTE *)(v6 + 5) != 68)
    {
      v6 = 0;
    }
    v7[0] = v6;
    v8 = 0;
    result = WebCore::WebLockManager::settleReleasePromise(v3, v4, v5, (uint64_t)v7);
    if (v8 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E3367850[v8])(&v9, v7);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10DOMPromiseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_18CallbackResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::query(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::WebLockManagerSnapshot &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3367BE0;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::query(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::WebLockManagerSnapshot &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3367BE0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::query(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::WebLockManagerSnapshot &&>::call(uint64_t result, uint64_t (**a2)())
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (**v9)();
  uint64_t v10;
  int v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t (**v17)();
  _QWORD v18[4];
  uint64_t (***v19)();

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(uint64_t (**)())(result + 16);
      *(_QWORD *)(result + 16) = 0;
      v5 = *a2;
      *a2 = 0;
      v6 = a2[2];
      a2[2] = 0;
      v7 = a2[1];
      a2[1] = 0;
      v8 = a2[3];
      a2[3] = 0;
      v9 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x30);
      *v9 = (uint64_t (*)())off_1E3367C08;
      v9[1] = v4;
      v18[0] = 0;
      v9[2] = v5;
      v18[1] = 0;
      v9[3] = v7;
      v18[2] = 0;
      v9[4] = v6;
      v18[3] = 0;
      v9[5] = v8;
      v10 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 1;
      v11 = *(_DWORD *)(v3 + 24);
      *(_QWORD *)(v10 + 8) = v3;
      ++*(_QWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 24) = v11 + 2;
      v12 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E3367B58;
      v12[1] = (uint64_t (**)())v3;
      v12[2] = (uint64_t (**)())v10;
      v12[3] = v9;
      v19 = v12;
      v13 = *(_QWORD *)(v3 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
          WebCore::EventLoopTaskGroup::queueTask(v15, 0, (uint64_t *)&v19);
          v12 = v19;
          v19 = 0;
          if (!v12)
            goto LABEL_10;
        }
        else
        {
          v19 = 0;
        }
        v17 = *v12;
      }
      else
      {
        v19 = 0;
        v17 = &off_1E3367B58;
      }
      v17[1]();
LABEL_10:
      WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot((WebCore::WebLockManagerSnapshot *)v18, v16);
      return 0;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::query(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::WebLockManagerSnapshot &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *a1 = off_1E3367C08;
  WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot((WebCore::WebLockManagerSnapshot *)(a1 + 2), a2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::query(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::WebLockManagerSnapshot &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  _DWORD *v4;

  *a1 = off_1E3367C08;
  WebCore::WebLockManagerSnapshot::~WebLockManagerSnapshot((WebCore::WebLockManagerSnapshot *)(a1 + 2), a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::query(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(WebCore::WebLockManagerSnapshot &&)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::JSDOMGlobalObject *v3;
  uint64_t v4;
  WebCore *v5;
  uint64_t v6;
  const WebCore::WebLockManagerSnapshot *v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = (WebCore::JSDOMGlobalObject *)(result + 16);
    v4 = *(_QWORD *)(v1 + 32);
    if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
      v5 = 0;
    else
      v5 = *(WebCore **)v4;
    v6 = *((_QWORD *)v5 + 7);
    MEMORY[0x19AEA3294](v16, v6);
    v8 = (objc_class *)WebCore::convertDictionaryToJS(v5, **(JSC::JSGlobalObject ***)(v1 + 32), v3, v7);
    v9 = *(_QWORD *)(v6 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v1, (uint64_t *)v5, 0, v8);
      v9 = *(_QWORD *)(v6 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v5);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException(v5, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v6 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v1 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebLockManager::signalToAbortTheRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,JSC::JSValue)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3367C30;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebLockManager::signalToAbortTheRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,JSC::JSValue)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3367C30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::WebLockManager::signalToAbortTheRequest(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,JSC::JSValue)::$_0,void,BOOL>::call(uint64_t *result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v23;

  if (a2)
  {
    v2 = result;
    v3 = result[1];
    if (v3)
    {
      result = *(uint64_t **)(v3 + 8);
      if (result)
      {
        v5 = result[7];
        result += 7;
        v4 = v5;
        if (v5)
        {
          v7 = v2[2];
          v6 = v2[3];
          v8 = *(_DWORD *)(v4 - 8);
          v9 = (v7 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v7 - 1640531527) << 16) ^ ((unsigned __int16)v7
                                                                                                  - 1640531527);
          v10 = (v7 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v7) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v7) + (v9 >> 11));
          v11 = (v6 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v6 + (v10 >> 11)) << 16) ^ (v10 + (unsigned __int16)v6 + (v10 >> 11));
          v12 = (v6 >> 37) & 0x7FFF800 ^ ((v11 + WORD2(v6) + (v11 >> 11)) << 16) ^ (v11 + WORD2(v6) + (v11 >> 11));
          v13 = (v12 + (v12 >> 11)) ^ (8 * (v12 + (v12 >> 11)));
          v14 = (v13 + (v13 >> 5)) ^ (4 * (v13 + (v13 >> 5)));
          v15 = (v14 + (v14 >> 15)) ^ ((v14 + (v14 >> 15)) << 10);
          if (!v15)
            v15 = 0x800000;
          v16 = v15 & v8;
          v17 = (uint64_t *)(v4 + (v16 << 6));
          v18 = *v17;
          v19 = v17[1];
          if (*v17 == v7 && v19 == v6)
          {
LABEL_18:
            v23 = *(unsigned int *)(v4 - 4);
          }
          else
          {
            v21 = 1;
            while (v18 | v19)
            {
              v16 = ((_DWORD)v16 + v21) & v8;
              v17 = (uint64_t *)(v4 + (v16 << 6));
              v18 = *v17;
              v19 = v17[1];
              ++v21;
              if (*v17 == v7 && v19 == v6)
                goto LABEL_18;
            }
            v23 = *(unsigned int *)(v4 - 4);
            v17 = (uint64_t *)(v4 + (v23 << 6));
          }
          if ((uint64_t *)(v4 + (v23 << 6)) != v17)
            return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WebLockManager::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::WebLockManager::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(result, v17);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>>,std::pair<PAL::SessionID,WebCore::ClientOrigin>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int i;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v15;
  int v16;
  _BOOL4 v18;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  _BOOL4 v25;
  BOOL v26;
  char v27;
  char v29;
  char *v30;
  char **v31;
  _QWORD v32[2];
  int v33;
  int v34;
  _QWORD v35[2];
  int v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(_DWORD *)(a1 - 8);
    v5 = WTF::PairHash<PAL::SessionID,WebCore::ClientOrigin>::hash((uint64_t *)a2);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = a1 + 80 * (v5 & v4);
      v37 = 0;
      v35[0] = 0;
      v35[1] = 0;
      v36 = 0;
      v32[0] = 0;
      v32[1] = 0;
      v31 = 0;
      v34 = 0;
      v33 = 0;
      if (*(_QWORD *)v8)
        break;
      if ((char ***)v8 == &v31)
      {
        v9 = 1;
      }
      else if (*(_DWORD *)(v8 + 32)
             || (v30 = &v29,
                 !std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>((uint64_t)&v30, v8 + 8, (uint64_t)v32)))
      {
        v9 = 0;
      }
      else
      {
        v11 = *(unsigned int *)(v8 + 64);
        v12 = v37 == v11;
        if (v37 == -1)
          v12 = 0;
        if ((_DWORD)v11 == -1)
          v9 = v37 == -1;
        else
          v9 = v12;
        if ((_DWORD)v11 != -1 && v12)
        {
          v30 = &v29;
          v9 = ((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v11])(&v30, v8 + 40, v35);
        }
      }
      v10 = v37;
      if (v37 != -1)
        goto LABEL_20;
LABEL_21:
      v37 = -1;
      if (v34 != -1)
        ((void (*)(char **, _QWORD *))off_1E3367898[v34])(&v30, v32);
      if ((v9 & 1) != 0)
        return 0;
      if (*(_QWORD *)v8 != -1 && *(_QWORD *)v8 == *(_QWORD *)a2)
      {
        if (v8 == a2)
          return a2;
        v15 = *(unsigned int *)(v8 + 32);
        v16 = *(_DWORD *)(a2 + 32);
        v18 = v16 == (_DWORD)v15 && v16 != -1;
        if ((_DWORD)v15 == -1 || !v18)
        {
          v20 = v16 == -1;
          if ((_DWORD)v15 == -1)
            v21 = v20;
          else
            v21 = v18;
          if (!v21)
            goto LABEL_61;
        }
        else
        {
          v31 = &v30;
          if ((((uint64_t (*)(char ***, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v15])(&v31, v8 + 8, a2 + 8) & 1) == 0)goto LABEL_61;
        }
        v22 = *(unsigned int *)(v8 + 64);
        v23 = *(_DWORD *)(a2 + 64);
        v25 = v23 == (_DWORD)v22 && v23 != -1;
        if ((_DWORD)v22 == -1 || !v25)
        {
          v26 = v23 == -1;
          if ((_DWORD)v22 == -1)
            v27 = v26;
          else
            v27 = v25;
          if ((v27 & 1) != 0)
            return v8;
        }
        else
        {
          v31 = &v30;
          if ((((uint64_t (*)(char ***, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v22])(&v31, v8 + 40, a2 + 40) & 1) != 0)return v8;
        }
      }
LABEL_61:
      ++i;
    }
    v9 = 0;
    v10 = 0;
LABEL_20:
    ((void (*)(char **, _QWORD *))off_1E3367898[v10])(&v30, v35);
    goto LABEL_21;
  }
  return 0;
}

unint64_t WTF::PairHash<PAL::SessionID,WebCore::ClientOrigin>::hash(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned __int16 v14;
  char v15;

  v1 = *a1;
  v13 = -1640531527;
  v14 = 0;
  v15 = 0;
  WTF::add<WebCore::SecurityOriginData,WebCore::SecurityOriginData>(&v13, (uint64_t)(a1 + 1), (uint64_t)(a1 + 5));
  v2 = v13;
  if (v15)
  {
    v12 = (v13 + v14) ^ ((v13 + v14) << 11);
    v2 = v12 + (v12 >> 17);
  }
  v3 = (v1 + ~(v1 << 32)) ^ ((unint64_t)(v1 + ~(v1 << 32)) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = (v5 >> 31) ^ v5;
  v7 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
  v9 = v8 ^ (v8 << 10);
  if (v9)
    v10 = 95187966 * v9;
  else
    v10 = -16777216;
  return (0xD7862706ELL * (unint64_t)(v10 + 277951225 * v6)) >> 4;
}

uint64_t WTF::HashTable<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashMap<std::pair<PAL::SessionID,WebCore::ClientOrigin>,WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalWebLockRegistry::PerOriginRegistry,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<PAL::SessionID,WebCore::ClientOrigin>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v40;
  unsigned int *v41;
  _QWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 88);
    do
    {
      *((_DWORD *)v10 - 10) = 0;
      *((_DWORD *)v10 - 2) = 0;
      *(v10 - 4) = 0;
      *(v10 - 3) = 0;
      *((_DWORD *)v10 - 4) = 0;
      *(v10 - 8) = 0;
      *(v10 - 7) = 0;
      *(v10 - 9) = 0;
      *((_DWORD *)v10 - 12) = 0;
      *v10 = 0;
      v10 += 10;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v57 = v4;
    while (1)
    {
      v14 = (uint64_t *)(v4 + 80 * v11);
      v15 = *v14;
      if (*v14 == -1)
        goto LABEL_90;
      v72 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v65 = 0;
      v66 = 0;
      v64 = 0;
      v68 = 0;
      v67 = 0;
      if (v15)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        if (v14 == &v64)
        {
          v16 = 1;
        }
        else if (*((_DWORD *)v14 + 8)
               || (v63 = &v62,
                   !std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>((uint64_t)&v63, (uint64_t)(v14 + 1), (uint64_t)&v65)))
        {
          v16 = 0;
        }
        else
        {
          v18 = *((unsigned int *)v14 + 16);
          v19 = v72 == v18;
          if (v72 == -1)
            v19 = 0;
          if ((_DWORD)v18 == -1)
            v16 = v72 == -1;
          else
            v16 = v19;
          if ((_DWORD)v18 != -1 && v19)
          {
            v63 = &v62;
            v16 = ((uint64_t (*)(char **, uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v18])(&v63, v14 + 5, &v69);
          }
        }
        v17 = v72;
        if (v72 == -1)
          goto LABEL_28;
      }
      ((void (*)(char **, uint64_t *))off_1E3367898[v17])(&v63, &v69);
LABEL_28:
      v72 = -1;
      if (v68 != -1)
        ((void (*)(char **, uint64_t *))off_1E3367898[v68])(&v63, &v65);
      if (v16)
      {
        v21 = v4 + 80 * v11;
        v22 = *(unsigned int **)(v21 + 72);
        *(_QWORD *)(v21 + 72) = 0;
        if (v22)
        {
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v22);
            WTF::fastFree((WTF *)v22, v8);
          }
        }
        v25 = *((unsigned int *)v14 + 16);
        if ((_DWORD)v25 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E3367898[v25])(&v64, v14 + 5);
        *((_DWORD *)v14 + 16) = -1;
        v26 = *((unsigned int *)v14 + 8);
        if ((_DWORD)v26 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E3367898[v26])(&v64, v14 + 1);
        *((_DWORD *)v14 + 8) = -1;
        goto LABEL_90;
      }
      v60 = v12;
      v61 = v4 + 80 * v11;
      v27 = *a1;
      if (*a1)
        v28 = *(_DWORD *)(v27 - 8);
      else
        v28 = 0;
      v29 = WTF::PairHash<PAL::SessionID,WebCore::ClientOrigin>::hash((uint64_t *)v61);
      v30 = 0;
      do
      {
        v31 = v29 & v28;
        v32 = v27 + 80 * (v29 & v28);
        v72 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v65 = 0;
        v66 = 0;
        v64 = 0;
        v68 = 0;
        v67 = 0;
        if (*(_QWORD *)v32)
        {
LABEL_47:
          v33 = 0;
          v34 = 0;
LABEL_48:
          ((void (*)(char **, uint64_t *))off_1E3367898[v34])(&v63, &v69);
          goto LABEL_49;
        }
        if ((uint64_t *)v32 == &v64)
        {
          v34 = 0;
          v33 = 1;
          goto LABEL_48;
        }
        if (*(_DWORD *)(v32 + 32))
          goto LABEL_47;
        v63 = &v62;
        v36 = std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>((uint64_t)&v63, v32 + 8, (uint64_t)&v65);
        v34 = v72;
        if (v36)
        {
          v37 = *(unsigned int *)(v32 + 64);
          v38 = v72 == v37;
          if (v72 == 0xFFFFFFFFLL)
            v38 = 0;
          if (v37 == 0xFFFFFFFFLL)
            v33 = v72 == 0xFFFFFFFFLL;
          else
            v33 = v38;
          if ((_DWORD)v37 != -1 && v38)
          {
            v63 = &v62;
            v33 = ((uint64_t (*)(char **, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v72])(&v63, v32 + 40, &v69);
            v34 = v72;
          }
        }
        else
        {
          v33 = 0;
        }
        if (v34 != 0xFFFFFFFFLL)
          goto LABEL_48;
LABEL_49:
        v72 = -1;
        if (v68 != -1)
          ((void (*)(char **, uint64_t *))off_1E3367898[v68])(&v63, &v65);
        v29 = ++v30 + v31;
      }
      while (!v33);
      v40 = v27 + 80 * v31;
      v43 = *(unsigned int **)(v40 + 72);
      v42 = (_QWORD *)(v40 + 72);
      v41 = v43;
      *v42 = 0;
      v13 = v5;
      if (v43)
      {
        do
        {
          v44 = __ldaxr(v41);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v41));
        if (!v45)
        {
          atomic_store(1u, v41);
          WTF::fastFree((WTF *)v41, v35);
        }
      }
      v46 = *(unsigned int *)(v32 + 64);
      if ((_DWORD)v46 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E3367898[v46])(&v64, v32 + 40);
      *(_DWORD *)(v32 + 64) = -1;
      v47 = *(unsigned int *)(v32 + 32);
      if ((_DWORD)v47 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E3367898[v47])(&v64, v32 + 8);
      *(_QWORD *)v32 = *(_QWORD *)v61;
      *(_BYTE *)(v32 + 8) = 0;
      *(_DWORD *)(v32 + 32) = -1;
      v48 = *(unsigned int *)(v61 + 32);
      if ((_DWORD)v48 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33678B8[v48])(&v64, v32 + 8, v61 + 8);
        *(_DWORD *)(v32 + 32) = v48;
      }
      *(_BYTE *)(v32 + 40) = 0;
      v8 = (void *)(v32 + 40);
      *(_DWORD *)(v32 + 64) = -1;
      v49 = *(unsigned int *)(v61 + 64);
      if ((_DWORD)v49 != -1)
      {
        ((void (*)(uint64_t *))off_1E33678B8[v49])(&v64);
        *(_DWORD *)(v32 + 64) = v49;
      }
      v4 = v57;
      v50 = v57 + 80 * v11;
      v51 = *(_QWORD *)(v50 + 72);
      *(_QWORD *)(v50 + 72) = 0;
      *v42 = v51;
      v52 = *(unsigned int **)(v50 + 72);
      *(_QWORD *)(v50 + 72) = 0;
      v12 = v60;
      if (v52)
      {
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          atomic_store(1u, v52);
          WTF::fastFree((WTF *)v52, v8);
        }
      }
      v55 = *(unsigned int *)(v61 + 64);
      if ((_DWORD)v55 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E3367898[v55])(&v64, v61 + 40);
      *(_DWORD *)(v61 + 64) = -1;
      v56 = *(unsigned int *)(v61 + 32);
      if ((_DWORD)v56 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E3367898[v56])(&v64, v61 + 8);
      *(_DWORD *)(v61 + 32) = -1;
      if (v61 == a3)
        v12 = v32;
LABEL_90:
      if (++v11 == v13)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::remove(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WebCore::LocalWebLockRegistry::PerOriginRegistry **v6;
  uint64_t v7;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v8;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::LocalWebLockRegistry::PerOriginRegistry **v26;
  WebCore::LocalWebLockRegistry::PerOriginRegistry **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v32;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v33;
  WTF *v34;
  void *v35;
  WTF::StringImpl *v36;
  int v37;

  v4 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = -1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int *)(a2 + 20);
  v6 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry ***)(a2 + 8);
  if ((_DWORD)v5)
  {
    v7 = 80 * v5;
    do
    {
      v8 = v6[9];
      v6[9] = 0;
      if (v8)
        (*(void (**)(WebCore::LocalWebLockRegistry::PerOriginRegistry *))(*(_QWORD *)v8 + 8))(v8);
      v9 = *v6;
      *v6 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v9, (void *)a2);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v6 += 10;
      v7 -= 80;
    }
    while (v7);
    v6 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry ***)(a2 + 8);
  }
  if (v6)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree((WTF *)v6, (void *)a2);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v12 = *(unsigned int *)(a1 + 8);
  v13 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v13;
  v14 = v12 - 1;
  v15 = *(_QWORD *)a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *(_QWORD *)a1) >> 3);
  v17 = ((_DWORD)v16 + 1) & (v12 - 1);
  v18 = (uint64_t *)(*(_QWORD *)a1 + 24 * v17);
  result = *v18;
  if (*v18)
  {
    v37 = *(_DWORD *)(a1 + 16);
    v20 = v15 + 24 * v16;
    v21 = (v16 + 1) & v14;
    do
    {
      v22 = *(_DWORD *)(result + 16);
      if (v22 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v22 >> 8;
      if (((v21 + (_DWORD)v12 - ((result ^ v37) & v14)) & v14) == 0)
        break;
      WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=(v20, (WTF::StringImpl *)v18);
      v24 = v15 + 24 * v17;
      v27 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry ***)(v24 + 8);
      v25 = v24 + 8;
      v26 = v27;
      v28 = *(unsigned int *)(v25 + 12);
      if ((_DWORD)v28)
      {
        v29 = v12;
        v30 = a1;
        v31 = 80 * v28;
        do
        {
          v32 = v26[9];
          v26[9] = 0;
          if (v32)
            (*(void (**)(WebCore::LocalWebLockRegistry::PerOriginRegistry *))(*(_QWORD *)v32 + 8))(v32);
          v33 = *v26;
          *v26 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
            {
              WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v33, v23);
              WTF::fastFree(v34, v35);
            }
            else
            {
              --*(_DWORD *)v33;
            }
          }
          v26 += 10;
          v31 -= 80;
        }
        while (v31);
        v26 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry ***)v25;
        a1 = v30;
        v12 = v29;
      }
      if (v26)
      {
        *(_QWORD *)v25 = 0;
        *(_DWORD *)(v15 + 24 * v17 + 16) = 0;
        WTF::fastFree((WTF *)v26, v23);
      }
      v36 = (WTF::StringImpl *)*v18;
      *v18 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
        else
          *(_DWORD *)v36 -= 2;
      }
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      v17 = (v21 + 1) & v14;
      v15 = *(_QWORD *)a1;
      v20 = *(_QWORD *)a1 + 24 * v21;
      v18 = (uint64_t *)(*(_QWORD *)a1 + 24 * v17);
      result = *v18;
      v21 = (v21 + 1) & v14;
    }
    while (*v18);
    LODWORD(v12) = *(_DWORD *)(a1 + 8);
    v13 = *(_DWORD *)(a1 + 12);
  }
  if (v12 >= 9 && 6 * v13 < v12)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::rehash(a1, v12 >> 1);
  return result;
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = 80 * v6;
    do
    {
      v9 = *(_QWORD *)(v7 + 72);
      *(_QWORD *)(v7 + 72) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v7;
      *(_QWORD *)v7 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v10, a2);
          WTF::fastFree(v11, v12);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      v7 += 80;
      v8 -= 80;
    }
    while (v8);
  }
  v13 = *(WTF **)(a1 + 8);
  if (v13)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v14;
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  char *v21;
  WTF **v22;
  uint64_t *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v35;
  WTF *v36;
  void *v37;
  WTF *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  char *v49;
  char *v50;
  WebCore::LocalWebLockRegistry::PerOriginRegistry **v51;
  WebCore::LocalWebLockRegistry::PerOriginRegistry **v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v55;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v56;
  WTF *v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  _DWORD *v65;
  int v66;
  int v67;

  v3 = a1;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2));
  *(_QWORD *)v3 = result;
  *(_DWORD *)(v3 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(v3 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(v3 + 20) = 0;
  v61 = v4;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v60 = v5;
    v63 = v3;
    do
    {
      v12 = (WTF::StringImpl **)((char *)v5 + 24 * v11);
      v13 = *v12;
      if (*v12)
      {
        v66 = *(_DWORD *)(v3 + 16);
        v67 = *(_DWORD *)(v3 + 8);
        v14 = *((_DWORD *)v13 + 4);
        v62 = v11;
        if (v14 < 0x100)
          v15 = WTF::StringImpl::hashSlowCase(v13);
        else
          v15 = v14 >> 8;
        v16 = v67 - 1;
        v17 = (v15 ^ v66) & (v67 - 1);
        v18 = *(_QWORD *)v3 + 24 * v17;
        v19 = *(WTF::StringImpl **)v18;
        if (*(_QWORD *)v18)
        {
          v20 = 0;
          v21 = (char *)v5 + 24 * v62;
          v22 = (WTF **)(v21 + 8);
          v23 = (uint64_t *)(v21 + 16);
          v65 = v21 + 20;
          do
          {
            v24 = *((_DWORD *)v19 + 4);
            if (v24 < 0x100)
              v25 = WTF::StringImpl::hashSlowCase(v19);
            else
              v25 = v24 >> 8;
            v26 = (v17 + v67 - ((v25 ^ v66) & v16)) & v16;
            if (v20 > v26)
            {
              v27 = *v12;
              v64 = *v22;
              *v12 = 0;
              v12[1] = 0;
              v28 = *v23;
              *v23 = 0;
              v29 = *(WTF::StringImpl **)v18;
              *(_QWORD *)v18 = 0;
              v30 = *v12;
              *v12 = v29;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v7);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v31 = *v65;
              if ((_DWORD)v31)
              {
                v32 = *v22;
                v33 = 80 * v31;
                do
                {
                  v34 = *((_QWORD *)v32 + 9);
                  *((_QWORD *)v32 + 9) = 0;
                  if (v34)
                    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                  v35 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v32;
                  *(_QWORD *)v32 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 1)
                    {
                      WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v35, v7);
                      WTF::fastFree(v36, v37);
                    }
                    else
                    {
                      --*(_DWORD *)v35;
                    }
                  }
                  v32 = (WTF *)((char *)v32 + 80);
                  v33 -= 80;
                }
                while (v33);
              }
              v38 = *v22;
              if (*v22)
              {
                *v22 = 0;
                *(_DWORD *)v23 = 0;
                WTF::fastFree(v38, v7);
              }
              v39 = *(WTF **)(v18 + 8);
              *(_QWORD *)(v18 + 8) = 0;
              *v22 = v39;
              LODWORD(v39) = *(_DWORD *)(v18 + 16);
              *(_DWORD *)(v18 + 16) = 0;
              *(_DWORD *)v23 = (_DWORD)v39;
              LODWORD(v39) = *(_DWORD *)(v18 + 20);
              *(_DWORD *)(v18 + 20) = 0;
              *v65 = (_DWORD)v39;
              v40 = *(WTF::StringImpl **)v18;
              *(_QWORD *)v18 = v27;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v7);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = *(unsigned int *)(v18 + 20);
              if ((_DWORD)v41)
              {
                v42 = *(_QWORD *)(v18 + 8);
                v43 = 80 * v41;
                do
                {
                  v44 = *(_QWORD *)(v42 + 72);
                  *(_QWORD *)(v42 + 72) = 0;
                  if (v44)
                    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
                  v45 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v42;
                  *(_QWORD *)v42 = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 1)
                    {
                      WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v45, v7);
                      WTF::fastFree(v46, v47);
                    }
                    else
                    {
                      --*(_DWORD *)v45;
                    }
                  }
                  v42 += 80;
                  v43 -= 80;
                }
                while (v43);
              }
              v48 = *(WTF **)(v18 + 8);
              if (v48)
              {
                *(_QWORD *)(v18 + 8) = 0;
                *(_DWORD *)(v18 + 16) = 0;
                WTF::fastFree(v48, v7);
              }
              v3 = v63;
              *(_QWORD *)(v18 + 8) = v64;
              *(_QWORD *)(v18 + 16) = v28;
              v20 = v26;
            }
            v17 = (v17 + 1) & v16;
            ++v20;
            v18 = *(_QWORD *)v3 + 24 * v17;
            v19 = *(WTF::StringImpl **)v18;
          }
          while (*(_QWORD *)v18);
        }
        WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=(v18, (WTF::StringImpl *)v12);
        v5 = v60;
        v11 = v62;
      }
      v49 = (char *)v5 + 24 * v11;
      v52 = (WebCore::LocalWebLockRegistry::PerOriginRegistry **)*((_QWORD *)v49 + 1);
      v50 = v49 + 8;
      v51 = v52;
      v53 = *((unsigned int *)v50 + 3);
      if ((_DWORD)v53)
      {
        v54 = 80 * v53;
        do
        {
          v55 = v51[9];
          v51[9] = 0;
          if (v55)
            (*(void (**)(WebCore::LocalWebLockRegistry::PerOriginRegistry *))(*(_QWORD *)v55 + 8))(v55);
          v56 = *v51;
          *v51 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 1)
            {
              WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v56, v7);
              WTF::fastFree(v57, v58);
            }
            else
            {
              --*(_DWORD *)v56;
            }
          }
          v51 += 10;
          v54 -= 80;
        }
        while (v54);
        v51 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry ***)v50;
      }
      if (v51)
      {
        *(_QWORD *)v50 = 0;
        *((_DWORD *)v5 + 6 * v11 + 4) = 0;
        WTF::fastFree((WTF *)v51, v7);
      }
      v59 = *v12;
      *v12 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v7);
        else
          *(_DWORD *)v59 -= 2;
      }
      ++v11;
    }
    while (v11 != v61);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

WebCore::LocalWebLockRegistry::PerOriginRegistry *WTF::VectorTypeOperations<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::destruct(WebCore::LocalWebLockRegistry::PerOriginRegistry *result, WTF::StringImpl *a2)
{
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 11);
      *((_QWORD *)v3 + 11) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 10);
      *((_QWORD *)v3 + 10) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *((_QWORD *)v3 + 9);
      *((_QWORD *)v3 + 9) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      result = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(result, a2);
          result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v3 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v3 + 96);
    }
    while (v3 != a2);
  }
  return result;
}

void WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  size_t v6;
  void *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  char *v24;
  int *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  WTF::StringImpl **v56;
  uint64_t *v57;
  uint64_t *v58;
  unint64_t *v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v3 = a1;
  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  v6 = 40 * a2;
  v7 = (void *)WTF::fastMalloc((WTF *)v6);
  v9 = (uint64_t)v7;
  if (a2)
    bzero(v7, v6);
  *v3 = v9;
  *((_DWORD *)v3 + 2) = a2;
  v10 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  *((_DWORD *)v3 + 4) = (v12 >> 31) ^ v12;
  *((_BYTE *)v3 + 20) = 0;
  if ((_DWORD)v4)
  {
    v13 = 0;
    v54 = v3;
    v51 = v4;
    v52 = v5;
    do
    {
      v56 = (WTF::StringImpl **)((char *)v5 + 40 * v13);
      v14 = *v56;
      if (*v56)
      {
        v15 = *((_DWORD *)v3 + 2);
        v60 = *((_DWORD *)v3 + 4);
        v16 = *((_DWORD *)v14 + 4);
        v53 = v13;
        if (v16 < 0x100)
          v17 = WTF::StringImpl::hashSlowCase(v14);
        else
          v17 = v16 >> 8;
        v18 = v15 - 1;
        v19 = (v17 ^ v60) & (v15 - 1);
        v20 = *v3;
        v21 = *v3 + 40 * v19;
        v22 = *(WTF::StringImpl **)v21;
        if (*(_QWORD *)v21)
        {
          v23 = 0;
          v24 = (char *)v5 + 40 * v53;
          v58 = (uint64_t *)(v24 + 16);
          v59 = (unint64_t *)(v24 + 8);
          v57 = (uint64_t *)(v24 + 24);
          v25 = (int *)(v24 + 32);
          v55 = v15;
          do
          {
            v26 = *((_DWORD *)v22 + 4);
            if (v26 < 0x100)
              v27 = WTF::StringImpl::hashSlowCase(v22);
            else
              v27 = v26 >> 8;
            v28 = (v19 + v15 - ((v27 ^ v60) & v18)) & v18;
            if (v23 > v28)
            {
              v29 = *v56;
              *v56 = 0;
              v64 = 0;
              v30 = *v59;
              v61 = *v59;
              *v59 = 0;
              v31 = *v58;
              v62 = *v58;
              *v58 = 0;
              v32 = *v57;
              v63 = *v57;
              *v57 = 0;
              v33 = *v25;
              LODWORD(v64) = *v25;
              *v25 = 0;
              v34 = *(WTF::StringImpl **)v21;
              *(_QWORD *)v21 = 0;
              v35 = *v56;
              *v56 = v34;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                {
                  WTF::StringImpl::destroy(v35, v8);
                  v36 = *v59;
                }
                else
                {
                  v36 = 0;
                  *(_DWORD *)v35 -= 2;
                }
              }
              else
              {
                v36 = 0;
              }
              *v59 = *(_QWORD *)(v21 + 8);
              *(_QWORD *)(v21 + 8) = v36;
              v37 = *v58;
              *v58 = *(_QWORD *)(v21 + 16);
              *(_QWORD *)(v21 + 16) = v37;
              v38 = *v57;
              *v57 = *(_QWORD *)(v21 + 24);
              *(_QWORD *)(v21 + 24) = v38;
              v39 = *v25;
              *v25 = *(_DWORD *)(v21 + 32);
              *(_DWORD *)(v21 + 32) = v39;
              v40 = *(WTF::StringImpl **)v21;
              *(_QWORD *)v21 = v29;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                {
                  WTF::StringImpl::destroy(v40, v8);
                  v37 = *(_QWORD *)(v21 + 16);
                  v38 = *(_QWORD *)(v21 + 24);
                }
                else
                {
                  *(_DWORD *)v40 -= 2;
                }
              }
              v41 = *(_QWORD *)(v21 + 8);
              *(_QWORD *)(v21 + 8) = v30;
              *(_QWORD *)(v21 + 16) = v31;
              v61 = v41;
              v62 = v37;
              *(_QWORD *)(v21 + 24) = v32;
              v63 = v38;
              v42 = *(_DWORD *)(v21 + 32);
              *(_DWORD *)(v21 + 32) = v33;
              LODWORD(v64) = v42;
              WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque(&v61, v8);
              v3 = v54;
              v15 = v55;
              v23 = v28;
            }
            v19 = (v19 + 1) & v18;
            ++v23;
            v20 = *v3;
            v21 = *v3 + 40 * v19;
            v22 = *(WTF::StringImpl **)v21;
          }
          while (*(_QWORD *)v21);
          v4 = v51;
          v5 = v52;
        }
        v43 = *v56;
        *v56 = 0;
        v44 = *(WTF::StringImpl **)v21;
        *(_QWORD *)v21 = v43;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, v8);
          else
            *(_DWORD *)v44 -= 2;
        }
        v45 = v20 + 40 * v19;
        v13 = v53;
        v46 = (char *)v5 + 40 * v53;
        v47 = *(_QWORD *)(v45 + 8);
        *(_QWORD *)(v45 + 8) = *((_QWORD *)v46 + 1);
        *((_QWORD *)v46 + 1) = v47;
        v48 = *(_QWORD *)(v45 + 16);
        *(_QWORD *)(v45 + 16) = *((_QWORD *)v46 + 2);
        *((_QWORD *)v46 + 2) = v48;
        v49 = *(_QWORD *)(v45 + 24);
        *(_QWORD *)(v45 + 24) = *((_QWORD *)v46 + 3);
        *((_QWORD *)v46 + 3) = v49;
        LODWORD(v49) = *(_DWORD *)(v45 + 32);
        *(_DWORD *)(v45 + 32) = *((_DWORD *)v46 + 8);
        *((_DWORD *)v46 + 8) = v49;
      }
      WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)v5 + 5 * v13 + 1, v8);
      v50 = *v56;
      *v56 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v8);
        else
          *(_DWORD *)v50 -= 2;
      }
      ++v13;
    }
    while (v13 != v4);
  }
  else if (!v5)
  {
    return;
  }
  WTF::fastFree(v5, v8);
}

WebCore::LocalWebLockRegistry::PerOriginRegistry *WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *result;
  void *v10;

  v1 = *(unsigned int *)(a1 + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x2AAAAAA)
  {
    __break(0xC471u);
    JUMPOUT(0x19551E5A8);
  }
  v4 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)(a1 + 16);
  v5 = 96 * v2 + 96;
  v6 = WTF::fastMalloc((WTF *)(96 * v2 + 96));
  *(_DWORD *)(a1 + 24) = (v5 & 0xFFFFFFE0) / 0x60;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 <= v7)
  {
    result = WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::move((WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v4 + 96 * *(_QWORD *)a1), (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v4 + 96 * v7), v6 + 96 * *(_QWORD *)a1);
    if (!v4)
      return result;
  }
  else
  {
    WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::move(v4, (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v4 + 96 * v7), v6);
    v8 = *(_QWORD *)a1 - v1 + *(unsigned int *)(a1 + 24);
    result = WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::move((WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v4 + 96 * *(_QWORD *)a1), (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v4 + 96 * v1), *(_QWORD *)(a1 + 16) + 96 * v8);
    *(_QWORD *)a1 = v8;
    if (!v4)
      return result;
  }
  if (*(WebCore::LocalWebLockRegistry::PerOriginRegistry **)(a1 + 16) == v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return (WebCore::LocalWebLockRegistry::PerOriginRegistry *)WTF::fastFree(v4, v10);
}

WebCore::LocalWebLockRegistry::PerOriginRegistry *WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::move(WebCore::LocalWebLockRegistry::PerOriginRegistry *result, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v5;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *(_OWORD *)((char *)v5 + 8);
      v8 = *(_OWORD *)((char *)v5 + 24);
      v9 = *(_OWORD *)((char *)v5 + 40);
      *(_OWORD *)(a3 + 49) = *(_OWORD *)((char *)v5 + 49);
      *(_OWORD *)(a3 + 40) = v9;
      *(_OWORD *)(a3 + 24) = v8;
      *(_OWORD *)(a3 + 8) = v7;
      v10 = *((_QWORD *)v5 + 9);
      *((_QWORD *)v5 + 9) = 0;
      *(_QWORD *)(a3 + 72) = v10;
      v11 = *((_QWORD *)v5 + 10);
      *((_QWORD *)v5 + 10) = 0;
      *(_QWORD *)(a3 + 80) = v11;
      v12 = *((_QWORD *)v5 + 11);
      *((_QWORD *)v5 + 11) = 0;
      *(_QWORD *)(a3 + 88) = v12;
      v13 = *((_QWORD *)v5 + 11);
      *((_QWORD *)v5 + 11) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = (WTF::StringImpl *)*((_QWORD *)v5 + 10);
      *((_QWORD *)v5 + 10) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = *((_QWORD *)v5 + 9);
      *((_QWORD *)v5 + 9) = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      result = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(result, a2);
          result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)WTF::fastFree(v16, v17);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v5 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v5 + 96);
      a3 += 96;
    }
    while (v5 != a2);
  }
  return result;
}

WebCore::LocalWebLockRegistry::PerOriginRegistry *WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo>::moveOverlapping(WebCore::LocalWebLockRegistry::PerOriginRegistry *result, WebCore::LocalWebLockRegistry::PerOriginRegistry *a2, unint64_t a3)
{
  unint64_t v3;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v4;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v5;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;

  v3 = a3;
  v4 = a2;
  v5 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      v14 = a3 + 80 * ((a2 - result) / 80) - 80;
      v15 = a2;
      do
      {
        v16 = *((_QWORD *)v15 - 10);
        v15 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v15 - 80);
        *(_QWORD *)v15 = 0;
        *(_QWORD *)v14 = v16;
        v17 = *(_OWORD *)((char *)v15 + 8);
        v18 = *(_OWORD *)((char *)v15 + 24);
        v19 = *(_OWORD *)((char *)v15 + 40);
        *(_OWORD *)(v14 + 49) = *(_OWORD *)((char *)v15 + 49);
        *(_OWORD *)(v14 + 40) = v19;
        *(_OWORD *)(v14 + 24) = v18;
        *(_OWORD *)(v14 + 8) = v17;
        v20 = *((_QWORD *)v15 + 9);
        *((_QWORD *)v15 + 9) = 0;
        *(_QWORD *)(v14 + 72) = v20;
        v21 = *((_QWORD *)v15 + 9);
        *((_QWORD *)v15 + 9) = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)*((_QWORD *)v4 - 10);
        *((_QWORD *)v4 - 10) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(result, a2);
            result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)WTF::fastFree(v22, v23);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        v14 -= 80;
        v4 = v15;
      }
      while (v15 != v5);
    }
  }
  else
  {
    while (v5 != v4)
    {
      v6 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)v3 = v6;
      v7 = *(_OWORD *)((char *)v5 + 8);
      v8 = *(_OWORD *)((char *)v5 + 24);
      v9 = *(_OWORD *)((char *)v5 + 40);
      *(_OWORD *)(v3 + 49) = *(_OWORD *)((char *)v5 + 49);
      *(_OWORD *)(v3 + 40) = v9;
      *(_OWORD *)(v3 + 24) = v8;
      *(_OWORD *)(v3 + 8) = v7;
      v10 = *((_QWORD *)v5 + 9);
      *((_QWORD *)v5 + 9) = 0;
      *(_QWORD *)(v3 + 72) = v10;
      v11 = *((_QWORD *)v5 + 9);
      *((_QWORD *)v5 + 9) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      result = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(result, a2);
          result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)WTF::fastFree(v12, v13);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v5 = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)((char *)v5 + 80);
      v3 += 80;
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF **v11;
  unsigned int v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 40 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v12 = (v10 ^ v8) & v7;
  v11 = (WTF **)(v3 + 40 * v12);
  v13 = *v11;
  if (*v11)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
      if (++v14 > ((v12 + v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*v11, *a2, a3) & 1) != 0)
        return (uint64_t)v11;
      v3 = *a1;
      v12 = (v12 + 1) & v7;
      v11 = (WTF **)(*a1 + 40 * v12);
      v13 = *v11;
      if (!*v11)
        return v3 + 40 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 40 * *((unsigned int *)a1 + 2);
}

WebCore::LocalWebLockRegistry::PerOriginRegistry *WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::moveOverlapping(WebCore::LocalWebLockRegistry::PerOriginRegistry *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v3;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;

  v3 = a2;
  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = (_QWORD *)(a3 + 96 * ((a2 - result) / 96) - 24);
    v6 = a2;
    do
    {
      v7 = *((_QWORD *)v6 - 12);
      v6 = (WTF::StringImpl *)((char *)v6 - 96);
      *(_QWORD *)v6 = 0;
      *(v5 - 9) = v7;
      v8 = *(_OWORD *)((char *)v6 + 8);
      v9 = *(_OWORD *)((char *)v6 + 24);
      v10 = *(_OWORD *)((char *)v6 + 40);
      *(_OWORD *)((char *)v5 - 23) = *(_OWORD *)((char *)v6 + 49);
      *((_OWORD *)v5 - 3) = v9;
      *((_OWORD *)v5 - 2) = v10;
      *((_OWORD *)v5 - 4) = v8;
      v11 = *((_QWORD *)v6 + 9);
      *((_QWORD *)v6 + 9) = 0;
      *v5 = v11;
      v12 = *((_QWORD *)v6 + 10);
      *((_QWORD *)v6 + 10) = 0;
      v5[1] = v12;
      v13 = *((_QWORD *)v6 + 11);
      *((_QWORD *)v6 + 11) = 0;
      v5[2] = v13;
      v14 = *((_QWORD *)v6 + 11);
      *((_QWORD *)v6 + 11) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = (WTF::StringImpl *)*((_QWORD *)v3 - 2);
      *((_QWORD *)v3 - 2) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = *((_QWORD *)v3 - 3);
      *((_QWORD *)v3 - 3) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)*((_QWORD *)v3 - 12);
      *((_QWORD *)v3 - 12) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(result, a2);
          result = (WebCore::LocalWebLockRegistry::PerOriginRegistry *)WTF::fastFree(v17, v18);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v5 -= 12;
      v3 = v6;
    }
    while (v6 != v4);
  }
  return result;
}

void WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::remove(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;

  v4 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = -1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)(a2 + 8), (WTF::StringImpl *)a2);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1;
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - *(_QWORD *)a1) >> 3);
  v11 = ((_DWORD)v10 + 1) & (v6 - 1);
  v12 = *(_QWORD *)a1 + 40 * v11;
  v13 = *(WTF::StringImpl **)v12;
  if (*(_QWORD *)v12)
  {
    v27 = *(_DWORD *)(a1 + 16);
    v14 = -858993459 * ((a2 - *(_QWORD *)a1) >> 3);
    v15 = (WTF::StringImpl **)(v9 + 40 * v10);
    v16 = (v10 + 1) & v8;
    do
    {
      v17 = *((_DWORD *)v13 + 4);
      if (v17 < 0x100)
        v18 = WTF::StringImpl::hashSlowCase(v13);
      else
        v18 = v17 >> 8;
      if (((v16 + v6 - ((v18 ^ v27) & v8)) & v8) == 0)
        break;
      v19 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      v20 = *v15;
      *v15 = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v5);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v9 + 40 * v14;
      v22 = v9 + 40 * v11;
      v23 = *(_OWORD *)(v21 + 8);
      v24 = *(_OWORD *)(v22 + 8);
      v22 += 8;
      *(_OWORD *)(v21 + 8) = v24;
      *(_OWORD *)v22 = v23;
      v25 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 16);
      *(_QWORD *)(v22 + 16) = v25;
      LODWORD(v25) = *(_DWORD *)(v21 + 32);
      *(_DWORD *)(v21 + 32) = *(_DWORD *)(v22 + 24);
      *(_DWORD *)(v22 + 24) = v25;
      WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>::~Deque((unint64_t *)v22, v5);
      v26 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v5);
        else
          *(_DWORD *)v26 -= 2;
      }
      *(_QWORD *)(v12 + 32) = 0;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      v11 = (v16 + 1) & v8;
      v9 = *(_QWORD *)a1;
      v14 = v16;
      v15 = (WTF::StringImpl **)(*(_QWORD *)a1 + 40 * v16);
      v12 = *(_QWORD *)a1 + 40 * v11;
      v13 = *(WTF::StringImpl **)v12;
      v16 = (v16 + 1) & v8;
    }
    while (*(_QWORD *)v12);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  if (v6 >= 9 && 6 * v7 < v6)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::FastRobinHoodHashTableSizePolicy>::rehash((uint64_t *)a1, v6 >> 1);
}

WTF *WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::FastRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WebCore::LocalWebLockRegistry::PerOriginRegistry::processLockRequestQueue(WTF::String const&,WTF::Deque<WebCore::LocalWebLockRegistry::PerOriginRegistry::LockRequest,0ul> &)::$_0>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::LocalWebLockRegistry::PerOriginRegistry *v9;
  WTF *v10;
  void *v11;
  WTF *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  v3 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF **)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v5)
  {
    v6 = *v4;
    v7 = 80 * v5;
    do
    {
      v8 = *((_QWORD *)v6 + 9);
      *((_QWORD *)v6 + 9) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = *(WebCore::LocalWebLockRegistry::PerOriginRegistry **)v6;
      *(_QWORD *)v6 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::LocalWebLockRegistry::PerOriginRegistry::~PerOriginRegistry(v9, a2);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v6 = (WTF *)((char *)v6 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  result = *v4;
  if (*v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *v4 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

unint64_t WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *((_BYTE *)v7 + 8) = *((_BYTE *)v9 + 8);
          v11 = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          *((_QWORD *)v7 + 2) = v11;
          v12 = (WTF::StringImpl *)*((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::LocalWebLockRegistry::clientIsGoingAway(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::UUID>)::$_0,BOOL,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo const&>::call(_QWORD *a1, _QWORD *a2)
{
  return a2[4] == a1[2] && a2[5] == a1[3] && a2[6] == a1[4];
}

BOOL WTF::Detail::CallableWrapper<WebCore::LocalWebLockRegistry::clientsAreGoingAway(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,BOOL,WebCore::LocalWebLockRegistry::PerOriginRegistry::LockInfo const&>::call(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48) == *(_QWORD *)(a1 + 8);
}

WTF::StringImpl *WebCore::AnalyserNode::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  double v27;
  char v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  char v33;
  _BYTE v34[8];
  uint64_t v35;
  char v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  const char *v39;
  unint64_t v40;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_QWORD *)v6 = off_1E3368A80;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = &unk_1E3368BA8;
  *(_BYTE *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 36) = 14;
  v8 = (unsigned int *)(a1 + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(v6 + 40) = a1;
  *(_DWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v6 + 88) = _Q0;
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)(v6 + 108) = 0;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(v7 + 120) = v15;
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v19;
  v20 = v18 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v19;
  *(_QWORD *)(v7 + 128) = v20;
  *(_QWORD *)(v7 + 136) = 2;
  *(_DWORD *)(v7 + 144) = 0;
  v37 = (uint64_t)"AudioNode";
  v38 = (WTF::StringImpl *)10;
  v39 = "AudioNode";
  v40 = v20;
  if (*(_BYTE *)(v15 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v37);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *(_QWORD *)v7 = off_1E3367E20;
  *(_QWORD *)(v7 + 24) = &unk_1E3367F48;
  *(_BYTE *)(v7 + 148) = 0;
  WebCore::AudioNode::addInput((WebCore::AudioNode *)v7);
  *(_QWORD *)v7 = off_1E3367CB8;
  *(_QWORD *)(v7 + 24) = &unk_1E3367DE0;
  WebCore::RealtimeAnalyser::RealtimeAnalyser(v7 + 152, (void *)*(unsigned __int8 *)(a1 + 384));
  WebCore::AudioNode::addOutput((WebCore::AudioNode *)v7, (void *)1);
  *(_BYTE *)(v7 + 32) = 1;
  v37 = 2;
  LODWORD(v38) = 0;
  WebCore::AudioNode::handleAudioNodeOptions(v7, (unsigned int *)a2, (unsigned int *)&v37, (uint64_t)v34);
  if (v36)
    goto LABEL_35;
  v22 = *(double *)(a2 + 32);
  v21 = *(double *)(a2 + 40);
  if (v22 <= v21)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v37) = 0;
    v38 = v32;
    LOBYTE(v39) = 1;
  }
  else
  {
    *(double *)(v7 + 232) = v21;
    *(double *)(v7 + 240) = v22;
    LOBYTE(v37) = 0;
    LOBYTE(v39) = 0;
  }
  std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v37, (uint64_t)v34);
  if ((_BYTE)v39)
  {
    v24 = v38;
    v38 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if (v36)
    goto LABEL_35;
  if (WebCore::RealtimeAnalyser::setFftSize((WebCore::RealtimeAnalyser *)(v7 + 152), *(unsigned int *)(a2 + 24)))
  {
    LOBYTE(v37) = 0;
    LOBYTE(v39) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v37) = 0;
    v38 = 0;
    LOBYTE(v39) = 1;
  }
  std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v37, (uint64_t)v34);
  if ((_BYTE)v39)
  {
    v26 = v38;
    v38 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if (v36)
    goto LABEL_35;
  v27 = *(double *)(a2 + 48);
  if (v27 < 0.0 || v27 > 1.0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = 1;
    v33 = 1;
    v38 = 0;
  }
  else
  {
    v28 = 0;
    *(double *)(v7 + 224) = v27;
    v33 = 0;
  }
  LOBYTE(v37) = 0;
  LOBYTE(v39) = v28;
  result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v37, (uint64_t)v34);
  if ((_BYTE)v39)
  {
    result = v38;
    v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v33)
    result = 0;
  if (v36)
  {
LABEL_35:
    v31 = v35;
    *(_BYTE *)a3 = v34[0];
    *(_QWORD *)(a3 + 8) = v31;
    *(_DWORD *)(a3 + 16) = 1;
    return WebCore::AudioNode::deref((WebCore::AudioNode *)v7);
  }
  else
  {
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

void WebCore::AnalyserNode::~AnalyserNode(WebCore::AnalyserNode *this, void *a2)
{
  void *v3;

  *((_BYTE *)this + 32) = 0;
  WebCore::RealtimeAnalyser::~RealtimeAnalyser((WTF **)this + 19, a2);
  WebCore::AudioNode::~AudioNode(this, v3);
}

{
  void *v3;
  bmalloc::api *v4;
  void *v5;

  *((_BYTE *)this + 32) = 0;
  WebCore::RealtimeAnalyser::~RealtimeAnalyser((WTF **)this + 19, a2);
  WebCore::AudioNode::~AudioNode(this, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::AnalyserNode::~AnalyserNode(WebCore::AnalyserNode *this, void *a2)
{
  WebCore::AudioNode *v2;
  void *v3;

  v2 = (WebCore::AnalyserNode *)((char *)this - 24);
  *((_BYTE *)this + 8) = 0;
  WebCore::RealtimeAnalyser::~RealtimeAnalyser((WTF **)this + 16, a2);
  WebCore::AudioNode::~AudioNode(v2, v3);
}

{
  WebCore::AudioNode *v2;
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::AnalyserNode *)((char *)this - 24);
  *((_BYTE *)this + 8) = 0;
  WebCore::RealtimeAnalyser::~RealtimeAnalyser((WTF **)this + 16, a2);
  WebCore::AudioNode::~AudioNode(v2, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::AnalyserNode::process(WebCore::AnalyserNode *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t k;
  uint64_t v9;
  void **v10;
  _QWORD *v11;
  WebCore::AudioBus **v12;
  uint64_t v13;
  int v14;
  WebCore::AudioBus **v15;
  WebCore::AudioBus *v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t j;
  uint64_t v24;
  void **v25;
  _QWORD *v26;

  if (*((_DWORD *)this + 21))
    v3 = **((_QWORD **)this + 9);
  else
    v3 = 0;
  v4 = 24;
  if (!*(_BYTE *)(v3 + 32))
    v4 = 16;
  v5 = *(_QWORD *)(v3 + v4);
  if (*((_BYTE *)this + 32))
  {
    if (*((_DWORD *)this + 17))
      v6 = **((_QWORD **)this + 7);
    else
      v6 = 0;
    if (*(_DWORD *)(v6 + 28) == 1 && !*(_DWORD *)(*(_QWORD *)(v6 + 64) + 140))
    {
      v13 = **(_QWORD **)(v6 + 16);
      v14 = *(unsigned __int8 *)(v13 + 32);
      v15 = (WebCore::AudioBus **)(v13 + 24);
      v12 = (WebCore::AudioBus **)(v13 + 16);
      if (v14)
        v12 = v15;
    }
    else
    {
      v12 = (WebCore::AudioBus **)(v6 + 80);
    }
    v16 = *v12;
    WebCore::RealtimeAnalyser::writeInput((WebCore::AnalyserNode *)((char *)this + 152), *v12, a2);
    if (*(_DWORD *)(**((_QWORD **)this + 7) + 28))
    {
      if (v16 != (WebCore::AudioBus *)v5)
      {
        v17 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v17)
        {
          for (i = 0; i < v17; ++i)
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * i);
            if (!*(_BYTE *)(v19 + 24))
            {
              *(_BYTE *)(v19 + 24) = 1;
              v20 = *(void ***)(v19 + 8);
              v21 = (_QWORD *)(v19 + 16);
              if (v20)
                v21 = v20 + 1;
              else
                v20 = (void **)v19;
              bzero(*v20, 4 * *v21);
              v17 = *(unsigned int *)(v5 + 28);
            }
          }
        }
        WebCore::AudioBus::sumFrom(v5, (uint64_t)v16, 0);
      }
    }
    else
    {
      v22 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v22)
      {
        for (j = 0; j < v22; ++j)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * j);
          if (!*(_BYTE *)(v24 + 24))
          {
            *(_BYTE *)(v24 + 24) = 1;
            v25 = *(void ***)(v24 + 8);
            v26 = (_QWORD *)(v24 + 16);
            if (v25)
              v26 = v25 + 1;
            else
              v25 = (void **)v24;
            bzero(*v25, 4 * *v26);
            v22 = *(unsigned int *)(v5 + 28);
          }
        }
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v7)
    {
      for (k = 0; k < v7; ++k)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * k);
        if (!*(_BYTE *)(v9 + 24))
        {
          *(_BYTE *)(v9 + 24) = 1;
          v10 = *(void ***)(v9 + 8);
          v11 = (_QWORD *)(v9 + 16);
          if (v10)
            v11 = v10 + 1;
          else
            v10 = (void **)v9;
          bzero(*v10, 4 * *v11);
          v7 = *(unsigned int *)(v5 + 28);
        }
      }
    }
  }
}

uint64_t WebCore::AnalyserNode::requiresTailProcessing(WebCore::AnalyserNode *this)
{
  return 1;
}

uint64_t *WebCore::AnalyserNode::updatePullStatus(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::BaseAudioContext *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::AnalyserNode *v9;
  uint64_t *v10;
  _QWORD v11[2];
  char v12;

  v1 = this;
  if (*((_DWORD *)this + 21))
    v2 = *(_QWORD *)this[9];
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 && *(_DWORD *)(v3 - 12) || (v4 = *(_QWORD *)(v2 + 64)) != 0 && *(_DWORD *)(v4 - 12))
  {
    if (*((_BYTE *)this + 148))
    {
      v5 = *((unsigned int *)this + 12);
      if ((_DWORD)v5 != -1)
      {
        v11[0] = &v10;
        v6 = (WebCore::BaseAudioContext *)((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(v11, this + 5);
        this = WebCore::BaseAudioContext::removeAutomaticPullNode(v6, (WebCore::AudioNode *)v1);
        *((_BYTE *)v1 + 148) = 0;
        return this;
      }
      goto LABEL_18;
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)this[7] + 28) && !*((_BYTE *)this + 148))
  {
    v7 = *((unsigned int *)this + 12);
    if ((_DWORD)v7 == -1)
    {
LABEL_18:
      v9 = (WebCore::AnalyserNode *)std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebCore::AnalyserNode::propagatesSilence(v9);
    }
    v11[0] = &v10;
    v8 = ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(v11, this + 5);
    v10 = v1;
    this = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v8 + 208), (uint64_t *)&v10, (uint64_t)v11);
    if (v12)
      *(_BYTE *)(v8 + 382) = 1;
    *((_BYTE *)v1 + 148) = 1;
  }
  return this;
}

uint64_t WebCore::AnalyserNode::propagatesSilence(WebCore::AnalyserNode *this)
{
  return 0;
}

uint64_t *WebCore::AnalyserNode::tailTime(WebCore::AnalyserNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  float v7;
  char v8;
  char *v9;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v4 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AsyncAudioDecoder::decodeAsync(v4, v5, v6, v7);
  }
  else
  {
    v9 = &v8;
    v2 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v9, (char *)this + 40);
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  }
}

uint64_t *WebCore::AsyncAudioDecoder::decodeAsync@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  __int128 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _BYTE *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  float v29;
  unsigned int *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v5 = *a1;
  v6 = *a2;
  *a2 = 0;
  *((_QWORD *)&v27 + 1) = 0;
  v28 = v6;
  v29 = a4;
  v26 = 0uLL;
  *(_QWORD *)&v27 = "decodeAsync";
  v7 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v7 + 8) = 1;
  v8 = (unsigned int *)(v7 + 8);
  *(_QWORD *)v7 = off_1E3368688;
  v9 = v27;
  *(_OWORD *)(v7 + 16) = v26;
  *(_OWORD *)(v7 + 32) = v9;
  *(_BYTE *)(v7 + 48) = 0;
  v10 = (unsigned __int8 *)(v7 + 48);
  *(_DWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = v7 + 104;
  *(_QWORD *)(v7 + 96) = 1;
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_WORD *)(v7 + 128) = 0;
  v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v11 && v11[16] >= 4u)
    v11 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v11, v7);
  v36 = v26;
  v37 = v27;
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_7:
    v11 = (unsigned __int8 *)MEMORY[0x19AEA534C](v10);
    goto LABEL_8;
  }
  if (__stxr(1u, v10))
    goto LABEL_7;
LABEL_8:
  v13 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v13 && v13[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v13, (WTF::Logger::LogSiteIdentifier *)&v26, " runSynchronouslyOnTarget ", v7);
  atomic_store(0, (unsigned __int8 *)(v7 + 129));
  v14 = __ldxr(v10);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v10))
  {
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_16;
  }
  do
LABEL_16:
    v15 = __ldaxr(v8);
  while (__stlxr(v15 + 1, v8));
  v16 = v28;
  v17 = v29;
  v31 = v36;
  v32 = v37;
  v28 = 0;
  v34 = v29;
  v18 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v18 = off_1E33686D8;
  *(_QWORD *)(v18 + 8) = v7;
  v19 = v32;
  *(_OWORD *)(v18 + 16) = v31;
  *(_OWORD *)(v18 + 32) = v19;
  v30 = 0;
  v33 = 0;
  *(_QWORD *)(v18 + 48) = v16;
  *(float *)(v18 + 56) = v17;
  v35 = v18;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v35);
  v20 = v35;
  v35 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v33);
  if (v30)
  {
    WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead((uint64_t)v30);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      v22 = v21 + 2;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v21 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
      }
    }
  }
  *a3 = v7;
  return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v28);
}

uint64_t WebCore::AudioBasicInspectorNode::pullInputs(WebCore::AudioBasicInspectorNode *this, uint64_t a2)
{
  uint64_t v3;
  WebCore::AudioNodeInput *v4;
  uint64_t v5;
  WebCore::AudioBus *v6;

  if (*((_DWORD *)this + 21))
    v3 = **((_QWORD **)this + 9);
  else
    v3 = 0;
  if (!*((_DWORD *)this + 17))
  {
    v4 = 0;
    if (v3)
      goto LABEL_6;
LABEL_11:
    v6 = 0;
    return WebCore::AudioNodeInput::pull(v4, v6, a2);
  }
  v4 = (WebCore::AudioNodeInput *)**((_QWORD **)this + 7);
  if (!v3)
    goto LABEL_11;
LABEL_6:
  v5 = 24;
  if (!*(_BYTE *)(v3 + 32))
    v5 = 16;
  v6 = *(WebCore::AudioBus **)(v3 + v5);
  return WebCore::AudioNodeInput::pull(v4, v6, a2);
}

uint64_t WebCore::AudioBasicInspectorNode::checkNumberOfChannelsForInput(uint64_t this, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  WebCore::AudioNodeInput *v4;
  WebCore::AudioNodeOutput *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = (uint64_t *)a2;
  v3 = this;
  if (*(_DWORD *)(this + 68))
    v4 = **(WebCore::AudioNodeInput ***)(this + 56);
  else
    v4 = 0;
  if (v4 == (WebCore::AudioNodeInput *)a2)
  {
    if (!*(_DWORD *)(this + 84))
      goto LABEL_42;
    v5 = **(WebCore::AudioNodeOutput ***)(this + 72);
    if (!v5)
      goto LABEL_42;
    v6 = *(_QWORD *)(a2 + 64);
    v7 = *(_DWORD *)(v6 + 140);
    if (v7 == 2)
    {
      a2 = *(unsigned int *)(v6 + 136);
LABEL_40:
      if ((_DWORD)a2 != *((_DWORD *)v5 + 2))
        WebCore::AudioNodeOutput::setNumberOfChannels(v5, a2);
LABEL_42:
      WebCore::AudioNodeInput::updateInternalBus(v2, (void *)a2);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3);
    }
    v8 = *(_QWORD *)(a2 + 40);
    if (v8)
    {
      v9 = *(unsigned int *)(v8 - 4);
      v10 = v8 + 8 * v9;
      if (*(_DWORD *)(v8 - 12))
      {
        v11 = *(_QWORD *)(a2 + 40);
        if ((_DWORD)v9)
        {
          v12 = 8 * v9;
          v11 = *(_QWORD *)(a2 + 40);
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 += 8;
            v12 -= 8;
            if (!v12)
            {
              v11 = v10;
              goto LABEL_19;
            }
          }
        }
        goto LABEL_19;
      }
      v11 = v8 + 8 * v9;
    }
    else
    {
      v11 = 0;
      v9 = 0;
    }
    v10 = v8 + 8 * v9;
LABEL_19:
    if (v8)
      v8 += 8 * *(unsigned int *)(v8 - 4);
    if (v8 == v11)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      do
      {
        v14 = v11 + 8;
        v15 = *(_DWORD *)(*(_QWORD *)v11 + 8);
        if (v13 <= v15)
          v13 = v15;
        v11 = v10;
        if (v14 != v10)
        {
          v11 = v14;
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 += 8;
            if (v11 == v10)
            {
              v11 = v10;
              break;
            }
          }
        }
      }
      while (v11 != v8);
    }
    if (v13 <= 1)
      a2 = 1;
    else
      a2 = v13;
    if (v7 == 1)
    {
      v16 = *(_DWORD *)(v6 + 136);
      if (v16 >= a2)
        a2 = a2;
      else
        a2 = v16;
    }
    goto LABEL_40;
  }
  return this;
}

uint64_t *WebCore::AudioBasicInspectorNode::updatePullStatus(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::BaseAudioContext *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD v12[2];
  char v13;

  v1 = this;
  if (*((_DWORD *)this + 21))
  {
    v2 = *(_QWORD *)this[9];
    if (v2)
    {
      if ((v3 = *(_QWORD *)(v2 + 40)) != 0 && *(_DWORD *)(v3 - 12)
        || (v4 = *(_QWORD *)(v2 + 64)) != 0 && *(_DWORD *)(v4 - 12))
      {
        v5 = *((unsigned __int8 *)this + 148);
        goto LABEL_14;
      }
    }
  }
  v5 = *((unsigned __int8 *)this + 148);
  if (!*(_DWORD *)(*(_QWORD *)this[7] + 28))
  {
LABEL_14:
    if (!v5)
      return this;
    v8 = *((unsigned int *)this + 12);
    if ((_DWORD)v8 != -1)
    {
      v12[0] = &v11;
      v9 = (WebCore::BaseAudioContext *)((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(v12, this + 5);
      this = WebCore::BaseAudioContext::removeAutomaticPullNode(v9, (WebCore::AudioNode *)v1);
      *((_BYTE *)v1 + 148) = 0;
      return this;
    }
LABEL_18:
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebCore::AudioBasicProcessorNode::initialize(v10);
  }
  if (*((_BYTE *)this + 148))
    return this;
  v6 = *((unsigned int *)this + 12);
  if ((_DWORD)v6 == -1)
    goto LABEL_18;
  v12[0] = &v11;
  v7 = ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(v12, this + 5);
  v11 = v1;
  this = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v7 + 208), (uint64_t *)&v11, (uint64_t)v12);
  if (v13)
    *(_BYTE *)(v7 + 382) = 1;
  *((_BYTE *)v1 + 148) = 1;
  return this;
}

uint64_t WebCore::AudioBasicProcessorNode::initialize(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 32))
  {
    v1 = this;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 152) + 16))(*(_QWORD *)(this + 152));
    *(_BYTE *)(v1 + 32) = 1;
  }
  return this;
}

uint64_t WebCore::AudioBasicProcessorNode::uninitialize(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 32))
  {
    v1 = this;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 152) + 24))(*(_QWORD *)(this + 152));
    *(_BYTE *)(v1 + 32) = 0;
  }
  return this;
}

void WebCore::AudioBasicProcessorNode::process(WebCore::AudioBasicProcessorNode *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t j;
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  void **v22;
  _QWORD *v23;

  if (*((_DWORD *)this + 21))
    v4 = **((_QWORD **)this + 9);
  else
    v4 = 0;
  v5 = 24;
  if (!*(_BYTE *)(v4 + 32))
    v5 = 16;
  v6 = *(_QWORD *)(v4 + v5);
  if (*((_BYTE *)this + 32)
    && (v7 = *((_QWORD *)this + 19)) != 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7) == *(_DWORD *)(**((_QWORD **)this + 9) + 8))
  {
    if (*((_DWORD *)this + 17))
      v8 = **((_QWORD **)this + 7);
    else
      v8 = 0;
    if (*(_DWORD *)(v8 + 28) == 1 && !*(_DWORD *)(*(_QWORD *)(v8 + 64) + 140))
    {
      v15 = **(_QWORD **)(v8 + 16);
      v16 = *(unsigned __int8 *)(v15 + 32);
      v17 = (uint64_t *)(v15 + 24);
      v14 = (uint64_t *)(v15 + 16);
      if (v16)
        v14 = v17;
    }
    else
    {
      v14 = (uint64_t *)(v8 + 80);
    }
    v18 = *v14;
    if (!*(_DWORD *)(**((_QWORD **)this + 7) + 28))
    {
      v19 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v19)
      {
        for (i = 0; i < v19; ++i)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * i);
          if (!*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 1;
            v22 = *(void ***)(v21 + 8);
            v23 = (_QWORD *)(v21 + 16);
            if (v22)
              v23 = v22 + 1;
            else
              v22 = (void **)v21;
            bzero(*v22, 4 * *v23);
            v19 = *(unsigned int *)(v18 + 28);
          }
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 32))(*((_QWORD *)this + 19), v18, v6, a2);
  }
  else
  {
    v9 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v9)
    {
      for (j = 0; j < v9; ++j)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * j);
        if (!*(_BYTE *)(v11 + 24))
        {
          *(_BYTE *)(v11 + 24) = 1;
          v12 = *(void ***)(v11 + 8);
          v13 = (_QWORD *)(v11 + 16);
          if (v12)
            v13 = v12 + 1;
          else
            v12 = (void **)v11;
          bzero(*v12, 4 * *v13);
          v9 = *(unsigned int *)(v6 + 28);
        }
      }
    }
  }
}

uint64_t WebCore::AudioBasicProcessorNode::processOnlyAudioParams(uint64_t this)
{
  if (*(_BYTE *)(this + 32))
  {
    this = *(_QWORD *)(this + 152);
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 40))(this);
  }
  return this;
}

uint64_t WebCore::AudioBasicProcessorNode::pullInputs(WebCore::AudioBasicProcessorNode *this, uint64_t a2)
{
  WebCore::AudioNodeInput *v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_DWORD *)this + 17))
    v3 = (WebCore::AudioNodeInput *)**((_QWORD **)this + 7);
  else
    v3 = 0;
  if (*((_DWORD *)this + 21))
    v4 = **((_QWORD **)this + 9);
  else
    v4 = 0;
  v5 = 24;
  if (!*(_BYTE *)(v4 + 32))
    v5 = 16;
  return WebCore::AudioNodeInput::pull(v3, *(WebCore::AudioBus **)(v4 + v5), a2);
}

uint64_t *WebCore::AudioBasicProcessorNode::checkNumberOfChannelsForInput(uint64_t *this, WebCore::AudioNodeInput *a2)
{
  uint64_t v3;
  WebCore::AudioNodeInput *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::AudioNodeOutput *v17;

  v3 = (uint64_t)this;
  if (*((_DWORD *)this + 17))
    v4 = *(WebCore::AudioNodeInput **)this[7];
  else
    v4 = 0;
  if (v4 != a2 || !this[19])
    return this;
  v5 = *((_QWORD *)a2 + 8);
  v6 = *(_DWORD *)(v5 + 140);
  if (v6 != 2)
  {
    v8 = *((_QWORD *)a2 + 5);
    if (v8)
    {
      v9 = *(unsigned int *)(v8 - 4);
      v10 = v8 + 8 * v9;
      if (*(_DWORD *)(v8 - 12))
      {
        v11 = *((_QWORD *)a2 + 5);
        if ((_DWORD)v9)
        {
          v12 = 8 * v9;
          v11 = *((_QWORD *)a2 + 5);
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 += 8;
            v12 -= 8;
            if (!v12)
            {
              v11 = v10;
              goto LABEL_19;
            }
          }
        }
        goto LABEL_19;
      }
      v11 = v8 + 8 * v9;
    }
    else
    {
      v11 = 0;
      v9 = 0;
    }
    v10 = v8 + 8 * v9;
LABEL_19:
    if (v8)
      v8 += 8 * *(unsigned int *)(v8 - 4);
    if (v8 == v11)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      do
      {
        v14 = v11 + 8;
        v15 = *(_DWORD *)(*(_QWORD *)v11 + 8);
        if (v13 <= v15)
          v13 = v15;
        v11 = v10;
        if (v14 != v10)
        {
          v11 = v14;
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 += 8;
            if (v11 == v10)
            {
              v11 = v10;
              break;
            }
          }
        }
      }
      while (v11 != v8);
    }
    if (v13 <= 1)
      v7 = 1;
    else
      v7 = v13;
    if (v6 == 1)
    {
      v16 = *(_DWORD *)(v5 + 136);
      if (v16 >= v7)
        v7 = v7;
      else
        v7 = v16;
    }
    goto LABEL_40;
  }
  v7 = *(unsigned int *)(v5 + 136);
LABEL_40:
  if (*((_BYTE *)this + 32) && (_DWORD)v7 != *(_DWORD *)(*(_QWORD *)this[9] + 8))
    (*(void (**)(uint64_t *))(*this + 144))(this);
  if (!*(_BYTE *)(v3 + 32))
  {
    if (*(_DWORD *)(v3 + 84))
      v17 = **(WebCore::AudioNodeOutput ***)(v3 + 72);
    else
      v17 = 0;
    WebCore::AudioNodeOutput::setNumberOfChannels(v17, v7);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 152) + 56))(*(_QWORD *)(v3 + 152), v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
  }
  return WebCore::AudioNodeInput::updateInternalBus((uint64_t *)a2, a2);
}

uint64_t WebCore::AudioBasicProcessorNode::tailTime(WebCore::AudioBasicProcessorNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 72))(*((_QWORD *)this + 19));
}

uint64_t WebCore::AudioBasicProcessorNode::latencyTime(WebCore::AudioBasicProcessorNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 80))(*((_QWORD *)this + 19));
}

uint64_t WebCore::AudioBasicProcessorNode::requiresTailProcessing(WebCore::AudioBasicProcessorNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 88))(*((_QWORD *)this + 19));
}

uint64_t WebCore::AudioBuffer::visitChannelWrappers<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 33);
  if (__ldaxr((unsigned __int8 *)(result + 33)))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result + 33);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(unsigned int **)(v3 + 24);
  if (v6)
    v7 = v6 + 2;
  else
    v7 = 0;
  if (v6)
    v8 = (uint64_t)&v6[4 * *v6 + 2];
  else
    v8 = 0;
  while (v7 != (unsigned int *)v8)
  {
    v9 = (unint64_t *)*((_QWORD *)v7 + 1);
    if (v9)
    {
      if ((v9[1] & 3) == 0)
      {
        v10 = *v9;
        if (*v9)
        {
          if ((v10 & 8) != 0)
          {
            if ((*(_BYTE *)(v10 - 79) & 1) != 0)
            {
LABEL_20:
              if (!*(_QWORD *)(a2 + 168))
                goto LABEL_15;
            }
          }
          else
          {
            if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
              result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000));
            if (((*(_QWORD *)((v10 & 0xFFFFFFFFFFFFC000) + 8 * ((v10 >> 10) & 0xF) + 0x28) >> (v10 >> 4)) & 1) != 0)
              goto LABEL_20;
          }
          result = JSC::SlotVisitor::appendSlow();
        }
      }
    }
LABEL_15:
    v7 += 4;
  }
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

WTF **WebCore::AudioBuffer::create@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  unint64_t *v5;
  WTF **result;
  void *v7;

  if (*(_DWORD *)a1 && *(_DWORD *)a1 < 0x21u && *((_DWORD *)a1 + 1) && (v4 = a1[2], v4 >= 3000.0) && v4 <= 384000.0)
  {
    v5 = (unint64_t *)WTF::fastMalloc((WTF *)0x28);
    result = (WTF **)WebCore::AudioBuffer::AudioBuffer(v5, (void *)*(unsigned int *)a1, *((unsigned int *)a1 + 1), 0, a1[2]);
    if (result[1])
    {
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 16) = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 6;
      *(_DWORD *)(a2 + 16) = 1;
      return WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v5, v7);
    }
  }
  else
  {
    result = (WTF **)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 6;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

unint64_t *WebCore::AudioBuffer::AudioBuffer(unint64_t *this, void *a2, unint64_t a3, int a4, float a5)
{
  unint64_t *v5;
  WTF **v6;
  BOOL v7;
  int v8;
  WTF *v10;
  unsigned int v11;
  void *v12;
  JSC::ArrayBufferView *v13;
  uint64_t v14;
  char *v15;
  JSC::ArrayBufferView *v16;
  JSC::ArrayBufferView *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  _QWORD *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v31;
  JSC::ArrayBufferView *v32;
  WTF *v33;
  uint64_t v34;

  v5 = this;
  *(_DWORD *)this = 1;
  *((float *)this + 1) = a5;
  this[2] = 0;
  v6 = (WTF **)(this + 2);
  this[1] = a3;
  this[3] = 0;
  *((_BYTE *)this + 32) = a4 ^ 1;
  *((_BYTE *)this + 33) = 0;
  *((_DWORD *)this + 9) = 0;
  v7 = !is_mul_ok(a3, a2);
  if (a3 > 0x40000000 || v7 || a3 * a2 >= 0x100000001)
  {
    WebCore::AudioBuffer::releaseMemory((WebCore::AudioBuffer *)this, a2);
    v5[1] = 0;
    return v5;
  }
  v8 = (int)a2;
  v33 = 0;
  v34 = 0;
  if (!(_DWORD)a2)
  {
LABEL_23:
    WTF::FixedVector<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>>::operator=<0ul,WTF::CrashOnOverflow>(v6, &v33);
    v18 = *v6;
    if (*v6)
    {
      v19 = *(unsigned int *)v18;
      if ((_DWORD)v19)
      {
        v20 = 8;
        v21 = (WTF *)WTF::fastMalloc((WTF *)((16 * v19) | 8));
        v18 = v21;
        *(_DWORD *)v21 = v19;
        do
        {
          v22 = (_QWORD *)((char *)v21 + v20);
          *v22 = 0;
          v22[1] = 0;
          __dmb(0xAu);
          v23 = *(_QWORD *)((char *)v21 + v20 + 8);
          v22[1] = 0;
          if (v23)
            *(_QWORD *)(v23 + 8) = 3;
          v20 += 16;
        }
        while (v22 + 2 != (_QWORD *)((char *)v21 + 16 * v19 + 8));
      }
      else
      {
        v18 = 0;
      }
    }
    v24 = (WTF *)v5[3];
    v5[3] = (unint64_t)v18;
    if (v24)
    {
      v25 = *(unsigned int *)v24;
      if ((_DWORD)v25)
      {
        v26 = 16 * v25;
        v27 = (char *)v24 + 16;
        do
        {
          if (*(_QWORD *)v27)
          {
            *(_QWORD *)(*(_QWORD *)v27 + 8) = 3;
            *(_QWORD *)v27 = 0;
          }
          v27 += 16;
          v26 -= 16;
        }
        while (v26);
      }
      WTF::fastFree(v24, v12);
    }
LABEL_38:
    v28 = v33;
    if (HIDWORD(v34))
    {
      v29 = 8 * HIDWORD(v34);
      v30 = v33;
      do
      {
        v31 = *(_DWORD **)v30;
        *(_QWORD *)v30 = 0;
        if (v31)
        {
          if (*v31 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*v31;
        }
        v30 = (WTF *)((char *)v30 + 8);
        v29 -= 8;
      }
      while (v29);
    }
    if (v28)
      WTF::fastFree(v28, v12);
    return v5;
  }
  if (!(a2 >> 29))
  {
    v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
    v11 = 0;
    LODWORD(v34) = v8;
    v33 = v10;
    while (1)
    {
      JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(v5[1], (uint64_t *)&v32);
      v13 = v32;
      if (v32)
      {
        if (a4)
          JSC::ArrayBufferView::setDetachable(v32);
        v14 = v11;
        if (v11 == (_DWORD)v34)
        {
          v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v33, v11 + 1, (unint64_t)&v32);
          v14 = HIDWORD(v34);
          v11 = HIDWORD(v34) + 1;
          v10 = v33;
          v16 = *(JSC::ArrayBufferView **)v15;
          *(_QWORD *)v15 = 0;
        }
        else
        {
          ++v11;
          v16 = v32;
          v32 = 0;
        }
        *((_QWORD *)v10 + v14) = v16;
        HIDWORD(v34) = v11;
      }
      else
      {
        WebCore::AudioBuffer::releaseMemory((WebCore::AudioBuffer *)v5, v12);
        v5[1] = 0;
      }
      v17 = v32;
      v32 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v17;
      }
      if (!v13)
        goto LABEL_38;
      if (!--v8)
        goto LABEL_23;
    }
  }
  __break(0xC471u);
  return this;
}

uint64_t JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  result = JSC::ArrayBuffer::tryCreate();
  v5 = (_QWORD *)v13;
  if (v13)
  {
    if (*(_BYTE *)(v13 + 64) && (v12 = *(_QWORD *)(v13 + 32)) != 0)
      v6 = *(_QWORD *)(v12 + 32);
    else
      v6 = *(_QWORD *)(v13 + 48);
    if (a1 <= v6 >> 2)
    {
      WTF::fastMalloc((WTF *)0x28);
      result = JSC::ArrayBufferView::ArrayBufferView();
      v5 = (_QWORD *)v13;
      *a2 = result;
    }
    else
    {
      *a2 = 0;
    }
    v7 = *(_DWORD *)v5 == 2;
    *(_DWORD *)v5 -= 2;
    if (v7)
    {
      v8 = v5[10];
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        v5[10] = 0;
      }
      if ((v5[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
      v10 = (WTF *)v5[1];
      if ((v10 & 1) == 0 && v10)
      {
        v11 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v11, v9);
        }
        WTF::fastFree(v10, v9);
      }
      return WTF::fastFree((WTF *)v5, v9);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF **WTF::FixedVector<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>>::operator=<0ul,WTF::CrashOnOverflow>(WTF **a1, WTF **a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;

  v3 = *a2;
  v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4 + 8));
    v7 = v6;
    v8 = 0;
    *(_DWORD *)v6 = v4;
    do
    {
      v9 = *(_QWORD *)((char *)v3 + v8);
      *(_QWORD *)((char *)v3 + v8) = 0;
      *(_QWORD *)((char *)v6 + v8 + 8) = v9;
      v8 += 8;
    }
    while (v5 != v8);
    v10 = 0;
    do
    {
      v11 = *(_DWORD **)((char *)v3 + v10);
      *(_QWORD *)((char *)v3 + v10) = 0;
      if (v11)
      {
        if (*v11 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v11;
      }
      v10 += 8;
    }
    while (v5 != v10);
    if (v3)
    {
      WTF::fastFree(v3, a2);
      v3 = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  v12 = *a1;
  *a1 = v7;
  if (v12)
  {
    v14 = (_DWORD **)((char *)v12 + 8);
    v13 = *(unsigned int *)v12;
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          if (*v16 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*v16;
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    WTF::fastFree(v12, a2);
  }
  if (v3)
    WTF::fastFree(v3, a2);
  return a1;
}

WTF *WebCore::AudioBuffer::releaseMemory(WebCore::AudioBuffer *this, void *a2)
{
  unsigned __int8 *v3;
  WTF *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;

  v3 = (unsigned __int8 *)this + 33;
  if (__ldaxr((unsigned __int8 *)this + 33))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 33);
LABEL_5:
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v7 = (_DWORD **)((char *)v5 + 8);
    v6 = *(unsigned int *)v5;
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
        {
          if (*v9 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*v9;
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    WTF::fastFree(v5, a2);
  }
  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    v11 = *(unsigned int *)result;
    if ((_DWORD)v11)
    {
      v12 = 16 * v11;
      v13 = (char *)result + 16;
      do
      {
        if (*(_QWORD *)v13)
        {
          *(_QWORD *)(*(_QWORD *)v13 + 8) = 3;
          *(_QWORD *)v13 = 0;
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *((_DWORD *)this + 9) = 0;
  v14 = __ldxr(v3);
  if (v14 != 1)
  {
    __clrex();
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

void WebCore::AudioBuffer::getChannelData(WebCore::AudioBuffer *this@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v5;
  unsigned int *v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _QWORD *Allocator;
  uint64_t v21;
  unsigned int *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t (*v31)(uint64_t *);
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t *);
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;

  v5 = (unsigned int *)*((_QWORD *)this + 3);
  if (v5 && *v5 > a3)
  {
    WebCore::AudioBuffer::applyNoiseIfNeeded(this);
    v9 = (unsigned int *)*((_QWORD *)this + 2);
    if (*v9 <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x195520D58);
    }
    v10 = a3;
    v11 = v9 + 2;
    if (*(_BYTE *)(a2 + 3328))
    {
      v12 = (unsigned int *)*((_QWORD *)this + 3);
      if (*v12 <= a3)
      {
        __break(0xC471u);
        JUMPOUT(0x195520D78);
      }
      v13 = (unint64_t *)&v12[4 * a3 + 2];
      if (!*v13)
      {
        v15 = v13 + 1;
        v14 = v13[1];
        if (!v14 || !*(_QWORD *)v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
        {
          v16 = *(_QWORD *)(a2 + 56);
          v17 = *(_QWORD *)(a2 + 1832);
          if ((v17 & 1) != 0)
          {
            v31 = *(uint64_t (**)(uint64_t *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
            v32 = (uint64_t *)(a2 - 16);
            if ((a2 & 8) == 0)
              v32 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
            v38 = *v32;
            v39 = a2;
            v40 = (char *)(a2 + 1832);
            v33 = v16;
            v17 = v31(&v38);
            v16 = v33;
          }
          v18 = *(_DWORD **)&v11[2 * a3];
          if (v18)
          {
            ++*v18;
            v19 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(v16, v17, (uint64_t)v18);
            if (*v18 == 1)
              JSC::ArrayBufferView::operator delete();
            else
              --*v18;
          }
          else
          {
            v19 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(v16, v17, 0);
          }
          if ((v19 & 0xFFFE000000000002) != 0)
          {
            *v13 = v19;
            if (*v15)
            {
              *(_QWORD *)(*v15 + 8) = 3;
              *v15 = 0;
            }
          }
          else
          {
            Allocator = 0;
            *v13 = 0;
            if (v19)
            {
              if ((v19 & 8) != 0)
                v36 = (v19 - 112) | 1;
              else
                v36 = v19 & 0xFFFFFFFFFFFFC000;
              if ((v36 & 1) != 0)
                v37 = v36 + 47;
              else
                v37 = *(_QWORD *)v36 + 32;
              Allocator = *(_QWORD **)(v37 + 16);
              if (!Allocator)
                Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
              *(_QWORD *)(v37 + 16) = *Allocator;
              *Allocator = v19;
              Allocator[1] = 0;
              Allocator[2] = 0;
            }
            __dmb(0xAu);
            v21 = *v15;
            *v15 = Allocator;
            if (v21)
              *(_QWORD *)(v21 + 8) = 3;
          }
        }
      }
      v22 = (unsigned int *)*((_QWORD *)this + 3);
      if (*v22 <= a3)
      {
        __break(0xC471u);
        JUMPOUT(0x195520D98);
      }
      v23 = v22 + 2;
      v24 = *(_QWORD *)&v22[4 * a3 + 2];
      if (!v24)
      {
        v25 = *(_QWORD *)&v23[4 * a3 + 2];
        if (v25 && *(_QWORD *)v25)
        {
          if ((*(_BYTE *)(v25 + 8) & 3) != 0)
            v24 = 10;
          else
            v24 = *(_QWORD *)v25;
        }
        else
        {
          v24 = 10;
        }
      }
      v26 = 0;
      *(_QWORD *)a4 = v24;
    }
    else
    {
      v27 = *(_QWORD *)(a2 + 56);
      v28 = *(_QWORD *)(a2 + 1832);
      if ((v28 & 1) != 0)
      {
        v34 = *(uint64_t (**)(uint64_t *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        v35 = (uint64_t *)(a2 - 16);
        if ((a2 & 8) == 0)
          v35 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
        v38 = *v35;
        v39 = a2;
        v40 = (char *)(a2 + 1832);
        v28 = v34(&v38);
      }
      v29 = *(_DWORD **)&v11[2 * v10];
      if (v29)
      {
        ++*v29;
        v30 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(v27, v28, (uint64_t)v29);
        if (*v29 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v29;
      }
      else
      {
        v30 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(v27, v28, 0);
      }
      v26 = 0;
      *(_QWORD *)a4 = v30;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 0;
    v26 = 1;
  }
  *(_DWORD *)(a4 + 16) = v26;
}

void WebCore::AudioBuffer::applyNoiseIfNeeded(WebCore::AudioBuffer *this)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::AudioUtilities *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (*((float *)this + 9) != 0.0)
  {
    v2 = (unsigned int *)*((_QWORD *)this + 2);
    if (v2)
      v3 = v2 + 2;
    else
      v3 = 0;
    if (v2)
      v4 = (uint64_t)&v2[2 * *v2 + 2];
    else
      v4 = 0;
    if (v3 != (unsigned int *)v4)
    {
      v5 = MEMORY[0x1E0CC10F8];
      v6 = (_BYTE *)MEMORY[0x1E0CC10F0];
      do
      {
        v7 = *(_QWORD *)v3;
        v8 = *(_QWORD *)(*(_QWORD *)v3 + 32);
        if (!v8 || (v9 = *(_QWORD *)(v8 + 16)) == 0)
        {
          v12 = 0;
          goto LABEL_20;
        }
        v10 = *(_QWORD *)(v5 + 56);
        if (v10 && (*(_BYTE *)(v5 + 34) || !*v6))
        {
          v11 = v9 & 0x3FFFFFFFFLL;
          if (v11 + v10)
          {
            v12 = *(WebCore::AudioUtilities **)(v7 + 24);
            if (v12)
            {
              if (!*(_BYTE *)(v5 + 34) && *v6)
                goto LABEL_24;
              v12 = (WebCore::AudioUtilities *)(((unint64_t)v12 & 0x3FFFFFFFFLL) + v10);
            }
          }
          else
          {
            v12 = 0;
          }
          v13 = -v10;
          if (*(_BYTE *)(v5 + 34))
          {
            if (v11 == v13)
              goto LABEL_20;
          }
          else
          {
            if (*v6)
              v22 = 0;
            else
              v22 = v11 == v13;
            if (v22)
              goto LABEL_20;
          }
        }
        else
        {
          v12 = *(WebCore::AudioUtilities **)(v7 + 24);
        }
LABEL_24:
        v15 = *(_BYTE *)(v7 + 6);
        if ((v15 & 3) == 0)
        {
          v14 = *(_QWORD *)(v7 + 16);
          goto LABEL_26;
        }
        if (*(_BYTE *)(v8 + 64) && (v23 = *(_QWORD *)(v8 + 32)) != 0)
        {
          v16 = atomic_load((unint64_t *)(v23 + 32));
          v15 = *(_BYTE *)(v7 + 6);
        }
        else
        {
          v16 = *(_QWORD *)(v8 + 48);
        }
        v17 = *(_QWORD *)(v7 + 8);
        if ((v15 & 4) == 0)
        {
          v14 = *(_QWORD *)(v7 + 16);
          v18 = v14 + v17 <= v16 && v16 >= v17;
          if (v18)
            v14 = 0;
          goto LABEL_26;
        }
        v18 = v16 >= v17;
        v19 = v16 - v17;
        if (!v18)
        {
          v20 = *(_BYTE *)(v7 + 4) - 4;
          if (v20 > 7u)
            LOBYTE(v21) = 0;
          else
            v21 = qword_1968DEED0[(char)v20];
          v14 = (-1 << v21) & v19;
          goto LABEL_26;
        }
LABEL_20:
        v14 = 0;
LABEL_26:
        WebCore::AudioUtilities::applyNoise(v12, (float *)(v14 >> 2), *((float *)this + 9));
        v3 += 2;
      }
      while (v3 != (unsigned int *)v4);
    }
    *((_DWORD *)this + 9) = 0;
  }
}

uint64_t WebCore::AudioBuffer::channelData@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v21;

  v4 = *(_DWORD **)(this + 16);
  if (!v4)
    goto LABEL_26;
  v5 = *v4;
  if (v5 <= a2)
  {
    v4 = 0;
LABEL_26:
    *a3 = v4;
    return this;
  }
  v6 = v4 + 2;
  if (*MEMORY[0x1E0CC10F0])
  {
    v14 = 8 * v5;
    v15 = v6;
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)v15 + 32);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 16);
      if (!v17)
        break;
      v18 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v18)
      {
        v19 = v17 & 0x3FFFFFFFFLL;
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v19 + v18 == 0)
          break;
      }
      v15 += 2;
      v14 -= 8;
      if (!v14)
      {
LABEL_12:
        v4 = *(_DWORD **)&v6[2 * a2];
        if (v4)
          ++*v4;
        goto LABEL_26;
      }
    }
  }
  else
  {
    v7 = 8 * v5;
    v8 = v6;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v8 + 32);
      if (!v9)
        break;
      v10 = *(_QWORD *)(v9 + 16);
      if (!v10)
        break;
      v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      v12 = v10 & 0x3FFFFFFFFLL;
      if (v11 && v12 + v11 == 0)
        break;
      v8 += 2;
      v7 -= 8;
      if (!v7)
        goto LABEL_12;
    }
  }
  this = JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(0, (uint64_t *)&v21);
  v4 = v21;
  if (v21)
    goto LABEL_26;
  this = 47;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::AudioBuffer::rawChannelData(WebCore::AudioBuffer *this, unsigned int a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *v2;
    if (v3 > a2)
    {
      v4 = 8 * v3;
      v5 = v2 + 2;
      if (*MEMORY[0x1E0CC10F0])
      {
        while (1)
        {
          v20 = *(_QWORD *)(*(_QWORD *)v5 + 32);
          if (!v20)
            break;
          v17 = *(_QWORD *)(v20 + 16);
          if (!v17)
            break;
          v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v8)
          {
            v18 = v17 & 0x3FFFFFFFFLL;
            if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v18 + v8 == 0)
              break;
          }
          v5 += 2;
          v4 -= 8;
          if (!v4)
          {
LABEL_11:
            v11 = *(_QWORD *)&v2[2 * a2 + 2];
            v12 = *(_QWORD *)(v11 + 32);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 16);
              if (v13)
              {
                if (!v8)
                  return *(_QWORD *)(v11 + 24);
                if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0] != 0)
                  return *(_QWORD *)(v11 + 24);
                if ((v13 & 0x3FFFFFFFFLL) + v8)
                {
                  v15 = *(_QWORD *)(v11 + 24);
                  if (v15)
                    return (v15 & 0x3FFFFFFFFLL) + v8;
                }
              }
            }
            return 0;
          }
        }
      }
      else
      {
        while (1)
        {
          v6 = *(_QWORD *)(*(_QWORD *)v5 + 32);
          if (!v6)
            break;
          v7 = *(_QWORD *)(v6 + 16);
          if (!v7)
            break;
          v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          v9 = v7 & 0x3FFFFFFFFLL;
          if (v8 && v9 + v8 == 0)
            break;
          v5 += 2;
          v4 -= 8;
          if (!v4)
            goto LABEL_11;
        }
      }
    }
  }
  return 0;
}

WebCore::AudioBuffer *WebCore::AudioBuffer::copyFromChannel@<X0>(WebCore::AudioBuffer *result@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v7 = *(_QWORD *)(*a2 + 32);
  v8 = MEMORY[0x1E0CC10F8];
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      if ((v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v9 & 0x3FFFFFFFFLL) + v10)
      {
        if (*(_QWORD *)(v7 + 32)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0)
        {
          result = (WebCore::AudioBuffer *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_BYTE *)a5 = 33;
LABEL_39:
          *(_BYTE *)(a5 + 16) = 1;
          return result;
        }
      }
    }
  }
  v12 = (unsigned int *)*((_QWORD *)result + 2);
  if (!v12 || *v12 <= a3)
  {
    result = (WebCore::AudioBuffer *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 0;
    goto LABEL_39;
  }
  v13 = *(_QWORD *)&v12[2 * a3 + 2];
  v14 = *(_QWORD *)(v13 + 32);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (!v15)
      goto LABEL_62;
    v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v16 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v15 & 0x3FFFFFFFFLL) + v16))
      goto LABEL_62;
    v17 = *(_BYTE *)(v13 + 6);
    if ((v17 & 3) == 0)
    {
      v14 = *(_QWORD *)(v13 + 16);
      goto LABEL_20;
    }
    if (*(_BYTE *)(v14 + 64) && (v45 = *(_QWORD *)(v14 + 32)) != 0)
    {
      v29 = atomic_load((unint64_t *)(v45 + 32));
      v17 = *(_BYTE *)(v13 + 6);
    }
    else
    {
      v29 = *(_QWORD *)(v14 + 48);
    }
    v30 = *(_QWORD *)(v13 + 8);
    if ((v17 & 4) == 0)
    {
      v31 = *(_QWORD *)(v13 + 16) + v30 <= v29 && v29 >= v30;
      if (v31)
        v14 = 0;
      else
        v14 = *(_QWORD *)(v13 + 16);
      goto LABEL_20;
    }
    v31 = v29 >= v30;
    v35 = v29 - v30;
    if (v31)
    {
LABEL_62:
      v14 = 0;
      goto LABEL_20;
    }
    if ((*(_BYTE *)(v13 + 4) - 4) > 7u)
      LOBYTE(v36) = 0;
    else
      v36 = qword_1968DEED0[(char)(*(_BYTE *)(v13 + 4) - 4)];
    v14 = (-1 << v36) & v35;
  }
LABEL_20:
  v18 = v14 >> 2;
  if (v14 >> 2 <= a4)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    return result;
  }
  v19 = a4;
  WebCore::AudioBuffer::applyNoiseIfNeeded(result);
  v20 = v18 - v19;
  v21 = *a2;
  v22 = *(_QWORD *)(*a2 + 32);
  if (!v22)
    goto LABEL_66;
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
    goto LABEL_66;
  v24 = *(_QWORD *)(v8 + 56);
  if (v24 && (*(_BYTE *)(v8 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v23 & 0x3FFFFFFFFLL) + v24))
    goto LABEL_66;
  v25 = *(_BYTE *)(v21 + 6);
  if ((v25 & 3) == 0)
  {
    v26 = *(_QWORD *)(v21 + 16);
    goto LABEL_28;
  }
  if (*(_BYTE *)(v22 + 64) && (v46 = *(_QWORD *)(v22 + 32)) != 0)
  {
    v32 = atomic_load((unint64_t *)(v46 + 32));
    v25 = *(_BYTE *)(v21 + 6);
  }
  else
  {
    v32 = *(_QWORD *)(v22 + 48);
  }
  v33 = *(_QWORD *)(v21 + 8);
  if ((v25 & 4) != 0)
  {
    v31 = v32 >= v33;
    v37 = v32 - v33;
    if (!v31)
    {
      v38 = *(_BYTE *)(v21 + 4) - 4;
      if (v38 > 7u)
        LOBYTE(v39) = 0;
      else
        v39 = qword_1968DEED0[(char)v38];
      v26 = (-1 << v39) & v37;
      goto LABEL_28;
    }
LABEL_66:
    v26 = 0;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v21 + 16);
  if (v26 + v33 <= v32 && v32 >= v33)
    v26 = 0;
LABEL_28:
  if (v20 >= v26 >> 2)
    v20 = v26 >> 2;
  v27 = *(_QWORD *)(v13 + 32);
  if (v27)
  {
    v27 = *(_QWORD *)(v27 + 16);
    if (v27)
    {
      v28 = *(_QWORD *)(v8 + 56);
      if (v28 && (*(_BYTE *)(v8 + 34) || !*MEMORY[0x1E0CC10F0]))
      {
        if ((v27 & 0x3FFFFFFFFLL) + v28)
        {
          v27 = *(_QWORD *)(v13 + 24);
          if (v27 && (*(_BYTE *)(v8 + 34) || !*MEMORY[0x1E0CC10F0]))
            v27 = (v27 & 0x3FFFFFFFFLL) + v28;
        }
        else
        {
          v27 = 0;
        }
      }
      else
      {
        v27 = *(_QWORD *)(v13 + 24);
      }
    }
  }
  v40 = *a2;
  v41 = *(_QWORD *)(*a2 + 32);
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 16);
    if (v42)
    {
      v43 = *(_QWORD *)(v8 + 56);
      if (!v43 || !*(_BYTE *)(v8 + 34) && *MEMORY[0x1E0CC10F0])
      {
        v44 = *(_QWORD *)(v40 + 24);
        goto LABEL_90;
      }
      if ((v42 & 0x3FFFFFFFFLL) + v43)
      {
        v44 = *(_QWORD *)(v40 + 24);
        if (v44 && (*(_BYTE *)(v8 + 34) || !*MEMORY[0x1E0CC10F0]))
          v44 = (v44 & 0x3FFFFFFFFLL) + v43;
        goto LABEL_90;
      }
    }
  }
  v44 = 0;
LABEL_90:
  result = (WebCore::AudioBuffer *)memmove((void *)v44, (const void *)(v27 + 4 * v19), 4 * v20);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  return result;
}

uint64_t WebCore::AudioBuffer::copyToChannel@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = result;
  v7 = *(_QWORD *)(*a2 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      if ((v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v8 & 0x3FFFFFFFFLL) + v9)
      {
        if (*(_QWORD *)(v7 + 32)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0)
        {
          result = WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_BYTE *)a5 = 33;
LABEL_39:
          *(_BYTE *)(a5 + 16) = 1;
          return result;
        }
      }
    }
  }
  v11 = *(unsigned int **)(result + 16);
  if (!v11 || *v11 <= a3)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 0;
    goto LABEL_39;
  }
  v12 = *(_QWORD *)&v11[2 * a3 + 2];
  v13 = *(_QWORD *)(v12 + 32);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 16);
    if (!v14)
      goto LABEL_62;
    v15 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v15 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v14 & 0x3FFFFFFFFLL) + v15))
      goto LABEL_62;
    v16 = *(_BYTE *)(v12 + 6);
    if ((v16 & 3) == 0)
    {
      v13 = *(_QWORD *)(v12 + 16);
      goto LABEL_20;
    }
    if (*(_BYTE *)(v13 + 64) && (v44 = *(_QWORD *)(v13 + 32)) != 0)
    {
      v29 = atomic_load((unint64_t *)(v44 + 32));
      v16 = *(_BYTE *)(v12 + 6);
    }
    else
    {
      v29 = *(_QWORD *)(v13 + 48);
    }
    v30 = *(_QWORD *)(v12 + 8);
    if ((v16 & 4) == 0)
    {
      v31 = *(_QWORD *)(v12 + 16) + v30 <= v29 && v29 >= v30;
      if (v31)
        v13 = 0;
      else
        v13 = *(_QWORD *)(v12 + 16);
      goto LABEL_20;
    }
    v31 = v29 >= v30;
    v35 = v29 - v30;
    if (v31)
    {
LABEL_62:
      v13 = 0;
      goto LABEL_20;
    }
    if ((*(_BYTE *)(v12 + 4) - 4) > 7u)
      LOBYTE(v36) = 0;
    else
      v36 = qword_1968DEED0[(char)(*(_BYTE *)(v12 + 4) - 4)];
    v13 = (-1 << v36) & v35;
  }
LABEL_20:
  if (v13 >> 2 <= a4)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    return result;
  }
  v17 = (v13 >> 2) - a4;
  v18 = *a2;
  v19 = *(_QWORD *)(*a2 + 32);
  if (!v19
    || (v20 = *(_QWORD *)(v19 + 16)) == 0
    || (v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v20 & 0x3FFFFFFFFLL) + v21))
  {
LABEL_66:
    v23 = 0;
    goto LABEL_28;
  }
  v22 = *(_BYTE *)(v18 + 6);
  if ((v22 & 3) != 0)
  {
    if (*(_BYTE *)(v19 + 64) && (v45 = *(_QWORD *)(v19 + 32)) != 0)
    {
      v32 = atomic_load((unint64_t *)(v45 + 32));
      v22 = *(_BYTE *)(v18 + 6);
    }
    else
    {
      v32 = *(_QWORD *)(v19 + 48);
    }
    v33 = *(_QWORD *)(v18 + 8);
    if ((v22 & 4) == 0)
    {
      v23 = *(_QWORD *)(v18 + 16);
      if (v23 + v33 <= v32 && v32 >= v33)
        v23 = 0;
      goto LABEL_28;
    }
    v31 = v32 >= v33;
    v37 = v32 - v33;
    if (!v31)
    {
      v38 = *(_BYTE *)(v18 + 4) - 4;
      if (v38 > 7u)
        LOBYTE(v39) = 0;
      else
        v39 = qword_1968DEED0[(char)v38];
      v23 = (-1 << v39) & v37;
      goto LABEL_28;
    }
    goto LABEL_66;
  }
  v23 = *(_QWORD *)(v18 + 16);
LABEL_28:
  if (v17 >= v23 >> 2)
    v17 = v23 >> 2;
  v24 = *a2;
  v25 = *(_QWORD *)(*a2 + 32);
  if (!v25)
    goto LABEL_73;
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
    goto LABEL_73;
  v27 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v27 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v28 = *(_QWORD *)(v24 + 24);
    goto LABEL_80;
  }
  if ((v26 & 0x3FFFFFFFFLL) + v27)
  {
    v28 = *(_QWORD *)(v24 + 24);
    if (v28 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
      v28 = (v28 & 0x3FFFFFFFFLL) + v27;
  }
  else
  {
LABEL_73:
    v28 = 0;
  }
LABEL_80:
  v40 = *(_QWORD *)(v12 + 32);
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 16);
    if (v41)
    {
      v42 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (!v42 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
      {
        v43 = *(_QWORD *)(v12 + 24);
        goto LABEL_91;
      }
      if ((v41 & 0x3FFFFFFFFLL) + v42)
      {
        v43 = *(_QWORD *)(v12 + 24);
        if (v43 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
          v43 = (v43 & 0x3FFFFFFFFLL) + v42;
        goto LABEL_91;
      }
    }
  }
  v43 = 0;
LABEL_91:
  result = (uint64_t)memmove((void *)(v43 + 4 * a4), (const void *)v28, 4 * v17);
  *(_DWORD *)(v5 + 36) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  return result;
}

BOOL JSC::GenericTypedArrayView<JSC::Float32Adaptor>::zeroFill(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v1 & 0xFFFFFFFFFFFFFFFCLL);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_21;
  v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v3 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v2 & 0x3FFFFFFFFLL) + v3))
    goto LABEL_21;
  v4 = *(_BYTE *)(a1 + 6);
  if ((v4 & 3) == 0)
  {
    v1 = *(_QWORD *)(a1 + 16);
    return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v1 & 0xFFFFFFFFFFFFFFFCLL);
  }
  if (*(_BYTE *)(v1 + 64) && (v11 = *(_QWORD *)(v1 + 32)) != 0)
  {
    v6 = atomic_load((unint64_t *)(v11 + 32));
    v4 = *(_BYTE *)(a1 + 6);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 48);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) == 0)
  {
    v8 = *(_QWORD *)(a1 + 16) + v7 <= v6 && v6 >= v7;
    if (v8)
      v1 = 0;
    else
      v1 = *(_QWORD *)(a1 + 16);
    return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v1 & 0xFFFFFFFFFFFFFFFCLL);
  }
  v8 = v6 >= v7;
  v9 = v6 - v7;
  if (v8)
  {
LABEL_21:
    v1 = 0;
    return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v1 & 0xFFFFFFFFFFFFFFFCLL);
  }
  if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
    LOBYTE(v10) = 0;
  else
    v10 = qword_1968DEED0[(char)(*(_BYTE *)(a1 + 4) - 4)];
  v1 = (-1 << v10) & v9;
  return JSC::ArrayBufferView::zeroRangeImpl((JSC::ArrayBufferView *)a1, 0, v1 & 0xFFFFFFFFFFFFFFFCLL);
}

uint64_t WebCore::AudioBuffer::memoryCost(WebCore::AudioBuffer *this)
{
  unsigned __int8 *v2;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v2 = (unsigned __int8 *)this + 33;
  if (__ldaxr((unsigned __int8 *)this + 33))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 33);
LABEL_5:
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  if (v4)
    v5 = v4 + 2;
  else
    v5 = 0;
  if (v4)
    v6 = (uint64_t)&v4[2 * *v4 + 2];
  else
    v6 = 0;
  if (v5 != (unsigned int *)v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)v5;
      v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
      if (!v9)
        goto LABEL_34;
      v10 = *(_QWORD *)(v9 + 16);
      if (!v10)
        goto LABEL_34;
      v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v11 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v10 & 0x3FFFFFFFFLL) + v11))
        goto LABEL_34;
      v12 = *(_BYTE *)(v8 + 6);
      if ((v12 & 3) != 0)
        break;
      v13 = *(_QWORD *)(v8 + 16);
LABEL_20:
      v7 += v13;
      v5 += 2;
      if (v5 == (unsigned int *)v6)
        goto LABEL_42;
    }
    if (*(_BYTE *)(v9 + 64) && (v20 = *(_QWORD *)(v9 + 32)) != 0)
    {
      v14 = atomic_load((unint64_t *)(v20 + 32));
      v12 = *(_BYTE *)(v8 + 6);
    }
    else
    {
      v14 = *(_QWORD *)(v9 + 48);
    }
    v15 = *(_QWORD *)(v8 + 8);
    if ((v12 & 4) == 0)
    {
      v13 = *(_QWORD *)(v8 + 16);
      v16 = v13 + v15 <= v14 && v14 >= v15;
      if (v16)
        v13 = 0;
      goto LABEL_20;
    }
    v16 = v14 >= v15;
    v17 = v14 - v15;
    if (!v16)
    {
      v18 = *(_BYTE *)(v8 + 4) - 4;
      if (v18 > 7u)
        LOBYTE(v19) = 0;
      else
        v19 = qword_1968DEED0[(char)v18];
      v13 = (-1 << v19) & v17;
      goto LABEL_20;
    }
LABEL_34:
    v13 = 0;
    goto LABEL_20;
  }
  v7 = 0;
LABEL_42:
  v21 = __ldxr(v2);
  if (v21 == 1)
  {
    if (!__stlxr(0, v2))
      return v7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v7;
}

BOOL WebCore::AudioBuffer::topologyMatches(WebCore::AudioBuffer *this, const WebCore::AudioBuffer *a2)
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  if (v2)
    v3 = *v2;
  else
    v3 = 0;
  v4 = (unsigned int *)*((_QWORD *)a2 + 2);
  if (v4)
    v5 = *v4;
  else
    v5 = 0;
  if (v3 != v5)
    return 0;
  v6 = v2 ? (uint64_t)(v2 + 2) : 0;
  v7 = v2 ? (uint64_t)&v2[2 * *v2 + 2] : 0;
  if (v6 == v7)
  {
LABEL_23:
    v13 = *((_QWORD *)this + 1);
  }
  else
  {
    if (*MEMORY[0x1E0CC10F0])
    {
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        if (!v14)
          break;
        v15 = *(_QWORD *)(v14 + 16);
        if (!v15)
          break;
        v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v16)
        {
          v17 = v15 & 0x3FFFFFFFFLL;
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v17 + v16 == 0)
            break;
        }
        v6 += 8;
        if (v6 == v7)
          goto LABEL_23;
      }
    }
    else
    {
      while (1)
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        if (!v8)
          break;
        v9 = *(_QWORD *)(v8 + 16);
        if (!v9)
          break;
        v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        v11 = v9 & 0x3FFFFFFFFLL;
        if (v10 && v11 + v10 == 0)
          break;
        v6 += 8;
        if (v6 == v7)
          goto LABEL_23;
      }
    }
    v13 = 0;
  }
  if (v4)
    v19 = v4 + 2;
  else
    v19 = 0;
  if (v4)
    v4 += 2 * *v4 + 2;
  if (v19 == v4)
  {
LABEL_48:
    v25 = *((_QWORD *)a2 + 1);
  }
  else
  {
    if (*MEMORY[0x1E0CC10F0])
    {
      while (1)
      {
        v26 = *(_QWORD *)(*(_QWORD *)v19 + 32);
        if (!v26)
          break;
        v27 = *(_QWORD *)(v26 + 16);
        if (!v27)
          break;
        v28 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v28)
        {
          v29 = v27 & 0x3FFFFFFFFLL;
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v29 + v28 == 0)
            break;
        }
        v19 += 2;
        if (v19 == v4)
          goto LABEL_48;
      }
    }
    else
    {
      while (1)
      {
        v20 = *(_QWORD *)(*(_QWORD *)v19 + 32);
        if (!v20)
          break;
        v21 = *(_QWORD *)(v20 + 16);
        if (!v21)
          break;
        v22 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        v23 = v21 & 0x3FFFFFFFFLL;
        if (v22 && v23 + v22 == 0)
          break;
        v19 += 2;
        if (v19 == v4)
          goto LABEL_48;
      }
    }
    v25 = 0;
  }
  return v13 == v25 && *((float *)this + 1) == *((float *)a2 + 1);
}

BOOL WebCore::AudioBuffer::copyTo(WebCore::AudioBuffer *this, WebCore::AudioBuffer *a2)
{
  _BOOL8 result;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  unint64_t i;
  void *v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  result = WebCore::AudioBuffer::topologyMatches(this, a2);
  if (result)
  {
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    if (v5)
      v6 = v5 + 2;
    else
      v6 = 0;
    if (v5)
      v7 = (uint64_t)&v5[2 * *v5 + 2];
    else
      v7 = 0;
    v8 = (_BYTE *)MEMORY[0x1E0CC10F0];
    if (v6 != (unsigned int *)v7)
    {
      if (*MEMORY[0x1E0CC10F0])
      {
        while (1)
        {
          v45 = *(_QWORD *)(*(_QWORD *)v6 + 32);
          if (!v45)
            break;
          v46 = *(_QWORD *)(v45 + 16);
          if (!v46)
            break;
          v47 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v47)
          {
            v48 = v46 & 0x3FFFFFFFFLL;
            if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v48 + v47 == 0)
              break;
          }
          v6 += 2;
          if (v6 == (unsigned int *)v7)
            goto LABEL_17;
        }
      }
      else
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
          if (!v9)
            break;
          v10 = *(_QWORD *)(v9 + 16);
          if (!v10)
            break;
          v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          v12 = v10 & 0x3FFFFFFFFLL;
          if (v11 && v12 + v11 == 0)
            break;
          v6 += 2;
          if (v6 == (unsigned int *)v7)
            goto LABEL_17;
        }
      }
      return 0;
    }
LABEL_17:
    v14 = (unsigned int *)*((_QWORD *)a2 + 2);
    if (v14)
      v15 = v14 + 2;
    else
      v15 = 0;
    if (v14)
      v16 = (uint64_t)&v14[2 * *v14 + 2];
    else
      v16 = 0;
    if (v15 != (unsigned int *)v16)
    {
      if (*MEMORY[0x1E0CC10F0])
      {
        while (1)
        {
          v50 = *(_QWORD *)(*(_QWORD *)v15 + 32);
          if (!v50)
            break;
          v51 = *(_QWORD *)(v50 + 16);
          if (!v51)
            break;
          v52 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v52)
          {
            v53 = v51 & 0x3FFFFFFFFLL;
            if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v53 + v52 == 0)
              break;
          }
          v15 += 2;
          if (v15 == (unsigned int *)v16)
            goto LABEL_32;
        }
      }
      else
      {
        while (1)
        {
          v17 = *(_QWORD *)(*(_QWORD *)v15 + 32);
          if (!v17)
            break;
          v18 = *(_QWORD *)(v17 + 16);
          if (!v18)
            break;
          v19 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          v20 = v18 & 0x3FFFFFFFFLL;
          if (v19 && v20 + v19 == 0)
            break;
          v15 += 2;
          if (v15 == (unsigned int *)v16)
            goto LABEL_32;
        }
      }
      return 0;
    }
LABEL_32:
    v22 = 0;
    v23 = MEMORY[0x1E0CC10F8];
    if (!v5)
      goto LABEL_34;
LABEL_33:
    for (i = *v5; ; i = 0)
    {
      if (v22 >= i)
      {
        *((_DWORD *)a2 + 9) = *((_DWORD *)this + 9);
        return 1;
      }
      v25 = (void *)WebCore::AudioBuffer::rawChannelData(a2, v22);
      v26 = *v5;
      if (v22 >= v26)
      {
        __break(0xC471u);
        JUMPOUT(0x195522160);
      }
      v27 = v5 + 2;
      v28 = *(_QWORD *)&v5[2 * v22 + 2];
      v29 = *(_QWORD *)(v28 + 32);
      if (!v29)
        break;
      v30 = *(_QWORD *)(v29 + 16);
      if (!v30)
        break;
      v31 = *(_QWORD *)(v23 + 56);
      if (v31 && (*(_BYTE *)(v23 + 34) || !*v8))
      {
        if (!((v30 & 0x3FFFFFFFFLL) + v31))
          break;
        v32 = *(_QWORD *)(v28 + 24);
        if (v32 && (*(_BYTE *)(v23 + 34) || !*v8))
          v32 = (v32 & 0x3FFFFFFFFLL) + v31;
      }
      else
      {
        v32 = *(_QWORD *)(v28 + 24);
      }
LABEL_48:
      v33 = 8 * v26;
      if (*v8)
      {
        while (1)
        {
          v40 = *(_QWORD *)(*(_QWORD *)v27 + 32);
          if (!v40)
            break;
          v41 = *(_QWORD *)(v40 + 16);
          if (!v41)
            break;
          v42 = *(_QWORD *)(v23 + 56);
          if (v42)
          {
            v43 = v41 & 0x3FFFFFFFFLL;
            if (*(_BYTE *)(v23 + 34) && v43 + v42 == 0)
              break;
          }
          v27 += 2;
          v33 -= 8;
          if (!v33)
          {
LABEL_56:
            v39 = *((_QWORD *)this + 1);
            goto LABEL_69;
          }
        }
      }
      else
      {
        while (1)
        {
          v34 = *(_QWORD *)(*(_QWORD *)v27 + 32);
          if (!v34)
            break;
          v35 = *(_QWORD *)(v34 + 16);
          if (!v35)
            break;
          v36 = *(_QWORD *)(v23 + 56);
          v37 = v35 & 0x3FFFFFFFFLL;
          if (v36 && v37 + v36 == 0)
            break;
          v27 += 2;
          v33 -= 8;
          if (!v33)
            goto LABEL_56;
        }
      }
      v39 = 0;
LABEL_69:
      memcpy(v25, (const void *)v32, 4 * v39);
      ++v22;
      v5 = (unsigned int *)*((_QWORD *)this + 2);
      if (v5)
        goto LABEL_33;
LABEL_34:
      ;
    }
    v32 = 0;
    goto LABEL_48;
  }
  return result;
}

uint64_t WebCore::AudioBuffer::clone@<X0>(uint64_t this@<X0>, int a2@<W1>, unint64_t **a3@<X8>)
{
  WebCore::AudioBuffer *v4;
  unsigned int *v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t *v17;
  float v18;
  _BOOL4 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (WebCore::AudioBuffer *)this;
  v6 = *(unsigned int **)(this + 16);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_14;
  }
  v9 = *v6;
  v7 = v6 + 2;
  v8 = v9;
  if (!v9)
  {
LABEL_14:
    v16 = *(_QWORD *)(this + 8);
    goto LABEL_15;
  }
  if (*MEMORY[0x1E0CC10F0])
  {
    v21 = 8 * v8;
    while (1)
    {
      v22 = *(_QWORD *)(*(_QWORD *)v7 + 32);
      if (!v22)
        break;
      v23 = *(_QWORD *)(v22 + 16);
      if (!v23)
        break;
      v24 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v24)
      {
        v25 = v23 & 0x3FFFFFFFFLL;
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v25 + v24 == 0)
          break;
      }
      v7 += 2;
      v21 -= 8;
      if (!v21)
        goto LABEL_14;
    }
  }
  else
  {
    v10 = 8 * v8;
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v7 + 32);
      if (!v11)
        break;
      v12 = *(_QWORD *)(v11 + 16);
      if (!v12)
        break;
      v13 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      v14 = v12 & 0x3FFFFFFFFLL;
      if (v13 && v14 + v13 == 0)
        break;
      v7 += 2;
      v10 -= 8;
      if (!v10)
        goto LABEL_14;
    }
  }
  v16 = 0;
LABEL_15:
  v17 = 0;
  if (v16)
  {
    if ((v8 - 1) <= 0x1F)
    {
      v18 = *(float *)(this + 4);
      if (v18 >= 3000.0 && v18 <= 384000.0)
      {
        v19 = *(_BYTE *)(this + 32) == 0;
        v17 = (unint64_t *)WTF::fastMalloc((WTF *)0x28);
        this = (uint64_t)WebCore::AudioBuffer::AudioBuffer(v17, (void *)v8, v16, v19, v18);
        if (!*(_QWORD *)(this + 8))
        {
          this = (uint64_t)WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v17, v20);
          v17 = 0;
          if (!a2)
            goto LABEL_22;
          goto LABEL_21;
        }
      }
    }
  }
  if (a2)
LABEL_21:
    this = WebCore::AudioBuffer::copyTo(v4, (WebCore::AudioBuffer *)v17);
LABEL_22:
  *a3 = v17;
  return this;
}

void WebCore::AudioBufferSourceNode::create(WebCore::BaseAudioContext *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  WebCore::AudioBufferSourceNode *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v14;
  float v15;
  char v16;
  unsigned __int8 *v17;
  int v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  char v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  float v38;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::AudioBufferSourceNode::AudioBufferSourceNode((WebCore::AudioBufferSourceNode *)v6, a1);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v7 + 19);
  WebCore::AudioBufferSourceNode::setBufferForBindings(v6, (uint64_t *)a2, (uint64_t)&v31);
  if (v33)
  {
    v9 = v32;
    v32 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *(_QWORD *)(v6 + 240);
  v38 = *(float *)(a2 + 8);
  v11 = *(_QWORD *)(v10 + 144);
  v12 = *(_QWORD *)(v10 + 152);
  v34 = "AudioParam";
  v35 = 11;
  v36 = "setValue";
  v37 = v12;
  if (*(_BYTE *)(v11 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v34, &v38);
  }
  v14 = *(float *)(v10 + 96);
  v15 = *(float *)(v10 + 100);
  if (v15 < v14)
    goto LABEL_55;
  if (v15 >= v38)
    v15 = v38;
  if (v38 >= v14)
    v14 = v15;
  *(float *)(v10 + 88) = v14;
  v16 = *(_BYTE *)(a2 + 12);
  v17 = (unsigned __int8 *)(v6 + 320);
  if (__ldaxr((unsigned __int8 *)(v6 + 320)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v6 + 320);
LABEL_21:
  *(_BYTE *)(v6 + 256) = v16;
  v19 = __ldxr(v17);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v17))
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 320));
  v20 = *(_QWORD *)(a2 + 16);
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v6 + 320);
LABEL_30:
  *(_QWORD *)(v6 + 272) = v20;
  v22 = __ldxr(v17);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, v17))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 320));
  v23 = *(_QWORD *)(a2 + 24);
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](v6 + 320);
LABEL_39:
  *(_QWORD *)(v6 + 264) = v23;
  v25 = __ldxr(v17);
  if (v25 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_44;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 320));
LABEL_44:
  v26 = *(_QWORD *)(v6 + 248);
  v38 = *(float *)(a2 + 32);
  v27 = *(_QWORD *)(v26 + 144);
  v28 = *(_QWORD *)(v26 + 152);
  v34 = "AudioParam";
  v35 = 11;
  v36 = "setValue";
  v37 = v28;
  if (*(_BYTE *)(v27 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v34, &v38);
  v29 = *(float *)(v26 + 96);
  v30 = *(float *)(v26 + 100);
  if (v30 < v29)
  {
LABEL_55:
    __break(1u);
    return;
  }
  if (v30 >= v38)
    v30 = v38;
  if (v38 >= v29)
    v29 = v30;
  *(float *)(v26 + 88) = v29;
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 16) = 0;
}

void WebCore::AudioBufferSourceNode::setBufferForBindings(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v9;
  uint64_t v11;
  WTF::Thread *v12;
  void *v13;
  __n128 v14;
  WTF::Thread *v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  WebCore::AudioNodeOutput *v22;
  void *v23;
  void *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF **v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int *v41;
  JSC::ArrayBufferView **v42;
  uint64_t v43;
  JSC::ArrayBufferView *v44;
  int v45;
  int v46;
  WTF::Lock *v47;
  int v48;
  int v49;
  WebCore::AudioBufferSourceNode *v50;
  WebCore::BaseAudioContext *v51;
  _QWORD v52[4];
  char v53;

  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v52[0] = "AudioNode";
  v52[1] = 10;
  v52[2] = "setBufferForBindings";
  v52[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 4, (WTF::Logger::LogSiteIdentifier *)v52);
  }
  v9 = (unsigned __int8 *)(a1 + 320);
  if (__ldaxr((unsigned __int8 *)(a1 + 320)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](a1 + 320);
LABEL_12:
  v11 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v11 == -1)
  {
    v50 = (WebCore::AudioBufferSourceNode *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::AudioBufferSourceNode::AudioBufferSourceNode(v50, v51);
    return;
  }
  v52[0] = &v53;
  v12 = (WTF::Thread *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v11])(v52, a1 + 40);
  v15 = v12;
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16)
    v16 = WTF::Thread::initializeCurrentTLS(v12);
  if (v16 == *((_QWORD *)v15 + 35))
  {
    v18 = *((_DWORD *)v15 + 72) + 1;
    goto LABEL_22;
  }
  if (__ldaxr((unsigned __int8 *)v15 + 292))
  {
    __clrex();
LABEL_20:
    MEMORY[0x19AEA534C]();
    goto LABEL_21;
  }
  if (__stxr(1u, (unsigned __int8 *)v15 + 292))
    goto LABEL_20;
LABEL_21:
  *((_QWORD *)v15 + 35) = v16;
  v18 = 1;
LABEL_22:
  *((_DWORD *)v15 + 72) = v18;
  v19 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(a1 + 257))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_80;
    }
    *(_BYTE *)(a1 + 257) = 1;
    v20 = *(unsigned int **)(v19 + 16);
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    if (*(_DWORD *)(a1 + 84))
      v22 = **(WebCore::AudioNodeOutput ***)(a1 + 72);
    else
      v22 = 0;
    WebCore::AudioNodeOutput::setNumberOfChannels(v22, v21);
    v23 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
    bzero(v23, 8 * v21);
    v25 = *(WTF **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v23;
    if (v25)
      WTF::fastFree(v25, v24);
    v26 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
    bzero(v26, 8 * v21);
    v27 = *(WTF **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v26;
    if (v27)
      WTF::fastFree(v27, v13);
    if (v21)
    {
      v28 = 0;
      v29 = MEMORY[0x1E0CC10F8];
      v30 = (_BYTE *)MEMORY[0x1E0CC10F0];
      do
      {
        WebCore::AudioBuffer::channelData(*a2, v28, v52);
        v31 = (_DWORD *)v52[0];
        v32 = *(_QWORD *)(v52[0] + 32);
        if (v32)
        {
          v32 = *(_QWORD *)(v32 + 16);
          if (v32)
          {
            v33 = *(_QWORD *)(v29 + 56);
            if (v33 && (*(_BYTE *)(v29 + 34) || !*v30))
            {
              if ((v32 & 0x3FFFFFFFFLL) + v33)
              {
                v32 = *(_QWORD *)(v52[0] + 24);
                if (v32 && (*(_BYTE *)(v29 + 34) || !*v30))
                  v32 = (v32 & 0x3FFFFFFFFLL) + v33;
              }
              else
              {
                v32 = 0;
              }
            }
            else
            {
              v32 = *(_QWORD *)(v52[0] + 24);
            }
          }
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v28) = v32;
        if (*v31 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v31;
        ++v28;
      }
      while (v21 != v28);
    }
  }
  *(_QWORD *)(a1 + 280) = 0;
  v34 = *a2;
  *a2 = 0;
  v35 = *(WTF ***)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v34;
  if (v35)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v35, v13);
  if (*(_BYTE *)(a1 + 288))
    v14.n128_f64[0] = WebCore::AudioBufferSourceNode::adjustGrainParameters((WebCore::AudioBufferSourceNode *)a1, v14.n128_f64[0]);
  v36 = atomic_load((unsigned int *)(a1 + 176));
  if (v36 != 2)
  {
    v37 = atomic_load((unsigned int *)(a1 + 176));
    if (v37 != 1)
      goto LABEL_79;
  }
  v38 = *(_QWORD *)(a1 + 216);
  if (!v38)
    goto LABEL_79;
  v39 = (unsigned __int8 *)(v38 + 33);
  if (__ldaxr((unsigned __int8 *)(v38 + 33)))
  {
    __clrex();
LABEL_65:
    MEMORY[0x19AEA534C](v38 + 33, v14);
    goto LABEL_66;
  }
  if (__stxr(1u, v39))
    goto LABEL_65;
LABEL_66:
  v41 = *(unsigned int **)(v38 + 16);
  if (v41)
    v42 = (JSC::ArrayBufferView **)(v41 + 2);
  else
    v42 = 0;
  if (v41)
    v43 = (uint64_t)&v41[2 * *v41 + 2];
  else
    v43 = 0;
  while (v42 != (JSC::ArrayBufferView **)v43)
  {
    v44 = *v42++;
    JSC::ArrayBufferView::setDetachable(v44);
  }
  v45 = __ldxr(v39);
  if (v45 == 1)
  {
    if (!__stlxr(0, v39))
      goto LABEL_79;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v39);
LABEL_79:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
LABEL_80:
  v46 = *((_DWORD *)v15 + 72) - 1;
  *((_DWORD *)v15 + 72) = v46;
  if (v46)
    goto LABEL_86;
  *((_QWORD *)v15 + 35) = 0;
  v47 = (WTF::Thread *)((char *)v15 + 292);
  v48 = __ldxr((unsigned __int8 *)v15 + 292);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_85;
  }
  if (__stlxr(0, (unsigned __int8 *)v47))
LABEL_85:
    WTF::Lock::unlockSlow(v47);
LABEL_86:
  v49 = __ldxr(v9);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_90;
  }
  if (__stlxr(0, v9))
LABEL_90:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
}

WebCore::AudioBufferSourceNode *WebCore::AudioBufferSourceNode::AudioBufferSourceNode(WebCore::AudioBufferSourceNode *this, WebCore::BaseAudioContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  v4 = (_QWORD *)WebCore::AudioScheduledSourceNode::AudioScheduledSourceNode((uint64_t)this, (uint64_t)a2, 2);
  *v4 = off_1E3367F88;
  v4[3] = &unk_1E33680C0;
  v4[19] = &unk_1E3368100;
  v4[28] = 0;
  v4[29] = 0;
  v4[27] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 30) = WebCore::AudioParam::AudioParam(v5, a2, (_DWORD **)&v12, 1, 0, 0.0, -3.4028e38, 3.4028e38);
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 31) = WebCore::AudioParam::AudioParam(v8, a2, (_DWORD **)&v12, 1, 0, 1.0, -3.4028e38, 3.4028e38);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  *((_WORD *)this + 128) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_BYTE *)this + 288) = 0;
  *((_OWORD *)this + 19) = xmmword_1968DEEC0;
  *((_BYTE *)this + 320) = 0;
  WebCore::AudioNode::addOutput(this, (void *)1);
  *((_BYTE *)this + 32) = 1;
  return this;
}

void WebCore::AudioBufferSourceNode::~AudioBufferSourceNode(WebCore::AudioBufferSourceNode *this, void *a2)
{
  WebCore::AudioParam *v3;
  WebCore::AudioParam *v4;
  WTF *v5;
  WTF *v6;
  WTF **v7;
  void *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;

  *((_BYTE *)this + 32) = 0;
  v3 = (WebCore::AudioParam *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v3, a2);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*((_DWORD *)v3 + 16);
    }
  }
  v4 = (WebCore::AudioParam *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(v4, a2);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*((_DWORD *)v4 + 16);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
    WTF::fastFree(v5, a2);
  v6 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
    WTF::fastFree(v6, a2);
  v7 = (WTF **)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v7, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::AudioBufferSourceNode *)((char *)this + 152), a2);
  WebCore::AudioNode::~AudioNode(this, v8);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioBufferSourceNode::~AudioBufferSourceNode(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::AudioBufferSourceNode::~AudioBufferSourceNode(WebCore::AudioBufferSourceNode *this, void *a2)
{
  WebCore::AudioBufferSourceNode::~AudioBufferSourceNode((WebCore::AudioBufferSourceNode *)((char *)this - 24), a2);
}

{
  WebCore::AudioBufferSourceNode::~AudioBufferSourceNode((WebCore::AudioBufferSourceNode *)((char *)this - 152), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioBufferSourceNode::~AudioBufferSourceNode((WebCore::AudioBufferSourceNode *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioBufferSourceNode::~AudioBufferSourceNode((WebCore::AudioBufferSourceNode *)((char *)this - 152), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::AudioBufferSourceNode::process(WebCore::AudioBufferSourceNode *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t i;
  uint64_t v25;
  void **v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t k;
  uint64_t v30;
  void **v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t m;
  uint64_t v35;
  void **v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t n;
  uint64_t v40;
  void **v41;
  _QWORD *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t j;
  uint64_t v54;
  void **v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  WebCore::AudioParam *v72;
  double v73;
  double v74;
  WebCore::AudioParam *v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  unsigned int v80;
  double v81;
  double v82;
  int v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  BOOL v93;
  double v94;
  double v95;
  double v96;
  BOOL v97;
  double v98;
  uint64_t *v99;
  uint64_t *v100;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  float v117;
  unsigned int v118;
  uint64_t v119;
  float v120;
  unint64_t v121;
  float v123;
  BOOL v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  unint64_t v157;
  float v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unsigned int v172;
  unint64_t v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  WebCore::AudioNode *v184;
  unsigned int v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  unsigned int v189;
  int v190;
  double v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  char *v195;

  if (*((_DWORD *)this + 21))
    v3 = **((_QWORD **)this + 9);
  else
    v3 = 0;
  v4 = 24;
  if (!*(_BYTE *)(v3 + 32))
    v4 = 16;
  v5 = *(_QWORD *)(v3 + v4);
  if (!*((_BYTE *)this + 32))
  {
    v23 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v23)
    {
      for (i = 0; i < v23; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * i);
        if (!*(_BYTE *)(v25 + 24))
        {
          *(_BYTE *)(v25 + 24) = 1;
          v26 = *(void ***)(v25 + 8);
          v27 = (_QWORD *)(v25 + 16);
          if (v26)
            v27 = v26 + 1;
          else
            v26 = (void **)v25;
          bzero(*v26, 4 * *v27);
          v23 = *(unsigned int *)(v5 + 28);
        }
      }
    }
    return;
  }
  v6 = (unsigned __int8 *)this + 320;
  do
  {
    while (1)
    {
      v7 = *v6;
      if ((v7 & 1) != 0)
      {
        v52 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v52)
        {
          for (j = 0; j < v52; ++j)
          {
            v54 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * j);
            if (!*(_BYTE *)(v54 + 24))
            {
              *(_BYTE *)(v54 + 24) = 1;
              v55 = *(void ***)(v54 + 8);
              v56 = (_QWORD *)(v54 + 16);
              if (v55)
                v56 = v55 + 1;
              else
                v55 = (void **)v54;
              bzero(*v55, 4 * *v56);
              v52 = *(unsigned int *)(v5 + 28);
            }
          }
        }
        return;
      }
      v8 = __ldaxr(v6);
      if (v8 == v7)
        break;
      __clrex();
    }
  }
  while (__stxr(v7 | 1, v6));
  v9 = *((_QWORD *)this + 27);
  if (!v9)
  {
    v28 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v28)
    {
      for (k = 0; k < v28; ++k)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * k);
        if (!*(_BYTE *)(v30 + 24))
        {
          *(_BYTE *)(v30 + 24) = 1;
          v31 = *(void ***)(v30 + 8);
          v32 = (_QWORD *)(v30 + 16);
          if (v31)
            v32 = v31 + 1;
          else
            v31 = (void **)v30;
          bzero(*v31, 4 * *v32);
          v28 = *(unsigned int *)(v5 + 28);
        }
      }
    }
    goto LABEL_71;
  }
  v10 = *(_DWORD **)(v9 + 16);
  if (v10)
    LODWORD(v10) = *v10;
  if (*(_DWORD *)(**((_QWORD **)this + 9) + 8) != (_DWORD)v10)
  {
    v33 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v33)
    {
      for (m = 0; m < v33; ++m)
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * m);
        if (!*(_BYTE *)(v35 + 24))
        {
          *(_BYTE *)(v35 + 24) = 1;
          v36 = *(void ***)(v35 + 8);
          v37 = (_QWORD *)(v35 + 16);
          if (v36)
            v37 = v36 + 1;
          else
            v36 = (void **)v35;
          bzero(*v36, 4 * *v37);
          v33 = *(unsigned int *)(v5 + 28);
        }
      }
    }
    goto LABEL_71;
  }
  v192 = 0;
  v193 = 0;
  v191 = 0.0;
  WebCore::AudioScheduledSourceNode::updateSchedulingInfo((uint64_t)this, a2, v5, &v193, (uint64_t *)&v192, &v191);
  v11 = v192;
  if (!v192)
  {
    v38 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v38)
    {
      for (n = 0; n < v38; ++n)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * n);
        if (!*(_BYTE *)(v40 + 24))
        {
          *(_BYTE *)(v40 + 24) = 1;
          v41 = *(void ***)(v40 + 8);
          v42 = (_QWORD *)(v40 + 16);
          if (v41)
            v42 = v41 + 1;
          else
            v41 = (void **)v40;
          bzero(*v41, 4 * *v42);
          v38 = *(unsigned int *)(v5 + 28);
        }
      }
    }
    goto LABEL_71;
  }
  v12 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v12)
  {
    v13 = 0;
    do
    {
      v14 = *(uint64_t **)(*(_QWORD *)(v5 + 16) + v13);
      *((_BYTE *)v14 + 24) = 0;
      v15 = *v14;
      if (!*v14)
        v15 = *(_QWORD *)v14[1];
      *(_QWORD *)(*((_QWORD *)this + 29) + v13) = v15;
      v13 += 8;
    }
    while (8 * v12 != v13);
  }
  v16 = *((_QWORD *)this + 27);
  if (!v16)
    goto LABEL_28;
  v17 = *(_DWORD *)(**((_QWORD **)this + 9) + 8);
  if (!v17 || v17 != (_DWORD)v12)
    goto LABEL_28;
  if (v11 > 0x1000)
    goto LABEL_28;
  v44 = *(_QWORD *)(v5 + 8);
  if (v44 > 0x1000)
    goto LABEL_28;
  LODWORD(v45) = v193;
  v46 = v193;
  if (v44 < v193 || v193 + v11 > v44)
    goto LABEL_28;
  v47 = v191;
  if ((_DWORD)v193)
  {
    v48 = 0;
    do
      bzero(*(void **)(*((_QWORD *)this + 29) + 8 * v48++), 4 * v46);
    while (v12 != v48);
    v16 = *((_QWORD *)this + 27);
  }
  v49 = *(unsigned int **)(v16 + 16);
  if (v49)
    v50 = v49 + 2;
  else
    v50 = 0;
  if (v49)
    v51 = (uint64_t)&v49[2 * *v49 + 2];
  else
    v51 = 0;
  if (v50 == (unsigned int *)v51)
  {
LABEL_109:
    v62 = *(_QWORD *)(v16 + 8);
  }
  else
  {
    if (*MEMORY[0x1E0CC10F0])
    {
      while (1)
      {
        v63 = *(_QWORD *)(*(_QWORD *)v50 + 32);
        if (!v63)
          break;
        v64 = *(_QWORD *)(v63 + 16);
        if (!v64)
          break;
        v65 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v65)
        {
          v66 = v64 & 0x3FFFFFFFFLL;
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v66 + v65 == 0)
            break;
        }
        v50 += 2;
        if (v50 == (unsigned int *)v51)
          goto LABEL_109;
      }
    }
    else
    {
      while (1)
      {
        v57 = *(_QWORD *)(*(_QWORD *)v50 + 32);
        if (!v57)
          break;
        v58 = *(_QWORD *)(v57 + 16);
        if (!v58)
          break;
        v59 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        v60 = v58 & 0x3FFFFFFFFLL;
        if (v59 && v60 + v59 == 0)
          break;
        v50 += 2;
        if (v50 == (unsigned int *)v51)
          goto LABEL_109;
      }
    }
    v62 = 0;
  }
  v68 = *((unsigned int *)this + 12);
  if ((_DWORD)v68 == -1)
  {
    v184 = (WebCore::AudioNode *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::AudioNode::logger(v184);
    return;
  }
  v69 = *(float *)(v16 + 4);
  v195 = &v194;
  v70 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v68])(&v195, (char *)this + 40);
  v71 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 88))(v70) + 160);
  v72 = (WebCore::AudioParam *)*((_QWORD *)this + 31);
  LODWORD(v195) = 0;
  v73 = v69 / v71;
  WebCore::AudioParam::calculateFinalValues(v72, (float *)&v195, 1u, 0);
  v74 = *(float *)&v195;
  v75 = (WebCore::AudioParam *)*((_QWORD *)this + 30);
  LODWORD(v195) = 0;
  WebCore::AudioParam::calculateFinalValues(v75, (float *)&v195, 1u, 0);
  v77 = v73 * v74 * exp2((float)(*(float *)&v195 / 1200.0));
  v78 = 1024.0;
  if (v77 <= 1024.0)
    v78 = v77;
  if (v77 >= -1024.0)
    v79 = v78;
  else
    v79 = -1024.0;
  if ((*(_QWORD *)&v79 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    v79 = 1.0;
  v80 = v62;
  if (*((_BYTE *)this + 288))
  {
    v81 = round((*((double *)this + 37) + *((double *)this + 38)) * v69 * 1024.0) * 0.0009765625;
    v80 = vcvtad_u64_f64(v81);
    if (round(v81) >= 1.84467441e19)
      v80 = -1;
  }
  if (v62 < v80)
    v80 = v62;
  v82 = (double)v80;
  v83 = *((unsigned __int8 *)this + 256);
  if (!*((_BYTE *)this + 256))
  {
    v85 = 0.0;
    v87 = v82;
    goto LABEL_156;
  }
  v84 = *((double *)this + 33);
  v85 = 0.0;
  if (v84 == 0.0)
  {
    if (v84 < 0.0)
      goto LABEL_149;
    v86 = *((double *)this + 34);
    if (v86 == 0.0)
      goto LABEL_149;
  }
  else
  {
    if (v84 < 0.0)
    {
LABEL_149:
      v87 = v82;
      goto LABEL_150;
    }
    v86 = *((double *)this + 34);
  }
  if (v86 <= 0.0 || v84 >= v86)
    goto LABEL_149;
  v88 = *(float *)(*((_QWORD *)this + 27) + 4);
  v89 = v84 * v88;
  v90 = v86 * v88;
  if (v90 <= v82)
    v87 = v90;
  else
    v87 = v82;
  if (v89 >= 0.0)
    v85 = v89;
  else
    v85 = 0.0;
  v82 = v87 - v85;
LABEL_150:
  if (*((double *)this + 35) >= v87)
  {
    v91 = 0.0;
    if (v84 >= 0.0)
      v91 = v84 * *(float *)(*((_QWORD *)this + 27) + 4);
    v92 = (double)(v62 - 1);
    if (v91 <= v92)
      v92 = v91;
    *((double *)this + 35) = v92;
  }
LABEL_156:
  if (fabs(v79) > v82)
  {
    LODWORD(v12) = *(_DWORD *)(v5 + 28);
LABEL_28:
    if ((_DWORD)v12)
    {
      v19 = 0;
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v19);
        if (!*(_BYTE *)(v20 + 24))
        {
          *(_BYTE *)(v20 + 24) = 1;
          v21 = *(_QWORD *)(v20 + 8);
          v22 = (_QWORD *)(v20 + 16);
          if (v21)
          {
            v22 = (_QWORD *)(v21 + 8);
            v20 = *(_QWORD *)(v20 + 8);
          }
          bzero(*(void **)v20, 4 * *v22);
          LODWORD(v12) = *(_DWORD *)(v5 + 28);
        }
        ++v19;
      }
      while (v19 < v12);
    }
    goto LABEL_71;
  }
  v93 = v79 != 0.0 && v47 < 0.0;
  v94 = fabs(v47 * v79);
  if (!v93)
    v94 = -0.0;
  v95 = v94 + *((double *)this + 35);
  if (v82 == floor(v82) && ((v96 = floor(v87), v95 == floor(v95)) ? (v97 = v87 == v96) : (v97 = 0), v97))
  {
    v98 = floor(v85);
    v99 = (uint64_t *)*((_QWORD *)this + 28);
    v100 = (uint64_t *)*((_QWORD *)this + 29);
    if (v79 == 1.0 && v85 == v98)
    {
      v185 = v82;
      v137 = v87;
      v138 = v95;
      if (v12 <= 1)
        v139 = 1;
      else
        v139 = v12;
      v187 = (uint64_t *)*((_QWORD *)this + 28);
      v188 = v139;
      v186 = (uint64_t *)*((_QWORD *)this + 29);
      v189 = v87;
      while (1)
      {
        v140 = v137 - v138;
        v190 = v11;
        if ((int)(v137 - v138) >= (int)v11)
          v140 = v11;
        v141 = v140 & ~(v140 >> 31);
        v142 = v99;
        v143 = v188;
        do
        {
          v144 = *v100++;
          v145 = (void *)(v144 + 4 * v45);
          v146 = *v142++;
          memcpy(v145, (const void *)(v146 + 4 * v138), 4 * v141);
          --v143;
        }
        while (v143);
        v45 = v141 + v45;
        v138 += v141;
        LODWORD(v11) = v190 - v141;
        v137 = v189;
        if (v138 >= v189)
        {
          v138 -= v185;
          if (!*((_BYTE *)this + 256))
            break;
        }
        v100 = v186;
        v99 = v187;
        if ((int)v11 <= 0)
          goto LABEL_274;
      }
      if ((_DWORD)v11 && *(_DWORD *)(**((_QWORD **)this + 9) + 8))
      {
        v171 = 0;
        do
          bzero((void *)(*(_QWORD *)(*((_QWORD *)this + 29) + 8 * v171++) + 4 * v45), 4 * (int)v11);
        while (v171 < *(unsigned int *)(**((_QWORD **)this + 9) + 8));
      }
      v172 = atomic_load((unsigned int *)this + 44);
      if (v172 != 3)
        WebCore::AudioScheduledSourceNode::finish(this);
LABEL_274:
      v95 = (double)v138;
      goto LABEL_293;
    }
    if (v79 == -1.0 && v85 == v98)
    {
      v103 = (int)v85;
      if ((int)v95 >= (int)v87)
        LODWORD(v104) = (int)v87;
      else
        LODWORD(v104) = (int)v95;
      if (v12 <= 1)
        v105 = 1;
      else
        v105 = v12;
      while (1)
      {
        if ((int)v104 - v103 + 1 < (int)v11)
          v106 = v104 - v103 + 1;
        else
          v106 = v11;
        if (v106 >= 1)
        {
          v107 = v106 & ~(v106 >> 31);
          v104 = (int)v104;
          v108 = v107;
          do
          {
            v109 = v100;
            v110 = v99;
            v111 = v105;
            do
            {
              v113 = *v109++;
              v112 = v113;
              v114 = *v110++;
              *(_DWORD *)(v112 + 4 * v45) = *(_DWORD *)(v114 + 4 * v104);
              --v111;
            }
            while (v111);
            LODWORD(v45) = v45 + 1;
            --v104;
            --v108;
          }
          while (v108);
          LODWORD(v11) = v11 - v107;
        }
        if ((int)v104 < v103)
        {
          LODWORD(v104) = v104 + (int)v82;
          if (!v83)
            break;
        }
        if ((int)v11 <= 0)
          goto LABEL_281;
      }
      if ((_DWORD)v11 && *(_DWORD *)(**((_QWORD **)this + 9) + 8))
      {
        v173 = 0;
        do
          bzero((void *)(*(_QWORD *)(*((_QWORD *)this + 29) + 8 * v173++) + 4 * v45), 4 * (int)v11);
        while (v173 < *(unsigned int *)(**((_QWORD **)this + 9) + 8));
      }
      v174 = atomic_load((unsigned int *)this + 44);
      if (v174 != 3)
        WebCore::AudioScheduledSourceNode::finish(this);
LABEL_281:
      v95 = (double)(int)v104;
      goto LABEL_293;
    }
  }
  else
  {
    v99 = (uint64_t *)*((_QWORD *)this + 28);
    v100 = (uint64_t *)*((_QWORD *)this + 29);
  }
  v115 = v11;
  if (v79 == 0.0)
  {
    v147 = 0;
    if (v95 >= v87)
      v148 = (int)v82;
    else
      v148 = 0;
    v149 = v95 - v148;
    if (v12 <= 1)
      v150 = 1;
    else
      v150 = v12;
    do
    {
      v151 = (_DWORD *)(v100[v147] + 4 * v46);
      v152 = v99[v147];
      v153 = v11 + 1;
      do
      {
        *v151++ = *(_DWORD *)(v152 + 4 * v149);
        --v153;
      }
      while (v153 > 1);
      ++v147;
    }
    while (v147 != v150);
    v95 = (double)v149;
  }
  else if (v79 >= 0.0)
  {
    if (v12 <= 1)
      v154 = 1;
    else
      v154 = v12;
    do
    {
      v155 = v95;
      v156 = (v95 + 1.0 - v82);
      if (!v83)
        v156 = v95;
      v157 = v62 > (v155 + 1) ? (v155 + 1) : v156;
      if (v62 <= v155 || v62 <= v157)
        break;
      v158 = v95 - (double)v155;
      v159 = v100;
      v160 = v99;
      v161 = v154;
      if ((_DWORD)v155 && (v159 = v100, v160 = v99, v161 = v154, (_DWORD)v157 == (_DWORD)v155))
      {
        v162 = v100;
        v163 = v99;
        v164 = v154;
        do
        {
          v166 = *v162++;
          v165 = v166;
          v167 = *v163++;
          *(float *)(v165 + 4 * v45) = *(float *)(v167 + 4 * v155)
                                                     + (float)((float)(*(float *)(v167 + 4 * v155)
                                                                     - *(float *)(v167 + 4 * (v155 - 1)))
                                                             * v158);
          --v164;
        }
        while (v164);
      }
      else
      {
        do
        {
          v169 = *v159++;
          v168 = v169;
          v170 = *v160++;
          *(float *)(v168 + 4 * v45) = *(float *)(v170 + 4 * v155)
                                                     + (float)(v158
                                                             * (float)(*(float *)(v170 + 4 * v157)
                                                                     - *(float *)(v170 + 4 * v155)));
          --v161;
        }
        while (v161);
      }
      --v115;
      v45 = (v45 + 1);
      v95 = v79 + v95;
      if (v95 >= v87)
      {
        v95 = v95 - v82;
        if (!v83)
        {
          if (v115 && *(_DWORD *)(**((_QWORD **)this + 9) + 8))
          {
            v176 = 0;
            do
              bzero((void *)(*(_QWORD *)(*((_QWORD *)this + 29) + 8 * v176++) + 4 * v45), 4 * v115);
            while (v176 < *(unsigned int *)(**((_QWORD **)this + 9) + 8));
          }
LABEL_291:
          v177 = atomic_load((unsigned int *)this + 44);
          if (v177 != 3)
            WebCore::AudioScheduledSourceNode::finish(this);
          break;
        }
      }
    }
    while (v115);
  }
  else
  {
    v116 = v87;
    v117 = v85;
    v118 = vcvtms_u32_f32(v117);
    if (v12 <= 1)
      v119 = 1;
    else
      v119 = v12;
    do
    {
      v120 = v95;
      LODWORD(v76) = vcvtms_u32_f32(v120);
      LODWORD(v121) = v83 ? v118 : v76;
      v121 = (int)v76 + 1 < v116 ? (v76 + 1) : v121;
      if (v62 <= v76 || v62 <= v121)
        break;
      v123 = v95 - (double)v76;
      if ((_DWORD)v76)
        v124 = (_DWORD)v121 == (_DWORD)v76;
      else
        v124 = 0;
      v125 = v100;
      v126 = v99;
      v127 = v119;
      if (v124)
      {
        v131 = v100;
        v132 = v99;
        v133 = v119;
        do
        {
          v135 = *v131++;
          v134 = v135;
          v136 = *v132++;
          *(float *)(v134 + 4 * v45) = *(float *)(v136 + 4 * v76)
                                                     + (float)((float)(*(float *)(v136 + 4 * v76)
                                                                     - *(float *)(v136 + 4 * (v76 - 1)))
                                                             * v123);
          --v133;
        }
        while (v133);
      }
      else
      {
        do
        {
          v129 = *v125++;
          v128 = v129;
          v130 = *v126++;
          *(float *)(v128 + 4 * v45) = *(float *)(v130 + 4 * v76)
                                                     + (float)(v123
                                                             * (float)(*(float *)(v130 + 4 * v121)
                                                                     - *(float *)(v130 + 4 * v76)));
          --v127;
        }
        while (v127);
      }
      --v115;
      v45 = (v45 + 1);
      v95 = v79 + v95;
      if (v95 < v85)
      {
        v95 = v82 + v95;
        if (!v83)
        {
          if (v115 && *(_DWORD *)(**((_QWORD **)this + 9) + 8))
          {
            v175 = 0;
            do
              bzero((void *)(*(_QWORD *)(*((_QWORD *)this + 29) + 8 * v175++) + 4 * v45), 4 * v115);
            while (v175 < *(unsigned int *)(**((_QWORD **)this + 9) + 8));
          }
          goto LABEL_291;
        }
      }
    }
    while (v115);
  }
LABEL_293:
  v178 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v178)
  {
    v179 = *(uint64_t **)(v5 + 16);
    v180 = *(unsigned int *)(v5 + 28);
    do
    {
      v181 = *v179++;
      *(_BYTE *)(v181 + 24) = 0;
      --v180;
    }
    while (v180);
    *((double *)this + 35) = v95;
    v182 = *(uint64_t **)(v5 + 16);
    do
    {
      v183 = *v182++;
      *(_BYTE *)(v183 + 24) = 0;
      --v178;
    }
    while (v178);
  }
  else
  {
    *((double *)this + 35) = v95;
  }
LABEL_71:
  v43 = __ldxr(v6);
  if (v43 == 1)
  {
    if (!__stlxr(0, v6))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

uint64_t WebCore::AudioNode::logger(WebCore::AudioNode *this)
{
  return *((_QWORD *)this + 15);
}

const char *WebCore::AudioNode::logClassName(WebCore::AudioNode *this)
{
  return "AudioNode";
}

uint64_t WebCore::AudioNode::logIdentifier(WebCore::AudioNode *this)
{
  return *((_QWORD *)this + 16);
}

double WebCore::AudioBufferSourceNode::adjustGrainParameters(WebCore::AudioBufferSourceNode *this, double result)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::BaseAudioContext *v27;
  uint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = *((_QWORD *)this + 27);
  if (!v2)
    return result;
  v4 = *(unsigned int **)(v2 + 16);
  if (v4)
    v5 = v4 + 2;
  else
    v5 = 0;
  if (v4)
    v6 = (uint64_t)&v4[2 * *v4 + 2];
  else
    v6 = 0;
  if (v5 == (unsigned int *)v6)
  {
LABEL_18:
    v7 = (double)*(unint64_t *)(v2 + 8);
  }
  else if (*MEMORY[0x1E0CC10F0])
  {
    v7 = 0.0;
    while (1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)v5 + 32);
      if (!v33)
        break;
      v34 = *(_QWORD *)(v33 + 16);
      if (!v34)
        break;
      v35 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v35)
      {
        v36 = v34 & 0x3FFFFFFFFLL;
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v36 + v35 == 0)
          break;
      }
      v5 += 2;
      if (v5 == (unsigned int *)v6)
        goto LABEL_18;
    }
  }
  else
  {
    v7 = 0.0;
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v5 + 32);
      if (!v8)
        break;
      v9 = *(_QWORD *)(v8 + 16);
      if (!v9)
        break;
      v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      v11 = v9 & 0x3FFFFFFFFLL;
      if (v10 && v11 + v10 == 0)
        break;
      v5 += 2;
      if (v5 == (unsigned int *)v6)
        goto LABEL_18;
    }
  }
  v13 = v7 / *(float *)(v2 + 4);
  if (*((double *)this + 37) >= v13)
    v14 = v7 / *(float *)(v2 + 4);
  else
    v14 = *((double *)this + 37);
  *((double *)this + 37) = v14;
  if (*((double *)this + 39) == 0.0)
  {
    v18 = v13 - v14;
    v15 = v18;
LABEL_32:
    v19 = 0.0;
    if (v15 > 0.0)
      v19 = v15;
    if (v15 >= v18)
      v20 = v18;
    else
      v20 = v19;
    *((double *)this + 38) = v20;
    goto LABEL_38;
  }
  v15 = *((double *)this + 38);
  if (!*((_BYTE *)this + 256))
  {
    v18 = v13 - v14;
    goto LABEL_32;
  }
  v16 = 0.0;
  if (v15 > 0.0)
    v16 = *((double *)this + 38);
  if (v15 >= INFINITY)
    v17 = INFINITY;
  else
    v17 = v16;
  *((double *)this + 38) = v17;
  *((double *)this + 24) = v17 + *((double *)this + 23);
  *((_BYTE *)this + 200) = 1;
LABEL_38:
  v21 = *((_QWORD *)this + 31);
  v22 = *(_QWORD *)(v21 + 8);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      v24 = atomic_load((unint64_t *)(v23 + 240));
      v25 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v25)
        v25 = WTF::Thread::initializeCurrentTLS(0);
      if (v25 == v24)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8);
        v27 = v26 ? (WebCore::BaseAudioContext *)(v26 - 32) : 0;
        v28 = WebCore::AudioParamTimeline::valueForContextTime((WebCore::AudioParamTimeline *)(v21 + 112), v27, *(float *)(v21 + 88), *(float *)(v21 + 96), *(float *)(v21 + 100));
        if ((v28 & 0xFF00000000) != 0)
          *(_DWORD *)(v21 + 88) = v28;
      }
    }
  }
  v29 = *((double *)this + 37);
  if (*(float *)(v21 + 88) >= 0.0)
  {
    v32 = round(v29 * *(float *)(*((_QWORD *)this + 27) + 4) * 1024.0) * 0.0009765625;
    v31 = vcvtad_u64_f64(v32);
    if (round(v32) >= 1.84467441e19)
      v31 = -1;
  }
  else
  {
    v30 = round((v29 + *((double *)this + 38)) * *(float *)(*((_QWORD *)this + 27) + 4) * 1024.0) * 0.0009765625;
    v31 = vcvtad_u64_f64(v30) - 1;
    if (round(v30) >= 1.84467441e19)
      v31 = -2;
  }
  result = (double)v31;
  *((double *)this + 35) = (double)v31;
  return result;
}

void WebCore::AudioBufferSourceNode::startPlaying(uint64_t a1@<X0>, double a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>, uint64_t a5@<D0>, double a6@<D1>)
{
  double v6;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  WTF::String *v16;
  WTF::String *v17;
  WTF::String *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  WTF::String *v38;
  WTF::String *v39;
  WTF::String *v40;
  WTF::Logger *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  char v64;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  double v80;
  __n128 v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unsigned int *v85;
  JSC::ArrayBufferView **v86;
  uint64_t v87;
  JSC::ArrayBufferView *v88;
  int v89;
  int v90;
  double v91;
  int v92;
  uint64_t v93;
  _QWORD v94[4];
  WTF::Logger *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  __int128 buf;
  int v111;
  WTF::StringImpl *v112;
  int v113;
  WTF::StringImpl *v114;
  int v115;
  WTF::StringImpl *v116;
  int v117;
  WTF::StringImpl *v118;
  int v119;
  WTF::StringImpl *v120;
  int v121;
  WTF::StringImpl *v122;
  uint64_t v123;

  v6 = a2;
  v123 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v94[0] = "AudioNode";
  v94[1] = 10;
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 128);
  v94[2] = "startPlaying";
  v94[3] = v14;
  if (a3)
    v15 = a2;
  else
    v15 = 0.0;
  if (*(_BYTE *)(v13 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v94);
    v16 = (WTF::String *)WTF::String::String((WTF::String *)&v102, "when = ");
    WTF::String::number(v16, *(double *)&a5);
    v17 = (WTF::String *)WTF::String::String((WTF::String *)&v100, ", offset = ");
    WTF::String::number(v17, a6);
    v18 = (WTF::String *)WTF::String::String((WTF::String *)&v98, ", duration = ");
    WTF::String::number(v18, v15);
    v95 = v102;
    v109 = v101;
    *(_QWORD *)&buf = v103;
    v107 = v99;
    v108 = v100;
    v105 = v97;
    v106 = v98;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v95, (uint64_t *)&v109, (uint64_t *)&v108, (uint64_t *)&v107, (uint64_t *)&v106, (uint64_t *)&v105, &v104);
    if (!v104)
    {
LABEL_177:
      __break(0xC471u);
      return;
    }
    v20 = v97;
    v97 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v98;
    v98 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v99;
    v99 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v100;
    v100 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v101;
    v101 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v19);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v102;
    v102 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v19);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v103;
    v103 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v19);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = qword_1ECE7C4A0;
    v28 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v28)
    {
      WTF::String::utf8();
      v30 = v95 ? (char *)v95 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v30;
      _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v28 = (uint64_t)v95;
      v95 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
          v28 = WTF::fastFree((WTF *)v28, v29);
        else
          --*(_DWORD *)v28;
      }
    }
    if (WebCore::LogMedia)
    {
      v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v32 = *v31;
        if ((v32 & 1) != 0)
          break;
        v33 = __ldaxr(v31);
        if (v33 == v32)
        {
          if (!__stxr(v32 | 1, v31))
          {
            v91 = v6;
            v92 = v12;
            v34 = WTF::Logger::observers((WTF::Logger *)v28);
            v35 = *(unsigned int *)(v34 + 12);
            if ((_DWORD)v35)
            {
              v36 = *(uint64_t **)v34;
              v93 = *(_QWORD *)v34 + 8 * v35;
              do
              {
                v37 = *v36;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v94);
                v111 = 0;
                v38 = (WTF::String *)WTF::String::String((WTF::String *)&v112, "when = ");
                v113 = 0;
                WTF::String::number(v38, *(double *)&a5);
                v115 = 0;
                v39 = (WTF::String *)WTF::String::String((WTF::String *)&v116, ", offset = ");
                v117 = 0;
                WTF::String::number(v39, a6);
                v119 = 0;
                v40 = (WTF::String *)WTF::String::String((WTF::String *)&v120, ", duration = ");
                v121 = 0;
                WTF::String::number(v40, v15);
                v95 = 0;
                v96 = 0;
                v41 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v96) = 7;
                v95 = v41;
                v42 = HIDWORD(v96);
                *((_DWORD *)v41 + 4 * HIDWORD(v96)) = buf;
                v43 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v41 + 2 * v42 + 1) = v43;
                *((_DWORD *)v41 + 4 * (v42 + 1)) = v111;
                v44 = v112;
                if (v112)
                  *(_DWORD *)v112 += 2;
                *((_QWORD *)v41 + 2 * (v42 + 1) + 1) = v44;
                *((_DWORD *)v41 + 4 * (v42 + 2)) = v113;
                v45 = v114;
                if (v114)
                  *(_DWORD *)v114 += 2;
                *((_QWORD *)v41 + 2 * (v42 + 2) + 1) = v45;
                *((_DWORD *)v41 + 4 * (v42 + 3)) = v115;
                v46 = v116;
                if (v116)
                  *(_DWORD *)v116 += 2;
                *((_QWORD *)v41 + 2 * (v42 + 3) + 1) = v46;
                *((_DWORD *)v41 + 4 * (v42 + 4)) = v117;
                v47 = v118;
                if (v118)
                  *(_DWORD *)v118 += 2;
                *((_QWORD *)v41 + 2 * (v42 + 4) + 1) = v47;
                *((_DWORD *)v41 + 4 * (v42 + 5)) = v119;
                v48 = v120;
                if (v120)
                  *(_DWORD *)v120 += 2;
                *((_QWORD *)v41 + 2 * (v42 + 5) + 1) = v48;
                *((_DWORD *)v41 + 4 * (v42 + 6)) = v121;
                v49 = v122;
                if (v122)
                  *(_DWORD *)v122 += 2;
                *((_QWORD *)v41 + 2 * (v42 + 6) + 1) = v49;
                HIDWORD(v96) = v42 + 7;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v37 + 16))(v37, &WebCore::LogMedia, 0, &v95);
                v50 = v95;
                if (HIDWORD(v96))
                {
                  v51 = 16 * HIDWORD(v96);
                  v52 = (WTF::StringImpl **)((char *)v95 + 8);
                  do
                  {
                    v53 = *v52;
                    *v52 = 0;
                    if (v53)
                    {
                      if (*(_DWORD *)v53 == 2)
                        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v29);
                      else
                        *(_DWORD *)v53 -= 2;
                    }
                    v52 += 2;
                    v51 -= 16;
                  }
                  while (v51);
                  v50 = v95;
                }
                if (v50)
                {
                  v95 = 0;
                  LODWORD(v96) = 0;
                  WTF::fastFree(v50, v29);
                }
                v54 = v122;
                v122 = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                v55 = v120;
                v120 = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v55 -= 2;
                }
                v56 = v118;
                v118 = 0;
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                    WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v56 -= 2;
                }
                v57 = v116;
                v116 = 0;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v57 -= 2;
                }
                v58 = v114;
                v114 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                v59 = v112;
                v112 = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v59 -= 2;
                }
                v60 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v60)
                {
                  if (*(_DWORD *)v60 == 2)
                    WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v29);
                  else
                    *(_DWORD *)v60 -= 2;
                }
                ++v36;
              }
              while (v36 != (uint64_t *)v93);
            }
            v61 = __ldxr(v31);
            if (v61 == 1)
            {
              v12 = v92;
              v6 = v91;
              if (!__stlxr(0, v31))
                break;
            }
            else
            {
              __clrex();
              v12 = v92;
              v6 = v91;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v62 = v104;
    v104 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v29);
      else
        *(_DWORD *)v62 -= 2;
    }
  }
  if (atomic_load((unsigned int *)(a1 + 176)))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v64 = 8;
LABEL_144:
    *(_BYTE *)a4 = v64;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v67 = a5 > -1 && ((a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(a5 - 1) < 0xFFFFFFFFFFFFFLL
     || (a5 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v67
    || (*(uint64_t *)&a6 > -1
      ? (v68 = ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      : (v68 = 1),
        v68 ? (v69 = (unint64_t)(*(_QWORD *)&a6 - 1) >= 0xFFFFFFFFFFFFFLL) : (v69 = 0),
        v69 ? (v70 = (*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFLL) == 0) : (v70 = 1),
        !v70 || v12 && ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2 < 0.0)))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v64 = 32;
    goto LABEL_144;
  }
  v71 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v71 == -1)
  {
LABEL_176:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_177;
  }
  *(_QWORD *)&buf = v94;
  v72 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v71])(&buf, a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 104))(v72, a1);
  v73 = (unsigned __int8 *)(a1 + 320);
  if (__ldaxr((unsigned __int8 *)(a1 + 320)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v73))
  {
    goto LABEL_148;
  }
  MEMORY[0x19AEA534C](a1 + 320);
LABEL_148:
  *(_BYTE *)(a1 + 288) = 1;
  *(double *)(a1 + 296) = a6;
  *(double *)(a1 + 304) = v15;
  v75 = 0.0;
  if (v12)
    v75 = 1.0;
  *(double *)(a1 + 312) = v75;
  v76 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v76 == -1)
    goto LABEL_176;
  *(_QWORD *)&buf = v94;
  v77 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v76])(&buf, a1 + 40);
  v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 88))(v77);
  v79 = atomic_load((unint64_t *)(v78 + 152));
  v80 = (double)v79 / *(float *)(v78 + 160);
  if (v80 <= *(double *)&a5)
    v80 = *(double *)&a5;
  *(double *)(a1 + 184) = v80;
  v81.n128_f64[0] = WebCore::AudioBufferSourceNode::adjustGrainParameters((WebCore::AudioBufferSourceNode *)a1, v80);
  v82 = *(_QWORD *)(a1 + 216);
  if (v82)
  {
    v83 = (unsigned __int8 *)(v82 + 33);
    if (__ldaxr((unsigned __int8 *)(v82 + 33)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v83))
    {
      goto LABEL_158;
    }
    MEMORY[0x19AEA534C](v82 + 33, v81);
LABEL_158:
    v85 = *(unsigned int **)(v82 + 16);
    if (v85)
      v86 = (JSC::ArrayBufferView **)(v85 + 2);
    else
      v86 = 0;
    if (v85)
      v87 = (uint64_t)&v85[2 * *v85 + 2];
    else
      v87 = 0;
    while (v86 != (JSC::ArrayBufferView **)v87)
    {
      v88 = *v86++;
      JSC::ArrayBufferView::setDetachable(v88);
    }
    v89 = __ldxr(v83);
    if (v89 == 1)
    {
      if (!__stlxr(0, v83))
        goto LABEL_171;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v83);
  }
LABEL_171:
  atomic_store(1u, (unsigned int *)(a1 + 176));
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v90 = __ldxr(v73);
  if (v90 != 1)
  {
    __clrex();
    goto LABEL_175;
  }
  if (__stlxr(0, v73))
LABEL_175:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 320));
}

BOOL WebCore::AudioBufferSourceNode::propagatesSilence(WebCore::AudioBufferSourceNode *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;

  v2 = (unsigned int *)((char *)this + 176);
  v3 = atomic_load((unsigned int *)this + 44);
  if (v3 != 2)
  {
    v4 = atomic_load(v2);
    if (v4 != 1)
      return 1;
  }
  v5 = atomic_load(v2);
  if (v5 == 3)
    return 1;
  v7 = (unsigned __int8 *)this + 320;
  do
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 & 1) != 0)
        return 0;
      v9 = __ldaxr(v7);
      if (v9 == v8)
        break;
      __clrex();
    }
  }
  while (__stxr(v8 | 1, v7));
  v6 = *((_QWORD *)this + 27) == 0;
  v10 = __ldxr(v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, v7))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v6;
}

float WebCore::AudioBufferSourceNode::noiseInjectionMultiplier(WebCore::AudioBufferSourceNode *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  float v5;
  double v6;
  double v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (unsigned __int8 *)this + 320;
  if (__ldaxr((unsigned __int8 *)this + 320))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 320);
LABEL_5:
  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    v5 = *(float *)(v4 + 36);
    if (*((_BYTE *)this + 256))
    {
      v6 = *((double *)this + 33);
      v7 = *((double *)this + 34);
      if (v6 < v7)
      {
        v8 = *(unsigned int **)(v4 + 16);
        if (v8)
          v9 = v8 + 2;
        else
          v9 = 0;
        if (v8)
          v10 = (uint64_t)&v8[2 * *v8 + 2];
        else
          v10 = 0;
        if (v9 == (unsigned int *)v10)
        {
LABEL_25:
          v11 = (double)*(unint64_t *)(v4 + 8);
        }
        else if (*MEMORY[0x1E0CC10F0])
        {
          v11 = 0.0;
          while (1)
          {
            v19 = *(_QWORD *)(*(_QWORD *)v9 + 32);
            if (!v19)
              break;
            v20 = *(_QWORD *)(v19 + 16);
            if (!v20)
              break;
            v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v21)
            {
              v22 = v20 & 0x3FFFFFFFFLL;
              if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && v22 + v21 == 0)
                break;
            }
            v9 += 2;
            if (v9 == (unsigned int *)v10)
              goto LABEL_25;
          }
        }
        else
        {
          v11 = 0.0;
          while (1)
          {
            v12 = *(_QWORD *)(*(_QWORD *)v9 + 32);
            if (!v12)
              break;
            v13 = *(_QWORD *)(v12 + 16);
            if (!v13)
              break;
            v14 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            v15 = v13 & 0x3FFFFFFFFLL;
            if (v14 && v15 + v14 == 0)
              break;
            v9 += 2;
            if (v9 == (unsigned int *)v10)
              goto LABEL_25;
          }
        }
        v5 = fmax(v11 / *(float *)(v4 + 4) / (v7 - v6) * 0.005, 1.0) * v5;
      }
    }
  }
  else
  {
    v5 = 0.0;
  }
  v17 = __ldxr(v2);
  if (v17 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

uint64_t WebCore::AudioContext::setDefaultSampleRateForTesting(uint64_t result)
{
  WebCore::defaultSampleRateForTesting(void)::sampleRate = result;
  byte_1EE2F5604 = BYTE4(result);
  return result;
}

uint64_t WebCore::AudioContext::create@<X0>(WebCore::Document *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;

  if ((WebCore::Document::isFullyActive(a1) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 8;
    goto LABEL_11;
  }
  if (*(_BYTE *)(a2 + 20))
  {
    v6 = *(float *)(a2 + 16);
    goto LABEL_7;
  }
  if (byte_1EE2F5604)
  {
    v6 = *(float *)&WebCore::defaultSampleRateForTesting(void)::sampleRate;
    *(_DWORD *)(a2 + 16) = WebCore::defaultSampleRateForTesting(void)::sampleRate;
    *(_BYTE *)(a2 + 20) = 1;
LABEL_7:
    if (v6 >= 3000.0 && v6 <= 384000.0)
      goto LABEL_9;
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 6;
LABEL_11:
    *(_BYTE *)a3 = v8;
    v11 = 1;
    goto LABEL_12;
  }
LABEL_9:
  v9 = bmalloc::api::isoAllocate();
  v10 = (_QWORD *)WebCore::AudioContext::AudioContext(v9, a1, a2);
  result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded(v10);
  v11 = 0;
  *(_QWORD *)a3 = v9;
LABEL_12:
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t WebCore::AudioContext::AudioContext(uint64_t a1, WebCore::Document *a2, uint64_t a3)
{
  WebCore::BaseAudioContext *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::AudioSessionIOS *v10;
  float v11;
  WebCore::PlatformMediaSessionManager *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];

  v6 = WebCore::BaseAudioContext::BaseAudioContext((WebCore::BaseAudioContext *)a1, a2);
  *(_QWORD *)v6 = &off_1E3368158;
  *((_QWORD *)v6 + 4) = &unk_1E33682C0;
  v7 = (char *)v6 + 424;
  *((_QWORD *)v6 + 7) = &unk_1E3368338;
  *((_QWORD *)v6 + 49) = &unk_1E3368378;
  *((_QWORD *)v6 + 50) = 0;
  *((_QWORD *)v6 + 51) = &unk_1E33683B0;
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 53) = &unk_1E33683D8;
  v8 = bmalloc::api::isoAllocate();
  v9 = *(_QWORD *)(a3 + 16);
  v10 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v8);
  (*(void (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v10 + 72))(v10);
  if ((v9 & 0xFF00000000) != 0)
    v11 = *(float *)&v9;
  v12 = WebCore::AudioDestinationNode::AudioDestinationNode((WebCore::AudioDestinationNode *)v8, (WebCore::BaseAudioContext *)a1, v11);
  *(_QWORD *)v8 = off_1E336A2D0;
  *(_QWORD *)(v8 + 24) = &unk_1E336A428;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 168) = &unk_1E336A468;
  *(_QWORD *)(v8 + 190) = 0;
  *(_WORD *)(v8 + 198) = 1;
  *(_QWORD *)(v8 + 136) = 0x200000002;
  *(_DWORD *)(v8 + 144) = 0;
  *(_QWORD *)(a1 + 432) = v8;
  WebCore::PlatformMediaSessionManager::sharedManager(v12);
  v13 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v13 + 8) = 0;
  *(_QWORD *)v13 = off_1E3407888;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = &unk_1E3407950;
  *(_QWORD *)(v13 + 32) = v7;
  *(_QWORD *)(v13 + 40) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_WORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 70) = 0;
  *(_QWORD *)(a1 + 440) = v13;
  if (WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x195524D18);
  }
  *(_QWORD *)(a1 + 448) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_DWORD *)(a1 + 456) = 0;
  *(_WORD *)(a1 + 460) = 256;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    if (*(_BYTE *)(v15 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195524D38);
    }
    v16 = v15 - 288;
  }
  else
  {
    v16 = 0;
  }
  if (*(_BYTE *)(v16 + 3362) || *(_BYTE *)(v16 + 3405))
  {
    while (1)
    {
      v39 = *(_QWORD *)(v16 + 528);
      if (!v39)
        break;
      v40 = *(_QWORD *)(v39 + 8);
      if (!v40)
        break;
      v41 = *(_QWORD *)(v40 + 120);
      if (!v41)
        break;
      v42 = *(_QWORD *)(v41 + 8);
      if (!v42)
        break;
      v16 = *(_QWORD *)(*(_QWORD *)(v42 + 40) + 8);
    }
  }
  else
  {
    v17 = *(_QWORD *)(v16 + 528);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v18 + 128) + 8);
        if (v19)
        {
          if (!*(_BYTE *)(v19 + 144))
          {
            v20 = *(_QWORD *)(v19 + 296);
            if (v20)
              v16 = v20;
          }
        }
      }
    }
  }
  v21 = *(_QWORD *)(v16 + 528);
  if (!v21)
    goto LABEL_26;
  v22 = *(_QWORD *)(v21 + 8);
  if (!v22)
    goto LABEL_26;
  v23 = *(_QWORD *)(*(_QWORD *)(v22 + 280) + 88);
  if (!v23 || *(_QWORD *)(v22 + 296) != v16)
    goto LABEL_26;
  v24 = *(_DWORD *)(v23 + 24);
  *(_DWORD *)(v23 + 24) = v24 + 1;
  v25 = *(unsigned __int8 *)(v23 + 3520);
  if (v24)
  {
    *(_DWORD *)(v23 + 24) = v24;
    if (v25)
      goto LABEL_23;
LABEL_26:
    if ((*(_QWORD *)(*(_QWORD *)(v16 + 680) + 688) & 0x100000000000) != 0)
      goto LABEL_24;
LABEL_27:
    v26 = 2;
    goto LABEL_28;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  if (!v25)
    goto LABEL_26;
LABEL_23:
  if ((v25 & 0xFE) != 2)
    goto LABEL_27;
LABEL_24:
  v26 = *(_DWORD *)(a1 + 456) | 3;
LABEL_28:
  *(_DWORD *)(a1 + 456) = v26;
  v27 = *(_QWORD *)(a1 + 8);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      if (*(_BYTE *)(v28 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195524D58);
      }
      v29 = *(_QWORD *)(v28 + 240);
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 8);
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 24);
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 8);
            if (v32)
              *(_BYTE *)(*(_QWORD *)(a1 + 432) + 199) = *(_BYTE *)(v32 + 352) & 1;
          }
        }
      }
    }
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)a2 + 2664, (_QWORD *)(a1 + 392), (uint64_t)v43);
  WebCore::Document::updateIsPlayingMedia(a2);
  v33 = WTF::fastMalloc((WTF *)0x10);
  v34 = v33;
  *(_DWORD *)v33 = 1;
  v35 = (unsigned int *)(a1 + 24);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 + 1, v35));
  *(_QWORD *)(v33 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v37 = &off_1E33687B0;
  v37[1] = a1;
  v37[2] = v34;
  v43[0] = (uint64_t)v37;
  WebCore::BaseAudioContext::postTask(a1, v43);
  if (v43[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v43[0] + 8))(v43[0]);
  return a1;
}

uint64_t WebCore::AudioContext::pageMutedStateDidChange(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        v3 = *(_QWORD *)(v2 + 240);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 24);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 8);
              if (v6)
                *(_BYTE *)(*(_QWORD *)(this + 432) + 199) = *(_BYTE *)(v6 + 352) & 1;
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::AudioContext::~AudioContext(WebCore::AudioContext *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 178)
        || (v5 = (_DWORD *)(v4 - 264), *(_DWORD *)(v4 - 264) += 2, (WTF::isMainThread(this) & 1) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x195524F90);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v4 + 2376, (_QWORD *)this + 49);
      WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v4 - 288));
      if (*v5 == 2)
      {
        if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), a2);
      }
      else
      {
        *v5 -= 2;
      }
    }
  }
  v6 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v7)
  {
    WebCore::DefaultAudioDestinationNode::uninitialize(v7);
    v9 = *(WTF::StringImpl **)(v7 + 184);
    *(_QWORD *)(v7 + 184) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(_QWORD *)(v7 + 176);
    *(_QWORD *)(v7 + 176) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    *(_QWORD *)v7 = off_1E3368500;
    *(_QWORD *)(v7 + 24) = &unk_1E3368648;
    *(_BYTE *)(v7 + 32) = 0;
    WebCore::AudioNode::~AudioNode((WebCore::AudioNode *)v7, v8);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  v13 = *((_QWORD *)this + 52);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 52);
    *((_QWORD *)this + 52) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 52) = 0;
  }
  v17 = *((_QWORD *)this + 50);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (unsigned int *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 50) = 0;
  }
  WebCore::BaseAudioContext::~BaseAudioContext(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioContext::~AudioContext(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::AudioContext::~AudioContext(WebCore::AudioContext *this, void *a2)
{
  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 32), a2);
}

{
  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 56), a2);
}

{
  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 392), a2);
}

{
  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 408), a2);
}

{
  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 424), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 56), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 392), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 408), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AudioContext::~AudioContext((WebCore::AudioContext *)((char *)this - 424), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::BaseAudioContext *WebCore::AudioContext::uninitialize(WebCore::BaseAudioContext *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 380))
  {
    v1 = (uint64_t)this;
    WebCore::BaseAudioContext::uninitialize(this);
    return (WebCore::BaseAudioContext *)WebCore::BaseAudioContext::setState(v1, (void *)3);
  }
  return this;
}

_BYTE *WebCore::AudioContext::lazyInitialize(_BYTE *this)
{
  uint64_t v1;
  uint64_t v2;

  if (!this[380])
  {
    v1 = (uint64_t)this;
    if (!this[379] && this[376] != 3 && !this[381])
    {
      v2 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 80))(this);
      this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
      *(_BYTE *)(v1 + 380) = 1;
      if (*(_BYTE *)(v1 + 376) != 1)
        return (_BYTE *)WebCore::AudioContext::startRendering(v1);
    }
  }
  return this;
}

uint64_t WebCore::AudioContext::destination(WebCore::AudioContext *this)
{
  return *((_QWORD *)this + 54);
}

{
  return *((_QWORD *)this + 54);
}

uint64_t WebCore::AudioContext::getOutputTimestamp(WebCore::AudioContext *this)
{
  uint64_t v2;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2)
    v2 = WTF::Thread::initializeCurrentTLS(this);
  if (v2 == *((_QWORD *)this + 35))
  {
    v4 = *((_DWORD *)this + 72) + 1;
    goto LABEL_10;
  }
  if (__ldaxr((unsigned __int8 *)this + 292))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C]();
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)this + 292))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 35) = v2;
  v4 = 1;
LABEL_10:
  *((_DWORD *)this + 72) = v4;
  v5 = *((_DWORD *)this + 72) - 1;
  *((_DWORD *)this + 72) = v5;
  if (!v5)
  {
    *((_QWORD *)this + 35) = 0;
    v6 = (unsigned __int8 *)this + 292;
    v7 = __ldxr((unsigned __int8 *)this + 292);
    if (v7 == 1)
    {
      if (!__stlxr(0, v6))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
LABEL_16:
  result = (*(uint64_t (**)(WebCore::AudioContext *))(*(_QWORD *)this + 88))(this);
  atomic_load((unint64_t *)(result + 152));
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_BYTE *)(v10 + 178))
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        result = *(_QWORD *)(v10 + 408);
        if (result)
          return WebCore::LocalDOMWindow::performance((WebCore::LocalDOMWindow *)result);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::AudioContext::close(WTF::StringImpl *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v2 = a2;
  if (*((_BYTE *)result + 379))
  {
    v3 = *a2;
    v24 = 0;
    WebCore::DeferredPromise::reject(v3, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v24, 0);
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v5 = (uint64_t)result;
    if (*((_BYTE *)result + 376) == 3)
    {
      v6 = *a2;
      v7 = *(_QWORD *)(*a2 + 24);
      if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
      {
        v8 = *(_QWORD *)(v6 + 32);
        if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
          v9 = 0;
        else
          v9 = *(uint64_t **)v8;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v6, v9, 0, (objc_class *)0xA);
        return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v24);
      }
    }
    else
    {
      v10 = (uint64_t *)((char *)result + 248);
      if (*((_DWORD *)result + 65) <= 3u)
      {
        if (*((_DWORD *)result + 64) <= 3u)
          WTF::Vector<WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)result + 248, 0x10uLL);
        if (*v10)
        {
          v11 = *(unsigned int *)(v5 + 260);
          if ((_DWORD)v11 != 4)
            bzero((void *)(*v10 + 16 * v11), 64 - 16 * v11);
        }
        *(_DWORD *)(v5 + 260) = 4;
      }
      v12 = *v10;
      v13 = (_QWORD *)(v12 + 48);
      v14 = *(unsigned int *)(v12 + 60);
      if ((_DWORD)v14 == *(_DWORD *)(v12 + 56))
      {
        v2 = (uint64_t *)WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)v2);
        v14 = *(unsigned int *)(v12 + 60);
        v15 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v14);
      }
      else
      {
        v15 = (_QWORD *)(*v13 + 8 * v14);
      }
      v16 = *v2;
      *v2 = 0;
      *v15 = v16;
      *(_DWORD *)(v12 + 60) = v14 + 1;
      if (!*(_BYTE *)(v5 + 380) && !*(_BYTE *)(v5 + 379) && *(_BYTE *)(v5 + 376) != 3 && !*(_BYTE *)(v5 + 381))
      {
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 136))(v17);
        *(_BYTE *)(v5 + 380) = 1;
        if (*(_BYTE *)(v5 + 376) != 1)
          WebCore::AudioContext::startRendering(v5);
      }
      v18 = *(_QWORD *)(v5 + 432);
      v19 = WTF::fastMalloc((WTF *)0x10);
      v20 = v19;
      *(_DWORD *)v19 = 1;
      v21 = (unsigned int *)(v5 + 24);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      *(_QWORD *)(v19 + 8) = v5;
      ++*(_QWORD *)(v5 + 16);
      v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v23 = &off_1E33687D8;
      *((_QWORD *)v23 + 1) = v5;
      *((_QWORD *)v23 + 2) = v20;
      v24 = v23;
      WebCore::DefaultAudioDestinationNode::close(v18, (uint64_t *)&v24);
      result = v24;
      if (v24)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  return result;
}

void WebCore::AudioContext::suspendRendering(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  objc_class *v24;

  if (*((_BYTE *)a1 + 379) || *((_BYTE *)a1 + 376) == 3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = *a2;
    v24 = 0;
    LOBYTE(v22) = 8;
    if (v21)
      *(_DWORD *)v21 += 2;
    v23 = v21;
    WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v22, 0, &v24);
    v6 = v23;
    v23 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v5);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  else
  {
    *((_BYTE *)a1 + 460) = 1;
    if ((WebCore::AudioContext::willPausePlayback((WebCore::AudioContext *)a1) & 1) != 0)
    {
      if (!*((_BYTE *)a1 + 380) && !*((_BYTE *)a1 + 379) && *((_BYTE *)a1 + 376) != 3 && !*((_BYTE *)a1 + 381))
      {
        v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 80))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
        *((_BYTE *)a1 + 380) = 1;
        if (*((_BYTE *)a1 + 376) != 1)
          WebCore::AudioContext::startRendering((uint64_t)a1);
      }
      v8 = a1[54];
      v9 = WTF::fastMalloc((WTF *)0x10);
      v10 = v9;
      *(_DWORD *)v9 = 1;
      v11 = (unsigned int *)(a1 + 3);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      *(_QWORD *)(v9 + 8) = a1;
      ++a1[2];
      v13 = *a2;
      *a2 = 0;
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v14 = &off_1E3368800;
      v14[1] = a1;
      v14[2] = v10;
      v14[3] = v13;
      v22 = v14;
      WebCore::DefaultAudioDestinationNode::suspend(v8, (uint64_t *)&v22);
      if (v22)
        (*(void (**)(_QWORD *))(*v22 + 8))(v22);
    }
    else
    {
      v15 = a1 + 31;
      if (!*((_DWORD *)a1 + 65))
      {
        if (!*((_DWORD *)a1 + 64))
          WTF::Vector<WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 31), 0x10uLL);
        if (*v15)
        {
          v16 = *((unsigned int *)a1 + 65);
          if ((_DWORD)v16 != 1)
            bzero((void *)(*v15 + 16 * v16), 16 - 16 * v16);
        }
        *((_DWORD *)a1 + 65) = 1;
      }
      v17 = *v15;
      v18 = *(unsigned int *)(*v15 + 12);
      if ((_DWORD)v18 == *(_DWORD *)(*v15 + 8))
      {
        a2 = (uint64_t *)WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*v15, v18 + 1, (unint64_t)a2);
        v18 = *(unsigned int *)(v17 + 12);
      }
      v19 = (uint64_t *)(*(_QWORD *)v17 + 8 * v18);
      v20 = *a2;
      *a2 = 0;
      *v19 = v20;
      *(_DWORD *)(v17 + 12) = v18 + 1;
    }
  }
}

uint64_t WebCore::AudioContext::willPausePlayback(WebCore::AudioContext *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v13[24];

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
  {
    v4 = (_DWORD *)(v2 - 264);
    *(_DWORD *)(v2 - 264) += 2;
    v5 = *((_DWORD *)this + 114);
    if ((v5 & 1) != 0)
    {
      if (!WebCore::Document::processingUserGestureForMedia((WebCore::Document *)(v2 - 288)))
        goto LABEL_17;
      v5 = *((_DWORD *)this + 114) & 0xFFFFFFFE;
      *((_DWORD *)this + 114) = v5;
    }
    if ((v5 & 2) == 0)
    {
LABEL_14:
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 55) + 72))(*((_QWORD *)this + 55));
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v2 + 240);
    if (!v7
      || (v8 = *(_QWORD *)(v7 + 8)) == 0
      || (v9 = *(_QWORD *)(v8 + 24)) == 0
      || (v10 = *(_QWORD *)(v9 + 8)) == 0
      || *(_BYTE *)(v10 + 544))
    {
      *((_DWORD *)this + 114) = v5 & 0xFFFFFFFD;
      goto LABEL_14;
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v2 + 1672, (_QWORD *)this + 51, (uint64_t)v13);
LABEL_17:
    v11 = 0;
LABEL_18:
    if (*v4 == 2)
    {
      if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v6);
    }
    else
    {
      *v4 -= 2;
    }
    return v11;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::AudioContext::resumeRendering(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  objc_class *v25;

  if (*((_BYTE *)a1 + 379) || *((_BYTE *)a1 + 376) == 3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = *a2;
    v25 = 0;
    LOBYTE(v23) = 8;
    if (v22)
      *(_DWORD *)v22 += 2;
    v24 = v22;
    WebCore::DeferredPromise::reject(v4, (unsigned __int8 *)&v23, 0, &v25);
    v6 = v24;
    v24 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = (unint64_t)v22;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        return WTF::StringImpl::destroy(v22, v5);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  else
  {
    *((_BYTE *)a1 + 460) = 0;
    if (WebCore::AudioContext::willBeginPlayback((WebCore::AudioContext *)a1))
    {
      if (!*((_BYTE *)a1 + 380) && !*((_BYTE *)a1 + 379) && *((_BYTE *)a1 + 376) != 3 && !*((_BYTE *)a1 + 381))
      {
        v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 80))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
        *((_BYTE *)a1 + 380) = 1;
        if (*((_BYTE *)a1 + 376) != 1)
          WebCore::AudioContext::startRendering((uint64_t)a1);
      }
      v9 = a1[54];
      v10 = WTF::fastMalloc((WTF *)0x10);
      v11 = v10;
      *(_DWORD *)v10 = 1;
      v12 = (unsigned int *)(a1 + 3);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      *(_QWORD *)(v10 + 8) = a1;
      ++a1[2];
      v14 = *a2;
      *a2 = 0;
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v15 = &off_1E3368828;
      v15[1] = a1;
      v15[2] = v11;
      v15[3] = v14;
      v23 = v15;
      WebCore::DefaultAudioDestinationNode::resume(v9, (uint64_t *)&v23);
      result = (unint64_t)v23;
      v23 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      v16 = a1 + 31;
      if (*((_DWORD *)a1 + 65) <= 1u)
      {
        if (*((_DWORD *)a1 + 64) <= 1u)
          WTF::Vector<WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 31), 0x10uLL);
        if (*(_QWORD *)v16)
        {
          v17 = *((unsigned int *)a1 + 65);
          if ((_DWORD)v17 != 2)
            bzero((void *)(*(_QWORD *)v16 + 16 * v17), 32 - 16 * v17);
        }
        *((_DWORD *)a1 + 65) = 2;
      }
      v18 = *(_QWORD *)v16;
      result = *(_QWORD *)v16 + 16;
      v19 = *(unsigned int *)(*(_QWORD *)v16 + 28);
      if ((_DWORD)v19 == *(_DWORD *)(*(_QWORD *)v16 + 24))
      {
        result = WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v19 + 1, (unint64_t)a2);
        a2 = (uint64_t *)result;
        v19 = *(unsigned int *)(v18 + 28);
        v20 = (uint64_t *)(*(_QWORD *)(v18 + 16) + 8 * v19);
      }
      else
      {
        v20 = (uint64_t *)(*(_QWORD *)result + 8 * v19);
      }
      v21 = *a2;
      *a2 = 0;
      *v20 = v21;
      *(_DWORD *)(v18 + 28) = v19 + 1;
    }
  }
  return result;
}

BOOL WebCore::AudioContext::willBeginPlayback(WebCore::AudioContext *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  WebCore::Quirks *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  WebCore::LocalDOMWindow *v22;
  BOOL hasTransientActivation;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195525E18);
  }
  v4 = (_DWORD *)(v2 - 264);
  *(_DWORD *)(v2 - 264) += 2;
  v5 = *((_DWORD *)this + 114);
  if ((v5 & 1) != 0)
  {
    if ((*(_DWORD *)(v2 + 2976) & 0x36C7800) == 0)
    {
      v15 = *(WebCore::Quirks **)(v2 + 400);
      if (!v15)
        v15 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)(v2 - 288));
      if (!WebCore::Quirks::shouldAutoplayWebAudioForArbitraryUserGesture(v15))
        goto LABEL_33;
      if (*(_BYTE *)(v2 + 3074) || *(_BYTE *)(v2 + 3117))
      {
        v30 = *(_QWORD *)(v2 + 240);
        i = v2 - 288;
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 8);
          i = v2 - 288;
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 120);
            i = v2 - 288;
            if (v32)
            {
              v33 = *(_QWORD *)(v32 + 8);
              for (i = v2 - 288; v33; v33 = *(_QWORD *)(v36 + 8))
              {
                i = *(_QWORD *)(*(_QWORD *)(v33 + 40) + 8);
                v34 = *(_QWORD *)(i + 528);
                if (!v34)
                  break;
                v35 = *(_QWORD *)(v34 + 8);
                if (!v35)
                  break;
                v36 = *(_QWORD *)(v35 + 120);
                if (!v36)
                  break;
              }
            }
          }
        }
      }
      else
      {
        v16 = *(_QWORD *)(v2 + 240);
        i = v2 - 288;
        if (v16)
        {
          v18 = *(_QWORD *)(v16 + 8);
          i = v2 - 288;
          if (v18)
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v18 + 128) + 8);
            v20 = v19 && *(_BYTE *)(v19 + 144) == 0;
            i = v2 - 288;
            if (v20)
            {
              v21 = *(_QWORD *)(v19 + 296);
              i = v2 - 288;
              if (v21)
                i = v21;
            }
          }
        }
      }
      if (*(double *)(i + 2312) == 0.0)
      {
LABEL_33:
        v22 = *(WebCore::LocalDOMWindow **)(v2 + 408);
        if (!v22)
          goto LABEL_36;
        ++*((_DWORD *)v22 + 6);
        hasTransientActivation = WebCore::LocalDOMWindow::hasTransientActivation(v22);
        v24 = hasTransientActivation;
        if (*((_DWORD *)v22 + 6) == 1)
        {
          (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v22 + 72))(v22);
          if (!v24)
          {
LABEL_36:
            v25 = *((_QWORD *)this + 8);
            v26 = *((_QWORD *)this + 9);
            v38 = "BaseAudioContext";
            v39 = 17;
            v40 = "willBeginPlayback";
            v41 = v26;
            if (*(_BYTE *)(v25 + 12))
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v38, "returning false, not processing user gesture or capturing");
            goto LABEL_40;
          }
        }
        else
        {
          --*((_DWORD *)v22 + 6);
          if (!hasTransientActivation)
            goto LABEL_36;
        }
      }
    }
    v5 = *((_DWORD *)this + 114) & 0xFFFFFFFE;
    *((_DWORD *)this + 114) = v5;
  }
  if ((v5 & 2) != 0)
  {
    v6 = *(_QWORD *)(v2 + 240);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 24);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            if (!*(_BYTE *)(v9 + 544))
            {
              WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v2 + 1672, (_QWORD *)this + 51, (uint64_t)&v38);
              v27 = *((_QWORD *)this + 8);
              v28 = *((_QWORD *)this + 9);
              v38 = "BaseAudioContext";
              v39 = 17;
              v40 = "willBeginPlayback";
              v41 = v28;
              if (*(_BYTE *)(v27 + 12))
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v38, "returning false, page doesn't allow media to start");
LABEL_40:
              v14 = 0;
              goto LABEL_41;
            }
          }
        }
      }
    }
    *((_DWORD *)this + 114) = v5 & 0xFFFFFFFD;
  }
  WebCore::PlatformMediaSession::setActive(*((_QWORD *)this + 55), 1);
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 55) + 64))(*((_QWORD *)this + 55));
  v37 = v10;
  v12 = *((_QWORD *)this + 8);
  v13 = *((_QWORD *)this + 9);
  v38 = "BaseAudioContext";
  v39 = 17;
  v40 = "willBeginPlayback";
  v41 = v13;
  if (*(_BYTE *)(v12 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v38, "returning ");
    v14 = v37 != 0;
  }
  else
  {
    v14 = v10;
  }
LABEL_41:
  if (*v4 == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v11);
  }
  else
  {
    *v4 -= 2;
  }
  return v14;
}

unsigned __int8 *WebCore::AudioContext::sourceNodeWillBeginPlayback(WebCore::AudioContext *this, WebCore::AudioNode *a2)
{
  unsigned __int8 *result;

  result = WebCore::BaseAudioContext::sourceNodeWillBeginPlayback(this, a2);
  if ((*((_BYTE *)this + 456) & 1) != 0)
    return (unsigned __int8 *)WebCore::AudioContext::startRendering((uint64_t)this);
  return result;
}

uint64_t WebCore::AudioContext::startRendering(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 64);
  v3 = *(_QWORD *)(this + 72);
  v12[0] = (uint64_t)"BaseAudioContext";
  v12[1] = 17;
  v12[2] = (uint64_t)"startRendering";
  v12[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  if (!*(_BYTE *)(v1 + 379))
  {
    this = WebCore::AudioContext::willBeginPlayback((WebCore::AudioContext *)v1);
    if ((_DWORD)this)
    {
      if (!*(_BYTE *)(v1 + 460))
      {
        if (!*(_BYTE *)(v1 + 380) && !*(_BYTE *)(v1 + 379) && *(_BYTE *)(v1 + 376) != 3 && !*(_BYTE *)(v1 + 381))
        {
          v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 80))(v1);
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
          *(_BYTE *)(v1 + 380) = 1;
          if (*(_BYTE *)(v1 + 376) != 1)
            WebCore::AudioContext::startRendering((WebCore::AudioContext *)v1);
        }
        v5 = *(_QWORD *)(v1 + 432);
        v6 = (unsigned int *)(v1 + 24);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = WTF::fastMalloc((WTF *)0x10);
        v9 = v8;
        *(_DWORD *)v8 = 1;
        do
          v10 = __ldaxr(v6);
        while (__stlxr(v10 + 1, v6));
        *(_QWORD *)(v8 + 8) = v1;
        ++*(_QWORD *)(v1 + 16);
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v11 = &off_1E3368850;
        v11[1] = v1;
        v11[2] = v1;
        v11[3] = v9;
        v12[0] = (uint64_t)v11;
        WebCore::DefaultAudioDestinationNode::startRendering(v5, v12);
        this = v12[0];
        v12[0] = 0;
        if (this)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t WebCore::AudioContext::logger(WebCore::AudioContext *this)
{
  return *((_QWORD *)this + 8);
}

const char *WebCore::BaseAudioContext::logClassName(WebCore::BaseAudioContext *this)
{
  return "BaseAudioContext";
}

uint64_t WebCore::AudioContext::logIdentifier(WebCore::AudioContext *this)
{
  return *((_QWORD *)this + 9);
}

BOOL WebCore::AudioContext::mediaState(WebCore::AudioContext *this)
{
  return !*((_BYTE *)this + 379) && *(_BYTE *)(*((_QWORD *)this + 54) + 197);
}

BOOL WebCore::AudioContext::isAudible(WebCore::AudioContext *this)
{
  return !*((_BYTE *)this + 379) && *(_BYTE *)(*((_QWORD *)this + 54) + 197) != 0;
}

BOOL `non-virtual thunk to'WebCore::AudioContext::mediaState(WebCore::AudioContext *this)
{
  return !*((_BYTE *)this - 13) && *(_BYTE *)(*((_QWORD *)this + 5) + 197);
}

BOOL `non-virtual thunk to'WebCore::AudioContext::isAudible(WebCore::AudioContext *this)
{
  return !*((_BYTE *)this - 45) && *(_BYTE *)(*((_QWORD *)this + 1) + 197) != 0;
}

uint64_t WebCore::AudioContext::mayResumePlayback(uint64_t this, char a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = *(unsigned __int8 *)(this + 376);
  if (v2 != 3)
  {
    v3 = this;
    if (v2 != 1 && *(_BYTE *)(this + 380) != 0)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(this + 460))
        {
          this = WebCore::AudioContext::willBeginPlayback((WebCore::AudioContext *)this);
          if ((_DWORD)this)
          {
            if (!*(_BYTE *)(v3 + 380) && !*(_BYTE *)(v3 + 379) && *(_BYTE *)(v3 + 376) != 3 && !*(_BYTE *)(v3 + 381))
            {
              v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5);
              *(_BYTE *)(v3 + 380) = 1;
              if (*(_BYTE *)(v3 + 376) != 1)
                WebCore::AudioContext::startRendering(v3);
            }
            v6 = *(_QWORD *)(v3 + 432);
            v7 = (unsigned int *)(v3 + 24);
            do
              v8 = __ldaxr(v7);
            while (__stlxr(v8 + 1, v7));
            v9 = WTF::fastMalloc((WTF *)0x10);
            v10 = v9;
            *(_DWORD *)v9 = 1;
            do
              v11 = __ldaxr(v7);
            while (__stlxr(v11 + 1, v7));
            *(_QWORD *)(v9 + 8) = v3;
            ++*(_QWORD *)(v3 + 16);
            v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v12 = &off_1E3368878;
            v12[1] = v3;
            v12[2] = v3;
            v12[3] = v10;
            v13 = v12;
            WebCore::DefaultAudioDestinationNode::resume(v6, (uint64_t *)&v13);
            this = (uint64_t)v13;
            v13 = 0;
            if (this)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          }
        }
      }
      else
      {
        return WebCore::BaseAudioContext::setState(this, 0);
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::mayResumePlayback(WebCore::AudioContext *this, char a2)
{
  return WebCore::AudioContext::mayResumePlayback((uint64_t)this - 424, a2);
}

uint64_t WebCore::AudioContext::suspend(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Document *v4;

  if (*(_BYTE *)(result + 376) != 3)
  {
    v1 = result;
    if (!*(_BYTE *)(result + 460))
    {
      WebCore::PlatformMediaSession::beginInterruption(*(_QWORD *)(result + 440), 7);
      v2 = *(_QWORD *)(v1 + 8);
      if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
      {
        if (*(_BYTE *)(v3 + 178))
        {
          result = 105;
          __break(0xC471u);
          return result;
        }
        v4 = (WebCore::Document *)(v3 - 288);
      }
      else
      {
        v4 = 0;
      }
      return (uint64_t)WebCore::Document::updateIsPlayingMedia(v4);
    }
  }
  return result;
}

uint64_t WebCore::AudioContext::resume(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Document *v4;

  if (*(_BYTE *)(this + 376) != 3)
  {
    v1 = this;
    if (!*(_BYTE *)(this + 460))
    {
      WebCore::PlatformMediaSession::endInterruption(*(_QWORD *)(this + 440), 1u);
      v2 = *(_QWORD *)(v1 + 8);
      if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
      {
        if (*(_BYTE *)(v3 + 178))
        {
          this = 105;
          __break(0xC471u);
          return this;
        }
        v4 = (WebCore::Document *)(v3 - 288);
      }
      else
      {
        v4 = 0;
      }
      return (uint64_t)WebCore::Document::updateIsPlayingMedia(v4);
    }
  }
  return this;
}

_QWORD *WebCore::AudioContext::suspendPlayback(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*((_BYTE *)this + 376) != 3)
  {
    v1 = (uint64_t)this;
    if (*((_BYTE *)this + 380))
    {
      v2 = this[54];
      v3 = (unsigned int *)(this + 3);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v5 = WTF::fastMalloc((WTF *)0x10);
      v6 = v5;
      *(_DWORD *)v5 = 1;
      do
        v7 = __ldaxr(v3);
      while (__stlxr(v7 + 1, v3));
      *(_QWORD *)(v5 + 8) = v1;
      ++*(_QWORD *)(v1 + 16);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v8 = &off_1E33688A0;
      v8[1] = v1;
      v8[2] = v1;
      v8[3] = v6;
      v9 = v8;
      WebCore::DefaultAudioDestinationNode::suspend(v2, (uint64_t *)&v9);
      this = v9;
      if (v9)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::AudioContext::suspendPlayback(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;

  if (*((_BYTE *)this - 48) != 3)
  {
    v1 = (uint64_t)this;
    if (*((_BYTE *)this - 44))
    {
      v2 = this - 53;
      v3 = this[1];
      v4 = (unsigned int *)(this - 50);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = WTF::fastMalloc((WTF *)0x10);
      v7 = v6;
      *(_DWORD *)v6 = 1;
      do
        v8 = __ldaxr(v4);
      while (__stlxr(v8 + 1, v4));
      *(_QWORD *)(v6 + 8) = v2;
      ++*(_QWORD *)(v1 - 408);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v9 = &off_1E33688A0;
      v9[1] = v2;
      v9[2] = v2;
      v9[3] = v7;
      v10 = v9;
      WebCore::DefaultAudioDestinationNode::suspend(v3, (uint64_t *)&v10);
      this = v10;
      if (v10)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return this;
}

uint64_t WebCore::AudioContext::isNowPlayingEligible(WebCore::AudioContext *this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 hasPlayBackAudioSession;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  void *v16;

  v2 = *((_QWORD *)this + 54);
  if (!*(_DWORD *)(v2 + 68))
    return 0;
  v3 = **(_QWORD **)(v2 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
    return 0;
  if (!*(_DWORD *)(v4 - 12))
    return 0;
  if (*((_BYTE *)this + 460))
    return 0;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return 0;
  if (!*(_BYTE *)(v8 + 178))
  {
    v9 = (_DWORD *)(v8 - 264);
    *(_DWORD *)(v8 - 264) += 2;
    v10 = *(_QWORD *)(v8 + 240);
    if (v10
      && (v11 = *(_QWORD *)(v10 + 8)) != 0
      && (v12 = *(_QWORD *)(v11 + 24)) != 0
      && (v13 = *(_QWORD *)(v12 + 8)) != 0)
    {
      v14 = (*(_DWORD *)v13)++;
      if (*(_BYTE *)(v13 + 1095))
      {
        hasPlayBackAudioSession = 0;
      }
      else
      {
        hasPlayBackAudioSession = WebCore::hasPlayBackAudioSession(*(WebCore **)(v8 + 408), a2);
        v14 = *(_DWORD *)v13 - 1;
      }
      if (v14)
      {
        *(_DWORD *)v13 = v14;
      }
      else
      {
        WebCore::Page::~Page(v13);
        WTF::fastFree(v15, v16);
      }
    }
    else
    {
      hasPlayBackAudioSession = WebCore::hasPlayBackAudioSession(*(WebCore **)(v8 + 408), a2);
    }
    if (*v9 == 2)
    {
      if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288), a2);
    }
    else
    {
      *v9 -= 2;
    }
    return hasPlayBackAudioSession;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::canReceiveRemoteControlCommands(WebCore::AudioContext *this, WebCore::Document *a2)
{
  return WebCore::AudioContext::isNowPlayingEligible((WebCore::AudioContext *)((char *)this - 424), a2);
}

_QWORD *WebCore::AudioContext::didReceiveRemoteControlCommand(_QWORD *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;

  v2 = (uint64_t)this;
  if ((a2 - 2) < 2)
  {
    if (*((_BYTE *)this + 376) != 3 && *((_BYTE *)this + 380))
    {
      v3 = this[54];
      v4 = (unsigned int *)(this + 3);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v6 = 1;
      do
        v7 = __ldaxr(v4);
      while (__stlxr(v7 + 1, v4));
      goto LABEL_11;
    }
  }
  else
  {
    if (a2 != 4)
    {
      if (a2 != 1)
        return this;
      return (_QWORD *)WebCore::AudioContext::mayResumePlayback((uint64_t)this, a2);
    }
    v9 = *((unsigned __int8 *)this + 376);
    if (!*((_BYTE *)this + 376))
      goto LABEL_16;
    if (v9 == 3)
      return this;
    if (v9 == 2)
    {
LABEL_16:
      LOBYTE(a2) = 1;
      return (_QWORD *)WebCore::AudioContext::mayResumePlayback((uint64_t)this, a2);
    }
    if (*((_BYTE *)this + 380))
    {
      v3 = this[54];
      v10 = (unsigned int *)(this + 3);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v6 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v6 = 1;
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
LABEL_11:
      *(_QWORD *)(v6 + 8) = v2;
      ++*(_QWORD *)(v2 + 16);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v8 = &off_1E33688A0;
      v8[1] = v2;
      v8[2] = v2;
      v8[3] = v6;
      v13 = v8;
      WebCore::DefaultAudioDestinationNode::suspend(v3, (uint64_t *)&v13);
      this = v13;
      if (v13)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::AudioContext::didReceiveRemoteControlCommand(uint64_t a1, int a2)
{
  return WebCore::AudioContext::didReceiveRemoteControlCommand((_QWORD *)(a1 - 424), a2);
}

uint64_t WebCore::AudioContext::mediaSessionGroupIdentifier(WebCore::AudioContext *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_BYTE *)(v3 + 178))
  {
    v4 = (int *)(v3 - 264);
    v5 = *(_DWORD *)(v3 - 264);
    *(_DWORD *)(v3 - 264) = v5 + 2;
    v6 = *(_QWORD *)(v3 + 240);
    if (!v6)
      goto LABEL_11;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      goto LABEL_11;
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
      goto LABEL_11;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      goto LABEL_11;
    v10 = *(_QWORD *)(v9 + 1728);
    if (v10)
      goto LABEL_12;
    if (*(_BYTE *)(v9 + 40))
    {
      v10 = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 1728) = v10;
      v5 = *v4 - 2;
    }
    else
    {
LABEL_11:
      v10 = 0;
    }
LABEL_12:
    if (v5)
    {
      *v4 = v5;
    }
    else if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
    }
    return v10;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::mediaSessionGroupIdentifier(WebCore::AudioContext *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = *((_QWORD *)this - 52);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_BYTE *)(v3 + 178))
  {
    v4 = (int *)(v3 - 264);
    v5 = *(_DWORD *)(v3 - 264);
    *(_DWORD *)(v3 - 264) = v5 + 2;
    v6 = *(_QWORD *)(v3 + 240);
    if (!v6)
      goto LABEL_11;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      goto LABEL_11;
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
      goto LABEL_11;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      goto LABEL_11;
    v10 = *(_QWORD *)(v9 + 1728);
    if (v10)
      goto LABEL_12;
    if (*(_BYTE *)(v9 + 40))
    {
      v10 = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 1728) = v10;
      v5 = *v4 - 2;
    }
    else
    {
LABEL_11:
      v10 = 0;
    }
LABEL_12:
    if (v5)
    {
      *v4 = v5;
    }
    else if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
    }
    return v10;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

BOOL WebCore::hasPlayBackAudioSession(WebCore *this, WebCore::Document *a2)
{
  WebCore::NavigatorAudioSession *v3;
  WebCore::DOMAudioSession *v4;
  WebCore::AudioSession *v5;
  _BOOL8 v6;
  WebCore::AudioSessionIOS *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;
  WebCore::DOMAudioSession *v17;

  if (!this)
    return 0;
  ++*((_DWORD *)this + 6);
  v3 = (WebCore::NavigatorAudioSession *)*((_QWORD *)this + 19);
  if (v3)
  {
    ++*((_DWORD *)v3 + 4);
    WebCore::NavigatorAudioSession::audioSession(v3, (uint64_t *)&v17);
    v4 = v17;
    if (v17)
    {
      v5 = (WebCore::AudioSession *)WebCore::DOMAudioSession::type(v17);
      v6 = (v5 & 0xFFFFFFFB) == 1;
      v17 = 0;
      if (*((_DWORD *)v4 + 6) == 1)
      {
        v8 = WebCore::AudioSession::sharedSession(v5);
        (*(void (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v8 + 216))(v8, (uint64_t)v4 + 56);
        v10 = *((_QWORD *)v4 + 8);
        if (v10)
        {
          *(_QWORD *)(v10 + 8) = 0;
          v11 = (unsigned int *)*((_QWORD *)v4 + 8);
          *((_QWORD *)v4 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, v9);
            }
          }
        }
        else
        {
          *((_QWORD *)v4 + 8) = 0;
        }
        WebCore::EventTarget::~EventTarget((WebCore::DOMAudioSession *)((char *)v4 + 32), v9);
        WebCore::ActiveDOMObject::~ActiveDOMObject(v4, v14);
        bmalloc::api::isoDeallocate(v15, v16);
      }
      else
      {
        --*((_DWORD *)v4 + 6);
      }
    }
    else
    {
      v6 = 0;
    }
    if (*((_DWORD *)v3 + 4) == 1)
      (*(void (**)(WebCore::NavigatorAudioSession *))(*(_QWORD *)v3 + 16))(v3);
    else
      --*((_DWORD *)v3 + 4);
  }
  else
  {
    v6 = 0;
  }
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)this + 72))(this);
  else
    --*((_DWORD *)this + 6);
  return v6;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::isNowPlayingEligible(WebCore::AudioContext *this, WebCore::Document *a2)
{
  return WebCore::AudioContext::isNowPlayingEligible((WebCore::AudioContext *)((char *)this - 424), a2);
}

void WebCore::AudioContext::nowPlayingInfo(WebCore::AudioContext *this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL hasPlayBackAudioSession;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v30;
  _DWORD *v31;
  uint64_t *v32;
  const char **v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  _DWORD *v46;
  int v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  WTF::StringImpl *v53[4];
  __int128 v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  _BYTE v58[26];
  unsigned __int8 *v59[2];

  v4 = *((_QWORD *)this + 54);
  if (!*(_DWORD *)(v4 + 68))
    goto LABEL_6;
  v5 = **(_QWORD **)(v4 + 56);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
    goto LABEL_6;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_6;
  if (*((_BYTE *)this + 460))
    goto LABEL_6;
  v8 = *((_QWORD *)this + 1);
  if (!v8)
    goto LABEL_6;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_6;
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195526FD4);
  }
  v10 = (_DWORD *)(v9 - 264);
  *(_DWORD *)(v9 - 264) += 2;
  v11 = *(_QWORD *)(v9 + 240);
  if (v11
    && (v12 = *(_QWORD *)(v11 + 8)) != 0
    && (v13 = *(_QWORD *)(v12 + 24)) != 0
    && (v14 = *(_QWORD *)(v13 + 8)) != 0)
  {
    v15 = (*(_DWORD *)v14)++;
    if (*(_BYTE *)(v14 + 1095))
    {
      hasPlayBackAudioSession = 0;
    }
    else
    {
      hasPlayBackAudioSession = WebCore::hasPlayBackAudioSession(*(WebCore **)(v9 + 408), a2);
      v15 = *(_DWORD *)v14 - 1;
    }
    if (v15)
    {
      *(_DWORD *)v14 = v15;
    }
    else
    {
      WebCore::Page::~Page(v14);
      WTF::fastFree(v48, v49);
    }
  }
  else
  {
    hasPlayBackAudioSession = WebCore::hasPlayBackAudioSession(*(WebCore **)(v9 + 408), a2);
  }
  if (*v10 == 2)
  {
    if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 288), a2);
  }
  else
  {
    *v10 -= 2;
  }
  if (!hasPlayBackAudioSession || (v17 = *((_QWORD *)this + 1)) == 0 || (v18 = *(_QWORD *)(v17 + 8)) == 0)
  {
LABEL_6:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 112) = 0;
    return;
  }
  if (*(_BYTE *)(v18 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195526FF4);
  }
  v19 = (_DWORD *)(v18 - 264);
  *(_DWORD *)(v18 - 264) += 2;
  v20 = *(_QWORD *)(v18 + 240);
  if (!v20
    || (v21 = *(_QWORD *)(v20 + 8)) == 0
    || (v22 = *(_QWORD *)(v21 + 24)) == 0
    || (v23 = *(_QWORD *)(v22 + 8)) == 0)
  {
    v46 = *(_DWORD **)(v18 + 408);
    if (v46)
    {
      v47 = v46[6];
      v46[6] = v47 + 1;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v47)
        v46[6] = v47;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 72))(v46);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 112) = 0;
    }
    goto LABEL_65;
  }
  ++*(_DWORD *)v23;
  v24 = *(_DWORD **)(v18 + 408);
  if (v24)
  {
    ++v24[6];
    v56 = 0;
    memset(v53, 0, sizeof(v53));
    LOBYTE(v54) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v57 = _Q0;
    *(_QWORD *)v58 = 0x3FF0000000000000;
    v58[8] = 0;
    *(_QWORD *)&v58[16] = *((_QWORD *)this + 56);
    v58[24] = *((_BYTE *)this + 376) == 1;
    v58[25] = (~*(unsigned __int16 *)(v23 + 658) & 5) != 0;
    v30 = *(_QWORD *)(v23 + 1008);
    if (v30 < 0 && v30 != -1)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
LABEL_58:
      v45 = *(_OWORD *)v58;
      *(_OWORD *)(a3 + 64) = v57;
      *(_OWORD *)(a3 + 80) = v45;
      *(_OWORD *)(a3 + 90) = *(_OWORD *)&v58[10];
      *(_BYTE *)(a3 + 112) = 1;
      WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)v53, a2);
      if (v24[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 72))(v24);
      else
        --v24[6];
      goto LABEL_60;
    }
    WebCore::LocalDOMWindow::protectedNavigator(v24, &v52);
    v31 = (_DWORD *)v52;
    v32 = (uint64_t *)(v52 + 72);
    v59[0] = "NavigatorMediaSession";
    v59[1] = (unsigned __int8 *)22;
    v33 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v52 + 72), v59);
    if (!v33 || (v34 = (uint64_t)v33[2]) == 0)
    {
      v34 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v34 = off_1E335CF48;
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = v31;
      v59[0] = (unsigned __int8 *)v34;
      WebCore::Supplement<WebCore::Navigator>::provideTo(v32, "NavigatorMediaSession", (unsigned __int8 *)0x16, (const char **)v59);
      v35 = v59[0];
      v59[0] = 0;
      if (v35)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v35 + 8))(v35);
    }
    v36 = *(_DWORD **)(v34 + 8);
    if (v36)
      ++v36[6];
    if (v31[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
      if (!v36)
        goto LABEL_43;
    }
    else
    {
      --v31[4];
      if (!v36)
        goto LABEL_43;
    }
    WebCore::MediaSession::updateNowPlayingInfo((uint64_t)v36, (uint64_t)v53);
    if (v36[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
    else
      --v36[6];
LABEL_43:
    v37 = v53[0];
    if (v53[0] && *((_DWORD *)v53[0] + 1))
    {
LABEL_56:
      *(_QWORD *)a3 = v37;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v53[1];
      v42 = v53[3];
      memset(v53, 0, sizeof(v53));
      *(_QWORD *)(a3 + 24) = v42;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      if (v56)
      {
        v43 = v54;
        v54 = 0uLL;
        *(_OWORD *)(a3 + 32) = v43;
        v44 = v55;
        v55 = 0;
        *(_QWORD *)(a3 + 48) = v44;
        *(_BYTE *)(a3 + 56) = 1;
      }
      goto LABEL_58;
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v18 - 96), a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v59, (const WebCore::SecurityOriginData *)(v38 + 8));
    v39 = (WTF::StringImpl *)v59[0];
    if (v59[0])
    {
      if (*((_DWORD *)v59[0] + 1))
      {
        v40 = MEMORY[0x19AEA53F4]();
        v39 = (WTF::StringImpl *)v59[0];
        if ((v40 & 1) == 0)
        {
          if (v59[0])
            *(_DWORD *)v59[0] += 2;
          v41 = v53[0];
          v53[0] = v39;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
            {
              WTF::StringImpl::destroy(v41, a2);
              v39 = (WTF::StringImpl *)v59[0];
            }
            else
            {
              *(_DWORD *)v41 -= 2;
            }
          }
        }
        v59[0] = 0;
        if (!v39)
          goto LABEL_55;
      }
      else
      {
        v59[0] = 0;
      }
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, a2);
      else
        *(_DWORD *)v39 -= 2;
    }
LABEL_55:
    v37 = v53[0];
    goto LABEL_56;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 112) = 0;
LABEL_60:
  if (*(_DWORD *)v23 == 1)
  {
    WebCore::Page::~Page(v23);
    WTF::fastFree(v50, v51);
  }
  else
  {
    --*(_DWORD *)v23;
  }
LABEL_65:
  if (*v19 == 2)
  {
    if ((*(_WORD *)(v18 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v18 - 288), a2);
  }
  else
  {
    *v19 -= 2;
  }
}

BOOL WebCore::AudioContext::isPlaying(WebCore::AudioContext *this)
{
  return *((_BYTE *)this + 376) == 1;
}

void `non-virtual thunk to'WebCore::AudioContext::nowPlayingInfo(WebCore::AudioContext *this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::AudioContext::nowPlayingInfo((WebCore::AudioContext *)((char *)this - 424), a2, a3);
}

WebCore::AudioContext *WebCore::AudioContext::selectBestMediaSession@<X0>(WebCore::AudioContext *this@<X0>, unsigned int *a2@<X1>, int a3@<W2>, unsigned int **a4@<X8>)
{
  uint64_t v5;
  WebCore::AudioContext *v6;
  unsigned int *v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 != 1)
  {
    *a4 = 0;
    return this;
  }
  v5 = a2[3];
  if ((_DWORD)v5)
  {
    v6 = this;
    v7 = 0;
    v8 = *(unsigned int ***)a2;
    v9 = *(_QWORD *)a2 + 8 * v5;
    while (1)
    {
      this = (WebCore::AudioContext *)WebCore::AudioContext::isNowPlayingEligible(v6, (WebCore::Document *)a2);
      if ((_DWORD)this)
      {
        if (v7 && *((_QWORD *)v7 + 1))
        {
          v10 = v7;
        }
        else
        {
          v10 = *v8;
          if (*v8)
          {
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 + 1, v10));
          }
          if (v7)
          {
            do
            {
              v12 = __ldaxr(v7);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v7));
            if (!v13)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
        v14 = *(_QWORD *)(*((_QWORD *)*v8 + 1) + 32);
        this = (WebCore::AudioContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
        if ((_DWORD)this)
        {
          v15 = *v8;
          if (*v8)
          {
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
          *a4 = v15;
          if (v10)
          {
            do
            {
              v17 = __ldaxr(v10);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v10));
            if (!v18)
            {
              atomic_store(1u, v10);
              return (WebCore::AudioContext *)WTF::fastFree((WTF *)v10, a2);
            }
          }
          return this;
        }
        v7 = v10;
      }
      if (++v8 == (unsigned int **)v9)
        goto LABEL_20;
    }
  }
  v7 = 0;
LABEL_20:
  *a4 = v7;
  return this;
}

WebCore::AudioContext *`non-virtual thunk to'WebCore::AudioContext::selectBestMediaSession@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, unsigned int **a4@<X8>)
{
  return WebCore::AudioContext::selectBestMediaSession((WebCore::AudioContext *)(a1 - 424), a2, a3, a4);
}

uint64_t WebCore::AudioContext::isSuspended(WebCore::AudioContext *this)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 1;
  v2 = *(_BYTE **)(v1 + 8);
  if (!v2)
    return 1;
  if (v2[178])
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    if (v2[179])
      return 1;
    return v2[180] != 0;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::isSuspended(WebCore::AudioContext *this)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;

  v1 = *((_QWORD *)this - 52);
  if (!v1)
    return 1;
  v2 = *(_BYTE **)(v1 + 8);
  if (!v2)
    return 1;
  if (v2[178])
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    if (v2[179])
      return 1;
    return v2[180] != 0;
  }
  return result;
}

BOOL `non-virtual thunk to'WebCore::AudioContext::isPlaying(WebCore::AudioContext *this)
{
  return *((_BYTE *)this - 48) == 1;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::pageMutedStateDidChange(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(this - 384);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        v3 = *(_QWORD *)(v2 + 240);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 24);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 8);
              if (v6)
                *(_BYTE *)(*(_QWORD *)(this + 40) + 199) = *(_BYTE *)(v6 + 352) & 1;
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::AudioContext::mediaCanStart(WebCore::AudioContext *this, WebCore::Document *a2)
{
  *((_DWORD *)this + 114) &= ~2u;
  return WebCore::AudioContext::mayResumePlayback((uint64_t)this, 1);
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::mediaCanStart(WebCore::AudioContext *this, WebCore::Document *a2)
{
  *((_DWORD *)this + 12) &= ~2u;
  return WebCore::AudioContext::mayResumePlayback((uint64_t)this - 408, 1);
}

uint64_t WebCore::AudioContext::shouldOverrideBackgroundPlaybackRestriction(uint64_t a1, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BOOL8 hasPlayBackAudioSession;
  uint64_t result;

  if ((_DWORD)a2 != 2)
    return 0;
  if (*(_BYTE *)(a1 + 461))
  {
    v2 = *(_QWORD *)(a1 + 432);
    if (!*(_DWORD *)(v2 + 68))
      return 1;
    v3 = **(_QWORD **)(v2 + 56);
    if (!v3)
      return 1;
    v4 = *(_QWORD *)(v3 + 40);
    if (!v4 || !*(_DWORD *)(v4 - 12))
      return 1;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  if (!*(_BYTE *)(v6 + 178))
  {
    *(_DWORD *)(v6 - 264) += 2;
    hasPlayBackAudioSession = WebCore::hasPlayBackAudioSession(*(WebCore **)(v6 + 408), a2);
    if (*(_DWORD *)(v6 - 264) == 2)
    {
      if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v7);
    }
    else
    {
      *(_DWORD *)(v6 - 264) -= 2;
    }
    return hasPlayBackAudioSession;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::shouldOverrideBackgroundPlaybackRestriction(uint64_t a1, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BOOL8 hasPlayBackAudioSession;
  uint64_t result;

  if ((_DWORD)a2 != 2)
    return 0;
  if (*(_BYTE *)(a1 + 37))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (!*(_DWORD *)(v2 + 68))
      return 1;
    v3 = **(_QWORD **)(v2 + 56);
    if (!v3)
      return 1;
    v4 = *(_QWORD *)(v3 + 40);
    if (!v4 || !*(_DWORD *)(v4 - 12))
      return 1;
  }
  v5 = *(_QWORD *)(a1 - 416);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  if (!*(_BYTE *)(v6 + 178))
  {
    *(_DWORD *)(v6 - 264) += 2;
    hasPlayBackAudioSession = WebCore::hasPlayBackAudioSession(*(WebCore **)(v6 + 408), a2);
    if (*(_DWORD *)(v6 - 264) == 2)
    {
      if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v7);
    }
    else
    {
      *(_DWORD *)(v6 - 264) -= 2;
    }
    return hasPlayBackAudioSession;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::AudioContext::isActiveNowPlayingSessionChanged(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  WTF *v11;
  void *v12;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1955275E8);
      }
      v4 = (_DWORD *)(v3 - 264);
      *(_DWORD *)(v3 - 264) += 2;
      v5 = *(_QWORD *)(v3 + 240);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 24);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = (*(_DWORD *)v8)++;
              if ((*(_QWORD *)(v8 + 1904) & 0xFFFFFFFFFFFFLL) == 0
                || *(double *)((*(_QWORD *)(v8 + 1904) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              {
                *(_QWORD *)(v8 + 1896) = 0;
                WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
                this = (unsigned int *)WebCore::TimerBase::setNextFireTime(v8 + 1872, v10 + 0.0);
                v9 = *(_DWORD *)v8 - 1;
              }
              if (v9)
              {
                *(_DWORD *)v8 = v9;
              }
              else
              {
                WebCore::Page::~Page(v8);
                this = (unsigned int *)WTF::fastFree(v11, v12);
              }
            }
          }
        }
      }
      if (*v4 == 2)
      {
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
      }
      else
      {
        *v4 -= 2;
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::AudioContext::isActiveNowPlayingSessionChanged(WebCore::AudioContext *this, void *a2)
{
  return WebCore::AudioContext::isActiveNowPlayingSessionChanged((unsigned int *)this - 106, a2);
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::logger(WebCore::AudioContext *this)
{
  return *((_QWORD *)this + 1);
}

{
  return *((_QWORD *)this - 45);
}

BOOL WebCore::AudioContext::virtualHasPendingActivity(WebCore::AudioContext *this)
{
  return *((_BYTE *)this + 376) != 3;
}

WebCore::AudioDestinationNode *WebCore::AudioDestinationNode::AudioDestinationNode(WebCore::AudioDestinationNode *this, WebCore::BaseAudioContext *a2, float a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v20[4];

  *(_QWORD *)this = off_1E3368A80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E3368BA8;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 0;
  v6 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>((uint64_t)a2);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *((_QWORD *)this + 5) = v6;
  *((_DWORD *)this + 12) = 1;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  *((_DWORD *)this + 26) = 1;
  *(_QWORD *)((char *)this + 108) = 0;
  v13 = (*(uint64_t (**)(WebCore::BaseAudioContext *))(*(_QWORD *)a2 + 112))(a2);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *((_QWORD *)this + 15) = v13;
  v16 = *((_QWORD *)a2 + 9);
  v17 = *((_QWORD *)a2 + 10) + 1;
  *((_QWORD *)a2 + 10) = v17;
  v18 = v16 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v17;
  *((_QWORD *)this + 16) = v18;
  *((_QWORD *)this + 17) = 2;
  *((_DWORD *)this + 36) = 0;
  v20[0] = "AudioNode";
  v20[1] = 10;
  v20[2] = "AudioNode";
  v20[3] = v18;
  if (*(_BYTE *)(v13 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v20);
  *(_QWORD *)this = off_1E3368500;
  *((_QWORD *)this + 3) = &unk_1E3368648;
  *((_QWORD *)this + 19) = 0;
  *((float *)this + 40) = a3;
  WebCore::AudioNode::addInput(this);
  return this;
}

void WebCore::AudioDestinationNode::renderQuantum(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::BaseAudioContext *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t i;
  uint64_t v27;
  void **v28;
  _QWORD *v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t j;
  uint64_t v34;
  void **v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WebCore::AudioNodeInput *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t k;
  uint64_t v54;
  void **v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t m;
  uint64_t v59;
  void **v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::BaseAudioContext *v69;
  void *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  char *v77;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 == -1)
    goto LABEL_111;
  v9 = a1 + 40;
  v77 = &v76;
  v10 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v77, a1 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_QWORD *)(StatusReg + 736);
  if (!v12)
    v12 = WTF::Thread::initializeCurrentTLS(0);
  atomic_store(v12, (unint64_t *)(v10 + 272));
  v13 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v13 == -1)
    goto LABEL_111;
  v77 = &v76;
  if (!*(_BYTE *)(((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v77, v9)+ 380))
  {
    v25 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v25)
    {
      for (i = 0; i < v25; ++i)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i);
        if (!*(_BYTE *)(v27 + 24))
        {
          *(_BYTE *)(v27 + 24) = 1;
          v28 = *(void ***)(v27 + 8);
          v29 = (_QWORD *)(v27 + 16);
          if (v28)
            v29 = v28 + 1;
          else
            v28 = (void **)v27;
          bzero(*v28, 4 * *v29);
          v25 = *(unsigned int *)(a2 + 28);
        }
      }
    }
    return;
  }
  if (!a3)
  {
    v32 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v32)
    {
      for (j = 0; j < v32; ++j)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * j);
        if (!*(_BYTE *)(v34 + 24))
        {
          *(_BYTE *)(v34 + 24) = 1;
          v35 = *(void ***)(v34 + 8);
          v36 = (_QWORD *)(v34 + 16);
          if (v35)
            v36 = v35 + 1;
          else
            v35 = (void **)v34;
          bzero(*v35, 4 * *v36);
          v32 = *(unsigned int *)(a2 + 28);
        }
      }
    }
    return;
  }
  v14 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v14 == -1)
    goto LABEL_111;
  v77 = &v76;
  v15 = (WebCore::BaseAudioContext *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v77, v9);
  WebCore::BaseAudioContext::handlePreRenderTasks(v15, a4);
  v16 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v16 == -1)
    goto LABEL_111;
  v77 = &v76;
  v17 = *(_QWORD *)(((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v16])(&v77, v9)+ 104);
  if (!*(_DWORD *)(v17 + 68) || (v18 = **(_QWORD **)(v17 + 56)) == 0)
  {
    v30 = 0;
    v31 = 0;
    goto LABEL_74;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18) & 1) == 0)
    goto LABEL_112;
  v20 = (unsigned int *)(v18 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v22 = *(_QWORD **)(v18 + 40);
  v23 = v22[1];
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
    goto LABEL_37;
  }
  MEMORY[0x19AEA534C](v23);
LABEL_37:
  ++*(_QWORD *)(v23 + 8);
  v37 = __ldxr((unsigned __int8 *)v23);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v23))
LABEL_41:
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
  v38 = v22[5];
  v39 = *(_QWORD *)(StatusReg + 736);
  if (!v39)
    v39 = WTF::Thread::initializeCurrentTLS(0);
  if (v38 == v39)
  {
    v31 = (_DWORD *)v22[4];
    if (v31)
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v31 + 80))(v22[4])
        || ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 496))(v31) & 1) == 0)
      {
LABEL_112:
        __break(0xC471u);
        JUMPOUT(0x195527AF8);
      }
      ++v31[78];
    }
  }
  else
  {
    v31 = 0;
  }
  v40 = v22[1];
  if (__ldaxr((unsigned __int8 *)v40))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v40))
  {
    goto LABEL_54;
  }
  MEMORY[0x19AEA534C](v40);
LABEL_54:
  v42 = *(_QWORD *)(v40 + 8);
  v43 = v42 - 1;
  *(_QWORD *)(v40 + 8) = v42 - 1;
  if (v42 == 1)
  {
    v75 = *(_QWORD *)(v40 + 24);
    v48 = *(_QWORD *)(v40 + 16);
    *(_QWORD *)(v40 + 24) = 0;
    v44 = v48 != 0;
  }
  else
  {
    v75 = 0;
    v44 = 1;
  }
  v74 = v44;
  v45 = __ldxr((unsigned __int8 *)v40);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stlxr(0, (unsigned __int8 *)v40))
LABEL_60:
    WTF::Lock::unlockSlow((WTF::Lock *)v40);
  if (!v43)
  {
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
    if (!v74)
      WTF::fastFree((WTF *)v40, v19);
  }
  do
  {
    v46 = __ldaxr(v20);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v20));
  if (v47)
  {
    if (v31)
    {
LABEL_69:
      WebCore::AudioWorkletGlobalScope::handlePreRenderTasks((WebCore::AudioWorkletGlobalScope *)v31);
      v30 = 1;
      goto LABEL_74;
    }
  }
  else
  {
    atomic_store(1u, (unsigned int *)(v18 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v31)
      goto LABEL_69;
  }
  v30 = 0;
LABEL_74:
  if (*(_DWORD *)(a1 + 68))
    v49 = **(WebCore::AudioNodeInput ***)(a1 + 56);
  else
    v49 = 0;
  v50 = WebCore::AudioNodeInput::pull(v49, (WebCore::AudioBus *)a2, a3);
  if (v50)
  {
    v51 = v50;
    if (v50 != a2)
    {
      v52 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v52)
      {
        for (k = 0; k < v52; ++k)
        {
          v54 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * k);
          if (!*(_BYTE *)(v54 + 24))
          {
            *(_BYTE *)(v54 + 24) = 1;
            v55 = *(void ***)(v54 + 8);
            v56 = (_QWORD *)(v54 + 16);
            if (v55)
              v56 = v55 + 1;
            else
              v55 = (void **)v54;
            bzero(*v55, 4 * *v56);
            v52 = *(unsigned int *)(a2 + 28);
          }
        }
      }
      WebCore::AudioBus::sumFrom(a2, v51, 0);
    }
  }
  else
  {
    v57 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v57)
    {
      for (m = 0; m < v57; ++m)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * m);
        if (!*(_BYTE *)(v59 + 24))
        {
          *(_BYTE *)(v59 + 24) = 1;
          v60 = *(void ***)(v59 + 8);
          v61 = (_QWORD *)(v59 + 16);
          if (v60)
            v61 = v60 + 1;
          else
            v60 = (void **)v59;
          bzero(*v60, 4 * *v61);
          v57 = *(unsigned int *)(a2 + 28);
        }
      }
    }
  }
  v62 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v62 == -1)
    goto LABEL_111;
  v77 = &v76;
  v63 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v62])(&v77, v9);
  v64 = *(unsigned int *)(v63 + 228);
  if ((_DWORD)v64)
  {
    v65 = *(uint64_t **)(v63 + 216);
    v66 = 8 * v64;
    do
    {
      v67 = *v65++;
      WebCore::AudioNode::processIfNecessary(v67, a3);
      v66 -= 8;
    }
    while (v66);
  }
  v68 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v68 == -1)
  {
LABEL_111:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_112;
  }
  v77 = &v76;
  v69 = (WebCore::BaseAudioContext *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v68])(&v77, v9);
  WebCore::BaseAudioContext::handlePostRenderTasks(v69, v70);
  v71 = (unint64_t *)(a1 + 152);
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 + a3, v71));
  if (v30)
  {
    v73 = atomic_load(v71);
    *((_QWORD *)v31 + 131) = v73;
    if (*((_BYTE *)v31 + 1128))
    {
      JSC::VM::DrainMicrotaskDelayScope::~DrainMicrotaskDelayScope((JSC::VM::DrainMicrotaskDelayScope *)(v31 + 280));
      *((_BYTE *)v31 + 1128) = 0;
    }
  }
  else if (!v31)
  {
    return;
  }
  if (v31[78] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 40))(v31);
  else
    --v31[78];
}

uint64_t WebCore::AudioDestinationNode::ref(WebCore::AudioDestinationNode *this)
{
  uint64_t v1;
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  char v6;
  char *v7;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::BaseAudioContext::ref(v5);
  }
  else
  {
    v7 = &v6;
    result = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v7, (char *)this + 40);
    v3 = (unsigned int *)(result + 24);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return result;
}

uint64_t WebCore::BaseAudioContext::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::AudioDestinationNode::deref(WebCore::AudioDestinationNode *this)
{
  uint64_t v1;
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  char v7;
  char *v8;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v6 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::BaseAudioContext::deref(v6);
  }
  else
  {
    v8 = &v7;
    result = (unsigned int *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v8, (char *)this + 40);
    v3 = result + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 6);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *WebCore::BaseAudioContext::deref(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = this + 6;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 6);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
  }
  return this;
}

uint64_t WebCore::AudioNode::refEventTarget(WebCore::AudioNode *this)
{
  return (*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 104))(this);
}

uint64_t WebCore::AudioNode::derefEventTarget(WebCore::AudioNode *this)
{
  return (*(uint64_t (**)(WebCore::AudioNode *))(*(_QWORD *)this + 112))(this);
}

float WebCore::AudioNode::noiseInjectionMultiplier(WebCore::AudioNode *this)
{
  return 0.0;
}

uint64_t `non-virtual thunk to'WebCore::AudioNode::logger(WebCore::AudioNode *this)
{
  return *((_QWORD *)this + 12);
}

const char *`non-virtual thunk to'WebCore::AudioNode::logClassName(WebCore::AudioNode *this)
{
  return "AudioNode";
}

uint64_t `non-virtual thunk to'WebCore::AudioNode::logIdentifier(WebCore::AudioNode *this)
{
  return *((_QWORD *)this + 13);
}

double WebCore::AnalyserNode::latencyTime(WebCore::AnalyserNode *this)
{
  return 0.0;
}

void WebCore::AudioBasicProcessorNode::~AudioBasicProcessorNode(WebCore::AudioBasicProcessorNode *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E3368918;
  *((_QWORD *)this + 3) = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

float WebCore::AudioBasicProcessorNode::noiseInjectionMultiplier(WebCore::AudioBasicProcessorNode *this)
{
  return 0.01;
}

void `non-virtual thunk to'WebCore::AudioBasicProcessorNode::~AudioBasicProcessorNode(WebCore::AudioBasicProcessorNode *this, void *a2)
{
  uint64_t v3;
  WebCore::AudioNode *v4;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::AudioBasicProcessorNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
}

{
  uint64_t v3;
  WebCore::AudioNode *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E3368A40;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this - 3) = off_1E3368918;
  v4 = (WebCore::AudioBasicProcessorNode *)((char *)this - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AudioNode::~AudioNode(v4, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

double WebCore::AudioBufferSourceNode::tailTime(WebCore::AudioBufferSourceNode *this)
{
  return 0.0;
}

double WebCore::AudioBufferSourceNode::latencyTime(WebCore::AudioBufferSourceNode *this)
{
  return 0.0;
}

uint64_t WebCore::AudioScheduledSourceNode::requiresTailProcessing(WebCore::AudioScheduledSourceNode *this)
{
  return 0;
}

WTF::Thread *`non-virtual thunk to'WebCore::AudioScheduledSourceNode::ref(WebCore::AudioScheduledSourceNode *this)
{
  return WebCore::AudioNode::ref((WebCore::AudioScheduledSourceNode *)((char *)this - 152));
}

WTF::Thread *`non-virtual thunk to'WebCore::AudioScheduledSourceNode::deref(WebCore::AudioScheduledSourceNode *this)
{
  return WebCore::AudioNode::deref((WebCore::AudioScheduledSourceNode *)((char *)this - 152));
}

uint64_t WebCore::AudioContext::isOfflineContext(WebCore::AudioContext *this)
{
  return 0;
}

uint64_t WebCore::BaseAudioContext::refEventTarget(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::BaseAudioContext::derefEventTarget(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = this + 6;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 6);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
  }
  return this;
}

uint64_t WebCore::AudioContext::mediaType(WebCore::AudioContext *this)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_BYTE **)(v1 + 8);
  if (!v2)
    return 0;
  if (v2[178])
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    if (v2[179] || v2[180])
      return 0;
    return 4 * (*((_BYTE *)this + 379) == 0);
  }
  return result;
}

uint64_t WebCore::AudioContext::presentationType(WebCore::AudioContext *this)
{
  return 4;
}

uint64_t WebCore::AudioContext::supportsSeeking(WebCore::AudioContext *this)
{
  return 0;
}

uint64_t WebCore::AudioContext::canProduceAudio(WebCore::AudioContext *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::BaseAudioContext::refEventTarget(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this - 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t `non-virtual thunk to'WebCore::BaseAudioContext::derefEventTarget(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this - 8);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 16))(this - 32);
  }
  return this;
}

const char *`non-virtual thunk to'WebCore::BaseAudioContext::logClassName(WebCore::BaseAudioContext *this)
{
  return "BaseAudioContext";
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::logIdentifier(WebCore::AudioContext *this)
{
  return *((_QWORD *)this + 2);
}

{
  return *((_QWORD *)this - 44);
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::mediaType(WebCore::AudioContext *this)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;

  v1 = *((_QWORD *)this - 52);
  if (!v1)
    return 0;
  v2 = *(_BYTE **)(v1 + 8);
  if (!v2)
    return 0;
  if (v2[178])
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    if (v2[179] || v2[180])
      return 0;
    return 4 * (*((_BYTE *)this - 45) == 0);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::presentationType(WebCore::AudioContext *this)
{
  return 4;
}

uint64_t WebCore::PlatformMediaSessionClient::displayType(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::supportsSeeking(WebCore::AudioContext *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::AudioContext::canProduceAudio(WebCore::AudioContext *this)
{
  return 1;
}

uint64_t WebCore::PlatformMediaSessionClient::isEnded(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::shouldOverrideBackgroundLoadingRestriction(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::isPlayingToWirelessPlaybackTarget(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::isPlayingOnSecondScreen(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::hasMediaStreamSource(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::shouldOverridePauseDuringRouteChange(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

float WebCore::AudioDestinationNode::sampleRate(WebCore::AudioDestinationNode *this)
{
  return *((float *)this + 40);
}

double WebCore::AudioDestinationNode::tailTime(WebCore::AudioDestinationNode *this)
{
  return 0.0;
}

double WebCore::AudioDestinationNode::latencyTime(WebCore::AudioDestinationNode *this)
{
  return 0.0;
}

uint64_t WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64[3];

  v64[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v59, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, &v58);
    if (v59)
    {
      v6 = *((_DWORD *)v59 + 1);
      if (v58)
      {
LABEL_8:
        v7 = *((_DWORD *)v58 + 1);
LABEL_9:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v60 = 0;
          goto LABEL_108;
        }
        if (v59)
        {
          v8 = *((_DWORD *)v59 + 4);
          v9 = (v8 >> 2) & 1;
          if (v58 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v58)
          {
LABEL_14:
            v9 = (*((unsigned __int8 *)v58 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v59, (uint64_t)v58, &v60);
        if (v60)
        {
          v11 = v58;
          v58 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v59;
          v59 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *((_QWORD *)v4 + 4);
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v56 ? (char *)v56 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v62 = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v56;
            v56 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*v4 && v4[16] >= 4u)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::String::String((WTF::String *)&v62[4], "destroying ");
                      v63 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a1, v64);
                      v56 = 0;
                      v57 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v57) = 2;
                      v56 = v25;
                      v26 = HIDWORD(v57);
                      *((_DWORD *)v25 + 4 * HIDWORD(v57)) = *(_DWORD *)buf;
                      v27 = *(_QWORD *)&v62[4];
                      if (*(_QWORD *)&v62[4])
                        **(_DWORD **)&v62[4] += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v63;
                      v28 = v64[0];
                      if (v64[0])
                        *(_DWORD *)v64[0] += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v57) = v26 + 2;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, v4, 4, &v56);
                      v29 = v56;
                      if (HIDWORD(v57))
                      {
                        v30 = 16 * HIDWORD(v57);
                        v31 = (WTF::StringImpl **)((char *)v56 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v56;
                      }
                      if (v29)
                      {
                        v56 = 0;
                        LODWORD(v57) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v64[0];
                      v64[0] = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = *(WTF::StringImpl **)&v62[4];
                      *(_QWORD *)&v62[4] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_71;
        }
LABEL_108:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v58)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead(a1);
  v38 = *(_DWORD *)(a1 + 124);
  if (v38)
  {
    v39 = *(uint64_t **)(a1 + 112);
    v40 = &v39[5 * v38];
    do
    {
      if (*v39)
      {
        WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead(*v39);
        v41 = (unsigned int *)*v39;
        *v39 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        *v39 = 0;
      }
      v39 += 5;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 112);
  if (v45)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v45, v37);
  }
  v46 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v46)
  {
    v47 = *(unsigned int ***)(a1 + 88);
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
  }
  v53 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v53 && v53 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v53, v37);
  }
  v55 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E33686A0[v55])(buf, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint8_t buf[4];
  _BYTE v41[12];
  int v42;
  WTF::StringImpl *v43[3];

  v43[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v38, "creating ");
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v37);
  if (!v38)
  {
    v5 = 0;
    if (v37)
      goto LABEL_3;
LABEL_72:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = *((_DWORD *)v38 + 1);
  if (!v37)
    goto LABEL_72;
LABEL_3:
  v6 = *((_DWORD *)v37 + 1);
LABEL_4:
  if ((v6 | v5) < 0 || (result = (v5 + v6), __OFADD__(v5, v6)))
  {
    v39 = 0;
    goto LABEL_76;
  }
  if (v38)
  {
    v7 = *((_DWORD *)v38 + 4);
    v8 = (v7 >> 2) & 1;
    if (v37 && (v7 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v37)
    {
LABEL_9:
      v8 = (*((unsigned __int8 *)v37 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v8 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (uint64_t)v38, (uint64_t)v37, &v39);
  if (!v39)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v10 = v37;
  v37 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v38;
  v38 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(NSObject **)(a1 + 32);
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v35 ? (char *)v35 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v41 = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = (uint64_t)v35;
    v35 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&v41[4], "creating ");
              v42 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, v43);
              v35 = 0;
              v36 = 0;
              v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v36) = 2;
              v35 = v24;
              v25 = HIDWORD(v36);
              *((_DWORD *)v24 + 4 * HIDWORD(v36)) = *(_DWORD *)buf;
              v26 = *(_QWORD *)&v41[4];
              if (*(_QWORD *)&v41[4])
                **(_DWORD **)&v41[4] += 2;
              *((_QWORD *)v24 + 2 * v25 + 1) = v26;
              *((_DWORD *)v24 + 4 * (v25 + 1)) = v42;
              v27 = v43[0];
              if (v43[0])
                *(_DWORD *)v43[0] += 2;
              *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
              HIDWORD(v36) = v25 + 2;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, a1, 4, &v35);
              v28 = v35;
              if (HIDWORD(v36))
              {
                v29 = 16 * HIDWORD(v36);
                v30 = (WTF::StringImpl **)((char *)v35 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v35;
              }
              if (v28)
              {
                v35 = 0;
                LODWORD(v36) = 0;
                WTF::fastFree(v28, v14);
              }
              v32 = v43[0];
              v43[0] = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = *(WTF::StringImpl **)&v41[4];
              *(_QWORD *)&v41[4] = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v34 = __ldxr(v16);
          if (v34 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSB_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISH_SI_EENS8_8FunctionIFSP_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSL_SP_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33686B8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSB_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISH_SI_EENS8_8FunctionIFSP_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSL_SP_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  char *v46;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint8_t buf[4];
  _BYTE v55[12];
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v46 = (char *)a3;
  WTF::String::String((WTF::String *)&v51, a3);
  v47 = a4;
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a4, &v50);
  if (v52)
  {
    v9 = *((_DWORD *)v52 + 1);
    if (v51)
      goto LABEL_3;
LABEL_91:
    v10 = 0;
    if (v50)
      goto LABEL_4;
LABEL_92:
    v11 = 0;
    goto LABEL_5;
  }
  v9 = 0;
  if (!v51)
    goto LABEL_91;
LABEL_3:
  v10 = *((_DWORD *)v51 + 1);
  if (!v50)
    goto LABEL_92;
LABEL_4:
  v11 = *((_DWORD *)v50 + 1);
LABEL_5:
  if ((v11 | v10) < 0
    || ((v12 = __OFADD__(v10, v11), v13 = v10 + v11, !v12) ? (v14 = 0) : (v14 = 1),
        v9 < 0 || (v14 & 1) != 0 || (result = (v9 + v13), __OFADD__(v9, v13))))
  {
    v53 = 0;
    goto LABEL_96;
  }
  if (v52 && (*((_BYTE *)v52 + 16) & 4) == 0)
  {
    v15 = 0;
    goto LABEL_19;
  }
  if (v51)
  {
    v16 = *((_DWORD *)v51 + 4);
    v15 = (v16 >> 2) & 1;
    if (v50 && (v16 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v50)
    {
LABEL_18:
      v15 = (*((unsigned __int8 *)v50 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v15 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v52, (uint64_t)v51, (uint64_t)v50, &v53);
  if (!v53)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v18 = v50;
  v50 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v51;
  v51 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v52;
  v52 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v48 ? (char *)v48 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v55 = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v22 = (uint64_t)v48;
    v48 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, v46);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v47, v59);
              v48 = 0;
              v49 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v49) = 3;
              v48 = v33;
              v34 = HIDWORD(v49);
              *((_DWORD *)v33 + 4 * HIDWORD(v49)) = *(_DWORD *)buf;
              v35 = *(_QWORD *)&v55[4];
              if (*(_QWORD *)&v55[4])
                **(_DWORD **)&v55[4] += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = v56;
              v36 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v58;
              v37 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              HIDWORD(v49) = v34 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, a1, 4, &v48);
              v38 = v48;
              if (HIDWORD(v49))
              {
                v39 = 16 * HIDWORD(v49);
                v40 = (WTF::StringImpl **)((char *)v48 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v48;
              }
              if (v38)
              {
                v48 = 0;
                LODWORD(v49) = 0;
                WTF::fastFree(v38, v23);
              }
              v42 = v59[0];
              v59[0] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v57;
              v57 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = *(WTF::StringImpl **)&v55[4];
              *(_QWORD *)&v55[4] = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v45 = __ldxr(v25);
          if (v45 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore17AsyncAudioDecoder11decodeAsyncEONS_3RefIN3JSC11ArrayBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEfE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E33686D8;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(a1 + 6);
  v2 = a1[1];
  if (v2)
  {
    WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead(v2);
    v3 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore17AsyncAudioDecoder11decodeAsyncEONS_3RefIN3JSC11ArrayBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEfE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = (uint64_t)off_1E33686D8;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(a1 + 6);
  v3 = a1[1];
  if (v3)
  {
    WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead(v3);
    v4 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore17AsyncAudioDecoder11decodeAsyncEONS_3RefIN3JSC11ArrayBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEfE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  float v6;
  void *v7;
  OpaqueExtAudioFile *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::Logger *v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  WTF **v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  JSC::ArrayBufferView *v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  JSC::ArrayBufferView *v31;
  JSC::ArrayBufferView *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  WTF *v43;
  uint64_t v44;
  _DWORD **v45;
  _DWORD *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  __int128 v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  _BYTE *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  _BYTE *v65;
  char v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  JSC::ArrayBufferView *v71;
  int v72;
  unsigned int **v73;
  unsigned __int8 *v74;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned __int8 *v79;
  BOOL v80;
  unsigned __int8 *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  NSObject *v91;
  uint64_t v92;
  void *v93;
  char *v94;
  unsigned __int8 *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  WTF::Logger *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::Logger *v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned __int8 v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t result;
  int v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int **v153;
  uint64_t v154;
  uint64_t v155;
  JSC::ArrayBufferView *v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::Logger *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  __int128 buf;
  __int128 v178;
  PAL *v179;
  WTF::StringImpl *v180;
  unsigned int *v181;
  WTF::StringImpl *v182;
  int v183;
  WTF::StringImpl *v184;
  int v185;
  WTF::StringImpl *v186;
  int v187;
  WTF::StringImpl *v188;
  int v189;
  WTF::StringImpl *v190[5];

  v1 = a1;
  v190[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(WTF **)(v2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v4)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v3 = (WTF *)(((unint64_t)v3 & 0x3FFFFFFFFLL) + v4);
    }
  }
  if (*(_BYTE *)(v2 + 64) && (v152 = *(_QWORD *)(v2 + 32)) != 0)
    v5 = *(WTF **)(v152 + 32);
  else
    v5 = *(WTF **)(v2 + 48);
  v6 = *(float *)(a1 + 56);
  WebCore::AudioFileReader::AudioFileReader(&buf, v3, v5);
  WebCore::AudioFileReader::createBus((WebCore::AudioFileReader *)&buf, v6, 0, v7, (uint64_t *)&v162);
  *(_QWORD *)&buf = &off_1E34084F8;
  if (v179)
    PAL::softLinkAudioToolboxExtAudioFileDispose(v179, v8);
  v179 = 0;
  if (*((_QWORD *)&v178 + 1))
    PAL::softLinkAudioToolboxAudioFileClose(*((PAL **)&v178 + 1), v8);
  v9 = v181;
  *((_QWORD *)&v178 + 1) = 0;
  v181 = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  std::unique_ptr<WebCore::AudioFileReaderWebMData>::reset[abi:sn180100]((uint64_t *)&v180, 0);
  v13 = v162;
  if (v162)
  {
    v14 = WTF::fastMalloc((WTF *)0x28);
    v16 = (unint64_t *)v14;
    *(_DWORD *)v14 = 1;
    *(_DWORD *)(v14 + 4) = *((_DWORD *)v13 + 13);
    v17 = *((_QWORD *)v13 + 1);
    *(_QWORD *)(v14 + 8) = v17;
    *(_QWORD *)(v14 + 16) = 0;
    v18 = (WTF **)(v14 + 16);
    *(_QWORD *)(v14 + 24) = 0;
    *(_WORD *)(v14 + 32) = 1;
    *(_DWORD *)(v14 + 36) = 0;
    v19 = *((unsigned int *)v13 + 7);
    v20 = !is_mul_ok(v17, v19);
    if (v17 > 0x40000000 || v20 || v17 * v19 >= 0x100000001)
    {
      WebCore::AudioBuffer::releaseMemory((WebCore::AudioBuffer *)v14, v15);
      v16[1] = 0;
    }
    else
    {
      buf = 0uLL;
      if ((_DWORD)v19)
      {
        if (!(v19 >> 29))
        {
          v21 = WTF::fastMalloc((WTF *)(8 * v19));
          v22 = 0;
          v23 = 0;
          DWORD2(buf) = v19;
          *(_QWORD *)&buf = v21;
          while (1)
          {
            JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(v16[1], (uint64_t *)&v156);
            v25 = v156;
            if (v156)
            {
              if (v23 >= *((unsigned int *)v13 + 7))
              {
                __break(0xC471u);
                goto LABEL_302;
              }
              v26 = *(_QWORD *)(*((_QWORD *)v13 + 2) + 8 * v23);
              v27 = *(const void **)v26;
              if (!*(_QWORD *)v26)
                v27 = **(const void ***)(v26 + 8);
              JSC::ArrayBufferView::setRangeImpl(v156, v27, 4 * v16[1], 0);
              v29 = v22;
              if (v22 == DWORD2(buf))
              {
                v30 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&buf, v22 + 1, (unint64_t)&v156);
                v29 = HIDWORD(buf);
                v22 = HIDWORD(buf) + 1;
                v21 = buf;
                v31 = *(JSC::ArrayBufferView **)v30;
                *(_QWORD *)v30 = 0;
              }
              else
              {
                ++v22;
                v31 = v156;
                v156 = 0;
              }
              *(_QWORD *)(v21 + 8 * v29) = v31;
              HIDWORD(buf) = v22;
            }
            else
            {
              WebCore::AudioBuffer::releaseMemory((WebCore::AudioBuffer *)v16, v24);
              v16[1] = 0;
            }
            v32 = v156;
            v156 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 1)
                JSC::ArrayBufferView::operator delete();
              else
                --*(_DWORD *)v32;
            }
            if (!v25)
              goto LABEL_56;
            if (v19 == ++v23)
              goto LABEL_41;
          }
        }
        __break(0xC471u);
LABEL_302:
        JUMPOUT(0x19552A560);
      }
LABEL_41:
      WTF::FixedVector<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>>::operator=<0ul,WTF::CrashOnOverflow>(v18, (WTF **)&buf);
      v33 = *v18;
      if (*v18)
      {
        v34 = *(unsigned int *)v33;
        if ((_DWORD)v34)
        {
          v35 = 8;
          v36 = (WTF *)WTF::fastMalloc((WTF *)((16 * v34) | 8));
          v33 = v36;
          *(_DWORD *)v36 = v34;
          do
          {
            v37 = (_QWORD *)((char *)v36 + v35);
            *v37 = 0;
            v37[1] = 0;
            __dmb(0xAu);
            v38 = *(_QWORD *)((char *)v36 + v35 + 8);
            v37[1] = 0;
            if (v38)
              *(_QWORD *)(v38 + 8) = 3;
            v35 += 16;
          }
          while (v37 + 2 != (_QWORD *)((char *)v36 + 16 * v34 + 8));
        }
        else
        {
          v33 = 0;
        }
      }
      v39 = (WTF *)v16[3];
      v16[3] = (unint64_t)v33;
      if (v39)
      {
        v40 = *(unsigned int *)v39;
        if ((_DWORD)v40)
        {
          v41 = 16 * v40;
          v42 = (char *)v39 + 16;
          do
          {
            if (*(_QWORD *)v42)
            {
              *(_QWORD *)(*(_QWORD *)v42 + 8) = 3;
              *(_QWORD *)v42 = 0;
            }
            v42 += 16;
            v41 -= 16;
          }
          while (v41);
        }
        WTF::fastFree(v39, v28);
      }
LABEL_56:
      v43 = (WTF *)buf;
      if (HIDWORD(buf))
      {
        v44 = 8 * HIDWORD(buf);
        v45 = (_DWORD **)buf;
        do
        {
          v46 = *v45;
          *v45 = 0;
          if (v46)
          {
            if (*v46 == 1)
              JSC::ArrayBufferView::operator delete();
            else
              --*v46;
          }
          ++v45;
          v44 -= 8;
        }
        while (v44);
      }
      if (v43)
        WTF::fastFree(v43, v28);
    }
    v162 = 0;
    do
    {
      v47 = __ldaxr((unsigned int *)v13);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, (unsigned int *)v13));
    if (!v48)
    {
      atomic_store(1u, (unsigned int *)v13);
      *(_QWORD *)&buf = v13;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&buf, v28);
    }
  }
  else
  {
    v16 = 0;
  }
  v49 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v50 = off_1E3368700;
  v50[1] = v49;
  v156 = 0;
  *(_QWORD *)&buf = v50;
  WTF::callOnMainThread();
  v51 = buf;
  *(_QWORD *)&buf = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v156);
  if (!v16)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v160) = 22;
    buf = 0uLL;
    *(_QWORD *)&v178 = "operator()";
    *((_QWORD *)&v178 + 1) = 0;
    v52 = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)(v52 + 8) = 1;
    *(_QWORD *)v52 = off_1E3368688;
    v57 = v178;
    *(_OWORD *)(v52 + 16) = buf;
    *(_OWORD *)(v52 + 32) = v57;
    *(_BYTE *)(v52 + 48) = 0;
    v58 = (unsigned __int8 *)(v52 + 48);
    *(_DWORD *)(v52 + 80) = 0;
    *(_QWORD *)(v52 + 88) = v52 + 104;
    *(_QWORD *)(v52 + 96) = 1;
    *(_QWORD *)(v52 + 112) = 0;
    *(_QWORD *)(v52 + 120) = 0;
    *(_WORD *)(v52 + 128) = 0;
    v59 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v52);
    if (*v59 && v59[16] >= 4u)
      v59 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v59, v52);
    v156 = (JSC::ArrayBufferView *)(v52 + 48);
    LOBYTE(v157) = 1;
    if (__ldaxr(v58))
    {
      __clrex();
    }
    else if (!__stxr(1u, v58))
    {
LABEL_98:
      v65 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v59);
      if (*v65 && v65[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v65, (WTF::Logger::LogSiteIdentifier *)&buf, " rejecting ", v52);
      v66 = (char)v160;
      WTF::String::isolatedCopy();
      LOBYTE(v162) = v66;
      v67 = v163;
      v163 = 0;
      v68 = *(unsigned int *)(v52 + 80);
      if ((_DWORD)v68 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t))off_1E33686A0[v68])(&v176, v52 + 56);
      *(_BYTE *)(v52 + 56) = v66;
      *(_QWORD *)(v52 + 64) = v67;
      *(_DWORD *)(v52 + 72) = 1;
      *(_DWORD *)(v52 + 80) = 1;
      WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::dispatchAll(v52, (unsigned __int8 **)&v156);
      v70 = v163;
      v163 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v69);
        else
          *(_DWORD *)v70 -= 2;
      }
      if (!(_BYTE)v157)
        goto LABEL_112;
      v71 = v156;
      v72 = __ldxr((unsigned __int8 *)v156);
      if (v72 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v156))
        {
LABEL_112:
          v63 = v161;
          v161 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              v63 = (WTF::StringImpl *)WTF::StringImpl::destroy(v63, v69);
            else
              *(_DWORD *)v63 -= 2;
          }
          goto LABEL_115;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v71);
      goto LABEL_112;
    }
    v59 = (unsigned __int8 *)MEMORY[0x19AEA534C](v58);
    goto LABEL_98;
  }
  buf = 0uLL;
  *(_QWORD *)&v178 = "operator()";
  *((_QWORD *)&v178 + 1) = 0;
  v52 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v52 + 8) = 1;
  *(_QWORD *)v52 = off_1E3368688;
  v53 = v178;
  *(_OWORD *)(v52 + 16) = buf;
  *(_OWORD *)(v52 + 32) = v53;
  *(_BYTE *)(v52 + 48) = 0;
  v54 = (unsigned __int8 *)(v52 + 48);
  *(_DWORD *)(v52 + 80) = 0;
  *(_QWORD *)(v52 + 88) = v52 + 104;
  *(_QWORD *)(v52 + 96) = 1;
  *(_QWORD *)(v52 + 112) = 0;
  *(_QWORD *)(v52 + 120) = 0;
  *(_WORD *)(v52 + 128) = 0;
  v55 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v52);
  if (*v55 && v55[16] >= 4u)
    v55 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v55, v52);
  v156 = (JSC::ArrayBufferView *)(v52 + 48);
  LOBYTE(v157) = 1;
  if (__ldaxr(v54))
  {
    __clrex();
LABEL_84:
    v55 = (unsigned __int8 *)MEMORY[0x19AEA534C](v54);
    goto LABEL_85;
  }
  if (__stxr(1u, v54))
    goto LABEL_84;
LABEL_85:
  v61 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v55);
  if (*v61 && v61[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v61, (WTF::Logger::LogSiteIdentifier *)&buf, " resolving ", v52);
  v62 = *(unsigned int *)(v52 + 80);
  if ((_DWORD)v62 != -1)
    ((void (*)(WTF::Logger **, uint64_t))off_1E33686A0[v62])(&v162, v52 + 56);
  *(_QWORD *)(v52 + 56) = v16;
  *(_DWORD *)(v52 + 72) = 0;
  *(_DWORD *)(v52 + 80) = 1;
  WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::dispatchAll(v52, (unsigned __int8 **)&v156);
  if ((_BYTE)v157)
  {
    v63 = v156;
    v64 = __ldxr((unsigned __int8 *)v156);
    if (v64 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v156))
        goto LABEL_115;
    }
    else
    {
      __clrex();
    }
    v63 = (WTF::StringImpl *)WTF::Lock::unlockSlow(v63);
  }
LABEL_115:
  v73 = (unsigned int **)(v1 + 8);
  v156 = 0;
  v157 = 0;
  v158 = "invokeAsync proxy";
  v159 = 0;
  v74 = (unsigned __int8 *)(v52 + 48);
  if (__ldaxr((unsigned __int8 *)(v52 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v74))
  {
    goto LABEL_119;
  }
  v63 = (WTF::StringImpl *)MEMORY[0x19AEA534C](v52 + 48);
LABEL_119:
  *(_BYTE *)(v52 + 128) = 1;
  v76 = *v73;
  if (*v73)
  {
    v77 = v76 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  v79 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v63);
  if (*v79)
    v80 = v79[16] >= 4u;
  else
    v80 = 0;
  if (!v80)
    goto LABEL_237;
  v81 = v79;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v156);
  WTF::String::String((WTF::String *)&v169, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, &v168);
  WTF::String::String((WTF::String *)&v167, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString((uint64_t)v76, &v166);
  WTF::String::String((WTF::String *)&v165, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v82 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v164, "]");
  v162 = v169;
  v160 = v168;
  v176 = v167;
  *(_QWORD *)&buf = v170;
  v174 = v165;
  v175 = v166;
  v172 = v164;
  v173 = v82;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v162, (uint64_t *)&v160, (uint64_t *)&v176, (uint64_t *)&v175, (uint64_t *)&v174, (uint64_t *)&v173, (uint64_t *)&v172, &v171);
  if (!v171)
  {
    __break(0xC471u);
    JUMPOUT(0x19552A568);
  }
  v84 = v164;
  v164 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::destroy(v84, v83);
      if (!v82)
        goto LABEL_134;
      goto LABEL_132;
    }
    *(_DWORD *)v84 -= 2;
  }
  if (!v82)
    goto LABEL_134;
LABEL_132:
  if (*(_DWORD *)v82 == 2)
    WTF::StringImpl::destroy(v82, v83);
  else
    *(_DWORD *)v82 -= 2;
LABEL_134:
  v85 = v165;
  v165 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v83);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = v166;
  v166 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v83);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = v167;
  v167 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v83);
    else
      *(_DWORD *)v87 -= 2;
  }
  v88 = v168;
  v168 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v83);
    else
      *(_DWORD *)v88 -= 2;
  }
  v89 = v169;
  v169 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, v83);
    else
      *(_DWORD *)v89 -= 2;
  }
  v90 = v170;
  v170 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, v83);
    else
      *(_DWORD *)v90 -= 2;
  }
  v154 = v1;
  v91 = *((_QWORD *)v81 + 4);
  v92 = os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v92)
  {
    WTF::String::utf8();
    v94 = v162 ? (char *)v162 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v94;
    _os_log_impl(&dword_1940B8000, v91, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v92 = (uint64_t)v162;
    v162 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 1)
        v92 = WTF::fastFree((WTF *)v92, v93);
      else
        --*(_DWORD *)v92;
    }
  }
  if (*v81 && v81[16] >= 4u)
  {
    v95 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v96 = *v95;
      if ((v96 & 1) != 0)
        break;
      v97 = __ldaxr(v95);
      if (v97 == v96)
      {
        if (!__stxr(v96 | 1, v95))
        {
          v153 = (unsigned int **)(v1 + 8);
          v98 = WTF::Logger::observers((WTF::Logger *)v92);
          v99 = *(unsigned int *)(v98 + 12);
          if ((_DWORD)v99)
          {
            v100 = *(uint64_t **)v98;
            v155 = *(_QWORD *)v98 + 8 * v99;
            do
            {
              v101 = *v100;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v156);
              LODWORD(v178) = 0;
              WTF::String::String((WTF::String *)((char *)&v178 + 8), " invoking chainTo() [");
              LODWORD(v179) = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, &v180);
              LODWORD(v181) = 0;
              WTF::String::String((WTF::String *)&v182, " chainedPromise:");
              v183 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString((uint64_t)v76, &v184);
              v185 = 0;
              WTF::String::String((WTF::String *)&v186, " isNothing:");
              v187 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v188 = v162;
              v189 = 0;
              WTF::String::String((WTF::String *)v190, "]");
              v162 = 0;
              v163 = 0;
              v102 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v163) = 8;
              v162 = v102;
              v103 = HIDWORD(v163);
              *((_DWORD *)v102 + 4 * HIDWORD(v163)) = buf;
              v104 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v102 + 2 * v103 + 1) = v104;
              *((_DWORD *)v102 + 4 * (v103 + 1)) = v178;
              v105 = *((_QWORD *)&v178 + 1);
              if (*((_QWORD *)&v178 + 1))
                **((_DWORD **)&v178 + 1) += 2;
              *((_QWORD *)v102 + 2 * (v103 + 1) + 1) = v105;
              *((_DWORD *)v102 + 4 * (v103 + 2)) = (_DWORD)v179;
              v106 = v180;
              if (v180)
                *(_DWORD *)v180 += 2;
              *((_QWORD *)v102 + 2 * (v103 + 2) + 1) = v106;
              *((_DWORD *)v102 + 4 * (v103 + 3)) = (_DWORD)v181;
              v107 = v182;
              if (v182)
                *(_DWORD *)v182 += 2;
              *((_QWORD *)v102 + 2 * (v103 + 3) + 1) = v107;
              *((_DWORD *)v102 + 4 * (v103 + 4)) = v183;
              v108 = v184;
              if (v184)
                *(_DWORD *)v184 += 2;
              *((_QWORD *)v102 + 2 * (v103 + 4) + 1) = v108;
              *((_DWORD *)v102 + 4 * (v103 + 5)) = v185;
              v109 = v186;
              if (v186)
                *(_DWORD *)v186 += 2;
              *((_QWORD *)v102 + 2 * (v103 + 5) + 1) = v109;
              *((_DWORD *)v102 + 4 * (v103 + 6)) = v187;
              v110 = v188;
              if (v188)
                *(_DWORD *)v188 += 2;
              *((_QWORD *)v102 + 2 * (v103 + 6) + 1) = v110;
              *((_DWORD *)v102 + 4 * (v103 + 7)) = v189;
              v111 = v190[0];
              if (v190[0])
                *(_DWORD *)v190[0] += 2;
              *((_QWORD *)v102 + 2 * (v103 + 7) + 1) = v111;
              HIDWORD(v163) = v103 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v101 + 16))(v101, v81, 4, &v162);
              v112 = v162;
              if (HIDWORD(v163))
              {
                v113 = 16 * HIDWORD(v163);
                v114 = (WTF::StringImpl **)((char *)v162 + 8);
                do
                {
                  v115 = *v114;
                  *v114 = 0;
                  if (v115)
                  {
                    if (*(_DWORD *)v115 == 2)
                      WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v93);
                    else
                      *(_DWORD *)v115 -= 2;
                  }
                  v114 += 2;
                  v113 -= 16;
                }
                while (v113);
                v112 = v162;
              }
              if (v112)
              {
                v162 = 0;
                LODWORD(v163) = 0;
                WTF::fastFree(v112, v93);
              }
              v116 = v190[0];
              v190[0] = 0;
              if (v116)
              {
                if (*(_DWORD *)v116 == 2)
                  WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v93);
                else
                  *(_DWORD *)v116 -= 2;
              }
              v117 = v188;
              v188 = 0;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2)
                  WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v93);
                else
                  *(_DWORD *)v117 -= 2;
              }
              v118 = v186;
              v186 = 0;
              if (v118)
              {
                if (*(_DWORD *)v118 == 2)
                  WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v93);
                else
                  *(_DWORD *)v118 -= 2;
              }
              v119 = v184;
              v184 = 0;
              if (v119)
              {
                if (*(_DWORD *)v119 == 2)
                  WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v93);
                else
                  *(_DWORD *)v119 -= 2;
              }
              v120 = v182;
              v182 = 0;
              if (v120)
              {
                if (*(_DWORD *)v120 == 2)
                  WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v93);
                else
                  *(_DWORD *)v120 -= 2;
              }
              v121 = v180;
              v180 = 0;
              if (v121)
              {
                if (*(_DWORD *)v121 == 2)
                  WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v93);
                else
                  *(_DWORD *)v121 -= 2;
              }
              v122 = (WTF::StringImpl *)*((_QWORD *)&v178 + 1);
              *((_QWORD *)&v178 + 1) = 0;
              if (v122)
              {
                if (*(_DWORD *)v122 == 2)
                  WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v93);
                else
                  *(_DWORD *)v122 -= 2;
              }
              v123 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v123)
              {
                if (*(_DWORD *)v123 == 2)
                  WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v93);
                else
                  *(_DWORD *)v123 -= 2;
              }
              ++v100;
            }
            while (v100 != (uint64_t *)v155);
          }
          v124 = __ldxr(v95);
          if (v124 == 1)
          {
            v73 = v153;
            v74 = (unsigned __int8 *)(v52 + 48);
            if (!__stlxr(0, v95))
              break;
          }
          else
          {
            __clrex();
            v73 = v153;
            v74 = (unsigned __int8 *)(v52 + 48);
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v79 = (unsigned __int8 *)v171;
  v171 = 0;
  v1 = v154;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      v79 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v79, (WTF::StringImpl *)v93);
      if (!v76)
        goto LABEL_242;
      goto LABEL_238;
    }
    *(_DWORD *)v79 -= 2;
  }
LABEL_237:
  if (!v76)
    goto LABEL_242;
LABEL_238:
  v125 = v76 + 2;
  do
  {
    v126 = __ldaxr(v125);
    v127 = v126 - 1;
  }
  while (__stlxr(v127, v125));
  if (!v127)
  {
    atomic_store(1u, v76 + 2);
    v79 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v76 + 16))(v76);
  }
LABEL_242:
  v128 = atomic_load((unsigned __int8 *)(v52 + 129));
  v129 = (uint64_t)*v73;
  v130 = (unsigned __int8 *)(*v73 + 12);
  if (__ldaxr(v130))
  {
    __clrex();
LABEL_245:
    v79 = (unsigned __int8 *)MEMORY[0x19AEA534C](v130);
    goto LABEL_246;
  }
  if (__stxr(1u, v130))
    goto LABEL_245;
LABEL_246:
  result = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v79);
  if (*(_BYTE *)result && *(unsigned __int8 *)(result + 16) >= 4u)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>(result, (WTF::Logger::LogSiteIdentifier *)&v156, " runSynchronouslyOnTarget ", v129);
  atomic_store(v128, (unsigned __int8 *)(v129 + 129));
  v133 = __ldxr(v130);
  if (v133 != 1)
  {
    __clrex();
    goto LABEL_253;
  }
  if (__stlxr(0, v130))
LABEL_253:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v130);
  if (*(_DWORD *)(v52 + 80))
  {
    v134 = *v73;
    *v73 = 0;
    if (v134)
    {
      v135 = v134 + 2;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 + 1, v135));
      buf = 0uLL;
      *(_QWORD *)&v178 = "<chained promise>";
      *((_QWORD *)&v178 + 1) = 0;
      WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::Storage>((uint64_t)v134, v52 + 56, (WTF::Logger::LogSiteIdentifier *)&buf);
      do
      {
        v137 = __ldaxr(v135);
        v138 = v137 - 1;
      }
      while (__stlxr(v138, v135));
      if (!v138)
      {
        atomic_store(1u, v134 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v134 + 16))(v134);
      }
      result = WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead((uint64_t)v134);
      do
      {
        v139 = __ldaxr(v135);
        v140 = v139 - 1;
      }
      while (__stlxr(v140, v135));
      if (!v140)
      {
        atomic_store(1u, v134 + 2);
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v134 + 16))(v134);
      }
    }
    else
    {
      buf = 0uLL;
      *(_QWORD *)&v178 = "<chained promise>";
      *((_QWORD *)&v178 + 1) = 0;
      result = (uint64_t)WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::Storage>(0, v52 + 56, (WTF::Logger::LogSiteIdentifier *)&buf);
    }
  }
  else
  {
    v141 = *(unsigned int *)(v52 + 124);
    if ((_DWORD)v141 == *(_DWORD *)(v52 + 120))
    {
      result = WTF::Vector<WTF::NativePromiseProducer<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v52 + 112), v141 + 1, (unint64_t)v73);
      v142 = *(_QWORD *)(v52 + 112) + 40 * *(unsigned int *)(v52 + 124);
      v143 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v142 = v143;
      v144 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v142 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v142 + 24) = v144;
    }
    else
    {
      v145 = *(_QWORD *)(v52 + 112) + 40 * v141;
      v146 = *(_QWORD *)(v1 + 8);
      *(_QWORD *)(v1 + 8) = 0;
      *(_QWORD *)v145 = v146;
      v147 = *(_OWORD *)(v1 + 16);
      *(_OWORD *)(v145 + 24) = *(_OWORD *)(v1 + 32);
      *(_OWORD *)(v145 + 8) = v147;
    }
    ++*(_DWORD *)(v52 + 124);
  }
  v148 = __ldxr(v74);
  if (v148 == 1)
  {
    if (!__stlxr(0, v74))
      goto LABEL_275;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v74);
LABEL_275:
  v149 = (unsigned int *)(v52 + 8);
  do
  {
    v150 = __ldaxr(v149);
    v151 = v150 - 1;
  }
  while (__stlxr(v151, v149));
  if (!v151)
  {
    atomic_store(1u, (unsigned int *)(v52 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AsyncAudioDecoder::decodeAsync(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,float)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E3368700;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AsyncAudioDecoder::decodeAsync(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&,float)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E3368700;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;
  const char **v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;

  v34 = &v36;
  v35 = 1;
  v31 = (WTF *)&v33;
  v4 = *(WTF::NativePromiseBase ***)(a1 + 88);
  if (v4 == (WTF::NativePromiseBase **)(a1 + 104))
  {
    v5 = *(unsigned int *)(a1 + 100);
    memcpy(&v33, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v33;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v31 = (WTF *)v4;
    v5 = *(unsigned int *)(a1 + 100);
  }
  v32 = v5;
  *(_QWORD *)(a1 + 96) = 1;
  v6 = *(WTF **)(a1 + 112);
  v7 = *(_DWORD *)(a1 + 124);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(v9, a1, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = a1 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v34 = 0;
        v35 = 0;
        v36 = "<chained promise>";
        v37 = 0;
        WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v34);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = "<chained promise>";
        v37 = 0;
        WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v34);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      if (*v20)
      {
        WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead(*v20);
        v21 = (unsigned int *)*v20;
        *v20 = 0;
        if (v21)
        {
          v22 = v21 + 2;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v21 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    WTF::fastFree(v6, a2);
  v25 = v31;
  if (v32)
  {
    do
    {
      v26 = *(unsigned int **)v25;
      *(_QWORD *)v25 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      v25 = (WTF *)((char *)v25 + 8);
    }
    while (v25 != (WTF *)((char *)v31 + 8 * v32));
    v25 = v31;
  }
  if (&v33 != (uint64_t *)v25 && v25 != 0)
    WTF::fastFree(v25, a2);
}

void WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v20;
  int v21;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  char v34;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E33688F0;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v32[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v32);
      v13 = v32[0];
      v32[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v32[0] = v5;
    v14 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
    if (*v14)
      v15 = v14[16] >= 4u;
    else
      v15 = 0;
    if (v15)
      WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v14, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v32, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return;
  }
  v16 = *a3;
  v17 = __ldxr(*a3);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v16))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  v18 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v20 = *(_DWORD *)(a2 + 80);
  v21 = __ldxr(v18);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v18))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v20 != 2)
  {
    if (__ldaxr(v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 80) != 1)
      goto LABEL_65;
    LOBYTE(v32[0]) = 0;
    v33 = -1;
    v25 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v25 != -1)
    {
      ((void (*)(char *, _QWORD *, uint64_t))off_1E3368718[v25])(&v34, v32, a2 + 56);
      v33 = v25;
    }
    v26 = __ldxr(v18);
    if (v26 == 1)
    {
      if (!__stlxr(0, v18))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v32);
        if (v33 != -1)
          ((void (*)(char *, _QWORD *))off_1E33686B8[v33])(&v34, v32);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
LABEL_65:
    v28 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(v28, v29, v30);
    return;
  }
  v31 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v31 + 16))(v32, v31);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v32);
  if (v33 != -1)
    ((void (*)(char *, _QWORD *))off_1E33686B8[v33])(&v34, v32);
  v33 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_60:
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, *a3))
  {
    return;
  }
  MEMORY[0x19AEA534C]();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E33688F0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E33688F0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::Logger::LogSiteIdentifier *v21;
  _QWORD v22[2];
  int v23;
  char v24;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v22[0] = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v22, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 80);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 80) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v22, v15);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v22);
      if (v23 != -1)
        ((void (*)(char *, _QWORD *))off_1E33686B8[v23])(&v24, v22);
      v23 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::Storage>(v19, v20, v21);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 80) != 1)
    goto LABEL_46;
  LOBYTE(v22[0]) = 0;
  v23 = -1;
  v17 = *(unsigned int *)(v10 + 72);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E3368718[v17])(&v24, v22, v10 + 56);
    v23 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v22);
  if (v23 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E33686B8[v23])(&v24, v22);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E33686A0[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E3368728[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSB_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISH_SI_EENS8_8FunctionIFSP_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSL_SP_SS_EEEOS17_EEEDcSZ_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33686A0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSB_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISH_SI_EENS8_8FunctionIFSP_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSL_SP_SS_EEEOS17_EEEDcSZ_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[16];
  int v17;
  _WORD v18[8];
  int v19;
  char v20;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v16[0] = 0;
      v17 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 == -1)
      {
        v9 = *(_DWORD *)(a2 + 16);
        if (v9 == -1)
        {
LABEL_29:
          if (v17 != -1)
            return ((uint64_t (*)(_WORD *, _BYTE *))off_1E33686B8[v17])(v18, v16);
          return result;
        }
        v18[0] = 0;
      }
      else
      {
        result = ((uint64_t (*)(_WORD *, _BYTE *, uint64_t))off_1E3368718[v7])(v18, v16, a3);
        v17 = v7;
        v8 = v6 + 16;
        v9 = *((_DWORD *)v6 + 4);
        if (v9 != -1 && v9 == (_DWORD)v7)
        {
          result = ((uint64_t (*)(_WORD *, _BYTE *, _BYTE *))off_1E3368740[v7])(v18, v16, v6);
          goto LABEL_29;
        }
        v18[0] = 0;
        if (!*((_BYTE *)v18 + v7))
        {
          v11 = v16;
LABEL_19:
          LOBYTE(v18[0]) = 0;
          v19 = -1;
          v8 = v6 + 16;
          if (v9 != -1)
          {
LABEL_20:
            result = ((uint64_t (*)(char *, _WORD *, _BYTE *))off_1E3368718[v9])(&v20, v18, v6);
            v19 = v9;
            v12 = *((unsigned int *)v6 + 4);
            if ((_DWORD)v12 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E33686B8[v12])(&v20, v6);
          }
LABEL_23:
          *((_DWORD *)v6 + 4) = -1;
          v13 = *((unsigned int *)v11 + 4);
          if ((_DWORD)v13 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E3368750[v13])(&v20, v6, v11);
            *v8 = v13;
            v14 = *((unsigned int *)v11 + 4);
            if ((_DWORD)v14 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E33686B8[v14])(&v20, v11);
          }
          *((_DWORD *)v11 + 4) = -1;
          v15 = v19;
          if (v19 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _WORD *))off_1E3368750[v19])(&v20, v11, v18);
            *((_DWORD *)v11 + 4) = v15;
            if (v19 != -1)
              result = ((uint64_t (*)(char *, _WORD *))off_1E33686B8[v19])(&v20, v18);
          }
          goto LABEL_29;
        }
        v18[0] = 0;
        if (v9 == -1)
        {
          LOBYTE(v18[0]) = 0;
          v19 = -1;
          v11 = v16;
          goto LABEL_23;
        }
      }
      if (*((_BYTE *)v18 + v9))
      {
        LOBYTE(v18[0]) = 0;
        v19 = -1;
        v8 = v6 + 16;
        v11 = v16;
        goto LABEL_20;
      }
      v9 = v7;
      v11 = v6;
      v6 = v16;
      goto LABEL_19;
    }
    result = ((uint64_t (*)(_WORD *, uint64_t))off_1E33686A0[v5])(v18, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 != -1)
  {
    result = ((uint64_t (*)(_WORD *, uint64_t, uint64_t))off_1E3368718[v10])(v18, v4, a3);
    *(_DWORD *)(v4 + 16) = v10;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSB_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISH_SI_EENS8_8FunctionIFSP_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSL_SP_SS_EEEOS17_EEEDcSZ_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33686A0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF3RefIN7WebCore11AudioBufferENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS9_9ExceptionEEE6__swapB8sn180100ERSH_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEESS_EEEDcSJ_DpT0_(uint64_t a1, WTF ***a2, WTF ***a3)
{
  WTF **v4;
  WTF **v5;
  WTF **v6;
  WTF **result;

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = *a2;
  *a2 = v5;
  if (v6)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v6, a2);
  result = *a3;
  *a3 = v4;
  if (result)
    return WTF::RefCounted<WebCore::AudioBuffer>::deref(result, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF3RefIN7WebCore11AudioBufferENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS9_9ExceptionEEE6__swapB8sn180100ERSH_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEESS_EEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v4 = *(_BYTE *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)a3 = v4;
  result = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSG_SH_EEEEEvRSJ_OT_EUlRSO_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSG_SH_EEEOSX_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSG_SH_EEEEEvRSJ_OT_EUlRSO_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSG_SH_EEEOSX_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::NativePromiseProducer<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  unsigned int *v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = v3;
        do
        {
          v9 = *(unsigned int **)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)v7 = v9;
          v10 = *(_OWORD *)((char *)v8 + 8);
          *(_OWORD *)(v7 + 6) = *(_OWORD *)((char *)v8 + 24);
          *(_OWORD *)(v7 + 2) = v10;
          result = *(unsigned int **)v8;
          if (*(_QWORD *)v8)
          {
            WTF::NativePromise<WTF::Ref<WebCore::AudioBuffer,WTF::RawPtrTraits<WebCore::AudioBuffer>,WTF::DefaultRefDerefTraits<WebCore::AudioBuffer>>,WebCore::Exception,0u>::assertIsDead((uint64_t)result);
            result = *(unsigned int **)v8;
            *(_QWORD *)v8 = 0;
            if (result)
            {
              v11 = result + 2;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
              }
            }
          }
          else
          {
            *(_QWORD *)v8 = 0;
          }
          v7 += 10;
          v8 = (WTF *)((char *)v8 + 40);
        }
        while (v8 != (WTF *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  WTF **v17;
  WTF *v18;
  WTF *v19;
  _QWORD *v20;
  char v21[48];

  v4 = *(_QWORD **)(a3 + 32);
  if (v4)
  {
    v5 = v4[2];
    if (v5
      && ((v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
       || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
       || (v5 & 0x3FFFFFFFFLL) + v6))
    {
      *(_DWORD *)v4 += 2;
    }
    else
    {
      v4 = 0;
    }
  }
  v20 = v4;
  if ((*(_BYTE *)(a3 + 6) & 4) != 0)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 16) >> 2;
    v8 = 1;
  }
  MEMORY[0x19AEA3750](v21, a1, a2, &v20, *(_QWORD *)(a3 + 8), v7, v8);
  v9 = v20;
  v20 = 0;
  if (v9)
  {
    v10 = *(_DWORD *)v9 == 2;
    *(_DWORD *)v9 -= 2;
    if (v10)
    {
      v15 = v9[10];
      if (v15)
      {
        *(_QWORD *)(v15 + 8) = 3;
        v9[10] = 0;
      }
      if ((v9[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v9 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v9 + 2));
      v17 = (WTF **)v9[1];
      if ((v17 & 1) == 0 && v17)
      {
        v19 = (WTF *)v9[1];
        v18 = *v17;
        if (*v17)
        {
          *(_QWORD *)v19 = 0;
          *((_DWORD *)v19 + 2) = 0;
          WTF::fastFree(v18, v16);
        }
        WTF::fastFree(v19, v16);
      }
      WTF::fastFree((WTF *)v9, v16);
    }
  }
  v11 = *(_QWORD **)(a1 + 40464);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::float32ArraySpaceSlow((JSC::GCClient::Heap *)(a1 + 37552));
  SlowCase = v11[3];
  if (SlowCase >= v11[4])
  {
    SlowCase = v11[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_18;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ v11[6];
    v11[4] = SlowCase + HIDWORD(v14);
    v11[5] = SlowCase + (int)v14;
  }
  v11[3] = SlowCase + 48;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  JSC::JSArrayBufferView::JSArrayBufferView();
  JSC::JSArrayBufferView::finishCreation();
  return SlowCase;
}

BOOL JSC::ArrayBufferView::zeroRangeImpl(JSC::ArrayBufferView *this, uint64_t a2, size_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BOOL4 v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    goto LABEL_8;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_37;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v4 & 0x3FFFFFFFFLL) + v5))
    goto LABEL_37;
  v6 = *((_BYTE *)this + 6);
  if ((v6 & 3) == 0)
  {
    v3 = *((_QWORD *)this + 2);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v3 + 64) && (v19 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v14 = atomic_load((unint64_t *)(v19 + 32));
    v6 = *((_BYTE *)this + 6);
  }
  else
  {
    v14 = *(_QWORD *)(v3 + 48);
  }
  v15 = *((_QWORD *)this + 1);
  if ((v6 & 4) == 0)
  {
    v16 = *((_QWORD *)this + 2) + v15 <= v14 && v14 >= v15;
    if (v16)
      v3 = 0;
    else
      v3 = *((_QWORD *)this + 2);
    goto LABEL_8;
  }
  v16 = v14 >= v15;
  v17 = v14 - v15;
  if (v16)
  {
LABEL_37:
    v3 = 0;
    goto LABEL_8;
  }
  if ((*((_BYTE *)this + 4) - 4) > 7u)
    LOBYTE(v18) = 0;
  else
    v18 = qword_1968DEED0[(char)(*((_BYTE *)this + 4) - 4)];
  v3 = (-1 << v18) & v17;
LABEL_8:
  v7 = !__CFADD__(a2, a3);
  v8 = a2 + a3 <= v3 && v7;
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v11 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v12 = *((_QWORD *)this + 3);
          goto LABEL_23;
        }
        if ((v10 & 0x3FFFFFFFFLL) + v11)
        {
          v12 = *((_QWORD *)this + 3);
          if (v12 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v12 = (v12 & 0x3FFFFFFFFLL) + v11;
          goto LABEL_23;
        }
      }
    }
    v12 = 0;
LABEL_23:
    bzero((void *)(v12 + a2), a3);
  }
  return v8;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioContext::AudioContext(WebCore::Document &,WebCore::AudioContextOptions const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  *a1 = &off_1E33687B0;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v6 = (unsigned int *)(v5 + 24);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)(v5 + 24));
        v9 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        v3 = v9;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::AudioContext(WebCore::Document &,WebCore::AudioContextOptions const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  *(_QWORD *)this = &off_1E33687B0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v6 = (unsigned int *)(v5 + 24);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)(v5 + 24));
        v9 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        v3 = v9;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::AudioContext(WebCore::Document &,WebCore::AudioContextOptions const&)::$_0,void>::call(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = *(_BYTE **)(result + 8);
  if (!v1[379] && !v1[380] && v1[376] != 3 && !v1[381])
  {
    v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 80))(*(_QWORD *)(result + 8));
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    v1[380] = 1;
    if (v1[376] != 1)
      return WebCore::AudioContext::startRendering((uint64_t)v1);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioContext::close(WebCore::DOMPromiseDeferred<void> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  *a1 = &off_1E33687D8;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v6 = (unsigned int *)(v5 + 24);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)(v5 + 24));
        v9 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        v3 = v9;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::close(WebCore::DOMPromiseDeferred<void> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  *(_QWORD *)this = &off_1E33687D8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v6 = (unsigned int *)(v5 + 24);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)(v5 + 24));
        v9 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        v3 = v9;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::close(WebCore::DOMPromiseDeferred<void> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  WebCore::BaseAudioContext::setState(v1, (void *)3);
  if (*(_BYTE *)(v1 + 380))
  {
    WebCore::BaseAudioContext::uninitialize((WebCore::BaseAudioContext *)v1);
    WebCore::BaseAudioContext::setState(v1, (void *)3);
  }
  return WebCore::PlatformMediaSession::setActive(*(_QWORD *)(v1 + 440), 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioContext::suspendRendering(WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *a1 = &off_1E3368800;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v6 + 24));
        v10 = v4;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        v4 = v10;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::suspendRendering(WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E3368800;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v6 + 24));
        v10 = v4;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        v4 = v10;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::AudioContext::suspendRendering(WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;
  objc_class *v14;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_BYTE *)a2;
    v5 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v14 = 0;
    v12[0] = v4;
    if (v5)
      *(_DWORD *)v5 += 2;
    v13 = v5;
    WebCore::DeferredPromise::reject(v3, v12, 0, &v14);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        if (!v5)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      return result;
LABEL_8:
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
    *(_DWORD *)v5 -= 2;
    return result;
  }
  result = (WTF::StringImpl *)WebCore::BaseAudioContext::setState(*(_QWORD *)(a1 + 8), 0);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
  {
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(uint64_t **)v10;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v8, v11, 0, (objc_class *)0xA);
    return (WTF::StringImpl *)MEMORY[0x19AEA32A0](v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioContext::resumeRendering(WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *a1 = &off_1E3368828;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v6 + 24));
        v10 = v4;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        v4 = v10;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::resumeRendering(WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E3368828;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)(v6 + 24));
        v10 = v4;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        v4 = v10;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::AudioContext::resumeRendering(WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22[8];
  WTF::StringImpl *v23;
  objc_class *v24;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_BYTE *)a2;
    v5 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v24 = 0;
    v22[0] = v4;
    if (v5)
      *(_DWORD *)v5 += 2;
    v23 = v5;
    WebCore::DeferredPromise::reject(v3, v22, 0, &v24);
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        if (!v5)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      return result;
LABEL_8:
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
    *(_DWORD *)v5 -= 2;
    return result;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 440) + 48);
  if (v9 == 4)
    v10 = 2;
  else
    v10 = 1;
  result = (WTF::StringImpl *)WebCore::BaseAudioContext::setState(*(_QWORD *)(a1 + 8), (void *)v10);
  v11 = (uint64_t *)(a1 + 24);
  if (v9 == 4)
  {
    v12 = (uint64_t *)(v8 + 248);
    if (*(_DWORD *)(v8 + 260) <= 1u)
    {
      if (*(_DWORD *)(v8 + 256) <= 1u)
        WTF::Vector<WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v8 + 248, 0x10uLL);
      if (*v12)
      {
        v13 = *(unsigned int *)(v8 + 260);
        if ((_DWORD)v13 != 2)
          bzero((void *)(*v12 + 16 * v13), 32 - 16 * v13);
      }
      *(_DWORD *)(v8 + 260) = 2;
    }
    v14 = *v12;
    result = (WTF::StringImpl *)(*v12 + 16);
    v15 = *(unsigned int *)(*v12 + 28);
    if ((_DWORD)v15 == *(_DWORD *)(*v12 + 24))
    {
      result = (WTF::StringImpl *)WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v15 + 1, (unint64_t)v11);
      v11 = (uint64_t *)result;
      v15 = *(unsigned int *)(v14 + 28);
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 16) + 8 * v15);
    }
    else
    {
      v16 = (uint64_t *)(*(_QWORD *)result + 8 * v15);
    }
    v21 = *v11;
    *v11 = 0;
    *v16 = v21;
    *(_DWORD *)(v14 + 28) = v15 + 1;
  }
  else
  {
    v17 = *v11;
    v18 = *(_QWORD *)(v17 + 24);
    if (v18 && *(_QWORD *)v18 && (*(_BYTE *)(v18 + 8) & 3) == 0)
    {
      v19 = *(_QWORD *)(v17 + 32);
      if (!v19 || (*(_BYTE *)(v19 + 8) & 3) != 0)
        v20 = 0;
      else
        v20 = *(uint64_t **)v19;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v17, v20, 0, (objc_class *)0xA);
      return (WTF::StringImpl *)MEMORY[0x19AEA32A0](v22);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioContext::startRendering(void)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;

  *a1 = &off_1E3368850;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v10 = (unsigned int *)(v9 + 24);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)(v9 + 24));
        v13 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        v3 = v13;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::startRendering(void)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;

  *(_QWORD *)this = &off_1E3368850;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v10 = (unsigned int *)(v9 + 24);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)(v9 + 24));
        v13 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        v3 = v13;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::startRendering(void)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 16))
    return WebCore::BaseAudioContext::setState(*(_QWORD *)(result + 8), (void *)1);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioContext::mayResumePlayback(BOOL)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;

  *a1 = &off_1E3368878;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v10 = (unsigned int *)(v9 + 24);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)(v9 + 24));
        v13 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        v3 = v13;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::mayResumePlayback(BOOL)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;

  *(_QWORD *)this = &off_1E3368878;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v10 = (unsigned int *)(v9 + 24);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)(v9 + 24));
        v13 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        v3 = v13;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::mayResumePlayback(BOOL)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::BaseAudioContext::setState(*(_QWORD *)(a1 + 8), (void *)(*(unsigned __int8 *)(a2 + 16) ^ 1u));
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  __int128 buf;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v48, a4);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = (WTF::StringImpl *)buf;
  if (v49)
  {
    v9 = *((_DWORD *)v49 + 1);
    if (v48)
      goto LABEL_3;
LABEL_91:
    v10 = 0;
    if ((_QWORD)buf)
      goto LABEL_4;
LABEL_92:
    v11 = 0;
    goto LABEL_5;
  }
  v9 = 0;
  if (!v48)
    goto LABEL_91;
LABEL_3:
  v10 = *((_DWORD *)v48 + 1);
  if (!(_QWORD)buf)
    goto LABEL_92;
LABEL_4:
  v11 = *(_DWORD *)(buf + 4);
LABEL_5:
  if ((v11 | v10) < 0
    || ((v12 = __OFADD__(v10, v11), v13 = v10 + v11, !v12) ? (v14 = 0) : (v14 = 1),
        v9 < 0 || (v14 & 1) != 0 || (result = (v9 + v13), __OFADD__(v9, v13))))
  {
    v50 = 0;
    goto LABEL_97;
  }
  if (v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
  {
    v15 = 0;
    goto LABEL_19;
  }
  if (v48)
  {
    v16 = *((_DWORD *)v48 + 4);
    v15 = (v16 >> 2) & 1;
    if (!(_QWORD)buf || (v16 & 4) == 0)
    {
LABEL_19:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v49, (uint64_t)v48, buf, &v50);
      if (v50)
      {
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v17);
          else
            *(_DWORD *)v8 -= 2;
        }
        goto LABEL_23;
      }
LABEL_97:
      __break(0xC471u);
      return result;
    }
LABEL_18:
    v15 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
    goto LABEL_19;
  }
  if ((_QWORD)buf)
    goto LABEL_18;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, v49, 0, 0, &v50);
  if (!v50)
    goto LABEL_97;
LABEL_23:
  v18 = v48;
  v48 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v49;
  v49 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v46 ? (char *)v46 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v46;
    v46 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v30 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v31 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v52 = 0;
              WTF::String::String((WTF::String *)&v53, a4);
              v54 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v55 = v46;
              v46 = 0;
              v47 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v47) = 3;
              v46 = v32;
              v33 = HIDWORD(v47);
              *((_DWORD *)v32 + 4 * HIDWORD(v47)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v52;
              v35 = v53;
              if (v53)
                *(_DWORD *)v53 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v54;
              v36 = v55;
              if (v55)
                *(_DWORD *)v55 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              HIDWORD(v47) = v33 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v46);
              v37 = v46;
              if (HIDWORD(v47))
              {
                v38 = 16 * HIDWORD(v47);
                v39 = (WTF::StringImpl **)((char *)v46 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v37 = v46;
              }
              if (v37)
              {
                v46 = 0;
                LODWORD(v47) = 0;
                WTF::fastFree(v37, v22);
              }
              v41 = v55;
              v55 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v53;
              v53 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v30);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioContext::suspendPlayback(void)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;

  *a1 = &off_1E33688A0;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v10 = (unsigned int *)(v9 + 24);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)(v9 + 24));
        v13 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        v3 = v13;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::suspendPlayback(void)::$_0,void,std::optional<WebCore::Exception> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;

  *(_QWORD *)this = &off_1E33688A0;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v9 + 16);
      *((_QWORD *)v3 + 1) = 0;
      v10 = (unsigned int *)(v9 + 24);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)(v9 + 24));
        v13 = v3;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        v3 = v13;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 6;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::suspendPlayback(void)::$_0,void,std::optional<WebCore::Exception> &&>::call(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 16))
    return WebCore::BaseAudioContext::setState(*(_QWORD *)(result + 8), (void *)(2 * (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 440) + 48) == 4)));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioContext::isPlayingAudioDidChange(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E33688C8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::isPlayingAudioDidChange(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33688C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioContext::isPlayingAudioDidChange(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        *(_DWORD *)(v2 - 264) += 2;
        result = (uint64_t)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v2 - 288));
        if (*(_DWORD *)(v2 - 264) == 2)
        {
          if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v3);
        }
        else
        {
          *(_DWORD *)(v2 - 264) -= 2;
        }
      }
    }
  }
  return result;
}

WebCore::AudioListener *WebCore::AudioListener::AudioListener(WebCore::AudioListener *this, WebCore::BaseAudioContext *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _OWORD *v31;
  void *v32;
  _OWORD *v33;
  void *v34;
  _OWORD *v35;
  void *v36;
  _OWORD *v37;
  void *v38;
  _OWORD *v39;
  void *v40;
  _OWORD *v41;
  void *v42;
  _OWORD *v43;
  void *v44;
  _OWORD *v45;
  void *v46;
  _OWORD *v47;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  *(_DWORD *)this = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v50;
  v49 = v50;
  v5 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 1) = WebCore::AudioParam::AudioParam(v5, a2, (_DWORD **)&v49, 0, 1, 0.0, -3.4028e38, 3.4028e38);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v50;
  v49 = v50;
  v8 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 2) = WebCore::AudioParam::AudioParam(v8, a2, (_DWORD **)&v49, 0, 1, 0.0, -3.4028e38, 3.4028e38);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v9);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = v50;
  v49 = v50;
  v11 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 3) = WebCore::AudioParam::AudioParam(v11, a2, (_DWORD **)&v49, 0, 1, 0.0, -3.4028e38, 3.4028e38);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v12);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v50;
  v49 = v50;
  v14 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 4) = WebCore::AudioParam::AudioParam(v14, a2, (_DWORD **)&v49, 0, 1, 0.0, -3.4028e38, 3.4028e38);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v15);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = v50;
  v49 = v50;
  v17 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 5) = WebCore::AudioParam::AudioParam(v17, a2, (_DWORD **)&v49, 0, 1, 0.0, -3.4028e38, 3.4028e38);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v18);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = v50;
  v49 = v50;
  v20 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 6) = WebCore::AudioParam::AudioParam(v20, a2, (_DWORD **)&v49, 0, 1, -1.0, -3.4028e38, 3.4028e38);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v21);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = v50;
  v49 = v50;
  v23 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 7) = WebCore::AudioParam::AudioParam(v23, a2, (_DWORD **)&v49, 0, 1, 0.0, -3.4028e38, 3.4028e38);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v24);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = v50;
  v49 = v50;
  v26 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 8) = WebCore::AudioParam::AudioParam(v26, a2, (_DWORD **)&v49, 0, 1, 1.0, -3.4028e38, 3.4028e38);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v27);
    else
      *(_DWORD *)v25 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v50;
  v49 = v50;
  v29 = WTF::fastMalloc((WTF *)0xA0);
  *((_QWORD *)this + 9) = WebCore::AudioParam::AudioParam(v29, a2, (_DWORD **)&v49, 0, 1, 0.0, -3.4028e38, 3.4028e38);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v30);
    else
      *(_DWORD *)v28 -= 2;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0xBFF0000000000000;
  WTF::fastAlignedFree(0, v30);
  v31 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 11) = v31;
  *((_QWORD *)this + 12) = 128;
  *v31 = 0u;
  v31[1] = 0u;
  v31[2] = 0u;
  v31[3] = 0u;
  v31[4] = 0u;
  v31[5] = 0u;
  v31[6] = 0u;
  v31[7] = 0u;
  v31[8] = 0u;
  v31[9] = 0u;
  v31[10] = 0u;
  v31[11] = 0u;
  v31[12] = 0u;
  v31[13] = 0u;
  v31[14] = 0u;
  v31[15] = 0u;
  v31[16] = 0u;
  v31[17] = 0u;
  v31[18] = 0u;
  v31[19] = 0u;
  v31[20] = 0u;
  v31[21] = 0u;
  v31[22] = 0u;
  v31[23] = 0u;
  v31[24] = 0u;
  v31[25] = 0u;
  v31[26] = 0u;
  v31[27] = 0u;
  v31[28] = 0u;
  v31[29] = 0u;
  v31[30] = 0u;
  v31[31] = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  WTF::fastAlignedFree(0, v32);
  v33 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 13) = v33;
  *((_QWORD *)this + 14) = 128;
  *v33 = 0u;
  v33[1] = 0u;
  v33[2] = 0u;
  v33[3] = 0u;
  v33[4] = 0u;
  v33[5] = 0u;
  v33[6] = 0u;
  v33[7] = 0u;
  v33[8] = 0u;
  v33[9] = 0u;
  v33[10] = 0u;
  v33[11] = 0u;
  v33[12] = 0u;
  v33[13] = 0u;
  v33[14] = 0u;
  v33[15] = 0u;
  v33[16] = 0u;
  v33[17] = 0u;
  v33[18] = 0u;
  v33[19] = 0u;
  v33[20] = 0u;
  v33[21] = 0u;
  v33[22] = 0u;
  v33[23] = 0u;
  v33[24] = 0u;
  v33[25] = 0u;
  v33[26] = 0u;
  v33[27] = 0u;
  v33[28] = 0u;
  v33[29] = 0u;
  v33[30] = 0u;
  v33[31] = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  WTF::fastAlignedFree(0, v34);
  v35 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 15) = v35;
  *((_QWORD *)this + 16) = 128;
  *v35 = 0u;
  v35[1] = 0u;
  v35[2] = 0u;
  v35[3] = 0u;
  v35[4] = 0u;
  v35[5] = 0u;
  v35[6] = 0u;
  v35[7] = 0u;
  v35[8] = 0u;
  v35[9] = 0u;
  v35[10] = 0u;
  v35[11] = 0u;
  v35[12] = 0u;
  v35[13] = 0u;
  v35[14] = 0u;
  v35[15] = 0u;
  v35[16] = 0u;
  v35[17] = 0u;
  v35[18] = 0u;
  v35[19] = 0u;
  v35[20] = 0u;
  v35[21] = 0u;
  v35[22] = 0u;
  v35[23] = 0u;
  v35[24] = 0u;
  v35[25] = 0u;
  v35[26] = 0u;
  v35[27] = 0u;
  v35[28] = 0u;
  v35[29] = 0u;
  v35[30] = 0u;
  v35[31] = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  WTF::fastAlignedFree(0, v36);
  v37 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 17) = v37;
  *((_QWORD *)this + 18) = 128;
  *v37 = 0u;
  v37[1] = 0u;
  v37[2] = 0u;
  v37[3] = 0u;
  v37[4] = 0u;
  v37[5] = 0u;
  v37[6] = 0u;
  v37[7] = 0u;
  v37[8] = 0u;
  v37[9] = 0u;
  v37[10] = 0u;
  v37[11] = 0u;
  v37[12] = 0u;
  v37[13] = 0u;
  v37[14] = 0u;
  v37[15] = 0u;
  v37[16] = 0u;
  v37[17] = 0u;
  v37[18] = 0u;
  v37[19] = 0u;
  v37[20] = 0u;
  v37[21] = 0u;
  v37[22] = 0u;
  v37[23] = 0u;
  v37[24] = 0u;
  v37[25] = 0u;
  v37[26] = 0u;
  v37[27] = 0u;
  v37[28] = 0u;
  v37[29] = 0u;
  v37[30] = 0u;
  v37[31] = 0u;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  WTF::fastAlignedFree(0, v38);
  v39 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 19) = v39;
  *((_QWORD *)this + 20) = 128;
  *v39 = 0u;
  v39[1] = 0u;
  v39[2] = 0u;
  v39[3] = 0u;
  v39[4] = 0u;
  v39[5] = 0u;
  v39[6] = 0u;
  v39[7] = 0u;
  v39[8] = 0u;
  v39[9] = 0u;
  v39[10] = 0u;
  v39[11] = 0u;
  v39[12] = 0u;
  v39[13] = 0u;
  v39[14] = 0u;
  v39[15] = 0u;
  v39[16] = 0u;
  v39[17] = 0u;
  v39[18] = 0u;
  v39[19] = 0u;
  v39[20] = 0u;
  v39[21] = 0u;
  v39[22] = 0u;
  v39[23] = 0u;
  v39[24] = 0u;
  v39[25] = 0u;
  v39[26] = 0u;
  v39[27] = 0u;
  v39[28] = 0u;
  v39[29] = 0u;
  v39[30] = 0u;
  v39[31] = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  WTF::fastAlignedFree(0, v40);
  v41 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 21) = v41;
  *((_QWORD *)this + 22) = 128;
  *v41 = 0u;
  v41[1] = 0u;
  v41[2] = 0u;
  v41[3] = 0u;
  v41[4] = 0u;
  v41[5] = 0u;
  v41[6] = 0u;
  v41[7] = 0u;
  v41[8] = 0u;
  v41[9] = 0u;
  v41[10] = 0u;
  v41[11] = 0u;
  v41[12] = 0u;
  v41[13] = 0u;
  v41[14] = 0u;
  v41[15] = 0u;
  v41[16] = 0u;
  v41[17] = 0u;
  v41[18] = 0u;
  v41[19] = 0u;
  v41[20] = 0u;
  v41[21] = 0u;
  v41[22] = 0u;
  v41[23] = 0u;
  v41[24] = 0u;
  v41[25] = 0u;
  v41[26] = 0u;
  v41[27] = 0u;
  v41[28] = 0u;
  v41[29] = 0u;
  v41[30] = 0u;
  v41[31] = 0u;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  WTF::fastAlignedFree(0, v42);
  v43 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 23) = v43;
  *((_QWORD *)this + 24) = 128;
  *v43 = 0u;
  v43[1] = 0u;
  v43[2] = 0u;
  v43[3] = 0u;
  v43[4] = 0u;
  v43[5] = 0u;
  v43[6] = 0u;
  v43[7] = 0u;
  v43[8] = 0u;
  v43[9] = 0u;
  v43[10] = 0u;
  v43[11] = 0u;
  v43[12] = 0u;
  v43[13] = 0u;
  v43[14] = 0u;
  v43[15] = 0u;
  v43[16] = 0u;
  v43[17] = 0u;
  v43[18] = 0u;
  v43[19] = 0u;
  v43[20] = 0u;
  v43[21] = 0u;
  v43[22] = 0u;
  v43[23] = 0u;
  v43[24] = 0u;
  v43[25] = 0u;
  v43[26] = 0u;
  v43[27] = 0u;
  v43[28] = 0u;
  v43[29] = 0u;
  v43[30] = 0u;
  v43[31] = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  WTF::fastAlignedFree(0, v44);
  v45 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 25) = v45;
  *((_QWORD *)this + 26) = 128;
  *v45 = 0u;
  v45[1] = 0u;
  v45[2] = 0u;
  v45[3] = 0u;
  v45[4] = 0u;
  v45[5] = 0u;
  v45[6] = 0u;
  v45[7] = 0u;
  v45[8] = 0u;
  v45[9] = 0u;
  v45[10] = 0u;
  v45[11] = 0u;
  v45[12] = 0u;
  v45[13] = 0u;
  v45[14] = 0u;
  v45[15] = 0u;
  v45[16] = 0u;
  v45[17] = 0u;
  v45[18] = 0u;
  v45[19] = 0u;
  v45[20] = 0u;
  v45[21] = 0u;
  v45[22] = 0u;
  v45[23] = 0u;
  v45[24] = 0u;
  v45[25] = 0u;
  v45[26] = 0u;
  v45[27] = 0u;
  v45[28] = 0u;
  v45[29] = 0u;
  v45[30] = 0u;
  v45[31] = 0u;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  WTF::fastAlignedFree(0, v46);
  v47 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 27) = v47;
  *((_QWORD *)this + 28) = 128;
  *v47 = 0u;
  v47[1] = 0u;
  v47[2] = 0u;
  v47[3] = 0u;
  v47[4] = 0u;
  v47[5] = 0u;
  v47[6] = 0u;
  v47[7] = 0u;
  v47[8] = 0u;
  v47[9] = 0u;
  v47[10] = 0u;
  v47[11] = 0u;
  v47[12] = 0u;
  v47[13] = 0u;
  v47[14] = 0u;
  v47[15] = 0u;
  v47[16] = 0u;
  v47[17] = 0u;
  v47[18] = 0u;
  v47[19] = 0u;
  v47[20] = 0u;
  v47[21] = 0u;
  v47[22] = 0u;
  v47[23] = 0u;
  v47[24] = 0u;
  v47[25] = 0u;
  v47[26] = 0u;
  v47[27] = 0u;
  v47[28] = 0u;
  v47[29] = 0u;
  v47[30] = 0u;
  v47[31] = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_QWORD *)((char *)this + 263) = 0;
  return this;
}

