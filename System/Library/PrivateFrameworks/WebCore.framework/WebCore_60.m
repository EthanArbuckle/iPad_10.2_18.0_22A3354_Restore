uint64_t WebCore::DOMMatrixReadOnly::validateAndFixup@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  if (*(_BYTE *)(result + 8))
    v3 = *(_BYTE *)(result + 104) == 0;
  else
    v3 = 1;
  if (!v3 && *(double *)result != *(double *)(result + 96))
    goto LABEL_31;
  v4 = *(unsigned __int8 *)(result + 24);
  v5 = *(unsigned __int8 *)(result + 120);
  v6 = !*(_BYTE *)(result + 24) || v5 == 0;
  if (!v6 && *(double *)(result + 16) != *(double *)(result + 112))
    goto LABEL_31;
  v7 = *(unsigned __int8 *)(result + 40);
  v8 = *(unsigned __int8 *)(result + 136);
  v9 = !*(_BYTE *)(result + 40) || v8 == 0;
  if (!v9 && *(double *)(result + 32) != *(double *)(result + 128)
    || (v10 = *(unsigned __int8 *)(result + 56), v11 = *(unsigned __int8 *)(result + 152), *(_BYTE *)(result + 56))
    && *(_BYTE *)(result + 152)
    && *(double *)(result + 48) != *(double *)(result + 144)
    || (v12 = *(unsigned __int8 *)(result + 72), v13 = *(unsigned __int8 *)(result + 168), *(_BYTE *)(result + 72))
    && *(_BYTE *)(result + 168)
    && *(double *)(result + 64) != *(double *)(result + 160)
    || (v14 = *(unsigned __int8 *)(result + 88), v15 = *(unsigned __int8 *)(result + 184), *(_BYTE *)(result + 88))
    && *(_BYTE *)(result + 184)
    && *(double *)(result + 80) != *(double *)(result + 176))
  {
LABEL_31:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 33;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(result + 104))
  {
    if (*(_BYTE *)(result + 120))
      goto LABEL_34;
  }
  else
  {
    v17 = *(double *)result;
    if (!*(_BYTE *)(result + 8))
      v17 = 1.0;
    *(double *)(result + 96) = v17;
    *(_BYTE *)(result + 104) = 1;
    if (v5)
    {
LABEL_34:
      if (v8)
        goto LABEL_35;
      goto LABEL_48;
    }
  }
  v18 = *(double *)(result + 16);
  if (!v4)
    v18 = 0.0;
  *(double *)(result + 112) = v18;
  *(_BYTE *)(result + 120) = 1;
  if (v8)
  {
LABEL_35:
    if (v11)
      goto LABEL_36;
    goto LABEL_51;
  }
LABEL_48:
  v19 = *(double *)(result + 32);
  if (!v7)
    v19 = 0.0;
  *(double *)(result + 128) = v19;
  *(_BYTE *)(result + 136) = 1;
  if (v11)
  {
LABEL_36:
    if (v13)
      goto LABEL_37;
LABEL_54:
    v21 = *(double *)(result + 64);
    if (!v12)
      v21 = 0.0;
    *(double *)(result + 160) = v21;
    *(_BYTE *)(result + 168) = 1;
    if (v15)
      goto LABEL_41;
    goto LABEL_38;
  }
LABEL_51:
  v20 = *(double *)(result + 48);
  if (!v10)
    v20 = 1.0;
  *(double *)(result + 144) = v20;
  *(_BYTE *)(result + 152) = 1;
  if (!v13)
    goto LABEL_54;
LABEL_37:
  if (!v15)
  {
LABEL_38:
    v16 = *(double *)(result + 80);
    if (!v14)
      v16 = 0.0;
    *(double *)(result + 176) = v16;
    *(_BYTE *)(result + 184) = 1;
  }
LABEL_41:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

WTF::StringImpl *WebCore::DOMMatrixReadOnly::validateAndFixup(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int16 v7;
  _BYTE v8[8];
  WTF::StringImpl *v9;
  char v10;

  result = (WTF::StringImpl *)WebCore::DOMMatrixReadOnly::validateAndFixup(a2, (uint64_t)v8);
  if (!v10)
  {
    if (*(_BYTE *)(a2 + 273))
    {
      if (*(_BYTE *)(a2 + 272)
        && (*(double *)(a2 + 192) != 0.0
         || *(double *)(a2 + 200) != 0.0
         || *(double *)(a2 + 208) != 0.0
         || *(double *)(a2 + 216) != 0.0
         || *(double *)(a2 + 224) != 0.0
         || *(double *)(a2 + 232) != 0.0
         || *(double *)(a2 + 248) != 0.0
         || *(double *)(a2 + 256) != 0.0
         || *(double *)(a2 + 240) != 1.0
         || *(double *)(a2 + 264) != 1.0))
      {
        result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_BYTE *)a1 = 33;
        goto LABEL_3;
      }
    }
    else
    {
      if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(a2 + 192), *(int8x16_t *)(a2 + 192), 8uLL)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 208))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 224)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 248))))))) & 1 | (*(double *)(a2 + 240) != 1.0) | (*(double *)(a2 + 264) != 1.0))v7 = 256;
      else
        v7 = 257;
      *(_WORD *)(a2 + 272) = v7;
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_13;
  }
  v6 = v9;
  v9 = 0;
  *(_BYTE *)a1 = v8[0];
  *(_QWORD *)(a1 + 8) = v6;
LABEL_3:
  *(_BYTE *)(a1 + 16) = 1;
LABEL_13:
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DOMMatrixReadOnly::parseStringIntoAbstractMatrix@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WebCore **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v31;
  WTF::StringImpl *v32[8];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  char v41;
  WebCore ***v42;
  WebCore **v43;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    v4 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v4 = 0x900000001;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = v4 + 32;
    *(_QWORD *)(v4 + 24) = 4;
    v38 = 0;
    WTF::URL::invalidate((WTF::URL *)&v38);
    v5 = v38;
    if (v38)
      *(_DWORD *)v38 += 2;
    v32[0] = v5;
    *(_OWORD *)&v32[1] = v39;
    *(_OWORD *)&v32[3] = v40;
    v32[5] = 0;
    *(WTF::StringImpl **)((char *)&v32[5] + 6) = 0;
    *(_DWORD *)((char *)&v32[6] + 6) &= 0xC0000000;
    v6 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v6 != -1)
    {
      v43 = (WebCore **)&v41;
      v42 = &v43;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v42, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
    v8 = WebCore::CSSParser::parseValue(v4, 273);
    v32[5] = 0;
    v9 = v32[0];
    v32[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    this = (uint64_t)v38;
    v38 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      else
        *(_DWORD *)this -= 2;
    }
    if (v8 == 2)
    {
      *(_BYTE *)a2 = 9;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 136) = 1;
    }
    else
    {
      this = WebCore::StyleProperties::getPropertyCSSValue(v4, 273, &v43);
      v10 = v43;
      if (!v43
        || ((*((unsigned __int16 *)v43 + 2) | (*((unsigned __int8 *)v43 + 6) << 16)) & 0x3F87F) == 0x50
        && *((_WORD *)v43 + 4) == 6)
      {
        *(_OWORD *)(a2 + 64) = xmmword_1969EDD08;
        *(_OWORD *)(a2 + 80) = unk_1969EDD18;
        *(_OWORD *)(a2 + 96) = xmmword_1969EDD28;
        *(_OWORD *)(a2 + 112) = unk_1969EDD38;
        *(_OWORD *)a2 = constinit;
        *(_OWORD *)(a2 + 16) = unk_1969EDCD8;
        *(_OWORD *)(a2 + 32) = xmmword_1969EDCE8;
        *(_OWORD *)(a2 + 48) = unk_1969EDCF8;
        *(_BYTE *)(a2 + 128) = 1;
        *(_DWORD *)(a2 + 136) = 0;
      }
      else
      {
        *(_QWORD *)&v33 = 0;
        memset(v32, 0, sizeof(v32));
        WebCore::transformsForValue(v43, (const WebCore::CSSValue *)v32, (uint64_t)&v38);
        this = (uint64_t)v32[4];
        v32[4] = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v7);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
        }
        if (BYTE8(v39))
        {
          v33 = xmmword_1969EDD08;
          v34 = unk_1969EDD18;
          v35 = xmmword_1969EDD28;
          v36 = unk_1969EDD38;
          *(_OWORD *)v32 = constinit;
          *(_OWORD *)&v32[2] = unk_1969EDCD8;
          *(_OWORD *)&v32[4] = xmmword_1969EDCE8;
          *(_OWORD *)&v32[6] = unk_1969EDCF8;
          LOBYTE(v37) = 1;
          if (DWORD1(v39))
          {
            v11 = v38;
            v12 = 8 * DWORD1(v39);
            while (1)
            {
              v13 = *(_QWORD *)v11;
              v42 = 0;
              this = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WebCore ****))(*(_QWORD *)v13 + 48))(v13, v32, &v42);
              if ((this & 1) != 0)
                break;
              v14 = *(unsigned __int8 *)(*(_QWORD *)v11 + 12);
              v15 = v14 > 0x14;
              v16 = (1 << v14) & 0x1DE0C0;
              if (!v15 && v16 != 0)
                LOBYTE(v37) = 0;
              v11 = (WTF::StringImpl *)((char *)v11 + 8);
              v12 -= 8;
              if (!v12)
                goto LABEL_31;
            }
            *(_BYTE *)a2 = 9;
            *(_QWORD *)(a2 + 8) = 0;
            v18 = 1;
          }
          else
          {
LABEL_31:
            v18 = 0;
            *(_QWORD *)(a2 + 128) = v37;
            v19 = v36;
            *(_OWORD *)(a2 + 96) = v35;
            *(_OWORD *)(a2 + 112) = v19;
            v20 = *(_OWORD *)&v32[6];
            *(_OWORD *)(a2 + 32) = *(_OWORD *)&v32[4];
            *(_OWORD *)(a2 + 48) = v20;
            v21 = v34;
            *(_OWORD *)(a2 + 64) = v33;
            *(_OWORD *)(a2 + 80) = v21;
            v22 = *(_OWORD *)&v32[2];
            *(_OWORD *)a2 = *(_OWORD *)v32;
            *(_OWORD *)(a2 + 16) = v22;
          }
          *(_DWORD *)(a2 + 136) = v18;
          if (BYTE8(v39))
          {
            v23 = v38;
            if (DWORD1(v39))
            {
              v24 = 8 * DWORD1(v39);
              do
              {
                this = *(_QWORD *)v23;
                *(_QWORD *)v23 = 0;
                if (this)
                {
                  if (*(_DWORD *)(this + 8) == 1)
                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                  else
                    --*(_DWORD *)(this + 8);
                }
                v23 = (WTF::StringImpl *)((char *)v23 + 8);
                v24 -= 8;
              }
              while (v24);
              v23 = v38;
            }
            if (v23)
            {
              v38 = 0;
              LODWORD(v39) = 0;
              this = WTF::fastFree(v23, v7);
            }
          }
        }
        else
        {
          *(_BYTE *)a2 = 9;
          *(_QWORD *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 136) = 1;
        }
      }
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    if (*(_DWORD *)v4 == 1)
    {
      v25 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v25)
      {
        v26 = 16 * v25;
        v27 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
        do
        {
          v28 = *v27;
          *v27 = 0;
          if (v28)
          {
            if (*v28 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v7);
            else
              *v28 -= 2;
          }
          v27 += 2;
          v26 -= 16;
        }
        while (v26);
      }
      v29 = *(WTF **)(v4 + 16);
      if ((WTF *)(v4 + 32) != v29 && v29 != 0)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        WTF::fastFree(v29, v7);
      }
      v31 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      return WTF::fastFree((WTF *)v4, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    *(_OWORD *)(a2 + 64) = xmmword_1969EDD08;
    *(_OWORD *)(a2 + 80) = unk_1969EDD18;
    *(_OWORD *)(a2 + 96) = xmmword_1969EDD28;
    *(_OWORD *)(a2 + 112) = unk_1969EDD38;
    *(_OWORD *)a2 = constinit;
    *(_OWORD *)(a2 + 16) = unk_1969EDCD8;
    *(_OWORD *)(a2 + 32) = xmmword_1969EDCE8;
    *(_OWORD *)(a2 + 48) = unk_1969EDCF8;
    *(_BYTE *)(a2 + 128) = 1;
    *(_DWORD *)(a2 + 136) = 0;
  }
  return this;
}

uint64_t WebCore::DOMMatrixReadOnly::scale@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>)
{
  char v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;

  v13 = *(_BYTE *)(a1 + 144);
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  v15 = *(_OWORD *)(a1 + 64);
  v17 = *(_OWORD *)(a1 + 16);
  v16 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(result + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(result + 64) = v15;
  *(_OWORD *)(result + 16) = v17;
  *(_OWORD *)(result + 32) = v16;
  v18 = *(_OWORD *)(a1 + 80);
  v19 = *(_OWORD *)(a1 + 96);
  v20 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(result + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(result + 128) = v20;
  *(_OWORD *)(result + 80) = v18;
  *(_OWORD *)(result + 96) = v19;
  v21 = a2;
  if (!a3)
    v21 = a5;
  v22 = *(float64x2_t *)(result + 48);
  v23 = *(float64x2_t *)(result + 64);
  v24 = *(float64x2_t *)(result + 16);
  v25 = *(float64x2_t *)(result + 32);
  v26 = *(float64x2_t *)(result + 80);
  v27 = *(float64x2_t *)(result + 96);
  v28 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v22, a8), v24, a7), v26, a9));
  v29 = vmulq_n_f64(v24, a5);
  v30 = vmulq_n_f64(v22, v21);
  v31 = vmulq_n_f64(v26, a6);
  v32 = vaddq_f64(v28, vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v30, -a8), v29, a7, 0), v31, a9, 0));
  v33 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v23, a8), v25, a7), v27, a9));
  v34 = vmulq_n_f64(v25, a5);
  *(_BYTE *)(result + 144) = v13;
  *(float64x2_t *)(result + 16) = v29;
  *(float64x2_t *)(result + 32) = v34;
  v35 = vmulq_n_f64(v23, v21);
  *(float64x2_t *)(result + 48) = v30;
  *(float64x2_t *)(result + 64) = v35;
  v36 = vmulq_n_f64(v27, a6);
  *(float64x2_t *)(result + 80) = v31;
  *(float64x2_t *)(result + 96) = v36;
  *(float64x2_t *)(result + 112) = v32;
  *(float64x2_t *)(result + 128) = vaddq_f64(v33, vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v35, -a8), v34, a7, 0), v36, a9, 0));
  if (a6 != 1.0 || a9 != 0.0)
    *(_BYTE *)(result + 144) = 0;
  *a4 = result;
  *(_DWORD *)(result + 8) = 1;
  return result;
}

uint64_t WebCore::DOMMatrixReadOnly::scale3d@<X0>(WebCore::DOMMatrixReadOnly *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, _QWORD *a6@<X8>)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;

  v8 = *((_BYTE *)this + 144);
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  v10 = *((_OWORD *)this + 4);
  v12 = *((_OWORD *)this + 1);
  v11 = *((_OWORD *)this + 2);
  *(_OWORD *)(result + 48) = *((_OWORD *)this + 3);
  *(_OWORD *)(result + 64) = v10;
  *(_OWORD *)(result + 16) = v12;
  *(_OWORD *)(result + 32) = v11;
  v13 = *((_OWORD *)this + 5);
  v14 = *((_OWORD *)this + 6);
  v15 = *((_OWORD *)this + 8);
  *(_OWORD *)(result + 112) = *((_OWORD *)this + 7);
  *(_OWORD *)(result + 128) = v15;
  *(_OWORD *)(result + 80) = v13;
  *(_OWORD *)(result + 96) = v14;
  v16 = *(float64x2_t *)(result + 48);
  v17 = *(float64x2_t *)(result + 64);
  v18 = *(float64x2_t *)(result + 16);
  v19 = *(float64x2_t *)(result + 32);
  v20 = *(float64x2_t *)(result + 80);
  v21 = *(float64x2_t *)(result + 96);
  v22 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v16, a4), v18, a3), v20, a5));
  v23 = vmulq_n_f64(v18, a2);
  v24 = vmulq_n_f64(v16, a2);
  v25 = vmulq_n_f64(v20, a2);
  v26 = vaddq_f64(v22, vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v24, -a4), v23, a3, 0), v25, a5, 0));
  v27 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17, a4), v19, a3), v21, a5));
  *(_BYTE *)(result + 144) = v8;
  v28 = vmulq_n_f64(v19, a2);
  *(float64x2_t *)(result + 16) = v23;
  *(float64x2_t *)(result + 32) = v28;
  v29 = vmulq_n_f64(v17, a2);
  *(float64x2_t *)(result + 48) = v24;
  *(float64x2_t *)(result + 64) = v29;
  v30 = vmulq_n_f64(v21, a2);
  *(float64x2_t *)(result + 80) = v25;
  *(float64x2_t *)(result + 96) = v30;
  *(float64x2_t *)(result + 112) = v26;
  *(float64x2_t *)(result + 128) = vaddq_f64(v27, vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v29, -a4), v28, a3, 0), v30, a5, 0));
  if (a2 != 1.0 || a5 != 0.0)
    *(_BYTE *)(result + 144) = 0;
  *a6 = result;
  *(_DWORD *)(result + 8) = 1;
  return result;
}

float64x2_t *WebCore::DOMMatrixReadOnly::rotate@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, double a4@<X3>, char a5@<W4>, bmalloc::api **a6@<X8>, double a7@<D0>)
{
  char v14;
  bmalloc::api *v15;
  float64x2_t *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double v23;
  double v24;
  float64x2_t *result;
  void *v26;
  _BOOL4 v28;
  int v29;

  v14 = *(_BYTE *)(a1 + 144);
  v15 = (bmalloc::api *)bmalloc::api::isoAllocate();
  *(_QWORD *)v15 = 0;
  *((_DWORD *)v15 + 2) = 1;
  v16 = (float64x2_t *)((char *)v15 + 16);
  v17 = *(_OWORD *)(a1 + 64);
  v19 = *(_OWORD *)(a1 + 16);
  v18 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v15 + 3) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v15 + 4) = v17;
  *((_OWORD *)v15 + 1) = v19;
  *((_OWORD *)v15 + 2) = v18;
  v20 = *(_OWORD *)(a1 + 80);
  v21 = *(_OWORD *)(a1 + 96);
  v22 = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v15 + 7) = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v15 + 8) = v22;
  *((_OWORD *)v15 + 5) = v20;
  *((_OWORD *)v15 + 6) = v21;
  *((_BYTE *)v15 + 144) = v14;
  v23 = a4;
  if (a3)
  {
    if (!a5)
      v23 = 0.0;
    v24 = a2;
  }
  else
  {
    if (!a5)
    {
      result = WebCore::TransformationMatrix::rotate3d(v16, 1, 0.0, 0.0, a7);
      goto LABEL_17;
    }
    v24 = 0.0;
  }
  result = WebCore::TransformationMatrix::rotate3d(v16, 1, a7, v24, v23);
  v28 = a2 != 0.0 && a3 != 0;
  if (a7 != 0.0 || v28)
    *((_BYTE *)v15 + 144) = 0;
LABEL_17:
  v29 = *((_DWORD *)v15 + 2);
  *((_DWORD *)v15 + 2) = v29 + 1;
  *a6 = v15;
  if (v29)
  {
    *((_DWORD *)v15 + 2) = v29;
  }
  else
  {
    if (*(_QWORD *)v15)
    {
      *(_QWORD *)(*(_QWORD *)v15 + 8) = 3;
      *(_QWORD *)v15 = 0;
    }
    return (float64x2_t *)bmalloc::api::isoDeallocate(v15, v26);
  }
  return result;
}

double *WebCore::DOMMatrixReadOnly::inverse@<X0>(WebCore::DOMMatrixReadOnly *this@<X0>, bmalloc::api **a2@<X8>)
{
  char v4;
  bmalloc::api *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double (*v12)[4][4];
  double *result;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int64x2_t v21;
  int v22;
  _OWORD v23[8];
  char v24;

  v4 = *((_BYTE *)this + 144);
  v5 = (bmalloc::api *)bmalloc::api::isoAllocate();
  *(_QWORD *)v5 = 0;
  *((_DWORD *)v5 + 2) = 1;
  v6 = *((_OWORD *)this + 4);
  v8 = *((_OWORD *)this + 1);
  v7 = *((_OWORD *)this + 2);
  *((_OWORD *)v5 + 3) = *((_OWORD *)this + 3);
  *((_OWORD *)v5 + 4) = v6;
  *((_OWORD *)v5 + 1) = v8;
  *((_OWORD *)v5 + 2) = v7;
  v9 = *((_OWORD *)this + 5);
  v10 = *((_OWORD *)this + 6);
  v11 = *((_OWORD *)this + 8);
  *((_OWORD *)v5 + 7) = *((_OWORD *)this + 7);
  *((_OWORD *)v5 + 8) = v11;
  *((_OWORD *)v5 + 5) = v9;
  *((_OWORD *)v5 + 6) = v10;
  *((_BYTE *)v5 + 144) = v4;
  result = WebCore::TransformationMatrix::inverse((double *)v5 + 2, v12, (uint64_t)v23);
  if (v24)
  {
    v15 = v23[7];
    v16 = v23[6];
    v17 = v23[5];
    *((_OWORD *)v5 + 5) = v23[4];
    *((_OWORD *)v5 + 6) = v17;
    *((_OWORD *)v5 + 7) = v16;
    *((_OWORD *)v5 + 8) = v15;
    v18 = v23[3];
    v19 = v23[2];
    v20 = v23[1];
    *((_OWORD *)v5 + 1) = v23[0];
    *((_OWORD *)v5 + 2) = v20;
    *((_OWORD *)v5 + 3) = v19;
    *((_OWORD *)v5 + 4) = v18;
  }
  else
  {
    v21 = vdupq_n_s64(0x7FF8000000000000uLL);
    *((int64x2_t *)v5 + 1) = v21;
    *((int64x2_t *)v5 + 2) = v21;
    *((int64x2_t *)v5 + 3) = v21;
    *((int64x2_t *)v5 + 4) = v21;
    *((int64x2_t *)v5 + 5) = v21;
    *((int64x2_t *)v5 + 6) = v21;
    *((int64x2_t *)v5 + 7) = v21;
    *((int64x2_t *)v5 + 8) = v21;
    *((_BYTE *)v5 + 144) = 0;
  }
  v22 = *((_DWORD *)v5 + 2);
  *((_DWORD *)v5 + 2) = v22 + 1;
  *a2 = v5;
  if (v22)
  {
    *((_DWORD *)v5 + 2) = v22;
  }
  else
  {
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
      *(_QWORD *)v5 = 0;
    }
    return (double *)bmalloc::api::isoDeallocate(v5, v14);
  }
  return result;
}

uint64_t WebCore::DOMMatrixReadOnly::toFloat32Array@<X0>(float64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  float64x2_t v9;
  uint64_t v10;
  float32x4_t v11;
  float64x2_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF **v17;
  WTF *v18;
  int v19;
  uint64_t v20;
  float64x2_t v21;
  float v22;
  float v23;
  WTF *v24;
  uint64_t v25;

  result = JSC::ArrayBuffer::tryCreateUninitialized((JSC::ArrayBuffer *)0x10);
  v5 = (_QWORD *)v25;
  if (!v25)
    goto LABEL_22;
  if (*(_BYTE *)(v25 + 64) && (v20 = *(_QWORD *)(v25 + 32)) != 0)
    v6 = *(_QWORD *)(v20 + 32);
  else
    v6 = *(_QWORD *)(v25 + 48);
  if (v6 > 0x3F)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    result = JSC::ArrayBufferView::ArrayBufferView();
    v5 = (_QWORD *)v25;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)v5 == 2;
  *(_DWORD *)v5 -= 2;
  if (v8)
  {
    v15 = v5[10];
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 3;
      v5[10] = 0;
    }
    if ((v5[9] & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
    v17 = (WTF **)v5[1];
    if ((v17 & 1) == 0 && v17)
    {
      v24 = (WTF *)v5[1];
      v18 = *v17;
      if (*v17)
      {
        *(_QWORD *)v24 = 0;
        *((_DWORD *)v24 + 2) = 0;
        WTF::fastFree(v18, v16);
      }
      WTF::fastFree(v24, v16);
    }
    result = WTF::fastFree((WTF *)v5, v16);
    if (v7)
      goto LABEL_9;
LABEL_22:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 24;
    v19 = 1;
    goto LABEL_28;
  }
  if (!v7)
    goto LABEL_22;
LABEL_9:
  v9.f64[0] = this[1].f64[0];
  v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v10 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    v9.f64[1] = this[1].f64[1];
    v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), this[2]);
    v12 = this[5];
    v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[3]), this[4]);
    v14 = (*(_QWORD *)(v7 + 24) & 0x3FFFFFFFFLL) + v10;
  }
  else
  {
    v9.f64[1] = this[1].f64[1];
    v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), this[2]);
    v12 = this[5];
    v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[3]), this[4]);
    v14 = *(_QWORD *)(v7 + 24);
  }
  *(float32x4_t *)v14 = v11;
  *(float32x4_t *)(v14 + 16) = v13;
  v21 = this[7];
  *(float32x4_t *)(v14 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), this[6]);
  *(float32x2_t *)(v14 + 48) = vcvt_f32_f64(v21);
  v22 = this[8].f64[0];
  *(float *)(v14 + 56) = v22;
  v19 = 0;
  v23 = this[8].f64[1];
  *(float *)(v14 + 60) = v23;
  *(_QWORD *)a2 = v7;
LABEL_28:
  *(_DWORD *)(a2 + 16) = v19;
  return result;
}

uint64_t WebCore::DOMMatrixReadOnly::toFloat64Array@<X0>(WebCore::DOMMatrixReadOnly *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  WTF **v13;
  WTF *v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;

  result = JSC::ArrayBuffer::tryCreateUninitialized((JSC::ArrayBuffer *)0x10);
  v5 = (_QWORD *)v18;
  if (!v18)
    goto LABEL_22;
  if (*(_BYTE *)(v18 + 64) && (v16 = *(_QWORD *)(v18 + 32)) != 0)
    v6 = *(_QWORD *)(v16 + 32);
  else
    v6 = *(_QWORD *)(v18 + 48);
  if (v6 > 0x7F)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    result = JSC::ArrayBufferView::ArrayBufferView();
    v5 = (_QWORD *)v18;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)v5 == 2;
  *(_DWORD *)v5 -= 2;
  if (v8)
  {
    v11 = v5[10];
    if (v11)
    {
      *(_QWORD *)(v11 + 8) = 3;
      v5[10] = 0;
    }
    if ((v5[9] & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
    v13 = (WTF **)v5[1];
    if ((v13 & 1) == 0 && v13)
    {
      v17 = (WTF *)v5[1];
      v14 = *v13;
      if (*v13)
      {
        *(_QWORD *)v17 = 0;
        *((_DWORD *)v17 + 2) = 0;
        WTF::fastFree(v14, v12);
      }
      WTF::fastFree(v17, v12);
    }
    result = WTF::fastFree((WTF *)v5, v12);
    if (v7)
      goto LABEL_9;
LABEL_22:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 24;
    v15 = 1;
    goto LABEL_28;
  }
  if (!v7)
    goto LABEL_22;
LABEL_9:
  v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v9 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    v10 = (_QWORD *)((*(_QWORD *)(v7 + 24) & 0x3FFFFFFFFLL) + v9);
  else
    v10 = *(_QWORD **)(v7 + 24);
  *v10 = *((_QWORD *)this + 2);
  v10[1] = *((_QWORD *)this + 3);
  v10[2] = *((_QWORD *)this + 4);
  v10[3] = *((_QWORD *)this + 5);
  v10[4] = *((_QWORD *)this + 6);
  v10[5] = *((_QWORD *)this + 7);
  v10[6] = *((_QWORD *)this + 8);
  v10[7] = *((_QWORD *)this + 9);
  v10[8] = *((_QWORD *)this + 10);
  v10[9] = *((_QWORD *)this + 11);
  v10[10] = *((_QWORD *)this + 12);
  v10[11] = *((_QWORD *)this + 13);
  v10[12] = *((_QWORD *)this + 14);
  v10[13] = *((_QWORD *)this + 15);
  v10[14] = *((_QWORD *)this + 16);
  v15 = 0;
  v10[15] = *((_QWORD *)this + 17);
  *(_QWORD *)a2 = v7;
LABEL_28:
  *(_DWORD *)(a2 + 16) = v15;
  return result;
}

uint64_t WebCore::DOMMatrixReadOnly::toString(WebCore::DOMMatrixReadOnly *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _WORD *v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  int v57;
  int v58;
  BOOL v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  BOOL v65;
  int v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77[16];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[7];
  __int128 v86;
  _OWORD v87[7];
  __int128 v88;
  _OWORD v89[7];
  __int128 v90;
  _OWORD v91[7];
  __int128 v92;
  _OWORD v93[7];
  __int128 v94;
  _OWORD v95[7];
  __int128 v96;
  _OWORD v97[7];
  __int128 v98;
  _OWORD v99[7];
  __int128 v100;
  _OWORD v101[7];
  __int128 v102;
  _OWORD v103[7];
  __int128 v104;
  _OWORD v105[7];
  __int128 v106;
  _OWORD v107[7];
  __int128 v108;
  _OWORD v109[7];
  __int128 v110;
  _OWORD v111[7];
  __int128 v112;
  _OWORD __s[7];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 __n_4;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v371 = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)(v2 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 24) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 32) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 40) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 48) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 56) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 64) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 72) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 80) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 88) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 96) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 104) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 112) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 120) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 128) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(v2 + 136) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)v4 = 8;
    v29 = 1;
    goto LABEL_60;
  }
  if (!*(_BYTE *)(v2 + 144))
  {
    WTF::numberToString();
    HIDWORD(v114) = strlen((const char *)__s);
    WTF::numberToString();
    HIDWORD(v112) = strlen((const char *)v111);
    WTF::numberToString();
    HIDWORD(v110) = strlen((const char *)v109);
    WTF::numberToString();
    HIDWORD(v108) = strlen((const char *)v107);
    WTF::numberToString();
    HIDWORD(v106) = strlen((const char *)v105);
    WTF::numberToString();
    HIDWORD(v104) = strlen((const char *)v103);
    WTF::numberToString();
    HIDWORD(v102) = strlen((const char *)v101);
    WTF::numberToString();
    HIDWORD(v100) = strlen((const char *)v99);
    WTF::numberToString();
    HIDWORD(v98) = strlen((const char *)v97);
    WTF::numberToString();
    HIDWORD(v96) = strlen((const char *)v95);
    WTF::numberToString();
    HIDWORD(v94) = strlen((const char *)v93);
    WTF::numberToString();
    HIDWORD(v92) = strlen((const char *)v91);
    WTF::numberToString();
    HIDWORD(v90) = strlen((const char *)v89);
    WTF::numberToString();
    HIDWORD(v88) = strlen((const char *)v87);
    WTF::numberToString();
    HIDWORD(v86) = strlen((const char *)v85);
    WTF::numberToString();
    result = strlen(v77);
    HIDWORD(v84) = result;
    if ((result & 0x80000000) == 0 && !__OFADD__((_DWORD)result, 1))
    {
      v30 = result + 3;
      if (!__OFADD__(result + 1, 2) && (HIDWORD(v86) & 0x80000000) == 0)
      {
        v31 = HIDWORD(v86) + v30;
        if (!__OFADD__(HIDWORD(v86), v30))
        {
          v8 = __OFADD__(v31, 2);
          v32 = v31 + 2;
          v33 = v8;
          if ((HIDWORD(v88) & 0x80000000) == 0 && !v33)
          {
            v8 = __OFADD__(HIDWORD(v88), v32);
            v34 = HIDWORD(v88) + v32;
            if (!v8)
            {
              v8 = __OFADD__(v34, 2);
              v35 = v34 + 2;
              v36 = v8;
              if ((HIDWORD(v90) & 0x80000000) == 0 && !v36)
              {
                v8 = __OFADD__(HIDWORD(v90), v35);
                v37 = HIDWORD(v90) + v35;
                if (!v8)
                {
                  v8 = __OFADD__(v37, 2);
                  v38 = v37 + 2;
                  v39 = v8;
                  if ((HIDWORD(v92) & 0x80000000) == 0 && !v39)
                  {
                    v8 = __OFADD__(HIDWORD(v92), v38);
                    v40 = HIDWORD(v92) + v38;
                    if (!v8)
                    {
                      v8 = __OFADD__(v40, 2);
                      v41 = v40 + 2;
                      v42 = v8;
                      if ((HIDWORD(v94) & 0x80000000) == 0 && !v42)
                      {
                        v8 = __OFADD__(HIDWORD(v94), v41);
                        v43 = HIDWORD(v94) + v41;
                        if (!v8)
                        {
                          v8 = __OFADD__(v43, 2);
                          v44 = v43 + 2;
                          v45 = v8;
                          if ((HIDWORD(v96) & 0x80000000) == 0 && !v45)
                          {
                            v8 = __OFADD__(HIDWORD(v96), v44);
                            v46 = HIDWORD(v96) + v44;
                            if (!v8)
                            {
                              v8 = __OFADD__(v46, 2);
                              v47 = v46 + 2;
                              v48 = v8;
                              if ((HIDWORD(v98) & 0x80000000) == 0 && !v48)
                              {
                                v8 = __OFADD__(HIDWORD(v98), v47);
                                v49 = HIDWORD(v98) + v47;
                                if (!v8)
                                {
                                  v8 = __OFADD__(v49, 2);
                                  v50 = v49 + 2;
                                  v51 = v8;
                                  if ((HIDWORD(v100) & 0x80000000) == 0 && !v51)
                                  {
                                    v8 = __OFADD__(HIDWORD(v100), v50);
                                    v52 = HIDWORD(v100) + v50;
                                    if (!v8)
                                    {
                                      v8 = __OFADD__(v52, 2);
                                      v53 = v52 + 2;
                                      v54 = v8;
                                      if ((HIDWORD(v102) & 0x80000000) == 0 && !v54)
                                      {
                                        v55 = HIDWORD(v102) + v53;
                                        if (!__OFADD__(HIDWORD(v102), v53))
                                        {
                                          v8 = __OFADD__(v55, 2);
                                          v56 = v55 + 2;
                                          if (!v8 && (HIDWORD(v104) & 0x80000000) == 0)
                                          {
                                            v57 = HIDWORD(v104) + v56;
                                            if (!__OFADD__(HIDWORD(v104), v56))
                                            {
                                              v8 = __OFADD__(v57, 2);
                                              v58 = v57 + 2;
                                              v59 = v8;
                                              if ((HIDWORD(v106) & 0x80000000) == 0 && !v59)
                                              {
                                                v8 = __OFADD__(HIDWORD(v106), v58);
                                                v60 = HIDWORD(v106) + v58;
                                                if (!v8)
                                                {
                                                  v8 = __OFADD__(v60, 2);
                                                  v61 = v60 + 2;
                                                  v62 = v8;
                                                  if ((HIDWORD(v108) & 0x80000000) == 0 && !v62)
                                                  {
                                                    v8 = __OFADD__(HIDWORD(v108), v61);
                                                    v63 = HIDWORD(v108) + v61;
                                                    if (!v8)
                                                    {
                                                      v8 = __OFADD__(v63, 2);
                                                      v64 = v63 + 2;
                                                      v65 = v8;
                                                      if ((HIDWORD(v110) & 0x80000000) == 0 && !v65)
                                                      {
                                                        v8 = __OFADD__(HIDWORD(v110), v64);
                                                        v66 = HIDWORD(v110) + v64;
                                                        if (!v8)
                                                        {
                                                          v8 = __OFADD__(v66, 2);
                                                          v67 = v66 + 2;
                                                          v68 = v8;
                                                          if ((HIDWORD(v112) & 0x80000000) == 0 && !v68)
                                                          {
                                                            v8 = __OFADD__(HIDWORD(v112), v67);
                                                            v69 = HIDWORD(v112) + v67;
                                                            if (!v8)
                                                            {
                                                              v8 = __OFADD__(v69, 2);
                                                              v70 = v69 + 2;
                                                              v71 = v8;
                                                              if ((HIDWORD(v114) & 0x80000000) == 0 && !v71)
                                                              {
                                                                v72 = HIDWORD(v114) + v70;
                                                                if (!__OFADD__(HIDWORD(v114), v70))
                                                                {
                                                                  v73 = (v72 + 9);
                                                                  if (!__OFADD__(v72, 9))
                                                                  {
                                                                    v239 = __s[4];
                                                                    v240 = __s[5];
                                                                    v241 = __s[6];
                                                                    v242 = v114;
                                                                    v235 = __s[0];
                                                                    v236 = __s[1];
                                                                    v237 = __s[2];
                                                                    v238 = __s[3];
                                                                    v230 = v111[3];
                                                                    v229 = v111[2];
                                                                    v228 = v111[1];
                                                                    v227 = v111[0];
                                                                    v234 = v112;
                                                                    v233 = v111[6];
                                                                    v232 = v111[5];
                                                                    v231 = v111[4];
                                                                    v222 = v109[3];
                                                                    v221 = v109[2];
                                                                    v220 = v109[1];
                                                                    v219 = v109[0];
                                                                    v226 = v110;
                                                                    v225 = v109[6];
                                                                    v224 = v109[5];
                                                                    v223 = v109[4];
                                                                    v214 = v107[3];
                                                                    v213 = v107[2];
                                                                    v212 = v107[1];
                                                                    v211 = v107[0];
                                                                    v218 = v108;
                                                                    v217 = v107[6];
                                                                    v216 = v107[5];
                                                                    v215 = v107[4];
                                                                    v206 = v105[3];
                                                                    v205 = v105[2];
                                                                    v204 = v105[1];
                                                                    v203 = v105[0];
                                                                    v210 = v106;
                                                                    v209 = v105[6];
                                                                    v208 = v105[5];
                                                                    v207 = v105[4];
                                                                    v198 = v103[3];
                                                                    v197 = v103[2];
                                                                    v196 = v103[1];
                                                                    v195 = v103[0];
                                                                    v202 = v104;
                                                                    v201 = v103[6];
                                                                    v200 = v103[5];
                                                                    v199 = v103[4];
                                                                    v190 = v101[3];
                                                                    v189 = v101[2];
                                                                    v188 = v101[1];
                                                                    v187 = v101[0];
                                                                    v194 = v102;
                                                                    v193 = v101[6];
                                                                    v192 = v101[5];
                                                                    v191 = v101[4];
                                                                    v182 = v99[3];
                                                                    v181 = v99[2];
                                                                    v180 = v99[1];
                                                                    v179 = v99[0];
                                                                    v186 = v100;
                                                                    v185 = v99[6];
                                                                    v184 = v99[5];
                                                                    v183 = v99[4];
                                                                    v174 = v97[3];
                                                                    v173 = v97[2];
                                                                    v172 = v97[1];
                                                                    v171 = v97[0];
                                                                    v178 = v98;
                                                                    v177 = v97[6];
                                                                    v176 = v97[5];
                                                                    v175 = v97[4];
                                                                    v166 = v95[3];
                                                                    v165 = v95[2];
                                                                    v164 = v95[1];
                                                                    v163 = v95[0];
                                                                    v170 = v96;
                                                                    v169 = v95[6];
                                                                    v168 = v95[5];
                                                                    v167 = v95[4];
                                                                    v158 = v93[3];
                                                                    v157 = v93[2];
                                                                    v156 = v93[1];
                                                                    v155 = v93[0];
                                                                    v162 = v94;
                                                                    v161 = v93[6];
                                                                    v160 = v93[5];
                                                                    v159 = v93[4];
                                                                    v150 = v91[3];
                                                                    v149 = v91[2];
                                                                    v148 = v91[1];
                                                                    v147 = v91[0];
                                                                    v154 = v92;
                                                                    v153 = v91[6];
                                                                    v152 = v91[5];
                                                                    v151 = v91[4];
                                                                    v142 = v89[3];
                                                                    v141 = v89[2];
                                                                    v140 = v89[1];
                                                                    v139 = v89[0];
                                                                    v146 = v90;
                                                                    v145 = v89[6];
                                                                    v144 = v89[5];
                                                                    v143 = v89[4];
                                                                    v134 = v87[3];
                                                                    v133 = v87[2];
                                                                    v132 = v87[1];
                                                                    v131 = v87[0];
                                                                    v138 = v88;
                                                                    v137 = v87[6];
                                                                    v136 = v87[5];
                                                                    v135 = v87[4];
                                                                    v126 = v85[3];
                                                                    v125 = v85[2];
                                                                    v124 = v85[1];
                                                                    v123 = v85[0];
                                                                    v130 = v86;
                                                                    v129 = v85[6];
                                                                    v128 = v85[5];
                                                                    v127 = v85[4];
                                                                    v118 = v80;
                                                                    v117 = v79;
                                                                    v116 = v78;
                                                                    v115 = *(_OWORD *)v77;
                                                                    v122 = v84;
                                                                    v121 = v83;
                                                                    v120 = v82;
                                                                    v119 = v81;
                                                                    if (v72 == -9)
                                                                    {
                                                                      v75 = MEMORY[0x1E0CBEF70];
                                                                      *MEMORY[0x1E0CBEF70] += 2;
                                                                      goto LABEL_152;
                                                                    }
                                                                    if ((v73 & 0x80000000) == 0)
                                                                    {
                                                                      WTF::tryFastCompactMalloc((WTF *)(v73 + 20));
                                                                      v75 = v76;
                                                                      if (v76)
                                                                      {
                                                                        *(_DWORD *)v76 = 2;
                                                                        *(_DWORD *)(v76 + 4) = v73;
                                                                        *(_QWORD *)(v76 + 8) = v76 + 20;
                                                                        *(_DWORD *)(v76 + 16) = 4;
                                                                        v365 = v237;
                                                                        v366 = v238;
                                                                        v369 = v241;
                                                                        v370 = v242;
                                                                        v367 = v239;
                                                                        v368 = v240;
                                                                        v363 = v235;
                                                                        v364 = v236;
                                                                        v357 = v229;
                                                                        v358 = v230;
                                                                        v355 = v227;
                                                                        v356 = v228;
                                                                        v361 = v233;
                                                                        v362 = v234;
                                                                        v359 = v231;
                                                                        v360 = v232;
                                                                        v349 = v221;
                                                                        v350 = v222;
                                                                        v347 = v219;
                                                                        v348 = v220;
                                                                        v353 = v225;
                                                                        v354 = v226;
                                                                        v351 = v223;
                                                                        v352 = v224;
                                                                        v341 = v213;
                                                                        v342 = v214;
                                                                        v339 = v211;
                                                                        v340 = v212;
                                                                        v345 = v217;
                                                                        v346 = v218;
                                                                        v343 = v215;
                                                                        v344 = v216;
                                                                        v333 = v205;
                                                                        v334 = v206;
                                                                        __n_4 = v203;
                                                                        v332 = v204;
                                                                        v337 = v209;
                                                                        v338 = v210;
                                                                        v335 = v207;
                                                                        v336 = v208;
                                                                        v325 = v197;
                                                                        v326 = v198;
                                                                        v323 = v195;
                                                                        v324 = v196;
                                                                        v329 = v201;
                                                                        v330 = v202;
                                                                        v327 = v199;
                                                                        v328 = v200;
                                                                        v318 = v190;
                                                                        v317 = v189;
                                                                        v316 = v188;
                                                                        v315 = v187;
                                                                        v322 = v194;
                                                                        v321 = v193;
                                                                        v320 = v192;
                                                                        v319 = v191;
                                                                        v310 = v182;
                                                                        v309 = v181;
                                                                        v308 = v180;
                                                                        v307 = v179;
                                                                        v314 = v186;
                                                                        v313 = v185;
                                                                        v312 = v184;
                                                                        v311 = v183;
                                                                        v302 = v174;
                                                                        v301 = v173;
                                                                        v300 = v172;
                                                                        v299 = v171;
                                                                        v306 = v178;
                                                                        v305 = v177;
                                                                        v304 = v176;
                                                                        v303 = v175;
                                                                        v294 = v166;
                                                                        v293 = v165;
                                                                        v292 = v164;
                                                                        v291 = v163;
                                                                        v298 = v170;
                                                                        v297 = v169;
                                                                        v296 = v168;
                                                                        v295 = v167;
                                                                        v286 = v158;
                                                                        v285 = v157;
                                                                        v284 = v156;
                                                                        v283 = v155;
                                                                        v290 = v162;
                                                                        v289 = v161;
                                                                        v288 = v160;
                                                                        v287 = v159;
                                                                        v278 = v150;
                                                                        v277 = v149;
                                                                        v276 = v148;
                                                                        v275 = v147;
                                                                        v282 = v154;
                                                                        v281 = v153;
                                                                        v280 = v152;
                                                                        v279 = v151;
                                                                        v270 = v142;
                                                                        v269 = v141;
                                                                        v268 = v140;
                                                                        v267 = v139;
                                                                        v274 = v146;
                                                                        v273 = v145;
                                                                        v272 = v144;
                                                                        v271 = v143;
                                                                        v262 = v134;
                                                                        v261 = v133;
                                                                        v260 = v132;
                                                                        v259 = v131;
                                                                        v266 = v138;
                                                                        v265 = v137;
                                                                        v264 = v136;
                                                                        v263 = v135;
                                                                        v254 = v126;
                                                                        v253 = v125;
                                                                        v252 = v124;
                                                                        v251 = v123;
                                                                        v258 = v130;
                                                                        v257 = v129;
                                                                        v256 = v128;
                                                                        v255 = v127;
                                                                        v246 = v118;
                                                                        v245 = v117;
                                                                        v244 = v116;
                                                                        v243 = v115;
                                                                        v250 = v122;
                                                                        v249 = v121;
                                                                        v248 = v120;
                                                                        v247 = v119;
                                                                        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v76 + 20, (uint64_t)"matrix3d(", 9, (uint64_t)&v363, (uint64_t)", ", 2, (uint64_t)&v355, v74, (uint64_t)", ", 2, &v347, ", ", 2u, &v339, ", ", 2u, &__n_4, ", ", 2u,
                                                                                            &v323,
                                                                                            ", ",
                                                                                            2u,
                                                                                            &v315,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v307,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v299,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v291,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v283,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v275,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v267,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v259,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v251,
                                                                                            ", ",
                                                                                            2,
                                                                                            &v243,
                                                                                            0x29u);
LABEL_152:
                                                                        v29 = 0;
                                                                        *(_QWORD *)v4 = v75;
                                                                        goto LABEL_60;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(0xC471u);
    goto LABEL_159;
  }
  WTF::numberToString();
  HIDWORD(v274) = strlen((const char *)&v267);
  WTF::numberToString();
  HIDWORD(v266) = strlen((const char *)&v259);
  WTF::numberToString();
  HIDWORD(v258) = strlen((const char *)&v251);
  WTF::numberToString();
  HIDWORD(v250) = strlen((const char *)&v243);
  WTF::numberToString();
  HIDWORD(v242) = strlen((const char *)&v235);
  WTF::numberToString();
  result = strlen((const char *)&v227);
  HIDWORD(v234) = result;
  if ((result & 0x80000000) != 0)
    goto LABEL_158;
  if (__OFADD__((_DWORD)result, 1))
    goto LABEL_158;
  v6 = result + 3;
  if (__OFADD__(result + 1, 2))
    goto LABEL_158;
  if ((HIDWORD(v242) & 0x80000000) != 0)
    goto LABEL_158;
  v7 = HIDWORD(v242) + v6;
  if (__OFADD__(HIDWORD(v242), v6))
    goto LABEL_158;
  v8 = __OFADD__(v7, 2);
  v9 = v7 + 2;
  v10 = v8;
  if ((HIDWORD(v250) & 0x80000000) != 0)
    goto LABEL_158;
  if (v10)
    goto LABEL_158;
  v8 = __OFADD__(HIDWORD(v250), v9);
  v11 = HIDWORD(v250) + v9;
  if (v8)
    goto LABEL_158;
  v8 = __OFADD__(v11, 2);
  v12 = v11 + 2;
  v13 = v8;
  if ((HIDWORD(v258) & 0x80000000) != 0)
    goto LABEL_158;
  if (v13)
    goto LABEL_158;
  v8 = __OFADD__(HIDWORD(v258), v12);
  v14 = HIDWORD(v258) + v12;
  if (v8)
    goto LABEL_158;
  v8 = __OFADD__(v14, 2);
  v15 = v14 + 2;
  v16 = v8;
  if ((HIDWORD(v266) & 0x80000000) != 0
    || v16
    || (v8 = __OFADD__(HIDWORD(v266), v15), v17 = HIDWORD(v266) + v15, v8)
    || ((v8 = __OFADD__(v17, 2), v18 = v17 + 2, !v8) ? (v19 = 0) : (v19 = 1),
        (HIDWORD(v274) & 0x80000000) != 0
     || (v19 & 1) != 0
     || (v20 = HIDWORD(v274) + v18, __OFADD__(HIDWORD(v274), v18))
     || (v21 = (v20 + 7), __OFADD__(v20, 7))))
  {
LABEL_158:
    __break(0xC471u);
LABEL_159:
    JUMPOUT(0x1957F4EA4);
  }
  v319 = v271;
  v320 = v272;
  v321 = v273;
  v322 = v274;
  v315 = v267;
  v316 = v268;
  v317 = v269;
  v318 = v270;
  v310 = v262;
  v309 = v261;
  v308 = v260;
  v307 = v259;
  v314 = v266;
  v313 = v265;
  v312 = v264;
  v311 = v263;
  v302 = v254;
  v301 = v253;
  v300 = v252;
  v299 = v251;
  v306 = v258;
  v305 = v257;
  v304 = v256;
  v303 = v255;
  v294 = v246;
  v293 = v245;
  v292 = v244;
  v291 = v243;
  v298 = v250;
  v297 = v249;
  v296 = v248;
  v295 = v247;
  v286 = v238;
  v285 = v237;
  v284 = v236;
  v283 = v235;
  v290 = v242;
  v289 = v241;
  v288 = v240;
  v287 = v239;
  v278 = v230;
  v277 = v229;
  v276 = v228;
  v275 = v227;
  v282 = v234;
  v281 = v233;
  v280 = v232;
  v279 = v231;
  if (v20 != -7)
  {
    if ((v21 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v21 + 20));
      v23 = v363;
      if ((_QWORD)v363)
      {
        *(_DWORD *)v363 = 2;
        *(_DWORD *)(v23 + 4) = v21;
        *(_QWORD *)(v23 + 8) = v23 + 20;
        *(_DWORD *)(v23 + 23) = 678979954;
        *(_DWORD *)(v23 + 16) = 4;
        *(_DWORD *)(v23 + 20) = 1920229741;
        v24 = (_BYTE *)(v23 + 27);
        v330 = v322;
        v327 = v319;
        v328 = v320;
        v329 = v321;
        v323 = v315;
        v324 = v316;
        v325 = v317;
        v326 = v318;
        v25 = HIDWORD(v322);
        if (HIDWORD(v322))
        {
          if (HIDWORD(v322) == 1)
            *v24 = v323;
          else
            memcpy((void *)(v23 + 27), &v323, HIDWORD(v330));
        }
        v26 = &v24[v25];
        *v26 = 8236;
        v27 = v26 + 1;
        v335 = v311;
        v336 = v312;
        v337 = v313;
        v338 = v314;
        __n_4 = v307;
        v332 = v308;
        v333 = v309;
        v334 = v310;
        v28 = HIDWORD(v314);
        if (HIDWORD(v314))
        {
          if (HIDWORD(v314) == 1)
            *v27 = __n_4;
          else
            memcpy(v27, &__n_4, HIDWORD(v338));
        }
        v367 = v303;
        v368 = v304;
        v369 = v305;
        v370 = v306;
        v363 = v299;
        v364 = v300;
        v365 = v301;
        v366 = v302;
        v357 = v293;
        v358 = v294;
        v355 = v291;
        v356 = v292;
        v361 = v297;
        v362 = v298;
        v359 = v295;
        v360 = v296;
        v349 = v285;
        v350 = v286;
        v347 = v283;
        v348 = v284;
        v353 = v289;
        v354 = v290;
        v351 = v287;
        v352 = v288;
        v341 = v277;
        v342 = v278;
        v339 = v275;
        v340 = v276;
        v345 = v281;
        v346 = v282;
        v343 = v279;
        v344 = v280;
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&v27[v28], ", ", 2u, &v363, ", ", 2u, &v355, v22, ", ", 2, &v347, ", ", 2, &v339, 41);
        goto LABEL_58;
      }
    }
    goto LABEL_158;
  }
  v23 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_58:
  v29 = 0;
  *(_QWORD *)v4 = v23;
LABEL_60:
  *(_DWORD *)(v4 + 16) = v29;
  return result;
}

void WebCore::OrderedNamedLinesCollectorInGridLayout::~OrderedNamedLinesCollectorInGridLayout(WebCore::OrderedNamedLinesCollectorInGridLayout *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::OrderedNamedLinesCollector::namedGridLineCount(WebCore::OrderedNamedLinesCollector *this)
{
  uint64_t v1;

  v1 = **((_QWORD **)this + 1);
  if (v1)
    return *(unsigned int *)(v1 - 12);
  else
    return 0;
}

void WebCore::OrderedNamedLinesCollectorInSubgridLayout::~OrderedNamedLinesCollectorInSubgridLayout(WebCore::OrderedNamedLinesCollectorInSubgridLayout *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::OrderedNamedLinesCollectorInSubgridLayout::namedGridLineCount(WebCore::OrderedNamedLinesCollectorInSubgridLayout *this)
{
  return *((unsigned int *)this + 9);
}

void WebCore::PaintWorklet::~PaintWorklet(WebCore::PaintWorklet *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Worklet::~Worklet(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v3 + v5)
  {
    v5 = i & *(_DWORD *)(v2 - 8);
    v6 = *(_QWORD *)(v2 + 16 * v5);
    if (v6 != -1)
    {
      if (!v6)
        return 0;
      if (v6 == *(_QWORD *)a2)
        break;
    }
    ++v3;
  }
  return *(_QWORD *)(v2 + 16 * v5 + 8);
}

unsigned int **std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](unsigned int **result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 7);
    if (v3)
    {
      *((_QWORD *)v2 + 7) = 0;
      do
      {
        v6 = *(_QWORD *)(v3 + 56);
        *(_QWORD *)(v3 + 56) = 0;
        v7 = v6;
        std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100](&v7);
        v3 = v7;
      }
      while (v7);
    }
    std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](v2 + 14, 0);
    v5 = v2[10];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v2 + 8);
    v2[10] = -1;
    if (*((_BYTE *)v2 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v2[6]);
    }
    if (*((_BYTE *)v2 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v2[4]);
    }
    if (*((_BYTE *)v2 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v2[2]);
    }
    if (*((_BYTE *)v2 + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
    }
    return (unsigned int **)WTF::fastFree((WTF *)v2, v4);
  }
  return result;
}

uint64_t WebCore::ComposedTreeAncestorIterator::operator++(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (v1)
  {
    v2 = *(_WORD *)(v1 + 28);
    if ((v2 & 0x80) != 0)
    {
      v1 = *(_QWORD *)(v1 + 200);
      if (v1)
        v1 = *(_QWORD *)(v1 + 8);
    }
    else if ((v2 & 8) != 0)
    {
      if ((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v3 = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v3)
        {
          v5 = result;
          v4 = *(_QWORD *)(v3 + 224);
          if (v4)
            v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
          else
            v1 = 0;
          result = v5;
        }
      }
    }
    else
    {
      v1 = 0;
    }
  }
  *(_QWORD *)result = v1;
  return result;
}

uint64_t WebCore::toPaddingOrMarginPropertyID(int a1, WebCore::RenderObject *this, int a3)
{
  uint64_t v6;
  WebCore::RenderObject *v7;
  WebCore::RenderObject *v8;
  int v9;
  int v10;
  BOOL v11;
  char v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;

  v6 = *((_QWORD *)this + 4);
  if (!v6
    || (v7 = *(WebCore::RenderObject **)(v6 + 8)) == 0
    || ((*((char *)v7 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0)
    && (*((_BYTE *)v7 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0))
  {
    v7 = WebCore::RenderObject::containingBlock(this);
  }
  if (v7)
    v8 = v7;
  else
    v8 = this;
  v9 = ((unsigned __int16)*((_DWORD *)v8 + 31) >> 13) - 1;
  switch((unsigned __int16)*((_DWORD *)v8 + 31) >> 13)
  {
    case 1:
      v11 = (*((_BYTE *)v8 + 123) & 4) == 0;
      v10 = 1;
LABEL_47:
      v12 = 1;
      break;
    case 2:
    case 4:
      v10 = 0;
      v11 = (*((_BYTE *)v8 + 123) & 4) == 0;
LABEL_44:
      v12 = 2;
      break;
    case 3:
    case 5:
      v10 = 0;
      goto LABEL_12;
    default:
      v10 = 1;
LABEL_12:
      v11 = (*((_BYTE *)v8 + 123) & 4) == 0;
      v12 = 2;
      switch(v9)
      {
        case 0:
          goto LABEL_47;
        case 1:
          goto LABEL_44;
        case 2:
        case 4:
          v12 = 3;
          break;
        case 3:
          goto LABEL_14;
        default:
          v12 = 0;
          break;
      }
      break;
  }
LABEL_14:
  v13 = v12 & 1;
  switch(a1)
  {
    case 0:
      if (v10)
      {
        if (v13)
          goto LABEL_30;
        goto LABEL_34;
      }
      if (v13)
        goto LABEL_20;
      goto LABEL_26;
    case 1:
      if (v10)
      {
        if (!v11)
          goto LABEL_26;
        goto LABEL_20;
      }
      if (!v11)
        goto LABEL_34;
      goto LABEL_30;
    case 2:
      if (v10)
      {
        if (!v13)
          goto LABEL_30;
        goto LABEL_34;
      }
      if (!v13)
        goto LABEL_20;
      goto LABEL_26;
    case 3:
      if (v10)
      {
        if (v11)
        {
LABEL_26:
          v14 = a3 == 0;
          v15 = 428;
          v16 = 405;
        }
        else
        {
LABEL_20:
          v14 = a3 == 0;
          v15 = 429;
          v16 = 406;
        }
      }
      else if (v11)
      {
LABEL_34:
        v14 = a3 == 0;
        v15 = 430;
        v16 = 407;
      }
      else
      {
LABEL_30:
        v14 = a3 == 0;
        v15 = 425;
        v16 = 402;
      }
      if (v14)
        return v15;
      else
        return v16;
    default:
      goto LABEL_34;
  }
}

uint64_t WebCore::RenderBox::contentLogicalHeight(WebCore::RenderBox *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t (*v21)(WebCore::RenderBox *);
  WebCore::RenderBox *v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;

  v2 = *(_QWORD *)this;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v26 = *((_DWORD *)this + 40);
    v27 = (*(uint64_t (**)(WebCore::RenderBox *))(v2 + 1016))(this);
    if (__OFSUB__(v26, v27))
      v28 = (v26 >> 31) + 0x7FFFFFFF;
    else
      v28 = v26 - v27;
    v29 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v28, v29))
      v30 = (v28 >> 31) + 0x7FFFFFFF;
    else
      v30 = v28 - v29;
    v31 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    v32 = v31 << 6;
    if (v31 < -33554432)
      v32 = 0x80000000;
    if (v31 > 0x1FFFFFF)
      v32 = 0x7FFFFFFF;
    v10 = __OFSUB__(v30, v32);
    v33 = v30 - v32;
    if (v10)
      v33 = (v30 >> 31) + 0x7FFFFFFF;
    v34 = v33 & ~(v33 >> 31);
    v35 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
    if (__OFSUB__(v34, v35))
      v36 = 0x7FFFFFFF;
    else
      v36 = v34 - v35;
    v37 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 952))(this);
    if (__OFSUB__(v36, v37))
      v38 = (v36 >> 31) + 0x7FFFFFFF;
    else
      v38 = v36 - v37;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      v40 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
      v41 = v40 << 6;
      if (v40 > 0x1FFFFFF)
        v41 = 0x7FFFFFFF;
      if (v40 >= -33554432)
        v39 = v41;
      else
        v39 = 0x80000000;
    }
    else
    {
      v39 = 0;
    }
    v10 = __OFSUB__(v38, v39);
    v19 = v38 - v39;
    if (v10)
      v19 = (v38 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v3 = *((_DWORD *)this + 41);
    v4 = (*(uint64_t (**)(WebCore::RenderBox *))(v2 + 1000))(this);
    if (__OFSUB__(v3, v4))
      v5 = (v3 >> 31) + 0x7FFFFFFF;
    else
      v5 = v3 - v4;
    v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
    if (__OFSUB__(v5, v6))
      v7 = (v5 >> 31) + 0x7FFFFFFF;
    else
      v7 = v5 - v6;
    v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    v9 = v8 << 6;
    if (v8 < -33554432)
      v9 = 0x80000000;
    if (v8 > 0x1FFFFFF)
      v9 = 0x7FFFFFFF;
    v10 = __OFSUB__(v7, v9);
    v11 = v7 - v9;
    if (v10)
      v11 = (v7 >> 31) + 0x7FFFFFFF;
    v12 = v11 & ~(v11 >> 31);
    v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
    if (__OFSUB__(v12, v13))
      v14 = 0x7FFFFFFF;
    else
      v14 = v12 - v13;
    v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 936))(this);
    v16 = v14 - v15;
    if (__OFSUB__(v14, v15))
      v16 = (v14 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      v21 = *(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360);
      v22 = this;
      v23 = v16;
      v24 = v21(v22);
      v16 = v23;
      v25 = v24 << 6;
      if (v24 > 0x1FFFFFF)
        v25 = 0x7FFFFFFF;
      if (v24 >= -33554432)
        v17 = v25;
      else
        v17 = 0x80000000;
    }
    else
    {
      v17 = 0;
    }
    v10 = __OFSUB__(v16, v17);
    v18 = v16 - v17;
    v19 = (v16 >> 31) + 0x7FFFFFFF;
    if (!v10)
      v19 = v18;
  }
  return v19 & ~(v19 >> 31);
}

uint64_t WebCore::getOffsetUsedStyleRelative(WebCore::RenderBoxModelObject *this, int a2)
{
  uint64_t result;
  unint64_t v4;
  int v5;

  result = 0;
  if (a2 > 430)
  {
    if (a2 == 431)
    {
      v5 = WebCore::RenderBoxModelObject::relativePositionOffset(this);
      if (v5 == 0x80000000)
        return 0x7FFFFFFFLL;
      else
        return -v5;
    }
    else if (a2 == 449)
    {
      return WebCore::RenderBoxModelObject::relativePositionOffset(this) >> 32;
    }
  }
  else if (a2 == 387)
  {
    v4 = WebCore::RenderBoxModelObject::relativePositionOffset(this);
    if (HIDWORD(v4) == 0x80000000)
      return 0x7FFFFFFFLL;
    else
      return -HIDWORD(v4);
  }
  else if (a2 == 399)
  {
    return WebCore::RenderBoxModelObject::relativePositionOffset(this);
  }
  return result;
}

uint64_t WebCore::getOffsetUsedStyleOutOfFlowPositioned(WebCore::RenderBox *this, uint64_t a2, int a3)
{
  uint64_t result;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  result = 0;
  if (a3 > 430)
  {
    if (a3 != 431)
    {
      if (a3 != 449)
        return result;
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 888))(a2);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1080))(a2);
      goto LABEL_8;
    }
    v16 = WebCore::RenderBox::clientWidth(this);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 880))(a2);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 896))(a2);
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      v19 = (v17 >> 31) + 0x7FFFFFFF;
    v8 = __OFSUB__(v16, v19);
    v20 = v16 - v19;
    if (v8)
      v14 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v14 = v20;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1104))(a2);
  }
  else
  {
    if (a3 != 387)
    {
      if (a3 != 399)
        return result;
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 880))(a2);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1096))(a2);
LABEL_8:
      v8 = __OFSUB__(v6, v7);
      result = v6 - v7;
      if (v8)
        return (v6 >> 31) + 0x7FFFFFFF;
      return result;
    }
    v9 = WebCore::RenderBox::clientHeight(this);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 888))(a2);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 904))(a2);
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    v8 = __OFSUB__(v9, v12);
    v13 = v9 - v12;
    if (v8)
      v14 = (v9 >> 31) + 0x7FFFFFFF;
    else
      v14 = v13;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1088))(a2);
  }
  v8 = __OFSUB__(v14, v15);
  result = v14 - v15;
  if (v8)
    return (v14 >> 31) + 0x7FFFFFFF;
  return result;
}

uint64_t WebCore::RenderBox::paddingBoxHeight(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  v2 = *((_DWORD *)this + 41);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  return v10 & ~(v10 >> 31);
}

uint64_t WebCore::RenderBox::paddingBoxWidth(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  v2 = *((_DWORD *)this + 40);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  return v10 & ~(v10 >> 31);
}

int *WebCore::optionalLineHeight(int *result, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  void *v9;
  int v10;
  float v11;
  float v12;
  double v13;
  char v15;
  __int16 v16;
  float v17;
  double v18;
  char v20;
  float v21;
  int *v23;
  int v24;
  int *v25;
  int v26;
  float v27;
  unsigned __int8 v28;
  char v29;
  char v30;

  v4 = result;
  v5 = *(_QWORD *)(a2 + 32);
  v27 = 0.0;
  v30 = 0;
  v28 = *(_BYTE *)(v5 + 16);
  v6 = v28;
  v29 = *(_BYTE *)(v5 + 17);
  v7 = 0.0;
  if (v28 - 2 >= 9)
  {
    if (v28 == 11)
    {
      v9 = (void *)*(unsigned int *)(v5 + 12);
      v27 = *(float *)(v5 + 12);
      WebCore::Length::ref((int *)&v27);
LABEL_42:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v27, 0.0);
      goto LABEL_21;
    }
    if (v28 == 13)
    {
      v9 = 0;
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 1;
    v8 = 0.0;
  }
  else
  {
    v30 = *(_BYTE *)(v5 + 18);
    v8 = *(float *)(v5 + 12);
    v27 = v8;
    v9 = (void *)LODWORD(v8);
    if (v30)
    {
      if (v8 < 0.0)
      {
LABEL_4:
        *(_QWORD *)result = 0;
        return result;
      }
      v10 = 0;
    }
    else
    {
      if ((LODWORD(v8) & 0x80000000) != 0)
        goto LABEL_4;
      v10 = 1;
    }
  }
  switch(v28)
  {
    case 3u:
      v11 = (float)SLODWORD(v8);
      if (!v10)
        v11 = v8;
      if (a3)
      {
        v12 = v11 / 100.0;
        v13 = v12;
        if ((int)v12 <= 0xFF && *(_QWORD *)&v13 == COERCE__INT64((double)(int)v12))
        {
          result = &WebCore::staticCSSValuePool[4 * (int)v12 + 2064];
          *result += 2;
          goto LABEL_32;
        }
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v15 = *((_BYTE *)result + 6);
        v16 = 1;
      }
      else
      {
        v21 = (float)((float)(v11 * *(float *)(v5 + 204)) / 100.0) / *(float *)(*(_QWORD *)(a2 + 24) + 184);
        v13 = v21;
        if ((int)v21 <= 0xFF && *(_QWORD *)&v13 == COERCE__INT64((double)(int)v21))
        {
          v25 = &WebCore::staticCSSValuePool[4 * (int)v21];
          v26 = v25[16];
          result = v25 + 16;
          *result = v26 + 2;
          goto LABEL_32;
        }
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v15 = *((_BYTE *)result + 6);
        v16 = 6;
      }
      *((_WORD *)result + 2) = v16;
      *((_BYTE *)result + 6) = v15 & 0xFC;
      *((double *)result + 1) = v13;
LABEL_32:
      *v4 = result;
      return result;
    case 4u:
      v7 = (float)(int)v9;
      if (!v10)
        v7 = v8;
      break;
    case 0xBu:
      goto LABEL_42;
  }
LABEL_21:
  v17 = v7 / *(float *)(*(_QWORD *)(a2 + 24) + 184);
  v18 = v17;
  if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)(int)v17))
  {
    v23 = &WebCore::staticCSSValuePool[4 * (int)v17];
    v24 = v23[16];
    result = v23 + 16;
    *result = v24 + 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v20 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 6;
    *((_BYTE *)result + 6) = v20 & 0xFC;
    *((double *)result + 1) = v18;
  }
  *v4 = result;
  if (v6 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v9);
  }
  return result;
}

WTF *WebCore::fontFamilyList(WebCore *this, const WebCore::RenderStyle *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  int v10;
  int *v11;
  int *v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF *result;
  WTF *v21;
  uint64_t v22;
  _DWORD *v23;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  WTF *v29;
  int v30;
  unsigned int v31;
  _BYTE v32[32];
  int *v33;
  WTF *v34;
  uint64_t v35;
  _BYTE v36[32];

  v2 = (uint64_t *)this;
  v34 = (WTF *)v36;
  v35 = 4;
  v3 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 216);
  v4 = *(unsigned int *)(v3 + 4);
  if (!(_DWORD)v4)
  {
    v29 = (WTF *)v32;
    v30 = 4;
LABEL_25:
    v15 = HIDWORD(v35);
    memcpy(v32, v36, 8 * HIDWORD(v35));
    goto LABEL_26;
  }
  v6 = 0;
  v7 = 8;
  do
  {
    if (v6 >= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1957F5EE8);
    }
    v8 = (WTF::StringImpl **)(v3 + v7);
    v9 = *(_QWORD *)(v3 + v7);
    if (WebCore::WebKitFontFamilyNames::cursiveFamily == v9)
    {
      v13 = 118;
      goto LABEL_20;
    }
    if (WebCore::WebKitFontFamilyNames::fantasyFamily == v9)
    {
      v13 = 119;
      goto LABEL_20;
    }
    if (WebCore::WebKitFontFamilyNames::monospaceFamily == v9)
    {
      v13 = 120;
      goto LABEL_20;
    }
    if (WebCore::WebKitFontFamilyNames::pictographFamily == v9)
    {
      v13 = 122;
      goto LABEL_20;
    }
    if (WebCore::WebKitFontFamilyNames::sansSerifFamily == v9)
    {
      v13 = 117;
LABEL_20:
      WebCore::staticCSSValuePool[4 * v13 + 3088] += 2;
      v33 = &WebCore::staticCSSValuePool[4 * v13 + 3088];
      goto LABEL_14;
    }
    if (WebCore::WebKitFontFamilyNames::serifFamily == v9)
    {
      v13 = 116;
      goto LABEL_20;
    }
    if (WebCore::WebKitFontFamilyNames::systemUiFamily == v9)
    {
      v13 = 123;
      goto LABEL_20;
    }
    {
      WebCore::CSSValuePool::singleton(void)::pool = 0;
      unk_1ECE88B90 = 0;
      qword_1ECE88B98 = 0;
    }
    WebCore::CSSValuePool::createFontFamilyValue((WebCore::CSSValuePool *)&WebCore::CSSValuePool::singleton(void)::pool, v8, &v33);
LABEL_14:
    v10 = HIDWORD(v35);
    if (HIDWORD(v35) == (_DWORD)v35)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)&v34, (uint64_t *)&v33);
    }
    else
    {
      v11 = v33;
      v33 = 0;
      *((_QWORD *)v34 + HIDWORD(v35)) = v11;
      HIDWORD(v35) = v10 + 1;
    }
    v12 = v33;
    v33 = 0;
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, (WTF::StringImpl *)v8);
      else
        *v12 -= 2;
    }
    ++v6;
    v3 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 216);
    v4 = *(unsigned int *)(v3 + 4);
    v7 += 8;
  }
  while (v6 < v4);
  v14 = v34;
  v29 = (WTF *)v32;
  v30 = 4;
  if (v34 == (WTF *)v36)
  {
    v2 = (uint64_t *)this;
    goto LABEL_25;
  }
  v34 = (WTF *)v36;
  v29 = v14;
  v27 = v35;
  v15 = HIDWORD(v35);
  LODWORD(v35) = 4;
  v30 = v27;
  v2 = (uint64_t *)this;
LABEL_26:
  HIDWORD(v35) = 0;
  v31 = v15;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v29, v2);
  if (v31)
  {
    v21 = v29;
    v22 = 8 * v31;
    do
    {
      v23 = *(_DWORD **)v21;
      *(_QWORD *)v21 = 0;
      if (v23)
      {
        if (*v23 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v16);
        else
          *v23 -= 2;
      }
      v21 = (WTF *)((char *)v21 + 8);
      v22 -= 8;
    }
    while (v22);
  }
  v17 = v29;
  if (v32 != (_BYTE *)v29 && v29 != 0)
  {
    v29 = 0;
    v30 = 0;
    WTF::fastFree(v17, v16);
  }
  if (HIDWORD(v35))
  {
    v24 = v34;
    v25 = 8 * HIDWORD(v35);
    do
    {
      v26 = *(_DWORD **)v24;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        if (*v26 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v16);
        else
          *v26 -= 2;
      }
      v24 = (WTF *)((char *)v24 + 8);
      v25 -= 8;
    }
    while (v25);
  }
  result = v34;
  if (v36 != (_BYTE *)v34 && v34 != 0)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, v16);
  }
  return result;
}

uint64_t WebCore::FontDescription::variantSettings@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  int16x8_t v12;
  char v13;
  WTF::StringImpl *v14;
  int8x8_t v15;
  char v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  _DWORD *v42;
  uint64_t v43;
  WTF *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  WTF *v56;
  WTF *v57;

  v3 = this;
  v5 = *(_DWORD *)(this + 160);
  v6 = *(unsigned __int16 *)(this + 164);
  v7 = *(WTF::StringImpl **)(this + 32);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = *(unsigned int *)(this + 52);
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
      goto LABEL_89;
    this = WTF::fastMalloc((WTF *)(8 * v8));
    v9 = (WTF *)this;
    v33 = *(unsigned int *)(v3 + 52);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = *(_QWORD *)(v3 + 40);
      v36 = 8 * v33;
      do
      {
        v37 = *(_DWORD **)(v35 + v34);
        if (v37)
          *v37 += 2;
        *(_QWORD *)(this + v34) = v37;
        v34 += 8;
      }
      while (v36 != v34);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = *(unsigned int *)(v3 + 68);
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1957F6400);
    }
    v38 = v9;
    this = WTF::fastMalloc((WTF *)(8 * v10));
    v11 = (WTF *)this;
    v39 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v39)
    {
      v52 = 0;
      v53 = *(_QWORD *)(v3 + 56);
      v54 = 8 * v39;
      v9 = v38;
      do
      {
        v55 = *(_DWORD **)(v53 + v52);
        if (v55)
          *v55 += 2;
        *(_QWORD *)(this + v52) = v55;
        v52 += 8;
      }
      while (v54 != v52);
    }
    else
    {
      v9 = v38;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = (int16x8_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v5), (uint32x4_t)xmmword_1969EDB80);
  v13 = v6;
  v14 = *(WTF::StringImpl **)(v3 + 72);
  if (v14)
    *(_DWORD *)v14 += 2;
  v15 = (int8x8_t)vmovn_s32((int32x4_t)v12);
  v16 = v6 & 3;
  v17 = *(WTF::StringImpl **)(v3 + 80);
  if (v17)
    *(_DWORD *)v17 += 2;
  *(int8x8_t *)v12.i8 = vand_s8(v15, (int8x8_t)0x3000300030003);
  v18 = HIBYTE(v5) & 3;
  v19 = (v5 >> 26) & 7;
  v20 = (v5 >> 29) & 3;
  v21 = *(WTF::StringImpl **)(v3 + 88);
  v22 = (v6 >> 2) & 3;
  if (v21)
    *(_DWORD *)v21 += 2;
  v23 = *(_WORD *)(v3 + 96);
  v24 = *(unsigned __int16 *)(v3 + 164);
  *(_DWORD *)a3 = vmovn_s16(v12).u32[0];
  *(_BYTE *)(a3 + 4) = v18;
  *(_BYTE *)(a3 + 5) = v19;
  *(_BYTE *)(a3 + 6) = v20;
  *(_BYTE *)(a3 + 7) = v16;
  *(_BYTE *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 9) = (v13 & 0x10) != 0;
  *(_BYTE *)(a3 + 10) = (v13 & 0x20) != 0;
  if (v7)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 36) = v8;
  if ((_DWORD)v8)
  {
    v56 = v9;
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1957F6408);
    }
    this = WTF::fastMalloc((WTF *)(8 * v8));
    v40 = 8 * v8;
    v9 = v56;
    *(_DWORD *)(a3 + 32) = v8;
    *(_QWORD *)(a3 + 24) = this;
    v41 = v56;
    do
    {
      v42 = *(_DWORD **)v41;
      if (*(_QWORD *)v41)
        *v42 += 2;
      *(_QWORD *)this = v42;
      this += 8;
      v41 = (WTF *)((char *)v41 + 8);
      v40 -= 8;
    }
    while (v40);
  }
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 52) = v10;
  if ((_DWORD)v10)
  {
    v57 = v9;
    if (!(v10 >> 29))
    {
      this = WTF::fastMalloc((WTF *)(8 * v10));
      v43 = 8 * v10;
      v9 = v57;
      *(_DWORD *)(a3 + 48) = v10;
      *(_QWORD *)(a3 + 40) = this;
      v44 = v11;
      do
      {
        v45 = *(_DWORD **)v44;
        if (*(_QWORD *)v44)
          *v45 += 2;
        *(_QWORD *)this = v45;
        this += 8;
        v44 = (WTF *)((char *)v44 + 8);
        v43 -= 8;
      }
      while (v43);
      goto LABEL_17;
    }
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x1957F63F8);
  }
LABEL_17:
  if (v14)
    *(_DWORD *)v14 += 2;
  *(_QWORD *)(a3 + 56) = v14;
  if (v17)
    *(_DWORD *)v17 += 2;
  v25 = (v24 >> 6) & 7;
  v26 = (v24 >> 9) & 3;
  *(_QWORD *)(a3 + 64) = v17;
  v27 = (v24 >> 12) & 3;
  if (v21)
  {
    v28 = *(_DWORD *)v21;
    *(_DWORD *)v21 += 2;
    *(_QWORD *)(a3 + 72) = v21;
    *(_WORD *)(a3 + 80) = v23;
    *(_BYTE *)(a3 + 88) = v25;
    *(_BYTE *)(a3 + 89) = v26;
    *(_BYTE *)(a3 + 90) = (v24 & 0x800) != 0;
    *(_BYTE *)(a3 + 91) = v27;
    if (v28)
    {
      *(_DWORD *)v21 = v28;
    }
    else
    {
      v29 = v9;
      this = WTF::StringImpl::destroy(v21, a2);
      v9 = v29;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 72) = 0;
    *(_WORD *)(a3 + 80) = v23;
    *(_BYTE *)(a3 + 88) = v25;
    *(_BYTE *)(a3 + 89) = v26;
    *(_BYTE *)(a3 + 90) = (v24 & 0x800) != 0;
    *(_BYTE *)(a3 + 91) = v27;
  }
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      v30 = v9;
      this = WTF::StringImpl::destroy(v17, a2);
      v9 = v30;
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      v31 = v9;
      this = WTF::StringImpl::destroy(v14, a2);
      v9 = v31;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  if ((_DWORD)v10)
  {
    v46 = 8 * v10;
    v47 = (uint64_t *)v11;
    do
    {
      this = *v47;
      *v47 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          v48 = v9;
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v9 = v48;
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      ++v47;
      v46 -= 8;
    }
    while (v46);
  }
  if (v11)
  {
    v32 = v9;
    this = WTF::fastFree(v11, a2);
    v9 = v32;
  }
  if ((_DWORD)v8)
  {
    v49 = 8 * v8;
    v50 = (uint64_t *)v9;
    do
    {
      this = *v50;
      *v50 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          v51 = v9;
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v9 = v51;
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      ++v50;
      v49 -= 8;
    }
    while (v49);
  }
  if (v9)
    this = WTF::fastFree(v9, a2);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::valueForFamily(WTF::StringImpl *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  int *v4;

  v2 = *a2;
  if ((WTF::StringImpl *)WebCore::WebKitFontFamilyNames::cursiveFamily == *a2)
  {
    v3 = 118;
    goto LABEL_12;
  }
  if ((WTF::StringImpl *)WebCore::WebKitFontFamilyNames::fantasyFamily == v2)
  {
    v3 = 119;
    goto LABEL_12;
  }
  if ((WTF::StringImpl *)WebCore::WebKitFontFamilyNames::monospaceFamily == v2)
  {
    v3 = 120;
    goto LABEL_12;
  }
  if ((WTF::StringImpl *)WebCore::WebKitFontFamilyNames::pictographFamily == v2)
  {
    v3 = 122;
    goto LABEL_12;
  }
  if ((WTF::StringImpl *)WebCore::WebKitFontFamilyNames::sansSerifFamily == v2)
  {
    v3 = 117;
LABEL_12:
    v4 = &WebCore::staticCSSValuePool[4 * v3 + 3088];
    *v4 += 2;
    *(_QWORD *)this = v4;
    return this;
  }
  if ((WTF::StringImpl *)WebCore::WebKitFontFamilyNames::serifFamily == v2)
  {
    v3 = 116;
    goto LABEL_12;
  }
  if ((WTF::StringImpl *)WebCore::WebKitFontFamilyNames::systemUiFamily == v2)
  {
    v3 = 123;
    goto LABEL_12;
  }
  {
    WebCore::CSSValuePool::singleton(void)::pool = 0;
    unk_1ECE88B90 = 0;
    qword_1ECE88B98 = 0;
  }
  return WebCore::CSSValuePool::createFontFamilyValue((WebCore::CSSValuePool *)&WebCore::CSSValuePool::singleton(void)::pool, a2, this);
}

int *WebCore::specifiedValueForGridTrackSize(int *this, const WebCore::GridTrackSize *a2, const WebCore::RenderStyle *a3)
{
  _QWORD *v5;
  double v6;
  float v7;
  float v8;
  double v9;
  int *v11;
  char v12;
  double v13;
  int *v14;
  char v15;
  __int16 v16;
  double v17;
  int *v18;
  char v19;
  __int16 v20;
  float v21;
  float v22;
  char v24;
  __int16 v25;
  int *v26;
  int v27;
  int v28;
  float v29;
  float v30;
  WTF::StringImpl *v32;
  float v33;
  float v34;
  int *v36;
  int *v37;
  int v38;
  int *v39;
  int v40;
  int *v41;
  int v42;
  int *v43;
  int *v44;
  uint64_t v45;
  int *v46;

  v5 = this;
  if (*(_DWORD *)a2 == 2)
  {
    if (*((_BYTE *)a2 + 60) == 4)
    {
      v7 = *((float *)a2 + 14);
      if (!*((_BYTE *)a2 + 62))
        v7 = (float)SLODWORD(v7);
      v8 = v7 / *(float *)(*((_QWORD *)a3 + 3) + 184);
      v9 = v8;
      if ((int)v8 <= 0xFF && *(_QWORD *)&v9 == COERCE__INT64((double)(int)v8))
      {
        v26 = &WebCore::staticCSSValuePool[4 * (int)v8];
        v27 = v26[16];
        v11 = v26 + 16;
        *v11 = v27 + 2;
      }
      else
      {
        v11 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v11 = 2;
        v12 = *((_BYTE *)v11 + 6);
        *((_WORD *)v11 + 2) = 6;
        *((_BYTE *)v11 + 6) = v12 & 0xFC;
        *((double *)v11 + 1) = v9;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v46, (const WebCore::GridTrackSize *)((char *)a2 + 56), a3);
      v11 = v46;
    }
    this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
    *this = 2;
    v28 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
    this[2] = 1;
    *((_WORD *)this + 2) = -7680;
    *((_BYTE *)this + 6) = (v28 | 0x10000u) >> 16;
    *((_QWORD *)this + 2) = v11;
    *((_WORD *)this + 28) = 554;
    goto LABEL_35;
  }
  if (!*(_DWORD *)a2)
  {
    if (!*((_DWORD *)a2 + 6))
    {
      if (!*((_BYTE *)a2 + 12))
      {
        v36 = &WebCore::staticCSSValuePool[4664];
        *v36 += 2;
        *(_QWORD *)this = v36;
        return this;
      }
      if (*((_BYTE *)a2 + 12) != 4)
      {
        WebCore::CSSPrimitiveValue::create(&v46, (const WebCore::GridTrackSize *)((char *)a2 + 8), a3);
        this = v46;
        goto LABEL_35;
      }
      v21 = *((float *)a2 + 2);
      if (!*((_BYTE *)a2 + 14))
        v21 = (float)SLODWORD(v21);
      v22 = v21 / *(float *)(*((_QWORD *)a3 + 3) + 184);
      v6 = v22;
      if ((int)v22 <= 0xFF && *(_QWORD *)&v6 == COERCE__INT64((double)(int)v22))
      {
        v37 = &WebCore::staticCSSValuePool[4 * (int)v22];
        v38 = v37[16];
        this = v37 + 16;
        *this = v38 + 2;
        goto LABEL_35;
      }
      this = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *this = 2;
      v24 = *((_BYTE *)this + 6);
      v25 = 6;
LABEL_32:
      *((_WORD *)this + 2) = v25;
      *((_BYTE *)this + 6) = v24 & 0xFC;
      *((double *)this + 1) = v6;
LABEL_35:
      *v5 = this;
      return this;
    }
    v6 = *((double *)a2 + 2);
LABEL_31:
    this = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *this = 2;
    v24 = *((_BYTE *)this + 6);
    v25 = 59;
    goto LABEL_32;
  }
  if (*((_DWORD *)a2 + 6))
  {
    v13 = *((double *)a2 + 2);
    v14 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v14 = 2;
    v15 = *((_BYTE *)v14 + 6);
    v16 = 59;
    goto LABEL_15;
  }
  if (!*((_BYTE *)a2 + 12) && *((_DWORD *)a2 + 12) == 1)
  {
    v6 = *((double *)a2 + 5);
    goto LABEL_31;
  }
  if (*((_BYTE *)a2 + 12))
  {
    if (*((_BYTE *)a2 + 12) != 4)
    {
      WebCore::CSSPrimitiveValue::create(&v46, (const WebCore::GridTrackSize *)((char *)a2 + 8), a3);
      v14 = v46;
      goto LABEL_16;
    }
    v33 = *((float *)a2 + 2);
    if (!*((_BYTE *)a2 + 14))
      v33 = (float)SLODWORD(v33);
    v34 = v33 / *(float *)(*((_QWORD *)a3 + 3) + 184);
    v13 = v34;
    if ((int)v34 <= 0xFF && *(_QWORD *)&v13 == COERCE__INT64((double)(int)v34))
    {
      v41 = &WebCore::staticCSSValuePool[4 * (int)v34];
      v42 = v41[16];
      v14 = v41 + 16;
      *v14 = v42 + 2;
      goto LABEL_16;
    }
    v14 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v14 = 2;
    v15 = *((_BYTE *)v14 + 6);
    v16 = 6;
LABEL_15:
    *((_WORD *)v14 + 2) = v16;
    *((_BYTE *)v14 + 6) = v15 & 0xFC;
    *((double *)v14 + 1) = v13;
LABEL_16:
    v44 = v14;
    goto LABEL_17;
  }
  WebCore::staticCSSValuePool[4664] += 2;
  v44 = &WebCore::staticCSSValuePool[4664];
LABEL_17:
  if (*((_DWORD *)a2 + 12))
  {
    v17 = *((double *)a2 + 5);
    v18 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v18 = 2;
    v19 = *((_BYTE *)v18 + 6);
    v20 = 59;
  }
  else
  {
    if (!*((_BYTE *)a2 + 36))
    {
      WebCore::staticCSSValuePool[4664] += 2;
      v43 = &WebCore::staticCSSValuePool[4664];
      goto LABEL_48;
    }
    if (*((_BYTE *)a2 + 36) != 4)
    {
      WebCore::CSSPrimitiveValue::create(&v46, (const WebCore::GridTrackSize *)((char *)a2 + 32), a3);
      v18 = v46;
      goto LABEL_47;
    }
    v29 = *((float *)a2 + 8);
    if (!*((_BYTE *)a2 + 38))
      v29 = (float)SLODWORD(v29);
    v30 = v29 / *(float *)(*((_QWORD *)a3 + 3) + 184);
    v17 = v30;
    if ((int)v30 <= 0xFF && *(_QWORD *)&v17 == COERCE__INT64((double)(int)v30))
    {
      v39 = &WebCore::staticCSSValuePool[4 * (int)v30];
      v40 = v39[16];
      v18 = v39 + 16;
      *v18 = v40 + 2;
      goto LABEL_47;
    }
    v18 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v18 = 2;
    v19 = *((_BYTE *)v18 + 6);
    v20 = 6;
  }
  *((_WORD *)v18 + 2) = v20;
  *((_BYTE *)v18 + 6) = v19 & 0xFC;
  *((double *)v18 + 1) = v17;
LABEL_47:
  v43 = v18;
LABEL_48:
  WebCore::CSSFunctionValue::create(895, &v44, &v43, &v45);
  *v5 = v45;
  if (v43)
  {
    if (*v43 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v32);
    else
      *v43 -= 2;
  }
  this = v44;
  if (v44)
  {
    if (*v44 == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v32);
    else
      *v44 -= 2;
  }
  return this;
}

WTF *WebCore::addValuesForNamedGridLinesAtIndex(WTF *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;

  v6 = **((_QWORD **)result + 1);
  if (v6 && *(_DWORD *)(v6 - 12))
    goto LABEL_7;
  v7 = **((_QWORD **)result + 2);
  if (v7)
    LOBYTE(v7) = *(_DWORD *)(v7 - 12) != 0;
  if ((v7 & 1) != 0 || a4)
  {
LABEL_7:
    v20 = 0;
    v21 = 0;
    (*(void (**)(WTF *, WTF **, uint64_t))(*(_QWORD *)result + 16))(result, &v20, a2);
    v9 = HIDWORD(v21);
    if (HIDWORD(v21) || a4)
    {
      v10 = v20;
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 2;
      v12 = (*(unsigned __int8 *)(v11 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_WORD *)(v11 + 4) = 0x4000;
      *(_BYTE *)(v11 + 6) = BYTE2(v12);
      if ((_DWORD)v9)
      {
        v13 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v9 + 8));
        v14 = 0;
        *v13 = v9;
        do
        {
          v15 = *(_DWORD **)((char *)v10 + v14 * 4);
          if (v15)
            *v15 += 2;
          *(_QWORD *)&v13[v14 + 2] = v15;
          v14 += 2;
        }
        while (2 * v9 != v14);
      }
      else
      {
        v13 = 0;
      }
      *(_QWORD *)(v11 + 8) = v13;
      v16 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v16 == *(_DWORD *)(a3 + 8))
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v16 + 1);
        v16 = *(unsigned int *)(a3 + 12);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v11;
      *(_DWORD *)(a3 + 12) = v16 + 1;
      if (HIDWORD(v21))
      {
        v17 = v20;
        v18 = 8 * HIDWORD(v21);
        do
        {
          v19 = *(WTF::StringImpl **)v17;
          *(_QWORD *)v17 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v8);
            else
              *(_DWORD *)v19 -= 2;
          }
          v17 = (WTF *)((char *)v17 + 8);
          v18 -= 8;
        }
        while (v18);
      }
    }
    result = v20;
    if (v20)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      return (WTF *)WTF::fastFree(result, v8);
    }
  }
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_0,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_1,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_2,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_3,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_4,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t **a1, const WebCore::GridTrackSize *a2)
{
  uint64_t v2;
  int *result;
  uint64_t v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  v2 = **a1;
  result = WebCore::specifiedValueForGridTrackSize((int *)&v10, a2, (const WebCore::RenderStyle *)(*a1)[1]);
  v4 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(v2 + 8))
  {
    v5 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2, v4 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(v2 + 12);
    v8 = *(_QWORD *)v2;
    v9 = *v5;
    *v5 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(v2 + 12) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*result == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
      else
        *result -= 2;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = v10;
    *(_DWORD *)(v2 + 12) = v4 + 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_0,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_1,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_2,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_3,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_4,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;

  v2 = *a2;
  v3 = *((unsigned int *)a2 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)result + 24);
  if ((_DWORD)v3 || **(_BYTE **)(*(_QWORD *)result + 16))
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 2;
    v6 = (*(unsigned __int8 *)(v5 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_WORD *)(v5 + 4) = 0x4000;
    *(_BYTE *)(v5 + 6) = BYTE2(v6);
    if ((_DWORD)v3)
    {
      result = WTF::fastMalloc((WTF *)(8 * v3 + 8));
      v7 = 0;
      *(_DWORD *)result = v3;
      do
      {
        v8 = *(_DWORD **)(v2 + v7);
        if (v8)
          *v8 += 2;
        *(_QWORD *)(result + v7 + 8) = v8;
        v7 += 8;
      }
      while (8 * v3 != v7);
    }
    else
    {
      result = 0;
    }
    *(_QWORD *)(v5 + 8) = result;
    v9 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(v4 + 8))
    {
      result = WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v9 + 1);
      v9 = *(unsigned int *)(v4 + 12);
    }
    *(_QWORD *)(*(_QWORD *)v4 + 8 * v9) = v5;
    *(_DWORD *)(v4 + 12) = v9 + 1;
  }
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_0,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_1,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_2,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_3,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_4,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::GridTrackSize *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *result;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[32];
  _DWORD *v30;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[32];

  v3 = *a1;
  v31 = (WTF *)v33;
  v32 = 4;
  v4 = a2[5];
  if ((_DWORD)v4)
  {
    v5 = (WebCore::GridTrackSize *)*((_QWORD *)a2 + 1);
    v6 = 96 * v4;
    do
    {
      WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_7::operator()(*(_QWORD *)(v3 + 32), (uint64_t)&v31, v5);
      v5 = (WebCore::GridTrackSize *)((char *)v5 + 96);
      v6 -= 96;
    }
    while (v6);
    v7 = v31;
    v8 = *(_QWORD *)(v3 + 40);
    v9 = *a2;
    v27 = (WTF *)v29;
    v28 = 4;
    v10 = HIDWORD(v32);
    if (v31 != (WTF *)v33)
    {
      v31 = (WTF *)v33;
      v27 = v7;
      v11 = v32;
      LODWORD(v32) = 4;
      LODWORD(v28) = v11;
      goto LABEL_8;
    }
  }
  else
  {
    v10 = 0;
    v8 = *(_QWORD *)(v3 + 40);
    v9 = *a2;
    v27 = (WTF *)v29;
    v28 = 4;
  }
  memcpy(v29, v33, 8 * v10);
LABEL_8:
  HIDWORD(v32) = 0;
  HIDWORD(v28) = v10;
  WebCore::CSSGridIntegerRepeatValue::create(v9, (uint64_t)&v27, (uint64_t *)&v30);
  v13 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(v8 + 8))
  {
    WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v13 + 1);
    v13 = *(unsigned int *)(v8 + 12);
  }
  v14 = *(_QWORD *)v8;
  v15 = (uint64_t)v30;
  v30 = 0;
  *(_QWORD *)(v14 + 8 * v13) = v15;
  *(_DWORD *)(v8 + 12) = v13 + 1;
  v16 = v30;
  v30 = 0;
  if (v16)
  {
    if (*v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v12);
    else
      *v16 -= 2;
  }
  if (HIDWORD(v28))
  {
    v17 = v27;
    v18 = 8 * HIDWORD(v28);
    do
    {
      v19 = *(_DWORD **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v12);
        else
          *v19 -= 2;
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  v20 = v27;
  if (v29 != (_BYTE *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v20, v12);
  }
  if (HIDWORD(v32))
  {
    v22 = v31;
    v23 = 8 * HIDWORD(v32);
    do
    {
      v24 = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
      if (v24)
      {
        if (*v24 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v12);
        else
          *v24 -= 2;
      }
      v22 = (WTF *)((char *)v22 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  result = v31;
  if (v33 != (_BYTE *)v31 && v31 != 0)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_0,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_1,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_2,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_3,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_4,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WebCore::GridTrackSize *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  WTF *result;
  int v23;
  WTF *v24;
  int v25;
  unsigned int v26;
  _BYTE v27[32];
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  _BYTE v31[32];

  v3 = *a1;
  v29 = (WTF *)v31;
  v30 = 4;
  v4 = *(unsigned int *)(a2 + 20);
  v5 = (WTF *)v31;
  if ((_DWORD)v4)
  {
    v6 = *(WebCore::GridTrackSize **)(a2 + 8);
    v7 = 96 * v4;
    do
    {
      WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_7::operator()(*(_QWORD *)(v3 + 48), (uint64_t)&v29, v6);
      v6 = (WebCore::GridTrackSize *)((char *)v6 + 96);
      v7 -= 96;
    }
    while (v7);
    v5 = v29;
  }
  v8 = *(_QWORD *)(v3 + 56);
  if (*(_BYTE *)a2 == 1)
    v9 = 965;
  else
    v9 = 966;
  v24 = (WTF *)v27;
  v25 = 4;
  if (v5 == (WTF *)v31)
  {
    v10 = HIDWORD(v30);
    memcpy(v27, v31, 8 * HIDWORD(v30));
  }
  else
  {
    v29 = (WTF *)v31;
    v24 = v5;
    v23 = v30;
    v10 = HIDWORD(v30);
    LODWORD(v30) = 4;
    v25 = v23;
  }
  HIDWORD(v30) = 0;
  v26 = v10;
  WebCore::CSSGridAutoRepeatValue::create(v9, (uint64_t)&v24, &v28);
  v12 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(v8 + 8))
  {
    WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v12 + 1);
    v12 = *(unsigned int *)(v8 + 12);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v12) = v28;
  *(_DWORD *)(v8 + 12) = v12 + 1;
  if (v26)
  {
    v13 = v24;
    v14 = 8 * v26;
    do
    {
      v15 = *(_DWORD **)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v11);
        else
          *v15 -= 2;
      }
      v13 = (WTF *)((char *)v13 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  v16 = v24;
  if (v27 != (_BYTE *)v24 && v24 != 0)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree(v16, v11);
  }
  if (HIDWORD(v30))
  {
    v18 = v29;
    v19 = 8 * HIDWORD(v30);
    do
    {
      v20 = *(_DWORD **)v18;
      *(_QWORD *)v18 = 0;
      if (v20)
      {
        if (*v20 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v11);
        else
          *v20 -= 2;
      }
      v18 = (WTF *)((char *)v18 + 8);
      v19 -= 8;
    }
    while (v19);
  }
  result = v29;
  if (v31 != (_BYTE *)v29 && v29 != 0)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_0,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_1,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_2,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_3,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_4,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;

  v1 = *(_QWORD *)(*(_QWORD *)result + 64);
  WebCore::staticCSSValuePool[6672] += 2;
  v2 = *(unsigned int *)(v1 + 12);
  if ((_DWORD)v2 != *(_DWORD *)(v1 + 8))
  {
    v3 = (_QWORD *)(*(_QWORD *)v1 + 8 * v2);
LABEL_3:
    *v3 = &WebCore::staticCSSValuePool[6672];
    *(_DWORD *)(v1 + 12) = v2 + 1;
    return result;
  }
  v4 = v2 + (v2 >> 2);
  if (v4 >= 0x10)
    v5 = v4 + 1;
  else
    v5 = 16;
  if (v5 <= v2 + 1)
    v6 = v2 + 1;
  else
    v6 = v5;
  v7 = *(void **)v1;
  if (v6 < 5)
  {
    v9 = (void *)(v1 + 16);
    *(_QWORD *)v1 = v1 + 16;
    *(_DWORD *)(v1 + 8) = 4;
    goto LABEL_13;
  }
  if (!(v6 >> 29))
  {
    v8 = v6;
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v1 + 8) = v8;
    *(_QWORD *)v1 = v9;
LABEL_13:
    result = (uint64_t)memcpy(v9, v7, 8 * v2);
    if ((void *)(v1 + 16) != v7 && v7 != 0)
    {
      if (*(void **)v1 == v7)
      {
        *(_QWORD *)v1 = 0;
        *(_DWORD *)(v1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v7, v10);
    }
    v2 = *(unsigned int *)(v1 + 12);
    v3 = (_QWORD *)(*(_QWORD *)v1 + 8 * v2);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_0,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_1,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_2,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_3,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_4,WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;

  v1 = *(_QWORD *)(*(_QWORD *)result + 72);
  WebCore::staticCSSValuePool[6676] += 2;
  v2 = *(unsigned int *)(v1 + 12);
  if ((_DWORD)v2 != *(_DWORD *)(v1 + 8))
  {
    v3 = (_QWORD *)(*(_QWORD *)v1 + 8 * v2);
LABEL_3:
    *v3 = &WebCore::staticCSSValuePool[6676];
    *(_DWORD *)(v1 + 12) = v2 + 1;
    return result;
  }
  v4 = v2 + (v2 >> 2);
  if (v4 >= 0x10)
    v5 = v4 + 1;
  else
    v5 = 16;
  if (v5 <= v2 + 1)
    v6 = v2 + 1;
  else
    v6 = v5;
  v7 = *(void **)v1;
  if (v6 < 5)
  {
    v9 = (void *)(v1 + 16);
    *(_QWORD *)v1 = v1 + 16;
    *(_DWORD *)(v1 + 8) = 4;
    goto LABEL_13;
  }
  if (!(v6 >> 29))
  {
    v8 = v6;
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v1 + 8) = v8;
    *(_QWORD *)v1 = v9;
LABEL_13:
    result = (uint64_t)memcpy(v9, v7, 8 * v2);
    if ((void *)(v1 + 16) != v7 && v7 != 0)
    {
      if (*(void **)v1 == v7)
      {
        *(_QWORD *)v1 = 0;
        *(_DWORD *)(v1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v7, v10);
    }
    v2 = *(unsigned int *)(v1 + 12);
    v3 = (_QWORD *)(*(_QWORD *)v1 + 8 * v2);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::valueForGridTrackList(WebCore::GridTrackSizingDirection,WebCore::RenderObject *,WebCore::RenderStyle const&)::$_7::operator()(uint64_t result, uint64_t a2, WebCore::GridTrackSize *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderBox *v17;
  uint64_t v18;

  v4 = *((_DWORD *)a3 + 22);
  if (v4 == 1)
  {
    v5 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v5 || **(_BYTE **)result)
    {
      v6 = *(_QWORD *)a3;
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 2;
      v8 = (*(unsigned __int8 *)(v7 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_WORD *)(v7 + 4) = 0x4000;
      *(_BYTE *)(v7 + 6) = BYTE2(v8);
      if ((_DWORD)v5)
      {
        result = WTF::fastMalloc((WTF *)(8 * v5 + 8));
        v9 = 0;
        *(_DWORD *)result = v5;
        do
        {
          v10 = *(_DWORD **)(v6 + v9);
          if (v10)
            *v10 += 2;
          *(_QWORD *)(result + v9 + 8) = v10;
          v9 += 8;
        }
        while (8 * v5 != v9);
      }
      else
      {
        result = 0;
      }
      *(_QWORD *)(v7 + 8) = result;
      v11 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
      {
        result = WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v11 + 1);
        v11 = *(unsigned int *)(a2 + 12);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v7;
      goto LABEL_17;
    }
  }
  else
  {
    if (v4)
    {
      v17 = (WebCore::RenderBox *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderBox::computedCSSContentBoxRect(v17);
    }
    result = (uint64_t)WebCore::specifiedValueForGridTrackSize((int *)&v18, a3, *(const WebCore::RenderStyle **)(result + 8));
    v11 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v11 != *(_DWORD *)(a2 + 8))
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v18;
LABEL_17:
      *(_DWORD *)(a2 + 12) = v11 + 1;
      return result;
    }
    v12 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v11 + 1, (unint64_t)&v18);
    v14 = *(unsigned int *)(a2 + 12);
    v15 = *(_QWORD *)a2;
    v16 = *v12;
    *v12 = 0;
    *(_QWORD *)(v15 + 8 * v14) = v16;
    result = v18;
    *(_DWORD *)(a2 + 12) = v14 + 1;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::computedCSSContentBoxRect(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  v2 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
  v3 = WebCore::RenderBoxModelObject::computedCSSPaddingLeft(this);
  if (__OFADD__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 + v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  v6 = WebCore::RenderBoxModelObject::computedCSSPaddingTop(this);
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v7 = v5 + v6;
  WebCore::RenderBox::paddingBoxWidth(this);
  WebCore::RenderBoxModelObject::computedCSSPaddingLeft(this);
  WebCore::RenderBoxModelObject::computedCSSPaddingRight(this);
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  WebCore::RenderBox::paddingBoxHeight(this);
  WebCore::RenderBoxModelObject::computedCSSPaddingTop(this);
  WebCore::RenderBoxModelObject::computedCSSPaddingBottom(this);
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  return v4 | (v7 << 32);
}

uint64_t WebCore::RenderBoxModelObject::computedCSSPaddingLeft(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v8;
  float v9;
  int v11;
  unsigned __int8 *v12;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v2 = v1[100];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v11 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v1 = v12;
    v2 = v12[100];
    v3 = (float)v11 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v8 = *((float *)v1 + 24);
      if (!v1[102])
        v8 = (float)SLODWORD(v8);
      v9 = (float)(v3 * v8) / 100.0;
    }
    else
    {
      if (v2 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 96), v3);
    }
    v5 = v9 * 64.0;
    if (v5 < 2147483650.0 && v5 > -2147483650.0)
      return (int)v5;
    if (v5 < 2147483650.0)
    {
LABEL_28:
      if (v5 <= -2147483650.0)
        return 0x80000000;
      return (int)v5;
    }
    return 0x7FFFFFFFLL;
  }
  v4 = *((float *)v1 + 24);
  if (!v1[102])
    v4 = (float)SLODWORD(v4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 < 2147483650.0)
      goto LABEL_28;
    return 0x7FFFFFFFLL;
  }
  return (int)v5;
}

uint64_t WebCore::RenderBoxModelObject::computedCSSPaddingTop(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v8;
  float v9;
  int v11;
  unsigned __int8 *v12;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v2 = v1[76];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v11 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v1 = v12;
    v2 = v12[76];
    v3 = (float)v11 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v8 = *((float *)v1 + 18);
      if (!v1[78])
        v8 = (float)SLODWORD(v8);
      v9 = (float)(v3 * v8) / 100.0;
    }
    else
    {
      if (v2 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 72), v3);
    }
    v5 = v9 * 64.0;
    if (v5 < 2147483650.0 && v5 > -2147483650.0)
      return (int)v5;
    if (v5 < 2147483650.0)
    {
LABEL_28:
      if (v5 <= -2147483650.0)
        return 0x80000000;
      return (int)v5;
    }
    return 0x7FFFFFFFLL;
  }
  v4 = *((float *)v1 + 18);
  if (!v1[78])
    v4 = (float)SLODWORD(v4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 < 2147483650.0)
      goto LABEL_28;
    return 0x7FFFFFFFLL;
  }
  return (int)v5;
}

uint64_t WebCore::RenderBoxModelObject::computedCSSPaddingRight(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v8;
  float v9;
  int v11;
  unsigned __int8 *v12;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v2 = v1[84];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v11 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v1 = v12;
    v2 = v12[84];
    v3 = (float)v11 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v8 = *((float *)v1 + 20);
      if (!v1[86])
        v8 = (float)SLODWORD(v8);
      v9 = (float)(v3 * v8) / 100.0;
    }
    else
    {
      if (v2 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 80), v3);
    }
    v5 = v9 * 64.0;
    if (v5 < 2147483650.0 && v5 > -2147483650.0)
      return (int)v5;
    if (v5 < 2147483650.0)
    {
LABEL_28:
      if (v5 <= -2147483650.0)
        return 0x80000000;
      return (int)v5;
    }
    return 0x7FFFFFFFLL;
  }
  v4 = *((float *)v1 + 20);
  if (!v1[86])
    v4 = (float)SLODWORD(v4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 < 2147483650.0)
      goto LABEL_28;
    return 0x7FFFFFFFLL;
  }
  return (int)v5;
}

uint64_t WebCore::RenderBoxModelObject::computedCSSPaddingBottom(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v8;
  float v9;
  int v11;
  unsigned __int8 *v12;

  v1 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v2 = v1[92];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v11 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v1 = v12;
    v2 = v12[92];
    v3 = (float)v11 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v8 = *((float *)v1 + 22);
      if (!v1[94])
        v8 = (float)SLODWORD(v8);
      v9 = (float)(v3 * v8) / 100.0;
    }
    else
    {
      if (v2 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 88), v3);
    }
    v5 = v9 * 64.0;
    if (v5 < 2147483650.0 && v5 > -2147483650.0)
      return (int)v5;
    if (v5 < 2147483650.0)
    {
LABEL_28:
      if (v5 <= -2147483650.0)
        return 0x80000000;
      return (int)v5;
    }
    return 0x7FFFFFFFLL;
  }
  v4 = *((float *)v1 + 22);
  if (!v1[94])
    v4 = (float)SLODWORD(v4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0 || v5 <= -2147483650.0)
  {
    if (v5 < 2147483650.0)
      goto LABEL_28;
    return 0x7FFFFFFFLL;
  }
  return (int)v5;
}

uint64_t WebCore::physicalToFlowRelativeDirection(WebCore::RenderObject *this, int a2)
{
  uint64_t v4;
  WebCore::RenderObject *v5;
  WebCore::RenderObject *v6;
  int v7;
  int v8;
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;

  v4 = *((_QWORD *)this + 4);
  if (!v4
    || (v5 = *(WebCore::RenderObject **)(v4 + 8)) == 0
    || ((*((char *)v5 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0)
    && (*((_BYTE *)v5 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0))
  {
    v5 = WebCore::RenderObject::containingBlock(this);
  }
  if (v5)
    v6 = v5;
  else
    v6 = this;
  v7 = ((unsigned __int16)*((_DWORD *)v6 + 31) >> 13) - 1;
  switch((unsigned __int16)*((_DWORD *)v6 + 31) >> 13)
  {
    case 1:
      v9 = (*((_BYTE *)v6 + 123) & 4) == 0;
      v8 = 1;
LABEL_39:
      v10 = 1;
      break;
    case 2:
    case 4:
      v8 = 0;
      v9 = (*((_BYTE *)v6 + 123) & 4) == 0;
LABEL_36:
      v10 = 2;
      break;
    case 3:
    case 5:
      v8 = 0;
      goto LABEL_11;
    default:
      v8 = 1;
LABEL_11:
      v9 = (*((_BYTE *)v6 + 123) & 4) == 0;
      v10 = 2;
      switch(v7)
      {
        case 0:
          goto LABEL_39;
        case 1:
          goto LABEL_36;
        case 2:
        case 4:
          v10 = 3;
          break;
        case 3:
          goto LABEL_13;
        default:
          v10 = 0;
          break;
      }
      break;
  }
LABEL_13:
  v11 = v10 & 1;
  switch(a2)
  {
    case 0:
      if (!v8)
        goto LABEL_15;
      goto LABEL_22;
    case 1:
      if (v8)
        goto LABEL_24;
      goto LABEL_28;
    case 2:
      if (v8)
      {
LABEL_28:
        result = 2 * (v11 == 0);
      }
      else
      {
LABEL_24:
        if (v9)
          result = 1;
        else
          result = 3;
      }
      break;
    case 3:
      if (v8)
      {
LABEL_15:
        if (v9)
          result = 3;
        else
          result = 1;
      }
      else
      {
LABEL_22:
        result = (2 * v11);
      }
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::appendLigaturesValue(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;

  v4 = result;
  if (a2 == 1)
  {
    v5 = &WebCore::staticCSSValuePool[4 * a3 + 3088];
    *v5 += 2;
    v6 = *(unsigned int *)(result + 12);
    if ((_DWORD)v6 == *(_DWORD *)(result + 8))
    {
      v17 = *(unsigned int *)(result + 12);
      v18 = &WebCore::staticCSSValuePool[4 * a3 + 3088];
      v12 = v6 + (v6 >> 2);
      if (v12 >= 0x10)
        v13 = v12 + 1;
      else
        v13 = 16;
      if (v13 <= v6 + 1)
        v9 = v6 + 1;
      else
        v9 = v13;
      v10 = *(void **)result;
      if (v9 >= 5)
      {
        if (v9 >> 29)
        {
LABEL_33:
          __break(0xC471u);
          JUMPOUT(0x1957F7EC0);
        }
        goto LABEL_25;
      }
LABEL_28:
      v14 = (void *)(result + 16);
      *(_QWORD *)v4 = v4 + 16;
      *(_DWORD *)(v4 + 8) = 4;
LABEL_26:
      result = (uint64_t)memcpy(v14, v10, 8 * v17);
      if ((void *)(v4 + 16) != v10 && v10)
      {
        if (*(void **)v4 == v10)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v10, v15);
      }
      v16 = *(unsigned int *)(v4 + 12);
      v11 = v16 + 1;
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v16) = v18;
      goto LABEL_15;
    }
  }
  else
  {
    if (a2 != 2)
      return result;
    v5 = &WebCore::staticCSSValuePool[4 * a4 + 3088];
    *v5 += 2;
    v6 = *(unsigned int *)(result + 12);
    if ((_DWORD)v6 == *(_DWORD *)(result + 8))
    {
      v17 = *(unsigned int *)(result + 12);
      v18 = &WebCore::staticCSSValuePool[4 * a4 + 3088];
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v6 + 1)
        v9 = v6 + 1;
      else
        v9 = v8;
      v10 = *(void **)result;
      if (v9 >= 5)
      {
        if (v9 >> 29)
          goto LABEL_33;
LABEL_25:
        v14 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
        *(_DWORD *)(v4 + 8) = v9;
        *(_QWORD *)v4 = v14;
        goto LABEL_26;
      }
      goto LABEL_28;
    }
  }
  v11 = v6 + 1;
  *(_QWORD *)(*(_QWORD *)result + 8 * v6) = v5;
LABEL_15:
  *(_DWORD *)(v4 + 12) = v11;
  return result;
}

int *WebCore::valueForAnimationTimingFunction(WebCore *this, const void **a2)
{
  int *result;
  char v5;
  uint64_t v6;
  int v7;
  void *v8;
  int v9;
  __int16 v10;
  char v11;
  const void *v12;
  const void *v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  int *v17;
  __int128 v18;

  switch((*((unsigned int (**)(const void **))*a2 + 3))(a2))
  {
    case 0u:
      if (*((_DWORD *)a2 + 7))
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x18);
        *result = 2;
        v5 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 0x8000;
        *((_BYTE *)result + 6) = v5 & 0xFC;
        v6 = *((unsigned int *)a2 + 7);
        *((_QWORD *)result + 1) = 0;
        *((_QWORD *)result + 2) = 0;
        result[5] = v6;
        if ((_DWORD)v6)
        {
          v17 = result;
          if (v6 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1957F8204);
          }
          v7 = v6;
          v8 = (void *)WTF::fastMalloc((WTF *)(16 * v6));
          v17[4] = v7;
          *((_QWORD *)v17 + 1) = v8;
          memcpy(v8, a2[2], 16 * *((unsigned int *)a2 + 7));
          result = v17;
        }
      }
      else
      {
        result = &WebCore::staticCSSValuePool[5612];
        *result += 2;
      }
      break;
    case 1u:
      switch(*((_BYTE *)a2 + 48))
      {
        case 0:
          v16 = 630;
          break;
        case 1:
          v16 = 632;
          break;
        case 2:
          v16 = 633;
          break;
        case 3:
          v16 = 634;
          break;
        case 4:
          v18 = *((_OWORD *)a2 + 1);
          v12 = a2[4];
          v13 = a2[5];
          result = (int *)WTF::fastCompactMalloc((WTF *)0x28);
          *result = 2;
          v14 = *((_BYTE *)result + 6);
          v15 = -30720;
          goto LABEL_8;
        default:
          v16 = 0;
          break;
      }
      result = &WebCore::staticCSSValuePool[4 * v16 + 3088];
      *result += 2;
      break;
    case 2u:
      v9 = *((_DWORD *)a2 + 3);
      v10 = *((_WORD *)a2 + 8);
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v11 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = -26624;
      *((_BYTE *)result + 6) = v11 & 0xFC;
      result[2] = v9;
      *((_WORD *)result + 6) = v10;
      break;
    case 3u:
      v18 = *((_OWORD *)a2 + 1);
      v12 = a2[4];
      v13 = a2[5];
      result = (int *)WTF::fastCompactMalloc((WTF *)0x28);
      *result = 2;
      v14 = *((_BYTE *)result + 6);
      v15 = -28672;
LABEL_8:
      *((_WORD *)result + 2) = v15;
      *((_BYTE *)result + 6) = v14 & 0xFC;
      *(_OWORD *)(result + 2) = v18;
      *((_QWORD *)result + 3) = v12;
      *((_QWORD *)result + 4) = v13;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957F81FCLL);
  }
  *(_QWORD *)this = result;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_0,WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_1,WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&>(_BYTE *a1@<X1>, int **a2@<X8>)
{
  uint64_t v2;
  int *v3;

  v2 = 1576;
  if (!*a1)
    v2 = 24;
  v3 = &WebCore::staticCSSValuePool[v2 + 3088];
  *v3 += 2;
  *a2 = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_0,WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_1,WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;
  int v7;

  v3 = *a1;
  if (*a1)
    *(_DWORD *)v3 += 2;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 63;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  if (v3)
  {
    v7 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    *a2 = result;
    if (v7)
      *(_DWORD *)v3 = v7;
    else
      return WTF::StringImpl::destroy(v3, v5);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_0,WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_1,WebCore::valueForAnimationTimeline(std::variant<WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WTF::Ref<WebCore::ScrollTimeline,WTF::RawPtrTraits<WebCore::ScrollTimeline>,WTF::DefaultRefDerefTraits<WebCore::ScrollTimeline>>> const&>(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
}

int *WebCore::addValueForAnimationPropertyToList(int *result, int a2, WebCore::Animation *a3)
{
  int *v3;
  int *v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  double v12;
  const void **v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int *v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int *v36;
  int *v37;
  unint64_t v38;
  unint64_t v39;
  char v41;
  int **v42;
  int *v43;
  uint64_t *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  int **v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  int *v76;
  uint64_t v77;
  int *v78;
  int v79;
  int *v80;
  char v81;
  char *v82;

  v3 = result;
  switch(a2)
  {
    case '.':
      if (!a3)
      {
        v4 = &WebCore::staticCSSValuePool[5656];
        goto LABEL_89;
      }
      if ((*((_DWORD *)a3 + 28) & 0x80000000) == 0)
      {
        if (*((_DWORD *)a3 + 28) >> 6 == 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1957F8CCCLL);
        }
        v4 = off_1E3399518[*((_DWORD *)a3 + 28) >> 6];
LABEL_89:
        *v4 += 2;
        v23 = result[3];
        if ((_DWORD)v23 != result[2])
          goto LABEL_131;
        v73 = result[3];
        v76 = v4;
        v32 = v23 + (v23 >> 2);
        if (v32 >= 0x10)
          v33 = v32 + 1;
        else
          v33 = 16;
        if (v33 <= v23 + 1)
          v26 = v23 + 1;
        else
          v26 = v33;
        v27 = *(int **)result;
        if (v26 >= 5)
        {
          if (v26 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1957F87B0);
          }
          goto LABEL_183;
        }
        goto LABEL_198;
      }
      return result;
    case '/':
LABEL_18:
      if (a3)
      {
        if ((*((_DWORD *)a3 + 28) & 0x400000) != 0)
          return result;
        v8 = *((_QWORD *)a3 + 7);
      }
      else
      {
        v8 = 0;
      }
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v20 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = 16;
      *((_BYTE *)result + 6) = v20 & 0xFC;
      *((_QWORD *)result + 1) = v8;
      v14 = v3[3];
      if ((_DWORD)v14 != v3[2])
        goto LABEL_126;
      v72 = v3[3];
      v75 = result;
      v21 = v14 + (v14 >> 2);
      if (v21 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      if (v22 <= v14 + 1)
        v18 = v14 + 1;
      else
        v18 = v22;
      v19 = *(int **)v3;
      if (v18 < 5)
        goto LABEL_197;
      if (v18 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F8670);
      }
      goto LABEL_172;
    case '0':
      if (a3)
      {
        if ((*((_DWORD *)a3 + 28) & 0x800000) != 0)
          return result;
        v4 = (&off_1E33994D8)[*((_DWORD *)a3 + 28) & 3];
      }
      else
      {
        v4 = &WebCore::staticCSSValuePool[3448];
      }
      *v4 += 2;
      v23 = result[3];
      if ((_DWORD)v23 != result[2])
        goto LABEL_131;
      v73 = result[3];
      v76 = v4;
      v24 = v23 + (v23 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v23 + 1)
        v26 = v23 + 1;
      else
        v26 = v25;
      v27 = *(int **)result;
      if (v26 < 5)
        goto LABEL_198;
      if (v26 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F86D4);
      }
      goto LABEL_183;
    case '1':
LABEL_15:
      if (a3)
      {
        if ((*((_DWORD *)a3 + 28) & 0x1000000) != 0)
          return result;
        v7 = *((_QWORD *)a3 + 8);
      }
      else
      {
        v7 = 0;
      }
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v15 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = 16;
      *((_BYTE *)result + 6) = v15 & 0xFC;
      *((_QWORD *)result + 1) = v7;
      v14 = v3[3];
      if ((_DWORD)v14 != v3[2])
        goto LABEL_126;
      v72 = v3[3];
      v75 = result;
      v16 = v14 + (v14 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v14 + 1)
        v18 = v14 + 1;
      else
        v18 = v17;
      v19 = *(int **)v3;
      if (v18 < 5)
        goto LABEL_197;
      if (v18 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F85FCLL);
      }
      goto LABEL_172;
    case '2':
      if (a3)
      {
        v11 = *((unsigned int *)a3 + 28);
        if ((v11 & 0x2000000) != 0)
          return result;
        v4 = (&off_1E33994F8)[((v11 | ((unint64_t)*((unsigned __int8 *)a3 + 116) << 32)) >> 2) & 3];
      }
      else
      {
        v4 = &WebCore::staticCSSValuePool[3112];
      }
      *v4 += 2;
      v23 = result[3];
      if ((_DWORD)v23 != result[2])
        goto LABEL_131;
      v73 = result[3];
      v76 = v4;
      v38 = v23 + (v23 >> 2);
      if (v38 >= 0x10)
        v39 = v38 + 1;
      else
        v39 = 16;
      if (v39 <= v23 + 1)
        v26 = v23 + 1;
      else
        v26 = v39;
      v27 = *(int **)result;
      if (v26 < 5)
        goto LABEL_198;
      if (v26 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F88C8);
      }
      goto LABEL_183;
    case '3':
      if (a3)
      {
        if ((*((_DWORD *)a3 + 28) & 0x4000000) != 0)
          return result;
        v12 = *((double *)a3 + 6);
        if (v12 == -1.0)
        {
          result = &WebCore::staticCSSValuePool[5244];
          *result += 2;
          goto LABEL_125;
        }
      }
      else
      {
        v12 = 1.0;
      }
      if ((int)v12 <= 0xFF && *(_QWORD *)&v12 == COERCE__INT64((double)(int)v12))
      {
        result = &WebCore::staticCSSValuePool[4 * (int)v12 + 2064];
        *result += 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v41 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 1;
        *((_BYTE *)result + 6) = v41 & 0xFC;
        *((double *)result + 1) = v12;
      }
LABEL_125:
      v14 = v3[3];
      if ((_DWORD)v14 == v3[2])
      {
        v72 = v3[3];
        v75 = result;
        v57 = v14 + (v14 >> 2);
        if (v57 >= 0x10)
          v58 = v57 + 1;
        else
          v58 = 16;
        if (v58 <= v14 + 1)
          v18 = v14 + 1;
        else
          v18 = v58;
        v19 = *(int **)v3;
        if (v18 < 5)
        {
LABEL_197:
          v59 = v3 + 4;
          *(_QWORD *)v3 = v3 + 4;
          v3[2] = 4;
        }
        else
        {
          if (v18 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1957F8D98);
          }
LABEL_172:
          v59 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
          v3[2] = v18;
          *(_QWORD *)v3 = v59;
        }
        memcpy(v59, v19, 8 * v72);
        if (v3 + 4 != v19 && v19)
        {
          if (*(int **)v3 == v19)
          {
            *(_QWORD *)v3 = 0;
            v3[2] = 0;
          }
          WTF::fastFree((WTF *)v19, v60);
        }
        v14 = v3[3];
        v42 = (int **)(*(_QWORD *)v3 + 8 * v14);
        result = v75;
      }
      else
      {
LABEL_126:
        v42 = (int **)(*(_QWORD *)v3 + 8 * v14);
      }
      *v42 = result;
      goto LABEL_128;
    case '4':
      if (a3)
      {
        v10 = (uint64_t *)((char *)a3 + 32);
      }
      else
      {
        v10 = &WebCore::Animation::initialName(void)::initialValue;
        {
          v71 = WebCore::noneAtomData;
          if (WebCore::noneAtomData)
            *(_DWORD *)WebCore::noneAtomData += 2;
          WebCore::Animation::initialName(void)::initialValue = v71;
          word_1ECE90D78 = 256;
        }
      }
      result = (int *)WebCore::valueForScopedName((uint64_t *)&v78, (WTF::StringImpl *)*v10, *((_BYTE *)v10 + 9));
      v14 = v3[3];
      if ((_DWORD)v14 != v3[2])
      {
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v14) = v78;
        goto LABEL_128;
      }
      v50 = v14 + (v14 >> 2);
      if (v50 >= 0x10)
        v51 = v50 + 1;
      else
        v51 = 16;
      v74 = v3[3];
      if (v51 <= v14 + 1)
        v52 = v14 + 1;
      else
        v52 = v51;
      v9 = *(void **)v3;
      if (v52 < 5)
        goto LABEL_204;
      if (v52 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F8D90);
      }
      v53 = (void *)WTF::fastMalloc((WTF *)(8 * v52));
      v3[2] = v52;
      *(_QWORD *)v3 = v53;
      goto LABEL_153;
    case '5':
      if (a3)
      {
        if ((*((_DWORD *)a3 + 28) & 0x8000000) != 0)
          return result;
        v4 = &WebCore::staticCSSValuePool[5592];
        if ((*((_DWORD *)a3 + 28) & 0x30) != 0)
          v4 = &WebCore::staticCSSValuePool[5596];
      }
      else
      {
        v4 = &WebCore::staticCSSValuePool[5592];
      }
      *v4 += 2;
      v23 = result[3];
      if ((_DWORD)v23 == result[2])
      {
        v73 = result[3];
        v76 = v4;
        v61 = v23 + (v23 >> 2);
        if (v61 >= 0x10)
          v62 = v61 + 1;
        else
          v62 = 16;
        if (v62 <= v23 + 1)
          v26 = v23 + 1;
        else
          v26 = v62;
        v27 = *(int **)result;
        if (v26 < 5)
        {
LABEL_198:
          v63 = result + 4;
          *(_QWORD *)v3 = v3 + 4;
          v3[2] = 4;
        }
        else
        {
          if (v26 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1957F8DA0);
          }
LABEL_183:
          v63 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
          v3[2] = v26;
          *(_QWORD *)v3 = v63;
        }
        result = (int *)memcpy(v63, v27, 8 * v73);
        if (v3 + 4 != v27 && v27)
        {
          if (*(int **)v3 == v27)
          {
            *(_QWORD *)v3 = 0;
            v3[2] = 0;
          }
          result = (int *)WTF::fastFree((WTF *)v27, v64);
        }
        v23 = v3[3];
        v35 = v23 + 1;
        v43 = *(int **)v3;
        v4 = v76;
      }
      else
      {
LABEL_131:
        v35 = v23 + 1;
        v43 = *(int **)result;
      }
LABEL_132:
      *(_QWORD *)&v43[2 * v23] = v4;
LABEL_133:
      v3[3] = v35;
      return result;
    case '6':
      if (!a3)
      {
        v9 = 0;
        LOBYTE(v78) = 1;
        v79 = 0;
        goto LABEL_83;
      }
      if ((*((_DWORD *)a3 + 28) & 0x20000000) != 0)
        return result;
      LOBYTE(v78) = 0;
      v79 = -1;
      v9 = (void *)*((unsigned int *)a3 + 22);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(char **, int **, char *))off_1E33993A8[(_QWORD)v9])(&v82, &v78, (char *)a3 + 80);
        v79 = (int)v9;
LABEL_83:
        v82 = &v81;
        ((void (*)(int **__return_ptr, char **, int **))off_1E3399390[(_QWORD)v9])(&v80, &v82, &v78);
        v29 = v3[3];
        if ((_DWORD)v29 == v3[2])
        {
          v49 = (int **)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v29 + 1, (unint64_t)&v80);
          v29 = v3[3];
          v30 = *(int **)v3;
          v31 = *v49;
          *v49 = 0;
        }
        else
        {
          v30 = *(int **)v3;
          v31 = v80;
          v80 = 0;
        }
        *(_QWORD *)&v30[2 * v29] = v31;
        v3[3] = v29 + 1;
        result = v80;
        v80 = 0;
        if (result)
        {
          if (*result == 2)
            result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v28);
          else
            *result -= 2;
        }
        if (v79 != -1)
          return (int *)((uint64_t (*)(char **, int **))off_1E3399378[v79])(&v82, &v78);
        return result;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_204:
      v53 = v3 + 4;
      *(_QWORD *)v3 = v3 + 4;
      v3[2] = 4;
LABEL_153:
      result = (int *)memcpy(v53, v9, 8 * v74);
      if (v3 + 4 != v9 && v9)
      {
        if (*(void **)v3 == v9)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        result = (int *)WTF::fastFree((WTF *)v9, v54);
      }
      v14 = v3[3];
LABEL_48:
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v14) = v78;
LABEL_128:
      v3[3] = v14 + 1;
      return result;
    case '7':
LABEL_12:
      if (a3)
      {
        if ((*((_DWORD *)a3 + 28) & 0x40000000) != 0)
          return result;
        v6 = (const void **)*((_QWORD *)a3 + 12);
      }
      else
      {
        WebCore::CubicBezierTimingFunction::defaultTimingFunction((WebCore::CubicBezierTimingFunction *)result);
        v6 = v13;
      }
      result = WebCore::valueForAnimationTimingFunction((WebCore *)&v78, v6);
LABEL_47:
      v14 = v3[3];
      if ((_DWORD)v14 != v3[2])
        goto LABEL_48;
      v44 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v14 + 1, (unint64_t)&v78);
      v46 = v3[3];
      v47 = *(int **)v3;
      v48 = *v44;
      *v44 = 0;
      *(_QWORD *)&v47[2 * v46] = v48;
      result = v78;
      v3[3] = v46 + 1;
      v78 = 0;
      if (result)
      {
        if (*result == 2)
          return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v45);
        else
          *result -= 2;
      }
      return result;
    default:
      switch(a2)
      {
        case 279:
          if (a3)
          {
            if (((*((unsigned int *)a3 + 28) | ((unint64_t)*((unsigned __int8 *)a3 + 116) << 32)) & 0x100000000) != 0)
              return result;
            v5 = 1015;
            if ((*((_DWORD *)a3 + 28) & 0x100) == 0)
              v5 = 90;
          }
          else
          {
            v5 = 90;
          }
          v37 = &WebCore::staticCSSValuePool[4 * v5 + 3088];
          *v37 += 2;
          v34 = result[3];
          if ((_DWORD)v34 != result[2])
          {
            v35 = v34 + 1;
            v36 = *(int **)result;
            goto LABEL_107;
          }
          v73 = result[3];
          v76 = v37;
          v55 = v34 + (v34 >> 2);
          if (v55 >= 0x10)
            v56 = v55 + 1;
          else
            v56 = 16;
          if (v56 <= v34 + 1)
            v26 = v34 + 1;
          else
            v26 = v56;
          v27 = *(int **)result;
          if (v26 < 5)
            goto LABEL_198;
          if (v26 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1957F8AECLL);
          }
          goto LABEL_183;
        case 280:
          goto LABEL_18;
        case 281:
          goto LABEL_15;
        case 282:
          if (a3)
          {
            if ((*((_DWORD *)a3 + 28) & 0x10000000) != 0)
              return result;
            result = (int *)WebCore::createTransitionPropertyValue((WTF::StringImpl *)&v78, a3);
            goto LABEL_47;
          }
          dword_1ECE8BEF8 += 2;
          v34 = result[3];
          if ((_DWORD)v34 == result[2])
          {
            v65 = v34 + (v34 >> 2);
            if (v65 >= 0x10)
              v66 = v65 + 1;
            else
              v66 = 16;
            v77 = result[3];
            if (v66 <= v34 + 1)
              v67 = v34 + 1;
            else
              v67 = v66;
            v68 = *(int **)result;
            if (v67 < 5)
            {
              v69 = result + 4;
              *(_QWORD *)v3 = v3 + 4;
              v3[2] = 4;
            }
            else
            {
              if (v67 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1957F8DA8);
              }
              v69 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
              v3[2] = v67;
              *(_QWORD *)v3 = v69;
            }
            result = (int *)memcpy(v69, v68, 8 * v77);
            if (v3 + 4 != v68 && v68)
            {
              if (*(int **)v3 == v68)
              {
                *(_QWORD *)v3 = 0;
                v3[2] = 0;
              }
              result = (int *)WTF::fastFree((WTF *)v68, v70);
            }
            v23 = v3[3];
            v35 = v23 + 1;
            v43 = *(int **)v3;
            v4 = &WebCore::staticCSSValuePool[3284];
            goto LABEL_132;
          }
          v35 = v34 + 1;
          v36 = *(int **)result;
          v37 = &WebCore::staticCSSValuePool[3284];
LABEL_107:
          *(_QWORD *)&v36[2 * v34] = v37;
          break;
        case 283:
          goto LABEL_12;
        default:
          return result;
      }
      goto LABEL_133;
  }
}

WTF::StringImpl *WebCore::createTransitionPropertyValue(WTF::StringImpl *this, const WebCore::Animation *a2)
{
  WTF::StringImpl *v2;
  int v3;
  uint64_t v4;
  int *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;
  int v10;
  WebCore *v11;
  const WebCore::LengthSize *v12;
  const WebCore::RenderStyle *v13;
  _BYTE v14[8];
  int v15;
  WTF::StringImpl *v16;
  unsigned __int8 v17;
  _BYTE v18[8];
  int v19;
  char v20;
  char *v21;

  v2 = this;
  v3 = *((unsigned __int8 *)a2 + 8);
  v17 = *((_BYTE *)a2 + 8);
  v18[0] = 0;
  v19 = -1;
  v4 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v4 != -1)
  {
    this = (WTF::StringImpl *)((uint64_t (*)(char **, _BYTE *, char *))off_1E33993C0[v4])(&v21, v18, (char *)a2 + 16);
    v19 = v4;
    v3 = v17;
  }
  if ((v3 - 2) < 2)
  {
    v14[0] = 0;
    v15 = -1;
    if ((_DWORD)v4 == -1)
    {
      v11 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::borderRadiusCornerValues(v11, v12, v13);
    }
    ((void (*)(char **, _BYTE *, _BYTE *))off_1E33993C0[v4])(&v21, v14, v18);
    v15 = v4;
    v21 = &v20;
    ((void (*)(WTF::StringImpl **__return_ptr, char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26animatablePropertyAsStringENS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEE3__0JZNS8_26animatablePropertyAsStringESC_E3__1EEEEEJRNS0_6__implIJSA_SB_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v16, &v21, v14);
    if (v15 != -1)
      ((void (*)(char **, _BYTE *))off_1E3399338[v15])(&v21, v14);
    v15 = -1;
    v6 = v16;
    if (v16)
      *(_DWORD *)v16 += 2;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 2;
    v9 = *(_BYTE *)(v7 + 6);
    *(_WORD *)(v7 + 4) = 63;
    *(_BYTE *)(v7 + 6) = v9 & 0xFC;
    *(_QWORD *)(v7 + 8) = v6;
    if (v6)
    {
      v10 = *(_DWORD *)v6;
      *(_DWORD *)v6 += 2;
      *(_QWORD *)v2 = v7;
      if (v10)
        *(_DWORD *)v6 = v10;
      else
        WTF::StringImpl::destroy(v6, v8);
    }
    else
    {
      *(_QWORD *)v2 = v7;
    }
    this = v16;
    v16 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
      else
        *(_DWORD *)this -= 2;
    }
    LODWORD(v4) = v19;
  }
  else
  {
    if (v3)
    {
      v5 = &WebCore::staticCSSValuePool[3112];
      dword_1ECE8BC48 += 2;
    }
    else
    {
      v5 = &WebCore::staticCSSValuePool[3284];
      dword_1ECE8BEF8 += 2;
    }
    *(_QWORD *)v2 = v5;
  }
  if ((_DWORD)v4 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char **, _BYTE *))off_1E3399338[v4])(&v21, v18);
  return this;
}

uint64_t WebCore::borderRadiusCornerValues(WebCore *this, const WebCore::LengthSize *a2, const WebCore::RenderStyle *a3)
{
  int v6;
  float v7;
  double v8;
  float v10;
  float v11;
  uint64_t result;
  char v14;
  __int16 v15;
  int *v16;
  int v17;
  unsigned int *v18;
  int v19;
  float v20;
  float v21;
  int *v22;
  float v23;
  int v24;
  double v25;
  float v27;
  char v29;
  __int16 v30;
  int *v31;
  int v32;
  int *v33;
  unsigned int v34;
  char v35;
  char v36;
  char v37;
  int *v38;
  unsigned int v39;
  unsigned __int8 v40;
  char v41;
  char v42;
  int *v43;

  v39 = 0;
  v42 = 0;
  v40 = *((_BYTE *)a2 + 4);
  v6 = v40;
  v41 = *((_BYTE *)a2 + 5);
  if (v40 - 2 >= 9)
  {
    if (v40 == 11)
    {
      v39 = *(_DWORD *)a2;
      WebCore::Length::ref((int *)&v39);
      v6 = v40;
    }
  }
  else
  {
    v42 = *((_BYTE *)a2 + 6);
    v39 = *(_DWORD *)a2;
  }
  if (v6 == 3)
  {
    v7 = *(float *)&v39;
    if (!v42)
      v7 = (float)(int)v39;
    v8 = v7;
    if ((int)v7 <= 0xFF && *(_QWORD *)&v8 == COERCE__INT64((double)(int)v7))
    {
      result = (uint64_t)&WebCore::staticCSSValuePool[4 * (int)v7 + 1040];
      *(_DWORD *)result += 2;
LABEL_24:
      v43 = (int *)result;
      goto LABEL_25;
    }
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v14 = *(_BYTE *)(result + 6);
    v15 = 3;
LABEL_22:
    *(_WORD *)(result + 4) = v15;
    *(_BYTE *)(result + 6) = v14 & 0xFC;
    *(double *)(result + 8) = v8;
    goto LABEL_24;
  }
  if (v6 == 4)
  {
    v10 = *(float *)&v39;
    if (!v42)
      v10 = (float)(int)v39;
    v11 = v10 / *(float *)(*((_QWORD *)a3 + 3) + 184);
    v8 = v11;
    if ((int)v11 <= 0xFF && *(_QWORD *)&v8 == COERCE__INT64((double)(int)v11))
    {
      v16 = &WebCore::staticCSSValuePool[4 * (int)v11];
      v17 = v16[16];
      result = (uint64_t)(v16 + 16);
      *(_DWORD *)result = v17 + 2;
      goto LABEL_24;
    }
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v14 = *(_BYTE *)(result + 6);
    v15 = 6;
    goto LABEL_22;
  }
  result = WebCore::CSSPrimitiveValue::create(&v43, (WebCore::CSSPrimitiveValue *)&v39, a3);
LABEL_25:
  if (v40 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39);
  }
  v18 = (unsigned int *)((char *)a2 + 8);
  v19 = *((unsigned __int8 *)a2 + 4);
  if (v19 != *((unsigned __int8 *)a2 + 12))
  {
    v19 = *((unsigned __int8 *)a2 + 12);
    goto LABEL_37;
  }
  if ((*((_BYTE *)a2 + 5) != 0) != (*((_BYTE *)a2 + 13) != 0))
    goto LABEL_37;
  if (v19 == 13)
    goto LABEL_35;
  if (v19 == 11)
  {
    result = WebCore::Length::isCalculatedEqual(a2, (const WebCore::LengthSize *)((char *)a2 + 8));
    v18 = (unsigned int *)((char *)a2 + 8);
    if ((result & 1) == 0)
    {
      v19 = *((unsigned __int8 *)a2 + 12);
      goto LABEL_37;
    }
LABEL_35:
    v22 = v43;
    *v43 += 2;
    v38 = v22;
    goto LABEL_63;
  }
  v20 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v20 = (float)*(int *)a2;
  v21 = *((float *)a2 + 2);
  if (!*((_BYTE *)a2 + 14))
    v21 = (float)SLODWORD(v21);
  if (v20 == v21)
    goto LABEL_35;
LABEL_37:
  v34 = 0;
  v37 = 0;
  v35 = v19;
  v36 = *((_BYTE *)a2 + 13);
  if ((v19 - 2) >= 9)
  {
    if (v19 == 11)
    {
      v34 = *v18;
      WebCore::Length::ref((int *)&v34);
      goto LABEL_68;
    }
    v24 = 1;
    v23 = 0.0;
  }
  else
  {
    v37 = *((_BYTE *)a2 + 14);
    if (v37)
    {
      v24 = 0;
      v23 = *(float *)v18;
      v34 = *v18;
    }
    else
    {
      v34 = *v18;
      v23 = *(float *)&v34;
      v24 = 1;
    }
  }
  if (v19 == 3)
  {
    if (v24)
      v23 = (float)SLODWORD(v23);
    v25 = v23;
    if ((int)v23 <= 0xFF && *(_QWORD *)&v25 == COERCE__INT64((double)(int)v23))
    {
      result = (uint64_t)&WebCore::staticCSSValuePool[4 * (int)v23 + 1040];
      *(_DWORD *)result += 2;
LABEL_62:
      v38 = (int *)result;
      goto LABEL_63;
    }
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v29 = *(_BYTE *)(result + 6);
    v30 = 3;
LABEL_60:
    *(_WORD *)(result + 4) = v30;
    *(_BYTE *)(result + 6) = v29 & 0xFC;
    *(double *)(result + 8) = v25;
    goto LABEL_62;
  }
  if (v19 == 4)
  {
    if (v24)
      v23 = (float)SLODWORD(v23);
    v27 = v23 / *(float *)(*((_QWORD *)a3 + 3) + 184);
    v25 = v27;
    if ((int)v27 <= 0xFF && *(_QWORD *)&v25 == COERCE__INT64((double)(int)v27))
    {
      v31 = &WebCore::staticCSSValuePool[4 * (int)v27];
      v32 = v31[16];
      result = (uint64_t)(v31 + 16);
      *(_DWORD *)result = v32 + 2;
      goto LABEL_62;
    }
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v29 = *(_BYTE *)(result + 6);
    v30 = 6;
    goto LABEL_60;
  }
LABEL_68:
  result = WebCore::CSSPrimitiveValue::create(&v38, (WebCore::CSSPrimitiveValue *)&v34, a3);
  if (v35 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34);
  }
LABEL_63:
  v33 = v38;
  *(_QWORD *)this = v43;
  *((_QWORD *)this + 1) = v33;
  return result;
}

uint64_t WebCore::valueForSingleViewTimelineInset(uint64_t result, WebCore::CSSPrimitiveValue *this, WebCore::Length *a3)
{
  _QWORD *v5;
  WebCore::CSSPrimitiveValue *v6;
  int v7;
  float v8;
  float v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int *v14;

  v5 = (_QWORD *)result;
  if (!*((_BYTE *)this + 20))
    goto LABEL_12;
  if (!*((_BYTE *)this + 8))
    goto LABEL_19;
  v6 = (WebCore::CSSPrimitiveValue *)((char *)this + 12);
  v7 = *((unsigned __int8 *)this + 4);
  if (v7 != *((unsigned __int8 *)this + 16) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)this + 17) != 0))
    goto LABEL_16;
  if (v7 == 13)
    goto LABEL_12;
  if (v7 == 11)
  {
    result = WebCore::Length::isCalculatedEqual(this, (WebCore::CSSPrimitiveValue *)((char *)this + 12));
    if ((result & 1) != 0)
      goto LABEL_12;
    if (*((_BYTE *)this + 8))
      goto LABEL_16;
LABEL_19:
    __break(1u);
    return result;
  }
  v8 = *(float *)this;
  if (!*((_BYTE *)this + 6))
    v8 = (float)*(int *)this;
  v9 = *((float *)this + 3);
  if (!*((_BYTE *)this + 18))
    v9 = (float)SLODWORD(v9);
  if (v8 == v9)
  {
LABEL_12:
    if (*((_BYTE *)this + 8))
    {
      result = WebCore::CSSPrimitiveValue::create(&v14, this, a3);
      *v5 = v14;
      return result;
    }
    goto LABEL_19;
  }
LABEL_16:
  result = WebCore::CSSPrimitiveValue::create(&v14, this, a3);
  if (!*((_BYTE *)this + 20))
    goto LABEL_19;
  v10 = v14;
  WebCore::CSSPrimitiveValue::create(&v13, v6, a3);
  v11 = v13;
  result = WTF::fastCompactMalloc((WTF *)0x18);
  *(_DWORD *)result = 2;
  v12 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
  *(_BYTE *)(result + 7) = 0;
  *(_QWORD *)(result + 8) = v10;
  *(_QWORD *)(result + 16) = v11;
  *(_WORD *)(result + 4) = -18432;
  *(_BYTE *)(result + 6) = BYTE2(v12);
  *v5 = result;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6RefPtrIN7WebCore22CSSCustomPropertyValueENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSB_5Style22CustomPropertyRegistry22ViewportUnitDependencyEEENSJ_22ParseInitialValueErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17DOMMatrixReadOnly14AbstractMatrixENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0xAAAAAAB)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 24 * v4;
    v9 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v11 = 24 * v7;
      v12 = v6;
      do
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(v9 + 16) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v9 = v13;
        v9 += 24;
        v12 = (WTF *)((char *)v12 + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v13 = 24 * v9;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v11 = v15;
        v11 += 24;
        v14 = (WTF *)((char *)v14 + 24);
        v13 -= 24;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_12:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    v14 = *a2;
    *a2 = 0;
    v13[v12] = v14;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return 1;
  }
  v9 = *(void **)result;
  if (v8 < 5)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 4;
    goto LABEL_11;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_11:
    memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

char *WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[16 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
      if (!(v10 >> 28))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(16 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 16 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1957F9A94);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 28)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(16 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 16 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

unsigned int *WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = (unsigned int *)WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, (WTF::StringImpl *)a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(16 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 16 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMMatrix::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &&)::$_0,WebCore::DOMMatrix::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>@<X0>(WebCore::DOMMatrixReadOnly *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  _OWORD v16[8];
  char v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(**(_QWORD **)result + 274))
  {
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  WebCore::DOMMatrixReadOnly::parseStringIntoAbstractMatrix((uint64_t)this, (uint64_t)v16);
  v4 = v18;
  if (v18)
  {
    if (v18 != 1)
    {
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMMatrix::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &&)::$_0,WebCore::DOMMatrix::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(v14);
    }
    v5 = *((_QWORD *)&v16[0] + 1);
    *((_QWORD *)&v16[0] + 1) = 0;
    *(_BYTE *)a3 = v16[0];
    *(_QWORD *)(a3 + 8) = v5;
  }
  else
  {
    v6 = bmalloc::api::isoAllocate();
    v7 = v17;
    *(_QWORD *)v6 = 0;
    *(_DWORD *)(v6 + 8) = 1;
    v8 = v16[3];
    v9 = v16[2];
    v10 = v16[1];
    *(_OWORD *)(v6 + 16) = v16[0];
    *(_OWORD *)(v6 + 32) = v10;
    *(_OWORD *)(v6 + 48) = v9;
    *(_OWORD *)(v6 + 64) = v8;
    v11 = v16[7];
    v12 = v16[6];
    v13 = v16[5];
    *(_OWORD *)(v6 + 80) = v16[4];
    *(_OWORD *)(v6 + 96) = v13;
    *(_OWORD *)(v6 + 112) = v12;
    *(_OWORD *)(v6 + 128) = v11;
    *(_BYTE *)(v6 + 144) = v7;
    *(_QWORD *)a3 = v6;
  }
  *(_DWORD *)(a3 + 16) = v4;
  return ((uint64_t (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17DOMMatrixReadOnly14AbstractMatrixENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4])(&v15, v16);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMMatrix::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &&)::$_0,WebCore::DOMMatrix::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v4 = *((_DWORD *)a1 + 3);
  if (v4 != 16)
  {
    if (v4 != 6)
    {
      *(_BYTE *)a2 = 33;
      *(_QWORD *)(a2 + 8) = 0;
      v7 = 1;
      goto LABEL_29;
    }
    v5 = bmalloc::api::isoAllocate();
    v6 = *((_DWORD *)a1 + 3);
    if (v6)
    {
      if (v6 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F9E6CLL);
      }
      if (v6 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F9E74);
      }
      if (v6 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F9E7CLL);
      }
      if (v6 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F9E84);
      }
      if (v6 == 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1957F9E8CLL);
      }
      v7 = 0;
      v8 = *a1;
      v9 = **a1;
      v10 = (*a1)[1];
      v11 = (*a1)[2];
      v12 = (*a1)[3];
      *(_QWORD *)v5 = 0;
      v13 = *((_OWORD *)v8 + 2);
      *(_QWORD *)(v5 + 16) = v9;
      *(_QWORD *)(v5 + 24) = v10;
      *(_DWORD *)(v5 + 8) = 1;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = v11;
      *(_QWORD *)(v5 + 56) = v12;
      *(_QWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      *(_OWORD *)(v5 + 80) = xmmword_1969EDD48;
      *(_OWORD *)(v5 + 96) = unk_1969EDD58;
      *(_OWORD *)(v5 + 112) = v13;
      *(_OWORD *)(v5 + 128) = xmmword_1968A14C0;
      *(_BYTE *)(v5 + 144) = 1;
      goto LABEL_27;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x1957F9E64);
  }
  v5 = bmalloc::api::isoAllocate();
  v14 = *((_DWORD *)a1 + 3);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9E94);
  }
  if (v14 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9E9CLL);
  }
  if (v14 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EA4);
  }
  if (v14 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EACLL);
  }
  if (v14 <= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EB4);
  }
  if (v14 == 5)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EBCLL);
  }
  if (v14 <= 6)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EC4);
  }
  if (v14 == 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9ECCLL);
  }
  if (v14 <= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9ED4);
  }
  if (v14 == 9)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EDCLL);
  }
  if (v14 <= 0xA)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EE4);
  }
  if (v14 == 11)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EECLL);
  }
  if (v14 <= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EF4);
  }
  if (v14 == 13)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9EFCLL);
  }
  if (v14 <= 0xE)
  {
    __break(0xC471u);
    JUMPOUT(0x1957F9F04);
  }
  if (v14 == 15)
    goto LABEL_51;
  v7 = 0;
  *(_DWORD *)(v5 + 8) = 1;
  v15 = *a1;
  v16 = **a1;
  v17 = (*a1)[1];
  v18 = (*a1)[2];
  v19 = (*a1)[3];
  v20 = (*a1)[4];
  v21 = (*a1)[5];
  v22 = (*a1)[6];
  v23 = (*a1)[7];
  v24 = (*a1)[8];
  v25 = (*a1)[9];
  v26 = (*a1)[10];
  v27 = (*a1)[11];
  v28 = (*a1)[12];
  v29 = (*a1)[13];
  *(_QWORD *)v5 = 0;
  v30 = *((_OWORD *)v15 + 7);
  *(_QWORD *)(v5 + 16) = v16;
  *(_QWORD *)(v5 + 24) = v17;
  *(_QWORD *)(v5 + 32) = v18;
  *(_QWORD *)(v5 + 40) = v19;
  *(_QWORD *)(v5 + 48) = v20;
  *(_QWORD *)(v5 + 56) = v21;
  *(_QWORD *)(v5 + 64) = v22;
  *(_QWORD *)(v5 + 72) = v23;
  *(_QWORD *)(v5 + 80) = v24;
  *(_QWORD *)(v5 + 88) = v25;
  *(_QWORD *)(v5 + 96) = v26;
  *(_QWORD *)(v5 + 104) = v27;
  *(_QWORD *)(v5 + 112) = v28;
  *(_QWORD *)(v5 + 120) = v29;
  *(_OWORD *)(v5 + 128) = v30;
  *(_BYTE *)(v5 + 144) = 0;
LABEL_27:
  *(_QWORD *)a2 = v5;
LABEL_29:
  *(_DWORD *)(a2 + 16) = v7;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMMatrixReadOnly::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &&)::$_0,WebCore::DOMMatrixReadOnly::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>@<X0>(WebCore::DOMMatrixReadOnly *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  _OWORD v16[8];
  char v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(**(_QWORD **)result + 274))
  {
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  WebCore::DOMMatrixReadOnly::parseStringIntoAbstractMatrix((uint64_t)this, (uint64_t)v16);
  v4 = v18;
  if (v18)
  {
    if (v18 != 1)
    {
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMMatrixReadOnly::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &&)::$_0,WebCore::DOMMatrixReadOnly::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(v14);
    }
    v5 = *((_QWORD *)&v16[0] + 1);
    *((_QWORD *)&v16[0] + 1) = 0;
    *(_BYTE *)a3 = v16[0];
    *(_QWORD *)(a3 + 8) = v5;
  }
  else
  {
    v6 = bmalloc::api::isoAllocate();
    v7 = v17;
    *(_QWORD *)v6 = 0;
    *(_DWORD *)(v6 + 8) = 1;
    v8 = v16[3];
    v9 = v16[2];
    v10 = v16[1];
    *(_OWORD *)(v6 + 16) = v16[0];
    *(_OWORD *)(v6 + 32) = v10;
    *(_OWORD *)(v6 + 48) = v9;
    *(_OWORD *)(v6 + 64) = v8;
    v11 = v16[7];
    v12 = v16[6];
    v13 = v16[5];
    *(_OWORD *)(v6 + 80) = v16[4];
    *(_OWORD *)(v6 + 96) = v13;
    *(_OWORD *)(v6 + 112) = v12;
    *(_OWORD *)(v6 + 128) = v11;
    *(_BYTE *)(v6 + 144) = v7;
    *(_QWORD *)a3 = v6;
  }
  *(_DWORD *)(a3 + 16) = v4;
  return ((uint64_t (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore17DOMMatrixReadOnly14AbstractMatrixENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4])(&v15, v16);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DOMMatrixReadOnly::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &&)::$_0,WebCore::DOMMatrixReadOnly::create(WebCore::ScriptExecutionContext &,std::optional<std::variant<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v4 = *((_DWORD *)a1 + 3);
  if (v4 != 16)
  {
    if (v4 != 6)
    {
      *(_BYTE *)a2 = 33;
      *(_QWORD *)(a2 + 8) = 0;
      v7 = 1;
      goto LABEL_29;
    }
    v5 = bmalloc::api::isoAllocate();
    v6 = *((_DWORD *)a1 + 3);
    if (v6)
    {
      if (v6 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1957FA204);
      }
      if (v6 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1957FA20CLL);
      }
      if (v6 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1957FA214);
      }
      if (v6 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1957FA21CLL);
      }
      if (v6 == 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1957FA224);
      }
      v7 = 0;
      v8 = *a1;
      v9 = **a1;
      v10 = (*a1)[1];
      v11 = (*a1)[2];
      v12 = (*a1)[3];
      *(_QWORD *)v5 = 0;
      v13 = *((_OWORD *)v8 + 2);
      *(_QWORD *)(v5 + 16) = v9;
      *(_QWORD *)(v5 + 24) = v10;
      *(_DWORD *)(v5 + 8) = 1;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = v11;
      *(_QWORD *)(v5 + 56) = v12;
      *(_QWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      *(_OWORD *)(v5 + 80) = xmmword_1969EDD48;
      *(_OWORD *)(v5 + 96) = unk_1969EDD58;
      *(_OWORD *)(v5 + 112) = v13;
      *(_OWORD *)(v5 + 128) = xmmword_1968A14C0;
      *(_BYTE *)(v5 + 144) = 1;
      goto LABEL_27;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x1957FA1FCLL);
  }
  v5 = bmalloc::api::isoAllocate();
  v14 = *((_DWORD *)a1 + 3);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA22CLL);
  }
  if (v14 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA234);
  }
  if (v14 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA23CLL);
  }
  if (v14 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA244);
  }
  if (v14 <= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA24CLL);
  }
  if (v14 == 5)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA254);
  }
  if (v14 <= 6)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA25CLL);
  }
  if (v14 == 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA264);
  }
  if (v14 <= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA26CLL);
  }
  if (v14 == 9)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA274);
  }
  if (v14 <= 0xA)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA27CLL);
  }
  if (v14 == 11)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA284);
  }
  if (v14 <= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA28CLL);
  }
  if (v14 == 13)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA294);
  }
  if (v14 <= 0xE)
  {
    __break(0xC471u);
    JUMPOUT(0x1957FA29CLL);
  }
  if (v14 == 15)
    goto LABEL_51;
  v7 = 0;
  *(_DWORD *)(v5 + 8) = 1;
  v15 = *a1;
  v16 = **a1;
  v17 = (*a1)[1];
  v18 = (*a1)[2];
  v19 = (*a1)[3];
  v20 = (*a1)[4];
  v21 = (*a1)[5];
  v22 = (*a1)[6];
  v23 = (*a1)[7];
  v24 = (*a1)[8];
  v25 = (*a1)[9];
  v26 = (*a1)[10];
  v27 = (*a1)[11];
  v28 = (*a1)[12];
  v29 = (*a1)[13];
  *(_QWORD *)v5 = 0;
  v30 = *((_OWORD *)v15 + 7);
  *(_QWORD *)(v5 + 16) = v16;
  *(_QWORD *)(v5 + 24) = v17;
  *(_QWORD *)(v5 + 32) = v18;
  *(_QWORD *)(v5 + 40) = v19;
  *(_QWORD *)(v5 + 48) = v20;
  *(_QWORD *)(v5 + 56) = v21;
  *(_QWORD *)(v5 + 64) = v22;
  *(_QWORD *)(v5 + 72) = v23;
  *(_QWORD *)(v5 + 80) = v24;
  *(_QWORD *)(v5 + 88) = v25;
  *(_QWORD *)(v5 + 96) = v26;
  *(_QWORD *)(v5 + 104) = v27;
  *(_QWORD *)(v5 + 112) = v28;
  *(_QWORD *)(v5 + 120) = v29;
  *(_OWORD *)(v5 + 128) = v30;
  *(_BYTE *)(v5 + 144) = 0;
LABEL_27:
  *(_QWORD *)a2 = v5;
LABEL_29:
  *(_DWORD *)(a2 + 16) = v7;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int8x16_t *a3, int a4, __int128 *a5, int8x16_t *a6, int a7, __int128 *a8, int8x16_t *a9, int a10, __int128 *a11, int8x16_t *a12, int a13, __int128 *a14, int8x16_t *a15, int a16, __int128 *a17, char a18)
{
  uint64_t v18;
  char *v19;
  int8x16_t *v20;
  char *v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  char *v42;
  int8x16_t *v43;
  __int16 v44;
  char *v46;
  __int128 v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[8];
  __int128 v95[8];
  __int128 v96[8];
  __int128 v97[8];
  _OWORD v98[8];
  uint64_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;

  v99 = *MEMORY[0x1E0C80C00];
  v18 = a2[7].u32[3];
  v19 = &a1[2 * v18];
  v20 = a2;
  v21 = a1;
  if (v18 >= 0x40)
  {
    v21 = &a1[2 * (v18 & 0xFFFFFFC0)];
    v22 = 0uLL;
    v20 = a2;
    v23 = a1;
    do
    {
      v100.val[0] = *v20;
      v24 = v20[1];
      v103.val[0] = v20[2];
      v25 = v20[3];
      v20 += 4;
      v26 = v25;
      v103.val[1] = 0uLL;
      v106.val[0] = v24;
      v100.val[1] = 0uLL;
      v27 = v23;
      vst2q_s8(v27, v100);
      v27 += 32;
      v106.val[1] = 0uLL;
      vst2q_s8(v27, v106);
      v28 = v23 + 64;
      vst2q_s8(v28, v103);
      v29 = v23 + 96;
      vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
      v23 += 128;
    }
    while (v23 != v21);
  }
  while (v21 != v19)
  {
    v30 = v20->u8[0];
    v20 = (int8x16_t *)((char *)v20 + 1);
    *(_WORD *)v21 = v30;
    v21 += 2;
  }
  v31 = &a1[2 * a2[7].u32[3]];
  v90 = a5[4];
  v91 = a5[5];
  v92 = a5[6];
  v93 = a5[7];
  v86 = *a5;
  v87 = a5[1];
  v88 = a5[2];
  v89 = a5[3];
  v80 = a8[2];
  v81 = a8[3];
  v78 = *a8;
  v79 = a8[1];
  v84 = a8[6];
  v85 = a8[7];
  v82 = a8[4];
  v83 = a8[5];
  v72 = a11[2];
  v73 = a11[3];
  v70 = *a11;
  v71 = a11[1];
  v76 = a11[6];
  v77 = a11[7];
  v74 = a11[4];
  v75 = a11[5];
  v64 = a14[2];
  v65 = a14[3];
  v62 = *a14;
  v63 = a14[1];
  v68 = a14[6];
  v69 = a14[7];
  v66 = a14[4];
  v67 = a14[5];
  v56 = a17[2];
  v57 = a17[3];
  v54 = *a17;
  v55 = a17[1];
  v60 = a17[6];
  v61 = a17[7];
  v32 = &v31[2 * a4];
  v58 = a17[4];
  v59 = a17[5];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v33 = &v31[2 * (a4 & 0xFFFFFFC0)];
    v34 = 0uLL;
    do
    {
      v101.val[0] = *a3;
      v35 = a3[1];
      v104.val[0] = a3[2];
      v36 = a3[3];
      a3 += 4;
      v37 = v36;
      v104.val[1] = 0uLL;
      v107.val[0] = v35;
      v101.val[1] = 0uLL;
      v38 = v31;
      vst2q_s8(v38, v101);
      v38 += 32;
      v107.val[1] = 0uLL;
      vst2q_s8(v38, v107);
      v39 = v31 + 64;
      vst2q_s8(v39, v104);
      v40 = v31 + 96;
      vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
      v31 += 128;
    }
    while (v31 != v33);
    v31 = v33;
  }
  while (v31 != v32)
  {
    v41 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v31 = v41;
    v31 += 2;
  }
  v94[4] = v90;
  v94[5] = v91;
  v94[6] = v92;
  v94[7] = v93;
  v94[0] = v86;
  v94[1] = v87;
  v94[2] = v88;
  v94[3] = v89;
  v42 = &v32[2 * HIDWORD(v93)];
  if (HIDWORD(v93) >= 0x40)
  {
    v46 = &v32[2 * (HIDWORD(v93) & 0xFFFFFFC0)];
    v43 = (int8x16_t *)v94;
    v47 = 0uLL;
    do
    {
      v102.val[0] = *v43;
      v48 = v43[1];
      v105.val[0] = v43[2];
      v49 = v43[3];
      v43 += 4;
      v50 = v49;
      v105.val[1] = 0uLL;
      v108.val[0] = v48;
      v102.val[1] = 0uLL;
      v51 = v32;
      vst2q_s8(v51, v102);
      v51 += 32;
      v108.val[1] = 0uLL;
      vst2q_s8(v51, v108);
      v52 = v32 + 64;
      vst2q_s8(v52, v105);
      v53 = v32 + 96;
      vst2q_s8(v53, *(int8x16x2_t *)(&v47 - 1));
      v32 += 128;
    }
    while (v32 != v46);
    v32 = v46;
  }
  else
  {
    v43 = (int8x16_t *)v94;
  }
  while (v32 != v42)
  {
    v44 = v43->u8[0];
    v43 = (int8x16_t *)((char *)v43 + 1);
    *(_WORD *)v32 = v44;
    v32 += 2;
  }
  v98[4] = v82;
  v98[5] = v83;
  v98[6] = v84;
  v98[7] = v85;
  v98[0] = v78;
  v98[1] = v79;
  v98[2] = v80;
  v98[3] = v81;
  v97[3] = v73;
  v97[2] = v72;
  v97[1] = v71;
  v97[0] = v70;
  v97[7] = v77;
  v97[6] = v76;
  v97[5] = v75;
  v97[4] = v74;
  v96[3] = v65;
  v96[2] = v64;
  v96[1] = v63;
  v96[0] = v62;
  v96[7] = v69;
  v96[6] = v68;
  v96[5] = v67;
  v96[4] = v66;
  v95[3] = v57;
  v95[2] = v56;
  v95[1] = v55;
  v95[0] = v54;
  v95[7] = v61;
  v95[6] = v60;
  v95[5] = v59;
  v95[4] = v58;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v42, a6, a7, v98, a9, a10, v97, (uint64_t)a8, a12, a13, v96, a15, a16, v95, a18);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int a3, _OWORD *a4, int8x16_t *a5, int a6, __int128 *a7, uint64_t a8, int8x16_t *a9, int a10, __int128 *a11, int8x16_t *a12, int a13, __int128 *a14, char a15)
{
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  int8x16_t *v30;
  char *v31;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  char *v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  char *v50;
  int8x16_t *v51;
  __int16 v52;
  char *v54;
  __int128 v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[7];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _OWORD v128[8];
  __int128 v129[8];
  _OWORD v130[8];
  uint64_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;
  int8x16x2_t v138;
  int8x16x2_t v139;
  int8x16x2_t v140;
  int8x16x2_t v141;
  int8x16x2_t v142;
  int8x16x2_t v143;

  v131 = *MEMORY[0x1E0C80C00];
  v15 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v16 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v17 = 0uLL;
    do
    {
      v132.val[0] = *a2;
      v18 = a2[1];
      v136.val[0] = a2[2];
      v19 = a2[3];
      a2 += 4;
      v20 = v19;
      v136.val[1] = 0uLL;
      v140.val[0] = v18;
      v132.val[1] = 0uLL;
      v21 = a1;
      vst2q_s8(v21, v132);
      v21 += 32;
      v140.val[1] = 0uLL;
      vst2q_s8(v21, v140);
      v22 = a1 + 64;
      vst2q_s8(v22, v136);
      v23 = a1 + 96;
      vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
      a1 += 128;
    }
    while (a1 != v16);
    a1 = v16;
  }
  while (a1 != v15)
  {
    v24 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v24;
    a1 += 2;
  }
  v25 = a4[5];
  v86[4] = a4[4];
  v86[5] = v25;
  v26 = a4[7];
  v86[6] = a4[6];
  v87 = v26;
  v27 = a4[1];
  v86[0] = *a4;
  v86[1] = v27;
  v28 = a4[3];
  v86[2] = a4[2];
  v86[3] = v28;
  v80 = a7[2];
  v81 = a7[3];
  v78 = *a7;
  v79 = a7[1];
  v84 = a7[6];
  v85 = a7[7];
  v82 = a7[4];
  v83 = a7[5];
  v72 = a11[2];
  v73 = a11[3];
  v70 = *a11;
  v71 = a11[1];
  v76 = a11[6];
  v77 = a11[7];
  v74 = a11[4];
  v75 = a11[5];
  v64 = a14[2];
  v65 = a14[3];
  v62 = *a14;
  v63 = a14[1];
  v68 = a14[6];
  v69 = a14[7];
  v29 = &v15[2 * HIDWORD(v87)];
  v66 = a14[4];
  v67 = a14[5];
  if (HIDWORD(v87) >= 0x40)
  {
    v31 = &v15[2 * (HIDWORD(v87) & 0xFFFFFFC0)];
    v30 = (int8x16_t *)v86;
    v32 = 0uLL;
    do
    {
      v133.val[0] = *v30;
      v33 = v30[1];
      v137.val[0] = v30[2];
      v34 = v30[3];
      v30 += 4;
      v35 = v34;
      v137.val[1] = 0uLL;
      v141.val[0] = v33;
      v133.val[1] = 0uLL;
      v36 = v15;
      vst2q_s8(v36, v133);
      v36 += 32;
      v141.val[1] = 0uLL;
      vst2q_s8(v36, v141);
      v37 = v15 + 64;
      vst2q_s8(v37, v137);
      v38 = v15 + 96;
      vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
      v15 += 128;
    }
    while (v15 != v31);
    v15 = v31;
  }
  else
  {
    v30 = (int8x16_t *)v86;
  }
  while (v15 != v29)
  {
    v39 = v30->u8[0];
    v30 = (int8x16_t *)((char *)v30 + 1);
    *(_WORD *)v15 = v39;
    v15 += 2;
  }
  v108 = v82;
  v109 = v83;
  v110 = v84;
  v111 = v85;
  v104 = v78;
  v105 = v79;
  v106 = v80;
  v107 = v81;
  v98 = v72;
  v99 = v73;
  v96 = v70;
  v97 = v71;
  v102 = v76;
  v103 = v77;
  v100 = v74;
  v101 = v75;
  v90 = v64;
  v91 = v65;
  v88 = v62;
  v89 = v63;
  v94 = v68;
  v95 = v69;
  v40 = &v29[2 * a6];
  v92 = v66;
  v93 = v67;
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v41 = &v29[2 * (a6 & 0xFFFFFFC0)];
    v42 = 0uLL;
    do
    {
      v134.val[0] = *a5;
      v43 = a5[1];
      v138.val[0] = a5[2];
      v44 = a5[3];
      a5 += 4;
      v45 = v44;
      v138.val[1] = 0uLL;
      v142.val[0] = v43;
      v134.val[1] = 0uLL;
      v46 = v29;
      vst2q_s8(v46, v134);
      v46 += 32;
      v142.val[1] = 0uLL;
      vst2q_s8(v46, v142);
      v47 = v29 + 64;
      vst2q_s8(v47, v138);
      v48 = v29 + 96;
      vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
      v29 += 128;
    }
    while (v29 != v41);
    v29 = v41;
  }
  while (v29 != v40)
  {
    v49 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v29 = v49;
    v29 += 2;
  }
  v128[4] = v108;
  v128[5] = v109;
  v128[6] = v110;
  v128[7] = v111;
  v128[0] = v104;
  v128[1] = v105;
  v128[2] = v106;
  v128[3] = v107;
  v123 = v99;
  v122 = v98;
  v121 = v97;
  v120 = v96;
  v127 = v103;
  v126 = v102;
  v125 = v101;
  v124 = v100;
  v114 = v90;
  v115 = v91;
  v112 = v88;
  v113 = v89;
  v118 = v94;
  v119 = v95;
  v50 = &v40[2 * HIDWORD(v111)];
  v116 = v92;
  v117 = v93;
  if (HIDWORD(v111) >= 0x40)
  {
    v54 = &v40[2 * (HIDWORD(v111) & 0xFFFFFFC0)];
    v51 = (int8x16_t *)v128;
    v55 = 0uLL;
    do
    {
      v135.val[0] = *v51;
      v56 = v51[1];
      v139.val[0] = v51[2];
      v57 = v51[3];
      v51 += 4;
      v58 = v57;
      v139.val[1] = 0uLL;
      v143.val[0] = v56;
      v135.val[1] = 0uLL;
      v59 = v40;
      vst2q_s8(v59, v135);
      v59 += 32;
      v143.val[1] = 0uLL;
      vst2q_s8(v59, v143);
      v60 = v40 + 64;
      vst2q_s8(v60, v139);
      v61 = v40 + 96;
      vst2q_s8(v61, *(int8x16x2_t *)(&v55 - 1));
      v40 += 128;
    }
    while (v40 != v54);
    v40 = v54;
  }
  else
  {
    v51 = (int8x16_t *)v128;
  }
  while (v40 != v50)
  {
    v52 = v51->u8[0];
    v51 = (int8x16_t *)((char *)v51 + 1);
    *(_WORD *)v40 = v52;
    v40 += 2;
  }
  v130[4] = v124;
  v130[5] = v125;
  v130[6] = v126;
  v130[7] = v127;
  v130[0] = v120;
  v130[1] = v121;
  v130[2] = v122;
  v130[3] = v123;
  v129[3] = v115;
  v129[2] = v114;
  v129[1] = v113;
  v129[0] = v112;
  v129[7] = v119;
  v129[6] = v118;
  v129[5] = v117;
  v129[4] = v116;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v50, a9, a10, v130, a12, a13, v129, a15);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 *a11, _BYTE *a12, unsigned int a13, __int128 *a14, _BYTE *a15, unsigned int a16, __int128 *a17, _BYTE *a18, unsigned int a19, __int128 *a20,char *a21,unsigned int a22,__int128 *a23,char *a24,uint64_t a25,__int128 *a26,char *a27,uint64_t a28,__int128 *a29,char *a30,uint64_t a31,__int128 *a32,_BYTE *a33,uint64_t a34,__int128 *a35,char *a36,uint64_t a37,__int128 *a38,_BYTE *a39,uint64_t a40,__int128 *a41,_BYTE *a42,uint64_t a43,__int128 *a44,_BYTE *a45,uint64_t a46,__int128 *a47,_BYTE *a48,uint64_t a49,__int128 *a50,unsigned __int8 a51)
{
  _BYTE *v51;
  _BYTE *v52;
  unsigned int v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  unsigned int v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  _OWORD *v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unsigned int v95;
  _BYTE *v96;
  unsigned int v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  _BYTE *__dst;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  _OWORD __src[7];
  size_t __n[2];
  __int128 v226[8];
  __int128 v227[8];
  __int128 v228[8];
  __int128 v229[8];
  __int128 v230[8];
  __int128 v231[8];
  __int128 v232[8];
  __int128 v233[8];
  __int128 v234[8];
  __int128 v235[8];
  __int128 v236[8];
  __int128 v237[8];
  __int128 v238[8];
  _OWORD v239[8];
  _OWORD v240[8];
  uint64_t v241;

  v51 = (_BYTE *)MEMORY[0x1E0C80A78](a1, a2);
  v101 = v55;
  v102 = v56;
  v58 = v57;
  v59 = v53;
  v60 = a50;
  v61 = a32;
  v62 = a20;
  v241 = *MEMORY[0x1E0C80C00];
  if (v53)
  {
    if (v53 == 1)
    {
      *v51 = *v52;
    }
    else
    {
      v63 = v54;
      v64 = v51;
      memcpy(v51, v52, v53);
      v51 = v64;
      v54 = v63;
      v60 = a50;
      v61 = a32;
      v62 = a20;
    }
  }
  v65 = a48;
  v66 = a49;
  v67 = a45;
  v68 = a46;
  v70 = a42;
  v69 = a43;
  v71 = a39;
  v72 = a40;
  __dst = &v51[v59];
  v73 = a33;
  v74 = a34;
  v75 = v58[5];
  __src[4] = v58[4];
  __src[5] = v75;
  v76 = v58[7];
  __src[6] = v58[6];
  *(_OWORD *)__n = v76;
  v77 = v58[1];
  __src[0] = *v58;
  __src[1] = v77;
  v78 = v58[3];
  __src[2] = v58[2];
  __src[3] = v78;
  v219 = v54[3];
  v218 = v54[2];
  v217 = v54[1];
  v216 = *v54;
  v79 = a30;
  v80 = a31;
  v223 = v54[7];
  v222 = v54[6];
  v221 = v54[5];
  v220 = v54[4];
  v211 = a11[3];
  v210 = a11[2];
  v209 = a11[1];
  v208 = *a11;
  v215 = a11[7];
  v214 = a11[6];
  v213 = a11[5];
  v212 = a11[4];
  v203 = a14[3];
  v202 = a14[2];
  v201 = a14[1];
  v200 = *a14;
  v81 = a27;
  v82 = a28;
  v207 = a14[7];
  v206 = a14[6];
  v205 = a14[5];
  v204 = a14[4];
  v195 = a17[3];
  v194 = a17[2];
  v193 = a17[1];
  v192 = *a17;
  v199 = a17[7];
  v198 = a17[6];
  v197 = a17[5];
  v196 = a17[4];
  v187 = v62[3];
  v186 = v62[2];
  v185 = v62[1];
  v184 = *v62;
  v83 = v62[4];
  v84 = v62[5];
  v85 = v62[6];
  v86 = v62[7];
  v87 = a24;
  v88 = a25;
  v191 = v86;
  v190 = v85;
  v189 = v84;
  v188 = v83;
  v179 = a23[3];
  v178 = a23[2];
  v177 = a23[1];
  v176 = *a23;
  v183 = a23[7];
  v182 = a23[6];
  v181 = a23[5];
  v180 = a23[4];
  v171 = a26[3];
  v170 = a26[2];
  v169 = a26[1];
  v168 = *a26;
  v89 = a21;
  v90 = a22;
  v175 = a26[7];
  v174 = a26[6];
  v173 = a26[5];
  v172 = a26[4];
  v163 = a29[3];
  v162 = a29[2];
  v161 = a29[1];
  v160 = *a29;
  v167 = a29[7];
  v166 = a29[6];
  v165 = a29[5];
  v164 = a29[4];
  v155 = v61[3];
  v154 = v61[2];
  v153 = v61[1];
  v152 = *v61;
  v91 = v61[4];
  v92 = v61[5];
  v93 = v61[6];
  v94 = v61[7];
  v96 = a18;
  v95 = a19;
  v159 = v94;
  v158 = v93;
  v157 = v92;
  v156 = v91;
  v147 = a35[3];
  v146 = a35[2];
  v145 = a35[1];
  v144 = *a35;
  v151 = a35[7];
  v150 = a35[6];
  v149 = a35[5];
  v148 = a35[4];
  v139 = a38[3];
  v138 = a38[2];
  v137 = a38[1];
  v136 = *a38;
  v97 = a16;
  v143 = a38[7];
  v142 = a38[6];
  v141 = a38[5];
  v140 = a38[4];
  v130 = a41[2];
  v131 = a41[3];
  v128 = *a41;
  v129 = a41[1];
  v134 = a41[6];
  v135 = a41[7];
  v132 = a41[4];
  v133 = a41[5];
  v122 = a44[2];
  v123 = a44[3];
  v120 = *a44;
  v121 = a44[1];
  v98 = a12;
  v126 = a44[6];
  v127 = a44[7];
  v124 = a44[4];
  v125 = a44[5];
  v114 = a47[2];
  v115 = a47[3];
  v112 = *a47;
  v113 = a47[1];
  v118 = a47[6];
  v119 = a47[7];
  v116 = a47[4];
  v117 = a47[5];
  v106 = v60[2];
  v107 = v60[3];
  v104 = *v60;
  v105 = v60[1];
  v110 = v60[6];
  v111 = v60[7];
  v108 = v60[4];
  v109 = v60[5];
  v99 = HIDWORD(__n[1]);
  if (HIDWORD(__n[1]))
  {
    if (HIDWORD(__n[1]) == 1)
    {
      *__dst = __src[0];
    }
    else
    {
      memcpy(__dst, __src, HIDWORD(__n[1]));
      v82 = a28;
      v80 = a31;
      v79 = a30;
      v67 = a45;
      v74 = a34;
      v87 = a24;
      v81 = a27;
      v73 = a33;
      v65 = a48;
      v66 = a49;
      v68 = a46;
      v96 = a18;
      v90 = a22;
      v70 = a42;
      v89 = a21;
      v88 = a25;
      v69 = a43;
      v72 = a40;
      v98 = a12;
      v97 = a16;
      v71 = a39;
      v95 = a19;
    }
  }
  v240[4] = v220;
  v240[5] = v221;
  v240[6] = v222;
  v240[7] = v223;
  v240[0] = v216;
  v240[1] = v217;
  v240[2] = v218;
  v240[3] = v219;
  v239[3] = v211;
  v239[2] = v210;
  v239[1] = v209;
  v239[0] = v208;
  v239[7] = v215;
  v239[6] = v214;
  v239[5] = v213;
  v239[4] = v212;
  v238[3] = v203;
  v238[2] = v202;
  v238[1] = v201;
  v238[0] = v200;
  v238[7] = v207;
  v238[6] = v206;
  v238[5] = v205;
  v238[4] = v204;
  v237[3] = v195;
  v237[2] = v194;
  v237[1] = v193;
  v237[0] = v192;
  v237[7] = v199;
  v237[6] = v198;
  v237[5] = v197;
  v237[4] = v196;
  v236[3] = v187;
  v236[2] = v186;
  v236[1] = v185;
  v236[0] = v184;
  v236[7] = v191;
  v236[6] = v190;
  v236[5] = v189;
  v236[4] = v188;
  v235[3] = v179;
  v235[2] = v178;
  v235[1] = v177;
  v235[0] = v176;
  v235[7] = v183;
  v235[6] = v182;
  v235[5] = v181;
  v235[4] = v180;
  v234[3] = v171;
  v234[2] = v170;
  v234[1] = v169;
  v234[0] = v168;
  v234[7] = v175;
  v234[6] = v174;
  v234[5] = v173;
  v234[4] = v172;
  v233[3] = v163;
  v233[2] = v162;
  v233[1] = v161;
  v233[0] = v160;
  v233[7] = v167;
  v233[6] = v166;
  v233[5] = v165;
  v233[4] = v164;
  v232[3] = v155;
  v232[2] = v154;
  v232[1] = v153;
  v232[0] = v152;
  v232[7] = v159;
  v232[6] = v158;
  v232[5] = v157;
  v232[4] = v156;
  v231[3] = v147;
  v231[2] = v146;
  v231[1] = v145;
  v231[0] = v144;
  v231[7] = v151;
  v231[6] = v150;
  v231[5] = v149;
  v231[4] = v148;
  v230[3] = v139;
  v230[2] = v138;
  v230[1] = v137;
  v230[0] = v136;
  v230[7] = v143;
  v230[6] = v142;
  v230[5] = v141;
  v230[4] = v140;
  v229[3] = v131;
  v229[2] = v130;
  v229[1] = v129;
  v229[0] = v128;
  v229[7] = v135;
  v229[6] = v134;
  v229[5] = v133;
  v229[4] = v132;
  v228[3] = v123;
  v228[2] = v122;
  v228[1] = v121;
  v228[0] = v120;
  v228[7] = v127;
  v228[6] = v126;
  v228[5] = v125;
  v228[4] = v124;
  v227[3] = v115;
  v227[2] = v114;
  v227[1] = v113;
  v227[0] = v112;
  v227[7] = v119;
  v227[6] = v118;
  v227[5] = v117;
  v227[4] = v116;
  v226[3] = v107;
  v226[2] = v106;
  v226[1] = v105;
  v226[0] = v104;
  v226[7] = v111;
  v226[6] = v110;
  v226[5] = v109;
  v226[4] = v108;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&__dst[v99], v101, v102, (uint64_t)v240, a9, a10, (uint64_t)v239, v82, v98, a13, v238, a15, v97, v237, v96, v95, v236, v89, v90,
           v235,
           v87,
           v88,
           v234,
           v81,
           v82,
           v233,
           v79,
           v80,
           v232,
           v73,
           v74,
           v231,
           a36,
           a37,
           v230,
           v71,
           v72,
           v229,
           v70,
           v69,
           v228,
           v67,
           v68,
           v227,
           v65,
           v66,
           v226,
           a51);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, unsigned int a10, __int128 *a11, _BYTE *a12, unsigned int a13, __int128 *a14, _BYTE *a15, unsigned int a16, __int128 *a17, char *a18, unsigned int a19, __int128 *a20,char *a21,uint64_t a22,__int128 *a23,char *a24,uint64_t a25,__int128 *a26,char *a27,uint64_t a28,__int128 *a29,_BYTE *a30,uint64_t a31,__int128 *a32,char *a33,uint64_t a34,__int128 *a35,_BYTE *a36,uint64_t a37,__int128 *a38,_BYTE *a39,uint64_t a40,__int128 *a41,_BYTE *a42,uint64_t a43,__int128 *a44,_BYTE *a45,uint64_t a46,__int128 *a47,unsigned __int8 a48)
{
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  __int128 *v51;
  __int128 *v52;
  _BYTE *v53;
  unsigned int v54;
  _OWORD *v55;
  _OWORD *v56;
  unsigned int v57;
  __int128 *v58;
  __int128 *v59;
  __int128 *v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  unsigned int v90;
  _BYTE *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  _BYTE *v96;
  unsigned int v97;
  _BYTE *__dst;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  _OWORD __src[7];
  size_t __n[2];
  __int128 v213[8];
  __int128 v214[8];
  __int128 v215[8];
  __int128 v216[8];
  __int128 v217[8];
  __int128 v218[8];
  __int128 v219[8];
  __int128 v220[8];
  __int128 v221[8];
  __int128 v222[8];
  __int128 v223[8];
  __int128 v224[8];
  _OWORD v225[8];
  _OWORD v226[8];
  uint64_t v227;

  v48 = (_BYTE *)MEMORY[0x1E0C80A78](a1, a2);
  v52 = v51;
  v96 = v53;
  v97 = v54;
  v56 = v55;
  v57 = v50;
  v58 = a29;
  v59 = a23;
  v60 = a14;
  v227 = *MEMORY[0x1E0C80C00];
  if (v50)
  {
    if (v50 == 1)
    {
      *v48 = *v49;
    }
    else
    {
      v61 = v48;
      memcpy(v48, v49, v50);
      v48 = v61;
      v60 = a14;
      v58 = a29;
      v59 = a23;
    }
  }
  v63 = a45;
  v62 = a46;
  v65 = a42;
  v64 = a43;
  v66 = a39;
  v67 = a40;
  v69 = a36;
  v68 = a37;
  v70 = a33;
  v71 = a34;
  __dst = &v48[v57];
  v72 = v56[5];
  __src[4] = v56[4];
  __src[5] = v72;
  v73 = v56[7];
  __src[6] = v56[6];
  *(_OWORD *)__n = v73;
  v74 = v56[1];
  v75 = v56[2];
  v76 = v56[3];
  v77 = a30;
  v78 = a31;
  __src[0] = *v56;
  __src[1] = v74;
  __src[2] = v75;
  __src[3] = v76;
  v206 = v52[3];
  v205 = v52[2];
  v204 = v52[1];
  v203 = *v52;
  v210 = v52[7];
  v209 = v52[6];
  v208 = v52[5];
  v207 = v52[4];
  v198 = a11[3];
  v197 = a11[2];
  v196 = a11[1];
  v195 = *a11;
  v79 = a27;
  v80 = a28;
  v202 = a11[7];
  v201 = a11[6];
  v200 = a11[5];
  v199 = a11[4];
  v190 = v60[3];
  v189 = v60[2];
  v188 = v60[1];
  v187 = *v60;
  v194 = v60[7];
  v193 = v60[6];
  v192 = v60[5];
  v191 = v60[4];
  v182 = a17[3];
  v181 = a17[2];
  v180 = a17[1];
  v179 = *a17;
  v81 = a24;
  v82 = a25;
  v186 = a17[7];
  v185 = a17[6];
  v184 = a17[5];
  v183 = a17[4];
  v174 = a20[3];
  v173 = a20[2];
  v172 = a20[1];
  v171 = *a20;
  v178 = a20[7];
  v177 = a20[6];
  v176 = a20[5];
  v175 = a20[4];
  v166 = v59[3];
  v165 = v59[2];
  v164 = v59[1];
  v163 = *v59;
  v83 = a21;
  v84 = a22;
  v170 = v59[7];
  v169 = v59[6];
  v168 = v59[5];
  v167 = v59[4];
  v158 = a26[3];
  v157 = a26[2];
  v156 = a26[1];
  v155 = *a26;
  v162 = a26[7];
  v161 = a26[6];
  v160 = a26[5];
  v159 = a26[4];
  v150 = v58[3];
  v149 = v58[2];
  v148 = v58[1];
  v147 = *v58;
  v85 = v58[4];
  v86 = v58[5];
  v87 = v58[6];
  v88 = v58[7];
  v89 = a18;
  v90 = a19;
  v154 = v88;
  v153 = v87;
  v152 = v86;
  v151 = v85;
  v142 = a32[3];
  v141 = a32[2];
  v140 = a32[1];
  v139 = *a32;
  v146 = a32[7];
  v145 = a32[6];
  v144 = a32[5];
  v143 = a32[4];
  v133 = a35[2];
  v134 = a35[3];
  v131 = *a35;
  v132 = a35[1];
  v91 = a15;
  v92 = a16;
  v138 = a35[7];
  v137 = a35[6];
  v136 = a35[5];
  v135 = a35[4];
  v125 = a38[2];
  v126 = a38[3];
  v123 = *a38;
  v124 = a38[1];
  v129 = a38[6];
  v130 = a38[7];
  v127 = a38[4];
  v128 = a38[5];
  v117 = a41[2];
  v118 = a41[3];
  v115 = *a41;
  v116 = a41[1];
  v93 = a13;
  v121 = a41[6];
  v122 = a41[7];
  v119 = a41[4];
  v120 = a41[5];
  v109 = a44[2];
  v110 = a44[3];
  v107 = *a44;
  v108 = a44[1];
  v113 = a44[6];
  v114 = a44[7];
  v111 = a44[4];
  v112 = a44[5];
  v101 = a47[2];
  v102 = a47[3];
  v99 = *a47;
  v100 = a47[1];
  v105 = a47[6];
  v106 = a47[7];
  v103 = a47[4];
  v104 = a47[5];
  v94 = HIDWORD(__n[1]);
  if (HIDWORD(__n[1]))
  {
    if (HIDWORD(__n[1]) == 1)
    {
      *__dst = __src[0];
    }
    else
    {
      memcpy(__dst, __src, HIDWORD(__n[1]));
      v82 = a25;
      v66 = a39;
      v81 = a24;
      v80 = a28;
      v79 = a27;
      v63 = a45;
      v78 = a31;
      v89 = a18;
      v84 = a22;
      v77 = a30;
      v62 = a46;
      v65 = a42;
      v91 = a15;
      v90 = a19;
      v64 = a43;
      v67 = a40;
      v68 = a37;
      v93 = a13;
      v69 = a36;
      v83 = a21;
      v71 = a34;
      v92 = a16;
      v70 = a33;
    }
  }
  v226[4] = v207;
  v226[5] = v208;
  v226[6] = v209;
  v226[7] = v210;
  v226[0] = v203;
  v226[1] = v204;
  v226[2] = v205;
  v226[3] = v206;
  v225[3] = v198;
  v225[2] = v197;
  v225[1] = v196;
  v225[0] = v195;
  v225[7] = v202;
  v225[6] = v201;
  v225[5] = v200;
  v225[4] = v199;
  v224[3] = v190;
  v224[2] = v189;
  v224[1] = v188;
  v224[0] = v187;
  v224[7] = v194;
  v224[6] = v193;
  v224[5] = v192;
  v224[4] = v191;
  v223[3] = v182;
  v223[2] = v181;
  v223[1] = v180;
  v223[0] = v179;
  v223[7] = v186;
  v223[6] = v185;
  v223[5] = v184;
  v223[4] = v183;
  v222[3] = v174;
  v222[2] = v173;
  v222[1] = v172;
  v222[0] = v171;
  v222[7] = v178;
  v222[6] = v177;
  v222[5] = v176;
  v222[4] = v175;
  v221[3] = v166;
  v221[2] = v165;
  v221[1] = v164;
  v221[0] = v163;
  v221[7] = v170;
  v221[6] = v169;
  v221[5] = v168;
  v221[4] = v167;
  v220[3] = v158;
  v220[2] = v157;
  v220[1] = v156;
  v220[0] = v155;
  v220[7] = v162;
  v220[6] = v161;
  v220[5] = v160;
  v220[4] = v159;
  v219[3] = v150;
  v219[2] = v149;
  v219[1] = v148;
  v219[0] = v147;
  v219[7] = v154;
  v219[6] = v153;
  v219[5] = v152;
  v219[4] = v151;
  v218[3] = v142;
  v218[2] = v141;
  v218[1] = v140;
  v218[0] = v139;
  v218[7] = v146;
  v218[6] = v145;
  v218[5] = v144;
  v218[4] = v143;
  v217[3] = v134;
  v217[2] = v133;
  v217[1] = v132;
  v217[0] = v131;
  v217[7] = v138;
  v217[6] = v137;
  v217[5] = v136;
  v217[4] = v135;
  v216[3] = v126;
  v216[2] = v125;
  v216[1] = v124;
  v216[0] = v123;
  v216[7] = v130;
  v216[6] = v129;
  v216[5] = v128;
  v216[4] = v127;
  v215[3] = v118;
  v215[2] = v117;
  v215[1] = v116;
  v215[0] = v115;
  v215[7] = v122;
  v215[6] = v121;
  v215[5] = v120;
  v215[4] = v119;
  v214[3] = v110;
  v214[2] = v109;
  v214[1] = v108;
  v214[0] = v107;
  v214[7] = v114;
  v214[6] = v113;
  v214[5] = v112;
  v214[4] = v111;
  v213[3] = v102;
  v213[2] = v101;
  v213[1] = v100;
  v213[0] = v99;
  v213[7] = v106;
  v213[6] = v105;
  v213[5] = v104;
  v213[4] = v103;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&__dst[v94], v96, v97, v226, a9, a10, v225, v82, a12, v93, v224, v91, v92, v223, v89, v90, v222, v83, v84,
           v221,
           v81,
           v82,
           v220,
           v79,
           v80,
           v219,
           v77,
           v78,
           v218,
           v70,
           v71,
           v217,
           v69,
           v68,
           v216,
           v66,
           v67,
           v215,
           v65,
           v64,
           v214,
           v63,
           v62,
           v213,
           a48);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, _BYTE *a2, unsigned int a3, _OWORD *a4, _BYTE *a5, unsigned int a6, _OWORD *a7, uint64_t a8, _BYTE *a9, unsigned int a10, __int128 *a11, _BYTE *a12, unsigned int a13, __int128 *a14, char *a15, unsigned int a16, __int128 *a17, char *a18, uint64_t a19, __int128 *a20,char *a21,uint64_t a22,__int128 *a23,char *a24,uint64_t a25,__int128 *a26,_BYTE *a27,uint64_t a28,__int128 *a29,char *a30,uint64_t a31,__int128 *a32,_BYTE *a33,uint64_t a34,__int128 *a35,_BYTE *a36,uint64_t a37,__int128 *a38,_BYTE *a39,uint64_t a40,__int128 *a41,_BYTE *a42,uint64_t a43,__int128 *a44,unsigned __int8 a45)
{
  __int128 *v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  __int128 *v52;
  __int128 *v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  _BYTE *v57;
  _OWORD *v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char *v98;
  unsigned int v99;
  _BYTE *v100;
  unsigned int v101;
  unsigned __int8 v102;
  uint64_t v103;
  _BYTE *v104;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  _OWORD __src[7];
  size_t __n[2];
  __int128 v214[8];
  __int128 v215[8];
  __int128 v216[8];
  __int128 v217[8];
  __int128 v218[8];
  __int128 v219[8];
  __int128 v220[8];
  __int128 v221[8];
  __int128 v222[8];
  __int128 v223[8];
  __int128 v224[8];
  __int128 v225[8];
  _OWORD v226[8];
  uint64_t v227;

  v47 = a44;
  v48 = a38;
  v49 = a35;
  v50 = a32;
  v51 = a29;
  v52 = a26;
  v53 = a23;
  v54 = a20;
  v55 = a17;
  v56 = a14;
  v227 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
    {
      *a1 = *a2;
    }
    else
    {
      v57 = a1;
      v58 = a7;
      memcpy(a1, a2, a3);
      a1 = v57;
      a7 = v58;
      v56 = a14;
      v54 = a20;
      v48 = a38;
      v49 = a35;
      v51 = a29;
      v52 = a26;
      v47 = a44;
      v50 = a32;
      v53 = a23;
      v55 = a17;
    }
  }
  v60 = a42;
  v59 = a43;
  v61 = a39;
  v62 = a40;
  v64 = a36;
  v63 = a37;
  v65 = a33;
  v66 = a34;
  v67 = &a1[a3];
  v68 = a30;
  v69 = a31;
  v70 = a4[5];
  __src[4] = a4[4];
  __src[5] = v70;
  v71 = a4[7];
  __src[6] = a4[6];
  *(_OWORD *)__n = v71;
  v72 = a4[1];
  __src[0] = *a4;
  __src[1] = v72;
  v73 = a4[3];
  __src[2] = a4[2];
  __src[3] = v73;
  v207 = a7[3];
  v206 = a7[2];
  v205 = a7[1];
  v204 = *a7;
  v74 = a27;
  v75 = a28;
  v211 = a7[7];
  v210 = a7[6];
  v209 = a7[5];
  v208 = a7[4];
  v199 = a11[3];
  v198 = a11[2];
  v197 = a11[1];
  v196 = *a11;
  v203 = a11[7];
  v202 = a11[6];
  v201 = a11[5];
  v200 = a11[4];
  v191 = v56[3];
  v190 = v56[2];
  v189 = v56[1];
  v188 = *v56;
  v76 = v56[4];
  v77 = v56[5];
  v78 = v56[6];
  v79 = v56[7];
  v80 = a24;
  v81 = a25;
  v195 = v79;
  v194 = v78;
  v193 = v77;
  v192 = v76;
  v183 = v55[3];
  v182 = v55[2];
  v181 = v55[1];
  v180 = *v55;
  v187 = v55[7];
  v186 = v55[6];
  v185 = v55[5];
  v184 = v55[4];
  v175 = v54[3];
  v174 = v54[2];
  v173 = v54[1];
  v172 = *v54;
  v82 = v54[4];
  v83 = v54[5];
  v84 = v54[6];
  v85 = v54[7];
  v86 = a21;
  v87 = a22;
  v179 = v85;
  v178 = v84;
  v177 = v83;
  v176 = v82;
  v167 = v53[3];
  v166 = v53[2];
  v165 = v53[1];
  v164 = *v53;
  v171 = v53[7];
  v170 = v53[6];
  v169 = v53[5];
  v168 = v53[4];
  v159 = v52[3];
  v158 = v52[2];
  v157 = v52[1];
  v156 = *v52;
  v88 = v52[4];
  v89 = v52[5];
  v90 = v52[6];
  v91 = v52[7];
  v92 = a18;
  v93 = a19;
  v163 = v91;
  v162 = v90;
  v161 = v89;
  v160 = v88;
  v151 = v51[3];
  v150 = v51[2];
  v149 = v51[1];
  v148 = *v51;
  v155 = v51[7];
  v154 = v51[6];
  v153 = v51[5];
  v152 = v51[4];
  v142 = v50[2];
  v143 = v50[3];
  v140 = *v50;
  v141 = v50[1];
  v94 = v50[4];
  v95 = v50[5];
  v96 = v50[6];
  v97 = v50[7];
  v98 = a15;
  v99 = a16;
  v147 = v97;
  v146 = v96;
  v144 = v94;
  v145 = v95;
  v134 = v49[2];
  v135 = v49[3];
  v132 = *v49;
  v133 = v49[1];
  v138 = v49[6];
  v139 = v49[7];
  v136 = v49[4];
  v137 = v49[5];
  v126 = v48[2];
  v127 = v48[3];
  v124 = *v48;
  v125 = v48[1];
  v100 = a12;
  v101 = a13;
  v130 = v48[6];
  v131 = v48[7];
  v128 = v48[4];
  v129 = v48[5];
  v118 = a41[2];
  v119 = a41[3];
  v116 = *a41;
  v117 = a41[1];
  v102 = a45;
  v122 = a41[6];
  v123 = a41[7];
  v120 = a41[4];
  v121 = a41[5];
  v110 = v47[2];
  v111 = v47[3];
  v108 = *v47;
  v109 = v47[1];
  v114 = v47[6];
  v115 = v47[7];
  v112 = v47[4];
  v113 = v47[5];
  v103 = HIDWORD(__n[1]);
  if (HIDWORD(__n[1]))
  {
    if (HIDWORD(__n[1]) == 1)
    {
      *v67 = __src[0];
    }
    else
    {
      v104 = v67;
      memcpy(v67, __src, HIDWORD(__n[1]));
      v67 = v104;
      v81 = a25;
      v87 = a22;
      v86 = a21;
      v80 = a24;
      v74 = a27;
      v75 = a28;
      v69 = a31;
      v68 = a30;
      v60 = a42;
      v99 = a16;
      v98 = a15;
      v62 = a40;
      v93 = a19;
      v92 = a18;
      v61 = a39;
      v64 = a36;
      v100 = a12;
      v63 = a37;
      v59 = a43;
      v101 = a13;
      v66 = a34;
      v65 = a33;
      v102 = a45;
    }
  }
  v226[4] = v208;
  v226[5] = v209;
  v226[6] = v210;
  v226[7] = v211;
  v226[0] = v204;
  v226[1] = v205;
  v226[2] = v206;
  v226[3] = v207;
  v225[3] = v199;
  v225[2] = v198;
  v225[1] = v197;
  v225[0] = v196;
  v225[7] = v203;
  v225[6] = v202;
  v225[5] = v201;
  v225[4] = v200;
  v224[3] = v191;
  v224[2] = v190;
  v224[1] = v189;
  v224[0] = v188;
  v224[7] = v195;
  v224[6] = v194;
  v224[5] = v193;
  v224[4] = v192;
  v223[3] = v183;
  v223[2] = v182;
  v223[1] = v181;
  v223[0] = v180;
  v223[7] = v187;
  v223[6] = v186;
  v223[5] = v185;
  v223[4] = v184;
  v222[3] = v175;
  v222[2] = v174;
  v222[1] = v173;
  v222[0] = v172;
  v222[7] = v179;
  v222[6] = v178;
  v222[5] = v177;
  v222[4] = v176;
  v221[3] = v167;
  v221[2] = v166;
  v221[1] = v165;
  v221[0] = v164;
  v221[7] = v171;
  v221[6] = v170;
  v221[5] = v169;
  v221[4] = v168;
  v220[3] = v159;
  v220[2] = v158;
  v220[1] = v157;
  v220[0] = v156;
  v220[7] = v163;
  v220[6] = v162;
  v220[5] = v161;
  v220[4] = v160;
  v219[3] = v151;
  v219[2] = v150;
  v219[1] = v149;
  v219[0] = v148;
  v219[7] = v155;
  v219[6] = v154;
  v219[5] = v153;
  v219[4] = v152;
  v218[3] = v143;
  v218[2] = v142;
  v218[1] = v141;
  v218[0] = v140;
  v218[7] = v147;
  v218[6] = v146;
  v218[5] = v145;
  v218[4] = v144;
  v217[3] = v135;
  v217[2] = v134;
  v217[1] = v133;
  v217[0] = v132;
  v217[7] = v139;
  v217[6] = v138;
  v217[5] = v137;
  v217[4] = v136;
  v216[3] = v127;
  v216[2] = v126;
  v216[1] = v125;
  v216[0] = v124;
  v216[7] = v131;
  v216[6] = v130;
  v216[5] = v129;
  v216[4] = v128;
  v215[3] = v119;
  v215[2] = v118;
  v215[1] = v117;
  v215[0] = v116;
  v215[7] = v123;
  v215[6] = v122;
  v215[5] = v121;
  v215[4] = v120;
  v214[3] = v111;
  v214[2] = v110;
  v214[1] = v109;
  v214[0] = v108;
  v214[7] = v115;
  v214[6] = v114;
  v214[5] = v113;
  v214[4] = v112;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&v67[v103], a5, a6, v226, a9, a10, v225, (uint64_t)v86, v100, v101, v224, v98, v99, v223, v92, v93, v222, v86, v87,
           v221,
           v80,
           v81,
           v220,
           v74,
           v75,
           v219,
           v68,
           v69,
           v218,
           v65,
           v66,
           v217,
           v64,
           v63,
           v216,
           v61,
           v62,
           v215,
           v60,
           v59,
           v214,
           v102);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *a1, _BYTE *a2, unsigned int a3, _OWORD *a4, _BYTE *a5, unsigned int a6, __int128 *a7, uint64_t a8, _BYTE *a9, unsigned int a10, __int128 *a11, char *a12, unsigned int a13, __int128 *a14, char *a15, uint64_t a16, __int128 *a17, char *a18, uint64_t a19, __int128 *a20,char *a21,uint64_t a22,__int128 *a23,_BYTE *a24,uint64_t a25,__int128 *a26,char *a27,uint64_t a28,__int128 *a29,_BYTE *a30,uint64_t a31,__int128 *a32,_BYTE *a33,uint64_t a34,__int128 *a35,_BYTE *a36,uint64_t a37,__int128 *a38,_BYTE *a39,uint64_t a40,__int128 *a41,unsigned __int8 a42)
{
  __int128 *v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __int128 *v49;
  _BYTE *v50;
  _BYTE *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  _BYTE *v71;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _OWORD __src[7];
  size_t __n[2];
  __int128 v173[8];
  __int128 v174[8];
  __int128 v175[8];
  __int128 v176[8];
  __int128 v177[8];
  __int128 v178[8];
  __int128 v179[8];
  __int128 v180[8];
  __int128 v181[8];
  __int128 v182[8];
  __int128 v183[8];
  _OWORD v184[8];
  uint64_t v185;

  v45 = a41;
  v46 = a35;
  v47 = a29;
  v48 = a17;
  v49 = a14;
  v185 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
    {
      *a1 = *a2;
    }
    else
    {
      v50 = a1;
      memcpy(a1, a2, a3);
      a1 = v50;
      v49 = a14;
      v48 = a17;
      v47 = a29;
      v46 = a35;
      v45 = a41;
    }
  }
  v51 = &a1[a3];
  v52 = a4[5];
  __src[4] = a4[4];
  __src[5] = v52;
  v53 = a4[7];
  __src[6] = a4[6];
  *(_OWORD *)__n = v53;
  v54 = a4[1];
  __src[0] = *a4;
  __src[1] = v54;
  v55 = a4[3];
  __src[2] = a4[2];
  __src[3] = v55;
  v166 = a7[3];
  v165 = a7[2];
  v164 = a7[1];
  v163 = *a7;
  v170 = a7[7];
  v169 = a7[6];
  v168 = a7[5];
  v167 = a7[4];
  v158 = a11[3];
  v157 = a11[2];
  v156 = a11[1];
  v155 = *a11;
  v162 = a11[7];
  v161 = a11[6];
  v160 = a11[5];
  v159 = a11[4];
  v150 = v49[3];
  v149 = v49[2];
  v148 = v49[1];
  v147 = *v49;
  v154 = v49[7];
  v153 = v49[6];
  v152 = v49[5];
  v151 = v49[4];
  v142 = v48[3];
  v141 = v48[2];
  v140 = v48[1];
  v139 = *v48;
  v146 = v48[7];
  v145 = v48[6];
  v144 = v48[5];
  v143 = v48[4];
  v134 = a20[3];
  v133 = a20[2];
  v132 = a20[1];
  v131 = *a20;
  v138 = a20[7];
  v137 = a20[6];
  v136 = a20[5];
  v135 = a20[4];
  v126 = a23[3];
  v125 = a23[2];
  v124 = a23[1];
  v123 = *a23;
  v130 = a23[7];
  v129 = a23[6];
  v128 = a23[5];
  v127 = a23[4];
  v118 = a26[3];
  v116 = a26[1];
  v117 = a26[2];
  v115 = *a26;
  v122 = a26[7];
  v121 = a26[6];
  v120 = a26[5];
  v119 = a26[4];
  v109 = v47[2];
  v110 = v47[3];
  v107 = *v47;
  v108 = v47[1];
  v113 = v47[6];
  v114 = v47[7];
  v111 = v47[4];
  v112 = v47[5];
  v101 = a32[2];
  v102 = a32[3];
  v99 = *a32;
  v100 = a32[1];
  v105 = a32[6];
  v106 = a32[7];
  v103 = a32[4];
  v104 = a32[5];
  v93 = v46[2];
  v94 = v46[3];
  v91 = *v46;
  v92 = v46[1];
  v97 = v46[6];
  v98 = v46[7];
  v95 = v46[4];
  v96 = v46[5];
  v85 = a38[2];
  v86 = a38[3];
  v83 = *a38;
  v84 = a38[1];
  v89 = a38[6];
  v90 = a38[7];
  v87 = a38[4];
  v88 = a38[5];
  v77 = v45[2];
  v78 = v45[3];
  v75 = *v45;
  v76 = v45[1];
  v81 = v45[6];
  v82 = v45[7];
  v79 = v45[4];
  v80 = v45[5];
  v56 = HIDWORD(__n[1]);
  if (HIDWORD(__n[1]))
  {
    if (HIDWORD(__n[1]) == 1)
      *v51 = __src[0];
    else
      memcpy(&a1[a3], __src, HIDWORD(__n[1]));
  }
  v58 = a39;
  v57 = a40;
  v59 = a36;
  v60 = a37;
  v62 = a33;
  v61 = a34;
  v63 = a30;
  v64 = a31;
  v66 = a27;
  v65 = a28;
  v68 = a21;
  v67 = a22;
  v69 = a18;
  v70 = a15;
  v71 = &v51[v56];
  if (a6)
  {
    if (a6 == 1)
    {
      *v71 = *a5;
    }
    else
    {
      memcpy(v71, a5, a6);
      v62 = a33;
      v61 = a34;
      v65 = a28;
      v64 = a31;
      v60 = a37;
      v59 = a36;
      v63 = a30;
      v70 = a15;
      v66 = a27;
      v67 = a22;
      v68 = a21;
      v58 = a39;
      v57 = a40;
      v69 = a18;
    }
  }
  v184[4] = v167;
  v184[5] = v168;
  v184[6] = v169;
  v184[7] = v170;
  v184[0] = v163;
  v184[1] = v164;
  v184[2] = v165;
  v184[3] = v166;
  v183[3] = v158;
  v183[2] = v157;
  v183[1] = v156;
  v183[0] = v155;
  v183[7] = v162;
  v183[6] = v161;
  v183[5] = v160;
  v183[4] = v159;
  v182[3] = v150;
  v182[2] = v149;
  v182[1] = v148;
  v182[0] = v147;
  v182[7] = v154;
  v182[6] = v153;
  v182[5] = v152;
  v182[4] = v151;
  v181[3] = v142;
  v181[2] = v141;
  v181[1] = v140;
  v181[0] = v139;
  v181[7] = v146;
  v181[6] = v145;
  v181[5] = v144;
  v181[4] = v143;
  v180[3] = v134;
  v180[2] = v133;
  v180[1] = v132;
  v180[0] = v131;
  v180[7] = v138;
  v180[6] = v137;
  v180[5] = v136;
  v180[4] = v135;
  v179[3] = v126;
  v179[2] = v125;
  v179[1] = v124;
  v179[0] = v123;
  v179[7] = v130;
  v179[6] = v129;
  v179[5] = v128;
  v179[4] = v127;
  v178[3] = v118;
  v178[2] = v117;
  v178[1] = v116;
  v178[0] = v115;
  v178[7] = v122;
  v178[6] = v121;
  v178[5] = v120;
  v178[4] = v119;
  v177[3] = v110;
  v177[2] = v109;
  v177[1] = v108;
  v177[0] = v107;
  v177[7] = v114;
  v177[6] = v113;
  v177[5] = v112;
  v177[4] = v111;
  v176[3] = v102;
  v176[2] = v101;
  v176[1] = v100;
  v176[0] = v99;
  v176[7] = v106;
  v176[6] = v105;
  v176[5] = v104;
  v176[4] = v103;
  v175[3] = v94;
  v175[2] = v93;
  v175[1] = v92;
  v175[0] = v91;
  v175[7] = v98;
  v175[6] = v97;
  v175[5] = v96;
  v175[4] = v95;
  v174[3] = v86;
  v174[2] = v85;
  v174[1] = v84;
  v174[0] = v83;
  v174[7] = v90;
  v174[6] = v89;
  v174[5] = v88;
  v174[4] = v87;
  v173[3] = v78;
  v173[2] = v77;
  v173[1] = v76;
  v173[0] = v75;
  v173[7] = v82;
  v173[6] = v81;
  v173[5] = v80;
  v173[4] = v79;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&v71[a6], (unsigned int *)v184, a9, a10, v183, a12, a13, v182, v70, a16, v181, v69, a19, v180, v68, v67, v179, a24, a25,
           v178,
           v66,
           v65,
           v177,
           v63,
           v64,
           v176,
           v62,
           v61,
           v175,
           v59,
           v60,
           v174,
           v58,
           v57,
           v173,
           a42);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, unsigned int *__src, _BYTE *a3, unsigned int a4, __int128 *a5, char *a6, unsigned int a7, __int128 *a8, char *a9, uint64_t a10, __int128 *a11, char *a12, uint64_t a13, __int128 *a14, char *a15, uint64_t a16, __int128 *a17, _BYTE *a18, uint64_t a19, __int128 *a20,char *a21,uint64_t a22,__int128 *a23,_BYTE *a24,uint64_t a25,__int128 *a26,_BYTE *a27,uint64_t a28,__int128 *a29,_BYTE *a30,uint64_t a31,__int128 *a32,_BYTE *a33,uint64_t a34,__int128 *a35,uint64_t a36)
{
  __int128 *v41;
  __int128 *v42;
  __int128 *v43;
  __int128 *v44;
  size_t v45;
  char *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unsigned __int8 v57;
  char *v58;
  _BYTE *v61;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD __srca[7];
  size_t __n[2];
  __int128 v154[8];
  __int128 v155[8];
  __int128 v156[8];
  __int128 v157[8];
  __int128 v158[8];
  __int128 v159[8];
  __int128 v160[8];
  __int128 v161[8];
  __int128 v162[8];
  _OWORD v163[8];
  uint64_t v164;

  v41 = a32;
  v42 = a29;
  v43 = a26;
  v44 = a20;
  v164 = *MEMORY[0x1E0C80C00];
  v45 = __src[31];
  if ((_DWORD)v45)
  {
    if ((_DWORD)v45 == 1)
    {
      *__dst = *(_BYTE *)__src;
    }
    else
    {
      v61 = a3;
      memcpy(__dst, __src, v45);
      a3 = v61;
      v44 = a20;
      v41 = a32;
      v43 = a26;
      v42 = a29;
    }
  }
  v46 = &__dst[__src[31]];
  v148 = a5[4];
  v149 = a5[5];
  v150 = a5[6];
  v151 = a5[7];
  v144 = *a5;
  v145 = a5[1];
  v146 = a5[2];
  v147 = a5[3];
  v139 = a8[3];
  v138 = a8[2];
  v137 = a8[1];
  v136 = *a8;
  v143 = a8[7];
  v142 = a8[6];
  v141 = a8[5];
  v140 = a8[4];
  v131 = a11[3];
  v130 = a11[2];
  v129 = a11[1];
  v128 = *a11;
  v135 = a11[7];
  v134 = a11[6];
  v133 = a11[5];
  v132 = a11[4];
  v123 = a14[3];
  v122 = a14[2];
  v121 = a14[1];
  v120 = *a14;
  v127 = a14[7];
  v126 = a14[6];
  v125 = a14[5];
  v124 = a14[4];
  v115 = a17[3];
  v114 = a17[2];
  v113 = a17[1];
  v112 = *a17;
  v119 = a17[7];
  v118 = a17[6];
  v117 = a17[5];
  v116 = a17[4];
  v106 = v44[2];
  v107 = v44[3];
  v104 = *v44;
  v105 = v44[1];
  v111 = v44[7];
  v110 = v44[6];
  v108 = v44[4];
  v109 = v44[5];
  v98 = a23[2];
  v99 = a23[3];
  v96 = *a23;
  v97 = a23[1];
  v102 = a23[6];
  v103 = a23[7];
  v100 = a23[4];
  v101 = a23[5];
  v90 = v43[2];
  v91 = v43[3];
  v88 = *v43;
  v89 = v43[1];
  v94 = v43[6];
  v95 = v43[7];
  v92 = v43[4];
  v93 = v43[5];
  v82 = v42[2];
  v83 = v42[3];
  v80 = *v42;
  v81 = v42[1];
  v86 = v42[6];
  v87 = v42[7];
  v84 = v42[4];
  v85 = v42[5];
  v74 = v41[2];
  v75 = v41[3];
  v72 = *v41;
  v73 = v41[1];
  v78 = v41[6];
  v79 = v41[7];
  v76 = v41[4];
  v77 = v41[5];
  v66 = a35[2];
  v67 = a35[3];
  v64 = *a35;
  v65 = a35[1];
  v70 = a35[6];
  v71 = a35[7];
  v68 = a35[4];
  v69 = a35[5];
  if (a4)
  {
    if (a4 == 1)
      *v46 = *a3;
    else
      memcpy(v46, a3, a4);
  }
  v47 = a33;
  v48 = a34;
  v49 = a31;
  v50 = a27;
  v51 = a24;
  v52 = a25;
  v53 = a21;
  v54 = a19;
  v55 = a15;
  v56 = a12;
  v57 = a36;
  v58 = &v46[a4];
  __srca[4] = v148;
  __srca[5] = v149;
  __srca[6] = v150;
  *(_OWORD *)__n = v151;
  __srca[0] = v144;
  __srca[1] = v145;
  __srca[2] = v146;
  __srca[3] = v147;
  if (HIDWORD(v151))
  {
    if (HIDWORD(v151) == 1)
    {
      *v58 = __srca[0];
    }
    else
    {
      memcpy(&v46[a4], __srca, HIDWORD(v151));
      v57 = a36;
      v53 = a21;
      v48 = a34;
      v52 = a25;
      v47 = a33;
      v54 = a19;
      v49 = a31;
      v50 = a27;
      v51 = a24;
      v56 = a12;
      v55 = a15;
    }
  }
  v163[4] = v140;
  v163[5] = v141;
  v163[6] = v142;
  v163[7] = v143;
  v163[0] = v136;
  v163[1] = v137;
  v163[2] = v138;
  v163[3] = v139;
  v162[3] = v131;
  v162[2] = v130;
  v162[1] = v129;
  v162[0] = v128;
  v162[7] = v135;
  v162[6] = v134;
  v162[5] = v133;
  v162[4] = v132;
  v161[3] = v123;
  v161[2] = v122;
  v161[1] = v121;
  v161[0] = v120;
  v161[7] = v127;
  v161[6] = v126;
  v161[5] = v125;
  v161[4] = v124;
  v160[3] = v115;
  v160[2] = v114;
  v160[1] = v113;
  v160[0] = v112;
  v160[7] = v119;
  v160[6] = v118;
  v160[5] = v117;
  v160[4] = v116;
  v159[3] = v107;
  v159[2] = v106;
  v159[1] = v105;
  v159[0] = v104;
  v159[7] = v111;
  v159[6] = v110;
  v159[5] = v109;
  v159[4] = v108;
  v158[3] = v99;
  v158[2] = v98;
  v158[1] = v97;
  v158[0] = v96;
  v158[7] = v103;
  v158[6] = v102;
  v158[5] = v101;
  v158[4] = v100;
  v157[3] = v91;
  v157[2] = v90;
  v157[1] = v89;
  v157[0] = v88;
  v157[7] = v95;
  v157[6] = v94;
  v157[5] = v93;
  v157[4] = v92;
  v156[3] = v83;
  v156[2] = v82;
  v156[1] = v81;
  v156[0] = v80;
  v156[7] = v87;
  v156[6] = v86;
  v156[5] = v85;
  v156[4] = v84;
  v155[3] = v75;
  v155[2] = v74;
  v155[1] = v73;
  v155[0] = v72;
  v155[7] = v79;
  v155[6] = v78;
  v155[5] = v77;
  v155[4] = v76;
  v154[3] = v67;
  v154[2] = v66;
  v154[1] = v65;
  v154[0] = v64;
  v154[7] = v71;
  v154[6] = v70;
  v154[5] = v69;
  v154[4] = v68;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&v58[HIDWORD(v151)], a6, a7, v163, a9, a10, v162, v48, v56, a13, v161, v55, a16, v160, a18, v54, v159, v53, a22,
           v158,
           v51,
           v52,
           v157,
           v50,
           a28,
           v156,
           a30,
           v49,
           v155,
           v47,
           v48,
           v154,
           v57);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, char *a2, unsigned int a3, _OWORD *a4, char *a5, unsigned int a6, __int128 *a7, int a8, char *a9, uint64_t a10, __int128 *a11, char *a12, uint64_t a13, __int128 *a14, _BYTE *a15, uint64_t a16, __int128 *a17, char *a18, uint64_t a19, __int128 *a20,_BYTE *a21,uint64_t a22,__int128 *a23,_BYTE *a24,uint64_t a25,__int128 *a26,_BYTE *a27,uint64_t a28,__int128 *a29,_BYTE *a30,uint64_t a31,__int128 *a32,uint64_t a33)
{
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  char *v50;
  char *v51;
  unsigned __int8 v52;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _OWORD __src[7];
  size_t __n[2];
  __int128 v130[8];
  __int128 v131[8];
  __int128 v132[8];
  __int128 v133[8];
  __int128 v134[8];
  __int128 v135[8];
  __int128 v136[8];
  __int128 v137[8];
  _OWORD v138[8];
  uint64_t v139;

  v37 = a32;
  v38 = a17;
  v39 = a14;
  v139 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
    {
      *__dst = *a2;
    }
    else
    {
      memcpy(__dst, a2, a3);
      v37 = a32;
      v39 = a14;
      v38 = a17;
    }
  }
  v40 = &__dst[a3];
  v41 = a4[5];
  __src[4] = a4[4];
  __src[5] = v41;
  v42 = a4[7];
  __src[6] = a4[6];
  *(_OWORD *)__n = v42;
  v43 = a4[1];
  __src[0] = *a4;
  __src[1] = v43;
  v44 = a4[3];
  __src[2] = a4[2];
  __src[3] = v44;
  v123 = a7[3];
  v122 = a7[2];
  v121 = a7[1];
  v120 = *a7;
  v127 = a7[7];
  v126 = a7[6];
  v125 = a7[5];
  v124 = a7[4];
  v115 = a11[3];
  v114 = a11[2];
  v113 = a11[1];
  v112 = *a11;
  v119 = a11[7];
  v118 = a11[6];
  v117 = a11[5];
  v116 = a11[4];
  v107 = v39[3];
  v106 = v39[2];
  v104 = *v39;
  v105 = v39[1];
  v111 = v39[7];
  v110 = v39[6];
  v109 = v39[5];
  v108 = v39[4];
  v98 = v38[2];
  v99 = v38[3];
  v96 = *v38;
  v97 = v38[1];
  v102 = v38[6];
  v103 = v38[7];
  v100 = v38[4];
  v101 = v38[5];
  v90 = a20[2];
  v91 = a20[3];
  v88 = *a20;
  v89 = a20[1];
  v94 = a20[6];
  v95 = a20[7];
  v92 = a20[4];
  v93 = a20[5];
  v82 = a23[2];
  v83 = a23[3];
  v80 = *a23;
  v81 = a23[1];
  v86 = a23[6];
  v87 = a23[7];
  v84 = a23[4];
  v85 = a23[5];
  v74 = a26[2];
  v75 = a26[3];
  v72 = *a26;
  v73 = a26[1];
  v78 = a26[6];
  v79 = a26[7];
  v76 = a26[4];
  v77 = a26[5];
  v66 = a29[2];
  v67 = a29[3];
  v64 = *a29;
  v65 = a29[1];
  v70 = a29[6];
  v71 = a29[7];
  v68 = a29[4];
  v69 = a29[5];
  v58 = v37[2];
  v59 = v37[3];
  v56 = *v37;
  v57 = v37[1];
  v62 = v37[6];
  v63 = v37[7];
  v60 = v37[4];
  v61 = v37[5];
  v45 = HIDWORD(__n[1]);
  if (HIDWORD(__n[1]))
  {
    if (HIDWORD(__n[1]) == 1)
      *v40 = __src[0];
    else
      memcpy(&__dst[a3], __src, HIDWORD(__n[1]));
  }
  v46 = a30;
  v47 = a27;
  v48 = a28;
  v49 = a24;
  v50 = a18;
  v51 = &v40[v45];
  v52 = a33;
  if (a6)
  {
    if (a6 == 1)
    {
      *v51 = *a5;
    }
    else
    {
      memcpy(v51, a5, a6);
      v52 = a33;
      v50 = a18;
      v46 = a30;
      v47 = a27;
      v48 = a28;
      v49 = a24;
    }
  }
  v138[4] = v124;
  v138[5] = v125;
  v138[6] = v126;
  v138[7] = v127;
  v138[0] = v120;
  v138[1] = v121;
  v138[2] = v122;
  v138[3] = v123;
  v137[3] = v115;
  v137[2] = v114;
  v137[1] = v113;
  v137[0] = v112;
  v137[7] = v119;
  v137[6] = v118;
  v137[5] = v117;
  v137[4] = v116;
  v136[3] = v107;
  v136[2] = v106;
  v136[1] = v105;
  v136[0] = v104;
  v136[7] = v111;
  v136[6] = v110;
  v136[5] = v109;
  v136[4] = v108;
  v135[3] = v99;
  v135[2] = v98;
  v135[1] = v97;
  v135[0] = v96;
  v135[7] = v103;
  v135[6] = v102;
  v135[5] = v101;
  v135[4] = v100;
  v134[3] = v91;
  v134[2] = v90;
  v134[1] = v89;
  v134[0] = v88;
  v134[7] = v95;
  v134[6] = v94;
  v134[5] = v93;
  v134[4] = v92;
  v133[3] = v83;
  v133[2] = v82;
  v133[1] = v81;
  v133[0] = v80;
  v133[7] = v87;
  v133[6] = v86;
  v133[5] = v85;
  v133[4] = v84;
  v132[3] = v75;
  v132[2] = v74;
  v132[1] = v73;
  v132[0] = v72;
  v132[7] = v79;
  v132[6] = v78;
  v132[5] = v77;
  v132[4] = v76;
  v131[3] = v67;
  v131[2] = v66;
  v131[1] = v65;
  v131[0] = v64;
  v131[7] = v71;
  v131[6] = v70;
  v131[5] = v69;
  v131[4] = v68;
  v130[3] = v59;
  v130[2] = v58;
  v130[1] = v57;
  v130[0] = v56;
  v130[7] = v63;
  v130[6] = v62;
  v130[5] = v61;
  v130[4] = v60;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&v51[a6], (unsigned int *)v138, a9, a10, v137, a12, a13, v136, a15, a16, v135, v50, a19, v134, a21, a22, v133, v49, a25,
           v132,
           v47,
           v48,
           v131,
           v46,
           a31,
           v130,
           v52);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, unsigned int *__src, char *a3, unsigned int a4, __int128 *a5, char *a6, unsigned int a7, __int128 *a8, _BYTE *a9, uint64_t a10, __int128 *a11, char *a12, uint64_t a13, __int128 *a14, _BYTE *a15, uint64_t a16, __int128 *a17, _BYTE *a18, uint64_t a19, __int128 *a20,_BYTE *a21,uint64_t a22,__int128 *a23,_BYTE *a24,uint64_t a25,__int128 *a26,uint64_t a27)
{
  __int128 *v32;
  __int128 *v33;
  size_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _BYTE *v38;
  char *v39;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD __srca[7];
  size_t __n[2];
  __int128 v110[8];
  __int128 v111[8];
  __int128 v112[8];
  __int128 v113[8];
  __int128 v114[8];
  __int128 v115[8];
  _OWORD v116[8];
  uint64_t v117;

  v32 = a20;
  v33 = a17;
  v117 = *MEMORY[0x1E0C80C00];
  v34 = __src[31];
  if ((_DWORD)v34)
  {
    if ((_DWORD)v34 == 1)
    {
      *__dst = *(_BYTE *)__src;
    }
    else
    {
      memcpy(__dst, __src, v34);
      v33 = a17;
      v32 = a20;
    }
  }
  v35 = __src[31];
  v36 = &__dst[v35];
  v104 = a5[4];
  v105 = a5[5];
  v106 = a5[6];
  v107 = a5[7];
  v100 = *a5;
  v101 = a5[1];
  v102 = a5[2];
  v103 = a5[3];
  v94 = a8[2];
  v95 = a8[3];
  v92 = *a8;
  v93 = a8[1];
  v99 = a8[7];
  v97 = a8[5];
  v98 = a8[6];
  v96 = a8[4];
  v86 = a11[2];
  v87 = a11[3];
  v84 = *a11;
  v85 = a11[1];
  v90 = a11[6];
  v91 = a11[7];
  v88 = a11[4];
  v89 = a11[5];
  v78 = a14[2];
  v79 = a14[3];
  v76 = *a14;
  v77 = a14[1];
  v82 = a14[6];
  v83 = a14[7];
  v80 = a14[4];
  v81 = a14[5];
  v70 = v33[2];
  v71 = v33[3];
  v68 = *v33;
  v69 = v33[1];
  v74 = v33[6];
  v75 = v33[7];
  v72 = v33[4];
  v73 = v33[5];
  v62 = v32[2];
  v63 = v32[3];
  v60 = *v32;
  v61 = v32[1];
  v66 = v32[6];
  v67 = v32[7];
  v64 = v32[4];
  v65 = v32[5];
  v54 = a23[2];
  v55 = a23[3];
  v52 = *a23;
  v53 = a23[1];
  v58 = a23[6];
  v59 = a23[7];
  v56 = a23[4];
  v57 = a23[5];
  v46 = a26[2];
  v47 = a26[3];
  v44 = *a26;
  v45 = a26[1];
  v50 = a26[6];
  v51 = a26[7];
  v48 = a26[4];
  v49 = a26[5];
  if (a4)
  {
    if (a4 == 1)
      *v36 = *a3;
    else
      memcpy(&__dst[v35], a3, a4);
  }
  v37 = &v36[a4];
  __srca[4] = v104;
  __srca[5] = v105;
  *(_OWORD *)__n = v107;
  __srca[6] = v106;
  __srca[0] = v100;
  __srca[1] = v101;
  __srca[2] = v102;
  __srca[3] = v103;
  if (HIDWORD(v107))
  {
    if (HIDWORD(v107) == 1)
      *v37 = __srca[0];
    else
      memcpy(v37, __srca, HIDWORD(v107));
  }
  v38 = a15;
  v39 = &v37[HIDWORD(v107)];
  if (a7)
  {
    if (a7 == 1)
    {
      *v39 = *a6;
    }
    else
    {
      memcpy(v39, a6, a7);
      v38 = a15;
    }
  }
  v116[4] = v96;
  v116[5] = v97;
  v116[6] = v98;
  v116[7] = v99;
  v116[0] = v92;
  v116[1] = v93;
  v116[2] = v94;
  v116[3] = v95;
  v115[3] = v87;
  v115[2] = v86;
  v115[1] = v85;
  v115[0] = v84;
  v115[7] = v91;
  v115[6] = v90;
  v115[5] = v89;
  v115[4] = v88;
  v114[3] = v79;
  v114[2] = v78;
  v114[1] = v77;
  v114[0] = v76;
  v114[7] = v83;
  v114[6] = v82;
  v114[5] = v81;
  v114[4] = v80;
  v113[3] = v71;
  v113[2] = v70;
  v113[1] = v69;
  v113[0] = v68;
  v113[7] = v75;
  v113[6] = v74;
  v113[5] = v73;
  v113[4] = v72;
  v112[3] = v63;
  v112[2] = v62;
  v112[1] = v61;
  v112[0] = v60;
  v112[7] = v67;
  v112[6] = v66;
  v112[5] = v65;
  v112[4] = v64;
  v111[3] = v55;
  v111[2] = v54;
  v111[1] = v53;
  v111[0] = v52;
  v111[7] = v59;
  v111[6] = v58;
  v111[5] = v57;
  v111[4] = v56;
  v110[3] = v47;
  v110[2] = v46;
  v110[1] = v45;
  v110[0] = v44;
  v110[7] = v51;
  v110[6] = v50;
  v110[5] = v49;
  v110[4] = v48;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&v39[a7], (unsigned int *)v116, a9, a10, v115, a12, a13, v114, v38, a16, v113, a18, a19, v112, a21, a22, v111, a24, a25,
           v110,
           a27);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, unsigned int *__src, _BYTE *a3, unsigned int a4, __int128 *a5, char *a6, unsigned int a7, __int128 *a8, _BYTE *a9, uint64_t a10, __int128 *a11, _BYTE *a12, uint64_t a13, __int128 *a14, _BYTE *a15, uint64_t a16, __int128 *a17, _BYTE *a18, uint64_t a19, __int128 *a20,uint64_t a21)
{
  unsigned int v22;
  unsigned int v24;
  size_t v28;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD __srca[7];
  size_t __n[2];
  _OWORD v89[7];
  size_t v90[2];
  __int128 v91[8];
  __int128 v92[8];
  __int128 v93[8];
  _OWORD v94[8];
  uint64_t v95;

  v22 = a7;
  v24 = a4;
  v95 = *MEMORY[0x1E0C80C00];
  v28 = __src[31];
  if ((_DWORD)v28)
  {
    if ((_DWORD)v28 == 1)
    {
      *__dst = *(_BYTE *)__src;
    }
    else
    {
      v30 = a3;
      memcpy(__dst, __src, v28);
      a3 = v30;
      v22 = a7;
      v24 = a4;
    }
  }
  v31 = __src[31];
  v32 = &__dst[v31];
  v83 = a5[4];
  v84 = a5[5];
  v85 = a5[6];
  v86 = a5[7];
  v79 = *a5;
  v80 = a5[1];
  v81 = a5[2];
  v82 = a5[3];
  v73 = a8[2];
  v74 = a8[3];
  v71 = *a8;
  v72 = a8[1];
  v77 = a8[6];
  v78 = a8[7];
  v75 = a8[4];
  v76 = a8[5];
  v65 = a11[2];
  v66 = a11[3];
  v63 = *a11;
  v64 = a11[1];
  v69 = a11[6];
  v70 = a11[7];
  v67 = a11[4];
  v68 = a11[5];
  v57 = a14[2];
  v58 = a14[3];
  v55 = *a14;
  v56 = a14[1];
  v61 = a14[6];
  v62 = a14[7];
  v59 = a14[4];
  v60 = a14[5];
  v49 = a17[2];
  v50 = a17[3];
  v47 = *a17;
  v48 = a17[1];
  v53 = a17[6];
  v54 = a17[7];
  v51 = a17[4];
  v52 = a17[5];
  v41 = a20[2];
  v42 = a20[3];
  v39 = *a20;
  v40 = a20[1];
  v45 = a20[6];
  v46 = a20[7];
  v43 = a20[4];
  v44 = a20[5];
  if (v24)
  {
    if (v24 == 1)
      *v32 = *a3;
    else
      memcpy(&__dst[v31], a3, v24);
  }
  v33 = &v32[v24];
  __srca[4] = v83;
  __srca[5] = v84;
  __srca[6] = v85;
  *(_OWORD *)__n = v86;
  __srca[0] = v79;
  __srca[1] = v80;
  __srca[2] = v81;
  __srca[3] = v82;
  if (HIDWORD(v86))
  {
    if (HIDWORD(v86) == 1)
      *v33 = __srca[0];
    else
      memcpy(v33, __srca, HIDWORD(v86));
  }
  v34 = &v33[HIDWORD(v86)];
  if (v22)
  {
    if (v22 == 1)
      *v34 = *a6;
    else
      memcpy(v34, a6, v22);
  }
  v35 = &v34[v22];
  v89[4] = v75;
  v89[5] = v76;
  v89[6] = v77;
  *(_OWORD *)v90 = v78;
  v89[0] = v71;
  v89[1] = v72;
  v89[2] = v73;
  v89[3] = v74;
  if (HIDWORD(v78))
  {
    if (HIDWORD(v78) == 1)
      *v35 = v89[0];
    else
      memcpy(v35, v89, HIDWORD(v78));
  }
  v94[4] = v67;
  v94[5] = v68;
  v94[6] = v69;
  v94[7] = v70;
  v94[0] = v63;
  v94[1] = v64;
  v94[2] = v65;
  v94[3] = v66;
  v93[3] = v58;
  v93[2] = v57;
  v93[1] = v56;
  v93[0] = v55;
  v93[7] = v62;
  v93[6] = v61;
  v93[5] = v60;
  v93[4] = v59;
  v92[3] = v50;
  v92[2] = v49;
  v92[1] = v48;
  v92[0] = v47;
  v92[7] = v54;
  v92[6] = v53;
  v92[5] = v52;
  v92[4] = v51;
  v91[3] = v42;
  v91[2] = v41;
  v91[1] = v40;
  v91[0] = v39;
  v91[7] = v46;
  v91[6] = v45;
  v91[5] = v44;
  v91[4] = v43;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&v35[HIDWORD(v78)], a9, a10, v94, a12, a13, v93, (int)a8, a15, a16, v92, a18, a19, v91, a21);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t *a9, int a10, int8x16_t *a11, int8x16_t *a12, int a13, int8x16_t *a14, int8x16_t *a15, int a16, int8x16_t *a17, int8x16_t *a18, int a19, int8x16_t *a20,int8x16_t *a21,int a22,int8x16_t *a23,int8x16_t *a24,int a25,__int128 *a26,int8x16_t *a27,int a28,__int128 *a29,int8x16_t *a30,int a31,int8x16_t *a32,int8x16_t *a33,int a34,__int128 *a35,int8x16_t *a36,int a37,__int128 *a38,int8x16_t *a39,int a40,__int128 *a41,int8x16_t *a42,int a43,__int128 *a44,int8x16_t *a45,int a46,__int128 *a47,unsigned __int8 a48)
{
  uint64_t v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int v54;
  int8x16_t *v55;
  uint64_t v56;
  char *v57;
  int8x16_t *v58;
  char *v59;
  __int128 v60;
  char *v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  char *v65;
  char *v66;
  char *v67;
  __int16 v68;
  char *v69;
  char *v70;
  __int16 v71;
  char *v73;
  __int128 v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  __int128 v201[8];
  __int128 v202[8];
  __int128 v203[8];
  __int128 v204[8];
  __int128 v205[8];
  int8x16_t v206[8];
  __int128 v207[8];
  __int128 v208[8];
  int8x16_t v209[8];
  int8x16_t v210[8];
  int8x16_t v211[8];
  int8x16_t v212[8];
  int8x16_t v213[8];
  int8x16_t v214[8];
  int8x16_t v215[8];
  uint64_t v216;
  int8x16x2_t v217;
  int8x16x2_t v218;
  int8x16x2_t v219;
  int8x16x2_t v220;
  int8x16x2_t v221;
  int8x16x2_t v222;

  v48 = MEMORY[0x1E0C80A78](a1, a2);
  v216 = *MEMORY[0x1E0C80C00];
  v56 = v49[7].u32[3];
  v57 = (char *)(v48 + 2 * v56);
  v58 = v49;
  v59 = (char *)v48;
  if (v56 >= 0x40)
  {
    v59 = (char *)(v48 + 2 * (v56 & 0xFFFFFFC0));
    v60 = 0uLL;
    v58 = v49;
    v61 = (char *)v48;
    do
    {
      v217.val[0] = *v58;
      v62 = v58[1];
      v219.val[0] = v58[2];
      v63 = v58[3];
      v58 += 4;
      v64 = v63;
      v219.val[1] = 0uLL;
      v221.val[0] = v62;
      v217.val[1] = 0uLL;
      v65 = v61;
      vst2q_s8(v65, v217);
      v65 += 32;
      v221.val[1] = 0uLL;
      vst2q_s8(v65, v221);
      v66 = v61 + 64;
      vst2q_s8(v66, v219);
      v67 = v61 + 96;
      vst2q_s8(v67, *(int8x16x2_t *)(&v60 - 1));
      v61 += 128;
    }
    while (v61 != v59);
  }
  while (v59 != v57)
  {
    v68 = v58->u8[0];
    v58 = (int8x16_t *)((char *)v58 + 1);
    *(_WORD *)v59 = v68;
    v59 += 2;
  }
  v69 = (char *)(v48 + 2 * v49[7].u32[3]);
  v197 = v52[4];
  v198 = v52[5];
  v199 = v52[6];
  v200 = v52[7];
  v193 = *v52;
  v194 = v52[1];
  v195 = v52[2];
  v196 = v52[3];
  v188 = v55[3];
  v187 = v55[2];
  v186 = v55[1];
  v185 = *v55;
  v192 = v55[7];
  v191 = v55[6];
  v190 = v55[5];
  v189 = v55[4];
  v180 = a11[3];
  v179 = a11[2];
  v178 = a11[1];
  v177 = *a11;
  v184 = a11[7];
  v183 = a11[6];
  v182 = a11[5];
  v181 = a11[4];
  v172 = a14[3];
  v171 = a14[2];
  v170 = a14[1];
  v169 = *a14;
  v176 = a14[7];
  v175 = a14[6];
  v174 = a14[5];
  v173 = a14[4];
  v164 = a17[3];
  v163 = a17[2];
  v162 = a17[1];
  v161 = *a17;
  v168 = a17[7];
  v167 = a17[6];
  v166 = a17[5];
  v165 = a17[4];
  v156 = a20[3];
  v155 = a20[2];
  v154 = a20[1];
  v153 = *a20;
  v160 = a20[7];
  v159 = a20[6];
  v158 = a20[5];
  v157 = a20[4];
  v148 = a23[3];
  v147 = a23[2];
  v146 = a23[1];
  v145 = *a23;
  v152 = a23[7];
  v151 = a23[6];
  v150 = a23[5];
  v149 = a23[4];
  v140 = a26[3];
  v139 = a26[2];
  v138 = a26[1];
  v137 = *a26;
  v144 = a26[7];
  v143 = a26[6];
  v142 = a26[5];
  v141 = a26[4];
  v132 = a29[3];
  v131 = a29[2];
  v130 = a29[1];
  v129 = *a29;
  v136 = a29[7];
  v135 = a29[6];
  v134 = a29[5];
  v133 = a29[4];
  v123 = a32[2];
  v124 = a32[3];
  v121 = *a32;
  v122 = a32[1];
  v128 = a32[7];
  v127 = a32[6];
  v126 = a32[5];
  v125 = a32[4];
  v115 = a35[2];
  v116 = a35[3];
  v113 = *a35;
  v114 = a35[1];
  v119 = a35[6];
  v120 = a35[7];
  v117 = a35[4];
  v118 = a35[5];
  v107 = a38[2];
  v108 = a38[3];
  v105 = *a38;
  v106 = a38[1];
  v111 = a38[6];
  v112 = a38[7];
  v109 = a38[4];
  v110 = a38[5];
  v99 = a41[2];
  v100 = a41[3];
  v97 = *a41;
  v98 = a41[1];
  v103 = a41[6];
  v104 = a41[7];
  v101 = a41[4];
  v102 = a41[5];
  v91 = a44[2];
  v92 = a44[3];
  v89 = *a44;
  v90 = a44[1];
  v95 = a44[6];
  v96 = a44[7];
  v93 = a44[4];
  v94 = a44[5];
  v83 = a47[2];
  v84 = a47[3];
  v81 = *a47;
  v82 = a47[1];
  v87 = a47[6];
  v88 = a47[7];
  v70 = &v69[2 * v51];
  v85 = a47[4];
  v86 = a47[5];
  if ((v51 & 0xFFFFFFC0) != 0)
  {
    v73 = &v69[2 * (v51 & 0xFFFFFFC0)];
    v74 = 0uLL;
    do
    {
      v218.val[0] = *v50;
      v75 = v50[1];
      v220.val[0] = v50[2];
      v76 = v50[3];
      v50 += 4;
      v77 = v76;
      v220.val[1] = 0uLL;
      v222.val[0] = v75;
      v218.val[1] = 0uLL;
      v78 = v69;
      vst2q_s8(v78, v218);
      v78 += 32;
      v222.val[1] = 0uLL;
      vst2q_s8(v78, v222);
      v79 = v69 + 64;
      vst2q_s8(v79, v220);
      v80 = v69 + 96;
      vst2q_s8(v80, *(int8x16x2_t *)(&v74 - 1));
      v69 += 128;
    }
    while (v69 != v73);
    v69 = v73;
  }
  while (v69 != v70)
  {
    v71 = v50->u8[0];
    v50 = (int8x16_t *)((char *)v50 + 1);
    *(_WORD *)v69 = v71;
    v69 += 2;
  }
  v215[4] = v197;
  v215[5] = v198;
  v215[6] = v199;
  v215[7] = v200;
  v215[0] = v193;
  v215[1] = v194;
  v215[2] = v195;
  v215[3] = v196;
  v214[3] = v188;
  v214[2] = v187;
  v214[1] = v186;
  v214[0] = v185;
  v214[7] = v192;
  v214[6] = v191;
  v214[5] = v190;
  v214[4] = v189;
  v213[3] = v180;
  v213[2] = v179;
  v213[1] = v178;
  v213[0] = v177;
  v213[7] = v184;
  v213[6] = v183;
  v213[5] = v182;
  v213[4] = v181;
  v212[3] = v172;
  v212[2] = v171;
  v212[1] = v170;
  v212[0] = v169;
  v212[7] = v176;
  v212[6] = v175;
  v212[5] = v174;
  v212[4] = v173;
  v211[3] = v164;
  v211[2] = v163;
  v211[1] = v162;
  v211[0] = v161;
  v211[7] = v168;
  v211[6] = v167;
  v211[5] = v166;
  v211[4] = v165;
  v210[3] = v156;
  v210[2] = v155;
  v210[1] = v154;
  v210[0] = v153;
  v210[7] = v160;
  v210[6] = v159;
  v210[5] = v158;
  v210[4] = v157;
  v209[3] = v148;
  v209[2] = v147;
  v209[1] = v146;
  v209[0] = v145;
  v209[7] = v152;
  v209[6] = v151;
  v209[5] = v150;
  v209[4] = v149;
  v208[3] = v140;
  v208[2] = v139;
  v208[1] = v138;
  v208[0] = v137;
  v208[7] = v144;
  v208[6] = v143;
  v208[5] = v142;
  v208[4] = v141;
  v207[3] = v132;
  v207[2] = v131;
  v207[1] = v130;
  v207[0] = v129;
  v207[7] = v136;
  v207[6] = v135;
  v207[5] = v134;
  v207[4] = v133;
  v206[3] = v124;
  v206[2] = v123;
  v206[1] = v122;
  v206[0] = v121;
  v206[7] = v128;
  v206[6] = v127;
  v206[5] = v126;
  v206[4] = v125;
  v205[3] = v116;
  v205[2] = v115;
  v205[1] = v114;
  v205[0] = v113;
  v205[7] = v120;
  v205[6] = v119;
  v205[5] = v118;
  v205[4] = v117;
  v204[3] = v108;
  v204[2] = v107;
  v204[1] = v106;
  v204[0] = v105;
  v204[7] = v112;
  v204[6] = v111;
  v204[5] = v110;
  v204[4] = v109;
  v203[3] = v100;
  v203[2] = v99;
  v203[1] = v98;
  v203[0] = v97;
  v203[7] = v104;
  v203[6] = v103;
  v203[5] = v102;
  v203[4] = v101;
  v202[3] = v92;
  v202[2] = v91;
  v202[1] = v90;
  v202[0] = v89;
  v202[7] = v96;
  v202[6] = v95;
  v202[5] = v94;
  v202[4] = v93;
  v201[3] = v84;
  v201[2] = v83;
  v201[1] = v82;
  v201[0] = v81;
  v201[7] = v88;
  v201[6] = v87;
  v201[5] = v86;
  v201[4] = v85;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v70, v215, v53, v54, v214, a9, a10, v213, a12, a13, v212, a15, a16, v211, a18, a19, v210, a21, a22,
           v209,
           a24,
           a25,
           v208,
           a27,
           a28,
           v207,
           a30,
           a31,
           v206,
           a33,
           a34,
           v205,
           a36,
           a37,
           v204,
           a39,
           a40,
           v203,
           a42,
           a43,
           v202,
           a45,
           a46,
           v201,
           a48);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, int a7, int8x16_t *a8, int8x16_t *a9, int a10, int8x16_t *a11, int8x16_t *a12, int a13, int8x16_t *a14, int8x16_t *a15, int a16, int8x16_t *a17, int8x16_t *a18, int a19, int8x16_t *a20,int8x16_t *a21,int a22,__int128 *a23,int8x16_t *a24,int a25,__int128 *a26,int8x16_t *a27,int a28,int8x16_t *a29,int8x16_t *a30,int a31,__int128 *a32,int8x16_t *a33,int a34,__int128 *a35,int8x16_t *a36,int a37,__int128 *a38,int8x16_t *a39,int a40,__int128 *a41,int8x16_t *a42,int a43,__int128 *a44,unsigned __int8 a45)
{
  uint64_t v46;
  char *v47;
  int8x16_t *v48;
  char *v49;
  __int128 v50;
  char *v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int16 v58;
  char *v59;
  char *v60;
  int8x16_t *v61;
  __int16 v62;
  char *v64;
  __int128 v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  __int128 v184[8];
  __int128 v185[8];
  __int128 v186[8];
  __int128 v187[8];
  __int128 v188[8];
  int8x16_t v189[8];
  __int128 v190[8];
  __int128 v191[8];
  int8x16_t v192[8];
  int8x16_t v193[8];
  int8x16_t v194[8];
  int8x16_t v195[8];
  int8x16_t v196[8];
  int8x16_t v197[8];
  uint64_t v198;
  int8x16x2_t v199;
  int8x16x2_t v200;
  int8x16x2_t v201;
  int8x16x2_t v202;
  int8x16x2_t v203;
  int8x16x2_t v204;

  v198 = *MEMORY[0x1E0C80C00];
  v46 = a2[7].u32[3];
  v47 = &a1[2 * v46];
  v48 = a2;
  v49 = a1;
  if (v46 >= 0x40)
  {
    v49 = &a1[2 * (v46 & 0xFFFFFFC0)];
    v50 = 0uLL;
    v48 = a2;
    v51 = a1;
    do
    {
      v199.val[0] = *v48;
      v52 = v48[1];
      v201.val[0] = v48[2];
      v53 = v48[3];
      v48 += 4;
      v54 = v53;
      v201.val[1] = 0uLL;
      v203.val[0] = v52;
      v199.val[1] = 0uLL;
      v55 = v51;
      vst2q_s8(v55, v199);
      v55 += 32;
      v203.val[1] = 0uLL;
      vst2q_s8(v55, v203);
      v56 = v51 + 64;
      vst2q_s8(v56, v201);
      v57 = v51 + 96;
      vst2q_s8(v57, *(int8x16x2_t *)(&v50 - 1));
      v51 += 128;
    }
    while (v51 != v49);
  }
  while (v49 != v47)
  {
    v58 = v48->u8[0];
    v48 = (int8x16_t *)((char *)v48 + 1);
    *(_WORD *)v49 = v58;
    v49 += 2;
  }
  v59 = &a1[2 * a2[7].u32[3]];
  v180 = a5[4];
  v181 = a5[5];
  v182 = a5[6];
  v183 = a5[7];
  v176 = *a5;
  v177 = a5[1];
  v178 = a5[2];
  v179 = a5[3];
  v171 = a8[3];
  v170 = a8[2];
  v169 = a8[1];
  v168 = *a8;
  v175 = a8[7];
  v174 = a8[6];
  v173 = a8[5];
  v172 = a8[4];
  v163 = a11[3];
  v162 = a11[2];
  v161 = a11[1];
  v160 = *a11;
  v167 = a11[7];
  v166 = a11[6];
  v165 = a11[5];
  v164 = a11[4];
  v155 = a14[3];
  v154 = a14[2];
  v153 = a14[1];
  v152 = *a14;
  v159 = a14[7];
  v158 = a14[6];
  v157 = a14[5];
  v156 = a14[4];
  v147 = a17[3];
  v146 = a17[2];
  v145 = a17[1];
  v144 = *a17;
  v151 = a17[7];
  v150 = a17[6];
  v149 = a17[5];
  v148 = a17[4];
  v139 = a20[3];
  v138 = a20[2];
  v137 = a20[1];
  v136 = *a20;
  v143 = a20[7];
  v142 = a20[6];
  v141 = a20[5];
  v140 = a20[4];
  v131 = a23[3];
  v130 = a23[2];
  v129 = a23[1];
  v128 = *a23;
  v135 = a23[7];
  v134 = a23[6];
  v133 = a23[5];
  v132 = a23[4];
  v123 = a26[3];
  v122 = a26[2];
  v121 = a26[1];
  v120 = *a26;
  v127 = a26[7];
  v126 = a26[6];
  v125 = a26[5];
  v124 = a26[4];
  v114 = a29[2];
  v115 = a29[3];
  v112 = *a29;
  v113 = a29[1];
  v119 = a29[7];
  v117 = a29[5];
  v118 = a29[6];
  v116 = a29[4];
  v106 = a32[2];
  v107 = a32[3];
  v104 = *a32;
  v105 = a32[1];
  v110 = a32[6];
  v111 = a32[7];
  v108 = a32[4];
  v109 = a32[5];
  v98 = a35[2];
  v99 = a35[3];
  v96 = *a35;
  v97 = a35[1];
  v102 = a35[6];
  v103 = a35[7];
  v100 = a35[4];
  v101 = a35[5];
  v90 = a38[2];
  v91 = a38[3];
  v88 = *a38;
  v89 = a38[1];
  v94 = a38[6];
  v95 = a38[7];
  v92 = a38[4];
  v93 = a38[5];
  v82 = a41[2];
  v83 = a41[3];
  v80 = *a41;
  v81 = a41[1];
  v86 = a41[6];
  v87 = a41[7];
  v84 = a41[4];
  v85 = a41[5];
  v74 = a44[2];
  v75 = a44[3];
  v72 = *a44;
  v73 = a44[1];
  v78 = a44[6];
  v79 = a44[7];
  v60 = &v59[2 * a4];
  v76 = a44[4];
  v77 = a44[5];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v64 = &v59[2 * (a4 & 0xFFFFFFC0)];
    v65 = 0uLL;
    do
    {
      v200.val[0] = *a3;
      v66 = a3[1];
      v202.val[0] = a3[2];
      v67 = a3[3];
      a3 += 4;
      v68 = v67;
      v202.val[1] = 0uLL;
      v204.val[0] = v66;
      v200.val[1] = 0uLL;
      v69 = v59;
      vst2q_s8(v69, v200);
      v69 += 32;
      v204.val[1] = 0uLL;
      vst2q_s8(v69, v204);
      v70 = v59 + 64;
      vst2q_s8(v70, v202);
      v71 = v59 + 96;
      vst2q_s8(v71, *(int8x16x2_t *)(&v65 - 1));
      v59 += 128;
    }
    while (v59 != v64);
    v61 = a6;
    v59 = v64;
  }
  else
  {
    v61 = a6;
  }
  while (v59 != v60)
  {
    v62 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v59 = v62;
    v59 += 2;
  }
  v197[4] = v180;
  v197[5] = v181;
  v197[6] = v182;
  v197[7] = v183;
  v197[0] = v176;
  v197[1] = v177;
  v197[2] = v178;
  v197[3] = v179;
  v196[3] = v171;
  v196[2] = v170;
  v196[1] = v169;
  v196[0] = v168;
  v196[7] = v175;
  v196[6] = v174;
  v196[5] = v173;
  v196[4] = v172;
  v195[3] = v163;
  v195[2] = v162;
  v195[1] = v161;
  v195[0] = v160;
  v195[7] = v167;
  v195[6] = v166;
  v195[5] = v165;
  v195[4] = v164;
  v194[3] = v155;
  v194[2] = v154;
  v194[1] = v153;
  v194[0] = v152;
  v194[7] = v159;
  v194[6] = v158;
  v194[5] = v157;
  v194[4] = v156;
  v193[3] = v147;
  v193[2] = v146;
  v193[1] = v145;
  v193[0] = v144;
  v193[7] = v151;
  v193[6] = v150;
  v193[5] = v149;
  v193[4] = v148;
  v192[3] = v139;
  v192[2] = v138;
  v192[1] = v137;
  v192[0] = v136;
  v192[7] = v143;
  v192[6] = v142;
  v192[5] = v141;
  v192[4] = v140;
  v191[3] = v131;
  v191[2] = v130;
  v191[1] = v129;
  v191[0] = v128;
  v191[7] = v135;
  v191[6] = v134;
  v191[5] = v133;
  v191[4] = v132;
  v190[3] = v123;
  v190[2] = v122;
  v190[1] = v121;
  v190[0] = v120;
  v190[7] = v127;
  v190[6] = v126;
  v190[5] = v125;
  v190[4] = v124;
  v189[3] = v115;
  v189[2] = v114;
  v189[1] = v113;
  v189[0] = v112;
  v189[7] = v119;
  v189[6] = v118;
  v189[5] = v117;
  v189[4] = v116;
  v188[3] = v107;
  v188[2] = v106;
  v188[1] = v105;
  v188[0] = v104;
  v188[7] = v111;
  v188[6] = v110;
  v188[5] = v109;
  v188[4] = v108;
  v187[3] = v99;
  v187[2] = v98;
  v187[1] = v97;
  v187[0] = v96;
  v187[7] = v103;
  v187[6] = v102;
  v187[5] = v101;
  v187[4] = v100;
  v186[3] = v91;
  v186[2] = v90;
  v186[1] = v89;
  v186[0] = v88;
  v186[7] = v95;
  v186[6] = v94;
  v186[5] = v93;
  v186[4] = v92;
  v185[3] = v83;
  v185[2] = v82;
  v185[1] = v81;
  v185[0] = v80;
  v185[7] = v87;
  v185[6] = v86;
  v185[5] = v85;
  v185[4] = v84;
  v184[3] = v75;
  v184[2] = v74;
  v184[1] = v73;
  v184[0] = v72;
  v184[7] = v79;
  v184[6] = v78;
  v184[5] = v77;
  v184[4] = v76;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v60, v197, v61, a7, v196, a9, a10, v195, a12, a13, v194, a15, a16, v193, a18, a19, v192, a21, a22,
           v191,
           a24,
           a25,
           v190,
           a27,
           a28,
           v189,
           a30,
           a31,
           v188,
           a33,
           a34,
           v187,
           a36,
           a37,
           v186,
           a39,
           a40,
           v185,
           a42,
           a43,
           v184,
           a45);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, int a7, int8x16_t *a8, int8x16_t *a9, int a10, int8x16_t *a11, int8x16_t *a12, int a13, int8x16_t *a14, int8x16_t *a15, int a16, int8x16_t *a17, int8x16_t *a18, int a19, __int128 *a20,int8x16_t *a21,int a22,__int128 *a23,int8x16_t *a24,int a25,int8x16_t *a26,int8x16_t *a27,int a28,__int128 *a29,int8x16_t *a30,int a31,__int128 *a32,int8x16_t *a33,int a34,__int128 *a35,int8x16_t *a36,int a37,__int128 *a38,int8x16_t *a39,int a40,__int128 *a41,unsigned __int8 a42)
{
  uint64_t v44;
  char *v45;
  int8x16_t *v46;
  char *v47;
  __int128 v48;
  char *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int16 v56;
  char *v57;
  char *v58;
  __int16 v59;
  char *v61;
  __int128 v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  __int128 v173[8];
  __int128 v174[8];
  __int128 v175[8];
  __int128 v176[8];
  __int128 v177[8];
  int8x16_t v178[8];
  __int128 v179[8];
  __int128 v180[8];
  int8x16_t v181[8];
  int8x16_t v182[8];
  int8x16_t v183[8];
  int8x16_t v184[8];
  int8x16_t v185[8];
  uint64_t v186;
  int8x16x2_t v187;
  int8x16x2_t v188;
  int8x16x2_t v189;
  int8x16x2_t v190;
  int8x16x2_t v191;
  int8x16x2_t v192;

  v186 = *MEMORY[0x1E0C80C00];
  v44 = a2[7].u32[3];
  v45 = &a1[2 * v44];
  v46 = a2;
  v47 = a1;
  if (v44 >= 0x40)
  {
    v47 = &a1[2 * (v44 & 0xFFFFFFC0)];
    v48 = 0uLL;
    v46 = a2;
    v49 = a1;
    do
    {
      v187.val[0] = *v46;
      v50 = v46[1];
      v189.val[0] = v46[2];
      v51 = v46[3];
      v46 += 4;
      v52 = v51;
      v189.val[1] = 0uLL;
      v191.val[0] = v50;
      v187.val[1] = 0uLL;
      v53 = v49;
      vst2q_s8(v53, v187);
      v53 += 32;
      v191.val[1] = 0uLL;
      vst2q_s8(v53, v191);
      v54 = v49 + 64;
      vst2q_s8(v54, v189);
      v55 = v49 + 96;
      vst2q_s8(v55, *(int8x16x2_t *)(&v48 - 1));
      v49 += 128;
    }
    while (v49 != v47);
  }
  while (v47 != v45)
  {
    v56 = v46->u8[0];
    v46 = (int8x16_t *)((char *)v46 + 1);
    *(_WORD *)v47 = v56;
    v47 += 2;
  }
  v57 = &a1[2 * a2[7].u32[3]];
  v169 = a5[4];
  v170 = a5[5];
  v171 = a5[6];
  v172 = a5[7];
  v165 = *a5;
  v166 = a5[1];
  v167 = a5[2];
  v168 = a5[3];
  v160 = a8[3];
  v159 = a8[2];
  v158 = a8[1];
  v157 = *a8;
  v164 = a8[7];
  v163 = a8[6];
  v162 = a8[5];
  v161 = a8[4];
  v152 = a11[3];
  v151 = a11[2];
  v150 = a11[1];
  v149 = *a11;
  v156 = a11[7];
  v155 = a11[6];
  v154 = a11[5];
  v153 = a11[4];
  v144 = a14[3];
  v143 = a14[2];
  v142 = a14[1];
  v141 = *a14;
  v148 = a14[7];
  v147 = a14[6];
  v146 = a14[5];
  v145 = a14[4];
  v136 = a17[3];
  v135 = a17[2];
  v134 = a17[1];
  v133 = *a17;
  v140 = a17[7];
  v139 = a17[6];
  v138 = a17[5];
  v137 = a17[4];
  v128 = a20[3];
  v127 = a20[2];
  v126 = a20[1];
  v125 = *a20;
  v132 = a20[7];
  v131 = a20[6];
  v130 = a20[5];
  v129 = a20[4];
  v120 = a23[3];
  v119 = a23[2];
  v118 = a23[1];
  v117 = *a23;
  v124 = a23[7];
  v123 = a23[6];
  v122 = a23[5];
  v121 = a23[4];
  v111 = a26[2];
  v112 = a26[3];
  v109 = *a26;
  v110 = a26[1];
  v115 = a26[6];
  v116 = a26[7];
  v113 = a26[4];
  v114 = a26[5];
  v103 = a29[2];
  v104 = a29[3];
  v101 = *a29;
  v102 = a29[1];
  v107 = a29[6];
  v108 = a29[7];
  v105 = a29[4];
  v106 = a29[5];
  v95 = a32[2];
  v96 = a32[3];
  v93 = *a32;
  v94 = a32[1];
  v99 = a32[6];
  v100 = a32[7];
  v97 = a32[4];
  v98 = a32[5];
  v87 = a35[2];
  v88 = a35[3];
  v85 = *a35;
  v86 = a35[1];
  v91 = a35[6];
  v92 = a35[7];
  v89 = a35[4];
  v90 = a35[5];
  v79 = a38[2];
  v80 = a38[3];
  v77 = *a38;
  v78 = a38[1];
  v83 = a38[6];
  v84 = a38[7];
  v81 = a38[4];
  v82 = a38[5];
  v71 = a41[2];
  v72 = a41[3];
  v69 = *a41;
  v70 = a41[1];
  v75 = a41[6];
  v76 = a41[7];
  v58 = &v57[2 * a4];
  v73 = a41[4];
  v74 = a41[5];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v61 = &v57[2 * (a4 & 0xFFFFFFC0)];
    v62 = 0uLL;
    do
    {
      v188.val[0] = *a3;
      v63 = a3[1];
      v190.val[0] = a3[2];
      v64 = a3[3];
      a3 += 4;
      v65 = v64;
      v190.val[1] = 0uLL;
      v192.val[0] = v63;
      v188.val[1] = 0uLL;
      v66 = v57;
      vst2q_s8(v66, v188);
      v66 += 32;
      v192.val[1] = 0uLL;
      vst2q_s8(v66, v192);
      v67 = v57 + 64;
      vst2q_s8(v67, v190);
      v68 = v57 + 96;
      vst2q_s8(v68, *(int8x16x2_t *)(&v62 - 1));
      v57 += 128;
    }
    while (v57 != v61);
    v57 = v61;
  }
  while (v57 != v58)
  {
    v59 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v57 = v59;
    v57 += 2;
  }
  v185[4] = v169;
  v185[5] = v170;
  v185[6] = v171;
  v185[7] = v172;
  v185[0] = v165;
  v185[1] = v166;
  v185[2] = v167;
  v185[3] = v168;
  v184[3] = v160;
  v184[2] = v159;
  v184[1] = v158;
  v184[0] = v157;
  v184[7] = v164;
  v184[6] = v163;
  v184[5] = v162;
  v184[4] = v161;
  v183[3] = v152;
  v183[2] = v151;
  v183[1] = v150;
  v183[0] = v149;
  v183[7] = v156;
  v183[6] = v155;
  v183[5] = v154;
  v183[4] = v153;
  v182[3] = v144;
  v182[2] = v143;
  v182[1] = v142;
  v182[0] = v141;
  v182[7] = v148;
  v182[6] = v147;
  v182[5] = v146;
  v182[4] = v145;
  v181[3] = v136;
  v181[2] = v135;
  v181[1] = v134;
  v181[0] = v133;
  v181[7] = v140;
  v181[6] = v139;
  v181[5] = v138;
  v181[4] = v137;
  v180[3] = v128;
  v180[2] = v127;
  v180[1] = v126;
  v180[0] = v125;
  v180[7] = v132;
  v180[6] = v131;
  v180[5] = v130;
  v180[4] = v129;
  v179[3] = v120;
  v179[2] = v119;
  v179[1] = v118;
  v179[0] = v117;
  v179[7] = v124;
  v179[6] = v123;
  v179[5] = v122;
  v179[4] = v121;
  v178[3] = v112;
  v178[2] = v111;
  v178[1] = v110;
  v178[0] = v109;
  v178[7] = v116;
  v178[6] = v115;
  v178[5] = v114;
  v178[4] = v113;
  v177[3] = v104;
  v177[2] = v103;
  v177[1] = v102;
  v177[0] = v101;
  v177[7] = v108;
  v177[6] = v107;
  v177[5] = v106;
  v177[4] = v105;
  v176[3] = v96;
  v176[2] = v95;
  v176[1] = v94;
  v176[0] = v93;
  v176[7] = v100;
  v176[6] = v99;
  v176[5] = v98;
  v176[4] = v97;
  v175[3] = v88;
  v175[2] = v87;
  v175[1] = v86;
  v175[0] = v85;
  v175[7] = v92;
  v175[6] = v91;
  v175[5] = v90;
  v175[4] = v89;
  v174[3] = v80;
  v174[2] = v79;
  v174[1] = v78;
  v174[0] = v77;
  v174[7] = v84;
  v174[6] = v83;
  v174[5] = v82;
  v174[4] = v81;
  v173[3] = v72;
  v173[2] = v71;
  v173[1] = v70;
  v173[0] = v69;
  v173[7] = v76;
  v173[6] = v75;
  v173[5] = v74;
  v173[4] = v73;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v58, v185, a6, a7, v184, a9, a10, v183, a12, a13, v182, a15, a16, v181, a18, a19, v180, a21, a22,
           v179,
           a24,
           a25,
           v178,
           a27,
           a28,
           v177,
           a30,
           a31,
           v176,
           a33,
           a34,
           v175,
           a36,
           a37,
           v174,
           a39,
           a40,
           v173,
           a42);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, int a7, int8x16_t *a8, int8x16_t *a9, int a10, int8x16_t *a11, int8x16_t *a12, int a13, int8x16_t *a14, int8x16_t *a15, int a16, __int128 *a17, int8x16_t *a18, int a19, __int128 *a20,int8x16_t *a21,int a22,int8x16_t *a23,int8x16_t *a24,int a25,__int128 *a26,int8x16_t *a27,int a28,__int128 *a29,int8x16_t *a30,int a31,__int128 *a32,int8x16_t *a33,int a34,__int128 *a35,int8x16_t *a36,int a37,__int128 *a38,unsigned __int8 a39)
{
  uint64_t v41;
  char *v42;
  int8x16_t *v43;
  char *v44;
  __int128 v45;
  char *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  char *v54;
  char *v55;
  __int16 v56;
  char *v58;
  __int128 v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  __int128 v162[8];
  __int128 v163[8];
  __int128 v164[8];
  __int128 v165[8];
  __int128 v166[8];
  int8x16_t v167[8];
  __int128 v168[8];
  __int128 v169[8];
  int8x16_t v170[8];
  int8x16_t v171[8];
  int8x16_t v172[8];
  int8x16_t v173[8];
  uint64_t v174;
  int8x16x2_t v175;
  int8x16x2_t v176;
  int8x16x2_t v177;
  int8x16x2_t v178;
  int8x16x2_t v179;
  int8x16x2_t v180;

  v174 = *MEMORY[0x1E0C80C00];
  v41 = a2[7].u32[3];
  v42 = &a1[2 * v41];
  v43 = a2;
  v44 = a1;
  if (v41 >= 0x40)
  {
    v44 = &a1[2 * (v41 & 0xFFFFFFC0)];
    v45 = 0uLL;
    v43 = a2;
    v46 = a1;
    do
    {
      v175.val[0] = *v43;
      v47 = v43[1];
      v177.val[0] = v43[2];
      v48 = v43[3];
      v43 += 4;
      v49 = v48;
      v177.val[1] = 0uLL;
      v179.val[0] = v47;
      v175.val[1] = 0uLL;
      v50 = v46;
      vst2q_s8(v50, v175);
      v50 += 32;
      v179.val[1] = 0uLL;
      vst2q_s8(v50, v179);
      v51 = v46 + 64;
      vst2q_s8(v51, v177);
      v52 = v46 + 96;
      vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
      v46 += 128;
    }
    while (v46 != v44);
  }
  while (v44 != v42)
  {
    v53 = v43->u8[0];
    v43 = (int8x16_t *)((char *)v43 + 1);
    *(_WORD *)v44 = v53;
    v44 += 2;
  }
  v54 = &a1[2 * a2[7].u32[3]];
  v158 = a5[4];
  v159 = a5[5];
  v160 = a5[6];
  v161 = a5[7];
  v154 = *a5;
  v155 = a5[1];
  v156 = a5[2];
  v157 = a5[3];
  v149 = a8[3];
  v148 = a8[2];
  v147 = a8[1];
  v146 = *a8;
  v153 = a8[7];
  v152 = a8[6];
  v151 = a8[5];
  v150 = a8[4];
  v141 = a11[3];
  v140 = a11[2];
  v139 = a11[1];
  v138 = *a11;
  v145 = a11[7];
  v144 = a11[6];
  v143 = a11[5];
  v142 = a11[4];
  v133 = a14[3];
  v132 = a14[2];
  v131 = a14[1];
  v130 = *a14;
  v137 = a14[7];
  v136 = a14[6];
  v135 = a14[5];
  v134 = a14[4];
  v125 = a17[3];
  v124 = a17[2];
  v123 = a17[1];
  v122 = *a17;
  v129 = a17[7];
  v128 = a17[6];
  v127 = a17[5];
  v126 = a17[4];
  v117 = a20[3];
  v115 = a20[1];
  v116 = a20[2];
  v114 = *a20;
  v121 = a20[7];
  v120 = a20[6];
  v119 = a20[5];
  v118 = a20[4];
  v108 = a23[2];
  v109 = a23[3];
  v106 = *a23;
  v107 = a23[1];
  v112 = a23[6];
  v113 = a23[7];
  v110 = a23[4];
  v111 = a23[5];
  v100 = a26[2];
  v101 = a26[3];
  v98 = *a26;
  v99 = a26[1];
  v104 = a26[6];
  v105 = a26[7];
  v102 = a26[4];
  v103 = a26[5];
  v92 = a29[2];
  v93 = a29[3];
  v90 = *a29;
  v91 = a29[1];
  v96 = a29[6];
  v97 = a29[7];
  v94 = a29[4];
  v95 = a29[5];
  v84 = a32[2];
  v85 = a32[3];
  v82 = *a32;
  v83 = a32[1];
  v88 = a32[6];
  v89 = a32[7];
  v86 = a32[4];
  v87 = a32[5];
  v76 = a35[2];
  v77 = a35[3];
  v74 = *a35;
  v75 = a35[1];
  v80 = a35[6];
  v81 = a35[7];
  v78 = a35[4];
  v79 = a35[5];
  v68 = a38[2];
  v69 = a38[3];
  v66 = *a38;
  v67 = a38[1];
  v72 = a38[6];
  v73 = a38[7];
  v55 = &v54[2 * a4];
  v70 = a38[4];
  v71 = a38[5];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v58 = &v54[2 * (a4 & 0xFFFFFFC0)];
    v59 = 0uLL;
    do
    {
      v176.val[0] = *a3;
      v60 = a3[1];
      v178.val[0] = a3[2];
      v61 = a3[3];
      a3 += 4;
      v62 = v61;
      v178.val[1] = 0uLL;
      v180.val[0] = v60;
      v176.val[1] = 0uLL;
      v63 = v54;
      vst2q_s8(v63, v176);
      v63 += 32;
      v180.val[1] = 0uLL;
      vst2q_s8(v63, v180);
      v64 = v54 + 64;
      vst2q_s8(v64, v178);
      v65 = v54 + 96;
      vst2q_s8(v65, *(int8x16x2_t *)(&v59 - 1));
      v54 += 128;
    }
    while (v54 != v58);
    v54 = v58;
  }
  while (v54 != v55)
  {
    v56 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v54 = v56;
    v54 += 2;
  }
  v173[4] = v158;
  v173[5] = v159;
  v173[6] = v160;
  v173[7] = v161;
  v173[0] = v154;
  v173[1] = v155;
  v173[2] = v156;
  v173[3] = v157;
  v172[3] = v149;
  v172[2] = v148;
  v172[1] = v147;
  v172[0] = v146;
  v172[7] = v153;
  v172[6] = v152;
  v172[5] = v151;
  v172[4] = v150;
  v171[3] = v141;
  v171[2] = v140;
  v171[1] = v139;
  v171[0] = v138;
  v171[7] = v145;
  v171[6] = v144;
  v171[5] = v143;
  v171[4] = v142;
  v170[3] = v133;
  v170[2] = v132;
  v170[1] = v131;
  v170[0] = v130;
  v170[7] = v137;
  v170[6] = v136;
  v170[5] = v135;
  v170[4] = v134;
  v169[3] = v125;
  v169[2] = v124;
  v169[1] = v123;
  v169[0] = v122;
  v169[7] = v129;
  v169[6] = v128;
  v169[5] = v127;
  v169[4] = v126;
  v168[3] = v117;
  v168[2] = v116;
  v168[1] = v115;
  v168[0] = v114;
  v168[7] = v121;
  v168[6] = v120;
  v168[5] = v119;
  v168[4] = v118;
  v167[3] = v109;
  v167[2] = v108;
  v167[1] = v107;
  v167[0] = v106;
  v167[7] = v113;
  v167[6] = v112;
  v167[5] = v111;
  v167[4] = v110;
  v166[3] = v101;
  v166[2] = v100;
  v166[1] = v99;
  v166[0] = v98;
  v166[7] = v105;
  v166[6] = v104;
  v166[5] = v103;
  v166[4] = v102;
  v165[3] = v93;
  v165[2] = v92;
  v165[1] = v91;
  v165[0] = v90;
  v165[7] = v97;
  v165[6] = v96;
  v165[5] = v95;
  v165[4] = v94;
  v164[3] = v85;
  v164[2] = v84;
  v164[1] = v83;
  v164[0] = v82;
  v164[7] = v89;
  v164[6] = v88;
  v164[5] = v87;
  v164[4] = v86;
  v163[3] = v77;
  v163[2] = v76;
  v163[1] = v75;
  v163[0] = v74;
  v163[7] = v81;
  v163[6] = v80;
  v163[5] = v79;
  v163[4] = v78;
  v162[3] = v69;
  v162[2] = v68;
  v162[1] = v67;
  v162[0] = v66;
  v162[7] = v73;
  v162[6] = v72;
  v162[5] = v71;
  v162[4] = v70;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v55, v173, a6, a7, v172, a9, a10, v171, a12, a13, v170, a15, a16, v169, a18, a19, v168, a21, a22,
           v167,
           a24,
           a25,
           v166,
           a27,
           a28,
           v165,
           a30,
           a31,
           v164,
           a33,
           a34,
           v163,
           a36,
           a37,
           v162,
           a39);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, int a7, int8x16_t *a8, int8x16_t *a9, int a10, int8x16_t *a11, int8x16_t *a12, int a13, __int128 *a14, int8x16_t *a15, int a16, __int128 *a17, int8x16_t *a18, int a19, int8x16_t *a20,int8x16_t *a21,int a22,__int128 *a23,int8x16_t *a24,int a25,__int128 *a26,int8x16_t *a27,int a28,__int128 *a29,int8x16_t *a30,int a31,__int128 *a32,int8x16_t *a33,int a34,__int128 *a35,unsigned __int8 a36)
{
  uint64_t v38;
  char *v39;
  int8x16_t *v40;
  char *v41;
  __int128 v42;
  char *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  char *v51;
  char *v52;
  __int16 v53;
  char *v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  __int128 v151[8];
  __int128 v152[8];
  __int128 v153[8];
  __int128 v154[8];
  __int128 v155[8];
  int8x16_t v156[8];
  __int128 v157[8];
  __int128 v158[8];
  int8x16_t v159[8];
  int8x16_t v160[8];
  int8x16_t v161[8];
  uint64_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;
  int8x16x2_t v165;
  int8x16x2_t v166;
  int8x16x2_t v167;
  int8x16x2_t v168;

  v162 = *MEMORY[0x1E0C80C00];
  v38 = a2[7].u32[3];
  v39 = &a1[2 * v38];
  v40 = a2;
  v41 = a1;
  if (v38 >= 0x40)
  {
    v41 = &a1[2 * (v38 & 0xFFFFFFC0)];
    v42 = 0uLL;
    v40 = a2;
    v43 = a1;
    do
    {
      v163.val[0] = *v40;
      v44 = v40[1];
      v165.val[0] = v40[2];
      v45 = v40[3];
      v40 += 4;
      v46 = v45;
      v165.val[1] = 0uLL;
      v167.val[0] = v44;
      v163.val[1] = 0uLL;
      v47 = v43;
      vst2q_s8(v47, v163);
      v47 += 32;
      v167.val[1] = 0uLL;
      vst2q_s8(v47, v167);
      v48 = v43 + 64;
      vst2q_s8(v48, v165);
      v49 = v43 + 96;
      vst2q_s8(v49, *(int8x16x2_t *)(&v42 - 1));
      v43 += 128;
    }
    while (v43 != v41);
  }
  while (v41 != v39)
  {
    v50 = v40->u8[0];
    v40 = (int8x16_t *)((char *)v40 + 1);
    *(_WORD *)v41 = v50;
    v41 += 2;
  }
  v51 = &a1[2 * a2[7].u32[3]];
  v147 = a5[4];
  v148 = a5[5];
  v149 = a5[6];
  v150 = a5[7];
  v143 = *a5;
  v144 = a5[1];
  v145 = a5[2];
  v146 = a5[3];
  v138 = a8[3];
  v137 = a8[2];
  v136 = a8[1];
  v135 = *a8;
  v142 = a8[7];
  v141 = a8[6];
  v140 = a8[5];
  v139 = a8[4];
  v130 = a11[3];
  v129 = a11[2];
  v128 = a11[1];
  v127 = *a11;
  v134 = a11[7];
  v133 = a11[6];
  v132 = a11[5];
  v131 = a11[4];
  v122 = a14[3];
  v121 = a14[2];
  v120 = a14[1];
  v119 = *a14;
  v126 = a14[7];
  v125 = a14[6];
  v124 = a14[5];
  v123 = a14[4];
  v113 = a17[2];
  v114 = a17[3];
  v111 = *a17;
  v112 = a17[1];
  v118 = a17[7];
  v117 = a17[6];
  v116 = a17[5];
  v115 = a17[4];
  v105 = a20[2];
  v106 = a20[3];
  v103 = *a20;
  v104 = a20[1];
  v109 = a20[6];
  v110 = a20[7];
  v107 = a20[4];
  v108 = a20[5];
  v97 = a23[2];
  v98 = a23[3];
  v95 = *a23;
  v96 = a23[1];
  v101 = a23[6];
  v102 = a23[7];
  v99 = a23[4];
  v100 = a23[5];
  v89 = a26[2];
  v90 = a26[3];
  v87 = *a26;
  v88 = a26[1];
  v93 = a26[6];
  v94 = a26[7];
  v91 = a26[4];
  v92 = a26[5];
  v81 = a29[2];
  v82 = a29[3];
  v79 = *a29;
  v80 = a29[1];
  v85 = a29[6];
  v86 = a29[7];
  v83 = a29[4];
  v84 = a29[5];
  v73 = a32[2];
  v74 = a32[3];
  v71 = *a32;
  v72 = a32[1];
  v77 = a32[6];
  v78 = a32[7];
  v75 = a32[4];
  v76 = a32[5];
  v65 = a35[2];
  v66 = a35[3];
  v63 = *a35;
  v64 = a35[1];
  v69 = a35[6];
  v70 = a35[7];
  v52 = &v51[2 * a4];
  v67 = a35[4];
  v68 = a35[5];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v55 = &v51[2 * (a4 & 0xFFFFFFC0)];
    v56 = 0uLL;
    do
    {
      v164.val[0] = *a3;
      v57 = a3[1];
      v166.val[0] = a3[2];
      v58 = a3[3];
      a3 += 4;
      v59 = v58;
      v166.val[1] = 0uLL;
      v168.val[0] = v57;
      v164.val[1] = 0uLL;
      v60 = v51;
      vst2q_s8(v60, v164);
      v60 += 32;
      v168.val[1] = 0uLL;
      vst2q_s8(v60, v168);
      v61 = v51 + 64;
      vst2q_s8(v61, v166);
      v62 = v51 + 96;
      vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
      v51 += 128;
    }
    while (v51 != v55);
    v51 = v55;
  }
  while (v51 != v52)
  {
    v53 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v51 = v53;
    v51 += 2;
  }
  v161[4] = v147;
  v161[5] = v148;
  v161[6] = v149;
  v161[7] = v150;
  v161[0] = v143;
  v161[1] = v144;
  v161[2] = v145;
  v161[3] = v146;
  v160[3] = v138;
  v160[2] = v137;
  v160[1] = v136;
  v160[0] = v135;
  v160[7] = v142;
  v160[6] = v141;
  v160[5] = v140;
  v160[4] = v139;
  v159[3] = v130;
  v159[2] = v129;
  v159[1] = v128;
  v159[0] = v127;
  v159[7] = v134;
  v159[6] = v133;
  v159[5] = v132;
  v159[4] = v131;
  v158[3] = v122;
  v158[2] = v121;
  v158[1] = v120;
  v158[0] = v119;
  v158[7] = v126;
  v158[6] = v125;
  v158[5] = v124;
  v158[4] = v123;
  v157[3] = v114;
  v157[2] = v113;
  v157[1] = v112;
  v157[0] = v111;
  v157[7] = v118;
  v157[6] = v117;
  v157[5] = v116;
  v157[4] = v115;
  v156[3] = v106;
  v156[2] = v105;
  v156[1] = v104;
  v156[0] = v103;
  v156[7] = v110;
  v156[6] = v109;
  v156[5] = v108;
  v156[4] = v107;
  v155[3] = v98;
  v155[2] = v97;
  v155[1] = v96;
  v155[0] = v95;
  v155[7] = v102;
  v155[6] = v101;
  v155[5] = v100;
  v155[4] = v99;
  v154[3] = v90;
  v154[2] = v89;
  v154[1] = v88;
  v154[0] = v87;
  v154[7] = v94;
  v154[6] = v93;
  v154[5] = v92;
  v154[4] = v91;
  v153[3] = v82;
  v153[2] = v81;
  v153[1] = v80;
  v153[0] = v79;
  v153[7] = v86;
  v153[6] = v85;
  v153[5] = v84;
  v153[4] = v83;
  v152[3] = v74;
  v152[2] = v73;
  v152[1] = v72;
  v152[0] = v71;
  v152[7] = v78;
  v152[6] = v77;
  v152[5] = v76;
  v152[4] = v75;
  v151[3] = v66;
  v151[2] = v65;
  v151[1] = v64;
  v151[0] = v63;
  v151[7] = v70;
  v151[6] = v69;
  v151[5] = v68;
  v151[4] = v67;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v52, v161, a6, a7, v160, a9, a10, v159, a12, a13, v158, a15, a16, v157, a18, a19, v156, a21, a22,
           v155,
           a24,
           a25,
           v154,
           a27,
           a28,
           v153,
           a30,
           a31,
           v152,
           a33,
           a34,
           v151,
           a36);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, int a7, int8x16_t *a8, int8x16_t *a9, int a10, __int128 *a11, int8x16_t *a12, int a13, __int128 *a14, int8x16_t *a15, int a16, int8x16_t *a17, int8x16_t *a18, int a19, __int128 *a20,int8x16_t *a21,int a22,__int128 *a23,int8x16_t *a24,int a25,__int128 *a26,int8x16_t *a27,int a28,__int128 *a29,int8x16_t *a30,int a31,__int128 *a32,unsigned __int8 a33)
{
  uint64_t v35;
  char *v36;
  int8x16_t *v37;
  char *v38;
  __int128 v39;
  char *v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  char *v48;
  char *v49;
  __int16 v50;
  char *v52;
  __int128 v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  __int128 v140[8];
  __int128 v141[8];
  __int128 v142[8];
  __int128 v143[8];
  __int128 v144[8];
  int8x16_t v145[8];
  __int128 v146[8];
  __int128 v147[8];
  int8x16_t v148[8];
  int8x16_t v149[8];
  uint64_t v150;
  int8x16x2_t v151;
  int8x16x2_t v152;
  int8x16x2_t v153;
  int8x16x2_t v154;
  int8x16x2_t v155;
  int8x16x2_t v156;

  v150 = *MEMORY[0x1E0C80C00];
  v35 = a2[7].u32[3];
  v36 = &a1[2 * v35];
  v37 = a2;
  v38 = a1;
  if (v35 >= 0x40)
  {
    v38 = &a1[2 * (v35 & 0xFFFFFFC0)];
    v39 = 0uLL;
    v37 = a2;
    v40 = a1;
    do
    {
      v151.val[0] = *v37;
      v41 = v37[1];
      v153.val[0] = v37[2];
      v42 = v37[3];
      v37 += 4;
      v43 = v42;
      v153.val[1] = 0uLL;
      v155.val[0] = v41;
      v151.val[1] = 0uLL;
      v44 = v40;
      vst2q_s8(v44, v151);
      v44 += 32;
      v155.val[1] = 0uLL;
      vst2q_s8(v44, v155);
      v45 = v40 + 64;
      vst2q_s8(v45, v153);
      v46 = v40 + 96;
      vst2q_s8(v46, *(int8x16x2_t *)(&v39 - 1));
      v40 += 128;
    }
    while (v40 != v38);
  }
  while (v38 != v36)
  {
    v47 = v37->u8[0];
    v37 = (int8x16_t *)((char *)v37 + 1);
    *(_WORD *)v38 = v47;
    v38 += 2;
  }
  v48 = &a1[2 * a2[7].u32[3]];
  v136 = a5[4];
  v137 = a5[5];
  v138 = a5[6];
  v139 = a5[7];
  v132 = *a5;
  v133 = a5[1];
  v134 = a5[2];
  v135 = a5[3];
  v127 = a8[3];
  v126 = a8[2];
  v125 = a8[1];
  v124 = *a8;
  v131 = a8[7];
  v130 = a8[6];
  v129 = a8[5];
  v128 = a8[4];
  v119 = a11[3];
  v118 = a11[2];
  v117 = a11[1];
  v116 = *a11;
  v123 = a11[7];
  v122 = a11[6];
  v121 = a11[5];
  v120 = a11[4];
  v110 = a14[2];
  v111 = a14[3];
  v108 = *a14;
  v109 = a14[1];
  v115 = a14[7];
  v114 = a14[6];
  v112 = a14[4];
  v113 = a14[5];
  v102 = a17[2];
  v103 = a17[3];
  v100 = *a17;
  v101 = a17[1];
  v106 = a17[6];
  v107 = a17[7];
  v104 = a17[4];
  v105 = a17[5];
  v94 = a20[2];
  v95 = a20[3];
  v92 = *a20;
  v93 = a20[1];
  v98 = a20[6];
  v99 = a20[7];
  v96 = a20[4];
  v97 = a20[5];
  v86 = a23[2];
  v87 = a23[3];
  v84 = *a23;
  v85 = a23[1];
  v90 = a23[6];
  v91 = a23[7];
  v88 = a23[4];
  v89 = a23[5];
  v78 = a26[2];
  v79 = a26[3];
  v76 = *a26;
  v77 = a26[1];
  v82 = a26[6];
  v83 = a26[7];
  v80 = a26[4];
  v81 = a26[5];
  v70 = a29[2];
  v71 = a29[3];
  v68 = *a29;
  v69 = a29[1];
  v74 = a29[6];
  v75 = a29[7];
  v72 = a29[4];
  v73 = a29[5];
  v62 = a32[2];
  v63 = a32[3];
  v60 = *a32;
  v61 = a32[1];
  v66 = a32[6];
  v67 = a32[7];
  v49 = &v48[2 * a4];
  v64 = a32[4];
  v65 = a32[5];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v52 = &v48[2 * (a4 & 0xFFFFFFC0)];
    v53 = 0uLL;
    do
    {
      v152.val[0] = *a3;
      v54 = a3[1];
      v154.val[0] = a3[2];
      v55 = a3[3];
      a3 += 4;
      v56 = v55;
      v154.val[1] = 0uLL;
      v156.val[0] = v54;
      v152.val[1] = 0uLL;
      v57 = v48;
      vst2q_s8(v57, v152);
      v57 += 32;
      v156.val[1] = 0uLL;
      vst2q_s8(v57, v156);
      v58 = v48 + 64;
      vst2q_s8(v58, v154);
      v59 = v48 + 96;
      vst2q_s8(v59, *(int8x16x2_t *)(&v53 - 1));
      v48 += 128;
    }
    while (v48 != v52);
    v48 = v52;
  }
  while (v48 != v49)
  {
    v50 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v48 = v50;
    v48 += 2;
  }
  v149[4] = v136;
  v149[5] = v137;
  v149[6] = v138;
  v149[7] = v139;
  v149[0] = v132;
  v149[1] = v133;
  v149[2] = v134;
  v149[3] = v135;
  v148[3] = v127;
  v148[2] = v126;
  v148[1] = v125;
  v148[0] = v124;
  v148[7] = v131;
  v148[6] = v130;
  v148[5] = v129;
  v148[4] = v128;
  v147[3] = v119;
  v147[2] = v118;
  v147[1] = v117;
  v147[0] = v116;
  v147[7] = v123;
  v147[6] = v122;
  v147[5] = v121;
  v147[4] = v120;
  v146[3] = v111;
  v146[2] = v110;
  v146[1] = v109;
  v146[0] = v108;
  v146[7] = v115;
  v146[6] = v114;
  v146[5] = v113;
  v146[4] = v112;
  v145[3] = v103;
  v145[2] = v102;
  v145[1] = v101;
  v145[0] = v100;
  v145[7] = v107;
  v145[6] = v106;
  v145[5] = v105;
  v145[4] = v104;
  v144[3] = v95;
  v144[2] = v94;
  v144[1] = v93;
  v144[0] = v92;
  v144[7] = v99;
  v144[6] = v98;
  v144[5] = v97;
  v144[4] = v96;
  v143[3] = v87;
  v143[2] = v86;
  v143[1] = v85;
  v143[0] = v84;
  v143[7] = v91;
  v143[6] = v90;
  v143[5] = v89;
  v143[4] = v88;
  v142[3] = v79;
  v142[2] = v78;
  v142[1] = v77;
  v142[0] = v76;
  v142[7] = v83;
  v142[6] = v82;
  v142[5] = v81;
  v142[4] = v80;
  v141[3] = v71;
  v141[2] = v70;
  v141[1] = v69;
  v141[0] = v68;
  v141[7] = v75;
  v141[6] = v74;
  v141[5] = v73;
  v141[4] = v72;
  v140[3] = v63;
  v140[2] = v62;
  v140[1] = v61;
  v140[0] = v60;
  v140[7] = v67;
  v140[6] = v66;
  v140[5] = v65;
  v140[4] = v64;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v49, v149, a6, a7, v148, a9, a10, v147, a12, a13, v146, a15, a16, v145, a18, a19, v144, a21, a22,
           v143,
           a24,
           a25,
           v142,
           a27,
           a28,
           v141,
           a30,
           a31,
           v140,
           a33);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, int a7, __int128 *a8, int8x16_t *a9, int a10, __int128 *a11, int8x16_t *a12, int a13, int8x16_t *a14, int8x16_t *a15, int a16, __int128 *a17, int8x16_t *a18, int a19, __int128 *a20,int8x16_t *a21,int a22,__int128 *a23,int8x16_t *a24,int a25,__int128 *a26,int8x16_t *a27,int a28,__int128 *a29,unsigned __int8 a30)
{
  uint64_t v32;
  char *v33;
  int8x16_t *v34;
  char *v35;
  __int128 v36;
  char *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  char *v45;
  char *v46;
  __int16 v47;
  char *v49;
  __int128 v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  __int128 v129[8];
  __int128 v130[8];
  __int128 v131[8];
  __int128 v132[8];
  __int128 v133[8];
  int8x16_t v134[8];
  __int128 v135[8];
  __int128 v136[8];
  int8x16_t v137[8];
  uint64_t v138;
  int8x16x2_t v139;
  int8x16x2_t v140;
  int8x16x2_t v141;
  int8x16x2_t v142;
  int8x16x2_t v143;
  int8x16x2_t v144;

  v138 = *MEMORY[0x1E0C80C00];
  v32 = a2[7].u32[3];
  v33 = &a1[2 * v32];
  v34 = a2;
  v35 = a1;
  if (v32 >= 0x40)
  {
    v35 = &a1[2 * (v32 & 0xFFFFFFC0)];
    v36 = 0uLL;
    v34 = a2;
    v37 = a1;
    do
    {
      v139.val[0] = *v34;
      v38 = v34[1];
      v141.val[0] = v34[2];
      v39 = v34[3];
      v34 += 4;
      v40 = v39;
      v141.val[1] = 0uLL;
      v143.val[0] = v38;
      v139.val[1] = 0uLL;
      v41 = v37;
      vst2q_s8(v41, v139);
      v41 += 32;
      v143.val[1] = 0uLL;
      vst2q_s8(v41, v143);
      v42 = v37 + 64;
      vst2q_s8(v42, v141);
      v43 = v37 + 96;
      vst2q_s8(v43, *(int8x16x2_t *)(&v36 - 1));
      v37 += 128;
    }
    while (v37 != v35);
  }
  while (v35 != v33)
  {
    v44 = v34->u8[0];
    v34 = (int8x16_t *)((char *)v34 + 1);
    *(_WORD *)v35 = v44;
    v35 += 2;
  }
  v45 = &a1[2 * a2[7].u32[3]];
  v125 = a5[4];
  v126 = a5[5];
  v127 = a5[6];
  v128 = a5[7];
  v121 = *a5;
  v122 = a5[1];
  v123 = a5[2];
  v124 = a5[3];
  v116 = a8[3];
  v115 = a8[2];
  v114 = a8[1];
  v113 = *a8;
  v120 = a8[7];
  v119 = a8[6];
  v118 = a8[5];
  v117 = a8[4];
  v107 = a11[2];
  v108 = a11[3];
  v105 = *a11;
  v106 = a11[1];
  v112 = a11[7];
  v110 = a11[5];
  v111 = a11[6];
  v109 = a11[4];
  v99 = a14[2];
  v100 = a14[3];
  v97 = *a14;
  v98 = a14[1];
  v103 = a14[6];
  v104 = a14[7];
  v101 = a14[4];
  v102 = a14[5];
  v91 = a17[2];
  v92 = a17[3];
  v89 = *a17;
  v90 = a17[1];
  v95 = a17[6];
  v96 = a17[7];
  v93 = a17[4];
  v94 = a17[5];
  v83 = a20[2];
  v84 = a20[3];
  v81 = *a20;
  v82 = a20[1];
  v87 = a20[6];
  v88 = a20[7];
  v85 = a20[4];
  v86 = a20[5];
  v75 = a23[2];
  v76 = a23[3];
  v73 = *a23;
  v74 = a23[1];
  v79 = a23[6];
  v80 = a23[7];
  v77 = a23[4];
  v78 = a23[5];
  v67 = a26[2];
  v68 = a26[3];
  v65 = *a26;
  v66 = a26[1];
  v71 = a26[6];
  v72 = a26[7];
  v69 = a26[4];
  v70 = a26[5];
  v59 = a29[2];
  v60 = a29[3];
  v57 = *a29;
  v58 = a29[1];
  v63 = a29[6];
  v64 = a29[7];
  v46 = &v45[2 * a4];
  v61 = a29[4];
  v62 = a29[5];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v49 = &v45[2 * (a4 & 0xFFFFFFC0)];
    v50 = 0uLL;
    do
    {
      v140.val[0] = *a3;
      v51 = a3[1];
      v142.val[0] = a3[2];
      v52 = a3[3];
      a3 += 4;
      v53 = v52;
      v142.val[1] = 0uLL;
      v144.val[0] = v51;
      v140.val[1] = 0uLL;
      v54 = v45;
      vst2q_s8(v54, v140);
      v54 += 32;
      v144.val[1] = 0uLL;
      vst2q_s8(v54, v144);
      v55 = v45 + 64;
      vst2q_s8(v55, v142);
      v56 = v45 + 96;
      vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
      v45 += 128;
    }
    while (v45 != v49);
    v45 = v49;
  }
  while (v45 != v46)
  {
    v47 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v45 = v47;
    v45 += 2;
  }
  v137[4] = v125;
  v137[5] = v126;
  v137[6] = v127;
  v137[7] = v128;
  v137[0] = v121;
  v137[1] = v122;
  v137[2] = v123;
  v137[3] = v124;
  v136[3] = v116;
  v136[2] = v115;
  v136[1] = v114;
  v136[0] = v113;
  v136[7] = v120;
  v136[6] = v119;
  v136[5] = v118;
  v136[4] = v117;
  v135[3] = v108;
  v135[2] = v107;
  v135[1] = v106;
  v135[0] = v105;
  v135[7] = v112;
  v135[6] = v111;
  v135[5] = v110;
  v135[4] = v109;
  v134[3] = v100;
  v134[2] = v99;
  v134[1] = v98;
  v134[0] = v97;
  v134[7] = v104;
  v134[6] = v103;
  v134[5] = v102;
  v134[4] = v101;
  v133[3] = v92;
  v133[2] = v91;
  v133[1] = v90;
  v133[0] = v89;
  v133[7] = v96;
  v133[6] = v95;
  v133[5] = v94;
  v133[4] = v93;
  v132[3] = v84;
  v132[2] = v83;
  v132[1] = v82;
  v132[0] = v81;
  v132[7] = v88;
  v132[6] = v87;
  v132[5] = v86;
  v132[4] = v85;
  v131[3] = v76;
  v131[2] = v75;
  v131[1] = v74;
  v131[0] = v73;
  v131[7] = v80;
  v131[6] = v79;
  v131[5] = v78;
  v131[4] = v77;
  v130[3] = v68;
  v130[2] = v67;
  v130[1] = v66;
  v130[0] = v65;
  v130[7] = v72;
  v130[6] = v71;
  v130[5] = v70;
  v130[4] = v69;
  v129[3] = v60;
  v129[2] = v59;
  v129[1] = v58;
  v129[0] = v57;
  v129[7] = v64;
  v129[6] = v63;
  v129[5] = v62;
  v129[4] = v61;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v46, v137, a6, a7, v136, a9, a10, v135, a12, a13, v134, a15, a16, v133, a18, a19, v132, a21, a22,
           v131,
           a24,
           a25,
           v130,
           a27,
           a28,
           v129,
           a30);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int8x16_t *a3, int a4, __int128 *a5, int8x16_t *a6, int a7, __int128 *a8, int8x16_t *a9, int a10, int8x16_t *a11, int8x16_t *a12, int a13, __int128 *a14, int8x16_t *a15, int a16, __int128 *a17, int8x16_t *a18, int a19, __int128 *a20,int8x16_t *a21,int a22,__int128 *a23,int8x16_t *a24,int a25,__int128 *a26,uint64_t a27)
{
  uint64_t v29;
  char *v30;
  int8x16_t *v31;
  char *v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  char *v53;
  int8x16_t *v54;
  __int16 v55;
  char *v57;
  __int128 v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _OWORD v129[8];
  __int128 v130[8];
  __int128 v131[8];
  __int128 v132[8];
  __int128 v133[8];
  __int128 v134[8];
  int8x16_t v135[8];
  _OWORD v136[8];
  uint64_t v137;
  int8x16x2_t v138;
  int8x16x2_t v139;
  int8x16x2_t v140;
  int8x16x2_t v141;
  int8x16x2_t v142;
  int8x16x2_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;

  v137 = *MEMORY[0x1E0C80C00];
  v29 = a2[7].u32[3];
  v30 = &a1[2 * v29];
  v31 = a2;
  v32 = a1;
  if (v29 >= 0x40)
  {
    v32 = &a1[2 * (v29 & 0xFFFFFFC0)];
    v33 = 0uLL;
    v31 = a2;
    v34 = a1;
    do
    {
      v138.val[0] = *v31;
      v35 = v31[1];
      v141.val[0] = v31[2];
      v36 = v31[3];
      v31 += 4;
      v37 = v36;
      v141.val[1] = 0uLL;
      v144.val[0] = v35;
      v138.val[1] = 0uLL;
      v38 = v34;
      vst2q_s8(v38, v138);
      v38 += 32;
      v144.val[1] = 0uLL;
      vst2q_s8(v38, v144);
      v39 = v34 + 64;
      vst2q_s8(v39, v141);
      v40 = v34 + 96;
      vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
      v34 += 128;
    }
    while (v34 != v32);
  }
  while (v32 != v30)
  {
    v41 = v31->u8[0];
    v31 = (int8x16_t *)((char *)v31 + 1);
    *(_WORD *)v32 = v41;
    v32 += 2;
  }
  v42 = &a1[2 * a2[7].u32[3]];
  v125 = a5[4];
  v126 = a5[5];
  v127 = a5[6];
  v128 = a5[7];
  v122 = a5[1];
  v123 = a5[2];
  v124 = a5[3];
  v115 = a8[2];
  v116 = a8[3];
  v113 = *a8;
  v114 = a8[1];
  v120 = a8[7];
  v121 = *a5;
  v118 = a8[5];
  v119 = a8[6];
  v117 = a8[4];
  v107 = a11[2];
  v108 = a11[3];
  v105 = *a11;
  v106 = a11[1];
  v111 = a11[6];
  v112 = a11[7];
  v109 = a11[4];
  v110 = a11[5];
  v99 = a14[2];
  v100 = a14[3];
  v97 = *a14;
  v98 = a14[1];
  v103 = a14[6];
  v104 = a14[7];
  v101 = a14[4];
  v102 = a14[5];
  v91 = a17[2];
  v92 = a17[3];
  v89 = *a17;
  v90 = a17[1];
  v95 = a17[6];
  v96 = a17[7];
  v93 = a17[4];
  v94 = a17[5];
  v83 = a20[2];
  v84 = a20[3];
  v81 = *a20;
  v82 = a20[1];
  v87 = a20[6];
  v88 = a20[7];
  v85 = a20[4];
  v86 = a20[5];
  v75 = a23[2];
  v76 = a23[3];
  v73 = *a23;
  v74 = a23[1];
  v79 = a23[6];
  v80 = a23[7];
  v77 = a23[4];
  v78 = a23[5];
  v67 = a26[2];
  v68 = a26[3];
  v65 = *a26;
  v66 = a26[1];
  v71 = a26[6];
  v72 = a26[7];
  v43 = &v42[2 * a4];
  v69 = a26[4];
  v70 = a26[5];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v44 = &v42[2 * (a4 & 0xFFFFFFC0)];
    v45 = 0uLL;
    do
    {
      v139.val[0] = *a3;
      v46 = a3[1];
      v142.val[0] = a3[2];
      v47 = a3[3];
      a3 += 4;
      v48 = v47;
      v142.val[1] = 0uLL;
      v145.val[0] = v46;
      v139.val[1] = 0uLL;
      v49 = v42;
      vst2q_s8(v49, v139);
      v49 += 32;
      v145.val[1] = 0uLL;
      vst2q_s8(v49, v145);
      v50 = v42 + 64;
      vst2q_s8(v50, v142);
      v51 = v42 + 96;
      vst2q_s8(v51, *(int8x16x2_t *)(&v45 - 1));
      v42 += 128;
    }
    while (v42 != v44);
    v42 = v44;
  }
  while (v42 != v43)
  {
    v52 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v42 = v52;
    v42 += 2;
  }
  v129[4] = v125;
  v129[5] = v126;
  v129[6] = v127;
  v129[7] = v128;
  v129[0] = v121;
  v129[1] = v122;
  v129[2] = v123;
  v129[3] = v124;
  v53 = &v43[2 * HIDWORD(v128)];
  if (HIDWORD(v128) >= 0x40)
  {
    v57 = &v43[2 * (HIDWORD(v128) & 0xFFFFFFC0)];
    v54 = (int8x16_t *)v129;
    v58 = 0uLL;
    do
    {
      v140.val[0] = *v54;
      v59 = v54[1];
      v143.val[0] = v54[2];
      v60 = v54[3];
      v54 += 4;
      v61 = v60;
      v143.val[1] = 0uLL;
      v146.val[0] = v59;
      v140.val[1] = 0uLL;
      v62 = v43;
      vst2q_s8(v62, v140);
      v62 += 32;
      v146.val[1] = 0uLL;
      vst2q_s8(v62, v146);
      v63 = v43 + 64;
      vst2q_s8(v63, v143);
      v64 = v43 + 96;
      vst2q_s8(v64, *(int8x16x2_t *)(&v58 - 1));
      v43 += 128;
    }
    while (v43 != v57);
    v43 = v57;
  }
  else
  {
    v54 = (int8x16_t *)v129;
  }
  while (v43 != v53)
  {
    v55 = v54->u8[0];
    v54 = (int8x16_t *)((char *)v54 + 1);
    *(_WORD *)v43 = v55;
    v43 += 2;
  }
  v136[4] = v117;
  v136[5] = v118;
  v136[6] = v119;
  v136[7] = v120;
  v136[0] = v113;
  v136[1] = v114;
  v136[2] = v115;
  v136[3] = v116;
  v135[3] = v108;
  v135[2] = v107;
  v135[1] = v106;
  v135[0] = v105;
  v135[7] = v112;
  v135[6] = v111;
  v135[5] = v110;
  v135[4] = v109;
  v134[3] = v100;
  v134[2] = v99;
  v134[1] = v98;
  v134[0] = v97;
  v134[7] = v104;
  v134[6] = v103;
  v134[5] = v102;
  v134[4] = v101;
  v133[3] = v92;
  v133[2] = v91;
  v133[1] = v90;
  v133[0] = v89;
  v133[7] = v96;
  v133[6] = v95;
  v133[5] = v94;
  v133[4] = v93;
  v132[3] = v84;
  v132[2] = v83;
  v132[1] = v82;
  v132[0] = v81;
  v132[7] = v88;
  v132[6] = v87;
  v132[5] = v86;
  v132[4] = v85;
  v131[3] = v76;
  v131[2] = v75;
  v131[1] = v74;
  v131[0] = v73;
  v131[7] = v80;
  v131[6] = v79;
  v131[5] = v78;
  v131[4] = v77;
  v130[3] = v68;
  v130[2] = v67;
  v130[1] = v66;
  v130[0] = v65;
  v130[7] = v72;
  v130[6] = v71;
  v130[5] = v70;
  v130[4] = v69;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v53, a6, a7, v136, a9, a10, v135, a27, a12, a13, v134, a15, a16, v133, a18, a19, v132, a21, a22,
           v131,
           a24,
           a25,
           v130,
           a27);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int a3, _OWORD *a4, int8x16_t *a5, int a6, int8x16_t *a7, uint64_t a8, int8x16_t *a9, int a10, __int128 *a11, int8x16_t *a12, int a13, __int128 *a14, int8x16_t *a15, int a16, __int128 *a17, int8x16_t *a18, int a19, __int128 *a20,int8x16_t *a21,int a22,__int128 *a23,char a24)
{
  char *v24;
  char *v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  int8x16_t *v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  char *v49;
  __int16 v50;
  char *v52;
  __int128 v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  _OWORD v108[7];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  __int128 v158[8];
  __int128 v159[8];
  __int128 v160[8];
  __int128 v161[8];
  __int128 v162[8];
  int8x16_t v163[8];
  uint64_t v164;
  int8x16x2_t v165;
  int8x16x2_t v166;
  int8x16x2_t v167;
  int8x16x2_t v168;
  int8x16x2_t v169;
  int8x16x2_t v170;
  int8x16x2_t v171;
  int8x16x2_t v172;
  int8x16x2_t v173;

  v164 = *MEMORY[0x1E0C80C00];
  v24 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v25 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v26 = 0uLL;
    do
    {
      v165.val[0] = *a2;
      v27 = a2[1];
      v168.val[0] = a2[2];
      v28 = a2[3];
      a2 += 4;
      v29 = v28;
      v168.val[1] = 0uLL;
      v171.val[0] = v27;
      v165.val[1] = 0uLL;
      v30 = a1;
      vst2q_s8(v30, v165);
      v30 += 32;
      v171.val[1] = 0uLL;
      vst2q_s8(v30, v171);
      v31 = a1 + 64;
      vst2q_s8(v31, v168);
      v32 = a1 + 96;
      vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
      a1 += 128;
    }
    while (a1 != v25);
    a1 = v25;
  }
  while (a1 != v24)
  {
    v33 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v33;
    a1 += 2;
  }
  v34 = a4[5];
  v108[4] = a4[4];
  v108[5] = v34;
  v35 = a4[7];
  v108[6] = a4[6];
  v109 = v35;
  v36 = a4[1];
  v108[0] = *a4;
  v108[1] = v36;
  v37 = a4[3];
  v108[2] = a4[2];
  v108[3] = v37;
  v102 = a7[2];
  v103 = a7[3];
  v100 = *a7;
  v101 = a7[1];
  v106 = a7[6];
  v107 = a7[7];
  v104 = a7[4];
  v105 = a7[5];
  v94 = a11[2];
  v95 = a11[3];
  v92 = *a11;
  v93 = a11[1];
  v98 = a11[6];
  v99 = a11[7];
  v96 = a11[4];
  v97 = a11[5];
  v86 = a14[2];
  v87 = a14[3];
  v84 = *a14;
  v85 = a14[1];
  v90 = a14[6];
  v91 = a14[7];
  v88 = a14[4];
  v89 = a14[5];
  v78 = a17[2];
  v79 = a17[3];
  v76 = *a17;
  v77 = a17[1];
  v82 = a17[6];
  v83 = a17[7];
  v80 = a17[4];
  v81 = a17[5];
  v70 = a20[2];
  v71 = a20[3];
  v68 = *a20;
  v69 = a20[1];
  v74 = a20[6];
  v75 = a20[7];
  v72 = a20[4];
  v73 = a20[5];
  v62 = a23[2];
  v63 = a23[3];
  v60 = *a23;
  v61 = a23[1];
  v66 = a23[6];
  v67 = a23[7];
  v38 = &v24[2 * HIDWORD(v109)];
  v64 = a23[4];
  v65 = a23[5];
  if (HIDWORD(v109) >= 0x40)
  {
    v40 = &v24[2 * (HIDWORD(v109) & 0xFFFFFFC0)];
    v39 = (int8x16_t *)v108;
    v41 = 0uLL;
    do
    {
      v166.val[0] = *v39;
      v42 = v39[1];
      v169.val[0] = v39[2];
      v43 = v39[3];
      v39 += 4;
      v44 = v43;
      v169.val[1] = 0uLL;
      v172.val[0] = v42;
      v166.val[1] = 0uLL;
      v45 = v24;
      vst2q_s8(v45, v166);
      v45 += 32;
      v172.val[1] = 0uLL;
      vst2q_s8(v45, v172);
      v46 = v24 + 64;
      vst2q_s8(v46, v169);
      v47 = v24 + 96;
      vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
      v24 += 128;
    }
    while (v24 != v40);
    v24 = v40;
  }
  else
  {
    v39 = (int8x16_t *)v108;
  }
  while (v24 != v38)
  {
    v48 = v39->u8[0];
    v39 = (int8x16_t *)((char *)v39 + 1);
    *(_WORD *)v24 = v48;
    v24 += 2;
  }
  v154 = v104;
  v155 = v105;
  v156 = v106;
  v157 = v107;
  v150 = v100;
  v151 = v101;
  v152 = v102;
  v153 = v103;
  v145 = v95;
  v144 = v94;
  v143 = v93;
  v142 = v92;
  v149 = v99;
  v148 = v98;
  v147 = v97;
  v146 = v96;
  v137 = v87;
  v136 = v86;
  v135 = v85;
  v134 = v84;
  v141 = v91;
  v140 = v90;
  v139 = v89;
  v138 = v88;
  v129 = v79;
  v128 = v78;
  v127 = v77;
  v126 = v76;
  v133 = v83;
  v132 = v82;
  v131 = v81;
  v130 = v80;
  v121 = v71;
  v120 = v70;
  v119 = v69;
  v118 = v68;
  v125 = v75;
  v124 = v74;
  v123 = v73;
  v122 = v72;
  v112 = v62;
  v113 = v63;
  v110 = v60;
  v111 = v61;
  v117 = v67;
  v116 = v66;
  v49 = &v38[2 * a6];
  v115 = v65;
  v114 = v64;
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v52 = &v38[2 * (a6 & 0xFFFFFFC0)];
    v53 = 0uLL;
    do
    {
      v167.val[0] = *a5;
      v54 = a5[1];
      v170.val[0] = a5[2];
      v55 = a5[3];
      a5 += 4;
      v56 = v55;
      v170.val[1] = 0uLL;
      v173.val[0] = v54;
      v167.val[1] = 0uLL;
      v57 = v38;
      vst2q_s8(v57, v167);
      v57 += 32;
      v173.val[1] = 0uLL;
      vst2q_s8(v57, v173);
      v58 = v38 + 64;
      vst2q_s8(v58, v170);
      v59 = v38 + 96;
      vst2q_s8(v59, *(int8x16x2_t *)(&v53 - 1));
      v38 += 128;
    }
    while (v38 != v52);
    v38 = v52;
  }
  while (v38 != v49)
  {
    v50 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v38 = v50;
    v38 += 2;
  }
  v163[4] = v154;
  v163[5] = v155;
  v163[6] = v156;
  v163[7] = v157;
  v163[0] = v150;
  v163[1] = v151;
  v163[2] = v152;
  v163[3] = v153;
  v162[3] = v145;
  v162[2] = v144;
  v162[1] = v143;
  v162[0] = v142;
  v162[7] = v149;
  v162[6] = v148;
  v162[5] = v147;
  v162[4] = v146;
  v161[3] = v137;
  v161[2] = v136;
  v161[1] = v135;
  v161[0] = v134;
  v161[7] = v141;
  v161[6] = v140;
  v161[5] = v139;
  v161[4] = v138;
  v160[3] = v129;
  v160[2] = v128;
  v160[1] = v127;
  v160[0] = v126;
  v160[7] = v133;
  v160[6] = v132;
  v160[5] = v131;
  v160[4] = v130;
  v159[3] = v121;
  v159[2] = v120;
  v159[1] = v119;
  v159[0] = v118;
  v159[7] = v125;
  v159[6] = v124;
  v159[5] = v123;
  v159[4] = v122;
  v158[3] = v113;
  v158[2] = v112;
  v158[1] = v111;
  v158[0] = v110;
  v158[7] = v117;
  v158[6] = v116;
  v158[5] = v115;
  v158[4] = v114;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v49, v163, a9, a10, v162, a12, a13, v161, a15, a16, v160, a18, a19, v159, a21, a22, v158, a24);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::primitiveType(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;

  v1 = *((_QWORD *)this + 4);
  v2 = (*(unsigned __int16 *)(v1 + 4) | (*(unsigned __int8 *)(v1 + 6) << 16)) & 0x3F800;
  if (v2 == 57344)
    return 23;
  if (v2 == 100352)
    return 24;
  if (v2)
    return 0;
  v4 = *(_WORD *)(v1 + 4) & 0x7F;
  if ((v4 - 79) < 2)
    return 21;
  if (v4 == 77)
    return 19;
  if (v4 == 63)
    return 21;
  if ((*(_WORD *)(v1 + 4) & 0x7F) == 0x49)
  {
    v6 = *(unsigned __int8 **)(*(_QWORD *)(v1 + 8) + 8);
    v7 = v6[12];
    if (v7 != 1)
    {
      if (v7 == 2)
        return 2;
      if ((v7 - 5) >= 4)
        return !v6[12];
    }
    v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6);
  }
  if (v4 > 62)
  {
    if (v4 > 78)
    {
      if (v4 != 79 && v4 != 80)
        return 0;
    }
    else if (v4 != 63)
    {
      if (v4 == 77)
        return 19;
      return 0;
    }
    return 21;
  }
  v5 = v4 - 1;
  result = 22;
  switch(v5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 6;
      break;
    case 7:
      result = 7;
      break;
    case 8:
      result = 8;
      break;
    case 9:
      result = 9;
      break;
    case 10:
      result = 10;
      break;
    case 11:
      result = 11;
      break;
    case 12:
      result = 12;
      break;
    case 13:
      result = 13;
      break;
    case 14:
      result = 14;
      break;
    case 15:
      result = 15;
      break;
    case 16:
      result = 16;
      break;
    case 17:
      result = 17;
      break;
    case 18:
      result = 18;
      break;
    case 19:
      return 19;
    case 20:
      result = 20;
      break;
    case 21:
      return 21;
    case 22:
      return result;
    case 23:
      result = 25;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getFloatValue@<X0>(WebCore::DeprecatedCSSOMPrimitiveValue *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  char v8;
  float v9;
  int v10;
  int v11;

  v4 = a2 - 1;
  v5 = 1;
  v6 = 7;
  switch(v4)
  {
    case 0:
      v6 = 1;
      break;
    case 1:
      v6 = 3;
      break;
    case 2:
      v6 = 4;
      break;
    case 3:
      v6 = 5;
      break;
    case 4:
      v6 = 6;
      break;
    case 5:
      break;
    case 6:
      v6 = 8;
      break;
    case 7:
      v6 = 9;
      break;
    case 8:
      v6 = 10;
      break;
    case 9:
      v6 = 11;
      break;
    case 10:
      v6 = 12;
      break;
    case 11:
      v6 = 13;
      break;
    case 12:
      v6 = 14;
      break;
    case 13:
      v6 = 15;
      break;
    case 14:
      v6 = 16;
      break;
    case 15:
      v6 = 17;
      break;
    case 16:
      v6 = 18;
      break;
    case 17:
      v6 = 19;
      break;
    default:
      v6 = 0;
      v5 = 0;
      break;
  }
  if (((*(unsigned __int16 *)(*((_QWORD *)this + 4) + 4) | (*(unsigned __int8 *)(*((_QWORD *)this + 4) + 6) << 16)) & 0x3F800) != 0)
    *(double *)&result = 0.0;
  else
    result = *((uint64_t *)this + 4);
  if (!v5
    || *(double *)&result == 0.0
    || (*(double *)&result = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(result, v6)), !v8))
  {
    *(_BYTE *)a3 = 12;
    *(_QWORD *)(a3 + 8) = 0;
    v10 = 1;
    goto LABEL_31;
  }
  if (*(double *)&result >= 3.40282347e38)
  {
    v11 = 2139095039;
LABEL_34:
    v9 = *(float *)&v11;
    goto LABEL_29;
  }
  if (*(double *)&result <= -3.40282347e38)
  {
    v11 = -8388609;
    goto LABEL_34;
  }
  v9 = *(double *)&result;
LABEL_29:
  v10 = 0;
  *(float *)a3 = v9;
LABEL_31:
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t *WebCore::DeprecatedCSSOMPrimitiveValue::getStringValue@<X0>(WebCore::DeprecatedCSSOMPrimitiveValue *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;

  result = (uint64_t *)WebCore::DeprecatedCSSOMPrimitiveValue::primitiveType(this);
  switch((int)result)
  {
    case 19:
      v5 = *((_QWORD *)this + 4);
      v6 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
      if ((v6 & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195801D60);
      }
      goto LABEL_10;
    case 20:
      v5 = *((_QWORD *)this + 4);
      v6 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
      if ((v6 & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195801DACLL);
      }
      goto LABEL_10;
    case 21:
      v5 = *((_QWORD *)this + 4);
      v6 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
      if ((v6 & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195801DE4);
      }
      goto LABEL_10;
    case 22:
      v5 = *((_QWORD *)this + 4);
      v6 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
      if ((v6 & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195801E94);
      }
LABEL_10:
      v8 = 0;
      v9 = (v6 & 0x7Fu) - 20;
      if (v9 > 0x3C)
        goto LABEL_14;
      if (((1 << v9) & 0x20008000000000BLL) != 0)
      {
        v8 = *(_DWORD **)(v5 + 8);
        if (!v8)
          goto LABEL_14;
        goto LABEL_13;
      }
      if (v9 == 60)
      {
        result = WebCore::nameString(*(unsigned __int16 *)(v5 + 8));
      }
      else
      {
        if (v9 != 59)
          goto LABEL_14;
        result = WebCore::nameString(*(unsigned __int16 *)(v5 + 8));
      }
      v8 = (_DWORD *)*result;
      if (*result)
LABEL_13:
        *v8 += 2;
LABEL_14:
      v7 = 0;
      *(_QWORD *)a2 = v8;
LABEL_15:
      *(_DWORD *)(a2 + 16) = v7;
      return result;
    default:
      *(_BYTE *)a2 = 12;
      *(_QWORD *)(a2 + 8) = 0;
      v7 = 1;
      goto LABEL_15;
  }
}

WTF::StringImpl *WebCore::DeprecatedCSSOMPrimitiveValue::getCounterValue@<X0>(WebCore::DeprecatedCSSOMPrimitiveValue *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  _DWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  result = (WTF::StringImpl *)*((_QWORD *)this + 4);
  if (result && ((*((unsigned __int16 *)result + 2) | (*((unsigned __int8 *)result + 6) << 16)) & 0x3F800) == 0xE000)
  {
    v4 = (_DWORD *)*((_QWORD *)result + 1);
    if (v4)
      *v4 += 2;
    v5 = (_DWORD *)*((_QWORD *)result + 2);
    if (v5)
      *v5 += 2;
    WebCore::CSSCounterValue::counterStyleCSSText((uint64_t *)result, &v10);
    v7 = WTF::fastMalloc((WTF *)0x20);
    result = v10;
    v10 = 0;
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v4;
    *(_QWORD *)(v7 + 16) = v5;
    if (!result)
    {
      *(_QWORD *)(v7 + 24) = 0;
      goto LABEL_10;
    }
    v8 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    *(_QWORD *)(v7 + 24) = result;
    if (v8)
    {
      *(_DWORD *)result = v8;
LABEL_10:
      *(_QWORD *)a2 = v7;
      *(_DWORD *)(a2 + 16) = 0;
      return result;
    }
    WTF::StringImpl::destroy(result, v6);
    result = v10;
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 16) = 0;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 12;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

WebCore::DeprecatedCSSOMRect *WebCore::DeprecatedCSSOMPrimitiveValue::getRectValue@<X0>(WebCore::DeprecatedCSSOMRect *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  const Rect *v6;
  WebCore::CSSStyleDeclaration *v7;
  WebCore::DeprecatedCSSOMRect *v8;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = ((*(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16)) & 0x3F800) == 100352;
  else
    v4 = 0;
  if (v4)
  {
    v6 = (const Rect *)(v3 + 8);
    v7 = (WebCore::CSSStyleDeclaration *)*((_QWORD *)this + 3);
    v8 = (WebCore::DeprecatedCSSOMRect *)WTF::fastMalloc((WTF *)0x28);
    this = WebCore::DeprecatedCSSOMRect::DeprecatedCSSOMRect(v8, v6, v7);
    v5 = 0;
    *(_QWORD *)a2 = this;
  }
  else
  {
    *(_BYTE *)a2 = 12;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  return this;
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getRGBColorValue@<X0>(WebCore::CSSStyleDeclaration **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  WebCore::CSSStyleDeclaration *v5;
  WebCore::CSSStyleDeclaration *v6;
  const WebCore::Color *v7;
  WebCore::DeprecatedCSSOMRGBColor *v8;
  int v9;

  result = WebCore::DeprecatedCSSOMPrimitiveValue::primitiveType((WebCore::DeprecatedCSSOMPrimitiveValue *)this);
  if ((_DWORD)result != 25)
  {
    *(_BYTE *)a2 = 12;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = 1;
    goto LABEL_5;
  }
  v5 = this[4];
  if (((*((unsigned __int16 *)v5 + 2) | (*((unsigned __int8 *)v5 + 6) << 16)) & 0x3F800) == 0)
  {
    v6 = this[3];
    v7 = (WebCore::CSSStyleDeclaration *)((char *)v5 + 8);
    v8 = (WebCore::DeprecatedCSSOMRGBColor *)WTF::fastMalloc((WTF *)0x28);
    result = (uint64_t)WebCore::DeprecatedCSSOMRGBColor::DeprecatedCSSOMRGBColor(v8, v6, v7);
    v9 = 0;
    *(_QWORD *)a2 = result;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v9;
    return result;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DeprecatedCSSOMValue::operator delete(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v2 = result;
  v3 = (*(unsigned __int8 *)(result + 16) >> 2) & 3;
  switch(v3)
  {
    case 2:
      v5 = *(unsigned int *)(result + 44);
      v6 = *(WTF **)(result + 32);
      if ((_DWORD)v5)
      {
        v7 = 8 * v5;
        do
        {
          v8 = *(_DWORD **)v6;
          *(_QWORD *)v6 = 0;
          if (v8)
          {
            if (*v8 == 1)
              WebCore::DeprecatedCSSOMValue::operator delete();
            else
              --*v8;
          }
          v6 = (WTF *)((char *)v6 + 8);
          v7 -= 8;
        }
        while (v7);
        v6 = *(WTF **)(v2 + 32);
      }
      if ((WTF *)(v2 + 48) != v6 && v6 != 0)
      {
        *(_QWORD *)(v2 + 32) = 0;
        *(_DWORD *)(v2 + 40) = 0;
        WTF::fastFree(v6, a2);
      }
      v11 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v12 = *(_QWORD *)(v2 + 8);
      if (v12)
      {
        *(_QWORD *)(v12 + 8) = 0;
        v13 = *(unsigned int **)(v2 + 8);
        *(_QWORD *)(v2 + 8) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, v13));
          goto LABEL_43;
        }
        return WTF::fastFree((WTF *)v2, a2);
      }
      goto LABEL_46;
    case 1:
      v9 = *(_DWORD **)(result + 32);
      *(_QWORD *)(v2 + 32) = 0;
      if (v9)
      {
        if (*v9 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, (WTF::StringImpl *)a2);
        else
          *v9 -= 2;
      }
      v19 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v20 = *(_QWORD *)(v2 + 8);
      if (v20)
      {
        *(_QWORD *)(v20 + 8) = 0;
        v13 = *(unsigned int **)(v2 + 8);
        *(_QWORD *)(v2 + 8) = 0;
        if (v13)
        {
          do
          {
            v21 = __ldaxr(v13);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, v13));
          goto LABEL_43;
        }
        return WTF::fastFree((WTF *)v2, a2);
      }
LABEL_46:
      *(_QWORD *)(v2 + 8) = 0;
      return WTF::fastFree((WTF *)v2, a2);
    case 0:
      v4 = *(_DWORD **)(result + 32);
      *(_QWORD *)(v2 + 32) = 0;
      if (v4)
      {
        if (*v4 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
        else
          *v4 -= 2;
      }
      v16 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      v17 = *(_QWORD *)(v2 + 8);
      if (v17)
      {
        *(_QWORD *)(v17 + 8) = 0;
        v13 = *(unsigned int **)(v2 + 8);
        *(_QWORD *)(v2 + 8) = 0;
        if (v13)
        {
          do
          {
            v18 = __ldaxr(v13);
            v15 = --v18 == 0;
          }
          while (__stlxr(v18, v13));
LABEL_43:
          if (v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          return WTF::fastFree((WTF *)v2, a2);
        }
        return WTF::fastFree((WTF *)v2, a2);
      }
      goto LABEL_46;
  }
  return result;
}

uint64_t WebCore::DeprecatedCSSOMValue::cssValueType(WebCore::DeprecatedCSSOMValue *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v5;

  v1 = (*((unsigned __int8 *)this + 16) >> 2) & 3;
  if (v1 == 2)
  {
    LOWORD(v3) = 2;
  }
  else if (v1 == 1)
  {
    LOWORD(v3) = 1;
  }
  else if (v1
         || (v2 = *((_QWORD *)this + 4),
             ((*(unsigned __int16 *)(v2 + 4) | (*(unsigned __int8 *)(v2 + 6) << 16)) & 0x3F87F) != 0x50)
         || (v5 = *(_WORD *)(v2 + 8) - 1, v5 >= 4u))
  {
    LOWORD(v3) = 3;
  }
  else
  {
    return (unsigned __int16)(0x6000500040000uLL >> (16 * v5));
  }
  return (unsigned __int16)v3;
}

void WebCore::DeprecatedCSSOMValue::cssText(WebCore::DeprecatedCSSOMValue *this@<X0>, WTF::StringBuilder *a2@<X2>, WTF::String *a3@<X3>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q0>)
{
  unsigned int v5;
  WTF::StringImpl *v6;

  v5 = (*((unsigned __int8 *)this + 16) >> 2) & 3;
  if (v5 == 2)
  {
    WebCore::DeprecatedCSSOMValueList::cssText(this, a2, a3, a4, a5);
  }
  else if (v5 > 1)
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v6 += 2;
    *a4 = v6;
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)a4, *((_QWORD *)this + 4), a2, a3, a5);
  }
}

WTF::StringImpl *WebCore::DeprecatedCSSOMValueList::cssText@<X0>(WebCore::DeprecatedCSSOMValueList *this@<X0>, WTF::StringBuilder *a2@<X2>, WTF::String *a3@<X3>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q0>)
{
  int v6;
  const char *v7;
  int v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringBuilder *v17;
  WTF::String *v18;
  __n128 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  uint64_t **v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  uint64_t *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  char v35;
  WTF::StringImpl *v36;
  const char *v37;
  int v38;

  v6 = *((_BYTE *)this + 16) & 3;
  v7 = " ";
  v8 = 2;
  if (v6 == 2)
  {
    v7 = " / ";
    v8 = 4;
  }
  if (v6 == 1)
    v9 = ", ";
  else
    v9 = v7;
  if (v6 == 1)
    v10 = 3;
  else
    v10 = v8;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v11 = *((unsigned int *)this + 11);
  if ((_DWORD)v11)
  {
    v12 = (uint64_t **)*((_QWORD *)this + 4);
    v13 = *v12;
    v14 = (*((unsigned __int8 *)*v12 + 16) >> 2) & 3;
    if (v14 < 2)
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v31, v13[4], a2, a3, a5);
    }
    else if (v14 == 2)
    {
      WebCore::DeprecatedCSSOMValueList::cssText((uint64_t *)&v31, (WebCore::DeprecatedCSSOMValueList *)v13);
    }
    else
    {
      v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v15 += 2;
      v31 = v15;
    }
    v38 = 0;
    v36 = v31;
    v37 = "";
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v32, (uint64_t)&v37, (uint64_t *)&v36);
    v20 = v31;
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    if ((_DWORD)v11 != 1)
    {
      v23 = v12 + 1;
      v24 = v10 - 1;
      v25 = 8 * v11 - 8;
      v26 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
      do
      {
        v27 = *v23;
        v28 = (*((unsigned __int8 *)*v23 + 16) >> 2) & 3;
        if (v28 < 2)
        {
          _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v31, v27[4], v17, v18, v19);
        }
        else if (v28 == 2)
        {
          WebCore::DeprecatedCSSOMValueList::cssText((uint64_t *)&v31, (WebCore::DeprecatedCSSOMValueList *)v27);
        }
        else
        {
          v29 = *v26;
          if (*v26)
            *(_DWORD *)v29 += 2;
          v31 = v29;
        }
        v38 = v24;
        v36 = v31;
        v37 = v9;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v32, (uint64_t)&v37, (uint64_t *)&v36);
        v30 = v31;
        v31 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v16);
          else
            *(_DWORD *)v30 -= 2;
        }
        ++v23;
        v25 -= 8;
      }
      while (v25);
    }
    result = v32;
    if (v32)
      goto LABEL_23;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v32);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v32);
  result = v32;
  if (v32)
LABEL_23:
    *(_DWORD *)result += 2;
  *a4 = result;
  v22 = v33;
  v33 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v16);
      result = v32;
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::reject(uint64_t result, WTF::StringImpl *a2, int a3)
{
  uint64_t v4;
  char v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  unsigned __int8 v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  char v25;
  unsigned __int8 v26[8];
  WTF::StringImpl *v27;
  objc_class *v28;

  v4 = result;
  v5 = *(_BYTE *)a2;
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (*(_BYTE *)(result + 32))
  {
    LOBYTE(v23) = v5;
    v24 = v6;
    v25 = 1;
    result = std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v23, result + 8);
    if (v25)
    {
      result = (uint64_t)v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = v6;
    *(_BYTE *)(result + 24) = 1;
    *(_BYTE *)(result + 32) = 1;
  }
  v7 = *(unsigned int *)(v4 + 52);
  v23 = (WTF *)&v25;
  LODWORD(v24) = 1;
  HIDWORD(v24) = v7;
  if (v7 < 2)
  {
    v8 = (WTF *)&v25;
    if (!(_DWORD)v7)
      goto LABEL_9;
    goto LABEL_44;
  }
  if (v7 >> 29)
  {
    __break(0xC471u);
LABEL_55:
    __break(1u);
    return result;
  }
  result = WTF::fastMalloc((WTF *)(8 * v7));
  v8 = (WTF *)result;
  LODWORD(v24) = v7;
  v23 = (WTF *)result;
  v7 = *(unsigned int *)(v4 + 52);
  if ((_DWORD)v7)
  {
LABEL_44:
    v18 = *(uint64_t **)(v4 + 40);
    v19 = 8 * v7;
    v20 = v8;
    do
    {
      v21 = *v18++;
      ++*(_DWORD *)(v21 + 16);
      *(_QWORD *)v20 = v21;
      v20 = (WTF *)((char *)v20 + 8);
      v19 -= 8;
    }
    while (v19);
  }
LABEL_9:
  if (!*(_BYTE *)(v4 + 32) || !*(_BYTE *)(v4 + 24))
    goto LABEL_55;
  v9 = *(_BYTE *)(v4 + 8);
  v10 = *(WTF::StringImpl **)(v4 + 16);
  if (v10)
  {
    v11 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    if (HIDWORD(v24))
    {
      v12 = 8 * HIDWORD(v24);
      do
      {
        v13 = *(_QWORD *)v8;
        v14 = *(_DWORD *)v10;
        v26[0] = v9;
        *(_DWORD *)v10 = v14 + 4;
        v27 = v10;
        v28 = 0;
        WebCore::DeferredPromise::reject(v13, v26, a3, &v28);
        result = (uint64_t)v27;
        v27 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        if (*(_DWORD *)v10 == 2)
          result = WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
        v8 = (WTF *)((char *)v8 + 8);
        v12 -= 8;
      }
      while (v12);
      v11 = *(_DWORD *)v10 - 2;
    }
    if (v11)
      *(_DWORD *)v10 = v11;
    else
      result = WTF::StringImpl::destroy(v10, a2);
LABEL_25:
    v8 = v23;
    if (HIDWORD(v24))
    {
      v22 = 8 * HIDWORD(v24);
      do
      {
        result = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 16);
        }
        v8 = (WTF *)((char *)v8 + 8);
        v22 -= 8;
      }
      while (v22);
      v8 = v23;
    }
    goto LABEL_26;
  }
  if (HIDWORD(v24))
  {
    v16 = 8 * HIDWORD(v24);
    do
    {
      v17 = *(_QWORD *)v8;
      v27 = 0;
      v28 = 0;
      v26[0] = v9;
      WebCore::DeferredPromise::reject(v17, v26, a3, &v28);
      result = (uint64_t)v27;
      v27 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v8 = (WTF *)((char *)v8 + 8);
      v16 -= 8;
    }
    while (v16);
    goto LABEL_25;
  }
LABEL_26:
  if (&v25 != (char *)v8 && v8 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    return WTF::fastFree(v8, a2);
  }
  return result;
}

WTF::StringImpl *WebCore::FontFace::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, WTF::AtomStringImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF::StringImpl *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::CSSValue *v34;
  WTF::StringImpl *v35;
  WebCore::CSSValue *v36;
  WebCore::CSSValue *v37;
  WTF::StringImpl *v38;
  WebCore::CSSValue *v39;
  WTF::StringImpl *v40;
  WebCore::CSSValue *v41;
  WebCore::CSSValue *v42;
  WTF::StringImpl *v43;
  WebCore::CSSValue *v44;
  WTF::StringImpl *v45;
  WebCore::CSSValue *v46;
  WebCore::CSSValue *v47;
  WTF::StringImpl *v48;
  WebCore::CSSValue *v49;
  WTF::StringImpl *v50;
  WebCore::CSSValue *v51;
  WebCore::CSSValue *v52;
  WTF::StringImpl *v53;
  WebCore::CSSValue *v54;
  WTF::StringImpl *v55;
  WebCore::CSSValue *v56;
  WebCore::CSSValue *v57;
  WTF::StringImpl *v58;
  WebCore::CSSValue *v59;
  WTF::StringImpl *v60;
  WebCore::CSSValue *v61;
  WebCore::CSSValue *v62;
  WTF::StringImpl *v63;
  WebCore::CSSValue **v64;
  WebCore::CSSValue *v65;
  WebCore::CSSValue *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WebCore::ScriptExecutionContext *v70;
  WTF::AtomStringImpl **v71;
  _QWORD *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  char v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  char v78;
  char v79;
  WebCore::CSSValue *v80;
  WTF::StringImpl *v81;
  char v82;
  char *v83;
  WTF::StringImpl *v84;
  char v85;
  char *v86;
  WTF::StringImpl *v87;
  WebCore::CSSValue **v88;

  v10 = WTF::fastMalloc((WTF *)0x48);
  v11 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a1 + 304))(a1);
  *(_DWORD *)(v10 + 24) = 1;
  v12 = *(_QWORD *)(v11 + 80);
  if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
  {
    if (*(_BYTE *)(v13 + 178))
    {
      v14 = v13 - 96;
    }
    else
    {
      v15 = v13 - 288;
      v16 = *(_QWORD *)(v13 + 416);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
          v15 = v17;
      }
      v14 = v15 + 192;
    }
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)v10 = &off_1E33A18C0;
  *(_QWORD *)(v10 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v10, (WebCore::ScriptExecutionContext *)v14);
  *(_QWORD *)v10 = &off_1E33A0540;
  *(_QWORD *)(v10 + 16) = 0;
  if (v14)
  {
    if (*(_BYTE *)(v14 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195803258);
    }
    v76 = v10;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v14 + 128), &v76, (uint64_t)&v80);
  }
  *(_QWORD *)(v10 + 32) = &unk_1E33996D0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)v10 = &off_1E3399670;
  v18 = *(_QWORD *)(v11 + 80);
  if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 - 96) + 136))(v19 - 96);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0xD0);
  v22 = WebCore::CSSFontFace::CSSFontFace(v21, v20, 0, v10, 0);
  *(_QWORD *)(v10 + 48) = v22;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v22 + 96, (_QWORD *)(v11 + 24), (uint64_t)&v80);
  v23 = WTF::fastMalloc((WTF *)0x40);
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v24 = off_1E3399610;
  v24[1] = WebCore::FontFace::loadedPromiseResolve;
  v24[2] = 0;
  v24[3] = v10;
  *(_QWORD *)v23 = v24;
  *(_BYTE *)(v23 + 8) = 0;
  *(_BYTE *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v23 + 56;
  *(_QWORD *)(v23 + 48) = 1;
  *(_QWORD *)(v10 + 56) = v23;
  *(_BYTE *)(v10 + 64) = 0;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(v10 + 48) + 96, (_QWORD *)(v10 + 32), (uint64_t)&v80);
  *(_QWORD *)a5 = v10;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v10);
  v79 = 1;
  WebCore::FontFace::setFamily((WTF::StringImpl *)v10, a1, a2, &v76);
  if (!v78)
  {
    v82 = *(_BYTE *)((*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a1 + 136))(a1) + 136);
    v83 = &v79;
    v84 = a5;
    v85 = v82;
    v86 = &v79;
    v87 = a5;
    v80 = a1;
    v81 = a5;
    v30 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v30 == -1)
    {
      v69 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::FontFace::setFamily(v69, v70, v71, v72);
    }
    v88 = &v80;
    ((void (*)(uint64_t *__return_ptr, WebCore::CSSValue ***, uint64_t))off_1E33995E8[v30])(&v73, &v88, a3);
    v31 = *(_QWORD *)a5;
    if (v75)
      goto LABEL_29;
    v34 = *(WebCore::CSSValue **)a4;
    if (*(_QWORD *)a4 && *((_DWORD *)v34 + 1))
    {
      *(_DWORD *)v34 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v34 = v80;
    }
    v88 = (WebCore::CSSValue **)v34;
    WebCore::CSSPropertyParserWorkerSafe::parseFontFaceStyle(a1, (uint64_t **)&v80);
    v36 = v80;
    if (v80)
    {
      WebCore::CSSFontFace::setStyle(*(WebCore::CSSFontFace **)(v31 + 48), v80);
      v37 = v80;
      v80 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, v35);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    v38 = (WTF::StringImpl *)v88;
    v88 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v35);
      else
        *(_DWORD *)v38 -= 2;
    }
    v31 = *(_QWORD *)a5;
    if (!v36)
      goto LABEL_29;
    v39 = *(WebCore::CSSValue **)(a4 + 8);
    if (v39 && *((_DWORD *)v39 + 1))
    {
      *(_DWORD *)v39 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39 = v80;
    }
    v88 = (WebCore::CSSValue **)v39;
    WebCore::CSSPropertyParserWorkerSafe::parseFontFaceWeight(a1, (__int128 ***)&v80);
    v41 = v80;
    if (v80)
    {
      WebCore::CSSFontFace::setWeight(*(WebCore::CSSFontFace **)(v31 + 48), v80);
      v42 = v80;
      v80 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v42, v40);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    v43 = (WTF::StringImpl *)v88;
    v88 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v40);
      else
        *(_DWORD *)v43 -= 2;
    }
    v31 = *(_QWORD *)a5;
    if (!v41)
      goto LABEL_29;
    v44 = *(WebCore::CSSValue **)(a4 + 16);
    if (v44 && *((_DWORD *)v44 + 1))
    {
      *(_DWORD *)v44 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v44 = v80;
    }
    v88 = (WebCore::CSSValue **)v44;
    WebCore::CSSPropertyParserWorkerSafe::parseFontFaceStretch(a1, (__int128 ***)&v80);
    v46 = v80;
    if (v80)
    {
      WebCore::CSSFontFace::setStretch(*(WebCore::CSSFontFace **)(v31 + 48), v80);
      v47 = v80;
      v80 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v45);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
    v48 = (WTF::StringImpl *)v88;
    v88 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v45);
      else
        *(_DWORD *)v48 -= 2;
    }
    v31 = *(_QWORD *)a5;
    if (!v46)
      goto LABEL_29;
    v49 = *(WebCore::CSSValue **)(a4 + 24);
    if (v49 && *((_DWORD *)v49 + 1))
    {
      *(_DWORD *)v49 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v49 = v80;
    }
    v88 = (WebCore::CSSValue **)v49;
    WebCore::CSSPropertyParserWorkerSafe::parseFontFaceUnicodeRange(a1, (char ***)&v80);
    v51 = v80;
    if (v80)
    {
      WebCore::CSSFontFace::setUnicodeRange(*(_QWORD *)(v31 + 48), (uint64_t)v80);
      v52 = v80;
      v80 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v50);
        else
          *(_DWORD *)v52 -= 2;
      }
    }
    v53 = (WTF::StringImpl *)v88;
    v88 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v50);
      else
        *(_DWORD *)v53 -= 2;
    }
    v31 = *(_QWORD *)a5;
    if (!v51)
      goto LABEL_29;
    v54 = *(WebCore::CSSValue **)(a4 + 32);
    if (v54 && *((_DWORD *)v54 + 1))
    {
      *(_DWORD *)v54 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v54 = v80;
    }
    v88 = (WebCore::CSSValue **)v54;
    WebCore::CSSPropertyParserWorkerSafe::parseFontFaceFeatureSettings(a1, (int **)&v80);
    v56 = v80;
    if (v80)
    {
      WebCore::CSSFontFace::setFeatureSettings(*(WebCore::CSSFontFace **)(v31 + 48), v80);
      v57 = v80;
      v80 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v55);
        else
          *(_DWORD *)v57 -= 2;
      }
    }
    v58 = (WTF::StringImpl *)v88;
    v88 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v55);
      else
        *(_DWORD *)v58 -= 2;
    }
    v31 = *(_QWORD *)a5;
    if (!v56)
      goto LABEL_29;
    v59 = *(WebCore::CSSValue **)(a4 + 40);
    if (v59 && *((_DWORD *)v59 + 1))
    {
      *(_DWORD *)v59 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v59 = v80;
    }
    v88 = (WebCore::CSSValue **)v59;
    WebCore::CSSPropertyParserWorkerSafe::parseFontFaceDisplay(a1, (int **)&v80);
    v61 = v80;
    if (v80)
    {
      WebCore::CSSFontFace::setDisplay(*(WebCore::CSSFontFace **)(v31 + 48), v80);
      v62 = v80;
      v80 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, v60);
        else
          *(_DWORD *)v62 -= 2;
      }
    }
    v63 = (WTF::StringImpl *)v88;
    v88 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v60);
      else
        *(_DWORD *)v63 -= 2;
    }
    v31 = *(_QWORD *)a5;
    if (!v61)
    {
LABEL_29:
      v32 = *(_QWORD *)(v31 + 56);
      LOBYTE(v80) = 9;
      v81 = 0;
      WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::reject(v32, (WTF::StringImpl *)&v80, 0);
      result = v81;
      v81 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
        else
          *(_DWORD *)result -= 2;
      }
      v33 = *(_QWORD *)(v31 + 48);
LABEL_33:
      if (*(_BYTE *)(v33 + 138) != 4)
      {
        if (!*(_BYTE *)(v33 + 138))
          WebCore::CSSFontFace::setStatus(v33, 1);
        result = WebCore::CSSFontFace::setStatus(v33, 4);
      }
      goto LABEL_37;
    }
    v64 = *(WebCore::CSSValue ***)(a4 + 48);
    if (v64 && *((_DWORD *)v64 + 1))
    {
      *(_DWORD *)v64 += 2;
      v88 = v64;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    WebCore::CSSPropertyParserWorkerSafe::parseFontFaceSizeAdjust(a1, (__int128 ***)&v80);
    v65 = v80;
    if (v80)
    {
      WebCore::CSSFontFace::setSizeAdjust(*(WebCore::CSSFontFace **)(v31 + 48), v80);
      v66 = v80;
      v80 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, v26);
        else
          *(_DWORD *)v66 -= 2;
      }
    }
    result = (WTF::StringImpl *)v88;
    v88 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
        if (v65)
        {
LABEL_141:
          if (!v79)
            result = (WTF::StringImpl *)WebCore::CSSFontFace::pump(*(_QWORD *)(*(_QWORD *)a5 + 48), 1);
LABEL_37:
          if (!v75)
            return result;
          result = v74;
          v74 = 0;
          if (!result)
            return result;
LABEL_39:
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
          *(_DWORD *)result -= 2;
          return result;
        }
        goto LABEL_145;
      }
      *(_DWORD *)result -= 2;
    }
    if (v65)
      goto LABEL_141;
LABEL_145:
    v67 = *(_QWORD *)a5;
    v68 = *(_QWORD *)(v67 + 56);
    LOBYTE(v80) = 9;
    v81 = 0;
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::reject(v68, (WTF::StringImpl *)&v80, 0);
    result = v81;
    v81 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
      else
        *(_DWORD *)result -= 2;
    }
    v33 = *(_QWORD *)(v67 + 48);
    goto LABEL_33;
  }
  v25 = *(_QWORD *)(v10 + 56);
  LOBYTE(v80) = 9;
  v81 = 0;
  WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::reject(v25, (WTF::StringImpl *)&v80, 0);
  v27 = v81;
  v81 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = *(_QWORD *)(v10 + 48);
  if (*(_BYTE *)(v28 + 138) != 4)
  {
    if (!*(_BYTE *)(v28 + 138))
      WebCore::CSSFontFace::setStatus(*(_QWORD *)(v10 + 48), 1);
    WebCore::CSSFontFace::setStatus(v28, 4);
  }
  result = v77;
  if (v77)
    goto LABEL_39;
  return result;
}

WTF::StringImpl *WebCore::FontFace::setFamily@<X0>(WTF::StringImpl *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::AtomStringImpl **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::CSSValuePool *v8;
  WTF::AtomStringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  WTF::StringImpl *v15;
  WTF::AtomStringImpl *v16;

  if (*a3)
  {
    v6 = *((_QWORD *)this + 6);
    v8 = (WebCore::CSSValuePool *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 312))(a2);
    v9 = *a3;
    if (*a3)
    {
      if ((*((_BYTE *)v9 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v9 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v9, v7);
        v9 = v16;
      }
    }
    v15 = v9;
    WebCore::CSSValuePool::createFontFamilyValue(v8, &v15, &v16);
    v10 = v16;
    v16 = 0;
    v11 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v11 = 2;
    v12 = (*(unsigned __int8 *)(v11 + 6) << 16) & 0xFC0000;
    *(_DWORD *)(v11 + 8) = 1;
    *(_WORD *)(v11 + 4) = -9728;
    *(_BYTE *)(v11 + 6) = (v12 | 0x10000u) >> 16;
    *(_QWORD *)(v11 + 16) = v10;
    WebCore::CSSFontFace::setFamilies(v6, (WTF *)v11);
    if (*(_DWORD *)v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v11, v13);
    else
      *(_DWORD *)v11 -= 2;
    v14 = v16;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    this = v15;
    v15 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v13);
      else
        *(_DWORD *)this -= 2;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    *(_BYTE *)a4 = 9;
    a4[1] = 0;
    *((_BYTE *)a4 + 16) = 1;
  }
  return this;
}

_QWORD *WebCore::FontFace::create@<X0>(WebCore::FontFace *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  _BYTE v16[24];

  v7 = WTF::fastMalloc((WTF *)0x48);
  v8 = v7;
  *(_DWORD *)(v7 + 24) = 1;
  if (this && !*((_BYTE *)this + 274))
  {
    v9 = (char *)this - 192;
    v10 = *((_QWORD *)this + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    this = (WebCore::FontFace *)(v9 + 192);
  }
  *(_QWORD *)v7 = &off_1E33A18C0;
  *(_QWORD *)(v7 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v7, this);
  *(_QWORD *)v8 = &off_1E33A0540;
  *(_QWORD *)(v8 + 16) = 0;
  if (this)
  {
    if (*((_BYTE *)this + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x19580354CLL);
    }
    v15 = v8;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 16, &v15, (uint64_t)v16);
  }
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)v8 = &off_1E3399670;
  *(_QWORD *)(v8 + 32) = &unk_1E33996D0;
  ++*((_DWORD *)a2 + 2);
  *(_QWORD *)(v8 + 48) = a2;
  v12 = WTF::fastMalloc((WTF *)0x40);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = off_1E3399610;
  v13[1] = WebCore::FontFace::loadedPromiseResolve;
  v13[2] = 0;
  v13[3] = v8;
  *(_QWORD *)v12 = v13;
  *(_BYTE *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v12 + 56;
  *(_QWORD *)(v12 + 48) = 1;
  *(_QWORD *)(v8 + 56) = v12;
  *(_BYTE *)(v8 + 64) = 0;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(v8 + 48) + 96, (_QWORD *)(v8 + 32), (uint64_t)v16);
  *a3 = v8;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8);
}

void WebCore::FontFace::~FontFace(WebCore::FontFace *this)
{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  WebCore::CSSFontFace *v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 6) + 96, (_QWORD *)this + 4);
  v3 = (uint64_t *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    v4 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::~DOMPromiseProxyWithResolveCallback(v3, v2);
    WTF::fastFree((WTF *)v4, v5);
  }
  v6 = (WebCore::CSSFontFace *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 2) == 1)
    {
      WebCore::CSSFontFace::~CSSFontFace(v6);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*((_DWORD *)v6 + 2);
    }
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::FontFace::~FontFace(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::FontFace::~FontFace(WebCore::FontFace *this)
{
  WebCore::FontFace::~FontFace((WebCore::FontFace *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;

  WebCore::FontFace::~FontFace((WebCore::FontFace *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::FontFace::adopt(WebCore::FontFace *this, WebCore::CSSFontFace *a2)
{
  _QWORD *v4;
  WebCore::CSSFontFace *v5;
  WebCore::CSSFontFace *v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v17;
  void *v18;
  _BYTE v19[24];

  v4 = (_QWORD *)((char *)this + 32);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 6) + 96, (_QWORD *)this + 4);
  ++*((_DWORD *)a2 + 2);
  v5 = (WebCore::CSSFontFace *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = a2;
  v6 = a2;
  if (v5)
  {
    if (*((_DWORD *)v5 + 2) == 1)
    {
      WebCore::CSSFontFace::~CSSFontFace(v5);
      WTF::fastFree(v17, v18);
      v6 = (WebCore::CSSFontFace *)*((_QWORD *)this + 6);
    }
    else
    {
      --*((_DWORD *)v5 + 2);
      v6 = a2;
    }
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v6 + 96, v4, (uint64_t)v19);
  v8 = *((_QWORD *)this + 5);
  if (v8)
    goto LABEL_19;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = v4;
  v9 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v8;
  if (!v9)
    goto LABEL_19;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v7);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
LABEL_19:
    do
      v12 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v12 + 1, (unsigned int *)v8));
  }
  v13 = (unsigned int *)*((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v8;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v7);
    }
  }
  return WebCore::CSSFontFace::initializeWrapper((uint64_t)a2);
}

WTF::StringImpl *WebCore::FontFace::fontStateChanged(WTF::StringImpl *result, uint64_t a2, uint64_t a3, int a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6[8];
  WTF::StringImpl *v7;

  v4 = result;
  if (a4 == 4)
  {
    result = (WTF::StringImpl *)*((_QWORD *)result + 7);
    if (!*((_BYTE *)result + 32))
    {
      v6[0] = 15;
      v7 = 0;
      WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::reject((uint64_t)result, (WTF::StringImpl *)v6, 0);
      result = v7;
      v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (a4 == 3)
  {
    result = (WTF::StringImpl *)*((_QWORD *)result + 7);
    if (!*((_BYTE *)result + 32))
      return (WTF::StringImpl *)WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::resolve((uint64_t)result, v4);
  }
  return result;
}

uint64_t WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::resolve(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  char v17;

  v3 = result;
  if (*(_BYTE *)(result + 32))
  {
    LOBYTE(v15) = 0;
    v17 = 0;
    result = std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v15, result + 8);
    if (v17)
    {
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  v4 = *(unsigned int *)(v3 + 52);
  v15 = (WTF *)&v17;
  LODWORD(v16) = 1;
  HIDWORD(v16) = v4;
  if (v4 < 2)
  {
    v5 = (WTF *)&v17;
    if (!(_DWORD)v4)
      goto LABEL_9;
LABEL_22:
    v10 = *(uint64_t **)(v3 + 40);
    v11 = 8 * v4;
    v12 = v5;
    do
    {
      v13 = *v10++;
      ++*(_DWORD *)(v13 + 16);
      *(_QWORD *)v12 = v13;
      v12 = (WTF *)((char *)v12 + 8);
      v11 -= 8;
    }
    while (v11);
    goto LABEL_9;
  }
  if (v4 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v9 = v4;
  result = WTF::fastMalloc((WTF *)(8 * v4));
  v5 = (WTF *)result;
  LODWORD(v16) = v9;
  v15 = (WTF *)result;
  v4 = *(unsigned int *)(v3 + 52);
  if ((_DWORD)v4)
    goto LABEL_22;
LABEL_9:
  if (HIDWORD(v16))
  {
    v6 = 8 * HIDWORD(v16);
    do
    {
      v7 = *(_QWORD *)v5;
      v5 = (WTF *)((char *)v5 + 8);
      result = WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FontFace>>(v7, a2);
      v6 -= 8;
    }
    while (v6);
    v5 = v15;
    if (HIDWORD(v16))
    {
      v14 = 8 * HIDWORD(v16);
      do
      {
        result = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 16);
        }
        v5 = (WTF *)((char *)v5 + 8);
        v14 -= 8;
      }
      while (v14);
      v5 = v15;
    }
  }
  if (&v17 != (char *)v5 && v5 != 0)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    return WTF::fastFree(v5, a2);
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::FontFace::fontStateChanged(WTF::StringImpl *result, uint64_t a2, uint64_t a3, int a4)
{
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;

  if (a4 == 4)
  {
    result = (WTF::StringImpl *)*((_QWORD *)result + 3);
    if (!*((_BYTE *)result + 32))
    {
      v5[0] = 15;
      v6 = 0;
      WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::reject((uint64_t)result, (WTF::StringImpl *)v5, 0);
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (a4 == 3 && !*(_BYTE *)(*((_QWORD *)result + 3) + 32))
  {
    return (WTF::StringImpl *)WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::resolve(*((_QWORD *)result + 3), (WTF::StringImpl *)((char *)result - 32));
  }
  return result;
}

BOOL WebCore::FontFace::virtualHasPendingActivity(WebCore::FontFace *this)
{
  return *((_BYTE *)this + 64) && *(_BYTE *)(*((_QWORD *)this + 7) + 32) == 0;
}

uint64_t WebCore::FontFaceSet::FontFaceSet(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t **a3)
{
  WebCore::ScriptExecutionContext *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::FontFaceSet *v25;
  _QWORD v26[2];
  int v27;
  uint64_t v28;
  _QWORD v29[3];

  v4 = a2;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E3399540;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E33A4FC0;
  v6 = a1 + 48;
  if (!*((_BYTE *)a2 + 274))
  {
    v7 = (char *)a2 - 192;
    v8 = *((_QWORD *)a2 + 64);
    if (v8)
    {
      v9 = *(char **)(v8 + 8);
      if (v9)
        v7 = v9;
    }
    v4 = (WebCore::ScriptExecutionContext *)(v7 + 192);
  }
  *(_QWORD *)(a1 + 48) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 56) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 48), v4);
  *(_QWORD *)(a1 + 48) = &off_1E33A0540;
  *(_QWORD *)(a1 + 64) = 0;
  if (*((_BYTE *)v4 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195803CF4);
  }
  v28 = v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v4 + 16, &v28, (uint64_t)v29);
  *(_QWORD *)a1 = off_1E3399720;
  *(_QWORD *)(a1 + 24) = &unk_1E3399788;
  *(_QWORD *)(a1 + 48) = &unk_1E3399800;
  v10 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v10 + 16) = 1;
  *(_QWORD *)v10 = off_1E33978A0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_QWORD *)(v10 + 72) = 0;
  *(_DWORD *)(v10 + 80) = 1;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 116) = 0u;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = 0;
  v11 = WTF::fastMalloc((WTF *)0x40);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E3399648;
  v12[1] = WebCore::FontFaceSet::readyPromiseResolve;
  v12[2] = 0;
  v12[3] = a1;
  *(_QWORD *)v11 = v12;
  *(_BYTE *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 56;
  *(_QWORD *)(v11 + 48) = 1;
  *(_QWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 96) = 1;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(a1 + 72) + 104, (_QWORD *)a1, (uint64_t)v29);
  v13 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v13)
    return a1;
  v14 = *a3;
  v15 = &v14[v13];
  while (1)
  {
    v16 = *v14;
    v17 = *(_QWORD *)(a1 + 72);
    v18 = *(_QWORD *)(*v14 + 48);
    v19 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD **)(v17 + 24);
      v21 = 8 * v19;
      while (*v20 != v18)
      {
        ++v20;
        v21 -= 8;
        if (!v21)
          goto LABEL_13;
      }
      goto LABEL_17;
    }
LABEL_13:
    v22 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v22 == -1)
      break;
    v29[0] = &v28;
    if (!((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v22])(v29, v18 + 16))
    {
      WebCore::CSSFontFaceSet::add(*(WebCore::CSSFontFaceSet **)(a1 + 72), *(WebCore::CSSFontFace **)(v16 + 48));
LABEL_17:
      v23 = 0;
      v26[0] = a1;
      goto LABEL_18;
    }
    LOBYTE(v26[0]) = 10;
    v26[1] = 0;
    v23 = 1;
LABEL_18:
    v27 = v23;
    ((void (*)(_QWORD *, _QWORD *))off_1E3399568[v23])(v29, v26);
    v27 = -1;
    if (++v14 == v15)
      return a1;
  }
  v25 = (WebCore::FontFaceSet *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::FontFaceSet::readyPromiseResolve(v25);
}

WebCore::FontFaceSet *WebCore::FontFaceSet::FontFaceSet(WebCore::FontFaceSet *this, WebCore::ScriptExecutionContext *a2, WebCore::CSSFontFaceSet *a3)
{
  char *v6;
  WebCore::ScriptExecutionContext *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  char *v16;
  _BYTE v17[24];

  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E3399540;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = &unk_1E33A4FC0;
  v6 = (char *)this + 48;
  v7 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v8 = (char *)a2 - 192;
    v9 = *((_QWORD *)a2 + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    v7 = (WebCore::ScriptExecutionContext *)(v8 + 192);
  }
  *((_QWORD *)this + 6) = &off_1E33A18C0;
  *((_QWORD *)this + 7) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::FontFaceSet *)((char *)this + 48), v7);
  *((_QWORD *)this + 6) = &off_1E33A0540;
  *((_QWORD *)this + 8) = 0;
  if (*((_BYTE *)v7 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195803EE0);
  }
  v16 = v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v7 + 16, (uint64_t *)&v16, (uint64_t)v17);
  *(_QWORD *)this = off_1E3399720;
  *((_QWORD *)this + 3) = &unk_1E3399788;
  *((_QWORD *)this + 6) = &unk_1E3399800;
  ++*((_DWORD *)a3 + 4);
  *((_QWORD *)this + 9) = a3;
  *((_QWORD *)this + 10) = 0;
  v11 = WTF::fastMalloc((WTF *)0x40);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  LOBYTE(v13) = 0;
  *v12 = off_1E3399648;
  v12[1] = WebCore::FontFaceSet::readyPromiseResolve;
  v12[2] = 0;
  v12[3] = this;
  *(_QWORD *)v11 = v12;
  *(_BYTE *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 56;
  *(_QWORD *)(v11 + 48) = 1;
  *((_QWORD *)this + 11) = v11;
  *((_BYTE *)this + 96) = 1;
  if (!*((_BYTE *)a2 + 274))
  {
    v13 = *((_QWORD *)a2 + 42);
    if (v13)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (v13)
      {
        v14 = *((_BYTE *)a2 + 3195);
        if (v14)
          v14 = *((_BYTE *)a2 + 3194) == 0;
        *((_BYTE *)this + 96) = v14;
        LOBYTE(v13) = v14 ^ 1;
      }
    }
  }
  if ((v13 & 1) == 0 && *((_DWORD *)a3 + 20))
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFaceSet>>::resolve(v11, this);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*((_QWORD *)this + 9) + 104, this, (uint64_t)v17);
  return this;
}

uint64_t WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFaceSet>>::resolve(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  char v17;

  v3 = result;
  if (*(_BYTE *)(result + 32))
  {
    LOBYTE(v15) = 0;
    v17 = 0;
    result = std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v15, result + 8);
    if (v17)
    {
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  v4 = *(unsigned int *)(v3 + 52);
  v15 = (WTF *)&v17;
  LODWORD(v16) = 1;
  HIDWORD(v16) = v4;
  if (v4 < 2)
  {
    v5 = (WTF *)&v17;
    if (!(_DWORD)v4)
      goto LABEL_9;
LABEL_22:
    v10 = *(uint64_t **)(v3 + 40);
    v11 = 8 * v4;
    v12 = v5;
    do
    {
      v13 = *v10++;
      ++*(_DWORD *)(v13 + 16);
      *(_QWORD *)v12 = v13;
      v12 = (WTF *)((char *)v12 + 8);
      v11 -= 8;
    }
    while (v11);
    goto LABEL_9;
  }
  if (v4 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v9 = v4;
  result = WTF::fastMalloc((WTF *)(8 * v4));
  v5 = (WTF *)result;
  LODWORD(v16) = v9;
  v15 = (WTF *)result;
  v4 = *(unsigned int *)(v3 + 52);
  if ((_DWORD)v4)
    goto LABEL_22;
LABEL_9:
  if (HIDWORD(v16))
  {
    v6 = 8 * HIDWORD(v16);
    do
    {
      v7 = *(_QWORD *)v5;
      v5 = (WTF *)((char *)v5 + 8);
      result = WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FontFaceSet>>(v7, (uint64_t)a2);
      v6 -= 8;
    }
    while (v6);
    v5 = v15;
    if (HIDWORD(v16))
    {
      v14 = 8 * HIDWORD(v16);
      do
      {
        result = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 16);
        }
        v5 = (WTF *)((char *)v5 + 8);
        v14 -= 8;
      }
      while (v14);
      v5 = v15;
    }
  }
  if (&v17 != (char *)v5 && v5 != 0)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    return WTF::fastFree(v5, a2);
  }
  return result;
}

void WebCore::FontFaceSet::~FontFaceSet(WebCore::FontFaceSet *this, void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  WebCore::CSSFontFaceSet *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;

  v3 = (uint64_t *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    v4 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::~DOMPromiseProxyWithResolveCallback(v3, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
  v6 = *((_QWORD *)this + 10);
  if (v6)
    WTF::HashTable<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashMap<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>>::deallocateTable(v6, a2);
  v7 = (WebCore::CSSFontFaceSet *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 4) == 1)
    {
      WebCore::CSSFontFaceSet::~CSSFontFaceSet(v7, a2);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*((_DWORD *)v7 + 4);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::FontFaceSet *)((char *)this + 48), a2);
  WebCore::EventTarget::~EventTarget((WebCore::FontFaceSet *)((char *)this + 24), v8);
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::FontFaceSet::~FontFaceSet(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::FontFaceSet::~FontFaceSet(WebCore::FontFaceSet *this, void *a2)
{
  WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)((char *)this - 24), a2);
}

{
  WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)((char *)this - 48), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)((char *)this - 48), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::FontFaceSet::Iterator::next@<X0>(unsigned int *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::ScriptExecutionContext *v16;

  v2 = this;
  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 120);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 80);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          if (!*(_BYTE *)(v9 + 178))
          {
            *(_DWORD *)(v9 - 264) += 2;
            this = (unsigned int *)WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v9 - 288));
            if (*(_DWORD *)(v9 - 264) == 2)
            {
              if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 288), v10);
            }
            else
            {
              *(_DWORD *)(v9 - 264) -= 2;
            }
          }
        }
      }
    }
  }
  if (v4 >= *(unsigned int *)(*(_QWORD *)(v5 + 72) + 36))
  {
    *a2 = 0;
  }
  else
  {
    v11 = *(_QWORD *)v2;
    v12 = *((_QWORD *)v2 + 1);
    v13 = *(_QWORD *)(*(_QWORD *)v2 + 72);
    *((_QWORD *)v2 + 1) = v12 + 1;
    if (v12 >= *(unsigned int *)(v13 + 36))
    {
      __break(0xC471u);
    }
    else
    {
      v14 = *(_QWORD *)(v11 + 56);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
          v16 = (WebCore::ScriptExecutionContext *)(v15 - 96);
        else
          v16 = 0;
      }
      else
      {
        v16 = 0;
      }
      return (unsigned int *)WebCore::CSSFontFace::wrapper(*(WebCore::ScriptExecutionContext **)(*(_QWORD *)(v13 + 24) + 8 * v12), v16, a2);
    }
  }
  return this;
}

uint64_t WebCore::FontFaceSet::scriptExecutionContext(WebCore::FontFaceSet *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 7);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void WebCore::FontFaceSet::PendingPromise::~PendingPromise(WebCore::FontFaceSet::PendingPromise *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  uint64_t v5;
  WebCore::FontFace **v6;
  uint64_t v7;
  WebCore::FontFace *v8;
  WTF *v9;
  void *v10;
  WTF *v11;

  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
    WTF::fastFree(v3, a2);
  }
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v6 = (WebCore::FontFace **)*((_QWORD *)this + 1);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 1)
        {
          WebCore::FontFace::~FontFace(v8);
          WTF::fastFree(v9, v10);
        }
        else
        {
          --*((_DWORD *)v8 + 6);
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = (WTF *)*((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v11, a2);
  }
}

uint64_t WebCore::FontFaceSet::has(WebCore::FontFaceSet *this, WebCore::FontFace *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  BOOL v18;
  int v19;
  WTF::String *v20;
  WTF::String *v21;
  char v22;
  char *v23;

  v2 = *((_QWORD *)a2 + 6);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 == -1)
  {
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FontFaceSet::load(v19, v20, v21);
  }
  else
  {
    v23 = &v22;
    if (((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v23, v2 + 16))
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 9) + 120);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 80);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              if (!*(_BYTE *)(v9 + 178))
              {
                *(_DWORD *)(v9 - 264) += 2;
                WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v9 - 288));
                if (*(_DWORD *)(v9 - 264) == 2)
                {
                  if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 288), v10);
                }
                else
                {
                  *(_DWORD *)(v9 - 264) -= 2;
                }
              }
            }
          }
        }
      }
    }
    v11 = *((_QWORD *)this + 9);
    v12 = *(unsigned int *)(v11 + 36);
    if ((_DWORD)v12)
    {
      v13 = *((_QWORD *)a2 + 6);
      v14 = *(uint64_t **)(v11 + 24);
      v15 = 8 * v12 - 8;
      do
      {
        v16 = *v14++;
        result = v16 == v13;
        v18 = v16 == v13 || v15 == 0;
        v15 -= 8;
      }
      while (!v18);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::FontFaceSet::load(uint64_t a1, unsigned int **a2, WTF::String *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t result;
  WTF *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::ScriptExecutionContext **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  WebCore::ScriptExecutionContext **v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::ScriptExecutionContext *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::FontFace *v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  WebCore::FontFace **v50;
  WebCore::FontFace *v51;
  WebCore::FontFace **v52;
  int v53;
  WebCore::FontFaceSet::PendingPromise ***v54;
  uint64_t v55;
  WebCore::FontFaceSet::PendingPromise **v56;
  uint64_t v57;
  WebCore::FontFaceSet::PendingPromise *v58;
  WTF *v59;
  void *v60;
  WTF *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  char **v69;
  uint64_t v70;
  char *v71;
  WebCore::FontFace *v72;
  uint64_t v73;
  char *v74;
  WTF *v75;
  void *v76;
  WTF *v77;
  void *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  void *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::ScriptExecutionContext *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WebCore::FontFace *v97;
  WTF *v98;
  void *v99;
  uint64_t *v100;
  WTF *v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  objc_class *v106;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 120);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 80);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          if (!*(_BYTE *)(v10 + 178))
          {
            *(_DWORD *)(v10 - 264) += 2;
            WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v10 - 288));
            if (*(_DWORD *)(v10 - 264) == 2)
            {
              if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v11);
            }
            else
            {
              *(_DWORD *)(v10 - 264) -= 2;
            }
          }
        }
      }
    }
  }
  WebCore::CSSFontFaceSet::matchingFacesExcludingPreinstalledFonts(*(WebCore::CSSFontFaceSet **)(a1 + 72), a2, (uint64_t)&v101);
  if (!v103)
  {
    v16 = v101;
    v17 = HIDWORD(v102);
    v101 = 0;
    v102 = 0;
    if (!(_DWORD)v17)
    {
      v104 = 0;
      v105 = 0;
      result = WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FontFace>>>(*a4, (uint64_t)&v104);
      goto LABEL_106;
    }
    v18 = 0;
    v19 = 8 * v17;
    v20 = (WebCore::ScriptExecutionContext **)((char *)v16 + 8 * v17);
    do
    {
      result = WebCore::CSSFontFace::pump(*(_QWORD *)((char *)v16 + v18), 1);
      v18 += 8;
    }
    while (v19 != v18);
    v21 = *(_QWORD *)(a1 + 56);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        if (!*(_BYTE *)(v22 + 178))
        {
          v80 = *(_BYTE **)(v22 + 400);
          if (!v80)
          {
            result = WebCore::Document::ensureQuirks((WebCore::Document *)(v22 - 288));
            v80 = (_BYTE *)result;
          }
          if (*(_QWORD *)v80)
          {
            v81 = *(_QWORD *)(*(_QWORD *)v80 + 8);
            if (v81)
            {
              v82 = *(_QWORD *)(v81 + 680);
              if (!*(_BYTE *)(v82 + 243))
              {
                if ((*(_QWORD *)(v82 + 688) & 0x80000) == 0)
                  goto LABEL_24;
LABEL_117:
                if (!*(_BYTE *)(v82 + 368))
                  goto LABEL_24;
                if (v80[56])
                {
                  if (!v80[55])
                    goto LABEL_24;
                }
                else
                {
                  v85 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v81 + 736));
                  result = WTF::operator==(v85, v86, "play.hbomax.com", 16);
                  *(_WORD *)(v80 + 55) = result | 0x100;
                  if (!(_DWORD)result)
                    goto LABEL_24;
                }
                v87 = 8 * v17;
                v88 = v16;
                do
                {
                  if (*(_DWORD *)(*(_QWORD *)v88 + 92))
                    goto LABEL_24;
                  v88 = (WTF *)((char *)v88 + 8);
                  v87 -= 8;
                }
                while (v87);
                v89 = *(_QWORD *)(a1 + 56);
                if (v89)
                {
                  v90 = *(_QWORD *)(v89 + 8);
                  if (v90)
                    v91 = (WebCore::ScriptExecutionContext *)(v90 - 96);
                  else
                    v91 = 0;
                }
                else
                {
                  v91 = 0;
                }
                if (!(v17 >> 29))
                {
                  v92 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v17));
                  v93 = 0;
                  LODWORD(v105) = v17;
                  v104 = v92;
                  if (v17 <= 1)
                    v94 = 1;
                  else
                    v94 = v17;
                  v95 = 8 * v94;
                  do
                  {
                    WebCore::CSSFontFace::wrapper(*(WebCore::ScriptExecutionContext **)((char *)v16 + v93), v91, (uint64_t *)&v106);
                    *(_QWORD *)((char *)v92 + v93) = v106;
                    v93 += 8;
                  }
                  while (v95 != v93);
                  HIDWORD(v105) = v94;
                  WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FontFace>>>(*a4, (uint64_t)&v104);
                  v96 = 0;
                  do
                  {
                    v97 = *(WebCore::FontFace **)((char *)v92 + v96);
                    *(_QWORD *)((char *)v92 + v96) = 0;
                    if (v97)
                    {
                      if (*((_DWORD *)v97 + 6) == 1)
                      {
                        WebCore::FontFace::~FontFace(v97);
                        WTF::fastFree(v98, v99);
                      }
                      else
                      {
                        --*((_DWORD *)v97 + 6);
                      }
                    }
                    v96 += 8;
                  }
                  while (v95 != v96);
                  v83 = v92;
                  goto LABEL_149;
                }
                goto LABEL_154;
              }
              if (*(_BYTE *)(v82 + 242))
                goto LABEL_117;
            }
          }
        }
      }
    }
LABEL_24:
    v23 = 0;
    while (*(_BYTE *)(*(_QWORD *)((char *)v16 + v23) + 138) != 4)
    {
      v23 += 8;
      if (v19 == v23)
      {
        v24 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = 0;
        v25 = (char **)(v24 + 8);
        *(_QWORD *)(v24 + 16) = 0;
        v26 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v27 = 0;
        v28 = *a4;
        *a4 = 0;
        *v26 = v28;
        *(_QWORD *)(v24 + 24) = v26;
        *(_BYTE *)(v24 + 32) = 0;
        v29 = (uint64_t *)(a1 + 80);
        v30 = (WebCore::ScriptExecutionContext **)v16;
        while (1)
        {
          while (1)
          {
            v31 = *(_QWORD *)(a1 + 56);
            if (v31)
            {
              v32 = *(_QWORD *)(v31 + 8);
              if (v32)
                v33 = (WebCore::ScriptExecutionContext *)(v32 - 96);
              else
                v33 = 0;
            }
            else
            {
              v33 = 0;
            }
            WebCore::CSSFontFace::wrapper(*v30, v33, (uint64_t *)&v104);
            v35 = *(unsigned int *)(v24 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v24 + 16))
            {
              v36 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25, v35 + 1, (unint64_t)&v104);
              v35 = *(unsigned int *)(v24 + 20);
              v37 = *(char **)(v24 + 8);
              v38 = *(WTF::StringImpl **)v36;
              *(_QWORD *)v36 = 0;
            }
            else
            {
              v37 = *v25;
              v38 = v104;
              v104 = 0;
            }
            *(_QWORD *)&v37[8 * v35] = v38;
            *(_DWORD *)(v24 + 20) = v35 + 1;
            result = (uint64_t)v104;
            v104 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 1)
              {
                WebCore::FontFace::~FontFace((WebCore::FontFace *)result);
                result = WTF::fastFree(v39, v40);
              }
              else
              {
                --*(_DWORD *)(result + 24);
              }
            }
            if (*((_BYTE *)*v30 + 138) != 3)
              break;
            if (++v30 == v20)
            {
              if ((v27 & 1) == 0)
                result = WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FontFace>>>(**(_QWORD **)(v24 + 24), (uint64_t)v25);
LABEL_104:
              if (*(_DWORD *)v24 != 1)
              {
                --*(_DWORD *)v24;
                goto LABEL_106;
              }
              WebCore::FontFaceSet::PendingPromise::~PendingPromise((WebCore::FontFaceSet::PendingPromise *)v24, v34);
LABEL_149:
              result = WTF::fastFree(v83, v84);
              goto LABEL_106;
            }
          }
          v41 = *((_QWORD *)*v30 + 14);
          if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0)
          {
            v43 = (WebCore::FontFace *)(v42 - 32);
            ++*(_DWORD *)(v42 - 8);
          }
          else
          {
            v43 = 0;
          }
          v44 = *v29;
          if (*v29
            || (WTF::HashTable<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashMap<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>>::rehash(v29, 8u, 0), (v44 = *v29) != 0))
          {
            v45 = *(_DWORD *)(v44 - 8);
          }
          else
          {
            v45 = 0;
          }
          v46 = ((unint64_t)v43 + ~((_QWORD)v43 << 32)) ^ (((unint64_t)v43 + ~((_QWORD)v43 << 32)) >> 22);
          v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
          v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
          v49 = v45 & ((v48 >> 31) ^ v48);
          v50 = (WebCore::FontFace **)(v44 + 24 * v49);
          v51 = *v50;
          if (!*v50)
            break;
          v52 = 0;
          v53 = 1;
          while (v51 != v43)
          {
            if (v51 == (WebCore::FontFace *)-1)
              v52 = v50;
            v49 = (v49 + v53) & v45;
            v50 = (WebCore::FontFace **)(v44 + 24 * v49);
            v51 = *v50;
            ++v53;
            if (!*v50)
            {
              if (v52)
              {
                *v52 = 0;
                v52[1] = 0;
                v52[2] = 0;
                --*(_DWORD *)(*v29 - 16);
                v50 = v52;
              }
              goto LABEL_57;
            }
          }
LABEL_81:
          v69 = (char **)(v50 + 1);
          ++*(_DWORD *)v24;
          v104 = (WTF::StringImpl *)v24;
          v70 = *((unsigned int *)v50 + 5);
          if ((_DWORD)v70 == *((_DWORD *)v50 + 4))
          {
            v71 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v69, v70 + 1, (unint64_t)&v104);
            v70 = *((unsigned int *)v50 + 5);
            v72 = v50[1];
            v73 = *(_QWORD *)v71;
            *(_QWORD *)v71 = 0;
            *((_QWORD *)v72 + v70) = v73;
          }
          else
          {
            v74 = *v69;
            v104 = 0;
            *(_QWORD *)&v74[8 * v70] = v24;
          }
          *((_DWORD *)v50 + 5) = v70 + 1;
          result = (uint64_t)v104;
          v104 = 0;
          if (!result)
            goto LABEL_87;
          if (*(_DWORD *)result != 1)
          {
            --*(_DWORD *)result;
LABEL_87:
            if (v43)
              goto LABEL_88;
            goto LABEL_90;
          }
          WebCore::FontFaceSet::PendingPromise::~PendingPromise((WebCore::FontFaceSet::PendingPromise *)result, v34);
          result = WTF::fastFree(v77, v78);
          if (v43)
          {
LABEL_88:
            if (*((_DWORD *)v43 + 6) == 1)
            {
              WebCore::FontFace::~FontFace(v43);
              result = WTF::fastFree(v75, v76);
            }
            else
            {
              --*((_DWORD *)v43 + 6);
            }
          }
LABEL_90:
          ++v30;
          v27 = 1;
          if (v30 == v20)
            goto LABEL_104;
        }
LABEL_57:
        v100 = v29;
        *v50 = v43;
        v54 = (WebCore::FontFaceSet::PendingPromise ***)(v50 + 1);
        v55 = *((unsigned int *)v50 + 5);
        if ((_DWORD)v55)
        {
          v56 = *v54;
          v57 = 8 * v55;
          do
          {
            v58 = *v56;
            *v56 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 1)
              {
                WebCore::FontFaceSet::PendingPromise::~PendingPromise(v58, v34);
                WTF::fastFree(v59, v60);
              }
              else
              {
                --*(_DWORD *)v58;
              }
            }
            ++v56;
            v57 -= 8;
          }
          while (v57);
        }
        v61 = (WTF *)*v54;
        if (*v54)
        {
          v50[1] = 0;
          *((_DWORD *)v50 + 4) = 0;
          WTF::fastFree(v61, v34);
        }
        *v54 = 0;
        v50[2] = 0;
        v29 = v100;
        v62 = *v100;
        if (*v100)
          v63 = *(_DWORD *)(v62 - 12) + 1;
        else
          v63 = 1;
        *(_DWORD *)(v62 - 12) = v63;
        v64 = *v100;
        if (*v100)
          v65 = *(_DWORD *)(v64 - 12);
        else
          v65 = 0;
        v66 = (*(_DWORD *)(v64 - 16) + v65);
        v67 = *(unsigned int *)(v64 - 4);
        if (v67 > 0x400)
        {
          if (v67 <= 2 * v66)
          {
LABEL_76:
            v68 = (_DWORD)v67 << (6 * *(_DWORD *)(v64 - 12) >= (2 * v67));
            goto LABEL_79;
          }
        }
        else if (3 * v67 <= 4 * v66)
        {
          if ((_DWORD)v67)
            goto LABEL_76;
          v68 = 8;
LABEL_79:
          v50 = WTF::HashTable<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashMap<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>>::rehash(v100, v68, v50);
        }
        v43 = 0;
        goto LABEL_81;
      }
    }
    v79 = *a4;
    v104 = 0;
    WebCore::DeferredPromise::reject(v79, (JSC::JSGlobalObject *)0xF, (JSC::JSGlobalObject *)&v104, 0);
    result = (uint64_t)v104;
    v104 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_106:
    if (v16)
      result = WTF::fastFree(v16, v34);
    goto LABEL_108;
  }
  if (v103 != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_154:
    __break(0xC471u);
    return result;
  }
  v12 = v102;
  v102 = 0;
  v13 = *a4;
  v106 = 0;
  LOBYTE(v104) = (_BYTE)v101;
  if (v12)
    *(_DWORD *)v12 += 2;
  v105 = v12;
  WebCore::DeferredPromise::reject(v13, (unsigned __int8 *)&v104, 0, &v106);
  result = (uint64_t)v105;
  v105 = 0;
  if (!result)
  {
LABEL_15:
    if (v12)
      goto LABEL_16;
    goto LABEL_108;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_15;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
  if (v12)
  {
LABEL_16:
    if (*(_DWORD *)v12 == 2)
      result = WTF::StringImpl::destroy(v12, v14);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_108:
  if (v103 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E3399578[v103])(&v104, &v101);
  return result;
}

uint64_t WebCore::FontFaceSet::faceFinished(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF *v42;
  void *v43;
  WTF::StringImpl *v44;

  v3 = a2[14];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = (uint64_t *)(result + 80);
      v5 = *(_QWORD *)(result + 80);
      if (v5)
      {
        v8 = v4 - 32;
        v9 = *(_DWORD *)(v5 - 8);
        v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = v5 + 24 * v13;
        v15 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 != v8)
        {
          v16 = 1;
          while (v15)
          {
            v13 = (v13 + v16) & v9;
            v14 = v5 + 24 * v13;
            v15 = *(_QWORD *)v14;
            ++v16;
            if (*(_QWORD *)v14 == v8)
              goto LABEL_10;
          }
          v14 = v5 + 24 * *(unsigned int *)(v5 - 4);
        }
LABEL_10:
        if (v14 != v5 + 24 * *(unsigned int *)(v5 - 4))
        {
          v17 = *(WTF **)(v14 + 8);
          v18 = *(unsigned int *)(v14 + 20);
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          v19 = *v6;
          if (!*v6 || (v19 += 24 * *(unsigned int *)(v19 - 4), v19 != v14))
          {
            if (v19 != v14)
            {
              result = *(_QWORD *)v14;
              *(_QWORD *)v14 = -1;
              if (result)
              {
                if (*(_DWORD *)(result + 24) == 1)
                {
                  WebCore::FontFace::~FontFace((WebCore::FontFace *)result);
                  result = WTF::fastFree(v42, v43);
                }
                else
                {
                  --*(_DWORD *)(result + 24);
                }
              }
              v20 = *(unsigned int *)(v14 + 20);
              v21 = *(WTF **)(v14 + 8);
              if ((_DWORD)v20)
              {
                v22 = 8 * v20;
                do
                {
                  result = *(_QWORD *)v21;
                  *(_QWORD *)v21 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 1)
                    {
                      WebCore::FontFaceSet::PendingPromise::~PendingPromise((WebCore::FontFaceSet::PendingPromise *)result, a2);
                      result = WTF::fastFree(v23, v24);
                    }
                    else
                    {
                      --*(_DWORD *)result;
                    }
                  }
                  v21 = (WTF *)((char *)v21 + 8);
                  v22 -= 8;
                }
                while (v22);
                v21 = *(WTF **)(v14 + 8);
              }
              if (v21)
              {
                *(_QWORD *)(v14 + 8) = 0;
                *(_DWORD *)(v14 + 16) = 0;
                result = WTF::fastFree(v21, a2);
              }
              ++*(_DWORD *)(*v6 - 16);
              v25 = *v6;
              if (*v6)
                v26 = *(_DWORD *)(v25 - 12) - 1;
              else
                v26 = -1;
              *(_DWORD *)(v25 - 12) = v26;
              v27 = *v6;
              if (*v6)
              {
                v28 = 6 * *(_DWORD *)(v27 - 12);
                v29 = *(_DWORD *)(v27 - 4);
                if (v28 < v29 && v29 >= 9)
                  result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashMap<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>>::rehash(v6, v29 >> 1, 0);
              }
            }
          }
          if ((_DWORD)v18)
          {
            v31 = 8 * v18;
            if (a3 == 3)
            {
              v32 = 8 * v18;
              v33 = v17;
              do
              {
                v34 = *(_QWORD *)v33;
                if (!*(_BYTE *)(*(_QWORD *)v33 + 32) && *(_DWORD *)v34 == 1)
                {
                  WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FontFace>>>(**(_QWORD **)(v34 + 24), v34 + 8);
                  *(_BYTE *)(*(_QWORD *)v33 + 32) = 1;
                }
                v33 = (WTF *)((char *)v33 + 8);
                v32 -= 8;
              }
              while (v32);
            }
            else
            {
              v38 = 8 * v18;
              v39 = v17;
              do
              {
                if (!*(_BYTE *)(*(_QWORD *)v39 + 32))
                {
                  v40 = **(_QWORD **)(*(_QWORD *)v39 + 24);
                  v44 = 0;
                  WebCore::DeferredPromise::reject(v40, (JSC::JSGlobalObject *)0xF, (JSC::JSGlobalObject *)&v44, 0);
                  v41 = v44;
                  v44 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  *(_BYTE *)(*(_QWORD *)v39 + 32) = 1;
                }
                v39 = (WTF *)((char *)v39 + 8);
                v38 -= 8;
              }
              while (v38);
            }
            v35 = (uint64_t *)v17;
            do
            {
              result = *v35;
              *v35 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                {
                  WebCore::FontFaceSet::PendingPromise::~PendingPromise((WebCore::FontFaceSet::PendingPromise *)result, a2);
                  result = WTF::fastFree(v36, v37);
                }
                else
                {
                  --*(_DWORD *)result;
                }
              }
              ++v35;
              v31 -= 8;
            }
            while (v31);
          }
          if (v17)
            return WTF::fastFree(v17, a2);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::FontFaceSet::completedLoading(uint64_t this)
{
  WTF::StringImpl *v1;

  if (*(_BYTE *)(this + 96))
  {
    v1 = (WTF::StringImpl *)this;
    this = *(_QWORD *)(this + 88);
    if (!*(_BYTE *)(this + 32))
      return WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFaceSet>>::resolve(this, v1);
  }
  return this;
}

uint64_t WebCore::extractFontVariantLigatures(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v1 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  if ((v1 & 0x3F800) == 0x1D800)
  {
    v9 = *(_DWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_3;
    v10 = 0;
    v5 = 0;
    v4 = 0;
    v3 = 0;
    v2 = 0;
    v11 = 0;
    do
    {
      if (v10 > 3)
      {
        if (v9 <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x195805158);
        }
        v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * (v11 - 4));
      }
      else
      {
        v12 = (uint64_t *)(a1 + 16 + 8 * v11);
      }
      v13 = *v12;
      if (v13 && ((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F87F) == 0x50)
      {
        switch(*(_WORD *)(v13 + 8))
        {
          case '3':
            v5 = 1;
            break;
          case '4':
            v5 = 2;
            break;
          case '5':
            v4 = 1;
            break;
          case '6':
            v4 = 2;
            break;
          case '7':
            v2 = 1;
            break;
          case '8':
            v2 = 2;
            break;
          case '9':
            v3 = 1;
            break;
          case ':':
            v3 = 2;
            break;
          default:
            break;
        }
      }
      v10 = v11 + 1;
      v11 = (v11 + 1);
    }
    while (v9 != v10);
  }
  else
  {
    if ((v1 & 0x3F87F) != 0x50)
    {
LABEL_3:
      v2 = 0;
      v3 = 0;
      v4 = 0;
      v5 = 0;
      return (v2 << 16) | (v3 << 24) | (v4 << 8) | v5;
    }
    v7 = *(unsigned __int16 *)(a1 + 8);
    v8 = v7 == 6;
    if (v7 == 6)
      v2 = 2;
    else
      v2 = 0;
    if (v8)
      v3 = 2;
    else
      v3 = 0;
    if (v8)
      v4 = 2;
    else
      v4 = 0;
    if (v8)
      v5 = 2;
    else
      v5 = 0;
  }
  return (v2 << 16) | (v3 << 24) | (v4 << 8) | v5;
}

void WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(WebCore::ImmutableStyleProperties *this, WTF::StringImpl *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  _DWORD *v6;

  v3 = *((unsigned int *)this + 1);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = (unsigned int *)((char *)this + ((v3 >> 3) & 0x1FFFFFFE) + 8);
    do
    {
      v6 = (_DWORD *)(*v5 | ((unint64_t)*((unsigned __int8 *)v5 + 4) << 32));
      if (*v6 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
      else
        *v6 -= 2;
      ++v4;
      v5 = (unsigned int *)((char *)v5 + 5);
    }
    while (v4 < (unint64_t)*((unsigned int *)this + 1) >> 4);
  }
}

{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  _DWORD *v6;

  v3 = *((unsigned int *)this + 1);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = (unsigned int *)((char *)this + ((v3 >> 3) & 0x1FFFFFFE) + 8);
    do
    {
      v6 = (_DWORD *)(*v5 | ((unint64_t)*((unsigned __int8 *)v5 + 4) << 32));
      if (*v6 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
      else
        *v6 -= 2;
      ++v4;
      v5 = (unsigned int *)((char *)v5 + 5);
    }
    while (v4 < (unint64_t)*((unsigned int *)this + 1) >> 4);
  }
}

void WebCore::ImmutableStyleProperties::clearDeduplicationMap(WebCore::ImmutableStyleProperties *this, WTF::StringImpl *a2)
{
  uint64_t v2;

  if ((_MergedGlobals_164 & 1) != 0)
  {
    v2 = qword_1ECE82A18;
    if (qword_1ECE82A18)
    {
      qword_1ECE82A18 = 0;
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v2, a2);
    }
  }
  else
  {
    qword_1ECE82A18 = 0;
    _MergedGlobals_164 = 1;
  }
}

uint64_t WebCore::ImmutableStyleProperties::findCustomPropertyIndex(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 4);
  if (v3 >= 0x10)
  {
    v9 = a1 + 8;
    for (i = (v3 >> 4) - 1; i < 0xFFFFFFFFFFFFFFFELL; --i)
    {
      if ((*(_WORD *)(v9 + 2 * i) & 0x3FF) == 1)
      {
        v10 = (unsigned int *)(v9
                             + 5 * i
                             + (((unint64_t)*(unsigned int *)(a1 + 4) >> 3) & 0x1FFFFFFE));
        v11 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
        if (v11)
        {
          if (((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F800) != 0xE800)
          {
            result = 96;
            __break(0xC471u);
            return result;
          }
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(unsigned int *)(v12 + 16);
            v14 = *(unsigned __int8 **)(v12 + 8);
            v12 = *(unsigned int *)(v12 + 4);
            v15 = (v13 >> 2) & 1;
          }
          else
          {
            v14 = 0;
            v15 = 1;
          }
          if (WTF::operator==(v14, v12 | (v15 << 32), a2, a3))
            return i;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void WebCore::MediaList::~MediaList(WebCore::MediaList *this, void *a2)
{
  if (*((_BYTE *)this + 40))
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
}

{
  if (*((_BYTE *)this + 40))
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
}

uint64_t WebCore::MediaList::detachFromParent(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v1 = this;
  v2 = (_QWORD *)(this + 24);
  v3 = this + 24;
  if (*(_BYTE *)(this + 40))
    goto LABEL_12;
  v4 = *(_QWORD **)(this + 16);
  if (!v4)
    goto LABEL_9;
  this = (*(uint64_t (**)(_QWORD))(*v4 + 16))(*(_QWORD *)(this + 16));
  if ((_DWORD)this == 3)
  {
    v5 = v4[4];
LABEL_10:
    v3 = v5 + 48;
    goto LABEL_11;
  }
  v6 = *(_QWORD **)(v1 + 16);
  if (!v6 || (this = (*(uint64_t (**)(_QWORD))(*v6 + 16))(*(_QWORD *)(v1 + 16)), (_DWORD)this != 4))
  {
LABEL_9:
    v5 = *(_QWORD *)(v1 + 8);
    goto LABEL_10;
  }
  v7 = v6[3];
  if ((*(_BYTE *)(v7 + 4) & 0x1F) != 4)
    goto LABEL_18;
  v3 = v7 + 24;
LABEL_11:
  if (!*(_BYTE *)(v1 + 40))
  {
    v8 = *(unsigned int *)(v3 + 12);
    *v2 = 0;
    v2[1] = 0;
    *(_DWORD *)(v1 + 36) = v8;
    if (!(_DWORD)v8)
    {
LABEL_17:
      *(_BYTE *)(v1 + 40) = 1;
      goto LABEL_13;
    }
    if (v8 < 0x4924925)
    {
      v9 = 56 * v8;
      v10 = WTF::fastMalloc((WTF *)(56 * v8));
      *(_DWORD *)(v1 + 32) = v9 / 0x38;
      *(_QWORD *)(v1 + 24) = v10;
      this = WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(*(_QWORD *)v3, *(_QWORD *)v3 + 56 * *(unsigned int *)(v3 + 12), v10);
      goto LABEL_17;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x195805574);
  }
LABEL_12:
  this = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v2, (_DWORD *)v3);
LABEL_13:
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  return this;
}

uint64_t WebCore::MediaList::length(WebCore::MediaList *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  if (*((_BYTE *)this + 40))
  {
    v2 = (char *)this + 24;
    return *((unsigned int *)v2 + 3);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_10;
  if ((*(unsigned int (**)(_QWORD))(*v3 + 16))(*((_QWORD *)this + 2)) == 3)
  {
    v4 = v3[4];
LABEL_11:
    v2 = (char *)(v4 + 48);
    return *((unsigned int *)v2 + 3);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v5 || (*(unsigned int (**)(_QWORD))(*v5 + 16))(*((_QWORD *)this + 2)) != 4)
  {
LABEL_10:
    v4 = *((_QWORD *)this + 1);
    goto LABEL_11;
  }
  v6 = v5[3];
  if ((*(_BYTE *)(v6 + 4) & 0x1F) == 4)
  {
    v2 = (char *)(v6 + 24);
    return *((unsigned int *)v2 + 3);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

void WebCore::MediaList::setMediaQueries(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[4];

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 60);
    if (v5)
      WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v4 + 48), (WTF::StringImpl *)(*(_QWORD *)(v4 + 48) + 56 * v5));
    v6 = *(WTF **)(v4 + 48);
    if (v6)
    {
      *(_QWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 56) = 0;
      WTF::fastFree(v6, a2);
    }
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v4 + 48) = v7;
    LODWORD(v7) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(v4 + 56) = v7;
    LODWORD(v7) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(v4 + 60) = v7;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v9 = off_1E3398D20;
    v14[0] = v9;
    WebCore::CSSStyleSheet::forEachStyleScope(v8, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v14, *(WebCore::CSSRule **)(a1 + 16));
    v11 = *(uint64_t **)(a1 + 16);
    if (v11)
    {
      if ((*(unsigned int (**)(_QWORD))(*v11 + 16))(*(_QWORD *)(a1 + 16)) == 3)
        WebCore::StyleRuleImport::setMediaQueries(v11[4], a2);
      v12 = *(_QWORD **)(a1 + 16);
      if (v12 && (*(unsigned int (**)(_QWORD *))(*v12 + 16))(v12) == 4)
      {
        v13 = v12[3];
        if ((*(_BYTE *)(v13 + 4) & 0x1F) != 4)
        {
          __break(0xC471u);
          JUMPOUT(0x195805790);
        }
        WebCore::StyleRuleMedia::setMediaQueries(v13, a2);
      }
    }
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v14, v10);
  }
}

uint64_t WebCore::MediaList::mediaText@<X0>(WebCore::MediaList *this@<X0>, WTF::StringImpl *a2@<X1>, const Condition *a3@<X2>, _QWORD *a4@<X8>)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  WTF::StringBuilder *v12;
  WTF::StringBuilder *v13;
  uint64_t v14;
  const Condition *v15;
  uint64_t result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  char v21;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  if (*((_BYTE *)this + 40))
  {
    v6 = (char *)this + 24;
    goto LABEL_12;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_10;
  if ((*(unsigned int (**)(_QWORD))(*v7 + 16))(*((_QWORD *)this + 2)) == 3)
  {
    v8 = v7[4];
LABEL_11:
    v6 = (char *)(v8 + 48);
    goto LABEL_12;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v9 || (*(unsigned int (**)(_QWORD))(*v9 + 16))(*((_QWORD *)this + 2)) != 4)
  {
LABEL_10:
    v8 = *((_QWORD *)this + 1);
    goto LABEL_11;
  }
  v10 = v9[3];
  if ((*(_BYTE *)(v10 + 4) & 0x1F) != 4)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v6 = (char *)(v10 + 24);
LABEL_12:
  v11 = *((_DWORD *)v6 + 3);
  if (v11)
  {
    v12 = *(WTF::StringBuilder **)v6;
    WebCore::MQ::serialize((WebCore::MQ *)&v18, *(WTF::StringBuilder **)v6, a3);
    if (v11 != 1)
    {
      v13 = (WTF::StringBuilder *)((char *)v12 + 56);
      v14 = 56 * v11 - 56;
      do
      {
        WTF::StringBuilder::append();
        WebCore::MQ::serialize((WebCore::MQ *)&v18, v13, v15);
        v13 = (WTF::StringBuilder *)((char *)v13 + 56);
        v14 -= 56;
      }
      while (v14);
    }
  }
  result = (uint64_t)v18;
  if (v18
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v18),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v18),
        (result = (uint64_t)v18) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a4 = result;
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, a2);
      result = (uint64_t)v18;
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MediaList::setMediaText(WebCore::MediaList *this, unsigned int **a2)
{
  const WebCore::CSSParserToken *v3;
  WTF::StringImpl *v4;
  WebCore::CSSTokenizer *v5;
  WTF *v6;
  void *v7;
  void *v8;
  __int16 v10;
  char v11;
  _QWORD v12[2];
  WebCore::CSSTokenizer *v13;
  const WebCore::CSSParserToken *v14[2];

  v10 = 0;
  v11 = 0;
  WebCore::CSSTokenizer::tryCreate(a2, (uint64_t *)&v13);
  if (v13)
  {
    v3 = (const WebCore::CSSParserToken *)(*((_QWORD *)v13 + 6) + 24 * *((unsigned int *)v13 + 15));
    v14[0] = *((const WebCore::CSSParserToken **)v13 + 6);
    v14[1] = v3;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(v14, (WebCore::CSSParserTokenRange *)&v10, (uint64_t)v12);
    v5 = v13;
    v13 = 0;
    if (v5)
    {
      WebCore::CSSTokenizer::~CSSTokenizer(v5, v4);
      WTF::fastFree(v6, v7);
    }
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
  }
  WebCore::MediaList::setMediaQueries((uint64_t)this, v12);
  return WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v8);
}

uint64_t WebCore::MediaList::item@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, const Condition *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;

  v5 = this;
  if (*(_BYTE *)(this + 40))
  {
    v7 = this + 24;
    goto LABEL_12;
  }
  v8 = *(_QWORD **)(this + 16);
  if (!v8)
    goto LABEL_10;
  this = (*(uint64_t (**)(_QWORD))(*v8 + 16))(*(_QWORD *)(this + 16));
  if ((_DWORD)this == 3)
  {
    v9 = v8[4];
LABEL_11:
    v7 = v9 + 48;
    goto LABEL_12;
  }
  v10 = *(_QWORD **)(v5 + 16);
  if (!v10 || (this = (*(uint64_t (**)(_QWORD))(*v10 + 16))(*(_QWORD *)(v5 + 16)), (_DWORD)this != 4))
  {
LABEL_10:
    v9 = *(_QWORD *)(v5 + 8);
    goto LABEL_11;
  }
  v11 = v10[3];
  if ((*(_BYTE *)(v11 + 4) & 0x1F) != 4)
  {
    this = 96;
    __break(0xC471u);
    return this;
  }
  v7 = v11 + 24;
LABEL_12:
  if (*(_DWORD *)(v7 + 12) <= a2)
  {
    *a4 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    WebCore::MQ::serialize((WebCore::MQ *)&v14, (WTF::StringBuilder *)(*(_QWORD *)v7 + 56 * a2), a3);
    this = (uint64_t)v14;
    if (v14
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
          (this = (uint64_t)v14) != 0))
    {
      *(_DWORD *)this += 2;
    }
    *a4 = this;
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v12);
        this = (uint64_t)v14;
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
    v14 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::MediaList::deleteMedium@<X0>(WebCore::MediaList *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const Condition *v12;
  uint64_t v13;
  unsigned int v14;
  WTF *v15;
  const WTF::StringImpl *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  WTF *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;

  WTF::String::convertToASCIILowercase(a2);
  if (*((_BYTE *)this + 40))
  {
    v6 = (char *)this + 24;
    goto LABEL_12;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_10;
  if ((*(unsigned int (**)(_QWORD))(*v7 + 16))(*((_QWORD *)this + 2)) == 3)
  {
    v8 = v7[4];
LABEL_11:
    v6 = (char *)(v8 + 48);
    goto LABEL_12;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v9 || (*(unsigned int (**)(_QWORD))(*v9 + 16))(*((_QWORD *)this + 2)) != 4)
  {
LABEL_10:
    v8 = *((_QWORD *)this + 1);
    goto LABEL_11;
  }
  v10 = v9[3];
  if ((*(_BYTE *)(v10 + 4) & 0x1F) != 4)
    goto LABEL_42;
  v6 = (char *)(v10 + 24);
LABEL_12:
  v11 = *((unsigned int *)v6 + 3);
  v29 = 0;
  v30 = 0;
  v31 = v11;
  if (!(_DWORD)v11)
  {
LABEL_35:
    *(_BYTE *)a3 = 5;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_36;
  }
  if (v11 >= 0x4924925)
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x195805E4CLL);
  }
  v30 = 56 * (int)v11 / 0x38u;
  v29 = WTF::fastMalloc((WTF *)(56 * v11));
  WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(*(_QWORD *)v6, *(_QWORD *)v6 + 56 * *((unsigned int *)v6 + 3), v29);
  v13 = 0;
  v14 = 0;
  while (1)
  {
    WebCore::MediaList::item((uint64_t)this, v14, v12, &v28);
    v15 = v28;
    v17 = WTF::equal(v28, v32, v16);
    v18 = v17;
    if (!v15)
      goto LABEL_18;
    if (*(_DWORD *)v15 == 2)
      break;
    *(_DWORD *)v15 -= 2;
LABEL_18:
    if (v17)
      goto LABEL_22;
LABEL_19:
    ++v14;
    v13 += 56;
    if (v31 <= v14)
      goto LABEL_35;
  }
  WTF::StringImpl::destroy(v15, v5);
  if (!v18)
    goto LABEL_19;
LABEL_22:
  v19 = v29;
  v20 = v29 + v13;
  if (*(_BYTE *)(v29 + v13 + 48))
  {
    v21 = *(_DWORD *)(v20 + 36);
    v22 = *(unsigned int **)(v20 + 24);
    if (v21)
    {
      v23 = 88 * v21;
      do
      {
        v24 = v22[20];
        if ((_DWORD)v24 != -1)
          ((void (*)(WTF **, unsigned int *))off_1E3399588[v24])(&v28, v22);
        v22[20] = -1;
        v22 += 22;
        v23 -= 88;
      }
      while (v23);
      v22 = *(unsigned int **)(v20 + 24);
    }
    if (v22)
    {
      *(_QWORD *)(v20 + 24) = 0;
      *(_DWORD *)(v19 + v13 + 32) = 0;
      WTF::fastFree((WTF *)v22, v5);
    }
  }
  v25 = *(WTF::StringImpl **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v5);
    else
      *(_DWORD *)v25 -= 2;
  }
  WTF::VectorMover<false,WebCore::MQ::MediaQuery>::move((WebCore::MQ::MediaQuery *)(v19 + v13 + 56), (WebCore::MQ::MediaQuery *)(v29 + 56 * v31--), v19 + v13);
  WebCore::MediaList::setMediaQueries((uint64_t)this, &v29);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
LABEL_36:
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v5);
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MediaList::appendMedium(uint64_t this, unsigned int **a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WebCore::CSSTokenizer *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::CSSParserToken *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  const WebCore::CSSParserToken *v22;
  void *v23;
  const WebCore::CSSParserToken *v24;
  void *v25;
  void *v26;
  const WebCore::CSSParserToken *v27;
  const WebCore::CSSParserToken *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  __int16 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::CSSTokenizer *v42;
  const WebCore::CSSParserToken *v43;
  uint64_t v44;

  if (*a2 && (*a2)[1])
  {
    v2 = this;
    v38 = 0;
    v39 = 0;
    WebCore::CSSTokenizer::tryCreate(a2, (uint64_t *)&v42);
    if (v42)
    {
      v3 = *((_QWORD *)v42 + 6) + 24 * *((unsigned int *)v42 + 15);
      v43 = (const WebCore::CSSParserToken *)*((_QWORD *)v42 + 6);
      v44 = v3;
      WebCore::MQ::MediaQueryParser::consumeMediaQueryList(&v43, (WebCore::CSSParserTokenRange *)&v38, (uint64_t)&v40);
      v5 = v42;
      v42 = 0;
      if (v5)
      {
        WebCore::CSSTokenizer::~CSSTokenizer(v5, v4);
        WTF::fastFree(v6, v7);
      }
    }
    else
    {
      v40 = 0;
      v41 = 0;
    }
    if (*(_BYTE *)(v2 + 40))
    {
      v8 = v2 + 24;
      goto LABEL_18;
    }
    v9 = *(_QWORD **)(v2 + 16);
    if (v9)
    {
      if ((*(unsigned int (**)(_QWORD))(*v9 + 16))(*(_QWORD *)(v2 + 16)) == 3)
      {
        v10 = v9[4];
LABEL_17:
        v8 = v10 + 48;
        goto LABEL_18;
      }
      v11 = *(_QWORD **)(v2 + 16);
      if (v11 && (*(unsigned int (**)(_QWORD))(*v11 + 16))(*(_QWORD *)(v2 + 16)) == 4)
      {
        v12 = v11[3];
        if ((*(_BYTE *)(v12 + 4) & 0x1F) != 4)
          goto LABEL_58;
        v8 = v12 + 24;
LABEL_18:
        v13 = *(unsigned int *)(v8 + 12);
        v43 = 0;
        LODWORD(v44) = 0;
        HIDWORD(v44) = v13;
        if ((_DWORD)v13)
        {
          if (v13 >= 0x4924925)
          {
            __break(0xC471u);
            JUMPOUT(0x195806218);
          }
          v14 = (const WebCore::CSSParserToken *)WTF::fastMalloc((WTF *)(56 * v13));
          v15 = (56 * v13) / 0x38uLL;
          LODWORD(v44) = 56 * (int)v13 / 0x38u;
          v43 = v14;
          WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(*(_QWORD *)v8, *(_QWORD *)v8 + 56 * *(unsigned int *)(v8 + 12), (uint64_t)v14);
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
        v16 = HIDWORD(v41);
        if (!HIDWORD(v41))
          goto LABEL_33;
        v17 = v40;
        v18 = HIDWORD(v41) + v13;
        if (v18 <= v15)
        {
LABEL_32:
          WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(v17, v17 + 56 * v16, (uint64_t)v14 + 56 * v13);
          HIDWORD(v44) = v18;
LABEL_33:
          WebCore::MediaList::setMediaQueries(v2, &v43);
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v25);
          return WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v26);
        }
        v19 = v15 + (v15 >> 2);
        if (v19 >= 0x10)
          v20 = v19 + 1;
        else
          v20 = 16;
        if (v20 <= v18)
          v20 = HIDWORD(v41) + v13;
        if (v20 < 0x4924925)
        {
          v21 = 56 * v20;
          v22 = (const WebCore::CSSParserToken *)WTF::fastMalloc((WTF *)(56 * v20));
          v24 = v22;
          LODWORD(v44) = v21 / 0x38;
          v43 = v22;
          if ((_DWORD)v13)
          {
            v27 = v22;
            v28 = v14;
            do
            {
              *(_WORD *)v27 = *(_WORD *)v28;
              v29 = *((_QWORD *)v28 + 1);
              *((_QWORD *)v28 + 1) = 0;
              *((_QWORD *)v27 + 1) = v29;
              *((_BYTE *)v27 + 16) = 0;
              *((_BYTE *)v27 + 48) = 0;
              if (*((_BYTE *)v28 + 48))
              {
                *((_BYTE *)v27 + 16) = *((_BYTE *)v28 + 16);
                *((_QWORD *)v27 + 3) = 0;
                *((_QWORD *)v27 + 4) = 0;
                v30 = *((_QWORD *)v28 + 3);
                *((_QWORD *)v28 + 3) = 0;
                *((_QWORD *)v27 + 3) = v30;
                LODWORD(v30) = *((_DWORD *)v28 + 8);
                *((_DWORD *)v28 + 8) = 0;
                *((_DWORD *)v27 + 8) = v30;
                LODWORD(v30) = *((_DWORD *)v28 + 9);
                *((_DWORD *)v28 + 9) = 0;
                *((_DWORD *)v27 + 9) = v30;
                *((_DWORD *)v27 + 10) = *((_DWORD *)v28 + 10);
                *((_BYTE *)v27 + 48) = 1;
                if (*((_BYTE *)v28 + 48))
                {
                  v31 = *((_DWORD *)v28 + 9);
                  v32 = (WTF *)*((_QWORD *)v28 + 3);
                  if (v31)
                  {
                    v33 = 88 * v31;
                    v34 = *((_QWORD *)v28 + 3);
                    do
                    {
                      v35 = *(unsigned int *)(v34 + 80);
                      if ((_DWORD)v35 != -1)
                      {
                        v37 = v34;
                        ((void (*)(WebCore::CSSTokenizer **, uint64_t))off_1E3399588[v35])(&v42, v34);
                        v34 = v37;
                      }
                      *(_DWORD *)(v34 + 80) = -1;
                      v34 += 88;
                      v33 -= 88;
                    }
                    while (v33);
                    v32 = (WTF *)*((_QWORD *)v28 + 3);
                  }
                  if (v32)
                  {
                    *((_QWORD *)v28 + 3) = 0;
                    *((_DWORD *)v28 + 8) = 0;
                    WTF::fastFree(v32, v23);
                  }
                }
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)v28 + 1);
              *((_QWORD *)v28 + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v27 = (const WebCore::CSSParserToken *)((char *)v27 + 56);
              v28 = (const WebCore::CSSParserToken *)((char *)v28 + 56);
            }
            while (v28 != (const WebCore::CSSParserToken *)((char *)v14 + 56 * v13));
          }
          if (v14)
          {
            if (v24 == v14)
            {
              v24 = 0;
              v43 = 0;
              LODWORD(v44) = 0;
            }
            WTF::fastFree(v14, v23);
          }
          v14 = v24;
          goto LABEL_32;
        }
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x195806208);
      }
    }
    v10 = *(_QWORD *)(v2 + 8);
    goto LABEL_17;
  }
  return this;
}

uint64_t WebCore::FontFace::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::FontFace *WebCore::FontFace::deref(WebCore::FontFace *this)
{
  WTF *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::FontFace::~FontFace(this);
    return (WebCore::FontFace *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::FontFace::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::FontFace::deref(uint64_t this)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::FontFace::~FontFace((WebCore::FontFace *)(this - 32));
    return WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t WebCore::FontFaceSet::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

WebCore::FontFaceSet *WebCore::FontFaceSet::deref(WebCore::FontFaceSet *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::FontFaceSet::~FontFaceSet(this, a2);
    return (WebCore::FontFaceSet *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return this;
}

uint64_t WebCore::FontFaceSet::eventTargetInterface(WebCore::FontFaceSet *this)
{
  return 58;
}

uint64_t WebCore::FontFaceSet::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

WebCore::FontFaceSet *WebCore::FontFaceSet::derefEventTarget(WebCore::FontFaceSet *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::FontFaceSet::~FontFaceSet(this, a2);
    return (WebCore::FontFaceSet *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::FontFaceSet::eventTargetInterface(WebCore::FontFaceSet *this)
{
  return 58;
}

uint64_t `non-virtual thunk to'WebCore::FontFaceSet::scriptExecutionContext(WebCore::FontFaceSet *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::FontFaceSet::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::FontFaceSet::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)(this - 24), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::FontFaceSet::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 32);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::FontFaceSet::deref(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 32) == 1)
  {
    WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)(this - 48), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 32);
  }
  return this;
}

WebCore::DeprecatedCSSOMRect *WebCore::DeprecatedCSSOMRect::DeprecatedCSSOMRect(WebCore::DeprecatedCSSOMRect *this, const Rect *a2, WebCore::CSSStyleDeclaration *a3)
{
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;

  *(_DWORD *)this = 1;
  v6 = (_DWORD *)*a2;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v7 + 16) & 0xF3 | 4;
  (*(void (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a3 + 16))(a3);
  *v6 += 2;
  *(_QWORD *)(v7 + 24) = a3;
  *(_QWORD *)(v7 + 32) = v6;
  *((_QWORD *)this + 1) = v7;
  v8 = (_DWORD *)a2[1];
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v9 + 16) & 0xF3 | 4;
  (*(void (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a3 + 16))(a3);
  *v8 += 2;
  *(_QWORD *)(v9 + 24) = a3;
  *(_QWORD *)(v9 + 32) = v8;
  *((_QWORD *)this + 2) = v9;
  v10 = (_DWORD *)a2[2];
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v11 + 16) & 0xF3 | 4;
  (*(void (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a3 + 16))(a3);
  *v10 += 2;
  *(_QWORD *)(v11 + 24) = a3;
  *(_QWORD *)(v11 + 32) = v10;
  *((_QWORD *)this + 3) = v11;
  v12 = (_DWORD *)a2[3];
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = 0;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v13 + 16) & 0xF3 | 4;
  (*(void (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a3 + 16))(a3);
  *v12 += 2;
  *(_QWORD *)(v13 + 24) = a3;
  *(_QWORD *)(v13 + 32) = v12;
  *((_QWORD *)this + 4) = v13;
  return this;
}

WebCore::DeprecatedCSSOMRGBColor *WebCore::DeprecatedCSSOMRGBColor::DeprecatedCSSOMRGBColor(WebCore::DeprecatedCSSOMRGBColor *this, WebCore::CSSStyleDeclaration *a2, const WebCore::Color *a3)
{
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  float v18;
  double v19;
  unsigned int v20;
  int *v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  int *v27;
  char v28;

  *(_DWORD *)this = 1;
  v6 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)a3, (uint64_t)&v28);
  *((_DWORD *)this + 1) = v6;
  v27 = &WebCore::staticCSSValuePool[4 * v6 + 2064];
  *v27 += 2;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v7 + 16) & 0xF3 | 4;
  (*(void (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 16))(a2);
  v9 = *v27;
  *v27 += 2;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = v27;
  *((_QWORD *)this + 1) = v7;
  if (v9)
    *v27 = v9;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v8);
  v10 = &WebCore::staticCSSValuePool[4 * *((unsigned __int8 *)this + 5)];
  v10[2064] += 2;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v11 + 16) & 0xF3 | 4;
  (*(void (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 16))(a2);
  v13 = v10[2064];
  v10[2064] = v13 + 2;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = v10 + 2064;
  *((_QWORD *)this + 2) = v11;
  if (v13)
    v10[2064] = v13;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)(v10 + 2064), v12);
  v14 = &WebCore::staticCSSValuePool[4 * *((unsigned __int8 *)this + 6)];
  v14[2064] += 2;
  v15 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v15 + 16) & 0xF3 | 4;
  (*(void (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 16))(a2);
  v17 = v14[2064];
  v14[2064] = v17 + 2;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = v14 + 2064;
  *((_QWORD *)this + 3) = v15;
  if (v17)
    v14[2064] = v17;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)(v14 + 2064), v16);
  if ((*(_QWORD *)a3 & 0x8000000000000) != 0)
    v18 = *(float *)((*(_QWORD *)a3 & 0xFFFFFFFFFFFFLL) + 0x10);
  else
    v18 = (float)*(_QWORD *)a3 / 255.0;
  v19 = v18;
  v20 = (int)v18;
  if ((int)v18 <= 0xFF && *(_QWORD *)&v19 == COERCE__INT64((double)v20))
  {
    v21 = &WebCore::staticCSSValuePool[4 * v20 + 2064];
    *v21 += 2;
  }
  else
  {
    v21 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v21 = 2;
    v22 = *((_BYTE *)v21 + 6);
    *((_WORD *)v21 + 2) = 1;
    *((_BYTE *)v21 + 6) = v22 & 0xFC;
    *((double *)v21 + 1) = v19;
  }
  v23 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v23 = 1;
  *(_QWORD *)(v23 + 8) = 0;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v23 + 16) & 0xF3 | 4;
  (*(void (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 16))(a2);
  v25 = *v21;
  *v21 += 2;
  *(_QWORD *)(v23 + 24) = a2;
  *(_QWORD *)(v23 + 32) = v21;
  *((_QWORD *)this + 4) = v23;
  if (v25)
    *v21 = v25;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v24);
  return this;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashMap<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WebCore::FontFace **v5;
  uint64_t v6;
  WebCore::FontFaceSet::PendingPromise ***v7;
  uint64_t v8;
  WebCore::FontFaceSet::PendingPromise **v9;
  uint64_t v10;
  WebCore::FontFaceSet::PendingPromise *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  WebCore::FontFace *v15;
  WTF *v16;
  void *v17;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WebCore::FontFace **)(a1 + 24 * i);
      if (*v5 != (WebCore::FontFace *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = (WebCore::FontFaceSet::PendingPromise ***)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v9 = *v7;
          v10 = 8 * v8;
          do
          {
            v11 = *v9;
            *v9 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 1)
              {
                WebCore::FontFaceSet::PendingPromise::~PendingPromise(v11, a2);
                WTF::fastFree(v12, v13);
              }
              else
              {
                --*(_DWORD *)v11;
              }
            }
            ++v9;
            v10 -= 8;
          }
          while (v10);
        }
        v14 = (WTF *)*v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v14, a2);
        }
        v15 = *v5;
        *v5 = 0;
        if (v15)
        {
          if (*((_DWORD *)v15 + 6) == 1)
          {
            WebCore::FontFace::~FontFace(v15);
            WTF::fastFree(v16, v17);
          }
          else
          {
            --*((_DWORD *)v15 + 6);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  __int16 v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  _QWORD *v43;
  unsigned int *v44;
  char v45;
  char v46;
  char v47;

  if (a2 != (_DWORD *)a1)
  {
    v3 = a2;
    v4 = *(_DWORD *)(a1 + 12);
    v5 = a2[3];
    if (v4 <= v5)
    {
      v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if (v4)
          {
            WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 56 * v4));
            *(_DWORD *)(a1 + 12) = 0;
          }
          v7 = *(WTF **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v7, a2);
          }
        }
        v8 = *((unsigned int *)v3 + 3);
        if (*(_DWORD *)(a1 + 8) < v8)
        {
          if (v8 >= 0x4924925)
          {
            __break(0xC471u);
LABEL_71:
            JUMPOUT(0x195806DD0);
          }
          v9 = *(WTF **)a1;
          v10 = *(_DWORD *)(a1 + 12);
          v11 = 56 * v8;
          v12 = WTF::fastMalloc((WTF *)(56 * v8));
          *(_DWORD *)(a1 + 8) = v11 / 0x38;
          *(_QWORD *)a1 = v12;
          if (v10)
          {
            v33 = v12;
            v34 = (WTF *)((char *)v9 + 56 * v10);
            v35 = v9;
            do
            {
              *(_WORD *)v33 = *(_WORD *)v35;
              v36 = *((_QWORD *)v35 + 1);
              *((_QWORD *)v35 + 1) = 0;
              *(_QWORD *)(v33 + 8) = v36;
              *(_BYTE *)(v33 + 16) = 0;
              *(_BYTE *)(v33 + 48) = 0;
              if (*((_BYTE *)v35 + 48))
              {
                *(_BYTE *)(v33 + 16) = *((_BYTE *)v35 + 16);
                *(_QWORD *)(v33 + 24) = 0;
                *(_QWORD *)(v33 + 32) = 0;
                v37 = *((_QWORD *)v35 + 3);
                *((_QWORD *)v35 + 3) = 0;
                *(_QWORD *)(v33 + 24) = v37;
                LODWORD(v37) = *((_DWORD *)v35 + 8);
                *((_DWORD *)v35 + 8) = 0;
                *(_DWORD *)(v33 + 32) = v37;
                LODWORD(v37) = *((_DWORD *)v35 + 9);
                *((_DWORD *)v35 + 9) = 0;
                *(_DWORD *)(v33 + 36) = v37;
                *(_DWORD *)(v33 + 40) = *((_DWORD *)v35 + 10);
                *(_BYTE *)(v33 + 48) = 1;
                if (*((_BYTE *)v35 + 48))
                {
                  v38 = *((_DWORD *)v35 + 9);
                  v39 = (unsigned int *)*((_QWORD *)v35 + 3);
                  if (v38)
                  {
                    v40 = 88 * v38;
                    do
                    {
                      v41 = v39[20];
                      if ((_DWORD)v41 != -1)
                      {
                        v44 = v39;
                        ((void (*)(char *, unsigned int *))off_1E3399588[v41])(&v45, v39);
                        v39 = v44;
                      }
                      v39[20] = -1;
                      v39 += 22;
                      v40 -= 88;
                    }
                    while (v40);
                    v39 = (unsigned int *)*((_QWORD *)v35 + 3);
                  }
                  if (v39)
                  {
                    *((_QWORD *)v35 + 3) = 0;
                    *((_DWORD *)v35 + 8) = 0;
                    WTF::fastFree((WTF *)v39, a2);
                  }
                }
              }
              v42 = (WTF::StringImpl *)*((_QWORD *)v35 + 1);
              *((_QWORD *)v35 + 1) = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v33 += 56;
              v35 = (WTF *)((char *)v35 + 56);
            }
            while (v35 != v34);
          }
          if (v9)
          {
            if (*(WTF **)a1 == v9)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree(v9, a2);
          }
        }
      }
      v5 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 56 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 56 * v4));
      *(_DWORD *)(a1 + 12) = v5;
    }
    v13 = *v3;
    v14 = *(WTF::StringImpl **)a1;
    if (v5)
    {
      v43 = v3;
      v15 = v13 + 56 * v5;
      while (1)
      {
        *(_WORD *)v14 = *(_WORD *)v13;
        v16 = *(_DWORD **)(v13 + 8);
        if (v16)
          *v16 += 2;
        v17 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = v16;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v17 -= 2;
        }
        if (*((unsigned __int8 *)v14 + 48) == *(unsigned __int8 *)(v13 + 48))
        {
          if (*((_BYTE *)v14 + 48))
          {
            *((_BYTE *)v14 + 16) = *(_BYTE *)(v13 + 16);
            WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v14 + 24, (_DWORD *)(v13 + 24));
            v18 = *(_WORD *)(v13 + 40);
            *((_BYTE *)v14 + 42) = *(_BYTE *)(v13 + 42);
            *((_WORD *)v14 + 20) = v18;
          }
        }
        else if (*((_BYTE *)v14 + 48))
        {
          v19 = *((_DWORD *)v14 + 9);
          v20 = (unsigned int *)*((_QWORD *)v14 + 3);
          if (v19)
          {
            v21 = 88 * v19;
            do
            {
              v22 = v20[20];
              if ((_DWORD)v22 != -1)
                ((void (*)(char *, unsigned int *))off_1E3399588[v22])(&v46, v20);
              v20[20] = -1;
              v20 += 22;
              v21 -= 88;
            }
            while (v21);
            v20 = (unsigned int *)*((_QWORD *)v14 + 3);
          }
          if (v20)
          {
            *((_QWORD *)v14 + 3) = 0;
            *((_DWORD *)v14 + 8) = 0;
            WTF::fastFree((WTF *)v20, a2);
          }
          *((_BYTE *)v14 + 48) = 0;
        }
        else
        {
          *((_BYTE *)v14 + 16) = *(_BYTE *)(v13 + 16);
          v23 = *(_DWORD *)(v13 + 36);
          *((_QWORD *)v14 + 3) = 0;
          *((_QWORD *)v14 + 4) = 0;
          *((_DWORD *)v14 + 9) = v23;
          if (v23)
          {
            if (v23 >= 0x2E8BA2F)
            {
              __break(0xC471u);
              goto LABEL_71;
            }
            v24 = 88 * v23;
            v25 = WTF::fastMalloc((WTF *)(88 * v23));
            *((_DWORD *)v14 + 8) = (v24 & 0xFFFFFFF8) / 0x58;
            *((_QWORD *)v14 + 3) = v25;
            v26 = *(_DWORD *)(v13 + 36);
            if (v26)
            {
              v27 = v25;
              v28 = *(_QWORD *)(v13 + 24);
              v29 = 88 * v26;
              do
              {
                *(_BYTE *)v27 = 0;
                *(_DWORD *)(v27 + 80) = -1;
                v30 = *(unsigned int *)(v28 + 80);
                if ((_DWORD)v30 != -1)
                {
                  ((void (*)(char *, uint64_t, uint64_t))off_1E33995D0[v30])(&v47, v27, v28);
                  *(_DWORD *)(v27 + 80) = v30;
                }
                v27 += 88;
                v28 += 88;
                v29 -= 88;
              }
              while (v29);
            }
          }
          *((_DWORD *)v14 + 10) = *(_DWORD *)(v13 + 40);
          *((_BYTE *)v14 + 48) = 1;
        }
        v13 += 56;
        v14 = (WTF::StringImpl *)((char *)v14 + 56);
        if (v13 == v15)
        {
          v3 = v43;
          v13 = *v43;
          v31 = *(unsigned int *)(a1 + 12);
          v14 = *(WTF::StringImpl **)a1;
          goto LABEL_47;
        }
      }
    }
    v31 = 0;
LABEL_47:
    WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(v13 + 56 * v31, v13 + 56 * *((unsigned int *)v3 + 3), (uint64_t)v14 + 56 * v31);
    *(_DWORD *)(a1 + 12) = *((_DWORD *)v3 + 3);
  }
  return a1;
}

void WebCore::MQ::MediaQuery::~MediaQuery(WebCore::MQ::MediaQuery *this, void *a2)
{
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;

  if (*((_BYTE *)this + 48))
  {
    v3 = *((_DWORD *)this + 9);
    v4 = (unsigned int *)*((_QWORD *)this + 3);
    if (v3)
    {
      v5 = 88 * v3;
      do
      {
        v6 = v4[20];
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, unsigned int *))off_1E3399588[v6])(&v8, v4);
        v4[20] = -1;
        v4 += 22;
        v5 -= 88;
      }
      while (v5);
      v4 = (unsigned int *)*((_QWORD *)this + 3);
    }
    if (v4)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

void WTF::VectorMover<false,WebCore::MQ::MediaQuery>::move(WebCore::MQ::MediaQuery *a1, WebCore::MQ::MediaQuery *a2, uint64_t a3)
{
  WebCore::MQ::MediaQuery *v5;
  void *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebCore::MQ::MediaQuery::MediaQuery(a3, (uint64_t)v5);
      WebCore::MQ::MediaQuery::~MediaQuery(v5, v6);
      a3 += 56;
      v5 = (WebCore::MQ::MediaQuery *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
}

uint64_t WebCore::MQ::MediaQuery::MediaQuery(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)result = *(_WORD *)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(result + 8) = v2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(result + 24) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(result + 32) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(result + 36) = v3;
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 48) = 1;
  }
  return result;
}

uint64_t WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  char v25;
  unsigned int *v26;
  char v27;
  char v28;

  if (a2 == (_DWORD *)a1)
    return a1;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = a2[3];
  if (v4 <= v5)
  {
    v9 = *(_DWORD *)(a1 + 8);
    if (v5 <= v9)
    {
      v5 = *(_DWORD *)(a1 + 12);
      goto LABEL_21;
    }
    if (v9)
    {
      v10 = *(unsigned int **)a1;
      if (v4)
      {
        v11 = 88 * v4;
        do
        {
          v12 = v10[20];
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, unsigned int *))off_1E3399588[v12])(&v25, v10);
          v10[20] = -1;
          v10 += 22;
          v11 -= 88;
        }
        while (v11);
        *(_DWORD *)(a1 + 12) = 0;
        v10 = *(unsigned int **)a1;
      }
      if (v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree((WTF *)v10, a2);
      }
    }
    WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
    v5 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v6 = *(_QWORD *)a1 + 88 * v5;
    v7 = 88 * v4 - 88 * v5;
    do
    {
      v8 = *(unsigned int *)(v6 + 80);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))off_1E3399588[v8])(&v24, v6);
      *(_DWORD *)(v6 + 80) = -1;
      v6 += 88;
      v7 -= 88;
    }
    while (v7);
    *(_DWORD *)(a1 + 12) = v5;
  }
  v4 = v5;
LABEL_21:
  v13 = *(_QWORD *)a2;
  v14 = *(unsigned int **)a1;
  if (!v4)
    goto LABEL_30;
  v15 = 88 * v5;
  do
  {
    v16 = v14[20];
    v17 = *(unsigned int *)(v13 + 80);
    if ((_DWORD)v16 == -1)
    {
      if ((_DWORD)v17 == -1)
        goto LABEL_28;
    }
    else if ((_DWORD)v17 == -1)
    {
      ((void (*)(char *, unsigned int *))off_1E3399588[v16])(&v27, v14);
      v14[20] = -1;
      goto LABEL_28;
    }
    v26 = v14;
    ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E33995B8[v17])(&v26, v14, v13);
LABEL_28:
    v13 += 88;
    v14 += 22;
    v15 -= 88;
  }
  while (v15);
  v13 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a1 + 12);
  v14 = *(unsigned int **)a1;
LABEL_30:
  v18 = a2[3];
  if (v4 != v18)
  {
    v19 = &v14[22 * v4];
    v20 = v13 + 88 * v4;
    v21 = 88 * v18 - 88 * v4;
    do
    {
      *(_BYTE *)v19 = 0;
      v19[20] = -1;
      v22 = *(unsigned int *)(v20 + 80);
      if ((_DWORD)v22 != -1)
      {
        ((void (*)(char *, unsigned int *, uint64_t))off_1E33995D0[v22])(&v28, v19, v20);
        v19[20] = v22;
      }
      v19 += 22;
      v20 += 88;
      v21 -= 88;
    }
    while (v21);
    v4 = a2[3];
  }
  *(_DWORD *)(a1 + 12) = v4;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a2 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __n128 result;

  v3 = a3->n128_u64[0];
  a3->n128_u64[0] = 0;
  a2->n128_u64[0] = v3;
  a2->n128_u8[8] = a3->n128_u8[8];
  a2[1].n128_u8[0] = 0;
  a2[2].n128_u8[0] = 0;
  if (a3[2].n128_u8[0])
  {
    a2[1].n128_u8[0] = a3[1].n128_u8[0];
    v4 = a3[1].n128_u64[1];
    a3[1].n128_u64[1] = 0;
    a2[1].n128_u64[1] = v4;
    a2[2].n128_u8[0] = 1;
  }
  a2[2].n128_u8[8] = 0;
  a2[3].n128_u8[8] = 0;
  if (a3[3].n128_u8[8])
  {
    a2[2].n128_u8[8] = a3[2].n128_u8[8];
    v5 = a3[3].n128_u64[0];
    a3[3].n128_u64[0] = 0;
    a2[3].n128_u64[0] = v5;
    a2[3].n128_u8[8] = 1;
  }
  result = a3[4];
  a2[4] = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *(_BYTE *)a2 = *(_BYTE *)a3;
      result = WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 8, (_DWORD *)(a3 + 8));
      v7 = *(_WORD *)(a3 + 24);
      *(_BYTE *)(a2 + 26) = *(_BYTE *)(a3 + 26);
      *(_WORD *)(a2 + 24) = v7;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3399588[v5])(&v15, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_BYTE *)v4 = *(_BYTE *)a3;
  v8 = *(_DWORD *)(a3 + 20);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 20) = v8;
  if (!v8)
    goto LABEL_12;
  if (v8 < 0x2E8BA2F)
  {
    v9 = 88 * v8;
    result = WTF::fastMalloc((WTF *)(88 * v8));
    *(_DWORD *)(v4 + 16) = (v9 & 0xFFFFFFF8) / 0x58;
    *(_QWORD *)(v4 + 8) = result;
    v10 = *(_DWORD *)(a3 + 20);
    if (v10)
    {
      v11 = result;
      v12 = *(_QWORD *)(a3 + 8);
      v13 = 88 * v10;
      do
      {
        *(_BYTE *)v11 = 0;
        *(_DWORD *)(v11 + 80) = -1;
        v14 = *(unsigned int *)(v12 + 80);
        if ((_DWORD)v14 != -1)
        {
          result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33995D0[v14])(&v16, v11, v12);
          *(_DWORD *)(v11 + 80) = v14;
        }
        v11 += 88;
        v12 += 88;
        v13 -= 88;
      }
      while (v13);
    }
LABEL_12:
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(v4 + 80) = 0;
    return result;
  }
  __break(0xC471u);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKST_EEEDcSL_DpT0_(__n128 **a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;
  uint64_t v5;
  _DWORD *v7;
  WTF::StringImpl *v8;
  __n128 result;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  char v13;

  v4 = *a1;
  v5 = (*a1)[5].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v7 += 2;
      v8 = (WTF::StringImpl *)a2->n128_u64[0];
      a2->n128_u64[0] = (unint64_t)v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      a2->n128_u8[8] = *(_BYTE *)(a3 + 8);
      std::__optional_storage_base<WebCore::MQ::Comparison,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::MQ::Comparison,false> const&>((uint64_t)&a2[1], a3 + 16);
      std::__optional_storage_base<WebCore::MQ::Comparison,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::MQ::Comparison,false> const&>((uint64_t)&a2[2].n128_i64[1], a3 + 40);
      result = *(__n128 *)(a3 + 64);
      a2[4] = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E3399588[v5])(&v13, v4);
  }
  v4[5].n128_u32[0] = -1;
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  v4->n128_u64[0] = (unint64_t)v10;
  v4->n128_u8[8] = *(_BYTE *)(a3 + 8);
  v4[1].n128_u8[0] = 0;
  v4[2].n128_u8[0] = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v4[1].n128_u8[0] = *(_BYTE *)(a3 + 16);
    v11 = *(_DWORD **)(a3 + 24);
    if (v11)
      *v11 += 2;
    v4[1].n128_u64[1] = (unint64_t)v11;
    v4[2].n128_u8[0] = 1;
  }
  v4[2].n128_u8[8] = 0;
  v4[3].n128_u8[8] = 0;
  if (*(_BYTE *)(a3 + 56))
  {
    v4[2].n128_u8[8] = *(_BYTE *)(a3 + 40);
    v12 = *(_DWORD **)(a3 + 48);
    if (v12)
      *v12 += 2;
    v4[3].n128_u64[0] = (unint64_t)v12;
    v4[3].n128_u8[8] = 1;
  }
  result = *(__n128 *)(a3 + 64);
  v4[4] = result;
  v4[5].n128_u32[0] = 1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v7 = *a3;
      if (*a3)
        *(_DWORD *)v7 += 2;
      v8 = *a2;
      *a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = a3[1];
      if (v9)
        *(_DWORD *)v9 += 2;
      result = a2[1];
      a2[1] = v9;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3399588[v5])(&v12, v4);
  }
  v10 = *a3;
  if (*a3)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)v4 = v10;
  v11 = a3[1];
  if (v11)
    *(_DWORD *)v11 += 2;
  *(_QWORD *)(v4 + 8) = v11;
  *(_DWORD *)(v4 + 80) = 2;
  return result;
}

uint64_t std::__optional_storage_base<WebCore::MQ::Comparison,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::MQ::Comparison,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      *(_BYTE *)result = *(_BYTE *)a2;
      v3 = *(_DWORD **)(a2 + 8);
      if (v3)
        *v3 += 2;
      result = *(_QWORD *)(result + 8);
      *(_QWORD *)(v2 + 8) = v3;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    result = *(_QWORD *)(result + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 16) = 0;
  }
  else
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    v4 = *(_DWORD **)(a2 + 8);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 8) = v4;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &&,WebCore::FontFace::Descriptors const&)::$_0,WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WebCore::FontFace::Descriptors const)::$_1,WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WebCore::FontFace::Descriptors const)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>@<X0>(WebCore::ScriptExecutionContext ***a1@<X0>, _QWORD *a2@<X8>)
{
  WebCore::ScriptExecutionContext **v3;
  WebCore::ScriptExecutionContext *v4;
  int v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[14];
  int v20;
  char v21;
  char **v22;
  char *v23;

  v3 = *a1;
  v4 = **a1;
  v5 = *((unsigned __int8 *)v4 + 274);
  if (*((_BYTE *)v4 + 274))
  {
    v13 = 0;
    WTF::URL::invalidate((WTF::URL *)&v13);
    v6 = v13;
    if (v13)
      *(_DWORD *)v13 += 2;
    v16 = v6;
    v17 = v14;
    v18 = v15;
    memset(v19, 0, sizeof(v19));
    v20 &= 0xC0000000;
    v7 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v7 != -1)
    {
      v23 = &v21;
      v22 = &v23;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
  }
  else
  {
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v16, (WebCore::ScriptExecutionContext *)((char *)v4 - 192));
  }
  WebCore::CSSPropertyParserWorkerSafe::parseFontFaceSrc((const WTF::String *)&v16, &v23);
  v9 = *(WTF::StringImpl **)v19;
  *(_QWORD *)v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      if (!v5)
        goto LABEL_17;
      goto LABEL_14;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v5)
    goto LABEL_17;
LABEL_14:
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_17:
  v11 = v23;
  if (v23)
  {
    result = (WTF::StringImpl *)WebCore::CSSFontFace::appendSources(*(unsigned __int8 **)(*(_QWORD *)v3[1] + 48), (uint64_t)v23, *v3, 0);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (*(_DWORD *)v11 == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  else
  {
    a2[1] = 0;
    *(_BYTE *)a2 = 9;
    *((_BYTE *)a2 + 16) = 1;
  }
  return result;
}

WebCore::CSSFontFaceSource *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &&,WebCore::FontFace::Descriptors const&)::$_0,WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WebCore::FontFace::Descriptors const)::$_1,WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WebCore::FontFace::Descriptors const)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>@<X0>(WebCore::CSSFontFaceSource *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WebCore::CSSFontFaceSource *v23;

  v4 = *a2;
  if (*a2)
  {
    v6 = *(_QWORD *)result;
    v7 = *(_QWORD *)(v4 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v8)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          v7 = (v7 & 0x3FFFFFFFFLL) + v8;
      }
    }
    if (*(_BYTE *)(v4 + 64) && (v20 = *(_QWORD *)(v4 + 32)) != 0)
      v9 = *(_QWORD *)(v20 + 32);
    else
      v9 = *(_QWORD *)(v4 + 48);
    result = (WebCore::CSSFontFaceSource *)WebCore::fontBinaryParsingPolicy((const void *)v7, v9, *(unsigned __int8 *)(v6 + 40));
    if ((_DWORD)result)
    {
      v10 = *a2;
      if (*(_BYTE *)(*a2 + 64))
      {
        v21 = *(_QWORD *)(v10 + 32);
        v22 = v21 ? *(_QWORD *)(v21 + 32) : *(_QWORD *)(v10 + 48);
        if (v22 > v22)
        {
          __break(0xC471u);
          JUMPOUT(0x195807AA8);
        }
      }
      v11 = WTF::fastMalloc((WTF *)0x28);
      JSC::ArrayBufferView::ArrayBufferView();
      v12 = *(_QWORD *)(**(_QWORD **)(v6 + 56) + 48);
      v13 = WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)v13 = off_1E33978F0;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_QWORD *)(v13 + 24) = v12;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 56) = v11;
      *(_QWORD *)(v13 + 64) = 0;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_QWORD *)(v13 + 85) = 0;
      v23 = (WebCore::CSSFontFaceSource *)v13;
      v15 = *(unsigned int *)(v12 + 92);
      if ((_DWORD)v15 == *(_DWORD *)(v12 + 88))
      {
        v16 = (uint64_t *)WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12 + 80), v15 + 1, (unint64_t)&v23);
        v15 = *(unsigned int *)(v12 + 92);
        v17 = (uint64_t *)(*(_QWORD *)(v12 + 80) + 8 * v15);
        v13 = *v16;
      }
      else
      {
        v17 = (uint64_t *)(*(_QWORD *)(v12 + 80) + 8 * v15);
        v16 = (uint64_t *)&v23;
      }
      *v16 = 0;
      *v17 = v13;
      *(_DWORD *)(v12 + 92) = v15 + 1;
      result = v23;
      v23 = 0;
      if (result)
      {
        WebCore::CSSFontFaceSource::~CSSFontFaceSource(result, v14);
        result = (WebCore::CSSFontFaceSource *)WTF::fastFree(v18, v19);
      }
      **(_BYTE **)(v6 + 48) = 0;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

JSC::ArrayBufferView *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &&,WebCore::FontFace::Descriptors const&)::$_0,WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WebCore::FontFace::Descriptors const)::$_1,WebCore::FontFace::create(WebCore::ScriptExecutionContext &,WTF::String const&,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WebCore::FontFace::Descriptors const)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>@<X0>(uint64_t *a1@<X0>, JSC::ArrayBufferView **a2@<X1>, _QWORD *a3@<X8>)
{
  JSC::ArrayBufferView *result;
  uint64_t v7;
  const void *v8;
  CC_LONG v9;
  uint64_t v10;
  JSC::ArrayBufferView *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  WTF *v17;
  void *v18;
  WebCore::CSSFontFaceSource *v19;

  result = *a2;
  if (*a2)
  {
    v7 = *a1;
    v8 = (const void *)JSC::ArrayBufferView::span(result);
    result = (JSC::ArrayBufferView *)WebCore::fontBinaryParsingPolicy(v8, v9, *(unsigned __int8 *)(v7 + 16));
    if ((_DWORD)result)
    {
      v10 = *(_QWORD *)(**(_QWORD **)(v7 + 32) + 48);
      v11 = *a2;
      *a2 = 0;
      v12 = WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)v12 = off_1E33978F0;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_QWORD *)(v12 + 24) = v10;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 56) = v11;
      *(_QWORD *)(v12 + 64) = 0;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_QWORD *)(v12 + 85) = 0;
      v19 = (WebCore::CSSFontFaceSource *)v12;
      v14 = *(unsigned int *)(v10 + 92);
      if ((_DWORD)v14 == *(_DWORD *)(v10 + 88))
      {
        v15 = (uint64_t *)WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 80), v14 + 1, (unint64_t)&v19);
        v14 = *(unsigned int *)(v10 + 92);
        v16 = (uint64_t *)(*(_QWORD *)(v10 + 80) + 8 * v14);
        v12 = *v15;
      }
      else
      {
        v16 = (uint64_t *)(*(_QWORD *)(v10 + 80) + 8 * v14);
        v15 = (uint64_t *)&v19;
      }
      *v15 = 0;
      *v16 = v12;
      *(_DWORD *)(v10 + 92) = v14 + 1;
      result = v19;
      v19 = 0;
      if (result)
      {
        WebCore::CSSFontFaceSource::~CSSFontFaceSource(result, v13);
        result = (JSC::ArrayBufferView *)WTF::fastFree(v17, v18);
      }
      **(_BYTE **)(v7 + 24) = 0;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<WebCore::FontFace& (WebCore::FontFace::*&)(void),WebCore::FontFace*>,WebCore::FontFace&>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<WebCore::FontFaceSet& (WebCore::FontFaceSet::*&)(void),WebCore::FontFaceSet*>,WebCore::FontFaceSet&>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::FontFace>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  unsigned int v10;
  WebCore::FontFace **v11;
  uint64_t v12;
  objc_class *v13;
  int v14;
  BOOL v15;
  JSValue v16;
  void *v17;
  JSC::VM *v18;
  objc_class *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  JSC::VM *v37;

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](&v29, v7);
    v8 = **(_QWORD **)(v4 + 32);
    v9 = (JSC::VM *)v6[7];
    v37 = v9;
    v32 = 0;
    v33 = 0x800000000;
    v34 = (WTF *)((char *)v35 + 8);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 >= 9)
    {
      v32 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
      v10 = *(_DWORD *)(a2 + 12);
      if (v10)
      {
LABEL_9:
        v11 = *(WebCore::FontFace ***)a2;
        v12 = 8 * v10;
        do
        {
          v13 = (objc_class *)WebCore::wrap<WebCore::FontFace>((uint64_t)v6, v8, *v11);
          if (*((_DWORD *)v9 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_41;
          }
          v14 = v33;
          if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v15 = v34 == 0) : (v15 = 1), v15))
          {
            *((_QWORD *)v34 + v33) = v13;
            LODWORD(v33) = v14 + 1;
          }
          else
          {
            v16.super.isa = v13;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v16) == 1)
              v32 = 1;
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    if (v32)
    {
      JSC::throwOutOfMemoryError();
    }
    else
    {
      v30 = v34;
      v31 = v33;
      v18 = *(JSC::VM **)(v8 + 56);
      if (!*((_DWORD *)v18 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) == 0)
      {
        v19 = (objc_class *)JSC::constructArray();
        goto LABEL_28;
      }
    }
LABEL_41:
    v19 = 0;
LABEL_28:
    v20 = *(uint64_t **)&v35[0];
    if (*(_QWORD *)&v35[0])
    {
      v30 = (WTF *)&v33;
      v23 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v23);
    }
    if (v34 != (WTF *)((char *)v35 + 8) && v34)
      WTF::fastFree(v34, v17);
    v21 = *(_QWORD *)(v7 + 16);
    if (!v21)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v19);
      v21 = *(_QWORD *)(v7 + 16);
      if (!v21)
        return MEMORY[0x19AEA32A0](&v29);
    }
    v22 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v22 + 64))(v22))
    {
LABEL_38:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](&v29);
    }
    v24 = v22[43];
    if (*(_QWORD *)(v7 + 24) == v21)
    {
LABEL_55:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_38;
    }
    if (!v24)
      goto LABEL_38;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_49:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_54:
        if (!v27)
          goto LABEL_38;
        goto LABEL_55;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_54;
  }
  return result;
}

WebCore::FontFace **WTF::HashTable<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashMap<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>,WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::FontFaceSet::PendingPromise,WTF::RawPtrTraits<WebCore::FontFaceSet::PendingPromise>,WTF::DefaultRefDerefTraits<WebCore::FontFaceSet::PendingPromise>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::FontFace,WTF::RawPtrTraits<WebCore::FontFace>,WTF::DefaultRefDerefTraits<WebCore::FontFace>>>>::rehash(uint64_t *a1, unsigned int a2, WebCore::FontFace **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WebCore::FontFace **v10;
  uint64_t v11;
  WebCore::FontFace **v12;
  WebCore::FontFace *v13;
  uint64_t v14;
  WebCore::FontFaceSet::PendingPromise ***v15;
  uint64_t v16;
  WebCore::FontFaceSet::PendingPromise **v17;
  uint64_t v18;
  WebCore::FontFaceSet::PendingPromise *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  WebCore::FontFace *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  WebCore::FontFace **v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  WebCore::FontFaceSet::PendingPromise ***v38;
  WebCore::FontFaceSet::PendingPromise **v39;
  uint64_t v40;
  WebCore::FontFaceSet::PendingPromise *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  WebCore::FontFace *v45;
  WebCore::FontFace *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::FontFaceSet::PendingPromise **v49;
  uint64_t v50;
  WebCore::FontFaceSet::PendingPromise **v51;
  uint64_t v52;
  WebCore::FontFaceSet::PendingPromise *v53;
  WTF *v54;
  void *v55;
  WTF *v56;
  WebCore::FontFace *v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  void *v63;
  WebCore::FontFace **result;
  uint64_t v65;
  uint64_t v66;
  WebCore::FontFace **v69;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v65 = v5;
    v66 = v4;
    do
    {
      v12 = (WebCore::FontFace **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WebCore::FontFace *)-1)
      {
        if (v13)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v69 = v10;
          v26 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v23 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v32 = (WebCore::FontFace **)(v22 + 24 * v29);
            v29 = (v29 + v30++) & v23;
          }
          while (*v32);
          v33 = v31;
          v34 = v22 + 24 * v31;
          v37 = *(_DWORD *)(v34 + 20);
          v36 = (_DWORD *)(v34 + 20);
          v35 = v37;
          v38 = (WebCore::FontFaceSet::PendingPromise ***)(v36 - 3);
          if (v37)
          {
            v39 = *v38;
            v40 = 8 * v35;
            do
            {
              v41 = *v39;
              *v39 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 1)
                {
                  WebCore::FontFaceSet::PendingPromise::~PendingPromise(v41, v8);
                  WTF::fastFree(v42, v43);
                }
                else
                {
                  --*(_DWORD *)v41;
                }
              }
              ++v39;
              v40 -= 8;
            }
            while (v40);
          }
          v44 = (WTF *)*v38;
          if (*v38)
          {
            *v38 = 0;
            *(_DWORD *)(v22 + 24 * v33 + 16) = 0;
            WTF::fastFree(v44, v8);
          }
          v45 = *v32;
          *v32 = 0;
          v4 = v66;
          if (v45)
          {
            if (*((_DWORD *)v45 + 6) == 1)
            {
              WebCore::FontFace::~FontFace(v45);
              WTF::fastFree(v60, v61);
            }
            else
            {
              --*((_DWORD *)v45 + 6);
            }
          }
          v46 = *v12;
          *v12 = 0;
          *v32 = v46;
          v47 = v66 + 24 * v9;
          *v38 = 0;
          *(_QWORD *)(v36 - 1) = 0;
          v49 = *(WebCore::FontFaceSet::PendingPromise ***)(v47 + 8);
          v48 = v47 + 8;
          *(_QWORD *)v48 = 0;
          *v38 = v49;
          LODWORD(v46) = *(_DWORD *)(v48 + 8);
          *(_DWORD *)(v48 + 8) = 0;
          *(_DWORD *)(v22 + 24 * v33 + 16) = (_DWORD)v46;
          LODWORD(v46) = *(_DWORD *)(v48 + 12);
          *(_DWORD *)(v48 + 12) = 0;
          *v36 = (_DWORD)v46;
          v50 = *(unsigned int *)(v48 + 12);
          v10 = v69;
          if ((_DWORD)v50)
          {
            v51 = *(WebCore::FontFaceSet::PendingPromise ***)v48;
            v52 = 8 * v50;
            do
            {
              v53 = *v51;
              *v51 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 1)
                {
                  WebCore::FontFaceSet::PendingPromise::~PendingPromise(v53, v8);
                  WTF::fastFree(v54, v55);
                }
                else
                {
                  --*(_DWORD *)v53;
                }
              }
              ++v51;
              v52 -= 8;
            }
            while (v52);
          }
          v56 = *(WTF **)v48;
          if (*(_QWORD *)v48)
          {
            *(_QWORD *)v48 = 0;
            *(_DWORD *)(v48 + 8) = 0;
            WTF::fastFree(v56, v8);
          }
          v57 = *v12;
          *v12 = 0;
          v11 = v65;
          if (v57)
          {
            if (*((_DWORD *)v57 + 6) == 1)
            {
              WebCore::FontFace::~FontFace(v57);
              WTF::fastFree(v62, v63);
            }
            else
            {
              --*((_DWORD *)v57 + 6);
            }
          }
          if (v12 == a3)
            v10 = v32;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = (WebCore::FontFaceSet::PendingPromise ***)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16)
          {
            v17 = *v15;
            v18 = 8 * v16;
            do
            {
              v19 = *v17;
              *v17 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 1)
                {
                  WebCore::FontFaceSet::PendingPromise::~PendingPromise(v19, v8);
                  WTF::fastFree(v20, v21);
                }
                else
                {
                  --*(_DWORD *)v19;
                }
              }
              ++v17;
              v18 -= 8;
            }
            while (v18);
          }
          v24 = (WTF *)*v15;
          if (*v15)
          {
            *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v24, v8);
          }
          v25 = *v12;
          *v12 = 0;
          if (v25)
          {
            if (*((_DWORD *)v25 + 6) == 1)
            {
              WebCore::FontFace::~FontFace(v25);
              WTF::fastFree(v58, v59);
            }
            else
            {
              --*((_DWORD *)v25 + 6);
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  _DWORD *v36;
  unint64_t v38;

  v4 = qword_1ECE82A18;
  if (qword_1ECE82A18)
  {
    v5 = *(_DWORD *)(qword_1ECE82A18 - 4);
    v6 = *(_DWORD *)(qword_1ECE82A18 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  v9 = &qword_1ECE82000;
  qword_1ECE82A18 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE82A18 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = v4 + 16 * v10;
      v14 = *(_DWORD *)v13;
      if (*(_DWORD *)v13)
      {
        if (v14 != -1)
        {
          v15 = v9[323];
          if (v15)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          do
          {
            v18 = v14 & v16;
            v14 = ++v17 + v18;
          }
          while (*(_DWORD *)(v15 + 16 * v18));
          v19 = v15 + 16 * v18;
          v20 = *(unsigned int **)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v20)
          {
            if (*v20 == 1)
            {
              v29 = v20[1];
              if (v29 >= 0x10)
              {
                v30 = 0;
                v31 = (unsigned int *)((char *)v20 + ((v29 >> 3) & 0x1FFFFFFE) + 8);
                do
                {
                  v32 = (_DWORD *)(*v31 | ((unint64_t)*((unsigned __int8 *)v31 + 4) << 32));
                  if (*v32 == 2)
                  {
                    v38 = v30;
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v8);
                    v30 = v38;
                  }
                  else
                  {
                    *v32 -= 2;
                  }
                  ++v30;
                  v31 = (unsigned int *)((char *)v31 + 5);
                }
                while (v30 < (unint64_t)v20[1] >> 4);
              }
              WTF::fastFree((WTF *)v20, v8);
              v9 = &qword_1ECE82000;
            }
            else
            {
              --*v20;
            }
          }
          *(_DWORD *)v19 = *(_DWORD *)v13;
          v21 = v4 + 16 * v10;
          v22 = *(_QWORD *)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v19 + 8) = v22;
          v23 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v23)
          {
            if (*v23 == 1)
            {
              v33 = v23[1];
              if (v33 >= 0x10)
              {
                v34 = 0;
                v35 = (unsigned int *)((char *)v23 + ((v33 >> 3) & 0x1FFFFFFE) + 8);
                do
                {
                  v36 = (_DWORD *)(*v35 | ((unint64_t)*((unsigned __int8 *)v35 + 4) << 32));
                  if (*v36 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v8);
                  else
                    *v36 -= 2;
                  ++v34;
                  v35 = (unsigned int *)((char *)v35 + 5);
                }
                while (v34 < (unint64_t)v23[1] >> 4);
              }
              WTF::fastFree((WTF *)v23, v8);
              v9 = &qword_1ECE82000;
            }
            else
            {
              --*v23;
            }
          }
          if (v13 == a2)
            v11 = v19;
        }
      }
      else
      {
        v24 = *(unsigned int **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v24)
        {
          if (*v24 == 1)
          {
            v25 = v24[1];
            if (v25 >= 0x10)
            {
              v26 = 0;
              v27 = (unsigned int *)((char *)v24 + ((v25 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v28 = (_DWORD *)(*v27 | ((unint64_t)*((unsigned __int8 *)v27 + 4) << 32));
                if (*v28 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v8);
                else
                  *v28 -= 2;
                ++v26;
                v27 = (unsigned int *)((char *)v27 + 5);
              }
              while (v26 < (unint64_t)v24[1] >> 4);
            }
            WTF::fastFree((WTF *)v24, v8);
            v9 = &qword_1ECE82000;
          }
          else
          {
            --*v24;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
  }
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v8);
  return v11;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_DWORD *)(a1 + 16 * i) != -1)
      {
        v5 = a1 + 16 * i;
        v6 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          if (*v6 == 1)
          {
            v7 = v6[1];
            if (v7 >= 0x10)
            {
              v8 = 0;
              v9 = (unsigned int *)((char *)v6 + ((v7 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v10 = (_DWORD *)(*v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32));
                if (*v10 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
                else
                  *v10 -= 2;
                ++v8;
                v9 = (unsigned int *)((char *)v9 + 5);
              }
              while (v8 < (unint64_t)v6[1] >> 4);
            }
            WTF::fastFree((WTF *)v6, a2);
          }
          else
          {
            --*v6;
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::MQ::MediaQueryEvaluator::~MediaQueryEvaluator(WebCore::MQ::MediaQueryEvaluator *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

void WebCore::MediaQueryList::~MediaQueryList(WebCore::MediaQueryList *this, void *a2)
{
  uint64_t v3;
  void *v4;
  WebCore::MediaQueryMatcher *v5;
  void *v6;
  WebCore::MediaQueryList *v7;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v7 = this;
    WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::MediaQueryList*>(WebCore::MediaQueryList* const&)::{lambda(WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>((uint64_t *)(v3 + 16), (uint64_t *)&v7);
  }
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  v5 = (WebCore::MediaQueryMatcher *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    WTF::RefCounted<WebCore::MediaQueryMatcher>::deref(v5, v4);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::MediaQueryList *)((char *)this + 32), v4);
  WebCore::EventTarget::~EventTarget(this, v6);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MediaQueryList::~MediaQueryList(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::MediaQueryList::~MediaQueryList(WebCore::MediaQueryList *this, void *a2)
{
  WebCore::MediaQueryList::~MediaQueryList((WebCore::MediaQueryList *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MediaQueryList::~MediaQueryList((WebCore::MediaQueryList *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::MediaQueryList::media@<X0>(WebCore::MediaQueryList *this@<X0>, WTF::StringImpl *a2@<X1>, const Condition *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  unsigned int v5;
  WTF::StringBuilder *v6;
  WTF::StringBuilder *v7;
  uint64_t v8;
  const Condition *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v5 = *((_DWORD *)this + 19);
  if (v5)
  {
    v6 = (WTF::StringBuilder *)*((_QWORD *)this + 8);
    WebCore::MQ::serialize((WebCore::MQ *)&v12, v6, a3);
    if (v5 != 1)
    {
      v7 = (WTF::StringBuilder *)((char *)v6 + 56);
      v8 = 56 * v5 - 56;
      do
      {
        WTF::StringBuilder::append();
        WebCore::MQ::serialize((WebCore::MQ *)&v12, v7, v9);
        v7 = (WTF::StringBuilder *)((char *)v7 + 56);
        v8 -= 56;
      }
      while (v8);
    }
  }
  result = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (result = v12) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a4 = result;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, a2);
      result = v12;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore *WebCore::MediaQueryList::addListener(WebCore *result, uint64_t *a2)
{
  WebCore *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  void *v9;
  WebCore::AbortSignal *v10;
  bmalloc::api *v11;
  void *v12;
  unsigned __int8 v13;
  __int16 v14;
  char v15;
  WebCore::AbortSignal *v16;
  WebCore *v17;

  if (*a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
      v5 = WebCore::threadGlobalDataSlow(result);
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *(_QWORD *)(v5 + 40);
    }
    v7 = (WTF::StringImpl **)(v6 + 368);
    v8 = *a2;
    v16 = 0;
    v17 = (WebCore *)v8;
    *a2 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    WebCore::EventTarget::addEventListener(v3, v7, (uint64_t *)&v17, &v13);
    v10 = v16;
    v16 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v10, v9);
        bmalloc::api::isoDeallocate(v11, v12);
      }
      else
      {
        --*((_DWORD *)v10 + 6);
      }
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        return (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 4);
    }
  }
  return result;
}

WebCore *WebCore::MediaQueryList::removeListener(WebCore *result, WebCore::EventListener **a2)
{
  WebCore::EventTarget *v3;
  uint64_t v4;
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WebCore::EventListener *v9;
  WebCore::EventListenerMap *v10;
  WebCore::InspectorInstrumentation *v12;
  WebCore::ScriptExecutionContext *v13;
  _QWORD *v14;

  if (*a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(WebCore **)(v4 + 96)) == 0)
    {
      result = (WebCore *)WebCore::threadGlobalDataSlow(result);
      v5 = result;
    }
    v6 = *((_QWORD *)v5 + 5);
    if (!v6)
    {
      result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *((_QWORD *)v5 + 5);
    }
    v7 = *((_QWORD *)v3 + 2);
    if ((v7 & 0x1000000000000) != 0)
    {
      v8 = (WTF::StringImpl **)(v6 + 368);
      v9 = *a2;
      v10 = (WebCore::EventListenerMap *)((v7 & 0xFFFFFFFFFFFFLL) + 16);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v12 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)v3 + 8))(v3);
        if (v12)
        {
          v14 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v12, v13);
          if (v14)
            WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(v14, v3, v8, v9, 0);
        }
      }
      result = (WebCore *)WebCore::EventListenerMap::remove(v10, (const WTF::AtomString *)v8, v9, 0);
      if ((_DWORD)result)
        return (WebCore *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)v3 + 80))(v3);
    }
  }
  return result;
}

uint64_t WebCore::MediaQueryList::scriptExecutionContext(WebCore::MediaQueryList *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::MediaQueryListEvent::create(WebCore::MediaQueryListEvent *this, const WTF::AtomString *a2, const WTF::String *a3, char a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;

  v8 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)(v8 + 8) = 0;
  v11 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | (*(_QWORD *)a2 != 0) | 0x250200;
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v11;
  v12 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v12 += 2;
  *(_QWORD *)(v8 + 24) = v12;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)v8 = off_1E3399940;
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  *(_QWORD *)(v8 + 72) = v13;
  *(_BYTE *)(v8 + 80) = a4;
  *(_QWORD *)this = v8;
  return result;
}

uint64_t WebCore::MediaQueryList::matches(WebCore::MediaQueryList *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;

  if (*((_QWORD *)this + 7))
  {
    if ((*((_BYTE *)this + 80) & 1) != 0)
    {
      v4 = *((_QWORD *)this + 5);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (!*(_BYTE *)(v5 + 178))
          {
            v6 = (_DWORD *)(v5 - 264);
            *(_DWORD *)(v5 - 264) += 2;
            v7 = WebCore::Document::ownerElement((WebCore::Document *)(v5 - 288));
            if (v7)
            {
              v9 = v7;
              *(_DWORD *)(v7 + 24) += 2;
              WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8), 0, 0);
              WebCore::MediaQueryMatcher::evaluateAll(*((_QWORD *)this + 7), 0);
              if (*(_DWORD *)(v9 + 24) == 2)
              {
                if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
              }
              else
              {
                *(_DWORD *)(v9 + 24) -= 2;
              }
            }
            if (*v6 == 2)
            {
              if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v8);
            }
            else
            {
              *v6 -= 2;
            }
          }
        }
      }
    }
    v2 = *((_QWORD *)this + 7);
    if (*((_DWORD *)this + 21) != *(_DWORD *)(v2 + 32))
    {
      v10 = WebCore::MediaQueryMatcher::evaluate(v2, (uint64_t)this + 64);
      v11 = *(_DWORD *)(*((_QWORD *)this + 7) + 32);
      *((_DWORD *)this + 21) = v11;
      if (*((unsigned __int8 *)this + 92) != v10)
      {
        *((_BYTE *)this + 92) = v10;
        *((_DWORD *)this + 22) = v11;
      }
    }
  }
  return *((unsigned __int8 *)this + 92);
}

WebCore::EventNames **WebCore::MediaQueryList::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 368);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 93) = v6;
  return this;
}

BOOL WebCore::MediaQueryList::virtualHasPendingActivity(WebCore::MediaQueryList *this)
{
  return *((_BYTE *)this + 93) && *((_QWORD *)this + 7) != 0;
}

WebCore::MediaQueryMatcher *WebCore::MediaQueryMatcher::MediaQueryMatcher(WebCore::MediaQueryMatcher *this, WebCore::Document *a2)
{
  unsigned int *v3;
  unsigned int v4;

  *(_DWORD *)this = 1;
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v3;
  *((_DWORD *)this + 8) = 1;
  return this;
}

void WebCore::MediaQueryMatcher::~MediaQueryMatcher(WebCore::MediaQueryMatcher *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  _QWORD *v17;
  _QWORD *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v10 = (_QWORD *)*((_QWORD *)this + 2);
    v11 = &v10[v3];
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          v17 = v10;
          v18 = v11;
          atomic_store(1u, (unsigned int *)v12);
          v19 = (WTF *)v12;
          v15 = *(unsigned int *)(v12 + 28);
          if ((_DWORD)v15)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v15));
          v16 = (WTF *)*((_QWORD *)v19 + 2);
          if (v16)
          {
            *((_QWORD *)v19 + 2) = 0;
            *((_DWORD *)v19 + 6) = 0;
            WTF::fastFree(v16, a2);
          }
          WTF::fastFree(v19, a2);
          v10 = v17;
          v11 = v18;
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *((unsigned int *)v5 + 7);
      if ((_DWORD)v8)
      {
        v21 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v5 + 2), (WTF::StringImpl *)(*((_QWORD *)v5 + 2) + 32 * v8));
        v5 = v21;
      }
      v9 = (WTF *)*((_QWORD *)v5 + 2);
      if (v9)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        v20 = v5;
        WTF::fastFree(v9, a2);
        v5 = v20;
      }
      WTF::fastFree(v5, a2);
    }
  }
}

_QWORD *WebCore::MediaQueryMatcher::documentDestroyed(_QWORD *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;

  v2 = this;
  v3 = this[1];
  this[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v18 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v18));
      v19 = *(WTF **)(v3 + 16);
      if (v19)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v19, a2);
      }
      this = (_QWORD *)WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF *)v2[2];
  v7 = *((unsigned int *)v2 + 7);
  v2[2] = 0;
  v2[3] = 0;
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = v6;
    v10 = (WTF *)((char *)v6 + 8 * v7);
    do
    {
      if (*(_QWORD *)v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v9 + 8);
        if (v11)
        {
          this = *(_QWORD **)(v11 + 56);
          *(_QWORD *)(v11 + 56) = 0;
          if (this)
            this = WTF::RefCounted<WebCore::MediaQueryMatcher>::deref((WebCore::MediaQueryMatcher *)this, a2);
        }
      }
      v9 = (WTF *)((char *)v9 + 8);
      v8 -= 8;
    }
    while (v8);
    v12 = v6;
    do
    {
      v13 = *(_QWORD *)v12;
      *(_QWORD *)v12 = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr((unsigned int *)v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)v13));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)v13);
          v16 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v16)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v16));
          v17 = *(WTF **)(v13 + 16);
          if (v17)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            WTF::fastFree(v17, a2);
          }
          this = (_QWORD *)WTF::fastFree((WTF *)v13, a2);
        }
      }
      v12 = (WTF *)((char *)v12 + 8);
    }
    while (v12 != v10);
  }
  if (v6)
    return (_QWORD *)WTF::fastFree(v6, a2);
  return this;
}

_BYTE *WebCore::MediaQueryParserContext::MediaQueryParserContext(_BYTE *this, const WebCore::Document *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 66);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      v2 = *(_QWORD *)(v2 + 24);
      if (v2)
      {
        v2 = *(_QWORD *)(v2 + 8);
        if (v2)
          LOBYTE(v2) = *(_BYTE *)(v2 + 450) != 0;
      }
    }
  }
  *this = v2;
  this[1] = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) & 0x8000000) != 0;
  this[2] = 0;
  return this;
}

{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 66);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
    {
      v2 = *(_QWORD *)(v2 + 24);
      if (v2)
      {
        v2 = *(_QWORD *)(v2 + 8);
        if (v2)
          LOBYTE(v2) = *(_BYTE *)(v2 + 450) != 0;
      }
    }
  }
  *this = v2;
  this[1] = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) & 0x8000000) != 0;
  this[2] = 0;
  return this;
}

void WebCore::MutableStyleProperties::~MutableStyleProperties(WebCore::MutableStyleProperties *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v9;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_DWORD **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
        else
          *v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::MutableStyleProperties *)((char *)this + 32) != v7 && v7 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v9;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_DWORD **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
        else
          *v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::MutableStyleProperties *)((char *)this + 32) != v7 && v7 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

BOOL WebCore::MutableStyleProperties::removePropertyAtIndex(_BOOL8 this, WTF::StringImpl *a2, WTF::StringImpl **a3, WTF::String *a4, __n128 a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;

  v6 = (int)a2;
  if ((_DWORD)a2 == -1)
  {
    if (a3)
    {
      v11 = *a3;
      *a3 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    return v6 != -1;
  }
  v7 = this;
  if (!a3)
    goto LABEL_3;
  if (*(_DWORD *)(this + 28) > a2)
  {
    v12 = *(_QWORD *)(this + 16) + 16 * a2;
    WebCore::serializeLonghandValue(*(_WORD *)v12 & 0x3FF, *(_QWORD *)(v12 + 8), (WTF::StringBuilder *)a3, a4, (WebCore *)&v16, a5);
    v13 = v16;
    v16 = 0;
    v14 = *a3;
    *a3 = v13;
    if (v14)
    {
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, a2);
        v14 = v16;
        v16 = 0;
        if (!v14)
          goto LABEL_3;
        v15 = *(_DWORD *)v14 - 2;
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, a2);
          goto LABEL_3;
        }
      }
      *(_DWORD *)v14 = v15;
    }
LABEL_3:
    v8 = *(_QWORD *)(v7 + 16);
    v9 = v8 + 16 * v6;
    v10 = *(_DWORD **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    if (v10)
    {
      if (*v10 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
      else
        *v10 -= 2;
    }
    memmove((void *)(v8 + 16 * v6), (const void *)(v8 + 16 * v6 + 16), *(_QWORD *)(v7 + 16) + 16 * *(unsigned int *)(v7 + 28) - (v8 + 16 * v6 + 16));
    --*(_DWORD *)(v7 + 28);
    return v6 != -1;
  }
  __break(0xC471u);
  return this;
}

void *WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, WTF::StringImpl *a2)
{
  _QWORD *v3;
  _DWORD *v4;
  void *result;

  v3 = (_QWORD *)(*(_QWORD *)a1 + 16 * (_QWORD)a2);
  v4 = (_DWORD *)v3[1];
  v3[1] = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  result = memmove(v3, v3 + 2, *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12) - (_QWORD)(v3 + 2));
  --*(_DWORD *)(a1 + 12);
  return result;
}

BOOL WebCore::MutableStyleProperties::removeProperty(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl **a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;

  if (((_DWORD)a2 - 2) > 0x1C8)
    return WebCore::MutableStyleProperties::removeShorthandProperty(a1, a2, a3);
  LODWORD(v5) = *(_DWORD *)(a1 + 28);
  while (1)
  {
    v5 = (v5 - 1);
    if ((int)v5 < 0)
      break;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 16) + 16 * v5) & 0x3FF) == (_DWORD)a2)
      return WebCore::MutableStyleProperties::removePropertyAtIndex(a1, (WTF::StringImpl *)v5, a3, a4, a5);
  }
  v5 = 0xFFFFFFFFLL;
  return WebCore::MutableStyleProperties::removePropertyAtIndex(a1, (WTF::StringImpl *)v5, a3, a4, a5);
}

BOOL WebCore::MutableStyleProperties::removeShorthandProperty(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  int v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL8 v8;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15[3];

  v3 = (int)a2;
  if (a3)
  {
    v5 = *a3;
    *a3 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = WebCore::shorthandForProperty(v3);
  if (!*(_DWORD *)(a1 + 28))
    return 0;
  v10 = a1 + 16;
  v14 = 0;
  if (v7)
  {
    v11 = (_WORD *)v6;
    v12 = 2 * v7;
    do
    {
      WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::add(&v14, v11++, (uint64_t)v15);
      v12 -= 2;
    }
    while (v12);
  }
  v15[0] = &v14;
  v8 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::MutableStyleProperties::removeProperties(std::span<WebCore::CSSPropertyID const,18446744073709551615ul>)::$_0>(v10, v15) != 0;
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), v13);
  return v8;
}

uint64_t WebCore::MutableStyleProperties::removeCustomProperty(WebCore::MutableStyleProperties *this, const WTF::String *a2, WTF::StringImpl **a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;

  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v8 = *(unsigned __int8 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v10 = *((_DWORD *)this + 7);
  v11 = (v10 - 1);
  if (v10 - 1 >= 0)
  {
    for (i = (uint64_t *)(*((_QWORD *)this + 2) + 16 * v11 + 8); ; i -= 2)
    {
      if ((*(_WORD *)(i - 1) & 0x3FF) == 1)
      {
        v15 = *i;
        if (*i)
        {
          if (((*(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16)) & 0x3F800) != 0xE800)
          {
            result = 96;
            __break(0xC471u);
            return result;
          }
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
          {
            v17 = *(unsigned int *)(v16 + 16);
            v18 = *(unsigned __int8 **)(v16 + 8);
            v16 = *(unsigned int *)(v16 + 4);
            v19 = (v17 >> 2) & 1;
          }
          else
          {
            v18 = 0;
            v19 = 1;
          }
          if (WTF::operator==(v18, v16 | (v19 << 32), v8, v9))
          {
            v12 = v11;
            return WebCore::MutableStyleProperties::removePropertyAtIndex((_BOOL8)this, (WTF::StringImpl *)v12, a3, a4, a5);
          }
        }
      }
      v12 = 0xFFFFFFFFLL;
      if (v11-- < 1)
        return WebCore::MutableStyleProperties::removePropertyAtIndex((_BOOL8)this, (WTF::StringImpl *)v12, a3, a4, a5);
    }
  }
  v12 = 0xFFFFFFFFLL;
  return WebCore::MutableStyleProperties::removePropertyAtIndex((_BOOL8)this, (WTF::StringImpl *)v12, a3, a4, a5);
}

BOOL WebCore::MutableStyleProperties::setProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _BOOL8 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  char v26;
  __int16 v27;
  __int16 v28;
  char v29;
  int v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char **v37;
  char *v38;

  v10 = *(_DWORD *)(a1 + 4) & 7;
  v31 = 0;
  WTF::URL::invalidate((WTF::URL *)&v31);
  v12 = v31;
  if (v31)
    *(_DWORD *)v31 += 2;
  v34 = v32;
  v35 = v33;
  if (v10 == 4)
  {
    v14 = 536871968;
    v13 = 12648448;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v15 != -1)
  {
    v38 = &v36;
    v37 = &v38;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v16 = v31;
  v31 = 0;
  if (!v16)
  {
LABEL_10:
    if (!v12)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v16, v11);
  if (v12)
LABEL_11:
    *(_DWORD *)v12 += 2;
LABEL_12:
  v22 = v12;
  v23 = v34;
  v24 = v35;
  v25 = 0;
  v26 = v10;
  v27 = 0;
  v28 = v13;
  v29 = BYTE2(v13);
  v30 = v14;
  v18 = WebCore::MutableStyleProperties::setProperty(a1, a2, a3, a4, (uint64_t)&v22, a5);
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v22;
  v22 = 0;
  if (!v20)
  {
LABEL_18:
    if (!v12)
      return v18;
    goto LABEL_19;
  }
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v20, v17);
  if (!v12)
    return v18;
LABEL_19:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v17);
  else
    *(_DWORD *)v12 -= 2;
  return v18;
}

uint64_t WebCore::MutableStyleProperties::setCustomProperty(WebCore::MutableStyleProperties *a1, const WTF::String *a2, const WTF::AtomString *a3, WTF::String *a4, uint64_t a5, const WebCore::CSSParserContext *a6, __n128 a7)
{
  BOOL v9;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
    return WebCore::MutableStyleProperties::removeCustomProperty(a1, a2, 0, a4, a7);
  v9 = a5;
  *(_BYTE *)(a5 + 48) = *((_BYTE *)a1 + 4) & 7;
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
  {
    if ((*((_BYTE *)v12 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v12 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v12, a2);
      v12 = v16;
    }
  }
  v16 = v12;
  v14 = WebCore::CSSParser::parseCustomPropertyValue(a1, (WebCore::MutableStyleProperties *)&v16, a3, a4, v9, a6);
  v15 = v16;
  v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v14 == 0;
}

BOOL WebCore::MutableStyleProperties::removeProperties(uint64_t a1, _WORD *a2, uint64_t a3)
{
  _BOOL8 v3;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;

  if (!*(_DWORD *)(a1 + 28))
    return 0;
  v5 = a1 + 16;
  v8 = 0;
  WTF::HashSet<WebCore::CSSPropertyID,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::add<std::__wrap_iter<WebCore::CSSPropertyID const*>>(&v8, a2, &a2[a3]);
  v7 = &v8;
  v3 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::MutableStyleProperties::removeProperties(std::span<WebCore::CSSPropertyID const,18446744073709551615ul>)::$_0>(v5, &v7) != 0;
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v6);
  return v3;
}

uint64_t WebCore::MutableStyleProperties::findCustomCSSPropertyWithName(WebCore::MutableStyleProperties *this, const WTF::String *a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;

  if (a2)
  {
    v3 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v4 = *((unsigned int *)a2 + 1) | ((unint64_t)((*((_DWORD *)a2 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  v5 = *((_DWORD *)this + 7);
  v6 = (v5 - 1);
  if (v5 - 1 < 0)
    return 0;
  for (i = (uint64_t *)(*((_QWORD *)this + 2) + 16 * v6 + 8); ; i -= 2)
  {
    if ((*(_WORD *)(i - 1) & 0x3FF) == 1)
    {
      v9 = *i;
      if (*i)
      {
        if (((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F800) != 0xE800)
          goto LABEL_19;
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(unsigned int *)(v10 + 16);
          v12 = *(unsigned __int8 **)(v10 + 8);
          v10 = *(unsigned int *)(v10 + 4);
          v13 = (v11 >> 2) & 1;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
        if (WTF::operator==(v12, v10 | (v13 << 32), v3, v4))
          break;
      }
    }
    result = 0;
    if (v6-- < 1)
      return result;
  }
  if (*((_DWORD *)this + 7) <= v6)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x195809B04);
  }
  return *((_QWORD *)this + 2) + 16 * v6;
}

BOOL WebCore::MutableStyleProperties::parseDeclaration(uint64_t a1, WebCore::MutableStyleProperties *a2, uint64_t a3, const WebCore::CSSParserContext *a4)
{
  void *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  WTF::StringImpl *v11;
  __int128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF *v20;
  unsigned __int16 *v21;
  BOOL v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  _DWORD **v34;
  _DWORD *v35;
  uint64_t v38;
  WebCore::CSSValueContainingVector *v39;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  __int16 v45;
  WTF *v46;
  uint64_t v47;
  _BYTE v48[64];
  uint64_t v49;

  v46 = (WTF *)v48;
  v47 = 4;
  v7 = *(void **)(a1 + 16);
  if (v7 == (void *)(a1 + 32))
  {
    v8 = *(unsigned int *)(a1 + 28);
    memcpy(v48, v7, 16 * v8);
    v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 28) = 0;
    HIDWORD(v47) = v8;
    if (v7)
      v10 = 1;
    else
      v10 = v9 == 0;
    if (!v10)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 4;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = a1 + 32;
    v46 = (WTF *)v7;
    v38 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 4;
    v47 = v38;
  }
  *(_BYTE *)(a3 + 48) = *(_BYTE *)(a1 + 4) & 7;
  v11 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v11 += 2;
  v40 = v11;
  v12 = *(_OWORD *)(a3 + 24);
  v41 = *(_OWORD *)(a3 + 8);
  v42 = v12;
  v13 = *(WTF::StringImpl **)(a3 + 40);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = *(_QWORD *)(a3 + 48);
  v43 = v13;
  v44 = v14;
  v45 = *(_WORD *)(a3 + 56);
  WebCore::CSSParserImpl::parseDeclarationList((WebCore::CSSParserImpl *)a1, a2, (const WTF::String *)&v40, a4);
  v17 = v43;
  v43 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v40;
  v40 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = HIDWORD(v47);
  v20 = v46;
  if (HIDWORD(v47) == *(_DWORD *)(a1 + 28))
  {
    if (!HIDWORD(v47))
    {
      v22 = 1;
      goto LABEL_40;
    }
    v21 = *(unsigned __int16 **)(a1 + 16);
    if (*(unsigned __int16 *)v46 == *v21)
    {
      v22 = 0;
      v23 = (unsigned __int16 *)((char *)v46 + 16);
      v24 = v21 + 8;
      v25 = 1;
      while (1)
      {
        v26 = *((_QWORD *)v23 - 1);
        v15 = *((_QWORD *)v24 - 1);
        if (v26)
          v27 = v15 == 0;
        else
          v27 = 1;
        if (v27)
        {
          if (v26 | v15)
            goto LABEL_29;
        }
        else
        {
          v28 = *(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16);
          v29 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
          if (((v29 ^ v28) & 0x3F800) != 0)
          {
            if ((v28 & 0x3F800) == 0x1D800)
            {
              v39 = (WebCore::CSSValueContainingVector *)*((_QWORD *)v23 - 1);
            }
            else
            {
              if ((v29 & 0x3F800) != 0x1D800)
                goto LABEL_29;
              v39 = (WebCore::CSSValueContainingVector *)*((_QWORD *)v24 - 1);
              v15 = *((_QWORD *)v23 - 1);
            }
            if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v39, (const WebCore::CSSValue *)v15, v16) & 1) == 0)
            {
LABEL_29:
              LODWORD(v19) = HIDWORD(v47);
              v20 = v46;
              goto LABEL_31;
            }
          }
          else
          {
            v49 = *((_QWORD *)v24 - 1);
            v40 = (WTF::StringImpl *)&v49;
            if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v26, (const WebCore::CSSLinearGradientValue ***)&v40, v16) & 1) == 0)goto LABEL_29;
          }
        }
        v22 = v25 >= v19;
        if (v19 != v25)
        {
          v31 = *v23;
          v23 += 8;
          v30 = v31;
          v32 = *v24;
          v24 += 8;
          ++v25;
          if (v30 == v32)
            continue;
        }
        goto LABEL_29;
      }
    }
    v22 = 0;
    goto LABEL_33;
  }
  v22 = 0;
LABEL_31:
  if ((_DWORD)v19)
  {
    v19 = v19;
LABEL_33:
    v33 = 16 * v19;
    v34 = (_DWORD **)((char *)v20 + 8);
    do
    {
      v35 = *v34;
      *v34 = 0;
      if (v35)
      {
        if (*v35 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, (WTF::StringImpl *)v15);
        else
          *v35 -= 2;
      }
      v34 += 2;
      v33 -= 16;
    }
    while (v33);
    v20 = v46;
  }
LABEL_40:
  if (v48 != (_BYTE *)v20 && v20 != 0)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    WTF::fastFree(v20, (void *)v15);
  }
  return !v22;
}

uint64_t WebCore::MutableStyleProperties::addParsedProperties(WebCore::StyleProperties *this, unsigned __int16 **a2, const WTF::StringImpl *a3)
{
  unsigned __int16 **v3;
  char **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  char v30;
  char *v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  WebCore::CSSValueContainingVector *v42;
  uint64_t v43;
  __int16 *v44;
  uint64_t v45;
  const WebCore::CSSLinearGradientValue **v46;

  v3 = a2;
  v5 = (char **)((char *)this + 16);
  v6 = *((unsigned int *)this + 7);
  v7 = *((unsigned int *)a2 + 3) + v6;
  if (v7 > *((unsigned int *)this + 6))
  {
    v32 = *v5;
    if (v7 < 5)
    {
      v33 = (char *)this + 32;
      *((_QWORD *)this + 2) = (char *)this + 32;
      *((_DWORD *)this + 6) = 4;
    }
    else
    {
      if (v7 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x19580A1D4);
      }
      v33 = (char *)WTF::fastMalloc((WTF *)(16 * v7));
      *((_DWORD *)this + 6) = v7;
      *((_QWORD *)this + 2) = v33;
    }
    memcpy(v33, v32, 16 * v6);
    if ((char *)this + 32 != v32 && v32 != 0)
    {
      if (*v5 == v32)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
      }
      WTF::fastFree((WTF *)v32, a2);
    }
  }
  v8 = *((unsigned int *)v3 + 3);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *v3;
    v11 = &v10[8 * v8];
    while (1)
    {
      v12 = *v10;
      if ((v12 & 0x3FF) == 1)
      {
        v41 = *((_QWORD *)v10 + 1);
        if (v41)
        {
          if (((*(unsigned __int16 *)(v41 + 4) | (*(unsigned __int8 *)(v41 + 6) << 16)) & 0x3F800) != 0xE800)
          {
            __break(0xC471u);
            JUMPOUT(0x19580A1C4);
          }
          if (!WebCore::StyleProperties::customPropertyIsImportant(this, (const WTF::String *)(v41 + 8)))
          {
LABEL_55:
            v30 = WebCore::MutableStyleProperties::setProperty(this, v10, 0);
            goto LABEL_29;
          }
          LOWORD(v12) = *v10;
        }
        if ((v12 & 0x2000) != 0)
          goto LABEL_55;
LABEL_31:
        v30 = 0;
      }
      else
      {
        v13 = *((_QWORD *)this + 2);
        v14 = *((unsigned int *)this + 7);
        v15 = v14 - 1;
        LODWORD(v16) = *((_DWORD *)this + 7);
        do
        {
          v16 = (WTF::StringImpl *)((_DWORD)v16 - 1);
          if ((int)v16 < 0)
          {
LABEL_23:
            v26 = v14;
            if ((_DWORD)v14 == *((_DWORD *)this + 6))
            {
              v35 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v14 + 1, (unint64_t)v10);
              v36 = *((unsigned int *)this + 7);
              v37 = *((_QWORD *)this + 2);
              *(_WORD *)(v37 + 16 * v36) = *(_WORD *)v35;
              v28 = *(_DWORD **)(v35 + 8);
              if (v28)
                *v28 += 2;
              v29 = (char *)(v37 + 16 * v36);
            }
            else
            {
              v27 = *v5;
              *(_WORD *)&(*v5)[16 * v26] = *v10;
              v28 = (_DWORD *)*((_QWORD *)v10 + 1);
              if (v28)
                *v28 += 2;
              v29 = &v27[16 * v26];
            }
            *((_QWORD *)v29 + 1) = v28;
            ++*((_DWORD *)this + 7);
            goto LABEL_28;
          }
          v17 = v15;
          v18 = *(unsigned __int16 *)(v13 + 16 * v16);
          --v15;
        }
        while ((v18 & 0x3FF) != (v12 & 0x3FF));
        if (v14 <= v16)
        {
          __break(0xC471u);
          JUMPOUT(0x19580A1CCLL);
        }
        switch(v12 & 0x3FF)
        {
          case 0x162:
          case 0x163:
          case 0x164:
          case 0x165:
          case 0x166:
          case 0x167:
          case 0x168:
          case 0x169:
          case 0x16A:
          case 0x16B:
          case 0x16C:
          case 0x16D:
          case 0x16E:
          case 0x16F:
          case 0x170:
          case 0x171:
          case 0x172:
          case 0x173:
          case 0x174:
          case 0x175:
          case 0x176:
          case 0x177:
          case 0x178:
          case 0x179:
          case 0x17A:
          case 0x17B:
          case 0x17C:
          case 0x17D:
          case 0x17E:
          case 0x17F:
          case 0x180:
          case 0x181:
          case 0x182:
          case 0x183:
          case 0x185:
          case 0x186:
          case 0x187:
          case 0x188:
          case 0x189:
          case 0x18A:
          case 0x18B:
          case 0x18C:
          case 0x18D:
          case 0x18E:
          case 0x18F:
          case 0x190:
          case 0x191:
          case 0x192:
          case 0x193:
          case 0x194:
          case 0x195:
          case 0x196:
          case 0x197:
          case 0x19B:
          case 0x19C:
          case 0x19D:
          case 0x19E:
          case 0x19F:
          case 0x1A0:
          case 0x1A1:
          case 0x1A2:
          case 0x1A3:
          case 0x1A4:
          case 0x1A5:
          case 0x1A6:
          case 0x1A7:
          case 0x1A8:
          case 0x1A9:
          case 0x1AA:
          case 0x1AB:
          case 0x1AC:
          case 0x1AD:
          case 0x1AE:
          case 0x1AF:
          case 0x1B0:
          case 0x1B1:
          case 0x1B2:
          case 0x1B3:
          case 0x1B4:
          case 0x1B5:
          case 0x1B6:
          case 0x1B7:
          case 0x1B8:
          case 0x1B9:
          case 0x1BA:
          case 0x1BB:
          case 0x1BC:
          case 0x1BD:
          case 0x1BE:
          case 0x1BF:
          case 0x1C1:
          case 0x1C2:
            v44 = (__int16 *)(v13 + 16 * v17 + 16);
            v38 = 16 * v14 - 16 * v17 - 16;
            do
            {
              if (!v38)
                goto LABEL_10;
              v43 = v38;
              v39 = *v44;
              v44 += 8;
              v40 = WebCore::CSSProperty::areInSameLogicalPropertyGroupWithDifferentMappingLogic(v12 & 0x3FF, v39 & 0x3FF);
              v38 = v43 - 16;
            }
            while ((v40 & 1) == 0);
            WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t)v5, v16);
            LODWORD(v14) = *((_DWORD *)this + 7);
            goto LABEL_23;
          default:
LABEL_10:
            if (v18 != v12)
              goto LABEL_18;
            v19 = *(_QWORD *)(v13 + 16 * (_QWORD)v16 + 8);
            a2 = (unsigned __int16 **)*((_QWORD *)v10 + 1);
            if (v19)
              v20 = a2 == 0;
            else
              v20 = 1;
            if (!v20)
            {
              v21 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
              v22 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
              if (((v22 ^ v21) & 0x3F800) == 0)
              {
                v45 = *((_QWORD *)v10 + 1);
                v46 = (const WebCore::CSSLinearGradientValue **)&v45;
                if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v19, &v46, a3) & 1) != 0)goto LABEL_31;
                goto LABEL_17;
              }
              if ((v21 & 0x3F800) == 0x1D800)
              {
                v42 = *(WebCore::CSSValueContainingVector **)(v13 + 16 * (_QWORD)v16 + 8);
              }
              else
              {
                if ((v22 & 0x3F800) != 0x1D800)
                {
LABEL_17:
                  LOWORD(v12) = *v10;
                  goto LABEL_18;
                }
                v42 = (WebCore::CSSValueContainingVector *)*((_QWORD *)v10 + 1);
                a2 = *(unsigned __int16 ***)(v13 + 16 * (_QWORD)v16 + 8);
              }
              if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v42, (const WebCore::CSSValue *)a2, a3) & 1) != 0)
                goto LABEL_31;
              goto LABEL_17;
            }
            if (!(v19 | (unint64_t)a2))
              goto LABEL_31;
LABEL_18:
            *(_WORD *)(v13 + 16 * (_QWORD)v16) = v12;
            v23 = (_DWORD *)*((_QWORD *)v10 + 1);
            if (v23)
              *v23 += 2;
            v24 = v13 + 16 * (_QWORD)v16;
            v25 = *(_DWORD **)(v24 + 8);
            *(_QWORD *)(v24 + 8) = v23;
            if (v25)
            {
              if (*v25 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, (WTF::StringImpl *)a2);
              else
                *v25 -= 2;
            }
            break;
        }
LABEL_28:
        v30 = 1;
      }
LABEL_29:
      v9 |= v30;
      v10 += 8;
      if (v10 == v11)
        return v9 & 1;
    }
  }
  v9 = 0;
  return v9 & 1;
}

uint64_t WebCore::MutableStyleProperties::addParsedProperty(WebCore::StyleProperties *this, unint64_t a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  _DWORD **v15;
  _DWORD *v16;
  _DWORD *v17;
  __int16 *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::CSSValueContainingVector *v30;
  uint64_t v31;
  const WebCore::CSSLinearGradientValue **v32;

  v3 = a2;
  v5 = *(unsigned __int16 *)a2;
  if ((v5 & 0x3FF) == 1)
  {
    v29 = *(_QWORD *)(a2 + 8);
    if (v29)
    {
      if (((*(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16)) & 0x3F800) != 0xE800)
      {
        __break(0xC471u);
        JUMPOUT(0x19580A658);
      }
      if (!WebCore::StyleProperties::customPropertyIsImportant(this, (const WTF::String *)(v29 + 8)))
        return WebCore::MutableStyleProperties::setProperty(this, (unsigned __int16 *)v3, 0);
      LOWORD(v5) = *(_WORD *)v3;
    }
    if ((v5 & 0x2000) == 0)
      return 0;
    return WebCore::MutableStyleProperties::setProperty(this, (unsigned __int16 *)v3, 0);
  }
  v6 = (uint64_t *)((char *)this + 16);
  v7 = *((_QWORD *)this + 2);
  v8 = *((unsigned int *)this + 7);
  LODWORD(v9) = *((_DWORD *)this + 7);
  do
  {
    v9 = (WTF::StringImpl *)((_DWORD)v9 - 1);
    if ((int)v9 < 0)
    {
LABEL_25:
      v21 = v8;
      if ((_DWORD)v8 == *((_DWORD *)this + 6))
      {
        v26 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 16, v8 + 1, v3);
        v27 = *((unsigned int *)this + 7);
        v28 = *((_QWORD *)this + 2);
        *(_WORD *)(v28 + 16 * v27) = *(_WORD *)v26;
        v23 = *(_DWORD **)(v26 + 8);
        if (v23)
          *v23 += 2;
        v24 = v28 + 16 * v27;
      }
      else
      {
        v22 = *v6;
        *(_WORD *)(*v6 + 16 * v21) = *(_WORD *)v3;
        v23 = *(_DWORD **)(v3 + 8);
        if (v23)
          *v23 += 2;
        v24 = v22 + 16 * v21;
      }
      *(_QWORD *)(v24 + 8) = v23;
      ++*((_DWORD *)this + 7);
      return 1;
    }
    v10 = *(unsigned __int16 *)(v7 + 16 * v9);
  }
  while ((v10 & 0x3FF) != (v5 & 0x3FF));
  if (v8 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19580A660);
  }
  switch(v5 & 0x3FF)
  {
    case 0x162:
    case 0x163:
    case 0x164:
    case 0x165:
    case 0x166:
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17B:
    case 0x17C:
    case 0x17D:
    case 0x17E:
    case 0x17F:
    case 0x180:
    case 0x181:
    case 0x182:
    case 0x183:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x188:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18C:
    case 0x18D:
    case 0x18E:
    case 0x18F:
    case 0x190:
    case 0x191:
    case 0x192:
    case 0x193:
    case 0x194:
    case 0x195:
    case 0x196:
    case 0x197:
    case 0x19B:
    case 0x19C:
    case 0x19D:
    case 0x19E:
    case 0x19F:
    case 0x1A0:
    case 0x1A1:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
    case 0x1AB:
    case 0x1AC:
    case 0x1AD:
    case 0x1AE:
    case 0x1AF:
    case 0x1B0:
    case 0x1B1:
    case 0x1B2:
    case 0x1B3:
    case 0x1B4:
    case 0x1B5:
    case 0x1B6:
    case 0x1B7:
    case 0x1B8:
    case 0x1B9:
    case 0x1BA:
    case 0x1BB:
    case 0x1BC:
    case 0x1BD:
    case 0x1BE:
    case 0x1BF:
    case 0x1C1:
    case 0x1C2:
      v18 = (__int16 *)(v7 + 16 * v9 + 16);
      v19 = 16 * v8 - 16 * v9 - 16;
      do
      {
        if (!v19)
          goto LABEL_7;
        v20 = *v18;
        v18 += 8;
        v19 -= 16;
      }
      while ((WebCore::CSSProperty::areInSameLogicalPropertyGroupWithDifferentMappingLogic(v5 & 0x3FF, v20 & 0x3FF) & 1) == 0);
      WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t)this + 16, v9);
      LODWORD(v8) = *((_DWORD *)this + 7);
      goto LABEL_25;
    default:
LABEL_7:
      if (v10 != v5)
        goto LABEL_15;
      v11 = *(_QWORD *)(v7 + 16 * (_QWORD)v9 + 8);
      a2 = *(_QWORD *)(v3 + 8);
      if (v11)
        v12 = a2 == 0;
      else
        v12 = 1;
      if (!v12)
      {
        v13 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
        v14 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
        if (((v14 ^ v13) & 0x3F800) == 0)
        {
          v31 = *(_QWORD *)(v3 + 8);
          v32 = (const WebCore::CSSLinearGradientValue **)&v31;
          if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v11, &v32, a3) & 1) != 0)return 0;
          goto LABEL_14;
        }
        if ((v13 & 0x3F800) == 0x1D800)
        {
          v30 = *(WebCore::CSSValueContainingVector **)(v7 + 16 * (_QWORD)v9 + 8);
        }
        else
        {
          if ((v14 & 0x3F800) != 0x1D800)
          {
LABEL_14:
            LOWORD(v5) = *(_WORD *)v3;
            goto LABEL_15;
          }
          v30 = *(WebCore::CSSValueContainingVector **)(v3 + 8);
          a2 = *(_QWORD *)(v7 + 16 * (_QWORD)v9 + 8);
        }
        if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v30, (const WebCore::CSSValue *)a2, a3) & 1) != 0)
          return 0;
        goto LABEL_14;
      }
      if (!(v11 | a2))
        return 0;
LABEL_15:
      *(_WORD *)(v7 + 16 * (_QWORD)v9) = v5;
      v15 = (_DWORD **)(v7 + 16 * (_QWORD)v9 + 8);
      v16 = *(_DWORD **)(v3 + 8);
      if (v16)
        *v16 += 2;
      v17 = *v15;
      *v15 = v16;
      if (v17)
      {
        if (*v17 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, (WTF::StringImpl *)a2);
        else
          *v17 -= 2;
      }
      break;
  }
  return 1;
}

uint64_t WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(WebCore::MutableStyleProperties *this, const WebCore::StyleProperties *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  char v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  __int16 v12;
  WTF::StringImpl *v13;
  char v14;
  _DWORD *v15;
  __int16 v17;
  _DWORD *v18;

  v5 = 0;
  v6 = 0;
  v7 = (char *)a2 + 8;
  while (1)
  {
    v8 = *((unsigned int *)a2 + 1);
    if ((v8 & 8) != 0)
      break;
    if (v5 >= v8 >> 4)
      return v6 & 1;
    v9 = (uint64_t)&v7[2 * v5];
    v10 = &v7[5 * v5 + ((v8 >> 3) & 0x1FFFFFFE)];
    v11 = (_DWORD *)(*(unsigned int *)v10 | ((unint64_t)v10[4] << 32));
LABEL_5:
    v12 = *(_WORD *)v9;
    if (v11)
      *v11 += 2;
    v17 = *(_WORD *)v9 & 0x7C00 | ((WebCore::isInheritedPropertyTable[v12 & 0x3FF] != 0) << 15) | v12 & 0x3FF;
    v18 = v11;
    v14 = WebCore::MutableStyleProperties::addParsedProperty(this, (unint64_t)&v17, a3);
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*v15 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v13);
      else
        *v15 -= 2;
    }
    v6 |= v14;
    v5 = (v5 + 1);
  }
  if (*((_DWORD *)a2 + 7) > v5)
  {
    v9 = *((_QWORD *)a2 + 2) + 16 * v5;
    v11 = *(_DWORD **)(v9 + 8);
    goto LABEL_5;
  }
  return v6 & 1;
}

BOOL WTF::HashSet<WebCore::CSSPropertyID,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::add<std::__wrap_iter<WebCore::CSSPropertyID const*>>(uint64_t *a1, _WORD *a2, _WORD *a3)
{
  _WORD *v4;
  _BOOL8 v6;
  _BYTE v8[24];

  if (a2 == a3)
    return 0;
  v4 = a2;
  LOBYTE(v6) = 0;
  do
  {
    WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::add(a1, v4, (uint64_t)v8);
    v6 |= v8[16];
    ++v4;
  }
  while (v4 != a3);
  return v6;
}

uint64_t WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::MutableStyleProperties::removeProperties(std::span<WebCore::CSSPropertyID const,18446744073709551615ul>)::$_0>(uint64_t a1, uint64_t **a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  char *v18;
  int64_t v19;
  _DWORD *v20;
  char *v21;

  v3 = *(char **)a1;
  v4 = *(unsigned int *)(a1 + 12);
  v5 = (char *)(*(_QWORD *)a1 + 16 * v4);
  if ((_DWORD)v4 && **a2)
  {
    v7 = 0;
    v8 = (char *)(*(_QWORD *)a1 + 16 * v4);
    v9 = v8;
    do
    {
      v10 = **a2;
      if (v10)
      {
        v11 = *(_WORD *)v3 & 0x3FF;
        v12 = *(_DWORD *)(v10 - 8);
        v13 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
        v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
        v15 = v12 & (v14 ^ HIWORD(v14));
        v16 = *(unsigned __int16 *)(v10 + 2 * v15);
        if (v16 == v11)
        {
LABEL_9:
          v18 = v3;
          if (v9 != (char *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)))
          {
            if (v8 == v3)
            {
              v18 = v9;
            }
            else
            {
              v19 = v3 - v8;
              memmove(v9, v8, v3 - v8);
              v18 = &v9[v19];
            }
          }
          v20 = (_DWORD *)*((_QWORD *)v3 + 1);
          *((_QWORD *)v3 + 1) = 0;
          if (v20)
          {
            if (*v20 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, (WTF::StringImpl *)v8);
            else
              *v20 -= 2;
          }
          v8 = v3 + 16;
          v7 = (v7 + 1);
          v9 = v18;
        }
        else
        {
          v17 = 1;
          while (v16)
          {
            v15 = (v15 + v17) & v12;
            v16 = *(unsigned __int16 *)(v10 + 2 * v15);
            ++v17;
            if (v16 == v11)
              goto LABEL_9;
          }
        }
      }
      v3 += 16;
    }
    while (v3 < v5);
    v3 = *(char **)a1;
    LODWORD(v4) = *(_DWORD *)(a1 + 12);
    v5 = v9;
  }
  else
  {
    v7 = 0;
    v8 = (char *)(*(_QWORD *)a1 + 16 * v4);
  }
  v21 = &v3[16 * v4];
  if (v8 != v21)
  {
    memmove(v5, v8, v21 - v8);
    LODWORD(v4) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v4 - v7;
  return v7;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (*(_DWORD *)v2 == 1)
  {
    v3 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      v5 = (_DWORD **)(*(_QWORD *)(v2 + 16) + 8);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*v6 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
          else
            *v6 -= 2;
        }
        v5 += 2;
        v4 -= 16;
      }
      while (v4);
    }
    v7 = *(WTF **)(v2 + 16);
    if ((WTF *)(v2 + 32) != v7 && v7 != 0)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v7, a2);
    }
    v9 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return this;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::length(WebCore::PropertySetCSSStyleDeclaration *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *((_QWORD *)this + 3);
  if (!*(_DWORD *)(v1 + 28))
    return 0;
  LODWORD(v3) = 0;
  v4 = 0;
  do
  {
    v3 = v3
       + WebCore::PropertySetCSSStyleDeclaration::isExposed((uint64_t)this, *(_WORD *)(*(_QWORD *)(v1 + 16) + 16 * v4) & 0x3FF);
    v5 = v4 + 1;
    v4 = (v4 + 1);
  }
  while (*(_DWORD *)(v1 + 28) > v5);
  return v3;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::item@<X0>(uint64_t this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  LODWORD(v3) = a2;
  v4 = this;
  v6 = 0;
  v7 = -1;
  while (1)
  {
    ++v7;
    v8 = *(_QWORD *)(v4 + 24);
    v9 = *(unsigned int *)(v8 + 28);
    if (v7 >= v9)
      break;
    this = WebCore::PropertySetCSSStyleDeclaration::isExposed(v4, *(_WORD *)(*(_QWORD *)(v8 + 16) + v6) & 0x3FF);
    v3 = v3 + (this ^ 1);
    v6 += 16;
    if (v7 >= v3)
    {
      v8 = *(_QWORD *)(v4 + 24);
      LODWORD(v9) = *(_DWORD *)(v8 + 28);
      break;
    }
  }
  if (v3 >= v9)
  {
    v12 = 0;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(v8 + 16) + 16 * v3;
  this = *(_WORD *)v10 & 0x3FF;
  if ((_DWORD)this != 1)
  {
    this = (uint64_t)WebCore::nameString(this);
    v12 = *(_DWORD **)this;
    if (*(_QWORD *)this)
LABEL_12:
      *v12 += 2;
LABEL_13:
    *a3 = v12;
    return this;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F800) == 0xE800)
  {
    v12 = *(_DWORD **)(v11 + 8);
    if (!v12)
      goto LABEL_13;
    goto LABEL_12;
  }
  this = 96;
  __break(0xC471u);
  return this;
}

void WebCore::PropertySetCSSStyleDeclaration::cssText(WebCore::StyleProperties **this@<X0>, unsigned __int8 *a2@<X1>, WTF::String *a3@<X3>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  WebCore::StyleProperties::asText(this[3], a2, a3, a4, a5);
}

void WebCore::PropertySetCSSStyleDeclaration::setCssText(WebCore::PropertySetCSSStyleDeclaration *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Element *v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  void *v10;
  uint64_t v11;
  WTF::String *v12;
  __n128 v13;
  uint64_t v14;
  const WebCore::CSSParserContext *v15;
  WTF::StringImpl *v16;
  _BOOL4 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21[5];
  WTF::StringImpl *v22;
  _BYTE v23[32];

  v6 = (WebCore::Element *)(*(uint64_t (**)(WebCore::PropertySetCSSStyleDeclaration *))(*(_QWORD *)this + 32))(this);
  WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v23, v6, v7, v8, v9);
  if ((*(unsigned int (**)(WebCore::PropertySetCSSStyleDeclaration *))(*(_QWORD *)this + 192))(this))
  {
    v14 = *((_QWORD *)this + 3);
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::PropertySetCSSStyleDeclaration *))(*(_QWORD *)this + 184))(v21, this);
    v17 = WebCore::MutableStyleProperties::parseDeclaration(v14, a2, (uint64_t)v21, v15);
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v21[0];
    v21[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (v17)
      v20 = 2;
    else
      v20 = 1;
    (*(void (**)(WebCore::PropertySetCSSStyleDeclaration *, uint64_t))(*(_QWORD *)this + 200))(this, v20);
    v23[25] = 1;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v23, v10, v11, v12, v13);
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::getPropertyCSSValue@<X0>(WebCore::PropertySetCSSStyleDeclaration *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  WebCore::CSSValue *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  int v14;
  WebCore::CSSValue *v15;

  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v6 = 0;
    v13 = 0x100000000;
LABEL_12:
    v14 = WebCore::cssPropertyID(v6, (const char *)v13);
    result = WebCore::PropertySetCSSStyleDeclaration::isExposed((uint64_t)this, v14);
    if ((result & 1) != 0)
    {
      WebCore::StyleProperties::getPropertyCSSValue(*((_QWORD *)this + 3), v14, &v15);
      v11 = v15;
      result = (uint64_t)WebCore::PropertySetCSSStyleDeclaration::wrapForDeprecatedCSSOM(a3, this, v15);
      if (!v11)
        return result;
      goto LABEL_14;
    }
LABEL_16:
    *a3 = 0;
    return result;
  }
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 4);
  v8 = *(_DWORD *)(v5 + 16);
  if (v7 < 3)
    goto LABEL_11;
  if ((v8 & 4) == 0)
  {
    if (*(_WORD *)v6 == 45)
    {
      v9 = *(unsigned __int16 *)(v6 + 2);
      goto LABEL_8;
    }
LABEL_11:
    v13 = v7 | ((unint64_t)((v8 >> 2) & 1) << 32);
    goto LABEL_12;
  }
  if (*(_BYTE *)v6 != 45)
    goto LABEL_11;
  v9 = *(unsigned __int8 *)(v6 + 1);
LABEL_8:
  if (v9 != 45)
    goto LABEL_11;
  result = WebCore::StyleProperties::getCustomPropertyCSSValue(*((_QWORD *)this + 3), a2, &v15);
  v11 = v15;
  if (!v15)
    goto LABEL_16;
  result = (uint64_t)WebCore::PropertySetCSSStyleDeclaration::wrapForDeprecatedCSSOM(a3, this, v15);
LABEL_14:
  if (*(_DWORD *)v11 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v12);
  *(_DWORD *)v11 -= 2;
  return result;
}

_QWORD *WebCore::PropertySetCSSStyleDeclaration::wrapForDeprecatedCSSOM(_QWORD *this, WebCore::CSSValue *a2, WebCore::CSSValue *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  v3 = this;
  if (!a3)
  {
    *this = 0;
    return this;
  }
  v7 = (uint64_t *)((char *)a2 + 32);
  v6 = *((_QWORD *)a2 + 4);
  if (v6
    || (this = WTF::HashTable<WebCore::CSSValue *,WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashMap<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashTraits<WebCore::CSSValue *>,WTF::HashTraits<WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValue *>>::rehash((uint64_t *)a2 + 4, 8u, 0), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 16 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    while ((WebCore::CSSValue *)v14 != a3)
    {
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (uint64_t *)(v6 + 16 * v12);
      v14 = *v13;
      ++v16;
      if (!*v13)
      {
        if (v15)
        {
          *v15 = 0;
          v15[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          v13 = v15;
        }
        goto LABEL_13;
      }
    }
    goto LABEL_31;
  }
LABEL_13:
  this = (_QWORD *)v13[1];
  *v13 = (uint64_t)a3;
  v13[1] = 0;
  if (this)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)this);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)this));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)this);
      this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
    }
  }
  v19 = *v7;
  if (*v7)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v7;
  if (*v7)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 <= 0x400)
  {
    if (3 * v24 > 4 * v23)
      goto LABEL_31;
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_30;
    }
LABEL_27:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_30:
    this = WTF::HashTable<WebCore::CSSValue *,WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashMap<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashTraits<WebCore::CSSValue *>,WTF::HashTraits<WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValue *>>::rehash(v7, v25, v13);
    v13 = this;
    goto LABEL_31;
  }
  if (v24 <= 2 * v23)
    goto LABEL_27;
LABEL_31:
  v26 = v13[1];
  if (v26 && (v27 = *(_DWORD **)(v26 + 8)) != 0)
  {
    ++*v27;
  }
  else
  {
    WebCore::CSSValue::createDeprecatedCSSOMWrapper(a3, a2, &v37);
    v29 = v37;
    this = *(_QWORD **)(v37 + 8);
    if (this)
      goto LABEL_51;
    this = (_QWORD *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)this = 1;
    this[1] = v29;
    v30 = *(unsigned int **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = this;
    if (!v30)
      goto LABEL_51;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v28);
    }
    this = *(_QWORD **)(v29 + 8);
    if (this)
    {
LABEL_51:
      do
        v33 = __ldaxr((unsigned int *)this);
      while (__stlxr(v33 + 1, (unsigned int *)this));
    }
    v34 = (unsigned int *)v13[1];
    v13[1] = (uint64_t)this;
    if (v34)
    {
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        this = (_QWORD *)WTF::fastFree((WTF *)v34, v28);
      }
    }
    v27 = (_DWORD *)v37;
  }
  *v3 = v27;
  return this;
}

void WebCore::PropertySetCSSStyleDeclaration::getPropertyValue(WebCore::StyleProperties **this@<X0>, const WTF::String *a2@<X1>, WebCore *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringBuilder *v12;
  WTF::String *v13;
  __n128 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v6 = 0;
    v10 = 0x100000000;
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 4);
  v8 = *(_DWORD *)(v5 + 16);
  if (v7 >= 3)
  {
    if ((v8 & 4) != 0)
    {
      if (*(_BYTE *)v6 == 45)
      {
        v9 = *(unsigned __int8 *)(v6 + 1);
LABEL_8:
        if (v9 == 45)
        {
          WebCore::StyleProperties::getCustomPropertyValue(this[3], a2, a3);
          return;
        }
      }
    }
    else if (*(_WORD *)v6 == 45)
    {
      v9 = *(unsigned __int16 *)(v6 + 2);
      goto LABEL_8;
    }
  }
  v10 = v7 | ((unint64_t)((v8 >> 2) & 1) << 32);
LABEL_11:
  v11 = WebCore::cssPropertyID(v6, (const char *)v10);
  if ((WebCore::PropertySetCSSStyleDeclaration::isExposed((uint64_t)this, v11) & 1) != 0
    && (WebCore::PropertySetCSSStyleDeclaration::isExposed((uint64_t)this, v11) & 1) != 0
    && (WebCore::StyleProperties::getPropertyValue(this[3], v11, v12, v13, (WebCore *)&v17, v14), (v16 = v17) != 0))
  {
    if (*((_DWORD *)v17 + 1))
    {
      *(_QWORD *)a3 = v17;
    }
    else
    {
      *(_QWORD *)a3 = 0;
      v17 = 0;
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
  }
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::getPropertyPriority@<X0>(WebCore::StyleProperties **this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  unint64_t v11;
  int v12;
  _DWORD *v13;

  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v6 = 0;
    v11 = 0x100000000;
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 4);
  v8 = *(_DWORD *)(v5 + 16);
  if (v7 >= 3)
  {
    if ((v8 & 4) != 0)
    {
      if (*(_BYTE *)v6 == 45)
      {
        v9 = *(unsigned __int8 *)(v6 + 1);
LABEL_8:
        if (v9 == 45)
        {
          result = WebCore::StyleProperties::customPropertyIsImportant(this[3], a2);
          if (!(_DWORD)result)
            goto LABEL_15;
          return WTF::StringImpl::createWithoutCopyingNonEmpty();
        }
      }
    }
    else if (*(_WORD *)v6 == 45)
    {
      v9 = *(unsigned __int16 *)(v6 + 2);
      goto LABEL_8;
    }
  }
  v11 = v7 | ((unint64_t)((v8 >> 2) & 1) << 32);
LABEL_12:
  v12 = WebCore::cssPropertyID(v6, (const char *)v11);
  result = WebCore::PropertySetCSSStyleDeclaration::isExposed((uint64_t)this, v12);
  if ((result & 1) != 0)
  {
    result = WebCore::StyleProperties::propertyIsImportant((uint64_t)this[3], v12);
    if ((_DWORD)result)
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
LABEL_15:
  v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v13 += 2;
  *a3 = v13;
  return result;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::getPropertyShorthand@<X0>(WebCore::PropertySetCSSStyleDeclaration *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t result;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  v8 = WebCore::cssPropertyID(v6, (const char *)v7);
  result = WebCore::PropertySetCSSStyleDeclaration::isExposed((uint64_t)this, v8);
  if ((result & 1) != 0)
    return (uint64_t)WebCore::StyleProperties::getPropertyShorthand(*((_QWORD *)this + 3), v8, a3);
  *a3 = 0;
  return result;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::isPropertyImplicit(WebCore::PropertySetCSSStyleDeclaration *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t result;
  unsigned __int16 *v8;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v6 = WebCore::cssPropertyID(v4, (const char *)v5);
  result = WebCore::StyleProperties::findPropertyIndex(v2, v6);
  if ((_DWORD)result == -1)
    return 0;
  if ((*(_BYTE *)(v2 + 4) & 8) == 0)
  {
    v8 = (unsigned __int16 *)(v2 + 2 * result + 8);
    return (*v8 >> 14) & 1;
  }
  if (*(_DWORD *)(v2 + 28) > result)
  {
    v8 = (unsigned __int16 *)(*(_QWORD *)(v2 + 16) + 16 * result);
    return (*v8 >> 14) & 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::PropertySetCSSStyleDeclaration::setProperty(WebCore::PropertySetCSSStyleDeclaration *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, _QWORD *a5@<X8>)
{
  WebCore::Element *v10;
  uint64_t v11;
  WTF::String *v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  WTF::String *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::MutableStyleProperties *v29;
  void (*v30)(WTF::StringImpl **__return_ptr, WebCore::PropertySetCSSStyleDeclaration *);
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  const WebCore::CSSParserContext *v39;
  __n128 v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42[5];
  WTF::StringImpl *v43;
  _QWORD v44[8];
  _BYTE v45[32];

  v10 = (WebCore::Element *)(*(uint64_t (**)(WebCore::PropertySetCSSStyleDeclaration *))(*(_QWORD *)this + 32))(this);
  WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v45, v10, v11, v12, v13);
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v15 = *(unsigned int *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 8);
    LODWORD(v14) = *(_DWORD *)(v14 + 4);
    v17 = (v15 >> 2) & 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = WebCore::cssPropertyID(v16, (const char *)(v14 | (unint64_t)(v17 << 32)));
  v19 = v18;
  v20 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_DWORD *)(v20 + 4) >= 3u)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if ((*(_BYTE *)(v20 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v21 != 45)
        goto LABEL_11;
      v22 = *(unsigned __int8 *)(v21 + 1);
    }
    else
    {
      if (*(_WORD *)v21 != 45)
        goto LABEL_11;
      v22 = *(unsigned __int16 *)(v21 + 2);
    }
    if (v22 == 45)
      v19 = 1;
    else
      v19 = v18;
  }
LABEL_11:
  if (WebCore::PropertySetCSSStyleDeclaration::isExposed((uint64_t)this, v19)
    && (*(unsigned int (**)(WebCore::PropertySetCSSStyleDeclaration *))(*(_QWORD *)this + 192))(this))
  {
    v27 = *(_QWORD *)a4;
    if (*(_QWORD *)a4 && (v36 = *(_DWORD *)(v27 + 4)) != 0)
    {
      if (v36 != 9)
        goto LABEL_27;
      v37 = *(_QWORD *)(v27 + 8);
      if ((*(_BYTE *)(v27 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v37 & 0xDF) != 0x49
          || (*(_BYTE *)(v37 + 1) & 0xDF) != 0x4D
          || (*(_BYTE *)(v37 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(v37 + 3) & 0xDF) != 0x4F
          || (*(_BYTE *)(v37 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(v37 + 5) & 0xDF) != 0x54
          || (*(_BYTE *)(v37 + 6) & 0xDF) != 0x41
          || (*(_BYTE *)(v37 + 7) & 0xDF) != 0x4E)
        {
          goto LABEL_27;
        }
        v38 = *(unsigned __int8 *)(v37 + 8);
      }
      else
      {
        if ((*(_WORD *)v37 & 0xFFDF) != 0x49
          || (*(_WORD *)(v37 + 2) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v37 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(v37 + 6) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v37 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(v37 + 10) & 0xFFDF) != 0x54
          || (*(_WORD *)(v37 + 12) & 0xFFDF) != 0x41
          || (*(_WORD *)(v37 + 14) & 0xFFDF) != 0x4E)
        {
          goto LABEL_27;
        }
        v38 = *(unsigned __int16 *)(v37 + 16);
      }
      if ((v38 & 0xFFFFFFDF) != 0x54)
        goto LABEL_27;
      v28 = 1;
    }
    else
    {
      v28 = 0;
    }
    v29 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 3);
    v30 = *(void (**)(WTF::StringImpl **__return_ptr, WebCore::PropertySetCSSStyleDeclaration *))(*(_QWORD *)this + 184);
    if ((_DWORD)v19 == 1)
    {
      v30((WTF::StringImpl **)v44, this);
      v32 = WebCore::MutableStyleProperties::setCustomProperty(v29, a2, a3, (WTF::String *)v28, (uint64_t)v44, v39, v40);
      WebCore::CSSParserContext::~CSSParserContext((WebCore::CSSParserContext *)v44, v41);
    }
    else
    {
      v30(v42, this);
      v32 = WebCore::MutableStyleProperties::setProperty((uint64_t)v29, v19, (uint64_t)a3, v28, (uint64_t)v42, 0);
      v33 = v43;
      v43 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v31);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = v42[0];
      v42[0] = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v31);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    if (v32)
      v35 = 2;
    else
      v35 = 0;
    (*(void (**)(WebCore::PropertySetCSSStyleDeclaration *, uint64_t))(*(_QWORD *)this + 200))(this, v35);
    if (v32)
      v45[25] = 1;
  }
LABEL_27:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v45, v23, v24, v25, v26);
}

void WebCore::PropertySetCSSStyleDeclaration::removeProperty(WebCore::PropertySetCSSStyleDeclaration *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Element *v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  WTF::String *v20;
  __n128 v21;
  WebCore::MutableStyleProperties *v22;
  int v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _BYTE v27[32];

  v6 = (WebCore::Element *)(*(uint64_t (**)(WebCore::PropertySetCSSStyleDeclaration *))(*(_QWORD *)this + 32))(this);
  WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v27, v6, v7, v8, v9);
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  v13 = WebCore::cssPropertyID(v11, (const char *)v12);
  v14 = v13;
  v15 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_DWORD *)(v15 + 4) >= 3u)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v16 != 45)
        goto LABEL_13;
      v17 = *(unsigned __int8 *)(v16 + 1);
    }
    else
    {
      if (*(_WORD *)v16 != 45)
        goto LABEL_13;
      v17 = *(unsigned __int16 *)(v16 + 2);
    }
    if (v17 == 45)
      v14 = 1;
    else
      v14 = v13;
  }
LABEL_13:
  if ((WebCore::PropertySetCSSStyleDeclaration::isExposed((uint64_t)this, v14) & 1) != 0
    && ((*(uint64_t (**)(WebCore::PropertySetCSSStyleDeclaration *))(*(_QWORD *)this + 192))(this) & 1) != 0)
  {
    v26 = 0;
    v22 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 3);
    if ((_DWORD)v14 == 1)
      v23 = WebCore::MutableStyleProperties::removeCustomProperty(v22, a2, &v26, v20, v21);
    else
      v23 = WebCore::MutableStyleProperties::removeProperty((uint64_t)v22, (WTF::StringImpl *)v14, &v26, v20, v21);
    v24 = v23;
    if (v23)
      v25 = 2;
    else
      v25 = 0;
    (*(void (**)(WebCore::PropertySetCSSStyleDeclaration *, uint64_t))(*(_QWORD *)this + 200))(this, v25);
    if (v24)
      v27[25] = 1;
    *(_QWORD *)a3 = v26;
  }
  else
  {
    *(_QWORD *)a3 = 0;
  }
  *(_DWORD *)(a3 + 16) = 0;
  WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v27, v18, v19, v20, v21);
}

WTF::StringImpl *WebCore::PropertySetCSSStyleDeclaration::cssParserContext@<X0>(WebCore::PropertySetCSSStyleDeclaration *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unint64_t v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char **v13;
  char *v14;

  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + 4) & 7;
  v9 = 0;
  WTF::URL::invalidate((WTF::URL *)&v9);
  v5 = v9;
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v10;
  *(_OWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = v3;
  *(_DWORD *)(a2 + 49) = 0;
  *(_BYTE *)(a2 + 53) = 0;
  v6 = *(_DWORD *)(a2 + 54) & 0xC0000000;
  *(_DWORD *)(a2 + 54) = v6;
  if (v3 == 4)
  {
    *(_DWORD *)(a2 + 54) = v6 | 0x20000420;
    *(_BYTE *)(a2 + 53) = -63;
    *(_WORD *)(a2 + 51) = 0;
  }
  v7 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v7 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::MutableStyleProperties *WebCore::PropertySetCSSStyleDeclaration::copyProperties@<X0>(WebCore::PropertySetCSSStyleDeclaration *this@<X0>, WebCore::MutableStyleProperties **a2@<X8>)
{
  const WebCore::StyleProperties *v3;
  WebCore::MutableStyleProperties *v4;
  WebCore::MutableStyleProperties *result;

  v3 = (const WebCore::StyleProperties *)*((_QWORD *)this + 3);
  v4 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  result = WebCore::MutableStyleProperties::MutableStyleProperties(v4, v3);
  *a2 = result;
  return result;
}

void WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(WebCore::StyleRuleCSSStyleDeclaration *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;

  v3 = *((_QWORD *)this + 3);
  if (*(_DWORD *)v3 == 1)
  {
    v7 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      v9 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
      do
      {
        v10 = *v9;
        *v9 = 0;
        if (v10)
        {
          if (*v10 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
          else
            *v10 -= 2;
        }
        v9 += 2;
        v8 -= 16;
      }
      while (v8);
    }
    v11 = *(WTF **)(v3 + 16);
    if ((WTF *)(v3 + 32) != v11 && v11 != 0)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v11, a2);
    }
    v13 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    WTF::fastFree((WTF *)v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3399C18;
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v14 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)(v4 + 16 * i) != -1)
        {
          v16 = v4 + 16 * i;
          v17 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              v21 = v14;
              WTF::fastFree((WTF *)v17, a2);
              v14 = v21;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v20 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, a2);
      else
        --*(_DWORD *)v20;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::StyleRuleCSSStyleDeclaration::willMutate(WebCore::StyleRuleCSSStyleDeclaration *this)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  char v4;

  result = *((_QWORD *)this + 6);
  if (result)
  {
    v2 = result;
    while (1)
    {
      v3 = *(_BYTE *)(v2 + 12);
      v2 = *(_QWORD *)(v2 + 16);
      if ((v3 & 2) == 0)
        break;
      if (!v2)
        return 0;
    }
    if (!v2)
      return 0;
    do
    {
      v4 = *(_BYTE *)(result + 12);
      result = *(_QWORD *)(result + 16);
    }
    while ((v4 & 2) != 0 && result);
    WebCore::CSSStyleSheet::willMutateRules((WebCore::CSSStyleSheet *)result);
    return 1;
  }
  return result;
}

uint64_t WebCore::StyleRuleCSSStyleDeclaration::didMutate(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  if ((_DWORD)a2 == 2)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v7 = a1;
      *(_QWORD *)(a1 + 32) = 0;
      v8 = *(unsigned int *)(v2 - 4);
      if ((_DWORD)v8)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)(v2 + 16 * i) != -1)
          {
            v10 = v2 + 16 * i;
            v11 = *(unsigned int **)(v10 + 8);
            *(_QWORD *)(v10 + 8) = 0;
            if (v11)
            {
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
              {
                atomic_store(1u, v11);
                WTF::fastFree((WTF *)v11, a2);
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v2 - 16), a2);
      a1 = v7;
    }
  }
  v3 = *(_QWORD *)(a1 + 48);
  do
  {
    v4 = *(_BYTE *)(v3 + 12);
    v3 = *(_QWORD *)(v3 + 16);
  }
  while ((v4 & 2) != 0 && v3);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3398D20;
  v14 = v5;
  WebCore::CSSStyleSheet::forEachStyleScope(v3, &v14);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::StyleRuleCSSStyleDeclaration::parentStyleSheet(WebCore::StyleRuleCSSStyleDeclaration *this)
{
  uint64_t result;
  char v2;

  result = *((_QWORD *)this + 6);
  if (result)
  {
    do
    {
      v2 = *(_BYTE *)(result + 12);
      result = *(_QWORD *)(result + 16);
    }
    while ((v2 & 2) != 0 && result);
  }
  return result;
}

WTF::StringImpl *WebCore::StyleRuleCSSStyleDeclaration::cssParserContext@<X0>(WebCore::StyleRuleCSSStyleDeclaration *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  _DWORD *v6;
  __int128 v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char **v19;
  char *v20;

  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::StyleRuleCSSStyleDeclaration *))(*(_QWORD *)this
                                                                                                 + 168))(this);
  if (result && (v5 = *((_QWORD *)result + 3)) != 0)
  {
    v6 = *(_DWORD **)(v5 + 136);
    if (v6)
      *v6 += 2;
    *(_QWORD *)a2 = v6;
    v7 = *(_OWORD *)(v5 + 160);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(a2 + 24) = v7;
    v8 = *(_DWORD **)(v5 + 176);
    if (v8)
      *v8 += 2;
    v9 = *(_QWORD *)(v5 + 184);
    *(_QWORD *)(a2 + 40) = v8;
    *(_QWORD *)(a2 + 48) = v9;
    *(_WORD *)(a2 + 56) = *(_WORD *)(v5 + 192);
    *(_WORD *)(a2 + 49) = *((unsigned __int8 *)this + 44) | 0x100;
  }
  else
  {
    v10 = *(_DWORD *)(*((_QWORD *)this + 3) + 4) & 7;
    v15 = 0;
    WTF::URL::invalidate((WTF::URL *)&v15);
    v12 = v15;
    if (v15)
      *(_DWORD *)v15 += 2;
    *(_QWORD *)a2 = v12;
    *(_OWORD *)(a2 + 8) = v16;
    *(_OWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = v10;
    *(_DWORD *)(a2 + 49) = 0;
    *(_BYTE *)(a2 + 53) = 0;
    v13 = *(_DWORD *)(a2 + 54) & 0xC0000000;
    *(_DWORD *)(a2 + 54) = v13;
    if (v10 == 4)
    {
      *(_DWORD *)(a2 + 54) = v13 | 0x20000420;
      *(_BYTE *)(a2 + 53) = -63;
      *(_WORD *)(a2 + 51) = 0;
    }
    v14 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v14 != -1)
    {
      v20 = &v18;
      v19 = &v20;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::StyleRuleCSSStyleDeclaration::reattach(uint64_t this, WebCore::MutableStyleProperties *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v11;

  v3 = this;
  v4 = *(_QWORD *)(this + 24);
  if (*(_DWORD *)v4 == 1)
  {
    v5 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
      do
      {
        v8 = *v7;
        *v7 = 0;
        if (v8)
        {
          if (*v8 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
          else
            *v8 -= 2;
        }
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    v9 = *(WTF **)(v4 + 16);
    if ((WTF *)(v4 + 32) != v9 && v9 != 0)
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      WTF::fastFree(v9, a2);
    }
    v11 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    this = WTF::fastFree((WTF *)v4, a2);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  *(_QWORD *)(v3 + 24) = a2;
  ++*(_DWORD *)a2;
  return this;
}

WTF *WebCore::ComputedStyleExtractor::adjustSVGPaint(WTF *result, unsigned int a2, WTF::StringImpl *a3, int **a4)
{
  WTF *v6;
  uint64_t v8;
  void *v9;
  char v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  WTF *v14;
  int *v15;
  int *v16;
  WTF *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *v23;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  WTF *v33;
  int v34;
  WTF *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  WTF *v39;
  _BYTE *v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  int v44;
  unsigned int v45;
  _BYTE v46[32];
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  _BYTE v50[32];

  v6 = result;
  if (a2 < 3)
  {
    if (a2 == 1)
    {
      dword_1ECE8BC48 += 2;
      *(_QWORD *)result = &WebCore::staticCSSValuePool[3112];
    }
    else
    {
      v16 = *a4;
      *a4 = 0;
      *(_QWORD *)result = v16;
    }
    return result;
  }
  v48 = (WTF *)v50;
  v49 = 4;
  if (a3)
    *(_DWORD *)a3 += 2;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 2;
  v10 = *(_BYTE *)(v8 + 6);
  *(_WORD *)(v8 + 4) = 21;
  *(_BYTE *)(v8 + 6) = v10 & 0xFC;
  *(_QWORD *)(v8 + 8) = a3;
  if (a3)
    *(_DWORD *)a3 += 2;
  v11 = HIDWORD(v49);
  if (HIDWORD(v49) == (_DWORD)v49)
  {
    v42 = v8;
    v30 = HIDWORD(v49) + ((unint64_t)HIDWORD(v49) >> 2);
    if (v30 >= 0x10)
      v31 = v30 + 1;
    else
      v31 = 16;
    if (v31 <= (unint64_t)HIDWORD(v49) + 1)
      v32 = HIDWORD(v49) + 1;
    else
      v32 = v31;
    v33 = v48;
    if (v32 < 5)
    {
      v48 = (WTF *)v50;
      LODWORD(v49) = 4;
      v35 = (WTF *)v50;
    }
    else
    {
      if (v32 >> 29)
        goto LABEL_84;
      v34 = v32;
      v35 = (WTF *)WTF::fastMalloc((WTF *)(8 * v32));
      LODWORD(v49) = v34;
      v48 = v35;
    }
    memcpy(v35, v33, 8 * HIDWORD(v49));
    if (v50 != (_BYTE *)v33 && v33)
    {
      if (v48 == v33)
      {
        v48 = 0;
        LODWORD(v49) = 0;
      }
      WTF::fastFree(v33, v9);
    }
    v11 = HIDWORD(v49);
    v12 = (uint64_t *)((char *)v48 + 8 * HIDWORD(v49));
    v8 = v42;
  }
  else
  {
    v12 = (uint64_t *)((char *)v48 + 8 * HIDWORD(v49));
  }
  *v12 = v8;
  HIDWORD(v49) = v11 + 1;
  if (a3)
  {
    if (*(_DWORD *)a3 == 2)
      WTF::StringImpl::destroy(a3, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)a3 -= 2;
  }
  if (a2 == 3)
  {
    dword_1ECE8BC48 += 2;
    v13 = HIDWORD(v49);
    if (HIDWORD(v49) != (_DWORD)v49)
    {
      v14 = v48;
      v15 = &WebCore::staticCSSValuePool[3112];
LABEL_21:
      *((_QWORD *)v14 + v13) = v15;
LABEL_22:
      HIDWORD(v49) = v13 + 1;
      goto LABEL_23;
    }
    v36 = HIDWORD(v49) + ((unint64_t)HIDWORD(v49) >> 2);
    if (v36 >= 0x10)
      v37 = v36 + 1;
    else
      v37 = 16;
    if (v37 <= (unint64_t)HIDWORD(v49) + 1)
      v38 = HIDWORD(v49) + 1;
    else
      v38 = v37;
    v39 = v48;
    if (v38 < 5)
    {
      v48 = (WTF *)v50;
      LODWORD(v49) = 4;
      v40 = v50;
LABEL_72:
      memcpy(v40, v39, 8 * HIDWORD(v49));
      if (v50 != (_BYTE *)v39 && v39)
      {
        if (v48 == v39)
        {
          v48 = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree(v39, v41);
      }
      LODWORD(v13) = HIDWORD(v49);
      *((_QWORD *)v48 + HIDWORD(v49)) = &WebCore::staticCSSValuePool[3112];
      goto LABEL_22;
    }
    if (!(v38 >> 29))
    {
      v40 = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v38));
      LODWORD(v49) = v38;
      v48 = (WTF *)v40;
      goto LABEL_72;
    }
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x19580C4F8);
  }
  if ((a2 & 0xFE) == 4)
  {
    v13 = HIDWORD(v49);
    if (HIDWORD(v49) == (_DWORD)v49)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((void **)&v48, HIDWORD(v49) + 1);
      v13 = HIDWORD(v49);
    }
    v14 = v48;
    v15 = *a4;
    **a4 += 2;
    goto LABEL_21;
  }
LABEL_23:
  v43 = (WTF *)v46;
  v44 = 4;
  v17 = v48;
  if (v48 == (WTF *)v50)
  {
    v18 = HIDWORD(v49);
    memcpy(v46, v50, 8 * HIDWORD(v49));
  }
  else
  {
    v48 = (WTF *)v50;
    v43 = v17;
    v29 = v49;
    v18 = HIDWORD(v49);
    LODWORD(v49) = 4;
    v44 = v29;
  }
  HIDWORD(v49) = 0;
  v45 = v18;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v43, &v47);
  *(_QWORD *)v6 = v47;
  if (v45)
  {
    v20 = v43;
    v21 = 8 * v45;
    do
    {
      v22 = *(_DWORD **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*v22 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v19);
        else
          *v22 -= 2;
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  v23 = v43;
  if (v46 != (_BYTE *)v43 && v43 != 0)
  {
    v43 = 0;
    v44 = 0;
    WTF::fastFree(v23, v19);
  }
  if (HIDWORD(v49))
  {
    v25 = v48;
    v26 = 8 * HIDWORD(v49);
    do
    {
      v27 = *(_DWORD **)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        if (*v27 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v19);
        else
          *v27 -= 2;
      }
      v25 = (WTF *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  result = v48;
  if (v50 != (_BYTE *)v48 && v48 != 0)
  {
    v48 = 0;
    LODWORD(v49) = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

int *WebCore::ComputedStyleExtractor::svgPropertyValue@<X0>(int **a1@<X0>, int a2@<W1>, WTF *a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::CSSPrimitiveValue *a14)
{
  WTF *v14;
  WTF *v15;
  int *result;
  WTF::StringImpl *v19;
  int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unsigned int v50;
  double v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  char v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  WebCore::CSSPrimitiveValue *v69;
  int v70;
  uint64_t v72;
  WebCore::CSSPrimitiveValue *v73;
  double v74;
  double v75;
  uint64_t v77;
  char v78;
  int *v79;
  int v80;
  uint64_t *v81;
  WebCore::CSSPrimitiveValue *v82;
  unsigned __int8 *v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  WTF *v89;
  WTF *v90;
  WebCore::CSSPrimitiveValue *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  WTF *v97;
  WTF *v98;
  WTF *v99;
  int v100;
  unsigned int v101;
  WTF::StringImpl *v102;
  WebCore::CSSPrimitiveValue *v103;
  WTF *v104;
  uint64_t v105;
  _DWORD *v106;
  WTF *v107;
  WTF *v109;
  uint64_t v110;
  _DWORD *v111;
  WTF *v112;
  int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int *v122;
  int *v123;
  uint64_t v124;
  WTF *v125;
  int v126;
  unsigned int v127;
  _BYTE v128[32];
  WTF *v129;
  WTF::StringImpl *v130;
  WebCore::CSSPrimitiveValue **v131;
  WebCore::CSSPrimitiveValue **v132;
  WebCore::CSSPrimitiveValue *v133[2];

  v15 = (WTF *)a1;
  result = *a1;
  if (!result)
    goto LABEL_79;
  LOBYTE(v129) = 0;
  LOBYTE(v131) = 0;
  result = (int *)(*(uint64_t (**)(int *, WTF **))(*(_QWORD *)result + 264))(result, &v129);
  v20 = result;
  if (!(_BYTE)v131)
    goto LABEL_6;
  result = (int *)v130;
  v130 = 0;
  if (!result)
    goto LABEL_6;
  if (*result != 2)
  {
    *result -= 2;
LABEL_6:
    if (v20)
      goto LABEL_7;
LABEL_79:
    *(_QWORD *)a3 = 0;
    return result;
  }
  result = (int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
  if (!v20)
    goto LABEL_79;
LABEL_7:
  v21 = *((_QWORD *)v20 + 7);
  if (a2 <= 150)
  {
    if (a2 <= 109)
    {
      switch(a2)
      {
        case 'Q':
          v23 = (*(unsigned __int16 *)(v21 + 8) >> 11) & 3;
          if (v23 == 3)
            goto LABEL_99;
          v24 = &unk_1969EED20;
          break;
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
          goto LABEL_79;
        case 'W':
          v26 = (*(_WORD *)(v21 + 4) & 4) == 0;
LABEL_64:
          v27 = 11520;
          v28 = 11504;
          goto LABEL_65;
        case 'X':
          v23 = *(unsigned __int8 *)(v21 + 4) >> 6;
          goto LABEL_33;
        case 'Y':
          v23 = *(_BYTE *)(v21 + 5) & 3;
LABEL_33:
          if (v23 == 3)
            goto LABEL_99;
          v24 = &unk_1969EEC18;
          break;
        default:
          if (a2 != 44)
          {
            if (a2 == 68)
              __asm { BR              X11 }
            goto LABEL_79;
          }
          v23 = *(_BYTE *)(v21 + 8) & 0xF;
          if (v23 > 0xA)
            goto LABEL_99;
          v24 = &unk_1969EEC50;
          break;
      }
LABEL_98:
      v25 = v24[v23];
LABEL_100:
      v46 = &WebCore::staticCSSValuePool[4 * v25];
LABEL_101:
      v45 = v46 + 3088;
      v46[3088] += 2;
LABEL_102:
      *(_QWORD *)a3 = v45;
      return result;
    }
    switch(a2)
    {
      case 110:
        v22 = *(unsigned __int8 *)(v21 + 8);
        if (v22 > 0xBF)
          goto LABEL_99;
        v23 = v22 >> 4;
        v24 = &unk_1969EECA8;
        goto LABEL_98;
      case 114:
        v47 = *(_QWORD *)(v21 + 16);
        v15 = (WTF *)*(unsigned __int8 *)(v47 + 56);
        v133[0] = (WebCore::CSSPrimitiveValue *)(*((_QWORD *)v20 + 4) + 328);
        v129 = (WTF *)v133;
        v130 = (WTF::StringImpl *)v133;
        v131 = v133;
        v132 = v133;
        v48 = *(unsigned int *)(v47 + 16);
        if ((_DWORD)v48 == -1)
          goto LABEL_208;
        v125 = (WTF *)&v129;
        ((void (*)(uint64_t *__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v48])(&v124, &v125, v47 + 8);
        {
          WebCore::CSSValuePool::singleton(void)::pool = 0;
          unk_1ECE88B90 = 0;
          qword_1ECE88B98 = 0;
        }
        WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v124, &v123);
        if ((v124 & 0x8000000000000) != 0)
        {
          v118 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFLL);
          do
          {
            v119 = __ldaxr(v118);
            v120 = v119 - 1;
          }
          while (__stlxr(v120, v118));
          if (!v120)
          {
            atomic_store(1u, v118);
            WTF::fastFree((WTF *)v118, v49);
          }
        }
        WebCore::ComputedStyleExtractor::adjustSVGPaint(a3, v15, *(WTF::StringImpl **)(v47 + 40), &v123);
        result = v123;
        v123 = 0;
        if (result)
          goto LABEL_73;
        return result;
      case 115:
        v42 = *(_QWORD *)(v21 + 16);
        goto LABEL_89;
      case 116:
        v26 = (*(_WORD *)(v21 + 4) & 8) == 0;
        goto LABEL_64;
      case 124:
        v54 = *(_QWORD *)(v21 + 56);
        v133[0] = (WebCore::CSSPrimitiveValue *)(*((_QWORD *)v20 + 4) + 328);
        v129 = (WTF *)v133;
        v130 = (WTF::StringImpl *)v133;
        v131 = v133;
        v132 = v133;
        v55 = *(unsigned int *)(v54 + 16);
        if ((_DWORD)v55 == -1)
          goto LABEL_208;
        v125 = (WTF *)&v129;
        ((void (*)(uint64_t *__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v55])(&v124, &v125, v54 + 8);
        {
          WebCore::CSSValuePool::singleton(void)::pool = 0;
          unk_1ECE88B90 = 0;
          qword_1ECE88B98 = 0;
        }
        result = (int *)WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v124, (int **)&v129);
        if ((v124 & 0x8000000000000) == 0)
          goto LABEL_87;
        result = (int *)(v124 & 0xFFFFFFFFFFFFLL);
        do
        {
          v121 = __ldaxr((unsigned int *)result);
          v34 = --v121 == 0;
        }
        while (__stlxr(v121, (unsigned int *)result));
        break;
      case 125:
        v42 = *(_QWORD *)(v21 + 56);
        goto LABEL_89;
      case 127:
        v53 = *(unsigned __int16 *)(v21 + 4);
        if (((v53 >> 10) & 7) <= 4)
          __asm { BR              X10 }
        __break(0xC471u);
        JUMPOUT(0x19580D3DCLL);
      case 128:
        v50 = *(unsigned __int16 *)(v21 + 4);
        v51 = 0.0;
        switch(v50 >> 13)
        {
          case 0u:
            goto LABEL_106;
          case 1u:
            v51 = 90.0;
            goto LABEL_106;
          case 2u:
            v51 = 180.0;
            goto LABEL_106;
          case 3u:
            v51 = 270.0;
LABEL_106:
            result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
            *result = 2;
            v58 = *((_BYTE *)result + 6);
            v59 = 12;
            goto LABEL_107;
          case 4u:
            if ((v50 & 0xE000) != 0x8000)
              goto LABEL_79;
            v52 = &WebCore::staticCSSValuePool[4664];
            *v52 += 2;
            *(_QWORD *)a3 = v52;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19580D3BCLL);
        }
        return result;
      default:
        goto LABEL_79;
    }
    goto LABEL_222;
  }
  if (a2 > 226)
  {
    switch(a2)
    {
      case 227:
        v25 = qword_1969EEC30[*(_WORD *)(v21 + 4) & 3];
        goto LABEL_100;
      case 228:
      case 229:
      case 230:
      case 231:
      case 235:
      case 237:
      case 238:
      case 239:
      case 240:
        goto LABEL_79;
      case 232:
        v39 = *(_QWORD *)(v21 + 48);
        v133[0] = (WebCore::CSSPrimitiveValue *)(*((_QWORD *)v20 + 4) + 328);
        v129 = (WTF *)v133;
        v130 = (WTF::StringImpl *)v133;
        v131 = v133;
        v132 = v133;
        v40 = *(unsigned int *)(v39 + 16);
        if ((_DWORD)v40 == -1)
          goto LABEL_208;
        v125 = (WTF *)&v129;
        ((void (*)(uint64_t *__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v40])(&v124, &v125, v39 + 8);
        {
          WebCore::CSSValuePool::singleton(void)::pool = 0;
          unk_1ECE88B90 = 0;
          qword_1ECE88B98 = 0;
        }
        result = (int *)WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v124, (int **)&v129);
        if ((v124 & 0x8000000000000) == 0)
          goto LABEL_87;
        result = (int *)(v124 & 0xFFFFFFFFFFFFLL);
        do
        {
          v41 = __ldaxr((unsigned int *)result);
          v34 = --v41 == 0;
        }
        while (__stlxr(v41, (unsigned int *)result));
        goto LABEL_222;
      case 233:
        v42 = *(_QWORD *)(v21 + 48);
        goto LABEL_89;
      case 234:
        v35 = *(_QWORD *)(v21 + 24);
        v15 = (WTF *)*(unsigned __int8 *)(v35 + 80);
        v133[0] = (WebCore::CSSPrimitiveValue *)(*((_QWORD *)v20 + 4) + 328);
        v129 = (WTF *)v133;
        v130 = (WTF::StringImpl *)v133;
        v131 = v133;
        v132 = v133;
        v36 = *(unsigned int *)(v35 + 16);
        if ((_DWORD)v36 == -1)
          goto LABEL_208;
        v125 = (WTF *)&v129;
        ((void (*)(uint64_t *__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v36])(&v124, &v125, v35 + 8);
        {
          WebCore::CSSValuePool::singleton(void)::pool = 0;
          unk_1ECE88B90 = 0;
          qword_1ECE88B98 = 0;
        }
        WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v124, &v122);
        if ((v124 & 0x8000000000000) != 0)
        {
          v115 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFLL);
          do
          {
            v116 = __ldaxr(v115);
            v117 = v116 - 1;
          }
          while (__stlxr(v117, v115));
          if (!v117)
          {
            atomic_store(1u, v115);
            WTF::fastFree((WTF *)v115, v37);
          }
        }
        WebCore::ComputedStyleExtractor::adjustSVGPaint(a3, v15, *(WTF::StringImpl **)(v35 + 40), &v122);
        result = v122;
        v122 = 0;
        if (result)
        {
LABEL_73:
          if (*result == 2)
            return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v38);
          else
            *result -= 2;
        }
        return result;
      case 236:
        v43 = *(_QWORD *)(v21 + 24);
        v44 = *(unsigned int *)(v43 + 76);
        if (!(_DWORD)v44)
        {
          v45 = &WebCore::staticCSSValuePool[3112];
          dword_1ECE8BC48 += 2;
          goto LABEL_102;
        }
        if (v44 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19580D46CLL);
        }
        v60 = 8 * v44;
        v61 = WTF::fastMalloc((WTF *)(8 * v44));
        v15 = (WTF *)v61;
        v62 = *(unsigned int *)(v43 + 76);
        if ((_DWORD)v62)
        {
          v63 = *(uint64_t **)(v43 + 64);
          v64 = 8 * v62;
          v65 = (_QWORD *)v61;
          do
          {
            v66 = *v63++;
            *v65++ = v66;
            v64 -= 8;
          }
          while (v64);
        }
        v67 = 0;
        v129 = (WTF *)&v131;
        v130 = (WTF::StringImpl *)4;
        break;
      case 241:
        v42 = *(_QWORD *)(v21 + 24);
LABEL_89:
        v56 = *(float *)(v42 + 4);
        v51 = v56;
        if ((int)v56 <= 0xFF && *(_QWORD *)&v51 == COERCE__INT64((double)(int)v56))
        {
          result = &WebCore::staticCSSValuePool[4 * (int)v56 + 2064];
          *result += 2;
        }
        else
        {
          result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *result = 2;
          v58 = *((_BYTE *)result + 6);
          v59 = 1;
LABEL_107:
          *((_WORD *)result + 2) = v59;
          *((_BYTE *)result + 6) = v58 & 0xFC;
          *((double *)result + 1) = v51;
        }
        *(_QWORD *)a3 = result;
        return result;
      default:
        if (a2 != 251)
        {
          if (a2 != 287)
            goto LABEL_79;
          v26 = (*(_WORD *)(v21 + 8) & 0x400) == 0;
          v27 = 18640;
          v28 = 96;
          goto LABEL_65;
        }
        v23 = (*(unsigned __int8 *)(v21 + 4) >> 4) & 3;
        if (v23 != 3)
        {
          v24 = &unk_1969EED08;
          goto LABEL_98;
        }
LABEL_99:
        v25 = 0;
        goto LABEL_100;
    }
    while (1)
    {
      WebCore::SVGLengthValue::toCSSPrimitiveValue((WTF *)((char *)v15 + v67), 0, v133);
      if (!WebCore::CSSPrimitiveValue::isLength(v133[0]))
      {
LABEL_124:
        v72 = HIDWORD(v130);
        if (HIDWORD(v130) == (_DWORD)v130)
        {
          v85 = v67;
          v86 = HIDWORD(v130) + ((unint64_t)HIDWORD(v130) >> 2);
          if (v86 >= 0x10)
            v87 = v86 + 1;
          else
            v87 = 16;
          if (v87 <= (unint64_t)HIDWORD(v130) + 1)
            v88 = HIDWORD(v130) + 1;
          else
            v88 = v87;
          v89 = v129;
          if (v88 < 5)
          {
            v90 = (WTF *)&v131;
            v129 = (WTF *)&v131;
            LODWORD(v130) = 4;
          }
          else
          {
            if (v88 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19580D45CLL);
            }
            v90 = (WTF *)WTF::fastMalloc((WTF *)(8 * v88));
            LODWORD(v130) = v88;
            v129 = v90;
          }
          memcpy(v90, v89, 8 * v72);
          if (&v131 != (WebCore::CSSPrimitiveValue ***)v89 && v89)
          {
            if (v129 == v89)
            {
              v129 = 0;
              LODWORD(v130) = 0;
            }
            WTF::fastFree(v89, v68);
          }
          LODWORD(v72) = HIDWORD(v130);
          v91 = v133[0];
          v133[0] = 0;
          *((_QWORD *)v129 + HIDWORD(v130)) = v91;
          v67 = v85;
        }
        else
        {
          v73 = v133[0];
          v133[0] = 0;
          *((_QWORD *)v129 + HIDWORD(v130)) = v73;
        }
        goto LABEL_139;
      }
      v69 = v133[0];
      v70 = *((_WORD *)v133[0] + 2) & 0x7F;
      if ((v70 - 63) > 0x11 || ((1 << (v70 - 63)) & 0x34001) == 0)
      {
        if (v70 == 73)
        {
          v83 = *(unsigned __int8 **)(*((_QWORD *)v133[0] + 1) + 8);
          v84 = v83[12];
          if (v84 != 1 && (v84 - 5) > 3)
            goto LABEL_127;
          v70 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v83 + 72))(*(_QWORD *)(*((_QWORD *)v133[0] + 1) + 8));
        }
        if (v70 == 6)
          goto LABEL_124;
        v69 = v133[0];
      }
LABEL_127:
      v74 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)v69, 6u));
      if ((_BYTE)v68)
        v75 = v74;
      else
        v75 = 0.0;
      if ((int)v75 <= 0xFF && *(_QWORD *)&v75 == COERCE__INT64((double)(int)v75))
      {
        v79 = &WebCore::staticCSSValuePool[4 * (int)v75];
        v80 = v79[16];
        v77 = (uint64_t)(v79 + 16);
        *(_DWORD *)v77 = v80 + 2;
      }
      else
      {
        v77 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v77 = 2;
        v78 = *(_BYTE *)(v77 + 6);
        *(_WORD *)(v77 + 4) = 6;
        *(_BYTE *)(v77 + 6) = v78 & 0xFC;
        *(double *)(v77 + 8) = v75;
      }
      v72 = HIDWORD(v130);
      if (HIDWORD(v130) == (_DWORD)v130)
      {
        v92 = v67;
        v93 = v77;
        v94 = HIDWORD(v130) + ((unint64_t)HIDWORD(v130) >> 2);
        if (v94 >= 0x10)
          v95 = v94 + 1;
        else
          v95 = 16;
        if (v95 <= (unint64_t)HIDWORD(v130) + 1)
          v96 = HIDWORD(v130) + 1;
        else
          v96 = v95;
        v97 = v129;
        if (v96 < 5)
        {
          v98 = (WTF *)&v131;
          v129 = (WTF *)&v131;
          LODWORD(v130) = 4;
        }
        else
        {
          if (v96 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19580D464);
          }
          v98 = (WTF *)WTF::fastMalloc((WTF *)(8 * v96));
          LODWORD(v130) = v96;
          v129 = v98;
        }
        memcpy(v98, v97, 8 * v72);
        if (&v131 != (WebCore::CSSPrimitiveValue ***)v97 && v97)
        {
          if (v129 == v97)
          {
            v129 = 0;
            LODWORD(v130) = 0;
          }
          WTF::fastFree(v97, v68);
        }
        LODWORD(v72) = HIDWORD(v130);
        v81 = (uint64_t *)((char *)v129 + 8 * HIDWORD(v130));
        v77 = v93;
        v67 = v92;
      }
      else
      {
        v81 = (uint64_t *)((char *)v129 + 8 * HIDWORD(v130));
      }
      *v81 = v77;
LABEL_139:
      HIDWORD(v130) = v72 + 1;
      v82 = v133[0];
      v133[0] = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v82, (WTF::StringImpl *)v68);
        else
          *(_DWORD *)v82 -= 2;
      }
      v67 += 8;
      if (v60 == v67)
      {
        v99 = v129;
        v20 = (int *)v128;
        v125 = (WTF *)v128;
        v100 = 4;
        v126 = 4;
        v14 = (WTF *)&v131;
        if (v129 == (WTF *)&v131)
        {
          v101 = HIDWORD(v130);
          memcpy(v128, &v131, 8 * HIDWORD(v130));
        }
        else
        {
LABEL_209:
          v129 = v14;
          v125 = v99;
          v114 = (int)v130;
          v101 = HIDWORD(v130);
          LODWORD(v130) = v100;
          v126 = v114;
        }
        HIDWORD(v130) = 0;
        v127 = v101;
        WebCore::CSSValueList::createCommaSeparated((uint64_t)&v125, (uint64_t *)v133);
        v103 = v133[0];
        if (v127)
        {
          v104 = v125;
          v105 = 8 * v127;
          do
          {
            v106 = *(_DWORD **)v104;
            *(_QWORD *)v104 = 0;
            if (v106)
            {
              if (*v106 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v106, v102);
              else
                *v106 -= 2;
            }
            v104 = (WTF *)((char *)v104 + 8);
            v105 -= 8;
          }
          while (v105);
        }
        v107 = v125;
        if (v20 != (int *)v125 && v125 != 0)
        {
          v125 = 0;
          v126 = 0;
          WTF::fastFree(v107, v102);
        }
        if (HIDWORD(v130))
        {
          v109 = v129;
          v110 = 8 * HIDWORD(v130);
          do
          {
            v111 = *(_DWORD **)v109;
            *(_QWORD *)v109 = 0;
            if (v111)
            {
              if (*v111 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v111, v102);
              else
                *v111 -= 2;
            }
            v109 = (WTF *)((char *)v109 + 8);
            v110 -= 8;
          }
          while (v110);
        }
        v112 = v129;
        if (v14 != v129 && v129 != 0)
        {
          v129 = 0;
          LODWORD(v130) = 0;
          WTF::fastFree(v112, v102);
        }
        *(_QWORD *)a3 = v103;
        return (int *)WTF::fastFree(v15, v102);
      }
    }
  }
  switch(a2)
  {
    case 151:
      v129 = *(WTF **)(*(_QWORD *)(v21 + 32) + 4);
      return WebCore::SVGLengthValue::toCSSPrimitiveValue((WebCore::SVGLengthValue *)&v129, 0, a3);
    case 152:
      v30 = *(_QWORD *)(v21 + 56);
      v133[0] = (WebCore::CSSPrimitiveValue *)(*((_QWORD *)v20 + 4) + 328);
      v129 = (WTF *)v133;
      v130 = (WTF::StringImpl *)v133;
      v131 = v133;
      v132 = v133;
      v31 = *(unsigned int *)(v30 + 32);
      if ((_DWORD)v31 == -1)
      {
LABEL_208:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_209;
      }
      v125 = (WTF *)&v129;
      ((void (*)(uint64_t *__return_ptr, WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v31])(&v124, &v125, v30 + 24);
      {
        WebCore::CSSValuePool::singleton(void)::pool = 0;
        unk_1ECE88B90 = 0;
        qword_1ECE88B98 = 0;
      }
      result = (int *)WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v124, (int **)&v129);
      if ((v124 & 0x8000000000000) == 0)
        goto LABEL_87;
      result = (int *)(v124 & 0xFFFFFFFFFFFFLL);
      do
      {
        v33 = __ldaxr((unsigned int *)result);
        v34 = --v33 == 0;
      }
      while (__stlxr(v33, (unsigned int *)result));
      break;
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
      goto LABEL_79;
    case 159:
      v29 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 40) + 24);
      return (int *)WebCore::svgMarkerValue((uint64_t *)a3, v29, *(const WebCore::Element **)v15);
    case 160:
      v29 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 40) + 16);
      return (int *)WebCore::svgMarkerValue((uint64_t *)a3, v29, *(const WebCore::Element **)v15);
    case 161:
      v29 = (WTF::StringImpl **)(*(_QWORD *)(v21 + 40) + 8);
      return (int *)WebCore::svgMarkerValue((uint64_t *)a3, v29, *(const WebCore::Element **)v15);
    default:
      if (a2 != 171)
        goto LABEL_79;
      v26 = (*(_WORD *)(v21 + 8) & 0x2000) == 0;
      v27 = 2016;
      v28 = 15936;
LABEL_65:
      if (v26)
        v27 = v28;
      v46 = (int *)((char *)WebCore::staticCSSValuePool + v27);
      goto LABEL_101;
  }
LABEL_222:
  if (v34)
  {
    atomic_store(1u, (unsigned int *)result);
    result = (int *)WTF::fastFree((WTF *)result, v32);
  }
LABEL_87:
  *(_QWORD *)a3 = v129;
  return result;
}

uint64_t *WebCore::svgMarkerValue(uint64_t *this, WTF::StringImpl **a2, const WebCore::Element *a3)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char v17;
  int v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v3 = this;
  v4 = *a2;
  if (!*a2 || !*((_DWORD *)v4 + 1))
  {
    dword_1ECE8BC48 += 2;
    *this = (uint64_t)&WebCore::staticCSSValuePool[3112];
    return this;
  }
  *(_DWORD *)v4 += 2;
  v21 = v4;
  MEMORY[0x19AEA52D4](&v19, &v21, 0);
  v8 = v21;
  v21 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (a3 == 0) | v20;
  v10 = v19;
  v19 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v7);
      if ((v9 & 1) != 0)
        goto LABEL_12;
      goto LABEL_19;
    }
    *(_DWORD *)v10 -= 2;
  }
  if ((v9 & 1) != 0)
  {
LABEL_12:
    v11 = *a2;
    if (v11)
      *(_DWORD *)v11 += 2;
    this = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)this = 2;
    v13 = *((_BYTE *)this + 6);
    *((_WORD *)this + 2) = 21;
    *((_BYTE *)this + 6) = v13 & 0xFC;
    this[1] = (uint64_t)v11;
    if (v11)
    {
      v14 = *(_DWORD *)v11;
      *(_DWORD *)v11 += 2;
      *v3 = (uint64_t)this;
      if (v14)
      {
        *(_DWORD *)v11 = v14;
        return this;
      }
      this = (uint64_t *)v11;
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
    }
    *v3 = (uint64_t)this;
    return this;
  }
LABEL_19:
  MEMORY[0x19AEA52F8](&v19, *(_QWORD *)(*((_QWORD *)a3 + 5) + 8) + 848, a2, 0);
  v15 = v19;
  if (v19)
    *(_DWORD *)v19 += 2;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 2;
  v17 = *(_BYTE *)(v16 + 6);
  *(_WORD *)(v16 + 4) = 21;
  *(_BYTE *)(v16 + 6) = v17 & 0xFC;
  *(_QWORD *)(v16 + 8) = v15;
  if (v15)
  {
    v18 = *(_DWORD *)v15;
    *(_DWORD *)v15 += 2;
    *v3 = v16;
    if (v18)
      *(_DWORD *)v15 = v18;
    else
      WTF::StringImpl::destroy(v15, v12);
  }
  else
  {
    *v3 = v16;
  }
  this = (uint64_t *)v19;
  v19 = 0;
  if (this)
  {
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
      return this;
    }
    return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
  }
  return this;
}

uint64_t WebCore::SelectorChecker::match(WebCore::SelectorChecker *this, const WebCore::CSSSelector *a2, const WebCore::Element *a3, WebCore::SelectorChecker::CheckingContext *a4, __n128 a5)
{
  WTF::StringImpl *v5;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t matched;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v16;
  int v17;
  unsigned int v19;
  unsigned int *v20[2];
  BOOL v21;
  const WebCore::CSSSelector *v22;
  int v23;
  WTF::StringImpl *v24;
  char v25;
  int v26;
  int v27;

  v8 = *((_DWORD *)a4 + 1);
  if (v8)
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
    v9 = *(unsigned __int8 *)a4;
    v10 = v8 & 0xFFFFFF00;
    if (v5)
      *(_DWORD *)v5 += 4;
  }
  else
  {
    v10 = 0;
    v9 = *(unsigned __int8 *)a4;
  }
  v20[0] = (unsigned int *)a2;
  v20[1] = (unsigned int *)a3;
  v21 = v9 != 3;
  v22 = a2;
  LOBYTE(v23) = 0;
  v25 = 0;
  if (!v8)
    goto LABEL_39;
  v23 = v10 | v8;
  if (!v5)
  {
    v24 = 0;
    v25 = 1;
LABEL_39:
    a5.n128_u64[0] = 16777473;
    v26 = 16777473;
    v27 = 0;
    goto LABEL_8;
  }
  *(_DWORD *)v5 += 2;
  v24 = v5;
  v25 = 1;
  a5.n128_u64[0] = 16777473;
  v26 = 16777473;
  v27 = 0;
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, a2);
  else
    *(_DWORD *)v5 -= 2;
LABEL_8:
  if (*((_BYTE *)a4 + 57) == 127)
    HIBYTE(v27) = 1;
  v19 = 0;
  matched = WebCore::SelectorChecker::matchRecursively(this, a4, v20, &v19, a5);
  v13 = 0;
  if (!(_DWORD)matched)
  {
    v16 = *((_DWORD *)a4 + 1);
    if (v16)
    {
      v13 = (v19 >> v16) & 1;
    }
    else if (v19)
    {
      v17 = *(unsigned __int8 *)a4;
      if ((v19 & 0x1FFFE) != 0 && !*(_BYTE *)a4)
        *((_DWORD *)a4 + 54) = v19 & 0x1FFFE;
      v13 = HIDWORD(matched) == 1 || v17 == 2;
    }
    else
    {
      v13 = 1;
    }
  }
  if (v25)
  {
    v14 = v24;
    v24 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  if (v8 && v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v12);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v13;
}

void WebCore::SelectorChecker::LocalContext::~LocalContext(WebCore::SelectorChecker::LocalContext *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*((_BYTE *)this + 48))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
}

uint64_t WebCore::addStyleRelation(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (!*(_BYTE *)result)
  {
    v4 = *(unsigned int *)(result + 84);
    if (a3 != 3)
      goto LABEL_3;
    if (!(_DWORD)v4)
      goto LABEL_3;
    v5 = *(_QWORD *)(result + 72);
    v6 = v5 + 16 * (v4 - 1);
    if (*(_DWORD *)(v6 + 8) != 3)
      goto LABEL_3;
    v7 = a2;
    do
      v7 = *(_QWORD *)(v7 + 56);
    while (v7 && (*(_WORD *)(v7 + 28) & 8) == 0);
    if (*(_QWORD *)v6 == v7)
    {
      ++*(_DWORD *)(v5 + 16 * (v4 - 1) + 12);
      *(_QWORD *)v6 = a2;
    }
    else
    {
LABEL_3:
      *(_QWORD *)&v8 = a2;
      *((_QWORD *)&v8 + 1) = __PAIR64__(a4, a3);
      if ((_DWORD)v4 == *(_DWORD *)(result + 80))
      {
        return WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::Relation>(result + 72, (unint64_t)&v8);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)(result + 72) + 16 * v4) = v8;
        ++*(_DWORD *)(result + 84);
      }
    }
  }
  return result;
}

uint64_t WebCore::attributeValueMatches(uint64_t a1, int a2, const WTF::StringImpl *a3, int a4)
{
  WTF *v7;
  const WTF::StringImpl *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  char v14;
  uint64_t IgnoringASCIICase;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;

  if (a2 != 4)
  {
    result = 0;
    switch(a2)
    {
      case 5:
        return 1;
      case 6:
        v10 = *(_QWORD *)a3;
        if (!*(_QWORD *)a3)
          return 0;
        v11 = *(unsigned int *)(v10 + 4);
        if (!(_DWORD)v11)
          return 0;
        v12 = *(unsigned __int16 **)(v10 + 8);
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        {
          do
          {
            v13 = *(unsigned __int8 *)v12;
            v12 = (unsigned __int16 *)((char *)v12 + 1);
            v14 = v13 - 9;
            if ((v13 - 9) < 0x18 && ((0x80001Bu >> v14) & 1) != 0)
              return 0;
            --v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v36 = *v12++;
            v37 = v36 - 9;
            if ((v36 - 9) < 0x18 && ((0x80001Bu >> v37) & 1) != 0)
              return 0;
            --v11;
          }
          while (v11);
        }
        while (1)
        {
          while (1)
          {
            while (1)
            {
              if (a4)
              {
                result = *(_QWORD *)(a1 + 8);
                if (!result)
                  return result;
                IgnoringASCIICase = WTF::StringImpl::find();
              }
              else
              {
                result = *(_QWORD *)(a1 + 8);
                if (!result)
                  return result;
                IgnoringASCIICase = WTF::StringImpl::findIgnoringASCIICase();
              }
              if (!IgnoringASCIICase)
                break;
              if (IgnoringASCIICase == -1)
                return 0;
              v16 = *(_QWORD *)(a1 + 8);
              if (v16)
              {
                v17 = (IgnoringASCIICase - 1);
                if (*(_DWORD *)(v16 + 4) > v17)
                {
                  v18 = *(_QWORD *)(v16 + 8);
                  v19 = (*(_BYTE *)(v16 + 16) & 4) != 0
                      ? *(unsigned __int8 *)(v18 + v17)
                      : *(unsigned __int16 *)(v18 + 2 * v17);
                  v20 = v19 > 0x20;
                  v21 = (1 << v19) & 0x100003600;
                  if (!v20 && v21 != 0)
                    break;
                }
              }
            }
            v23 = *(_QWORD *)a3;
            if (*(_QWORD *)a3)
              LODWORD(v23) = *(_DWORD *)(v23 + 4);
            v24 = (v23 + IgnoringASCIICase);
            v25 = *(_QWORD *)(a1 + 8);
            if (v25)
              break;
            if (!(_DWORD)v24)
              return 1;
          }
          v26 = *(_DWORD *)(v25 + 4);
          if ((_DWORD)v24 == v26)
            break;
          if (v26 > v24)
          {
            v27 = *(_QWORD *)(v25 + 8);
            v28 = (*(_BYTE *)(v25 + 16) & 4) != 0
                ? *(unsigned __int8 *)(v27 + v24)
                : *(unsigned __int16 *)(v27 + 2 * v24);
            v29 = v28 - 9;
            if (v29 < 0x18 && ((0x80001Bu >> v29) & 1) != 0)
              break;
          }
        }
        return 1;
      case 7:
        v30 = *(_QWORD *)(a1 + 8);
        if (v30)
          v31 = *(_DWORD *)(v30 + 4);
        else
          v31 = 0;
        v32 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
          v33 = *(_DWORD *)(v32 + 4);
        else
          v33 = 0;
        if (v31 < v33)
          return 0;
        if (a4)
        {
          if (v32)
            v34 = *(_DWORD *)(v32 + 4);
          else
            v34 = 0;
          if (v30)
          {
            if ((WTF::StringImpl::startsWith() & 1) == 0)
              return 0;
            goto LABEL_83;
          }
        }
        else
        {
          if (v32)
            v34 = *(_DWORD *)(v32 + 4);
          else
            v34 = 0;
          if (v30)
          {
            if ((WTF::StringImpl::startsWithIgnoringASCIICase() & 1) == 0)
              return 0;
            goto LABEL_83;
          }
        }
        if (v34)
          return 0;
LABEL_83:
        v38 = *(_QWORD *)(a1 + 8);
        if (!v38)
          return !*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4);
        v39 = *(_DWORD *)(v38 + 4);
        if (*(_QWORD *)a3)
        {
          v40 = *(_DWORD *)(*(_QWORD *)a3 + 4);
          if (v39 == v40)
            return 1;
          if (v39 <= v40)
            return 0;
        }
        else
        {
          if (!v39)
            return 1;
          v40 = 0;
        }
        v41 = *(_QWORD *)(v38 + 8);
        if ((*(_BYTE *)(v38 + 16) & 4) != 0)
          v42 = *(unsigned __int8 *)(v41 + v40);
        else
          v42 = *(unsigned __int16 *)(v41 + 2 * v40);
        return v42 == 45;
      case 10:
        if (a4)
        {
          result = *(_QWORD *)(a1 + 8);
          if (!result)
            return result;
          v35 = WTF::StringImpl::find();
        }
        else
        {
          result = *(_QWORD *)(a1 + 8);
          if (!result)
            return result;
          v35 = WTF::StringImpl::findIgnoringASCIICase();
        }
        return v35 != -1 && *(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4);
      case 11:
        if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
          return 0;
        result = *(_QWORD *)(a1 + 8);
        if (a4)
        {
          if (!result)
            return result;
          if ((WTF::StringImpl::startsWith() & 1) != 0)
            return 1;
        }
        else
        {
          if (!result)
            return result;
          if ((WTF::StringImpl::startsWithIgnoringASCIICase() & 1) != 0)
            return 1;
        }
        return 0;
      case 12:
        if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
          return 0;
        result = *(_QWORD *)(a1 + 8);
        if (a4)
        {
          if (!result)
            return result;
          if ((WTF::StringImpl::endsWith() & 1) != 0)
            return 1;
        }
        else
        {
          if (!result)
            return result;
          if ((WTF::StringImpl::endsWithIgnoringASCIICase() & 1) != 0)
            return 1;
        }
        break;
      default:
        return result;
    }
    return 0;
  }
  v7 = *(WTF **)a3;
  v8 = *(const WTF::StringImpl **)(a1 + 8);
  if (a4)
    return v7 == v8;
  return (WTF::equalIgnoringASCIICase(v7, v8, a3) & 1) != 0;
}

BOOL WebCore::SelectorChecker::checkViewTransitionPseudoClass(int a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;

  if ((a4 & 0x1FE00) != 0x6E00)
    return 0;
  switch(a1)
  {
    case 13:
      v5 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 2112);
      if (!v5)
        return 0;
      v6 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v6 + 1;
      v7 = *(_QWORD *)(v5 + 64);
      if (!v7)
        goto LABEL_30;
      v8 = 0;
      v9 = *(_DWORD *)(a2 + 16) >> 8;
      while (2)
      {
        v10 = v9 & *(_DWORD *)(v7 - 8);
        v11 = *(_QWORD *)(v7 + 16 * v10);
        if (v11 == -1)
          goto LABEL_9;
        if (!v11)
          goto LABEL_30;
        if (v11 != a2)
        {
LABEL_9:
          v9 = ++v8 + v10;
          continue;
        }
        break;
      }
      if ((_DWORD)v10 != *(_DWORD *)(v7 - 4) && *(_QWORD *)(v7 + 16 * v10 + 8))
      {
        v24 = *(_QWORD *)(v5 + 40);
        if (v24)
        {
          v25 = 0;
          v4 = *(_DWORD *)(v24 - 12) == 1;
          if (!v6)
          {
LABEL_50:
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
            if (v25)
              return 0;
            return v4;
          }
        }
        else
        {
          v25 = 0;
          v4 = 0;
          if (!v6)
            goto LABEL_50;
        }
      }
      else
      {
LABEL_30:
        v25 = 1;
        if (!v6)
          goto LABEL_50;
      }
      *(_DWORD *)(v5 + 24) = v6;
      if (v25)
        return 0;
      return v4;
    case 14:
      return 1;
    case 15:
      v12 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 2112);
      if (!v12)
        return 0;
      v13 = *(_DWORD *)(v12 + 24);
      *(_DWORD *)(v12 + 24) = v13 + 1;
      v14 = *(_QWORD *)(v12 + 64);
      if (!v14)
        goto LABEL_45;
      v15 = 0;
      v16 = *(_DWORD *)(a2 + 16) >> 8;
      while (2)
      {
        v17 = v16 & *(_DWORD *)(v14 - 8);
        v18 = *(_QWORD *)(v14 + 16 * v17);
        if (v18 == -1)
          goto LABEL_17;
        if (!v18)
          goto LABEL_45;
        if (v18 != a2)
        {
LABEL_17:
          v16 = ++v15 + v17;
          continue;
        }
        break;
      }
      if ((_DWORD)v17 == *(_DWORD *)(v14 - 4))
        goto LABEL_45;
      v26 = *(_QWORD *)(v14 + 16 * v17 + 8);
      if (!v26)
        goto LABEL_45;
      v27 = *(_QWORD *)(v26 + 56);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 8) == 0;
        goto LABEL_40;
      }
      v30 = 1;
      v4 = 1;
      if (!v13)
        goto LABEL_53;
      goto LABEL_46;
    case 16:
      v12 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 2112);
      if (!v12)
        return 0;
      v13 = *(_DWORD *)(v12 + 24);
      *(_DWORD *)(v12 + 24) = v13 + 1;
      v19 = *(_QWORD *)(v12 + 64);
      if (!v19)
        goto LABEL_45;
      v20 = 0;
      v21 = *(_DWORD *)(a2 + 16) >> 8;
      while (2)
      {
        v22 = v21 & *(_DWORD *)(v19 - 8);
        v23 = *(_QWORD *)(v19 + 16 * v22);
        if (v23 == -1)
          goto LABEL_24;
        if (!v23)
          goto LABEL_45;
        if (v23 != a2)
        {
LABEL_24:
          v21 = ++v20 + v22;
          continue;
        }
        break;
      }
      if ((_DWORD)v22 == *(_DWORD *)(v19 - 4) || (v29 = *(_QWORD *)(v19 + 16 * v22 + 8)) == 0)
      {
LABEL_45:
        v30 = 0;
        if (!v13)
          goto LABEL_53;
LABEL_46:
        *(_DWORD *)(v12 + 24) = v13;
        if ((v30 & 1) != 0)
          return v4;
        return 0;
      }
      v28 = *(_BYTE *)(v29 + 8) == 0;
LABEL_40:
      v4 = v28;
      v30 = 1;
      if (v13)
        goto LABEL_46;
LABEL_53:
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      if ((v30 & 1) == 0)
        return 0;
      return v4;
    default:
      return 0;
  }
}

uint64_t WebCore::isFirstOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  do
  {
    a1 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
    if (!a1)
      return 1;
  }
  while ((*(_WORD *)(a1 + 28) & 8) == 0);
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 == a2)
    return 0;
LABEL_4:
  if (*(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(v2 + 32) == *(_QWORD *)(a2 + 32))
    return 0;
  while (1)
  {
    a1 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
    if (!a1)
      return 1;
    if ((*(_WORD *)(a1 + 28) & 8) != 0)
    {
      v3 = 0;
      v2 = *(_QWORD *)(a1 + 96);
      if (v2 != a2)
        goto LABEL_4;
      return v3;
    }
  }
}

uint64_t WebCore::isLastOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  do
  {
    a1 = *(_QWORD *)(a1 + 56);
    if (!a1)
      return 1;
  }
  while ((*(_WORD *)(a1 + 28) & 8) == 0);
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 == a2)
    return 0;
LABEL_4:
  if (*(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(v2 + 32) == *(_QWORD *)(a2 + 32))
    return 0;
  while (1)
  {
    a1 = *(_QWORD *)(a1 + 56);
    if (!a1)
      return 1;
    if ((*(_WORD *)(a1 + 28) & 8) != 0)
    {
      v3 = 0;
      v2 = *(_QWORD *)(a1 + 96);
      if (v2 != a2)
        goto LABEL_4;
      return v3;
    }
  }
}

BOOL WebCore::SelectorChecker::matchHasPseudoClass(WebCore::SelectorChecker *this, unint64_t a2, const WebCore::Element *a3, const WebCore::CSSSelector *a4)
{
  unint64_t v6;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::Element *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  const WebCore::Element **v31;
  const WebCore::Element *v32;
  int v33;
  BOOL v34;
  const WebCore::Element **v35;
  int v36;
  BOOL v37;
  WTF *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int Key;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const WebCore::Element *v51;
  _BYTE *v52;
  const WebCore::CSSSelector *v53;
  int v54;
  WTF::StringImpl *v55;
  const WebCore::Element *v56;
  _BYTE *v57;
  const WebCore::CSSSelector *v58;
  int matched;
  WTF::StringImpl *v60;
  uint64_t *v61;
  char v62;
  char v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  const WebCore::Element *v74;
  const WebCore::CSSSelector *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  WTF *v85;
  uint64_t v86;
  int v87;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  void *v92;
  uint64_t v93;
  WTF *v94;
  __int128 *v95;
  WTF::StringImpl *v97;
  WTF *v98;
  _QWORD v99[3];
  const WebCore::CSSSelector *v100;
  WebCore::SelectorChecker *v101;
  _BYTE *v102;
  char *v103;
  char v104;
  _BYTE v105[4];
  int v106;
  WTF::StringImpl *v107;
  char v108;
  char v109;
  uint64_t v110;
  const WebCore::Element *v111;
  __int16 v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  _DWORD v116[33];
  char v117;
  uint64_t *v118;
  int v119;
  __int128 v120;
  char v121;
  const WebCore::CSSSelector *v122;
  char v123;
  WTF::StringImpl *v124;
  char v125;
  int v126;
  int v127;

  v6 = a2;
  v8 = *(_DWORD *)a4;
  if ((*(_DWORD *)a4 & 0x80000) != 0)
  {
    v14 = 10;
  }
  else
  {
    v9 = 0;
    v10 = (int *)((char *)a4 + 16);
    do
    {
      v11 = v8 & 0xF;
      a2 = (1 << v9);
      if ((a2 & 0x65039) != 0)
      {
        switch(v11)
        {
          case 1:
            goto LABEL_7;
          case 2:
            v9 = 1;
            break;
          case 3:
            if (v9)
              v13 = 4;
            else
              v13 = 3;
            v9 = v13;
            break;
          case 4:
            v9 = 4;
            break;
          case 5:
          case 6:
            goto LABEL_5;
          case 7:
            goto LABEL_19;
          default:
            break;
        }
      }
      else
      {
        switch(v11)
        {
          case 1:
          case 2:
LABEL_7:
            v9 = 2;
            break;
          case 3:
          case 4:
            if (v9 == 1)
              v9 = 6;
            else
              v9 = 7;
            break;
          case 5:
          case 6:
LABEL_5:
            v9 = 17;
            break;
          case 7:
LABEL_19:
            v9 = 18;
            break;
          default:
            break;
        }
      }
      v12 = *v10;
      v10 += 4;
      LOBYTE(v8) = v12;
    }
    while ((v12 & 0x80000) == 0);
    if ((v9 - 6) < 4)
    {
      v14 = 13;
LABEL_28:
      v18 = a3;
      while (1)
      {
        v18 = (const WebCore::Element *)*((_QWORD *)v18 + 7);
        if (!v18)
          return 0;
        if ((*((_WORD *)v18 + 14) & 8) != 0)
          goto LABEL_31;
      }
    }
    if ((v9 - 3) < 3)
    {
      v14 = 12;
      goto LABEL_28;
    }
    if (v9 == 2)
      v14 = 11;
    else
      v14 = 10;
  }
  v15 = *((_QWORD *)a3 + 10);
  if (!v15)
    return 0;
  v16 = 0;
  while ((*(_WORD *)(v15 + 28) & 8) == 0)
  {
    v15 = *(_QWORD *)(v15 + 56);
    if (!v15)
      return v16;
  }
LABEL_31:
  v19 = *(_QWORD *)(v6 + 64);
  if (v19)
    v20 = (uint64_t *)(v19 + 4136);
  else
    v20 = 0;
  v118 = v20;
  if (!v19)
    goto LABEL_87;
  v21 = WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>>,std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>(*(_QWORD *)(v19 + 4136), (uint64_t)a3, (uint64_t)a4)- 1;
  if (v21 < 3)
    return (v21 & 7) == 0;
  if (v14 == 10)
  {
    v22 = 0;
  }
  else
  {
    if (v14 != 11)
      goto LABEL_87;
    v22 = 1;
  }
  v23 = (uint64_t *)(v19 + 4144);
  v24 = *(_QWORD *)(v19 + 4144);
  if (v24
    || (WTF::HashTable<std::pair<WebCore::Element const*,unsigned char>,WTF::KeyValuePair<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>>>,WTF::DefaultHash<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashMap<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>,WTF::DefaultHash<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashTraits<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::HasSelectorFilter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::Element const*,unsigned char>>>::rehash((uint64_t *)(v19 + 4144), 8u), (v24 = *v23) != 0))
  {
    v25 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
  v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
  v29 = 9 * ((~(v22 << 15) + v22) ^ ((~(v22 << 15) + v22) >> 10));
  LODWORD(v27) = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
  v30 = v25 & ((0xD7862706ELL
              * (unint64_t)(277951225 * ((v28 >> 31) ^ v28)
                                 + 95187966 * (v27 ^ WORD1(v27)))) >> 4);
  v31 = (const WebCore::Element **)(v24 + 24 * v30);
  v32 = *v31;
  v33 = *((unsigned __int8 *)v31 + 8);
  if (*v31)
    v34 = 0;
  else
    v34 = v33 == 0;
  if (v34)
    goto LABEL_67;
  v35 = 0;
  v36 = 1;
  do
  {
    if (v32 == a3 && v22 == v33)
    {
      v46 = (uint64_t)v31[2];
      if (!v46)
      {
        v46 = WTF::fastMalloc((WTF *)0x204);
        WebCore::Style::HasSelectorFilter::HasSelectorFilter(v46, (uint64_t)a3, v22);
        v98 = v31[2];
        v31[2] = (const WebCore::Element *)v46;
        if (v98)
        {
          WTF::fastFree(v98, (void *)a2);
          v46 = (uint64_t)v31[2];
          if (!v46)
            goto LABEL_87;
        }
      }
      Key = WebCore::Style::HasSelectorFilter::makeKey(a4, (const WebCore::CSSSelector *)a2);
      if (!Key
        || ((*(_DWORD *)(v46 + 4 + 4 * ((Key >> 5) & 0x7F)) >> Key) & 1) != 0
        && ((*(_DWORD *)(v46 + 4 + 4 * ((Key >> 21) & 0x7F)) >> SBYTE2(Key)) & 1) != 0)
      {
        goto LABEL_87;
      }
      return 0;
    }
    if (v32 == (const WebCore::Element *)-1)
      v35 = v31;
    v30 = (v30 + v36) & v25;
    v31 = (const WebCore::Element **)(v24 + 24 * v30);
    v32 = *v31;
    v33 = *((unsigned __int8 *)v31 + 8);
    ++v36;
    if (*v31)
      v37 = 0;
    else
      v37 = v33 == 0;
  }
  while (!v37);
  if (v35)
  {
    *v35 = 0;
    v35[1] = 0;
    v35[2] = 0;
    --*(_DWORD *)(*v23 - 16);
    v31 = v35;
  }
LABEL_67:
  *v31 = a3;
  *((_BYTE *)v31 + 8) = v22;
  v38 = v31[2];
  v31[2] = 0;
  if (v38)
    WTF::fastFree(v38, (void *)a2);
  v39 = *v23;
  if (*v23)
    v40 = *(_DWORD *)(v39 - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(v39 - 12) = v40;
  v41 = *v23;
  if (*v23)
    v42 = *(_DWORD *)(v41 - 12);
  else
    v42 = 0;
  v43 = (*(_DWORD *)(v41 - 16) + v42);
  v44 = *(unsigned int *)(v41 - 4);
  if (v44 > 0x400)
  {
    if (v44 <= 2 * v43)
    {
LABEL_78:
      v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
      goto LABEL_86;
    }
  }
  else if (3 * v44 <= 4 * v43)
  {
    if ((_DWORD)v44)
      goto LABEL_78;
    v45 = 8;
LABEL_86:
    WTF::HashTable<std::pair<WebCore::Element const*,unsigned char>,WTF::KeyValuePair<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>>>,WTF::DefaultHash<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashMap<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>,WTF::DefaultHash<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashTraits<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::HasSelectorFilter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::Element const*,unsigned char>>>::rehash(v23, v45);
  }
LABEL_87:
  v105[0] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v112 = 0;
  v113 = 0;
  v114 = (WTF *)v116;
  v115 = 8;
  v116[32] = 0;
  v117 = 0;
  v110 = *(_QWORD *)(v6 + 40);
  v111 = a3;
  v104 = 0;
  v100 = a4;
  v101 = this;
  v102 = v105;
  v103 = &v104;
  v99[0] = &v118;
  v99[1] = a4;
  v99[2] = &v100;
  switch(v14)
  {
    case 10:
      v48 = *((_QWORD *)a3 + 10);
      if (!v48)
        goto LABEL_137;
      while ((*(_WORD *)(v48 + 28) & 8) == 0)
      {
        v48 = *(_QWORD *)(v48 + 56);
        if (!v48)
          goto LABEL_137;
      }
      v57 = v105;
      v58 = a4;
      while (1)
      {
        *(_QWORD *)&v120 = v58;
        *((_QWORD *)&v120 + 1) = v48;
        v121 = 0;
        v122 = v58;
        v123 = 0;
        v125 = 0;
        v127 = 0;
        v126 = 65793;
        v119 = 0;
        matched = WebCore::SelectorChecker::matchRecursively(this, v57, &v120, &v119);
        if (v102[220])
          *v103 = 1;
        if (v125)
        {
          v60 = v124;
          v124 = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v60 -= 2;
          }
        }
        if (!matched)
          goto LABEL_100;
        do
        {
          v48 = *(_QWORD *)(v48 + 56);
          if (!v48)
            goto LABEL_137;
        }
        while ((*(_WORD *)(v48 + 28) & 8) == 0);
        v58 = v100;
        this = v101;
        v57 = v102;
      }
    case 11:
      if (!v118)
        goto LABEL_99;
      v49 = *((_QWORD *)a3 + 4);
      if (!v49 || (*(_WORD *)(v49 + 28) & 8) == 0)
        goto LABEL_99;
      v50 = *v118;
      while (WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>>,std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>(v50, v49, (uint64_t)a4) != 3)
      {
        v49 = *(_QWORD *)(v49 + 32);
        if (!v49 || (*(_WORD *)(v49 + 28) & 8) == 0)
        {
LABEL_99:
          if ((WebCore::SelectorChecker::matchHasPseudoClass(WebCore::SelectorChecker::CheckingContext &,WebCore::Element const&,WebCore::CSSSelector const&)const::$_4::operator()((uint64_t)v99, (uint64_t)a3) & 1) == 0)goto LABEL_137;
          goto LABEL_100;
        }
      }
      goto LABEL_137;
    case 12:
      v51 = a3;
      while (1)
      {
        v51 = (const WebCore::Element *)*((_QWORD *)v51 + 7);
        if (!v51)
          goto LABEL_137;
        if ((*((_WORD *)v51 + 14) & 8) != 0)
        {
          v52 = v105;
          v53 = a4;
LABEL_105:
          *(_QWORD *)&v120 = v53;
          *((_QWORD *)&v120 + 1) = v51;
          v121 = 0;
          v122 = v53;
          v123 = 0;
          v125 = 0;
          v127 = 0;
          v126 = 65793;
          v119 = 0;
          v54 = WebCore::SelectorChecker::matchRecursively(this, v52, &v120, &v119);
          if (v102[220])
            *v103 = 1;
          if (v125)
          {
            v55 = v124;
            v124 = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v55 -= 2;
            }
          }
          if (v54)
          {
            while (1)
            {
              v51 = (const WebCore::Element *)*((_QWORD *)v51 + 7);
              if (!v51)
                goto LABEL_137;
              if ((*((_WORD *)v51 + 14) & 8) != 0)
              {
                v53 = v100;
                this = v101;
                v52 = v102;
                goto LABEL_105;
              }
            }
          }
          goto LABEL_100;
        }
      }
    case 13:
      v56 = a3;
      break;
    default:
      goto LABEL_137;
  }
  while (1)
  {
    v56 = (const WebCore::Element *)*((_QWORD *)v56 + 7);
    if (!v56)
      break;
    if ((*((_WORD *)v56 + 14) & 8) != 0)
    {
      if ((WebCore::SelectorChecker::matchHasPseudoClass(WebCore::SelectorChecker::CheckingContext &,WebCore::Element const&,WebCore::CSSSelector const&)const::$_4::operator()((uint64_t)v99, (uint64_t)v56) & 1) != 0)
      {
LABEL_100:
        v16 = 1;
        goto LABEL_138;
      }
      v16 = 1;
      while (1)
      {
        v56 = (const WebCore::Element *)*((_QWORD *)v56 + 7);
        if (!v56)
          goto LABEL_137;
        if ((*((_WORD *)v56 + 14) & 8) != 0
          && (WebCore::SelectorChecker::matchHasPseudoClass(WebCore::SelectorChecker::CheckingContext &,WebCore::Element const&,WebCore::CSSSelector const&)const::$_4::operator()((uint64_t)v99, (uint64_t)v56) & 1) != 0)
        {
          goto LABEL_138;
        }
      }
    }
  }
LABEL_137:
  v16 = 0;
LABEL_138:
  v61 = v118;
  if (v118)
  {
    if (v104)
      v62 = 2;
    else
      v62 = 3;
    if ((_DWORD)v16)
      v63 = 1;
    else
      v63 = v62;
    v64 = *v118;
    if (*v118
      || (WTF::HashTable<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WTF::KeyValuePair<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch>>,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>>::rehash(v118, 8u), (v64 = *v61) != 0))
    {
      v65 = *(_DWORD *)(v64 - 8);
    }
    else
    {
      v65 = 0;
    }
    v66 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
    v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
    v69 = ((unint64_t)a4 + ~((_QWORD)a4 << 32)) ^ (((unint64_t)a4 + ~((_QWORD)a4 << 32)) >> 22);
    v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
    v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
    v72 = v65 & ((0xD7862706ELL
                * (unint64_t)(277951225 * ((v68 >> 31) ^ v68)
                                   + 95187966 * ((v71 >> 31) ^ v71))) >> 4);
    v73 = v64 + 24 * v72;
    v74 = *(const WebCore::Element **)v73;
    v75 = *(const WebCore::CSSSelector **)(v73 + 8);
    if (*(_OWORD *)v73 != 0)
    {
      v76 = 0;
      v77 = 1;
      while (v74 != a3 || v75 != a4)
      {
        if (v74 == (const WebCore::Element *)-1)
          v76 = v73;
        v72 = (v72 + v77) & v65;
        v73 = v64 + 24 * v72;
        v74 = *(const WebCore::Element **)v73;
        v75 = *(const WebCore::CSSSelector **)(v73 + 8);
        ++v77;
        if (*(_OWORD *)v73 == 0)
        {
          if (v76)
          {
            *(_QWORD *)v76 = 0;
            *(_QWORD *)(v76 + 8) = 0;
            *(_BYTE *)(v76 + 16) = 0;
            --*(_DWORD *)(*v61 - 16);
            v73 = v76;
          }
          goto LABEL_157;
        }
      }
      goto LABEL_170;
    }
LABEL_157:
    *(_QWORD *)v73 = a3;
    *(_QWORD *)(v73 + 8) = a4;
    *(_BYTE *)(v73 + 16) = v63;
    v78 = *v61;
    if (*v61)
      v79 = *(_DWORD *)(v78 - 12) + 1;
    else
      v79 = 1;
    *(_DWORD *)(v78 - 12) = v79;
    v80 = *v61;
    if (*v61)
      v81 = *(_DWORD *)(v80 - 12);
    else
      v81 = 0;
    v82 = (*(_DWORD *)(v80 - 16) + v81);
    v83 = *(unsigned int *)(v80 - 4);
    if (v83 > 0x400)
    {
      if (v83 > 2 * v82)
        goto LABEL_170;
LABEL_166:
      v84 = (_DWORD)v83 << (6 * *(_DWORD *)(v80 - 12) >= (2 * v83));
    }
    else
    {
      if (3 * v83 > 4 * v82)
        goto LABEL_170;
      if ((_DWORD)v83)
        goto LABEL_166;
      v84 = 8;
    }
    WTF::HashTable<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WTF::KeyValuePair<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch>>,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>>::rehash(v61, v84);
  }
LABEL_170:
  v85 = v114;
  if (!HIDWORD(v115))
    goto LABEL_188;
  v86 = 16 * HIDWORD(v115);
  while (2)
  {
    v87 = *((_DWORD *)v85 + 2);
    if ((v87 - 8) < 2)
    {
      v89 = *(unsigned int *)(v6 + 84);
      if ((_DWORD)v89 != *(_DWORD *)(v6 + 80))
      {
        v90 = *(_QWORD *)(v6 + 72);
        v91 = *(_OWORD *)v85;
        goto LABEL_182;
      }
      v92 = (void *)(v89 + 1);
      v93 = v6 + 72;
      v94 = v85;
LABEL_186:
      v95 = (__int128 *)WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v93, v92, (unint64_t)v94);
      v89 = *(unsigned int *)(v6 + 84);
      v90 = *(_QWORD *)(v6 + 72);
      v91 = *v95;
      goto LABEL_182;
    }
    if (v87 == 6 || v87 == 4)
    {
      *(_QWORD *)&v120 = *(_QWORD *)v85;
      *((_QWORD *)&v120 + 1) = 0x10000000ELL;
      v89 = *(unsigned int *)(v6 + 84);
      if ((_DWORD)v89 != *(_DWORD *)(v6 + 80))
      {
        v90 = *(_QWORD *)(v6 + 72);
        v91 = v120;
LABEL_182:
        *(_OWORD *)(v90 + 16 * v89) = v91;
        ++*(_DWORD *)(v6 + 84);
        goto LABEL_183;
      }
      v92 = (void *)(v89 + 1);
      v94 = (WTF *)&v120;
      v93 = v6 + 72;
      goto LABEL_186;
    }
LABEL_183:
    v85 = (WTF *)((char *)v85 + 16);
    v86 -= 16;
    if (v86)
      continue;
    break;
  }
  v85 = v114;
LABEL_188:
  if (v116 != (_DWORD *)v85 && v85 != 0)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree(v85, (void *)a2);
  }
  v97 = v107;
  v107 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v97 -= 2;
  }
  return v16;
}

uint64_t WebCore::SelectorChecker::matchSelectorList(WebCore::SelectorChecker *this, WebCore::SelectorChecker::CheckingContext *a2, const WebCore::SelectorChecker::LocalContext *a3, const WebCore::Element *a4, int **a5)
{
  int *v5;
  char v10;
  __int128 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  BOOL v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  int v20;
  __int128 v21;
  __int128 v22;
  int v23;
  WTF::StringImpl *v24;
  char v25;
  uint64_t v26;

  v5 = *a5;
  if (*a5)
  {
    v10 = 0;
    do
    {
      v11 = *((_OWORD *)a3 + 1);
      v21 = *(_OWORD *)a3;
      v22 = v11;
      LOBYTE(v23) = 0;
      v25 = 0;
      if (*((_BYTE *)a3 + 48))
      {
        v23 = *((_DWORD *)a3 + 8);
        v12 = (WTF::StringImpl *)*((_QWORD *)a3 + 5);
        if (v12)
          *(_DWORD *)v12 += 2;
        v24 = v12;
        v25 = 1;
      }
      v13 = *((_QWORD *)a3 + 7);
      *(_QWORD *)&v21 = v5;
      *((_QWORD *)&v21 + 1) = a4;
      v26 = v13;
      WORD1(v26) = 1;
      *((_QWORD *)&v22 + 1) = v5;
      v20 = 0;
      v15 = WebCore::SelectorChecker::matchRecursively(this, a2, &v21, &v20) == 0;
      if (v25)
      {
        v16 = v24;
        v24 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v14);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      v10 |= v15;
      do
      {
        v18 = *v5;
        v5 += 4;
        v17 = v18;
      }
      while ((v18 & 0x80000) == 0);
    }
    while ((v17 & 0x20000) == 0);
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t WebCore::countElementsBefore(WebCore *this, const WebCore::Element *a2)
{
  uint64_t v2;
  int v3;

  do
  {
    this = (WebCore *)(*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL);
    if (!this)
      return 0;
  }
  while ((*((_WORD *)this + 14) & 8) == 0);
  LODWORD(v2) = 0;
LABEL_4:
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v2 = (v2 + 1);
    goto LABEL_11;
  }
  if (*(unsigned __int16 *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x1A) <= 1u)
    v3 = 1;
  else
    v3 = *(unsigned __int16 *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x1A);
  v2 = (v2 + v3);
  if (!*(_WORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x1A))
  {
LABEL_11:
    while (1)
    {
      this = (WebCore *)(*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL);
      if (!this)
        break;
      if ((*((_WORD *)this + 14) & 8) != 0)
        goto LABEL_4;
    }
  }
  return v2;
}

uint64_t WebCore::countElementsOfTypeBefore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  do
  {
    a1 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
    if (!a1)
      return 0;
  }
  while ((*(_WORD *)(a1 + 28) & 8) == 0);
  v2 = 0;
LABEL_4:
  v3 = *(_QWORD *)(a1 + 96);
  if (v3 == a2 || *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(v3 + 32) == *(_QWORD *)(a2 + 32))
    v2 = (v2 + 1);
  while (1)
  {
    a1 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
    if (!a1)
      return v2;
    if ((*(_WORD *)(a1 + 28) & 8) != 0)
      goto LABEL_4;
  }
}

uint64_t WebCore::countElementsOfTypeAfter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  do
  {
    a1 = *(_QWORD *)(a1 + 56);
    if (!a1)
      return 0;
  }
  while ((*(_WORD *)(a1 + 28) & 8) == 0);
  v2 = 0;
LABEL_4:
  v3 = *(_QWORD *)(a1 + 96);
  if (v3 == a2 || *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(v3 + 32) == *(_QWORD *)(a2 + 32))
    v2 = (v2 + 1);
  while (1)
  {
    a1 = *(_QWORD *)(a1 + 56);
    if (!a1)
      return v2;
    if ((*(_WORD *)(a1 + 28) & 8) != 0)
      goto LABEL_4;
  }
}

BOOL WebCore::InspectorInstrumentation::forcePseudoState(uint64_t a1, int a2)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(_QWORD *)(v6 + 528);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0 || (v9 = *(_QWORD *)(v8 + 24)) == 0 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
    v12 = *(_QWORD *)(v6 + 2632);
    if (!v12)
      return 0;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      return 0;
    v14 = *(_QWORD *)(v13 + 528);
    if (!v14)
      return 0;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      return 0;
    v16 = *(_QWORD *)(v15 + 24);
    if (!v16)
      return 0;
    v10 = *(_QWORD *)(v16 + 8);
    if (!v10)
      return 0;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 80) + 8) + 112);
  return v11 && WebCore::InspectorCSSAgent::forcePseudoState(v11, a1, a2);
}

uint64_t WebCore::canMatchHoverOrActiveInQuirksMode(uint64_t result, char a2)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;

  if (a2)
    return 1;
  if (result)
  {
    v2 = (_QWORD *)(result + 8);
    do
    {
      v3 = *((_DWORD *)v2 - 2);
      v4 = (v3 >> 4) & 0x1F;
      if (v4 <= 0xD)
      {
        if (v4 == 1)
        {
          if (*v2 != WebCore::anyName)
            return 1;
        }
        else if (v4 == 8)
        {
          v5 = (v3 >> 9);
          if (v5 != 37 && v5 != 11)
            return 1;
        }
        else if (((1 << v4) & 0x3EFC) != 0)
        {
          return 1;
        }
      }
      if ((*(_DWORD *)(v2 - 1) & 0xFu) - 5 < 2)
        return 1;
      v2 += 2;
    }
    while ((v3 & 0x8000F) == 0);
    return 0;
  }
  return result;
}

WTF::StringImpl *WebCore::SelectorChecker::checkOne(WebCore::SelectorChecker::CheckingContext &,WebCore::SelectorChecker::LocalContext const&,WebCore::SelectorChecker::MatchType &)const::$_0::operator()<WTF::Vector<WTF::AtomString,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::StringImpl *result, uint64_t a2, WTF::StringImpl **a3)
{
  int v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  WTF *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _DWORD *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  int v32;
  unsigned int i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  _DWORD **v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  WTF *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  uint64_t v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  WTF *v61;
  unsigned int v63;
  int v64;
  WTF *v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _DWORD **v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v80;
  char *v81;
  WTF::StringImpl *v82;
  int v83;
  uint64_t v84;
  uint64_t v86;
  unint64_t v87;
  WTF::StringImpl **v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v94;
  WTF *v95;
  unsigned int v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  uint64_t v102;
  WTF::StringImpl *v103;

  v4 = *(unsigned __int8 *)(*(_QWORD *)result + 57);
  if (!*(_BYTE *)(*(_QWORD *)result + 57))
  {
    v24 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v24 == *(_DWORD *)(a2 + 8))
    {
      result = (WTF::StringImpl *)WTF::Vector<WTF::AtomString,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v24 + 1, (unint64_t)a3);
      v25 = *(unsigned int *)(a2 + 12);
      v26 = *(char **)a2;
      v27 = *(_DWORD **)result;
      if (*(_QWORD *)result)
        *v27 += 2;
      *(_QWORD *)&v26[8 * v25] = v27;
      *(_DWORD *)(a2 + 12) = v25 + 1;
    }
    else
    {
      v81 = *(char **)a2;
      v82 = *a3;
      if (*a3)
        *(_DWORD *)v82 += 2;
      *(_QWORD *)&v81[8 * v24] = v82;
      *(_DWORD *)(a2 + 12) = v24 + 1;
    }
    return result;
  }
  v5 = result;
  v6 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)result + 1) + 8) + 40);
  if (v6)
    v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_7;
  v8 = *(_QWORD *)(v6 + 200);
  if (!v8)
    goto LABEL_7;
  v9 = *(_QWORD *)(v8 + 8);
  if (v4 != 255 && v9)
  {
    v83 = 255;
    while (1)
    {
      v84 = **(_QWORD **)(v9 + 40);
      if (!v84 || (*(_WORD *)(v84 + 28) & 0x80) == 0)
        break;
      v86 = *(_QWORD *)(v84 + 200);
      if (!v86)
        break;
      v9 = *(_QWORD *)(v86 + 8);
      if (v9)
      {
        if (v4 != --v83)
          continue;
      }
      goto LABEL_8;
    }
LABEL_7:
    v9 = 0;
  }
LABEL_8:
  result = *a3;
  if (*a3)
  {
    v10 = *(_DWORD *)result;
    v101 = (WTF *)&v103;
    *(_DWORD *)result = v10 + 4;
    v103 = result;
    v102 = 0x100000001;
    v11 = v10 + 2;
    if (v11)
      *(_DWORD *)result = v11;
    else
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
  }
  else
  {
    v101 = (WTF *)&v103;
    v103 = 0;
    v102 = 0x100000001;
  }
  v12 = **(_QWORD **)(*((_QWORD *)v5 + 2) + 40);
  if (v12)
    v13 = (*(_WORD *)(v12 + 28) & 0x80) == 0;
  else
    v13 = 1;
  if (!v13)
  {
    v94 = v9;
    while (1)
    {
      v28 = *(_QWORD *)(v12 + 200);
      if (v28)
        v28 = *(_QWORD *)(v28 + 8);
      if (v28 == v9)
        break;
      v98 = (WTF *)&v100;
      v99 = 1;
      if (!HIDWORD(v102))
        goto LABEL_110;
      v29 = v101;
      v30 = (WTF *)((char *)v101 + 8 * HIDWORD(v102));
      do
      {
        v31 = *WebCore::ShadowRoot::partMappings((WebCore::ShadowRoot *)v12, (WTF::StringImpl *)a2);
        if (!v31)
        {
LABEL_42:
          v95 = (WTF *)&v97;
          v96 = 0;
          goto LABEL_52;
        }
        v32 = 0;
        for (i = *(_DWORD *)(*(_QWORD *)v29 + 16) >> 8; ; i = v32 + v34)
        {
          v34 = i & *(_DWORD *)(v31 - 8);
          v35 = *(_QWORD *)(v31 + 32 * v34);
          if (v35 != -1)
          {
            if (!v35)
              goto LABEL_42;
            if (v35 == *(_QWORD *)v29)
              break;
          }
          ++v32;
        }
        v36 = v31 + 32 * v34;
        v37 = *(unsigned int *)(v36 + 20);
        v95 = (WTF *)&v97;
        v38 = v36 + 8;
        v96 = v37;
        if (v37 < 2)
        {
          v39 = (WTF *)&v97;
          if (!(_DWORD)v37)
            goto LABEL_52;
LABEL_48:
          v40 = *(_DWORD ***)v38;
          v41 = 8 * v37;
          do
          {
            v42 = *v40;
            if (*v40)
              *v42 += 2;
            *(_QWORD *)v39 = v42;
            v39 = (WTF *)((char *)v39 + 8);
            ++v40;
            v41 -= 8;
          }
          while (v41);
          goto LABEL_52;
        }
        if (v37 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19580FA3CLL);
        }
        v39 = (WTF *)WTF::fastMalloc((WTF *)(8 * v37));
        v95 = v39;
        v37 = *(unsigned int *)(v38 + 12);
        if ((_DWORD)v37)
          goto LABEL_48;
LABEL_52:
        v43 = HIDWORD(v99);
        v44 = v96 + (unint64_t)HIDWORD(v99);
        if (v44 > v99)
        {
          v45 = v99 + ((unint64_t)v99 >> 2);
          if (v45 >= 0x10)
            v46 = v45 + 1;
          else
            v46 = 16;
          if (v46 <= v44)
            v47 = v96 + (unint64_t)HIDWORD(v99);
          else
            v47 = v46;
          v48 = v98;
          if (v47 < 2)
          {
            v98 = (WTF *)&v100;
            LODWORD(v99) = 1;
            v49 = (WTF *)&v100;
          }
          else
          {
            if (v47 >> 29)
              goto LABEL_202;
            v49 = (WTF *)WTF::fastMalloc((WTF *)(8 * v47));
            LODWORD(v99) = v47;
            v98 = v49;
          }
          memcpy(v49, v48, 8 * v43);
          if (&v100 != (uint64_t *)v48 && v48)
          {
            if (v98 == v48)
            {
              v98 = 0;
              LODWORD(v99) = 0;
            }
            WTF::fastFree(v48, (void *)a2);
          }
        }
        result = v95;
        if (v96)
        {
          v50 = HIDWORD(v99);
          v51 = 8 * v96;
          v52 = v51;
          do
          {
            v53 = v98;
            v54 = *(_QWORD *)result;
            *(_QWORD *)result = 0;
            result = (WTF::StringImpl *)((char *)result + 8);
            *((_QWORD *)v53 + v50++) = v54;
            v52 -= 8;
          }
          while (v52);
          HIDWORD(v99) = v50;
          v55 = (WTF::StringImpl **)v95;
          do
          {
            v56 = *v55;
            *v55 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v56 -= 2;
            }
            ++v55;
            v51 -= 8;
          }
          while (v51);
          result = v95;
        }
        if (&v97 != (uint64_t *)result && result != 0)
          result = (WTF::StringImpl *)WTF::fastFree(result, (void *)a2);
        v29 = (WTF *)((char *)v29 + 8);
      }
      while (v29 != v30);
      v58 = HIDWORD(v99);
      if (HIDWORD(v102) <= HIDWORD(v99))
      {
        if (HIDWORD(v99) > v102)
        {
          if ((_DWORD)v102)
          {
            v61 = v101;
            if (HIDWORD(v102))
            {
              v80 = 8 * HIDWORD(v102);
              do
              {
                result = *(WTF::StringImpl **)v61;
                *(_QWORD *)v61 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)result -= 2;
                }
                v61 = (WTF *)((char *)v61 + 8);
                v80 -= 8;
              }
              while (v80);
              HIDWORD(v102) = 0;
              v61 = v101;
            }
            if (&v103 == (WTF::StringImpl **)v61 || v61 == 0)
            {
              if (!v61)
                goto LABEL_149;
            }
            else
            {
              v101 = 0;
              LODWORD(v102) = 0;
              result = (WTF::StringImpl *)WTF::fastFree(v61, (void *)a2);
              if (!v101)
              {
LABEL_149:
                v101 = (WTF *)&v103;
                v63 = 1;
                LODWORD(v102) = 1;
                goto LABEL_104;
              }
            }
            v63 = v102;
          }
          else
          {
            v63 = 0;
          }
LABEL_104:
          v64 = HIDWORD(v99);
          if (v63 < HIDWORD(v99))
          {
            v65 = v101;
            v66 = HIDWORD(v102);
            if (HIDWORD(v99) < 2)
            {
              v67 = (WTF *)&v103;
              v101 = (WTF *)&v103;
              LODWORD(v102) = 1;
            }
            else
            {
              if (HIDWORD(v99) >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x19580FA4CLL);
              }
              v67 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v99)));
              LODWORD(v102) = v64;
              v101 = v67;
            }
            result = (WTF::StringImpl *)memcpy(v67, v65, 8 * v66);
            if (&v103 != (WTF::StringImpl **)v65 && v65)
            {
              if (v101 == v65)
              {
                v101 = 0;
                LODWORD(v102) = 0;
              }
              result = (WTF::StringImpl *)WTF::fastFree(v65, (void *)a2);
            }
          }
        }
LABEL_110:
        v58 = HIDWORD(v102);
        goto LABEL_111;
      }
      v59 = (WTF::StringImpl **)((char *)v101 + 8 * HIDWORD(v99));
      v60 = 8 * HIDWORD(v102) - 8 * HIDWORD(v99);
      do
      {
        result = *v59;
        *v59 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        ++v59;
        v60 -= 8;
      }
      while (v60);
      HIDWORD(v102) = v58;
LABEL_111:
      v68 = v98;
      v69 = v101;
      if ((_DWORD)v58)
      {
        v70 = 8 * v58;
        do
        {
          v71 = *(WTF::StringImpl **)v68;
          if (*(_QWORD *)v68)
            *(_DWORD *)v71 += 2;
          result = *(WTF::StringImpl **)v69;
          *(_QWORD *)v69 = v71;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)result -= 2;
          }
          v68 = (WTF *)((char *)v68 + 8);
          v69 = (WTF *)((char *)v69 + 8);
          v70 -= 8;
        }
        while (v70);
        v68 = v98;
        v72 = HIDWORD(v102);
        v69 = v101;
      }
      else
      {
        v72 = 0;
      }
      v73 = HIDWORD(v99);
      v74 = 8 * HIDWORD(v99);
      if (v72 != HIDWORD(v99))
      {
        v75 = (_QWORD *)((char *)v69 + 8 * v72);
        v76 = (_DWORD **)((char *)v68 + 8 * v72);
        v77 = v74 - 8 * v72;
        do
        {
          v78 = *v76;
          if (*v76)
            *v78 += 2;
          *v75++ = v78;
          ++v76;
          v77 -= 8;
        }
        while (v77);
      }
      HIDWORD(v102) = v73;
      if (v73)
      {
        do
        {
          result = *(WTF::StringImpl **)v68;
          *(_QWORD *)v68 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)result -= 2;
          }
          v68 = (WTF *)((char *)v68 + 8);
          v74 -= 8;
        }
        while (v74);
        v68 = v98;
      }
      if (&v100 != (uint64_t *)v68 && v68)
      {
        v98 = 0;
        LODWORD(v99) = 0;
        result = (WTF::StringImpl *)WTF::fastFree(v68, (void *)a2);
      }
      v9 = v94;
      if (v73)
      {
        v12 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v12 + 200) + 8) + 40);
        if (v12 && (*(_WORD *)(v12 + 28) & 0x80) != 0)
          continue;
      }
      break;
    }
  }
  v14 = v101;
  v15 = HIDWORD(v102);
  if (HIDWORD(v102))
  {
    v16 = *(unsigned int *)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 12);
    v18 = v17 + HIDWORD(v102);
    if (v18 > v16)
    {
      v19 = v16 + (v16 >> 2);
      if (v19 >= 0x10)
        v20 = v19 + 1;
      else
        v20 = 16;
      if (v20 <= v18)
        v21 = v17 + HIDWORD(v102);
      else
        v21 = v20;
      v22 = *(char **)a2;
      if (v21 < 5)
      {
        v23 = (void *)(a2 + 16);
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 8) = 4;
      }
      else
      {
        if (v21 >> 29)
        {
LABEL_202:
          __break(0xC471u);
          JUMPOUT(0x19580FA34);
        }
        v23 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
        *(_DWORD *)(a2 + 8) = v21;
        *(_QWORD *)a2 = v23;
      }
      result = (WTF::StringImpl *)memcpy(v23, v22, 8 * v17);
      if ((char *)(a2 + 16) != v22 && v22)
      {
        if (*(char **)a2 == v22)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        result = (WTF::StringImpl *)WTF::fastFree((WTF *)v22, (void *)a2);
      }
    }
    v87 = *(unsigned int *)(a2 + 12);
    if (v18 < v87)
    {
      __break(0xC471u);
      JUMPOUT(0x19580FA44);
    }
    v88 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8 * v87);
    v89 = 8 * v15;
    do
    {
      v90 = *(WTF::StringImpl **)v14;
      if (*(_QWORD *)v14)
        *(_DWORD *)v90 += 2;
      *v88++ = v90;
      v14 = (WTF *)((char *)v14 + 8);
      v89 -= 8;
    }
    while (v89);
    *(_DWORD *)(a2 + 12) = v18;
    v14 = v101;
    if (HIDWORD(v102))
    {
      v91 = 8 * HIDWORD(v102);
      do
      {
        result = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        v14 = (WTF *)((char *)v14 + 8);
        v91 -= 8;
      }
      while (v91);
      v14 = v101;
    }
  }
  if (&v103 != (WTF::StringImpl **)v14 && v14 != 0)
  {
    v101 = 0;
    LODWORD(v102) = 0;
    return (WTF::StringImpl *)WTF::fastFree(v14, (void *)a2);
  }
  return result;
}

uint64_t WebCore::MediaQueryList::eventTargetInterface(WebCore::MediaQueryList *this)
{
  return 64;
}

uint64_t WebCore::MediaQueryList::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

void WebCore::MediaQueryList::derefEventTarget(WebCore::MediaQueryList *this)
{
  WTF::RefCounted<WebCore::MediaQueryList>::deref((_DWORD *)this + 6);
}

uint64_t WebCore::MediaQueryList::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

void WebCore::MediaQueryList::deref(WebCore::MediaQueryList *this)
{
  WTF::RefCounted<WebCore::MediaQueryList>::deref((_DWORD *)this + 6);
}

uint64_t `non-virtual thunk to'WebCore::MediaQueryList::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

void `non-virtual thunk to'WebCore::MediaQueryList::deref(WebCore::MediaQueryList *this)
{
  WTF::RefCounted<WebCore::MediaQueryList>::deref((_DWORD *)this - 2);
}

void WebCore::PropertySetCSSStyleDeclaration::~PropertySetCSSStyleDeclaration(WebCore::PropertySetCSSStyleDeclaration *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  WebCore::PropertySetCSSStyleDeclaration *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::PropertySetCSSStyleDeclaration *v16;

  *(_QWORD *)this = off_1E3399C18;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v16 = this;
    v5 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)(v2 + 16 * i) != -1)
        {
          v7 = v2 + 16 * i;
          v8 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v8);
              v14 = i;
              v15 = v2;
              v13 = v5;
              WTF::fastFree((WTF *)v8, a2);
              v5 = v13;
              i = v14;
              v2 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
    this = v16;
  }
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v11 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v11)
    {
      v12 = this;
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, a2);
      else
        --*(_DWORD *)v11;
      this = v12;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  WebCore::PropertySetCSSStyleDeclaration *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::PropertySetCSSStyleDeclaration *v16;

  *(_QWORD *)this = off_1E3399C18;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v16 = this;
    v5 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)(v2 + 16 * i) != -1)
        {
          v7 = v2 + 16 * i;
          v8 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v8);
              v14 = i;
              v15 = v2;
              v13 = v5;
              WTF::fastFree((WTF *)v8, a2);
              v5 = v13;
              i = v14;
              v2 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
    this = v16;
  }
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v11 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v11)
    {
      v12 = this;
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, a2);
      else
        --*(_DWORD *)v11;
      this = v12;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::cssRules(WebCore::PropertySetCSSStyleDeclaration *this)
{
  return 0;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::willMutate(WebCore::PropertySetCSSStyleDeclaration *this)
{
  return 1;
}

void WebCore::InlineCSSStyleDeclaration::~InlineCSSStyleDeclaration(WebCore::InlineCSSStyleDeclaration *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::InlineCSSStyleDeclaration::~InlineCSSStyleDeclaration(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v9)
      {
        v19 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v19;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v18 = v3;
        WTF::fastFree(v10, a2);
        v3 = v18;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E3399C18;
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v11 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)(v6 + 16 * i) != -1)
        {
          v13 = v6 + 16 * i;
          v14 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              v21 = i;
              v22 = v6;
              v20 = v11;
              WTF::fastFree((WTF *)v14, a2);
              v11 = v20;
              i = v21;
              v6 = v22;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v17 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, a2);
      else
        --*(_DWORD *)v17;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::StyleRuleCSSStyleDeclaration::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 40);
  return this;
}

WebCore::StyleRuleCSSStyleDeclaration *WebCore::StyleRuleCSSStyleDeclaration::deref(WebCore::StyleRuleCSSStyleDeclaration *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 10) == 1)
  {
    WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(this, a2);
    return (WebCore::StyleRuleCSSStyleDeclaration *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 10);
  }
  return this;
}

uint64_t WebCore::StyleRuleCSSStyleDeclaration::parentRule(WebCore::StyleRuleCSSStyleDeclaration *this)
{
  return *((_QWORD *)this + 6);
}

void WebCore::MediaQueryListEvent::~MediaQueryListEvent(WebCore::MediaQueryListEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::Style::ResolvedStyle::~ResolvedStyle(WebCore::Style::ResolvedStyle *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  WebCore::RenderStyle *v12;
  WTF *v13;
  void *v14;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *(WTF **)(v3 + 56);
    if ((WTF *)(v3 + 72) != v4 && v4 != 0)
    {
      *(_QWORD *)(v3 + 56) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      WTF::fastFree(v4, a2);
    }
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 40, (WTF::StringImpl *)a2);
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 24, v6);
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 8, v7);
    WTF::fastFree((WTF *)v3, v8);
  }
  v9 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    v10 = *(WTF **)v9;
    if ((WTF *)((char *)v9 + 16) != *(WTF **)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      WTF::fastFree(v10, a2);
    }
    WTF::fastFree(v9, a2);
  }
  v12 = *(WebCore::RenderStyle **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    WebCore::RenderStyle::~RenderStyle(v12, a2);
    if (*(_DWORD *)v13)
    {
      *((_OWORD *)v13 + 2) = 0u;
      *((_OWORD *)v13 + 3) = 0u;
      *(_OWORD *)v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v13, v14);
    }
  }
}

WebCore::StyleAttributeMutationScope *WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope(WebCore::StyleAttributeMutationScope *this, WebCore::Element *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WTF::StringImpl **v6;
  WebCore::MutationObserverInterestGroup *v8;
  WebCore::MutationObserver ***v9;
  _BOOL4 isOldValueRequested;
  WebCore::Element *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  WebCore::CustomElementReactionQueue *v16;
  WTF::StringImpl *Attribute;
  WebCore::MutationObserverInterestGroup *v18;

  *((_QWORD *)this + 1) = 0;
  v6 = (WTF::StringImpl **)((char *)this + 8);
  *(_QWORD *)this = 0;
  if (a2)
    *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)this + 2) = a2;
  *((_WORD *)this + 12) = 0;
  if (!WebCore::StyleAttributeMutationScope::s_scopeCount++)
  {
    WebCore::StyleAttributeMutationScope::s_currentScope = (uint64_t)this;
    if (a2)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 3364) & 2) != 0)
      {
        WebCore::MutationObserverInterestGroup::createIfNeeded((uint64_t)a2, 2, 32, (uint64_t)&WebCore::HTMLNames::styleAttr, (uint64_t *)&v18);
        v8 = v18;
      }
      else
      {
        v8 = 0;
      }
      v9 = *(WebCore::MutationObserver ****)this;
      *(_QWORD *)this = v8;
      if (v9)
      {
        if (*v9)
          WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(*v9, a2);
        WTF::fastFree((WTF *)v9, a2);
        v8 = *(WebCore::MutationObserverInterestGroup **)this;
      }
      if (v8)
        isOldValueRequested = WebCore::MutationObserverInterestGroup::isOldValueRequested(v8);
      else
        isOldValueRequested = 0;
      v11 = (WebCore::Element *)*((_QWORD *)this + 2);
      v12 = *((_QWORD *)v11 + 9);
      v14 = (v12 & 0x3000000000000000) == 0x2000000000000000;
      v13 = v12 & 0xFFFFFFFFFFFFLL;
      v14 = !v14 || v13 == 0;
      if (!v14)
      {
        v16 = *(WebCore::CustomElementReactionQueue **)(v13 + 96);
        if (v16)
        {
          if (WebCore::CustomElementReactionQueue::observesStyleAttribute(v16))
          {
            *((_BYTE *)this + 24) = 1;
            goto LABEL_24;
          }
        }
      }
      if (isOldValueRequested)
      {
LABEL_24:
        Attribute = (WTF::StringImpl *)WebCore::Element::getAttribute(v11, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, a3, a4, a5);
        WTF::AtomString::operator=(v6, Attribute);
      }
    }
  }
  return this;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(WebCore::MutationObserver **a1, void *a2)
{
  uint64_t v3;
  WebCore::MutationObserver **v4;
  WebCore::MutationObserver *v5;
  void *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebCore::MutationObserver *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::MutationObserver::~MutationObserver(v5);
            WebCore::MediaQueryList::operator delete(v6);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope(WebCore::StyleAttributeMutationScope *this, void *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::MutationObserver ***v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **Attribute;
  const WTF::AtomString *v12;
  WTF::StringImpl *v13;

  if (!--WebCore::StyleAttributeMutationScope::s_scopeCount)
  {
    WebCore::StyleAttributeMutationScope::s_currentScope = 0;
    if (*((_BYTE *)this + 25))
    {
      v6 = *((_QWORD *)this + 2);
      if (v6)
      {
        if (*(_QWORD *)this)
        {
          WebCore::MutationRecord::createAttributes(v6, (uint64_t)&WebCore::HTMLNames::styleAttr, (_DWORD **)this + 1, (uint64_t *)&v13);
          WebCore::MutationObserverInterestGroup::enqueueMutationRecord(*(uint64_t **)this, &v13);
          v10 = v13;
          v13 = 0;
          if (v10)
          {
            if (*((_DWORD *)v10 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
            else
              --*((_DWORD *)v10 + 2);
          }
        }
        if (*((_BYTE *)this + 24))
        {
          Attribute = (WTF::StringImpl **)WebCore::Element::getAttribute(*((WebCore::Element **)this + 2), (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, a3, a4, a5);
          WebCore::CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded(*((WebCore::Element **)this + 2), (WTF::StringImpl ***)&WebCore::HTMLNames::styleAttr, (WTF::StringImpl **)this + 1, Attribute, v12);
        }
      }
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WebCore::MutationObserver ****)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*v9)
      WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(*v9, a2);
    WTF::fastFree((WTF *)v9, a2);
  }
}

uint64_t WTF::HashTable<WebCore::CSSValue *,WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashMap<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashTraits<WebCore::CSSValue *>,WTF::HashTraits<WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValue *>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 16 * i) != -1)
      {
        v5 = a1 + 16 * i;
        v6 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::Relation>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    v11 = (_OWORD *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_13;
  }
  if (!(v9 >> 28))
  {
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      v13 = v5;
      do
      {
        v14 = *(_OWORD *)v13;
        v13 = (WTF *)((char *)v13 + 16);
        *v11++ = v14;
        v12 -= 16;
      }
      while (v12);
    }
    if ((WTF *)(v4 + 16) != v5 && v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(WTF **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 9)
  {
    v9 = (_OWORD *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 8;
    goto LABEL_11;
  }
  if (!(v5 >> 28))
  {
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    if ((_DWORD)v8)
    {
      v10 = 16 * v8;
      v11 = v7;
      do
      {
        v12 = *(_OWORD *)v11;
        v11 = (WTF *)((char *)v11 + 16);
        *v9++ = v12;
        v10 -= 16;
      }
      while (v10);
    }
    if ((WTF *)(v6 + 16) != v7 && v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::StringView::find(uint64_t result, unsigned int a2, unsigned int a3, double a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int16x8_t *v12;
  unint64_t v13;
  unint64_t v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t *v17;
  __int8 *v18;

  v6 = *(_QWORD *)result;
  v7 = *(unsigned int *)(result + 8);
  if (*(_BYTE *)(result + 12))
  {
    if (a2 <= 0xFF && v7 > a3)
    {
      v8 = v7 - a3;
      v9 = 16;
      if (v8 < 0x10)
        v9 = v8;
      if (v9)
      {
        v10 = v9;
        v11 = (unsigned __int8 *)(v6 + a3);
        while (*v11 != a2)
        {
          ++v11;
          if (!--v10)
            goto LABEL_10;
        }
        return (uint64_t)&v11[-v6];
      }
LABEL_10:
      if (v8 >= 0x11)
      {
        v11 = (unsigned __int8 *)memchr((void *)(v6 + a3 + v9), a2, v8 - v9);
        if (v11)
          return (uint64_t)&v11[-v6];
      }
    }
    return -1;
  }
  if (v7 <= a3)
    return -1;
  v12 = (int16x8_t *)(v6 + 2 * a3);
  v13 = v6 + 2 * v7;
  v14 = v13 - (_QWORD)v12;
  if ((uint64_t)(v13 - (_QWORD)v12) <= -2)
  {
    __break(1u);
    return result;
  }
  if (v14 <= 0x3E)
  {
    while (v12->u16[0] != a2)
    {
      v12 = (int16x8_t *)((char *)v12 + 2);
      v14 -= 2;
      if (!v14)
        return -1;
    }
    goto LABEL_27;
  }
  v15 = vdupq_n_s16(a2);
  if ((unint64_t)&v12->u64[1] + 6 >= v13)
  {
    v17 = (int16x8_t *)(v6 + 2 * a3);
LABEL_24:
    if ((unint64_t)v17 < v13)
    {
      v12 = (int16x8_t *)(v13 - 16);
      v16 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v13 - 16), v15);
      v15.i16[0] = vmaxvq_u16((uint16x8_t)v16);
      if (v15.i32[0])
        goto LABEL_26;
    }
    return -1;
  }
  while (1)
  {
    v16 = (int8x16_t)vceqq_s16(*v12, v15);
    LOWORD(a6) = vmaxvq_u16((uint16x8_t)v16);
    if (a6 != 0.0)
      break;
    v17 = v12 + 1;
    v18 = &v12[1].i8[14];
    ++v12;
    if ((unint64_t)v18 >= v13)
      goto LABEL_24;
  }
LABEL_26:
  v12 = (int16x8_t *)((char *)v12
                    + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v16)));
LABEL_27:
  if (v12 == (int16x8_t *)v13)
    return -1;
  else
    return ((uint64_t)v12->i64 - v6) >> 1;
}

BOOL WTF::equalIgnoringASCIICase(uint64_t *a1, char *__s)
{
  uint64_t v2;
  unint64_t v4;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = __s ? strlen(__s) : 0;
  if (v4 != *(_DWORD *)(v2 + 4))
    return 0;
  v6 = *(unsigned __int8 **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) == 0)
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>((_BOOL8)v6, v4, (uint64_t)__s, v4, v4);
  if (!v4)
    return 1;
  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v6) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                             + *__s))
    return 0;
  v7 = 1;
  while (v4 != v7)
  {
    v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v6[v7]);
    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + __s[v7++]);
    if (v8 != v9)
    {
      v10 = v7 - 1;
      return v10 >= v4;
    }
  }
  v10 = v4;
  return v10 >= v4;
}

char *WTF::Vector<WTF::AtomString,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 5)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 4;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195810860);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 5)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 4;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>>,std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t *v16;

  if (result)
  {
    v3 = *(_DWORD *)(result - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v3 & ((0xD7862706ELL
               * (unint64_t)(277951225 * ((v6 >> 31) ^ v6)
                                  + 95187966 * ((v9 >> 31) ^ v9))) >> 4);
    v11 = (uint64_t *)(result + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (*v11 == a2 && v13 == a3)
    {
      return *(unsigned __int8 *)(result + 24 * v10 + 16);
    }
    else
    {
      v15 = 1;
      while (v12 | v13)
      {
        v10 = (v10 + v15) & v3;
        v16 = (uint64_t *)(result + 24 * v10);
        v12 = *v16;
        v13 = v16[1];
        ++v15;
        if (v12 == a2 && v13 == a3)
          return *(unsigned __int8 *)(result + 24 * v10 + 16);
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WebCore::Element const*,unsigned char>,WTF::KeyValuePair<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>>>,WTF::DefaultHash<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashMap<std::pair<WebCore::Element const*,unsigned char>,std::unique_ptr<WebCore::Style::HasSelectorFilter>,WTF::DefaultHash<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashTraits<std::pair<WebCore::Element const*,unsigned char>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::HasSelectorFilter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::Element const*,unsigned char>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  WTF *v30;
  _QWORD *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (uint64_t *)(v4 + 24 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        v13 = *((unsigned __int8 *)v11 + 8);
        if (v12)
          v14 = 0;
        else
          v14 = v13 == 0;
        if (!v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v19 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
          v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
          v24 = v16 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * ((v21 >> 31) ^ v21)
                                         + 95187966 * (v23 ^ HIWORD(v23)))) >> 4);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = v15 + 24 * v24;
            v24 = (v24 + v25++) & v16;
            if (*(_QWORD *)v27)
              v28 = 0;
            else
              v28 = *(_BYTE *)(v27 + 8) == 0;
          }
          while (!v28);
          v29 = v15 + 24 * v26;
          v32 = *(WTF **)(v29 + 16);
          v31 = (_QWORD *)(v29 + 16);
          v30 = v32;
          *v31 = 0;
          if (v32)
            WTF::fastFree(v30, v8);
          *(_OWORD *)v27 = *(_OWORD *)v11;
          v33 = v4 + 24 * v9;
          v34 = *(_QWORD *)(v33 + 16);
          *(_QWORD *)(v33 + 16) = 0;
          *v31 = v34;
          v18 = *(WTF **)(v33 + 16);
          *(_QWORD *)(v33 + 16) = 0;
          if (!v18)
            goto LABEL_26;
LABEL_25:
          WTF::fastFree(v18, v8);
          goto LABEL_26;
        }
        v17 = v4 + 24 * v9;
        v18 = *(WTF **)(v17 + 16);
        *(_QWORD *)(v17 + 16) = 0;
        if (v18)
          goto LABEL_25;
      }
LABEL_26:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::SelectorChecker::matchHasPseudoClass(WebCore::SelectorChecker::CheckingContext &,WebCore::Element const&,WebCore::CSSSelector const&)const::$_4::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v5;
  uint64_t i;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int matched;
  WTF::StringImpl *v14;
  uint64_t v15;
  __int16 v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  int v24;
  _QWORD v25[2];
  char v26;
  uint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  char v30;
  int v31;
  int v32;

  v2 = *(_QWORD *)(a2 + 80);
  if (v2)
  {
    v5 = *(_WORD *)(v2 + 28);
    if ((v5 & 8) != 0)
    {
      i = *(_QWORD *)(a2 + 80);
      goto LABEL_15;
    }
    do
    {
      if ((v5 & 4) == 0 || (i = *(_QWORD *)(v2 + 80)) == 0)
      {
        if (v2 == a2)
          return 0;
        while (1)
        {
          i = *(_QWORD *)(v2 + 56);
          if (i)
            break;
          v2 = *(_QWORD *)(v2 + 32);
          if (v2)
            v7 = v2 == a2;
          else
            v7 = 1;
          if (v7)
            return 0;
        }
      }
      v5 = *(_WORD *)(i + 28);
      v2 = i;
    }
    while ((v5 & 8) == 0);
    while (1)
    {
LABEL_15:
      while (1)
      {
        v8 = **(uint64_t ***)a1;
        if (v8)
        {
          v9 = *(_QWORD *)(i + 80);
          if (v9)
          {
            while ((*(_WORD *)(v9 + 28) & 8) == 0)
            {
              v9 = *(_QWORD *)(v9 + 56);
              if (!v9)
                goto LABEL_19;
            }
            if (WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>>,std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>(*v8, i, *(_QWORD *)(a1 + 8)) == 3)break;
          }
        }
LABEL_19:
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_QWORD *)(v10 + 8);
        v25[0] = *(_QWORD *)v10;
        v25[1] = i;
        v26 = 0;
        v27 = v25[0];
        v28 = 0;
        v30 = 0;
        v32 = 0;
        v31 = 65793;
        v24 = 0;
        matched = WebCore::SelectorChecker::matchRecursively(v11, *(_QWORD *)(v10 + 16), v25, &v24);
        if (*(_BYTE *)(*(_QWORD *)(v10 + 16) + 220))
          **(_BYTE **)(v10 + 24) = 1;
        if (v30)
        {
          v14 = v29;
          v29 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v12);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        if (!matched)
          return 1;
        v15 = *(_QWORD *)(i + 80);
        if (!v15)
        {
          if (i == a2)
            return 0;
          while (1)
          {
            v15 = *(_QWORD *)(i + 56);
            if (v15)
              break;
            i = *(_QWORD *)(i + 32);
            if (i)
              v18 = i == a2;
            else
              v18 = 1;
            if (v18)
              return 0;
          }
        }
        v16 = *(_WORD *)(v15 + 28);
        for (i = v15; (v16 & 8) == 0; v15 = i)
        {
          if ((v16 & 4) == 0 || (i = *(_QWORD *)(v15 + 80)) == 0)
          {
            if (v15 == a2)
              return 0;
            while (1)
            {
              i = *(_QWORD *)(v15 + 56);
              if (i)
                break;
              v15 = *(_QWORD *)(v15 + 32);
              if (v15)
                v17 = v15 == a2;
              else
                v17 = 1;
              if (v17)
                return 0;
            }
          }
          v16 = *(_WORD *)(i + 28);
        }
      }
      if (i == a2)
        return 0;
      if (!*(_QWORD *)(i + 56))
        break;
      i = *(_QWORD *)(i + 56);
LABEL_59:
      if ((*(_WORD *)(i + 28) & 8) == 0)
      {
        v21 = i;
        while (v21 != a2)
        {
          while (1)
          {
            i = *(_QWORD *)(v21 + 56);
            if (i)
              break;
            v21 = *(_QWORD *)(v21 + 32);
            if (v21)
              v22 = v21 == a2;
            else
              v22 = 1;
            if (v22)
              return 0;
          }
          v21 = *(_QWORD *)(v21 + 56);
          if ((*(_WORD *)(i + 28) & 8) != 0)
            goto LABEL_15;
        }
        return 0;
      }
    }
    v19 = i;
    while (1)
    {
      v19 = *(_QWORD *)(v19 + 32);
      if (!v19 || v19 == a2)
        break;
      i = *(_QWORD *)(v19 + 56);
      if (i)
        goto LABEL_59;
    }
  }
  return 0;
}

WebCore::MediaQueryMatcher *WTF::RefCounted<WebCore::MediaQueryMatcher>::deref(WebCore::MediaQueryMatcher *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::MediaQueryMatcher::~MediaQueryMatcher(result, a2);
    return (WebCore::MediaQueryMatcher *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::MediaQueryList*>(WebCore::MediaQueryList* const&)::{lambda(WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>(uint64_t *result, uint64_t *a2)
{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void *)*((unsigned int *)result + 3);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = *a2;
    while (1)
    {
      v6 = *(_QWORD *)(*result + 8 * (_QWORD)v4);
      if (v6)
        v6 = *(_QWORD *)(v6 + 8);
      if (v6 == v5)
        break;
      v4 = (char *)v4 + 1;
      if (v2 == v4)
        return result;
    }
    return WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t)result, v4);
  }
  return result;
}

uint64_t *WTF::Vector<WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, void *a2)
{
  uint64_t *v3;
  uint64_t *result;

  v3 = (uint64_t *)(*(_QWORD *)a1 + 8 * (_QWORD)a2);
  WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v3, a2);
  result = WTF::VectorMover<false,WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(v3 + 1, (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), v3);
  --*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t *WTF::VectorMover<false,WTF::WeakPtr<WebCore::MediaQueryList,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = a3;
  v5 = result;
  if (result <= a3)
  {
    if (a2 != result)
    {
      v6 = (uint64_t *)((char *)a3 + (((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFF8) - 8);
      result = a2 - 1;
      v7 = a2 - 1;
      do
      {
        v8 = *result;
        *v7-- = 0;
        *v6-- = v8;
        v9 = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(result, a2) == v5;
        result = v7;
      }
      while (!v9);
    }
  }
  else if (result != a2)
  {
    v10 = result;
    do
    {
      v11 = *v5;
      *v10++ = 0;
      *v3++ = v11;
      result = WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v5, a2);
      v5 = v10;
    }
    while (v10 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSProperty>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(_WORD *)v4 = *(_WORD *)result;
  v5 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void **WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 5)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 4;
    }
    else
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 16 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::add@<X0>(uint64_t *result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (unsigned __int16)*a2;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (uint64_t *)(v6 + 2 * v12);
  v14 = *(unsigned __int16 *)v13;
  if (*(_WORD *)v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v19 = 0;
        else
          v19 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 2 * v19;
        goto LABEL_33;
      }
      if (v14 == 0xFFFF)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (uint64_t *)(v6 + 2 * v12);
      v14 = *(unsigned __int16 *)v13;
      ++v16;
    }
    while (*(_WORD *)v13);
    if (v15)
    {
      *(_WORD *)v15 = 0;
      --*(_DWORD *)(*v4 - 16);
      LOWORD(v9) = *a2;
      v13 = v15;
    }
  }
  *(_WORD *)v13 = v9;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_28;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash(v4, v24, v13);
    v13 = result;
    v20 = *v4;
    if (*v4)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
  }
  v26 = v20 + 2 * v23;
  v25 = 1;
LABEL_33:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

uint64_t *WTF::HashTable<WebCore::CSSValue *,WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashMap<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashTraits<WebCore::CSSValue *>,WTF::HashTraits<WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValue *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = 1;
          do
          {
            v28 = v26;
            v29 = *(_QWORD *)(v21 + 16 * v26);
            v26 = (v26 + v27++) & v22;
          }
          while (v29);
          v30 = (uint64_t *)(v21 + 16 * v28);
          v31 = (unsigned int *)v30[1];
          v30[1] = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v10);
            }
          }
          *v30 = *v15;
          v34 = v6 + 16 * v13;
          v35 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          v30[1] = v35;
          v36 = *(unsigned int **)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v36);
              WTF::fastFree((WTF *)v36, v10);
            }
          }
          if (v15 == a3)
            v14 = v30;
        }
        else
        {
          v17 = v6 + 16 * v13;
          v18 = *(unsigned int **)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void **WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 5)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 4;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 8 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WTF::KeyValuePair<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch>>,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashMap<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>,WebCore::Style::HasPseudoClassMatch,WTF::DefaultHash<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>,WTF::HashTraits<WebCore::Style::HasPseudoClassMatch>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::Element const*,WebCore::CSSSelector const*>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = result + 16;
    do
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_BYTE *)(v10 + 16) = 0;
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (uint64_t *)(v4 + 24 * i);
      v13 = *v12;
      if (*v12 != -1)
      {
        v8 = v12[1];
        if (v13 | v8)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = (~(v8 << 32) + v8) ^ ((~(v8 << 32) + v8) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v8 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v21 = v15 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * ((v18 >> 31) ^ v18)
                                         + 95187966 * ((v8 >> 31) ^ v8))) >> 4);
          LODWORD(v8) = 1;
          do
          {
            v22 = v14 + 24 * v21;
            v21 = (v21 + v8) & v15;
            v8 = (v8 + 1);
          }
          while (*(_OWORD *)v22 != 0);
          v23 = *(_OWORD *)v12;
          *(_QWORD *)(v22 + 16) = v12[2];
          *(_OWORD *)v22 = v23;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), (void *)v8);
}

uint64_t WebCore::SelectorFilter::collectElementIdentifierHashes(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  int v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v3 = result;
  v4 = 13 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 96) + 40) + 16) >> 8);
  v33 = v4;
  v5 = a2[3];
  if ((_DWORD)v5 == a2[2])
  {
    result = WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v5 + 1, (unint64_t)&v33);
    v6 = *(unsigned int **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * a2[3]) = *(_DWORD *)result;
  }
  else
  {
    v6 = *(unsigned int **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v4;
  }
  v7 = a2[3] + 1;
  a2[3] = v7;
  v8 = *(_QWORD *)(v3 + 104);
  if (v8 && (v9 = *(_QWORD *)(v8 + 24)) != 0 || (v9 = *MEMORY[0x1E0CBF2F8]) != 0)
  {
    v30 = 17 * (*(_DWORD *)(v9 + 16) >> 8);
    v32 = v30;
    if ((_DWORD)v7 == a2[2])
    {
      result = WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v7 + 1, (unint64_t)&v32);
      v6 = *(unsigned int **)a2;
      *(_DWORD *)(*(_QWORD *)a2 + 4 * a2[3]) = *(_DWORD *)result;
      v8 = *(_QWORD *)(v3 + 104);
    }
    else
    {
      v6[v7] = v30;
    }
    LODWORD(v7) = a2[3] + 1;
    a2[3] = v7;
  }
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v11 = *(unsigned int *)(v10 + 12) + (unint64_t)v7;
      if (v11 > a2[2])
      {
        if (v11 < 5)
        {
          v29 = a2 + 4;
          *(_QWORD *)a2 = a2 + 4;
          a2[2] = 4;
        }
        else
        {
          if (v11 >> 30)
          {
            __break(0xC471u);
            return result;
          }
          v29 = (void *)WTF::fastMalloc((WTF *)(4 * v11));
          a2[2] = v11;
          *(_QWORD *)a2 = v29;
        }
        result = (uint64_t)memcpy(v29, v6, 4 * v7);
        if (a2 + 4 != v6)
        {
          if (*(unsigned int **)a2 == v6)
          {
            *(_QWORD *)a2 = 0;
            a2[2] = 0;
          }
          result = WTF::fastFree((WTF *)v6, a2);
        }
      }
      v12 = *(_QWORD *)(v8 + 16);
      if (v12)
        v13 = (uint64_t *)(v12 + 16);
      else
        v13 = 0;
      if (v12)
        v14 = v12 + 16 + 8 * *(unsigned int *)(v12 + 12);
      else
        v14 = 0;
      if (v13 != (uint64_t *)v14)
      {
        v15 = *(unsigned int **)a2;
        v16 = a2[3];
        do
        {
          v17 = *v13++;
          v15[v16] = 19 * (*(_DWORD *)(v17 + 16) >> 8);
          v16 = a2[3] + 1;
          a2[3] = v16;
        }
        while (v13 != (uint64_t *)v14);
      }
    }
    v18 = *(_QWORD *)(v3 + 104);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 + 4);
      if ((v19 & 1) != 0)
      {
        v21 = *(_DWORD *)(v18 + 52);
        if (v21)
        {
          v20 = *(_QWORD *)(v18 + 40);
          goto LABEL_21;
        }
      }
      else if (v19 >= 0x20)
      {
        v20 = v18 + 32;
        v21 = v19 >> 5;
LABEL_21:
        v22 = 0;
        while (1)
        {
          v23 = *(_QWORD *)(v20 + 16 * v22);
          if ((*(_WORD *)(v3 + 28) & 0x10) != 0)
            v24 = (WTF::StringImpl **)(v23 + 24);
          else
            v24 = (WTF::StringImpl **)(v23 + 40);
          v25 = *v24;
          if (*v24)
            *(_DWORD *)v25 += 2;
          if (*(WTF::StringImpl **)(WebCore::HTMLNames::classAttr + 24) != v25
            && *(WTF::StringImpl **)(WebCore::HTMLNames::idAttr + 24) != v25
            && *(WTF::StringImpl **)(WebCore::HTMLNames::styleAttr + 24) != v25)
          {
            break;
          }
          if (v25)
            goto LABEL_32;
LABEL_34:
          v28 = v22 + 1;
          v22 = (v22 + 1);
          if (v21 == v28)
            return result;
        }
        v26 = 23 * (*((_DWORD *)v25 + 4) >> 8);
        v31 = v26;
        v27 = a2[3];
        if ((_DWORD)v27 == a2[2])
        {
          result = WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v27 + 1, (unint64_t)&v31);
          *(_DWORD *)(*(_QWORD *)a2 + 4 * a2[3]) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v27) = v26;
        }
        ++a2[3];
LABEL_32:
        if (*(_DWORD *)v25 == 2)
          result = WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v25 -= 2;
        goto LABEL_34;
      }
    }
  }
  return result;
}

WTF *WebCore::SelectorFilter::pushParentInitializingIfNeeded(WebCore::SelectorFilter *this, WebCore::Element *a2)
{
  if (*((_DWORD *)this + 3))
    return WebCore::SelectorFilter::pushParent(this, a2);
  else
    return WebCore::SelectorFilter::initializeParentStack(this, a2);
}

void WebCore::SelectorFilter::popParentsUntil(WebCore::SelectorFilter *this, WebCore::Element *a2)
{
  uint64_t v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;

  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2)
  {
    v5 = (char *)this + 16;
    if (a2)
    {
      while (1)
      {
        v6 = *(_QWORD *)this;
        v7 = v2 - 1;
        if (*(WebCore::Element **)(*(_QWORD *)this + 40 * (v2 - 1)) == a2)
          break;
        v8 = v6 + 40 * v7;
        v9 = v8 + 8;
        v10 = *(unsigned int *)(v8 + 20);
        if ((_DWORD)v10)
        {
          v11 = 0;
          while (v11 < *(unsigned int *)(v9 + 12))
          {
            v12 = *(unsigned int *)(*(_QWORD *)v9 + 4 * v11);
            v13 = v5[v12 & 0xFFF];
            if (v13 != 255)
              v5[v12 & 0xFFF] = v13 - 1;
            v14 = (v12 >> 16) & 0xFFF;
            v15 = v5[v14];
            if (v15 != 255)
              v5[v14] = v15 - 1;
            if (v10 == ++v11)
              goto LABEL_12;
          }
          goto LABEL_35;
        }
LABEL_12:
        v16 = *(WTF **)v9;
        if (v6 + 40 * v7 + 24 != *(_QWORD *)v9 && v16 != 0)
        {
          *(_QWORD *)v9 = 0;
          *(_DWORD *)(v6 + 40 * v7 + 16) = 0;
          WTF::fastFree(v16, a2);
        }
        v2 = v7;
        *((_DWORD *)this + 3) = v7;
        if (!(_DWORD)v7)
          goto LABEL_18;
      }
    }
    else
    {
      while (1)
      {
        v18 = *(_QWORD *)this;
        v19 = v2 - 1;
        v20 = *(_QWORD *)this + 40 * (v2 - 1);
        v21 = v20 + 8;
        v22 = *(unsigned int *)(v20 + 20);
        if ((_DWORD)v22)
          break;
LABEL_28:
        v28 = *(WTF **)v21;
        if (v18 + 40 * v19 + 24 != *(_QWORD *)v21 && v28 != 0)
        {
          *(_QWORD *)v21 = 0;
          *(_DWORD *)(v18 + 40 * v19 + 16) = 0;
          WTF::fastFree(v28, a2);
        }
        v2 = v19;
        *((_DWORD *)this + 3) = v19;
        if (!(_DWORD)v19)
        {
LABEL_18:
          bzero(v5, 0x1000uLL);
          return;
        }
      }
      v23 = 0;
      while (v23 < *(unsigned int *)(v21 + 12))
      {
        v24 = *(unsigned int *)(*(_QWORD *)v21 + 4 * v23);
        v25 = v5[v24 & 0xFFF];
        if (v25 != 255)
          v5[v24 & 0xFFF] = v25 - 1;
        v26 = (v24 >> 16) & 0xFFF;
        v27 = v5[v26];
        if (v27 != 255)
          v5[v26] = v27 - 1;
        if (v22 == ++v23)
          goto LABEL_28;
      }
LABEL_35:
      __break(0xC471u);
    }
  }
}

uint64_t WebCore::SelectorFilter::collectSelectorHashes(uint64_t result, int *a2, char a3)
{
  int *v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  int v8;

  v3 = a2;
  v4 = result;
  if ((a3 & 1) != 0)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v3 = a2 + 4;
    if ((*a2 & 0x80000) != 0)
      return result;
    v5 = *a2 & 0xF;
    v6 = 256;
  }
  v7 = v6 | v5;
  do
  {
    if ((_BYTE)v7)
    {
      if (v7 - 1 >= 2)
      {
        if (v7 - 3 < 5)
          v7 = 256;
      }
      else
      {
        result = WebCore::SelectorFilter::collectSimpleSelectorHash(v4, v3);
        v7 = 0;
      }
    }
    else if ((v7 & 0xFF00) == 0)
    {
      result = WebCore::SelectorFilter::collectSimpleSelectorHash(v4, v3);
    }
    v8 = *v3;
    v3 += 4;
    v7 = v7 & 0xFF00 | v8 & 0xF;
  }
  while ((v8 & 0x80000) == 0);
  return result;
}

uint64_t WebCore::SelectorFilter::collectHashesForTesting@<X0>(WebCore::SelectorFilter *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a2 + 2;
  a2[1] = 8;
  a2[6] = a2 + 8;
  a2[7] = 8;
  a2[12] = a2 + 14;
  a2[13] = 8;
  a2[18] = a2 + 20;
  a2[19] = 8;
  return WebCore::SelectorFilter::collectSelectorHashes((uint64_t)a2, (int *)this, 0);
}

uint64_t WebCore::ShorthandSerializer::commonSerializationChecks(uint64_t this, const WebCore::StyleProperties *a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  unint64_t v5;
  uint64_t v7;
  char *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  v5 = *(unsigned int *)(this + 8);
  if (!(_DWORD)v5)
    goto LABEL_92;
  v7 = this;
  v8 = (char *)a2 + 8;
  v9 = **(unsigned __int16 **)this;
  v10 = *((unsigned int *)a2 + 1);
  if ((v10 & 8) != 0)
  {
    LODWORD(v11) = *((_DWORD *)a2 + 7);
    while (1)
    {
      LODWORD(v11) = v11 - 1;
      if ((int)v11 < 0)
        return 1;
      if ((*(_WORD *)(*((_QWORD *)a2 + 2) + 16 * v11) & 0x3FF) == v9)
        goto LABEL_6;
    }
  }
  v11 = v10 >> 4;
  do
  {
    v34 = v11-- < 1;
    if (v34)
      return 1;
  }
  while ((*(_WORD *)&v8[2 * v11] & 0x3FF) != v9);
  if ((_DWORD)v11 == -1)
    return 1;
LABEL_6:
  if ((v10 & 8) != 0)
  {
    if (*((_DWORD *)a2 + 7) <= v11)
    {
LABEL_91:
      __break(0xC471u);
      goto LABEL_92;
    }
    v12 = (char *)(*((_QWORD *)a2 + 2) + 16 * v11);
    v14 = *((_QWORD *)v12 + 1);
  }
  else
  {
    v12 = &v8[2 * v11];
    v13 = &v8[5 * v11 + ((v10 >> 3) & 0x1FFFFFFE)];
    v14 = *(unsigned int *)v13 | ((unint64_t)v13[4] << 32);
  }
  v15 = *(unsigned __int16 *)v12;
  this = 1;
  v16 = (v15 >> 13) & 1;
  if ((v16 == 0) == (unsigned __int16)(v15 & 0x2000) >> 13)
    return this;
  v17 = (*(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16)) & 0x3F800;
  if (v17)
  {
    if (v17 == 114688)
      return this;
    if (v17 == 94208)
    {
      v19 = *(unsigned __int16 *)(v14 + 8);
      v18 = v14;
      if (v19 != *(unsigned __int16 *)(v7 + 12))
        return this;
      goto LABEL_13;
    }
  }
  else if ((*(_WORD *)(v14 + 4) & 0x17F) == 0x50 && (unsigned __int16)(*(_WORD *)(v14 + 8) - 6) >= 0xFFFBu)
  {
    v18 = 0;
    v21 = 0;
    if ((*(_WORD *)(v14 + 4) & 0x7F) == 0x50)
      v20 = *(unsigned __int16 *)(v14 + 8);
    else
      v20 = 0;
    goto LABEL_16;
  }
  v18 = 0;
  v19 = *(unsigned __int16 *)(v7 + 12);
LABEL_13:
  if (v19 == 459)
  {
    v20 = 0;
    this = 0;
  }
  else
  {
    WTF::RefPtr<WebCore::CSSValueContainingVector const,WTF::RawPtrTraits<WebCore::CSSValueContainingVector const>,WTF::DefaultRefDerefTraits<WebCore::CSSValueContainingVector const>>::operator=((WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)v14);
    v20 = 0;
    this = 0;
    v5 = *(unsigned int *)(v7 + 8);
  }
  v21 = 1;
LABEL_16:
  if (v5 < 2)
  {
    LOWORD(v33) = v20;
LABEL_75:
    if ((_DWORD)this)
    {
      v36 = (_DWORD *)*WebCore::nameString((unsigned __int16)v33);
      if (v36)
        *v36 += 2;
      v37 = *(WTF::StringImpl **)(v7 + 160);
      *(_QWORD *)(v7 + 160) = v36;
      if (!v37)
        return 1;
      goto LABEL_79;
    }
    if (v21)
    {
      if (!v18)
        return 0;
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v41, *(_QWORD *)(v18 + 16), a3, a4, a5);
      v40 = v41;
      v41 = 0;
      v37 = *(WTF::StringImpl **)(v7 + 160);
      *(_QWORD *)(v7 + 160) = v40;
      if (!v37)
        return 1;
      v38 = *(_DWORD *)v37 - 2;
      if (*(_DWORD *)v37 != 2)
        goto LABEL_80;
      WTF::StringImpl::destroy(v37, v39);
      v37 = v41;
      v41 = 0;
      if (!v37)
        return 1;
LABEL_79:
      v38 = *(_DWORD *)v37 - 2;
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::destroy(v37, v35);
        return 1;
      }
LABEL_80:
      *(_DWORD *)v37 = v38;
      return 1;
    }
LABEL_92:
    __break(1u);
    return this;
  }
  v22 = 1;
  v23 = this;
  while (2)
  {
    v24 = *(unsigned __int16 *)(*(_QWORD *)v7 + 2 * v22);
    v25 = *((unsigned int *)a2 + 1);
    if ((v25 & 8) != 0)
    {
      LODWORD(v26) = *((_DWORD *)a2 + 7);
      while (1)
      {
        LODWORD(v26) = v26 - 1;
        if ((int)v26 < 0)
          return 1;
        if ((*(_WORD *)(*((_QWORD *)a2 + 2) + 16 * v26) & 0x3FF) == v24)
          goto LABEL_22;
      }
    }
    v26 = v25 >> 4;
    do
    {
      v34 = v26-- < 1;
      if (v34)
        return 1;
    }
    while ((*(_WORD *)&v8[2 * v26] & 0x3FF) != v24);
    if ((_DWORD)v26 == -1)
      return 1;
LABEL_22:
    if ((v25 & 8) != 0)
    {
      if (*((_DWORD *)a2 + 7) <= v26)
        goto LABEL_91;
      v27 = (char *)(*((_QWORD *)a2 + 2) + 16 * v26);
      v29 = *((_QWORD *)v27 + 1);
    }
    else
    {
      v27 = &v8[2 * v26];
      v28 = &v8[5 * v26 + ((v25 >> 3) & 0x1FFFFFFE)];
      v29 = *(unsigned int *)v28 | ((unint64_t)v28[4] << 32);
    }
    v30 = *(unsigned __int16 *)v27;
    if ((v16 == 0) == (unsigned __int16)(v30 & 0x2000) >> 13)
      return 1;
    v31 = (*(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16)) & 0x3F800;
    if (v31)
    {
      this = 1;
      if (v23 || v31 == 114688)
        return this;
      if (v31 == 94208)
      {
        v32 = v29;
        if (*(unsigned __int16 *)(v29 + 8) != *(unsigned __int16 *)(v7 + 12))
          return this;
        goto LABEL_47;
      }
LABEL_46:
      v32 = 0;
LABEL_47:
      if (v21)
      {
        if ((v18 == 0) == (v32 != 0))
          return 1;
      }
      else
      {
        v18 = v32;
      }
      if (*(_WORD *)(v7 + 12) == 459)
      {
        this = 0;
      }
      else
      {
        WTF::RefPtr<WebCore::CSSValueContainingVector const,WTF::RawPtrTraits<WebCore::CSSValueContainingVector const>,WTF::DefaultRefDerefTraits<WebCore::CSSValueContainingVector const>>::operator=((WTF::StringImpl **)(v7 + 8 * v22 + 16), (WTF::StringImpl *)v29);
        this = 0;
        v5 = *(unsigned int *)(v7 + 8);
      }
      v21 = 1;
      v33 = v20;
      goto LABEL_52;
    }
    if ((*(_WORD *)(v29 + 4) & 0x17F) != 0x50 || (unsigned __int16)(*(_WORD *)(v29 + 8) - 6) < 0xFFFBu)
    {
      if (v23)
        return 1;
      goto LABEL_46;
    }
    if ((this & 1) == 0)
      return 1;
    if ((*(_WORD *)(v29 + 4) & 0x7F) == 0x50)
      v33 = *(unsigned __int16 *)(v29 + 8);
    else
      v33 = 0;
    this = 1;
    if (!v23 || (_DWORD)v33 == (unsigned __int16)v20)
    {
LABEL_52:
      v16 = (v30 >> 13) & 1;
      ++v22;
      v23 = this;
      v20 = v33;
      if (v22 < v5)
        continue;
      goto LABEL_75;
    }
    return this;
  }
}

uint64_t WebCore::StyleProperties::findPropertyIndex(uint64_t result, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned int *)(result + 4);
  if ((v2 & 8) != 0)
  {
    v3 = *(_QWORD *)(result + 16);
    LODWORD(result) = *(_DWORD *)(result + 28);
    while (1)
    {
      result = (result - 1);
      if ((int)result < 0)
        break;
      if ((*(_WORD *)(v3 + 16 * result) & 0x3FF) == a2)
        return result;
    }
  }
  else
  {
    v4 = result + 8;
    result = v2 >> 4;
    while (result-- >= 1)
    {
      if ((*(_WORD *)(v4 + 2 * result) & 0x3FF) == a2)
        return result;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::StyleProperties::propertyAt(uint64_t this, unsigned int a2)
{
  if ((*(_DWORD *)(this + 4) & 8) != 0)
  {
    if (*(_DWORD *)(this + 28) <= a2)
      __break(0xC471u);
    else
      return *(_QWORD *)(this + 16) + 16 * a2;
  }
  else
  {
    this += 8 + 2 * a2;
  }
  return this;
}

void WebCore::ShorthandSerializer::serialize(WebCore::ShorthandSerializer *this@<X0>, WTF::StringBuilder *a2@<X2>, WTF::String *a3@<X3>, WebCore::ShorthandSerializer *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v6;
  WebCore::ShorthandSerializer *v7;
  uint64_t v8;
  char *v9;
  WebCore *v10;
  size_t v11;

  if (*((_BYTE *)this + 168))
  {
    v6 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    *(_QWORD *)a4 = v6;
  }
  else
  {
    switch(*((_WORD *)this + 6))
    {
      case 0x1CC:
      case 0x1CD:
      case 0x1CE:
      case 0x1FD:
      case 0x1FF:
      case 0x21A:
      case 0x223:
      case 0x225:
        WebCore::ShorthandSerializer::serializeLayered(a4, (uint64_t *)this);
        return;
      case 0x1CF:
        v7 = a4;
        v8 = 4;
        goto LABEL_12;
      case 0x1D0:
      case 0x1D9:
        v7 = a4;
        v8 = 2;
LABEL_12:
        WebCore::ShorthandSerializer::serializeBorder(v7, (uint64_t)this, (WTF::String *)v8, a5);
        return;
      case 0x1D1:
      case 0x1D4:
      case 0x1D5:
      case 0x1DA:
      case 0x1DD:
      case 0x1DE:
      case 0x1E2:
      case 0x1E8:
      case 0x1EF:
      case 0x1F6:
      case 0x1F7:
      case 0x1FA:
      case 0x1FB:
      case 0x202:
      case 0x203:
      case 0x205:
      case 0x206:
      case 0x20B:
      case 0x20C:
      case 0x20D:
      case 0x20F:
      case 0x210:
      case 0x212:
      case 0x213:
        WebCore::ShorthandSerializer::serializePair(a4, (uint64_t *)this, a2, a3, a5);
        return;
      case 0x1D2:
      case 0x1D3:
      case 0x1D6:
      case 0x1DB:
      case 0x1DC:
      case 0x1DF:
      case 0x1E1:
      case 0x1E4:
      case 0x1E6:
      case 0x1E7:
      case 0x1EB:
      case 0x1F8:
      case 0x201:
      case 0x217:
      case 0x227:
      case 0x229:
        WebCore::ShorthandSerializer::serializeLonghandsOmittingInitialValues(a4, (unsigned __int16 **)this, a2, a3, a5);
        return;
      case 0x1D7:
      case 0x1E3:
      case 0x1E5:
      case 0x1F5:
      case 0x1F9:
      case 0x204:
      case 0x20E:
      case 0x211:
        WebCore::ShorthandSerializer::serializeQuad((const WTF::StringImpl **)a4, (uint64_t *)this, a2, a3, a5);
        return;
      case 0x1D8:
      case 0x1FE:
      case 0x21E:
      case 0x224:
        WebCore::ShorthandSerializer::serializeBorderImage(a4, (uint64_t)this);
        return;
      case 0x1E0:
      case 0x21F:
        WebCore::ShorthandSerializer::serializeBorderRadius(a4, this, a2, a3, a5);
        return;
      case 0x1E9:
        v9 = " / ";
        v10 = a4;
        v11 = 4;
        goto LABEL_22;
      case 0x1EA:
      case 0x20A:
        WebCore::ShorthandSerializer::serializeLonghands(a4, (uint64_t *)this, (WTF::StringBuilder *)*((unsigned int *)this + 2), (WTF::String *)" ", 2uLL, a5);
        return;
      case 0x1EC:
        WebCore::ShorthandSerializer::serializeFont((uint64_t)a4, (unsigned __int16 **)this);
        return;
      case 0x1ED:
        WebCore::ShorthandSerializer::serializeFontSynthesis(a4, (uint64_t *)this);
        return;
      case 0x1EE:
        WebCore::ShorthandSerializer::serializeFontVariant(a4, (unsigned __int16 **)this);
        return;
      case 0x1F0:
        WebCore::ShorthandSerializer::serializeGrid(a4, (uint64_t *)this);
        return;
      case 0x1F1:
        WebCore::ShorthandSerializer::serializeGridArea(a4, (uint64_t)this, a2, a3, a5);
        return;
      case 0x1F2:
      case 0x1F3:
        WebCore::ShorthandSerializer::serializeGridRowColumn(a4, (uint64_t)this, a2, a3, a5);
        return;
      case 0x1F4:
        WebCore::ShorthandSerializer::serializeGridTemplate(a4, (uint64_t *)this);
        return;
      case 0x1FC:
        WebCore::ShorthandSerializer::serializeCommonValue(a4, this, 0, (WTF::String *)*((unsigned int *)this + 2), a5);
        return;
      case 0x200:
        WebCore::ShorthandSerializer::serializeOffset(a4, (uint64_t *)this);
        return;
      case 0x207:
      case 0x208:
        WebCore::ShorthandSerializer::serializePageBreak(a4, **(_WORD **)this, *((_QWORD *)this + 2));
        return;
      case 0x209:
      case 0x222:
        WebCore::ShorthandSerializer::serializeBreakInside(a4, **(_WORD **)this, *((_QWORD *)this + 2));
        return;
      case 0x214:
      case 0x21B:
        WebCore::ShorthandSerializer::serializeCoordinatingListPropertyGroup(a4, (uint64_t)this);
        return;
      case 0x215:
      case 0x216:
      case 0x21D:
      case 0x226:
      case 0x228:
        WebCore::serializeLonghandValue(**(unsigned __int16 **)this, *((_QWORD *)this + 2), a2, a3, a4, a5);
        return;
      case 0x218:
        WebCore::ShorthandSerializer::serializeTextWrap(a4, (uint64_t *)this);
        return;
      case 0x219:
        v9 = " ";
        v10 = a4;
        v11 = 2;
LABEL_22:
        WebCore::ShorthandSerializer::serializeLonghandsOmittingTrailingInitialValue(v10, (uint64_t)this, (WTF::String *)v9, v11);
        break;
      case 0x21C:
        WebCore::ShorthandSerializer::serializeWhiteSpace(a4, (uint64_t *)this);
        break;
      case 0x220:
      case 0x221:
        WebCore::ShorthandSerializer::serializeColumnBreak(a4, **(_WORD **)this, *((_QWORD *)this + 2));
        break;
      default:
        *(_QWORD *)a4 = 0;
        break;
    }
  }
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeLayered(WebCore::ShorthandSerializer *this, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char isInitialValueForLonghand;
  uint64_t *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  char *v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unsigned __int16 v51;
  __int16 v52;
  __int16 v53;
  WTF::StringImpl *v54;
  uint64_t *v55;
  WTF::StringImpl *result;
  WebCore::ShorthandSerializer *v57;
  WTF::StringImpl *v58;
  WebCore::ShorthandSerializer *v59;
  unsigned int v60;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  char v67;
  char v68;
  char *v69;
  uint64_t *v70;
  _QWORD v71[2];
  __int16 v72;
  _QWORD v73[6];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[16];
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = a2[v4 + 2];
      if (v6)
        v7 = ((*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F800) == 120832;
      else
        v7 = 0;
      if (v7)
      {
        v8 = *(_DWORD *)(v6 + 8);
        if (v8 > v5)
          v5 = v8;
      }
      v9 = v4 + 1;
      v4 = (v4 + 1);
    }
    while (v3 > v9);
  }
  else
  {
    v5 = 1;
  }
  v10 = 0;
  v64 = 0;
  v65 = 0;
  v63 = v5 - 1;
  v66 = 0;
  v67 = 1;
  v62 = v5;
  do
  {
    v70 = a2;
    v71[0] = 0;
    v71[1] = 0;
    v72 = 0;
    memset(v73, 0, sizeof(v73));
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    if (!*((_DWORD *)a2 + 2))
      goto LABEL_99;
    v11 = 0;
    do
    {
      v12 = a2[v11 + 2];
      if (v12)
        v13 = ((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) & 0x3F800) == 120832;
      else
        v13 = 0;
      if (!v13)
      {
        v14 = v63;
        if (*(_WORD *)(*a2 + 2 * v11) != 61)
          v14 = 0;
        if (v10 == v14)
LABEL_28:
          isInitialValueForLonghand = WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*v70 + 2 * v11), v12);
        else
          isInitialValueForLonghand = 1;
        *((_BYTE *)v71 + v11) = isInitialValueForLonghand;
        *(_DWORD *)v12 += 2;
        goto LABEL_30;
      }
      if (v10 < *(unsigned int *)(v12 + 8))
      {
        v16 = (uint64_t *)(v10 > 3 ? *(_QWORD *)(v12 + 48) + 8 * (v10 - 4) : v12 + 8 * v10 + 16);
        v12 = *v16;
        if (*v16)
          goto LABEL_28;
      }
      v12 = 0;
      *((_BYTE *)v71 + v11) = 1;
LABEL_30:
      v17 = (_DWORD *)v73[v11];
      v73[v11] = v12;
      if (v17)
      {
        if (*v17 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, (WTF::StringImpl *)a2);
        else
          *v17 -= 2;
      }
      ++v11;
      v18 = *((unsigned int *)a2 + 2);
    }
    while (v11 < v18);
    if ((_DWORD)v18)
    {
      v19 = 0;
      while (1)
      {
        v20 = *(unsigned __int16 *)(*a2 + 2 * v19);
        if (v20 > 0x15F)
          break;
        if (v20 != 64 && v20 != 336)
          goto LABEL_81;
        if ((_DWORD)v18 == 2)
        {
          LOWORD(v71[0]) = 0;
        }
        else if (!*((_BYTE *)v71 + (v19 - 1)))
        {
          goto LABEL_80;
        }
LABEL_81:
        if (!*((_BYTE *)v71 + v19))
        {
          if (v20 == 47)
          {
            LOBYTE(v71[0]) = 0;
          }
          else if (v20 == 170 || v20 == 66)
          {
            *((_BYTE *)v71 + (v19 - 2)) = 0;
            *((_BYTE *)v71 + (v19 - 1)) = 0;
          }
        }
        ++v19;
        v18 = *((unsigned int *)a2 + 2);
        if (v19 >= v18)
          goto LABEL_99;
      }
      if (v20 != 352 && v20 != 455 && v20 != 408)
        goto LABEL_81;
      v21 = (v19 - 1);
      v22 = *v70;
      v23 = v73[v21];
      if (v23)
      {
        v24 = *(unsigned __int16 *)(v23 + 4);
        v25 = v24 | (*(unsigned __int8 *)(v23 + 6) << 16);
        if ((v24 & 0x100) != 0)
        {
          WebCore::initialValueForLonghand((uint64_t)v80, *(unsigned __int16 *)(v22 + 2 * v21));
          if (v81 == -1)
            goto LABEL_160;
          v69 = &v68;
          v27 = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore25initialValueIDForLonghandENS8_13CSSPropertyIDEE3__0JZNS8_25initialValueIDForLonghandES9_E3__1EEEEEJNS0_6__implIJNS8_10CSSValueIDENS8_19InitialNumericValueEEEEEEEDcOT_DpOT0____fmatrix[v81])(&v69, v80);
          v28 = v27 & 0xFF00;
          v22 = *v70;
        }
        else if ((v25 & 0x3F800) != 0)
        {
          LOBYTE(v27) = 0;
          v28 = 0;
        }
        else
        {
          v26 = *(_WORD *)(v23 + 8);
          if ((v25 & 0x7F) == 0x50)
            v27 = v26;
          else
            v27 = 0;
          v28 = v27 & 0xFF00;
        }
        v29 = (unsigned __int16)(v28 | v27) | 0x10000;
      }
      else
      {
        v29 = 0;
      }
      v30 = &v71[v19 - 1];
      v31 = v30[4];
      if (v31)
      {
        v32 = *(unsigned __int16 *)(v31 + 4);
        v33 = v32 | (*(unsigned __int8 *)(v31 + 6) << 16);
        if ((v32 & 0x100) != 0)
        {
          WebCore::initialValueForLonghand((uint64_t)v80, *(unsigned __int16 *)(v22 + 2 * v19));
          if (v81 == -1)
            goto LABEL_160;
          v69 = &v68;
          v35 = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore25initialValueIDForLonghandENS8_13CSSPropertyIDEE3__0JZNS8_25initialValueIDForLonghandES9_E3__1EEEEEJNS0_6__implIJNS8_10CSSValueIDENS8_19InitialNumericValueEEEEEEEDcOT_DpOT0____fmatrix[v81])(&v69, v80);
          v36 = v35 & 0xFF00;
        }
        else if ((v33 & 0x3F800) != 0)
        {
          LOBYTE(v35) = 0;
          v36 = 0;
        }
        else
        {
          v34 = *(_WORD *)(v31 + 8);
          v35 = (v33 & 0x7F) == 0x50 ? v34 : 0;
          v36 = v35 & 0xFF00;
        }
        if ((v29 & 0x10000) != 0 && (unsigned __int16)(v36 | v35) == (unsigned __int16)v29)
        {
          if (!*((_BYTE *)v71 + v21) && !*((_BYTE *)v71 + v19))
            *((_BYTE *)v71 + v19) = 1;
          goto LABEL_81;
        }
      }
      v37 = (char *)&v71[-1] + v21;
      v39 = v37[8];
      v38 = v37 + 8;
      if (v39 && *((_BYTE *)v71 + v19))
        goto LABEL_81;
      v40 = v30[4];
      if (v40)
      {
        v41 = *(unsigned __int16 *)(v40 + 4);
        v42 = v41 | (*(unsigned __int8 *)(v40 + 6) << 16);
        if ((v41 & 0x100) != 0)
        {
          WebCore::initialValueForLonghand((uint64_t)v80, *(unsigned __int16 *)(*v70 + 2 * v19));
          if (v81 == -1)
            goto LABEL_160;
          v69 = &v68;
          v44 = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore25initialValueIDForLonghandENS8_13CSSPropertyIDEE3__0JZNS8_25initialValueIDForLonghandES9_E3__1EEEEEJNS0_6__implIJNS8_10CSSValueIDENS8_19InitialNumericValueEEEEEEEDcOT_DpOT0____fmatrix[v81])(&v69, v80);
          v45 = v44 & 0xFF00;
        }
        else if ((v42 & 0x3F800) != 0)
        {
          LOBYTE(v44) = 0;
          v45 = 0;
        }
        else
        {
          v43 = *(_WORD *)(v40 + 8);
          v44 = (v42 & 0x7F) == 0x50 ? v43 : 0;
          v45 = v44 & 0xFF00;
        }
        if ((unsigned __int16)(v45 | v44) == 0x25D)
          goto LABEL_81;
      }
      *v38 = 0;
LABEL_80:
      *((_BYTE *)v71 + v19) = 0;
      goto LABEL_81;
    }
LABEL_99:
    if (*((_WORD *)a2 + 6) != 460 || HIBYTE(v71[0]) || !*((_QWORD *)&v74 + 1))
      goto LABEL_134;
    v46 = *(unsigned __int16 *)(*((_QWORD *)&v74 + 1) + 4) | (*(unsigned __int8 *)(*((_QWORD *)&v74 + 1) + 6) << 16);
    if ((v46 & 0x3F87F) == 0x3F)
    {
      v47 = (*(unsigned __int16 *)(*((_QWORD *)&v74 + 1) + 4) & 0x7Fu) - 20;
      if (v47 <= 0x3C)
      {
        if (((1 << ((*(_WORD *)(*((_QWORD *)&v74 + 1) + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) == 0)
        {
          if (v47 == 60)
          {
            v55 = WebCore::nameString(*(unsigned __int16 *)(*((_QWORD *)&v74 + 1) + 8));
          }
          else
          {
            if (v47 != 59)
              goto LABEL_145;
            v55 = WebCore::nameString(*(unsigned __int16 *)(*((_QWORD *)&v74 + 1) + 8));
          }
          v48 = *v55;
          if (*v55)
            goto LABEL_106;
          goto LABEL_145;
        }
        v48 = *(_QWORD *)(*((_QWORD *)&v74 + 1) + 8);
        if (v48)
        {
LABEL_106:
          v49 = *(unsigned int *)(v48 + 4);
          *(_DWORD *)v48 += 2;
          v51 = WebCore::cssValueKeywordID(*(_QWORD *)(v48 + 8), v49 | ((unint64_t)((*(_DWORD *)(v48 + 16) >> 2) & 1) << 32));
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v48, v50);
          else
            *(_DWORD *)v48 -= 2;
          goto LABEL_115;
        }
      }
LABEL_145:
      v51 = WebCore::cssValueKeywordID(0, 0x100000000);
      goto LABEL_115;
    }
    if ((*(_WORD *)(*((_QWORD *)&v74 + 1) + 4) & 0x100) != 0)
    {
      WebCore::initialValueForLonghand((uint64_t)v80, *(unsigned __int16 *)(*v70 + 14));
      if (v81 == -1)
      {
LABEL_160:
        v59 = (WebCore::ShorthandSerializer *)std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)WebCore::ShorthandSerializer::serializeBorder(v59, v60);
      }
      v69 = &v68;
      v52 = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore25initialValueIDForLonghandENS8_13CSSPropertyIDEE3__0JZNS8_25initialValueIDForLonghandES9_E3__1EEEEEJNS0_6__implIJNS8_10CSSValueIDENS8_19InitialNumericValueEEEEEEEDcOT_DpOT0____fmatrix[v81])(&v69, v80);
      v53 = v52 & 0xFF00;
    }
    else if ((v46 & 0x3F800) != 0)
    {
      LOBYTE(v52) = 0;
      v53 = 0;
    }
    else
    {
      if ((*(_WORD *)(*((_QWORD *)&v74 + 1) + 4) & 0x7F) == 0x50)
        v52 = *(_WORD *)(*((_QWORD *)&v74 + 1) + 8);
      else
        v52 = 0;
      v53 = v52 & 0xFF00;
    }
    v51 = v53 | v52;
LABEL_115:
    if (v51 <= 0x270u)
    {
      if (v51 <= 0x213u)
      {
        if (v51 == 90)
          goto LABEL_132;
        if (v51 != 453)
        {
          if (v51 == 504)
            goto LABEL_132;
          goto LABEL_134;
        }
      }
      else if (v51 - 532 >= 2)
      {
        if (v51 == 539)
        {
          BYTE3(v71[0]) = 0;
        }
        else if (v51 == 541)
        {
          goto LABEL_132;
        }
        goto LABEL_134;
      }
      BYTE5(v71[0]) = 0;
      goto LABEL_134;
    }
    if (v51 - 630 < 7)
    {
      BYTE1(v71[0]) = 0;
      goto LABEL_134;
    }
    if (v51 - 626 < 2)
    {
      BYTE6(v71[0]) = 0;
      goto LABEL_134;
    }
    if (v51 == 625)
LABEL_132:
      BYTE4(v71[0]) = 0;
LABEL_134:
    WebCore::LayerValues::serialize((WebCore::LayerValues *)&v70, (WTF::StringBuilder *)&v64);
    WebCore::LayerValues::~LayerValues((WebCore::LayerValues *)&v70, v54);
    ++v10;
  }
  while (v10 != v62);
  result = v64;
  if (v64)
  {
    v57 = this;
  }
  else
  {
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v64);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v64);
    result = v64;
    v57 = this;
    if (!v64)
      goto LABEL_151;
  }
  *(_DWORD *)result += 2;
LABEL_151:
  *(_QWORD *)v57 = result;
  v58 = v65;
  v65 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)a2);
      result = v64;
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ShorthandSerializer::serializeBorder(WebCore::ShorthandSerializer *this, uint64_t a2, WTF::String *a3, __n128 a4)
{
  __n128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  __n128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  WebCore::ShorthandSerializer::serializeCommonValue((WebCore::ShorthandSerializer *)&v19, (_QWORD *)a2, 0, a3, a4);
  v8 = v19;
  if (v19)
  {
    if (MEMORY[0x19AEA53F4](v19, "medium", 6))
    {
      v19 = 0;
      if (*(_DWORD *)v8 != 2)
      {
        v10 = 0;
        *(_DWORD *)v8 -= 2;
        v8 = 0;
        goto LABEL_8;
      }
      WTF::StringImpl::destroy(v8, v9);
      v8 = 0;
    }
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
LABEL_8:
  WebCore::ShorthandSerializer::serializeCommonValue((WebCore::ShorthandSerializer *)&v18, (_QWORD *)a2, a3, a3, v7);
  v12 = v18;
  if (v18)
  {
    if (MEMORY[0x19AEA53F4](v18, "none", 4))
    {
      v18 = 0;
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
      v12 = 0;
    }
  }
  else
  {
    v10 = 1;
  }
  WebCore::ShorthandSerializer::serializeCommonValue((WebCore::ShorthandSerializer *)&v17, (_QWORD *)a2, (WTF::StringBuilder *)(2 * (_DWORD)a3), a3, v11);
  v15 = v17;
  if (v17)
  {
    if (MEMORY[0x19AEA53F4](v17, "currentcolor", 12))
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
      v15 = 0;
    }
    if (!v10)
    {
      v16 = (3 * (_DWORD)a3);
      if (*(_DWORD *)(a2 + 8) <= v16)
LABEL_33:
        __asm { BR              X10 }
      while ((WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v16), *(_QWORD *)(a2 + 8 * v16 + 16)) & 1) != 0)
      {
        if (++v16 >= (unint64_t)*(unsigned int *)(a2 + 8))
          goto LABEL_33;
      }
    }
  }
  *(_QWORD *)this = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v14);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v14);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void sub_195812F80()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  JUMPOUT(0x195812E38);
}

void sub_195812F8C()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  JUMPOUT(0x195812E38);
}

void sub_195812F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  WTF::StringImpl *v23;

  if (v12)
    *(_DWORD *)v12 += 2;
  if (v13)
    *(_DWORD *)v13 += 2;
  if (v12)
  {
    v15 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_7;
  }
  else
  {
    v15 = 0;
    if (v13)
    {
LABEL_7:
      v16 = *(_DWORD *)(v13 + 4);
      if (v16 < 0)
        goto LABEL_34;
      goto LABEL_8;
    }
  }
  v16 = 0;
LABEL_8:
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  v19 = v17;
  if ((v15 & 0x80000000) == 0 && (v19 & 1) == 0)
  {
    v20 = (v15 + v18);
    if (!__OFADD__(v15, v18))
    {
      if (v12)
      {
        v21 = *((_DWORD *)v12 + 4);
        v22 = (v21 >> 2) & 1;
        if (!v13 || (v21 & 4) == 0)
        {
LABEL_18:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v20, v22, (uint64_t)v12, 32, v13, v14);
          if (*v14)
          {
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
              {
                WTF::StringImpl::destroy((WTF::StringImpl *)v13, v23);
                if (!v12)
                  goto LABEL_36;
                goto LABEL_23;
              }
              *(_DWORD *)v13 -= 2;
            }
            if (!v12)
              goto LABEL_36;
LABEL_23:
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v23);
            else
              *(_DWORD *)v12 -= 2;
LABEL_36:
            JUMPOUT(0x195812E38);
          }
LABEL_35:
          __break(0xC471u);
          goto LABEL_36;
        }
LABEL_17:
        v22 = (*(unsigned __int8 *)(v13 + 16) >> 2) & 1;
        goto LABEL_18;
      }
      if (v13)
        goto LABEL_17;
      if ((v20 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
        if (a12)
        {
          *(_DWORD *)a12 = 2;
          *(_DWORD *)(a12 + 4) = v20;
          *(_QWORD *)(a12 + 8) = a12 + 20;
          *(_DWORD *)(a12 + 16) = 4;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(a12 + 20), 0, 32, 0);
          *v14 = a12;
          JUMPOUT(0x195812E60);
        }
      }
    }
  }
LABEL_34:
  *v14 = 0;
  goto LABEL_35;
}

uint64_t WebCore::ShorthandSerializer::serializePair(WebCore::ShorthandSerializer *this, uint64_t *a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  WTF::StringBuilder *v7;
  WTF::String *v8;
  __n128 v9;
  const WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  WTF::StringImpl *v23;
  char *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char *v27;

  WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, a2[2], a3, a4, (WebCore *)&v26, a5);
  WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v7, v8, (WebCore *)&v25, v9);
  result = WTF::equal(v26, v25, v10);
  v13 = v26;
  if ((result & 1) == 0)
  {
    if (v26)
      *(_DWORD *)v26 += 2;
    v14 = v25;
    if (v25)
      *(_DWORD *)v25 += 2;
    if (v13)
    {
      v15 = *((_DWORD *)v13 + 1);
      if (v14)
        goto LABEL_10;
    }
    else
    {
      v15 = 0;
      if (v14)
      {
LABEL_10:
        v16 = *((_DWORD *)v14 + 1);
        if (v16 < 0)
          goto LABEL_46;
        goto LABEL_11;
      }
    }
    v16 = 0;
LABEL_11:
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    v19 = v17;
    if ((v15 & 0x80000000) == 0 && (v19 & 1) == 0)
    {
      v20 = (v15 + v18);
      if (!__OFADD__(v15, v18))
      {
        if (v13)
        {
          v21 = *((_DWORD *)v13 + 4);
          v22 = (v21 >> 2) & 1;
          if (!v14 || (v21 & 4) == 0)
          {
LABEL_21:
            result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v20, v22, (uint64_t)v13, 32, (uint64_t)v14, this);
            if (*(_QWORD *)this)
            {
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                {
                  WTF::StringImpl::destroy(v14, v12);
                  if (!v13)
                    goto LABEL_28;
                  goto LABEL_26;
                }
                *(_DWORD *)v14 -= 2;
              }
              if (!v13)
                goto LABEL_28;
LABEL_26:
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v12);
              else
                *(_DWORD *)v13 -= 2;
              goto LABEL_28;
            }
LABEL_47:
            __break(0xC471u);
            return result;
          }
LABEL_20:
          v22 = (*((unsigned __int8 *)v14 + 16) >> 2) & 1;
          goto LABEL_21;
        }
        if (v14)
          goto LABEL_20;
        if ((v20 & 0x80000000) == 0)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
          v13 = (WTF::StringImpl *)v27;
          if (v27)
          {
            v24 = v27 + 20;
            *(_DWORD *)v27 = 2;
            *((_DWORD *)v13 + 1) = v20;
            *((_QWORD *)v13 + 1) = (char *)v13 + 20;
            *((_DWORD *)v13 + 4) = 4;
            WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v24, 0, 32, 0);
            goto LABEL_3;
          }
        }
      }
    }
LABEL_46:
    *(_QWORD *)this = 0;
    goto LABEL_47;
  }
  v26 = 0;
LABEL_3:
  *(_QWORD *)this = v13;
LABEL_28:
  v23 = v25;
  v25 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v12);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = (uint64_t)v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeLonghandsOmittingInitialValues(WebCore::ShorthandSerializer *this, unsigned __int16 **a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  char v22;
  WTF::StringImpl *v23;
  const char *v24;
  int v25;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  if (!*((_DWORD *)a2 + 2))
    goto LABEL_16;
  v7 = 0;
  v8 = "";
  v9 = 1;
  do
  {
    v10 = (*a2)[v7];
    v11 = (uint64_t)a2[v7 + 2];
    if ((WebCore::isInitialValueForLonghand((*a2)[v7], v11) & 1) == 0)
    {
      WebCore::serializeLonghandValue(v10, v11, a3, a4, (WebCore *)&v18, a5);
      v25 = v9 - 1;
      v23 = v18;
      v24 = v8;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v19, (uint64_t)&v24, (uint64_t *)&v23);
      v13 = v18;
      v18 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v9 = 2;
      v8 = " ";
    }
    v14 = v7 + 1;
    v7 = (v7 + 1);
  }
  while (*((_DWORD *)a2 + 2) > v14);
  if (v21)
  {
    v15 = v19;
    if (v19
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
          (v15 = v19) != 0))
    {
      *(_DWORD *)v15 += 2;
    }
    *(_QWORD *)this = v15;
  }
  else
  {
LABEL_16:
    WebCore::serializeLonghandValue(**a2, (uint64_t)a2[2], a3, a4, this, a5);
  }
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeQuad(const WTF::StringImpl **this, uint64_t *a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  WTF::StringBuilder *v7;
  WTF::String *v8;
  __n128 v9;
  WTF::StringBuilder *v10;
  WTF::String *v11;
  __n128 v12;
  WTF::StringBuilder *v13;
  WTF::String *v14;
  __n128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, a2[2], a3, a4, (WebCore *)&v24, a5);
  WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v7, v8, (WebCore *)&v23, v9);
  WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 4), a2[4], v10, v11, (WebCore *)&v22, v12);
  WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 6), a2[5], v13, v14, (WebCore *)&v21, v15);
  WebCore::Quad::serialize(&v24, &v23, &v22, &v21, this);
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeBorderImage(WebCore::ShorthandSerializer *this, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringBuilder *v10;
  WTF::String *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  if (!*(_DWORD *)(a2 + 8))
  {
LABEL_55:
    {
      v13 = (WTF::StringImpl *)qword_1EE2EFA10;
      if (qword_1EE2EFA10)
        goto LABEL_57;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(&v27, (uint64_t)"none", 5uLL);
    v13 = v27;
    v27 = 0;
    v19 = (WTF::StringImpl *)qword_1EE2EFA10;
    qword_1EE2EFA10 = (uint64_t)v13;
    if (!v19)
      goto LABEL_53;
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
      v19 = v27;
      v27 = 0;
      if (!v19)
        goto LABEL_72;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
        goto LABEL_72;
      }
    }
    *(_DWORD *)v19 = v20;
LABEL_72:
    v13 = (WTF::StringImpl *)qword_1EE2EFA10;
LABEL_53:
    if (v13)
      goto LABEL_57;
    goto LABEL_58;
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = "";
  v7 = 1;
  do
  {
    v8 = *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v5);
    v9 = *(_QWORD *)(a2 + 8 * v5 + 16);
    if (!WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v5), v9))
    {
      if ((v3 & 1) != 0)
      {
        v13 = 0;
        if ((v8 & 0xFFFFFFFB) == 0x48 || (v8 & 0xFFFFFFFB) == 0xA2)
          goto LABEL_58;
      }
      if (((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F800) == 0xC000)
      {
        if (*(_WORD *)(a2 + 12) == 542)
        {
          if (WebCore::CSSPrimitiveValue::isLength(*(WebCore::CSSPrimitiveValue **)(v9 + 8))
            || WebCore::CSSPrimitiveValue::isLength(*(WebCore::CSSPrimitiveValue **)(v9 + 16))
            || WebCore::CSSPrimitiveValue::isLength(*(WebCore::CSSPrimitiveValue **)(v9 + 24)))
          {
            if (!*(_BYTE *)(v9 + 40))
              goto LABEL_65;
          }
          else if (((WebCore::CSSPrimitiveValue::isLength(*(WebCore::CSSPrimitiveValue **)(v9 + 32)) ^ (*(_BYTE *)(v9 + 40) != 0)) & 1) != 0)
          {
LABEL_65:
            v13 = 0;
            goto LABEL_58;
          }
        }
        else if (*(_BYTE *)(v9 + 40))
        {
          goto LABEL_65;
        }
        WebCore::Quad::cssText(&v27);
      }
      else
      {
        WebCore::serializeLonghandValue(v8, v9, v10, v11, (WebCore *)&v27, v12);
      }
      v14 = v27;
      if ((int)v8 > 161)
      {
        if ((_DWORD)v8 != 162)
        {
          if ((_DWORD)v8 == 166)
            goto LABEL_31;
LABEL_48:
          v15 = v7 - 1;
          v27 = (WTF::StringImpl *)v6;
          if ((unint64_t)(v7 - 1) >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x195813C24);
          }
          goto LABEL_39;
        }
      }
      else if ((_DWORD)v8 != 72)
      {
        if ((_DWORD)v8 != 76)
          goto LABEL_48;
LABEL_31:
        v27 = (WTF::StringImpl *)" / ";
        v15 = 3;
LABEL_39:
        v28 = v15;
        v26 = v14;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v22, (uint64_t)&v27, (uint64_t *)&v26);
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        v6 = " ";
        v7 = 2;
        goto LABEL_43;
      }
      if ((v4 & 1) != 0)
        v6 = " / / ";
      else
        v6 = " / ";
      if ((v4 & 1) != 0)
        v7 = 6;
      else
        v7 = 4;
      goto LABEL_48;
    }
    if ((int)v8 > 163)
    {
      if ((_DWORD)v8 != 164)
      {
        if ((_DWORD)v8 != 166)
          goto LABEL_43;
LABEL_20:
        v4 = 1;
        goto LABEL_43;
      }
LABEL_22:
      v3 = 1;
      goto LABEL_43;
    }
    if ((_DWORD)v8 == 74)
      goto LABEL_22;
    if ((_DWORD)v8 == 76)
      goto LABEL_20;
LABEL_43:
    v16 = v5 + 1;
    v5 = (v5 + 1);
  }
  while (*(_DWORD *)(a2 + 8) > v16);
  if (!v24)
    goto LABEL_55;
  v13 = v22;
  if (!v22)
  {
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22);
    v13 = v22;
    goto LABEL_53;
  }
LABEL_57:
  *(_DWORD *)v13 += 2;
LABEL_58:
  *(_QWORD *)this = v13;
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeBorderRadius(WebCore::ShorthandSerializer *this, _QWORD *a2, const WTF::StringImpl *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringBuilder *v36;
  WTF::String *v37;
  __n128 v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *result;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  _QWORD v77[3];
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83[2];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[2];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v87 = 0;
  v88 = 0;
  v84 = 0;
  v85 = 0;
  v5 = a2[2];
  v6 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  if ((v6 & 0x3F800) != 0x1B800)
    goto LABEL_87;
  v9 = *(_QWORD *)(v5 + 8);
  if (v9)
  {
    *(_DWORD *)v9 += 2;
    v6 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  }
  v86[0] = v9;
  if ((v6 & 0x3F800) != 0x1B800)
    goto LABEL_88;
  v10 = *(_QWORD *)(v5 + 16);
  if (v10)
    *(_DWORD *)v10 += 2;
  v83[0] = v10;
  v11 = a2[3];
  v12 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
  if ((v12 & 0x3F800) != 0x1B800)
  {
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x195814284);
  }
  v13 = *(_QWORD *)(v11 + 8);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v12 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
  }
  v86[1] = v13;
  if ((v12 & 0x3F800) != 0x1B800)
  {
LABEL_88:
    __break(0xC471u);
    JUMPOUT(0x1958142A4);
  }
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
    *(_DWORD *)v14 += 2;
  v83[1] = v14;
  v15 = a2[4];
  v16 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
  if ((v16 & 0x3F800) != 0x1B800)
    goto LABEL_87;
  v17 = *(_QWORD *)(v15 + 8);
  if (v17)
  {
    *(_DWORD *)v17 += 2;
    v16 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
  }
  v87 = v17;
  if ((v16 & 0x3F800) != 0x1B800)
    goto LABEL_88;
  v18 = *(_QWORD *)(v15 + 16);
  if (v18)
    *(_DWORD *)v18 += 2;
  v84 = v18;
  v19 = a2[5];
  v20 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
  if ((v20 & 0x3F800) != 0x1B800)
    goto LABEL_87;
  v21 = *(_QWORD *)(v19 + 8);
  if (v21)
  {
    *(_DWORD *)v21 += 2;
    v20 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
  }
  v88 = v21;
  if ((v20 & 0x3F800) != 0x1B800)
    goto LABEL_88;
  v22 = *(_QWORD *)(v19 + 16);
  if (v22)
    *(_DWORD *)v22 += 2;
  v85 = v22;
  v82 = 0;
  v23 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  v24 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
  if (((v24 ^ v23) & 0x3F800) != 0)
  {
    if ((v23 & 0x3F800) == 0x1D800)
    {
      v42 = v9;
      v43 = v10;
LABEL_91:
      v25 = v42;
      while (*(_DWORD *)(v25 + 8) == 1)
      {
        v25 = *(_QWORD *)(v25 + 16);
        v44 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
        if (((v44 ^ v24) & 0x3F800) == 0)
        {
          v77[0] = v43;
          v78 = (WTF::StringImpl *)v77;
          goto LABEL_27;
        }
        if ((v44 & 0x3F800) != 0x1D800)
        {
          v45 = v24 & 0x3F800;
          v24 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
          v42 = v43;
          v43 = v25;
          if (v45 == 120832)
            goto LABEL_91;
          goto LABEL_37;
        }
      }
    }
    else if ((v24 & 0x3F800) == 0x1D800)
    {
      v46 = v10;
      v47 = v9;
LABEL_99:
      v48 = v46;
      while (*(_DWORD *)(v48 + 8) == 1)
      {
        v48 = *(_QWORD *)(v48 + 16);
        v49 = *(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16);
        if (((v49 ^ v23) & 0x3F800) == 0)
        {
          v77[0] = v47;
          v78 = (WTF::StringImpl *)v77;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v48, (const WebCore::CSSLinearGradientValue ***)&v78, a3))goto LABEL_28;
          goto LABEL_37;
        }
        if ((v49 & 0x3F800) != 0x1D800)
        {
          v50 = v23 & 0x3F800;
          v23 = *(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16);
          v46 = v47;
          v47 = v48;
          if (v50 == 120832)
            goto LABEL_99;
          goto LABEL_37;
        }
      }
    }
    goto LABEL_37;
  }
  v77[0] = v10;
  v78 = (WTF::StringImpl *)v77;
  v25 = v9;
LABEL_27:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v25, (const WebCore::CSSLinearGradientValue ***)&v78, a3) & 1) == 0)goto LABEL_37;
LABEL_28:
  v26 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  v27 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
  if (((v27 ^ v26) & 0x3F800) != 0)
  {
    if ((v26 & 0x3F800) == 0x1D800)
    {
      v51 = v13;
      v52 = v14;
LABEL_107:
      v28 = v51;
      while (*(_DWORD *)(v28 + 8) == 1)
      {
        v28 = *(_QWORD *)(v28 + 16);
        v53 = *(unsigned __int16 *)(v28 + 4) | (*(unsigned __int8 *)(v28 + 6) << 16);
        if (((v53 ^ v27) & 0x3F800) == 0)
        {
          v77[0] = v52;
          v78 = (WTF::StringImpl *)v77;
          goto LABEL_30;
        }
        if ((v53 & 0x3F800) != 0x1D800)
        {
          v54 = v27 & 0x3F800;
          v27 = *(unsigned __int16 *)(v28 + 4) | (*(unsigned __int8 *)(v28 + 6) << 16);
          v51 = v52;
          v52 = v28;
          if (v54 == 120832)
            goto LABEL_107;
          goto LABEL_37;
        }
      }
    }
    else if ((v27 & 0x3F800) == 0x1D800)
    {
      v55 = v14;
      v56 = v13;
LABEL_116:
      v57 = v55;
      while (*(_DWORD *)(v57 + 8) == 1)
      {
        v57 = *(_QWORD *)(v57 + 16);
        v58 = *(unsigned __int16 *)(v57 + 4) | (*(unsigned __int8 *)(v57 + 6) << 16);
        if (((v58 ^ v26) & 0x3F800) == 0)
        {
          v77[0] = v56;
          v78 = (WTF::StringImpl *)v77;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v57, (const WebCore::CSSLinearGradientValue ***)&v78, a3))goto LABEL_31;
          goto LABEL_37;
        }
        if ((v58 & 0x3F800) != 0x1D800)
        {
          v59 = v26 & 0x3F800;
          v26 = *(unsigned __int16 *)(v57 + 4) | (*(unsigned __int8 *)(v57 + 6) << 16);
          v55 = v56;
          v56 = v57;
          if (v59 == 120832)
            goto LABEL_116;
          goto LABEL_37;
        }
      }
    }
    goto LABEL_37;
  }
  v77[0] = v14;
  v78 = (WTF::StringImpl *)v77;
  v28 = v13;
LABEL_30:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v28, (const WebCore::CSSLinearGradientValue ***)&v78, a3) & 1) == 0)goto LABEL_37;
LABEL_31:
  v29 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
  v30 = *(unsigned __int16 *)(v18 + 4) | (*(unsigned __int8 *)(v18 + 6) << 16);
  if (((v30 ^ v29) & 0x3F800) != 0)
  {
    if ((v29 & 0x3F800) == 0x1D800)
    {
      v60 = v17;
      v61 = v18;
LABEL_124:
      v31 = v60;
      while (*(_DWORD *)(v31 + 8) == 1)
      {
        v31 = *(_QWORD *)(v31 + 16);
        v62 = *(unsigned __int16 *)(v31 + 4) | (*(unsigned __int8 *)(v31 + 6) << 16);
        if (((v62 ^ v30) & 0x3F800) == 0)
        {
          v77[0] = v61;
          v78 = (WTF::StringImpl *)v77;
          goto LABEL_33;
        }
        if ((v62 & 0x3F800) != 0x1D800)
        {
          v63 = v30 & 0x3F800;
          v30 = *(unsigned __int16 *)(v31 + 4) | (*(unsigned __int8 *)(v31 + 6) << 16);
          v60 = v61;
          v61 = v31;
          if (v63 == 120832)
            goto LABEL_124;
          goto LABEL_37;
        }
      }
    }
    else if ((v30 & 0x3F800) == 0x1D800)
    {
      v64 = v18;
      v65 = v17;
LABEL_135:
      v66 = v64;
      while (*(_DWORD *)(v66 + 8) == 1)
      {
        v66 = *(_QWORD *)(v66 + 16);
        v67 = *(unsigned __int16 *)(v66 + 4) | (*(unsigned __int8 *)(v66 + 6) << 16);
        if (((v67 ^ v29) & 0x3F800) == 0)
        {
          v77[0] = v65;
          v78 = (WTF::StringImpl *)v77;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v66, (const WebCore::CSSLinearGradientValue ***)&v78, a3))goto LABEL_34;
          goto LABEL_37;
        }
        if ((v67 & 0x3F800) != 0x1D800)
        {
          v68 = v29 & 0x3F800;
          v29 = *(unsigned __int16 *)(v66 + 4) | (*(unsigned __int8 *)(v66 + 6) << 16);
          v64 = v65;
          v65 = v66;
          if (v68 == 120832)
            goto LABEL_135;
          goto LABEL_37;
        }
      }
    }
    goto LABEL_37;
  }
  v77[0] = v18;
  v78 = (WTF::StringImpl *)v77;
  v31 = v17;
LABEL_33:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v31, (const WebCore::CSSLinearGradientValue ***)&v78, a3) & 1) == 0)goto LABEL_37;
LABEL_34:
  v32 = *(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16);
  v33 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
  if (((v33 ^ v32) & 0x3F800) != 0)
  {
    if ((v32 & 0x3F800) == 0x1D800)
    {
      v69 = v21;
      v70 = v22;
LABEL_143:
      v34 = v69;
      while (*(_DWORD *)(v34 + 8) == 1)
      {
        v34 = *(_QWORD *)(v34 + 16);
        v71 = *(unsigned __int16 *)(v34 + 4) | (*(unsigned __int8 *)(v34 + 6) << 16);
        if (((v71 ^ v33) & 0x3F800) == 0)
        {
          v77[0] = v70;
          goto LABEL_164;
        }
        if ((v71 & 0x3F800) != 0x1D800)
        {
          v72 = v33 & 0x3F800;
          v33 = *(unsigned __int16 *)(v34 + 4) | (*(unsigned __int8 *)(v34 + 6) << 16);
          v69 = v70;
          v70 = v34;
          if (v72 == 120832)
            goto LABEL_143;
          goto LABEL_37;
        }
      }
    }
    else if ((v33 & 0x3F800) == 0x1D800)
    {
      v73 = v22;
      v74 = v21;
LABEL_154:
      v34 = v73;
      while (*(_DWORD *)(v34 + 8) == 1)
      {
        v34 = *(_QWORD *)(v34 + 16);
        v75 = *(unsigned __int16 *)(v34 + 4) | (*(unsigned __int8 *)(v34 + 6) << 16);
        if (((v75 ^ v32) & 0x3F800) == 0)
        {
          v77[0] = v74;
LABEL_164:
          v78 = (WTF::StringImpl *)v77;
          goto LABEL_36;
        }
        if ((v75 & 0x3F800) != 0x1D800)
        {
          v76 = v32 & 0x3F800;
          v32 = *(unsigned __int16 *)(v34 + 4) | (*(unsigned __int8 *)(v34 + 6) << 16);
          v73 = v74;
          v74 = v34;
          if (v76 == 120832)
            goto LABEL_154;
          goto LABEL_37;
        }
      }
    }
    goto LABEL_37;
  }
  v77[0] = v22;
  v78 = (WTF::StringImpl *)v77;
  v34 = v21;
LABEL_36:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v34, (const WebCore::CSSLinearGradientValue ***)&v78, a3) & 1) == 0)LABEL_37:v82 = 1;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 1;
  v77[0] = &v78;
  v77[1] = a2;
  v77[2] = &v82;
  WebCore::ShorthandSerializer::serializeBorderRadius(void)const::$_0::operator()<WTF::RefPtr<WebCore::CSSValue const,WTF::RawPtrTraits<WebCore::CSSValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSValue const>>>((uint64_t)v77, v86, a3, a4, a5);
  if (v82)
  {
    WTF::StringBuilder::append();
    WebCore::ShorthandSerializer::serializeBorderRadius(void)const::$_0::operator()<WTF::RefPtr<WebCore::CSSValue const,WTF::RawPtrTraits<WebCore::CSSValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSValue const>>>((uint64_t)v77, v83, v36, v37, v38);
  }
  v39 = v78;
  if (v78
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v78),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v78),
        (v39 = v78) != 0))
  {
    *(_DWORD *)v39 += 2;
  }
  *(_QWORD *)this = v39;
  v40 = v79;
  v79 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v35);
    else
      *(_DWORD *)v40 -= 2;
  }
  result = v78;
  v78 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v35);
      if (!v22)
        goto LABEL_53;
      goto LABEL_50;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v22)
    goto LABEL_53;
LABEL_50:
  if (*(_DWORD *)v22 == 2)
    result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v22, v35);
  else
    *(_DWORD *)v22 -= 2;
LABEL_53:
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v18, v35);
      if (!v14)
        goto LABEL_62;
      goto LABEL_57;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v14)
    goto LABEL_62;
LABEL_57:
  if (*(_DWORD *)v14 == 2)
    result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v14, v35);
  else
    *(_DWORD *)v14 -= 2;
LABEL_62:
  if (*(_DWORD *)v10 == 2)
  {
    result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v10, v35);
    if (!v21)
      goto LABEL_68;
  }
  else
  {
    *(_DWORD *)v10 -= 2;
    if (!v21)
      goto LABEL_68;
  }
  if (*(_DWORD *)v21 == 2)
  {
    result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v21, v35);
    if (!v17)
      goto LABEL_74;
    goto LABEL_69;
  }
  *(_DWORD *)v21 -= 2;
LABEL_68:
  if (!v17)
    goto LABEL_74;
LABEL_69:
  if (*(_DWORD *)v17 == 2)
    result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v17, v35);
  else
    *(_DWORD *)v17 -= 2;
LABEL_74:
  if (!v13)
    goto LABEL_77;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_77:
    if (!v9)
      return result;
    goto LABEL_78;
  }
  result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v13, v35);
  if (!v9)
    return result;
LABEL_78:
  if (*(_DWORD *)v9 == 2)
    return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v9, v35);
  *(_DWORD *)v9 -= 2;
  return result;
}

void WebCore::ShorthandSerializer::serializeLonghandsOmittingTrailingInitialValue(WebCore *a1, uint64_t a2, WTF::String *a3, size_t a4)
{
  int v8;
  WTF::StringBuilder *v9;
  __n128 v10;

  v8 = *(_DWORD *)(a2 + 8);
  v9 = (WTF::StringBuilder *)(v8
                            - WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*(_QWORD *)a2 + 2 * (v8 - 1)), *(_QWORD *)(a2 + 8 * (v8 - 1) + 16)));
  WebCore::ShorthandSerializer::serializeLonghands(a1, (uint64_t *)a2, v9, a3, a4, v10);
}

uint64_t WebCore::ShorthandSerializer::serializeFont(uint64_t this, unsigned __int16 **a2)
{
  _QWORD *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned __int16 *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int isInitialValueForLonghand;
  int v22;
  WTF::StringBuilder *v23;
  WTF::String *v24;
  __n128 v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  double v31;
  float v32;
  float v33;
  const char **v34;
  _DWORD *v35;
  BOOL v36;
  int v37;
  int v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char **v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringBuilder *v50;
  WTF::String *v51;
  __n128 v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  size_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  char v64;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  uint64_t v79;
  size_t v80;
  size_t v81;
  size_t v82;
  size_t v83;
  uint64_t v84;
  size_t v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  char *v89;
  int8x16_t *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  WTF::StringImpl *k;
  char *v97;
  char *v98;
  __int16 v99;
  int v100;
  BOOL v101;
  size_t i;
  size_t v103;
  size_t v104;
  size_t j;
  uint64_t v106;
  size_t v107;
  _DWORD *v108;
  unsigned __int128 *v109;
  _BYTE *v110;
  size_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  size_t v118;
  uint64_t v119;
  char *v120;
  WTF::StringImpl *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  size_t v126;
  _QWORD *v127;
  _BYTE *v128;
  size_t v129;
  WTF::StringImpl *v130;
  _DWORD *v131;
  char *v132;
  __int128 v133;
  int8x16_t v134;
  __int128 v135;
  __int128 v136;
  char *v137;
  char *v138;
  char *v139;
  __int16 v140;
  char *v141;
  char *v142;
  __int128 v143;
  int8x16_t v144;
  __int128 v145;
  __int128 v146;
  char *v147;
  char *v148;
  char *v149;
  __int16 v150;
  char *v151;
  char *v152;
  __int128 v153;
  int8x16_t v154;
  __int128 v155;
  __int128 v156;
  char *v157;
  char *v158;
  char *v159;
  __int16 v160;
  int8x16_t *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  char *v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  char *v171;
  char *v172;
  char *v173;
  __int128 v174;
  char *v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  char *v179;
  char *v180;
  char *v181;
  __int16 v182;
  char *v183;
  char *v184;
  char *v185;
  __int128 v186;
  int8x16_t v187;
  __int128 v188;
  __int128 v189;
  char *v190;
  char *v191;
  char *v192;
  __int16 v193;
  char *v194;
  char *v195;
  __int128 v196;
  int8x16_t v197;
  __int128 v198;
  __int128 v199;
  char *v200;
  char *v201;
  char *v202;
  __int16 v203;
  char *v204;
  char *v205;
  __int128 v206;
  int8x16_t v207;
  __int128 v208;
  __int128 v209;
  char *v210;
  char *v211;
  char *v212;
  __int16 v213;
  int8x16_t *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  __int128 v219;
  char *v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  char *v224;
  char *v225;
  char *v226;
  __int16 v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  unsigned __int128 *v232;
  unsigned __int128 *v233;
  unsigned __int128 *v234;
  unsigned __int128 v235;
  unsigned __int128 *v236;
  unsigned __int128 *v237;
  unsigned __int128 *v238;
  unsigned __int128 v239;
  unsigned __int128 *v240;
  unsigned __int128 *v241;
  unsigned __int128 *v242;
  unsigned __int128 v243;
  unsigned int *v244;
  char v245;
  char v246;
  char v247;
  size_t v248;
  int v249;
  int v250;
  int v251;
  uint64_t v252;
  int8x16_t *__src;
  _DWORD *v254;
  _QWORD *v255;
  WTF::StringImpl *v256;
  size_t __n;
  size_t __na;
  size_t v259;
  size_t v260;
  size_t v261;
  uint64_t v262;
  size_t v263;
  uint64_t v264;
  size_t v265;
  uint64_t v266;
  uint64_t v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  char v271;
  WTF::StringImpl *v272;
  uint64_t v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  _DWORD *v278;
  int8x16x2_t v279;
  int8x16x2_t v280;
  int8x16x2_t v281;
  int8x16x2_t v282;
  int8x16x2_t v283;
  int8x16x2_t v284;
  int8x16x2_t v285;
  int8x16x2_t v286;
  int8x16x2_t v287;
  int8x16x2_t v288;
  int8x16x2_t v289;
  int8x16x2_t v290;
  int8x16x2_t v291;
  int8x16x2_t v292;
  int8x16x2_t v293;
  int8x16x2_t v294;
  int8x16x2_t v295;
  int8x16x2_t v296;
  int8x16x2_t v297;
  int8x16x2_t v298;
  int8x16x2_t v299;
  int8x16x2_t v300;
  int8x16x2_t v301;
  int8x16x2_t v302;
  int8x16x2_t v303;
  int8x16x2_t v304;
  int8x16x2_t v305;

  v3 = (_QWORD *)this;
  v4 = *((_DWORD *)a2 + 2);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = a2[v7 + 2];
      v10 = v9[2] | (*((unsigned __int8 *)v9 + 6) << 16);
      if ((v10 & 0x3F800) != 0
        || ((v11 = v9[4], (v10 & 0x7F) != 0x50) ? (v12 = 0) : (v12 = v11), (unsigned __int16)(v12 - 16) > 0x19u))
      {
        v11 = v6;
      }
      else
      {
        if (v5 && v12 != (unsigned __int16)v6)
          goto LABEL_344;
        v13 = v7 + 1;
        if (v4 <= (int)v7 + 1)
        {
          this = v11;
LABEL_42:
          if ((v8 & 1) != 0)
          {
            this = (uint64_t)WebCore::nameString(this);
            v35 = *(_DWORD **)this;
            if (*(_QWORD *)this)
              *v35 += 2;
            *v3 = v35;
            return this;
          }
LABEL_344:
          *v3 = 0;
          return this;
        }
        while (1)
        {
          LODWORD(v7) = v13;
          v14 = a2[v13 + 2];
          if (((v14[2] | (*((unsigned __int8 *)v14 + 6) << 16)) & 0x3F800) != 0)
            break;
          this = v14[4];
          v15 = (v14[2] & 0x7F) == 0x50 ? v14[4] : 0;
          if ((unsigned __int16)(v15 - 16) > 0x19u)
            break;
          if (v15 != (unsigned __int16)v11)
            goto LABEL_344;
          v13 = v7 + 1;
          v11 = this;
          if (v4 <= (int)v7 + 1)
            goto LABEL_42;
        }
        v5 = 1;
      }
      v8 = 0;
      v16 = v7 + 1;
      v7 = (v7 + 1);
      v6 = v11;
    }
    while (v4 > v16);
    if (v5)
      goto LABEL_344;
    if (v4 >= 8)
    {
      v17 = 0;
      do
      {
        this = WebCore::isInitialValueForLonghand((*a2)[v17 + 7], (uint64_t)a2[v17 + 9]);
        if ((this & 1) == 0)
          goto LABEL_344;
        v18 = v17 + 8;
        ++v17;
      }
      while (v18 < *((unsigned int *)a2 + 2));
    }
  }
  this = WebCore::longhandValueID((*a2)[1], (uint64_t)a2[3]);
  v19 = this;
  if ((_DWORD)this != 50 && (_DWORD)this != 90)
    goto LABEL_344;
  this = WebCore::longhandValueID((*a2)[3], (uint64_t)a2[5]);
  v20 = this;
  if (!(_DWORD)this)
  {
    v30 = a2[5];
    if (((v30[2] | (*((unsigned __int8 *)v30 + 6) << 16)) & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195815768);
    }
    if ((v30[2] & 0x7F) != 3)
      goto LABEL_344;
    v31 = *((double *)v30 + 1);
    v32 = v31;
    v33 = (float)(int)vcvts_n_s32_f32(v32, 2uLL) * 0.25;
    if (v31 != v33)
      goto LABEL_344;
    if (v33 == 50.0)
    {
      v20 = 108;
    }
    else if (v33 == 62.5)
    {
      v20 = 109;
    }
    else if (v33 == 75.0)
    {
      v20 = 110;
    }
    else if (v33 == 87.5)
    {
      v20 = 111;
    }
    else if (v33 == 100.0)
    {
      v20 = 90;
    }
    else if (v33 == 112.5)
    {
      v20 = 112;
    }
    else if (v33 == 125.0)
    {
      v20 = 113;
    }
    else if (v33 == 150.0)
    {
      v20 = 114;
    }
    else
    {
      if (v33 != 200.0)
        goto LABEL_344;
      v20 = 115;
    }
  }
  v255 = v3;
  isInitialValueForLonghand = WebCore::isInitialValueForLonghand(**a2, (uint64_t)a2[2]);
  v22 = WebCore::isInitialValueForLonghand((*a2)[2], (uint64_t)a2[4]);
  v271 = WebCore::isInitialValueForLonghand((*a2)[5], (uint64_t)a2[7]);
  v26 = "";
  if (!isInitialValueForLonghand)
  {
    WebCore::serializeLonghandValue(**a2, (uint64_t)a2[2], v23, v24, (WebCore *)&v277, v25);
    if (v19 == 90)
    {
      v27 = "";
      v266 = 1;
      v28 = "";
      v29 = 1;
      goto LABEL_47;
    }
    v27 = " ";
    v266 = 2;
LABEL_40:
    v34 = (const char **)(&WebCore::valueList + 2 * v19);
    v28 = *v34;
    v29 = (uint64_t)v34[1];
    goto LABEL_47;
  }
  v27 = "";
  v277 = 0;
  v266 = 1;
  v28 = "";
  v29 = 1;
  if (v19 != 90)
    goto LABEL_40;
LABEL_47:
  v264 = v29;
  v36 = v19 == 90;
  v37 = v22 ^ 1;
  if (v36)
    v38 = isInitialValueForLonghand ^ 1;
  else
    v38 = 1;
  if ((v37 & v38) != 0)
    v39 = " ";
  else
    v39 = "";
  v40 = 1;
  if ((v37 & v38) != 0)
    v40 = 2;
  v262 = v40;
  if ((v22 & 1) != 0)
    v276 = 0;
  else
    WebCore::serializeLonghandValue((*a2)[2], (uint64_t)a2[4], v23, v24, (WebCore *)&v276, v25);
  if (v38 | v37)
    v41 = " ";
  else
    v41 = "";
  v42 = 1;
  if (v38 | v37)
    v43 = 2;
  else
    v43 = 1;
  if (v20 == 90)
  {
    v44 = "";
    v45 = 1;
  }
  else
  {
    if (v20 > 0x48D)
    {
      v26 = 0;
      v42 = 0;
    }
    else
    {
      v46 = (const char **)(&WebCore::valueList + 2 * v20);
      v26 = *v46;
      v42 = (uint64_t)v46[1];
    }
    v44 = v41;
    v41 = " ";
    v45 = v43;
    v43 = 2;
  }
  if ((v271 & 1) != 0)
  {
    v275 = 0;
    __src = (int8x16_t *)"";
    v47 = 1;
  }
  else
  {
    WebCore::serializeLonghandValue((*a2)[5], (uint64_t)a2[7], v23, v24, (WebCore *)&v275, v25);
    __src = (int8x16_t *)" / ";
    v47 = 4;
  }
  __n = v47;
  v48 = v277;
  if (v277)
    *(_DWORD *)v277 += 2;
  v256 = v48;
  v49 = v276;
  if (v276)
    *(_DWORD *)v276 += 2;
  v269 = v49;
  WebCore::serializeLonghandValue((*a2)[4], (uint64_t)a2[6], v23, v24, (WebCore *)&v274, v25);
  v53 = v275;
  if (v275)
    *(_DWORD *)v275 += 2;
  v272 = v53;
  WebCore::serializeLonghandValue((*a2)[6], (uint64_t)a2[8], v50, v51, (WebCore *)&v273, v52);
  v54 = (WTF::StringImpl *)v273;
  v270 = v274;
  v248 = v266 - 1;
  if ((unint64_t)(v266 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1958159ACLL);
  }
  if (v264)
  {
    v55 = v264 - 1;
    if ((unint64_t)(v264 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1958159DCLL);
    }
  }
  else
  {
    v55 = 0;
  }
  v259 = v55;
  v249 = v262 - 1;
  if ((unint64_t)(v262 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195815A0CLL);
  }
  v260 = v262 - 1;
  v130 = (WTF::StringImpl *)(v45 - 1);
  if ((unint64_t)(v45 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195815A3CLL);
  }
  v261 = v45 - 1;
  if (v42)
  {
    v56 = v42 - 1;
    if ((unint64_t)(v42 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195815A6CLL);
    }
  }
  else
  {
    v56 = 0;
  }
  v263 = v56;
  v250 = v43 - 1;
  if ((unint64_t)(v43 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195815A9CLL);
  }
  v265 = v43 - 1;
  v251 = __n - 1;
  if ((__n - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195815ACCLL);
  }
  v244 = (unsigned int *)v256;
  k = v269;
  v59 = (int)v274;
  if (v256)
  {
    v57 = *((_DWORD *)v256 + 1);
    if (!v269)
      goto LABEL_393;
LABEL_86:
    v58 = *((_DWORD *)v269 + 1);
    if (!v274)
      goto LABEL_88;
    goto LABEL_87;
  }
  v57 = 0;
  if (v269)
    goto LABEL_86;
LABEL_393:
  v58 = 0;
  if (v274)
LABEL_87:
    v59 = *((_DWORD *)v274 + 1);
LABEL_88:
  if (v272)
  {
    v60 = *((_DWORD *)v272 + 1);
    if (v273)
      goto LABEL_90;
LABEL_202:
    v61 = 0;
    goto LABEL_91;
  }
  v60 = 0;
  if (!v273)
    goto LABEL_202;
LABEL_90:
  v61 = *(_DWORD *)(v273 + 4);
  if (v61 < 0)
    goto LABEL_212;
LABEL_91:
  v62 = __OFADD__(v61, 1);
  v63 = v61 + 1;
  v64 = v62;
  if (v60 < 0)
    goto LABEL_212;
  if ((v64 & 1) != 0)
    goto LABEL_212;
  v62 = __OFADD__(v60, v63);
  v65 = v60 + v63;
  if (v62)
    goto LABEL_212;
  v62 = __OFADD__(v251, v65);
  v66 = v251 + v65;
  v67 = v62;
  if (v59 < 0)
    goto LABEL_212;
  if (v67)
    goto LABEL_212;
  v62 = __OFADD__(v59, v66);
  v68 = v59 + v66;
  if (v62)
    goto LABEL_212;
  v62 = __OFADD__(v250, v68);
  v69 = v250 + v68;
  if (v62)
    goto LABEL_212;
  v62 = __OFADD__((_DWORD)v56, v69);
  v70 = v56 + v69;
  if (v62)
    goto LABEL_212;
  v62 = __OFADD__((_DWORD)v130, v70);
  v71 = (_DWORD)v130 + v70;
  v72 = v62;
  if (v58 < 0)
    goto LABEL_212;
  if (v72)
    goto LABEL_212;
  v62 = __OFADD__(v58, v71);
  v73 = v58 + v71;
  if (v62)
    goto LABEL_212;
  v62 = __OFADD__(v249, v73);
  v74 = v249 + v73;
  if (v62)
    goto LABEL_212;
  v62 = __OFADD__((_DWORD)v55, v74);
  v75 = v55 + v74;
  if (v62)
    goto LABEL_212;
  v62 = __OFADD__((_DWORD)v248, v75);
  v76 = v248 + v75;
  v77 = v62;
  if (v57 < 0)
    goto LABEL_212;
  if (v77)
    goto LABEL_212;
  v78 = v57 + v76;
  if (__OFADD__(v57, v76))
    goto LABEL_212;
  __na = __n - 1;
  if ((!v256 || (*((_BYTE *)v256 + 16) & 4) != 0)
    && (!v269 || (*((_BYTE *)v269 + 16) & 4) != 0)
    && (!v274 || (*((_BYTE *)v274 + 16) & 4) != 0))
  {
    if (v272)
    {
      v100 = *((_DWORD *)v272 + 4);
      if (!v273 || (v100 & 4) == 0)
      {
        v79 = v78;
        v101 = v78 == 0;
        if ((v100 & 4) != 0)
          goto LABEL_145;
        goto LABEL_199;
      }
    }
    else if (!v273)
    {
      if (!v78)
        goto LABEL_200;
      v252 = 0;
      v54 = 0;
      v79 = v78;
      if ((v78 & 0x80000000) != 0)
        goto LABEL_212;
LABEL_147:
      v268 = v54;
      WTF::tryFastCompactMalloc((WTF *)(v79 + 20));
      v103 = v259;
      i = v260;
      j = v261;
      v104 = v263;
      v107 = v265;
      v106 = (uint64_t)v268;
      v108 = v278;
      if (v278)
      {
        v109 = (unsigned __int128 *)(v278 + 5);
        *v278 = 2;
        v108[1] = v78;
        *((_QWORD *)v108 + 1) = v108 + 5;
        v108[4] = 4;
        v254 = v108;
        if (v256)
        {
          v110 = (_BYTE *)*((_QWORD *)v256 + 1);
          v111 = *((unsigned int *)v256 + 1);
          if ((*((_BYTE *)v256 + 16) & 4) != 0)
          {
            if ((_DWORD)v111)
            {
              if ((_DWORD)v111 == 1)
                *(_BYTE *)v109 = *v110;
              else
                memcpy(v108 + 5, v110, v111);
              v107 = v265;
              v106 = (uint64_t)v268;
              j = v261;
              v104 = v263;
              v103 = v259;
              i = v260;
            }
          }
          else
          {
            v232 = (unsigned __int128 *)((char *)v109 + v111);
            if (v111 < 0x10)
            {
              v233 = (unsigned __int128 *)(v108 + 5);
            }
            else
            {
              v233 = (unsigned __int128 *)((char *)v109 + (v111 & 0xFFFFFFF0));
              v234 = v109;
              do
              {
                v235 = (unsigned __int128)vld2q_s8(v110);
                v110 += 32;
                *v234++ = v235;
              }
              while (v234 != v233);
            }
            v244 = (unsigned int *)v256;
            v107 = v265;
            v106 = (uint64_t)v268;
            j = v261;
            v104 = v263;
            v103 = v259;
            for (i = v260; v233 != v232; v233 = (unsigned __int128 *)((char *)v233 + 1))
            {
              v245 = *v110;
              v110 += 2;
              *(_BYTE *)v233 = v245;
            }
          }
          v112 = v244[1];
        }
        else
        {
          v112 = 0;
        }
        v113 = (char *)v109 + v112;
        if ((_DWORD)v248)
        {
          if ((_DWORD)v248 == 1)
            *v113 = *v27;
          else
            memcpy(v113, v27, v248);
          v107 = v265;
          v106 = (uint64_t)v268;
          j = v261;
          v104 = v263;
          v103 = v259;
          i = v260;
        }
        v114 = &v113[v248];
        if ((_DWORD)v103)
        {
          if ((_DWORD)v103 == 1)
          {
            *v114 = *v28;
          }
          else
          {
            memcpy(v114, v28, v103);
            v103 = v259;
          }
          v107 = v265;
          v106 = (uint64_t)v268;
          j = v261;
          v104 = v263;
          i = v260;
        }
        v115 = &v114[v103];
        k = v269;
        if ((_DWORD)i)
        {
          if ((_DWORD)i == 1)
          {
            *v115 = *v39;
          }
          else
          {
            memcpy(v115, v39, i);
            i = v260;
          }
          v107 = v265;
          v106 = (uint64_t)v268;
          j = v261;
          v104 = v263;
        }
        v116 = &v115[i];
        if (v269)
        {
          v117 = (char *)*((_QWORD *)v269 + 1);
          v118 = *((unsigned int *)v269 + 1);
          if ((*((_BYTE *)v269 + 16) & 4) != 0)
          {
            if ((_DWORD)v118)
            {
              if ((_DWORD)v118 == 1)
                *v116 = *v117;
              else
                memcpy(v116, v117, v118);
              v107 = v265;
              v106 = (uint64_t)v268;
              j = v261;
              v104 = v263;
            }
          }
          else
          {
            v236 = (unsigned __int128 *)&v116[v118];
            if (v118 < 0x10)
            {
              v237 = (unsigned __int128 *)v116;
            }
            else
            {
              v237 = (unsigned __int128 *)&v116[v118 & 0xFFFFFFF0];
              v238 = (unsigned __int128 *)v116;
              do
              {
                v239 = (unsigned __int128)vld2q_s8(v117);
                v117 += 32;
                *v238++ = v239;
              }
              while (v238 != v237);
            }
            v244 = (unsigned int *)v256;
            v106 = (uint64_t)v268;
            k = v269;
            v104 = v263;
            v107 = v265;
            for (j = v261; v237 != v236; v237 = (unsigned __int128 *)((char *)v237 + 1))
            {
              v246 = *v117;
              v117 += 2;
              *(_BYTE *)v237 = v246;
            }
          }
          v119 = *((unsigned int *)k + 1);
        }
        else
        {
          v119 = 0;
        }
        v120 = &v116[v119];
        v121 = v270;
        if ((_DWORD)j)
        {
          if ((_DWORD)j == 1)
          {
            *v120 = *v44;
          }
          else
          {
            memcpy(v120, v44, j);
            j = v261;
          }
          v107 = v265;
          v106 = (uint64_t)v268;
          v121 = v270;
          v104 = v263;
        }
        v122 = &v120[j];
        if ((_DWORD)v104)
        {
          if ((_DWORD)v104 == 1)
          {
            *v122 = *v26;
          }
          else
          {
            memcpy(v122, v26, v104);
            v104 = v263;
          }
          v107 = v265;
          v106 = (uint64_t)v268;
          v121 = v270;
        }
        v123 = &v122[v104];
        if ((_DWORD)v107)
        {
          if ((_DWORD)v107 == 1)
          {
            *v123 = *v41;
          }
          else
          {
            memcpy(v123, v41, v107);
            v107 = v265;
          }
          v106 = (uint64_t)v268;
          v121 = v270;
        }
        v124 = &v123[v107];
        if (v121)
        {
          v125 = (char *)*((_QWORD *)v121 + 1);
          v126 = *((unsigned int *)v121 + 1);
          v127 = v255;
          if ((*((_BYTE *)v121 + 16) & 4) != 0)
          {
            if ((_DWORD)v126)
            {
              if ((_DWORD)v126 == 1)
                *v124 = *v125;
              else
                memcpy(v124, v125, v126);
              v106 = (uint64_t)v268;
            }
          }
          else
          {
            v240 = (unsigned __int128 *)&v124[v126];
            if (v126 < 0x10)
            {
              v241 = (unsigned __int128 *)v124;
            }
            else
            {
              v241 = (unsigned __int128 *)&v124[v126 & 0xFFFFFFF0];
              v242 = (unsigned __int128 *)v124;
              do
              {
                v243 = (unsigned __int128)vld2q_s8(v125);
                v125 += 32;
                *v242++ = v243;
              }
              while (v242 != v241);
            }
            v127 = v255;
            v244 = (unsigned int *)v256;
            v106 = (uint64_t)v268;
            for (k = v269; v241 != v240; v241 = (unsigned __int128 *)((char *)v241 + 1))
            {
              v247 = *v125;
              v125 += 2;
              *(_BYTE *)v241 = v247;
            }
          }
          v121 = (WTF::StringImpl *)*((unsigned int *)v270 + 1);
        }
        else
        {
          v127 = v255;
        }
        v128 = (char *)v121 + (_QWORD)v124;
        v129 = __na;
        if ((_DWORD)__na)
        {
          if ((_DWORD)__na == 1)
          {
            *v128 = __src->i8[0];
          }
          else
          {
            memcpy(v128, __src, __na);
            v129 = __na;
          }
          v106 = (uint64_t)v268;
        }
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v128[v129], v252, 32, v106);
        goto LABEL_287;
      }
LABEL_212:
      *v255 = 0;
      __break(0xC471u);
      JUMPOUT(0x195815138);
    }
    v79 = v78;
    v101 = v78 == 0;
    if ((*(_BYTE *)(v273 + 16) & 4) != 0)
    {
LABEL_145:
      if (v101)
        goto LABEL_200;
      v252 = (uint64_t)v272;
      if ((v78 & 0x80000000) != 0)
        goto LABEL_212;
      goto LABEL_147;
    }
LABEL_199:
    if (!v101)
      goto LABEL_127;
LABEL_200:
    v131 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v127 = v255;
    goto LABEL_288;
  }
  if (!v78)
    goto LABEL_200;
  v79 = v78;
LABEL_127:
  if (v78 > 0x7FFFFFEF)
    goto LABEL_212;
  v267 = v273;
  WTF::tryFastCompactMalloc((WTF *)(2 * v79 + 20));
  v81 = v259;
  v80 = v260;
  v83 = v261;
  v82 = v263;
  v85 = v265;
  v84 = v267;
  v86 = __na;
  v87 = (uint64_t)v272;
  v88 = v278;
  if (!v278)
    goto LABEL_212;
  v89 = (char *)(v278 + 5);
  *v278 = 2;
  v88[1] = v78;
  *((_QWORD *)v88 + 1) = v88 + 5;
  v88[4] = 0;
  v254 = v88;
  if (v256)
  {
    v90 = (int8x16_t *)*((_QWORD *)v256 + 1);
    v91 = *((unsigned int *)v256 + 1);
    if ((*((_BYTE *)v256 + 16) & 4) != 0)
    {
      v97 = &v89[2 * v91];
      if (v91 >= 0x40)
      {
        v98 = &v89[2 * (v91 & 0xFFFFFFC0)];
        v166 = 0uLL;
        v167 = v89;
        do
        {
          v282.val[0] = *v90;
          v168 = v90[1];
          v291.val[0] = v90[2];
          v169 = v90[3];
          v90 += 4;
          v170 = v169;
          v291.val[1] = 0uLL;
          v300.val[0] = v168;
          v282.val[1] = 0uLL;
          v171 = v167;
          vst2q_s8(v171, v282);
          v171 += 32;
          v300.val[1] = 0uLL;
          vst2q_s8(v171, v300);
          v172 = v167 + 64;
          vst2q_s8(v172, v291);
          v173 = v167 + 96;
          vst2q_s8(v173, *(int8x16x2_t *)(&v166 - 1));
          v167 += 128;
        }
        while (v167 != v98);
      }
      else
      {
        v98 = v89;
      }
      v92 = v270;
      while (v98 != v97)
      {
        v99 = v90->u8[0];
        v90 = (int8x16_t *)((char *)v90 + 1);
        *(_WORD *)v98 = v99;
        v98 += 2;
      }
    }
    else
    {
      v92 = v270;
      if ((_DWORD)v91 == 1)
      {
        *(_WORD *)v89 = v90->i16[0];
      }
      else if ((_DWORD)v91)
      {
        memcpy(v89, v90, 2 * v91);
        v81 = v259;
        v80 = v260;
        v83 = v261;
        v82 = v263;
        v85 = v265;
        v84 = v267;
        v86 = __na;
        v92 = v270;
        v87 = (uint64_t)v272;
      }
    }
    v93 = *((unsigned int *)v256 + 1);
  }
  else
  {
    v93 = 0;
    v92 = v270;
  }
  v94 = &v89[2 * v93];
  v95 = &v94[2 * v248];
  if ((v248 & 0x7FFFFFC0) != 0)
  {
    v132 = &v94[2 * (v248 & 0x7FFFFFC0)];
    v133 = 0uLL;
    k = v269;
    do
    {
      v279.val[0] = *(int8x16_t *)v27;
      v134 = *((int8x16_t *)v27 + 1);
      v288.val[0] = (int8x16_t)*((_OWORD *)v27 + 2);
      v135 = *((_OWORD *)v27 + 3);
      v27 += 64;
      v136 = v135;
      v288.val[1] = 0uLL;
      v297.val[0] = v134;
      v279.val[1] = 0uLL;
      v137 = v94;
      vst2q_s8(v137, v279);
      v137 += 32;
      v297.val[1] = 0uLL;
      vst2q_s8(v137, v297);
      v138 = v94 + 64;
      vst2q_s8(v138, v288);
      v139 = v94 + 96;
      vst2q_s8(v139, *(int8x16x2_t *)(&v133 - 1));
      v94 += 128;
    }
    while (v94 != v132);
    v94 = v132;
  }
  else
  {
    k = v269;
  }
  while (v94 != v95)
  {
    v140 = *(unsigned __int8 *)v27++;
    *(_WORD *)v94 = v140;
    v94 += 2;
  }
  v141 = &v95[2 * v81];
  if ((v81 & 0x7FFFFFC0) != 0)
  {
    v142 = &v95[2 * (v81 & 0x7FFFFFC0)];
    v143 = 0uLL;
    do
    {
      v280.val[0] = *(int8x16_t *)v28;
      v144 = *((int8x16_t *)v28 + 1);
      v289.val[0] = (int8x16_t)*((_OWORD *)v28 + 2);
      v145 = *((_OWORD *)v28 + 3);
      v28 += 64;
      v146 = v145;
      v289.val[1] = 0uLL;
      v298.val[0] = v144;
      v280.val[1] = 0uLL;
      v147 = v95;
      vst2q_s8(v147, v280);
      v147 += 32;
      v298.val[1] = 0uLL;
      vst2q_s8(v147, v298);
      v148 = v95 + 64;
      vst2q_s8(v148, v289);
      v149 = v95 + 96;
      vst2q_s8(v149, *(int8x16x2_t *)(&v143 - 1));
      v95 += 128;
    }
    while (v95 != v142);
    v95 = v142;
  }
  while (v95 != v141)
  {
    v150 = *(unsigned __int8 *)v28++;
    *(_WORD *)v95 = v150;
    v95 += 2;
  }
  v151 = &v141[2 * v80];
  if ((v80 & 0x7FFFFFC0) != 0)
  {
    v152 = &v141[2 * (v80 & 0x7FFFFFC0)];
    v153 = 0uLL;
    do
    {
      v281.val[0] = *(int8x16_t *)v39;
      v154 = *((int8x16_t *)v39 + 1);
      v290.val[0] = (int8x16_t)*((_OWORD *)v39 + 2);
      v155 = *((_OWORD *)v39 + 3);
      v39 += 64;
      v156 = v155;
      v290.val[1] = 0uLL;
      v299.val[0] = v154;
      v281.val[1] = 0uLL;
      v157 = v141;
      vst2q_s8(v157, v281);
      v157 += 32;
      v299.val[1] = 0uLL;
      vst2q_s8(v157, v299);
      v158 = v141 + 64;
      vst2q_s8(v158, v290);
      v159 = v141 + 96;
      vst2q_s8(v159, *(int8x16x2_t *)(&v153 - 1));
      v141 += 128;
    }
    while (v141 != v152);
    v141 = v152;
  }
  while (v141 != v151)
  {
    v160 = *(unsigned __int8 *)v39++;
    *(_WORD *)v141 = v160;
    v141 += 2;
  }
  if (k)
  {
    v161 = (int8x16_t *)*((_QWORD *)k + 1);
    v162 = *((unsigned int *)k + 1);
    if ((*((_BYTE *)k + 16) & 4) != 0)
    {
      v163 = &v151[2 * v162];
      if (v162 >= 0x40)
      {
        v164 = &v151[2 * (v162 & 0xFFFFFFC0)];
        v174 = 0uLL;
        v175 = v151;
        do
        {
          v283.val[0] = *v161;
          v176 = v161[1];
          v292.val[0] = v161[2];
          v177 = v161[3];
          v161 += 4;
          v178 = v177;
          v292.val[1] = 0uLL;
          v301.val[0] = v176;
          v283.val[1] = 0uLL;
          v179 = v175;
          vst2q_s8(v179, v283);
          v179 += 32;
          v301.val[1] = 0uLL;
          vst2q_s8(v179, v301);
          v180 = v175 + 64;
          vst2q_s8(v180, v292);
          v181 = v175 + 96;
          vst2q_s8(v181, *(int8x16x2_t *)(&v174 - 1));
          v175 += 128;
        }
        while (v175 != v164);
      }
      else
      {
        v164 = v151;
      }
      while (v164 != v163)
      {
        v182 = v161->u8[0];
        v161 = (int8x16_t *)((char *)v161 + 1);
        *(_WORD *)v164 = v182;
        v164 += 2;
      }
    }
    else if ((_DWORD)v162 == 1)
    {
      *(_WORD *)v151 = v161->i16[0];
    }
    else if ((_DWORD)v162)
    {
      memcpy(v151, v161, 2 * v162);
      v83 = v261;
      v82 = v263;
      v85 = v265;
      v84 = v267;
      v86 = __na;
      v92 = v270;
      v87 = (uint64_t)v272;
    }
    v165 = *((unsigned int *)k + 1);
  }
  else
  {
    v165 = 0;
  }
  v183 = &v151[2 * v165];
  v184 = &v183[2 * v83];
  if ((v83 & 0x7FFFFFC0) != 0)
  {
    v185 = &v183[2 * (v83 & 0x7FFFFFC0)];
    v186 = 0uLL;
    do
    {
      v284.val[0] = *(int8x16_t *)v44;
      v187 = *((int8x16_t *)v44 + 1);
      v293.val[0] = (int8x16_t)*((_OWORD *)v44 + 2);
      v188 = *((_OWORD *)v44 + 3);
      v44 += 64;
      v189 = v188;
      v293.val[1] = 0uLL;
      v302.val[0] = v187;
      v284.val[1] = 0uLL;
      v190 = v183;
      vst2q_s8(v190, v284);
      v190 += 32;
      v302.val[1] = 0uLL;
      vst2q_s8(v190, v302);
      v191 = v183 + 64;
      vst2q_s8(v191, v293);
      v192 = v183 + 96;
      vst2q_s8(v192, *(int8x16x2_t *)(&v186 - 1));
      v183 += 128;
    }
    while (v183 != v185);
    v183 = v185;
  }
  while (v183 != v184)
  {
    v193 = *(unsigned __int8 *)v44++;
    *(_WORD *)v183 = v193;
    v183 += 2;
  }
  v194 = &v184[2 * v82];
  if ((v82 & 0x7FFFFFC0) != 0)
  {
    v195 = &v184[2 * (v82 & 0x7FFFFFC0)];
    v196 = 0uLL;
    do
    {
      v285.val[0] = *(int8x16_t *)v26;
      v197 = *((int8x16_t *)v26 + 1);
      v294.val[0] = (int8x16_t)*((_OWORD *)v26 + 2);
      v198 = *((_OWORD *)v26 + 3);
      v26 += 64;
      v199 = v198;
      v294.val[1] = 0uLL;
      v303.val[0] = v197;
      v285.val[1] = 0uLL;
      v200 = v184;
      vst2q_s8(v200, v285);
      v200 += 32;
      v303.val[1] = 0uLL;
      vst2q_s8(v200, v303);
      v201 = v184 + 64;
      vst2q_s8(v201, v294);
      v202 = v184 + 96;
      vst2q_s8(v202, *(int8x16x2_t *)(&v196 - 1));
      v184 += 128;
    }
    while (v184 != v195);
    v184 = v195;
  }
  while (v184 != v194)
  {
    v203 = *(unsigned __int8 *)v26++;
    *(_WORD *)v184 = v203;
    v184 += 2;
  }
  v204 = &v194[2 * v85];
  if ((v85 & 0x7FFFFFC0) != 0)
  {
    v205 = &v194[2 * (v85 & 0x7FFFFFC0)];
    v206 = 0uLL;
    do
    {
      v286.val[0] = *(int8x16_t *)v41;
      v207 = *((int8x16_t *)v41 + 1);
      v295.val[0] = (int8x16_t)*((_OWORD *)v41 + 2);
      v208 = *((_OWORD *)v41 + 3);
      v41 += 64;
      v209 = v208;
      v295.val[1] = 0uLL;
      v304.val[0] = v207;
      v286.val[1] = 0uLL;
      v210 = v194;
      vst2q_s8(v210, v286);
      v210 += 32;
      v304.val[1] = 0uLL;
      vst2q_s8(v210, v304);
      v211 = v194 + 64;
      vst2q_s8(v211, v295);
      v212 = v194 + 96;
      vst2q_s8(v212, *(int8x16x2_t *)(&v206 - 1));
      v194 += 128;
    }
    while (v194 != v205);
    v194 = v205;
  }
  while (v194 != v204)
  {
    v213 = *(unsigned __int8 *)v41++;
    *(_WORD *)v194 = v213;
    v194 += 2;
  }
  if (v92)
  {
    v214 = (int8x16_t *)*((_QWORD *)v92 + 1);
    v215 = *((unsigned int *)v92 + 1);
    v127 = v255;
    if ((*((_BYTE *)v92 + 16) & 4) != 0)
    {
      v216 = &v204[2 * v215];
      if (v215 >= 0x40)
      {
        v217 = &v204[2 * (v215 & 0xFFFFFFC0)];
        v219 = 0uLL;
        v220 = v204;
        do
        {
          v287.val[0] = *v214;
          v221 = v214[1];
          v296.val[0] = v214[2];
          v222 = v214[3];
          v214 += 4;
          v223 = v222;
          v296.val[1] = 0uLL;
          v305.val[0] = v221;
          v287.val[1] = 0uLL;
          v224 = v220;
          vst2q_s8(v224, v287);
          v224 += 32;
          v305.val[1] = 0uLL;
          vst2q_s8(v224, v305);
          v225 = v220 + 64;
          vst2q_s8(v225, v296);
          v226 = v220 + 96;
          vst2q_s8(v226, *(int8x16x2_t *)(&v219 - 1));
          v220 += 128;
        }
        while (v220 != v217);
      }
      else
      {
        v217 = v204;
      }
      while (v217 != v216)
      {
        v227 = v214->u8[0];
        v214 = (int8x16_t *)((char *)v214 + 1);
        *(_WORD *)v217 = v227;
        v217 += 2;
      }
    }
    else if ((_DWORD)v215 == 1)
    {
      *(_WORD *)v204 = v214->i16[0];
    }
    else if ((_DWORD)v215)
    {
      memcpy(v204, v214, 2 * v215);
      v86 = __na;
      v92 = v270;
      v87 = (uint64_t)v272;
      v84 = v267;
    }
    v218 = *((unsigned int *)v92 + 1);
  }
  else
  {
    v218 = 0;
    v127 = v255;
  }
  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v204[2 * v218], __src, v86, v87, 32, v84);
LABEL_287:
  v54 = (WTF::StringImpl *)v273;
  v131 = v254;
LABEL_288:
  *v127 = v131;
  v273 = 0;
  v228 = v272;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::destroy(v54, v130);
      v228 = v272;
      if (!v272)
        goto LABEL_294;
      goto LABEL_292;
    }
    *(_DWORD *)v54 -= 2;
  }
  if (!v272)
    goto LABEL_294;
LABEL_292:
  if (*(_DWORD *)v228 == 2)
    WTF::StringImpl::destroy(v228, v130);
  else
    *(_DWORD *)v228 -= 2;
LABEL_294:
  v229 = v274;
  v274 = 0;
  if (!v229)
    goto LABEL_297;
  if (*(_DWORD *)v229 != 2)
  {
    *(_DWORD *)v229 -= 2;
LABEL_297:
    if (k)
      goto LABEL_298;
    goto LABEL_300;
  }
  WTF::StringImpl::destroy(v229, v130);
  if (k)
  {
LABEL_298:
    if (*(_DWORD *)k == 2)
      WTF::StringImpl::destroy(k, v130);
    else
      *(_DWORD *)k -= 2;
  }
LABEL_300:
  if (v244)
  {
    if (*v244 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v244, v130);
    else
      *v244 -= 2;
  }
  v230 = v275;
  v275 = 0;
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
      WTF::StringImpl::destroy(v230, v130);
    else
      *(_DWORD *)v230 -= 2;
  }
  v231 = v276;
  v276 = 0;
  if (v231)
  {
    if (*(_DWORD *)v231 == 2)
      WTF::StringImpl::destroy(v231, v130);
    else
      *(_DWORD *)v231 -= 2;
  }
  this = (uint64_t)v277;
  v277 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v130);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeFontVariant(WTF::StringImpl *this, unsigned __int16 **a2)
{
  WebCore::ShorthandSerializer *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  unsigned int v8;
  unsigned int v10;
  WTF::StringBuilder *v11;
  WTF::String *v12;
  __n128 v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;

  v3 = this;
  v4 = *((_DWORD *)a2 + 2);
  if (v4)
  {
    v5 = 0;
    while (1)
    {
      v6 = a2[v5 + 2];
      v7 = v6[2] | (*((unsigned __int8 *)v6 + 6) << 16);
      if ((v7 & 0x3F800) == 0)
      {
        v8 = v6[4] - 16;
        if ((v7 & 0x7F) == 0x50 && v8 < 0x1A)
          break;
      }
      v10 = v5 + 1;
      v5 = (v5 + 1);
      if (v4 <= v10)
        goto LABEL_10;
    }
LABEL_18:
    *(_QWORD *)v3 = 0;
  }
  else
  {
LABEL_10:
    if (WebCore::longhandValueID(**a2, (uint64_t)a2[2]) == 6)
    {
      v14 = *((_DWORD *)a2 + 2);
      if (v14)
      {
        v15 = 0;
        do
        {
          v16 = (*a2)[v15];
          if (v16 != 24)
          {
            this = (WTF::StringImpl *)WebCore::isInitialValueForLonghand(v16, (uint64_t)a2[v15 + 2]);
            if (!(_DWORD)this)
              goto LABEL_18;
            v14 = *((_DWORD *)a2 + 2);
          }
          v17 = v15 + 1;
          v15 = (v15 + 1);
        }
        while (v14 > v17);
      }
    }
    return WebCore::ShorthandSerializer::serializeLonghandsOmittingInitialValues(v3, a2, v11, v12, v13);
  }
  return this;
}

void WebCore::ShorthandSerializer::serializeFontSynthesis(WebCore::ShorthandSerializer *this, uint64_t *a2)
{
  int v3;
  int v4;
  char *v5;

  v3 = 4 * (WebCore::longhandValueID(*(unsigned __int16 *)*a2, a2[2]) != 6);
  v4 = v3 | (2 * (WebCore::longhandValueID(*(unsigned __int16 *)(*a2 + 2), a2[3]) != 6));
  v5 = (char *)sub_195815CC8
     + 4 * byte_1969EEE23[v4 | (WebCore::longhandValueID(*(unsigned __int16 *)(*a2 + 4), a2[4]) != 6)];
  __asm { BR              X10 }
}

void sub_195815CC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  _DWORD *v30;

  {
    bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
LABEL_3:
    WTF::AtomString::AtomString(&v30, (uint64_t)"none", 5uLL);
    v25 = v30;
    v30 = 0;
    v27 = (WTF::StringImpl *)qword_1EE2EFA10;
    qword_1EE2EFA10 = (uint64_t)v25;
    if (!v27)
      goto LABEL_13;
    v28 = *(_DWORD *)v27 - 2;
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, v26);
      v27 = (WTF::StringImpl *)v30;
      v30 = 0;
      if (!v27)
        goto LABEL_6;
      v28 = *(_DWORD *)v27 - 2;
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::destroy(v27, v29);
        goto LABEL_6;
      }
    }
    *(_DWORD *)v27 = v28;
LABEL_6:
    v25 = (_DWORD *)qword_1EE2EFA10;
LABEL_13:
    if (!v25)
      goto LABEL_8;
    goto LABEL_7;
  }
  v25 = (_DWORD *)qword_1EE2EFA10;
  if (!qword_1EE2EFA10)
    goto LABEL_3;
LABEL_7:
  *v25 += 2;
LABEL_8:
  *v24 = v25;
}

void WebCore::ShorthandSerializer::serializeGrid(WebCore::ShorthandSerializer *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  WTF::StringBuilder *v10;
  WTF::String *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  WTF::StringBuilder *v60;
  WTF::String *v61;
  __n128 v62;
  _OWORD *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  int v66;
  int v67;
  BOOL v68;
  int v69;
  char v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  int8x16_t v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  char *v88;
  char *v89;
  __int16 v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringBuilder *v93;
  WTF::String *v94;
  __n128 v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  _WORD *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  _BYTE *v113;
  _BYTE *v114;
  size_t v115;
  uint64_t v116;
  _BYTE *v117;
  char *v118;
  char *v119;
  char *v120;
  int v121;
  int v122;
  _BOOL4 v123;
  uint64_t v124;
  __int128 v125;
  char *v126;
  int8x16_t v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  char *v131;
  char *v132;
  __int16 v133;
  _WORD *v134;
  char *v135;
  char *v136;
  char *v137;
  __int128 v138;
  int8x16_t v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  char *v143;
  char *v144;
  __int16 v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  __int128 v150;
  int8x16_t v151;
  __int128 v152;
  __int128 v153;
  char *v154;
  char *v155;
  char *v156;
  __int16 v157;
  WTF::StringImpl *v158;
  unsigned __int128 *v159;
  unsigned __int128 *v160;
  unsigned __int128 v161;
  char v162;
  size_t v163;
  size_t v164;
  unsigned int v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  _QWORD v172[2];
  _QWORD v173[2];
  _QWORD v174[2];
  int8x16x2_t v175;
  int8x16x2_t v176;
  int8x16x2_t v177;
  int8x16x2_t v178;
  int8x16x2_t v179;
  int8x16x2_t v180;
  int8x16x2_t v181;
  int8x16x2_t v182;
  int8x16x2_t v183;
  int8x16x2_t v184;
  int8x16x2_t v185;
  int8x16x2_t v186;

  v5 = a2[6];
  v4 = a2[7];
  v6 = a2[5];
  v7 = *(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16);
  if ((v7 & 0x3F800) == 0x1D800)
  {
    if (*(_DWORD *)(v4 + 8) != 1)
      goto LABEL_11;
    v8 = *(_QWORD *)(v4 + 16);
    if (!v8
      || ((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) != 0
      || (*(_WORD *)(v8 + 4) & 0x7F) != 0x50)
    {
      goto LABEL_11;
    }
    v9 = *(unsigned __int16 *)(v8 + 8);
  }
  else
  {
    if ((v7 & 0x3F800) != 0 || (*(_WORD *)(v4 + 4) & 0x7F) != 0x50)
      goto LABEL_11;
    v9 = *(unsigned __int16 *)(v4 + 8);
  }
  if (v9 != 394)
    goto LABEL_11;
  v26 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  if ((v26 & 0x3F800) == 0x1D800)
  {
    if (*(_DWORD *)(v5 + 8) != 1)
      goto LABEL_11;
    v27 = *(_QWORD *)(v5 + 16);
    if (!v27
      || ((*(unsigned __int16 *)(v27 + 4) | (*(unsigned __int8 *)(v27 + 6) << 16)) & 0x3F800) != 0
      || (*(_WORD *)(v27 + 4) & 0x7F) != 0x50)
    {
      goto LABEL_11;
    }
    v28 = *(unsigned __int16 *)(v27 + 8);
  }
  else
  {
    if ((v26 & 0x3F800) != 0 || (*(_WORD *)(v5 + 4) & 0x7F) != 0x50)
      goto LABEL_11;
    v28 = *(unsigned __int16 *)(v5 + 8);
  }
  if (v28 != 394)
    goto LABEL_11;
  v29 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
  if ((v29 & 0x3F800) == 0x1D800)
  {
    if (*(_DWORD *)(v6 + 8) != 1)
      goto LABEL_11;
    v30 = *(_QWORD *)(v6 + 16);
    if (!v30
      || ((*(unsigned __int16 *)(v30 + 4) | (*(unsigned __int8 *)(v30 + 6) << 16)) & 0x3F800) != 0
      || (*(_WORD *)(v30 + 4) & 0x7F) != 0x50)
    {
      goto LABEL_11;
    }
    v31 = *(unsigned __int16 *)(v30 + 8);
  }
  else
  {
    if ((v29 & 0x3F800) != 0 || (*(_WORD *)(v6 + 4) & 0x7F) != 0x50)
      goto LABEL_11;
    v31 = *(unsigned __int16 *)(v6 + 8);
  }
  if (v31 == 523)
  {
    WebCore::ShorthandSerializer::serializeGridTemplate(this, a2);
    return;
  }
LABEL_11:
  if (WebCore::longhandValueID(*(unsigned __int16 *)(*a2 + 4), a2[4]) != 6)
    goto LABEL_95;
  v13 = a2[2];
  v14 = a2[3];
  v15 = (*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F800;
  if (v15 != 120832)
  {
    v19 = "";
    if (v15)
    {
      v32 = 0;
LABEL_52:
      v20 = 1;
      goto LABEL_53;
    }
    v23 = *(_WORD *)(v6 + 4) & 0x7F;
    v24 = *(unsigned __int16 *)(v6 + 8);
    v32 = v23 == 80 && v24 == 903;
    if (v32)
    {
      v19 = " dense";
      v20 = 7;
    }
    else
    {
      v20 = 1;
    }
    if (v23 != 80 || v24 != 525)
    {
      if (v23 == 80)
        v25 = *(unsigned __int16 *)(v6 + 8);
      else
        v25 = 0;
      goto LABEL_82;
    }
LABEL_65:
    v38 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
    if ((v38 & 0x3F800) == 0x1D800)
    {
      if (*(_DWORD *)(v5 + 8) != 1)
        goto LABEL_95;
      v39 = *(_QWORD *)(v5 + 16);
      if (!v39
        || ((*(unsigned __int16 *)(v39 + 4) | (*(unsigned __int8 *)(v39 + 6) << 16)) & 0x3F800) != 0
        || (*(_WORD *)(v39 + 4) & 0x7F) != 0x50)
      {
        goto LABEL_95;
      }
      v40 = *(unsigned __int16 *)(v39 + 8);
    }
    else
    {
      if ((v38 & 0x3F800) != 0 || (*(_WORD *)(v5 + 4) & 0x7F) != 0x50)
        goto LABEL_95;
      v40 = *(unsigned __int16 *)(v5 + 8);
    }
    if (v40 != 394)
      goto LABEL_95;
    v41 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
    if ((v41 & 0x3F800) == 0x1D800)
    {
      if (*(_DWORD *)(v14 + 8) != 1)
        goto LABEL_95;
      v42 = *(_QWORD *)(v14 + 16);
      if (!v42
        || ((*(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16)) & 0x3F800) != 0
        || (*(_WORD *)(v42 + 4) & 0x7F) != 0x50)
      {
        goto LABEL_95;
      }
      v43 = *(unsigned __int16 *)(v42 + 8);
    }
    else
    {
      if ((v41 & 0x3F800) != 0 || (*(_WORD *)(v14 + 4) & 0x7F) != 0x50)
        goto LABEL_95;
      v43 = *(unsigned __int16 *)(v14 + 8);
    }
    if (v43 != 6)
      goto LABEL_95;
    v57 = *(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16);
    if ((v57 & 0x3F800) == 0x1D800)
    {
      if (*(_DWORD *)(v4 + 8) != 1)
        goto LABEL_187;
      v58 = *(_QWORD *)(v4 + 16);
      if (!v58
        || ((*(unsigned __int16 *)(v58 + 4) | (*(unsigned __int8 *)(v58 + 6) << 16)) & 0x3F800) != 0
        || (*(_WORD *)(v58 + 4) & 0x7F) != 0x50)
      {
        goto LABEL_187;
      }
      v59 = *(unsigned __int16 *)(v58 + 8);
    }
    else
    {
      if ((v57 & 0x3F800) != 0 || (*(_WORD *)(v4 + 4) & 0x7F) != 0x50)
        goto LABEL_187;
      v59 = *(unsigned __int16 *)(v4 + 8);
    }
    if (v59 == 394)
    {
      WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, v13, v10, v11, (WebCore *)&v171, v12);
      v165 = v20 - 1;
      if (!((unint64_t)(v20 - 1) >> 31))
      {
        if (v171)
          v121 = *(_DWORD *)(v171 + 4);
        else
          v121 = 0;
        v122 = v20 + 11;
        if (__OFADD__(v165, 12) || v121 < 0 || __OFADD__(v121, v122))
        {
          *(_QWORD *)this = 0;
        }
        else
        {
          v123 = !v171 || (*(_BYTE *)(v171 + 16) & 4) != 0;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v121 + v122), v123, v171, " / auto-flow", 0xCu, v19, v165, this);
          if (*(_QWORD *)this)
          {
            v92 = (WTF::StringImpl *)v171;
            v171 = 0;
            if (!v92)
              return;
            goto LABEL_293;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x195816FD0);
      }
      __break(0xC471u);
LABEL_319:
      JUMPOUT(0x195816C10);
    }
LABEL_187:
    WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, v13, v10, v11, (WebCore *)&v170, v12);
    WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 10), a2[7], v93, v94, (WebCore *)&v169, v95);
    v96 = v169;
    v97 = v170;
    v164 = v20 - 1;
    if ((unint64_t)(v20 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195816FC4);
    }
    if (v170)
    {
      v98 = *((_DWORD *)v170 + 1);
      if (v169)
        goto LABEL_190;
    }
    else
    {
      v98 = 0;
      if (v169)
      {
LABEL_190:
        v99 = *((_DWORD *)v169 + 1);
        if (v99 < 0)
          goto LABEL_256;
LABEL_191:
        v68 = __OFADD__(v99, 1);
        v100 = v99 + 1;
        if (v68)
          goto LABEL_256;
        v68 = __OFADD__((_DWORD)v164, v100);
        v101 = v164 + v100;
        if (v68)
          goto LABEL_256;
        v68 = __OFADD__(v101, 12);
        v102 = v101 + 12;
        v103 = v68;
        if (v98 < 0)
          goto LABEL_256;
        if (v103)
          goto LABEL_256;
        v104 = v98 + v102;
        if (__OFADD__(v98, v102))
          goto LABEL_256;
        if (v170)
        {
          v105 = *((_DWORD *)v170 + 4);
          if (!v169 || (v105 & 4) == 0)
          {
            v106 = v104;
            v107 = v104 == 0;
            if ((v105 & 4) != 0)
              goto LABEL_213;
            v108 = 1;
            goto LABEL_206;
          }
        }
        else if (!v169)
        {
          if (v104)
          {
            v112 = 0;
            v96 = 0;
            v106 = v104;
            if ((v104 & 0x80000000) != 0)
              goto LABEL_256;
LABEL_215:
            WTF::tryFastCompactMalloc((WTF *)(v106 + 20));
            v109 = v174[0];
            if (v174[0])
            {
              v113 = (_BYTE *)(v174[0] + 20);
              *(_DWORD *)v174[0] = 2;
              *(_DWORD *)(v109 + 4) = v104;
              *(_QWORD *)(v109 + 8) = v109 + 20;
              *(_DWORD *)(v109 + 16) = 4;
              if (v112)
              {
                v114 = (_BYTE *)*((_QWORD *)v97 + 1);
                v115 = *((unsigned int *)v97 + 1);
                if ((*((_BYTE *)v97 + 16) & 4) != 0)
                {
                  if ((_DWORD)v115)
                  {
                    if ((_DWORD)v115 == 1)
                      *v113 = *v114;
                    else
                      memcpy((void *)(v109 + 20), v114, v115);
                  }
                }
                else
                {
                  if (v115 < 0x10)
                  {
                    v159 = (unsigned __int128 *)(v109 + 20);
                  }
                  else
                  {
                    v159 = (unsigned __int128 *)&v113[v115 & 0xFFFFFFF0];
                    v160 = (unsigned __int128 *)(v109 + 20);
                    do
                    {
                      v161 = (unsigned __int128)vld2q_s8(v114);
                      v114 += 32;
                      *v160++ = v161;
                    }
                    while (v160 != v159);
                  }
                  while (v159 != (unsigned __int128 *)&v113[v115])
                  {
                    v162 = *v114;
                    v114 += 2;
                    *(_BYTE *)v159 = v162;
                    v159 = (unsigned __int128 *)((char *)v159 + 1);
                  }
                }
                v116 = *((unsigned int *)v97 + 1);
              }
              else
              {
                v116 = 0;
              }
              v117 = &v113[v116];
              *(_QWORD *)v117 = *(_QWORD *)" / auto-flow";
              *((_DWORD *)v117 + 2) = 2003790950;
              v118 = v117 + 12;
              if ((_DWORD)v164)
              {
                if ((_DWORD)v164 == 1)
                  *v118 = *v19;
                else
                  memcpy(v117 + 12, v19, v164);
              }
              WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v118[v164], 32, (uint64_t)v96);
              goto LABEL_289;
            }
            goto LABEL_256;
          }
LABEL_300:
          v109 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_289;
        }
        v106 = v104;
        v107 = v104 == 0;
        v108 = (uint64_t)v170;
        if ((*((_BYTE *)v169 + 16) & 4) != 0)
        {
LABEL_213:
          v112 = v170;
          if (!v107)
          {
            if ((v104 & 0x80000000) != 0)
              goto LABEL_256;
            goto LABEL_215;
          }
          goto LABEL_300;
        }
LABEL_206:
        if (!v107)
        {
          if (v104 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v106 + 20));
            v109 = v174[0];
            if (v174[0])
            {
              v110 = (_WORD *)(v174[0] + 20);
              *(_DWORD *)v174[0] = 2;
              *(_DWORD *)(v109 + 4) = v104;
              *(_QWORD *)(v109 + 8) = v109 + 20;
              *(_DWORD *)(v109 + 16) = 0;
              if (v108)
              {
                v63 = (_OWORD *)*((_QWORD *)v97 + 1);
                v111 = *((unsigned int *)v97 + 1);
                if ((*((_BYTE *)v97 + 16) & 4) != 0)
                {
                  v119 = (char *)&v110[v111];
                  if (v111 >= 0x40)
                  {
                    v120 = (char *)&v110[v111 & 0xFFFFFFC0];
                    v125 = 0uLL;
                    v126 = (char *)(v109 + 20);
                    do
                    {
                      v176.val[0] = (int8x16_t)*v63;
                      v127 = *((int8x16_t *)v63 + 1);
                      v180.val[0] = (int8x16_t)v63[2];
                      v128 = v63[3];
                      v63 += 4;
                      v129 = v128;
                      v180.val[1] = 0uLL;
                      v184.val[0] = v127;
                      v176.val[1] = 0uLL;
                      v130 = v126;
                      vst2q_s8(v130, v176);
                      v130 += 32;
                      v184.val[1] = 0uLL;
                      vst2q_s8(v130, v184);
                      v131 = v126 + 64;
                      vst2q_s8(v131, v180);
                      v132 = v126 + 96;
                      vst2q_s8(v132, *(int8x16x2_t *)(&v125 - 1));
                      v126 += 128;
                    }
                    while (v126 != v120);
                  }
                  else
                  {
                    v120 = (char *)(v109 + 20);
                  }
                  while (v120 != v119)
                  {
                    v133 = *(unsigned __int8 *)v63;
                    v63 = (_OWORD *)((char *)v63 + 1);
                    *(_WORD *)v120 = v133;
                    v120 += 2;
                  }
                }
                else if ((_DWORD)v111 == 1)
                {
                  *v110 = *(_WORD *)v63;
                }
                else if ((_DWORD)v111)
                {
                  memcpy((void *)(v109 + 20), v63, 2 * v111);
                }
                v124 = *((unsigned int *)v97 + 1);
              }
              else
              {
                v124 = 0;
              }
              v134 = &v110[v124];
              *(_OWORD *)v134 = xmmword_1969EEE40;
              *((_QWORD *)v134 + 2) = 0x77006F006C0066;
              v135 = (char *)(v134 + 12);
              v136 = &v135[2 * v164];
              if ((v164 & 0x7FFFFFC0) != 0)
              {
                v137 = &v135[2 * (v164 & 0x7FFFFFC0)];
                v138 = 0uLL;
                do
                {
                  v177.val[0] = *(int8x16_t *)v19;
                  v139 = *((int8x16_t *)v19 + 1);
                  v181.val[0] = (int8x16_t)*((_OWORD *)v19 + 2);
                  v140 = *((_OWORD *)v19 + 3);
                  v19 += 64;
                  v141 = v140;
                  v181.val[1] = 0uLL;
                  v185.val[0] = v139;
                  v177.val[1] = 0uLL;
                  v142 = v135;
                  vst2q_s8(v142, v177);
                  v142 += 32;
                  v185.val[1] = 0uLL;
                  vst2q_s8(v142, v185);
                  v143 = v135 + 64;
                  vst2q_s8(v143, v181);
                  v144 = v135 + 96;
                  vst2q_s8(v144, *(int8x16x2_t *)(&v138 - 1));
                  v135 += 128;
                }
                while (v135 != v137);
                v135 = v137;
              }
              while (v135 != v136)
              {
                v145 = *v19++;
                *(_WORD *)v135 = v145;
                v135 += 2;
              }
              *(_WORD *)v136 = 32;
              v146 = v136 + 2;
              if (v96)
              {
                v63 = (_OWORD *)*((_QWORD *)v96 + 1);
                v147 = *((unsigned int *)v96 + 1);
                if ((*((_BYTE *)v96 + 16) & 4) != 0)
                {
                  v148 = &v146[2 * v147];
                  if (v147 >= 0x40)
                  {
                    v149 = &v146[2 * (v147 & 0xFFFFFFC0)];
                    v150 = 0uLL;
                    do
                    {
                      v178.val[0] = (int8x16_t)*v63;
                      v151 = *((int8x16_t *)v63 + 1);
                      v182.val[0] = (int8x16_t)v63[2];
                      v152 = v63[3];
                      v63 += 4;
                      v153 = v152;
                      v182.val[1] = 0uLL;
                      v186.val[0] = v151;
                      v178.val[1] = 0uLL;
                      v154 = v146;
                      vst2q_s8(v154, v178);
                      v154 += 32;
                      v186.val[1] = 0uLL;
                      vst2q_s8(v154, v186);
                      v155 = v146 + 64;
                      vst2q_s8(v155, v182);
                      v156 = v146 + 96;
                      vst2q_s8(v156, *(int8x16x2_t *)(&v150 - 1));
                      v146 += 128;
                    }
                    while (v146 != v149);
                    v146 = v149;
                  }
                  while (v146 != v148)
                  {
                    v157 = *(unsigned __int8 *)v63;
                    v63 = (_OWORD *)((char *)v63 + 1);
                    *(_WORD *)v146 = v157;
                    v146 += 2;
                  }
                }
                else if ((_DWORD)v147 == 1)
                {
                  *(_WORD *)v146 = *(_WORD *)v63;
                }
                else if ((_DWORD)v147)
                {
                  memcpy(v146, v63, 2 * v147);
                }
              }
LABEL_289:
              *(_QWORD *)this = v109;
              v158 = v169;
              v169 = 0;
              if (v158)
              {
                if (*(_DWORD *)v158 == 2)
                  WTF::StringImpl::destroy(v158, (WTF::StringImpl *)v63);
                else
                  *(_DWORD *)v158 -= 2;
              }
              v92 = v170;
              v170 = 0;
              if (v92)
                goto LABEL_293;
              return;
            }
          }
LABEL_256:
          *(_QWORD *)this = 0;
          __break(0xC471u);
          JUMPOUT(0x195816C44);
        }
        goto LABEL_300;
      }
    }
    v99 = 0;
    goto LABEL_191;
  }
  v16 = *(_DWORD *)(v6 + 8);
  if (v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = " dense";
    v20 = 7;
    while (1)
    {
      if (v17 > 3)
      {
        if (v16 <= v17)
        {
          __break(0xC471u);
          JUMPOUT(0x195816CA4);
        }
        v21 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * (v18 - 4));
      }
      else
      {
        v21 = (uint64_t *)(v6 + 16 + 8 * v18);
      }
      v22 = *v21;
      if (((*(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16)) & 0x3F800) == 0
        && (*(_WORD *)(v22 + 4) & 0x7F) == 0x50
        && *(_WORD *)(v22 + 8) == 903)
      {
        break;
      }
      v17 = v18 + 1;
      v18 = (v18 + 1);
      if (v16 == v17)
      {
        v32 = 0;
        v19 = "";
        goto LABEL_52;
      }
    }
    v32 = 1;
LABEL_53:
    if (v15 == 120832)
    {
      v25 = *(_DWORD *)(v6 + 8);
      if (v25)
      {
        v33 = 0;
        v34 = 0;
        v35 = v6 + 16;
        do
        {
          if (v33 > 3)
          {
            if (v25 <= v33)
            {
              __break(0xC471u);
              JUMPOUT(0x195816CC4);
            }
            v36 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * (v34 - 4));
          }
          else
          {
            v36 = (uint64_t *)(v35 + 8 * v34);
          }
          v37 = *v36;
          if (((*(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16)) & 0x3F800) == 0
            && (*(_WORD *)(v37 + 4) & 0x7F) == 0x50
            && *(_WORD *)(v37 + 8) == 525)
          {
            goto LABEL_65;
          }
          v33 = v34 + 1;
          v34 = (v34 + 1);
        }
        while (v25 != v33);
        v50 = 0;
        v51 = 0;
        do
        {
          if (v50 > 3)
          {
            if (v25 <= v50)
            {
              __break(0xC471u);
              JUMPOUT(0x195816F18);
            }
            v52 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * (v51 - 4));
          }
          else
          {
            v52 = (uint64_t *)(v35 + 8 * v51);
          }
          v53 = *v52;
          if (((*(unsigned __int16 *)(v53 + 4) | (*(unsigned __int8 *)(v53 + 6) << 16)) & 0x3F800) == 0
            && (*(_WORD *)(v53 + 4) & 0x7F) == 0x50
            && *(_WORD *)(v53 + 8) == 523)
          {
            goto LABEL_85;
          }
          v50 = v51 + 1;
          v51 = (v51 + 1);
        }
        while (v25 != v50);
        LOBYTE(v25) = 0;
        if (v32)
          goto LABEL_85;
        goto LABEL_84;
      }
LABEL_83:
      if (v32)
        goto LABEL_85;
      goto LABEL_84;
    }
    v25 = 0;
LABEL_82:
    LOBYTE(v25) = v25 == 523;
    goto LABEL_83;
  }
  LOBYTE(v25) = 0;
  v20 = 1;
  v19 = "";
LABEL_84:
  if ((v25 & 1) == 0)
    goto LABEL_95;
LABEL_85:
  v44 = *(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16);
  if ((v44 & 0x3F800) == 0x1D800)
  {
    if (*(_DWORD *)(v4 + 8) != 1)
      goto LABEL_95;
    v45 = *(_QWORD *)(v4 + 16);
    if (!v45
      || ((*(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16)) & 0x3F800) != 0
      || (*(_WORD *)(v45 + 4) & 0x7F) != 0x50)
    {
      goto LABEL_95;
    }
    v46 = *(unsigned __int16 *)(v45 + 8);
  }
  else
  {
    if ((v44 & 0x3F800) != 0 || (*(_WORD *)(v4 + 4) & 0x7F) != 0x50)
      goto LABEL_95;
    v46 = *(unsigned __int16 *)(v4 + 8);
  }
  if (v46 != 394)
    goto LABEL_95;
  v47 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  if ((v47 & 0x3F800) == 0x1D800)
  {
    if (*(_DWORD *)(v13 + 8) != 1)
      goto LABEL_95;
    v48 = *(_QWORD *)(v13 + 16);
    if (!v48
      || ((*(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16)) & 0x3F800) != 0
      || (*(_WORD *)(v48 + 4) & 0x7F) != 0x50)
    {
      goto LABEL_95;
    }
    v49 = *(unsigned __int16 *)(v48 + 8);
  }
  else
  {
    if ((v47 & 0x3F800) != 0 || (*(_WORD *)(v13 + 4) & 0x7F) != 0x50)
      goto LABEL_95;
    v49 = *(unsigned __int16 *)(v13 + 8);
  }
  if (v49 != 6)
  {
LABEL_95:
    *(_QWORD *)this = 0;
    return;
  }
  v54 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  if ((v54 & 0x3F800) != 0x1D800)
  {
    if ((v54 & 0x3F800) == 0 && (*(_WORD *)(v5 + 4) & 0x7F) == 0x50)
    {
      v56 = *(unsigned __int16 *)(v5 + 8);
      goto LABEL_142;
    }
LABEL_143:
    WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 8), a2[6], v10, v11, (WebCore *)&v167, v12);
    WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v60, v61, (WebCore *)&v166, v62);
    v64 = v166;
    v65 = (uint64_t)v167;
    v163 = v20 - 1;
    if (v163 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195816F98);
    }
    if (v167)
    {
      v66 = *((_DWORD *)v167 + 1);
      if (v166)
        goto LABEL_146;
    }
    else
    {
      v66 = 0;
      if (v166)
      {
LABEL_146:
        v67 = *((_DWORD *)v166 + 1);
        if (v67 < 0)
          goto LABEL_250;
LABEL_147:
        v68 = __OFADD__(v67, 3);
        v69 = v67 + 3;
        v70 = v68;
        if (v66 < 0)
          goto LABEL_250;
        if ((v70 & 1) != 0)
          goto LABEL_250;
        v68 = __OFADD__(v66, v69);
        v71 = v66 + v69;
        if (v68)
          goto LABEL_250;
        v68 = __OFADD__(v71, 1);
        v72 = v71 + 1;
        if (v68)
          goto LABEL_250;
        v68 = __OFADD__((_DWORD)v163, v72);
        v73 = v163 + v72;
        if (v68)
          goto LABEL_250;
        v74 = v73 + 9;
        if (__OFADD__(v73, 9))
          goto LABEL_250;
        if (v167)
        {
          v75 = *((_DWORD *)v167 + 4);
          if (!v166 || (v75 & 4) == 0)
          {
            v76 = v74;
            v77 = v74 == 0;
            if ((v75 & 4) != 0)
            {
LABEL_160:
              if (!v77)
              {
                if ((v74 & 0x80000000) == 0)
                  goto LABEL_162;
                goto LABEL_250;
              }
              goto LABEL_299;
            }
LABEL_168:
            if (!v77)
            {
              if (v74 <= 0x7FFFFFEF)
              {
                WTF::tryFastCompactMalloc((WTF *)(2 * v76 + 20));
                v78 = v174[0];
                if (v174[0])
                {
                  *(_DWORD *)v174[0] = 2;
                  *(_DWORD *)(v78 + 4) = v74;
                  *(_OWORD *)(v78 + 20) = xmmword_1969EEE50;
                  *(_QWORD *)(v78 + 8) = v78 + 20;
                  *(_DWORD *)(v78 + 16) = 0;
                  v80 = (char *)(v78 + 38);
                  *(_WORD *)(v78 + 36) = 119;
                  v81 = v78 + 38 + 2 * v163;
                  if ((v163 & 0x7FFFFFC0) != 0)
                  {
                    v82 = &v80[2 * (v163 & 0x7FFFFFC0)];
                    v83 = 0uLL;
                    do
                    {
                      v175.val[0] = *(int8x16_t *)v19;
                      v84 = *((int8x16_t *)v19 + 1);
                      v179.val[0] = (int8x16_t)*((_OWORD *)v19 + 2);
                      v85 = *((_OWORD *)v19 + 3);
                      v19 += 64;
                      v86 = v85;
                      v179.val[1] = 0uLL;
                      v183.val[0] = v84;
                      v175.val[1] = 0uLL;
                      v87 = v80;
                      vst2q_s8(v87, v175);
                      v87 += 32;
                      v183.val[1] = 0uLL;
                      vst2q_s8(v87, v183);
                      v88 = v80 + 64;
                      vst2q_s8(v88, v179);
                      v89 = v80 + 96;
                      vst2q_s8(v89, *(int8x16x2_t *)(&v83 - 1));
                      v80 += 128;
                    }
                    while (v80 != v82);
                    v80 = v82;
                  }
                  while (v80 != (char *)v81)
                  {
                    v90 = *v19++;
                    *(_WORD *)v80 = v90;
                    v80 += 2;
                  }
                  *(_WORD *)v81 = 32;
                  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v81 + 2), v65, (int8x16_t *)" / ", 3, (uint64_t)v64);
LABEL_178:
                  *(_QWORD *)this = v78;
                  v91 = v166;
                  v166 = 0;
                  if (v91)
                  {
                    if (*(_DWORD *)v91 == 2)
                      WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v63);
                    else
                      *(_DWORD *)v91 -= 2;
                  }
                  v92 = v167;
                  v167 = 0;
                  if (!v92)
                    return;
LABEL_293:
                  if (*(_DWORD *)v92 == 2)
                    WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v63);
                  else
                    *(_DWORD *)v92 -= 2;
                  return;
                }
              }
              goto LABEL_250;
            }
            goto LABEL_299;
          }
        }
        else if (!v166)
        {
          if (v73 != -9)
          {
            v65 = 0;
            v64 = 0;
            v76 = v74;
            if ((v74 & 0x80000000) == 0)
            {
LABEL_162:
              WTF::tryFastCompactMalloc((WTF *)(v76 + 20));
              v78 = v174[0];
              if (v174[0])
              {
                *(_DWORD *)v174[0] = 2;
                *(_DWORD *)(v78 + 4) = v74;
                *(_QWORD *)(v78 + 20) = *(_QWORD *)"auto-flow";
                *(_QWORD *)(v78 + 8) = v78 + 20;
                *(_DWORD *)(v78 + 16) = 4;
                *(_BYTE *)(v78 + 28) = 119;
                v79 = (char *)(v78 + 29);
                if ((_DWORD)v163)
                {
                  if ((_DWORD)v163 == 1)
                    *v79 = *v19;
                  else
                    memcpy((void *)(v78 + 29), v19, v163);
                }
                v79[v163] = 32;
                WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v79[v163 + 1], v65, " / ", 3u, (uint64_t)v64);
                goto LABEL_178;
              }
            }
LABEL_250:
            *(_QWORD *)this = 0;
            __break(0xC471u);
            goto LABEL_319;
          }
LABEL_299:
          v78 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_178;
        }
        v76 = v74;
        v77 = v74 == 0;
        if ((*((_BYTE *)v166 + 16) & 4) != 0)
          goto LABEL_160;
        goto LABEL_168;
      }
    }
    v67 = 0;
    goto LABEL_147;
  }
  if (*(_DWORD *)(v5 + 8) != 1)
    goto LABEL_143;
  v55 = *(_QWORD *)(v5 + 16);
  if (!v55
    || ((*(unsigned __int16 *)(v55 + 4) | (*(unsigned __int8 *)(v55 + 6) << 16)) & 0x3F800) != 0
    || (*(_WORD *)(v55 + 4) & 0x7F) != 0x50)
  {
    goto LABEL_143;
  }
  v56 = *(unsigned __int16 *)(v55 + 8);
LABEL_142:
  if (v56 != 394)
    goto LABEL_143;
  WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v10, v11, (WebCore *)&v168, v12);
  v174[0] = "auto-flow";
  v174[1] = 10;
  v173[0] = v19;
  v173[1] = v20;
  v172[0] = " / ";
  v172[1] = 4;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String>((uint64_t)v174, (uint64_t)v173, (uint64_t)v172, (uint64_t *)&v168, this);
  if (!*(_QWORD *)this)
  {
    __break(0xC471u);
    JUMPOUT(0x195816FD8);
  }
  v92 = v168;
  v168 = 0;
  if (v92)
    goto LABEL_293;
}

void WebCore::ShorthandSerializer::serializeGridArea(WebCore::ShorthandSerializer *this, uint64_t a2, WebCore::CSSValue *a3, WTF::String *a4, __n128 a5)
{
  WebCore::CSSValue *v7;
  WTF::String *v8;
  __n128 v9;
  WebCore::CSSValue *v10;
  WTF::String *v11;
  uint64_t v12;

  if (WebCore::canOmitTrailingGridAreaValue(*(WebCore **)(a2 + 24), *(WebCore::CSSValue **)(a2 + 40), a3, a4, a5))
  {
    if (WebCore::canOmitTrailingGridAreaValue(*(WebCore **)(a2 + 16), *(WebCore::CSSValue **)(a2 + 32), v7, v8, v9))
    {
      if (WebCore::canOmitTrailingGridAreaValue(*(WebCore **)(a2 + 16), *(WebCore::CSSValue **)(a2 + 24), v10, v11, v9))
        v12 = 1;
      else
        v12 = 2;
    }
    else
    {
      v12 = 3;
    }
  }
  else
  {
    v12 = 4;
  }
  WebCore::ShorthandSerializer::serializeLonghands(this, (uint64_t *)a2, (WTF::StringBuilder *)v12, (WTF::String *)" / ", 4uLL, v9);
}

void WebCore::ShorthandSerializer::serializeGridRowColumn(WebCore::ShorthandSerializer *this, uint64_t a2, WebCore::CSSValue *a3, WTF::String *a4, __n128 a5)
{
  __n128 v7;
  uint64_t v8;

  if (WebCore::canOmitTrailingGridAreaValue(*(WebCore **)(a2 + 16), *(WebCore::CSSValue **)(a2 + 24), a3, a4, a5))
    v8 = 1;
  else
    v8 = 2;
  WebCore::ShorthandSerializer::serializeLonghands(this, (uint64_t *)a2, (WTF::StringBuilder *)v8, (WTF::String *)" / ", 4uLL, v7);
}

void WebCore::ShorthandSerializer::serializeGridTemplate(WebCore::ShorthandSerializer *this, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  __n128 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 *v26;
  int v27;
  __int16 v28;
  int v29;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  WTF::StringBuilder *v40;
  WTF::String *v41;
  __n128 v42;
  WTF::StringImpl *v43;
  int v44;
  BOOL isLength;
  int v46;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringBuilder *v59;
  WTF::String *v60;
  __n128 v61;
  WebCore::ShorthandSerializer *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  unsigned int v78;
  char v79;
  char v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  int v83;

  v4 = a2[4];
  if (v4)
    v5 = ((*(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16)) & 0x3F800) == 83968;
  else
    v5 = 0;
  if (v5)
  {
    v8 = a2[2];
    *(_DWORD *)v8 += 2;
    if (((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) != 0x1D800)
      goto LABEL_159;
    if (WebCore::longhandValueID(*(unsigned __int16 *)(*a2 + 2), a2[3]) == 6)
      goto LABEL_13;
    v10 = a2[3];
    v11 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    v12 = v11 & 0x3F800;
    if ((v11 & 0x3F800) == 0x1D800)
    {
      v13 = *(_DWORD *)(v10 + 8);
      if (!v13)
        goto LABEL_159;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v15;
        if (v14 > 3)
        {
          if (*(_DWORD *)(v10 + 8) <= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x195817A18);
          }
          v18 = *(_QWORD *)(v10 + 48) + 8 * (v16 - 4);
        }
        else
        {
          v18 = v10 + 16 + 8 * v16;
        }
        v19 = *(_QWORD *)v18;
        v20 = *(unsigned __int16 *)(*(_QWORD *)v18 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v18 + 6) << 16);
        if ((v20 & 0x3F87F) == 0x50)
        {
          v22 = *(unsigned __int16 *)(v19 + 8);
          v15 = 1;
          if (v22 == 554 || v22 == 895)
            goto LABEL_41;
          if ((v22 - 549) < 3)
          {
LABEL_40:
            v15 = 1;
            goto LABEL_41;
          }
          v15 = 1;
          if (v22 == 394 || v22 == 552)
            goto LABEL_41;
        }
        v21 = v20 & 0x3F800;
        if (v21)
          goto LABEL_24;
        if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)v19))
          goto LABEL_40;
        v23 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
        v24 = *(_WORD *)(v19 + 4) & 0x7F;
        if ((v24 - 63) > 0x11 || ((1 << ((*(_WORD *)(v19 + 4) & 0x7F) - 63)) & 0x34001) == 0)
        {
          if (v24 != 73)
            goto LABEL_39;
          v26 = *(unsigned __int8 **)(*(_QWORD *)(v19 + 8) + 8);
          v27 = v26[12];
          if (v27 == 1)
            break;
          if (v27 == 2)
            goto LABEL_40;
          if ((v27 - 5) <= 3)
            break;
        }
LABEL_44:
        v15 = 1;
        if ((v23 & 0x7F) != 0x3B && (v23 & 0x7F) != 0x49)
        {
          v21 = v23 & 0x3F800;
LABEL_24:
          v15 = v17;
          if (v21 != 81920)
            goto LABEL_159;
        }
LABEL_41:
        v14 = v16 + 1;
        v16 = (v16 + 1);
        if (v13 == v14)
        {
          if ((v15 & 1) == 0)
            goto LABEL_159;
LABEL_13:
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v79 = 1;
          v9 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) != 0x1D800)
          {
            __break(0xC471u);
            JUMPOUT(0x19581799CLL);
          }
          if (v9)
            *(_DWORD *)v8 = v9;
          else
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v8, (WTF::StringImpl *)a2);
          v32 = *(_DWORD *)(v8 + 8);
          if (v32)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              if (v33 > 3)
              {
                if (*(_DWORD *)(v8 + 8) <= v33)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1958179E0);
                }
                v36 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 8 * (v35 - 4));
              }
              else
              {
                v36 = (uint64_t *)(v8 + 16 + 8 * v35);
              }
              v37 = *v36;
              v38 = v78;
              if (v78)
              {
                LOBYTE(v82) = 32;
                if (v77 && (v78 < *((_DWORD *)v77 + 1) ? (v39 = v76 == 0) : (v39 = 0), v39))
                {
                  v51 = *((_DWORD *)v77 + 4);
                  v52 = *((_QWORD *)v77 + 1);
                  ++v78;
                  if ((v51 & 4) != 0)
                    *(_BYTE *)(v52 + v38) = 32;
                  else
                    *(_WORD *)(v52 + 2 * v38) = 32;
                }
                else
                {
                  WTF::StringBuilder::append();
                }
              }
              if (((*(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16)) & 0x3F800) == 0x14000)
              {
                WebCore::CSSGridLineNamesValue::customCSSText((WebCore::CSSGridLineNamesValue *)v37, &v82);
                v56 = v82;
                if (!v78 && !v77)
                {
                  if (v82)
                    *(_DWORD *)v82 += 2;
                  v57 = v76;
                  v76 = v56;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 != 2)
                    {
                      *(_DWORD *)v57 -= 2;
                      goto LABEL_127;
                    }
                    WTF::StringImpl::destroy(v57, v55);
                    v56 = v82;
                    if (!v82)
                    {
LABEL_129:
                      v78 = v56;
                      goto LABEL_130;
                    }
                  }
                  else
                  {
LABEL_127:
                    if (!v56)
                      goto LABEL_129;
                  }
                  LODWORD(v56) = *((_DWORD *)v56 + 1);
                  goto LABEL_129;
                }
                if (v82 && (*((_BYTE *)v82 + 16) & 4) == 0)
                  WTF::StringBuilder::append();
                else
                  WTF::StringBuilder::append();
LABEL_130:
                v58 = v82;
                v82 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, v55);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                goto LABEL_109;
              }
              WebCore::CSSGridTemplateAreasValue::stringForRow((WebCore::CSSGridTemplateAreasValue *)v4, (WTF::StringImpl *)v34, &v81);
              LOBYTE(v75) = 34;
              v82 = v81;
              v80 = 34;
              WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v76, &v75, (uint64_t *)&v82, &v80);
              v43 = v81;
              v81 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = *(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16);
              if ((v44 & 0x3F87F) != 0x50
                || (v48 = *(unsigned __int16 *)(v37 + 8), v48 != 554)
                && v48 != 895
                && (v48 - 549) >= 3
                && v48 != 394
                && v48 != 552)
              {
                if ((v44 & 0x3F800) != 0)
                  goto LABEL_151;
                isLength = WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)v37);
                v44 = *(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16);
                if (!isLength)
                {
                  v46 = *(_WORD *)(v37 + 4) & 0x7F;
                  if ((v46 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v37 + 4) & 0x7F) - 63)) & 0x34001) != 0)
                  {
LABEL_94:
                    if ((v44 & 0x7F) != 0x49 && (v44 & 0x7F) != 0x3B)
                    {
LABEL_151:
                      v64 = 0;
                      v62 = this;
                      goto LABEL_152;
                    }
                    goto LABEL_102;
                  }
                  if (v46 == 73)
                  {
                    v53 = *(unsigned __int8 **)(*(_QWORD *)(v37 + 8) + 8);
                    v54 = v53[12];
                    if (v54 != 1)
                    {
                      if (v54 == 2)
                        goto LABEL_102;
                      if ((v54 - 5) > 3)
                        goto LABEL_94;
                    }
                    v46 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v53 + 72))(v53);
                    v44 = *(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16);
                  }
                  if (v46 != 3)
                    goto LABEL_94;
                }
              }
LABEL_102:
              if ((v44 & 0x3F800) != 0 || (v44 & 0x7F) != 0x50 || *(_WORD *)(v37 + 8) != 394)
              {
                _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v81, v37, v40, v41, v42);
                LOBYTE(v75) = 32;
                v82 = v81;
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v76, (char *)&v75, (uint64_t *)&v82);
                v50 = v81;
                v81 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, v49);
                  else
                    *(_DWORD *)v50 -= 2;
                }
              }
              ++v34;
LABEL_109:
              v33 = v35 + 1;
              v35 = (v35 + 1);
            }
            while (v32 != v33);
          }
          v62 = this;
          if (WebCore::longhandValueID(*(unsigned __int16 *)(*a2 + 2), a2[3]) != 6)
          {
            WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v59, v60, (WebCore *)&v75, v61);
            v83 = 3;
            v81 = v75;
            v82 = (WTF::StringImpl *)" / ";
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v76, (uint64_t)&v82, (uint64_t *)&v81);
            v63 = v75;
            v75 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
                WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v63 -= 2;
            }
          }
          v64 = v76;
          if (v76
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v76),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v76),
                (v64 = v76) != 0))
          {
            *(_DWORD *)v64 += 2;
          }
LABEL_152:
          *(_QWORD *)v62 = v64;
          v65 = v77;
          v77 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v65 -= 2;
          }
          v66 = v76;
          v76 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v66 -= 2;
          }
LABEL_160:
          if (*(_DWORD *)v8 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v8, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v8 -= 2;
          return;
        }
      }
      v24 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v26 + 72))(v26);
LABEL_39:
      if (v24 == 3)
        goto LABEL_40;
      v23 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
      goto LABEL_44;
    }
    if ((v11 & 0x3F87F) == 0x50)
    {
      v67 = *(unsigned __int16 *)(v10 + 8);
      if (v67 == 554 || v67 == 895 || (v67 - 549) < 3 || v67 == 394 || v67 == 552)
        goto LABEL_13;
    }
    if (v12)
      goto LABEL_159;
    if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)a2[3]))
      goto LABEL_13;
    v28 = *(_WORD *)(v10 + 4);
    v29 = v28 & 0x7F;
    if ((v29 - 63) > 0x11 || ((1 << ((*(_WORD *)(v10 + 4) & 0x7F) - 63)) & 0x34001) == 0)
    {
      if (v29 == 73)
      {
        v68 = *(unsigned __int8 **)(*(_QWORD *)(v10 + 8) + 8);
        v69 = v68[12];
        if (v69 != 1)
        {
          if (v69 == 2)
            goto LABEL_13;
          if ((v69 - 5) > 3)
            goto LABEL_65;
        }
        v29 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v68 + 72))(v68);
      }
      if (v29 == 3)
        goto LABEL_13;
      v28 = *(_WORD *)(v10 + 4);
    }
LABEL_65:
    v31 = v28 & 0x7F;
    if (v31 == 59 || v31 == 73)
      goto LABEL_13;
LABEL_159:
    *(_QWORD *)this = 0;
    goto LABEL_160;
  }
  if (WebCore::longhandValueID(*(unsigned __int16 *)*a2, a2[2]) == 6
    && WebCore::longhandValueID(*(unsigned __int16 *)(*a2 + 2), a2[3]) == 6)
  {
    {
      v7 = (WTF::StringImpl *)qword_1EE2EFA10;
      if (qword_1EE2EFA10)
      {
LABEL_9:
        *(_DWORD *)v7 += 2;
LABEL_10:
        *(_QWORD *)this = v7;
        return;
      }
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(&v76, (uint64_t)"none", 5uLL);
    v7 = v76;
    v76 = 0;
    v71 = (WTF::StringImpl *)qword_1EE2EFA10;
    qword_1EE2EFA10 = (uint64_t)v7;
    if (!v71)
    {
LABEL_185:
      if (!v7)
        goto LABEL_10;
      goto LABEL_9;
    }
    v72 = *(_DWORD *)v71 - 2;
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::destroy(v71, v70);
      v71 = v76;
      v76 = 0;
      if (!v71)
        goto LABEL_184;
      v72 = *(_DWORD *)v71 - 2;
      if (*(_DWORD *)v71 == 2)
      {
        WTF::StringImpl::destroy(v71, v73);
        goto LABEL_184;
      }
    }
    *(_DWORD *)v71 = v72;
LABEL_184:
    v7 = (WTF::StringImpl *)qword_1EE2EFA10;
    goto LABEL_185;
  }
  WebCore::ShorthandSerializer::serializeLonghands(this, a2, (WTF::StringBuilder *)2, (WTF::String *)" / ", 4uLL, v6);
}

void WebCore::ShorthandSerializer::serializeOffset(WebCore::ShorthandSerializer *this, uint64_t *a2)
{
  int isInitialValueForLonghand;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringBuilder *v12;
  WTF::String *v13;
  __n128 v14;
  char v15;
  const char *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  char v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  uint64_t v52;
  size_t v53;
  _DWORD *v54;
  _WORD *v55;
  int8x16_t *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  BOOL v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  size_t i;
  _BYTE *v65;
  _BYTE *v66;
  size_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  size_t v72;
  unsigned int j;
  uint64_t v74;
  char *v75;
  size_t v76;
  char *v77;
  char *v78;
  size_t v79;
  uint64_t v80;
  char *v81;
  size_t v82;
  uint64_t v83;
  __int128 v84;
  char *v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  char *v89;
  char *v90;
  char *v91;
  __int16 v92;
  char *v93;
  char *v94;
  char *v95;
  __int128 v96;
  int8x16_t v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  char *v101;
  char *v102;
  __int16 v103;
  int8x16_t *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  char *v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  char *v114;
  char *v115;
  char *v116;
  __int16 v117;
  char *v118;
  char *v119;
  int v120;
  char *v121;
  __int128 v122;
  int8x16_t v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  char *v127;
  char *v128;
  __int16 v129;
  int8x16_t *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  char *v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  char *v140;
  char *v141;
  char *v142;
  __int16 v143;
  char *v144;
  char *v145;
  int8x16_t *v146;
  char *v147;
  __int128 v148;
  int8x16_t v149;
  __int128 v150;
  __int128 v151;
  char *v152;
  char *v153;
  char *v154;
  __int16 v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  unsigned __int128 *v162;
  unsigned __int128 *v163;
  unsigned __int128 *v164;
  unsigned __int128 v165;
  unsigned __int128 *v166;
  unsigned __int128 *v167;
  unsigned __int128 *v168;
  unsigned __int128 v169;
  unsigned __int128 *v170;
  unsigned __int128 *v171;
  unsigned __int128 *v172;
  unsigned __int128 v173;
  char v174;
  char v175;
  char v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  char *__src;
  WebCore::ShorthandSerializer *v186;
  size_t __n;
  size_t v188;
  size_t v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  _DWORD *v196;
  int8x16x2_t v197;
  int8x16x2_t v198;
  int8x16x2_t v199;
  int8x16x2_t v200;
  int8x16x2_t v201;
  int8x16x2_t v202;
  int8x16x2_t v203;
  int8x16x2_t v204;
  int8x16x2_t v205;
  int8x16x2_t v206;
  int8x16x2_t v207;
  int8x16x2_t v208;
  int8x16x2_t v209;
  int8x16x2_t v210;
  int8x16x2_t v211;
  int8x16x2_t v212;
  int8x16x2_t v213;
  int8x16x2_t v214;

  isInitialValueForLonghand = WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*a2 + 4), a2[4]);
  v5 = WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*a2 + 6), a2[5]);
  v6 = v5;
  v7 = isInitialValueForLonghand & v5;
  if ((isInitialValueForLonghand & v5) == 1
    && (WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*a2 + 2), a2[3]) & 1) != 0)
  {
    v8 = 0;
    v9 = 1;
  }
  else
  {
    v9 = WebCore::isInitialValueForLonghand(*(unsigned __int16 *)*a2, a2[2]) ^ 1;
    v8 = 1;
  }
  v10 = WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*a2 + 8), a2[6]);
  if ((v7 & v10) == 1)
  {
    if ((v8 & v9) == 1)
    {
      WebCore::ShorthandSerializer::serializeLonghands(this, a2, (WTF::StringBuilder *)2, (WTF::String *)" ", 2uLL, v14);
    }
    else
    {
      v18 = (unsigned __int16 *)*a2;
      if (v9)
      {
        v19 = *v18;
        v20 = a2[2];
      }
      else
      {
        v19 = v18[1];
        v20 = a2[3];
      }
      WebCore::serializeLonghandValue(v19, v20, v12, v13, this, v14);
    }
    return;
  }
  v15 = v10;
  if (v9)
  {
    WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, a2[2], v12, v13, (WebCore *)&v195, v14);
    if ((v8 & 1) != 0)
    {
      v16 = " ";
      v17 = 2;
      goto LABEL_15;
    }
  }
  else
  {
    v195 = 0;
    if (v8)
    {
      v16 = "";
      v17 = 1;
LABEL_15:
      WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v12, v13, (WebCore *)&v194, v14);
      if ((isInitialValueForLonghand & 1) == 0)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  v194 = 0;
  v16 = "";
  v17 = 1;
  if ((isInitialValueForLonghand & 1) == 0)
  {
LABEL_16:
    WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 4), a2[4], v12, v13, (WebCore *)&v193, v14);
    v21 = " ";
    v22 = 2;
    if ((v6 & 1) == 0)
      goto LABEL_17;
LABEL_21:
    v192 = 0;
    v23 = "";
    v24 = 1;
    if ((v15 & 1) == 0)
      goto LABEL_18;
    goto LABEL_22;
  }
LABEL_20:
  v193 = 0;
  v21 = "";
  v22 = 1;
  if ((v6 & 1) != 0)
    goto LABEL_21;
LABEL_17:
  WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 6), a2[5], v12, v13, (WebCore *)&v192, v14);
  v23 = " ";
  v24 = 2;
  if ((v15 & 1) == 0)
  {
LABEL_18:
    WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 8), a2[6], v12, v13, (WebCore *)&v191, v14);
    __src = " / ";
    v25 = 4;
    goto LABEL_23;
  }
LABEL_22:
  v191 = 0;
  __src = "";
  v25 = 1;
LABEL_23:
  v26 = v195;
  if (v195)
    *(_DWORD *)v195 += 2;
  v27 = v194;
  if (v194)
    *(_DWORD *)v194 += 2;
  v28 = v193;
  if (v193)
    *(_DWORD *)v193 += 2;
  v186 = this;
  v29 = v192;
  if (v192)
    *(_DWORD *)v192 += 2;
  v30 = v191;
  if (v191)
    *(_DWORD *)v191 += 2;
  v177 = v17 - 1;
  if ((unint64_t)(v17 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195818740);
  }
  __n = v17 - 1;
  v178 = v22 - 1;
  if ((unint64_t)(v22 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195818770);
  }
  v188 = v22 - 1;
  v179 = v24 - 1;
  if ((unint64_t)(v24 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1958187A0);
  }
  v189 = v24 - 1;
  v180 = v25 - 1;
  if ((unint64_t)(v25 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1958187D0);
  }
  if (v26)
  {
    v31 = *((_DWORD *)v26 + 1);
    if (!v27)
      goto LABEL_272;
LABEL_36:
    v32 = *((_DWORD *)v27 + 1);
    if (!v28)
      goto LABEL_273;
LABEL_37:
    v33 = *((_DWORD *)v28 + 1);
    if (!v29)
      goto LABEL_274;
    goto LABEL_38;
  }
  v31 = 0;
  if (v27)
    goto LABEL_36;
LABEL_272:
  v32 = 0;
  if (v28)
    goto LABEL_37;
LABEL_273:
  v33 = 0;
  if (!v29)
  {
LABEL_274:
    v34 = 0;
    if (!v30)
      goto LABEL_275;
    goto LABEL_39;
  }
LABEL_38:
  v34 = *((_DWORD *)v29 + 1);
  if (!v30)
  {
LABEL_275:
    v35 = 0;
    goto LABEL_40;
  }
LABEL_39:
  v35 = *((_DWORD *)v30 + 1);
  if (v35 < 0)
    goto LABEL_259;
LABEL_40:
  v36 = __OFADD__(v180, v35);
  v37 = v180 + v35;
  v38 = v36;
  if (v34 < 0)
    goto LABEL_259;
  if ((v38 & 1) != 0)
    goto LABEL_259;
  v36 = __OFADD__(v34, v37);
  v39 = v34 + v37;
  if (v36)
    goto LABEL_259;
  v36 = __OFADD__(v179, v39);
  v40 = v179 + v39;
  v41 = v36;
  if (v33 < 0)
    goto LABEL_259;
  if (v41)
    goto LABEL_259;
  v36 = __OFADD__(v33, v40);
  v42 = v33 + v40;
  if (v36)
    goto LABEL_259;
  v36 = __OFADD__(v178, v42);
  v43 = v178 + v42;
  v44 = v36;
  if (v32 < 0)
    goto LABEL_259;
  if (v44)
    goto LABEL_259;
  v36 = __OFADD__(v32, v43);
  v45 = v32 + v43;
  if (v36)
    goto LABEL_259;
  v36 = __OFADD__(v177, v45);
  v46 = v177 + v45;
  v47 = v36;
  if (v31 < 0)
    goto LABEL_259;
  if (v47)
    goto LABEL_259;
  v48 = v31 + v46;
  if (__OFADD__(v31, v46))
    goto LABEL_259;
  if (v26 && (*((_BYTE *)v26 + 16) & 4) == 0
    || v27 && (*((_BYTE *)v27 + 16) & 4) == 0
    || v28 && (*((_BYTE *)v28 + 16) & 4) == 0)
  {
    if (v48)
    {
      v49 = v48;
LABEL_72:
      if (v48 <= 0x7FFFFFEF)
      {
        v190 = v29;
        WTF::tryFastCompactMalloc((WTF *)(2 * v49 + 20));
        v51 = __n;
        v50 = v188;
        v53 = v24 - 1;
        v52 = (uint64_t)v190;
        v54 = v196;
        if (v196)
        {
          v183 = v180;
          v55 = v196 + 5;
          *v196 = 2;
          v54[1] = v48;
          *((_QWORD *)v54 + 1) = v54 + 5;
          v54[4] = 0;
          if (v26)
          {
            v56 = (int8x16_t *)*((_QWORD *)v26 + 1);
            v57 = *((unsigned int *)v26 + 1);
            if ((*((_BYTE *)v26 + 16) & 4) != 0)
            {
              v58 = (char *)&v55[v57];
              if (v57 >= 0x40)
              {
                v59 = (char *)&v55[v57 & 0xFFFFFFC0];
                v84 = 0uLL;
                v85 = (char *)(v54 + 5);
                do
                {
                  v197.val[0] = *v56;
                  v86 = v56[1];
                  v203.val[0] = v56[2];
                  v87 = v56[3];
                  v56 += 4;
                  v88 = v87;
                  v203.val[1] = 0uLL;
                  v209.val[0] = v86;
                  v197.val[1] = 0uLL;
                  v89 = v85;
                  vst2q_s8(v89, v197);
                  v89 += 32;
                  v209.val[1] = 0uLL;
                  vst2q_s8(v89, v209);
                  v90 = v85 + 64;
                  vst2q_s8(v90, v203);
                  v91 = v85 + 96;
                  vst2q_s8(v91, *(int8x16x2_t *)(&v84 - 1));
                  v85 += 128;
                }
                while (v85 != v59);
              }
              else
              {
                v59 = (char *)(v54 + 5);
              }
              while (v59 != v58)
              {
                v92 = v56->u8[0];
                v56 = (int8x16_t *)((char *)v56 + 1);
                *(_WORD *)v59 = v92;
                v59 += 2;
              }
            }
            else if ((_DWORD)v57 == 1)
            {
              *v55 = v56->i16[0];
            }
            else if ((_DWORD)v57)
            {
              memcpy(v54 + 5, v56, 2 * v57);
              v51 = __n;
              v50 = v188;
              v53 = v189;
              v52 = (uint64_t)v190;
            }
            v83 = *((unsigned int *)v26 + 1);
          }
          else
          {
            v83 = 0;
          }
          v93 = (char *)&v55[v83];
          v94 = &v93[2 * v51];
          if ((v51 & 0x7FFFFFC0) != 0)
          {
            v95 = &v93[2 * (v51 & 0x7FFFFFC0)];
            v96 = 0uLL;
            do
            {
              v198.val[0] = *(int8x16_t *)v16;
              v97 = *((int8x16_t *)v16 + 1);
              v204.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
              v98 = *((_OWORD *)v16 + 3);
              v16 += 64;
              v99 = v98;
              v204.val[1] = 0uLL;
              v210.val[0] = v97;
              v198.val[1] = 0uLL;
              v100 = v93;
              vst2q_s8(v100, v198);
              v100 += 32;
              v210.val[1] = 0uLL;
              vst2q_s8(v100, v210);
              v101 = v93 + 64;
              vst2q_s8(v101, v204);
              v102 = v93 + 96;
              vst2q_s8(v102, *(int8x16x2_t *)(&v96 - 1));
              v93 += 128;
            }
            while (v93 != v95);
            v93 = v95;
          }
          while (v93 != v94)
          {
            v103 = *(unsigned __int8 *)v16++;
            *(_WORD *)v93 = v103;
            v93 += 2;
          }
          if (v27)
          {
            v104 = (int8x16_t *)*((_QWORD *)v27 + 1);
            v105 = *((unsigned int *)v27 + 1);
            if ((*((_BYTE *)v27 + 16) & 4) != 0)
            {
              v106 = &v94[2 * v105];
              if (v105 >= 0x40)
              {
                v107 = &v94[2 * (v105 & 0xFFFFFFC0)];
                v109 = 0uLL;
                v110 = v94;
                do
                {
                  v199.val[0] = *v104;
                  v111 = v104[1];
                  v205.val[0] = v104[2];
                  v112 = v104[3];
                  v104 += 4;
                  v113 = v112;
                  v205.val[1] = 0uLL;
                  v211.val[0] = v111;
                  v199.val[1] = 0uLL;
                  v114 = v110;
                  vst2q_s8(v114, v199);
                  v114 += 32;
                  v211.val[1] = 0uLL;
                  vst2q_s8(v114, v211);
                  v115 = v110 + 64;
                  vst2q_s8(v115, v205);
                  v116 = v110 + 96;
                  vst2q_s8(v116, *(int8x16x2_t *)(&v109 - 1));
                  v110 += 128;
                }
                while (v110 != v107);
              }
              else
              {
                v107 = v94;
              }
              while (v107 != v106)
              {
                v117 = v104->u8[0];
                v104 = (int8x16_t *)((char *)v104 + 1);
                *(_WORD *)v107 = v117;
                v107 += 2;
              }
            }
            else if ((_DWORD)v105 == 1)
            {
              *(_WORD *)v94 = v104->i16[0];
            }
            else if ((_DWORD)v105)
            {
              memcpy(v94, v104, 2 * v105);
              v50 = v188;
              v53 = v189;
              v52 = (uint64_t)v190;
            }
            v108 = *((unsigned int *)v27 + 1);
          }
          else
          {
            v108 = 0;
          }
          v118 = &v94[2 * v108];
          v119 = &v118[2 * v50];
          if ((v50 & 0x7FFFFFC0) != 0)
          {
            v121 = &v118[2 * (v50 & 0x7FFFFFC0)];
            v122 = 0uLL;
            v120 = v183;
            do
            {
              v200.val[0] = *(int8x16_t *)v21;
              v123 = *((int8x16_t *)v21 + 1);
              v206.val[0] = (int8x16_t)*((_OWORD *)v21 + 2);
              v124 = *((_OWORD *)v21 + 3);
              v21 += 64;
              v125 = v124;
              v206.val[1] = 0uLL;
              v212.val[0] = v123;
              v200.val[1] = 0uLL;
              v126 = v118;
              vst2q_s8(v126, v200);
              v126 += 32;
              v212.val[1] = 0uLL;
              vst2q_s8(v126, v212);
              v127 = v118 + 64;
              vst2q_s8(v127, v206);
              v128 = v118 + 96;
              vst2q_s8(v128, *(int8x16x2_t *)(&v122 - 1));
              v118 += 128;
            }
            while (v118 != v121);
            v118 = v121;
          }
          else
          {
            v120 = v183;
          }
          while (v118 != v119)
          {
            v129 = *(unsigned __int8 *)v21++;
            *(_WORD *)v118 = v129;
            v118 += 2;
          }
          if (v28)
          {
            v130 = (int8x16_t *)*((_QWORD *)v28 + 1);
            v131 = *((unsigned int *)v28 + 1);
            if ((*((_BYTE *)v28 + 16) & 4) != 0)
            {
              v132 = &v119[2 * v131];
              if (v131 >= 0x40)
              {
                v133 = &v119[2 * (v131 & 0xFFFFFFC0)];
                v135 = 0uLL;
                v136 = v119;
                do
                {
                  v201.val[0] = *v130;
                  v137 = v130[1];
                  v207.val[0] = v130[2];
                  v138 = v130[3];
                  v130 += 4;
                  v139 = v138;
                  v207.val[1] = 0uLL;
                  v213.val[0] = v137;
                  v201.val[1] = 0uLL;
                  v140 = v136;
                  vst2q_s8(v140, v201);
                  v140 += 32;
                  v213.val[1] = 0uLL;
                  vst2q_s8(v140, v213);
                  v141 = v136 + 64;
                  vst2q_s8(v141, v207);
                  v142 = v136 + 96;
                  vst2q_s8(v142, *(int8x16x2_t *)(&v135 - 1));
                  v136 += 128;
                }
                while (v136 != v133);
              }
              else
              {
                v133 = v119;
              }
              while (v133 != v132)
              {
                v143 = v130->u8[0];
                v130 = (int8x16_t *)((char *)v130 + 1);
                *(_WORD *)v133 = v143;
                v133 += 2;
              }
            }
            else if ((_DWORD)v131 == 1)
            {
              *(_WORD *)v119 = v130->i16[0];
            }
            else if ((_DWORD)v131)
            {
              memcpy(v119, v130, 2 * v131);
              v53 = v189;
              v52 = (uint64_t)v190;
            }
            v134 = *((unsigned int *)v28 + 1);
          }
          else
          {
            v134 = 0;
          }
          v144 = &v119[2 * v134];
          v145 = &v144[2 * v53];
          if ((v53 & 0x7FFFFFC0) != 0)
          {
            v147 = &v144[2 * (v53 & 0x7FFFFFC0)];
            v148 = 0uLL;
            v146 = (int8x16_t *)__src;
            do
            {
              v202.val[0] = *(int8x16_t *)v23;
              v149 = *((int8x16_t *)v23 + 1);
              v208.val[0] = (int8x16_t)*((_OWORD *)v23 + 2);
              v150 = *((_OWORD *)v23 + 3);
              v23 += 64;
              v151 = v150;
              v208.val[1] = 0uLL;
              v214.val[0] = v149;
              v202.val[1] = 0uLL;
              v152 = v144;
              vst2q_s8(v152, v202);
              v152 += 32;
              v214.val[1] = 0uLL;
              vst2q_s8(v152, v214);
              v153 = v144 + 64;
              vst2q_s8(v153, v208);
              v154 = v144 + 96;
              vst2q_s8(v154, *(int8x16x2_t *)(&v148 - 1));
              v144 += 128;
            }
            while (v144 != v147);
            v144 = v147;
          }
          else
          {
            v146 = (int8x16_t *)__src;
          }
          while (v144 != v145)
          {
            v155 = *(unsigned __int8 *)v23++;
            *(_WORD *)v144 = v155;
            v144 += 2;
          }
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v145, v52, v146, v120, (uint64_t)v30);
          goto LABEL_183;
        }
      }
LABEL_259:
      *(_QWORD *)v186 = 0;
      __break(0xC471u);
      JUMPOUT(0x195818710);
    }
LABEL_119:
    v190 = v29;
    v54 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_183;
  }
  if (!v29)
  {
    if (!v30)
    {
      if (!v48)
        goto LABEL_119;
      v62 = 0;
      v63 = 0;
      v49 = v48;
      goto LABEL_87;
    }
LABEL_85:
    v49 = v48;
    v61 = v48 == 0;
    if ((*((_BYTE *)v30 + 16) & 4) != 0)
      goto LABEL_86;
LABEL_118:
    if (!v61)
      goto LABEL_72;
    goto LABEL_119;
  }
  v60 = *((_DWORD *)v29 + 4);
  if (v30 && (v60 & 4) != 0)
    goto LABEL_85;
  v49 = v48;
  v61 = v48 == 0;
  if ((v60 & 4) == 0)
    goto LABEL_118;
LABEL_86:
  v62 = v29;
  v63 = v30;
  if (v61)
    goto LABEL_119;
LABEL_87:
  v181 = (uint64_t)v63;
  v182 = (uint64_t)v62;
  if ((v48 & 0x80000000) != 0)
    goto LABEL_259;
  v190 = v29;
  WTF::tryFastCompactMalloc((WTF *)(v49 + 20));
  i = __n;
  v54 = v196;
  if (!v196)
    goto LABEL_259;
  v184 = v180;
  v65 = v196 + 5;
  *v196 = 2;
  v54[1] = v48;
  *((_QWORD *)v54 + 1) = v54 + 5;
  v54[4] = 4;
  if (v26)
  {
    v66 = (_BYTE *)*((_QWORD *)v26 + 1);
    v67 = *((unsigned int *)v26 + 1);
    if ((*((_BYTE *)v26 + 16) & 4) != 0)
    {
      if ((_DWORD)v67)
      {
        if ((_DWORD)v67 == 1)
        {
          *v65 = *v66;
        }
        else
        {
          memcpy(v54 + 5, v66, v67);
          i = __n;
        }
      }
    }
    else
    {
      v162 = (unsigned __int128 *)&v65[v67];
      if (v67 < 0x10)
      {
        v163 = (unsigned __int128 *)(v54 + 5);
      }
      else
      {
        v163 = (unsigned __int128 *)&v65[v67 & 0xFFFFFFF0];
        v164 = (unsigned __int128 *)(v54 + 5);
        do
        {
          v165 = (unsigned __int128)vld2q_s8(v66);
          v66 += 32;
          *v164++ = v165;
        }
        while (v164 != v163);
      }
      for (i = __n; v163 != v162; v163 = (unsigned __int128 *)((char *)v163 + 1))
      {
        v174 = *v66;
        v66 += 2;
        *(_BYTE *)v163 = v174;
      }
    }
    v68 = *((unsigned int *)v26 + 1);
  }
  else
  {
    v68 = 0;
  }
  v69 = &v65[v68];
  if ((_DWORD)i)
  {
    if ((_DWORD)i == 1)
    {
      *v69 = *v16;
    }
    else
    {
      memcpy(v69, v16, i);
      i = __n;
    }
  }
  v70 = &v69[i];
  if (v27)
  {
    v71 = (char *)*((_QWORD *)v27 + 1);
    v72 = *((unsigned int *)v27 + 1);
    j = v184;
    if ((*((_BYTE *)v27 + 16) & 4) != 0)
    {
      if ((_DWORD)v72)
      {
        if ((_DWORD)v72 == 1)
          *v70 = *v71;
        else
          memcpy(&v69[i], v71, v72);
      }
    }
    else
    {
      v166 = (unsigned __int128 *)&v70[v72];
      if (v72 < 0x10)
      {
        v167 = (unsigned __int128 *)&v69[i];
      }
      else
      {
        v167 = (unsigned __int128 *)&v70[v72 & 0xFFFFFFF0];
        v168 = (unsigned __int128 *)&v69[i];
        do
        {
          v169 = (unsigned __int128)vld2q_s8(v71);
          v71 += 32;
          *v168++ = v169;
        }
        while (v168 != v167);
      }
      for (j = v184; v167 != v166; v167 = (unsigned __int128 *)((char *)v167 + 1))
      {
        v175 = *v71;
        v71 += 2;
        *(_BYTE *)v167 = v175;
      }
    }
    v74 = *((unsigned int *)v27 + 1);
  }
  else
  {
    v74 = 0;
    j = v184;
  }
  v75 = &v70[v74];
  v76 = v188;
  if ((_DWORD)v188)
  {
    if ((_DWORD)v188 == 1)
    {
      *v75 = *v21;
    }
    else
    {
      memcpy(v75, v21, v188);
      v76 = v188;
    }
  }
  v77 = &v75[v76];
  if (v28)
  {
    v78 = (char *)*((_QWORD *)v28 + 1);
    v79 = *((unsigned int *)v28 + 1);
    if ((*((_BYTE *)v28 + 16) & 4) != 0)
    {
      if ((_DWORD)v79)
      {
        if ((_DWORD)v79 == 1)
          *v77 = *v78;
        else
          memcpy(v77, v78, v79);
      }
    }
    else
    {
      v170 = (unsigned __int128 *)&v77[v79];
      if (v79 < 0x10)
      {
        v171 = (unsigned __int128 *)v77;
      }
      else
      {
        v171 = (unsigned __int128 *)&v77[v79 & 0xFFFFFFF0];
        v172 = (unsigned __int128 *)v77;
        do
        {
          v173 = (unsigned __int128)vld2q_s8(v78);
          v78 += 32;
          *v172++ = v173;
        }
        while (v172 != v171);
      }
      for (j = v184; v171 != v170; v171 = (unsigned __int128 *)((char *)v171 + 1))
      {
        v176 = *v78;
        v78 += 2;
        *(_BYTE *)v171 = v176;
      }
    }
    v80 = *((unsigned int *)v28 + 1);
  }
  else
  {
    v80 = 0;
  }
  v81 = &v77[v80];
  v82 = v189;
  if ((_DWORD)v189)
  {
    if ((_DWORD)v189 == 1)
    {
      *v81 = *v23;
    }
    else
    {
      memcpy(v81, v23, v189);
      v82 = v189;
    }
  }
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v81[v82], v182, __src, j, v181);
LABEL_183:
  *(_QWORD *)v186 = v54;
  v156 = v190;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v11);
      v156 = v190;
      if (!v190)
        goto LABEL_189;
      goto LABEL_187;
    }
    *(_DWORD *)v30 -= 2;
  }
  if (!v190)
    goto LABEL_189;
LABEL_187:
  if (*(_DWORD *)v156 == 2)
    WTF::StringImpl::destroy(v156, v11);
  else
    *(_DWORD *)v156 -= 2;
LABEL_189:
  if (!v28)
    goto LABEL_192;
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
LABEL_192:
    if (v27)
      goto LABEL_193;
    goto LABEL_195;
  }
  WTF::StringImpl::destroy(v28, v11);
  if (v27)
  {
LABEL_193:
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v11);
    else
      *(_DWORD *)v27 -= 2;
  }
LABEL_195:
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v11);
    else
      *(_DWORD *)v26 -= 2;
  }
  v157 = v191;
  v191 = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
      WTF::StringImpl::destroy(v157, v11);
    else
      *(_DWORD *)v157 -= 2;
  }
  v158 = v192;
  v192 = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
      WTF::StringImpl::destroy(v158, v11);
    else
      *(_DWORD *)v158 -= 2;
  }
  v159 = v193;
  v193 = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
      WTF::StringImpl::destroy(v159, v11);
    else
      *(_DWORD *)v159 -= 2;
  }
  v160 = v194;
  v194 = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, v11);
    else
      *(_DWORD *)v160 -= 2;
  }
  v161 = v195;
  v195 = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
      WTF::StringImpl::destroy(v161, v11);
    else
      *(_DWORD *)v161 -= 2;
  }
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializePageBreak(WebCore::ShorthandSerializer *this, unsigned __int16 a2, uint64_t a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  result = (WTF::StringImpl *)WebCore::longhandValueID(a2, a3);
  v5 = 0;
  if ((int)result > 446)
  {
    if ((_DWORD)result == 447)
    {
LABEL_13:
      result = (WTF::StringImpl *)WebCore::nameString(result);
      v5 = *(WTF::StringImpl **)result;
      goto LABEL_14;
    }
    if ((_DWORD)result != 614)
      goto LABEL_16;
    {
      v5 = (WTF::StringImpl *)qword_1EE2F07D0;
      if (qword_1EE2F07D0)
        goto LABEL_15;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(&v9, (uint64_t)"always", 7uLL);
    v5 = v9;
    v9 = 0;
    result = (WTF::StringImpl *)qword_1EE2F07D0;
    qword_1EE2F07D0 = (uint64_t)v5;
    if (!result)
    {
LABEL_14:
      if (!v5)
        goto LABEL_16;
LABEL_15:
      *(_DWORD *)v5 += 2;
      goto LABEL_16;
    }
    v7 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v6);
      result = v9;
      v9 = 0;
      if (!result)
        goto LABEL_12;
      v7 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        goto LABEL_12;
      }
    }
    *(_DWORD *)result = v7;
LABEL_12:
    v5 = (WTF::StringImpl *)qword_1EE2F07D0;
    goto LABEL_14;
  }
  if (((_DWORD)result - 258) < 2 || (_DWORD)result == 394)
    goto LABEL_13;
LABEL_16:
  *(_QWORD *)this = v5;
  return result;
}

_DWORD **WebCore::ShorthandSerializer::serializeBreakInside(WebCore::ShorthandSerializer *this, unsigned __int16 a2, uint64_t a3)
{
  _DWORD **result;
  _DWORD *v5;

  result = (_DWORD **)WebCore::longhandValueID(a2, a3);
  if ((_DWORD)result == 447 || (_DWORD)result == 394)
  {
    result = (_DWORD **)WebCore::nameString(result);
    v5 = *result;
    if (*result)
      *v5 += 2;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)this = v5;
  return result;
}

uint64_t *WebCore::ShorthandSerializer::serializeTextWrap(WebCore::ShorthandSerializer *this, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t *result;
  _DWORD *v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;

  v4 = WebCore::longhandValueID(*(unsigned __int16 *)*a2, a2[2]);
  v5 = WebCore::longhandValueID(*(unsigned __int16 *)(*a2 + 2), a2[3]);
  if (v5 == 394)
  {
    v5 = v4;
LABEL_4:
    result = WebCore::nameString(v5);
    v7 = (_DWORD *)*result;
    if (*result)
      *v7 += 2;
    *(_QWORD *)this = v7;
    return result;
  }
  if (v4 == 726)
    goto LABEL_4;
  v8 = 0uLL;
  v9 = 0uLL;
  if (v4 <= 0x48D)
    v9 = *((_OWORD *)&WebCore::valueList + v4);
  if (v5 <= 0x48D)
    v8 = *((_OWORD *)&WebCore::valueList + v5);
  v11 = v8;
  v12 = v9;
  v10 = 32;
  result = WTF::tryMakeString<WTF::ASCIILiteral,char,WTF::ASCIILiteral>(&v12, &v10, (uint64_t)&v11, this);
  if (!*(_QWORD *)this)
    __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeColumnBreak(WebCore::ShorthandSerializer *this, unsigned __int16 a2, uint64_t a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  result = (WTF::StringImpl *)WebCore::longhandValueID(a2, a3);
  if ((_DWORD)result == 394)
  {
    {
      v5 = (WTF::StringImpl *)qword_1EE2F0630;
      if (qword_1EE2F0630)
        goto LABEL_18;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(&v15, (uint64_t)"auto", 5uLL);
    v5 = v15;
    v15 = 0;
    result = (WTF::StringImpl *)qword_1EE2F0630;
    qword_1EE2F0630 = (uint64_t)v5;
    if (!result)
      goto LABEL_33;
    v9 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v8);
      result = v15;
      v15 = 0;
      if (!result)
        goto LABEL_15;
      v9 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        goto LABEL_15;
      }
    }
    *(_DWORD *)result = v9;
LABEL_15:
    v5 = (WTF::StringImpl *)qword_1EE2F0630;
    goto LABEL_33;
  }
  if ((_DWORD)result == 612)
  {
    {
      v5 = (WTF::StringImpl *)qword_1EE2F07D8;
      if (qword_1EE2F07D8)
        goto LABEL_18;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(&v15, (uint64_t)"avoid", 6uLL);
    v5 = v15;
    v15 = 0;
    result = (WTF::StringImpl *)qword_1EE2F07D8;
    qword_1EE2F07D8 = (uint64_t)v5;
    if (result)
    {
      v13 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        WTF::StringImpl::destroy(result, v12);
        result = v15;
        v15 = 0;
        if (!result)
          goto LABEL_32;
        v13 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
          goto LABEL_32;
        }
      }
      *(_DWORD *)result = v13;
LABEL_32:
      v5 = (WTF::StringImpl *)qword_1EE2F07D8;
    }
LABEL_33:
    if (!v5)
      goto LABEL_20;
    goto LABEL_18;
  }
  if ((_DWORD)result != 525)
  {
    v5 = 0;
    goto LABEL_20;
  }
  {
    bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
LABEL_6:
    WTF::AtomString::AtomString(&v15, (uint64_t)"always", 7uLL);
    v5 = v15;
    v15 = 0;
    result = (WTF::StringImpl *)qword_1EE2F07D0;
    qword_1EE2F07D0 = (uint64_t)v5;
    if (!result)
      goto LABEL_33;
    v7 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v6);
      result = v15;
      v15 = 0;
      if (!result)
        goto LABEL_9;
      v7 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        goto LABEL_9;
      }
    }
    *(_DWORD *)result = v7;
LABEL_9:
    v5 = (WTF::StringImpl *)qword_1EE2F07D0;
    goto LABEL_33;
  }
  v5 = (WTF::StringImpl *)qword_1EE2F07D0;
  if (!qword_1EE2F07D0)
    goto LABEL_6;
LABEL_18:
  *(_DWORD *)v5 += 2;
LABEL_20:
  *(_QWORD *)this = v5;
  return result;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeWhiteSpace(WebCore::ShorthandSerializer *this, uint64_t *a2)
{
  unsigned int v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  __int128 v22;
  WTF::StringImpl *v23[2];

  v4 = WebCore::longhandValueID(*(unsigned __int16 *)*a2, a2[2]);
  result = (WTF::StringImpl *)WebCore::longhandValueID(*(unsigned __int16 *)(*a2 + 2), a2[3]);
  if (v4 == 440 && (_DWORD)result == 726)
  {
    {
      v6 = (WTF::StringImpl *)qword_1EE2EFCB0;
      if (qword_1EE2EFCB0)
        goto LABEL_38;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(v23, (uint64_t)"normal", 7uLL);
    v6 = v23[0];
    v23[0] = 0;
    result = (WTF::StringImpl *)qword_1EE2EFCB0;
    qword_1EE2EFCB0 = (uint64_t)v6;
    if (result)
    {
      v8 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        WTF::StringImpl::destroy(result, v7);
        result = v23[0];
        v23[0] = 0;
        if (!result)
          goto LABEL_8;
        v8 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          goto LABEL_8;
        }
      }
      *(_DWORD *)result = v8;
LABEL_8:
      v6 = (WTF::StringImpl *)qword_1EE2EFCB0;
    }
LABEL_37:
    if (!v6)
    {
LABEL_39:
      *(_QWORD *)this = v6;
      return result;
    }
LABEL_38:
    *(_DWORD *)v6 += 2;
    goto LABEL_39;
  }
  if (v4 == 570 && (_DWORD)result == 481)
  {
    {
      v6 = (WTF::StringImpl *)qword_1EE2F0908;
      if (qword_1EE2F0908)
        goto LABEL_38;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(v23, (uint64_t)"pre", 4uLL);
    v6 = v23[0];
    v23[0] = 0;
    result = (WTF::StringImpl *)qword_1EE2F0908;
    qword_1EE2F0908 = (uint64_t)v6;
    if (!result)
      goto LABEL_37;
    v10 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v9);
      result = v23[0];
      v23[0] = 0;
      if (!result)
        goto LABEL_16;
      v10 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
        goto LABEL_16;
      }
    }
    *(_DWORD *)result = v10;
LABEL_16:
    v6 = (WTF::StringImpl *)qword_1EE2F0908;
    goto LABEL_37;
  }
  if (v4 == 570 && (_DWORD)result == 726)
  {
    {
      v6 = (WTF::StringImpl *)qword_1EE2F0918;
      if (qword_1EE2F0918)
        goto LABEL_38;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(v23, (uint64_t)"pre-wrap", 9uLL);
    v6 = v23[0];
    v23[0] = 0;
    result = (WTF::StringImpl *)qword_1EE2F0918;
    qword_1EE2F0918 = (uint64_t)v6;
    if (!result)
      goto LABEL_37;
    v12 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v11);
      result = v23[0];
      v23[0] = 0;
      if (!result)
        goto LABEL_24;
      v12 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        goto LABEL_24;
      }
    }
    *(_DWORD *)result = v12;
LABEL_24:
    v6 = (WTF::StringImpl *)qword_1EE2F0918;
    goto LABEL_37;
  }
  if (v4 == 571 && (_DWORD)result == 726)
  {
    {
      v6 = (WTF::StringImpl *)qword_1EE2F0910;
      if (qword_1EE2F0910)
        goto LABEL_38;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(v23, (uint64_t)"pre-line", 9uLL);
    v6 = v23[0];
    v23[0] = 0;
    result = (WTF::StringImpl *)qword_1EE2F0910;
    qword_1EE2F0910 = (uint64_t)v6;
    if (!result)
      goto LABEL_37;
    v14 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v13);
      result = v23[0];
      v23[0] = 0;
      if (!result)
        goto LABEL_32;
      v14 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
        goto LABEL_32;
      }
    }
    *(_DWORD *)result = v14;
LABEL_32:
    v6 = (WTF::StringImpl *)qword_1EE2F0910;
    goto LABEL_37;
  }
  if (v4 == 440)
  {
LABEL_36:
    result = (WTF::StringImpl *)WebCore::nameString(result);
    v6 = *(WTF::StringImpl **)result;
    goto LABEL_37;
  }
  if ((_DWORD)result == 726)
  {
    LODWORD(result) = v4;
    goto LABEL_36;
  }
  v15 = 0uLL;
  v16 = 0uLL;
  if (v4 <= 0x48D)
    v16 = *((_OWORD *)&WebCore::valueList + v4);
  if (result <= 0x48D)
    v15 = *((_OWORD *)&WebCore::valueList + result);
  v22 = v15;
  *(_OWORD *)v23 = v16;
  v21 = 32;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,char,WTF::ASCIILiteral>(v23, &v21, (uint64_t)&v22, this);
  if (!*(_QWORD *)this)
  {
    __break(0xC471u);
    JUMPOUT(0x195818F30);
  }
  return result;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeCoordinatingListPropertyGroup(WebCore::ShorthandSerializer *this, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD **v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
    v4 = ((*(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16)) & 0x3F800) == 120832;
  else
    v4 = 0;
  if (v4)
  {
    LODWORD(v3) = *(_DWORD *)(v3 + 8);
    if (v3 <= 1)
      v3 = 1;
    else
      v3 = v3;
  }
  else
  {
    v3 = 1;
  }
  v22 = v3;
  v23 = 0;
  v5 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 1;
  do
  {
    v27 = (_QWORD *)a2;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    if (*(_DWORD *)(a2 + 8))
    {
      for (i = 0; i < *(unsigned int *)(a2 + 8); ++i)
      {
        v7 = *(_QWORD *)(a2 + 16 + 8 * i);
        if (v7)
          v8 = ((*(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16)) & 0x3F800) == 120832;
        else
          v8 = 0;
        if (!v8)
        {
          *((_BYTE *)&v27 + i + 8) = WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*v27 + 2 * i), *(_QWORD *)(a2 + 16 + 8 * i));
          v9 = &(&v27)[i];
          *(_DWORD *)v7 += 2;
          v10 = (_DWORD *)v9[4];
          v9[4] = v7;
          if (v10)
            goto LABEL_27;
          continue;
        }
        v11 = *(unsigned int *)(v7 + 8);
        if (v5 >= v11)
        {
          if (!(_DWORD)v11)
            goto LABEL_35;
        }
        else
        {
          if (v5 > 3)
            v12 = (_DWORD **)(*(_QWORD *)(v7 + 48) + 8 * (v5 - 4));
          else
            v12 = (_DWORD **)(v7 + 8 * v5 + 16);
          v13 = *v12;
          if (*v12)
          {
LABEL_25:
            *((_BYTE *)&v27 + i + 8) = WebCore::isInitialValueForLonghand(*(unsigned __int16 *)(*v27 + 2 * i), (uint64_t)v13);
            *v13 += 2;
            goto LABEL_26;
          }
        }
        v14 = v5 % v11;
        if (v14 > 3)
          v15 = (_DWORD **)(*(_QWORD *)(v7 + 48) + 8 * (v14 - 4));
        else
          v15 = (_DWORD **)(v7 + 8 * v14 + 16);
        v13 = *v15;
        if (*v15)
          goto LABEL_25;
LABEL_35:
        v13 = 0;
        *((_BYTE *)&v27 + i + 8) = 1;
LABEL_26:
        v16 = &(&v27)[i];
        v10 = (_DWORD *)v16[4];
        v16[4] = v13;
        if (v10)
        {
LABEL_27:
          if (*v10 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, (WTF::StringImpl *)a2);
          else
            *v10 -= 2;
        }
      }
    }
    LOBYTE(v28) = 0;
    WebCore::LayerValues::serialize((WebCore::LayerValues *)&v27, (WTF::StringBuilder *)&v23);
    WebCore::LayerValues::~LayerValues((WebCore::LayerValues *)&v27, v17);
    ++v5;
  }
  while (v5 != v22);
  v18 = v23;
  if (v23
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v23),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v23),
        (v18 = v23) != 0))
  {
    *(_DWORD *)v18 += 2;
  }
  *(_QWORD *)this = v18;
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ShorthandSerializer::serializeLonghands(WebCore *a1, uint64_t *a2, WTF::StringBuilder *a3, WTF::String *a4, size_t a5, __n128 a6)
{
  WTF::String *v7;
  _QWORD *k;
  WTF::StringBuilder *v10;
  WTF::String *v11;
  __n128 v12;
  WTF::StringBuilder *v13;
  WTF::String *v14;
  __n128 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  size_t v22;
  int v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  WTF::StringBuilder *v34;
  WTF::String *v35;
  __n128 v36;
  WTF::StringBuilder *v37;
  WTF::String *v38;
  __n128 v39;
  WTF::StringBuilder *v40;
  WTF::String *v41;
  __n128 v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  int v55;
  int v56;
  BOOL v57;
  int v58;
  int v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  _DWORD *v63;
  _WORD *v64;
  uint64_t v65;
  _QWORD *j;
  WTF::StringBuilder *v67;
  WTF::String *v68;
  __n128 v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  char v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  WTF::StringImpl *v81;
  int v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  char *v85;
  int8x16_t *v86;
  size_t v87;
  WTF::String *v88;
  unsigned __int128 v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  int v95;
  BOOL v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  _BYTE *v101;
  _BYTE *v102;
  char *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF::String *v106;
  char *v107;
  __int16 v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __int16 v112;
  unsigned __int128 *v113;
  unsigned __int128 *v114;
  char v115;
  char *v116;
  int8x16_t v117;
  int8x16_t v118;
  __int128 v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  int8x16_t v124;
  int8x16_t v125;
  __int128 v126;
  char *v127;
  char *v128;
  char *v129;
  WTF::StringImpl *v130;
  int v131;
  _BOOL4 v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  _DWORD *v135;
  _BYTE *v136;
  size_t v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  WTF::StringImpl *v141;
  size_t v142;
  WTF::StringImpl *i;
  _BYTE *v144;
  char *v145;
  size_t v146;
  char *v147;
  char *v148;
  int v149;
  BOOL v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  _BYTE *v153;
  size_t v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  size_t v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE *v161;
  WTF::StringImpl *v162;
  size_t v163;
  _BYTE *v164;
  char *v165;
  size_t v166;
  _WORD *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  char *v174;
  int8x16_t v175;
  __int128 v176;
  __int128 v177;
  char *v178;
  char *v179;
  char *v180;
  __int16 v181;
  char *v182;
  char *v183;
  uint64_t v184;
  int8x16_t *v185;
  char *v186;
  __int128 v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  char *v191;
  char *v192;
  char *v193;
  __int16 v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  __int128 v199;
  char *v200;
  int8x16_t v201;
  __int128 v202;
  __int128 v203;
  char *v204;
  char *v205;
  char *v206;
  __int16 v207;
  char *v208;
  char *v209;
  int8x16_t *v210;
  char *v211;
  __int128 v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  char *v216;
  char *v217;
  char *v218;
  __int16 v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  __int128 v224;
  char *v225;
  int8x16_t v226;
  __int128 v227;
  __int128 v228;
  char *v229;
  char *v230;
  char *v231;
  __int16 v232;
  char *v233;
  char *v234;
  __int128 v235;
  int8x16_t v236;
  __int128 v237;
  __int128 v238;
  char *v239;
  char *v240;
  char *v241;
  __int16 v242;
  uint64_t v243;
  char *v244;
  char *v245;
  __int128 v246;
  int8x16_t v247;
  __int128 v248;
  __int128 v249;
  char *v250;
  char *v251;
  char *v252;
  __int16 v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  __int128 v256;
  char *v257;
  int8x16_t v258;
  __int128 v259;
  __int128 v260;
  char *v261;
  char *v262;
  char *v263;
  __int16 v264;
  char *v265;
  char *v266;
  int8x16_t *v267;
  char *v268;
  __int128 v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  char *v273;
  char *v274;
  char *v275;
  __int16 v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  __int128 v281;
  char *v282;
  int8x16_t v283;
  __int128 v284;
  __int128 v285;
  char *v286;
  char *v287;
  char *v288;
  __int16 v289;
  char *v290;
  char *v291;
  __int128 v292;
  int8x16_t v293;
  __int128 v294;
  __int128 v295;
  char *v296;
  char *v297;
  char *v298;
  __int16 v299;
  uint64_t v300;
  char *v301;
  char *v302;
  __int128 v303;
  int8x16_t v304;
  __int128 v305;
  __int128 v306;
  char *v307;
  char *v308;
  char *v309;
  __int16 v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  uint64_t v313;
  char *v314;
  char *v315;
  __int128 v316;
  int8x16_t v317;
  unsigned __int128 v318;
  char *v319;
  char *v320;
  char *v321;
  __int16 v322;
  char *v323;
  char *v324;
  char v325;
  unsigned __int128 *v326;
  unsigned __int128 *v327;
  unsigned __int128 v328;
  unsigned __int128 *v329;
  unsigned __int128 *v330;
  unsigned __int128 *v331;
  unsigned __int128 v332;
  char *v333;
  char *v334;
  unsigned __int128 v335;
  char v336;
  unsigned __int128 *v337;
  unsigned __int128 *v338;
  unsigned __int128 *v339;
  unsigned __int128 v340;
  unsigned __int128 *v341;
  unsigned __int128 *v342;
  unsigned __int128 *v343;
  unsigned __int128 v344;
  unsigned __int128 *v345;
  unsigned __int128 *v346;
  unsigned __int128 *v347;
  unsigned __int128 v348;
  char *v349;
  char *v350;
  unsigned __int128 v351;
  char v352;
  char v353;
  char v354;
  char v355;
  char v356;
  char v357;
  int v358;
  WTF::StringImpl *v359;
  WTF::StringImpl *v360;
  uint64_t v361;
  _QWORD *v362;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  _DWORD *v366;
  WTF::StringImpl *v367;
  int v368;
  char v369;
  uint64_t v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  uint64_t v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  uint64_t v376;
  uint64_t v377;
  WTF::StringImpl *v378;
  int8x16x2_t v379;
  int8x16x2_t v380;
  int8x16x2_t v381;
  int8x16x2_t v382;
  int8x16x2_t v383;
  int8x16x2_t v384;
  int8x16x2_t v385;
  int8x16x2_t v386;
  int8x16x2_t v387;
  int8x16x2_t v388;
  int8x16x2_t v389;
  int8x16x2_t v390;
  int8x16x2_t v391;
  int8x16x2_t v392;
  int8x16x2_t v393;
  int8x16x2_t v394;
  int8x16x2_t v395;
  int8x16x2_t v396;
  int8x16x2_t v397;
  int8x16x2_t v398;
  int8x16x2_t v399;
  int8x16x2_t v400;
  int8x16x2_t v401;
  int8x16x2_t v402;
  int8x16x2_t v403;
  int8x16x2_t v404;
  int8x16x2_t v405;
  int8x16x2_t v406;
  int8x16x2_t v407;
  int8x16x2_t v408;
  int8x16x2_t v409;
  int8x16x2_t v410;
  int8x16x2_t v411;
  int8x16x2_t v412;
  int8x16x2_t v413;
  int8x16x2_t v414;
  int8x16x2_t v415;
  int8x16x2_t v416;
  int8x16x2_t v417;
  int8x16x2_t v418;
  int8x16x2_t v419;
  int8x16x2_t v420;
  int8x16x2_t v421;
  int8x16x2_t v422;
  int8x16x2_t v423;

  v7 = a4;
  k = a1;
  switch((int)a3)
  {
    case 1:
      WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, a2[2], a3, a4, a1, a6);
      return;
    case 2:
      WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, a2[2], a3, a4, (WebCore *)&v378, a6);
      WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v67, v68, (WebCore *)&v377, v69);
      if (a5)
      {
        v70 = a5 - 1;
        if ((a5 - 1) >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x19581AB28);
        }
      }
      else
      {
        v70 = 0;
      }
      if (v378)
      {
        v71 = *((_DWORD *)v378 + 1);
        if (v377)
          goto LABEL_69;
      }
      else
      {
        v71 = 0;
        if (v377)
        {
LABEL_69:
          v72 = *(_DWORD *)(v377 + 4);
          if (v72 < 0)
            goto LABEL_528;
          goto LABEL_70;
        }
      }
      v72 = 0;
LABEL_70:
      v26 = __OFADD__(v70, v72);
      v73 = v70 + v72;
      v74 = v26;
      if ((v71 & 0x80000000) == 0 && (v74 & 1) == 0)
      {
        v75 = (v71 + v73);
        if (!__OFADD__(v71, v73))
        {
          if (v378)
          {
            v76 = *((_DWORD *)v378 + 4);
            v77 = (v76 >> 2) & 1;
            if (v377 && (v76 & 4) != 0)
              goto LABEL_79;
          }
          else
          {
            if (v377)
            {
LABEL_79:
              v77 = (*(unsigned __int8 *)(v377 + 16) >> 2) & 1;
              goto LABEL_80;
            }
            v77 = 1;
          }
LABEL_80:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v75, v77, (uint64_t)v378, (int8x16_t *)v7, v70, v377, k);
          if (*k)
          {
            v78 = (WTF::StringImpl *)v377;
            v377 = 0;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
                WTF::StringImpl::destroy(v78, v16);
              else
                *(_DWORD *)v78 -= 2;
            }
            v79 = v378;
            v378 = 0;
            if (!v79)
              return;
            goto LABEL_431;
          }
LABEL_529:
          __break(0xC471u);
          JUMPOUT(0x19581AAA0);
        }
      }
LABEL_528:
      *k = 0;
      goto LABEL_529;
    case 3:
      WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, a2[2], a3, a4, (WebCore *)&v376, a6);
      WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v10, v11, (WebCore *)&v375, v12);
      WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 4), a2[4], v13, v14, (WebCore *)&v374, v15);
      v17 = v376;
      if (a5)
      {
        v358 = a5--;
        if (a5 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x19581AAD0);
        }
        v18 = v358 - 1;
      }
      else
      {
        v18 = 0;
      }
      v19 = v374;
      v20 = v375;
      if (v376)
        v21 = *(_DWORD *)(v376 + 4);
      else
        v21 = 0;
      v22 = v18;
      if (v375)
        v23 = *((_DWORD *)v375 + 1);
      else
        v23 = 0;
      v24 = k;
      if (v374)
        v25 = *((_DWORD *)v374 + 1);
      else
        v25 = 0;
      if (((v25 | v22) & 0x80000000) != 0)
        goto LABEL_527;
      v26 = __OFADD__((_DWORD)v22, v25);
      v27 = v22 + v25;
      v28 = v26;
      if (v23 < 0)
        goto LABEL_527;
      if (v28)
        goto LABEL_527;
      v26 = __OFADD__(v23, v27);
      v29 = v23 + v27;
      if (v26)
        goto LABEL_527;
      v26 = __OFADD__((_DWORD)a5, v29);
      v30 = a5 + v29;
      v31 = v26;
      if (v21 < 0)
        goto LABEL_527;
      if (v31)
        goto LABEL_527;
      v32 = v21 + v30;
      if (__OFADD__(v21, v30))
        goto LABEL_527;
      if (v376 && (*(_BYTE *)(v376 + 16) & 4) == 0)
      {
        if (v32)
        {
          v33 = v32;
LABEL_254:
          if (v32 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v33 + 20));
            v135 = v366;
            if (v366)
            {
              v167 = v366 + 5;
              *v366 = 2;
              v135[1] = v32;
              *((_QWORD *)v135 + 1) = v135 + 5;
              v135[4] = 0;
              if (v17)
              {
                v16 = *(WTF::StringImpl **)(v17 + 8);
                v168 = *(unsigned int *)(v17 + 4);
                if ((*(_BYTE *)(v17 + 16) & 4) != 0)
                {
                  v169 = (char *)&v167[v168];
                  if (v168 >= 0x40)
                  {
                    v170 = (char *)&v167[v168 & 0xFFFFFFC0];
                    v256 = 0uLL;
                    v257 = (char *)(v135 + 5);
                    do
                    {
                      v388.val[0] = *(int8x16_t *)v16;
                      v258 = *((int8x16_t *)v16 + 1);
                      v403.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
                      v259 = *((_OWORD *)v16 + 3);
                      v16 = (WTF::StringImpl *)((char *)v16 + 64);
                      v260 = v259;
                      v403.val[1] = 0uLL;
                      v418.val[0] = v258;
                      v388.val[1] = 0uLL;
                      v261 = v257;
                      vst2q_s8(v261, v388);
                      v261 += 32;
                      v418.val[1] = 0uLL;
                      vst2q_s8(v261, v418);
                      v262 = v257 + 64;
                      vst2q_s8(v262, v403);
                      v263 = v257 + 96;
                      vst2q_s8(v263, *(int8x16x2_t *)(&v256 - 1));
                      v257 += 128;
                    }
                    while (v257 != v170);
                  }
                  else
                  {
                    v170 = (char *)(v135 + 5);
                  }
                  while (v170 != v169)
                  {
                    v264 = *(unsigned __int8 *)v16;
                    v16 = (WTF::StringImpl *)((char *)v16 + 1);
                    *(_WORD *)v170 = v264;
                    v170 += 2;
                  }
                }
                else if ((_DWORD)v168 == 1)
                {
                  *v167 = *(_WORD *)v16;
                }
                else if ((_DWORD)v168)
                {
                  memcpy(v135 + 5, v16, 2 * v168);
                }
                v172 = *(unsigned int *)(v17 + 4);
              }
              else
              {
                v172 = 0;
              }
              v265 = (char *)&v167[v172];
              v266 = &v265[2 * a5];
              if ((a5 & 0xFFFFFFC0) != 0)
              {
                v268 = &v265[2 * (a5 & 0xFFFFFFC0)];
                v269 = 0uLL;
                v267 = (int8x16_t *)v7;
                do
                {
                  v389.val[0] = *v267;
                  v270 = v267[1];
                  v404.val[0] = v267[2];
                  v271 = v267[3];
                  v267 += 4;
                  v272 = v271;
                  v404.val[1] = 0uLL;
                  v419.val[0] = v270;
                  v389.val[1] = 0uLL;
                  v273 = v265;
                  vst2q_s8(v273, v389);
                  v273 += 32;
                  v419.val[1] = 0uLL;
                  vst2q_s8(v273, v419);
                  v274 = v265 + 64;
                  vst2q_s8(v274, v404);
                  v275 = v265 + 96;
                  vst2q_s8(v275, *(int8x16x2_t *)(&v269 - 1));
                  v265 += 128;
                }
                while (v265 != v268);
                v265 = v268;
              }
              else
              {
                v267 = (int8x16_t *)v7;
              }
              while (v265 != v266)
              {
                v276 = v267->u8[0];
                v267 = (int8x16_t *)((char *)v267 + 1);
                *(_WORD *)v265 = v276;
                v265 += 2;
              }
              if (v20)
              {
                v16 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
                v277 = *((unsigned int *)v20 + 1);
                if ((*((_BYTE *)v20 + 16) & 4) != 0)
                {
                  v278 = &v266[2 * v277];
                  if (v277 >= 0x40)
                  {
                    v279 = &v266[2 * (v277 & 0xFFFFFFC0)];
                    v281 = 0uLL;
                    v282 = v266;
                    do
                    {
                      v390.val[0] = *(int8x16_t *)v16;
                      v283 = *((int8x16_t *)v16 + 1);
                      v405.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
                      v284 = *((_OWORD *)v16 + 3);
                      v16 = (WTF::StringImpl *)((char *)v16 + 64);
                      v285 = v284;
                      v405.val[1] = 0uLL;
                      v420.val[0] = v283;
                      v390.val[1] = 0uLL;
                      v286 = v282;
                      vst2q_s8(v286, v390);
                      v286 += 32;
                      v420.val[1] = 0uLL;
                      vst2q_s8(v286, v420);
                      v287 = v282 + 64;
                      vst2q_s8(v287, v405);
                      v288 = v282 + 96;
                      vst2q_s8(v288, *(int8x16x2_t *)(&v281 - 1));
                      v282 += 128;
                    }
                    while (v282 != v279);
                  }
                  else
                  {
                    v279 = v266;
                  }
                  while (v279 != v278)
                  {
                    v289 = *(unsigned __int8 *)v16;
                    v16 = (WTF::StringImpl *)((char *)v16 + 1);
                    *(_WORD *)v279 = v289;
                    v279 += 2;
                  }
                }
                else if ((_DWORD)v277 == 1)
                {
                  *(_WORD *)v266 = *(_WORD *)v16;
                }
                else if ((_DWORD)v277)
                {
                  memcpy(v266, v16, 2 * v277);
                }
                v280 = *((unsigned int *)v20 + 1);
              }
              else
              {
                v280 = 0;
              }
              v290 = &v266[2 * v280];
              v145 = &v290[2 * v22];
              if ((v22 & 0xFFFFFFC0) != 0)
              {
                v291 = &v290[2 * (v22 & 0xFFFFFFC0)];
                v292 = 0uLL;
                do
                {
                  v391.val[0] = *(int8x16_t *)v7;
                  v293 = *((int8x16_t *)v7 + 1);
                  v406.val[0] = (int8x16_t)*((_OWORD *)v7 + 2);
                  v294 = *((_OWORD *)v7 + 3);
                  v7 = (WTF::String *)((char *)v7 + 64);
                  v295 = v294;
                  v406.val[1] = 0uLL;
                  v421.val[0] = v293;
                  v391.val[1] = 0uLL;
                  v296 = v290;
                  vst2q_s8(v296, v391);
                  v296 += 32;
                  v421.val[1] = 0uLL;
                  vst2q_s8(v296, v421);
                  v297 = v290 + 64;
                  vst2q_s8(v297, v406);
                  v298 = v290 + 96;
                  vst2q_s8(v298, *(int8x16x2_t *)(&v292 - 1));
                  v290 += 128;
                }
                while (v290 != v291);
                v290 = v291;
              }
              while (v290 != v145)
              {
                v299 = *(unsigned __int8 *)v7;
                v7 = (WTF::String *)((char *)v7 + 1);
                *(_WORD *)v290 = v299;
                v290 += 2;
              }
              if (v19)
              {
                v16 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
                v300 = *((unsigned int *)v19 + 1);
                if ((*((_BYTE *)v19 + 16) & 4) != 0)
                {
                  v301 = &v145[2 * v300];
                  if (v300 >= 0x40)
                  {
                    v302 = &v145[2 * (v300 & 0xFFFFFFC0)];
                    v303 = 0uLL;
                    do
                    {
                      v392.val[0] = *(int8x16_t *)v16;
                      v304 = *((int8x16_t *)v16 + 1);
                      v407.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
                      v305 = *((_OWORD *)v16 + 3);
                      v16 = (WTF::StringImpl *)((char *)v16 + 64);
                      v306 = v305;
                      v407.val[1] = 0uLL;
                      v422.val[0] = v304;
                      v392.val[1] = 0uLL;
                      v307 = v145;
                      vst2q_s8(v307, v392);
                      v307 += 32;
                      v422.val[1] = 0uLL;
                      vst2q_s8(v307, v422);
                      v308 = v145 + 64;
                      vst2q_s8(v308, v407);
                      v309 = v145 + 96;
                      vst2q_s8(v309, *(int8x16x2_t *)(&v303 - 1));
                      v145 += 128;
                    }
                    while (v145 != v302);
                    v145 = v302;
                  }
                  while (v145 != v301)
                  {
                    v310 = *(unsigned __int8 *)v16;
                    v16 = (WTF::StringImpl *)((char *)v16 + 1);
                    *(_WORD *)v145 = v310;
                    v145 += 2;
                  }
                }
                else
                {
                  if ((_DWORD)v300 == 1)
                  {
                    *(_WORD *)v145 = *(_WORD *)v16;
                    goto LABEL_424;
                  }
                  if ((_DWORD)v300)
                  {
                    v146 = 2 * v300;
                    goto LABEL_210;
                  }
                }
              }
              goto LABEL_424;
            }
          }
LABEL_527:
          *v24 = 0;
          __break(0xC471u);
          JUMPOUT(0x19581AA94);
        }
LABEL_455:
        v135 = (_DWORD *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_424;
      }
      if (v375)
      {
        v131 = *((_DWORD *)v375 + 4);
        if (!v374 || (v131 & 4) == 0)
        {
          v33 = v32;
          v132 = v32 == 0;
          if ((v131 & 4) != 0)
          {
LABEL_185:
            v133 = v375;
            v134 = v374;
            if (v132)
              goto LABEL_455;
LABEL_186:
            v360 = v133;
            v364 = v134;
            if ((v32 & 0x80000000) != 0)
              goto LABEL_527;
            WTF::tryFastCompactMalloc((WTF *)(v33 + 20));
            v135 = v366;
            if (!v366)
              goto LABEL_527;
            v136 = v366 + 5;
            *v366 = 2;
            v135[1] = v32;
            *((_QWORD *)v135 + 1) = v135 + 5;
            v135[4] = 4;
            if (v17)
            {
              v16 = *(WTF::StringImpl **)(v17 + 8);
              v137 = *(unsigned int *)(v17 + 4);
              if ((*(_BYTE *)(v17 + 16) & 4) != 0)
              {
                if ((_DWORD)v137)
                {
                  if ((_DWORD)v137 == 1)
                    *v136 = *(_BYTE *)v16;
                  else
                    memcpy(v135 + 5, v16, v137);
                }
              }
              else
              {
                if (v137 < 0x10)
                {
                  v326 = (unsigned __int128 *)(v135 + 5);
                }
                else
                {
                  v326 = (unsigned __int128 *)&v136[v137 & 0xFFFFFFF0];
                  v327 = (unsigned __int128 *)(v135 + 5);
                  do
                  {
                    v328 = (unsigned __int128)vld2q_s8((const char *)v16);
                    v16 = (WTF::StringImpl *)((char *)v16 + 32);
                    *v327++ = v328;
                  }
                  while (v327 != v326);
                }
                while (v326 != (unsigned __int128 *)&v136[v137])
                {
                  v353 = *(_BYTE *)v16;
                  v16 = (WTF::StringImpl *)((char *)v16 + 2);
                  *(_BYTE *)v326 = v353;
                  v326 = (unsigned __int128 *)((char *)v326 + 1);
                }
              }
              v138 = *(unsigned int *)(v17 + 4);
            }
            else
            {
              v138 = 0;
            }
            v139 = &v136[v138];
            if ((_DWORD)a5)
            {
              if ((_DWORD)a5 == 1)
                *v139 = *(_BYTE *)v7;
              else
                memcpy(v139, v7, a5);
            }
            v140 = &v139[a5];
            v141 = v360;
            if (v360)
            {
              v16 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
              v142 = *((unsigned int *)v20 + 1);
              i = v364;
              if ((*((_BYTE *)v20 + 16) & 4) != 0)
              {
                if ((_DWORD)v142)
                {
                  if ((_DWORD)v142 == 1)
                    *v140 = *(_BYTE *)v16;
                  else
                    memcpy(v140, v16, v142);
                }
              }
              else
              {
                v329 = (unsigned __int128 *)&v140[v142];
                if (v142 < 0x10)
                {
                  v330 = (unsigned __int128 *)v140;
                }
                else
                {
                  v330 = (unsigned __int128 *)&v140[v142 & 0xFFFFFFF0];
                  v331 = (unsigned __int128 *)v140;
                  do
                  {
                    v332 = (unsigned __int128)vld2q_s8((const char *)v16);
                    v16 = (WTF::StringImpl *)((char *)v16 + 32);
                    *v331++ = v332;
                  }
                  while (v331 != v330);
                }
                for (i = v364; v330 != v329; v330 = (unsigned __int128 *)((char *)v330 + 1))
                {
                  v354 = *(_BYTE *)v16;
                  v16 = (WTF::StringImpl *)((char *)v16 + 2);
                  *(_BYTE *)v330 = v354;
                }
              }
              v141 = (WTF::StringImpl *)*((unsigned int *)v20 + 1);
            }
            else
            {
              i = v364;
            }
            v144 = (char *)v141 + (_QWORD)v140;
            if ((_DWORD)v22)
            {
              if ((_DWORD)v22 == 1)
              {
                *v144 = *(_BYTE *)v7;
                if (!i)
                  goto LABEL_424;
                goto LABEL_207;
              }
              memcpy(v144, v7, v22);
            }
            if (!i)
              goto LABEL_424;
LABEL_207:
            v145 = &v144[v22];
            v16 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
            v146 = *((unsigned int *)v19 + 1);
            if ((*((_BYTE *)v19 + 16) & 4) != 0)
            {
              if (!(_DWORD)v146)
                goto LABEL_424;
              if ((_DWORD)v146 == 1)
              {
                *v145 = *(_BYTE *)v16;
                goto LABEL_424;
              }
LABEL_210:
              memcpy(v145, v16, v146);
              goto LABEL_424;
            }
            v333 = &v145[v146];
            if (v146 >= 0x10)
            {
              v334 = &v145[v146 & 0xFFFFFFF0];
              do
              {
                v335 = (unsigned __int128)vld2q_s8((const char *)v16);
                v16 = (WTF::StringImpl *)((char *)v16 + 32);
                *(_OWORD *)v145 = v335;
                v145 += 16;
              }
              while (v145 != v334);
              v145 = v334;
            }
            while (v145 != v333)
            {
              v336 = *(_BYTE *)v16;
              v16 = (WTF::StringImpl *)((char *)v16 + 2);
              *v145++ = v336;
            }
LABEL_424:
            *v24 = v135;
            v311 = v374;
            v374 = 0;
            if (v311)
            {
              if (*(_DWORD *)v311 == 2)
                WTF::StringImpl::destroy(v311, v16);
              else
                *(_DWORD *)v311 -= 2;
            }
            v312 = v375;
            v375 = 0;
            if (v312)
            {
              if (*(_DWORD *)v312 == 2)
                WTF::StringImpl::destroy(v312, v16);
              else
                *(_DWORD *)v312 -= 2;
            }
            v79 = (WTF::StringImpl *)v376;
            v376 = 0;
            if (!v79)
              return;
            goto LABEL_431;
          }
LABEL_253:
          if (!v132)
            goto LABEL_254;
          goto LABEL_455;
        }
      }
      else if (!v374)
      {
        if (!v32)
          goto LABEL_455;
        v133 = 0;
        v134 = 0;
        v33 = v32;
        goto LABEL_186;
      }
      v33 = v32;
      v132 = v32 == 0;
      if ((*((_BYTE *)v374 + 16) & 4) != 0)
        goto LABEL_185;
      goto LABEL_253;
    case 4:
      WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, a2[2], a3, a4, (WebCore *)&v373, a6);
      WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], v34, v35, (WebCore *)&v372, v36);
      WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 4), a2[4], v37, v38, (WebCore *)&v371, v39);
      WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 6), a2[5], v40, v41, (WebCore *)&v370, v42);
      v44 = v372;
      v43 = v373;
      v45 = v370;
      v46 = v371;
      if (a5)
      {
        v47 = a5 - 1;
        if ((a5 - 1) >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x19581AAFCLL);
        }
        v48 = a5 - 1;
        if (v373)
        {
LABEL_30:
          v49 = *(_DWORD *)(v373 + 4);
          if (v372)
            goto LABEL_31;
          goto LABEL_540;
        }
      }
      else
      {
        v47 = 0;
        v48 = 0;
        if (v373)
          goto LABEL_30;
      }
      v49 = 0;
      if (v372)
      {
LABEL_31:
        v50 = *((_DWORD *)v372 + 1);
        if (v371)
        {
LABEL_32:
          v51 = *((_DWORD *)v371 + 1);
          goto LABEL_33;
        }
LABEL_541:
        v51 = 0;
LABEL_33:
        v362 = k;
        if (v370)
        {
          v52 = *(_DWORD *)(v370 + 4);
          if (v52 < 0)
            goto LABEL_526;
        }
        else
        {
          v52 = 0;
        }
        v26 = __OFADD__(v48, v52);
        v53 = v48 + v52;
        v54 = v26;
        if (v51 < 0)
          goto LABEL_526;
        if ((v54 & 1) != 0)
          goto LABEL_526;
        v26 = __OFADD__(v51, v53);
        v55 = v51 + v53;
        if (v26)
          goto LABEL_526;
        v26 = __OFADD__(v47, v55);
        v56 = v47 + v55;
        v57 = v26;
        if (v50 < 0
          || v57
          || (v26 = __OFADD__(v50, v56), v58 = v50 + v56, v26)
          || ((v26 = __OFADD__(v47, v58), v59 = v47 + v58, !v26) ? (v60 = 0) : (v60 = 1),
              v49 < 0 || (v60 & 1) != 0 || (v61 = v49 + v59, __OFADD__(v49, v59))))
        {
LABEL_526:
          *v362 = 0;
          __break(0xC471u);
          JUMPOUT(0x19581AA88);
        }
        if (v373 && (*(_BYTE *)(v373 + 16) & 4) == 0 || v372 && (*((_BYTE *)v372 + 16) & 4) == 0)
        {
          if (v61)
          {
            v62 = v61;
LABEL_59:
            if (v61 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * v62 + 20));
              v63 = v366;
              if (v366)
              {
                v64 = v366 + 5;
                *v366 = 2;
                v63[1] = v61;
                *((_QWORD *)v63 + 1) = v63 + 5;
                v63[4] = 0;
                if (v43)
                {
                  v16 = *(WTF::StringImpl **)(v43 + 8);
                  v65 = *(unsigned int *)(v43 + 4);
                  j = v362;
                  if ((*(_BYTE *)(v43 + 16) & 4) != 0)
                  {
                    v147 = (char *)&v64[v65];
                    if (v65 >= 0x40)
                    {
                      v148 = (char *)&v64[v65 & 0xFFFFFFC0];
                      v173 = 0uLL;
                      v174 = (char *)(v63 + 5);
                      do
                      {
                        v381.val[0] = *(int8x16_t *)v16;
                        v175 = *((int8x16_t *)v16 + 1);
                        v396.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
                        v176 = *((_OWORD *)v16 + 3);
                        v16 = (WTF::StringImpl *)((char *)v16 + 64);
                        v177 = v176;
                        v396.val[1] = 0uLL;
                        v411.val[0] = v175;
                        v381.val[1] = 0uLL;
                        v178 = v174;
                        vst2q_s8(v178, v381);
                        v178 += 32;
                        v411.val[1] = 0uLL;
                        vst2q_s8(v178, v411);
                        v179 = v174 + 64;
                        vst2q_s8(v179, v396);
                        v180 = v174 + 96;
                        vst2q_s8(v180, *(int8x16x2_t *)(&v173 - 1));
                        v174 += 128;
                      }
                      while (v174 != v148);
                    }
                    else
                    {
                      v148 = (char *)(v63 + 5);
                    }
                    while (v148 != v147)
                    {
                      v181 = *(unsigned __int8 *)v16;
                      v16 = (WTF::StringImpl *)((char *)v16 + 1);
                      *(_WORD *)v148 = v181;
                      v148 += 2;
                    }
                  }
                  else if ((_DWORD)v65 == 1)
                  {
                    *v64 = *(_WORD *)v16;
                  }
                  else if ((_DWORD)v65)
                  {
                    memcpy(v63 + 5, v16, 2 * v65);
                  }
                  v171 = *(unsigned int *)(v43 + 4);
                }
                else
                {
                  v171 = 0;
                  j = v362;
                }
                v182 = (char *)&v64[v171];
                v183 = &v182[2 * v48];
                v184 = v48 & 0xFFFFFFC0;
                if ((v48 & 0xFFFFFFC0) != 0)
                {
                  v186 = &v182[2 * v184];
                  v187 = 0uLL;
                  v185 = (int8x16_t *)v7;
                  do
                  {
                    v382.val[0] = *v185;
                    v188 = v185[1];
                    v397.val[0] = v185[2];
                    v189 = v185[3];
                    v185 += 4;
                    v190 = v189;
                    v397.val[1] = 0uLL;
                    v412.val[0] = v188;
                    v382.val[1] = 0uLL;
                    v191 = v182;
                    vst2q_s8(v191, v382);
                    v191 += 32;
                    v412.val[1] = 0uLL;
                    vst2q_s8(v191, v412);
                    v192 = v182 + 64;
                    vst2q_s8(v192, v397);
                    v193 = v182 + 96;
                    vst2q_s8(v193, *(int8x16x2_t *)(&v187 - 1));
                    v182 += 128;
                  }
                  while (v182 != v186);
                  v182 = v186;
                }
                else
                {
                  v185 = (int8x16_t *)v7;
                }
                while (v182 != v183)
                {
                  v194 = v185->u8[0];
                  v185 = (int8x16_t *)((char *)v185 + 1);
                  *(_WORD *)v182 = v194;
                  v182 += 2;
                }
                if (v44)
                {
                  v16 = (WTF::StringImpl *)*((_QWORD *)v44 + 1);
                  v195 = *((unsigned int *)v44 + 1);
                  if ((*((_BYTE *)v44 + 16) & 4) != 0)
                  {
                    v196 = &v183[2 * v195];
                    if (v195 >= 0x40)
                    {
                      v197 = &v183[2 * (v195 & 0xFFFFFFC0)];
                      v199 = 0uLL;
                      v200 = v183;
                      do
                      {
                        v383.val[0] = *(int8x16_t *)v16;
                        v201 = *((int8x16_t *)v16 + 1);
                        v398.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
                        v202 = *((_OWORD *)v16 + 3);
                        v16 = (WTF::StringImpl *)((char *)v16 + 64);
                        v203 = v202;
                        v398.val[1] = 0uLL;
                        v413.val[0] = v201;
                        v383.val[1] = 0uLL;
                        v204 = v200;
                        vst2q_s8(v204, v383);
                        v204 += 32;
                        v413.val[1] = 0uLL;
                        vst2q_s8(v204, v413);
                        v205 = v200 + 64;
                        vst2q_s8(v205, v398);
                        v206 = v200 + 96;
                        vst2q_s8(v206, *(int8x16x2_t *)(&v199 - 1));
                        v200 += 128;
                      }
                      while (v200 != v197);
                    }
                    else
                    {
                      v197 = v183;
                    }
                    while (v197 != v196)
                    {
                      v207 = *(unsigned __int8 *)v16;
                      v16 = (WTF::StringImpl *)((char *)v16 + 1);
                      *(_WORD *)v197 = v207;
                      v197 += 2;
                    }
                  }
                  else if ((_DWORD)v195 == 1)
                  {
                    *(_WORD *)v183 = *(_WORD *)v16;
                  }
                  else if ((_DWORD)v195)
                  {
                    memcpy(v183, v16, 2 * v195);
                  }
                  v198 = *((unsigned int *)v44 + 1);
                }
                else
                {
                  v198 = 0;
                }
                v208 = &v183[2 * v198];
                v209 = &v208[2 * v48];
                if ((v48 & 0xFFFFFFC0) != 0)
                {
                  v211 = &v208[2 * v184];
                  v212 = 0uLL;
                  v210 = (int8x16_t *)v7;
                  do
                  {
                    v384.val[0] = *v210;
                    v213 = v210[1];
                    v399.val[0] = v210[2];
                    v214 = v210[3];
                    v210 += 4;
                    v215 = v214;
                    v399.val[1] = 0uLL;
                    v414.val[0] = v213;
                    v384.val[1] = 0uLL;
                    v216 = v208;
                    vst2q_s8(v216, v384);
                    v216 += 32;
                    v414.val[1] = 0uLL;
                    vst2q_s8(v216, v414);
                    v217 = v208 + 64;
                    vst2q_s8(v217, v399);
                    v218 = v208 + 96;
                    vst2q_s8(v218, *(int8x16x2_t *)(&v212 - 1));
                    v208 += 128;
                  }
                  while (v208 != v211);
                  v208 = v211;
                }
                else
                {
                  v210 = (int8x16_t *)v7;
                }
                while (v208 != v209)
                {
                  v219 = v210->u8[0];
                  v210 = (int8x16_t *)((char *)v210 + 1);
                  *(_WORD *)v208 = v219;
                  v208 += 2;
                }
                if (v46)
                {
                  v16 = (WTF::StringImpl *)*((_QWORD *)v46 + 1);
                  v220 = *((unsigned int *)v46 + 1);
                  if ((*((_BYTE *)v46 + 16) & 4) != 0)
                  {
                    v221 = &v209[2 * v220];
                    if (v220 >= 0x40)
                    {
                      v222 = &v209[2 * (v220 & 0xFFFFFFC0)];
                      v224 = 0uLL;
                      v225 = v209;
                      do
                      {
                        v385.val[0] = *(int8x16_t *)v16;
                        v226 = *((int8x16_t *)v16 + 1);
                        v400.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
                        v227 = *((_OWORD *)v16 + 3);
                        v16 = (WTF::StringImpl *)((char *)v16 + 64);
                        v228 = v227;
                        v400.val[1] = 0uLL;
                        v415.val[0] = v226;
                        v385.val[1] = 0uLL;
                        v229 = v225;
                        vst2q_s8(v229, v385);
                        v229 += 32;
                        v415.val[1] = 0uLL;
                        vst2q_s8(v229, v415);
                        v230 = v225 + 64;
                        vst2q_s8(v230, v400);
                        v231 = v225 + 96;
                        vst2q_s8(v231, *(int8x16x2_t *)(&v224 - 1));
                        v225 += 128;
                      }
                      while (v225 != v222);
                    }
                    else
                    {
                      v222 = v209;
                    }
                    while (v222 != v221)
                    {
                      v232 = *(unsigned __int8 *)v16;
                      v16 = (WTF::StringImpl *)((char *)v16 + 1);
                      *(_WORD *)v222 = v232;
                      v222 += 2;
                    }
                  }
                  else if ((_DWORD)v220 == 1)
                  {
                    *(_WORD *)v209 = *(_WORD *)v16;
                  }
                  else if ((_DWORD)v220)
                  {
                    memcpy(v209, v16, 2 * v220);
                  }
                  v223 = *((unsigned int *)v46 + 1);
                }
                else
                {
                  v223 = 0;
                }
                v233 = &v209[2 * v223];
                v165 = &v233[2 * v48];
                if ((v48 & 0xFFFFFFC0) != 0)
                {
                  v234 = &v233[2 * v184];
                  v235 = 0uLL;
                  do
                  {
                    v386.val[0] = *(int8x16_t *)v7;
                    v236 = *((int8x16_t *)v7 + 1);
                    v401.val[0] = (int8x16_t)*((_OWORD *)v7 + 2);
                    v237 = *((_OWORD *)v7 + 3);
                    v7 = (WTF::String *)((char *)v7 + 64);
                    v238 = v237;
                    v401.val[1] = 0uLL;
                    v416.val[0] = v236;
                    v386.val[1] = 0uLL;
                    v239 = v233;
                    vst2q_s8(v239, v386);
                    v239 += 32;
                    v416.val[1] = 0uLL;
                    vst2q_s8(v239, v416);
                    v240 = v233 + 64;
                    vst2q_s8(v240, v401);
                    v241 = v233 + 96;
                    vst2q_s8(v241, *(int8x16x2_t *)(&v235 - 1));
                    v233 += 128;
                  }
                  while (v233 != v234);
                  v233 = v234;
                }
                while (v233 != v165)
                {
                  v242 = *(unsigned __int8 *)v7;
                  v7 = (WTF::String *)((char *)v7 + 1);
                  *(_WORD *)v233 = v242;
                  v233 += 2;
                }
                if (!v45)
                  goto LABEL_363;
                v16 = *(WTF::StringImpl **)(v45 + 8);
                v243 = *(unsigned int *)(v45 + 4);
                if ((*(_BYTE *)(v45 + 16) & 4) != 0)
                {
                  v244 = &v165[2 * v243];
                  if (v243 >= 0x40)
                  {
                    v245 = &v165[2 * (v243 & 0xFFFFFFC0)];
                    v246 = 0uLL;
                    do
                    {
                      v387.val[0] = *(int8x16_t *)v16;
                      v247 = *((int8x16_t *)v16 + 1);
                      v402.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
                      v248 = *((_OWORD *)v16 + 3);
                      v16 = (WTF::StringImpl *)((char *)v16 + 64);
                      v249 = v248;
                      v402.val[1] = 0uLL;
                      v417.val[0] = v247;
                      v387.val[1] = 0uLL;
                      v250 = v165;
                      vst2q_s8(v250, v387);
                      v250 += 32;
                      v417.val[1] = 0uLL;
                      vst2q_s8(v250, v417);
                      v251 = v165 + 64;
                      vst2q_s8(v251, v402);
                      v252 = v165 + 96;
                      vst2q_s8(v252, *(int8x16x2_t *)(&v246 - 1));
                      v165 += 128;
                    }
                    while (v165 != v245);
                    v165 = v245;
                  }
                  while (v165 != v244)
                  {
                    v253 = *(unsigned __int8 *)v16;
                    v16 = (WTF::StringImpl *)((char *)v16 + 1);
                    *(_WORD *)v165 = v253;
                    v165 += 2;
                  }
                  goto LABEL_363;
                }
                if ((_DWORD)v243 == 1)
                {
                  *(_WORD *)v165 = *(_WORD *)v16;
                  goto LABEL_363;
                }
                if (!(_DWORD)v243)
                  goto LABEL_363;
                v166 = 2 * v243;
                goto LABEL_251;
              }
            }
            goto LABEL_526;
          }
LABEL_264:
          v63 = (_DWORD *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          j = v362;
          goto LABEL_364;
        }
        if (v371)
        {
          v149 = *((_DWORD *)v371 + 4);
          if (!v370 || (v149 & 4) == 0)
          {
            v62 = v61;
            v150 = v61 == 0;
            if ((v149 & 4) != 0)
            {
LABEL_217:
              v151 = v371;
              v152 = v370;
              if (v150)
                goto LABEL_264;
              goto LABEL_218;
            }
LABEL_263:
            if (!v150)
              goto LABEL_59;
            goto LABEL_264;
          }
        }
        else if (!v370)
        {
          if (!v61)
            goto LABEL_264;
          v151 = 0;
          v152 = 0;
          v62 = v61;
LABEL_218:
          v359 = v151;
          v361 = v152;
          if ((v61 & 0x80000000) == 0)
          {
            WTF::tryFastCompactMalloc((WTF *)(v62 + 20));
            v63 = v366;
            if (v366)
            {
              v153 = v366 + 5;
              *v366 = 2;
              v63[1] = v61;
              *((_QWORD *)v63 + 1) = v63 + 5;
              v63[4] = 4;
              if (v43)
              {
                v16 = *(WTF::StringImpl **)(v43 + 8);
                v154 = *(unsigned int *)(v43 + 4);
                if ((*(_BYTE *)(v43 + 16) & 4) != 0)
                {
                  j = v362;
                  if ((_DWORD)v154)
                  {
                    if ((_DWORD)v154 == 1)
                      *v153 = *(_BYTE *)v16;
                    else
                      memcpy(v63 + 5, v16, v154);
                  }
                }
                else
                {
                  v337 = (unsigned __int128 *)&v153[v154];
                  if (v154 < 0x10)
                  {
                    v338 = (unsigned __int128 *)(v63 + 5);
                  }
                  else
                  {
                    v338 = (unsigned __int128 *)&v153[v154 & 0xFFFFFFF0];
                    v339 = (unsigned __int128 *)(v63 + 5);
                    do
                    {
                      v340 = (unsigned __int128)vld2q_s8((const char *)v16);
                      v16 = (WTF::StringImpl *)((char *)v16 + 32);
                      *v339++ = v340;
                    }
                    while (v339 != v338);
                  }
                  for (j = v362; v338 != v337; v338 = (unsigned __int128 *)((char *)v338 + 1))
                  {
                    v355 = *(_BYTE *)v16;
                    v16 = (WTF::StringImpl *)((char *)v16 + 2);
                    *(_BYTE *)v338 = v355;
                  }
                }
                v155 = *(unsigned int *)(v43 + 4);
              }
              else
              {
                v155 = 0;
                j = v362;
              }
              v156 = &v153[v155];
              if (v47)
              {
                if (v47 == 1)
                  *v156 = *(_BYTE *)v7;
                else
                  memcpy(&v153[v155], v7, v48);
              }
              v157 = &v156[v48];
              if (v44)
              {
                v16 = (WTF::StringImpl *)*((_QWORD *)v44 + 1);
                v158 = *((unsigned int *)v44 + 1);
                if ((*((_BYTE *)v44 + 16) & 4) != 0)
                {
                  if ((_DWORD)v158)
                  {
                    if ((_DWORD)v158 == 1)
                      *v157 = *(_BYTE *)v16;
                    else
                      memcpy(v157, v16, v158);
                  }
                }
                else
                {
                  v341 = (unsigned __int128 *)&v157[v158];
                  if (v158 < 0x10)
                  {
                    v342 = (unsigned __int128 *)v157;
                  }
                  else
                  {
                    v342 = (unsigned __int128 *)&v157[v158 & 0xFFFFFFF0];
                    v343 = (unsigned __int128 *)v157;
                    do
                    {
                      v344 = (unsigned __int128)vld2q_s8((const char *)v16);
                      v16 = (WTF::StringImpl *)((char *)v16 + 32);
                      *v343++ = v344;
                    }
                    while (v343 != v342);
                  }
                  for (j = v362; v342 != v341; v342 = (unsigned __int128 *)((char *)v342 + 1))
                  {
                    v356 = *(_BYTE *)v16;
                    v16 = (WTF::StringImpl *)((char *)v16 + 2);
                    *(_BYTE *)v342 = v356;
                  }
                }
                v159 = *((unsigned int *)v44 + 1);
              }
              else
              {
                v159 = 0;
              }
              v160 = &v157[v159];
              if (v47)
              {
                if (v47 == 1)
                  *v160 = *(_BYTE *)v7;
                else
                  memcpy(v160, v7, v48);
              }
              v161 = &v160[v48];
              v162 = v359;
              if (v359)
              {
                v16 = (WTF::StringImpl *)*((_QWORD *)v46 + 1);
                v163 = *((unsigned int *)v46 + 1);
                if ((*((_BYTE *)v46 + 16) & 4) != 0)
                {
                  if ((_DWORD)v163)
                  {
                    if ((_DWORD)v163 == 1)
                      *v161 = *(_BYTE *)v16;
                    else
                      memcpy(v161, v16, v163);
                  }
                }
                else
                {
                  v345 = (unsigned __int128 *)&v161[v163];
                  if (v163 < 0x10)
                  {
                    v346 = (unsigned __int128 *)v161;
                  }
                  else
                  {
                    v346 = (unsigned __int128 *)&v161[v163 & 0xFFFFFFF0];
                    v347 = (unsigned __int128 *)v161;
                    do
                    {
                      v348 = (unsigned __int128)vld2q_s8((const char *)v16);
                      v16 = (WTF::StringImpl *)((char *)v16 + 32);
                      *v347++ = v348;
                    }
                    while (v347 != v346);
                  }
                  for (j = v362; v346 != v345; v346 = (unsigned __int128 *)((char *)v346 + 1))
                  {
                    v357 = *(_BYTE *)v16;
                    v16 = (WTF::StringImpl *)((char *)v16 + 2);
                    *(_BYTE *)v346 = v357;
                  }
                }
                v162 = (WTF::StringImpl *)*((unsigned int *)v46 + 1);
              }
              v164 = (char *)v162 + (_QWORD)v161;
              if (v48)
              {
                if (v48 == 1)
                  *v164 = *(_BYTE *)v7;
                else
                  memcpy(v164, v7, v48);
              }
              if (!v361)
                goto LABEL_363;
              v165 = &v164[v48];
              v16 = *(WTF::StringImpl **)(v45 + 8);
              v166 = *(unsigned int *)(v45 + 4);
              if ((*(_BYTE *)(v45 + 16) & 4) == 0)
              {
                v349 = &v165[v166];
                if (v166 >= 0x10)
                {
                  v350 = &v165[v166 & 0xFFFFFFF0];
                  do
                  {
                    v351 = (unsigned __int128)vld2q_s8((const char *)v16);
                    v16 = (WTF::StringImpl *)((char *)v16 + 32);
                    *(_OWORD *)v165 = v351;
                    v165 += 16;
                  }
                  while (v165 != v350);
                  v165 = v350;
                }
                while (v165 != v349)
                {
                  v352 = *(_BYTE *)v16;
                  v16 = (WTF::StringImpl *)((char *)v16 + 2);
                  *v165++ = v352;
                }
                j = v362;
                goto LABEL_363;
              }
              if (!(_DWORD)v166)
              {
LABEL_363:
                v45 = v370;
LABEL_364:
                *j = v63;
                v370 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v45, v16);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v254 = v371;
                v371 = 0;
                if (v254)
                {
                  if (*(_DWORD *)v254 == 2)
                    WTF::StringImpl::destroy(v254, v16);
                  else
                    *(_DWORD *)v254 -= 2;
                }
                v255 = v372;
                v372 = 0;
                if (v255)
                {
                  if (*(_DWORD *)v255 == 2)
                    WTF::StringImpl::destroy(v255, v16);
                  else
                    *(_DWORD *)v255 -= 2;
                }
                v79 = (WTF::StringImpl *)v373;
                v373 = 0;
                if (!v79)
                  return;
LABEL_431:
                if (*(_DWORD *)v79 == 2)
                  WTF::StringImpl::destroy(v79, v16);
                else
                  *(_DWORD *)v79 -= 2;
                return;
              }
              if ((_DWORD)v166 == 1)
              {
                *v165 = *(_BYTE *)v16;
                goto LABEL_363;
              }
LABEL_251:
              memcpy(v165, v16, v166);
              goto LABEL_363;
            }
          }
          goto LABEL_526;
        }
        v62 = v61;
        v150 = v61 == 0;
        if ((*(_BYTE *)(v370 + 16) & 4) != 0)
          goto LABEL_217;
        goto LABEL_263;
      }
LABEL_540:
      v50 = 0;
      if (v371)
        goto LABEL_32;
      goto LABEL_541;
    default:
      v80 = a3;
      v366 = 0;
      v367 = 0;
      v368 = 0;
      v369 = 1;
      if (!(_DWORD)a3)
        goto LABEL_174;
      WebCore::serializeLonghandValue(*(unsigned __int16 *)*a2, a2[2], a3, a4, (WebCore *)&v365, a6);
      v81 = v365;
      if (v365)
        v82 = *((_DWORD *)v365 + 1);
      else
        v82 = 0;
      if (__CFADD__(v82, v368))
        v83 = 0xFFFFFFFFLL;
      else
        v83 = (v82 + v368);
      v84 = v367;
      if ((v367 || (v84 = (WTF::StringImpl *)v366) != 0) && (*((_BYTE *)v84 + 16) & 4) == 0)
        goto LABEL_439;
      if (v365)
      {
        if ((*((_BYTE *)v365 + 16) & 4) != 0)
        {
          v85 = (char *)MEMORY[0x19AEA4824](&v366, v83);
          if (!v85)
            goto LABEL_102;
          v86 = (int8x16_t *)*((_QWORD *)v81 + 1);
          v87 = *((unsigned int *)v81 + 1);
          if ((*((_BYTE *)v81 + 16) & 4) != 0)
          {
            if (!(_DWORD)v87)
              goto LABEL_102;
            if ((_DWORD)v87 != 1)
              goto LABEL_101;
            *v85 = v86->i8[0];
          }
          else
          {
            v323 = &v85[v87];
            if (v87 >= 0x10)
            {
              v324 = &v85[v87 & 0xFFFFFFF0];
              do
              {
                v89 = (unsigned __int128)vld2q_s8(v86->i8);
                v86 += 2;
                *(_OWORD *)v85 = v89;
                v85 += 16;
              }
              while (v85 != v324);
              v85 = v324;
            }
            while (v85 != v323)
            {
              v325 = v86->i8[0];
              v86 = (int8x16_t *)((char *)v86 + 2);
              *v85++ = v325;
            }
          }
        }
        else
        {
LABEL_439:
          v85 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v366);
          if (v81 && v85)
          {
            v86 = (int8x16_t *)*((_QWORD *)v81 + 1);
            v313 = *((unsigned int *)v81 + 1);
            if ((*((_BYTE *)v81 + 16) & 4) != 0)
            {
              v314 = &v85[2 * v313];
              if (v313 >= 0x40)
              {
                v315 = &v85[2 * (v313 & 0xFFFFFFC0)];
                v316 = 0uLL;
                do
                {
                  v393.val[0] = *v86;
                  v317 = v86[1];
                  v408.val[0] = v86[2];
                  v318 = (unsigned __int128)v86[3];
                  v86 += 4;
                  v89 = v318;
                  v408.val[1] = 0uLL;
                  v423.val[0] = v317;
                  v393.val[1] = 0uLL;
                  v319 = v85;
                  vst2q_s8(v319, v393);
                  v319 += 32;
                  v423.val[1] = 0uLL;
                  vst2q_s8(v319, v423);
                  v320 = v85 + 64;
                  vst2q_s8(v320, v408);
                  v321 = v85 + 96;
                  vst2q_s8(v321, *(int8x16x2_t *)&v89);
                  v85 += 128;
                }
                while (v85 != v315);
                v85 = v315;
              }
              while (v85 != v314)
              {
                v322 = v86->u8[0];
                v86 = (int8x16_t *)((char *)v86 + 1);
                *(_WORD *)v85 = v322;
                v85 += 2;
              }
            }
            else if ((_DWORD)v313 == 1)
            {
              *(_WORD *)v85 = v86->i16[0];
            }
            else if ((_DWORD)v313)
            {
              v87 = 2 * v313;
LABEL_101:
              memcpy(v85, v86, v87);
            }
          }
        }
      }
      else
      {
        MEMORY[0x19AEA4824](&v366, v83);
      }
LABEL_102:
      k = a1;
      v90 = v365;
      v365 = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
          WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v86);
        else
          *(_DWORD *)v90 -= 2;
      }
      if (a5)
        v91 = a5 - 1;
      else
        v91 = 0;
      if (a5 > 0x80000000)
      {
        WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2), a2[3], (WTF::StringBuilder *)v87, v88, (WebCore *)&v365, (__n128)v89);
        __break(0xC471u);
        JUMPOUT(0x19581AB5CLL);
      }
      v92 = 1;
      v93 = v80;
      break;
  }
  do
  {
    WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2 * v92), a2[v92 + 2], (WTF::StringBuilder *)v87, v88, (WebCore *)&v365, (__n128)v89);
    v94 = v365;
    if (v365)
      v95 = *((_DWORD *)v365 + 1);
    else
      v95 = 0;
    v96 = __CFADD__(v95, v91);
    v97 = v95 + v91;
    if (v96)
      v97 = -1;
    v96 = __CFADD__(v97, v368);
    v98 = v97 + v368;
    if (v96)
      v99 = 0xFFFFFFFFLL;
    else
      v99 = v98;
    v100 = v367;
    if ((!v367 && (v100 = (WTF::StringImpl *)v366) == 0 || (*((_BYTE *)v100 + 16) & 4) != 0)
      && (!v365 || (*((_BYTE *)v365 + 16) & 4) != 0))
    {
      v101 = (_BYTE *)MEMORY[0x19AEA4824](&v366, v99);
      if (!v101)
        goto LABEL_132;
      v102 = v101;
      if (v91)
      {
        if (v91 == 1)
        {
          *v101 = *(_BYTE *)v7;
          if (!v94)
            goto LABEL_132;
          goto LABEL_128;
        }
        memcpy(v101, v7, v91);
      }
      if (!v94)
        goto LABEL_132;
LABEL_128:
      v103 = &v102[v91];
      v16 = (WTF::StringImpl *)*((_QWORD *)v94 + 1);
      v87 = *((unsigned int *)v94 + 1);
      if ((*((_BYTE *)v94 + 16) & 4) != 0)
      {
        if (!(_DWORD)v87)
          goto LABEL_132;
        if ((_DWORD)v87 != 1)
          goto LABEL_131;
        *v103 = *(_BYTE *)v16;
      }
      else
      {
        if (v87 < 0x10)
        {
          v113 = (unsigned __int128 *)&v102[v91];
        }
        else
        {
          v113 = (unsigned __int128 *)&v103[v87 & 0xFFFFFFF0];
          v114 = (unsigned __int128 *)&v102[v91];
          do
          {
            v89 = (unsigned __int128)vld2q_s8((const char *)v16);
            v16 = (WTF::StringImpl *)((char *)v16 + 32);
            *v114++ = v89;
          }
          while (v114 != v113);
        }
        for (k = a1; v113 != (unsigned __int128 *)&v103[v87]; v113 = (unsigned __int128 *)((char *)v113 + 1))
        {
          v115 = *(_BYTE *)v16;
          v16 = (WTF::StringImpl *)((char *)v16 + 2);
          *(_BYTE *)v113 = v115;
        }
      }
      goto LABEL_132;
    }
    v105 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v366);
    if (v105)
    {
      if ((v91 & 0xFFFFFFC0) != 0)
      {
        v107 = (char *)(v105 + 2 * (v91 & 0xFFFFFFC0));
        v106 = v7;
        v116 = (char *)v105;
        do
        {
          v89 = *(_OWORD *)v106;
          v117 = *((int8x16_t *)v106 + 1);
          v379.val[0] = (int8x16_t)*((_OWORD *)v106 + 2);
          v118 = *((int8x16_t *)v106 + 3);
          v106 = (WTF::String *)((char *)v106 + 64);
          v409.val[1] = 0u;
          v409.val[0] = v118;
          v379.val[1] = 0u;
          v394.val[0] = v117;
          v119 = 0u;
          v120 = v116;
          vst2q_s8(v120, *(int8x16x2_t *)&v89);
          v120 += 32;
          v394.val[1] = 0u;
          vst2q_s8(v120, v394);
          v121 = v116 + 64;
          vst2q_s8(v121, v379);
          v122 = v116 + 96;
          vst2q_s8(v122, v409);
          v116 += 128;
        }
        while (v116 != v107);
        k = a1;
      }
      else
      {
        v106 = v7;
        v107 = (char *)v105;
      }
      v103 = (char *)(v105 + 2 * v91);
      while (v107 != v103)
      {
        v108 = *(unsigned __int8 *)v106;
        v106 = (WTF::String *)((char *)v106 + 1);
        *(_WORD *)v107 = v108;
        v107 += 2;
      }
      if (v94)
      {
        v16 = (WTF::StringImpl *)*((_QWORD *)v94 + 1);
        v109 = *((unsigned int *)v94 + 1);
        if ((*((_BYTE *)v94 + 16) & 4) != 0)
        {
          if (v109 >= 0x40)
          {
            v110 = &v103[2 * (v109 & 0xFFFFFFC0)];
            v123 = v103;
            do
            {
              v89 = *(_OWORD *)v16;
              v124 = *((int8x16_t *)v16 + 1);
              v380.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
              v125 = *((int8x16_t *)v16 + 3);
              v16 = (WTF::StringImpl *)((char *)v16 + 64);
              v395.val[0] = v125;
              v380.val[1] = 0u;
              v410.val[0] = v124;
              v126 = 0u;
              v127 = v123;
              vst2q_s8(v127, *(int8x16x2_t *)&v89);
              v127 += 32;
              v395.val[1] = 0u;
              v410.val[1] = 0u;
              vst2q_s8(v127, v410);
              v128 = v123 + 64;
              vst2q_s8(v128, v380);
              v129 = v123 + 96;
              v123 += 128;
              vst2q_s8(v129, v395);
            }
            while (v123 != v110);
            k = a1;
          }
          else
          {
            v110 = v103;
          }
          v111 = &v103[2 * v109];
          while (v110 != v111)
          {
            v112 = *(unsigned __int8 *)v16;
            v16 = (WTF::StringImpl *)((char *)v16 + 1);
            *(_WORD *)v110 = v112;
            v110 += 2;
          }
        }
        else if ((_DWORD)v109 == 1)
        {
          *(_WORD *)v103 = *(_WORD *)v16;
        }
        else if ((_DWORD)v109)
        {
          v87 = 2 * v109;
LABEL_131:
          memcpy(v103, v16, v87);
        }
      }
    }
LABEL_132:
    v104 = v365;
    v365 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, v16);
      else
        *(_DWORD *)v104 -= 2;
    }
    ++v92;
  }
  while (v92 != v93);
  v79 = (WTF::StringImpl *)v366;
  if (v366)
    goto LABEL_175;
LABEL_174:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v366);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v366);
  v79 = (WTF::StringImpl *)v366;
  if (v366)
LABEL_175:
    *(_DWORD *)v79 += 2;
  *k = v79;
  v130 = v367;
  v367 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::destroy(v130, v16);
      v79 = (WTF::StringImpl *)v366;
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v366 = 0;
  if (v79)
    goto LABEL_431;
}

uint64_t WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>(WTF::StringBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (!a3)
  {
    v4 = 0;
    v7 = a2;
LABEL_3:
    v8 = v4;
    v6 = a4;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, (uint64_t)&v7, &v6);
  }
  v4 = a3 - 1;
  v7 = a2;
  if (!((unint64_t)(a3 - 1) >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

void WebCore::ShorthandSerializer::serializeCommonValue(WebCore::ShorthandSerializer *this, _QWORD *a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  unsigned int v6;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;

  if ((_DWORD)a4)
  {
    v6 = a3;
    v8 = 0;
    v9 = a4;
    while (1)
    {
      WebCore::serializeLonghandValue(*(unsigned __int16 *)(*a2 + 2 * v6), a2[v6 + 2], a3, a4, (WebCore *)&v16, a5);
      v11 = v16;
      if (v8)
      {
        v12 = WTF::equal(v8, v16, a3);
        v13 = v16;
        if ((v12 & 1) == 0)
        {
          *(_QWORD *)this = 0;
          v16 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v10);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v10);
          else
            *(_DWORD *)v8 -= 2;
          return;
        }
        v16 = 0;
        if (v13)
        {
          v14 = *(_DWORD *)v13;
          v11 = v8;
          goto LABEL_9;
        }
        v11 = v8;
      }
      else if (v16)
      {
        v14 = *(_DWORD *)v16 + 2;
        *(_DWORD *)v16 = v14;
        v16 = 0;
        v13 = v11;
LABEL_9:
        v15 = v14 - 2;
        if (v15)
          *(_DWORD *)v13 = v15;
        else
          WTF::StringImpl::destroy(v13, v10);
      }
      ++v6;
      v8 = v11;
      if (!--v9)
        goto LABEL_16;
    }
  }
  v11 = 0;
LABEL_16:
  *(_QWORD *)this = v11;
}

WTF::StringImpl *WebCore::LayerValues::serialize(WebCore::LayerValues *this, WTF::StringBuilder *a2)
{
  WTF::StringImpl *v4;
  _QWORD *v5;
  size_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringBuilder *v9;
  WTF::String *v10;
  __n128 v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  int8x16_t *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int8x16_t *v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (WebCore::LayerValues *)((char *)this + 8);
  v5 = *(_QWORD **)this;
  v6 = *(unsigned int *)(*(_QWORD *)this + 8);
  v7 = (WebCore::LayerValues *)((char *)this + v6 + 8);
  result = (WTF::StringImpl *)memchr((char *)this + 8, 0, v6);
  if (result)
    v12 = result;
  else
    v12 = v7;
  if ((_DWORD)v6)
  {
    v13 = 0;
    v14 = v12 - v4;
    if (*((_DWORD *)a2 + 4))
      v15 = 3;
    else
      v15 = 1;
    if (*((_DWORD *)a2 + 4))
      v16 = (int8x16_t *)", ";
    else
      v16 = (int8x16_t *)"";
    do
    {
      if (v14 == v6)
      {
        if (!(_DWORD)v13)
          goto LABEL_15;
      }
      else if (!*((_BYTE *)this + v13 + 8))
      {
LABEL_15:
        v17 = *(unsigned __int16 *)(*v5 + 2 * v13);
        if (v17 == 170 || v17 == 66)
        {
          v16 = (int8x16_t *)" / ";
          v15 = 4;
        }
        v18 = *((_QWORD *)this + v13 + 4);
        if (v18)
        {
          WebCore::serializeLonghandValue(*(unsigned __int16 *)(*v5 + 2 * v13), v18, v9, v10, (WebCore *)&v23, v11);
          v26 = v16;
          v27 = v15 - 1;
          v24 = (int8x16_t *)v23;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a2, (uint64_t)&v26, (uint64_t *)&v24);
          result = v23;
          v23 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
            else
              *(_DWORD *)result -= 2;
          }
        }
        else
        {
          WebCore::initialValueForLonghand((uint64_t)&v26, *(unsigned __int16 *)(*v5 + 2 * v13));
          if (v28 == -1)
            std::__throw_bad_variant_access[abi:sn180100]();
          v24 = (int8x16_t *)&v23;
          v20 = (int8x16_t *)((uint64_t (*)(int8x16_t **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore27initialValueTextForLonghandENS8_13CSSPropertyIDEE3__0JZNS8_27initialValueTextForLonghandES9_E3__1EEEEEJNS0_6__implIJNS8_10CSSValueIDENS8_19InitialNumericValueEEEEEEEDcOT_DpOT0____fmatrix[v28])(&v24, &v26);
          v26 = v16;
          v27 = v15 - 1;
          if (v21)
          {
            v22 = v21 - 1;
            v24 = v20;
            if ((unint64_t)(v21 - 1) >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x19581AF1CLL);
            }
          }
          else
          {
            v22 = 0;
            v24 = v20;
          }
          v25 = v22;
          result = (WTF::StringImpl *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a2, &v26, &v24);
        }
        v16 = (int8x16_t *)" ";
        v15 = 2;
      }
      ++v13;
      v5 = *(_QWORD **)this;
    }
    while (v13 < *(unsigned int *)(*(_QWORD *)this + 8));
  }
  return result;
}

WTF::StringImpl *WebCore::ShorthandSerializer::serializeBorderRadius(void)const::$_0::operator()<WTF::RefPtr<WebCore::CSSValue const,WTF::RawPtrTraits<WebCore::CSSValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSValue const>>>(uint64_t a1, uint64_t *a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  char v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  WTF::StringBuilder *v34;
  WTF::StringBuilder *v35;
  WTF::String *v36;
  __n128 v37;
  WTF::StringBuilder *v38;
  WTF::String *v39;
  __n128 v40;
  WTF::StringBuilder *v41;
  WTF::String *v42;
  __n128 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  size_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  size_t v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  char *v72;
  char *v73;
  char *v74;
  __int16 v75;
  char *v76;
  WTF::StringImpl *v77;
  unsigned __int128 *v78;
  unsigned __int128 *v79;
  unsigned __int128 v80;
  unsigned __int128 *v81;
  unsigned __int128 *v82;
  unsigned __int128 v83;
  uint64_t v84;
  int v85;
  int v86;
  char v87;
  char v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  WTF::StringBuilder *v95;
  WTF::StringBuilder *v96;
  WTF::String *v97;
  __n128 v98;
  WTF::StringBuilder *v99;
  WTF::String *v100;
  __n128 v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  char *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *result;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  size_t v113;
  uint64_t v114;
  unsigned __int128 *v115;
  unsigned __int128 *v116;
  unsigned __int128 v117;
  char v118;
  int v119;
  int v120;
  WTF::StringBuilder *v121;
  WTF::String *v122;
  __n128 v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  char v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = a2[3];
  v9 = a2[1];
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  if (((v11 ^ v10) & 0x3F800) != 0)
  {
    if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_33:
      v29 = v8;
      while (*(_DWORD *)(v29 + 8) == 1)
      {
        v29 = *(_QWORD *)(v29 + 16);
        v30 = *(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16);
        if (((v30 ^ v11) & 0x3F800) == 0)
        {
          v133 = (WTF::StringImpl *)v9;
          goto LABEL_129;
        }
        if ((v30 & 0x3F800) != 0x1D800)
        {
          v31 = v11 & 0x3F800;
          v11 = *(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16);
          v8 = v9;
          v9 = v29;
          if (v31 == 120832)
            goto LABEL_33;
          break;
        }
      }
    }
    else if ((v11 & 0x3F800) == 0x1D800)
    {
LABEL_40:
      v29 = v9;
      while (*(_DWORD *)(v29 + 8) == 1)
      {
        v29 = *(_QWORD *)(v29 + 16);
        v32 = *(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16);
        if (((v32 ^ v10) & 0x3F800) == 0)
        {
          v133 = (WTF::StringImpl *)v8;
LABEL_129:
          v134 = (WTF::StringImpl *)&v133;
          v8 = v29;
          goto LABEL_3;
        }
        if ((v32 & 0x3F800) != 0x1D800)
        {
          v33 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16);
          v9 = v8;
          v8 = v29;
          if (v33 == 120832)
            goto LABEL_40;
          break;
        }
      }
    }
LABEL_45:
    v34 = *(WTF::StringBuilder **)a1;
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v134, *a2, a3, a4, a5);
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v133, a2[1], v35, v36, v37);
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v131, a2[2], v38, v39, v40);
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v130, a2[3], v41, v42, v43);
    v44 = v133;
    v45 = v134;
    v46 = v131;
    v47 = v130;
    v48 = *((_QWORD *)v34 + 1);
    if (!v48 && (v48 = *(_QWORD *)v34) == 0 || (*(_BYTE *)(v48 + 16) & 4) != 0)
    {
      if (v134 && (*((_BYTE *)v134 + 16) & 4) == 0)
      {
        v52 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v34);
        if (!v52)
          goto LABEL_89;
        v50 = (char *)v52;
        goto LABEL_55;
      }
      if ((!v133 || (*((_BYTE *)v133 + 16) & 4) != 0)
        && (!v131 || (*((_BYTE *)v131 + 16) & 4) != 0)
        && (!v130 || (*((_BYTE *)v130 + 16) & 4) != 0))
      {
        v57 = (_BYTE *)MEMORY[0x19AEA4824](v34);
        if (v57)
        {
          v58 = v57;
          if (v45)
          {
            v59 = (_BYTE *)*((_QWORD *)v45 + 1);
            v60 = *((unsigned int *)v45 + 1);
            if ((*((_BYTE *)v45 + 16) & 4) != 0)
            {
              if ((_DWORD)v60)
              {
                if ((_DWORD)v60 == 1)
                  *v57 = *v59;
                else
                  memcpy(v57, v59, v60);
              }
            }
            else
            {
              if (v60 < 0x10)
              {
                v78 = (unsigned __int128 *)v57;
              }
              else
              {
                v78 = (unsigned __int128 *)&v57[v60 & 0xFFFFFFF0];
                v79 = (unsigned __int128 *)v57;
                do
                {
                  v80 = (unsigned __int128)vld2q_s8(v59);
                  v59 += 32;
                  *v79++ = v80;
                }
                while (v79 != v78);
              }
              while (v78 != (unsigned __int128 *)&v57[v60])
              {
                v87 = *v59;
                v59 += 2;
                *(_BYTE *)v78 = v87;
                v78 = (unsigned __int128 *)((char *)v78 + 1);
              }
            }
            v61 = *((unsigned int *)v45 + 1);
          }
          else
          {
            v61 = 0;
          }
          v62 = &v58[v61];
          *v62 = 32;
          v63 = v62 + 1;
          if (v44)
          {
            v64 = (_BYTE *)*((_QWORD *)v44 + 1);
            v65 = *((unsigned int *)v44 + 1);
            if ((*((_BYTE *)v44 + 16) & 4) != 0)
            {
              if ((_DWORD)v65)
              {
                if ((_DWORD)v65 == 1)
                  *v63 = *v64;
                else
                  memcpy(v63, v64, v65);
              }
            }
            else
            {
              if (v65 < 0x10)
              {
                v81 = (unsigned __int128 *)v63;
              }
              else
              {
                v81 = (unsigned __int128 *)&v63[v65 & 0xFFFFFFF0];
                v82 = (unsigned __int128 *)v63;
                do
                {
                  v83 = (unsigned __int128)vld2q_s8(v64);
                  v64 += 32;
                  *v82++ = v83;
                }
                while (v82 != v81);
              }
              while (v81 != (unsigned __int128 *)&v63[v65])
              {
                v88 = *v64;
                v64 += 2;
                *(_BYTE *)v81 = v88;
                v81 = (unsigned __int128 *)((char *)v81 + 1);
              }
            }
            v66 = *((unsigned int *)v44 + 1);
          }
          else
          {
            v66 = 0;
          }
          v63[v66] = 32;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v63[v66 + 1], (uint64_t)v46, 32, (uint64_t)v47);
        }
        goto LABEL_89;
      }
    }
    v49 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v34);
    if (!v49)
      goto LABEL_89;
    v50 = (char *)v49;
    if (!v45)
    {
      v51 = 0;
LABEL_88:
      v76 = &v50[2 * v51];
      *(_WORD *)v76 = 32;
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v76 + 2, (uint64_t)v44, 32, (uint64_t)v46, 32, (uint64_t)v47);
LABEL_89:
      v77 = v130;
      v130 = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v26);
        else
          *(_DWORD *)v77 -= 2;
      }
      goto LABEL_150;
    }
LABEL_55:
    v53 = (int8x16_t *)*((_QWORD *)v45 + 1);
    v54 = *((unsigned int *)v45 + 1);
    if ((*((_BYTE *)v45 + 16) & 4) != 0)
    {
      v55 = &v50[2 * v54];
      if (v54 >= 0x40)
      {
        v56 = &v50[2 * (v54 & 0xFFFFFFC0)];
        v67 = 0uLL;
        v68 = v50;
        do
        {
          v135.val[0] = *v53;
          v69 = v53[1];
          v136.val[0] = v53[2];
          v70 = v53[3];
          v53 += 4;
          v71 = v70;
          v136.val[1] = 0uLL;
          v137.val[0] = v69;
          v135.val[1] = 0uLL;
          v72 = v68;
          vst2q_s8(v72, v135);
          v72 += 32;
          v137.val[1] = 0uLL;
          vst2q_s8(v72, v137);
          v73 = v68 + 64;
          vst2q_s8(v73, v136);
          v74 = v68 + 96;
          vst2q_s8(v74, *(int8x16x2_t *)(&v67 - 1));
          v68 += 128;
        }
        while (v68 != v56);
      }
      else
      {
        v56 = v50;
      }
      while (v56 != v55)
      {
        v75 = v53->u8[0];
        v53 = (int8x16_t *)((char *)v53 + 1);
        *(_WORD *)v56 = v75;
        v56 += 2;
      }
    }
    else if ((_DWORD)v54 == 1)
    {
      *(_WORD *)v50 = v53->i16[0];
    }
    else if ((_DWORD)v54)
    {
      memcpy(v50, v53, 2 * v54);
    }
    v51 = *((unsigned int *)v45 + 1);
    goto LABEL_88;
  }
  v133 = (WTF::StringImpl *)a2[1];
  v134 = (WTF::StringImpl *)&v133;
LABEL_3:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v8, (const WebCore::CSSLinearGradientValue ***)&v134, a3) & 1) == 0)goto LABEL_45;
  v12 = a2[2];
  v13 = (WTF::StringImpl *)*a2;
  v14 = *(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16);
  v15 = *(unsigned __int16 *)(*a2 + 4) | (*(unsigned __int8 *)(*a2 + 6) << 16);
  if (((v15 ^ v14) & 0x3F800) != 0)
  {
    if ((v14 & 0x3F800) == 0x1D800)
    {
LABEL_106:
      v84 = v12;
      while (*(_DWORD *)(v84 + 8) == 1)
      {
        v84 = *(_QWORD *)(v84 + 16);
        v85 = *(unsigned __int16 *)(v84 + 4) | (*(unsigned __int8 *)(v84 + 6) << 16);
        if (((v85 ^ v15) & 0x3F800) == 0)
        {
          v133 = v13;
          v134 = (WTF::StringImpl *)&v133;
          v12 = v84;
          goto LABEL_6;
        }
        if ((v85 & 0x3F800) != 0x1D800)
        {
          v86 = v15 & 0x3F800;
          v15 = *(unsigned __int16 *)(v84 + 4) | (*(unsigned __int8 *)(v84 + 6) << 16);
          v12 = (uint64_t)v13;
          v13 = (WTF::StringImpl *)v84;
          if (v86 == 120832)
            goto LABEL_106;
          goto LABEL_139;
        }
      }
    }
    else if ((v15 & 0x3F800) == 0x1D800)
    {
LABEL_122:
      v89 = (uint64_t)v13;
      while (*(_DWORD *)(v89 + 8) == 1)
      {
        v89 = *(_QWORD *)(v89 + 16);
        v90 = *(unsigned __int16 *)(v89 + 4) | (*(unsigned __int8 *)(v89 + 6) << 16);
        if (((v90 ^ v14) & 0x3F800) == 0)
        {
          v133 = (WTF::StringImpl *)v12;
          v134 = (WTF::StringImpl *)&v133;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v89, (const WebCore::CSSLinearGradientValue ***)&v134, a3))goto LABEL_7;
          goto LABEL_139;
        }
        if ((v90 & 0x3F800) != 0x1D800)
        {
          v91 = v14 & 0x3F800;
          v14 = *(unsigned __int16 *)(v89 + 4) | (*(unsigned __int8 *)(v89 + 6) << 16);
          v13 = (WTF::StringImpl *)v12;
          v12 = v89;
          if (v91 == 120832)
            goto LABEL_122;
          goto LABEL_139;
        }
      }
    }
    goto LABEL_139;
  }
  v133 = (WTF::StringImpl *)*a2;
  v134 = (WTF::StringImpl *)&v133;
LABEL_6:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, (const WebCore::CSSLinearGradientValue ***)&v134, a3) & 1) == 0)goto LABEL_139;
LABEL_7:
  if (*(_WORD *)(v7 + 12) != 543 || **(_BYTE **)(a1 + 16))
    goto LABEL_12;
  v17 = (WTF::StringImpl *)*a2;
  v16 = a2[1];
  v18 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
  v19 = *(unsigned __int16 *)(*a2 + 4) | (*(unsigned __int8 *)(*a2 + 6) << 16);
  if (((v19 ^ v18) & 0x3F800) != 0)
  {
    if ((v18 & 0x3F800) == 0x1D800)
    {
LABEL_198:
      v125 = v16;
      while (*(_DWORD *)(v125 + 8) == 1)
      {
        v125 = *(_QWORD *)(v125 + 16);
        v126 = *(unsigned __int16 *)(v125 + 4) | (*(unsigned __int8 *)(v125 + 6) << 16);
        if (((v126 ^ v19) & 0x3F800) == 0)
        {
          v133 = v17;
          goto LABEL_213;
        }
        if ((v126 & 0x3F800) != 0x1D800)
        {
          v127 = v19 & 0x3F800;
          v19 = *(unsigned __int16 *)(v125 + 4) | (*(unsigned __int8 *)(v125 + 6) << 16);
          v16 = (uint64_t)v17;
          v17 = (WTF::StringImpl *)v125;
          if (v127 == 120832)
            goto LABEL_198;
          goto LABEL_139;
        }
      }
    }
    else if ((v19 & 0x3F800) == 0x1D800)
    {
LABEL_205:
      v125 = (uint64_t)v17;
      while (*(_DWORD *)(v125 + 8) == 1)
      {
        v125 = *(_QWORD *)(v125 + 16);
        v128 = *(unsigned __int16 *)(v125 + 4) | (*(unsigned __int8 *)(v125 + 6) << 16);
        if (((v128 ^ v18) & 0x3F800) == 0)
        {
          v133 = (WTF::StringImpl *)v16;
LABEL_213:
          v134 = (WTF::StringImpl *)&v133;
          v16 = v125;
          goto LABEL_11;
        }
        if ((v128 & 0x3F800) != 0x1D800)
        {
          v129 = v18 & 0x3F800;
          v18 = *(unsigned __int16 *)(v125 + 4) | (*(unsigned __int8 *)(v125 + 6) << 16);
          v17 = (WTF::StringImpl *)v16;
          v16 = v125;
          if (v129 == 120832)
            goto LABEL_205;
          goto LABEL_139;
        }
      }
    }
    goto LABEL_139;
  }
  v133 = (WTF::StringImpl *)*a2;
  v134 = (WTF::StringImpl *)&v133;
LABEL_11:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v16, (const WebCore::CSSLinearGradientValue ***)&v134, a3) & 1) == 0)
  {
LABEL_139:
    v95 = *(WTF::StringBuilder **)a1;
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v134, *a2, a3, a4, a5);
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v133, a2[1], v96, v97, v98);
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v131, a2[2], v99, v100, v101);
    v102 = v133;
    v103 = v134;
    v104 = v131;
    v105 = *((_QWORD *)v95 + 1);
    if ((v105 || (v105 = *(_QWORD *)v95) != 0) && (*(_BYTE *)(v105 + 16) & 4) == 0
      || v134 && (*((_BYTE *)v134 + 16) & 4) == 0
      || v133 && (*((_BYTE *)v133 + 16) & 4) == 0
      || v131 && (*((_BYTE *)v131 + 16) & 4) == 0)
    {
      v106 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v95);
      if (v106)
        WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v106, (uint64_t)v103, 32, (uint64_t)v102, 32, (uint64_t)v104);
    }
    else
    {
      v110 = (_BYTE *)MEMORY[0x19AEA4824](v95);
      if (v110)
      {
        v111 = v110;
        if (v103)
        {
          v112 = (_BYTE *)*((_QWORD *)v103 + 1);
          v113 = *((unsigned int *)v103 + 1);
          if ((*((_BYTE *)v103 + 16) & 4) != 0)
          {
            if ((_DWORD)v113)
            {
              if ((_DWORD)v113 == 1)
                *v110 = *v112;
              else
                memcpy(v110, v112, v113);
            }
          }
          else
          {
            if (v113 < 0x10)
            {
              v115 = (unsigned __int128 *)v110;
            }
            else
            {
              v115 = (unsigned __int128 *)&v110[v113 & 0xFFFFFFF0];
              v116 = (unsigned __int128 *)v110;
              do
              {
                v117 = (unsigned __int128)vld2q_s8(v112);
                v112 += 32;
                *v116++ = v117;
              }
              while (v116 != v115);
            }
            while (v115 != (unsigned __int128 *)&v110[v113])
            {
              v118 = *v112;
              v112 += 2;
              *(_BYTE *)v115 = v118;
              v115 = (unsigned __int128 *)((char *)v115 + 1);
            }
          }
          v114 = *((unsigned int *)v103 + 1);
        }
        else
        {
          v114 = 0;
        }
        v111[v114] = 32;
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v111[v114 + 1], (uint64_t)v102, 32, (uint64_t)v104);
      }
    }
LABEL_150:
    v107 = v131;
    v131 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, v26);
      else
        *(_DWORD *)v107 -= 2;
    }
    v108 = v133;
    v133 = 0;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2)
        WTF::StringImpl::destroy(v108, v26);
      else
        *(_DWORD *)v108 -= 2;
    }
    goto LABEL_156;
  }
LABEL_12:
  v21 = (WTF::StringImpl *)*a2;
  v20 = a2[1];
  v22 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
  v23 = *(unsigned __int16 *)(*a2 + 4) | (*(unsigned __int8 *)(*a2 + 6) << 16);
  if (((v23 ^ v22) & 0x3F800) != 0)
  {
    if ((v22 & 0x3F800) == 0x1D800)
    {
LABEL_132:
      v92 = v20;
      while (*(_DWORD *)(v92 + 8) == 1)
      {
        v92 = *(_QWORD *)(v92 + 16);
        v93 = *(unsigned __int16 *)(v92 + 4) | (*(unsigned __int8 *)(v92 + 6) << 16);
        if (((v93 ^ v23) & 0x3F800) == 0)
        {
          v133 = v21;
          goto LABEL_196;
        }
        if ((v93 & 0x3F800) != 0x1D800)
        {
          v94 = v23 & 0x3F800;
          v23 = *(unsigned __int16 *)(v92 + 4) | (*(unsigned __int8 *)(v92 + 6) << 16);
          v20 = (uint64_t)v21;
          v21 = (WTF::StringImpl *)v92;
          if (v94 == 120832)
            goto LABEL_132;
          break;
        }
      }
    }
    else if ((v23 & 0x3F800) == 0x1D800)
    {
LABEL_182:
      v92 = (uint64_t)v21;
      while (*(_DWORD *)(v92 + 8) == 1)
      {
        v92 = *(_QWORD *)(v92 + 16);
        v119 = *(unsigned __int16 *)(v92 + 4) | (*(unsigned __int8 *)(v92 + 6) << 16);
        if (((v119 ^ v22) & 0x3F800) == 0)
        {
          v133 = (WTF::StringImpl *)v20;
LABEL_196:
          v134 = (WTF::StringImpl *)&v133;
          v20 = v92;
          goto LABEL_14;
        }
        if ((v119 & 0x3F800) != 0x1D800)
        {
          v120 = v22 & 0x3F800;
          v22 = *(unsigned __int16 *)(v92 + 4) | (*(unsigned __int8 *)(v92 + 6) << 16);
          v21 = (WTF::StringImpl *)v20;
          v20 = v92;
          if (v120 == 120832)
            goto LABEL_182;
          break;
        }
      }
    }
    v25 = *(WTF::StringImpl ***)a1;
  }
  else
  {
    v133 = (WTF::StringImpl *)*a2;
    v134 = (WTF::StringImpl *)&v133;
LABEL_14:
    v24 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v20, (const WebCore::CSSLinearGradientValue ***)&v134, a3);
    v25 = *(WTF::StringImpl ***)a1;
    if ((v24 & 1) != 0)
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v134, *a2, a3, a4, a5);
      if (!*((_DWORD *)v25 + 4) && !v25[1])
      {
        v27 = v134;
        if (v134)
          *(_DWORD *)v134 += 2;
        v28 = *v25;
        *v25 = v27;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::destroy(v28, v26);
            v27 = v134;
            if (!v134)
              goto LABEL_24;
            goto LABEL_23;
          }
          *(_DWORD *)v28 -= 2;
        }
        if (!v27)
        {
LABEL_24:
          *((_DWORD *)v25 + 4) = (_DWORD)v27;
          goto LABEL_156;
        }
LABEL_23:
        LODWORD(v27) = *((_DWORD *)v27 + 1);
        goto LABEL_24;
      }
      if (v134 && (*((_BYTE *)v134 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
LABEL_156:
      result = v134;
      v134 = 0;
      if (!result)
        return result;
      goto LABEL_157;
    }
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v131, *a2, a3, a4, a5);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v130, a2[1], v121, v122, v123);
  v132 = 32;
  v133 = v130;
  v134 = v131;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)v25, (uint64_t *)&v134, &v132, (uint64_t *)&v133);
  v124 = v130;
  v130 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, v26);
    else
      *(_DWORD *)v124 -= 2;
  }
  result = v131;
  v131 = 0;
  if (result)
  {
LABEL_157:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::canOmitTrailingGridAreaValue(WebCore *this, WebCore::CSSValue *a2, WebCore::CSSValue *a3, WTF::String *a4, __n128 a5)
{
  int v6;
  WTF::StringBuilder *v7;
  WTF::String *v8;
  __n128 v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v6 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F87F) != 0x3F)
  {
    if ((v6 & 0x3F800) == 0)
      return (*((_WORD *)a2 + 2) & 0x7F) == 0x50 && *((_WORD *)a2 + 4) == 394;
    return 0;
  }
  if ((v6 & 0x3F87F) != 0x3F)
    return 0;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v18, (uint64_t)this, a3, a4, a5);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v17, (uint64_t)a2, v7, v8, v9);
  v12 = WTF::equal(v18, v17, v10);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v12;
}

void WebCore::serializeShorthandValue(uint64_t a1@<X0>, int a2@<W1>, WebCore::ShorthandSerializer *a3@<X8>)
{
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  _OWORD v23[9];
  WTF::StringImpl *v24;
  BOOL v25;
  _DWORD *v26;

  v5 = WebCore::shorthandForProperty(a2);
  v22[0] = v5;
  v22[1] = v8;
  v9 = 0uLL;
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  v10 = v8;
  if ((_DWORD)v8)
  {
    v11 = v5;
    v12 = 0;
    v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    while (1)
    {
      WebCore::ComputedStyleExtractor::propertyValue(a1, *(unsigned __int16 *)(v11 + 2 * v12), 1, 0, &v26);
      v15 = v26;
      v16 = v26 == 0;
      if (v26)
        break;
      v19 = *v13;
      if (*v13)
        *(_DWORD *)v19 += 2;
      v17 = v24;
      v24 = v19;
      if (v17)
      {
        v18 = *(_DWORD *)v17 - 2;
        if (*(_DWORD *)v17 != 2)
          goto LABEL_11;
        WTF::StringImpl::destroy(v17, v14);
      }
LABEL_12:
      v20 = v26;
      v26 = 0;
      if (!v20)
        goto LABEL_15;
      if (*v20 != 2)
      {
        *v20 -= 2;
LABEL_15:
        if (!v15)
          goto LABEL_22;
        goto LABEL_16;
      }
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v14);
      if (!v15)
        goto LABEL_22;
LABEL_16:
      if (++v12 >= v10)
        goto LABEL_22;
    }
    *v26 += 2;
    v17 = (WTF::StringImpl *)*((_QWORD *)v23 + v12);
    *((_QWORD *)v23 + v12) = v15;
    if (!v17)
      goto LABEL_12;
    v18 = *(_DWORD *)v17 - 2;
    if (*(_DWORD *)v17 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v14);
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)v17 = v18;
    goto LABEL_12;
  }
  v16 = 0;
LABEL_22:
  v25 = v16;
  WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)v22, v6, v7, a3, v9);
  WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)v22, v21);
}

uint64_t WebCore::StyleMedia::StyleMedia(WebCore::StyleMedia *this, WebCore::LocalDOMWindow *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Inspector::ScriptArguments **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  Inspector::ScriptArguments **v13;
  WTF *v14;
  void *v15;
  uint64_t result;
  Inspector::ScriptArguments **v17;
  WTF::StringImpl *v18;

  *(_DWORD *)this = 1;
  v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 1) = v4;
  v6 = *((_QWORD *)a2 + 9);
  if (!v6)
    return (uint64_t)this;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return (uint64_t)this;
  if (!*(_BYTE *)(v7 + 178))
  {
    v8 = v7 - 288;
    v9 = (Inspector::ScriptArguments **)WTF::fastMalloc((WTF *)0x60);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::ConsoleMessage::ConsoleMessage();
    v11 = v18;
    v17 = v9;
    v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    WebCore::Document::addConsoleMessage(v8, &v17);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      v14 = (WTF *)MEMORY[0x19AEA5F58](v13, v12);
      WTF::fastFree(v14, v15);
    }
    return (uint64_t)this;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::StyleProperties::immutableCopyIfNeeded@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(this + 4);
  if ((v2 & 8) != 0)
    return WebCore::ImmutableStyleProperties::createDeduplicating(*(_QWORD *)(this + 16), *(unsigned int *)(this + 28), (const WTF::StringImpl *)(v2 & 7), a2);
  ++*(_DWORD *)this;
  *a2 = this;
  return this;
}

size_t WTF::makeString<double>(_QWORD *a1)
{
  size_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char __s[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD __src[8];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WTF::numberToString();
  result = strlen(__s);
  v3 = result;
  HIDWORD(v13) = result;
  if ((result & 0x80000000) == 0)
  {
    v18 = v10;
    v19 = v11;
    v20 = v12;
    v21 = v13;
    v14 = *(_OWORD *)__s;
    v15 = v7;
    v16 = v8;
    v17 = v9;
    if (!(_DWORD)result)
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
LABEL_7:
      *a1 = v4;
      return result;
    }
    result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
    v4 = v5;
    if (v5)
    {
      result = v5 + 20;
      *(_DWORD *)v5 = 2;
      *(_DWORD *)(v5 + 4) = v3;
      *(_QWORD *)(v5 + 8) = v5 + 20;
      *(_DWORD *)(v5 + 16) = 4;
      __src[4] = v18;
      __src[5] = v19;
      __src[6] = v20;
      __src[7] = v21;
      __src[0] = v14;
      __src[1] = v15;
      __src[2] = v16;
      __src[3] = v17;
      if (HIDWORD(v21))
      {
        if (HIDWORD(v21) == 1)
          *(_BYTE *)result = __src[0];
        else
          result = (size_t)memcpy((void *)result, __src, HIDWORD(v21));
      }
      goto LABEL_7;
    }
  }
  *a1 = 0;
  __break(0xC471u);
  return result;
}

void WebCore::StyleProperties::getPropertyValue(const WebCore::StyleProperties *a1@<X0>, uint64_t a2@<X1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, WebCore *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v8;
  WTF::StringBuilder *v9;
  WTF::String *v10;
  WTF::StringBuilder *v11;
  WTF::String *v12;
  __n128 v13;
  WTF::StringImpl *v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;

  if ((a2 - 2) <= 0x1C8)
  {
    WebCore::StyleProperties::serializeLonghandValue((uint64_t)a1, a2, a3, a4, a5, a6);
  }
  else
  {
    v15[0] = WebCore::shorthandForProperty(a2);
    v15[1] = v8;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    v26 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)v15, a1, v9, v10, (__n128)0);
    WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)v15, v11, v12, a5, v13);
    WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)v15, v14);
  }
}

void WebCore::StyleProperties::serializeShorthandValue(WebCore::ShorthandSerializer *a1, const WebCore::StyleProperties *a2, int a3)
{
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  WTF::StringBuilder *v8;
  WTF::String *v9;
  __n128 v10;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v12[0] = WebCore::shorthandForProperty(a3);
  v12[1] = v5;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v23 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)v12, a2, v6, v7, (__n128)0);
  WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)v12, v8, v9, a1, v10);
  WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)v12, v11);
}

uint64_t WebCore::StyleProperties::propertyAsColor@<X0>(uint64_t result@<X0>, void *a2@<X1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  int v13;
  int v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  WTF *v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  unsigned __int16 *v31;
  void *v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  WTF::StringImpl *v36;
  WTF *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;

  v7 = *(unsigned int *)(result + 4);
  if ((v7 & 8) == 0)
  {
    v8 = v7 >> 4;
    do
    {
      if (v8-- < 1)
        goto LABEL_11;
    }
    while ((*(_WORD *)(result + 8 + 2 * v8) & 0x3FF) != (_DWORD)a2);
    if ((_DWORD)v8 == -1)
      goto LABEL_11;
    if ((v7 & 8) != 0)
    {
LABEL_13:
      if (*(_DWORD *)(result + 28) <= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x19581C404);
      }
      v9 = *(_QWORD *)(result + 16) + 16 * v8;
      v11 = *(_QWORD *)(v9 + 8);
    }
    else
    {
LABEL_6:
      v9 = result + 8 + 2 * v8;
      v10 = (unsigned int *)(result + 8 + ((v7 >> 3) & 0x1FFFFFFE) + 5 * v8);
      v11 = *v10 | ((unint64_t)*((unsigned __int8 *)v10 + 4) << 32);
    }
    if ((*(_WORD *)v9 & 0x400) != 0)
    {
      v30 = a2;
      v31 = (unsigned __int16 *)v9;
      WebCore::matchingShorthandsForLonghand(*(_WORD *)v9 & 0x3FF, (uint64_t)&v37);
      v33 = ((unint64_t)*v31 >> 11) & 3;
      if (v39 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x19581C41CLL);
      }
      result = (uint64_t)v37;
      v34 = *((unsigned __int16 *)v37 + 8 * v33 + 6);
      if (&v40 != (uint64_t *)v37)
      {
        v37 = 0;
        v38 = 0;
        result = WTF::fastFree((WTF *)result, v32);
      }
      if (v34 == 492)
      {
        if (!v11)
          goto LABEL_11;
        v13 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
        if ((v13 & 0x3F800) != 0)
        {
          a2 = v30;
        }
        else
        {
          v35 = (*(_WORD *)(v11 + 4) & 0x7F) != 0x50 || *(unsigned __int16 *)(v11 + 8) - 16 >= 0x1A;
          a2 = v30;
          if (!v35)
            goto LABEL_11;
        }
        goto LABEL_18;
      }
      a2 = v30;
      if (!v11)
        goto LABEL_11;
    }
    else if (!v11)
    {
      goto LABEL_11;
    }
    v13 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
LABEL_18:
    *(_DWORD *)v11 += 2;
    v14 = v13 & 0x3F87F;
    if ((v13 & 0x3F87F) == 0x18)
    {
      v15 = *(WTF **)(v11 + 8);
      v37 = v15;
      if (((unint64_t)v15 & 0x8000000000000) != 0)
      {
        v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFLL);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
      }
    }
    else
    {
      WebCore::serializeLonghandValue((uint64_t)a2, v11, a3, a4, (WebCore *)&v36, a6);
      result = (uint64_t)WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v36, 0, (uint64_t *)&v37, v18, v19, v20, v21, v22, v23);
    }
    v24 = v37;
    *(_QWORD *)a5 = v37;
    if (((unint64_t)v24 & 0x8000000000000) != 0)
    {
      v25 = (unsigned int *)((unint64_t)v24 & 0xFFFFFFFFFFFFLL);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
      v27 = v37;
      *(_BYTE *)(a5 + 8) = 1;
      if (((unint64_t)v27 & 0x8000000000000) != 0)
      {
        result = (unint64_t)v27 & 0xFFFFFFFFFFFFLL;
        do
        {
          v28 = __ldaxr((unsigned int *)result);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)result));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
    }
    else
    {
      *(_BYTE *)(a5 + 8) = 1;
    }
    if (v14 != 24)
    {
      result = (uint64_t)v36;
      v36 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (*(_DWORD *)v11 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v11, (WTF::StringImpl *)a2);
    *(_DWORD *)v11 -= 2;
    return result;
  }
  LODWORD(v8) = *(_DWORD *)(result + 28);
  while (1)
  {
    LODWORD(v8) = v8 - 1;
    if ((int)v8 < 0)
      break;
    if ((*(_WORD *)(*(_QWORD *)(result + 16) + 16 * v8) & 0x3FF) == (_DWORD)a2)
    {
      if ((v7 & 8) != 0)
        goto LABEL_13;
      goto LABEL_6;
    }
  }
LABEL_11:
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

unint64_t WebCore::StyleProperties::propertyAsValueID(uint64_t a1, WTF::StringImpl *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 v10;
  unint64_t v11;
  _DWORD *v14;
  unsigned __int16 *v15;
  void *v16;
  unint64_t v17;
  WTF *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  WTF *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  v2 = *(unsigned int *)(a1 + 4);
  if ((v2 & 8) == 0)
  {
    v3 = v2 >> 4;
    do
    {
      if (v3-- < 1)
        return 0;
    }
    while ((*(_WORD *)(a1 + 8 + 2 * v3) & 0x3FF) != (_DWORD)a2);
    if ((_DWORD)v3 == -1)
      return 0;
LABEL_5:
    if ((v2 & 8) != 0)
    {
      if (*(_DWORD *)(a1 + 28) <= v3)
      {
        __break(0xC471u);
        JUMPOUT(0x19581C638);
      }
      v4 = *(_QWORD *)(a1 + 16) + 16 * v3;
      v6 = *(_QWORD *)(v4 + 8);
    }
    else
    {
      v4 = a1 + 8 + 2 * v3;
      v5 = (unsigned int *)(a1 + 8 + ((v2 >> 3) & 0x1FFFFFFE) + 5 * v3);
      v6 = *v5 | ((unint64_t)*((unsigned __int8 *)v5 + 4) << 32);
    }
    if ((*(_WORD *)v4 & 0x400) != 0)
    {
      v11 = v6;
      v21 = a2;
      v15 = (unsigned __int16 *)v4;
      WebCore::matchingShorthandsForLonghand(*(_WORD *)v4 & 0x3FF, (uint64_t)&v22);
      v17 = ((unint64_t)*v15 >> 11) & 3;
      if (v24 <= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x19581C654);
      }
      v18 = v22;
      v19 = *((unsigned __int16 *)v22 + 8 * v17 + 6);
      if (&v25 != (uint64_t *)v22)
      {
        v22 = 0;
        v23 = 0;
        WTF::fastFree(v18, v16);
      }
      if (v19 == 492)
      {
        if (!v11)
          return v11;
        v7 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
        if ((v7 & 0x3F800) != 0)
        {
          a2 = (WTF::StringImpl *)v21;
          v6 = v11;
        }
        else
        {
          v6 = v11;
          v20 = (*(_WORD *)(v11 + 4) & 0x7F) != 0x50 || *(unsigned __int16 *)(v11 + 8) - 16 >= 0x1A;
          a2 = (WTF::StringImpl *)v21;
          if (!v20)
            return 0;
        }
        goto LABEL_10;
      }
      a2 = (WTF::StringImpl *)v21;
      v6 = v11;
      if (!v11)
        return v11;
    }
    else if (!v6)
    {
      return 0;
    }
    v7 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
LABEL_10:
    v8 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    if ((v7 & 0x100) != 0)
    {
      v14 = (_DWORD *)v6;
      v9 = WebCore::initialValueIDForLonghand((int)a2);
      v6 = (unint64_t)v14;
      v10 = v9 & 0xFF00;
      v8 = *v14 - 2;
    }
    else if ((v7 & 0x3F800) != 0)
    {
      LOBYTE(v9) = 0;
      v10 = 0;
    }
    else
    {
      if ((v7 & 0x7F) == 0x50)
        v9 = *(_WORD *)(v6 + 8);
      else
        v9 = 0;
      v10 = v9 & 0xFF00;
    }
    v11 = (unsigned __int16)(v10 | v9) | 0x10000u;
    if (v8)
      *(_DWORD *)v6 = v8;
    else
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v6, a2);
    return v11;
  }
  LODWORD(v3) = *(_DWORD *)(a1 + 28);
  while (1)
  {
    LODWORD(v3) = v3 - 1;
    if ((int)v3 < 0)
      return 0;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 16) + 16 * v3) & 0x3FF) == (_DWORD)a2)
      goto LABEL_5;
  }
}

void WebCore::StyleProperties::getCustomPropertyValue(WebCore::StyleProperties *this@<X0>, const WTF::String *a2@<X1>, WebCore *a3@<X8>)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  WTF::StringBuilder *v17;
  WTF::String *v18;
  __n128 v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(unsigned __int8 **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  v8 = *((unsigned int *)this + 1);
  if ((v8 & 8) != 0)
  {
    v9 = *((_DWORD *)this + 7);
    v10 = (v9 - 1);
    if (v9 - 1 < 0)
    {
LABEL_5:
      *(_QWORD *)a3 = 0;
      return;
    }
    v11 = (uint64_t *)(*((_QWORD *)this + 2) + 16 * v10 + 8);
    while (1)
    {
      if ((*(_WORD *)(v11 - 1) & 0x3FF) == 1)
      {
        v12 = *v11;
        if (*v11)
        {
          if (((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) & 0x3F800) != 0xE800)
            goto LABEL_40;
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
          {
            v14 = *(unsigned int *)(v13 + 16);
            v15 = *(unsigned __int8 **)(v13 + 8);
            v13 = *(unsigned int *)(v13 + 4);
            v16 = (v14 >> 2) & 1;
          }
          else
          {
            v15 = 0;
            v16 = 1;
          }
          if (WTF::operator==(v15, v13 | (v16 << 32), v6, v7))
            break;
        }
      }
      v11 -= 2;
      if (v10-- < 1)
        goto LABEL_5;
    }
  }
  else
  {
    if (v8 < 0x10)
      goto LABEL_5;
    v21 = (char *)this + 8;
    v22 = (v8 >> 4) + 1;
    while (1)
    {
      v23 = (v22 - 2);
      if ((*(_WORD *)&v21[2 * v23] & 0x3FF) == 1)
      {
        v24 = &v21[5 * v23 + (((unint64_t)*((unsigned int *)this + 1) >> 3) & 0x1FFFFFFE)];
        v25 = *(unsigned int *)v24 | ((unint64_t)v24[4] << 32);
        if (v25)
        {
          if (((*(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16)) & 0x3F800) != 0xE800)
          {
            __break(0xC471u);
            JUMPOUT(0x19581C8FCLL);
          }
          v26 = *(_QWORD *)(v25 + 8);
          if (v26)
          {
            v27 = *(unsigned int *)(v26 + 16);
            v28 = *(unsigned __int8 **)(v26 + 8);
            v26 = *(unsigned int *)(v26 + 4);
            v29 = (v27 >> 2) & 1;
          }
          else
          {
            v28 = 0;
            v29 = 1;
          }
          if (WTF::operator==(v28, v26 | (v29 << 32), v6, v7))
            break;
        }
      }
      if ((unint64_t)--v22 < 2)
        goto LABEL_5;
    }
    LODWORD(v10) = v22 - 2;
  }
  if ((_DWORD)v10 == -1)
    goto LABEL_5;
  v30 = *((unsigned int *)this + 1);
  if ((v30 & 8) != 0)
  {
    if (*((_DWORD *)this + 7) <= v10)
    {
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x19581C8DCLL);
    }
    v32 = *(_DWORD **)(*((_QWORD *)this + 2) + 16 * v10 + 8);
  }
  else
  {
    v31 = (char *)this + 5 * v10 + ((v30 >> 3) & 0x1FFFFFFE);
    v32 = (_DWORD *)(*((unsigned int *)v31 + 2) | ((unint64_t)v31[12] << 32));
  }
  if (!v32)
    goto LABEL_5;
  *v32 += 2;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a3, (uint64_t)v32, v17, v18, v19);
  if (*v32 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v33);
  else
    *v32 -= 2;
}

uint64_t WebCore::StyleProperties::getCustomPropertyCSSValue@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v3 = this;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(unsigned __int8 **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  v8 = *(unsigned int *)(this + 4);
  if ((v8 & 8) != 0)
  {
    v9 = *(_DWORD *)(this + 28);
    v10 = (v9 - 1);
    if (v9 - 1 < 0)
    {
LABEL_5:
      v11 = 0;
      goto LABEL_6;
    }
    v12 = (uint64_t *)(*(_QWORD *)(this + 16) + 16 * v10 + 8);
    while (1)
    {
      if ((*(_WORD *)(v12 - 1) & 0x3FF) == 1)
      {
        v13 = *v12;
        if (*v12)
        {
          if (((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) != 0xE800)
            goto LABEL_39;
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            v15 = *(unsigned int *)(v14 + 16);
            v16 = *(unsigned __int8 **)(v14 + 8);
            v14 = *(unsigned int *)(v14 + 4);
            v17 = (v15 >> 2) & 1;
          }
          else
          {
            v16 = 0;
            v17 = 1;
          }
          this = WTF::operator==(v16, v14 | (v17 << 32), v6, v7);
          if ((this & 1) != 0)
            break;
        }
      }
      v11 = 0;
      v12 -= 2;
      if (v10-- < 1)
        goto LABEL_6;
    }
  }
  else
  {
    if (v8 < 0x10)
      goto LABEL_5;
    v19 = this + 8;
    v20 = (v8 >> 4) + 1;
    while (1)
    {
      v21 = (v20 - 2);
      if ((*(_WORD *)(v19 + 2 * v21) & 0x3FF) == 1)
      {
        v22 = (unsigned int *)(v19 + 5 * v21 + (((unint64_t)*(unsigned int *)(v3 + 4) >> 3) & 0x1FFFFFFE));
        v23 = *v22 | ((unint64_t)*((unsigned __int8 *)v22 + 4) << 32);
        if (v23)
        {
          if (((*(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16)) & 0x3F800) != 0xE800)
          {
            __break(0xC471u);
            JUMPOUT(0x19581CB70);
          }
          v24 = *(_QWORD *)(v23 + 8);
          if (v24)
          {
            v25 = *(unsigned int *)(v24 + 16);
            v26 = *(unsigned __int8 **)(v24 + 8);
            v24 = *(unsigned int *)(v24 + 4);
            v27 = (v25 >> 2) & 1;
          }
          else
          {
            v26 = 0;
            v27 = 1;
          }
          this = WTF::operator==(v26, v24 | (v27 << 32), v6, v7);
          if ((this & 1) != 0)
            break;
        }
      }
      v11 = 0;
      if ((unint64_t)--v20 < 2)
        goto LABEL_6;
    }
    LODWORD(v10) = v20 - 2;
  }
  if ((_DWORD)v10 == -1)
    goto LABEL_5;
  v28 = *(unsigned int *)(v3 + 4);
  if ((v28 & 8) != 0)
  {
    if (*(_DWORD *)(v3 + 28) <= v10)
    {
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x19581CB50);
    }
    v11 = *(_DWORD **)(*(_QWORD *)(v3 + 16) + 16 * v10 + 8);
  }
  else
  {
    v29 = v3 + 5 * v10 + ((v28 >> 3) & 0x1FFFFFFE);
    v11 = (_DWORD *)(*(unsigned int *)(v29 + 8) | ((unint64_t)*(unsigned __int8 *)(v29 + 12) << 32));
  }
  if (v11)
    *v11 += 2;
LABEL_6:
  *a3 = v11;
  return this;
}

uint64_t WebCore::StyleProperties::propertyIsImportant(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;

  if ((a2 - 2) > 0x1C8)
  {
    v5 = WebCore::shorthandForProperty(a2);
    if (v6)
    {
      v7 = (unsigned __int16 *)v5;
      v8 = 2 * v6 - 2;
      do
      {
        v9 = *v7++;
        result = WebCore::StyleProperties::propertyIsImportant(a1, v9);
        if ((_DWORD)result)
          v10 = v8 == 0;
        else
          v10 = 1;
        v8 -= 2;
      }
      while (!v10);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    result = WebCore::StyleProperties::findPropertyIndex(a1, a2);
    if ((_DWORD)result == -1)
      return 0;
    if ((*(_BYTE *)(a1 + 4) & 8) == 0)
    {
      v4 = (unsigned __int16 *)(a1 + 2 * result + 8);
      return (*v4 >> 13) & 1;
    }
    if (*(_DWORD *)(a1 + 28) > result)
    {
      v4 = (unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 16 * result);
      return (*v4 >> 13) & 1;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::StyleProperties::customPropertyIsImportant(WebCore::StyleProperties *this, const WTF::String *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  if ((*((_BYTE *)this + 4) & 8) != 0)
  {
    v6 = *((_DWORD *)this + 7);
    v7 = (v6 - 1);
    if (v6 - 1 >= 0)
    {
      for (i = (uint64_t *)(*((_QWORD *)this + 2) + 16 * v7 + 8); ; i -= 2)
      {
        if ((*(_WORD *)(i - 1) & 0x3FF) == 1)
        {
          v10 = *i;
          if (*i)
          {
            if (((*(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16)) & 0x3F800) != 0xE800)
            {
              result = 96;
              __break(0xC471u);
              return result;
            }
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              v12 = *(unsigned int *)(v11 + 16);
              v13 = *(unsigned __int8 **)(v11 + 8);
              v11 = *(unsigned int *)(v11 + 4);
              v14 = (v12 >> 2) & 1;
            }
            else
            {
              v13 = 0;
              v14 = 1;
            }
            if (WTF::operator==(v13, v11 | (v14 << 32), v4, v5))
              goto LABEL_18;
          }
        }
        result = 0;
        if (v7-- < 1)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v7) = WebCore::ImmutableStyleProperties::findCustomPropertyIndex((uint64_t)this, v4, v5);
LABEL_18:
    if ((_DWORD)v7 != -1)
      return (*(unsigned __int16 *)WebCore::StyleProperties::propertyAt((uint64_t)this, v7) >> 13) & 1;
  }
  return 0;
}

_DWORD **WebCore::StyleProperties::getPropertyShorthand@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD **result;
  WebCore::StylePropertyMetadata *v6;
  _DWORD *v7;
  unsigned int v8;

  result = (_DWORD **)WebCore::StyleProperties::findPropertyIndex(a1, a2);
  if ((_DWORD)result == -1)
  {
    v7 = 0;
LABEL_9:
    *a3 = v7;
    return result;
  }
  if ((*(_BYTE *)(a1 + 4) & 8) == 0)
  {
    v6 = (WebCore::StylePropertyMetadata *)(a1 + 2 * result + 8);
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 28) > result)
  {
    v6 = (WebCore::StylePropertyMetadata *)(*(_QWORD *)(a1 + 16) + 16 * result);
LABEL_7:
    v8 = WebCore::StylePropertyMetadata::shorthandID(v6);
    result = (_DWORD **)WebCore::nameString(v8);
    v7 = *result;
    if (*result)
      *v7 += 2;
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

void WebCore::StyleProperties::asText(WebCore::StyleProperties *this@<X0>, unsigned __int8 *a2@<X1>, WTF::String *a3@<X3>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  WTF::StringImpl *v6;
  _BYTE v7[24];

  WebCore::StyleProperties::asTextInternal(this, a2, a3, (uint64_t)v7, a5);
  WTF::StringBuilder::toString((WTF::StringBuilder *)v7, a4);
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v7, v6);
}

WTF *WebCore::StyleProperties::asTextInternal@<X0>(WTF *this@<X0>, unsigned __int8 *a2@<X1>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  WTF *v5;
  uint64_t v7;
  int v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringBuilder *v15;
  WTF *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  __int16 v19;
  int v20;
  int v21;
  _WORD *v22;
  int8x16_t *v23;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  __int16 *v32;
  __int16 v33;
  int8x16_t *v34;
  size_t v35;
  WTF::StringImpl *v36;
  _WORD *v37;
  _WORD *v38;
  __n128 *v39;
  size_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _WORD *v45;
  char *v46;
  __n128 *v47;
  __n128 *v48;
  unsigned __int8 v49;
  __int16 *v50;
  int v51;
  int v52;
  const WebCore::StyleProperties *v53;
  __int16 v54;
  WTF *v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  __int16 v61;
  _BYTE v62[6];
  _QWORD v63[2];
  _QWORD v64[3];

  v5 = this;
  v7 = 0;
  v8 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 20) = 1;
  v9 = " !important";
  v64[0] = 0;
  v64[1] = 0;
  v63[0] = 0;
  v63[1] = 0;
  v53 = this;
  while (1)
  {
    v10 = *((unsigned int *)v5 + 1);
    if ((v10 & 8) != 0)
      break;
    if (v7 >= v10 >> 4)
      return this;
    v11 = (uint64_t)v5 + 2 * v7 + 8;
    v51 = v7;
    v12 = (unsigned int *)((char *)v5 + 5 * v7 + ((v10 >> 3) & 0x1FFFFFFE) + 8);
    v13 = *v12 | ((unint64_t)*((unsigned __int8 *)v12 + 4) << 32);
LABEL_5:
    v50 = (__int16 *)v11;
    v14 = *(_WORD *)v11 & 0x3FF;
    v59 = (WTF *)&v61;
    v60 = 4;
    v52 = v8;
    if (v13 && ((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) == 0x17000)
    {
      v23 = (int8x16_t *)v9;
      v26 = (WTF *)v62;
      v61 = *(_WORD *)(v13 + 8);
      HIDWORD(v60) = 1;
      v25 = (WTF *)&v61;
      while (1)
      {
LABEL_23:
        v15 = (WTF::StringBuilder *)*(unsigned __int16 *)v25;
        v27 = ((_DWORD)v15 - 459) >> 6;
        v28 = 1 << (v15 + 53);
        v29 = v64[v27];
        if ((v28 & v29) != 0)
        {
          v5 = v53;
          v8 = v52;
          v9 = (const char *)v23;
          goto LABEL_57;
        }
        v30 = v63[v27];
        if ((v30 & v28) == 0)
        {
          if (((_DWORD)v15 - 459) >= 0x5FuLL)
            abort();
          v63[v27] = v30 | v28;
          WebCore::StyleProperties::serializeShorthandValue((WebCore::ShorthandSerializer *)&v55, v53, (int)v15);
          v31 = v55;
          if (v55)
            break;
        }
        v25 = (WTF *)((char *)v25 + 2);
        if (v25 == v26)
          goto LABEL_28;
      }
      LODWORD(v14) = *(unsigned __int16 *)v25;
      v64[v27] = v28 | v29;
    }
    else
    {
      WebCore::matchingShorthandsForLonghand(v14, (uint64_t)&v55);
      v16 = v55;
      if (v57)
      {
        v17 = 16 * v57;
        v18 = (unsigned __int16 *)((char *)v55 + 12);
        do
        {
          v20 = *v18;
          v18 += 8;
          v19 = v20;
          switch(v20)
          {
            case 466:
            case 467:
            case 470:
            case 475:
            case 476:
            case 479:
            case 481:
            case 484:
            case 486:
            case 487:
            case 489:
            case 492:
            case 493:
            case 494:
            case 497:
            case 498:
            case 499:
            case 511:
            case 512:
            case 519:
            case 520:
            case 521:
            case 523:
            case 524:
            case 525:
            case 534:
            case 535:
            case 541:
            case 543:
            case 544:
            case 545:
            case 546:
            case 549:
            case 550:
            case 551:
            case 552:
            case 553:
              break;
            case 509:
              if ((v14 - 409) >= 2 && (_DWORD)v14 != 170)
                goto LABEL_10;
              break;
            case 547:
              if ((_DWORD)v14 == 455)
                goto LABEL_10;
              break;
            default:
LABEL_10:
              v54 = v19;
              v21 = HIDWORD(v60);
              if (HIDWORD(v60) == (_DWORD)v60)
              {
                v22 = (_WORD *)WTF::Vector<WebCore::CSSPropertyID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, HIDWORD(v60) + 1, (unint64_t)&v54);
                v21 = HIDWORD(v60);
                *((_WORD *)v59 + HIDWORD(v60)) = *v22;
              }
              else
              {
                *((_WORD *)v59 + HIDWORD(v60)) = v19;
              }
              HIDWORD(v60) = v21 + 1;
              break;
          }
          v17 -= 16;
        }
        while (v17);
        v16 = v55;
      }
      v23 = (int8x16_t *)v9;
      if (&v58 != (uint64_t *)v16 && v16 != 0)
      {
        v55 = 0;
        v56 = 0;
        WTF::fastFree(v16, a2);
      }
      if (HIDWORD(v60))
      {
        v25 = v59;
        v26 = (WTF *)((char *)v59 + 2 * HIDWORD(v60));
        goto LABEL_23;
      }
LABEL_28:
      WebCore::serializeLonghandValue(v14, v13, v15, a3, (WebCore *)&v55, a5);
      v31 = v55;
    }
    v9 = (const char *)v23;
    if (v52)
      WTF::StringBuilder::append(a4, 0x20u);
    if ((_DWORD)v14 == 1)
    {
      if (((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) != 0xE800)
      {
        __break(0xC471u);
        JUMPOUT(0x19581D3FCLL);
      }
      WTF::StringBuilder::append((WTF::StringImpl **)a4, (WTF::StringImpl **)(v13 + 8));
      v32 = v50;
    }
    else
    {
      v32 = v50;
      WTF::StringBuilder::append();
    }
    v33 = *v32;
    if ((*v32 & 0x2000) != 0)
      v34 = v23;
    else
      v34 = (int8x16_t *)"";
    if ((v33 & 0x2000) != 0)
      v35 = 11;
    else
      v35 = 0;
    v8 = v52 + 1;
    v36 = *(WTF::StringImpl **)(a4 + 8);
    if (!v36 && (v36 = *(WTF::StringImpl **)a4) == 0 || (*((_BYTE *)v36 + 16) & 4) != 0)
    {
      if (!v31)
      {
        v45 = (_WORD *)MEMORY[0x19AEA4824](a4);
        if (!v45)
          goto LABEL_53;
        v38 = v45;
        v41 = 0;
        *v45 = 8250;
        goto LABEL_50;
      }
      if ((*((_BYTE *)v31 + 16) & 4) != 0)
      {
        v37 = (_WORD *)MEMORY[0x19AEA4824](a4);
        if (!v37)
          goto LABEL_54;
        v38 = v37;
        *v37 = 8250;
        v39 = (__n128 *)(v37 + 1);
        a2 = (unsigned __int8 *)*((_QWORD *)v31 + 1);
        v40 = *((unsigned int *)v31 + 1);
        if ((*((_BYTE *)v31 + 16) & 4) != 0)
        {
          if ((_DWORD)v40)
          {
            if ((_DWORD)v40 == 1)
              v39->n128_u8[0] = *a2;
            else
              memcpy(v39, a2, v40);
          }
        }
        else
        {
          if (v40 < 0x10)
          {
            v47 = v39;
          }
          else
          {
            v47 = (__n128 *)((char *)v39 + (v40 & 0xFFFFFFF0));
            v48 = v39;
            do
            {
              a5 = (__n128)vld2q_s8((const char *)a2);
              a2 += 32;
              *v48++ = a5;
            }
            while (v48 != v47);
          }
          while (v47 != (__n128 *)((char *)v39 + v40))
          {
            v49 = *a2;
            a2 += 2;
            v47->n128_u8[0] = v49;
            v47 = (__n128 *)((char *)v47 + 1);
          }
        }
        v41 = *((unsigned int *)v31 + 1);
LABEL_50:
        v42 = (char *)v38 + v41;
        v43 = v42 + 2;
        if ((_DWORD)v35)
          memcpy(v42 + 2, v34, v35);
        v43[v35] = 59;
        goto LABEL_53;
      }
    }
    v46 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a4);
    if (v46)
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v46, (int8x16_t *)": ", 2, (uint64_t)v31, v34, v35, 59);
LABEL_53:
    if (v31)
    {
LABEL_54:
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v31 -= 2;
    }
    v5 = v53;
LABEL_57:
    this = v59;
    if (&v61 != (__int16 *)v59 && v59 != 0)
    {
      v59 = 0;
      LODWORD(v60) = 0;
      this = (WTF *)WTF::fastFree(this, a2);
    }
    v7 = (v51 + 1);
  }
  if (*((_DWORD *)v5 + 7) > v7)
  {
    v51 = v7;
    v11 = *((_QWORD *)v5 + 2) + 16 * v7;
    v13 = *(_QWORD *)(v11 + 8);
    goto LABEL_5;
  }
  return this;
}

WTF::StringImpl *WebCore::StyleProperties::asTextAtom@<X0>(WebCore::StyleProperties *this@<X0>, unsigned __int8 *a2@<X1>, WTF::String *a3@<X3>, WTF::AtomString *a4@<X8>, __n128 a5@<Q0>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  WebCore::StyleProperties::asTextInternal(this, a2, a3, (uint64_t)&v9, a5);
  WTF::StringBuilder::toAtomString((WTF::AtomString *)&v9, a4);
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::StyleProperties::propertyMatches(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int PropertyIndex;
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  const WebCore::CSSLinearGradientValue **v19;

  PropertyIndex = WebCore::StyleProperties::findPropertyIndex(a1, a2);
  if (PropertyIndex == -1)
    return 0;
  WebCore::StyleProperties::propertyAt(a1, PropertyIndex);
  v8 = v6;
  v9 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
  v10 = *(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16);
  if (((v10 ^ v9) & 0x3F800) != 0)
  {
    if ((v9 & 0x3F800) == 0x1D800)
    {
LABEL_6:
      v13 = v8;
      while (*(_DWORD *)(v13 + 8) == 1)
      {
        v13 = *(_QWORD *)(v13 + 16);
        v14 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
        if (((v14 ^ v10) & 0x3F800) == 0)
        {
          v18 = a3;
          goto LABEL_23;
        }
        if ((v14 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v15 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
          v8 = a3;
          a3 = v13;
          if (v15 == 120832)
            goto LABEL_6;
          return result;
        }
      }
    }
    else if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_13:
      v13 = a3;
      while (*(_DWORD *)(v13 + 8) == 1)
      {
        v13 = *(_QWORD *)(v13 + 16);
        v16 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
        if (((v16 ^ v9) & 0x3F800) == 0)
        {
          v18 = v8;
LABEL_23:
          v19 = (const WebCore::CSSLinearGradientValue **)&v18;
          v11 = v13;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v11, &v19, v7);
        }
        if ((v16 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v17 = v9 & 0x3F800;
          v9 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
          a3 = v8;
          v8 = v13;
          if (v17 == 120832)
            goto LABEL_13;
          return result;
        }
      }
    }
    return 0;
  }
  v18 = a3;
  v19 = (const WebCore::CSSLinearGradientValue **)&v18;
  v11 = v6;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v11, &v19, v7);
}

WebCore::MutableStyleProperties *WebCore::StyleProperties::mutableCopy@<X0>(WebCore::StyleProperties *this@<X0>, WebCore::MutableStyleProperties **a2@<X8>)
{
  WebCore::MutableStyleProperties *v4;
  WebCore::MutableStyleProperties *result;

  v4 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  result = WebCore::MutableStyleProperties::MutableStyleProperties(v4, this);
  *a2 = result;
  return result;
}

WTF *WebCore::StyleProperties::copyProperties@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _WORD *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  WebCore::StylePropertyMetadata *v13;
  unsigned int *v14;
  unint64_t v15;
  WTF::StringImpl *v17;
  __int16 v18;
  char *v19;
  _WORD *v20;
  uint64_t *v21;
  __int16 v22;
  _QWORD *v23;
  _WORD *v24;
  uint64_t v25;
  _DWORD *v26;
  BOOL v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *result;
  WTF *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD **v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;

  v40 = 0;
  v41 = 0;
  if (a3)
  {
    if (a3 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19581DAC0);
    }
    LODWORD(v41) = a3;
    v40 = (WTF *)WTF::fastMalloc((WTF *)(16 * a3));
    v8 = &a2[a3];
    v9 = a1 + 8;
    while (1)
    {
      v10 = (unsigned __int16)*a2;
      v11 = *(unsigned int *)(a1 + 4);
      if ((v11 & 8) != 0)
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 28);
        do
        {
          LODWORD(v12) = v12 - 1;
          if ((int)v12 < 0)
            goto LABEL_26;
        }
        while ((*(_WORD *)(*(_QWORD *)(a1 + 16) + 16 * v12) & 0x3FF) != v10);
        if ((v11 & 8) == 0)
          goto LABEL_9;
      }
      else
      {
        v12 = v11 >> 4;
        do
        {
          if (v12-- < 1)
            goto LABEL_26;
        }
        while ((*(_WORD *)(v9 + 2 * v12) & 0x3FF) != v10);
        if ((_DWORD)v12 == -1)
          goto LABEL_26;
        if ((v11 & 8) == 0)
        {
LABEL_9:
          v13 = (WebCore::StylePropertyMetadata *)(v9 + 2 * v12);
          v14 = (unsigned int *)(v9 + ((v11 >> 3) & 0x1FFFFFFE) + 5 * v12);
          v15 = *v14 | ((unint64_t)*((unsigned __int8 *)v14 + 4) << 32);
          goto LABEL_17;
        }
      }
      if (*(_DWORD *)(a1 + 28) <= v12)
        goto LABEL_58;
      v13 = (WebCore::StylePropertyMetadata *)(*(_QWORD *)(a1 + 16) + 16 * v12);
      v15 = *((_QWORD *)v13 + 1);
LABEL_17:
      if (WebCore::StylePropertyMetadata::shorthandID(v13) == 492)
      {
        if (v15)
        {
          if (((*(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16)) & 0x3F800) != 0
            || ((*(_WORD *)(v15 + 4) & 0x7F) == 0x50
              ? (v27 = *(unsigned __int16 *)(v15 + 8) - 16 >= 0x1A)
              : (v27 = 1),
                v27))
          {
LABEL_19:
            *(_DWORD *)v15 += 2;
            v18 = *a2 & 0x3FF | ((WebCore::isInheritedPropertyTable[(unsigned __int16)*a2] != 0) << 15);
            v42 = v18;
            v43 = (_DWORD *)v15;
            if (HIDWORD(v41) == (_DWORD)v41)
            {
              v19 = WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v40, HIDWORD(v41) + 1, (unint64_t)&v42);
              v20 = (_WORD *)((char *)v40 + 16 * HIDWORD(v41));
              v22 = *(_WORD *)v19;
              v21 = (uint64_t *)(v19 + 8);
              *v20 = v22;
              v23 = v20 + 4;
            }
            else
            {
              v24 = (_WORD *)((char *)v40 + 16 * HIDWORD(v41));
              *v24 = v18;
              v23 = v24 + 4;
              v21 = (uint64_t *)&v43;
            }
            v25 = *v21;
            *v21 = 0;
            *v23 = v25;
            ++HIDWORD(v41);
            v26 = v43;
            v43 = 0;
            if (v26)
            {
              if (*v26 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v17);
              else
                *v26 -= 2;
            }
          }
        }
      }
      else if (v15)
      {
        goto LABEL_19;
      }
LABEL_26:
      if (++a2 == v8)
      {
        v28 = HIDWORD(v41);
        goto LABEL_35;
      }
    }
  }
  v28 = 0;
LABEL_35:
  WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v40, v28);
  v30 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v30 = 0x800000001;
  v31 = v30 + 32;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = v30 + 32;
  v32 = HIDWORD(v41);
  *(_DWORD *)(v30 + 24) = 4;
  *(_DWORD *)(v30 + 28) = v32;
  if (v32 >= 5)
  {
    if (v32 >> 28)
    {
LABEL_58:
      __break(0xC471u);
      JUMPOUT(0x19581DAB8);
    }
    v31 = WTF::fastMalloc((WTF *)(16 * v32));
    *(_DWORD *)(v30 + 24) = v32;
    *(_QWORD *)(v30 + 16) = v31;
    v32 = HIDWORD(v41);
  }
  result = v40;
  if ((_DWORD)v32)
  {
    v34 = (WTF *)((char *)v40 + 16 * v32);
    do
    {
      *(_WORD *)v31 = *(_WORD *)result;
      v35 = (_DWORD *)*((_QWORD *)result + 1);
      if (v35)
        *v35 += 2;
      *(_QWORD *)(v31 + 8) = v35;
      result = (WTF *)((char *)result + 16);
      v31 += 16;
    }
    while (result != v34);
    v36 = HIDWORD(v41);
    result = v40;
    *a4 = v30;
    if ((_DWORD)v36)
    {
      v37 = 16 * v36;
      v38 = (_DWORD **)((char *)result + 8);
      do
      {
        v39 = *v38;
        *v38 = 0;
        if (v39)
        {
          if (*v39 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v29);
          else
            *v39 -= 2;
        }
        v38 += 2;
        v37 -= 16;
      }
      while (v37);
      result = v40;
    }
  }
  else
  {
    *a4 = v30;
  }
  if (result)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    return (WTF *)WTF::fastFree(result, v29);
  }
  return result;
}

_QWORD *WebCore::MutableStyleProperties::ensureCSSStyleDeclaration(WebCore::MutableStyleProperties *this)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)*((_QWORD *)this + 1);
  if (!result)
  {
    result = (_QWORD *)bmalloc::api::isoAllocate();
    *result = off_1E3399C18;
    result[1] = 0;
    result[2] = 0;
    result[3] = this;
    result[4] = 0;
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return (_QWORD *)*((_QWORD *)this + 1);
    }
  }
  return result;
}

void WebCore::StyleRuleBase::createCSSOMWrapper(WebCore::StyleRuleBase *this@<X0>, WebCore::CSSStyleSheet *a2@<X1>, WebCore::CSSRule *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void (**v17)(WebCore::CSSCounterStyleRule *__hidden);
  uint64_t v18;
  void *v19;
  void (**v20)(WebCore::CSSContainerRule *__hidden);
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void (**v24)(WebCore::CSSFontFaceRule *__hidden);
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;

  switch(*((_BYTE *)this + 4) & 0x1F)
  {
    case 1:
      v8 = WTF::fastMalloc((WTF *)0x50);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)(v8 + 16) = a2;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)v8 = off_1E3398AE0;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 32) = this;
      v9 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v9 + 8) = 1;
      *(_QWORD *)v9 = off_1E339F178;
      v10 = *(_QWORD *)(v8 + 24);
      if (v10)
        goto LABEL_77;
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = v8;
      v12 = *(unsigned int **)(v8 + 24);
      *(_QWORD *)(v8 + 24) = v10;
      if (!v12)
        goto LABEL_77;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
      v10 = *(_QWORD *)(v8 + 24);
      if (v10)
      {
LABEL_77:
        do
          v15 = __ldaxr((unsigned int *)v10);
        while (__stlxr(v15 + 1, (unsigned int *)v10));
      }
      *(_QWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v8 + 40) = v9;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      goto LABEL_52;
    case 2:
      __break(0xC471u);
      JUMPOUT(0x19581E254);
    case 3:
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)(v8 + 16) = a2;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)v8 = off_1E3398410;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 32) = this;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      goto LABEL_52;
    case 4:
      v8 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)v8 = off_1E33983B8;
      *(_QWORD *)(v8 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 24) = this;
      v29 = *((unsigned int *)this + 5);
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 44) = v29;
      if ((_DWORD)v29)
      {
        if (v29 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19581E2BCLL);
        }
        v30 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
        *(_DWORD *)(v8 + 40) = v29;
        *(_QWORD *)(v8 + 32) = v30;
        bzero(v30, 8 * *(unsigned int *)(v8 + 44));
      }
      *(_QWORD *)v8 = off_1E3398638;
      *(_QWORD *)(v8 + 56) = 0;
      goto LABEL_39;
    case 5:
      v23 = WTF::fastMalloc((WTF *)0x28);
      v8 = v23;
      *(_DWORD *)(v23 + 8) = 1;
      *(_BYTE *)(v23 + 12) &= 0xFCu;
      v24 = off_1E3397648;
      goto LABEL_42;
    case 6:
      v23 = WTF::fastMalloc((WTF *)0x28);
      v8 = v23;
      *(_DWORD *)(v23 + 8) = 1;
      *(_BYTE *)(v23 + 12) &= 0xFCu;
      v24 = off_1E3398750;
LABEL_42:
      *(_QWORD *)v23 = v24;
      *(_QWORD *)(v23 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v23 + 24) = this;
      *(_QWORD *)(v23 + 32) = 0;
      goto LABEL_52;
    case 7:
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)v8 = off_1E3398530;
      *(_QWORD *)(v8 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 24) = this;
      v27 = *((unsigned int *)this + 5);
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 44) = v27;
      if ((_DWORD)v27)
      {
        if (v27 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19581E2B4);
        }
        v28 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
        *(_DWORD *)(v8 + 40) = v27;
        *(_QWORD *)(v8 + 32) = v28;
        bzero(v28, 8 * *(unsigned int *)(v8 + 44));
      }
LABEL_39:
      *(_QWORD *)(v8 + 48) = 0;
      goto LABEL_52;
    case 8:
      __break(0xC471u);
      JUMPOUT(0x19581E274);
    case 0xA:
      v16 = WTF::fastMalloc((WTF *)0x20);
      v8 = v16;
      *(_DWORD *)(v16 + 8) = 1;
      *(_BYTE *)(v16 + 12) &= 0xFCu;
      v17 = off_1E33986F8;
      goto LABEL_34;
    case 0xB:
      v16 = WTF::fastMalloc((WTF *)0x20);
      v8 = v16;
      *(_DWORD *)(v16 + 8) = 1;
      *(_BYTE *)(v16 + 12) &= 0xFCu;
      v17 = off_1E33975D0;
      goto LABEL_34;
    case 0xC:
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)v8 = off_1E33983B8;
      *(_QWORD *)(v8 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 24) = this;
      v25 = *((unsigned int *)this + 5);
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 44) = v25;
      if ((_DWORD)v25)
      {
        if (v25 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19581E2ACLL);
        }
        v26 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
        *(_DWORD *)(v8 + 40) = v25;
        *(_QWORD *)(v8 + 32) = v26;
        bzero(v26, 8 * *(unsigned int *)(v8 + 44));
      }
      *(_QWORD *)(v8 + 48) = 0;
      v20 = off_1E3398B80;
      goto LABEL_51;
    case 0xE:
      v16 = WTF::fastMalloc((WTF *)0x20);
      v8 = v16;
      *(_DWORD *)(v16 + 8) = 1;
      *(_BYTE *)(v16 + 12) &= 0xFCu;
      v17 = off_1E3397918;
      goto LABEL_34;
    case 0x10:
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)v8 = off_1E33983B8;
      *(_QWORD *)(v8 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 24) = this;
      v18 = *((unsigned int *)this + 5);
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 44) = v18;
      if ((_DWORD)v18)
      {
        if (v18 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19581E29CLL);
        }
        v19 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
        *(_DWORD *)(v8 + 40) = v18;
        *(_QWORD *)(v8 + 32) = v19;
        bzero(v19, 8 * *(unsigned int *)(v8 + 44));
      }
      *(_QWORD *)(v8 + 48) = 0;
      v20 = off_1E3398588;
      goto LABEL_51;
    case 0x11:
      v16 = WTF::fastMalloc((WTF *)0x20);
      v8 = v16;
      *(_DWORD *)(v16 + 8) = 1;
      *(_BYTE *)(v16 + 12) &= 0xFCu;
      v17 = off_1E33985E0;
      goto LABEL_34;
    case 0x12:
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)v8 = off_1E33983B8;
      *(_QWORD *)(v8 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 24) = this;
      v33 = *((unsigned int *)this + 5);
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 44) = v33;
      if ((_DWORD)v33)
      {
        if (v33 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19581E2CCLL);
        }
        v34 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
        *(_DWORD *)(v8 + 40) = v33;
        *(_QWORD *)(v8 + 32) = v34;
        bzero(v34, 8 * *(unsigned int *)(v8 + 44));
      }
      *(_QWORD *)(v8 + 48) = 0;
      v20 = off_1E3397560;
      goto LABEL_51;
    case 0x13:
      v16 = WTF::fastMalloc((WTF *)0x20);
      v8 = v16;
      *(_DWORD *)(v16 + 8) = 1;
      *(_BYTE *)(v16 + 12) &= 0xFCu;
      v17 = off_1E33979C8;
      goto LABEL_34;
    case 0x14:
      v16 = WTF::fastMalloc((WTF *)0x20);
      v8 = v16;
      *(_DWORD *)(v16 + 8) = 1;
      *(_BYTE *)(v16 + 12) &= 0xFCu;
      v17 = off_1E3397970;
      goto LABEL_34;
    case 0x15:
      v16 = WTF::fastMalloc((WTF *)0x20);
      v8 = v16;
      *(_DWORD *)(v16 + 8) = 1;
      *(_BYTE *)(v16 + 12) &= 0xFCu;
      v17 = off_1E33987A8;
LABEL_34:
      *(_QWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v16 + 24) = this;
      goto LABEL_52;
    case 0x16:
      v8 = WTF::fastMalloc((WTF *)0x50);
      WebCore::CSSStyleRule::CSSStyleRule(v8, this, (uint64_t)a2);
      goto LABEL_52;
    case 0x17:
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)v8 = off_1E33983B8;
      *(_QWORD *)(v8 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 24) = this;
      v31 = *((unsigned int *)this + 5);
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 44) = v31;
      if ((_DWORD)v31)
      {
        if (v31 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19581E2C4);
        }
        v32 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
        *(_DWORD *)(v8 + 40) = v31;
        *(_QWORD *)(v8 + 32) = v32;
        bzero(v32, 8 * *(unsigned int *)(v8 + 44));
      }
      *(_QWORD *)(v8 + 48) = 0;
      v20 = off_1E33989B0;
      goto LABEL_51;
    case 0x18:
      v8 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v8 + 8) = 1;
      *(_BYTE *)(v8 + 12) &= 0xFCu;
      *(_QWORD *)v8 = off_1E33983B8;
      *(_QWORD *)(v8 + 16) = a2;
      ++*(_DWORD *)this;
      *(_QWORD *)(v8 + 24) = this;
      v21 = *((unsigned int *)this + 5);
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_DWORD *)(v8 + 44) = v21;
      if ((_DWORD)v21)
      {
        if (v21 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19581E2A4);
        }
        v22 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
        *(_DWORD *)(v8 + 40) = v21;
        *(_QWORD *)(v8 + 32) = v22;
        bzero(v22, 8 * *(unsigned int *)(v8 + 44));
      }
      *(_QWORD *)(v8 + 48) = 0;
      v20 = off_1E3398A58;
LABEL_51:
      *(_QWORD *)v8 = v20;
LABEL_52:
      *a4 = v8;
      if (a3)
      {
        *(_BYTE *)(v8 + 12) |= 2u;
        *(_QWORD *)(v8 + 16) = a3;
      }
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x19581E294);
  }
}

uint64_t WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD **v56;
  _DWORD *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::CachedResource *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF *v65;
  WebCore::StyleSheetContents *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  int v69;
  WTF::StringImpl *v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  WTF *v77;
  void *v78;
  WTF::StringImpl **v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl **v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD **v91;
  _DWORD *v92;
  WTF *v93;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  unsigned int *v103;
  _DWORD *v104;
  unint64_t v105;
  unsigned int *v106;
  _DWORD *v107;
  int *v108;
  char v109;
  char v110;

  switch(*(_BYTE *)(a1 + 4) & 0x1F)
  {
    case 1:
      goto LABEL_149;
    case 2:
      goto LABEL_158;
    case 3:
      v59 = *(_QWORD *)(a1 + 64);
      if (v59)
        *(_QWORD *)(v59 + 16) = 0;
      v60 = *(_QWORD *)(a1 + 96);
      if (v60)
      {
        v61 = *(WebCore::CachedResource **)(v60 + 8);
        if (v61)
          WebCore::CachedResource::removeClient(v61, (unsigned int **)(a1 + 16));
      }
      v62 = *(WTF::StringImpl **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, a2);
        else
          *(_DWORD *)v62 -= 2;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 96), a2);
      if (*(_BYTE *)(a1 + 88))
      {
        v64 = *(unsigned int *)(a1 + 84);
        if ((_DWORD)v64)
        {
          v85 = *(WTF::StringImpl ***)(a1 + 72);
          v86 = 8 * v64;
          do
          {
            v87 = *v85;
            *v85 = 0;
            if (v87)
            {
              if (*(_DWORD *)v87 == 2)
                WTF::StringImpl::destroy(v87, v63);
              else
                *(_DWORD *)v87 -= 2;
            }
            ++v85;
            v86 -= 8;
          }
          while (v86);
        }
        v65 = *(WTF **)(a1 + 72);
        if (v65)
        {
          *(_QWORD *)(a1 + 72) = 0;
          *(_DWORD *)(a1 + 80) = 0;
          WTF::fastFree(v65, v63);
        }
      }
      v66 = *(WebCore::StyleSheetContents **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(v66, v63);
          WTF::fastFree(v77, v78);
        }
        else
        {
          --*(_DWORD *)v66;
        }
      }
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 48, v63);
      v67 = *(WTF::StringImpl **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, a2);
        else
          *(_DWORD *)v67 -= 2;
      }
      *(_QWORD *)(a1 + 16) = &off_1E33F87C8;
      v68 = *(_QWORD *)(a1 + 24);
      if (!v68)
      {
        *(_QWORD *)(a1 + 24) = 0;
        goto LABEL_158;
      }
      *(_QWORD *)(v68 + 8) = 0;
      v10 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (!v10)
        goto LABEL_158;
      v69 = *(_DWORD *)v10 - 1;
      if (*(_DWORD *)v10 != 1)
      {
LABEL_157:
        *(_DWORD *)v10 = v69;
        goto LABEL_158;
      }
      goto LABEL_89;
    case 4:
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
      v49 = *(unsigned int *)(a1 + 20);
      v12 = *(WTF::StringImpl **)(a1 + 8);
      if (!(_DWORD)v49)
        goto LABEL_100;
      v98 = 8 * v49;
      do
      {
        v99 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        if (v99)
        {
          if (*v99 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
          else
            --*v99;
        }
        v12 = (WTF::StringImpl *)((char *)v12 + 8);
        v98 -= 8;
      }
      while (v98);
      goto LABEL_224;
    case 5:
      v71 = *(int **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v71)
        goto LABEL_158;
      v108 = v71;
      v52 = *v71 - 1;
      if (v52)
        goto LABEL_144;
      v88 = v108[1];
      if ((v88 & 8) != 0)
      {
        v89 = v108[7];
        if ((_DWORD)v89)
        {
          v90 = 16 * v89;
          v91 = (_DWORD **)(*((_QWORD *)v108 + 2) + 8);
          do
          {
            v92 = *v91;
            *v91 = 0;
            if (v92)
            {
              if (*v92 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v92, a2);
              else
                *v92 -= 2;
            }
            v91 += 2;
            v90 -= 16;
          }
          while (v90);
        }
        goto LABEL_199;
      }
      if (v88 >= 0x10)
      {
        v105 = 0;
        v106 = (unsigned int *)((char *)v108 + ((v88 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v107 = (_DWORD *)(*v106 | ((unint64_t)*((unsigned __int8 *)v106 + 4) << 32));
          if (*v107 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v107, a2);
          else
            *v107 -= 2;
          ++v105;
          v106 = (unsigned int *)((char *)v106 + 5);
        }
        while (v105 < (unint64_t)v108[1] >> 4);
      }
      goto LABEL_206;
    case 6:
      v50 = a1 + 16;
      a2 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (a2)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(v50, a2);
      v51 = *(int **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v51)
        goto LABEL_158;
      v108 = v51;
      v52 = *v51 - 1;
      if (v52)
      {
LABEL_144:
        *v108 = v52;
        goto LABEL_158;
      }
      v53 = v108[1];
      if ((v53 & 8) != 0)
      {
        v54 = v108[7];
        if ((_DWORD)v54)
        {
          v55 = 16 * v54;
          v56 = (_DWORD **)(*((_QWORD *)v108 + 2) + 8);
          do
          {
            v57 = *v56;
            *v56 = 0;
            if (v57)
            {
              if (*v57 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, a2);
              else
                *v57 -= 2;
            }
            v56 += 2;
            v55 -= 16;
          }
          while (v55);
        }
LABEL_199:
        v93 = (WTF *)*((_QWORD *)v108 + 2);
        if (v108 + 8 != (int *)v93 && v93 != 0)
        {
          *((_QWORD *)v108 + 2) = 0;
          v108[6] = 0;
          WTF::fastFree(v93, a2);
        }
        v95 = *((_QWORD *)v108 + 1);
        *((_QWORD *)v108 + 1) = 0;
        if (v95)
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
      }
      else if (v53 >= 0x10)
      {
        v102 = 0;
        v103 = (unsigned int *)((char *)v108 + ((v53 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v104 = (_DWORD *)(*v103 | ((unint64_t)*((unsigned __int8 *)v103 + 4) << 32));
          if (*v104 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v104, a2);
          else
            *v104 -= 2;
          ++v102;
          v103 = (unsigned int *)((char *)v103 + 5);
        }
        while (v102 < (unint64_t)v108[1] >> 4);
      }
LABEL_206:
      v10 = (WTF::StringImpl *)v108;
      goto LABEL_89;
    case 7:
      v70 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, a2);
        else
          *(_DWORD *)v70 -= 2;
      }
      WTF::Vector<WTF::Ref<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
      goto LABEL_158;
    case 8:
      WebCore::StyleRuleKeyframe::~StyleRuleKeyframe((WebCore::StyleRuleKeyframe *)a1, a2);
      return WTF::fastFree(v58, a2);
    case 0xA:
      goto LABEL_60;
    case 0xB:
      WebCore::CSSCounterStyleDescriptors::~CSSCounterStyleDescriptors((WebCore::CSSCounterStyleDescriptors *)(a1 + 16), a2);
      goto LABEL_155;
    case 0xC:
      v24 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = *(unsigned int *)(a1 + 20);
      v12 = *(WTF::StringImpl **)(a1 + 8);
      if (!(_DWORD)v25)
        goto LABEL_100;
      v26 = 8 * v25;
      do
      {
        v27 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        if (v27)
        {
          if (*v27 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
          else
            --*v27;
        }
        v12 = (WTF::StringImpl *)((char *)v12 + 8);
        v26 -= 8;
      }
      while (v26);
      goto LABEL_224;
    case 0xE:
      v8 = *(_DWORD **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v9 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v9)
      {
        v79 = *(WTF::StringImpl ***)(a1 + 8);
        v80 = 8 * v9;
        do
        {
          v81 = *v79;
          *v79 = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, a2);
            else
              *(_DWORD *)v81 -= 2;
          }
          ++v79;
          v80 -= 8;
        }
        while (v80);
      }
      v10 = *(WTF::StringImpl **)(a1 + 8);
      if (!v10)
        goto LABEL_158;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      goto LABEL_89;
    case 0x10:
    case 0x11:
      v3 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E3399CE8[v3])(&v109, a1 + 24);
      *(_DWORD *)(a1 + 40) = -1;
      v4 = *(unsigned int *)(a1 + 20);
      v5 = *(WTF **)(a1 + 8);
      if (!(_DWORD)v4)
        goto LABEL_75;
      v6 = 8 * v4;
      do
      {
        v7 = *(_DWORD **)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
        {
          if (*v7 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
          else
            --*v7;
        }
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      goto LABEL_215;
    case 0x12:
      v30 = *(_DWORD *)(a1 + 52);
      v31 = *(unsigned int **)(a1 + 40);
      if (v30)
      {
        v32 = 88 * v30;
        do
        {
          v33 = v31[20];
          if ((_DWORD)v33 != -1)
            ((void (*)(char *, unsigned int *))off_1E3399CF8[v33])(&v110, v31);
          v31[20] = -1;
          v31 += 22;
          v32 -= 88;
        }
        while (v32);
        v31 = *(unsigned int **)(a1 + 40);
      }
      if (v31)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
        WTF::fastFree((WTF *)v31, a2);
      }
      v34 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, a2);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = *(unsigned int *)(a1 + 20);
      v5 = *(WTF **)(a1 + 8);
      if (!(_DWORD)v35)
      {
LABEL_75:
        if (!v5)
          return WTF::fastFree((WTF *)a1, a2);
        goto LABEL_216;
      }
      v96 = 8 * v35;
      do
      {
        v97 = *(_DWORD **)v5;
        *(_QWORD *)v5 = 0;
        if (v97)
        {
          if (*v97 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
          else
            --*v97;
        }
        v5 = (WTF *)((char *)v5 + 8);
        v96 -= 8;
      }
      while (v96);
LABEL_215:
      v5 = *(WTF **)(a1 + 8);
      if (v5)
      {
LABEL_216:
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        WTF::fastFree(v5, a2);
      }
      return WTF::fastFree((WTF *)a1, a2);
    case 0x13:
      v42 = *(unsigned int *)(a1 + 60);
      v43 = *(WTF **)(a1 + 48);
      if ((_DWORD)v42)
      {
        v44 = (WTF *)((char *)v43 + 16 * v42);
        do
        {
          v45 = *((_QWORD *)v43 + 1);
          if ((v45 & 0x8000000000000) != 0)
          {
            v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              atomic_store(1u, v46);
              WTF::fastFree((WTF *)v46, a2);
            }
          }
          v43 = (WTF *)((char *)v43 + 16);
        }
        while (v43 != v44);
        v43 = *(WTF **)(a1 + 48);
      }
      if (v43)
      {
        *(_QWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 56) = 0;
        WTF::fastFree(v43, a2);
      }
      v75 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v75)
      {
        v82 = *(WTF::StringImpl ***)(a1 + 16);
        v83 = 8 * v75;
        do
        {
          v84 = *v82;
          *v82 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
              WTF::StringImpl::destroy(v84, a2);
            else
              *(_DWORD *)v84 -= 2;
          }
          ++v82;
          v83 -= 8;
        }
        while (v83);
      }
      v76 = *(WTF **)(a1 + 16);
      if (v76)
      {
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 24) = 0;
        WTF::fastFree(v76, a2);
      }
      goto LABEL_155;
    case 0x14:
      v37 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v37)
      {
        v38 = 24 * v37;
        v39 = *(_QWORD *)(a1 + 16) + 8;
        do
        {
          v40 = *(WTF **)v39;
          if (*(_QWORD *)v39)
          {
            *(_QWORD *)v39 = 0;
            *(_DWORD *)(v39 + 8) = 0;
            WTF::fastFree(v40, a2);
          }
          v41 = *(WTF::StringImpl **)(v39 - 8);
          *(_QWORD *)(v39 - 8) = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, a2);
            else
              *(_DWORD *)v41 -= 2;
          }
          v39 += 24;
          v38 -= 24;
        }
        while (v38);
      }
      v10 = *(WTF::StringImpl **)(a1 + 16);
      if (!v10)
        goto LABEL_158;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      goto LABEL_89;
    case 0x15:
      v28 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      if (v28)
        WTF::RefCounted<WebCore::CSSVariableData>::deref(v28, a2);
LABEL_60:
      v29 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, a2);
        else
          *(_DWORD *)v29 -= 2;
      }
LABEL_155:
      v10 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v10)
        goto LABEL_158;
      v69 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 != 2)
        goto LABEL_157;
      WTF::StringImpl::destroy(v10, a2);
      goto LABEL_158;
    case 0x16:
      v72 = a1 + 48;
      a2 = *(WTF::StringImpl **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (a2)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(v72, a2);
      v73 = *(unsigned int *)(a1 + 44);
      v74 = *(WTF **)(a1 + 32);
      if (!(_DWORD)v73)
      {
        if (!v74)
          goto LABEL_149;
        goto LABEL_234;
      }
      v100 = 8 * v73;
      do
      {
        v101 = *(_DWORD **)v74;
        *(_QWORD *)v74 = 0;
        if (v101)
        {
          if (*v101 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
          else
            --*v101;
        }
        v74 = (WTF *)((char *)v74 + 8);
        v100 -= 8;
      }
      while (v100);
      v74 = *(WTF **)(a1 + 32);
      if (v74)
      {
LABEL_234:
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        WTF::fastFree(v74, a2);
      }
LABEL_149:
      WebCore::StyleRule::~StyleRule((WebCore::StyleRule *)a1, a2);
      return WTF::fastFree(v58, a2);
    case 0x17:
      v15 = *(unsigned int **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, a2);
        }
      }
      v18 = *(WTF::StringImpl **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (v18)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(a1 + 48, v18);
      v19 = *(WTF::StringImpl **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      if (v19)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(a1 + 40, v19);
      v20 = *(WTF::StringImpl **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      if (v20)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(a1 + 32, v20);
      a2 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (a2)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(a1 + 24, a2);
      v21 = *(unsigned int *)(a1 + 20);
      v12 = *(WTF::StringImpl **)(a1 + 8);
      if (!(_DWORD)v21)
        goto LABEL_100;
      v22 = 8 * v21;
      do
      {
        v23 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        if (v23)
        {
          if (*v23 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
          else
            --*v23;
        }
        v12 = (WTF::StringImpl *)((char *)v12 + 8);
        v22 -= 8;
      }
      while (v22);
      goto LABEL_224;
    case 0x18:
      v11 = *(unsigned int *)(a1 + 20);
      v12 = *(WTF::StringImpl **)(a1 + 8);
      if ((_DWORD)v11)
      {
        v13 = 8 * v11;
        do
        {
          v14 = *(_DWORD **)v12;
          *(_QWORD *)v12 = 0;
          if (v14)
          {
            if (*v14 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
            else
              --*v14;
          }
          v12 = (WTF::StringImpl *)((char *)v12 + 8);
          v13 -= 8;
        }
        while (v13);
LABEL_224:
        v12 = *(WTF::StringImpl **)(a1 + 8);
        if (!v12)
          goto LABEL_158;
      }
      else
      {
LABEL_100:
        if (!v12)
          goto LABEL_158;
      }
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      v10 = v12;
LABEL_89:
      WTF::fastFree(v10, a2);
LABEL_158:
      v58 = (WTF *)a1;
      return WTF::fastFree(v58, a2);
    default:
      __break(0xC471u);
      JUMPOUT(0x19581EBA8);
  }
}

uint64_t *WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v11;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v5)
      {
        v6 = 16 * v5;
        v7 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
        do
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
          {
            if (*v8 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
            else
              *v8 -= 2;
          }
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
      }
      v9 = *(WTF **)(v3 + 16);
      if ((WTF *)(v3 + 32) != v9 && v9 != 0)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v9, a2);
      }
      v11 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

_DWORD *WebCore::StyleRule::splitIntoMultipleRulesWithMaximumSelectorComponentCount@<X0>(_DWORD *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  unint64_t v6;
  WTF *v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  WebCore::CSSSelector *v18;
  WebCore::CSSSelector *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  void *v32;
  int v33;
  int v34;
  _DWORD *v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  WebCore::CSSSelector *v40;
  const WebCore::CSSSelector **v41;
  uint64_t v42;
  const WebCore::CSSSelector *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  void *__src;
  uint64_t v54;
  _BYTE v55[64];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v50 = (uint64_t)this;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  if (!v3)
    return this;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v51 = a2;
  do
  {
    v8 = 0;
    v52 = v3;
    __src = v55;
    v54 = 8;
    v9 = v3;
    do
    {
      if (v8 == (_DWORD)v54)
      {
        this = WTF::Vector<WebCore::CSSSelector const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&__src, v8 + 1, (unint64_t)&v52);
        v8 = HIDWORD(v54);
        *((_QWORD *)__src + HIDWORD(v54)) = *(_QWORD *)this;
      }
      else
      {
        *((_QWORD *)__src + v8) = v9;
      }
      HIDWORD(v54) = ++v8;
      v9 = v52 + 4;
      v10 = *v52;
      if ((*v52 & 0x80000) != 0)
        v11 = 0;
      else
        v11 = v52 + 4;
      v52 = v11;
    }
    while ((v10 & 0x80000) == 0);
    if (v5 + (unint64_t)v8 > v51 && v5)
    {
      v12 = *(_DWORD **)(v50 + 8);
      ++*v12;
      v13 = *(_BYTE *)(v50 + 4);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v5 + 16));
      *v14 = 16;
      v14[1] = v5;
      v15 = v14 + 2;
      v16 = v14 + 2;
      do
      {
        *v16 = 786433;
        v16[1] = 0;
        v16 += 2;
      }
      while (v16 != &v14[2 * v5 + 2]);
      v17 = 0;
      v18 = (WebCore::CSSSelector *)(v14 + 2);
      do
      {
        v19 = WebCore::CSSSelector::CSSSelector(v18, *(const WebCore::CSSSelector **)((char *)v7 + v17));
        v17 += 8;
        v18 = (WebCore::CSSSelector *)((char *)v19 + 16);
      }
      while (8 * v5 != v17);
      LODWORD(v15[2 * v5 - 2]) |= 0x20000u;
      v20 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v20 = 1;
      *(_BYTE *)(v20 + 4) = v13 & 0x20 | *(_BYTE *)(v20 + 4) & 0xC0 | 1;
      *(_QWORD *)(v20 + 8) = v12;
      *(_QWORD *)(v20 + 16) = v15;
      *(_QWORD *)(v20 + 24) = 0;
      v52 = (_DWORD *)v20;
      *(_WORD *)(v20 + 5) = 1;
      v21 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v21 == *(_DWORD *)(a3 + 8))
      {
        v22 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v21 + 1, (unint64_t)&v52);
        v21 = *(unsigned int *)(a3 + 12);
        v23 = *(char **)a3;
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        *(_QWORD *)&v23[8 * v21] = v24;
      }
      else
      {
        v25 = *(char **)a3;
        v52 = 0;
        *(_QWORD *)&v25[8 * v21] = v20;
      }
      *(_DWORD *)(a3 + 12) = v21 + 1;
      this = v52;
      v52 = 0;
      if (this)
      {
        if (*this == 1)
        {
          this = (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)this, a2);
          if (!v6)
          {
LABEL_24:
            v6 = 0;
            goto LABEL_27;
          }
          goto LABEL_26;
        }
        --*this;
      }
      if (!v6)
        goto LABEL_24;
LABEL_26:
      this = (_DWORD *)WTF::fastFree(v7, a2);
      v7 = 0;
      v6 = 0;
      v5 = 0;
    }
LABEL_27:
    v26 = __src;
    v27 = HIDWORD(v54);
    if (HIDWORD(v54))
    {
      v28 = HIDWORD(v54) + v5;
      if (v28 > v6)
      {
        v29 = v6 + (v6 >> 2);
        if (v29 >= 0x10)
          v30 = v29 + 1;
        else
          v30 = 16;
        if (v30 <= v28)
          v6 = HIDWORD(v54) + v5;
        else
          v6 = v30;
        if (v6 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v31 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
        v6 = v6;
        memcpy(v31, v7, 8 * v5);
        if (v7)
        {
          if (v31 == v7)
          {
            v31 = 0;
            v6 = 0;
          }
          WTF::fastFree(v7, v32);
        }
        v7 = v31;
      }
      this = memcpy((char *)v7 + 8 * v5, v26, 8 * v27);
      v5 = v28;
      v26 = __src;
    }
    if (v55 != v26 && v26)
    {
      __src = 0;
      LODWORD(v54) = 0;
      this = (_DWORD *)WTF::fastFree((WTF *)v26, a2);
    }
    do
    {
      v34 = *v3;
      v3 += 4;
      v33 = v34;
    }
    while ((v34 & 0x80000) == 0);
  }
  while ((v33 & 0x20000) == 0);
  if (!v5)
  {
    v49 = *(_DWORD *)(a3 + 12);
    if (!v49)
      goto LABEL_63;
    goto LABEL_62;
  }
  v35 = *(_DWORD **)(v50 + 8);
  ++*v35;
  v36 = *(_BYTE *)(v50 + 4);
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v5 + 16));
  *v37 = 16;
  v37[1] = v5;
  v38 = v37 + 2;
  v39 = v37 + 2;
  do
  {
    *v39 = 786433;
    v39[1] = 0;
    v39 += 2;
  }
  while (v39 != &v37[2 * v5 + 2]);
  v40 = (WebCore::CSSSelector *)(v37 + 2);
  v41 = (const WebCore::CSSSelector **)v7;
  v42 = v5;
  do
  {
    v43 = *v41++;
    v40 = (WebCore::CSSSelector *)((char *)WebCore::CSSSelector::CSSSelector(v40, v43) + 16);
    --v42;
  }
  while (v42);
  LODWORD(v38[2 * v5 - 2]) |= 0x20000u;
  this = (_DWORD *)WTF::fastMalloc((WTF *)0x20);
  *this = 1;
  *((_BYTE *)this + 4) = v36 & 0x20 | this[1] & 0xC0 | 1;
  *((_QWORD *)this + 1) = v35;
  *((_QWORD *)this + 2) = v38;
  *((_QWORD *)this + 3) = 0;
  __src = this;
  *(_WORD *)((char *)this + 5) = 1;
  v44 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v44 != *(_DWORD *)(a3 + 8))
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v44) = this;
    v49 = v44 + 1;
    *(_DWORD *)(a3 + 12) = v44 + 1;
LABEL_61:
    if (v49)
      goto LABEL_62;
    goto LABEL_63;
  }
  v45 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v44 + 1, (unint64_t)&__src);
  v46 = *(unsigned int *)(a3 + 12);
  v47 = *(char **)a3;
  v48 = *(_QWORD *)v45;
  *(_QWORD *)v45 = 0;
  *(_QWORD *)&v47[8 * v46] = v48;
  this = __src;
  v49 = v46 + 1;
  *(_DWORD *)(a3 + 12) = v46 + 1;
  __src = 0;
  if (!this)
    goto LABEL_61;
  if (*this == 1)
  {
    this = (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)this, a2);
    if (!v49)
      goto LABEL_63;
  }
  else
  {
    --*this;
    if ((_DWORD)v46 == -1)
      goto LABEL_63;
  }
LABEL_62:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + 8 * v49 - 8) + 6) = 1;
LABEL_63:
  if (v7)
    return (_DWORD *)WTF::fastFree(v7, a2);
  return this;
}

uint64_t WebCore::StyleRulePage::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 6;
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 8) = v7;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v8;
  *a3 = result;
  return result;
}

uint64_t WebCore::StyleRuleFontFeatureValuesBlock::StyleRuleFontFeatureValuesBlock(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  void *v14;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a1 + 4) & 0xC0 | 0x14;
  *(_DWORD *)(a1 + 8) = a2;
  v4 = a3[3];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >= 0xAAAAAAB)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x19581F484);
    }
    v6 = 24 * v4;
    v7 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(a1 + 24) = (v6 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a3[3];
    if ((_DWORD)v8)
    {
      v9 = (unsigned int *)(*(_QWORD *)a3 + 20);
      v10 = v7 + 16;
      v11 = 24 * v8;
      do
      {
        v12 = *(_DWORD **)(v9 - 5);
        if (v12)
          *v12 += 2;
        v13 = *v9;
        *(_QWORD *)(v10 - 8) = 0;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v10 - 16) = v12;
        *(_DWORD *)(v10 + 4) = v13;
        if ((_DWORD)v13)
        {
          if (v13 >> 30)
            goto LABEL_12;
          v14 = (void *)WTF::fastMalloc((WTF *)(4 * v13));
          *(_DWORD *)v10 = v13;
          *(_QWORD *)(v10 - 8) = v14;
          memcpy(v14, *(const void **)(v9 - 3), 4 * *v9);
        }
        v9 += 6;
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return a1;
}

uint64_t WebCore::StyleRuleSupports::StyleRuleSupports(uint64_t result, _DWORD **a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  _DWORD *v5;

  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 0xC;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v4 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(result + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(result + 20) = v4;
  v5 = *a2;
  if (*a2)
    *v5 += 2;
  *(_QWORD *)(result + 24) = v5;
  *(_BYTE *)(result + 32) = a3;
  return result;
}

uint64_t WebCore::StyleRuleSupports::create@<X0>(_DWORD **a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x28);
  result = WebCore::StyleRuleSupports::StyleRuleSupports(v8, a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t WebCore::StyleRuleCharset::StyleRuleCharset(uint64_t this)
{
  *(_DWORD *)this = 1;
  *(_BYTE *)(this + 4) = *(_BYTE *)(this + 4) & 0xC0 | 2;
  return this;
}

uint64_t WebCore::StyleRuleImport::StyleRuleImport(uint64_t result, _DWORD **a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _DWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &off_1E3399D48;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = result;
  v5 = *a2;
  if (*a2)
    *v5 += 2;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = v5;
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 56) = v6;
  v7 = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_DWORD *)(result + 60) = v7;
  *(_QWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 88) = 0;
  if (*((_BYTE *)a4 + 16))
  {
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    v8 = *a4;
    *a4 = 0;
    *(_QWORD *)(result + 72) = v8;
    LODWORD(v8) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *(_DWORD *)(result + 80) = v8;
    LODWORD(v8) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *(_DWORD *)(result + 84) = v8;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_QWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  v9 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 112) = v9;
  *(_BYTE *)(result + 120) = *((_BYTE *)a5 + 8);
  return result;
}

uint64_t WebCore::StyleRuleImport::isLoading(WebCore::StyleRuleImport *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  WebCore::StyleRuleImport **v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::StyleRuleImport *v7;

  if (*((_BYTE *)this + 104))
    return 1;
  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return 0;
  v3 = *(unsigned int *)(v2 + 68);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(WebCore::StyleRuleImport ***)(v2 + 56);
  v5 = v3 - 1;
  do
  {
    v6 = v5;
    v7 = *v4++;
    result = WebCore::StyleRuleImport::isLoading(v7);
    if ((result & 1) != 0)
      break;
    v5 = v6 - 1;
  }
  while (v6);
  return result;
}

void WebCore::StyleRuleImport::ImportedStyleSheetClient::~ImportedStyleSheetClient(WebCore::StyleRuleImport::ImportedStyleSheetClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *WebCore::StyleRuleImport::requestStyleSheet(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::StyleSheetContents *v18;
  WebCore::StyleSheetContents *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  __int128 v31;
  void *v32;
  WebCore *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  _DWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  void *v43;
  WTF::StringImpl *v44;
  WebCore::CachedResource *v45;
  void *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  _DWORD *v52;
  void *v53;
  _QWORD *v54;
  WebCore::CachedResource *v55;
  void *v56;
  void *v57;
  WebCore::StyleSheetContents *v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::CachedResource *v61;
  WebCore::CachedResourceClient *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned int *v73;
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[24];
  unsigned int **v78;
  unsigned int *v79[10];
  unsigned int v80;
  WTF::StringImpl *v81[7];
  __int128 v82;
  int v83;
  char v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  char v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD v106[2];
  WTF::StringImpl *v107;
  __int128 v108;
  __int128 v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  char v114;
  __int16 v115;
  WTF::StringImpl *v116;
  _DWORD *v117;
  char v118;
  __int128 v119;
  _DWORD *v120;
  __int16 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v1 = this[1];
  if (v1)
  {
    v2 = this;
    for (i = *(_QWORD *)(v1 + 16); i; i = *(_QWORD *)(v64 + 16))
    {
      v64 = *(_QWORD *)(i + 8);
      if (!v64)
        break;
      v1 = v64;
    }
    if (*(_DWORD *)(v1 + 212))
    {
      v4 = *(_QWORD *)(**(_QWORD **)(v1 + 200) + 96);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8);
          if (v6)
          {
            v7 = *((_QWORD *)v6 + 66);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 8);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 24);
                if (v9)
                {
                  v10 = *(_QWORD *)(v9 + 8);
                  if (v10)
                  {
                    v74 = 0;
                    WTF::URL::invalidate((WTF::URL *)&v74);
                    v11 = v2[1];
                    v13 = *(_QWORD *)(v11 + 136);
                    v12 = v11 + 136;
                    if (v13)
                      MEMORY[0x19AEA52F8](&v97, v12, v2 + 5, 0);
                    else
                      WebCore::Document::completeURL(v6, v2 + 5, (uint64_t)v6 + 848, 0, (WTF::URL *)&v97);
                    v15 = v97;
                    v97 = 0;
                    v16 = v74;
                    v74 = v15;
                    if (v16)
                    {
                      if (*(_DWORD *)v16 == 2)
                      {
                        WTF::StringImpl::destroy(v16, v14);
                        v17 = v97;
                      }
                      else
                      {
                        v17 = 0;
                        *(_DWORD *)v16 -= 2;
                      }
                    }
                    else
                    {
                      v17 = 0;
                    }
                    v75 = v98;
                    LODWORD(v98) = v98 & 0xFFFFFFFE;
                    v76 = v99;
                    v97 = 0;
                    if (v17)
                    {
                      if (*(_DWORD *)v17 == 2)
                        WTF::StringImpl::destroy(v17, v14);
                      else
                        *(_DWORD *)v17 -= 2;
                    }
                    v18 = (WebCore::StyleSheetContents *)v2[1];
                    if (v18)
                    {
                      while (1)
                      {
                        v19 = v18;
                        if ((WTF::equalIgnoringFragmentIdentifier() & 1) != 0)
                          goto LABEL_96;
                        v21 = (WTF::StringImpl *)*((_QWORD *)v19 + 3);
                        if (v21)
                          *(_DWORD *)v21 += 2;
                        v81[0] = v21;
                        WebCore::Document::completeURL(v6, v81, (uint64_t)v6 + 848, 0, (WTF::URL *)&v97);
                        v22 = WTF::equalIgnoringFragmentIdentifier();
                        v23 = v97;
                        v97 = 0;
                        if (v23)
                        {
                          if (*(_DWORD *)v23 == 2)
                            WTF::StringImpl::destroy(v23, v20);
                          else
                            *(_DWORD *)v23 -= 2;
                        }
                        v24 = v81[0];
                        v81[0] = 0;
                        if (v24)
                        {
                          if (*(_DWORD *)v24 == 2)
                          {
                            WTF::StringImpl::destroy(v24, v20);
                            if ((v22 & 1) != 0)
                              goto LABEL_96;
                            goto LABEL_31;
                          }
                          *(_DWORD *)v24 -= 2;
                        }
                        if ((v22 & 1) != 0)
                          goto LABEL_96;
LABEL_31:
                        v25 = *((_QWORD *)v19 + 2);
                        if (v25)
                        {
                          v18 = *(WebCore::StyleSheetContents **)(v25 + 8);
                          if (v18)
                            continue;
                        }
                        goto LABEL_38;
                      }
                    }
                    v19 = 0;
LABEL_38:
                    v26 = v74;
                    if (v74)
                      *(_DWORD *)v74 += 2;
                    *(_OWORD *)&v81[1] = v75;
                    *(_OWORD *)&v81[3] = v76;
                    v81[0] = v26;
                    v81[5] = 0;
                    WTF::URL::invalidate((WTF::URL *)&v81[5]);
                    v85 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v86 = v97;
                    v87 = 0u;
                    v88 = 0u;
                    v89 = 0u;
                    v90 = 0x10000;
                    v27 = v91 & 0x80 | 4;
                    v91 = v27;
                    *(_QWORD *)&v92 = 0;
                    v28 = (_DWORD *)*MEMORY[0x1E0CBF738];
                    if (*MEMORY[0x1E0CBF738])
                    {
                      *v28 += 2;
                      v27 = v91;
                    }
                    *((_QWORD *)&v92 + 1) = v28;
                    v93 = 0;
                    LOBYTE(v94) = 0;
                    BYTE4(v94) = 0;
                    v95 = v95 & 0xE0 | 5;
                    v91 = v27 | 2;
                    v96 = 0;
                    {
                      WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
                    }
                    v29 = *(_DWORD **)(v2[1] + 176);
                    if (v29)
                      *v29 += 2;
                    WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)&v97, (uint64_t *)v81);
                    v30 = v96;
                    v101 = v93;
                    v102 = v94;
                    v31 = v92;
                    v92 = 0u;
                    v100 = v31;
                    v103 = v95;
                    v93 = 0;
                    v96 = 0;
                    v104 = v30;
                    v105 = v29;
                    WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v106, (const WebCore::ResourceLoaderOptions *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options);
                    v121 = 0;
                    v122 = 0;
                    v123 = 0u;
                    WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v97, &v124);
                    v125 = 0;
                    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v81, v32);
                    v35 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v35 || (v36 = *(_QWORD *)(v35 + 96)) == 0)
                      v36 = WebCore::threadGlobalDataSlow(v33);
                    v37 = *(_DWORD ***)(v36 + 32);
                    if (!v37)
                    {
                      WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v36);
                      v37 = *(_DWORD ***)(v36 + 32);
                    }
                    v38 = *v37;
                    if (v38)
                      *v38 += 2;
                    this = (_QWORD *)v123;
                    *(_QWORD *)&v123 = v38;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                        this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v34);
                      else
                        *(_DWORD *)this -= 2;
                    }
                    v40 = v2 + 12;
                    v39 = v2[12];
                    if (v39)
                    {
                      this = *(_QWORD **)(v39 + 8);
                      if (this)
                        this = (_QWORD *)WebCore::CachedResource::removeClient((WebCore::CachedResource *)this, (unsigned int **)v2 + 2);
                    }
                    v41 = v2[1];
                    if (*(_BYTE *)(v41 + 120))
                    {
                      LOWORD(v81[0]) = 512;
                      *(_DWORD *)((char *)v81 + 2) = 0;
                      BYTE6(v81[0]) = 0;
                      memset(&v81[1], 0, 48);
                      v82 = 0u;
                      v83 = 0;
                      v84 = 1;
                      LOBYTE(v85) = 0;
                      BYTE8(v87) = 0;
                      LOWORD(v88) = 20;
                      *((_QWORD *)&v88 + 1) = 0;
                      *(_QWORD *)&v89 = 0;
                      v42 = *(unsigned __int16 *)(v41 + 187) >> 2;
                      BYTE2(v81[0]) = 2;
                      *(_DWORD *)((char *)&v88 + 2) = *(_DWORD *)((_BYTE *)&v88 + 2) & 0xF0000000 | ((v42 & 1) << 22) | 0xC080891;
                      WebCore::CachedResourceRequest::setOptions((WebCore::CachedResourceRequest *)&v97, (const WebCore::ResourceLoaderOptions *)v81);
                      v44 = (WTF::StringImpl *)*((_QWORD *)v6 + 90);
                      if (!v44)
                        v44 = (WTF::StringImpl *)WebCore::Document::ensureCachedResourceLoader(v6, v43);
                      WebCore::CachedResourceLoader::requestUserCSSStyleSheet((WebCore::CachedResourceRequest *)&v97, v44, v10, (uint64_t)v79);
                      if (v79[0])
                        v45 = (WebCore::CachedResource *)*((_QWORD *)v79[0] + 1);
                      else
                        v45 = 0;
                      WebCore::CachedResourceHandleBase::setResource(v2 + 12, v45);
                      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v79, v46);
                    }
                    else
                    {
                      LODWORD(v81[0]) = v106[0];
                      *(_DWORD *)((char *)v81 + 3) = *(_DWORD *)((char *)v106 + 3);
                      v48 = v107;
                      if (v107)
                        *(_DWORD *)v107 += 2;
                      *(_OWORD *)&v81[2] = v108;
                      *(_OWORD *)&v81[4] = v109;
                      v81[1] = v48;
                      v81[6] = v110;
                      *(_QWORD *)&v82 = 0;
                      v49 = v112;
                      DWORD2(v82) = 0;
                      HIDWORD(v82) = v112;
                      if (v112)
                      {
                        if (v112 >> 28)
                        {
                          __break(0xC471u);
                          return this;
                        }
                        v69 = WTF::fastMalloc((WTF *)(16 * v112));
                        DWORD2(v82) = v49;
                        *(_QWORD *)&v82 = v69;
                        if (v112)
                        {
                          v70 = v111;
                          v71 = v111 + 16 * v112;
                          do
                          {
                            v72 = *(_DWORD **)v70;
                            if (*(_QWORD *)v70)
                              *v72 += 2;
                            *(_QWORD *)v69 = v72;
                            *(_BYTE *)(v69 + 8) = *(_BYTE *)(v70 + 8);
                            v70 += 16;
                            v69 += 16;
                          }
                          while (v70 != v71);
                        }
                      }
                      v83 = v113;
                      v84 = v114;
                      LOBYTE(v85) = 0;
                      BYTE8(v87) = 0;
                      if (v118)
                      {
                        LOWORD(v85) = v115;
                        v50 = v116;
                        if (v116)
                          *(_DWORD *)v116 += 2;
                        v86 = v50;
                        v51 = v117;
                        if (v117)
                          *v117 += 2;
                        *(_QWORD *)&v87 = v51;
                        BYTE8(v87) = 1;
                      }
                      v88 = v119;
                      v52 = v120;
                      if (v120)
                        *v120 += 2;
                      *(_QWORD *)&v89 = v52;
                      *(_DWORD *)((char *)&v88 + 2) = *(_DWORD *)((_BYTE *)&v88 + 2) & 0xFFBFFFFF | (((*(unsigned __int16 *)(v2[1] + 187) >> 2) & 1) << 22);
                      WebCore::CachedResourceRequest::setOptions((WebCore::CachedResourceRequest *)&v97, (const WebCore::ResourceLoaderOptions *)v81);
                      v54 = (_QWORD *)*((_QWORD *)v6 + 90);
                      if (!v54)
                        v54 = (_QWORD *)WebCore::Document::ensureCachedResourceLoader(v6, v53);
                      WebCore::CachedResourceLoader::requestCSSStyleSheet((WebCore::ResourceRequest *)&v97, v54, (uint64_t)v79);
                      if (v80 || (v65 = v79[0]) == 0)
                      {
                        v55 = 0;
                        v73 = 0;
                      }
                      else
                      {
                        do
                          v66 = __ldaxr(v65);
                        while (__stlxr(v66 + 1, v65));
                        v73 = v65;
                        v67 = *((_QWORD *)v65 + 1);
                        if (v67
                          && ((v78 = &v73, ++*(_DWORD *)(v67 + 548), (v68 = *(_QWORD *)(v67 + 488)) == 0)
                           || !*(_QWORD *)(v68 + 8)
                           || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v67 + 464), (uint64_t *)&v78, (uint64_t)v77), (v65 = v73) != 0)))
                        {
                          v55 = (WebCore::CachedResource *)*((_QWORD *)v65 + 1);
                        }
                        else
                        {
                          v55 = 0;
                        }
                      }
                      WebCore::CachedResourceHandleBase::setResource(v2 + 12, v55);
                      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v73, v56);
                      if (v80 != -1)
                        (*(&off_1E3399D88 + v80))((int)v77, (WebCore::CachedResourceHandleBase *)v79);
                    }
                    WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v81, v47);
                    if (*v40 && *(_QWORD *)(*v40 + 8))
                    {
                      v58 = (WebCore::StyleSheetContents *)v2[1];
                      if (v58)
                      {
                        if (v19 == v58)
                        {
                          if (*((_BYTE *)v58 + 121))
                          {
                            v59 = WebCore::StyleSheetContents::singleOwnerNode(v19);
                            if (v59)
                              (*(void (**)(uint64_t))(*(_QWORD *)v59 + 232))(v59);
                          }
                        }
                      }
                      *((_BYTE *)v2 + 104) = 1;
                      v60 = v2[12];
                      if (v60)
                        v61 = *(WebCore::CachedResource **)(v60 + 8);
                      else
                        v61 = 0;
                      v62 = (WebCore::CachedResourceClient *)(v2 + 2);
                      if (WebCore::CachedResource::addClientToSet(v61, v62))
                        (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v61 + 88))(v61, v62);
                    }
                    else
                    {
                      v63 = v2[1];
                      if (v63)
                      {
                        *(_BYTE *)(v63 + 123) = 1;
                        WebCore::StyleSheetContents::checkLoaded(v63, v57);
                      }
                    }
                    WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v97, (WTF::StringImpl *)v57);
LABEL_96:
                    this = v74;
                    v74 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                        return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
                      else
                        *(_DWORD *)this -= 2;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::CachedResourceRequest::setOptions(WebCore::CachedResourceRequest *this, const WebCore::ResourceLoaderOptions *a2)
{
  int v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *result;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)((char *)this + 211) = *(_DWORD *)((char *)a2 + 3);
  *((_DWORD *)this + 52) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 14) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 15) = v7;
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 6);
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::CachedResourceRequest *)((char *)this + 264), (unsigned int *)a2 + 14);
  v9 = *((_BYTE *)a2 + 76);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 18);
  *((_BYTE *)this + 284) = v9;
  if (*((unsigned __int8 *)this + 312) == *((unsigned __int8 *)a2 + 104))
  {
    if (*((_BYTE *)this + 312))
    {
      *((_WORD *)this + 144) = *((_WORD *)a2 + 40);
      v10 = (_DWORD *)*((_QWORD *)a2 + 11);
      if (v10)
        *v10 += 2;
      v11 = (WTF::StringImpl *)*((_QWORD *)this + 37);
      *((_QWORD *)this + 37) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v8);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = (_DWORD *)*((_QWORD *)a2 + 12);
      if (v12)
        *v12 += 2;
      v13 = (WTF::StringImpl *)*((_QWORD *)this + 38);
      *((_QWORD *)this + 38) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v8);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  else if (*((_BYTE *)this + 312))
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    *((_BYTE *)this + 312) = 0;
  }
  else
  {
    *((_WORD *)this + 144) = *((_WORD *)a2 + 40);
    v16 = (_DWORD *)*((_QWORD *)a2 + 11);
    if (v16)
      *v16 += 2;
    *((_QWORD *)this + 37) = v16;
    v17 = (_DWORD *)*((_QWORD *)a2 + 12);
    if (v17)
      *v17 += 2;
    *((_QWORD *)this + 38) = v17;
    *((_BYTE *)this + 312) = 1;
  }
  *((_OWORD *)this + 20) = *((_OWORD *)a2 + 7);
  v18 = (_DWORD *)*((_QWORD *)a2 + 16);
  if (v18)
    *v18 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v18;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::LayerValues::~LayerValues(WebCore::LayerValues *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;

  v3 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      *v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
    else
      *v6 -= 2;
  }
  v7 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v8)
  {
    if (*v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
    else
      *v8 -= 2;
  }
  v9 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
    else
      *v9 -= 2;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    if (*v10 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
    else
      *v10 -= 2;
  }
  v11 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v11)
  {
    if (*v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
    else
      *v11 -= 2;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
    else
      *v12 -= 2;
  }
  v13 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
    else
      *v13 -= 2;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v14)
  {
    if (*v14 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, a2);
    else
      *v14 -= 2;
  }
  v15 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
  {
    if (*v15 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
    else
      *v15 -= 2;
  }
  v16 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (*v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, a2);
    else
      *v16 -= 2;
  }
  v17 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v17)
  {
    if (*v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, a2);
    else
      *v17 -= 2;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v18)
  {
    if (*v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, a2);
    else
      *v18 -= 2;
  }
  v19 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v19)
  {
    if (*v19 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, a2);
    else
      *v19 -= 2;
  }
  v20 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
  {
    if (*v20 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, a2);
    else
      *v20 -= 2;
  }
}

uint64_t WebCore::longhandValueID(int a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int16 *)(a2 + 4);
  if ((v2 & 0x100) != 0)
    return WebCore::initialValueIDForLonghand(a1);
  if (((v2 | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800) != 0)
  {
    return 0;
  }
  else if ((v2 & 0x7F) == 0x50)
  {
    return *(unsigned __int16 *)(a2 + 8);
  }
  else
  {
    return 0;
  }
}

void WebCore::ShorthandSerializer::~ShorthandSerializer(WebCore::ShorthandSerializer *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      *v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
    else
      *v6 -= 2;
  }
  v7 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
  {
    if (*v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
    else
      *v8 -= 2;
  }
  v9 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
    else
      *v9 -= 2;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v10)
  {
    if (*v10 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
    else
      *v10 -= 2;
  }
  v11 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
  {
    if (*v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
    else
      *v11 -= 2;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
    else
      *v12 -= 2;
  }
  v13 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
    else
      *v13 -= 2;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v14)
  {
    if (*v14 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, a2);
    else
      *v14 -= 2;
  }
  v15 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v15)
  {
    if (*v15 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
    else
      *v15 -= 2;
  }
  v16 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
  {
    if (*v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, a2);
    else
      *v16 -= 2;
  }
  v17 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
  {
    if (*v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, a2);
    else
      *v17 -= 2;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v18)
  {
    if (*v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, a2);
    else
      *v18 -= 2;
  }
  v19 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v19)
  {
    if (*v19 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, a2);
    else
      *v19 -= 2;
  }
  v20 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v20)
  {
    if (*v20 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, a2);
    else
      *v20 -= 2;
  }
  v21 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v21)
  {
    if (*v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, a2);
    else
      *v21 -= 2;
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_10AtomStringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS9_ISD_Lm0ESB_Lm16ESC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_10AtomStringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS9_ISD_Lm0ESB_Lm16ESC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v3 = *((unsigned int *)a2 + 3);
  v4 = *(WTF **)a2;
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((unsigned int *)v4 + 3);
      if ((_DWORD)v6)
      {
        v8 = *(WTF::StringImpl ***)v4;
        v9 = 8 * v6;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v7 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = *(WTF **)a2;
  }
  if (v4)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

uint64_t *_ZN7WebCore13StyleRuleBase12visitDerivedIZNKS0_12visitDerivedIZNKS0_4copyEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  void *v26;
  char v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _DWORD *v33;
  char v34;
  const WebCore::StyleProperties *v35;
  WebCore::MutableStyleProperties *v36;
  uint64_t v37;
  _DWORD *v38;
  char v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  char v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  const WebCore::StyleProperties *v58;
  WebCore::MutableStyleProperties *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  _DWORD *v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD **v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  _DWORD **v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;

  switch(*(_BYTE *)(a2 + 4) & 0x1F)
  {
    case 1:
      v56 = WTF::fastMalloc((WTF *)0x20);
      result = (uint64_t *)WebCore::StyleRule::StyleRule(v56, a2);
      goto LABEL_62;
    case 2:
      result = (uint64_t *)WTF::fastMalloc((WTF *)8);
      *(_DWORD *)result = 1;
      v55 = *((_BYTE *)result + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *((_BYTE *)result + 4) = v55;
      *((_BYTE *)result + 4) = v55 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      goto LABEL_62;
    case 3:
      __break(0xC471u);
      JUMPOUT(0x19582114CLL);
    case 4:
      result = WebCore::StyleRuleMedia::copy(&v79, (WebCore::StyleRuleMedia *)a2);
      *a1 = v79;
      return result;
    case 5:
      v4 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v4 = 1;
      v34 = *(_BYTE *)(v4 + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *(_BYTE *)(v4 + 4) = v34;
      *(_BYTE *)(v4 + 4) = v34 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      v35 = *(const WebCore::StyleProperties **)(a2 + 8);
      v36 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
      result = (uint64_t *)WebCore::MutableStyleProperties::MutableStyleProperties(v36, v35);
      *(_QWORD *)(v4 + 8) = result;
      goto LABEL_78;
    case 6:
      v4 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v4 = 1;
      v57 = *(_BYTE *)(v4 + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *(_BYTE *)(v4 + 4) = v57;
      *(_BYTE *)(v4 + 4) = v57 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      v58 = *(const WebCore::StyleProperties **)(a2 + 8);
      v59 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)(v4 + 8) = WebCore::MutableStyleProperties::MutableStyleProperties(v59, v58);
      v15 = (WTF::StringImpl **)(v4 + 16);
      v16 = (uint64_t *)(a2 + 16);
      goto LABEL_64;
    case 7:
      v4 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v4 = 1;
      v54 = *(_BYTE *)(v4 + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *(_BYTE *)(v4 + 4) = v54;
      *(_BYTE *)(v4 + 4) = v54 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 8, a2 + 8);
      v9 = *(_DWORD **)(a2 + 24);
      if (v9)
        *v9 += 2;
      goto LABEL_58;
    case 8:
      __break(0xC471u);
      JUMPOUT(0x19582116CLL);
    case 0xA:
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)result = 1;
      v27 = *((_BYTE *)result + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *((_BYTE *)result + 4) = v27;
      *((_BYTE *)result + 4) = v27 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      v28 = *(_DWORD **)(a2 + 8);
      if (v28)
        *v28 += 2;
      result[1] = (uint64_t)v28;
      v29 = *(_DWORD **)(a2 + 16);
      if (v29)
        *v29 += 2;
      result[2] = (uint64_t)v29;
      goto LABEL_62;
    case 0xB:
      v31 = WTF::fastMalloc((WTF *)0xC8);
      v4 = v31;
      *(_DWORD *)v31 = 1;
      v32 = *(_BYTE *)(v31 + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *(_BYTE *)(v31 + 4) = v32;
      *(_BYTE *)(v31 + 4) = v32 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      v33 = *(_DWORD **)(a2 + 8);
      if (v33)
        *v33 += 2;
      *(_QWORD *)(v31 + 8) = v33;
      result = (uint64_t *)WebCore::CSSCounterStyleDescriptors::CSSCounterStyleDescriptors((WebCore::CSSCounterStyleDescriptors *)(v31 + 16), (const WebCore::CSSCounterStyleDescriptors *)(a2 + 16));
      goto LABEL_78;
    case 0xC:
      v37 = WTF::fastMalloc((WTF *)0x28);
      result = (uint64_t *)WebCore::StyleRuleGroup::StyleRuleGroup(v37, a2);
      v38 = *(_DWORD **)(a2 + 24);
      if (v38)
        *v38 += 2;
      result[3] = (uint64_t)v38;
      *((_BYTE *)result + 32) = *(_BYTE *)(a2 + 32);
      goto LABEL_62;
    case 0xE:
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
      v4 = (uint64_t)result;
      *(_DWORD *)result = 1;
      v7 = *((_BYTE *)result + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *((_BYTE *)result + 4) = v7;
      *((_BYTE *)result + 4) = v7 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      v8 = *(unsigned int *)(a2 + 20);
      result[1] = 0;
      result[2] = 0;
      *((_DWORD *)result + 5) = v8;
      if ((_DWORD)v8)
      {
        if (v8 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1958211BCLL);
        }
        result = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v8));
        *(_DWORD *)(v4 + 16) = v8;
        *(_QWORD *)(v4 + 8) = result;
        v71 = *(unsigned int *)(a2 + 20);
        if ((_DWORD)v71)
        {
          v72 = *(_DWORD ***)(a2 + 8);
          v73 = 8 * v71;
          do
          {
            v74 = *v72;
            if (*v72)
              *v74 += 2;
            *result++ = (uint64_t)v74;
            ++v72;
            v73 -= 8;
          }
          while (v73);
        }
      }
      v9 = *(_DWORD **)(a2 + 24);
      ++v9[2];
LABEL_58:
      *(_QWORD *)(v4 + 24) = v9;
      goto LABEL_78;
    case 0x10:
    case 0x11:
      v4 = WTF::fastMalloc((WTF *)0x30);
      result = (uint64_t *)WebCore::StyleRuleGroup::StyleRuleGroup(v4, a2);
      *((_BYTE *)result + 24) = 0;
      *((_DWORD *)result + 10) = -1;
      v6 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v6 != -1)
      {
        result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *, uint64_t))off_1E3399D10[v6])(&v79, result + 3, a2 + 24);
        *(_DWORD *)(v4 + 40) = v6;
      }
      goto LABEL_78;
    case 0x12:
      v4 = WTF::fastMalloc((WTF *)0x48);
      result = (uint64_t *)WebCore::StyleRuleGroup::StyleRuleGroup(v4, a2);
      v63 = *(_DWORD **)(a2 + 24);
      if (v63)
        *v63 += 2;
      *(_QWORD *)(v4 + 24) = v63;
      *(_BYTE *)(v4 + 32) = *(_BYTE *)(a2 + 32);
      v64 = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 52) = v64;
      if (v64)
      {
        if (v64 >= 0x2E8BA2F)
        {
          __break(0xC471u);
          JUMPOUT(0x19582119CLL);
        }
        v65 = 88 * v64;
        result = (uint64_t *)WTF::fastMalloc((WTF *)(88 * v64));
        *(_DWORD *)(v4 + 48) = (v65 & 0xFFFFFFF8) / 0x58;
        *(_QWORD *)(v4 + 40) = result;
        v66 = *(_DWORD *)(a2 + 52);
        if (v66)
        {
          v67 = result;
          v68 = *(_QWORD *)(a2 + 40);
          v69 = 88 * v66;
          do
          {
            *(_BYTE *)v67 = 0;
            *((_DWORD *)v67 + 20) = -1;
            v70 = *(unsigned int *)(v68 + 80);
            if ((_DWORD)v70 != -1)
            {
              result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *, uint64_t))off_1E3399D20[v70])(&v79, v67, v68);
              *((_DWORD *)v67 + 20) = v70;
            }
            v67 += 11;
            v68 += 88;
            v69 -= 88;
          }
          while (v69);
        }
      }
      *(_DWORD *)(v4 + 56) = *(_DWORD *)(a2 + 56);
      *(_WORD *)(v4 + 64) = *(_WORD *)(a2 + 64);
      goto LABEL_78;
    case 0x13:
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x40);
      v4 = (uint64_t)result;
      *(_DWORD *)result = 1;
      v43 = *((_BYTE *)result + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *((_BYTE *)result + 4) = v43;
      *((_BYTE *)result + 4) = v43 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      v44 = *(_DWORD **)(a2 + 8);
      if (v44)
        *v44 += 2;
      result[1] = (uint64_t)v44;
      v45 = *(unsigned int *)(a2 + 28);
      result[2] = 0;
      result[3] = 0;
      *((_DWORD *)result + 7) = v45;
      if ((_DWORD)v45)
      {
        if (v45 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1958211C4);
        }
        result = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v45));
        *(_DWORD *)(v4 + 24) = v45;
        *(_QWORD *)(v4 + 16) = result;
        v75 = *(unsigned int *)(a2 + 28);
        if ((_DWORD)v75)
        {
          v76 = *(_DWORD ***)(a2 + 16);
          v77 = 8 * v75;
          do
          {
            v78 = *v76;
            if (*v76)
              *v78 += 2;
            *result++ = (uint64_t)v78;
            ++v76;
            v77 -= 8;
          }
          while (v77);
        }
      }
      v46 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
      *(_QWORD *)(v4 + 32) = v46;
      v47 = *(unsigned int *)(a2 + 60);
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      *(_DWORD *)(v4 + 60) = v47;
      if ((_DWORD)v47)
      {
        if (v47 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1958211B4);
        }
        result = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v47));
        *(_DWORD *)(v4 + 56) = v47;
        *(_QWORD *)(v4 + 48) = result;
        v48 = *(unsigned int *)(a2 + 60);
        if ((_DWORD)v48)
        {
          v49 = *(_QWORD *)(a2 + 48);
          v50 = v49 + 16 * v48;
          do
          {
            *(_DWORD *)result = *(_DWORD *)v49;
            v51 = *(_QWORD *)(v49 + 8);
            result[1] = v51;
            if ((v51 & 0x8000000000000) != 0)
            {
              v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 + 1, v52));
            }
            result += 2;
            v49 += 16;
          }
          while (v49 != v50);
        }
      }
      goto LABEL_78;
    case 0x14:
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
      v4 = (uint64_t)result;
      *(_DWORD *)result = 1;
      v17 = *((_BYTE *)result + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *((_BYTE *)result + 4) = v17;
      *((_BYTE *)result + 4) = v17 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
      v18 = *(unsigned int *)(a2 + 28);
      result[2] = 0;
      result[3] = 0;
      *((_DWORD *)result + 7) = v18;
      if ((_DWORD)v18)
      {
        if (v18 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          JUMPOUT(0x1958211ACLL);
        }
        v19 = 24 * v18;
        result = (uint64_t *)WTF::fastMalloc((WTF *)(24 * v18));
        *(_DWORD *)(v4 + 24) = (v19 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)(v4 + 16) = result;
        v20 = *(unsigned int *)(a2 + 28);
        if ((_DWORD)v20)
        {
          v21 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 20);
          v22 = result + 2;
          v23 = 24 * v20;
          do
          {
            v24 = *(_DWORD **)(v21 - 5);
            if (v24)
              *v24 += 2;
            *(v22 - 2) = (uint64_t)v24;
            v25 = *v21;
            *(v22 - 1) = 0;
            *v22 = 0;
            *((_DWORD *)v22 + 1) = v25;
            if ((_DWORD)v25)
            {
              if (v25 >> 30)
              {
                __break(0xC471u);
                JUMPOUT(0x195821194);
              }
              v26 = (void *)WTF::fastMalloc((WTF *)(4 * v25));
              *(_DWORD *)v22 = v25;
              *(v22 - 1) = (uint64_t)v26;
              result = (uint64_t *)memcpy(v26, *(const void **)(v21 - 3), 4 * *v21);
            }
            v21 += 6;
            v22 += 3;
            v23 -= 24;
          }
          while (v23);
        }
      }
      goto LABEL_78;
    case 0x15:
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)result = 1;
      v39 = *((_BYTE *)result + 4) & 0xE0 | *(_BYTE *)(a2 + 4) & 0x1F;
      *((_BYTE *)result + 4) = v39;
      *((_BYTE *)result + 4) = v39 & 0xDF | *(_BYTE *)(a2 + 4) & 0x20;
      v40 = *(_DWORD **)(a2 + 8);
      if (v40)
        *v40 += 2;
      result[1] = (uint64_t)v40;
      v41 = *(_DWORD **)(a2 + 16);
      if (v41)
        *v41 += 2;
      result[2] = (uint64_t)v41;
      *((_WORD *)result + 12) = *(_WORD *)(a2 + 24);
      v42 = *(_DWORD **)(a2 + 32);
      if (v42)
        ++*v42;
      result[4] = (uint64_t)v42;
      goto LABEL_62;
    case 0x16:
      v4 = WTF::fastMalloc((WTF *)0x38);
      v10 = WebCore::StyleRule::StyleRule(v4, a2);
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      v11 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v11)
      {
        if (v11 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1958211A4);
        }
        v12 = WTF::fastMalloc((WTF *)(8 * v11));
        *(_DWORD *)(v4 + 40) = v11;
        *(_QWORD *)(v4 + 32) = v12;
        if (*(_DWORD *)(a2 + 44))
        {
          v13 = 0;
          do
          {
            _ZN7WebCore13StyleRuleBase12visitDerivedIZNKS0_12visitDerivedIZNKS0_4copyEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v79, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v13));
            v14 = *(unsigned int *)(v4 + 44);
            *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v14) = v79;
            *(_DWORD *)(v4 + 44) = v14 + 1;
            ++v13;
          }
          while (v13 < *(unsigned int *)(a2 + 44));
        }
      }
      v15 = (WTF::StringImpl **)(v4 + 48);
      v16 = (uint64_t *)(a2 + 48);
LABEL_64:
      result = (uint64_t *)WebCore::CSSSelectorList::CSSSelectorList(v15, v16);
      goto LABEL_78;
    case 0x17:
      v4 = WTF::fastMalloc((WTF *)0x40);
      v60 = WebCore::StyleRuleGroup::StyleRuleGroup(v4, a2);
      WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v60 + 24), (uint64_t *)(a2 + 24));
      WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v4 + 32), (uint64_t *)(a2 + 32));
      WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v4 + 40), (uint64_t *)(a2 + 40));
      result = (uint64_t *)WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v4 + 48), (uint64_t *)(a2 + 48));
      v61 = *(unsigned int **)(a2 + 56);
      if (v61)
      {
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 + 1, v61));
      }
      *(_QWORD *)(v4 + 56) = v61;
LABEL_78:
      *a1 = v4;
      break;
    case 0x18:
      v30 = WTF::fastMalloc((WTF *)0x18);
      result = (uint64_t *)WebCore::StyleRuleGroup::StyleRuleGroup(v30, a2);
LABEL_62:
      *a1 = result;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19582118CLL);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_10AtomStringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS9_ISD_Lm0ESB_Lm16ESC_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = v3;
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v4;
      *(_QWORD *)a2 = v5;
      v6 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v6)
      {
        v7 = *(_DWORD ***)a3;
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          if (*v7)
            *v9 += 2;
          *v5++ = v9;
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_10AtomStringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS9_ISD_Lm0ESB_Lm16ESC_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;

  v3 = *((unsigned int *)a3 + 3);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 28)
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x1958213B0);
    }
    v6 = WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(a2 + 8) = v3;
    *(_QWORD *)a2 = v6;
    v7 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a3;
      v9 = v8 + 16 * v7;
      do
      {
        v10 = *(unsigned int *)(v8 + 12);
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 12) = v10;
        if ((_DWORD)v10)
        {
          v16 = v6;
          if (v10 >> 29)
            goto LABEL_16;
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
          v6 = v16;
          *(_DWORD *)(v16 + 8) = v10;
          *(_QWORD *)v16 = v11;
          v12 = *(unsigned int *)(v8 + 12);
          if ((_DWORD)v12)
          {
            v13 = *(_DWORD ***)v8;
            v14 = 8 * v12;
            do
            {
              v15 = *v13;
              if (*v13)
                *v15 += 2;
              *v11++ = v15;
              ++v13;
              v14 -= 8;
            }
            while (v14);
          }
        }
        v6 += 16;
        v8 += 16;
      }
      while (v8 != v9);
    }
  }
}

uint64_t WebCore::StyleRuleImport::ImportedStyleSheetClient::setCSSStyleSheet(WebCore::StyleRuleImport::ImportedStyleSheetClient *this, const WTF::String *a2, const WTF::URL *a3, WTF::StringImpl **a4, const WebCore::CachedCSSStyleSheet *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  char v13;
  char v14;
  char v15;
  int v16;
  int v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  WebCore::StyleSheetContents *v34;
  uint64_t v35;
  WebCore::StyleSheetContents *v36;
  const WebCore::SecurityOrigin *v37;
  const WebCore::SecurityOrigin *v38;
  uint64_t result;
  void *v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  char **v53;
  char *v54;

  v7 = *((_QWORD *)this + 2);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8)
    *(_QWORD *)(v8 + 16) = 0;
  v9 = *(_QWORD *)(v7 + 8);
  if (v9)
  {
    v10 = *(WTF::StringImpl **)(v9 + 136);
    if (v10)
      *(_DWORD *)v10 += 2;
    v11 = *(_OWORD *)(v9 + 160);
    v50 = *(_OWORD *)(v9 + 144);
    v51 = v11;
    v12 = *(WTF::StringImpl **)(v9 + 176);
    if (v12)
      *(_DWORD *)v12 += 2;
    v13 = *(_BYTE *)(v9 + 184);
    v14 = *(_BYTE *)(v9 + 185);
    v15 = *(_BYTE *)(v9 + 186);
    v16 = *(unsigned __int16 *)(v9 + 187) | (*(unsigned __int8 *)(v9 + 189) << 16);
    v17 = *(_DWORD *)(v9 + 190);
  }
  else
  {
    v47 = 0;
    WTF::URL::invalidate((WTF::URL *)&v47);
    v10 = v47;
    if (v47)
      *(_DWORD *)v47 += 2;
    v50 = v48;
    v51 = v49;
    v18 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v18 != -1)
    {
      v54 = &v52;
      v53 = &v54;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v53, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v17 = 0;
    v16 = 0;
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
  }
  v20 = *a4;
  if (v20)
    *(_DWORD *)v20 += 2;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v21 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
  {
    *(_DWORD *)v21 += 2;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v22 = *(_OWORD *)((char *)a3 + 24);
    v50 = *(_OWORD *)((char *)a3 + 8);
    v51 = v22;
  }
  else
  {
    v21 = v10;
  }
  v23 = *(_QWORD *)(v7 + 8);
  if (!v23)
    goto LABEL_34;
  for (i = *(_QWORD *)(v23 + 16); i; i = *(_QWORD *)(v44 + 16))
  {
    v44 = *(_QWORD *)(i + 8);
    if (!v44)
      break;
    v23 = v44;
  }
  if (*(_DWORD *)(v23 + 212)
    && (v25 = *(_QWORD *)(**(_QWORD **)(v23 + 200) + 96)) != 0
    && (v26 = *(_QWORD *)(v25 + 8)) != 0)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8);
  }
  else
  {
LABEL_34:
    v27 = 0;
  }
  v28 = WTF::fastMalloc((WTF *)0xD8);
  *(_DWORD *)v28 = 1;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = v7;
  v30 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v30 += 2;
  *(_QWORD *)(v28 + 24) = v30;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_OWORD *)(v28 + 48) = 0u;
  *(_OWORD *)(v28 + 64) = 0u;
  *(_OWORD *)(v28 + 80) = 0u;
  *(_OWORD *)(v28 + 96) = 0u;
  v31 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(v28 + 112) = v31;
  if (v7)
  {
    v32 = *(_QWORD *)(v7 + 8);
    if (v32)
      LOBYTE(v32) = *(_BYTE *)(v32 + 120) != 0;
  }
  else
  {
    LOBYTE(v32) = 0;
  }
  *(_BYTE *)(v28 + 120) = v32;
  *(_WORD *)(v28 + 121) = 256;
  *(_QWORD *)(v28 + 123) = 0;
  *(_BYTE *)(v28 + 131) = 0;
  if (v21)
    *(_DWORD *)v21 += 2;
  *(_QWORD *)(v28 + 136) = v21;
  v33 = v51;
  *(_OWORD *)(v28 + 144) = v50;
  *(_OWORD *)(v28 + 160) = v33;
  if (v20)
    *(_DWORD *)v20 += 2;
  *(_QWORD *)(v28 + 176) = v20;
  *(_BYTE *)(v28 + 184) = v13;
  *(_BYTE *)(v28 + 185) = v14;
  *(_BYTE *)(v28 + 186) = v15;
  *(_WORD *)(v28 + 187) = v16;
  *(_BYTE *)(v28 + 189) = BYTE2(v16);
  *(_DWORD *)(v28 + 190) = v17;
  *(_QWORD *)(v28 + 200) = 0;
  *(_QWORD *)(v28 + 208) = 0;
  v34 = *(WebCore::StyleSheetContents **)(v7 + 64);
  *(_QWORD *)(v7 + 64) = v28;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v34, v29);
      WTF::fastFree(v42, v43);
    }
    else
    {
      --*(_DWORD *)v34;
    }
  }
  v35 = *(_QWORD *)(v7 + 8);
  if (v35 && (*(_WORD *)(v35 + 187) & 4) != 0 || !WebCore::CachedResource::isCORSSameOrigin(a5))
    *(_WORD *)(*(_QWORD *)(v7 + 64) + 187) |= 4u;
  v36 = *(WebCore::StyleSheetContents **)(v7 + 64);
  if (v27)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v27 + 192), (WTF::StringImpl *)v29);
    v38 = v37;
  }
  else
  {
    v38 = 0;
  }
  result = WebCore::StyleSheetContents::parseAuthorStyleSheet(v36, a5, v38);
  *(_BYTE *)(v7 + 104) = 0;
  v41 = *(_QWORD *)(v7 + 8);
  if (v41)
  {
    if ((_DWORD)result)
    {
      *(_BYTE *)(v41 + 123) |= (*(_WORD *)((char *)a5 + 557) >> 5) - 3 < 2;
      *(_BYTE *)(v41 + 123) |= WebCore::CachedCSSStyleSheet::mimeTypeAllowedByNosniff(a5) ^ 1;
      v41 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      *(_BYTE *)(v41 + 123) = 1;
    }
    result = WebCore::StyleSheetContents::checkLoaded(v41, v40);
  }
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      result = WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v40);
      if (!v21)
        return result;
      goto LABEL_64;
    }
    *(_DWORD *)v20 -= 2;
  }
  if (!v21)
    return result;
LABEL_64:
  if (*(_DWORD *)v21 == 2)
    return WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v40);
  *(_DWORD *)v21 -= 2;
  return result;
}

WTF *WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, unsigned int *a2)
{
  WTF *v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _DWORD *v26;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *((unsigned int *)result + 3);
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = (WTF::StringImpl **)(*(_QWORD *)result + 16 * v5);
    v7 = 16 * v4 - 16 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    *((_DWORD *)v2 + 3) = v5;
    goto LABEL_26;
  }
  v9 = *((_DWORD *)result + 2);
  if (v5 <= v9)
    goto LABEL_25;
  if (v9)
  {
    if ((_DWORD)v4)
    {
      v10 = *(WTF::StringImpl ***)result;
      v11 = 16 * v4;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v10 += 2;
        v11 -= 16;
      }
      while (v11);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  v13 = a2[3];
  if (*((_DWORD *)v2 + 2) >= v13)
  {
LABEL_25:
    v5 = *((unsigned int *)v2 + 3);
LABEL_26:
    v17 = *(_QWORD *)a2;
    v18 = *(WTF **)v2;
    if ((_DWORD)v5)
    {
      v19 = v17 + 16 * v5;
      do
      {
        v20 = *(_DWORD **)v17;
        if (*(_QWORD *)v17)
          *v20 += 2;
        v21 = *(WTF::StringImpl **)v18;
        *(_QWORD *)v18 = v20;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v21 -= 2;
        }
        *((_BYTE *)v18 + 8) = *(_BYTE *)(v17 + 8);
        v17 += 16;
        v18 = (WTF *)((char *)v18 + 16);
      }
      while (v17 != v19);
      v17 = *(_QWORD *)a2;
      v22 = *((_DWORD *)v2 + 3);
      v18 = *(WTF **)v2;
    }
    else
    {
      v22 = 0;
    }
    v23 = a2[3];
    if (v22 != (_DWORD)v23)
    {
      v24 = (char *)v18 + 16 * v22;
      v25 = v17 + 16 * v22;
      do
      {
        v26 = *(_DWORD **)v25;
        if (*(_QWORD *)v25)
          *v26 += 2;
        *(_QWORD *)v24 = v26;
        v24[8] = *(_BYTE *)(v25 + 8);
        v25 += 16;
        v24 += 16;
      }
      while (v25 != v17 + 16 * v23);
    }
    *((_DWORD *)v2 + 3) = v23;
    return v2;
  }
  if (!(v13 >> 28))
  {
    v14 = *(WTF **)v2;
    v15 = *((unsigned int *)v2 + 3);
    v16 = (void *)WTF::fastMalloc((WTF *)(16 * v13));
    *((_DWORD *)v2 + 2) = v13;
    *(_QWORD *)v2 = v16;
    memcpy(v16, v14, 16 * v15);
    if (v14)
    {
      if (*(WTF **)v2 == v14)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v14, a2);
    }
    goto LABEL_25;
  }
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_19CachedCSSStyleSheetEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_19CachedCSSStyleSheetEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void **WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 5)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 4;
    }
    else
    {
      if (v5 >> 30)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 4 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Element *,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

_DWORD *WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      if (v10 < 9)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_30;
      }
      if (!(v10 >> 30))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 4 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195821E44);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 9)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, uint64_t a2, _BYTE *__src, unsigned int a4, uint64_t a5)
{
  _BYTE *v8;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  unsigned __int128 *v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned __int128 v21;
  char v22;
  char v23;

  v8 = __dst;
  if (a2)
  {
    v10 = *(_BYTE **)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        if ((_DWORD)v11 == 1)
          *__dst = *v10;
        else
          __dst = memcpy(__dst, v10, v11);
      }
    }
    else
    {
      if (v11 < 0x10)
      {
        v16 = (unsigned __int128 *)__dst;
      }
      else
      {
        v16 = (unsigned __int128 *)&__dst[v11 & 0xFFFFFFF0];
        v17 = (unsigned __int128 *)__dst;
        do
        {
          v18 = (unsigned __int128)vld2q_s8(v10);
          v10 += 32;
          *v17++ = v18;
        }
        while (v17 != v16);
      }
      while (v16 != (unsigned __int128 *)&__dst[v11])
      {
        v23 = *v10;
        v10 += 2;
        *(_BYTE *)v16 = v23;
        v16 = (unsigned __int128 *)((char *)v16 + 1);
      }
    }
    v12 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v8[v12];
  if (a4)
  {
    if (a4 == 1)
      *v13 = *__src;
    else
      __dst = memcpy(v13, __src, a4);
  }
  if (a5)
  {
    __dst = &v13[a4];
    v14 = *(_BYTE **)(a5 + 8);
    v15 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v15)
      {
        if ((_DWORD)v15 == 1)
          *__dst = *v14;
        else
          return memcpy(__dst, v14, v15);
      }
    }
    else
    {
      v19 = &__dst[v15];
      if (v15 >= 0x10)
      {
        v20 = &__dst[v15 & 0xFFFFFFF0];
        do
        {
          v21 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *(_OWORD *)__dst = v21;
          __dst += 16;
        }
        while (__dst != v20);
        __dst = v20;
      }
      while (__dst != v19)
      {
        v22 = *v14;
        v14 += 2;
        *__dst++ = v22;
      }
    }
  }
  return __dst;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, unsigned int a5@<W4>, _OWORD *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  _WORD *v21;
  int8x16_t *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  int8x16_t v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;
  char *v47;
  char *v48;
  __int128 v49;
  int8x16_t v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  char *v55;
  __int16 v56;
  unsigned __int128 *v57;
  unsigned __int128 *v58;
  unsigned __int128 v59;
  char v60;
  uint64_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v61;
        if (!v61)
          goto LABEL_52;
        v16 = (_BYTE *)(v61 + 20);
        *(_DWORD *)v61 = 2;
        *(_DWORD *)(v61 + 4) = v13;
        *(_QWORD *)(v61 + 8) = v61 + 20;
        *(_DWORD *)(v61 + 16) = 4;
        if (a3)
        {
          v17 = *(_BYTE **)(a3 + 8);
          v18 = *(unsigned int *)(a3 + 4);
          if ((*(_BYTE *)(a3 + 16) & 4) != 0)
          {
            if ((_DWORD)v18)
            {
              if ((_DWORD)v18 == 1)
                *v16 = *v17;
              else
                result = (uint64_t)memcpy((void *)(v61 + 20), v17, v18);
            }
          }
          else
          {
            if (v18 < 0x10)
            {
              v57 = (unsigned __int128 *)(v61 + 20);
            }
            else
            {
              v57 = (unsigned __int128 *)&v16[v18 & 0xFFFFFFF0];
              v58 = (unsigned __int128 *)(v61 + 20);
              do
              {
                v59 = (unsigned __int128)vld2q_s8(v17);
                v17 += 32;
                *v58++ = v59;
              }
              while (v58 != v57);
            }
            while (v57 != (unsigned __int128 *)&v16[v18])
            {
              v60 = *v17;
              v17 += 2;
              *(_BYTE *)v57 = v60;
              v57 = (unsigned __int128 *)((char *)v57 + 1);
            }
          }
          v19 = *(unsigned int *)(a3 + 4);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v16[v19];
        if (a5)
        {
          if (a5 == 1)
          {
            *v20 = *(_BYTE *)a4;
            if (!a7)
              goto LABEL_52;
LABEL_15:
            result = (uint64_t)&v20[a5];
            if (a7 == 1)
              *(_BYTE *)result = *(_BYTE *)a6;
            else
              result = (uint64_t)memcpy((void *)result, a6, a7);
            goto LABEL_52;
          }
          result = (uint64_t)memcpy(&v16[v19], a4, a5);
        }
        if (!a7)
          goto LABEL_52;
        goto LABEL_15;
      }
LABEL_54:
      v15 = 0;
      goto LABEL_52;
    }
LABEL_53:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_52;
  }
  if (!(_DWORD)result)
    goto LABEL_53;
  if (result > 0x7FFFFFEF)
    goto LABEL_54;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v61;
  if (v61)
  {
    v21 = (_WORD *)(v61 + 20);
    *(_DWORD *)v61 = 2;
    *(_DWORD *)(v61 + 4) = v13;
    *(_QWORD *)(v61 + 8) = v61 + 20;
    *(_DWORD *)(v61 + 16) = 0;
    if (a3)
    {
      v22 = *(int8x16_t **)(a3 + 8);
      v23 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v24 = (char *)&v21[v23];
        if (v23 >= 0x40)
        {
          v25 = (char *)&v21[v23 & 0xFFFFFFC0];
          v27 = 0uLL;
          v28 = (char *)(v61 + 20);
          do
          {
            v62.val[0] = *v22;
            v29 = v22[1];
            v65.val[0] = v22[2];
            v30 = v22[3];
            v22 += 4;
            v31 = v30;
            v65.val[1] = 0uLL;
            v68.val[0] = v29;
            v62.val[1] = 0uLL;
            v32 = v28;
            vst2q_s8(v32, v62);
            v32 += 32;
            v68.val[1] = 0uLL;
            vst2q_s8(v32, v68);
            v33 = v28 + 64;
            vst2q_s8(v33, v65);
            v34 = v28 + 96;
            vst2q_s8(v34, *(int8x16x2_t *)(&v27 - 1));
            v28 += 128;
          }
          while (v28 != v25);
        }
        else
        {
          v25 = (char *)(v61 + 20);
        }
        while (v25 != v24)
        {
          v35 = v22->u8[0];
          v22 = (int8x16_t *)((char *)v22 + 1);
          *(_WORD *)v25 = v35;
          v25 += 2;
        }
      }
      else if ((_DWORD)v23 == 1)
      {
        *v21 = v22->i16[0];
      }
      else if ((_DWORD)v23)
      {
        result = (uint64_t)memcpy((void *)(v61 + 20), v22, 2 * v23);
      }
      v26 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v26 = 0;
    }
    v36 = (char *)&v21[v26];
    v37 = &v36[2 * a5];
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      v38 = &v36[2 * (a5 & 0xFFFFFFC0)];
      v39 = 0uLL;
      do
      {
        v63.val[0] = (int8x16_t)*a4;
        v40 = *((int8x16_t *)a4 + 1);
        v66.val[0] = (int8x16_t)a4[2];
        v41 = a4[3];
        a4 += 4;
        v42 = v41;
        v66.val[1] = 0uLL;
        v69.val[0] = v40;
        v63.val[1] = 0uLL;
        v43 = v36;
        vst2q_s8(v43, v63);
        v43 += 32;
        v69.val[1] = 0uLL;
        vst2q_s8(v43, v69);
        v44 = v36 + 64;
        vst2q_s8(v44, v66);
        v45 = v36 + 96;
        vst2q_s8(v45, *(int8x16x2_t *)(&v39 - 1));
        v36 += 128;
      }
      while (v36 != v38);
      v36 = v38;
    }
    while (v36 != v37)
    {
      v46 = *(unsigned __int8 *)a4;
      a4 = (_OWORD *)((char *)a4 + 1);
      *(_WORD *)v36 = v46;
      v36 += 2;
    }
    v47 = &v37[2 * a7];
    if ((a7 & 0xFFFFFFC0) != 0)
    {
      v48 = &v37[2 * (a7 & 0xFFFFFFC0)];
      v49 = 0uLL;
      do
      {
        v64.val[0] = (int8x16_t)*a6;
        v50 = *((int8x16_t *)a6 + 1);
        v67.val[0] = (int8x16_t)a6[2];
        v51 = a6[3];
        a6 += 4;
        v52 = v51;
        v67.val[1] = 0uLL;
        v70.val[0] = v50;
        v64.val[1] = 0uLL;
        v53 = v37;
        vst2q_s8(v53, v64);
        v53 += 32;
        v70.val[1] = 0uLL;
        vst2q_s8(v53, v70);
        v54 = v37 + 64;
        vst2q_s8(v54, v67);
        v55 = v37 + 96;
        vst2q_s8(v55, *(int8x16x2_t *)(&v49 - 1));
        v37 += 128;
      }
      while (v37 != v48);
      v37 = v48;
    }
    while (v37 != v47)
    {
      v56 = *(unsigned __int8 *)a6;
      a6 = (_OWORD *)((char *)a6 + 1);
      *(_WORD *)v37 = v56;
      v37 += 2;
    }
  }
LABEL_52:
  *a8 = v15;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  int8x16_t *v7;
  uint64_t v8;
  unsigned int v9;
  int8x16_t *v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;

  v7 = *(int8x16_t **)result;
  v8 = *(_QWORD *)(result + 8);
  if (v8)
  {
    v9 = v8 - 1;
    if ((unint64_t)(v8 - 1) >> 31)
      goto LABEL_23;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(int8x16_t **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195822428);
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = *(int8x16_t **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  if (!v14)
  {
    v15 = 0;
    goto LABEL_7;
  }
  v15 = v14 - 1;
  if ((unint64_t)(v14 - 1) >> 31)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1958223FCLL);
  }
LABEL_7:
  v16 = *a4;
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 4);
    if (v17 < 0)
    {
LABEL_17:
      *a5 = 0;
      return result;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = __OFADD__(v15, v17);
  v19 = v15 + v17;
  if (v18)
    goto LABEL_17;
  v18 = __OFADD__(v12, v19);
  v20 = v12 + v19;
  if (v18)
    goto LABEL_17;
  result = v9 + v20;
  if (__OFADD__(v9, v20))
    goto LABEL_17;
  if (v16)
    v21 = (*(unsigned __int8 *)(v16 + 16) >> 2) & 1;
  else
    v21 = 1;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v21, v7, v9, v10, v12, v13, v15, a5, v16);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, int8x16_t *a7@<X6>, unsigned int a8@<W7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  unsigned __int128 v26;
  char v27;
  uint64_t v29;

  v16 = result;
  v17 = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v18 = v29;
        if (!v29)
          goto LABEL_37;
        v19 = (_BYTE *)(v29 + 20);
        *(_DWORD *)v29 = 2;
        *(_DWORD *)(v29 + 4) = v16;
        *(_QWORD *)(v29 + 8) = v29 + 20;
        *(_DWORD *)(v29 + 16) = 4;
        if (a4)
        {
          if (a4 == 1)
            *v19 = a3->i8[0];
          else
            result = (uint64_t)memcpy((void *)(v29 + 20), a3, a4);
        }
        v20 = &v19[a4];
        v17 = a9;
        if (a6)
        {
          if (a6 == 1)
            *v20 = a5->i8[0];
          else
            result = (uint64_t)memcpy(v20, a5, a6);
        }
        v21 = &v20[a6];
        if (a8)
        {
          if (a8 == 1)
          {
            *v21 = a7->i8[0];
            if (!a10)
              goto LABEL_23;
LABEL_15:
            result = (uint64_t)&v21[a8];
            v22 = *(_BYTE **)(a10 + 8);
            v23 = *(unsigned int *)(a10 + 4);
            if ((*(_BYTE *)(a10 + 16) & 4) != 0)
            {
              if ((_DWORD)v23)
              {
                if ((_DWORD)v23 == 1)
                  *(_BYTE *)result = *v22;
                else
                  result = (uint64_t)memcpy((void *)result, v22, v23);
              }
              goto LABEL_23;
            }
            v24 = result + v23;
            if (v23 >= 0x10)
            {
              v25 = result + (v23 & 0xFFFFFFF0);
              do
              {
                v26 = (unsigned __int128)vld2q_s8(v22);
                v22 += 32;
                *(_OWORD *)result = v26;
                result += 16;
              }
              while (result != v25);
              result = v25;
            }
            while (result != v24)
            {
              v27 = *v22;
              v22 += 2;
              *(_BYTE *)result++ = v27;
            }
LABEL_37:
            v17 = a9;
            goto LABEL_23;
          }
          result = (uint64_t)memcpy(v21, a7, a8);
        }
        if (!a10)
          goto LABEL_23;
        goto LABEL_15;
      }
LABEL_30:
      v18 = 0;
      goto LABEL_23;
    }
LABEL_29:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_23;
  }
  if (!(_DWORD)result)
    goto LABEL_29;
  if (result > 0x7FFFFFEF)
    goto LABEL_30;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v18 = v29;
  if (v29)
  {
    *(_DWORD *)v29 = 2;
    *(_DWORD *)(v29 + 4) = v16;
    *(_QWORD *)(v29 + 8) = v29 + 20;
    *(_DWORD *)(v29 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v29 + 20), a3, a4, a5, a6, a7, a8, a10);
  }
LABEL_23:
  *v17 = v18;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, int8x16_t *a4, int a5, int8x16_t *a6, int a7, uint64_t a8)
{
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  char *v18;
  char *v19;
  __int128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *result;
  char *v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  int8x16_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v8 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v9 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v10 = 0uLL;
    do
    {
      v50.val[0] = *a2;
      v11 = a2[1];
      v54.val[0] = a2[2];
      v12 = a2[3];
      a2 += 4;
      v13 = v12;
      v54.val[1] = 0uLL;
      v58.val[0] = v11;
      v50.val[1] = 0uLL;
      v14 = a1;
      vst2q_s8(v14, v50);
      v14 += 32;
      v58.val[1] = 0uLL;
      vst2q_s8(v14, v58);
      v15 = a1 + 64;
      vst2q_s8(v15, v54);
      v16 = a1 + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      a1 += 128;
    }
    while (a1 != v9);
    a1 = v9;
  }
  while (a1 != v8)
  {
    v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v17;
    a1 += 2;
  }
  v18 = &v8[2 * a5];
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    v19 = &v8[2 * (a5 & 0xFFFFFFC0)];
    v20 = 0uLL;
    do
    {
      v51.val[0] = *a4;
      v21 = a4[1];
      v55.val[0] = a4[2];
      v22 = a4[3];
      a4 += 4;
      v23 = v22;
      v55.val[1] = 0uLL;
      v59.val[0] = v21;
      v51.val[1] = 0uLL;
      v24 = v8;
      vst2q_s8(v24, v51);
      v24 += 32;
      v59.val[1] = 0uLL;
      vst2q_s8(v24, v59);
      v25 = v8 + 64;
      vst2q_s8(v25, v55);
      v26 = v8 + 96;
      vst2q_s8(v26, *(int8x16x2_t *)(&v20 - 1));
      v8 += 128;
    }
    while (v8 != v19);
    v8 = v19;
  }
  while (v8 != v18)
  {
    v27 = a4->u8[0];
    a4 = (int8x16_t *)((char *)a4 + 1);
    *(_WORD *)v8 = v27;
    v8 += 2;
  }
  result = &v18[2 * a7];
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    v29 = &v18[2 * (a7 & 0xFFFFFFC0)];
    v30 = 0uLL;
    do
    {
      v52.val[0] = *a6;
      v31 = a6[1];
      v56.val[0] = a6[2];
      v32 = a6[3];
      a6 += 4;
      v33 = v32;
      v56.val[1] = 0uLL;
      v60.val[0] = v31;
      v52.val[1] = 0uLL;
      v34 = v18;
      vst2q_s8(v34, v52);
      v34 += 32;
      v60.val[1] = 0uLL;
      vst2q_s8(v34, v60);
      v35 = v18 + 64;
      vst2q_s8(v35, v56);
      v36 = v18 + 96;
      vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
      v18 += 128;
    }
    while (v18 != v29);
    v18 = v29;
  }
  while (v18 != result)
  {
    v37 = a6->u8[0];
    a6 = (int8x16_t *)((char *)a6 + 1);
    *(_WORD *)v18 = v37;
    v18 += 2;
  }
  if (a8)
  {
    v38 = *(int8x16_t **)(a8 + 8);
    v39 = *(unsigned int *)(a8 + 4);
    if ((*(_BYTE *)(a8 + 16) & 4) != 0)
    {
      v40 = &result[2 * v39];
      if (v39 >= 0x40)
      {
        v41 = &result[2 * (v39 & 0xFFFFFFC0)];
        v42 = 0uLL;
        do
        {
          v53.val[0] = *v38;
          v43 = v38[1];
          v57.val[0] = v38[2];
          v44 = v38[3];
          v38 += 4;
          v45 = v44;
          v57.val[1] = 0uLL;
          v61.val[0] = v43;
          v53.val[1] = 0uLL;
          v46 = result;
          vst2q_s8(v46, v53);
          v46 += 32;
          v61.val[1] = 0uLL;
          vst2q_s8(v46, v61);
          v47 = result + 64;
          vst2q_s8(v47, v57);
          v48 = result + 96;
          vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
          result += 128;
        }
        while (result != v41);
        result = v41;
      }
      while (result != v40)
      {
        v49 = v38->u8[0];
        v38 = (int8x16_t *)((char *)v38 + 1);
        *(_WORD *)result = v49;
        result += 2;
      }
    }
    else if ((_DWORD)v39 == 1)
    {
      *(_WORD *)result = v38->i16[0];
    }
    else if ((_DWORD)v39)
    {
      return (char *)memcpy(result, v38, 2 * v39);
    }
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, _BYTE *a2, uint64_t *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  _WORD *result;
  uint64_t v10;
  __int16 v11;
  _WORD *v12;
  int8x16_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  unsigned __int128 *v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  char v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0 || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *a3;
      v11 = *a4;
      *result = (char)*a2;
      v12 = result + 1;
      if (v10)
      {
        v13 = *(int8x16_t **)(v10 + 8);
        v14 = *(unsigned int *)(v10 + 4);
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        {
          v21 = (char *)&v12[v14];
          if (v14 >= 0x40)
          {
            v22 = (char *)&v12[v14 & 0xFFFFFFC0];
            v24 = 0uLL;
            v25 = (char *)(result + 1);
            do
            {
              v37.val[0] = *v13;
              v26 = v13[1];
              v38.val[0] = v13[2];
              v27 = v13[3];
              v13 += 4;
              v28 = v27;
              v38.val[1] = 0uLL;
              v39.val[0] = v26;
              v37.val[1] = 0uLL;
              v29 = v25;
              vst2q_s8(v29, v37);
              v29 += 32;
              v39.val[1] = 0uLL;
              vst2q_s8(v29, v39);
              v30 = v25 + 64;
              vst2q_s8(v30, v38);
              v31 = v25 + 96;
              vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
              v25 += 128;
            }
            while (v25 != v22);
          }
          else
          {
            v22 = (char *)(result + 1);
          }
          while (v22 != v21)
          {
            v32 = v13->u8[0];
            v13 = (int8x16_t *)((char *)v13 + 1);
            *(_WORD *)v22 = v32;
            v22 += 2;
          }
        }
        else if ((_DWORD)v14 == 1)
        {
          *v12 = v13->i16[0];
        }
        else if ((_DWORD)v14)
        {
          result = memcpy(result + 1, v13, 2 * v14);
        }
        v23 = *(unsigned int *)(v10 + 4);
      }
      else
      {
        v23 = 0;
      }
      v12[v23] = v11;
    }
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v15 = *a3;
      v16 = *a4;
      *(_BYTE *)result = *a2;
      v17 = (char *)result + 1;
      if (v15)
      {
        v18 = *(_BYTE **)(v15 + 8);
        v19 = *(unsigned int *)(v15 + 4);
        if ((*(_BYTE *)(v15 + 16) & 4) != 0)
        {
          if ((_DWORD)v19)
          {
            if ((_DWORD)v19 == 1)
              *v17 = *v18;
            else
              result = memcpy((char *)result + 1, v18, v19);
          }
        }
        else
        {
          if (v19 < 0x10)
          {
            v33 = (unsigned __int128 *)((char *)result + 1);
          }
          else
          {
            v33 = (unsigned __int128 *)&v17[v19 & 0xFFFFFFF0];
            v34 = (unsigned __int128 *)((char *)result + 1);
            do
            {
              v35 = (unsigned __int128)vld2q_s8(v18);
              v18 += 32;
              *v34++ = v35;
            }
            while (v34 != v33);
          }
          while (v33 != (unsigned __int128 *)&v17[v19])
          {
            v36 = *v18;
            v18 += 2;
            *(_BYTE *)v33 = v36;
            v33 = (unsigned __int128 *)((char *)v33 + 1);
          }
        }
        v20 = *(unsigned int *)(v15 + 4);
      }
      else
      {
        v20 = 0;
      }
      v17[v20] = v16;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSPropertyID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 2 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::CSSPropertyID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v9 >> 31))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 2 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::CSSPropertyID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 5)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 4;
    goto LABEL_11;
  }
  if (!(v5 >> 31))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 2 * v8);
    if ((void *)(v6 + 16) != v7 && v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, char a7)
{
  char *v11;
  char *v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  int8x16_t *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int16 v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;

  v11 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v12 = &result[2 * (a3 & 0xFFFFFFC0)];
    v13 = 0uLL;
    do
    {
      v46.val[0] = *a2;
      v14 = a2[1];
      v49.val[0] = a2[2];
      v15 = a2[3];
      a2 += 4;
      v16 = v15;
      v49.val[1] = 0uLL;
      v52.val[0] = v14;
      v46.val[1] = 0uLL;
      v17 = result;
      vst2q_s8(v17, v46);
      v17 += 32;
      v52.val[1] = 0uLL;
      vst2q_s8(v17, v52);
      v18 = result + 64;
      vst2q_s8(v18, v49);
      v19 = result + 96;
      vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
      result += 128;
    }
    while (result != v12);
    result = v12;
  }
  while (result != v11)
  {
    v20 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v20;
    result += 2;
  }
  if (a4)
  {
    v21 = *(int8x16_t **)(a4 + 8);
    v22 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v23 = &v11[2 * v22];
      if (v22 >= 0x40)
      {
        v24 = &v11[2 * (v22 & 0xFFFFFFC0)];
        v26 = 0uLL;
        v27 = v11;
        do
        {
          v47.val[0] = *v21;
          v28 = v21[1];
          v50.val[0] = v21[2];
          v29 = v21[3];
          v21 += 4;
          v30 = v29;
          v50.val[1] = 0uLL;
          v53.val[0] = v28;
          v47.val[1] = 0uLL;
          v31 = v27;
          vst2q_s8(v31, v47);
          v31 += 32;
          v53.val[1] = 0uLL;
          vst2q_s8(v31, v53);
          v32 = v27 + 64;
          vst2q_s8(v32, v50);
          v33 = v27 + 96;
          vst2q_s8(v33, *(int8x16x2_t *)(&v26 - 1));
          v27 += 128;
        }
        while (v27 != v24);
      }
      else
      {
        v24 = v11;
      }
      while (v24 != v23)
      {
        v34 = v21->u8[0];
        v21 = (int8x16_t *)((char *)v21 + 1);
        *(_WORD *)v24 = v34;
        v24 += 2;
      }
    }
    else if ((_DWORD)v22 == 1)
    {
      *(_WORD *)v11 = v21->i16[0];
    }
    else if ((_DWORD)v22)
    {
      result = (char *)memcpy(v11, v21, 2 * v22);
    }
    v25 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v25 = 0;
  }
  v35 = &v11[2 * v25];
  v36 = &v35[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v37 = &v35[2 * (a6 & 0xFFFFFFC0)];
    v38 = 0uLL;
    do
    {
      v48.val[0] = *a5;
      v39 = a5[1];
      v51.val[0] = a5[2];
      v40 = a5[3];
      a5 += 4;
      v41 = v40;
      v51.val[1] = 0uLL;
      v54.val[0] = v39;
      v48.val[1] = 0uLL;
      v42 = v35;
      vst2q_s8(v42, v48);
      v42 += 32;
      v54.val[1] = 0uLL;
      vst2q_s8(v42, v54);
      v43 = v35 + 64;
      vst2q_s8(v43, v51);
      v44 = v35 + 96;
      vst2q_s8(v44, *(int8x16x2_t *)(&v38 - 1));
      v35 += 128;
    }
    while (v35 != v37);
    v35 = v37;
  }
  while (v35 != v36)
  {
    v45 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v35 = v45;
    v35 += 2;
  }
  *(_WORD *)v36 = a7;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StyleProperties::mayDependOnBaseURL(void)::$_0,WTF::IterationStatus,WebCore::CSSValue &>::call(uint64_t a1, uint64_t a2)
{
  if (!((uint64_t (*)(uint64_t))WebCore::CSSValue::mayDependOnBaseURL)(a2))
    return WebCore::CSSValue::visitChildren(a2, *(_QWORD **)(a1 + 16));
  **(_BYTE **)(a1 + 8) = 1;
  return 1;
}

char *WTF::Vector<WebCore::CSSSelector const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 9)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 8;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195823020);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 9)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 8;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

_QWORD *WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::StyleRuleGroup::StyleRuleGroup(WebCore::StyleRuleGroup const&)::$_0>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;

  *result = 0;
  result[1] = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v2));
      *((_DWORD *)v4 + 2) = v2;
      *v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v5 = result;
        v6 = 0;
        do
        {
          result = _ZN7WebCore13StyleRuleBase12visitDerivedIZNKS0_12visitDerivedIZNKS0_4copyEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v7, *(_QWORD *)(*(_QWORD *)a2 + 8 * v6));
          v5[v6] = v7;
          *((_DWORD *)v4 + 3) = ++v6;
        }
        while (v6 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

uint64_t WebCore::StyleSheetContents::StyleSheetContents(uint64_t result, uint64_t a2, _DWORD **a3, uint64_t a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  _DWORD *v9;
  uint64_t v10;

  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  v4 = *a3;
  if (*a3)
    *v4 += 2;
  *(_QWORD *)(result + 24) = v4;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  v5 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(result + 112) = v5;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
      LOBYTE(v6) = *(_BYTE *)(v6 + 120) != 0;
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  *(_BYTE *)(result + 120) = v6;
  *(_WORD *)(result + 121) = 256;
  *(_QWORD *)(result + 123) = 0;
  *(_BYTE *)(result + 131) = 0;
  v7 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v7 += 2;
  *(_QWORD *)(result + 136) = v7;
  v8 = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(result + 144) = *(_OWORD *)(a4 + 8);
  *(_OWORD *)(result + 160) = v8;
  v9 = *(_DWORD **)(a4 + 40);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(result + 176) = v9;
  v10 = *(_QWORD *)(a4 + 48);
  *(_WORD *)(result + 192) = *(_WORD *)(a4 + 56);
  *(_QWORD *)(result + 184) = v10;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  return result;
}

{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  _DWORD *v9;
  uint64_t v10;

  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  v4 = *a3;
  if (*a3)
    *v4 += 2;
  *(_QWORD *)(result + 24) = v4;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  v5 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(result + 112) = v5;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
      LOBYTE(v6) = *(_BYTE *)(v6 + 120) != 0;
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  *(_BYTE *)(result + 120) = v6;
  *(_WORD *)(result + 121) = 256;
  *(_QWORD *)(result + 123) = 0;
  *(_BYTE *)(result + 131) = 0;
  v7 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v7 += 2;
  *(_QWORD *)(result + 136) = v7;
  v8 = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(result + 144) = *(_OWORD *)(a4 + 8);
  *(_OWORD *)(result + 160) = v8;
  v9 = *(_DWORD **)(a4 + 40);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(result + 176) = v9;
  v10 = *(_QWORD *)(a4 + 48);
  *(_WORD *)(result + 192) = *(_WORD *)(a4 + 56);
  *(_QWORD *)(result + 184) = v10;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  return result;
}

WebCore::StyleSheetContents *WebCore::StyleSheetContents::StyleSheetContents(WebCore::StyleSheetContents *this, const WebCore::StyleSheetContents *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  __int128 v44;
  _DWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  _DWORD *v58;
  void *v60;
  uint64_t v61;
  char v62;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 3) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v5)
    *v5 += 2;
  v6 = *((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  v7 = (_QWORD *)((char *)this + 40);
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1958237D8);
    }
    v8 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
    *((_DWORD *)this + 12) = v6;
    *((_QWORD *)this + 5) = v8;
    bzero(v8, 8 * *((unsigned int *)this + 13));
  }
  v9 = *((unsigned int *)a2 + 17);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 17) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1958237E0);
    }
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *((_DWORD *)this + 16) = v9;
    *((_QWORD *)this + 7) = v10;
    bzero(v10, 8 * *((unsigned int *)this + 17));
  }
  v11 = *((unsigned int *)a2 + 21);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 21) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1958237E8);
    }
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)this + 20) = v11;
    *((_QWORD *)this + 9) = v12;
    bzero(v12, 8 * *((unsigned int *)this + 21));
  }
  v13 = *((unsigned int *)a2 + 25);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v14 = (_QWORD *)((char *)this + 88);
  *((_DWORD *)this + 25) = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 29)
    {
      __break(0xC471u);
      goto LABEL_101;
    }
    v60 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)this + 24) = v13;
    *((_QWORD *)this + 11) = v60;
    bzero(v60, 8 * *((unsigned int *)this + 25));
  }
  *((_QWORD *)this + 13) = 0;
  v15 = *((_QWORD *)a2 + 13);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 12);
    if ((_DWORD)v16)
    {
      v17 = (v16 - 1) | ((v16 - 1) >> 1) | ((((_DWORD)v16 - 1) | ((v16 - 1) >> 1)) >> 2);
      v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
      v19 = (v18 | HIWORD(v18)) + 1;
      if (v19 > 0x400)
      {
        if (v19 > 2 * v16)
          goto LABEL_22;
      }
      else if (3 * v19 > 4 * v16)
      {
LABEL_20:
        v20 = (double)v16;
        v21 = (double)v19;
        v22 = 0.604166667;
        goto LABEL_23;
      }
      LODWORD(v19) = 2 * v19;
      if (v19 <= 0x400)
        goto LABEL_20;
LABEL_22:
      v20 = (double)v16;
      v21 = (double)v19;
      v22 = 0.416666667;
LABEL_23:
      if (v21 * v22 <= v20)
        LODWORD(v19) = 2 * v19;
      if (v19 <= 8)
        v23 = 8;
      else
        v23 = v19;
      v24 = WTF::fastZeroedMalloc((WTF *)(16 * v23 + 16));
      *((_QWORD *)this + 13) = v24 + 16;
      *(_DWORD *)(v24 + 12) = v23;
      *(_DWORD *)(*((_QWORD *)this + 13) - 8) = v23 - 1;
      *(_DWORD *)(*((_QWORD *)this + 13) - 12) = v16;
      *(_DWORD *)(*((_QWORD *)this + 13) - 16) = 0;
      v26 = *((_QWORD *)a2 + 13);
      if (v26)
      {
        v27 = *(unsigned int *)(v26 - 4);
        v28 = (_QWORD *)(v26 + 16 * v27);
        if (*(_DWORD *)(v26 - 12))
        {
          v29 = (_QWORD *)*((_QWORD *)a2 + 13);
          if ((_DWORD)v27)
          {
            v30 = 16 * v27;
            v29 = (_QWORD *)*((_QWORD *)a2 + 13);
            while ((unint64_t)(*v29 + 1) <= 1)
            {
              v29 += 2;
              v30 -= 16;
              if (!v30)
              {
                v29 = v28;
                goto LABEL_37;
              }
            }
          }
          goto LABEL_37;
        }
        v29 = (_QWORD *)(v26 + 16 * v27);
      }
      else
      {
        v29 = 0;
        v27 = 0;
      }
      v28 = (_QWORD *)(v26 + 16 * v27);
LABEL_37:
      if (v26)
        v31 = (_QWORD *)(v26 + 16 * *(unsigned int *)(v26 - 4));
      else
        v31 = 0;
      while (v29 != v31)
      {
        v32 = *((_QWORD *)this + 13);
        if (v32)
          v33 = *(_DWORD *)(v32 - 8);
        else
          v33 = 0;
        v34 = 0;
        v35 = (_DWORD *)*v29;
        v36 = *(_DWORD *)(*v29 + 16) >> 8;
        do
        {
          v37 = v36 & v33;
          v36 = ++v34 + v37;
        }
        while (*(_QWORD *)(v32 + 16 * v37));
        if (v35)
          *v35 += 2;
        v38 = (_QWORD *)(v32 + 16 * v37);
        *v38 = v35;
        v39 = (_DWORD *)v29[1];
        if (v39)
          *v39 += 2;
        v40 = (WTF::StringImpl *)v38[1];
        v38[1] = v39;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v25);
          else
            *(_DWORD *)v40 -= 2;
        }
        v41 = v29 + 2;
        v29 = v28;
        if (v41 != v28)
        {
          v29 = v41;
          while ((unint64_t)(*v29 + 1) <= 1)
          {
            v29 += 2;
            if (v29 == v28)
            {
              v29 = v28;
              break;
            }
          }
        }
      }
    }
  }
  v42 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v42)
    *v42 += 2;
  *((_QWORD *)this + 14) = v42;
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)this + 121) = 1;
  *((_BYTE *)this + 122) = *((_BYTE *)a2 + 122);
  *((_BYTE *)this + 123) = 0;
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)this + 125) = 0;
  *((_WORD *)this + 63) = *((_WORD *)a2 + 63);
  *((_DWORD *)this + 32) = 0;
  v43 = (_DWORD *)*((_QWORD *)a2 + 17);
  if (v43)
    *v43 += 2;
  *((_QWORD *)this + 17) = v43;
  v44 = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = v44;
  v45 = (_DWORD *)*((_QWORD *)a2 + 22);
  if (v45)
    *v45 += 2;
  *((_QWORD *)this + 22) = v45;
  v46 = *((_QWORD *)a2 + 23);
  *((_WORD *)this + 96) = *((_WORD *)a2 + 96);
  *((_QWORD *)this + 23) = v46;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  if (*((_DWORD *)this + 13))
  {
    v47 = 0;
    while (v47 < *((unsigned int *)a2 + 13))
    {
      v48 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * v47);
      v49 = WTF::fastMalloc((WTF *)0x30);
      v50 = WebCore::StyleRuleGroup::StyleRuleGroup(v49, v48);
      *(_BYTE *)(v50 + 24) = 0;
      v51 = (WTF::StringImpl *)(v50 + 24);
      *(_DWORD *)(v50 + 40) = -1;
      v52 = *(unsigned int *)(v48 + 40);
      if ((_DWORD)v52 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, uint64_t))off_1E3399DC0[v52])(&v62, v51, v48 + 24);
        *(_DWORD *)(v49 + 40) = v52;
      }
      v53 = *((unsigned int *)this + 13);
      if (v47 >= v53)
      {
        __break(0xC471u);
        JUMPOUT(0x1958237C0);
      }
      v54 = *(_DWORD **)(*v7 + 8 * v47);
      *(_QWORD *)(*v7 + 8 * v47) = v49;
      if (v54)
      {
        if (*v54 == 1)
        {
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v54, v51);
          v53 = *((unsigned int *)this + 13);
        }
        else
        {
          --*v54;
        }
      }
      if (++v47 >= v53)
        goto LABEL_78;
    }
    __break(0xC471u);
LABEL_101:
    JUMPOUT(0x1958237B8);
  }
LABEL_78:
  if (*((_DWORD *)this + 25))
  {
    v55 = 0;
    do
    {
      if (v55 >= *((unsigned int *)a2 + 25))
      {
        __break(0xC471u);
        JUMPOUT(0x1958237C8);
      }
      _ZN7WebCore13StyleRuleBase12visitDerivedIZNKS0_12visitDerivedIZNKS0_4copyEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v61, *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v55));
      v57 = *((unsigned int *)this + 25);
      if (v55 >= v57)
      {
        __break(0xC471u);
        JUMPOUT(0x1958237D0);
      }
      v58 = *(_DWORD **)(*v14 + 8 * v55);
      *(_QWORD *)(*v14 + 8 * v55) = v61;
      if (v58)
      {
        if (*v58 == 1)
        {
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v58, v56);
          v57 = *((unsigned int *)this + 25);
        }
        else
        {
          --*v58;
        }
      }
      ++v55;
    }
    while (v55 < v57);
  }
  return this;
}

BOOL WebCore::StyleSheetContents::isCacheable(WebCore::StyleSheetContents *this)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (*((_DWORD *)this + 17)
    || *((_DWORD *)this + 21)
    || *((_QWORD *)this + 2)
    || !*((_BYTE *)this + 121)
    || *((_BYTE *)this + 123)
    || *((_BYTE *)this + 125)
    || !*((_BYTE *)this + 122))
  {
    return 0;
  }
  if (!*((_BYTE *)this + 127))
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3399DE0;
    v5 = v3;
    *((_WORD *)this + 63) = WebCore::traverseRulesInVector((uint64_t)this + 88, &v5) | 0x100;
    v4 = v5;
    v5 = 0;
    if (v4)
    {
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
      if (!*((_BYTE *)this + 127))
      {
        __break(1u);
        return 0;
      }
    }
  }
  return *((_BYTE *)this + 126) == 0;
}

void **WebCore::StyleSheetContents::parserAppendRule(void **this, _DWORD **a2)
{
  void **v2;
  _BYTE *v3;
  char v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  WTF::StringImpl *v32[2];
  WTF::StringImpl *v33;

  v2 = this;
  v3 = *a2;
  v4 = *((_BYTE *)*a2 + 4);
  if ((v4 & 0x1E) == 0x10
    && !*((_DWORD *)this + 17)
    && !*((_DWORD *)this + 25)
    && (v4 & 0x1F) == 0x11
    && *((_DWORD *)this + 21) == 0)
  {
    v24 = *((unsigned int *)this + 13);
    if ((_DWORD)v24 == *((_DWORD *)this + 12))
      return (void **)WTF::Vector<WTF::Ref<WebCore::StyleRuleLayer,WTF::RawPtrTraits<WebCore::StyleRuleLayer>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRuleLayer&>((uint64_t)(this + 5), *a2);
    v31 = this[5];
    ++*(_DWORD *)v3;
    v31[v24] = v3;
    *((_DWORD *)this + 13) = v24 + 1;
    return this;
  }
  v5 = v4 & 0x1F;
  if (v5 <= 2)
  {
    if (v5 == 1)
    {
      v6 = *((_QWORD *)v3 + 2);
LABEL_5:
      if (v6)
      {
        v7 = -8193;
        do
        {
          v8 = *(_BYTE *)(v6 + 2);
          v6 += 16;
          ++v7;
        }
        while ((v8 & 2) == 0);
        if (v7 <= 0xFFFFDFFE)
        {
          WebCore::StyleRule::splitIntoMultipleRulesWithMaximumSelectorComponentCount(*a2, (WTF::StringImpl *)0x2000, (uint64_t)v32);
          WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::StyleRule,WTF::RawPtrTraits<WebCore::StyleRule>,WTF::DefaultRefDerefTraits<WebCore::StyleRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)(v2 + 11), (uint64_t)v32);
          return (void **)WTF::Vector<WTF::Ref<WebCore::StyleRule,WTF::RawPtrTraits<WebCore::StyleRule>,WTF::DefaultRefDerefTraits<WebCore::StyleRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v28);
        }
      }
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if (v5 == 10)
  {
    v18 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    if (v18)
      *(_DWORD *)v18 += 2;
    v32[0] = v18;
    v19 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
    if (v19)
      *(_DWORD *)v19 += 2;
    v33 = v19;
    WebCore::StyleSheetContents::parserAddNamespace((WebCore::StyleSheetContents *)this, (const WTF::AtomString *)v32, (const WTF::AtomString *)&v33);
    v21 = v33;
    v33 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    this = (void **)v32[0];
    v32[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (void **)WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
      else
        *(_DWORD *)this -= 2;
    }
    v22 = *((unsigned int *)v2 + 21);
    if ((_DWORD)v22 == *((_DWORD *)v2 + 20))
    {
      return WTF::Vector<WTF::Ref<WebCore::StyleRuleNamespace,WTF::RawPtrTraits<WebCore::StyleRuleNamespace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleNamespace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRuleNamespace&>((uint64_t)(v2 + 9), v3);
    }
    else
    {
      v27 = v2[9];
      ++*(_DWORD *)v3;
      v27[v22] = v3;
      *((_DWORD *)v2 + 21) = v22 + 1;
    }
  }
  else
  {
    if (v5 != 3)
    {
      if (v5 == 22)
      {
        v6 = *((_QWORD *)v3 + 2);
        if (v6)
        {
          v12 = -8193;
          v13 = *((_QWORD *)v3 + 2);
          do
          {
            v14 = *(_BYTE *)(v13 + 2);
            v13 += 16;
            ++v12;
          }
          while ((v14 & 2) == 0);
          if (v12 < 0xFFFFDFFF)
            return this;
          goto LABEL_5;
        }
      }
LABEL_9:
      v9 = *((unsigned int *)this + 25);
      if ((_DWORD)v9 == *((_DWORD *)this + 24))
      {
        this = (void **)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(this + 11), v9 + 1, (unint64_t)a2);
        v15 = *((unsigned int *)v2 + 25);
        v10 = v15 + 1;
        v16 = v2[11];
        v17 = *this;
        *this = 0;
        v16[v15] = v17;
      }
      else
      {
        v10 = v9 + 1;
        v11 = this[11];
        *a2 = 0;
        v11[v9] = v3;
      }
      *((_DWORD *)v2 + 25) = v10;
      return this;
    }
    v25 = *((unsigned int *)this + 17);
    if ((_DWORD)v25 == *((_DWORD *)this + 16))
    {
      this = (void **)WTF::Vector<WTF::Ref<WebCore::StyleRuleLayer,WTF::RawPtrTraits<WebCore::StyleRuleLayer>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRuleLayer&>((uint64_t)(this + 7), *a2);
      v26 = *((_DWORD *)v2 + 17);
    }
    else
    {
      v26 = v25 + 1;
      v29 = this[7];
      ++*(_DWORD *)v3;
      v29[v25] = v3;
      *((_DWORD *)this + 17) = v25 + 1;
    }
    if (v26)
    {
      v30 = (uint64_t)v2[7] + 8 * v26;
      *(_QWORD *)(*(_QWORD *)(v30 - 8) + 8) = v2;
      return (void **)WebCore::StyleRuleImport::requestStyleSheet(*(_QWORD **)(v30 - 8));
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::StyleRule,WTF::RawPtrTraits<WebCore::StyleRule>,WTF::DefaultRefDerefTraits<WebCore::StyleRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = *(unsigned int *)(a2 + 12) + v5;
  if (v6 > v4)
  {
    v7 = v4 + (v4 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6)
      v9 = *(unsigned int *)(a2 + 12) + v5;
    else
      v9 = v8;
    if (v9 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v10 = *(void **)result;
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)v3 = v11;
    result = (uint64_t)memcpy(v11, v10, 8 * v5);
    if (v10)
    {
      if (*(void **)v3 == v10)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v10, v12);
    }
  }
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(uint64_t **)a2;
    v15 = *(_DWORD *)(v3 + 12);
    v16 = 8 * v13;
    do
    {
      v17 = *(_QWORD *)v3;
      v18 = *v14;
      *v14++ = 0;
      *(_QWORD *)(v17 + 8 * v15++) = v18;
      v16 -= 8;
    }
    while (v16);
    *(_DWORD *)(v3 + 12) = v15;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRule,WTF::RawPtrTraits<WebCore::StyleRule>,WTF::DefaultRefDerefTraits<WebCore::StyleRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*v6 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
        else
          --*v6;
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebCore::StyleSheetContents::wrapperInsertRule(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4;
  uint64_t v6;
  unsigned int v7;
  const void **v9;
  WTF *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  int v37;
  unint64_t v38;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;

  v4 = a2;
  v6 = *(unsigned int *)(a1 + 52);
  if (v6 <= a3 || *(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 84))
    goto LABEL_22;
  v7 = *(_BYTE *)(*(_QWORD *)a2 + 4) & 0x1F;
  if ((*(_BYTE *)(*(_QWORD *)a2 + 4) & 0x1E) == 0x10)
  {
    v67 = v7 > 0x11;
    v68 = (1 << v7) & 0x20408;
    if (!v67 && v68 != 0)
      goto LABEL_22;
  }
  else if (v7 == 3 || v7 == 10)
  {
    goto LABEL_22;
  }
  v9 = (const void **)(a1 + 88);
  v10 = *(WTF **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(unsigned int *)(a1 + 100);
  v12 = v11 + v6;
  if (v11 + v6 > *(unsigned int *)(a1 + 96))
  {
    WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v11 + v6);
    v11 = *(unsigned int *)(a1 + 100);
    if (v12 < v11)
      goto LABEL_114;
  }
  v13 = (char *)*v9;
  v14 = &v13[8 * v6];
  v15 = 8 * v6;
  memmove(v14, v13, 8 * v11);
  v17 = 0;
  do
  {
    v18 = *(_DWORD **)((char *)v10 + v17);
    ++*v18;
    *(_QWORD *)&v13[v17] = v18;
    v17 += 8;
  }
  while (v15 != v17);
  v19 = 0;
  *(_DWORD *)(a1 + 100) = v12;
  do
  {
    v20 = *(_DWORD **)((char *)v10 + v19);
    *(_QWORD *)((char *)v10 + v19) = 0;
    if (v20)
    {
      if (*v20 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v20, v16);
      else
        --*v20;
    }
    v19 += 8;
  }
  while (v15 != v19);
  if (v10)
    WTF::fastFree(v10, v16);
LABEL_22:
  v21 = a3;
  v22 = *(unsigned int *)(a1 + 52);
  if (a3 >= v22)
  {
    v23 = *(_QWORD *)v4;
    if ((_DWORD)v22 != a3)
      goto LABEL_38;
    v24 = *(_BYTE *)(v23 + 4);
    if ((v24 & 0x1E) != 0x10)
      goto LABEL_38;
  }
  else
  {
    v23 = *(_QWORD *)v4;
    v24 = *(_BYTE *)(*(_QWORD *)v4 + 4);
  }
  if ((v24 & 0x1E) != 0x10)
    return 0;
  if ((v24 & 0x1F) != 0x11)
  {
    if (a3 < v22)
      return 0;
LABEL_38:
    v32 = a3 - v22;
    v33 = *(unsigned int *)(a1 + 68);
    if (v32 < v33)
    {
      v34 = *(_BYTE *)(v23 + 4);
LABEL_48:
      if ((v34 & 0x1F) != 3)
        return 0;
      if ((_DWORD)v33 != *(_DWORD *)(a1 + 64))
      {
LABEL_97:
        v64 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v32);
        memmove(v64 + 1, v64, 8 * *(unsigned int *)(a1 + 68) - 8 * v32);
        ++*(_DWORD *)v23;
        *v64 = v23;
        v65 = *(_DWORD *)(a1 + 68) + 1;
        *(_DWORD *)(a1 + 68) = v65;
        if (v65 <= v32)
        {
          __break(0xC471u);
          JUMPOUT(0x195824258);
        }
        v66 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(*(_QWORD *)(v66 + 8 * v32) + 8) = a1;
        WebCore::StyleRuleImport::requestStyleSheet(*(_QWORD **)(v66 + 8 * v32));
        return 1;
      }
      v58 = v33 + (v33 >> 2);
      if (v58 >= 0x10)
        v59 = v58 + 1;
      else
        v59 = 16;
      if (v59 <= v33 + 1)
        v60 = v33 + 1;
      else
        v60 = v59;
      if (!(v60 >> 29))
      {
        v61 = *(void **)(a1 + 56);
        v62 = (void *)WTF::fastMalloc((WTF *)(8 * v60));
        *(_DWORD *)(a1 + 64) = v60;
        *(_QWORD *)(a1 + 56) = v62;
        memcpy(v62, v61, 8 * v33);
        if (v61)
        {
          if (*(void **)(a1 + 56) == v61)
          {
            *(_QWORD *)(a1 + 56) = 0;
            *(_DWORD *)(a1 + 64) = 0;
          }
          WTF::fastFree((WTF *)v61, v63);
        }
        goto LABEL_97;
      }
LABEL_114:
      __break(0xC471u);
      JUMPOUT(0x195824250);
    }
    v34 = *(_BYTE *)(v23 + 4);
    v35 = v34 & 0x1F;
    if ((_DWORD)v33 == (_DWORD)v32 && v35 == 3)
      goto LABEL_48;
    if (v35 != 3)
    {
      v37 = v32 - v33;
      v38 = *(unsigned int *)(a1 + 84);
      if ((int)v32 - (int)v33 >= v38)
      {
        if (v35 != 10 || (_DWORD)v38 != v37)
        {
          if (v35 != 10)
          {
            if (v35 != 22 && v35 != 1)
              goto LABEL_61;
            v41 = *(_QWORD *)(v23 + 16);
            if (!v41)
              goto LABEL_61;
            v42 = -8193;
            do
            {
              v43 = *(_BYTE *)(v41 + 2);
              v41 += 16;
              ++v42;
            }
            while ((v43 & 2) == 0);
            if (v42 >= 0xFFFFDFFF)
            {
LABEL_61:
              v44 = (v37 - v38);
              v45 = *(unsigned int *)(a1 + 100);
              if ((_DWORD)v45 == *(_DWORD *)(a1 + 96))
              {
                v4 = WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v45 + 1, v4);
                LODWORD(v45) = *(_DWORD *)(a1 + 100);
              }
              v46 = *(_QWORD *)(a1 + 88);
              v47 = (_QWORD *)(v46 + 8 * v44);
              memmove(v47 + 1, v47, v46 + 8 * v45 - (_QWORD)v47);
              v48 = *(_QWORD *)v4;
              *(_QWORD *)v4 = 0;
              *v47 = v48;
              ++*(_DWORD *)(a1 + 100);
              return 1;
            }
          }
          return 0;
        }
      }
      else if (v35 != 10)
      {
        return 0;
      }
      if (!(*(_DWORD *)(a1 + 100) | v22))
      {
        if ((_DWORD)v38 == *(_DWORD *)(a1 + 80))
        {
          v49 = v38 + (v38 >> 2);
          if (v49 >= 0x10)
            v50 = v49 + 1;
          else
            v50 = 16;
          if (v50 <= v38 + 1)
            v51 = v38 + 1;
          else
            v51 = v50;
          WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)(a1 + 72), v51);
          v38 = *(unsigned int *)(a1 + 84);
        }
        v52 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v21);
        memmove(v52 + 1, v52, 8 * v38 - 8 * v21);
        ++*(_DWORD *)v23;
        *v52 = v23;
        ++*(_DWORD *)(a1 + 84);
        v53 = *(WTF::StringImpl **)(v23 + 8);
        if (v53)
          *(_DWORD *)v53 += 2;
        v71 = v53;
        v54 = *(WTF::StringImpl **)(v23 + 16);
        if (v54)
          *(_DWORD *)v54 += 2;
        v70 = v54;
        WebCore::StyleSheetContents::parserAddNamespace((WebCore::StyleSheetContents *)a1, (const WTF::AtomString *)&v71, (const WTF::AtomString *)&v70);
        v56 = v70;
        v70 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v55);
          else
            *(_DWORD *)v56 -= 2;
        }
        v57 = v71;
        v71 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v55);
          else
            *(_DWORD *)v57 -= 2;
        }
        return 1;
      }
    }
    return 0;
  }
  if ((_DWORD)v22 == *(_DWORD *)(a1 + 48))
  {
    v25 = v22 + (v22 >> 2);
    if (v25 >= 0x10)
      v26 = v25 + 1;
    else
      v26 = 16;
    if (v26 <= v22 + 1)
      v27 = v22 + 1;
    else
      v27 = v26;
    if (v27 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195824260);
    }
    v28 = *(void **)(a1 + 40);
    v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
    *(_DWORD *)(a1 + 48) = v27;
    *(_QWORD *)(a1 + 40) = v29;
    memcpy(v29, v28, 8 * v22);
    if (v28)
    {
      if (*(void **)(a1 + 40) == v28)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
      }
      WTF::fastFree((WTF *)v28, v30);
    }
  }
  v31 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v21);
  memmove(v31 + 1, v31, 8 * *(unsigned int *)(a1 + 52) - 8 * v21);
  ++*(_DWORD *)v23;
  *v31 = v23;
  ++*(_DWORD *)(a1 + 52);
  return 1;
}

uint64_t WebCore::StyleSheetContents::wrapperDeleteRule(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  const void *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD **v14;
  _DWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  size_t v20;
  _DWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = this;
  v4 = (unsigned int *)(this + 52);
  v3 = *(_DWORD *)(this + 52);
  v5 = a2 - v3;
  if (a2 < v3)
  {
    v6 = *(_QWORD *)(this + 40) + 8 * a2;
    v7 = *(_DWORD **)v6;
    *(_QWORD *)v6 = 0;
    if (v7)
    {
      if (*v7 == 1)
      {
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
        v3 = *v4;
      }
      else
      {
        --*v7;
      }
    }
    v8 = (const void *)(v6 + 8);
    v9 = *(_QWORD *)(v2 + 40);
LABEL_24:
    v20 = v9 + 8 * v3 - (_QWORD)v8;
    v21 = (_DWORD **)v6;
    goto LABEL_25;
  }
  v4 = (unsigned int *)(this + 68);
  v10 = *(_DWORD *)(this + 68);
  if (v10 <= v5)
  {
    v12 = v5 - v10;
    v4 = (unsigned int *)(this + 84);
    v13 = *(_DWORD *)(this + 84);
    if (v13 <= v12)
    {
      v14 = (_DWORD **)(*(_QWORD *)(this + 88) + 8 * (v12 - v13));
      v15 = *v14;
      *v14 = 0;
      if (v15)
      {
        if (*v15 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
        else
          --*v15;
      }
      v17 = *(_DWORD *)(v2 + 100);
      v16 = (unsigned int *)(v2 + 100);
      memmove(v14, v14 + 1, *(_QWORD *)(v16 - 3) + 8 * v17 - (_QWORD)(v14 + 1));
      v4 = v16;
      goto LABEL_26;
    }
    if (*(_DWORD *)(this + 100))
      return 0;
    v21 = WTF::Ref<WebCore::StyleRuleNamespace,WTF::RawPtrTraits<WebCore::StyleRuleNamespace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleNamespace>>::~Ref((_DWORD **)(*(_QWORD *)(this + 72) + 8 * v12));
    v8 = v21 + 1;
    v20 = *(_QWORD *)(v2 + 72) + 8 * *(unsigned int *)(v2 + 84) - (_QWORD)(v21 + 1);
LABEL_25:
    memmove(v21, v8, v20);
LABEL_26:
    --*v4;
    return 1;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * v5);
  if (!*(_BYTE *)(v11 + 104))
  {
    v18 = *(_QWORD *)(v11 + 64);
    if (!v18 || !*(_DWORD *)(v18 + 68))
      goto LABEL_19;
    v22 = 0;
    while (1)
    {
      v23 = v18;
      v24 = v11;
      this = WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v18 + 56) + 8 * v22));
      v11 = v24;
      if ((_DWORD)this)
        break;
      ++v22;
      v18 = v23;
      if (v22 >= *(unsigned int *)(v23 + 68))
        goto LABEL_19;
    }
  }
  *(_BYTE *)(v11 + 104) = 0;
  this = *(_QWORD *)(v11 + 8);
  if (this)
    this = WebCore::StyleSheetContents::checkLoaded(this, a2);
LABEL_19:
  v3 = *v4;
  if (*v4 > v5)
  {
    v6 = *(_QWORD *)(v2 + 56) + 8 * v5;
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 0;
    v19 = *(_DWORD **)v6;
    *(_QWORD *)v6 = 0;
    if (v19)
    {
      if (*v19 == 1)
      {
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v19, a2);
        v3 = *v4;
      }
      else
      {
        --*v19;
      }
    }
    v8 = (const void *)(v6 + 8);
    v9 = *(_QWORD *)(v2 + 56);
    goto LABEL_24;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::StyleSheetContents::singleOwnerDocument(WebCore::StyleSheetContents *this)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  WebCore::StyleSheetContents *v5;

  for (i = *((_QWORD *)this + 2); i; i = *((_QWORD *)v5 + 2))
  {
    v5 = *(WebCore::StyleSheetContents **)(i + 8);
    if (!v5)
      break;
    this = v5;
  }
  if (*((_DWORD *)this + 53)
    && (v2 = *(_QWORD *)(**((_QWORD **)this + 25) + 96)) != 0
    && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    return *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::StyleSheetContents::singleOwnerNode(WebCore::StyleSheetContents *this)
{
  uint64_t i;
  uint64_t v2;
  WebCore::StyleSheetContents *v4;

  for (i = *((_QWORD *)this + 2); i; i = *((_QWORD *)v4 + 2))
  {
    v4 = *(WebCore::StyleSheetContents **)(i + 8);
    if (!v4)
      break;
    this = v4;
  }
  if (*((_DWORD *)this + 53) && (v2 = *(_QWORD *)(**((_QWORD **)this + 25) + 96)) != 0)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WebCore::StyleSheetContents::traverseRules(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 68);
  if (!(_DWORD)v4)
    return WebCore::traverseRulesInVector(a1 + 88, a2);
  v6 = *(_QWORD **)(a1 + 56);
  v7 = 8 * v4;
  while (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v6) & 1) == 0)
  {
    v8 = *(_QWORD *)(*v6 + 64);
    if (v8)
    {
      if ((WebCore::StyleSheetContents::traverseRules(v8, a2) & 1) != 0)
        break;
    }
    ++v6;
    v7 -= 8;
    if (!v7)
      return WebCore::traverseRulesInVector(a1 + 88, a2);
  }
  return 1;
}

uint64_t WebCore::traverseRulesInVector(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v10;

  v2 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(_QWORD **)a1;
  v5 = 8 * v2;
  while (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v4) & 1) == 0)
  {
    v6 = *v4;
    v7 = *(_BYTE *)(*v4 + 4) & 0x1F;
    if (v7 == 22)
    {
      if ((WebCore::traverseRulesInVector(v6 + 32, a2) & 1) != 0)
        return 1;
      v6 = *v4;
      v7 = *(_BYTE *)(*v4 + 4) & 0x1F;
    }
    v8 = v7 > 0x18;
    v9 = (1 << v7) & 0x1851010;
    v10 = v8 || v9 == 0;
    if (!v10 && (WebCore::traverseRulesInVector(v6 + 8, a2) & 1) != 0)
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return 1;
}

uint64_t WebCore::StyleSheetContents::traverseSubresources(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E3399E08;
  v4[1] = a2;
  v4[2] = a1;
  v8 = v4;
  v5 = WebCore::StyleSheetContents::traverseRules(a1, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return v5;
}

uint64_t WebCore::StyleSheetContents::isLoadingSubresources(WebCore::StyleSheetContents *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3399E58;
  v6 = v2;
  v3 = WebCore::StyleSheetContents::traverseSubresources((uint64_t)this, (uint64_t)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return v3;
}

uint64_t WebCore::StyleSheetContents::removedFromMemoryCache(uint64_t this)
{
  --*(_DWORD *)(this + 128);
  return this;
}

void WebCore::StyleSheetList::~StyleSheetList(WebCore::StyleSheetList *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v8 = (_DWORD **)*((_QWORD *)this + 3);
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v11 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v11)
      {
        v14 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v11));
        v5 = v14;
      }
      v12 = *(WTF **)(v5 + 16);
      if (v12)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v13 = v5;
        WTF::fastFree(v12, a2);
        v5 = v13;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

WTF *WebCore::StyleSheetList::detach(WTF *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF **v14;
  WTF **v15;
  WTF *v16;
  WTF *v17;

  v3 = this;
  v4 = *((_QWORD *)this + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = *(_QWORD *)(v5 + 1328);
    if (*(_BYTE *)(v6 + 234))
      WebCore::Style::Scope::flushPendingDescendantUpdates((WebCore::Style::Scope *)v6, a2, a3);
    if (*(_BYTE *)(v6 + 233))
    {
      v14 = (WTF **)*(unsigned __int8 *)(v6 + 232);
      if ((*(_QWORD *)(v6 + 112) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v6 + 80));
      *(_WORD *)(v6 + 232) = 0;
      WebCore::Style::Scope::updateActiveStyleSheets(v6, v14, a3);
    }
    WTF::Vector<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)((char *)v3 + 24), (unsigned int *)(v6 + 40));
    this = (WTF *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (this)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)this);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)this));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)this);
        v10 = *((unsigned int *)this + 7);
        if ((_DWORD)v10)
        {
          v17 = this;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)this + 2), (WTF::StringImpl *)(*((_QWORD *)this + 2) + 32 * v10));
          this = v17;
        }
        v11 = (WTF *)*((_QWORD *)this + 2);
        if (v11)
        {
          *((_QWORD *)this + 2) = 0;
          *((_DWORD *)this + 6) = 0;
          v16 = this;
          WTF::fastFree(v11, v7);
          this = v16;
        }
        return (WTF *)WTF::fastFree(this, v7);
      }
    }
  }
  else
  {
    v12 = *((_QWORD *)this + 2);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 216);
      if (*(_BYTE *)(v13 + 234))
        WebCore::Style::Scope::flushPendingDescendantUpdates((WebCore::Style::Scope *)v13, a2, a3);
      if (*(_BYTE *)(v13 + 233))
      {
        v15 = (WTF **)*(unsigned __int8 *)(v13 + 232);
        if ((*(_QWORD *)(v13 + 112) & 0xFFFFFFFFFFFFLL) != 0)
          WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v13 + 80));
        *(_WORD *)(v13 + 232) = 0;
        WebCore::Style::Scope::updateActiveStyleSheets(v13, v15, a3);
      }
      this = WTF::Vector<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)((char *)v3 + 24), (unsigned int *)(v13 + 40));
      *((_QWORD *)v3 + 2) = 0;
    }
  }
  return this;
}

WTF *WTF::Vector<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, unsigned int *a2)
{
  WTF *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *((unsigned int *)result + 3);
  v5 = a2[3];
  if (v4 > v5)
  {
    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>>::destruct((_DWORD *)(*(_QWORD *)result + 8 * v5), (_DWORD **)(*(_QWORD *)result + 8 * v4));
    *((_DWORD *)v2 + 3) = v5;
LABEL_17:
    v12 = *(_QWORD **)a2;
    v13 = *(WTF **)v2;
    if ((_DWORD)v5)
    {
      v14 = 8 * v5;
      do
      {
        v15 = (_DWORD *)*v12;
        if (*v12)
          ++v15[2];
        v16 = *(_DWORD **)v13;
        *(_QWORD *)v13 = v15;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        ++v12;
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
      v12 = *(_QWORD **)a2;
      v17 = *((_DWORD *)v2 + 3);
      v13 = *(WTF **)v2;
    }
    else
    {
      v17 = 0;
    }
    v18 = a2[3];
    if (v17 != (_DWORD)v18)
    {
      v19 = (_QWORD *)((char *)v13 + 8 * v17);
      v20 = &v12[v17];
      v21 = 8 * v18 - 8 * v17;
      do
      {
        v22 = *v20;
        if (*v20)
          ++*(_DWORD *)(v22 + 8);
        *v19++ = v22;
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    *((_DWORD *)v2 + 3) = v18;
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_16;
  if (v6)
  {
    if ((_DWORD)v4)
    {
      WTF::VectorTypeOperations<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>>::destruct(*(_DWORD **)result, (_DWORD **)(*(_QWORD *)result + 8 * v4));
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  v7 = a2[3];
  if (*((_DWORD *)v2 + 2) >= v7)
  {
LABEL_16:
    v5 = *((unsigned int *)v2 + 3);
    goto LABEL_17;
  }
  if (!(v7 >> 29))
  {
    v8 = *(WTF **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    memcpy(v10, v8, 8 * v9);
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v8, v11);
    }
    goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::StyleSheetList::length(WebCore::StyleSheetList *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  WTF **v9;

  v3 = *((_QWORD *)this + 1);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = *(_QWORD *)(v4 + 1328);
  }
  else
  {
    v6 = *((_QWORD *)this + 2);
    if (!v6)
    {
      v7 = (char *)this + 24;
      return *((unsigned int *)v7 + 3);
    }
    v5 = *(_QWORD *)(v6 + 216);
  }
  if (*(_BYTE *)(v5 + 234))
    WebCore::Style::Scope::flushPendingDescendantUpdates((WebCore::Style::Scope *)v5, a2, a3);
  if (*(_BYTE *)(v5 + 233))
  {
    v9 = (WTF **)*(unsigned __int8 *)(v5 + 232);
    if ((*(_QWORD *)(v5 + 112) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v5 + 80));
    *(_WORD *)(v5 + 232) = 0;
    WebCore::Style::Scope::updateActiveStyleSheets(v5, v9, a3);
  }
  v7 = (char *)(v5 + 40);
  return *((unsigned int *)v7 + 3);
}

uint64_t WebCore::StyleSheetList::item(WebCore::StyleSheetList *this, uint64_t a2, const WTF::StringImpl *a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  WTF **v10;

  v3 = a2;
  v4 = *((_QWORD *)this + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = *(_QWORD *)(v5 + 1328);
  }
  else
  {
    v7 = *((_QWORD *)this + 2);
    if (!v7)
    {
      v8 = (char *)this + 24;
      goto LABEL_10;
    }
    v6 = *(_QWORD *)(v7 + 216);
  }
  if (*(_BYTE *)(v6 + 234))
    WebCore::Style::Scope::flushPendingDescendantUpdates((WebCore::Style::Scope *)v6, a2, a3);
  if (*(_BYTE *)(v6 + 233))
  {
    v10 = (WTF **)*(unsigned __int8 *)(v6 + 232);
    if ((*(_QWORD *)(v6 + 112) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v6 + 80));
    *(_WORD *)(v6 + 232) = 0;
    WebCore::Style::Scope::updateActiveStyleSheets(v6, v10, a3);
  }
  v8 = (char *)(v6 + 40);
LABEL_10:
  if (*((_DWORD *)v8 + 3) <= v3)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)v8 + 8 * v3);
}

uint64_t WebCore::StyleSheetList::namedItem(WebCore::StyleSheetList *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  void *v7;
  int v8;
  WebCore::Node *v9;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_QWORD *)a2)
    return 0;
  if (!*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  v6 = *(unsigned int **)(v3 + 120);
  if (!v6)
    return 0;
  WebCore::TreeScopeOrderedMap::getElementById(v6, a2, (const WebCore::TreeScope *)(v3 + 96), (uint64_t *)&v9);
  if (!v9)
    return 0;
  if ((*((_WORD *)v9 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)v9 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
  {
    v8 = *((_DWORD *)v9 + 6) - 2;
    if (*((_DWORD *)v9 + 6) != 2)
    {
      v4 = 0;
LABEL_14:
      *((_DWORD *)v9 + 6) = v8;
      return v4;
    }
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v9, v7);
    return 0;
  }
  v4 = *((_QWORD *)v9 + 18);
  v8 = *((_DWORD *)v9 + 6) - 2;
  if (*((_DWORD *)v9 + 6) != 2)
    goto LABEL_14;
  if ((*((_WORD *)v9 + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(v9, v7);
  return v4;
}

void WebCore::CSSPrimitiveValue::convertToLength<26>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  __n128 v7;
  BOOL v8;
  WTF *v9;
  WTF *v10;
  __int16 v11;
  unsigned int v12;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  double v19;
  float v20;
  __int16 v21;
  double v23;
  float v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  double v28;
  BOOL v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  char v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  WTF *v45;
  WTF *v46[2];
  WTF *v47[2];
  __int16 v48;

  v48 = 0;
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)v47 = 0u;
  WebCore::CSSValue::collectComputedStyleDependencies(a1, (WebCore::ComputedStyleDependencies *)v46);
  v8 = (!HIDWORD(v47[1]) || a2[1]) && (!HIDWORD(v46[1]) || *a2) && (!(_BYTE)v48 || a2[4]) && (!HIBYTE(v48) || a2[3]);
  v9 = v47[0];
  if (v47[0])
  {
    v47[0] = 0;
    LODWORD(v47[1]) = 0;
    WTF::fastFree(v9, v6);
  }
  v10 = v46[0];
  if (v46[0])
  {
    v46[0] = 0;
    LODWORD(v46[1]) = 0;
    WTF::fastFree(v10, v6);
  }
  if (!v8)
    goto LABEL_86;
  v11 = *(_WORD *)(a1 + 4);
  v12 = v11 & 0x7F;
  if (v12 - 63 > 0x11 || ((1 << ((*(_WORD *)(a1 + 4) & 0x7F) - 63)) & 0x34001) == 0)
  {
    if (v12 == 73)
    {
      v31 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 8);
      v32 = v31[12];
      if (v32 != 1 && (v32 - 5) > 3)
        goto LABEL_38;
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v31 + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
    }
    if (v12 - 60 <= 0x15 && ((1 << (v12 - 60)) & 0x201FE7) != 0
      || v12 - 4 < 8
      || v12 >= 0x19 && v12 < 0x31
      || v12 - 49 < 6
      || v12 == 81)
    {
      v14 = *(_WORD *)(a1 + 4) & 0x7F;
      if (v14 == 73)
      {
        v25 = *(_QWORD *)(a1 + 8);
        v26 = *(_DWORD **)(v25 + 8);
        ++v26[2];
        v19 = (*(double (**)(_DWORD *, _QWORD *))(*(_QWORD *)v26 + 48))(v26, a2);
        v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 8) + 72))(*(_QWORD *)(v25 + 8));
        v28 = fabs(v19);
        if (v27 == 12 && v28 == INFINITY)
        {
          v19 = 0.0;
        }
        else
        {
          if (*(_BYTE *)(v25 + 16))
            v30 = v19 < 0.0;
          else
            v30 = 0;
          if (v30)
            v19 = 0.0;
        }
        if (v26[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
        else
          --v26[2];
      }
      else
      {
        v15 = v14 - 79;
        if (v14 == 63)
          v16 = 22;
        else
          v16 = *(_WORD *)(a1 + 4) & 0x7F;
        if (v14 == 77)
          v17 = 20;
        else
          v17 = v16;
        if (v15 >= 2)
          v18 = v17;
        else
          v18 = 22;
        v7.n128_u64[0] = *(_QWORD *)(a1 + 8);
        v19 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a2, (void *)v18, v7);
      }
      v20 = v19;
      *(float *)a3 = v20;
      v21 = 4;
      goto LABEL_32;
    }
    v11 = *(_WORD *)(a1 + 4);
    v12 = v11 & 0x7F;
  }
LABEL_38:
  if (v12 - 63 > 0x11 || ((1 << (v12 - 63)) & 0x34001) == 0)
  {
    if ((v11 & 0x7F) == 0x49)
    {
      v33 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 8);
      v34 = v33[12];
      if (v34 != 1)
      {
        if (v34 == 2)
        {
LABEL_45:
          if ((v11 & 0x7F) == 0x49)
          {
            v43 = *(_QWORD *)(a1 + 8);
            v46[0] = 0;
            v23 = WebCore::CSSCalcValue::doubleValue(v43, (uint64_t)v46);
            if (v46[0])
              WTF::fastFree((WTF *)((char *)v46[0] - 16), v44);
          }
          else
          {
            v23 = *(double *)(a1 + 8);
          }
          v24 = v23;
          *(float *)a3 = v24;
          v21 = 3;
LABEL_32:
          *(_WORD *)(a3 + 4) = v21;
          *(_BYTE *)(a3 + 6) = 1;
          return;
        }
        if ((v34 - 5) > 3)
          goto LABEL_76;
      }
      v12 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v33 + 72))(v33);
      v11 = *(_WORD *)(a1 + 4);
    }
    if (v12 != 3)
      goto LABEL_76;
    goto LABEL_45;
  }
LABEL_76:
  if ((v11 & 0x7F) != 0x49)
  {
LABEL_86:
    *(_DWORD *)a3 = 0;
    *(_WORD *)(a3 + 4) = 13;
    *(_BYTE *)(a3 + 6) = 0;
    return;
  }
  v35 = *(_QWORD *)(a1 + 8);
  v36 = *(_DWORD **)(v35 + 8);
  ++v36[2];
  (*(void (**)(WTF **__return_ptr, _DWORD *, _QWORD *))(*(_QWORD *)v36 + 32))(v46, v36, a2);
  v37 = *(_BYTE *)(v35 + 16);
  v38 = WTF::fastMalloc((WTF *)0x18);
  v39 = v46[0];
  *(_DWORD *)v38 = 1;
  *(_QWORD *)(v38 + 8) = v39;
  *(_BYTE *)(v38 + 16) = v37;
  v45 = (WTF *)v38;
  v46[0] = 0;
  if (v36[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
  else
    --v36[2];
  WebCore::Length::Length(a3, &v45);
  v41 = v45;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
    {
      v42 = *((_QWORD *)v45 + 1);
      *((_QWORD *)v45 + 1) = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      WTF::fastFree(v41, v40);
    }
    else
    {
      --*(_DWORD *)v45;
    }
  }
}

void WebCore::transformsForValue(WebCore **this@<X0>, const WebCore::CSSValue *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  WebCore **v11;
  unsigned int v12;
  WebCore **v13;
  uint64_t v14;
  _DWORD **v15;
  _DWORD *v16;
  uint64_t v17;

  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) == 0x21000)
  {
    v6 = *((unsigned int *)this + 2);
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
LABEL_40:
        JUMPOUT(0x195825460);
      }
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v6));
      WebCore::transformForValue(this[2], a2, &v17);
      v9 = v17;
      if (v17)
      {
        *v8 = v17;
        if ((_DWORD)v6 == 1 || (WebCore::transformForValue(this[3], a2, &v17), !v17))
        {
          v9 = 1;
        }
        else
        {
          v8[1] = v17;
          if ((_DWORD)v6 == 2 || (WebCore::transformForValue(this[4], a2, &v17), !v17))
          {
            v9 = 2;
          }
          else
          {
            v8[2] = v17;
            if ((_DWORD)v6 == 3 || (WebCore::transformForValue(this[5], a2, &v17), !v17))
            {
              v9 = 3;
            }
            else
            {
              v8[3] = v17;
              if ((_DWORD)v6 == 4)
              {
                v9 = 4;
              }
              else
              {
                v10 = 0;
                v11 = this + 6;
                while (1)
                {
                  v12 = v10 + 4;
                  v13 = v11;
                  if (v10 < 0xFFFFFFFC)
                  {
                    if (*((_DWORD *)this + 2) <= v12)
                    {
                      __break(0xC471u);
                      goto LABEL_40;
                    }
                    v13 = (WebCore **)((char *)this[6] + 8 * v10);
                  }
                  WebCore::transformForValue(*v13, a2, &v17);
                  if (!v17)
                    break;
                  v8[v12] = v17;
                  ++v10;
                  ++v11;
                  if (v6 - 4 == v10)
                  {
                    v9 = v6;
                    goto LABEL_7;
                  }
                }
                v9 = v10 + 4;
              }
            }
          }
        }
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
LABEL_7:
    if (v9 == *((_DWORD *)this + 2))
    {
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 8) = v6;
      *(_DWORD *)(a3 + 12) = v9;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      if (v9)
      {
        v14 = 8 * v9;
        v15 = (_DWORD **)v8;
        do
        {
          v16 = *v15;
          *v15 = 0;
          if (v16)
          {
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[2];
          }
          ++v15;
          v14 -= 8;
        }
        while (v14);
      }
      if (v8)
        WTF::fastFree((WTF *)v8, a2);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

void WebCore::transformForValue(WebCore *this@<X0>, const WebCore::CSSValue *a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  WebCore *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  double v13;
  void *v14;
  __n128 v15;
  _BOOL4 v16;
  WTF *v17;
  WTF *v18;
  __int16 v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  double v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  __n128 v30;
  _BOOL4 v31;
  WTF *v32;
  WTF *v33;
  __int16 v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  double v38;
  int v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  double v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  double v57;
  double v58;
  double v59;
  char v60;
  char v61;
  uint64_t v62;
  int *v63;
  int *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  double v75;
  BOOL v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  double v81;
  BOOL v83;
  unsigned __int8 *v84;
  int v85;
  unsigned __int8 *v86;
  int v87;
  _BYTE *v88;
  _BYTE *v89;
  double v90;
  int v91;
  double v92;
  char v93;
  char v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v97;
  unsigned __int8 *v98;
  int v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  void *v103;
  double v104;
  double v105;
  int v106;
  double v107;
  int v108;
  uint64_t v109;
  _DWORD *v110;
  char v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  void *v115;
  WTF *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  _DWORD *v120;
  char v121;
  uint64_t v122;
  WTF *v123;
  void *v124;
  WTF *v125;
  uint64_t v126;
  double v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  float v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  float v145;
  uint64_t v146;
  double v147;
  uint64_t v148;
  double v149;
  double v150;
  double v151;
  double v152;
  unsigned int v153;
  double v154;
  int v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  void *v159;
  WTF *v160;
  WTF *v161[2];
  WTF *v162[2];
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  unsigned int v175;
  __int16 v176;
  char v177;
  unsigned int v178;
  __int16 v179;
  char v180;
  uint64_t v181;
  WTF *v182;

  v5 = (*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800;
  if (v5 == 122880)
    v6 = this;
  else
    v6 = 0;
  if (v5 != 122880)
    goto LABEL_369;
  v8 = *((unsigned int *)this + 2);
  if (!(_DWORD)v8)
    goto LABEL_369;
  v9 = *((_QWORD *)this + 2);
  v10 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  if ((v10 & 0x3F800) != 0)
    goto LABEL_369;
  if ((_DWORD)v8 != 1)
  {
    if (((*(unsigned __int16 *)(*((_QWORD *)this + 3) + 4) | (*(unsigned __int8 *)(*((_QWORD *)this + 3) + 6) << 16)) & 0x3F800) == 0)
    {
      if ((_DWORD)v8 == 2)
        goto LABEL_10;
      if (((*(unsigned __int16 *)(*((_QWORD *)this + 4) + 4) | (*(unsigned __int8 *)(*((_QWORD *)this + 4) + 6) << 16)) & 0x3F800) == 0)
      {
        if ((_DWORD)v8 == 3)
          goto LABEL_10;
        if (((*(unsigned __int16 *)(*((_QWORD *)this + 5) + 4) | (*(unsigned __int8 *)(*((_QWORD *)this + 5) + 6) << 16)) & 0x3F800) == 0)
        {
          if ((_DWORD)v8 == 4)
            goto LABEL_10;
          v66 = 0;
          while (1)
          {
            v67 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v66);
            if (((*(unsigned __int16 *)(v67 + 4) | (*(unsigned __int8 *)(v67 + 6) << 16)) & 0x3F800) != 0)
              break;
            if (v8 - 4 == ++v66)
              goto LABEL_10;
          }
        }
      }
    }
LABEL_369:
    *a3 = 0;
    return;
  }
LABEL_10:
  v12 = *((unsigned __int16 *)v6 + 28);
  v13 = 1.0;
  switch(*((_WORD *)v6 + 28))
  {
    case 0x348:
      if (v8 < 6)
        goto LABEL_369;
      if (*(_QWORD *)a2)
        v136 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 184);
      else
        v136 = 1.0;
      if (*((_BYTE *)a2 + 44))
        v137 = *((float *)a2 + 10);
      else
        v137 = v136;
      v138 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0);
      v139 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 1u);
      v140 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 2u);
      v141 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 3u);
      v142 = v137;
      v143 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 4u)* v142;
      v144 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 5u)* v142;
      v68 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(v68 + 8) = 1;
      *(_BYTE *)(v68 + 12) = 12;
      *(_QWORD *)v68 = off_1E3416DB0;
      *(double *)(v68 + 16) = v138;
      *(double *)(v68 + 24) = v139;
      *(double *)(v68 + 32) = v140;
      *(double *)(v68 + 40) = v141;
      *(double *)(v68 + 48) = v143;
      *(double *)(v68 + 56) = v144;
      goto LABEL_126;
    case 0x349:
      if (v8 < 0x10)
        goto LABEL_369;
      v161[0] = COERCE_WTF_(WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0));
      v161[1] = COERCE_WTF_(WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 1u));
      v162[0] = COERCE_WTF_(WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 2u));
      v162[1] = COERCE_WTF_(WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 3u));
      v163 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 4u);
      v164 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 5u);
      v165 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 6u);
      v166 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 7u);
      v167 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 8u);
      v168 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 9u);
      v169 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0xAu);
      v170 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0xBu);
      v171 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0xCu);
      v172 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0xDu);
      v173 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0xEu);
      v174 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0xFu);
      if (*(_QWORD *)a2)
        v145 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 184);
      else
        v145 = 1.0;
      if (*((_BYTE *)a2 + 44))
        v145 = *((float *)a2 + 10);
      WebCore::TransformationMatrix::zoom((float64x2_t *)v161, v145);
      WebCore::Matrix3DTransformOperation::create((WebCore::Matrix3DTransformOperation *)v161, a3);
      return;
    case 0x34A:
      LOBYTE(v161[0]) = 0;
      LOBYTE(v161[1]) = 0;
      if ((v10 & 0x7F) == 0x50)
        goto LABEL_353;
      if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)v9))
      {
        WebCore::CSSPrimitiveValue::convertToLength<26>(v9, a2, (uint64_t)&v181);
        goto LABEL_377;
      }
      v154 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)v9);
      if (v154 < 0.0)
        goto LABEL_369;
      if (v154 < 2147483650.0 && v154 > 0.0)
        goto LABEL_430;
      if (v154 >= 2147483650.0)
      {
        v155 = 0x7FFFFFFF;
      }
      else if (v154 > 0.0)
      {
LABEL_430:
        v155 = (int)v154;
      }
      else
      {
        v155 = 0;
      }
      LODWORD(v181) = v155;
      WORD2(v181) = 4;
      BYTE6(v181) = 0;
LABEL_377:
      std::optional<WebCore::Length>::operator=[abi:sn180100]<WebCore::Length,void>((unsigned int *)v161, (unsigned int *)&v181);
      if (BYTE4(v181) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v181);
      }
      if (LOBYTE(v161[1]))
      {
        if (BYTE4(v161[0]) == 13)
        {
          LOBYTE(v181) = 0;
          LOBYTE(v182) = 0;
          std::__optional_storage_base<WebCore::Length,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Length,false>>((int *)v161, (uint64_t)&v181);
          if ((_BYTE)v182)
          {
            if (BYTE4(v181) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v181);
            }
          }
        }
      }
LABEL_353:
      WebCore::PerspectiveTransformOperation::create((uint64_t)v161, a3);
      if (!LOBYTE(v161[1]))
        return;
      goto LABEL_186;
    case 0x34B:
      v47 = *(_WORD *)(v9 + 4) & 0x7F;
      v48 = 22;
      if ((v47 - 79) >= 2)
      {
        if (v47 == 77)
        {
          v48 = 20;
        }
        else if (v47 != 63)
        {
          if ((*(_WORD *)(v9 + 4) & 0x7F) == 0x49)
          {
            v88 = *(_BYTE **)(*(_QWORD *)(v9 + 8) + 8);
            if (v88[12] != 1)
            {
              v48 = 1;
              switch(v88[12])
              {
                case 0:
                  goto LABEL_72;
                case 2:
                  v48 = 3;
                  goto LABEL_72;
                case 3:
                  v48 = 74;
                  goto LABEL_72;
                case 4:
                  v48 = 75;
                  goto LABEL_72;
                case 5:
                case 6:
                case 7:
                case 8:
                  break;
                default:
                  v48 = 0;
                  goto LABEL_72;
              }
            }
            v48 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v88 + 72))(v88);
            LOWORD(v10) = *(_WORD *)(v9 + 4);
          }
          else
          {
            v48 = *(_WORD *)(v9 + 4) & 0x7F;
          }
        }
      }
LABEL_72:
      if ((v10 & 0x7F) == 0x49)
      {
        v100 = *(_QWORD *)(v9 + 8);
        v161[0] = 0;
        v49 = WebCore::CSSCalcValue::doubleValue(v100, (uint64_t)v161);
        if (v161[0])
          WTF::fastFree((WTF *)((char *)v161[0] - 16), v101);
      }
      else
      {
        v49 = *(double *)(v9 + 8);
      }
      if (v48 != 12)
      {
        switch(v48)
        {
          case 64:
            v49 = v49 * 360.0;
            break;
          case 14:
            v49 = v49 * 0.9;
            break;
          case 13:
            v49 = v49 * 57.2957795;
            break;
          default:
            v49 = 0.0;
            break;
        }
      }
      v50 = *((unsigned __int16 *)v6 + 28) - 840;
      v51 = 8;
      v52 = 2;
      switch(v50)
      {
        case 0:
          v52 = 12;
          goto LABEL_77;
        case 1:
          v52 = 19;
          goto LABEL_77;
        case 2:
          v52 = 20;
          goto LABEL_77;
        case 3:
          goto LABEL_122;
        case 4:
          v51 = 6;
          goto LABEL_122;
        case 5:
          v51 = 7;
          goto LABEL_122;
        case 6:
          v51 = 17;
          goto LABEL_122;
        case 7:
          v51 = 18;
LABEL_122:
          v68 = WTF::fastMalloc((WTF *)0x30);
          *(_DWORD *)(v68 + 8) = 1;
          *(_BYTE *)(v68 + 12) = v51;
          *(_QWORD *)v68 = off_1E3416EA0;
          *(_QWORD *)(v68 + 16) = 0;
          *(_QWORD *)(v68 + 24) = 0;
          *(_QWORD *)(v68 + 32) = 0x3FF0000000000000;
          goto LABEL_125;
        case 8:
          goto LABEL_77;
        case 9:
          v52 = 0;
          goto LABEL_77;
        case 10:
          v52 = 1;
          goto LABEL_77;
        case 11:
          v52 = 13;
          goto LABEL_77;
        case 12:
          v52 = 14;
          goto LABEL_77;
        case 13:
          v52 = 11;
          goto LABEL_77;
        case 14:
          v52 = 9;
          goto LABEL_77;
        case 15:
          v52 = 10;
          goto LABEL_77;
        case 16:
          v52 = 5;
          goto LABEL_77;
        case 17:
          v52 = 3;
          goto LABEL_77;
        case 18:
          v52 = 4;
          goto LABEL_77;
        case 19:
          v52 = 15;
          goto LABEL_77;
        case 20:
          v52 = 16;
          goto LABEL_77;
        default:
          v52 = 22;
LABEL_77:
          v53 = WTF::fastMalloc((WTF *)0x30);
          *(_DWORD *)(v53 + 8) = 1;
          *(_BYTE *)(v53 + 12) = v52;
          *(_QWORD *)v53 = off_1E3416EA0;
          *(_QWORD *)(v53 + 16) = 0;
          *(_QWORD *)(v53 + 24) = 0;
          *(_QWORD *)(v53 + 32) = 0x3FF0000000000000;
          *(double *)(v53 + 40) = v49;
          __break(0xC471u);
          JUMPOUT(0x1958258B8);
      }
    case 0x34C:
    case 0x34D:
    case 0x34E:
      v54 = *(_WORD *)(v9 + 4) & 0x7F;
      v55 = 22;
      if ((v54 - 79) >= 2)
      {
        if (v54 == 77)
        {
          v55 = 20;
        }
        else if (v54 != 63)
        {
          if ((*(_WORD *)(v9 + 4) & 0x7F) == 0x49)
          {
            v89 = *(_BYTE **)(*(_QWORD *)(v9 + 8) + 8);
            if (v89[12] == 1)
            {
LABEL_199:
              v55 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v89 + 72))(v89);
              LOWORD(v10) = *(_WORD *)(v9 + 4);
            }
            else
            {
              v55 = 1;
              switch(v89[12])
              {
                case 0:
                  break;
                case 2:
                  v55 = 3;
                  break;
                case 3:
                  v55 = 74;
                  break;
                case 4:
                  v55 = 75;
                  break;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto LABEL_199;
                default:
                  v55 = 0;
                  break;
              }
            }
          }
          else
          {
            v55 = *(_WORD *)(v9 + 4) & 0x7F;
          }
        }
      }
      if ((v10 & 0x7F) == 0x49)
      {
        v102 = *(_QWORD *)(v9 + 8);
        v161[0] = 0;
        v49 = WebCore::CSSCalcValue::doubleValue(v102, (uint64_t)v161);
        if (v161[0])
          WTF::fastFree((WTF *)((char *)v161[0] - 16), v103);
      }
      else
      {
        v49 = *(double *)(v9 + 8);
      }
      if (v55 != 12)
      {
        switch(v55)
        {
          case 64:
            v49 = v49 * 360.0;
            break;
          case 14:
            v49 = v49 * 0.9;
            break;
          case 13:
            v49 = v49 * 57.2957795;
            break;
          default:
            v49 = 0.0;
            break;
        }
      }
      v56 = *((unsigned __int16 *)v6 + 28);
      if (v56 != 844)
      {
        v57 = 0.0;
        if (v56 == 845)
          v58 = 1.0;
        else
          v58 = 0.0;
        if (v56 == 845)
          v59 = 0.0;
        else
          v59 = 1.0;
        v60 = 8;
        v61 = 2;
        switch(v56)
        {
          case 840:
            v61 = 12;
            goto LABEL_95;
          case 841:
            v61 = 19;
            goto LABEL_95;
          case 842:
            v61 = 20;
            goto LABEL_95;
          case 843:
            goto LABEL_124;
          case 845:
            v60 = 7;
            goto LABEL_124;
          case 846:
            v60 = 17;
            goto LABEL_124;
          case 847:
            v60 = 18;
            goto LABEL_124;
          case 848:
            goto LABEL_95;
          case 849:
            v61 = 0;
            goto LABEL_95;
          case 850:
            v61 = 1;
            goto LABEL_95;
          case 851:
            v61 = 13;
            goto LABEL_95;
          case 852:
            v61 = 14;
            goto LABEL_95;
          case 853:
            v61 = 11;
            goto LABEL_95;
          case 854:
            v61 = 9;
            goto LABEL_95;
          case 855:
            v61 = 10;
            goto LABEL_95;
          case 856:
            v61 = 5;
            goto LABEL_95;
          case 857:
            v61 = 3;
            goto LABEL_95;
          case 858:
            v61 = 4;
            goto LABEL_95;
          case 859:
            v61 = 15;
            goto LABEL_95;
          case 860:
            v61 = 16;
            goto LABEL_95;
          default:
            v61 = 22;
LABEL_95:
            v62 = WTF::fastMalloc((WTF *)0x30);
            *(_DWORD *)(v62 + 8) = 1;
            *(_BYTE *)(v62 + 12) = v61;
            *(_QWORD *)v62 = off_1E3416EA0;
            *(_QWORD *)(v62 + 16) = 0;
            *(double *)(v62 + 24) = v58;
            *(double *)(v62 + 32) = v59;
            *(double *)(v62 + 40) = v49;
            __break(0xC471u);
            JUMPOUT(0x1958259A0);
        }
      }
      v60 = 6;
      v57 = 1.0;
      v59 = 0.0;
      v58 = 0.0;
LABEL_124:
      v68 = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(v68 + 8) = 1;
      *(_BYTE *)(v68 + 12) = v60;
      *(_QWORD *)v68 = off_1E3416EA0;
      *(double *)(v68 + 16) = v57;
      *(double *)(v68 + 24) = v58;
      *(double *)(v68 + 32) = v59;
LABEL_125:
      *(double *)(v68 + 40) = v49;
      goto LABEL_126;
    case 0x34F:
      if (v8 < 4)
        goto LABEL_369;
      v148 = *((_QWORD *)v6 + 5);
      if (((*(unsigned __int16 *)(v148 + 4) | (*(unsigned __int8 *)(v148 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195827120);
      }
      v149 = WebCore::CSSPrimitiveValue::computeDegrees((WebCore::CSSPrimitiveValue *)v148);
      v150 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 0);
      v151 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 1u);
      v152 = WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()((uint64_t)v6, 2u);
      v153 = WebCore::transformOperationType(*((unsigned __int16 *)v6 + 28));
      WebCore::RotateTransformOperation::create(v153, a3, v150, v151, v152, v149);
      return;
    case 0x350:
    case 0x351:
      v90 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage(*((WebCore::CSSPrimitiveValue **)this + 2));
      v13 = v90;
      v91 = *((unsigned __int16 *)v6 + 28);
      if (v91 != 849)
      {
        if (*((_DWORD *)this + 2) >= 2u)
        {
          v9 = *((_QWORD *)v6 + 3);
          if (((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F800) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195826FC0);
          }
LABEL_268:
          v92 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v9);
          v91 = *((unsigned __int16 *)v6 + 28);
        }
        else
        {
          v92 = v90;
        }
        v93 = 5;
        v94 = 2;
        switch(v91)
        {
          case 840:
            v93 = 12;
            goto LABEL_212;
          case 841:
            v93 = 19;
            goto LABEL_212;
          case 842:
            v93 = 20;
            goto LABEL_212;
          case 843:
            v93 = 8;
            goto LABEL_212;
          case 844:
            v93 = 6;
            goto LABEL_212;
          case 845:
            v93 = 7;
            goto LABEL_212;
          case 846:
            v93 = 17;
            goto LABEL_212;
          case 847:
            v93 = 18;
            goto LABEL_212;
          case 848:
            goto LABEL_351;
          case 849:
            goto LABEL_350;
          case 850:
            v94 = 1;
            goto LABEL_351;
          case 851:
            v94 = 13;
            goto LABEL_351;
          case 852:
            v94 = 14;
            goto LABEL_351;
          case 853:
            v93 = 11;
            goto LABEL_212;
          case 854:
            v93 = 9;
            goto LABEL_212;
          case 855:
            v93 = 10;
            goto LABEL_212;
          case 856:
            goto LABEL_212;
          case 857:
            v93 = 3;
            goto LABEL_212;
          case 858:
            v93 = 4;
            goto LABEL_212;
          case 859:
            v93 = 15;
            goto LABEL_212;
          case 860:
            v93 = 16;
            goto LABEL_212;
          default:
            v93 = 22;
LABEL_212:
            v95 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)(v95 + 8) = 1;
            *(_BYTE *)(v95 + 12) = v93;
            *(_QWORD *)v95 = off_1E3416F18;
            *(double *)(v95 + 16) = v13;
            *(double *)(v95 + 24) = v92;
            *(_QWORD *)(v95 + 32) = 0x3FF0000000000000;
            __break(0xC471u);
            JUMPOUT(0x1958260C0);
        }
      }
      v92 = 1.0;
LABEL_350:
      v94 = 0;
LABEL_351:
      v68 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v68 + 8) = 1;
      *(_BYTE *)(v68 + 12) = v94;
      *(_QWORD *)v68 = off_1E3416F18;
      *(double *)(v68 + 16) = v13;
      *(double *)(v68 + 24) = v92;
      *(_QWORD *)(v68 + 32) = 0x3FF0000000000000;
LABEL_126:
      *a3 = v68;
      return;
    case 0x352:
      goto LABEL_268;
    case 0x353:
      v127 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage(*((WebCore::CSSPrimitiveValue **)this + 2));
      goto LABEL_334;
    case 0x354:
      v13 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage(*((WebCore::CSSPrimitiveValue **)this + 2));
      v127 = 1.0;
      if (*((_WORD *)v6 + 28) == 849)
      {
LABEL_334:
        v131 = 1.0;
      }
      else
      {
        v128 = *((_DWORD *)this + 2);
        if (v128 >= 3)
        {
          v129 = *((_QWORD *)v6 + 4);
          if (((*(unsigned __int16 *)(v129 + 4) | (*(unsigned __int8 *)(v129 + 6) << 16)) & 0x3F800) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195827180);
          }
          v127 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v129);
          v128 = *((_DWORD *)this + 2);
        }
        if (v128 < 2)
        {
          v131 = v13;
        }
        else
        {
          v130 = *((_QWORD *)v6 + 3);
          if (((*(unsigned __int16 *)(v130 + 4) | (*(unsigned __int8 *)(v130 + 6) << 16)) & 0x3F800) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1958271C0);
          }
          v131 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v130);
        }
      }
      v132 = WebCore::transformOperationType(*((unsigned __int16 *)v6 + 28));
      WebCore::ScaleTransformOperation::create(v132, a3, v13, v131, v127);
      return;
    case 0x355:
    case 0x356:
    case 0x357:
      v104 = WebCore::CSSPrimitiveValue::computeDegrees(*((WebCore::CSSPrimitiveValue **)this + 2));
      v105 = v104;
      v106 = *((unsigned __int16 *)v6 + 28);
      if (v106 == 855)
      {
        v107 = 0.0;
      }
      else
      {
        if (v106 != 853)
        {
LABEL_265:
          v107 = v104;
          v105 = 0.0;
          goto LABEL_266;
        }
        if (*((_DWORD *)this + 2) < 2u)
        {
          v106 = 853;
          goto LABEL_265;
        }
        v146 = *((_QWORD *)v6 + 3);
        if (((*(unsigned __int16 *)(v146 + 4) | (*(unsigned __int8 *)(v146 + 6) << 16)) & 0x3F800) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195827140);
        }
        v147 = WebCore::CSSPrimitiveValue::computeDegrees((WebCore::CSSPrimitiveValue *)v146);
        v107 = v105;
        v106 = *((unsigned __int16 *)v6 + 28);
        v105 = v147;
      }
LABEL_266:
      v108 = WebCore::transformOperationType(v106);
      WebCore::SkewTransformOperation::create(v108, a3, v107, v105);
      return;
    case 0x358:
    case 0x359:
    case 0x35A:
      if (v12 != 858)
      {
        LOWORD(v163) = 0;
        *(_OWORD *)v161 = 0u;
        *(_OWORD *)v162 = 0u;
        WebCore::CSSValue::collectComputedStyleDependencies(v9, (WebCore::ComputedStyleDependencies *)v161);
        v16 = (!HIDWORD(v162[1]) || *((_QWORD *)a2 + 1))
           && (!HIDWORD(v161[1]) || *(_QWORD *)a2)
           && (!LOBYTE(v163) || *((_QWORD *)a2 + 4))
           && (!BYTE1(v163) || *((_QWORD *)a2 + 3));
        v17 = v162[0];
        if (v162[0])
        {
          v162[0] = 0;
          LODWORD(v162[1]) = 0;
          WTF::fastFree(v17, v14);
        }
        v18 = v161[0];
        if (v161[0])
        {
          v161[0] = 0;
          LODWORD(v161[1]) = 0;
          WTF::fastFree(v18, v14);
        }
        if (!v16)
        {
LABEL_306:
          v26 = 0;
          v27 = 0;
          v24 = 13;
LABEL_36:
          if (*((_WORD *)v6 + 28) != 857 && *((_DWORD *)this + 2) >= 2u)
          {
            v28 = *((_QWORD *)v6 + 3);
            if (((*(unsigned __int16 *)(v28 + 4) | (*(unsigned __int8 *)(v28 + 6) << 16)) & 0x3F800) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195826118);
            }
            LOWORD(v163) = 0;
            *(_OWORD *)v161 = 0u;
            *(_OWORD *)v162 = 0u;
            WebCore::CSSValue::collectComputedStyleDependencies(v28, (WebCore::ComputedStyleDependencies *)v161);
            v31 = (!HIDWORD(v162[1]) || *((_QWORD *)a2 + 1))
               && (!HIDWORD(v161[1]) || *(_QWORD *)a2)
               && (!LOBYTE(v163) || *((_QWORD *)a2 + 4))
               && (!BYTE1(v163) || *((_QWORD *)a2 + 3));
            v32 = v162[0];
            if (v162[0])
            {
              v162[0] = 0;
              LODWORD(v162[1]) = 0;
              WTF::fastFree(v32, v29);
            }
            v33 = v161[0];
            if (v161[0])
            {
              v161[0] = 0;
              LODWORD(v161[1]) = 0;
              WTF::fastFree(v33, v29);
            }
            if (!v31)
              goto LABEL_325;
            v34 = *(_WORD *)(v28 + 4);
            v35 = v34 & 0x7F;
            if (v35 - 63 > 0x11 || ((1 << (v35 - 63)) & 0x34001) == 0)
            {
              if (v35 == 73)
              {
                v86 = *(unsigned __int8 **)(*(_QWORD *)(v28 + 8) + 8);
                v87 = v86[12];
                if (v87 != 1 && (v87 - 5) > 3)
                  goto LABEL_143;
                v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v86 + 72))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8));
              }
              if (v35 - 60 <= 0x15 && ((1 << (v35 - 60)) & 0x201FE7) != 0
                || v35 - 4 < 8
                || v35 >= 0x19 && v35 < 0x31
                || v35 - 49 < 6
                || v35 == 81)
              {
                v36 = *(_WORD *)(v28 + 4) & 0x7F;
                if (v36 == 73)
                {
                  v78 = *(_QWORD *)(v28 + 8);
                  v79 = *(_DWORD **)(v78 + 8);
                  ++v79[2];
                  v38 = (*(double (**)(_DWORD *, const WebCore::CSSValue *))(*(_QWORD *)v79 + 48))(v79, a2);
                  v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v78 + 8) + 72))(*(_QWORD *)(v78 + 8));
                  v81 = fabs(v38);
                  if (v80 == 12 && v81 == INFINITY)
                  {
                    v38 = 0.0;
                  }
                  else
                  {
                    if (*(_BYTE *)(v78 + 16))
                      v83 = v38 < 0.0;
                    else
                      v83 = 0;
                    if (v83)
                      v38 = 0.0;
                  }
                  if (v79[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
                  else
                    --v79[2];
                }
                else
                {
                  v37 = 22;
                  if ((v36 - 79) >= 2)
                  {
                    if (v36 == 77)
                    {
                      v37 = 20;
                    }
                    else if (v36 != 63)
                    {
                      v37 = *(_WORD *)(v28 + 4) & 0x7F;
                    }
                  }
                  v30.n128_u64[0] = *(_QWORD *)(v28 + 8);
                  v38 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a2, (void *)v37, v30);
                }
                v39 = 4;
                goto LABEL_62;
              }
              v34 = *(_WORD *)(v28 + 4);
              v35 = v34 & 0x7F;
            }
LABEL_143:
            if (v35 - 63 > 0x11 || ((1 << (v35 - 63)) & 0x34001) == 0)
            {
              if ((v34 & 0x7F) == 0x49)
              {
                v98 = *(unsigned __int8 **)(*(_QWORD *)(v28 + 8) + 8);
                v99 = v98[12];
                if (v99 != 1)
                {
                  if (v99 == 2)
                    goto LABEL_147;
                  if ((v99 - 5) > 3)
                    goto LABEL_309;
                }
                v35 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v98 + 72))(v98);
                v34 = *(_WORD *)(v28 + 4);
              }
              if (v35 == 3)
              {
LABEL_147:
                if ((v34 & 0x7F) == 0x49)
                {
                  v158 = *(_QWORD *)(v28 + 8);
                  v161[0] = 0;
                  v38 = WebCore::CSSCalcValue::doubleValue(v158, (uint64_t)v161);
                  if (v161[0])
                    WTF::fastFree((WTF *)((char *)v161[0] - 16), v159);
                }
                else
                {
                  v38 = *(double *)(v28 + 8);
                }
                v39 = 3;
LABEL_62:
                v40 = 0;
                *(float *)&v41 = v38;
                v42 = v41;
                v43 = 1;
                goto LABEL_63;
              }
            }
LABEL_309:
            if ((v34 & 0x7F) == 0x49)
            {
              v118 = v24;
              v119 = *(_QWORD *)(v28 + 8);
              v120 = *(_DWORD **)(v119 + 8);
              ++v120[2];
              (*(void (**)(WTF **__return_ptr, _DWORD *, const WebCore::CSSValue *))(*(_QWORD *)v120 + 32))(v161, v120, a2);
              v121 = *(_BYTE *)(v119 + 16);
              v122 = WTF::fastMalloc((WTF *)0x18);
              v123 = v161[0];
              *(_DWORD *)v122 = 1;
              *(_QWORD *)(v122 + 8) = v123;
              *(_BYTE *)(v122 + 16) = v121;
              v161[0] = 0;
              if (v120[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v120 + 8))(v120);
              else
                --v120[2];
              v24 = v118;
              {
                LODWORD(v42) = WebCore::calculationValues(void)::map;
              }
              else
              {
                LODWORD(v42) = 1;
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              v181 = 0;
              v182 = (WTF *)v122;
              while (1)
              {
                if ((v42 - 1) <= 0xFFFFFFFD)
                {
                  WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::add<WebCore::CalculationValueMap::Entry&>(&qword_1ECE90C98, &WebCore::calculationValues(void)::map, &v181, (uint64_t)v161);
                  v42 = WebCore::calculationValues(void)::map;
                  if (LOBYTE(v162[0]))
                    break;
                }
                LODWORD(v42) = v42 + 1;
                WebCore::calculationValues(void)::map = v42;
                v24 = v118;
              }
              ++WebCore::calculationValues(void)::map;
              v125 = v182;
              v182 = 0;
              if (v125)
              {
                if (*(_DWORD *)v125 == 1)
                {
                  v126 = *((_QWORD *)v125 + 1);
                  *((_QWORD *)v125 + 1) = 0;
                  if (v126)
                    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
                  WTF::fastFree(v125, v124);
                  v24 = v118;
                }
                else
                {
                  --*(_DWORD *)v125;
                }
              }
              v40 = 0;
              v43 = 0;
              v39 = 11;
              goto LABEL_63;
            }
LABEL_325:
            *a3 = 0;
            goto LABEL_104;
          }
          v42 = 0;
          v40 = 0;
          v43 = 0;
          v39 = 4;
LABEL_63:
          v44 = 0;
          if (v39 != 13 && v24 != 13)
          {
            v45 = *((unsigned __int16 *)v6 + 28) - 840;
            if (v45 > 0x14)
              v46 = 22;
            else
              v46 = byte_1969EEF35[(__int16)v45];
            v44 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)(v44 + 8) = 1;
            *(_BYTE *)(v44 + 12) = v46;
            *(_QWORD *)v44 = off_1E34170C0;
            *(_DWORD *)(v44 + 16) = 0;
            v63 = (int *)(v44 + 16);
            *(_BYTE *)(v44 + 20) = v24;
            *(_WORD *)(v44 + 21) = 0;
            if ((v24 - 2) >= 9)
            {
              if (v24 == 11)
              {
                *v63 = v26;
                WebCore::Length::ref(v63);
              }
            }
            else
            {
              *(_BYTE *)(v44 + 22) = v27;
              *(_DWORD *)(v44 + 16) = v26;
            }
            *(_DWORD *)(v44 + 24) = 0;
            v64 = (int *)(v44 + 24);
            *(_BYTE *)(v44 + 30) = 0;
            *(_BYTE *)(v44 + 28) = v39;
            *(_BYTE *)(v44 + 29) = v40;
            if ((v39 - 2) >= 9)
            {
              if (v39 == 11)
              {
                *v64 = v42;
                WebCore::Length::ref(v64);
              }
            }
            else
            {
              *(_BYTE *)(v44 + 30) = v43;
              *(_DWORD *)(v44 + 24) = v42;
            }
            *(_WORD *)(v44 + 36) = 4;
            *(_BYTE *)(v44 + 38) = 0;
            *(_DWORD *)(v44 + 32) = 0;
            if (v46 > 0x10 || ((1 << v46) & 0x18038) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195826EE8);
            }
          }
          *a3 = v44;
          if (v39 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v42);
          }
LABEL_104:
          if (v24 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            v65 = (void *)v26;
            goto LABEL_108;
          }
          return;
        }
        v19 = *(_WORD *)(v9 + 4);
        v20 = v19 & 0x7F;
        if (v20 - 63 > 0x11 || ((1 << (v20 - 63)) & 0x34001) == 0)
        {
          if (v20 == 73)
          {
            v84 = *(unsigned __int8 **)(*(_QWORD *)(v9 + 8) + 8);
            v85 = v84[12];
            if (v85 != 1 && (v85 - 5) > 3)
              goto LABEL_132;
            v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v84 + 72))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8));
          }
          if (v20 - 60 <= 0x15 && ((1 << (v20 - 60)) & 0x201FE7) != 0
            || v20 - 4 < 8
            || v20 >= 0x19 && v20 < 0x31
            || v20 - 49 < 6
            || v20 == 81)
          {
            v21 = *(_WORD *)(v9 + 4) & 0x7F;
            if (v21 == 73)
            {
              v72 = *(_QWORD *)(v9 + 8);
              v73 = *(_DWORD **)(v72 + 8);
              ++v73[2];
              v23 = (*(double (**)(_DWORD *, const WebCore::CSSValue *))(*(_QWORD *)v73 + 48))(v73, a2);
              v74 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v72 + 8) + 72))(*(_QWORD *)(v72 + 8));
              v75 = fabs(v23);
              if (v74 == 12 && v75 == INFINITY)
              {
                v23 = 0.0;
              }
              else
              {
                if (*(_BYTE *)(v72 + 16))
                  v77 = v23 < 0.0;
                else
                  v77 = 0;
                if (v77)
                  v23 = 0.0;
              }
              if (v73[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v73 + 8))(v73);
              else
                --v73[2];
            }
            else
            {
              v22 = 22;
              if ((v21 - 79) >= 2)
              {
                if (v21 == 77)
                {
                  v22 = 20;
                }
                else if (v21 != 63)
                {
                  v22 = *(_WORD *)(v9 + 4) & 0x7F;
                }
              }
              v15.n128_u64[0] = *(_QWORD *)(v9 + 8);
              v23 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a2, (void *)v22, v15);
            }
            v24 = 4;
            goto LABEL_35;
          }
          v19 = *(_WORD *)(v9 + 4);
          v20 = v19 & 0x7F;
        }
LABEL_132:
        if (v20 - 63 > 0x11 || ((1 << (v20 - 63)) & 0x34001) == 0)
        {
          if ((v19 & 0x7F) == 0x49)
          {
            v96 = *(unsigned __int8 **)(*(_QWORD *)(v9 + 8) + 8);
            v97 = v96[12];
            if (v97 != 1)
            {
              if (v97 == 2)
                goto LABEL_136;
              if ((v97 - 5) > 3)
                goto LABEL_290;
            }
            v20 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v96 + 72))(v96);
            v19 = *(_WORD *)(v9 + 4);
          }
          if (v20 == 3)
          {
LABEL_136:
            if ((v19 & 0x7F) == 0x49)
            {
              v156 = *(_QWORD *)(v9 + 8);
              v161[0] = 0;
              v23 = WebCore::CSSCalcValue::doubleValue(v156, (uint64_t)v161);
              if (v161[0])
                WTF::fastFree((WTF *)((char *)v161[0] - 16), v157);
            }
            else
            {
              v23 = *(double *)(v9 + 8);
            }
            v24 = 3;
LABEL_35:
            *(float *)&v25 = v23;
            v26 = v25;
            v27 = 1;
            goto LABEL_36;
          }
        }
LABEL_290:
        if ((v19 & 0x7F) == 0x49)
        {
          v109 = *(_QWORD *)(v9 + 8);
          v110 = *(_DWORD **)(v109 + 8);
          ++v110[2];
          (*(void (**)(WTF **__return_ptr, _DWORD *, const WebCore::CSSValue *))(*(_QWORD *)v110 + 32))(v161, v110, a2);
          v111 = *(_BYTE *)(v109 + 16);
          v112 = WTF::fastMalloc((WTF *)0x18);
          v113 = v161[0];
          *(_DWORD *)v112 = 1;
          *(_QWORD *)(v112 + 8) = v113;
          v114 = v112;
          *(_BYTE *)(v112 + 16) = v111;
          v161[0] = 0;
          if (v110[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v110 + 8))(v110);
          else
            --v110[2];
          {
            LODWORD(v26) = WebCore::calculationValues(void)::map;
          }
          else
          {
            LODWORD(v26) = 1;
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v181 = 0;
          v182 = (WTF *)v114;
          while (1)
          {
            if ((v26 - 1) <= 0xFFFFFFFD)
            {
              WTF::HashMap<unsigned int,WebCore::CalculationValueMap::Entry,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::CalculationValueMap::Entry>,WTF::HashTableTraits>::add<WebCore::CalculationValueMap::Entry&>(&qword_1ECE90C98, &WebCore::calculationValues(void)::map, &v181, (uint64_t)v161);
              v26 = WebCore::calculationValues(void)::map;
              if (LOBYTE(v162[0]))
                break;
            }
            LODWORD(v26) = v26 + 1;
            WebCore::calculationValues(void)::map = v26;
          }
          ++WebCore::calculationValues(void)::map;
          v116 = v182;
          v182 = 0;
          if (v116)
          {
            if (*(_DWORD *)v116 == 1)
            {
              v117 = *((_QWORD *)v116 + 1);
              v160 = v116;
              *((_QWORD *)v116 + 1) = 0;
              if (v117)
                (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
              WTF::fastFree(v160, v115);
            }
            else
            {
              --*(_DWORD *)v116;
            }
          }
          v27 = 0;
          v24 = 11;
          goto LABEL_36;
        }
        goto LABEL_306;
      }
      WebCore::CSSPrimitiveValue::convertToLength<26>(*((_QWORD *)this + 2), a2, (uint64_t)v161);
      v39 = BYTE4(v161[0]);
      v40 = BYTE5(v161[0]);
      if (BYTE4(v161[0]) - 2 >= 9)
      {
        if (BYTE4(v161[0]) != 11)
        {
          v42 = 0;
          v43 = 0;
          goto LABEL_221;
        }
        v43 = 0;
      }
      else
      {
        v43 = BYTE6(v161[0]);
      }
      v42 = LODWORD(v161[0]);
LABEL_221:
      v26 = 0;
      v27 = 0;
      v24 = 4;
      goto LABEL_63;
    case 0x35B:
    case 0x35C:
      LODWORD(v161[0]) = 0;
      WORD2(v161[0]) = 4;
      BYTE6(v161[0]) = 0;
      LODWORD(v181) = 0;
      WORD2(v181) = 4;
      BYTE6(v181) = 0;
      v178 = 0;
      v179 = 4;
      v180 = 0;
      if (v12 == 859)
      {
        WebCore::CSSPrimitiveValue::convertToLength<26>(v9, a2, (uint64_t)&v175);
        if (v179 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v178);
        }
        v179 = v176;
        if (v176 - 2 < 9)
        {
          v180 = v177;
          if (v177)
          {
            v178 = v175;
            goto LABEL_155;
          }
LABEL_258:
          v178 = v175;
          goto LABEL_155;
        }
        if (v176 > 0xDu)
          goto LABEL_155;
        if (((1 << v176) & 0x3003) != 0)
        {
          v178 = 0;
          goto LABEL_155;
        }
        if (v176 == 11)
          goto LABEL_258;
      }
      else
      {
        WebCore::CSSPrimitiveValue::convertToLength<26>(v9, a2, (uint64_t)&v175);
        WebCore::Length::operator=((unsigned int *)v161, &v175);
        if (v176 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v175);
        }
        if (*((_WORD *)v6 + 28) != 857)
        {
          v133 = *((_DWORD *)this + 2);
          if (v133 >= 3)
          {
            v134 = *((_QWORD *)v6 + 4);
            if (((*(unsigned __int16 *)(v134 + 4) | (*(unsigned __int8 *)(v134 + 6) << 16)) & 0x3F800) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1958271A0);
            }
            WebCore::CSSPrimitiveValue::convertToLength<26>(v134, a2, (uint64_t)&v175);
            WebCore::Length::operator=(&v178, &v175);
            if (v176 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v175);
            }
            v133 = *((_DWORD *)this + 2);
          }
          if (v133 >= 2)
          {
            v135 = *((_QWORD *)v6 + 3);
            if (((*(unsigned __int16 *)(v135 + 4) | (*(unsigned __int8 *)(v135 + 6) << 16)) & 0x3F800) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1958271E0);
            }
            WebCore::CSSPrimitiveValue::convertToLength<26>(v135, a2, (uint64_t)&v175);
            WebCore::Length::operator=((unsigned int *)&v181, &v175);
            if (v176 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v175);
            }
          }
        }
      }
LABEL_155:
      v69 = v179;
      if (BYTE4(v161[0]) == 13 || BYTE4(v181) == 13 || v179 == 13)
      {
        *a3 = 0;
      }
      else
      {
        v70 = *((unsigned __int16 *)v6 + 28) - 840;
        if (v70 > 0x14)
          v71 = 22;
        else
          v71 = byte_1969EEF35[(__int16)v70];
        WebCore::TranslateTransformOperation::create((uint64_t)v161, (uint64_t)&v181, (uint64_t)&v178, v71, a3);
        v69 = v179;
      }
      if (v69 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v178);
      }
      if (BYTE4(v181) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v181);
      }
LABEL_186:
      if (BYTE4(v161[0]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v65 = (void *)LODWORD(v161[0]);
LABEL_108:
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v65);
      }
      return;
    default:
      goto LABEL_369;
  }
}

uint64_t WebCore::transformOperationType(int a1)
{
  if ((a1 - 840) > 0x14)
    return 22;
  else
    return byte_1969EEF35[(__int16)(a1 - 840)];
}

double WebCore::transformForValue(WebCore::CSSValue const&,WebCore::CSSToLengthConversionData const&)::$_0::operator()(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  double v7;
  uint64_t v8;

  if (a2 > 3)
  {
    if (*(_DWORD *)(a1 + 8) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1958275A4);
    }
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * (a2 - 4));
  }
  else
  {
    v2 = (uint64_t *)(a1 + 8 * a2 + 16);
  }
  v3 = *v2;
  if (((*(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195827560);
  }
  if ((*(_WORD *)(v3 + 4) & 0x7F) != 0x49)
    return *(double *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 8);
  v8 = 0;
  v7 = WebCore::CSSCalcValue::doubleValue(v5, (uint64_t)&v8);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v6);
  return v7;
}

unsigned int *std::optional<WebCore::Length>::operator=[abi:sn180100]<WebCore::Length,void>(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;

  if (!*((_BYTE *)result + 8))
  {
    *result = 0;
    *(_WORD *)((char *)result + 5) = 0;
    v4 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)result + 4) = v4;
    *((_BYTE *)result + 5) = *((_BYTE *)a2 + 5);
    if (v4 - 2 >= 9)
    {
      if (v4 > 0xD)
        goto LABEL_11;
      if (((1 << v4) & 0x3003) != 0)
      {
        *result = 0;
        goto LABEL_11;
      }
      if (v4 != 11)
        goto LABEL_11;
      v7 = *a2;
      *a2 = 0;
    }
    else
    {
      v5 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)result + 6) = v5;
      if (v5)
      {
        *result = *a2;
LABEL_11:
        *((_BYTE *)a2 + 4) = 0;
        *((_BYTE *)result + 8) = 1;
        return result;
      }
      v7 = *a2;
    }
    *result = v7;
    goto LABEL_11;
  }
  if (result != a2)
  {
    if (*((_BYTE *)result + 4) == 11)
    {
      v9 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v8 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = v8;
      a2 = v9;
    }
    v2 = *((unsigned __int8 *)a2 + 4);
    *((_BYTE *)result + 4) = v2;
    *((_BYTE *)result + 5) = *((_BYTE *)a2 + 5);
    if (v2 - 2 >= 9)
    {
      if (v2 > 0xD)
        goto LABEL_7;
      if (((1 << v2) & 0x3003) != 0)
      {
        *result = 0;
        goto LABEL_7;
      }
      if (v2 != 11)
        goto LABEL_7;
      v6 = *a2;
      *a2 = 0;
    }
    else
    {
      v3 = *((unsigned __int8 *)a2 + 6);
      *((_BYTE *)result + 6) = v3;
      if (v3)
      {
        *result = *a2;
LABEL_7:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v6 = *a2;
    }
    *result = v6;
    goto LABEL_7;
  }
  return result;
}

void WebCore::translateForValue(WebCore *this@<X0>, const WebCore::CSSValue *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  WebCore *v13;
  uint64_t v14;
  int v15;
  unsigned int v17;
  unsigned int v19;
  unsigned int v20[2];
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int8 v27;
  char v28;
  char v29;
  unsigned int v30;
  char v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;
  char v36;
  char v37;
  unsigned int v38;
  char v39;
  char v40;
  char v41;

  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0x1D800
    || !*((_DWORD *)this + 2))
  {
    *a3 = 0;
    return;
  }
  v6 = 0;
  v7 = 0;
  *(_QWORD *)v20 = 0;
  v19 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v8 = 0;
  v38 = 0;
  v34 = 0;
  v30 = 0;
  v21 = 0;
  v22 = 5;
  v9 = 4;
  v10 = -32;
  v11 = 4;
  v12 = 4;
  while (1)
  {
    v13 = v8 > 3 ? (WebCore *)(*((_QWORD *)this + 6) + v10) : (WebCore *)((char *)this + 8 * v8 + 16);
    v14 = *(_QWORD *)v13;
    v15 = (*(unsigned __int16 *)(*(_QWORD *)v13 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v13 + 6) << 16)) & 0x3F800;
    if (!v14 || v15 != 0)
      break;
    switch((_DWORD)v8)
    {
      case 2:
        WebCore::CSSPrimitiveValue::convertToLength<26>(v14, a2, (uint64_t)&v26);
        if (v12 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19);
        }
        v12 = v27;
        BYTE4(v24) = v28;
        if (v27 - 2 >= 9)
        {
          if (v27 <= 0xDu)
          {
            if (((1 << v27) & 0x3003) != 0)
            {
              v7 = 0;
              v19 = 0;
              v30 = 0;
            }
            else if (v27 == 11)
            {
              goto LABEL_35;
            }
          }
        }
        else
        {
          if (v29)
          {
            v30 = v26;
            v7 = v26;
            LOBYTE(v23) = 1;
            goto LABEL_28;
          }
          LOBYTE(v23) = 0;
LABEL_35:
          v7 = v26;
          v30 = v26;
LABEL_28:
          v19 = v7;
        }
        v22 = 16;
        break;
      case 1:
        WebCore::CSSPrimitiveValue::convertToLength<26>(v14, a2, (uint64_t)&v26);
        if (v11 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v20[0]);
        }
        v11 = v27;
        LOBYTE(v25) = v28;
        if (v27 - 2 >= 9)
        {
          if (v27 > 0xDu)
            break;
          if (((1 << v27) & 0x3003) != 0)
          {
            v6 = 0;
            v20[0] = 0;
            v34 = 0;
            break;
          }
          if (v27 != 11)
            break;
        }
        else
        {
          if (v29)
          {
            v34 = v26;
            v6 = v26;
            BYTE4(v23) = 1;
LABEL_23:
            v20[0] = v6;
            break;
          }
          BYTE4(v23) = 0;
        }
        v6 = v26;
        v34 = v26;
        goto LABEL_23;
      case 0:
        WebCore::CSSPrimitiveValue::convertToLength<26>(v14, a2, (uint64_t)&v26);
        if (v9 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v20[1]);
        }
        v9 = v27;
        BYTE4(v25) = v28;
        if (v27 - 2 >= 9)
        {
          if (v27 > 0xDu)
            break;
          if (((1 << v27) & 0x3003) != 0)
          {
            v20[1] = 0;
            v21 = 0;
            v38 = 0;
            break;
          }
          if (v27 != 11)
            break;
        }
        else
        {
          if (v29)
          {
            v38 = v26;
            v17 = v26;
            LOBYTE(v24) = 1;
LABEL_18:
            v20[1] = v17;
            v21 = v17;
            break;
          }
          LOBYTE(v24) = 0;
        }
        v17 = v26;
        v38 = v26;
        goto LABEL_18;
    }
    ++v8;
    v10 += 8;
    if (v8 >= *((unsigned int *)this + 2))
    {
      v31 = v12;
      v32 = BYTE4(v24);
      v33 = v23;
      v35 = v11;
      v36 = v25;
      v37 = BYTE4(v23);
      v39 = v9;
      v40 = BYTE4(v25);
      v41 = v24;
      if (v9 != 13 && v11 != 13 && v12 != 13)
      {
        WebCore::TranslateTransformOperation::create((uint64_t)&v38, (uint64_t)&v34, (uint64_t)&v30, v22, a3);
        goto LABEL_69;
      }
      break;
    }
  }
  *a3 = 0;
LABEL_69:
  if (v12 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v7);
  }
  if (v11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  if (v9 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
}

void WebCore::scaleForValue(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  double v18;
  unint64_t v19;
  unsigned int v20;

  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0x1D800
    || !*((_DWORD *)this + 2))
  {
    goto LABEL_7;
  }
  v5 = *((_QWORD *)this + 2);
  if (!v5 || ((*(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16)) & 0x3F800) != 0)
    goto LABEL_7;
  v7 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v5);
  v8 = v7;
  v9 = 1.0;
  if (*((_DWORD *)this + 2) < 2u)
  {
    v20 = 2;
    v11 = v7;
  }
  else
  {
    v10 = *((_QWORD *)this + 3);
    if (!v10 || ((*(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16)) & 0x3F800) != 0)
      goto LABEL_7;
    v11 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v10);
    if (*((_DWORD *)this + 2) >= 3u)
    {
      v12 = *((_QWORD *)this + 4);
      if (v12 && ((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) & 0x3F800) == 0)
      {
        v9 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v12);
        v13 = *((_DWORD *)this + 2);
        if (v13 < 4)
        {
LABEL_35:
          v20 = 14;
          goto LABEL_36;
        }
        v14 = *((_QWORD *)this + 5);
        if (v14 && ((*(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16)) & 0x3F800) == 0)
        {
          if (v13 >= 5)
          {
            v15 = 0;
            while (1)
            {
              v16 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v15);
              if (v16)
                v17 = ((*(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16)) & 0x3F800) == 0;
              else
                v17 = 0;
              if (!v17)
                goto LABEL_7;
              switch((_DWORD)v15)
              {
                case 0xFFFFFFFE:
                  v9 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v16);
                  break;
                case 0xFFFFFFFD:
                  v18 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v16);
                  goto LABEL_30;
                case 0xFFFFFFFC:
                  v18 = WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage((WebCore::CSSPrimitiveValue *)v16);
                  v8 = v18;
LABEL_30:
                  v11 = v18;
                  break;
              }
              v19 = v15 + 5;
              ++v15;
              v20 = 14;
              if (v19 >= *((unsigned int *)this + 2))
                goto LABEL_36;
            }
          }
          goto LABEL_35;
        }
      }
LABEL_7:
      *a2 = 0;
      return;
    }
    v20 = 2;
  }
LABEL_36:
  WebCore::ScaleTransformOperation::create(v20, a2, v8, v11, v9);
}

void WebCore::rotateForValue(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v5;
  uint64_t *v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;

  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0x1D800)
    goto LABEL_8;
  v5 = *((_DWORD *)this + 2);
  if (v5 > 4 || ((1 << v5) & 0x16) == 0)
    goto LABEL_8;
  v7 = (uint64_t *)((char *)this + 16);
  v8 = *((_QWORD *)this + v5 + 1);
  if (!v8 || ((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) != 0)
    goto LABEL_8;
  v9 = WebCore::CSSPrimitiveValue::computeDegrees((WebCore::CSSPrimitiveValue *)v8);
  LOBYTE(v10) = 8;
  if (v5 == 1)
  {
    v19 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v19 + 8) = 1;
    *(_BYTE *)(v19 + 12) = 8;
    *(_QWORD *)v19 = off_1E3416EA0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0x3FF0000000000000;
    *(double *)(v19 + 40) = v9;
    *a2 = v19;
  }
  else
  {
    if (v5 == 2)
    {
      v17 = *v7;
      if (!*v7
        || ((*(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16)) & 0x3F87F) != 0x50
        || (v18 = *(unsigned __int16 *)(v17 + 8) - 998, v18 >= 3))
      {
LABEL_8:
        *a2 = 0;
        return;
      }
      v12 = dbl_1969EEF50[(__int16)v18];
      v14 = dbl_1969EEF68[(__int16)v18];
      v16 = dbl_1969EEF80[(__int16)v18];
      v10 = 0x120706u >> (8 * v18);
    }
    else if (v5 == 4)
    {
      v11 = *v7;
      if (!*v7 || ((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F800) != 0)
        goto LABEL_8;
      if ((*(_WORD *)(v11 + 4) & 0x7F) == 0x49)
      {
        v20 = *(_QWORD *)(v11 + 8);
        v32 = 0;
        v29 = WebCore::CSSCalcValue::doubleValue(v20, (uint64_t)&v32);
        if (v32)
          WTF::fastFree((WTF *)(v32 - 16), v21);
        v12 = v29;
      }
      else
      {
        v12 = *(double *)(v11 + 8);
      }
      v13 = *((_QWORD *)this + 3);
      if (!v13 || ((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) != 0)
        goto LABEL_8;
      if ((*(_WORD *)(v13 + 4) & 0x7F) == 0x49)
      {
        v30 = v12;
        v22 = *(_QWORD *)(v13 + 8);
        v32 = 0;
        v27 = WebCore::CSSCalcValue::doubleValue(v22, (uint64_t)&v32);
        if (v32)
          WTF::fastFree((WTF *)(v32 - 16), v23);
        v14 = v27;
        v12 = v30;
      }
      else
      {
        v14 = *(double *)(v13 + 8);
      }
      v15 = *((_QWORD *)this + 4);
      if (!v15 || ((*(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16)) & 0x3F800) != 0)
        goto LABEL_8;
      if ((*(_WORD *)(v15 + 4) & 0x7F) == 0x49)
      {
        v28 = v14;
        v31 = v12;
        v24 = *(_QWORD *)(v15 + 8);
        v32 = 0;
        v26 = WebCore::CSSCalcValue::doubleValue(v24, (uint64_t)&v32);
        if (v32)
          WTF::fastFree((WTF *)(v32 - 16), v25);
        LOBYTE(v10) = 18;
        v14 = v28;
        v12 = v31;
        v16 = v26;
      }
      else
      {
        v16 = *(double *)(v15 + 8);
        LOBYTE(v10) = 18;
      }
    }
    else
    {
      v12 = 0.0;
      v14 = 0.0;
      v16 = 0.0;
    }
    WebCore::RotateTransformOperation::create(v10, a2, v12, v14, v16, v9);
  }
}

uint64_t WebCore::hasDoubleValue(int a1)
{
  uint64_t result;

  result = 1;
  if ((a1 - 1) >= 0x13)
  {
    switch(a1)
    {
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
        return result;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t WebCore::checkRoundKeyword(int a1, uint64_t *a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  _DWORD *v7;

  if (a1 != 596)
    return 0;
  result = 0;
  if (a3 > 642)
  {
    if (a3 == 886)
    {
      v5 = WTF::fastMalloc((WTF *)0x28);
      result = 1;
      *(_DWORD *)(v5 + 8) = 1;
      v6 = 5888;
    }
    else
    {
      if (a3 != 643)
        return result;
      v5 = WTF::fastMalloc((WTF *)0x28);
      result = 1;
      *(_DWORD *)(v5 + 8) = 1;
      v6 = 5120;
    }
  }
  else if (a3 == 535)
  {
    v5 = WTF::fastMalloc((WTF *)0x28);
    result = 1;
    *(_DWORD *)(v5 + 8) = 1;
    v6 = 5376;
  }
  else
  {
    if (a3 != 536)
      return result;
    v5 = WTF::fastMalloc((WTF *)0x28);
    result = 1;
    *(_DWORD *)(v5 + 8) = 1;
    v6 = 5632;
  }
  *(_WORD *)(v5 + 12) = v6;
  *(_QWORD *)v5 = off_1E339A040;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_WORD *)(v5 + 32) = 256;
  v7 = (_DWORD *)*a2;
  *a2 = v5;
  if (v7)
  {
    if (v7[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      return 1;
    }
    else
    {
      --v7[2];
    }
  }
  return result;
}

BOOL WebCore::CSSCalcExpressionNodeParser::parseValue(WebCore::CSSParserTokenRange &,WebCore::CSSValueID,WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>> &)::$_0::operator()(uint64_t **a1, __int16 a2, int a3)
{
  char v3;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = a3;
  v6 = WebCore::calcUnitCategory(a3);
  if (v6 != 9)
  {
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v7 + 8) = 1;
    *(_BYTE *)(v7 + 12) = v6;
    *(_QWORD *)v7 = off_1E3399FD0;
    *(_WORD *)(v7 + 14) = a2;
    *(_BYTE *)(v7 + 16) = v3;
    v8 = (_DWORD *)**a1;
    **a1 = v7;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  return v6 != 9;
}

uint64_t *WebCore::getConstantTable(WebCore *this)
{
  _BYTE v3[24];
  __int128 v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  __int16 v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int16 v11;
  unsigned __int8 v12;
  unint64_t v13;
  __int16 v14;
  unsigned __int8 v15;
  uint64_t v16;
  __int16 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = 875;
  v6 = 1;
  v7 = 0x400921FB54442D18;
  v8 = 874;
  v9 = 1;
  v10 = 0x4005BF0A8B145769;
  v11 = 888;
  v12 = 1;
  v13 = 0xFFF0000000000000;
  v14 = 887;
  v15 = 1;
  v16 = 0x7FF0000000000000;
  v17 = 889;
  v18 = 1;
  v19 = 0x7FF8000000000000;
  *(_QWORD *)this = 0;
  v4 = xmmword_1969EEFE0;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>((uint64_t *)this, &v5, (uint64_t)&v4, (uint64_t)v3);
  *(_QWORD *)&v4 = v9;
  *((_QWORD *)&v4 + 1) = v10;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>((uint64_t *)this, &v8, (uint64_t)&v4, (uint64_t)v3);
  *(_QWORD *)&v4 = v12;
  *((_QWORD *)&v4 + 1) = v13;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>((uint64_t *)this, &v11, (uint64_t)&v4, (uint64_t)v3);
  *(_QWORD *)&v4 = v15;
  *((_QWORD *)&v4 + 1) = v16;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>((uint64_t *)this, &v14, (uint64_t)&v4, (uint64_t)v3);
  *(_QWORD *)&v4 = v18;
  *((_QWORD *)&v4 + 1) = v19;
  return WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>((uint64_t *)this, &v17, (uint64_t)&v4, (uint64_t)v3);
}

BOOL WebCore::CSSCalcExpressionNodeParser::parseValue(WebCore::CSSParserTokenRange &,WebCore::CSSValueID,WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>> &)::$_1::operator()(uint64_t **a1, int a2, double a3)
{
  int v6;
  int *v8;
  int *v9;
  int v10;
  BOOL v11;
  char v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  int v17;
  char v18;
  _DWORD *v19;
  _BYTE *v21;

  v6 = WebCore::calcUnitCategory(a2);
  if (v6 == 9)
    return v6 != 9;
  if (a2 == 6)
  {
    if ((int)a3 > 0xFF || *(_QWORD *)&a3 != COERCE__INT64((double)(int)a3))
      goto LABEL_21;
    v8 = &WebCore::staticCSSValuePool[4 * (int)a3];
    v10 = v8[16];
    v9 = v8 + 16;
    *v9 = v10 + 2;
  }
  else
  {
    if (a2 == 1)
    {
      if ((int)a3 <= 0xFF && *(_QWORD *)&a3 == COERCE__INT64((double)(int)a3))
      {
        v9 = &WebCore::staticCSSValuePool[4 * (int)a3 + 2064];
        *v9 += 2;
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    if (a2 != 3
      || ((int)a3 <= 0xFF
        ? (v11 = *(_QWORD *)&a3 == COERCE__INT64((double)(int)a3))
        : (v11 = 0),
          !v11))
    {
LABEL_21:
      v9 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v9 = 2;
      v13 = *((_BYTE *)v9 + 6);
      *((_WORD *)v9 + 2) = a2 & 0x7F;
      *((_BYTE *)v9 + 6) = v13 & 0xFC;
      *((double *)v9 + 1) = a3;
      goto LABEL_22;
    }
    v9 = &WebCore::staticCSSValuePool[4 * (int)a3 + 1040];
    *v9 += 2;
  }
LABEL_22:
  v14 = WTF::fastMalloc((WTF *)0x18);
  v15 = *((_WORD *)v9 + 2);
  v16 = v15 & 0x7F;
  v17 = 22;
  if ((v16 - 79) >= 2)
  {
    if (v16 == 77)
    {
      v17 = 20;
    }
    else if (v16 != 63)
    {
      v17 = v9[1] & 0x7F;
      if ((v15 & 0x7F) == 0x49)
      {
        v21 = *(_BYTE **)(*((_QWORD *)v9 + 1) + 8);
        if (v21[12] == 1)
        {
LABEL_33:
          v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 72))(*(_QWORD *)(*((_QWORD *)v9 + 1) + 8));
        }
        else
        {
          v17 = 1;
          switch(v21[12])
          {
            case 0:
              break;
            case 2:
              v17 = 3;
              break;
            case 3:
              v17 = 74;
              break;
            case 4:
              v17 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_33;
            default:
              v17 = 0;
              break;
          }
        }
      }
    }
  }
  v18 = WebCore::calcUnitCategory(v17);
  *(_DWORD *)(v14 + 8) = 1;
  *(_BYTE *)(v14 + 12) = v18;
  *(_QWORD *)v14 = off_1E3399F60;
  *(_QWORD *)(v14 + 16) = v9;
  v19 = (_DWORD *)**a1;
  **a1 = v14;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  return v6 != 9;
}

uint64_t WebCore::CSSCalcInvertNode::isResolvable(WebCore::CSSCalcInvertNode *this)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  ++v1[2];
  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 16))(v1);
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  return v2;
}

uint64_t WebCore::CSSCalcInvertNode::createCalcExpression@<X0>(WebCore::CSSCalcInvertNode *this@<X0>, const WebCore::CSSToLengthConversionData *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t result;
  uint64_t v6;

  v4 = (_DWORD *)*((_QWORD *)this + 2);
  ++v4[2];
  (*(void (**)(uint64_t *__return_ptr, _DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v4 + 32))(&v6, v4, a2);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  result = WTF::fastMalloc((WTF *)0x18);
  *(_BYTE *)(result + 8) = 5;
  *(_QWORD *)result = off_1E3408788;
  *(_QWORD *)(result + 16) = v6;
  *a3 = result;
  return result;
}

void WebCore::CSSCalcInvertNode::doubleValue(uint64_t a1)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(a1 + 16);
  ++v1[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 40))(v1);
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
}

void WebCore::CSSCalcInvertNode::computeLengthPx(WebCore::CSSCalcInvertNode *this, const WebCore::CSSToLengthConversionData *a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  ++v2[2];
  (*(void (**)(_DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v2 + 48))(v2, a2);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
}

uint64_t WebCore::CSSCalcInvertNode::dump(WebCore::CSSCalcInvertNode *this, WTF::TextStream *a2)
{
  uint64_t v3;

  v3 = WTF::TextStream::operator<<();
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2), v3);
}

uint64_t WebCore::StyleSheet::media(WebCore::StyleSheet *this)
{
  return 0;
}

uint64_t WebCore::StyleSheet::ownerRule(WebCore::StyleSheet *this)
{
  return 0;
}

uint64_t WebCore::StyleSheet::isCSSStyleSheet(WebCore::StyleSheet *this)
{
  return 0;
}

BOOL WebCore::CSSCalcExpressionNode::equals(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12);
}

void WebCore::CSSCalcInvertNode::~CSSCalcInvertNode(WebCore::CSSCalcInvertNode *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

void WebCore::CSSCalcInvertNode::~CSSCalcInvertNode(WebCore::CSSCalcInvertNode *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CSSCalcInvertNode::isZero(WebCore::CSSCalcInvertNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

uint64_t WebCore::CSSCalcInvertNode::type(WebCore::CSSCalcInvertNode *this)
{
  return 4;
}

uint64_t WebCore::CSSCalcInvertNode::primitiveType(WebCore::CSSCalcInvertNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
}

uint64_t WebCore::CSSCalcInvertNode::collectComputedStyleDependencies(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

int *std::__optional_storage_base<WebCore::Length,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Length,false>>(int *result, uint64_t a2)
{
  int *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = result;
  if (*((unsigned __int8 *)result + 8) != *(unsigned __int8 *)(a2 + 8))
  {
    if (*((_BYTE *)result + 8))
    {
      if (*((_BYTE *)result + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      }
      *((_BYTE *)v2 + 8) = 0;
      return result;
    }
    *result = 0;
    *(_WORD *)((char *)result + 5) = 0;
    v5 = *(unsigned __int8 *)(a2 + 4);
    *((_BYTE *)result + 4) = v5;
    *((_BYTE *)result + 5) = *(_BYTE *)(a2 + 5);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_15;
      if (((1 << v5) & 0x3003) != 0)
      {
        *result = 0;
        goto LABEL_15;
      }
      if (v5 != 11)
        goto LABEL_15;
      v8 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v6 = *(unsigned __int8 *)(a2 + 6);
      *((_BYTE *)result + 6) = v6;
      if (v6)
      {
        *result = *(_DWORD *)a2;
LABEL_15:
        *(_BYTE *)(a2 + 4) = 0;
        *((_BYTE *)result + 8) = 1;
        return result;
      }
      v8 = *(_DWORD *)a2;
    }
    *result = v8;
    goto LABEL_15;
  }
  if (result != (int *)a2 && *((_BYTE *)result + 8))
  {
    if (*((_BYTE *)result + 4) == 11)
    {
      v9 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      a2 = v9;
    }
    v3 = *(unsigned __int8 *)(a2 + 4);
    *((_BYTE *)v2 + 4) = v3;
    *((_BYTE *)v2 + 5) = *(_BYTE *)(a2 + 5);
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_8;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_8;
      }
      if (v3 != 11)
        goto LABEL_8;
      v7 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v4 = *(unsigned __int8 *)(a2 + 6);
      *((_BYTE *)v2 + 6) = v4;
      if (v4)
      {
        *v2 = *(_DWORD *)a2;
LABEL_8:
        *(_BYTE *)(a2 + 4) = 0;
        return result;
      }
      v7 = *(_DWORD *)a2;
    }
    *v2 = v7;
    goto LABEL_8;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleLayer,WTF::RawPtrTraits<WebCore::StyleRuleLayer>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRuleLayer&>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    ++*a2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::StyleRuleNamespace,WTF::RawPtrTraits<WebCore::StyleRuleNamespace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleNamespace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRuleNamespace&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void **result;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD **)a1;
  ++*a2;
  v10[v9] = a2;
  *(_DWORD *)(a1 + 12) = v9 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleLayer,WTF::RawPtrTraits<WebCore::StyleRuleLayer>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = result;
  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = 8 * v2;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
        else
          --*(_DWORD *)result;
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 12) = 0;
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::StyleRuleImport,WTF::RawPtrTraits<WebCore::StyleRuleImport>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleImport>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::StyleRuleImport,WTF::RawPtrTraits<WebCore::StyleRuleImport>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleImport>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleImport,WTF::RawPtrTraits<WebCore::StyleRuleImport>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleImport>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
        else
          --*(_DWORD *)result;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::StyleRuleImport,WTF::RawPtrTraits<WebCore::StyleRuleImport>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleImport>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::StyleSheetContents::hasNestingRules(void)::$_0,BOOL,WebCore::StyleRuleBase const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 4) & 0x1F) == 22;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StyleSheetContents::traverseSubresources(WTF::Function<BOOL ()(WebCore::CachedResource const&)> const&)::$_0,BOOL,WebCore::StyleRuleBase const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;

  result = 0;
  v4 = *(_BYTE *)(a2 + 4) & 0x1F;
  if (v4 <= 4)
  {
    if (v4 == 1)
    {
      v18 = 0;
      v19 = *(_QWORD *)(a2 + 8);
      v20 = *(_QWORD **)(a1 + 8);
      while (1)
      {
        v21 = *(unsigned int *)(v19 + 4);
        if ((v21 & 8) != 0)
        {
          if (*(_DWORD *)(v19 + 28) <= v18)
            return 0;
          v23 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 16 * v18 + 8);
        }
        else
        {
          if (v18 >= v21 >> 4)
            return 0;
          v22 = (unsigned int *)(v19 + 8 + 5 * v18 + ((v21 >> 3) & 0x1FFFFFFE));
          v23 = *v22 | ((unint64_t)*((unsigned __int8 *)v22 + 4) << 32);
        }
        if ((WebCore::CSSValue::traverseSubresources(v23, v20) & 1) != 0)
          break;
        v18 = (v18 + 1);
      }
      return 1;
    }
    else if (v4 == 3)
    {
      v11 = *(_QWORD *)(a2 + 96);
      if (v11 && *(_QWORD *)(v11 + 8))
        return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8));
      else
        return 0;
    }
  }
  else
  {
    switch(v4)
    {
      case 5u:
        v12 = 0;
        v13 = *(_QWORD *)(a2 + 8);
        v14 = *(_QWORD **)(a1 + 8);
        while (1)
        {
          v15 = *(unsigned int *)(v13 + 4);
          if ((v15 & 8) != 0)
          {
            if (*(_DWORD *)(v13 + 28) <= v12)
              return 0;
            v17 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 16 * v12 + 8);
          }
          else
          {
            if (v12 >= v15 >> 4)
              return 0;
            v16 = (unsigned int *)(v13 + 8 + 5 * v12 + ((v15 >> 3) & 0x1FFFFFFE));
            v17 = *v16 | ((unint64_t)*((unsigned __int8 *)v16 + 4) << 32);
          }
          if ((WebCore::CSSValue::traverseSubresources(v17, v14) & 1) != 0)
            return 1;
          v12 = (v12 + 1);
        }
      case 0xBu:
        return (*(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 187) >> 6) & 1;
      case 0x16u:
        v5 = 0;
        v6 = *(_QWORD *)(a2 + 8);
        v7 = *(_QWORD **)(a1 + 8);
        while (1)
        {
          v8 = *(unsigned int *)(v6 + 4);
          if ((v8 & 8) != 0)
          {
            if (*(_DWORD *)(v6 + 28) <= v5)
              return 0;
            v10 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16 * v5 + 8);
          }
          else
          {
            if (v5 >= v8 >> 4)
              return 0;
            v9 = (unsigned int *)(v6 + 8 + 5 * v5 + ((v8 >> 3) & 0x1FFFFFFE));
            v10 = *v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32);
          }
          if ((WebCore::CSSValue::traverseSubresources(v10, v7) & 1) != 0)
            return 1;
          v5 = (v5 + 1);
        }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StyleSheetContents::subresourcesAllowReuse(WebCore::CachePolicy,WebCore::FrameLoader &)::$_0,BOOL,WebCore::CachedResource const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _BOOL8 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl **v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];
  _BYTE v19[56];

  v4 = *(_QWORD *)(a2 + 400);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)v19);
    v5 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v5 + 60)
    || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(unsigned __int8 *)(a1 + 8)))
  {
    return 1;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 24);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v8 + 88);
  if (!v10 || v11 == 0)
    return 0;
  v13 = (const WTF::StringImpl **)(a2 + 160);
  v14 = *(_QWORD *)(v10 + 936);
  if ((*(_BYTE *)(a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 160));
    *(_BYTE *)(a2 + 344) |= 1u;
  }
  switch(*(_BYTE *)(a2 + 556) & 0x1F)
  {
    case 0:
    case 0xD:
      v15 = 1;
      break;
    case 1:
      v15 = 2;
      break;
    case 2:
    case 0xC:
      v15 = 4;
      break;
    case 3:
      v15 = 8;
      break;
    case 4:
    case 5:
      v15 = 16;
      break;
    case 6:
    case 0xE:
      v15 = 64;
      break;
    case 7:
    case 9:
    case 0xA:
    case 0xB:
    case 0xF:
      goto LABEL_20;
    case 8:
      if ((*(_BYTE *)(a2 + 307) & 0xFE) == 2)
        v15 = 512;
      else
LABEL_20:
        v15 = 2048;
      break;
    case 0x10:
      v15 = 32;
      break;
    default:
      v15 = 0;
      break;
  }
  v18[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v18);
  WebCore::UserContentProvider::processContentRuleListsForLoad(v14, v10, v13, v15, v11, (WTF::URL *)v18, (uint64_t)v19);
  v17 = v18[0];
  v18[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v6 = (v19[0] | v19[1]) != 0;
  WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)v19, v16);
  return v6;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StyleSheetContents::isLoadingSubresources(void)::$_0,BOOL,WebCore::CachedResource const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int16 *)(a2 + 557) >> 10) & 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StyleSheetContents::mayDependOnBaseURL(void)::$_0,BOOL,WebCore::StyleRuleBase const&>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v12;
  char v13;

  v2 = *(_BYTE *)(a2 + 4) & 0x1F;
  if (v2 != 22 && v2 != 5 && v2 != 1)
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  v13 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v5 = 0;
  *v4 = off_1E3399DA8;
  v4[1] = &v13;
  v4[2] = &v12;
  v12 = v4;
  while (1)
  {
    v6 = *(unsigned int *)(v3 + 4);
    if ((v6 & 8) != 0)
    {
      if (*(_DWORD *)(v3 + 28) <= v5)
      {
LABEL_12:
        v9 = 0;
        goto LABEL_13;
      }
      v8 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16 * v5 + 8);
    }
    else
    {
      if (v5 >= v6 >> 4)
        goto LABEL_12;
      v7 = (unsigned int *)(v3 + 8 + 5 * v5 + ((v6 >> 3) & 0x1FFFFFFE));
      v8 = *v7 | ((unint64_t)*((unsigned __int8 *)v7 + 4) << 32);
    }
    if ((*(unsigned int (**)(_QWORD *, unint64_t))(*v12 + 16))(v12, v8) == 1)
      break;
    v5 = (v5 + 1);
  }
  LODWORD(v5) = v13 != 0;
  v9 = 1;
LABEL_13:
  v10 = v12;
  v12 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  return v9 & v5;
}

void std::__function::__func<WebCore::CSSCalcExpressionNodeParser::parseCalc(WebCore::CSSParserTokenRange,WebCore::CSSValueID,BOOL)::$_0,std::allocator<WebCore::CSSCalcExpressionNodeParser::parseCalc(WebCore::CSSParserTokenRange,WebCore::CSSValueID,BOOL)::$_0>,void ()(WebCore::CSSCalcExpressionNode &)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::CSSCalcExpressionNodeParser::parseCalc(WebCore::CSSParserTokenRange,WebCore::CSSValueID,BOOL)::$_0,std::allocator<WebCore::CSSCalcExpressionNodeParser::parseCalc(WebCore::CSSParserTokenRange,WebCore::CSSValueID,BOOL)::$_0>,void ()(WebCore::CSSCalcExpressionNode &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3399EA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::CSSCalcExpressionNodeParser::parseCalc(WebCore::CSSParserTokenRange,WebCore::CSSValueID,BOOL)::$_0,std::allocator<WebCore::CSSCalcExpressionNodeParser::parseCalc(WebCore::CSSParserTokenRange,WebCore::CSSValueID,BOOL)::$_0>,void ()(WebCore::CSSCalcExpressionNode &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3399EA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::CSSCalcExpressionNodeParser::parseCalc(WebCore::CSSParserTokenRange,WebCore::CSSValueID,BOOL)::$_0,std::allocator<WebCore::CSSCalcExpressionNodeParser::parseCalc(WebCore::CSSParserTokenRange,WebCore::CSSValueID,BOOL)::$_0>,void ()(WebCore::CSSCalcExpressionNode &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WebCore::CSSCalcNegateNode *v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if ((_DWORD)result == 2)
  {
    if (*(unsigned __int8 *)(a2 + 13) <= 1u)
      *(_BYTE *)(a2 + 32) = 1;
    v5 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(a2 + 16);
      v7 = 8 * v5;
      while (1)
      {
        v8 = *(_DWORD **)v6;
        ++*(_DWORD *)(*(_QWORD *)v6 + 8);
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
        if (!v9)
          break;
        result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v9 + 48))(v9, v8);
        if (v8[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
        v6 += 8;
        v7 -= 8;
        if (!v7)
          return result;
      }
      v10 = (WebCore::CSSCalcNegateNode *)std::__throw_bad_function_call[abi:sn180100]();
      return WebCore::CSSCalcNegateNode::isResolvable(v10);
    }
  }
  return result;
}

uint64_t WebCore::CSSCalcNegateNode::isResolvable(WebCore::CSSCalcNegateNode *this)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  ++v1[2];
  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 16))(v1);
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  return v2;
}

uint64_t WebCore::CSSCalcNegateNode::createCalcExpression@<X0>(WebCore::CSSCalcNegateNode *this@<X0>, const WebCore::CSSToLengthConversionData *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t result;
  uint64_t v6;

  v4 = (_DWORD *)*((_QWORD *)this + 2);
  ++v4[2];
  (*(void (**)(uint64_t *__return_ptr, _DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v4 + 32))(&v6, v4, a2);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  result = WTF::fastMalloc((WTF *)0x18);
  *(_BYTE *)(result + 8) = 4;
  *(_QWORD *)result = off_1E3408840;
  *(_QWORD *)(result + 16) = v6;
  *a3 = result;
  return result;
}

double WebCore::CSSCalcNegateNode::doubleValue(uint64_t a1)
{
  return -(*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t WebCore::CSSCalcNegateNode::dump(WebCore::CSSCalcNegateNode *this, WTF::TextStream *a2)
{
  uint64_t v3;

  v3 = WTF::TextStream::operator<<();
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2), v3);
}

uint64_t WebCore::CSSCalcOperationNode::create(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;

  v4 = (_QWORD *)result;
  if (!*(_QWORD *)a3 || !*(_QWORD *)a4)
    goto LABEL_21;
  v7 = a2;
  v8 = *(unsigned __int8 *)(*(_QWORD *)a3 + 12);
  v9 = *(unsigned __int8 *)(*(_QWORD *)a4 + 12);
  if (a2 == 42)
  {
    if (*(_BYTE *)(*(_QWORD *)a3 + 12))
      v11 = (_DWORD)v9 == 0;
    else
      v11 = 1;
    if (!v11)
      goto LABEL_21;
    if (!*(_BYTE *)(*(_QWORD *)a3 + 12))
      LODWORD(v8) = *(unsigned __int8 *)(*(_QWORD *)a4 + 12);
  }
  else
  {
    if (a2 != 45 && a2 != 43)
      goto LABEL_21;
    if (v8 > 4 || v9 > 4)
    {
      if ((_DWORD)v8 != (_DWORD)v9)
        goto LABEL_21;
    }
    else
    {
      LODWORD(v8) = WebCore::addSubtractResult[5 * v8 + v9];
    }
  }
  if ((_DWORD)v8 == 9)
  {
LABEL_21:
    v12 = 0;
    goto LABEL_22;
  }
  v12 = WTF::fastMalloc((WTF *)0x28);
  v13 = *(_DWORD **)a3;
  *(_QWORD *)a3 = 0;
  v14 = *(_DWORD **)a4;
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 12) = v8;
  *(_QWORD *)v12 = off_1E339A040;
  *(_BYTE *)(v12 + 13) = v7;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)(v12 + 16) = result;
  v15 = *(unsigned int *)(v12 + 28);
  ++v13[2];
  *(_QWORD *)(result + 8 * v15) = v13;
  v16 = v14[2];
  v14[2] = v16 + 1;
  *(_QWORD *)(result + 8 * (v15 + 1)) = v14;
  *(_DWORD *)(v12 + 24) = 2;
  *(_DWORD *)(v12 + 28) = v15 + 2;
  if (v16)
    v14[2] = v16;
  else
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  if (v13[2] == 1)
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  else
    --v13[2];
  *(_WORD *)(v12 + 32) = 256;
LABEL_22:
  *v4 = v12;
  return result;
}

uint64_t WebCore::determineCategory(_DWORD *a1, int a2)
{
  int v2;
  unsigned int v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char v13;

  v2 = a1[3];
  if (!v2)
  {
    LOBYTE(v4) = 9;
    return v4;
  }
  v4 = *(unsigned __int8 *)(**(_QWORD **)a1 + 12);
  if (v2 != 1)
  {
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v8);
      ++*(_DWORD *)(v9 + 8);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9) == 4)
        v10 = 47;
      else
        v10 = a2;
      v11 = v10 - 42;
      v12 = *(unsigned __int8 *)(v9 + 12);
      switch(v11)
      {
        case 0:
          if (v4 && *(_BYTE *)(v9 + 12))
            goto LABEL_19;
          if (!v4)
            v4 = *(unsigned __int8 *)(v9 + 12);
          goto LABEL_12;
        case 1:
        case 3:
          if (v4 <= 4 && v12 <= 4)
          {
            v4 = WebCore::addSubtractResult[5 * v4 + v12];
LABEL_12:
            v13 = 1;
            goto LABEL_13;
          }
          if (v4 == (_DWORD)v12)
            goto LABEL_12;
LABEL_19:
          v13 = 0;
          v7 = 9;
LABEL_13:
          if (*(_DWORD *)(v9 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          else
            --*(_DWORD *)(v9 + 8);
          if ((v13 & 1) == 0)
          {
            LOBYTE(v4) = v7;
            return v4;
          }
          if (++v8 >= (unint64_t)a1[3])
            return v4;
          break;
        case 2:
        case 4:
          goto LABEL_19;
        case 5:
          if (*(_BYTE *)(v9 + 12))
            goto LABEL_19;
          goto LABEL_12;
        default:
          if ((v12 - 3) >= 2)
            goto LABEL_19;
          v13 = 0;
          v7 = 0;
          goto LABEL_13;
      }
    }
  }
  return v4;
}

uint64_t WebCore::CSSCalcOperationNode::createInverseTrig@<X0>(char a1@<W0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  if (a2[3] == 1 && !*(_BYTE *)(**(_QWORD **)a2 + 12))
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = 5;
    *(_QWORD *)result = off_1E339A040;
    *(_BYTE *)(result + 13) = a1;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(result + 16) = v7;
    LODWORD(v7) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(result + 24) = v7;
    LODWORD(v7) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(result + 28) = v7;
    *(_WORD *)(result + 32) = 256;
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createAtan2@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (a1[3] == 2
    && *(unsigned __int8 *)(**(_QWORD **)a1 + 12) == *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12))
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_WORD *)(result + 12) = 3589;
    *(_QWORD *)result = off_1E339A040;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(result + 16) = v5;
    LODWORD(v5) = a1[2];
    a1[2] = 0;
    *(_DWORD *)(result + 24) = v5;
    LODWORD(v5) = a1[3];
    a1[3] = 0;
    *(_DWORD *)(result + 28) = v5;
    *(_WORD *)(result + 32) = 256;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createLog@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *((unsigned int *)a1 + 3);
  if ((unint64_t)(v3 - 1) > 1)
  {
LABEL_7:
    result = 0;
    goto LABEL_8;
  }
  if ((_DWORD)v3)
  {
    v5 = *a1;
    v6 = 8 * v3;
    while (!*(_BYTE *)(*(_QWORD *)v5 + 12))
    {
      v5 += 8;
      v6 -= 8;
      if (!v6)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 2560;
  *(_QWORD *)result = off_1E339A040;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v8 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v8;
  LODWORD(v8) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  *(_DWORD *)(result + 24) = v8;
  LODWORD(v8) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = 0;
  *(_DWORD *)(result + 28) = v8;
  *(_WORD *)(result + 32) = 256;
LABEL_8:
  *a2 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createExp@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (a1[3] == 1 && !*(_BYTE *)(**(_QWORD **)a1 + 12))
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_WORD *)(result + 12) = 2304;
    *(_QWORD *)result = off_1E339A040;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(result + 16) = v5;
    LODWORD(v5) = a1[2];
    a1[2] = 0;
    *(_DWORD *)(result + 24) = v5;
    LODWORD(v5) = a1[3];
    a1[3] = 0;
    *(_DWORD *)(result + 28) = v5;
    *(_WORD *)(result + 32) = 256;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createPowOrSqrt@<X0>(int a1@<W0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  char v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = a1;
  if (a1 == 4)
  {
    if (a2[3] != 1)
      goto LABEL_13;
    v7 = *(unsigned __int8 *)(**(_QWORD **)a2 + 12);
    goto LABEL_12;
  }
  if (a1 != 3)
  {
    v8 = a2[3];
    if (!(_DWORD)v8)
      goto LABEL_13;
    v6 = *(_QWORD *)a2;
    v7 = *(unsigned __int8 *)(**(_QWORD **)a2 + 12);
    if ((_DWORD)v8 != 1)
    {
LABEL_9:
      v9 = v6 + 8;
      v10 = v8 - 1;
      while (*(unsigned __int8 *)(*(_QWORD *)v9 + 12) == v7)
      {
        v9 += 8;
        if (!--v10)
          goto LABEL_12;
      }
      goto LABEL_13;
    }
LABEL_12:
    if (!v7)
    {
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = 0;
      *(_QWORD *)result = off_1E339A040;
      *(_BYTE *)(result + 13) = v4;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(result + 16) = v12;
      LODWORD(v12) = a2[2];
      a2[2] = 0;
      *(_DWORD *)(result + 24) = v12;
      LODWORD(v12) = a2[3];
      a2[3] = 0;
      *(_DWORD *)(result + 28) = v12;
      *(_WORD *)(result + 32) = 256;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (a2[3] == 2)
  {
    v6 = *(_QWORD *)a2;
    v7 = *(unsigned __int8 *)(**(_QWORD **)a2 + 12);
    v8 = 2;
    goto LABEL_9;
  }
LABEL_13:
  result = 0;
LABEL_14:
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createHypot@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v5 = *(unsigned __int8 *)(**(_QWORD **)a1 + 12);
    if ((_DWORD)v3 == 1)
    {
LABEL_6:
      if (v5 != 9)
      {
        result = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(result + 8) = 1;
        *(_BYTE *)(result + 12) = v5;
        *(_QWORD *)result = off_1E339A040;
        *(_BYTE *)(result + 13) = 5;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(result + 16) = v9;
        LODWORD(v9) = a1[2];
        a1[2] = 0;
        *(_DWORD *)(result + 24) = v9;
        LODWORD(v9) = a1[3];
        a1[3] = 0;
        *(_DWORD *)(result + 28) = v9;
        *(_WORD *)(result + 32) = 256;
        goto LABEL_9;
      }
    }
    else
    {
      v6 = *(_QWORD *)a1 + 8;
      v7 = v3 - 1;
      while (*(unsigned __int8 *)(*(_QWORD *)v6 + 12) == v5)
      {
        v6 += 8;
        if (!--v7)
          goto LABEL_6;
      }
    }
  }
  result = 0;
LABEL_9:
  *a2 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createMinOrMaxOrClamp@<X0>(char a1@<W0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;

  v8 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v8)
  {
    WTF::fastMalloc((WTF *)0x28);
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_20;
  }
  v5 = a2;
  v6 = a1;
  v4 = a4;
  v9 = 0;
  v7 = 0;
  v10 = *a2;
  v11 = 8 * v8;
  v12 = 2;
  v13 = 4;
  while (1)
  {
    v14 = *(unsigned __int8 *)(*(_QWORD *)v10 + 12);
    if (v14 < 2 || v14 - 3 < 7)
      goto LABEL_4;
    if (v14 != 2)
      break;
    if (a3)
      v14 = v12;
    else
      v14 = v12 + 1;
    if (a3 == 1)
      v14 = v13;
LABEL_4:
    if (v9)
      goto LABEL_7;
    if (v14 == 9)
      goto LABEL_24;
    v9 = 1;
    v7 = v14;
LABEL_8:
    v10 += 8;
    v11 -= 8;
    if (!v11)
    {
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v7;
      *(_QWORD *)result = off_1E339A040;
      *(_BYTE *)(result + 13) = v6;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v16 = *v5;
      *v5 = 0;
      *(_QWORD *)(result + 16) = v16;
      LODWORD(v16) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(result + 24) = v16;
      LODWORD(v16) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(result + 28) = v16;
      *(_WORD *)(result + 32) = 256;
      goto LABEL_18;
    }
  }
  if (v9)
  {
    v14 = 9;
LABEL_7:
    if (v7 != v14)
    {
LABEL_20:
      if (v7 == 1 && v14 == 4 || v7 == 4 && v14 == 1)
      {
        v9 = 1;
        v7 = 4;
      }
      else
      {
        if (v7 || v14 != 3)
        {
          result = 0;
          if (v7 != 3 || v14)
            goto LABEL_18;
        }
        v9 = 1;
        v7 = 3;
      }
    }
    goto LABEL_8;
  }
LABEL_24:
  result = 0;
LABEL_18:
  *v4 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createTrig@<X0>(char a1@<W0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  BOOL v6;
  uint64_t result;
  uint64_t v9;

  if (a2[3] == 1 && ((v5 = *(unsigned __int8 *)(**(_QWORD **)a2 + 12), v5 != 5) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = 0;
    *(_QWORD *)result = off_1E339A040;
    *(_BYTE *)(result + 13) = a1;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(result + 16) = v9;
    LODWORD(v9) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(result + 24) = v9;
    LODWORD(v9) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(result + 28) = v9;
    *(_WORD *)(result + 32) = 256;
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createSign@<X0>(int a1@<W0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  if (a2[3] == 1 && ((v6 = WebCore::determineCategory(a2, a1), a1 != 16) ? (v7 = v6) : (v7 = 0), v7 != 9))
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = v7;
    *(_QWORD *)result = off_1E339A040;
    *(_BYTE *)(result + 13) = a1;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(result + 16) = v9;
    LODWORD(v9) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(result + 24) = v9;
    LODWORD(v9) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(result + 28) = v9;
    *(_WORD *)(result + 32) = 256;
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createStep@<X0>(char a1@<W0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v15;

  if (a2[3] == 2)
  {
    v6 = *(unsigned __int8 *)(**(_QWORD **)a2 + 12);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 12);
    if (v6 == v7)
    {
LABEL_27:
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v6;
      *(_QWORD *)result = off_1E339A040;
      *(_BYTE *)(result + 13) = a1;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v15 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(result + 16) = v15;
      LODWORD(v15) = a2[2];
      a2[2] = 0;
      *(_DWORD *)(result + 24) = v15;
      LODWORD(v15) = a2[3];
      a2[3] = 0;
      *(_DWORD *)(result + 28) = v15;
      *(_WORD *)(result + 32) = 256;
      goto LABEL_28;
    }
    v8 = v6 == 1 && v7 == 2;
    if (v8 || (v6 == 2 ? (v9 = v7 == 1) : (v9 = 0), v9))
    {
      LOBYTE(v6) = 4;
      goto LABEL_27;
    }
    v11 = v6 == 2 && v7 == 0;
    if (v7 == 2 && v6 == 0 || v11)
    {
      LOBYTE(v6) = 3;
      goto LABEL_27;
    }
  }
  result = 0;
LABEL_28:
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSCalcOperationNode::createRound@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  _BOOL4 v18;
  uint64_t result;
  uint64_t v22;

  v4 = a1[3];
  if (v4 == 2)
  {
    v6 = 20;
  }
  else
  {
    if (v4 != 3)
      goto LABEL_47;
    v5 = **(_QWORD **)a1;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5) != 2)
      goto LABEL_47;
    v6 = *(_BYTE *)(v5 + 13);
    if ((v6 & 0xFC) != 0x14 || *(_DWORD *)(v5 + 28))
      goto LABEL_47;
    v7 = *(_QWORD **)a1;
    v8 = **(_DWORD ***)a1;
    **(_QWORD **)a1 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
    memmove(v7, v7 + 1, *(_QWORD *)a1 + 8 * a1[3] - (_QWORD)(v7 + 1));
    v9 = a1[3] - 1;
    a1[3] = v9;
    if (!v9)
    {
LABEL_52:
      __break(0xC471u);
      JUMPOUT(0x19582A390);
    }
  }
  v10 = **(_QWORD **)a1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10) != 2
    || (*(_BYTE *)(v10 + 13) & 0xFC) != 0x14
    || *(_DWORD *)(v10 + 28))
  {
    if (a1[3] <= 1u)
      goto LABEL_52;
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11) == 2
      && (*(_BYTE *)(v11 + 13) & 0xFC) == 0x14)
    {
      if (*(_DWORD *)(v11 + 28))
        v12 = a1[3] == 2;
      else
        v12 = 0;
      if (!v12)
        goto LABEL_47;
    }
    else if (a1[3] != 2)
    {
      goto LABEL_47;
    }
    v13 = *(unsigned __int8 *)(**(_QWORD **)a1 + 12);
    v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12);
    if (v13 == v14)
    {
LABEL_50:
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v13;
      *(_QWORD *)result = off_1E339A040;
      *(_BYTE *)(result + 13) = v6;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v22 = *(_QWORD *)a1;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(result + 16) = v22;
      LODWORD(v22) = a1[2];
      a1[2] = 0;
      *(_DWORD *)(result + 24) = v22;
      LODWORD(v22) = a1[3];
      a1[3] = 0;
      *(_DWORD *)(result + 28) = v22;
      *(_WORD *)(result + 32) = 256;
      goto LABEL_48;
    }
    v15 = v13 == 1 && v14 == 2;
    if (v15 || (v13 == 2 ? (v16 = v14 == 1) : (v16 = 0), v16))
    {
      LOBYTE(v13) = 4;
      goto LABEL_50;
    }
    v18 = v13 == 2 && v14 == 0;
    if (v14 == 2 && v13 == 0 || v18)
    {
      LOBYTE(v13) = 3;
      goto LABEL_50;
    }
  }
LABEL_47:
  result = 0;
LABEL_48:
  *a2 = result;
  return result;
}

BOOL WebCore::CSSCalcOperationNode::canCombineAllChildren(WebCore::CSSCalcOperationNode *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  _BOOL8 result;
  int v16;
  unint64_t v17;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 1)
  {
    v17 = *((unsigned __int8 *)this + 13);
    if (v17 < 0x2C && ((0xC0000000003uLL >> v17) & 1) != 0)
      return 0;
  }
  else if (!v2)
  {
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD))(***((_QWORD ***)this + 2) + 64))(**((_QWORD **)this + 2)) != 1)
    return 0;
  if (!*((_DWORD *)this + 7)
    || (v3 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 2) + 72))(**((_QWORD **)this + 2)),
        !*((_DWORD *)this + 7)))
  {
    __break(0xC471u);
    JUMPOUT(0x19582A69CLL);
  }
  v4 = v3;
  v5 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 2) + 72))(**((_QWORD **)this + 2));
  v6 = WebCore::calculationCategoryForCombination(v5);
  if (*((_DWORD *)this + 7) < 2u)
    return 1;
  v7 = v6;
  v8 = 1;
  do
  {
    v9 = *(_DWORD **)(*((_QWORD *)this + 2) + 8 * v8);
    ++v9[2];
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v9 + 64))(v9) != 1
      || ((v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 72))(v9),
           v11 = WebCore::calculationCategoryForCombination(v10),
           v7 == 9)
        ? (v12 = v10 == v4)
        : (v12 = 1),
          !v12 ? (v13 = 0) : (v13 = 1),
          v11 == v7 ? (v14 = v13 == 0) : (v14 = 1),
          v14))
    {
      v16 = 1;
    }
    else
    {
      v16 = WebCore::hasDoubleValue(v10) ^ 1;
    }
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
    result = v16 == 0;
    if (v16)
      break;
    ++v8;
  }
  while (v8 < *((unsigned int *)this + 7));
  return result;
}

double WebCore::CSSCalcOperationNode::doubleValue(uint64_t a1, char a2, unsigned __int8 *a3)
{
  WTF *v4;
  int8x16_t v5;
  double v6;
  int8x16_t v7;
  void *v8;
  double v9;
  unsigned __int8 *v11[4];
  WTF *v12;
  unsigned int v13;
  BOOL v14;
  char v15;

  v15 = a2;
  v14 = *(_BYTE *)(a1 + 13) == 42;
  v11[0] = (unsigned __int8 *)&v15;
  v11[1] = (unsigned __int8 *)&v14;
  v11[2] = (unsigned __int8 *)a1;
  v11[3] = a3;
  WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::CSSCalcOperationNode::doubleValue(WebCore::CSSUnitType,WebCore::CSSCalcSymbolTable const&)::$_0>((uint64_t)&v12, (uint64_t *)(a1 + 16), v11);
  v4 = v12;
  v9 = WebCore::CSSCalcOperationNode::evaluateOperator(*(unsigned __int8 *)(a1 + 13), (long double *)v12, v13, v5, v6, v7);
  if (v4)
    WTF::fastFree(v4, v8);
  return v9;
}

uint64_t WebCore::CSSCalcPrimitiveValueNode::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v8;
  uint64_t result;
  _BYTE *v10;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a1;
  v6 = *(_WORD *)(*a1 + 4);
  v7 = v6 & 0x7F;
  v8 = 22;
  if ((v7 - 79) >= 2)
  {
    if (v7 == 77)
    {
      v8 = 20;
    }
    else if (v7 != 63)
    {
      if ((v6 & 0x7F) == 0x49)
      {
        v10 = *(_BYTE **)(*(_QWORD *)(v5 + 8) + 8);
        if (v10[12] == 1)
        {
LABEL_8:
          v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 72))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8));
          v5 = *a1;
        }
        else
        {
          v8 = 1;
          switch(v10[12])
          {
            case 0:
              break;
            case 2:
              v8 = 3;
              break;
            case 3:
              v8 = 74;
              break;
            case 4:
              v8 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_8;
            default:
              v8 = 0;
              break;
          }
        }
      }
      else
      {
        v8 = *(_WORD *)(*a1 + 4) & 0x7F;
      }
    }
  }
  result = WebCore::calcUnitCategory(v8);
  *(_DWORD *)(v4 + 8) = 1;
  *(_BYTE *)(v4 + 12) = result;
  *(_QWORD *)v4 = off_1E3399F60;
  *a1 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  *a2 = v4;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  if (*(_DWORD *)(result + 8))
  {
    v2 = *(unsigned int *)(result + 12);
    if ((_DWORD)v2)
    {
      v4 = *(WTF **)result;
      v5 = 8 * v2;
      do
      {
        v6 = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v6)
        {
          if (v6[2] == 1)
          {
            v9 = result;
            v7 = v5;
            v8 = v4;
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
            v5 = v7;
            v4 = v8;
            result = v9;
          }
          else
          {
            --v6[2];
          }
        }
        v4 = (WTF *)((char *)v4 + 8);
        v5 -= 8;
      }
      while (v5);
      *(_DWORD *)(result + 12) = 0;
    }
    v3 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v3, a2);
    }
  }
  return result;
}

double WebCore::CSSCalcPrimitiveValueNode::doubleValue(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  double v10;
  double v11;
  _BYTE *v13;

  if (!WebCore::hasDoubleValue(a2))
    return 0.0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)v4 += 2;
  v5 = *(_WORD *)(v4 + 4);
  v6 = v5 & 0x7F;
  v7 = 22;
  if ((v6 - 79) >= 2)
  {
    if (v6 == 77)
    {
      v7 = 20;
    }
    else if (v6 != 63)
    {
      v7 = *(_WORD *)(v4 + 4) & 0x7F;
      if ((v5 & 0x7F) == 0x49)
      {
        v13 = *(_BYTE **)(*(_QWORD *)(v4 + 8) + 8);
        if (v13[12] == 1)
        {
LABEL_15:
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 72))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
        }
        else
        {
          v7 = 1;
          switch(v13[12])
          {
            case 0:
              break;
            case 2:
              v7 = 3;
              break;
            case 3:
              v7 = 74;
              break;
            case 4:
              v7 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_15;
            default:
              v7 = 0;
              break;
          }
        }
      }
    }
  }
  v8 = WebCore::unitCategory(v7);
  if (v8 == WebCore::unitCategory(a2))
  {
    v10 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, a2));
    if ((_BYTE)v9)
      v11 = v10;
    else
      v11 = 0.0;
  }
  else
  {
    v11 = 0.0;
  }
  if (*(_DWORD *)v4 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, v9);
  else
    *(_DWORD *)v4 -= 2;
  return v11;
}

int *WebCore::CSSCalcPrimitiveValueNode::multiply(WebCore::CSSCalcPrimitiveValueNode *this, double a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  double v9;
  double v10;
  int *result;
  char v13;
  _DWORD *v14;
  int *v16;
  int v17;
  _BYTE *v18;
  double v19;
  char v20;
  double v21;
  double v22;

  v4 = *((_QWORD *)this + 2);
  *(_DWORD *)v4 += 2;
  v5 = *(_WORD *)(v4 + 4);
  v6 = v5 & 0x7F;
  v7 = 22;
  if ((v6 - 79) < 2)
    goto LABEL_34;
  if (v6 == 77)
  {
    v7 = 20;
    goto LABEL_34;
  }
  if (v6 == 63)
  {
LABEL_34:
    v19 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, v7));
    if (!v20)
      v19 = 0.0;
    v10 = v19 * a2;
    goto LABEL_13;
  }
  v7 = *(_WORD *)(v4 + 4) & 0x7F;
  if ((v5 & 0x7F) == 0x49)
  {
    v18 = *(_BYTE **)(*(_QWORD *)(v4 + 8) + 8);
    if (v18[12] != 1)
    {
      v7 = 74;
      switch(v18[12])
      {
        case 0:
          v22 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, 1u));
          if (!(_BYTE)v8)
            v22 = 0.0;
          v10 = v22 * a2;
          goto LABEL_45;
        case 2:
          v21 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, 3u));
          if (!(_BYTE)v8)
            v21 = 0.0;
          v10 = v21 * a2;
          goto LABEL_19;
        case 3:
          goto LABEL_34;
        case 4:
          v7 = 75;
          goto LABEL_34;
        case 5:
        case 6:
        case 7:
        case 8:
          break;
        default:
          v7 = 0;
          goto LABEL_34;
      }
    }
    v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v18 + 72))(v18);
  }
  v9 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, v7));
  if (!(_BYTE)v8)
    v9 = 0.0;
  v10 = v9 * a2;
  switch(v7)
  {
    case 6u:
      if ((int)v10 > 0xFF || *(_QWORD *)&v10 != COERCE__INT64((double)(int)v10))
      {
        LOBYTE(v7) = 6;
LABEL_13:
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v13 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = v7 & 0x7F;
        *((_BYTE *)result + 6) = v13 & 0xFC;
        *((double *)result + 1) = v10;
        break;
      }
      v16 = &WebCore::staticCSSValuePool[4 * (int)v10];
      v17 = v16[16];
      result = v16 + 16;
      *result = v17 + 2;
      break;
    case 1u:
LABEL_45:
      if ((int)v10 > 0xFF || *(_QWORD *)&v10 != COERCE__INT64((double)(int)v10))
      {
        LOBYTE(v7) = 1;
        goto LABEL_13;
      }
      result = &WebCore::staticCSSValuePool[4 * (int)v10 + 2064];
      *result += 2;
      break;
    case 3u:
LABEL_19:
      if ((int)v10 > 0xFF || *(_QWORD *)&v10 != COERCE__INT64((double)(int)v10))
      {
        LOBYTE(v7) = 3;
        goto LABEL_13;
      }
      result = &WebCore::staticCSSValuePool[4 * (int)v10 + 1040];
      *result += 2;
      break;
    default:
      goto LABEL_13;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = result;
  if (v14)
  {
    if (*v14 == 2)
      result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v8);
    else
      *v14 -= 2;
  }
  if (*(_DWORD *)v4 == 2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, v8);
  *(_DWORD *)v4 -= 2;
  return result;
}

void WebCore::CSSCalcOperationNode::simplifyRecursive(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unsigned int v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  _OWORD *v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int i;
  unsigned int v28;
  int *v29;
  _QWORD *v30;
  WTF *v31;
  int *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  WTF **v37;
  unint64_t v38;
  WTF *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  __int16 v49;
  int v50;
  int v51;
  uint64_t v52;
  WTF *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  __int16 v59;
  double v60;
  double v61;
  int v62;
  int v63;
  BOOL v64;
  int *v65;
  char v66;
  _DWORD *v67;
  _QWORD *v69;
  _QWORD **v70;
  unsigned int v71;
  char v72;
  void *v73;
  double v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  char v77;
  void *v78;
  double v79;
  uint64_t v80;
  char v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  char v84;
  void *v85;
  double v86;
  int v87;
  int *v88;
  int v89;
  int v90;
  WTF *v91;
  int *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  int j;
  uint64_t v98;
  int **v99;
  unsigned int v100;
  int v101;
  WTF *v102;
  WTF *v103;
  WTF *v104;
  WTF **v105;
  WTF **v106;
  _DWORD *v107;
  uint64_t v108;
  unsigned int v109;
  int *v110;
  uint64_t v111;
  int v112;
  WTF *v113;
  uint64_t *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  _QWORD *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  __int16 v122;
  int v123;
  int v124;
  unsigned int v125;
  double v126;
  double v127;
  char v128;
  double v129;
  uint64_t v130;
  __int16 v131;
  int v132;
  unsigned int v133;
  int v134;
  double v135;
  double v136;
  int *v138;
  char v139;
  _DWORD *v140;
  int *v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int v146;
  int k;
  uint64_t v148;
  _QWORD *v149;
  unsigned int v150;
  int v151;
  WTF *v152;
  uint64_t v153;
  WTF **v154;
  WTF **v155;
  uint64_t *v156;
  int *v157;
  int v158;
  uint64_t *v160;
  WTF *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  WTF *v165;
  WTF *v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int16 v172;
  int v173;
  unsigned int v174;
  WTF::StringImpl *v175;
  double v176;
  double v177;
  WTF *v178;
  uint64_t v179;
  int *v180;
  unsigned int v181;
  int v182;
  uint64_t v183;
  int v184;
  WTF *v185;
  WebCore::CSSCalcPrimitiveValueNode *v186;
  void *v187;
  uint64_t v188;
  WTF *v189;
  uint64_t v190;
  _DWORD *v191;
  WTF *v192;
  int v193;
  int v194;
  void *v195;
  double v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  int v199;
  uint64_t v201;
  __int16 v202;
  double v203;
  int v204;
  _BYTE *v205;
  void *v206;
  uint64_t v207;
  WTF *v208;
  uint64_t v209;
  _DWORD *v210;
  WTF *v211;
  WTF *v212;
  WTF *v213;
  char v214;
  int v215;
  int v216;
  uint64_t v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  uint64_t *v222;
  int *v223;
  uint64_t v224;
  int *v225;
  int v226;
  uint64_t v227;
  _DWORD *v228;
  int v229;
  int v230;
  int v231;
  void *v232;
  double v233;
  WTF::StringImpl *v234;
  uint64_t v235;
  _BYTE *v236;
  _BYTE *v237;
  WTF::StringImpl *v238;
  int v239;
  WTF *v240;
  uint64_t v241;
  WTF *v242;
  WTF *v243;
  int v244;
  WTF *v245;
  _BYTE *v246;
  _BYTE *v247;
  _BYTE *v248;
  WTF *v249;
  _DWORD *v250;
  uint64_t v251;
  double v252;
  double v253;
  _DWORD *v254;
  double v255;
  char v256;
  _DWORD *v257;
  char v258;
  void *v259;
  double v260;
  WTF::StringImpl *v261;
  uint64_t v262;
  char v263;
  void *v264;
  double v265;
  uint64_t v266;
  char v267;
  WTF::StringImpl *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  WTF **v274;
  uint64_t v275;
  WTF *v276;
  int v277;
  WTF *v278;
  WebCore::CSSCalcPrimitiveValueNode *v279;
  int **v282;
  WTF::StringImpl *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  int v289;
  WTF *v290;
  int *v291;
  WTF *v292;
  WTF *v293;
  WTF *v294;
  unint64_t v295;
  int *v296;

  v6 = *a1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 64))(*a1) == 2)
  {
    if (*(_DWORD *)(v6 + 28))
    {
      v38 = 0;
      do
      {
        v39 = *(WTF **)(*(_QWORD *)(v6 + 16) + 8 * v38);
        ++*((_DWORD *)v39 + 2);
        v294 = v39;
        WebCore::CSSCalcOperationNode::simplifyRecursive(&v291, &v294, (a2 + 1));
        if (v294)
        {
          if (*((_DWORD *)v294 + 2) == 1)
            (*(void (**)(void))(*(_QWORD *)v294 + 8))();
          else
            --*((_DWORD *)v294 + 2);
        }
        if (v38 >= *(unsigned int *)(v6 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19582D328);
        }
        v40 = *(_QWORD *)(v6 + 16);
        v41 = *(int **)(v40 + 8 * v38);
        if (v291 == v41)
        {
          if (v291)
          {
            if (v291[2] == 1)
              (*(void (**)(void))(*(_QWORD *)v291 + 8))();
            else
              --v291[2];
          }
        }
        else
        {
          *(_QWORD *)(v40 + 8 * v38) = v291;
          if (v41)
          {
            if (v41[2] == 1)
              (*(void (**)(int *))(*(_QWORD *)v41 + 8))(v41);
            else
              --v41[2];
          }
        }
        ++v38;
      }
      while (v38 < *(unsigned int *)(v6 + 28));
    }
  }
  else
  {
    v7 = *a1;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 64))(*a1) == 3
      || (v7 = *a1, (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 64))(*a1) == 4))
    {
      v53 = *(WTF **)(v7 + 16);
      ++*((_DWORD *)v53 + 2);
      v294 = v53;
      WebCore::CSSCalcOperationNode::simplifyRecursive(&v291, &v294, (a2 + 1));
      if (v294)
      {
        if (*((_DWORD *)v294 + 2) == 1)
          (*(void (**)(void))(*(_QWORD *)v294 + 8))();
        else
          --*((_DWORD *)v294 + 2);
      }
      v54 = *(int **)(v7 + 16);
      if (v291 == v54)
      {
        if (v291)
        {
          if (v291[2] == 1)
            (*(void (**)(void))(*(_QWORD *)v291 + 8))();
          else
            --v291[2];
        }
      }
      else
      {
        *(_QWORD *)(v7 + 16) = v291;
        if (v54)
        {
          if (v54[2] == 1)
            (*(void (**)(int *))(*(_QWORD *)v54 + 8))(v54);
          else
            --v54[2];
        }
      }
    }
  }
  v8 = *a1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 64))(*a1) == 1)
  {
    v42 = *(_QWORD *)(v8 + 16);
    *(_DWORD *)v42 += 2;
    v43 = *(_WORD *)(v42 + 4);
    v44 = v43 & 0x7F;
    v45 = 22;
    if ((v44 - 79) >= 2)
    {
      if (v44 == 77)
      {
        v45 = 20;
      }
      else if (v44 != 63)
      {
        v45 = *(_WORD *)(v42 + 4) & 0x7F;
        if ((v43 & 0x7F) == 0x49)
        {
          v236 = *(_BYTE **)(*(_QWORD *)(v42 + 8) + 8);
          if (v236[12] == 1)
          {
LABEL_429:
            v45 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v236 + 72))(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 8));
          }
          else
          {
            v45 = 1;
            switch(v236[12])
            {
              case 0:
                break;
              case 2:
                v45 = 3;
                break;
              case 3:
                v45 = 74;
                break;
              case 4:
                v45 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_429;
              default:
                v45 = 0;
                break;
            }
          }
        }
      }
    }
    v46 = WebCore::calculationCategoryForCombination(v45);
    if (v46 == 1)
    {
      v48 = 6;
LABEL_61:
      v49 = *(_WORD *)(v42 + 4);
      v50 = v49 & 0x7F;
      v51 = 22;
      if ((v50 - 79) >= 2)
      {
        if (v50 == 77)
        {
          v51 = 20;
        }
        else if (v50 != 63)
        {
          v51 = *(_WORD *)(v42 + 4) & 0x7F;
          if ((v49 & 0x7F) == 0x49)
          {
            v237 = *(_BYTE **)(*(_QWORD *)(v42 + 8) + 8);
            if (v237[12] == 1)
            {
LABEL_431:
              v51 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v237 + 72))(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 8));
            }
            else
            {
              v51 = 1;
              switch(v237[12])
              {
                case 0:
                  break;
                case 2:
                  v51 = 3;
                  break;
                case 3:
                  v51 = 74;
                  break;
                case 4:
                  v51 = 75;
                  break;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto LABEL_431;
                default:
                  v51 = 0;
                  break;
              }
            }
          }
        }
      }
      if (v48 != v51)
      {
        v255 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v42, v48));
        if (!v256)
          v255 = 0.0;
        WebCore::CSSPrimitiveValue::create(v48, &v291, v255);
        v257 = *(_DWORD **)(v8 + 16);
        *(_QWORD *)(v8 + 16) = v291;
        if (v257)
        {
          if (*v257 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v257, v47);
          else
            *v257 -= 2;
        }
      }
    }
    else
    {
      v48 = 1;
      switch(v46)
      {
        case 0:
          goto LABEL_61;
        case 2:
          v48 = 3;
          goto LABEL_61;
        case 5:
          v48 = 12;
          goto LABEL_61;
        case 6:
          v48 = 16;
          goto LABEL_61;
        case 7:
          v48 = 17;
          goto LABEL_61;
        case 8:
          v48 = 55;
          goto LABEL_61;
        case 9:
          break;
        default:
          v48 = 0;
          goto LABEL_61;
      }
    }
    if (*(_DWORD *)v42 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v42, v47);
    else
      *(_DWORD *)v42 -= 2;
    goto LABEL_68;
  }
  v9 = *a1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 64))(*a1) == 2)
  {
    v11 = *(unsigned __int8 *)(v9 + 13);
    if (*(_DWORD *)(v9 + 28) == 1)
    {
      if (v11 - 42 >= 2 && v11 > 1)
        goto LABEL_9;
      if (a2)
        goto LABEL_350;
    }
    if (v11 == 43)
    {
      v10.n128_f64[0] = WebCore::CSSCalcOperationNode::hoistChildrenWithOperator(v9, 43);
      v11 = *(unsigned __int8 *)(v9 + 13);
    }
LABEL_9:
    if (v11 == 42)
    {
      v10.n128_f64[0] = WebCore::CSSCalcOperationNode::hoistChildrenWithOperator(v9, 42);
      v11 = *(unsigned __int8 *)(v9 + 13);
    }
    if ((v11 & 0xFC) != 0x14 && v11 >= 0x14 && v11 - 42 > 1)
      goto LABEL_347;
    v12 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v12 == 1)
    {
      if (v11 - 42 < 2 || v11 < 2)
        goto LABEL_349;
      v70 = (_QWORD **)(v9 + 16);
      v69 = *(_QWORD **)(v9 + 16);
      *(_BYTE *)(v9 + 33) = 0;
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v69 + 16))(*v69))
        goto LABEL_347;
      v71 = *(unsigned __int8 *)(v9 + 13);
      if (v71 - 6 < 5 || v71 == 4)
      {
        if (!*(_DWORD *)(v9 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19582D3F8);
        }
        v72 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v9 + 16) + 72))(**(_QWORD **)(v9 + 16));
        v291 = 0;
        v74 = WebCore::CSSCalcOperationNode::doubleValue(v9, v72, (unsigned __int8 *)&v291);
        if (v291)
          WTF::fastFree((WTF *)(v291 - 4), v73);
        WebCore::CSSPrimitiveValue::create(v74, (int **)&v294);
        WebCore::CSSCalcPrimitiveValueNode::create((uint64_t *)&v294, (uint64_t *)&v291);
        if (v294)
        {
          if (*(_DWORD *)v294 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v294, v75);
          else
            *(_DWORD *)v294 -= 2;
        }
        WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v9 + 16, v75);
        v76 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v76 == *(_DWORD *)(v9 + 24))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v76 + 1);
          v76 = *(unsigned int *)(v9 + 28);
          *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v76) = v291;
        }
        else
        {
          (*v70)[v76] = v291;
        }
        *(_DWORD *)(v9 + 28) = v76 + 1;
        v71 = *(unsigned __int8 *)(v9 + 13);
      }
      if (v71 - 11 <= 2)
      {
        if (!*(_DWORD *)(v9 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19582D400);
        }
        v77 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v9 + 16) + 72))(**(_QWORD **)(v9 + 16));
        v291 = 0;
        v79 = WebCore::CSSCalcOperationNode::doubleValue(v9, v77, (unsigned __int8 *)&v291);
        if (v291)
          WTF::fastFree((WTF *)(v291 - 4), v78);
        v80 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v80 = 2;
        v81 = *(_BYTE *)(v80 + 6);
        *(_WORD *)(v80 + 4) = 12;
        *(_BYTE *)(v80 + 6) = v81 & 0xFC;
        *(double *)(v80 + 8) = v79;
        v294 = (WTF *)v80;
        WebCore::CSSCalcPrimitiveValueNode::create((uint64_t *)&v294, (uint64_t *)&v291);
        if (v294)
        {
          if (*(_DWORD *)v294 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v294, v82);
          else
            *(_DWORD *)v294 -= 2;
        }
        WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v9 + 16, v82);
        v83 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v83 == *(_DWORD *)(v9 + 24))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v83 + 1);
          v83 = *(unsigned int *)(v9 + 28);
          *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v83) = v291;
        }
        else
        {
          (*v70)[v83] = v291;
        }
        *(_DWORD *)(v9 + 28) = v83 + 1;
        v71 = *(unsigned __int8 *)(v9 + 13);
      }
      if (v71 > 0x10
        || ((1 << v71) & 0x18020) == 0
        || !WebCore::CSSCalcOperationNode::canCombineAllChildren((WebCore::CSSCalcOperationNode *)v9))
      {
        goto LABEL_347;
      }
      if (!*(_DWORD *)(v9 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19582D408);
      }
      v84 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v9 + 16) + 72))(**(_QWORD **)(v9 + 16));
      v291 = 0;
      v86 = WebCore::CSSCalcOperationNode::doubleValue(v9, v84, (unsigned __int8 *)&v291);
      if (v291)
        WTF::fastFree((WTF *)(v291 - 4), v85);
      if (*(_BYTE *)(v9 + 13) == 16)
      {
        v87 = 1;
      }
      else
      {
        if (!*(_DWORD *)(v9 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19582D410);
        }
        v87 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v70 + 72))(**v70);
      }
      WebCore::CSSPrimitiveValue::create(v87, (int **)&v294, v86);
      WebCore::CSSCalcPrimitiveValueNode::create((uint64_t *)&v294, (uint64_t *)&v291);
      if (v294)
      {
        if (*(_DWORD *)v294 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v294, v284);
        else
          *(_DWORD *)v294 -= 2;
      }
      WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v9 + 16, v284);
      v285 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v285 == *(_DWORD *)(v9 + 24))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v285 + 1);
        v285 = *(unsigned int *)(v9 + 28);
        *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v285) = v291;
      }
      else
      {
        (*v70)[v285] = v291;
      }
      v199 = v285 + 1;
      *(_DWORD *)(v9 + 28) = v199;
      goto LABEL_348;
    }
    if (!(_DWORD)v12)
      goto LABEL_347;
    v13 = (WTF **)(v9 + 16);
    *(_BYTE *)(v9 + 33) = 0;
    if (v11 == 43)
    {
      v295 = 0;
      if (v12 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19582D330);
      }
      v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
      LODWORD(v295) = v12;
      v293 = 0;
      v294 = v14;
      v291 = 0;
      v292 = 0;
      v16 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(v9 + 16);
        v18 = v17 + 8 * v16;
        do
        {
          v19 = *(_DWORD **)v17;
          ++*(_DWORD *)(*(_QWORD *)v17 + 8);
          v20 = v291;
          if (!v291)
          {
            v21 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x50);
            *v21 = xmmword_1968A5190;
            v20 = (int *)(v21 + 1);
            v291 = v20;
          }
          v22 = 0;
          v23 = ((unint64_t)v19 + ~((_QWORD)v19 << 32)) ^ (((unint64_t)v19 + ~((_QWORD)v19 << 32)) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = (v25 >> 31) ^ v25;
          for (i = 1; ; ++i)
          {
            v28 = v26 & *(v20 - 2);
            v29 = &v20[2 * v28];
            v30 = *(_QWORD **)v29;
            if (!*(_QWORD *)v29)
            {
              if (v22)
              {
                *(_QWORD *)v22 = 0;
                --*(v291 - 4);
                v29 = v22;
              }
              v31 = (WTF *)WTF::fastMalloc((WTF *)0x18);
              *((_QWORD *)v31 + 1) = 0;
              *((_QWORD *)v31 + 2) = 0;
              *(_QWORD *)v31 = v19;
              *(_QWORD *)v29 = v31;
              v32 = v291;
              if (v291)
                v33 = *(v291 - 3) + 1;
              else
                v33 = 1;
              *(v291 - 3) = v33;
              v34 = (*(v32 - 4) + v33);
              v35 = *(v32 - 1);
              if (v35 > 0x400)
              {
                if (v35 > 2 * v34)
                  goto LABEL_28;
              }
              else if (3 * v35 > 4 * v34)
              {
LABEL_28:
                v36 = v293;
                *((_QWORD *)v31 + 1) = v293;
                *((_QWORD *)v31 + 2) = 0;
                if (v36)
                  v37 = (WTF **)((char *)v36 + 16);
                else
                  v37 = &v292;
                *v37 = v31;
                v293 = v31;
                goto LABEL_32;
              }
              v31 = (WTF *)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::expand((uint64_t *)&v291, (_QWORD **)v29);
              goto LABEL_28;
            }
            if (v30 != (_QWORD *)-1)
            {
              v29 = v22;
              if ((_DWORD *)*v30 == v19)
                break;
            }
            v26 = i + v28;
            v22 = v29;
          }
          if (v19)
          {
            if (v19[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
            else
              --v19[2];
          }
LABEL_32:
          v17 += 8;
        }
        while (v17 != v18);
        v88 = v291;
        if (v291)
        {
          v13 = (WTF **)(v9 + 16);
          while (1)
          {
            v89 = *(v88 - 3);
            if (!v89)
              goto LABEL_333;
            v90 = *(v88 - 2);
            v91 = v292;
            v92 = *(int **)v292;
            v93 = ~(*(_QWORD *)v292 << 32) + *(_QWORD *)v292;
            v94 = (v93 ^ (v93 >> 22)) + ~((v93 ^ (v93 >> 22)) << 13);
            v95 = (9 * (v94 ^ (v94 >> 8))) ^ ((9 * (v94 ^ (v94 >> 8))) >> 15);
            v96 = v90 & (((v95 + ~(v95 << 27)) >> 31) ^ (v95 + ~((_DWORD)v95 << 27)));
            for (j = 1; ; ++j)
            {
              v98 = v96;
              v99 = *(int ***)&v88[2 * v96];
              if (v99 != (int **)-1)
              {
                if (!v99)
                {
                  v282 = *(int ***)&v88[2 * *(v88 - 1)];
                  v92 = *v282;
                  *v282 = 0;
                  goto LABEL_143;
                }
                if (*v99 == v92)
                  break;
              }
              v96 = (v98 + j) & v90;
            }
            v100 = *(v88 - 1);
            *v99 = 0;
            if ((_DWORD)v98 != v100)
            {
              *(_QWORD *)&v88[2 * v98] = -1;
              v101 = v89 - 1;
              ++*(v88 - 4);
              *(v88 - 3) = v101;
              if (6 * v101 < v100 && v100 >= 9)
              {
                WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::rehash((uint64_t *)&v291, v100 >> 1);
                v91 = v292;
              }
            }
LABEL_143:
            v102 = (WTF *)*((_QWORD *)v91 + 1);
            v103 = (WTF *)*((_QWORD *)v91 + 2);
            if (v102)
            {
              *((_QWORD *)v102 + 2) = v103;
              v104 = (WTF *)*((_QWORD *)v91 + 2);
              v103 = v91;
            }
            else
            {
              v292 = (WTF *)*((_QWORD *)v91 + 2);
              v104 = v103;
            }
            v105 = (WTF **)((char *)v104 + 8);
            v64 = v104 == 0;
            v106 = &v293;
            if (!v64)
              v106 = v105;
            *v106 = v102;
            v107 = *(_DWORD **)v91;
            *(_QWORD *)v91 = 0;
            if (v107)
            {
              if (v107[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v107 + 8))(v107);
              else
                --v107[2];
            }
            WTF::fastFree(v91, v15);
            v296 = v92;
            LODWORD(v108) = HIDWORD(v295);
            if (HIDWORD(v295) == (_DWORD)v295)
            {
              v160 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v294, HIDWORD(v295) + 1, (unint64_t)&v296);
              v108 = HIDWORD(v295);
              v161 = v294;
              v162 = *v160;
              *v160 = 0;
              *((_QWORD *)v161 + v108) = v162;
            }
            else
            {
              v296 = 0;
              *((_QWORD *)v294 + HIDWORD(v295)) = v92;
            }
            v109 = v108 + 1;
            HIDWORD(v295) = v109;
            v110 = v296;
            v296 = 0;
            if (v110)
            {
              if (v110[2] == 1)
              {
                (*(void (**)(int *))(*(_QWORD *)v110 + 8))(v110);
                v109 = HIDWORD(v295);
              }
              else
              {
                --v110[2];
              }
            }
            if (!v109)
            {
              __break(0xC471u);
              JUMPOUT(0x19582D340);
            }
            v111 = *((_QWORD *)v294 + v109 - 1);
            v112 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v111 + 64))(v111) == 1
                 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 72))(v111)
                 : 0;
            if (v103)
              break;
LABEL_159:
            v88 = v291;
            if (!v291)
              goto LABEL_333;
          }
          if (!v112)
          {
            do
            {
              v163 = *(uint64_t **)v103;
              v103 = (WTF *)*((_QWORD *)v103 + 2);
              ++*((_DWORD *)v163 + 2);
              if ((*(unsigned int (**)(uint64_t *))(*v163 + 64))(v163) == 1)
                (*(void (**)(uint64_t *))(*v163 + 72))(v163);
              if (*((_DWORD *)v163 + 2) == 1)
                (*(void (**)(uint64_t *))(*v163 + 8))(v163);
              else
                --*((_DWORD *)v163 + 2);
            }
            while (v103);
            goto LABEL_159;
          }
          v288 = a3;
          v289 = v112;
          while (1)
          {
            v113 = (WTF *)*((_QWORD *)v103 + 2);
            v114 = *(uint64_t **)v103;
            *((_DWORD *)v114 + 2) = *(_DWORD *)(*(_QWORD *)v103 + 8) + 1;
            if ((*(unsigned int (**)(uint64_t *))(*v114 + 64))(v114) == 1)
            {
              v115 = (*(uint64_t (**)(uint64_t *))(*v114 + 72))(v114);
              if (v115)
              {
                v116 = v115;
                v290 = v113;
                v117 = WebCore::calculationCategoryForCombination(v112);
                if (v117 != 9 && v117 == WebCore::calculationCategoryForCombination(v116))
                {
                  v118 = 2;
                  goto LABEL_168;
                }
                v112 = v289;
                if (v289 == v116)
                {
                  if (WebCore::hasDoubleValue(v289))
                    break;
                }
              }
            }
LABEL_218:
            if (*((_DWORD *)v114 + 2) == 1)
              (*(void (**)(uint64_t *))(*v114 + 8))(v114);
            else
              --*((_DWORD *)v114 + 2);
            v103 = v113;
            if (!v113)
              goto LABEL_159;
          }
          v118 = 1;
LABEL_168:
          if (!HIDWORD(v295))
          {
            __break(0xC471u);
            JUMPOUT(0x19582D348);
          }
          v119 = (_QWORD *)*((_QWORD *)v294 + HIDWORD(v295) - 1);
          if ((*(unsigned int (**)(_QWORD *))(*v119 + 64))(v119) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19582CE54);
          }
          ++*((_DWORD *)v114 + 2);
          if ((*(unsigned int (**)(uint64_t *))(*v114 + 64))(v114) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19582CE74);
          }
          v121 = v119[2];
          *(_DWORD *)v121 += 2;
          v122 = *(_WORD *)(v121 + 4);
          v123 = v122 & 0x7F;
          v124 = 22;
          if ((v123 - 79) >= 2)
          {
            if (v123 == 77)
            {
              v124 = 20;
            }
            else if (v123 != 63)
            {
              v124 = *(_WORD *)(v121 + 4) & 0x7F;
              if ((v122 & 0x7F) == 0x49)
              {
                v247 = *(_BYTE **)(*(_QWORD *)(v121 + 8) + 8);
                if (v247[12] == 1)
                {
LABEL_466:
                  v124 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v247 + 72))(v247);
                }
                else
                {
                  v124 = 1;
                  switch(v247[12])
                  {
                    case 0:
                      break;
                    case 2:
                      v124 = 3;
                      break;
                    case 3:
                      v124 = 74;
                      break;
                    case 4:
                      v124 = 75;
                      break;
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                      goto LABEL_466;
                    default:
                      v124 = 0;
                      break;
                  }
                }
              }
            }
          }
          if (v118 != 2)
          {
            v64 = v118 == 1;
            v112 = v289;
            if (v64)
            {
              v252 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)v121);
              v253 = WebCore::CSSCalcPrimitiveValueNode::doubleValue((uint64_t)v114, v124);
              WebCore::CSSPrimitiveValue::create(v124, &v296, v252 + v253);
              v254 = (_DWORD *)v119[2];
              v119[2] = v296;
              if (v254)
              {
                if (*v254 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v254, v120);
                else
                  *v254 -= 2;
              }
              v112 = v289;
            }
            goto LABEL_197;
          }
          v125 = byte_1969EF3BC[WebCore::unitCategory(v124)];
          v126 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v121, v125));
          v127 = 0.0;
          if (v128)
            v129 = v126;
          else
            v129 = 0.0;
          if (WebCore::hasDoubleValue(v125))
          {
            v130 = v114[2];
            *(_DWORD *)v130 += 2;
            v131 = *(_WORD *)(v130 + 4);
            v132 = v131 & 0x7F;
            v133 = 22;
            if ((v132 - 79) >= 2)
            {
              if (v132 == 77)
              {
                v133 = 20;
              }
              else if (v132 != 63)
              {
                v133 = *(_WORD *)(v130 + 4) & 0x7F;
                if ((v131 & 0x7F) == 0x49)
                {
                  v248 = *(_BYTE **)(*(_QWORD *)(v130 + 8) + 8);
                  if (v248[12] == 1)
                  {
LABEL_468:
                    v133 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v248 + 72))(*(_QWORD *)(*(_QWORD *)(v130 + 8)
                                                                                                  + 8));
                  }
                  else
                  {
                    v133 = 1;
                    switch(v248[12])
                    {
                      case 0:
                        break;
                      case 2:
                        v133 = 3;
                        break;
                      case 3:
                        v133 = 74;
                        break;
                      case 4:
                        v133 = 75;
                        break;
                      case 5:
                      case 6:
                      case 7:
                      case 8:
                        goto LABEL_468;
                      default:
                        v133 = 0;
                        break;
                    }
                  }
                }
              }
            }
            v134 = WebCore::unitCategory(v133);
            if (v134 == WebCore::unitCategory(v125))
            {
              v135 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v130, v125));
              if ((_BYTE)v120)
                v127 = v135;
              else
                v127 = 0.0;
            }
            if (*(_DWORD *)v130 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v130, v120);
            else
              *(_DWORD *)v130 -= 2;
          }
          v136 = v129 + v127;
          v112 = v289;
          v113 = v290;
          switch(v125)
          {
            case 6u:
              if ((int)v136 > 0xFF || *(_QWORD *)&v136 != COERCE__INT64((double)(int)v136))
              {
LABEL_195:
                v138 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
                *v138 = 2;
                v139 = *((_BYTE *)v138 + 6);
                *((_WORD *)v138 + 2) = v125;
                *((_BYTE *)v138 + 6) = v139 & 0xFC;
                *((double *)v138 + 1) = v136;
                break;
              }
              v157 = &WebCore::staticCSSValuePool[4 * (int)v136];
              v158 = v157[16];
              v138 = v157 + 16;
              *v138 = v158 + 2;
              break;
            case 1u:
              if ((int)v136 > 0xFF || *(_QWORD *)&v136 != COERCE__INT64((double)(int)v136))
                goto LABEL_195;
              v138 = &WebCore::staticCSSValuePool[4 * (int)v136 + 2064];
              *v138 += 2;
              break;
            case 3u:
              if ((int)v136 > 0xFF || *(_QWORD *)&v136 != COERCE__INT64((double)(int)v136))
                goto LABEL_195;
              v138 = &WebCore::staticCSSValuePool[4 * (int)v136 + 1040];
              *v138 += 2;
              break;
            default:
              goto LABEL_195;
          }
          v140 = (_DWORD *)v119[2];
          v119[2] = v138;
          if (v140)
          {
            if (*v140 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v140, v120);
            else
              *v140 -= 2;
          }
LABEL_197:
          if (*(_DWORD *)v121 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v121, v120);
          else
            *(_DWORD *)v121 -= 2;
          a3 = v288;
          v13 = (WTF **)(v9 + 16);
          if (*((_DWORD *)v114 + 2) == 1)
            (*(void (**)(uint64_t *))(*v114 + 8))(v114);
          else
            --*((_DWORD *)v114 + 2);
          v141 = v291;
          if (v291)
          {
            v142 = *(v291 - 2);
            v143 = ~(*(_QWORD *)v103 << 32) + *(_QWORD *)v103;
            v144 = (v143 ^ (v143 >> 22)) + ~((v143 ^ (v143 >> 22)) << 13);
            v145 = (9 * (v144 ^ (v144 >> 8))) ^ ((9 * (v144 ^ (v144 >> 8))) >> 15);
            v146 = v142 & (((v145 + ~(v145 << 27)) >> 31) ^ (v145 + ~((_DWORD)v145 << 27)));
            for (k = 1; ; ++k)
            {
              v148 = v146;
              v149 = *(_QWORD **)&v291[2 * v146];
              if (v149 != (_QWORD *)-1)
              {
                if (!v149)
                  goto LABEL_210;
                if (*v149 == *(_QWORD *)v103)
                  break;
              }
              v146 = (v148 + k) & v142;
            }
            v150 = *(v291 - 1);
            if (v150 != (_DWORD)v148)
            {
              *(_QWORD *)&v291[2 * v148] = -1;
              v151 = *(v141 - 3) - 1;
              ++*(v141 - 4);
              *(v141 - 3) = v151;
              if (v150 >= 9 && 6 * v151 < v150)
                WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::rehash((uint64_t *)&v291, v150 >> 1);
            }
          }
LABEL_210:
          v152 = (WTF *)*((_QWORD *)v103 + 1);
          v153 = *((_QWORD *)v103 + 2);
          if (v152)
          {
            *((_QWORD *)v152 + 2) = v153;
            v153 = *((_QWORD *)v103 + 2);
          }
          else
          {
            v292 = (WTF *)*((_QWORD *)v103 + 2);
          }
          v154 = (WTF **)(v153 + 8);
          v64 = v153 == 0;
          v155 = &v293;
          if (!v64)
            v155 = v154;
          *v155 = v152;
          v156 = *(uint64_t **)v103;
          *(_QWORD *)v103 = 0;
          if (v156)
          {
            if (*((_DWORD *)v156 + 2) == 1)
              (*(void (**)(uint64_t *))(*v156 + 8))(v156);
            else
              --*((_DWORD *)v156 + 2);
          }
          WTF::fastFree(v103, v120);
          goto LABEL_218;
        }
        v13 = (WTF **)(v9 + 16);
      }
      else
      {
        v88 = 0;
      }
LABEL_333:
      WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&v294, HIDWORD(v295));
      v207 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v207)
      {
        v208 = *v13;
        v209 = 8 * v207;
        do
        {
          v210 = *(_DWORD **)v208;
          *(_QWORD *)v208 = 0;
          if (v210)
          {
            if (v210[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v210 + 8))(v210);
            else
              --v210[2];
          }
          v208 = (WTF *)((char *)v208 + 8);
          v209 -= 8;
        }
        while (v209);
      }
      v211 = *v13;
      if (*v13)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        WTF::fastFree(v211, v206);
      }
      *(_QWORD *)(v9 + 16) = v294;
      v10.n128_u64[0] = v295;
      v294 = 0;
      v295 = 0;
      *(_QWORD *)(v9 + 24) = v10.n128_u64[0];
      v212 = v292;
      while (v212)
      {
        v249 = v212;
        v212 = (WTF *)*((_QWORD *)v212 + 2);
        v250 = *(_DWORD **)v249;
        *(_QWORD *)v249 = 0;
        if (v250)
        {
          if (v250[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v250 + 8))(v250);
          else
            --v250[2];
        }
        WTF::fastFree(v249, v206);
      }
      if (v88)
        WTF::fastFree((WTF *)(v88 - 4), v206);
      v213 = v294;
      if (HIDWORD(v295))
      {
        v227 = 8 * HIDWORD(v295);
        do
        {
          v228 = *(_DWORD **)v213;
          *(_QWORD *)v213 = 0;
          if (v228)
          {
            if (v228[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v228 + 8))(v228);
            else
              --v228[2];
          }
          v213 = (WTF *)((char *)v213 + 8);
          v227 -= 8;
        }
        while (v227);
        v213 = v294;
      }
      if (v213)
      {
        v294 = 0;
        LODWORD(v295) = 0;
        WTF::fastFree(v213, v206);
      }
LABEL_347:
      v199 = *(_DWORD *)(v9 + 28);
      goto LABEL_348;
    }
    if (v11 != 42)
    {
LABEL_298:
      if (v11 <= 5
        && ((1 << v11) & 0x27) != 0
        && WebCore::CSSCalcOperationNode::canCombineAllChildren((WebCore::CSSCalcOperationNode *)v9))
      {
        if (!*(_DWORD *)(v9 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19582D3A0);
        }
        v230 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v9 + 16) + 72))(**(_QWORD **)(v9 + 16));
        v231 = v230;
        if (*(unsigned __int8 *)(v9 + 13) <= 1u && *(_BYTE *)(v9 + 32) && v230 == 3 && *(_DWORD *)(v9 + 28) > 1u)
          goto LABEL_68;
        switch(WebCore::calculationCategoryForCombination(v230))
        {
          case 0u:
            v231 = 1;
            break;
          case 1u:
            v231 = 6;
            break;
          case 2u:
            v231 = 3;
            break;
          case 5u:
            v231 = 12;
            break;
          case 6u:
            v231 = 16;
            break;
          case 7u:
            v231 = 17;
            break;
          case 8u:
            v231 = 55;
            break;
          case 9u:
            break;
          default:
            v231 = 0;
            break;
        }
        v291 = 0;
        v233 = WebCore::CSSCalcOperationNode::doubleValue(v9, v231, (unsigned __int8 *)&v291);
        if (v291)
          WTF::fastFree((WTF *)(v291 - 4), v232);
        WebCore::CSSPrimitiveValue::create(v231, (int **)&v294, v233);
        WebCore::CSSCalcPrimitiveValueNode::create((uint64_t *)&v294, (uint64_t *)&v291);
        if (v294)
        {
          if (*(_DWORD *)v294 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v294, v234);
          else
            *(_DWORD *)v294 -= 2;
        }
        WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v9 + 16, v234);
        v235 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v235 == *(_DWORD *)(v9 + 24))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v235 + 1);
          v235 = *(unsigned int *)(v9 + 28);
          *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v235) = v291;
        }
        else
        {
          *((_QWORD *)*v13 + v235) = v291;
        }
        *(_DWORD *)(v9 + 28) = v235 + 1;
      }
      v193 = *(unsigned __int8 *)(v9 + 13);
      if (v193 == 3)
      {
        if (!*(_DWORD *)(v9 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19582D3E8);
        }
        v258 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v9 + 16) + 72))(**(_QWORD **)(v9 + 16));
        v291 = 0;
        v260 = WebCore::CSSCalcOperationNode::doubleValue(v9, v258, (unsigned __int8 *)&v291);
        if (v291)
          WTF::fastFree((WTF *)(v291 - 4), v259);
        WebCore::CSSPrimitiveValue::create(v260, (int **)&v294);
        WebCore::CSSCalcPrimitiveValueNode::create((uint64_t *)&v294, (uint64_t *)&v291);
        if (v294)
        {
          if (*(_DWORD *)v294 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v294, v261);
          else
            *(_DWORD *)v294 -= 2;
        }
        WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v9 + 16, v261);
        v262 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v262 == *(_DWORD *)(v9 + 24))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v262 + 1);
          v262 = *(unsigned int *)(v9 + 28);
          *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v262) = v291;
        }
        else
        {
          *((_QWORD *)*v13 + v262) = v291;
        }
        *(_DWORD *)(v9 + 28) = v262 + 1;
        v193 = *(unsigned __int8 *)(v9 + 13);
      }
      if (v193 == 14)
      {
        if (!*(_DWORD *)(v9 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19582D3F0);
        }
        v263 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v9 + 16) + 72))(**(_QWORD **)(v9 + 16));
        v291 = 0;
        v265 = WebCore::CSSCalcOperationNode::doubleValue(v9, v263, (unsigned __int8 *)&v291);
        if (v291)
          WTF::fastFree((WTF *)(v291 - 4), v264);
        v266 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v266 = 2;
        v267 = *(_BYTE *)(v266 + 6);
        *(_WORD *)(v266 + 4) = 12;
        *(_BYTE *)(v266 + 6) = v267 & 0xFC;
        *(double *)(v266 + 8) = v265;
        v294 = (WTF *)v266;
        WebCore::CSSCalcPrimitiveValueNode::create((uint64_t *)&v294, (uint64_t *)&v291);
        if (v294)
        {
          if (*(_DWORD *)v294 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v294, v268);
          else
            *(_DWORD *)v294 -= 2;
        }
        WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v9 + 16, v268);
        v269 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v269 == *(_DWORD *)(v9 + 24))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v269 + 1);
          v269 = *(unsigned int *)(v9 + 28);
          *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v269) = v291;
        }
        else
        {
          *((_QWORD *)*v13 + v269) = v291;
        }
        *(_DWORD *)(v9 + 28) = v269 + 1;
        v193 = *(unsigned __int8 *)(v9 + 13);
      }
      if ((v193 - 17) >= 3 && (v193 & 0xFC) != 0x14
        || !WebCore::CSSCalcOperationNode::canCombineAllChildren((WebCore::CSSCalcOperationNode *)v9))
      {
        goto LABEL_347;
      }
      if (!*(_DWORD *)(v9 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19582D3E0);
      }
      v194 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v9 + 16) + 72))(**(_QWORD **)(v9 + 16));
      v291 = 0;
      v196 = WebCore::CSSCalcOperationNode::doubleValue(v9, v194, (unsigned __int8 *)&v291);
      if (v291)
        WTF::fastFree((WTF *)(v291 - 4), v195);
      WebCore::CSSPrimitiveValue::create(v194, (int **)&v294, v196);
      WebCore::CSSCalcPrimitiveValueNode::create((uint64_t *)&v294, (uint64_t *)&v291);
      if (v294)
      {
        if (*(_DWORD *)v294 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v294, v197);
        else
          *(_DWORD *)v294 -= 2;
      }
      WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v9 + 16, v197);
      v198 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v198 == *(_DWORD *)(v9 + 24))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v198 + 1);
        v198 = *(unsigned int *)(v9 + 28);
        *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v198) = v291;
      }
      else
      {
        *((_QWORD *)*v13 + v198) = v291;
      }
      v199 = v198 + 1;
      *(_DWORD *)(v9 + 28) = v199;
LABEL_348:
      if (v199 != 1)
        goto LABEL_68;
LABEL_349:
      if (a2)
      {
LABEL_350:
        v52 = **(_QWORD **)(v9 + 16);
        ++*(_DWORD *)(v52 + 8);
        goto LABEL_69;
      }
      v214 = *(_BYTE *)(v9 + 13);
      if ((v214 & 0xFC) == 0x14)
        goto LABEL_352;
      if (*(unsigned __int8 *)(v9 + 13) <= 0x13u)
      {
        if (((1 << v214) & 0xFFE3C) != 0)
        {
LABEL_352:
          v215 = (*(uint64_t (**)(_QWORD, __n128))(***(_QWORD ***)(v9 + 16) + 64))(**(_QWORD **)(v9 + 16), v10);
          v216 = *(_DWORD *)(v9 + 28);
          if (v215 != 1)
          {
LABEL_356:
            if (!v216)
            {
              __break(0xC471u);
              JUMPOUT(0x19582D360);
            }
LABEL_357:
            v217 = **(_QWORD **)(v9 + 16);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v217 + 64))(v217) == 2)
            {
              v218 = *(_DWORD *)(v217 + 8);
              *(_DWORD *)(v217 + 8) = v218 + 1;
              v219 = *(char *)(v9 + 13);
              if (v219 > 0x17)
              {
                if (v218)
                  *(_DWORD *)(v217 + 8) = v218;
                else
                  (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
LABEL_387:
                if (!*(_DWORD *)(v9 + 28))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19582C320);
                }
                goto LABEL_350;
              }
              v220 = *(char *)(v217 + 13);
              if (v220 > 0x17)
                v221 = 864;
              else
                v221 = word_1969EF3C8[v220];
              v229 = word_1969EF3C8[v219];
              if (v218)
                *(_DWORD *)(v217 + 8) = v218;
              else
                (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
              if (v221 == v229)
                goto LABEL_387;
            }
LABEL_68:
            v52 = *a1;
            *a1 = 0;
LABEL_69:
            *a3 = v52;
            return;
          }
          *(_BYTE *)(v9 + 13) = 43;
          if (!v216)
          {
            __break(0xC471u);
            JUMPOUT(0x19582D368);
          }
LABEL_354:
          if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(v9 + 16) + 64))(**(_QWORD **)(v9 + 16)) == 1)
            goto LABEL_68;
          v216 = *(_DWORD *)(v9 + 28);
          goto LABEL_356;
        }
        if (((1 << v214) & 3) != 0)
        {
          *(_BYTE *)(v9 + 13) = 43;
          goto LABEL_354;
        }
      }
      if ((v214 - 6) > 2u)
        goto LABEL_357;
      goto LABEL_352;
    }
    v164 = 0;
    v165 = 0;
    v166 = *v13;
    v167 = 8 * v12;
    v168 = 1.0;
    do
    {
      v169 = *(_QWORD *)v166;
      if ((*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)v166 + 64))(*(_QWORD *)v166, v10) == 1
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v169 + 72))(v169) == 1)
      {
        v170 = *(_QWORD *)v166;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v166 + 64))(*(_QWORD *)v166) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19582CB8CLL);
        }
        v171 = *(_QWORD *)(v170 + 16);
        *(_DWORD *)v171 += 2;
        v172 = *(_WORD *)(v171 + 4);
        v173 = v172 & 0x7F;
        v174 = 22;
        if ((v173 - 79) >= 2)
        {
          if (v173 == 77)
          {
            v174 = 20;
          }
          else if (v173 != 63)
          {
            v174 = *(_WORD *)(v171 + 4) & 0x7F;
            if ((v172 & 0x7F) == 0x49)
            {
              v246 = *(_BYTE **)(*(_QWORD *)(v171 + 8) + 8);
              if (v246[12] == 1)
              {
LABEL_460:
                v174 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v246 + 72))(*(_QWORD *)(*(_QWORD *)(v171 + 8)
                                                                                              + 8));
              }
              else
              {
                v174 = 1;
                switch(v246[12])
                {
                  case 0:
                    break;
                  case 2:
                    v174 = 3;
                    break;
                  case 3:
                    v174 = 74;
                    break;
                  case 4:
                    v174 = 75;
                    break;
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                    goto LABEL_460;
                  default:
                    v174 = 0;
                    break;
                }
              }
            }
          }
        }
        if (WebCore::unitCategory(v174))
        {
          v177 = 0.0;
        }
        else
        {
          v176 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v171, 1u));
          v10.n128_f64[0] = v176;
          if ((_BYTE)v175)
            v177 = v176;
          else
            v177 = 0.0;
        }
        if (*(_DWORD *)v171 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v171, v175);
        else
          *(_DWORD *)v171 -= 2;
        v168 = v168 * v177;
        ++v164;
      }
      else
      {
        v178 = *(WTF **)v166;
        if (*(_QWORD *)v166)
          ++*((_DWORD *)v178 + 2);
        if (v165)
        {
          if (*((_DWORD *)v165 + 2) == 1)
            (*(void (**)(WTF *))(*(_QWORD *)v165 + 8))(v165);
          else
            --*((_DWORD *)v165 + 2);
        }
        v165 = v178;
      }
      v166 = (WTF *)((char *)v166 + 8);
      v167 -= 8;
    }
    while (v167);
    v179 = *(unsigned int *)(v9 + 28);
    v291 = 0;
    v292 = 0;
    if ((_DWORD)v179)
    {
      if (v179 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19582D350);
      }
      v180 = (int *)WTF::fastMalloc((WTF *)(8 * v179));
      LODWORD(v292) = v179;
      v291 = v180;
      v181 = *(_DWORD *)(v9 + 28);
    }
    else
    {
      v181 = 0;
      v180 = 0;
    }
    if (v164)
    {
      if (v181 - v164 == 1)
      {
        if ((*(unsigned int (**)(WTF *))(*(_QWORD *)v165 + 64))(v165) == 1)
          v182 = (*(uint64_t (**)(WTF *))(*(_QWORD *)v165 + 72))(v165);
        else
          v182 = 0;
        if (WebCore::calcUnitCategory(v182) != 9)
        {
          v294 = v165;
          if ((_DWORD)v179)
          {
            LODWORD(v183) = 0;
            v294 = 0;
            *(_QWORD *)v180 = v165;
          }
          else
          {
            v222 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, 1uLL, (unint64_t)&v294);
            v183 = HIDWORD(v292);
            v223 = v291;
            v224 = *v222;
            *v222 = 0;
            *(_QWORD *)&v223[2 * v183] = v224;
          }
          v184 = v183 + 1;
          HIDWORD(v292) = v184;
          v185 = v294;
          v294 = 0;
          if (v185)
          {
            if (*((_DWORD *)v185 + 2) == 1)
            {
              (*(void (**)(WTF *))(*(_QWORD *)v185 + 8))(v185);
              v184 = HIDWORD(v292);
            }
            else
            {
              --*((_DWORD *)v185 + 2);
            }
          }
          if (!v184)
          {
            __break(0xC471u);
            JUMPOUT(0x19582D358);
          }
          v186 = *(WebCore::CSSCalcPrimitiveValueNode **)v291;
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v291 + 64))(*(_QWORD *)v291) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19582CD8CLL);
          }
          WebCore::CSSCalcPrimitiveValueNode::multiply(v186, v168);
          goto LABEL_285;
        }
        if ((*(unsigned int (**)(WTF *))(*(_QWORD *)v165 + 64))(v165) == 2 && *((_BYTE *)v165 + 13) == 43)
        {
          v270 = *((unsigned int *)v165 + 7);
          if (!(_DWORD)v270)
          {
LABEL_549:
            *(_BYTE *)(v9 + 13) = 43;
            if (*((_DWORD *)v165 + 2) == 1)
              (*(void (**)(WTF *))(*(_QWORD *)v165 + 8))(v165);
            else
              --*((_DWORD *)v165 + 2);
LABEL_285:
            v165 = 0;
LABEL_286:
            WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&v291, HIDWORD(v292));
            v188 = *(unsigned int *)(v9 + 28);
            if ((_DWORD)v188)
            {
              v189 = *v13;
              v190 = 8 * v188;
              do
              {
                v191 = *(_DWORD **)v189;
                *(_QWORD *)v189 = 0;
                if (v191)
                {
                  if (v191[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v191 + 8))(v191);
                  else
                    --v191[2];
                }
                v189 = (WTF *)((char *)v189 + 8);
                v190 -= 8;
              }
              while (v190);
            }
            v192 = *v13;
            if (*v13)
            {
              *(_QWORD *)(v9 + 16) = 0;
              *(_DWORD *)(v9 + 24) = 0;
              WTF::fastFree(v192, v187);
            }
            *(_QWORD *)(v9 + 16) = v291;
            v10.n128_u64[0] = (unint64_t)v292;
            *(_QWORD *)(v9 + 24) = v292;
            if (v165)
            {
              if (*((_DWORD *)v165 + 2) == 1)
                (*(void (**)(WTF *))(*(_QWORD *)v165 + 8))(v165);
              else
                --*((_DWORD *)v165 + 2);
            }
            v11 = *(unsigned __int8 *)(v9 + 13);
            goto LABEL_298;
          }
          v271 = (_QWORD *)*((_QWORD *)v165 + 2);
          v272 = 8 * v270;
          while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v271 + 64))(*v271) == 1)
          {
            ++v271;
            v272 -= 8;
            if (!v272)
            {
              v273 = *((unsigned int *)v165 + 7);
              if ((_DWORD)v273)
              {
                v274 = (WTF **)*((_QWORD *)v165 + 2);
                v275 = 8 * v273;
                do
                {
                  v276 = *v274;
                  *((_DWORD *)v276 + 2) = *((_DWORD *)*v274 + 2) + 1;
                  v294 = v276;
                  v277 = HIDWORD(v292);
                  if (HIDWORD(v292) == (_DWORD)v292)
                  {
                    WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>((uint64_t)&v291, (unint64_t)&v294);
                  }
                  else
                  {
                    v294 = 0;
                    *(_QWORD *)&v291[2 * HIDWORD(v292)] = v276;
                    HIDWORD(v292) = v277 + 1;
                  }
                  v278 = v294;
                  v294 = 0;
                  if (v278)
                  {
                    if (*((_DWORD *)v278 + 2) == 1)
                      (*(void (**)(WTF *))(*(_QWORD *)v278 + 8))(v278);
                    else
                      --*((_DWORD *)v278 + 2);
                  }
                  if (!HIDWORD(v292))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19582D3CCLL);
                  }
                  v279 = *(WebCore::CSSCalcPrimitiveValueNode **)&v291[2 * HIDWORD(v292) - 2];
                  if ((*(unsigned int (**)(WebCore::CSSCalcPrimitiveValueNode *))(*(_QWORD *)v279 + 64))(v279) != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19582D260);
                  }
                  WebCore::CSSCalcPrimitiveValueNode::multiply(v279, v168);
                  ++v274;
                  v275 -= 8;
                }
                while (v275);
              }
              goto LABEL_549;
            }
          }
        }
        if (*((_DWORD *)v165 + 2) == 1)
          (*(void (**)(WTF *))(*(_QWORD *)v165 + 8))(v165);
        else
          --*((_DWORD *)v165 + 2);
        v165 = 0;
      }
      WebCore::CSSPrimitiveValue::create(v168, &v296);
      WebCore::CSSCalcPrimitiveValueNode::create((uint64_t *)&v296, (uint64_t *)&v294);
      if (v296)
      {
        if (*v296 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v296, v238);
        else
          *v296 -= 2;
      }
      v239 = HIDWORD(v292);
      if (HIDWORD(v292) == (_DWORD)v292)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v291, HIDWORD(v292) + 1);
        v239 = HIDWORD(v292);
      }
      *(_QWORD *)&v291[2 * HIDWORD(v292)] = v294;
      HIDWORD(v292) = v239 + 1;
      v181 = *(_DWORD *)(v9 + 28);
    }
    if (v181)
    {
      v240 = *v13;
      v241 = 8 * v181;
      do
      {
        v242 = *(WTF **)v240;
        *((_DWORD *)v242 + 2) = *(_DWORD *)(*(_QWORD *)v240 + 8) + 1;
        v294 = v242;
        if ((*(unsigned int (**)(WTF *))(*(_QWORD *)v242 + 64))(v242) != 1
          || (*(unsigned int (**)(WTF *))(*(_QWORD *)v242 + 72))(v242) != 1)
        {
          v244 = HIDWORD(v292);
          if (HIDWORD(v292) == (_DWORD)v292)
          {
            WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>((uint64_t)&v291, (unint64_t)&v294);
          }
          else
          {
            v245 = v294;
            v294 = 0;
            *(_QWORD *)&v291[2 * HIDWORD(v292)] = v245;
            HIDWORD(v292) = v244 + 1;
          }
        }
        v243 = v294;
        v294 = 0;
        if (v243)
        {
          if (*((_DWORD *)v243 + 2) == 1)
            (*(void (**)(WTF *))(*(_QWORD *)v243 + 8))(v243);
          else
            --*((_DWORD *)v243 + 2);
        }
        v240 = (WTF *)((char *)v240 + 8);
        v241 -= 8;
      }
      while (v241);
    }
    goto LABEL_286;
  }
  v55 = *a1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 64))(*a1) != 3)
  {
    v201 = *a1;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 64))(*a1) != 4)
      goto LABEL_68;
    v56 = *(_QWORD *)(v201 + 16);
    ++*(_DWORD *)(v56 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 64))(v56) == 1
      && WebCore::CSSCalcPrimitiveValueNode::isNumericValue((WebCore::CSSPrimitiveValue **)v56))
    {
      v58 = *(_QWORD *)(v56 + 16);
      *(_DWORD *)v58 += 2;
      v202 = *(_WORD *)(v58 + 4);
      if ((v202 & 0x7F) == 0x49)
      {
        v287 = *(_QWORD *)(v58 + 8);
        v291 = 0;
        v203 = WebCore::CSSCalcValue::doubleValue(v287, (uint64_t)&v291);
        if (v291)
          WTF::fastFree((WTF *)(v291 - 4), v57);
        v202 = *(_WORD *)(v58 + 4);
      }
      else
      {
        v203 = *(double *)(v58 + 8);
      }
      v204 = v202 & 0x7F;
      LOBYTE(v63) = 22;
      v61 = 1.0 / v203;
      if ((v204 - 79) < 2)
        goto LABEL_92;
      if (v204 != 77)
      {
        if (v204 == 63)
          goto LABEL_92;
        v63 = v202 & 0x7F;
        if (v63 != 73)
          goto LABEL_86;
        v205 = *(_BYTE **)(*(_QWORD *)(v58 + 8) + 8);
        if (v205[12] != 1)
        {
          LOBYTE(v63) = 74;
          switch(v205[12])
          {
            case 0:
              goto LABEL_564;
            case 2:
              goto LABEL_315;
            case 3:
              goto LABEL_92;
            case 4:
LABEL_563:
              LOBYTE(v63) = 75;
              goto LABEL_92;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_462;
            default:
LABEL_637:
              LOBYTE(v63) = 0;
              goto LABEL_92;
          }
        }
        goto LABEL_462;
      }
LABEL_639:
      LOBYTE(v63) = 20;
      goto LABEL_92;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 64))(v56) == 4)
      goto LABEL_476;
    goto LABEL_478;
  }
  v56 = *(_QWORD *)(v55 + 16);
  ++*(_DWORD *)(v56 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 64))(v56) != 1
    || !WebCore::CSSCalcPrimitiveValueNode::isNumericValue((WebCore::CSSPrimitiveValue **)v56))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 64))(v56) == 3)
    {
LABEL_476:
      v251 = *(_QWORD *)(v56 + 16);
      ++*(_DWORD *)(v251 + 8);
      goto LABEL_479;
    }
LABEL_478:
    v251 = *a1;
    *a1 = 0;
LABEL_479:
    *a3 = v251;
    if (*(_DWORD *)(v56 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    else
      --*(_DWORD *)(v56 + 8);
    return;
  }
  v58 = *(_QWORD *)(v56 + 16);
  *(_DWORD *)v58 += 2;
  v59 = *(_WORD *)(v58 + 4);
  if ((v59 & 0x7F) == 0x49)
  {
    v286 = *(_QWORD *)(v58 + 8);
    v291 = 0;
    v60 = WebCore::CSSCalcValue::doubleValue(v286, (uint64_t)&v291);
    if (v291)
      WTF::fastFree((WTF *)(v291 - 4), v57);
    v59 = *(_WORD *)(v58 + 4);
  }
  else
  {
    v60 = *(double *)(v58 + 8);
  }
  v61 = 0.0 - v60;
  v62 = v59 & 0x7F;
  LOBYTE(v63) = 22;
  if ((v62 - 79) < 2)
    goto LABEL_92;
  if (v62 == 77)
    goto LABEL_639;
  if (v62 == 63)
    goto LABEL_92;
  v63 = v59 & 0x7F;
  if (v63 == 73)
  {
    v205 = *(_BYTE **)(*(_QWORD *)(v58 + 8) + 8);
    if (v205[12] != 1)
    {
      LOBYTE(v63) = 74;
      switch(v205[12])
      {
        case 0:
          goto LABEL_564;
        case 2:
          goto LABEL_315;
        case 3:
          goto LABEL_92;
        case 4:
          goto LABEL_563;
        case 5:
        case 6:
        case 7:
        case 8:
          break;
        default:
          goto LABEL_637;
      }
    }
LABEL_462:
    v63 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v205 + 72))(v205);
  }
LABEL_86:
  switch(v63)
  {
    case 6:
      v64 = (int)v61 <= 0xFF && *(_QWORD *)&v61 == COERCE__INT64((double)(int)v61);
      if (v64)
      {
        v225 = &WebCore::staticCSSValuePool[4 * (int)v61];
        v226 = v225[16];
        v65 = v225 + 16;
        *v65 = v226 + 2;
        goto LABEL_93;
      }
      LOBYTE(v63) = 6;
      break;
    case 1:
LABEL_564:
      if ((int)v61 <= 0xFF && *(_QWORD *)&v61 == COERCE__INT64((double)(int)v61))
      {
        v65 = &WebCore::staticCSSValuePool[4 * (int)v61 + 2064];
        *v65 += 2;
        goto LABEL_93;
      }
      LOBYTE(v63) = 1;
      break;
    case 3:
LABEL_315:
      if ((int)v61 <= 0xFF && *(_QWORD *)&v61 == COERCE__INT64((double)(int)v61))
      {
        v65 = &WebCore::staticCSSValuePool[4 * (int)v61 + 1040];
        *v65 += 2;
        goto LABEL_93;
      }
      LOBYTE(v63) = 3;
      break;
  }
LABEL_92:
  v65 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
  *v65 = 2;
  v66 = *((_BYTE *)v65 + 6);
  *((_WORD *)v65 + 2) = v63 & 0x7F;
  *((_BYTE *)v65 + 6) = v66 & 0xFC;
  *((double *)v65 + 1) = v61;
LABEL_93:
  v67 = *(_DWORD **)(v56 + 16);
  *(_QWORD *)(v56 + 16) = v65;
  if (v67)
  {
    if (*v67 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v67, (WTF::StringImpl *)v57);
    else
      *v67 -= 2;
  }
  if (*(_DWORD *)v58 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v58, (WTF::StringImpl *)v57);
  else
    *(_DWORD *)v58 -= 2;
  *a3 = v56;
}

uint64_t WebCore::CSSCalcOperationNode::isResolvable(WebCore::CSSCalcOperationNode *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v1 = *((unsigned int *)this + 7);
  if (!(_DWORD)v1)
    return 1;
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    if ((_DWORD)result)
      v6 = v3 == 0;
    else
      v6 = 1;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

BOOL WebCore::CSSCalcOperationNode::isZero(WebCore::CSSCalcOperationNode *this)
{
  char v2;
  void *v3;
  double v4;
  double v6;
  uint64_t v7;

  v2 = WebCore::CSSCalcOperationNode::primitiveType(this);
  v7 = 0;
  v4 = WebCore::CSSCalcOperationNode::doubleValue((uint64_t)this, v2, (unsigned __int8 *)&v7);
  if (v7)
  {
    v6 = v4;
    WTF::fastFree((WTF *)(v7 - 16), v3);
    v4 = v6;
  }
  return v4 == 0.0;
}

uint64_t WebCore::CSSCalcOperationNode::primitiveType(WebCore::CSSCalcOperationNode *this)
{
  int v1;
  _BYTE *v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;

  v1 = *((unsigned __int8 *)this + 12);
  if (v1 != 1)
  {
    LOBYTE(v5) = 1;
    switch(*((_BYTE *)this + 12))
    {
      case 0:
        return v5;
      case 2:
        v6 = *((_DWORD *)this + 7);
        switch(v6)
        {
          case 1:
            goto LABEL_4;
          case 0:
            goto LABEL_22;
          case 2:
            v7 = *((_QWORD *)this + 2);
            v2 = *(_BYTE **)v7;
            v8 = *(_BYTE **)(v7 + 8);
            if (!v2[12])
            {
              v3 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 72);
              return v3();
            }
            if (!v8[12])
              goto LABEL_5;
            break;
          default:
            v2 = (_BYTE *)**((_QWORD **)this + 2);
            if (!v2[12])
            {
              v20 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 72))(v2);
              LODWORD(v13) = *((_DWORD *)this + 7);
              if (v13 < 2)
              {
                v17 = 0;
                LODWORD(v14) = 1;
              }
              else
              {
                v14 = 1;
                while (1)
                {
                  v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v14);
                  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
                  v13 = *((unsigned int *)this + 7);
                  if (v20 != v16)
                    break;
                  if (++v14 >= v13)
                  {
                    v17 = v20;
                    goto LABEL_31;
                  }
                }
                v17 = v16;
              }
LABEL_31:
              LOBYTE(v5) = v20;
              if ((_DWORD)v13 != (_DWORD)v14)
              {
                if (v13 > v14)
                {
                  v14 = v14;
                  do
                  {
                    v18 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v14);
                    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
                    v13 = *((unsigned int *)this + 7);
                    if (v17 != v19)
                      break;
                    ++v14;
                  }
                  while (v14 < v13);
                }
                if ((_DWORD)v13 == (_DWORD)v14)
                  LOBYTE(v5) = v17;
                else
                  LOBYTE(v5) = 0;
              }
              return v5;
            }
            break;
        }
        v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 72))(v2);
        v10 = *((unsigned int *)this + 7);
        if ((_DWORD)v10)
        {
          v11 = (_QWORD *)*((_QWORD *)this + 2);
          v12 = 8 * v10;
          do
          {
            if (v9 != (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v11 + 72))(*v11))
              goto LABEL_22;
            ++v11;
            v12 -= 8;
          }
          while (v12);
        }
        LOBYTE(v5) = v9;
        break;
      case 5:
      case 6:
      case 7:
      case 8:
        goto LABEL_2;
      default:
        goto LABEL_22;
    }
    return v5;
  }
LABEL_2:
  if (*((_DWORD *)this + 7) != 1 || *((unsigned __int8 *)this + 13) - 11 < 3)
  {
    if ((v1 - 1) >= 8u)
LABEL_22:
      LOBYTE(v5) = 0;
    else
      return (0x3711100C00000306uLL >> (8 * (v1 - 1)));
    return v5;
  }
LABEL_4:
  v2 = (_BYTE *)**((_QWORD **)this + 2);
LABEL_5:
  v3 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 72);
  return v3();
}

_QWORD *WebCore::CSSCalcOperationNode::createCalcExpression@<X0>(_QWORD *this@<X0>, const WebCore::CSSToLengthConversionData *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  _QWORD *v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  char v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _QWORD *v25;
  WTF *v26;
  uint64_t v27;

  v3 = this;
  v27 = 0;
  v5 = *((unsigned int *)this + 7);
  if (!(_DWORD)v5)
  {
    v15 = 0;
    v16 = 0;
    goto LABEL_16;
  }
  if (v5 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
  LODWORD(v27) = v5;
  v26 = v7;
  v8 = *((unsigned int *)v3 + 7);
  if (!(_DWORD)v8)
  {
    v15 = v7;
    v16 = v5;
LABEL_16:
    v24 = v16;
    v17 = *((unsigned __int8 *)v3 + 12);
    if (v17 == 3)
      v18 = 0;
    else
      v18 = 9;
    if (v17 == 4)
      v19 = 1;
    else
      v19 = v18;
    this = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    v20 = *((_BYTE *)v3 + 13);
    *((_BYTE *)this + 8) = 3;
    *this = off_1E34088E8;
    this[2] = v15;
    this[3] = v24;
    *((_BYTE *)this + 32) = v20;
    *((_BYTE *)this + 33) = v19;
    *a3 = this;
    return this;
  }
  v9 = v3[2];
  v10 = 8 * v8;
  while (1)
  {
    v11 = *(_DWORD **)v9;
    v11[2] = *(_DWORD *)(*(_QWORD *)v9 + 8) + 1;
    this = (*(_QWORD *(**)(_QWORD **__return_ptr, _DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v11 + 32))(&v25, v11, a2);
    v13 = v25;
    if (v25)
    {
      v14 = HIDWORD(v27);
      if (HIDWORD(v27) == (_DWORD)v27)
      {
        WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>((uint64_t)&v26, (unint64_t)&v25);
      }
      else
      {
        v25 = 0;
        *((_QWORD *)v26 + HIDWORD(v27)) = v13;
        HIDWORD(v27) = v14 + 1;
      }
      this = v25;
      v25 = 0;
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
    else
    {
      *a3 = 0;
    }
    if (v11[2] == 1)
      this = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
    if (!v13)
      break;
    v9 += 8;
    v10 -= 8;
    if (!v10)
    {
      v15 = v26;
      v16 = v27;
      goto LABEL_16;
    }
  }
  v21 = v26;
  if (HIDWORD(v27))
  {
    v22 = 8 * HIDWORD(v27);
    v23 = v26;
    do
    {
      this = *(_QWORD **)v23;
      *(_QWORD *)v23 = 0;
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      v23 = (WTF *)((char *)v23 + 8);
      v22 -= 8;
    }
    while (v22);
  }
  if (v21)
    return (_QWORD *)WTF::fastFree(v21, v12);
  return this;
}

void WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::CSSCalcOperationNode::doubleValue(WebCore::CSSUnitType,WebCore::CSSCalcSymbolTable const&)::$_0>(uint64_t a1, uint64_t *a2, unsigned __int8 **a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a1 + 8) = v3;
      *(_QWORD *)a1 = v7;
      if (*((_DWORD *)a2 + 3))
      {
        v8 = v7;
        v9 = 0;
        do
        {
          v10 = *a2;
          v11 = a3[2];
          v12 = **a3;
          if (*a3[1]
            && v12 != 1
            && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 8 * v9) + 72))(*(_QWORD *)(v10 + 8 * v9)) == 1)
          {
            v12 = 1;
          }
          v13 = v11[13];
          if ((v13 - 6) > 2)
          {
            if ((v13 - 11) < 3)
              v14 = 1;
            else
              v14 = v12;
            if ((v13 - 14) <= 2)
              v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8 * v9) + 72))(*(_QWORD *)(v10 + 8 * v9), v14);
          }
          else if (**a3 == 1)
          {
            v14 = v12;
          }
          else
          {
            v14 = 13;
          }
          *(double *)(v8 + 8 * v9) = (*(double (**)(_QWORD, uint64_t, unsigned __int8 *))(**(_QWORD **)(v10 + 8 * v9)
                                                                                                  + 40))(*(_QWORD *)(v10 + 8 * v9), v14, a3[3]);
          *(_DWORD *)(a1 + 12) = ++v9;
        }
        while (v9 < *((unsigned int *)a2 + 3));
      }
    }
  }
}

void WebCore::CSSCalcOperationNode::computeLengthPx(WebCore::CSSCalcOperationNode *this, const WebCore::CSSToLengthConversionData *a2, int8x16_t a3, double a4, int8x16_t a5)
{
  uint64_t v6;
  long double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v8 = (long double *)WTF::fastMalloc((WTF *)(8 * v6));
    if (*((_DWORD *)this + 7))
    {
      v9 = 0;
      do
      {
        v10 = v9;
        v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v9);
        *(double *)a3.i64 = (*(double (**)(uint64_t, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v11 + 48))(v11, a2);
        v9 = v10 + 1;
        v8[v10] = *(long double *)a3.i64;
      }
      while (v10 + 1 < (unint64_t)*((unsigned int *)this + 7));
      goto LABEL_9;
    }
  }
  else
  {
    v8 = 0;
  }
  LODWORD(v9) = 0;
LABEL_9:
  WebCore::CSSCalcOperationNode::evaluateOperator(*((unsigned __int8 *)this + 13), v8, v9, a3, a4, a5);
  if (v8)
    WTF::fastFree((WTF *)v8, v12);
}

uint64_t WebCore::CSSCalcOperationNode::collectComputedStyleDependencies(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v2 = *(unsigned int *)(result + 28);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = 8 * v2;
    do
    {
      v6 = *(_DWORD **)v4;
      v6[2] = *(_DWORD *)(*(_QWORD *)v4 + 8) + 1;
      result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 80))(v6, a2);
      if (v6[2] == 1)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSCalcOperationNode::buildCSSText(_BYTE *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1) == 2)
  {
    if ((a1[13] & 0xFE) != 0x2A)
      return WebCore::CSSCalcOperationNode::buildCSSTextRecursive((uint64_t)a1, a2, 0);
  }
  else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1) == 1)
  {
    return WebCore::CSSCalcOperationNode::buildCSSTextRecursive((uint64_t)a1, a2, 0);
  }
  WTF::StringBuilder::append();
  result = WebCore::CSSCalcOperationNode::buildCSSTextRecursive((uint64_t)a1, a2, 0);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    return (WTF::StringImpl *)WTF::StringBuilder::append();
  v6 = *(unsigned int *)(a2 + 16);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)a2 != 0)
    return (WTF::StringImpl *)WTF::StringBuilder::append();
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)(a2 + 16) = v6 + 1;
  if ((v8 & 4) != 0)
    *(_BYTE *)(v9 + v6) = 41;
  else
    *(_WORD *)(v9 + 2 * v6) = 41;
  return result;
}

WTF::StringImpl *WebCore::CSSCalcOperationNode::buildCSSTextRecursive(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *result;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  const std::nothrow_t *v36;
  unint64_t v37;
  uint64_t *v38;
  BOOL v39;
  uint64_t *v40;
  void *v41;
  uint64_t i;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  int v48;
  double v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  unsigned int v58;
  int v59;
  WTF::StringImpl *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t *p_src;
  char *v69;
  char *v70;
  __int16 v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int16 v78;
  _BYTE *v79;
  _BYTE *v80;
  char *v81;
  int8x16_t v82;
  int8x16_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  int8x16_t v88;
  int8x16_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  _DWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  const std::nothrow_t *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  _DWORD *v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  unint64_t v134;
  char __s[16];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 __src;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  size_t __n[2];
  uint64_t v151;
  int8x16x2_t v152;
  int8x16x2_t v153;
  int8x16x2_t v154;
  int8x16x2_t v155;
  int8x16x2_t v156;
  int8x16x2_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;

  v151 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) == 1)
  {
    v6 = *(_DWORD **)(a1 + 16);
    *v6 += 2;
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&__src);
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v7);
    else
      *v6 -= 2;
    v20 = __src;
    if (*(_DWORD *)(a2 + 16) || *(_QWORD *)(a2 + 8))
    {
      if ((_QWORD)__src && (*(_BYTE *)(__src + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
LABEL_46:
      result = (WTF::StringImpl *)__src;
      *(_QWORD *)&__src = 0;
      if (!result)
        return result;
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    if ((_QWORD)__src)
      *(_DWORD *)__src += 2;
    v21 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v7);
        v20 = __src;
        if (!(_QWORD)__src)
          goto LABEL_45;
        goto LABEL_44;
      }
      *(_DWORD *)v21 -= 2;
    }
    if (!v20)
    {
LABEL_45:
      *(_DWORD *)(a2 + 16) = v20;
      goto LABEL_46;
    }
LABEL_44:
    LODWORD(v20) = *(_DWORD *)(v20 + 4);
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) == 5)
  {
    v8 = *(unsigned __int16 *)(a1 + 14);
    if (v8 <= 0x48D && (v17 = (uint64_t)*(&WebCore::valueListForSerialization + 2 * v8 + 1)) != 0)
    {
      v7 = (WTF::StringImpl *)(v17 - 1);
      if (v17 == 1)
      {
        v9 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v9 = __src;
      }
      v10 = (_DWORD *)(a2 + 16);
      if (!*(_DWORD *)(a2 + 16) && !*(_QWORD *)(a2 + 8))
      {
        if (v9)
        {
          v11 = 0;
          *(_DWORD *)v9 += 2;
LABEL_25:
          result = *(WTF::StringImpl **)a2;
          *(_QWORD *)a2 = v9;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
              if ((v11 & 1) == 0)
                goto LABEL_29;
              goto LABEL_74;
            }
            *(_DWORD *)result -= 2;
          }
          if ((v11 & 1) == 0)
          {
LABEL_29:
            v19 = *(_DWORD *)(v9 + 4);
            goto LABEL_30;
          }
LABEL_74:
          v19 = 0;
LABEL_30:
          *v10 = v19;
          if (!v9)
            return result;
          goto LABEL_31;
        }
LABEL_8:
        v11 = 1;
        goto LABEL_25;
      }
      if (v9 && (*(_BYTE *)(v9 + 16) & 4) == 0)
      {
        result = (WTF::StringImpl *)WTF::StringBuilder::append();
        goto LABEL_31;
      }
    }
    else
    {
      v9 = 0;
      v10 = (_DWORD *)(a2 + 16);
      if (!*(_DWORD *)(a2 + 16) && !*(_QWORD *)(a2 + 8))
        goto LABEL_8;
    }
    result = (WTF::StringImpl *)WTF::StringBuilder::append();
    if (!v9)
      return result;
LABEL_31:
    if (*(_DWORD *)v9 != 2)
    {
      *(_DWORD *)v9 -= 2;
      return result;
    }
    result = (WTF::StringImpl *)v9;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) == 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 13);
    if (v12 == 42)
    {
      if (a3 == 1)
      {
        LOBYTE(__src) = 40;
        v23 = *(_QWORD *)(a2 + 8);
        if (!v23 || (v24 = *(unsigned int *)(a2 + 16), v24 >= *(_DWORD *)(v23 + 4)) || *(_QWORD *)a2)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          v25 = *(_DWORD *)(v23 + 16);
          v26 = *(_QWORD *)(v23 + 8);
          *(_DWORD *)(a2 + 16) = v24 + 1;
          if ((v25 & 4) != 0)
            *(_BYTE *)(v26 + v24) = 40;
          else
            *(_WORD *)(v26 + 2 * v24) = 40;
        }
      }
      v99 = *(unsigned int *)(a1 + 28);
      if (!(_DWORD)v99)
      {
        WebCore::sortChildren(0, 0);
        __break(0xC471u);
        JUMPOUT(0x19582EEACLL);
      }
      if (v99 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19582EEB4);
      }
      v100 = WTF::fastMalloc((WTF *)(8 * v99));
      v30 = (WTF *)v100;
      v101 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v101)
      {
        v102 = *(uint64_t **)(a1 + 16);
        v103 = 8 * v101;
        v104 = (_QWORD *)v100;
        do
        {
          v105 = *v102++;
          ++*(_DWORD *)(v105 + 8);
          *v104++ = v105;
          v103 -= 8;
        }
        while (v103);
      }
      v106 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v107 = v99;
      while (1)
      {
        v108 = (uint64_t *)operator new(8 * v107, v106);
        if (v108)
          break;
        v39 = v107 > 1;
        v107 >>= 1;
        if (!v39)
        {
          std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>((uint64_t)v30, (uint64_t *)v30 + v99, v99, 0, 0);
          goto LABEL_198;
        }
      }
      v109 = v108;
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>((uint64_t)v30, (uint64_t *)v30 + v99, v99, v108, v107);
      operator delete(v109);
LABEL_198:
      WebCore::CSSCalcOperationNode::buildCSSTextRecursive(*(_QWORD *)v30, a2, 1);
      if (v99 >= 2)
      {
        v110 = v99 - 1;
        v111 = (_QWORD *)((char *)v30 + 8);
        do
        {
          v112 = *v111;
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v111 + 64))(*v111) == 4)
          {
            WTF::StringBuilder::append();
            v113 = *(_DWORD **)(v112 + 16);
            ++v113[2];
            WebCore::CSSCalcOperationNode::buildCSSTextRecursive(v113, a2, 1);
            if (v113[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v113 + 8))(v113);
            else
              --v113[2];
          }
          else
          {
            WTF::StringBuilder::append();
            WebCore::CSSCalcOperationNode::buildCSSTextRecursive(*v111, a2, 1);
          }
          ++v111;
          --v110;
        }
        while (v110);
      }
      if (a3 == 1)
      {
        LOBYTE(__src) = 41;
        v114 = *(_QWORD *)(a2 + 8);
        if (v114
          && ((v115 = *(unsigned int *)(a2 + 16), v115 < *(_DWORD *)(v114 + 4))
            ? (v116 = *(_QWORD *)a2 == 0)
            : (v116 = 0),
              v116))
        {
          v119 = *(_DWORD *)(v114 + 16);
          v120 = *(_QWORD *)(v114 + 8);
          *(_DWORD *)(a2 + 16) = v115 + 1;
          if ((v119 & 4) != 0)
            *(_BYTE *)(v120 + v115) = 41;
          else
            *(_WORD *)(v120 + 2 * v115) = 41;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      v117 = 0;
      do
      {
        v118 = *(_DWORD **)((char *)v30 + v117);
        *(_QWORD *)((char *)v30 + v117) = 0;
        if (v118)
        {
          if (v118[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v118 + 8))(v118);
          else
            --v118[2];
        }
        v117 += 8;
      }
      while (8 * v99 != v117);
      return (WTF::StringImpl *)WTF::fastFree(v30, v41);
    }
    if (v12 == 43)
    {
      if (a3 == 1)
      {
        LOBYTE(__src) = 40;
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13 || (v14 = *(unsigned int *)(a2 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a2)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          v15 = *(_DWORD *)(v13 + 16);
          v16 = *(_QWORD *)(v13 + 8);
          *(_DWORD *)(a2 + 16) = v14 + 1;
          if ((v15 & 4) != 0)
            *(_BYTE *)(v16 + v14) = 40;
          else
            *(_WORD *)(v16 + 2 * v14) = 40;
        }
      }
      v28 = *(unsigned int *)(a1 + 28);
      if (!(_DWORD)v28)
      {
        WebCore::sortChildren(0, 0);
        __break(0xC471u);
        JUMPOUT(0x19582EE70);
      }
      if (v28 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19582EE78);
      }
      v29 = WTF::fastMalloc((WTF *)(8 * v28));
      v30 = (WTF *)v29;
      v31 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v31)
      {
        v32 = *(uint64_t **)(a1 + 16);
        v33 = 8 * v31;
        v34 = (_QWORD *)v29;
        do
        {
          v35 = *v32++;
          ++*(_DWORD *)(v35 + 8);
          *v34++ = v35;
          v33 -= 8;
        }
        while (v33);
      }
      v36 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v37 = v28;
      while (1)
      {
        v38 = (uint64_t *)operator new(8 * v37, v36);
        if (v38)
          break;
        v39 = v37 > 1;
        v37 >>= 1;
        if (!v39)
        {
          std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>((uint64_t)v30, (uint64_t *)v30 + v28, v28, 0, 0);
          goto LABEL_86;
        }
      }
      v40 = v38;
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>((uint64_t)v30, (uint64_t *)v30 + v28, v28, v38, v37);
      operator delete(v40);
LABEL_86:
      WebCore::CSSCalcOperationNode::buildCSSTextRecursive(*(_QWORD *)v30, a2, 1);
      if (v28 >= 2)
      {
        for (i = 1; i != v28; ++i)
        {
          v43 = (_QWORD *)*((_QWORD *)v30 + i);
          if ((*(unsigned int (**)(_QWORD *))(*v43 + 64))(v43) == 3)
          {
            WTF::StringBuilder::append();
            v44 = (_DWORD *)v43[2];
            ++v44[2];
            WebCore::CSSCalcOperationNode::buildCSSTextRecursive(v44, a2, 1);
            if (v44[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
            else
              --v44[2];
            continue;
          }
          v45 = *((_QWORD *)v30 + i);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 64))(v45) != 1
            || !WebCore::CSSCalcPrimitiveValueNode::isNumericValue((WebCore::CSSPrimitiveValue **)v45))
          {
            goto LABEL_113;
          }
          v47 = *(_QWORD *)(v45 + 16);
          v48 = *(_DWORD *)v47 + 2;
          *(_DWORD *)v47 = v48;
          if ((*(_WORD *)(v47 + 4) & 0x7F) == 0x49)
          {
            v93 = *(_QWORD *)(v47 + 8);
            *(_QWORD *)&__src = 0;
            v49 = WebCore::CSSCalcValue::doubleValue(v93, (uint64_t)&__src);
            if ((_QWORD)__src)
              WTF::fastFree((WTF *)(__src - 16), v46);
            v48 = *(_DWORD *)v47;
          }
          else
          {
            v49 = *(double *)(v47 + 8);
          }
          v50 = v48 - 2;
          if (v50)
            *(_DWORD *)v47 = v50;
          else
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v47, (WTF::StringImpl *)v46);
          if (v49 >= 0.0)
          {
LABEL_113:
            WTF::StringBuilder::append();
            WebCore::CSSCalcOperationNode::buildCSSTextRecursive(*((_QWORD *)v30 + i), a2, 1);
            continue;
          }
          WTF::StringBuilder::append();
          v51 = *(_QWORD *)(v45 + 16);
          v52 = *(_WORD *)(v51 + 4);
          v53 = v52 & 0x7F;
          v54 = 22;
          if ((v53 - 79) >= 2)
          {
            if (v53 == 77)
            {
              v54 = 20;
            }
            else if (v53 != 63)
            {
              v54 = *(_WORD *)(v51 + 4) & 0x7F;
              if ((v52 & 0x7F) == 0x49)
              {
                v79 = *(_BYTE **)(*(_QWORD *)(v51 + 8) + 8);
                if (v79[12] == 1)
                {
LABEL_142:
                  v54 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v79 + 72))(v79);
                }
                else
                {
                  v54 = 1;
                  switch(v79[12])
                  {
                    case 0:
                      break;
                    case 2:
                      v54 = 3;
                      break;
                    case 3:
                      v54 = 74;
                      break;
                    case 4:
                      v54 = 75;
                      break;
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                      goto LABEL_142;
                    default:
                      v54 = 0;
                      break;
                  }
                }
              }
            }
          }
          if (WebCore::hasDoubleValue(v54))
          {
            v55 = *(_QWORD *)(v45 + 16);
            *(_DWORD *)v55 += 2;
            v56 = *(_WORD *)(v55 + 4);
            v57 = v56 & 0x7F;
            v58 = 22;
            if ((v57 - 79) >= 2)
            {
              if (v57 == 77)
              {
                v58 = 20;
              }
              else if (v57 != 63)
              {
                v58 = *(_WORD *)(v55 + 4) & 0x7F;
                if ((v56 & 0x7F) == 0x49)
                {
                  v80 = *(_BYTE **)(*(_QWORD *)(v55 + 8) + 8);
                  if (v80[12] == 1)
                  {
LABEL_144:
                    v58 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v80 + 72))(*(_QWORD *)(*(_QWORD *)(v55 + 8)
                                                                                                + 8));
                  }
                  else
                  {
                    v58 = 1;
                    switch(v80[12])
                    {
                      case 0:
                        break;
                      case 2:
                        v58 = 3;
                        break;
                      case 3:
                        v58 = 74;
                        break;
                      case 4:
                        v58 = 75;
                        break;
                      case 5:
                      case 6:
                      case 7:
                      case 8:
                        goto LABEL_144;
                      default:
                        v58 = 0;
                        break;
                    }
                  }
                }
              }
            }
            v59 = WebCore::unitCategory(v58);
            if (v59 == WebCore::unitCategory(v54))
              WebCore::CSSPrimitiveValue::doubleValueInternal(v55, v54);
            if (*(_DWORD *)v55 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v55, v60);
            else
              *(_DWORD *)v55 -= 2;
          }
          v61 = WebCore::CSSPrimitiveValue::unitTypeString(v54);
          v63 = v62;
          WTF::numberToString();
          HIDWORD(v142) = strlen(__s);
          if (v63)
          {
            v64 = v63 - 1;
            if ((unint64_t)(v63 - 1) >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x19582EE98);
            }
          }
          else
          {
            v64 = 0;
          }
          v65 = *(WTF::StringImpl **)(a2 + 8);
          if ((v65 || (v65 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v65 + 16) & 4) == 0)
          {
            v66 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a2);
            if (v66)
            {
              v147 = v139;
              v148 = v140;
              v149 = v141;
              *(_OWORD *)__n = v142;
              __src = *(_OWORD *)__s;
              v144 = v136;
              v145 = v137;
              v146 = v138;
              v67 = HIDWORD(v142);
              if (HIDWORD(v142) >= 0x40)
              {
                v69 = (char *)(v66 + 2 * (HIDWORD(v142) & 0xFFFFFFC0));
                p_src = (int8x16_t *)&__src;
                v81 = (char *)v66;
                do
                {
                  v152.val[0] = *p_src;
                  v82 = p_src[1];
                  v154.val[0] = p_src[2];
                  v83 = p_src[3];
                  p_src += 4;
                  v158.val[1] = 0u;
                  v158.val[0] = v83;
                  v154.val[1] = 0u;
                  v156.val[0] = v82;
                  v152.val[1] = 0u;
                  v84 = v81;
                  vst2q_s8(v84, v152);
                  v84 += 32;
                  v156.val[1] = 0u;
                  vst2q_s8(v84, v156);
                  v85 = v81 + 64;
                  vst2q_s8(v85, v154);
                  v86 = v81 + 96;
                  vst2q_s8(v86, v158);
                  v81 += 128;
                }
                while (v81 != v69);
              }
              else
              {
                p_src = (int8x16_t *)&__src;
                v69 = (char *)v66;
              }
              v70 = (char *)(v66 + 2 * v67);
              while (v69 != v70)
              {
                v71 = p_src->u8[0];
                p_src = (int8x16_t *)((char *)p_src + 1);
                *(_WORD *)v69 = v71;
                v69 += 2;
              }
              if ((v64 & 0x7FFFFFC0) != 0)
              {
                v76 = &v70[2 * (v64 & 0x7FFFFFC0)];
                v87 = v70;
                do
                {
                  v153.val[0] = *(int8x16_t *)v61;
                  v88 = *((int8x16_t *)v61 + 1);
                  v155.val[0] = (int8x16_t)*((_OWORD *)v61 + 2);
                  v89 = *((int8x16_t *)v61 + 3);
                  v61 += 64;
                  v157.val[0] = v89;
                  v155.val[1] = 0u;
                  v159.val[0] = v88;
                  v153.val[1] = 0u;
                  v90 = v87;
                  vst2q_s8(v90, v153);
                  v90 += 32;
                  v157.val[1] = 0u;
                  v159.val[1] = 0u;
                  vst2q_s8(v90, v159);
                  v91 = v87 + 64;
                  vst2q_s8(v91, v155);
                  v92 = v87 + 96;
                  v87 += 128;
                  vst2q_s8(v92, v157);
                }
                while (v87 != v76);
              }
              else
              {
                v76 = v70;
              }
              v77 = &v70[2 * v64];
              while (v76 != v77)
              {
                v78 = *(unsigned __int8 *)v61++;
                *(_WORD *)v76 = v78;
                v76 += 2;
              }
            }
            continue;
          }
          v72 = (_BYTE *)MEMORY[0x19AEA4824](a2);
          if (v72)
          {
            v73 = v72;
            v147 = v139;
            v148 = v140;
            v149 = v141;
            *(_OWORD *)__n = v142;
            __src = *(_OWORD *)__s;
            v144 = v136;
            v145 = v137;
            v146 = v138;
            v74 = HIDWORD(v142);
            if (!HIDWORD(v142))
              goto LABEL_132;
            if (HIDWORD(v142) != 1)
            {
              memcpy(v72, &__src, HIDWORD(v142));
LABEL_132:
              if ((_DWORD)v64)
                goto LABEL_133;
              continue;
            }
            *v72 = __src;
            if ((_DWORD)v64)
            {
LABEL_133:
              v75 = &v73[v74];
              if ((_DWORD)v64 == 1)
                *v75 = *v61;
              else
                memcpy(v75, v61, v64);
            }
          }
        }
      }
      if (a3 == 1)
      {
        LOBYTE(__src) = 41;
        v94 = *(_QWORD *)(a2 + 8);
        if (v94
          && ((v95 = *(unsigned int *)(a2 + 16), v95 < *(_DWORD *)(v94 + 4))
            ? (v96 = *(_QWORD *)a2 == 0)
            : (v96 = 0),
              v96))
        {
          v121 = *(_DWORD *)(v94 + 16);
          v122 = *(_QWORD *)(v94 + 8);
          *(_DWORD *)(a2 + 16) = v95 + 1;
          if ((v121 & 4) != 0)
            *(_BYTE *)(v122 + v95) = 41;
          else
            *(_WORD *)(v122 + 2 * v95) = 41;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      v97 = 0;
      do
      {
        v98 = *(_DWORD **)((char *)v30 + v97);
        *(_QWORD *)((char *)v30 + v97) = 0;
        if (v98)
        {
          if (v98[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v98 + 8))(v98);
          else
            --v98[2];
        }
        v97 += 8;
      }
      while (8 * v28 != v97);
      return (WTF::StringImpl *)WTF::fastFree(v30, v41);
    }
    switch(*(_BYTE *)(a1 + 13))
    {
      case 0:
        v27 = "min(";
        goto LABEL_255;
      case 1:
        v27 = "max(";
        goto LABEL_255;
      case 2:
        v27 = "clamp(";
        goto LABEL_258;
      case 3:
        v27 = "pow(";
        goto LABEL_255;
      case 4:
        v27 = "sqrt(";
        goto LABEL_250;
      case 5:
        v27 = "hypot(";
        goto LABEL_258;
      case 6:
        v27 = "sin(";
        goto LABEL_255;
      case 7:
        v27 = "cos(";
        goto LABEL_255;
      case 8:
        v27 = "tan(";
        goto LABEL_255;
      case 9:
        v27 = "exp(";
        goto LABEL_255;
      case 0xA:
        v27 = "log(";
        goto LABEL_255;
      case 0xB:
        v27 = "asin(";
        goto LABEL_250;
      case 0xC:
        v27 = "acos(";
        goto LABEL_250;
      case 0xD:
        v27 = "atan(";
        goto LABEL_250;
      case 0xE:
        v27 = "atan2(";
        goto LABEL_258;
      case 0xF:
        v27 = "abs(";
        goto LABEL_255;
      case 0x10:
        v27 = "sign(";
LABEL_250:
        v123 = 6;
        break;
      case 0x11:
        v27 = "mod(";
        goto LABEL_255;
      case 0x12:
        v27 = "rem(";
LABEL_255:
        v123 = 5;
        break;
      case 0x13:
        v27 = "round(";
LABEL_258:
        v123 = 7;
        break;
      case 0x14:
        v27 = "round(nearest, ";
        goto LABEL_260;
      case 0x15:
        v27 = "round(up, ";
        v123 = 11;
        break;
      case 0x16:
        v27 = "round(down, ";
        v123 = 13;
        break;
      case 0x17:
        v27 = "round(to-zero, ";
LABEL_260:
        v123 = 16;
        break;
      default:
        v27 = "";
        v123 = 1;
        break;
    }
    v134 = v123 - 1;
    *(_QWORD *)&__src = v27;
    if (v134 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19582EEE4);
    }
    DWORD2(__src) = v134;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)a2, (int8x16_t **)&__src);
    v124 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v124)
    {
      v125 = *(_QWORD **)(a1 + 16);
      WebCore::CSSCalcOperationNode::buildCSSTextRecursive(*v125, a2, 0);
      if ((_DWORD)v124 != 1)
      {
        v126 = v125 + 1;
        v127 = 8 * v124 - 8;
        do
        {
          WTF::StringBuilder::append();
          v128 = *v126++;
          WebCore::CSSCalcOperationNode::buildCSSTextRecursive(v128, a2, 0);
          v127 -= 8;
        }
        while (v127);
      }
    }
    v129 = *(_DWORD *)(a2 + 16);
    v130 = __CFADD__(v129, 1);
    v131 = v129 + 1;
    if (v130)
      v132 = 0xFFFFFFFFLL;
    else
      v132 = v131;
    v133 = *(WTF::StringImpl **)(a2 + 8);
    if ((v133 || (v133 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v133 + 16) & 4) == 0)
    {
      result = (WTF::StringImpl *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a2);
      if (result)
        *(_WORD *)result = 41;
    }
    else
    {
      result = (WTF::StringImpl *)MEMORY[0x19AEA4824](a2, v132);
      if (result)
        *(_BYTE *)result = 41;
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) == 3
         || (result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1),
             (_DWORD)result == 4))
  {
    WTF::StringBuilder::append();
    v22 = *(_DWORD **)(a1 + 16);
    ++v22[2];
    result = (WTF::StringImpl *)WebCore::CSSCalcOperationNode::buildCSSTextRecursive(v22, a2, 1);
    if (v22[2] == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  return result;
}

void WebCore::sortChildren(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t *v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;

  v3 = a2;
  v4 = (uint64_t *)(a1 + 8 * a2);
  if (a2)
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = a2;
    while (1)
    {
      v7 = (uint64_t *)operator new(8 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(a1, v4, v3, v7, v6);
    operator delete(v9);
  }
  else
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(a1, v4, v3, 0, 0);
  }
}

uint64_t WebCore::CSSCalcOperationNode::dump(uint64_t **this, WTF::TextStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = WTF::TextStream::operator<<();
  WebCore::operator<<(v4, *((unsigned __int8 *)this + 13));
  WTF::TextStream::operator<<();
  if ((unint64_t)*((char *)this + 12) <= 9)
    WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v6 = WebCore::CSSCalcOperationNode::primitiveType((WebCore::CSSCalcOperationNode *)this);
  WebCore::operator<<(v5, v6);
  WTF::TextStream::operator<<();
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v7 = *((unsigned int *)this + 7);
  if ((_DWORD)v7)
  {
    v8 = this[2];
    v9 = 8 * v7;
    do
    {
      WTF::TextStream::startGroup(a2);
      WTF::TextStream::operator<<();
      v10 = WTF::TextStream::operator<<();
      v11 = *v8++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 88))(v11, v10);
      WTF::TextStream::endGroup(a2);
      v9 -= 8;
    }
    while (v9);
  }
  return WTF::TextStream::endGroup(a2);
}

uint64_t WebCore::CSSCalcOperationNode::equals(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if ((_DWORD)result != 2)
    return 0;
  v5 = *(_DWORD *)(a1 + 28);
  if (v5 != *(_DWORD *)(a2 + 28) || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13))
    return 0;
  if (!v5)
    return 1;
  v6 = 0;
  while (v6 < *(unsigned int *)(a2 + 28))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v6);
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 56))(v7, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v6));
    if ((result & 1) != 0 && ++v6 < *(unsigned int *)(a1 + 28))
      continue;
    return result;
  }
  __break(0xC471u);
  return result;
}

double WebCore::CSSCalcOperationNode::evaluateOperator(int a1, long double *a2, unsigned int a3, int8x16_t a4, double a5, int8x16_t a6)
{
  double v6;
  long double *v7;
  double v8;
  double *v9;
  uint64_t v10;
  double v11;
  double v12;
  long double v13;
  double v14;
  uint64_t v15;
  long double v16;
  double v17;
  BOOL v18;
  uint64_t v19;
  double v20;
  long double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double result;
  long double v29;
  double v30;
  long double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  unint64_t v40;
  double *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  long double v46;
  double v47;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  float64x2_t v54;
  double v55;
  double v56;

  v6 = 0.0;
  v7 = a2;
  switch(a1)
  {
    case 0:
      if (!a3)
        goto LABEL_115;
      v8 = *a2;
      v9 = a2 + 1;
      v10 = 8 * a3 - 8;
      v11 = *a2;
      while (1)
      {
        if (v11 < v8)
          v8 = v11;
        if (!v10)
          break;
        v12 = *v9++;
        v11 = v12;
        v10 -= 8;
      }
      return v8;
    case 1:
      if (!a3)
        goto LABEL_115;
      v8 = *a2;
      v41 = a2 + 1;
      v42 = 8 * a3 - 8;
      v43 = *a2;
      while (1)
      {
        if (v8 < v43)
          v8 = v43;
        if (!v42)
          break;
        v44 = *v41++;
        v43 = v44;
        v42 -= 8;
      }
      return v8;
    case 2:
      if (a3 != 3)
        goto LABEL_115;
      v36 = a2[1];
      if (a2[2] < v36)
        v36 = a2[2];
      if (*a2 >= v36)
        return *a2;
      else
        return v36;
    case 3:
      if (a3 != 2)
        goto LABEL_115;
      return pow(*a2, a2[1]);
    case 4:
      if (a3 != 1)
        goto LABEL_115;
      v34 = *a2;
      return sqrt(v34);
    case 5:
      if (!a3)
        goto LABEL_115;
      if (a3 == 1)
        return fabs(*a2);
      v33 = 8 * a3;
      v34 = 0.0;
      do
      {
        v35 = *v7++;
        v34 = v34 + v35 * v35;
        v33 -= 8;
      }
      while (v33);
      return sqrt(v34);
    case 6:
      if (a3 != 1)
        goto LABEL_115;
      return sin(*a2);
    case 7:
      if (a3 != 1)
        goto LABEL_115;
      return cos(*a2);
    case 8:
      if (a3 != 1)
        goto LABEL_115;
      v39 = fmod(*a2, 6.28318531);
      if (v39 < 0.0)
        v39 = v39 + 6.28318531;
      if (v39 == 1.57079633)
      {
        *(double *)&v40 = INFINITY;
        return *(double *)&v40;
      }
      if (v39 == 4.71238898)
      {
        *(double *)&v40 = -INFINITY;
        return *(double *)&v40;
      }
      return tan(v39);
    case 9:
      if (a3 != 1)
        goto LABEL_115;
      return exp(*a2);
    case 10:
      if (a3 == 2)
      {
        v51 = log(*a2);
        return v51 / log(v7[1]);
      }
      if (a3 != 1)
        goto LABEL_115;
      return log(*a2);
    case 11:
      if (a3 != 1)
        goto LABEL_115;
      v27 = asin(*a2);
      return v27 * 57.2957795;
    case 12:
      if (a3 != 1)
        goto LABEL_115;
      v27 = acos(*a2);
      return v27 * 57.2957795;
    case 13:
      if (a3 != 1)
        goto LABEL_115;
      v27 = atan(*a2);
      return v27 * 57.2957795;
    case 14:
      if (a3 != 2)
        goto LABEL_115;
      v27 = atan2(*a2, a2[1]);
      return v27 * 57.2957795;
    case 15:
      if (a3 == 1)
        return fabs(*a2);
      goto LABEL_115;
    case 16:
      if (a3 != 1)
        goto LABEL_115;
      v45 = *a2;
      if (*a2 < 0.0)
        v45 = -1.0;
      if (*a2 <= 0.0)
        return v45;
      else
        return 1.0;
    case 17:
      if (a3 != 2)
        goto LABEL_115;
      v13 = *a2;
      v14 = a2[1];
      if (fabs(v14) != INFINITY)
      {
        v15 = *((_QWORD *)a2 + 1);
        goto LABEL_123;
      }
      v15 = *((_QWORD *)a2 + 1);
      if (((*(_QWORD *)&v14 ^ *(_QWORD *)&v13) & 0x8000000000000000) == 0)
      {
LABEL_123:
        v52 = fmod(v13, a2[1]);
        v53 = -0.0;
        if ((v15 ^ *(_QWORD *)&v52) < 0)
          v53 = v14;
        return v52 + v53;
      }
LABEL_115:
      *(double *)&v40 = NAN;
      return *(double *)&v40;
    case 18:
      if (a3 != 2)
        goto LABEL_115;
      v32 = a2[1];
      if (v32 == 0.0)
        goto LABEL_115;
      return fmod(*a2, v32);
    case 19:
      goto LABEL_115;
    case 20:
      if (a3 != 2)
        goto LABEL_115;
      a4.i64[0] = *(uint64_t *)a2;
      v46 = a2[1];
      v47 = fabs(v46);
      if (fabs(*a2) != INFINITY && v47 == INFINITY)
        goto LABEL_126;
      v56 = *a2;
      v18 = fmod(*(long double *)a4.i64, v46) == 0.0;
      v49 = v56;
      v50 = v56;
      if (!v18)
      {
        v49 = v47 * floor(v56 / v47);
        v50 = v47 + v49;
      }
      if (vabdd_f64(v50, v56) <= v47 * 0.5)
        return v50;
      else
        return v49;
    case 21:
      if (a3 != 2)
        goto LABEL_115;
      v6 = *a2;
      v16 = a2[1];
      v17 = fabs(v16);
      v18 = fabs(*a2) != INFINITY && v17 == INFINITY;
      if (v18)
      {
        if (v6 != 0.0)
        {
          if (v6 >= 0.0)
            return INFINITY;
          else
            return -0.0;
        }
      }
      else if (fmod(*a2, v16) != 0.0)
      {
        return v17 + v17 * floor(v6 / v17);
      }
      return v6;
    case 22:
      if (a3 != 2)
        goto LABEL_115;
      v6 = *a2;
      v29 = a2[1];
      v30 = fabs(v29);
      if (fabs(*a2) != INFINITY && v30 == INFINITY)
      {
        if (v6 != 0.0)
        {
          if (v6 >= 0.0)
            return 0.0;
          else
            return -INFINITY;
        }
      }
      else if (fmod(*a2, v29) != 0.0)
      {
        return v30 * floor(v6 / v30);
      }
      return v6;
    case 23:
      if (a3 != 2)
        goto LABEL_115;
      a4.i64[0] = *(uint64_t *)a2;
      v21 = a2[1];
      v22 = fabs(v21);
      if (fabs(*a2) != INFINITY && v22 == INFINITY)
      {
LABEL_126:
        a6.i64[0] = 0;
        v54.f64[0] = NAN;
        v54.f64[1] = NAN;
        *(_QWORD *)&result = vbslq_s8((int8x16_t)vnegq_f64(v54), a6, a4).u64[0];
        return result;
      }
      v55 = *a2;
      if (fmod(*(long double *)a4.i64, v21) == 0.0)
      {
        v25 = v55;
        v26 = v55;
      }
      else
      {
        v24 = floor(v55 / v22);
        v25 = v22 * v24;
        v26 = v22 + v22 * v24;
      }
      if (fabs(v26) >= fabs(v25))
        return v25;
      else
        return v26;
    case 42:
      if (!a3)
        return 1.0;
      v37 = 8 * a3;
      v6 = 1.0;
      do
      {
        v38 = *v7++;
        v6 = v6 * v38;
        v37 -= 8;
      }
      while (v37);
      return v6;
    case 43:
      if (a3)
      {
        v19 = 8 * a3;
        do
        {
          v20 = *v7++;
          v6 = v6 + v20;
          v19 -= 8;
        }
        while (v19);
      }
      return v6;
    case 45:
      if (a3 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19582F824);
      }
      if (!a3)
      {
        __break(0xC471u);
        JUMPOUT(0x19582F82CLL);
      }
      return *a2 - a2[1];
    case 47:
      if (a3 == 1)
        goto LABEL_115;
      if (!a3)
      {
        __break(0xC471u);
        JUMPOUT(0x19582F834);
      }
      return *a2 / a2[1];
    default:
      return v6;
  }
}

uint64_t WebCore::CSSCalcPrimitiveValueNode::createCalcExpression@<X0>(uint64_t this@<X0>, const WebCore::CSSToLengthConversionData *a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v6;
  float v7;
  WTF::StringImpl *v8;
  int v9;
  void *v10;
  _BOOL4 v11;
  WTF *v12;
  WTF *v13;
  __n128 v14;
  __int16 v15;
  int v16;
  double v18;
  char v19;
  float v20;
  WTF::StringImpl *v21;
  unsigned __int8 *v22;
  int v23;
  double v24;
  BOOL v25;
  float v26;
  uint64_t v27;
  void *v28;
  double v29;
  WTF *v30[2];
  WTF *v31[2];
  __int16 v32;

  switch(*(_BYTE *)(this + 12))
  {
    case 0:
      v6 = *(_QWORD *)(this + 16);
      *(_DWORD *)v6 += 2;
      v24 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)v6);
      if (v24 >= 3.40282347e38)
      {
        v7 = 3.4028e38;
      }
      else
      {
        v25 = v24 <= -3.40282347e38;
        v26 = v24;
        if (v25)
          v7 = -3.4028e38;
        else
          v7 = v26;
      }
      this = WTF::fastMalloc((WTF *)0x10);
      *(_BYTE *)(this + 8) = 1;
      *(_QWORD *)this = off_1E3408878;
      goto LABEL_3;
    case 1:
      v6 = *(_QWORD *)(this + 16);
      *(_DWORD *)v6 += 2;
      v7 = WebCore::CSSPrimitiveValue::computeLength<float>(v6, (uint64_t)a2, a4);
      this = WTF::fastMalloc((WTF *)0x18);
      *(_BYTE *)(this + 8) = 2;
      *(_QWORD *)this = off_1E34088B0;
      *(_WORD *)(this + 16) = 4;
      *(_BYTE *)(this + 18) = 1;
LABEL_3:
      *(float *)(this + 12) = v7;
      *a3 = this;
      v9 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 != 2)
        goto LABEL_28;
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v6, v8);
    case 2:
    case 4:
      v6 = *(_QWORD *)(this + 16);
      *(_DWORD *)v6 += 2;
      v32 = 0;
      *(_OWORD *)v30 = 0u;
      *(_OWORD *)v31 = 0u;
      WebCore::CSSValue::collectComputedStyleDependencies(v6, (WebCore::ComputedStyleDependencies *)v30);
      v11 = (!HIDWORD(v31[1]) || *((_QWORD *)a2 + 1))
         && (!HIDWORD(v30[1]) || *(_QWORD *)a2)
         && (!(_BYTE)v32 || *((_QWORD *)a2 + 4))
         && (!HIBYTE(v32) || *((_QWORD *)a2 + 3));
      v12 = v31[0];
      if (v31[0])
      {
        v31[0] = 0;
        LODWORD(v31[1]) = 0;
        WTF::fastFree(v12, v10);
      }
      v13 = v30[0];
      if (v30[0])
      {
        v30[0] = 0;
        LODWORD(v30[1]) = 0;
        WTF::fastFree(v13, v10);
      }
      if (!v11)
        goto LABEL_44;
      if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)v6))
      {
        v18 = WebCore::CSSPrimitiveValue::computeLength<double>(v6, (uint64_t)a2, v14);
        v19 = 4;
LABEL_26:
        v20 = v18;
        this = WTF::fastMalloc((WTF *)0x18);
        *(_BYTE *)(this + 8) = 2;
        *(_QWORD *)this = off_1E34088B0;
        *(_BYTE *)(this + 16) = v19;
        *(_WORD *)(this + 17) = 256;
        *(float *)(this + 12) = v20;
        goto LABEL_27;
      }
      v15 = *(_WORD *)(v6 + 4);
      v16 = v15 & 0x7F;
      if ((v16 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v6 + 4) & 0x7F) - 63)) & 0x34001) != 0)
        goto LABEL_44;
      if (v16 != 73)
        goto LABEL_22;
      v22 = *(unsigned __int8 **)(*(_QWORD *)(v6 + 8) + 8);
      v23 = v22[12];
      if (v23 == 1)
        goto LABEL_32;
      if (v23 == 2)
        goto LABEL_24;
      if ((v23 - 5) <= 3)
      {
LABEL_32:
        v16 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v22 + 72))(v22);
LABEL_22:
        if (v16 == 3)
        {
          v15 = *(_WORD *)(v6 + 4);
LABEL_24:
          if ((v15 & 0x7F) == 0x49)
          {
            v27 = *(_QWORD *)(v6 + 8);
            v30[0] = 0;
            v29 = WebCore::CSSCalcValue::doubleValue(v27, (uint64_t)v30);
            if (v30[0])
              WTF::fastFree((WTF *)((char *)v30[0] - 16), v28);
            v19 = 3;
            v18 = v29;
          }
          else
          {
            v18 = *(double *)(v6 + 8);
            v19 = 3;
          }
          goto LABEL_26;
        }
      }
LABEL_44:
      this = WTF::fastMalloc((WTF *)0x18);
      *(_BYTE *)(this + 8) = 2;
      *(_QWORD *)this = off_1E34088B0;
      *(_DWORD *)(this + 12) = 0;
      *(_BYTE *)(this + 18) = 0;
      *(_WORD *)(this + 16) = 13;
LABEL_27:
      *a3 = this;
      v9 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 == 2)
        return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v6, v21);
LABEL_28:
      *(_DWORD *)v6 = v9;
      return this;
    default:
      *a3 = 0;
      return this;
  }
}

double WebCore::CSSCalcPrimitiveValueNode::computeLengthPx(WebCore::CSSCalcPrimitiveValueNode *this, const WebCore::CSSToLengthConversionData *a2, __n128 a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  double v10;
  double v11;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  double v16;
  BOOL v18;
  BOOL v19;

  v3 = *((unsigned __int8 *)this + 12);
  if (v3 == 1)
  {
    v4 = *((_QWORD *)this + 2);
    *(_DWORD *)v4 += 2;
    v5 = *(_WORD *)(v4 + 4) & 0x7F;
    if (v5 == 73)
    {
      v13 = *(_QWORD *)(v4 + 8);
      v14 = *(_DWORD **)(v13 + 8);
      ++v14[2];
      v11 = (*(double (**)(_DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v14 + 48))(v14, a2);
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 8) + 72))(*(_QWORD *)(v13 + 8));
      v16 = fabs(v11);
      if (v15 == 12 && v16 == INFINITY)
      {
        v11 = 0.0;
      }
      else
      {
        if (*(_BYTE *)(v13 + 16))
          v18 = v11 < 0.0;
        else
          v18 = 0;
        if (v18)
          v11 = 0.0;
      }
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
      goto LABEL_14;
    }
    v6 = v5 - 79;
    if (v5 == 63)
      v7 = 22;
    else
      v7 = *(_WORD *)(v4 + 4) & 0x7F;
    if (v5 == 77)
      LODWORD(v8) = 20;
    else
      LODWORD(v8) = v7;
    if (v6 >= 2)
      v8 = v8;
    else
      v8 = 22;
    a3.n128_u64[0] = *(_QWORD *)(v4 + 8);
    v10 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a2, (void *)v8, a3);
  }
  else
  {
    if (*((_BYTE *)this + 12))
      v19 = v3 == 2;
    else
      v19 = 1;
    if (!v19)
      return 0.0;
    v4 = *((_QWORD *)this + 2);
    *(_DWORD *)v4 += 2;
    v10 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)v4);
  }
  v11 = v10;
LABEL_14:
  if (*(_DWORD *)v4 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, v9);
  else
    *(_DWORD *)v4 -= 2;
  return v11;
}

unsigned __int16 **WebCore::CSSCalcPrimitiveValueNode::collectComputedStyleDependencies(WebCore::CSSCalcPrimitiveValueNode *this, WebCore::ComputedStyleDependencies *a2)
{
  unsigned __int16 **v2;
  unsigned __int16 **result;
  WTF::StringImpl *v4;

  v2 = (unsigned __int16 **)*((_QWORD *)this + 2);
  *(_DWORD *)v2 += 2;
  result = WebCore::CSSPrimitiveValue::collectComputedStyleDependencies(v2, a2);
  if (*(_DWORD *)v2 == 2)
    return (unsigned __int16 **)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v2, v4);
  *(_DWORD *)v2 -= 2;
  return result;
}

uint64_t WebCore::CSSCalcPrimitiveValueNode::isResolvable(WebCore::CSSCalcPrimitiveValueNode *this)
{
  return 1;
}

BOOL WebCore::CSSCalcPrimitiveValueNode::isZero(WebCore::CSSCalcPrimitiveValueNode *this, void *a2)
{
  uint64_t v2;
  int v3;
  double v4;
  _DWORD *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 2);
  v3 = *(_DWORD *)v2;
  *(_DWORD *)v2 += 2;
  if ((*(_WORD *)(v2 + 4) & 0x7F) == 0x49)
  {
    v6 = (_DWORD *)v2;
    v7 = 0;
    v4 = WebCore::CSSCalcValue::doubleValue(*(_QWORD *)(v2 + 8), (uint64_t)&v7);
    if (v7)
      WTF::fastFree((WTF *)(v7 - 16), a2);
    v2 = (uint64_t)v6;
    v3 = *v6 - 2;
    if (*v6 != 2)
      goto LABEL_3;
LABEL_7:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v2, (WTF::StringImpl *)a2);
    return v4 == 0.0;
  }
  v4 = *(double *)(v2 + 8);
  if (!v3)
    goto LABEL_7;
LABEL_3:
  *(_DWORD *)v2 = v3;
  return v4 == 0.0;
}

uint64_t WebCore::CSSCalcPrimitiveValueNode::equals(uint64_t a1, const WebCore::CSSPrimitiveValue **a2)
{
  const WTF::StringImpl *v4;

  if ((*((unsigned int (**)(const WebCore::CSSPrimitiveValue **))*a2 + 8))(a2) == 1)
    return WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a1 + 16), a2[2], v4);
  else
    return 0;
}

WTF::StringImpl *WebCore::CSSCalcPrimitiveValueNode::dump(WebCore::CSSCalcPrimitiveValueNode *this, WTF::TextStream *a2)
{
  WebCore::CSSPrimitiveValue *v3;
  const WTF::String *v4;
  WTF::StringBuilder *v5;
  __n128 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _BYTE *v16;
  WTF::StringImpl *v17;

  WTF::TextStream::operator<<();
  v3 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 2);
  *(_DWORD *)v3 += 2;
  WebCore::CSSPrimitiveValue::customCSSText(v3, v4, v5, (WebCore *)&v17, v6);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*((char *)this + 12) <= 9)
    WTF::TextStream::operator<<();
  v8 = WTF::TextStream::operator<<();
  v9 = *((_QWORD *)this + 2);
  v10 = *(_DWORD *)v9;
  *(_DWORD *)v9 += 2;
  v11 = *(_WORD *)(v9 + 4);
  v12 = v11 & 0x7F;
  v13 = 22;
  if ((v12 - 79) >= 2)
  {
    if (v12 == 77)
    {
      v13 = 20;
    }
    else if (v12 != 63)
    {
      if ((v11 & 0x7F) == 0x49)
      {
        v16 = *(_BYTE **)(*(_QWORD *)(v9 + 8) + 8);
        if (v16[12] == 1)
        {
LABEL_19:
          v13 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 72))(v16);
          v10 = *(_DWORD *)v9 - 2;
        }
        else
        {
          v13 = 1;
          switch(v16[12])
          {
            case 0:
              break;
            case 2:
              v13 = 3;
              break;
            case 3:
              v13 = 74;
              break;
            case 4:
              v13 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_19;
            default:
              v13 = 0;
              break;
          }
        }
      }
      else
      {
        v13 = *(_WORD *)(v9 + 4) & 0x7F;
      }
    }
  }
  if (v10)
    *(_DWORD *)v9 = v10;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v9, v7);
  WebCore::operator<<(v8, v13);
  WTF::TextStream::operator<<();
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)v3 == 2)
    return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v14);
  *(_DWORD *)v3 -= 2;
  return result;
}

uint64_t WebCore::CSSCalcSymbolNode::isResolvable(WebCore::CSSCalcSymbolNode *this)
{
  return 0;
}

uint64_t WebCore::CSSCalcSymbolNode::isZero(WebCore::CSSCalcSymbolNode *this)
{
  return 0;
}

void WebCore::CSSCalcSymbolNode::createCalcExpression(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::CSSCalcSymbolNode::doubleValue(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 *v9;
  int v10;
  int v11;

  v3 = *a3;
  if (!*a3)
    goto LABEL_9;
  v4 = *(unsigned __int16 *)(result + 14);
  v5 = *(_DWORD *)(v3 - 8);
  v6 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (unsigned __int16 *)(v3 + 24 * v8);
  v10 = *v9;
  if (v10 != v4)
  {
    v11 = 1;
    while (v10 != 0xFFFF)
    {
      v8 = (v8 + v11) & v5;
      v9 = (unsigned __int16 *)(v3 + 24 * v8);
      v10 = *v9;
      ++v11;
      if (v10 == v4)
        goto LABEL_8;
    }
    v9 = (unsigned __int16 *)(v3 + 24 * *(unsigned int *)(v3 - 4));
  }
LABEL_8:
  if (v9 == (unsigned __int16 *)(v3 + 24 * *(unsigned int *)(v3 - 4)))
LABEL_9:
    __break(1u);
  return result;
}

uint64_t *WebCore::CSSCalcSymbolTable::get@<X0>(uint64_t *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  char v11;

  v3 = *result;
  if (!*result)
    goto LABEL_11;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = (unsigned __int16 *)(v3 + 24 * v7);
  v9 = *v8;
  if (v9 != a2)
  {
    v10 = 1;
    while (v9 != 0xFFFF)
    {
      v7 = (v7 + v10) & v4;
      v8 = (unsigned __int16 *)(v3 + 24 * v7);
      v9 = *v8;
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = (unsigned __int16 *)(v3 + 24 * *(unsigned int *)(v3 - 4));
  }
LABEL_8:
  if (v8 == (unsigned __int16 *)(v3 + 24 * *(unsigned int *)(v3 - 4)))
  {
    LOBYTE(v3) = 0;
LABEL_11:
    v11 = 0;
    goto LABEL_12;
  }
  LOBYTE(v3) = *((_BYTE *)v8 + 8);
  *(_QWORD *)(a3 + 8) = *((_QWORD *)v8 + 2);
  v11 = 1;
LABEL_12:
  *(_BYTE *)a3 = v3;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

double WebCore::CSSCalcSymbolNode::computeLengthPx(WebCore::CSSCalcSymbolNode *this, const WebCore::CSSToLengthConversionData *a2)
{
  return 0.0;
}

BOOL WebCore::CSSCalcSymbolNode::equals(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2) == 5
      && *(unsigned __int16 *)(a1 + 14) == *(unsigned __int16 *)(a2 + 14)
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t WebCore::CSSCalcSymbolNode::type(WebCore::CSSCalcSymbolNode *this)
{
  return 5;
}

uint64_t WebCore::CSSCalcSymbolNode::primitiveType(WebCore::CSSCalcSymbolNode *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t WebCore::CSSCalcSymbolNode::dump(WebCore::CSSCalcSymbolNode *this, WTF::TextStream *a2)
{
  uint64_t v3;

  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)*((char *)this + 12) <= 9)
    WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  WebCore::operator<<(v3, *((unsigned __int8 *)this + 16));
  return WTF::TextStream::operator<<();
}

uint64_t *WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>@<X0>(uint64_t *result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 *v15;
  int v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::CSSValueID,WTF::KeyValuePair<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>>>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueID>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (unsigned __int16)*a2;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (unsigned __int16 *)(v8 + 24 * v14);
  v16 = *v15;
  if (v16 != 0xFFFF)
  {
    v17 = 0;
    v18 = 1;
    result = (uint64_t *)65534;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(_DWORD *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 24 * v26;
        goto LABEL_33;
      }
      if (v16 == 65534)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (unsigned __int16 *)(v8 + 24 * v14);
      v16 = *v15;
      ++v18;
    }
    while (v16 != 0xFFFF);
    if (v17)
    {
      *v17 = -1;
      *(_OWORD *)(v17 + 4) = xmmword_1969EF400;
      --*(_DWORD *)(*v6 - 16);
      LOWORD(v11) = *a2;
      v15 = v17;
    }
  }
  *v15 = v11;
  *((_BYTE *)v15 + 8) = *(_BYTE *)a3;
  *((_QWORD *)v15 + 2) = *(_QWORD *)(a3 + 8);
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_21;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_26:
      result = (uint64_t *)WTF::HashTable<WebCore::CSSValueID,WTF::KeyValuePair<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>>>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueID>>::rehash(v6, v25, v15);
      v15 = (unsigned __int16 *)result;
      v21 = *v6;
      if (*v6)
        LODWORD(v24) = *(_DWORD *)(v21 - 4);
      else
        LODWORD(v24) = 0;
      goto LABEL_32;
    }
LABEL_21:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_26;
  }
LABEL_32:
  v28 = v21 + 24 * v24;
  v27 = 1;
LABEL_33:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

uint64_t *WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>@<X0>(uint64_t *result@<X0>, _WORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::CSSValueID,WTF::KeyValuePair<WebCore::CSSValueID,WebCore::CSSUnitType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueID,WebCore::CSSUnitType>>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueID>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (unsigned __int16)*a2;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 4 * v14);
  v16 = *(unsigned __int16 *)v15;
  if (v16 != 0xFFFF)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 4 * v26;
        goto LABEL_31;
      }
      if (v16 == 65534)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 4 * v14);
      v16 = *(unsigned __int16 *)v15;
      ++v18;
    }
    while (v16 != 0xFFFF);
    if (v17)
    {
      *(_WORD *)v17 = -1;
      *((_BYTE *)v17 + 2) = 0;
      --*(_DWORD *)(*v6 - 16);
      LOWORD(v11) = *a2;
      v15 = v17;
    }
  }
  *(_WORD *)v15 = v11;
  *((_BYTE *)v15 + 2) = *a3;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_19;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_26:
      result = (uint64_t *)WTF::HashTable<WebCore::CSSValueID,WTF::KeyValuePair<WebCore::CSSValueID,WebCore::CSSUnitType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueID,WebCore::CSSUnitType>>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueID>>::rehash(v6, v25, v15);
      v15 = result;
      v21 = *v6;
      if (*v6)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_30;
    }
LABEL_19:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_26;
  }
LABEL_30:
  v28 = v21 + 4 * v24;
  v27 = 1;
LABEL_31:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

uint64_t WebCore::CSSCalcSymbolsAllowed::get(uint64_t *a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;

  v2 = *a1;
  if (!*a1)
  {
LABEL_8:
    v9 = 0;
    return v9 | ((_DWORD)v2 << 8);
  }
  v3 = *(_DWORD *)(v2 - 8);
  v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = v3 & (v5 ^ HIWORD(v5));
  v7 = *(unsigned __int16 *)(v2 + 4 * v6);
  if (v7 != a2)
  {
    v8 = 1;
    while (v7 != 0xFFFF)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(unsigned __int16 *)(v2 + 4 * v6);
      ++v8;
      if (v7 == a2)
        goto LABEL_6;
    }
    LODWORD(v2) = 0;
    goto LABEL_8;
  }
LABEL_6:
  v9 = *(unsigned __int8 *)(v2 + 4 * v6 + 2);
  LODWORD(v2) = 1;
  return v9 | ((_DWORD)v2 << 8);
}

uint64_t WebCore::CSSCalcValue::category(WebCore::CSSCalcValue *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 12);
}

uint64_t WebCore::CSSCalcValue::createCalculationValue@<X0>(WebCore::CSSCalcValue *this@<X0>, const WebCore::CSSToLengthConversionData *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::CSSCalcValue *v3;
  _DWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  ++v5[2];
  (*(void (**)(uint64_t *__return_ptr, _DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v5 + 32))(&v8, v5, a2);
  LOBYTE(v3) = *((_BYTE *)v3 + 16);
  result = WTF::fastMalloc((WTF *)0x18);
  v7 = v8;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = (_BYTE)v3;
  *a3 = result;
  v8 = 0;
  if (v5[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  --v5[2];
  return result;
}

WTF::StringImpl *WebCore::CSSCalcValue::customCSSText@<X0>(WebCore::CSSCalcValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;

  v10 = 0;
  v8 = 0;
  v9 = 0;
  v11 = 1;
  v3 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v3 + 8);
  WebCore::CSSCalcOperationNode::buildCSSText((_BYTE *)v3, (uint64_t)&v8);
  if (*(_DWORD *)(v3 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  else
    --*(_DWORD *)(v3 + 8);
  v5 = v8;
  if (v8
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8),
        (v5 = v8) != 0))
  {
    *(_DWORD *)v5 += 2;
  }
  *a2 = v5;
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSCalcValue::equals(WebCore::CSSCalcValue *this, const WebCore::CSSCalcValue *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), *((_QWORD *)a2 + 1));
}

double WebCore::CSSCalcValue::doubleValue(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  double v6;
  int v7;
  double v8;
  BOOL v10;

  v4 = *(_DWORD **)(a1 + 8);
  ++v4[2];
  v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
  v6 = (*(double (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v5, a2);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  v8 = fabs(v6);
  if (v7 == 12 && v8 == INFINITY)
  {
    v6 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 16))
      v10 = v6 < 0.0;
    else
      v10 = 0;
    if (v10)
      v6 = 0.0;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  return v6;
}

double WebCore::CSSCalcValue::computeLengthPx(WebCore::CSSCalcValue *this, const WebCore::CSSToLengthConversionData *a2)
{
  _DWORD *v3;
  double v4;
  int v5;
  double v6;
  BOOL v8;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  ++v3[2];
  v4 = (*(double (**)(_DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v3 + 48))(v3, a2);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  v6 = fabs(v4);
  if (v5 == 12 && v6 == INFINITY)
  {
    v4 = 0.0;
  }
  else
  {
    if (*((_BYTE *)this + 16))
      v8 = v4 < 0.0;
    else
      v8 = 0;
    if (v8)
      v4 = 0.0;
  }
  if (v3[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[2];
  return v4;
}

void WebCore::CSSCalcValue::create(int a1@<W0>, __int128 **a2@<X1>, unsigned __int8 a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned __int8 v16[8];
  uint64_t v17;

  v9 = *a5;
  *a5 = 0;
  v16[0] = a3;
  v17 = v9;
  WebCore::CSSCalcExpressionNodeParser::parseCalc(v16, *a2, a2[1], a1, a6, (uint64_t *)&v15);
  if (v15)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x18);
    v12 = (uint64_t)v15;
    v15 = 0;
    *(_DWORD *)v11 = 2;
    v13 = *(_BYTE *)(v11 + 6);
    *(_WORD *)(v11 + 4) = -14336;
    *(_BYTE *)(v11 + 6) = v13 & 0xFC;
    *(_QWORD *)(v11 + 8) = v12;
    *(_BYTE *)(v11 + 16) = a4 != 0;
    *a7 = v11;
    v14 = v15;
    v15 = 0;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
  }
  else
  {
    *a7 = 0;
  }
  if (v17)
    WTF::fastFree((WTF *)(v17 - 16), v10);
}

uint64_t *WebCore::createCSS(uint64_t *result, uint64_t a2, const WebCore::RenderStyle *a3)
{
  _QWORD *v3;
  float v6;
  double v7;
  int *v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  int v14;
  WTF *v15;
  char v16;
  void (**v17)(WebCore::CSSCalcNegateNode *__hidden);
  int v18;
  _QWORD **v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  BOOL v27;
  BOOL v28;
  unsigned int v29;
  char v30;
  float v31;
  unsigned int v32;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  _BOOL4 v55;
  char v58;
  int v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  BOOL v68;
  unsigned int v69;
  BOOL v70;
  int v71;
  WTF *v73;
  WTF *v74;
  char v75;
  int v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v100;
  int v101;
  WTF *v103;
  uint64_t v104;
  uint64_t *v105;
  WTF *v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  unsigned int v118;
  WTF *v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t *v133;
  WTF *v134;
  uint64_t v135;
  unsigned int v136;
  WTF *v137;
  char *v138;
  int v139;
  char v140;
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  WTF *v147;
  uint64_t v148;
  _DWORD *v149;
  uint64_t v150;
  uint64_t v151;
  WTF *v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  WTF *v156;
  uint64_t v157;
  WTF *v158;

  v3 = result;
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v6 = *(float *)(a2 + 12);
      v7 = v6;
      if ((int)v6 <= 0xFF && *(_QWORD *)&v7 == COERCE__INT64((double)(int)v6))
      {
        v9 = &WebCore::staticCSSValuePool[4 * (int)v6 + 2064];
        *v9 += 2;
      }
      else
      {
        v9 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v9 = 2;
        v10 = *((_BYTE *)v9 + 6);
        *((_WORD *)v9 + 2) = 1;
        *((_BYTE *)v9 + 6) = v10 & 0xFC;
        *((double *)v9 + 1) = v7;
      }
      v11 = WTF::fastMalloc((WTF *)0x18);
      v12 = *((_WORD *)v9 + 2);
      v13 = v12 & 0x7F;
      v14 = 22;
      if ((v13 - 79) >= 2)
      {
        if (v13 == 77)
        {
          v14 = 20;
        }
        else if (v13 != 63)
        {
          v14 = v9[1] & 0x7F;
          if ((v12 & 0x7F) == 0x49)
          {
            v145 = *(_BYTE **)(*((_QWORD *)v9 + 1) + 8);
            if (v145[12] == 1)
            {
LABEL_354:
              v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v145 + 72))(*(_QWORD *)(*((_QWORD *)v9 + 1) + 8));
            }
            else
            {
              v14 = 1;
              switch(v145[12])
              {
                case 0:
                  break;
                case 2:
                  v14 = 3;
                  break;
                case 3:
                  v14 = 74;
                  break;
                case 4:
                  v14 = 75;
                  break;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto LABEL_354;
                default:
                  v14 = 0;
                  break;
              }
            }
          }
        }
      }
      result = (uint64_t *)WebCore::calcUnitCategory(v14);
      *(_DWORD *)(v11 + 8) = 1;
      *(_BYTE *)(v11 + 12) = (_BYTE)result;
      *(_QWORD *)v11 = off_1E3399F60;
      *(_QWORD *)(v11 + 16) = v9;
      *v3 = v11;
      return result;
    case 2:
      return WebCore::createCSS(result, (const WebCore::Length *)(a2 + 12), a3);
    case 3:
      v18 = *(unsigned __int8 *)(a2 + 32);
      v19 = (_QWORD **)(a2 + 16);
      switch(*(_BYTE *)(a2 + 32))
      {
        case 0:
        case 1:
        case 2:
          v152 = a3;
          WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          if (HIDWORD(v157))
          {
            WebCore::CSSCalcOperationNode::createMinOrMaxOrClamp(v18, (uint64_t *)&v156, *(unsigned __int8 *)(a2 + 33), (uint64_t *)&v152);
            *v3 = v152;
            if (HIDWORD(v157))
            {
              v33 = v156;
              v34 = 8 * HIDWORD(v157);
              do
              {
                v35 = *(_DWORD **)v33;
                *(_QWORD *)v33 = 0;
                if (v35)
                {
                  if (v35[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
                  else
                    --v35[2];
                }
                v33 = (WTF *)((char *)v33 + 8);
                v34 -= 8;
              }
              while (v34);
            }
          }
          else
          {
            *v3 = 0;
          }
          goto LABEL_296;
        case 3:
        case 4:
          v152 = a3;
          WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v45 = HIDWORD(v157);
          if (!HIDWORD(v157))
            goto LABEL_279;
          if (v18 == 4)
          {
            v46 = v156;
            if (HIDWORD(v157) != 1)
              goto LABEL_261;
            v47 = *(unsigned __int8 *)(*(_QWORD *)v156 + 12);
          }
          else
          {
            if (v18 == 3)
            {
              v46 = v156;
              if (HIDWORD(v157) != 2)
                goto LABEL_261;
              v47 = *(unsigned __int8 *)(*(_QWORD *)v156 + 12);
              v48 = 2;
            }
            else
            {
              v46 = v156;
              v47 = *(unsigned __int8 *)(*(_QWORD *)v156 + 12);
              v48 = HIDWORD(v157);
              if (HIDWORD(v157) == 1)
                goto LABEL_260;
            }
            v114 = 1;
            do
            {
              if (*(unsigned __int8 *)(*((_QWORD *)v46 + v114) + 12) != v47)
                goto LABEL_261;
              ++v114;
            }
            while (v48 != v114);
          }
LABEL_260:
          if (!v47)
          {
            v122 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)(v122 + 8) = 1;
            *(_BYTE *)(v122 + 12) = 0;
            *(_QWORD *)v122 = off_1E339A040;
            *(_BYTE *)(v122 + 13) = v18;
            goto LABEL_294;
          }
LABEL_261:
          *v3 = 0;
          v115 = 8 * v45;
          do
          {
            v116 = *(_DWORD **)v46;
            *(_QWORD *)v46 = 0;
            if (v116)
            {
              if (v116[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v116 + 8))(v116);
              else
                --v116[2];
            }
            v46 = (WTF *)((char *)v46 + 8);
            v115 -= 8;
          }
          while (v115);
          goto LABEL_296;
        case 5:
          v152 = a3;
          WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v82 = HIDWORD(v157);
          if (!HIDWORD(v157))
            goto LABEL_279;
          v83 = v156;
          v84 = *(unsigned __int8 *)(*(_QWORD *)v156 + 12);
          if (HIDWORD(v157) == 1)
            goto LABEL_175;
          v85 = (char *)v156 + 8;
          v86 = HIDWORD(v157) - 1;
          while (*(unsigned __int8 *)(*(_QWORD *)v85 + 12) == v84)
          {
            v85 += 8;
            if (!--v86)
            {
LABEL_175:
              if (v84 != 9)
              {
                v122 = WTF::fastMalloc((WTF *)0x28);
                *(_DWORD *)(v122 + 8) = 1;
                *(_BYTE *)(v122 + 12) = v84;
                *(_QWORD *)v122 = off_1E339A040;
                *(_BYTE *)(v122 + 13) = 5;
                goto LABEL_294;
              }
              break;
            }
          }
          *v3 = 0;
          v87 = 8 * v82;
          do
          {
            v88 = *(_DWORD **)v83;
            *(_QWORD *)v83 = 0;
            if (v88)
            {
              if (v88[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v88 + 8))(v88);
              else
                --v88[2];
            }
            v83 = (WTF *)((char *)v83 + 8);
            v87 -= 8;
          }
          while (v87);
          goto LABEL_296;
        case 6:
        case 7:
        case 8:
          v152 = a3;
          result = (uint64_t *)WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v36 = HIDWORD(v157);
          if (HIDWORD(v157) == 1)
          {
            v21 = v156;
            v37 = *(unsigned __int8 *)(*(_QWORD *)v156 + 12);
            v36 = 1;
            if (v37 == 5 || v37 == 0)
            {
              result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
              v21 = 0;
              *((_DWORD *)result + 2) = 1;
              *result = (uint64_t)off_1E339A040;
              *((_BYTE *)result + 12) = 0;
              *((_BYTE *)result + 13) = v18;
              result[2] = (uint64_t)v156;
              v39 = v157;
              v156 = 0;
              v157 = 0;
              result[3] = v39;
              *((_WORD *)result + 16) = 256;
              v36 = 0;
            }
            else
            {
              result = 0;
            }
            *v3 = result;
          }
          else
          {
            *v3 = 0;
            v21 = v156;
          }
          if (!v36)
            goto LABEL_323;
          v113 = 8 * v36;
          do
          {
            result = *(uint64_t **)v21;
            *(_QWORD *)v21 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 2) == 1)
                result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
              else
                --*((_DWORD *)result + 2);
            }
            v21 = (WTF *)((char *)v21 + 8);
            v113 -= 8;
          }
          while (v113);
          goto LABEL_322;
        case 9:
          v152 = a3;
          result = (uint64_t *)WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v64 = HIDWORD(v157);
          if (HIDWORD(v157) == 1)
          {
            v21 = v156;
            v64 = 1;
            if (*(_BYTE *)(*(_QWORD *)v156 + 12))
            {
              result = 0;
            }
            else
            {
              result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
              v21 = 0;
              *((_DWORD *)result + 2) = 1;
              *((_WORD *)result + 6) = 2304;
              *result = (uint64_t)off_1E339A040;
              result[2] = (uint64_t)v156;
              v129 = v157;
              v156 = 0;
              v157 = 0;
              result[3] = v129;
              *((_WORD *)result + 16) = 256;
              v64 = 0;
            }
            *v3 = result;
          }
          else
          {
            *v3 = 0;
            v21 = v156;
          }
          if (!v64)
            goto LABEL_323;
          v130 = 8 * v64;
          do
          {
            result = *(uint64_t **)v21;
            *(_QWORD *)v21 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 2) == 1)
                result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
              else
                --*((_DWORD *)result + 2);
            }
            v21 = (WTF *)((char *)v21 + 8);
            v130 -= 8;
          }
          while (v130);
          goto LABEL_322;
        case 0xA:
          v152 = a3;
          result = (uint64_t *)WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v91 = HIDWORD(v157);
          v21 = v156;
          if ((unint64_t)HIDWORD(v157) - 1 > 1)
            goto LABEL_224;
          if (!HIDWORD(v157))
            goto LABEL_191;
          v92 = 8 * HIDWORD(v157);
          v93 = v156;
          while (!*(_BYTE *)(*(_QWORD *)v93 + 12))
          {
            v93 = (WTF *)((char *)v93 + 8);
            v92 -= 8;
            if (!v92)
            {
LABEL_191:
              result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
              *((_DWORD *)result + 2) = 1;
              *((_WORD *)result + 6) = 2560;
              *result = (uint64_t)off_1E339A040;
              goto LABEL_223;
            }
          }
LABEL_224:
          *v3 = 0;
          if (!(_DWORD)v91)
            goto LABEL_323;
          v109 = 8 * v91;
          do
          {
            result = *(uint64_t **)v21;
            *(_QWORD *)v21 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 2) == 1)
                result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
              else
                --*((_DWORD *)result + 2);
            }
            v21 = (WTF *)((char *)v21 + 8);
            v109 -= 8;
          }
          while (v109);
          goto LABEL_322;
        case 0xB:
        case 0xC:
        case 0xD:
          v152 = a3;
          result = (uint64_t *)WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v32 = HIDWORD(v157);
          if (HIDWORD(v157) == 1)
          {
            v21 = v156;
            v32 = 1;
            if (*(_BYTE *)(*(_QWORD *)v156 + 12))
            {
              result = 0;
            }
            else
            {
              result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
              v21 = 0;
              *((_DWORD *)result + 2) = 1;
              *((_BYTE *)result + 12) = 5;
              *result = (uint64_t)off_1E339A040;
              *((_BYTE *)result + 13) = v18;
              result[2] = (uint64_t)v156;
              v111 = v157;
              v156 = 0;
              v157 = 0;
              result[3] = v111;
              *((_WORD *)result + 16) = 256;
              v32 = 0;
            }
            *v3 = result;
          }
          else
          {
            *v3 = 0;
            v21 = v156;
          }
          if (!v32)
            goto LABEL_323;
          v112 = 8 * v32;
          do
          {
            result = *(uint64_t **)v21;
            *(_QWORD *)v21 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 2) == 1)
                result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
              else
                --*((_DWORD *)result + 2);
            }
            v21 = (WTF *)((char *)v21 + 8);
            v112 -= 8;
          }
          while (v112);
          goto LABEL_322;
        case 0xE:
          v152 = a3;
          result = (uint64_t *)WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v89 = HIDWORD(v157);
          if (HIDWORD(v157) == 2)
          {
            v21 = v156;
            if (*(unsigned __int8 *)(*(_QWORD *)v156 + 12) == *(unsigned __int8 *)(*((_QWORD *)v156 + 1) + 12))
            {
              result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
              v21 = 0;
              v89 = 0;
              *((_DWORD *)result + 2) = 1;
              *((_WORD *)result + 6) = 3589;
              *result = (uint64_t)off_1E339A040;
              result[2] = (uint64_t)v156;
              *((_WORD *)result + 16) = 256;
              v90 = v157;
              v156 = 0;
              v157 = 0;
              result[3] = v90;
            }
            else
            {
              result = 0;
              v89 = 2;
            }
            *v3 = result;
          }
          else
          {
            *v3 = 0;
            v21 = v156;
          }
          if (!v89)
            goto LABEL_323;
          v128 = 8 * v89;
          do
          {
            result = *(uint64_t **)v21;
            *(_QWORD *)v21 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 2) == 1)
                result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
              else
                --*((_DWORD *)result + 2);
            }
            v21 = (WTF *)((char *)v21 + 8);
            v128 -= 8;
          }
          while (v128);
          goto LABEL_322;
        case 0xF:
        case 0x10:
          v152 = a3;
          result = (uint64_t *)WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v41 = HIDWORD(v157);
          if (HIDWORD(v157) != 1)
            goto LABEL_87;
          result = (uint64_t *)WebCore::determineCategory(&v156, v18);
          if (v18 == 16)
            v42 = 0;
          else
            v42 = (int)result;
          if (v42 != 9)
          {
            result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
            *((_DWORD *)result + 2) = 1;
            *((_BYTE *)result + 12) = v42;
            goto LABEL_222;
          }
          v41 = HIDWORD(v157);
LABEL_87:
          *v3 = 0;
          v43 = v156;
          if (!v41)
            goto LABEL_351;
          v44 = 8 * v41;
          do
          {
            result = *(uint64_t **)v43;
            *(_QWORD *)v43 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 2) == 1)
                result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
              else
                --*((_DWORD *)result + 2);
            }
            v43 = (WTF *)((char *)v43 + 8);
            v44 -= 8;
          }
          while (v44);
          goto LABEL_350;
        case 0x11:
        case 0x12:
          v152 = a3;
          result = (uint64_t *)WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          v49 = HIDWORD(v157);
          if (HIDWORD(v157) != 2)
          {
            *v3 = 0;
            v21 = v156;
            goto LABEL_283;
          }
          v21 = v156;
          v50 = *(unsigned __int8 *)(*(_QWORD *)v156 + 12);
          v51 = *(unsigned __int8 *)(*((_QWORD *)v156 + 1) + 12);
          if (v50 == v51)
            goto LABEL_281;
          v52 = v50 == 1 && v51 == 2;
          if (v52 || (v50 == 2 ? (v53 = v51 == 1) : (v53 = 0), v53))
          {
            LOBYTE(v50) = 4;
            goto LABEL_281;
          }
          v55 = v50 == 2 && v51 == 0;
          if (v51 == 2 && v50 == 0 || v55)
          {
            LOBYTE(v50) = 3;
LABEL_281:
            result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
            v21 = 0;
            v49 = 0;
            *((_DWORD *)result + 2) = 1;
            *((_BYTE *)result + 12) = v50;
            *result = (uint64_t)off_1E339A040;
            *((_BYTE *)result + 13) = v18;
            result[2] = (uint64_t)v156;
            v123 = v157;
            v156 = 0;
            v157 = 0;
            result[3] = v123;
            *((_WORD *)result + 16) = 256;
            goto LABEL_282;
          }
          result = 0;
          v49 = 2;
LABEL_282:
          *v3 = result;
LABEL_283:
          if (v49)
          {
            v124 = 8 * v49;
            do
            {
              result = *(uint64_t **)v21;
              *(_QWORD *)v21 = 0;
              if (result)
              {
                if (*((_DWORD *)result + 2) == 1)
                  result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
                else
                  --*((_DWORD *)result + 2);
              }
              v21 = (WTF *)((char *)v21 + 8);
              v124 -= 8;
            }
            while (v124);
LABEL_322:
            v21 = v156;
          }
LABEL_323:
          if (!v21)
            return result;
          v156 = 0;
          LODWORD(v157) = 0;
          result = (uint64_t *)v21;
          return (uint64_t *)WTF::fastFree((WTF *)result, (void *)v20);
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
          v152 = a3;
          WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          if (HIDWORD(v157) != 2)
          {
            result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
            *((_DWORD *)result + 2) = 1;
            *((_BYTE *)result + 12) = 0;
            *result = (uint64_t)off_1E339A040;
            *((_BYTE *)result + 13) = v18;
            result[2] = 0;
            result[3] = 0;
            *((_WORD *)result + 16) = 256;
            v29 = HIDWORD(v157);
            v21 = v156;
            *v3 = result;
            if (!v29)
              goto LABEL_323;
            goto LABEL_72;
          }
          v21 = v156;
          v22 = *(unsigned __int8 *)(*(_QWORD *)v156 + 12);
          v23 = *(unsigned __int8 *)(*((_QWORD *)v156 + 1) + 12);
          if (v22 != v23)
          {
            v24 = v22 == 1 && v23 == 2;
            if (v24 || (v22 == 2 ? (v25 = v23 == 1) : (v25 = 0), v25))
            {
              LOBYTE(v22) = 4;
            }
            else
            {
              v27 = v22 == 2 && v23 == 0;
              v28 = v23 == 2 && v22 == 0;
              LOBYTE(v22) = 3;
              if (!v28 && !v27)
              {
                *v3 = 0;
                v29 = 2;
LABEL_72:
                v40 = 8 * v29;
                do
                {
                  result = *(uint64_t **)v21;
                  *(_QWORD *)v21 = 0;
                  if (result)
                  {
                    if (*((_DWORD *)result + 2) == 1)
                      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
                    else
                      --*((_DWORD *)result + 2);
                  }
                  v21 = (WTF *)((char *)v21 + 8);
                  v40 -= 8;
                }
                while (v40);
                goto LABEL_322;
              }
            }
          }
          result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
          *((_DWORD *)result + 2) = 1;
          *((_BYTE *)result + 12) = v22;
LABEL_222:
          *result = (uint64_t)off_1E339A040;
          *((_BYTE *)result + 13) = v18;
LABEL_223:
          result[2] = (uint64_t)v156;
          result[3] = v157;
          *((_WORD *)result + 16) = 256;
LABEL_49:
          *v3 = result;
          return result;
        case 0x2A:
          v152 = a3;
          WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v156, a2 + 16, &v152);
          if (!HIDWORD(v157))
            goto LABEL_279;
          v58 = 42;
          v59 = WebCore::determineCategory(&v156, 42);
          if (v59 != 9)
            goto LABEL_293;
          v60 = HIDWORD(v157);
          *v3 = 0;
          if ((_DWORD)v60)
          {
            v61 = v156;
            v62 = 8 * v60;
            do
            {
              v63 = *(_DWORD **)v61;
              *(_QWORD *)v61 = 0;
              if (v63)
              {
                if (v63[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
                else
                  --v63[2];
              }
              v61 = (WTF *)((char *)v61 + 8);
              v62 -= 8;
            }
            while (v62);
          }
          goto LABEL_296;
        case 0x2B:
          v156 = 0;
          v157 = 0;
          v94 = *(unsigned int *)(a2 + 28);
          if ((_DWORD)v94)
          {
            if (v94 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195832120);
            }
            LODWORD(v157) = *(_DWORD *)(a2 + 28);
            v156 = (WTF *)WTF::fastMalloc((WTF *)(8 * v94));
            v95 = *(unsigned int *)(a2 + 28);
            if ((_DWORD)v95)
            {
              v96 = *(uint64_t **)(a2 + 16);
              v97 = 8 * v95;
              while (1)
              {
                v98 = *v96;
                if (!*v96 || *(_BYTE *)(*v96 + 8) != 2)
                  break;
                v100 = *(unsigned __int8 *)(v98 + 16);
                v70 = v100 > 0xB;
                v101 = (1 << v100) & 0x809;
                if (!v70 && v101 != 0)
                  break;
                if (*(_BYTE *)(v98 + 18))
                {
                  if (*(float *)(v98 + 12) != 0.0)
                    break;
                }
                else if (*(_DWORD *)(v98 + 12))
                {
                  break;
                }
LABEL_215:
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v110 = HIDWORD(v157);
                  goto LABEL_269;
                }
              }
              WebCore::createCSS(&v152, v98, a3);
              v103 = v152;
              if (v152)
              {
                v158 = v152;
                v152 = 0;
                LODWORD(v104) = HIDWORD(v157);
                if (HIDWORD(v157) == (_DWORD)v157)
                {
                  v105 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, HIDWORD(v157) + 1, (unint64_t)&v158);
                  v104 = HIDWORD(v157);
                  v106 = v156;
                  v107 = *v105;
                  *v105 = 0;
                  *((_QWORD *)v106 + v104) = v107;
                }
                else
                {
                  v158 = 0;
                  *((_QWORD *)v156 + HIDWORD(v157)) = v103;
                }
                HIDWORD(v157) = v104 + 1;
                v108 = v158;
                v158 = 0;
                if (v108)
                {
                  if (*((_DWORD *)v108 + 2) == 1)
                    (*(void (**)(WTF *))(*(_QWORD *)v108 + 8))(v108);
                  else
                    --*((_DWORD *)v108 + 2);
                }
              }
              goto LABEL_215;
            }
          }
          v110 = 0;
LABEL_269:
          WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&v156, v110);
          if (HIDWORD(v157))
          {
            if (HIDWORD(v157) == 1)
            {
              v117 = *(_QWORD *)v156;
              *(_QWORD *)v156 = 0;
              *v3 = v117;
              v118 = 1;
LABEL_272:
              v119 = v156;
              v120 = 8 * v118;
              do
              {
                v121 = *(_DWORD **)v119;
                *(_QWORD *)v119 = 0;
                if (v121)
                {
                  if (v121[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v121 + 8))(v121);
                  else
                    --v121[2];
                }
                v119 = (WTF *)((char *)v119 + 8);
                v120 -= 8;
              }
              while (v120);
LABEL_296:
              result = (uint64_t *)v156;
              if (v156)
              {
                v156 = 0;
                LODWORD(v157) = 0;
                return (uint64_t *)WTF::fastFree((WTF *)result, (void *)v20);
              }
              return result;
            }
            v58 = 43;
            v59 = WebCore::determineCategory(&v156, 43);
            if (v59 == 9)
            {
              v118 = HIDWORD(v157);
              *v3 = 0;
              if (!v118)
                goto LABEL_296;
              goto LABEL_272;
            }
LABEL_293:
            v125 = v59;
            v122 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)(v122 + 8) = 1;
            *(_BYTE *)(v122 + 12) = v125;
            *(_QWORD *)v122 = off_1E339A040;
            *(_BYTE *)(v122 + 13) = v58;
LABEL_294:
            v126 = v156;
            v156 = 0;
            *(_QWORD *)(v122 + 16) = v126;
            v127 = v157;
            HIDWORD(v157) = 0;
            *(_QWORD *)(v122 + 24) = v127;
            *(_WORD *)(v122 + 32) = 256;
          }
          else
          {
LABEL_279:
            v122 = 0;
          }
          *v3 = v122;
          goto LABEL_296;
        case 0x2D:
          v157 = 0;
          v65 = *(unsigned int *)(a2 + 28);
          if (!(_DWORD)v65)
            goto LABEL_388;
          if (v65 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195832108);
          }
          v66 = (WTF *)WTF::fastMalloc((WTF *)(8 * v65));
          LODWORD(v157) = v65;
          v156 = v66;
          if (!*(_DWORD *)(a2 + 28))
          {
LABEL_388:
            __break(0xC471u);
            JUMPOUT(0x1958320F8);
          }
          v67 = v66;
          result = (uint64_t *)WebCore::createCSS(&v152, **(_QWORD **)(a2 + 16), a3);
          if (*(_DWORD *)(a2 + 28) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x195832110);
          }
          v20 = (*v19)[1];
          if (v20)
            v68 = *(_BYTE *)(v20 + 8) == 2;
          else
            v68 = 0;
          if (!v68)
            goto LABEL_157;
          v69 = *(unsigned __int8 *)(v20 + 16);
          v70 = v69 > 0xB;
          v71 = (1 << v69) & 0x809;
          if (!v70 && v71 != 0)
            goto LABEL_157;
          if (*(_BYTE *)(v20 + 18))
          {
            if (*(float *)(v20 + 12) == 0.0)
              goto LABEL_357;
          }
          else if (!*(_DWORD *)(v20 + 12))
          {
            goto LABEL_357;
          }
LABEL_157:
          result = (uint64_t *)WebCore::createCSS(&v158, v20, a3);
          v73 = v158;
          if (v158)
          {
            result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
            v74 = (WTF *)result;
            v75 = *((_BYTE *)v73 + 12);
            *((_DWORD *)result + 2) = 1;
            *((_BYTE *)result + 12) = v75;
            *result = (uint64_t)off_1E339A120;
            result[2] = (uint64_t)v73;
            if (v152)
            {
              *(_QWORD *)v67 = v152;
              HIDWORD(v157) = 1;
              if ((_DWORD)v65 == 1)
              {
                result = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, 2uLL);
                v76 = HIDWORD(v157);
                v67 = v156;
                *((_QWORD *)v156 + HIDWORD(v157)) = v74;
                HIDWORD(v157) = v76 + 1;
                if (v76 == -1)
                {
                  v74 = 0;
                  goto LABEL_358;
                }
              }
              else
              {
                *((_QWORD *)v67 + 1) = result;
                HIDWORD(v157) = 2;
              }
              result = (uint64_t *)WebCore::determineCategory(&v156, 43);
              if ((_DWORD)result == 9)
              {
                v150 = HIDWORD(v157);
                v67 = v156;
                *v3 = 0;
                if ((_DWORD)v150)
                {
                  v151 = 8 * v150;
                  do
                  {
                    result = *(uint64_t **)v67;
                    *(_QWORD *)v67 = 0;
                    if (result)
                    {
                      if (*((_DWORD *)result + 2) == 1)
                        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
                      else
                        --*((_DWORD *)result + 2);
                    }
                    v67 = (WTF *)((char *)v67 + 8);
                    v151 -= 8;
                  }
                  while (v151);
                  v67 = v156;
                }
LABEL_359:
                if (v67)
                {
                  v156 = 0;
                  LODWORD(v157) = 0;
                  result = (uint64_t *)v67;
                  return (uint64_t *)WTF::fastFree((WTF *)result, (void *)v20);
                }
                return result;
              }
              v131 = (char)result;
              result = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
              v74 = (WTF *)result;
              v67 = 0;
              *((_DWORD *)result + 2) = 1;
              *((_BYTE *)result + 12) = v131;
              *result = (uint64_t)off_1E339A040;
              *((_BYTE *)result + 13) = 43;
              result[2] = (uint64_t)v156;
              v132 = v157;
              v156 = 0;
              v157 = 0;
              result[3] = v132;
              *((_WORD *)result + 16) = 256;
            }
LABEL_358:
            *v3 = v74;
            goto LABEL_359;
          }
LABEL_357:
          v74 = v152;
          goto LABEL_358;
        case 0x2F:
          v157 = 0;
          v77 = *(unsigned int *)(a2 + 28);
          if (!(_DWORD)v77)
            goto LABEL_389;
          if (v77 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195832118);
          }
          LODWORD(v157) = *(_DWORD *)(a2 + 28);
          v156 = (WTF *)WTF::fastMalloc((WTF *)(8 * v77));
          if (!*(_DWORD *)(a2 + 28))
          {
LABEL_389:
            __break(0xC471u);
            JUMPOUT(0x195832100);
          }
          result = (uint64_t *)WebCore::createCSS(&v155, **v19, a3);
          v78 = v155;
          if (!v155)
          {
            *v3 = 0;
            goto LABEL_342;
          }
          if (*(_DWORD *)(a2 + 28) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x195832128);
          }
          result = (uint64_t *)WebCore::createCSS(&v154, (*v19)[1], a3);
          v79 = v154;
          if (!v154)
          {
            *v3 = 0;
            if (*((_DWORD *)v78 + 2) == 1)
              result = (uint64_t *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v78 + 8))(v78);
            else
              --*((_DWORD *)v78 + 2);
            goto LABEL_342;
          }
          v80 = WTF::fastMalloc((WTF *)0x18);
          LOBYTE(v81) = *(_BYTE *)(v79 + 12);
          *(_DWORD *)(v80 + 8) = 1;
          *(_BYTE *)(v80 + 12) = v81;
          *(_QWORD *)v80 = off_1E3399EF0;
          *(_QWORD *)(v80 + 16) = v79;
          v152 = v78;
          LODWORD(v81) = HIDWORD(v157);
          if (HIDWORD(v157) == (_DWORD)v157)
          {
            v133 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, HIDWORD(v157) + 1, (unint64_t)&v152);
            v81 = HIDWORD(v157);
            v134 = v156;
            v135 = *v133;
            *v133 = 0;
            *((_QWORD *)v134 + v81) = v135;
          }
          else
          {
            v152 = 0;
            *((_QWORD *)v156 + HIDWORD(v157)) = v78;
          }
          v136 = v81 + 1;
          HIDWORD(v157) = v136;
          v137 = v152;
          v152 = 0;
          if (v137)
          {
            if (*((_DWORD *)v137 + 2) == 1)
            {
              (*(void (**)(WTF *))(*(_QWORD *)v137 + 8))(v137);
              v136 = HIDWORD(v157);
            }
            else
            {
              --*((_DWORD *)v137 + 2);
            }
          }
          if (v136 == (_DWORD)v157)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v156, v136 + 1);
            v136 = HIDWORD(v157);
            v138 = (char *)v156 + 8 * HIDWORD(v157);
          }
          else
          {
            v138 = (char *)v156 + 8 * v136;
          }
          *(_QWORD *)v138 = v80;
          HIDWORD(v157) = v136 + 1;
          v158 = a3;
          WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF *)&v152, (uint64_t)v19, &v158);
          if (!HIDWORD(v153))
          {
            v141 = 0;
            goto LABEL_339;
          }
          v139 = WebCore::determineCategory(&v152, 42);
          if (v139 != 9)
          {
            v140 = v139;
            v141 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)(v141 + 8) = 1;
            *(_BYTE *)(v141 + 12) = v140;
            *(_QWORD *)v141 = off_1E339A040;
            *(_BYTE *)(v141 + 13) = 42;
            v142 = v152;
            v152 = 0;
            *(_QWORD *)(v141 + 16) = v142;
            v143 = v153;
            HIDWORD(v153) = 0;
            *(_QWORD *)(v141 + 24) = v143;
            *(_WORD *)(v141 + 32) = 256;
LABEL_339:
            *v3 = v141;
            goto LABEL_340;
          }
          v146 = HIDWORD(v153);
          *v3 = 0;
          if ((_DWORD)v146)
          {
            v147 = v152;
            v148 = 8 * v146;
            do
            {
              v149 = *(_DWORD **)v147;
              *(_QWORD *)v147 = 0;
              if (v149)
              {
                if (v149[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v149 + 8))(v149);
                else
                  --v149[2];
              }
              v147 = (WTF *)((char *)v147 + 8);
              v148 -= 8;
            }
            while (v148);
          }
LABEL_340:
          result = (uint64_t *)v152;
          if (v152)
          {
            v152 = 0;
            LODWORD(v153) = 0;
            result = (uint64_t *)WTF::fastFree((WTF *)result, (void *)v20);
          }
LABEL_342:
          v43 = v156;
          if (HIDWORD(v157))
          {
            v144 = 8 * HIDWORD(v157);
            do
            {
              result = *(uint64_t **)v43;
              *(_QWORD *)v43 = 0;
              if (result)
              {
                if (*((_DWORD *)result + 2) == 1)
                  result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
                else
                  --*((_DWORD *)result + 2);
              }
              v43 = (WTF *)((char *)v43 + 8);
              v144 -= 8;
            }
            while (v144);
LABEL_350:
            v43 = v156;
          }
LABEL_351:
          if (v43)
          {
            v156 = 0;
            LODWORD(v157) = 0;
            result = (uint64_t *)v43;
            return (uint64_t *)WTF::fastFree((WTF *)result, (void *)v20);
          }
          return result;
        default:
          goto LABEL_37;
      }
    case 4:
      WebCore::createCSS(&v156, *(_QWORD *)(a2 + 16), a3);
      v15 = v156;
      if (!v156)
        goto LABEL_48;
      result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      v30 = *((_BYTE *)v15 + 12);
      *((_DWORD *)result + 2) = 1;
      *((_BYTE *)result + 12) = v30;
      v17 = off_1E339A120;
      goto LABEL_40;
    case 5:
      WebCore::createCSS(&v156, *(_QWORD *)(a2 + 16), a3);
      v15 = v156;
      if (v156)
      {
        result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        v16 = *((_BYTE *)v15 + 12);
        *((_DWORD *)result + 2) = 1;
        *((_BYTE *)result + 12) = v16;
        v17 = off_1E3399EF0;
LABEL_40:
        *result = (uint64_t)v17;
        result[2] = (uint64_t)v15;
      }
      else
      {
LABEL_48:
        result = 0;
      }
      goto LABEL_49;
    case 6:
      v31 = *(double *)(a2 + 32);
      WebCore::createBlendHalf((WebCore *)&v152, (const WebCore::Length *)(a2 + 12), a3, 1.0 - v31);
      WebCore::createBlendHalf((WebCore *)&v158, (const WebCore::Length *)(a2 + 20), a3, v31);
      WebCore::CSSCalcOperationNode::create((uint64_t)&v156, 43, (uint64_t)&v152, (uint64_t)&v158);
      *v3 = v156;
      if (v158)
      {
        if (*((_DWORD *)v158 + 2) == 1)
          (*(void (**)(void))(*(_QWORD *)v158 + 8))();
        else
          --*((_DWORD *)v158 + 2);
      }
      result = (uint64_t *)v152;
      if (v152)
      {
        if (*((_DWORD *)v152 + 2) == 1)
          return (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v152 + 8))();
        else
          --*((_DWORD *)v152 + 2);
      }
      return result;
    default:
LABEL_37:
      *result = 0;
      return result;
  }
}

void WebCore::mix(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  char v5;
  double v6;
  uint64_t v7;
  WebCore::CSSCalcNegateNode *v8;
  int64x2_t v9;
  double v10;
  char v11;
  _BYTE v12[7];
  char v13;
  _QWORD v14[2];
  _QWORD *v15;

  v2 = *(double *)(a1 + 48);
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(double *)(a1 + 24);
    if (!*(_BYTE *)(a1 + 56))
      v2 = 100.0 - v3;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      v9 = vdupq_n_s64(0x4049000000000000uLL);
      LOBYTE(v10) = 0;
      v11 = 0;
      goto LABEL_17;
    }
    v3 = 100.0 - v2;
  }
  v4 = v3 + v2;
  if (v3 + v2 == 0.0)
  {
    *a2 = 0;
    return;
  }
  if (v4 > 100.0)
  {
    v5 = 0;
    v6 = 100.0 / v4;
    v3 = v3 * v6;
    v2 = v2 * v6;
LABEL_15:
    v4 = 0.0;
    goto LABEL_16;
  }
  if (v4 >= 100.0)
  {
    v5 = 0;
    goto LABEL_15;
  }
  v3 = v3 * (100.0 / v4);
  v2 = v2 * (100.0 / v4);
  v5 = 1;
LABEL_16:
  *(double *)v9.i64 = v3;
  *(double *)&v9.i64[1] = v2;
  v10 = v4;
  v11 = v5;
  *(_DWORD *)v12 = v14[0];
  *(_DWORD *)&v12[3] = *(_DWORD *)((char *)v14 + 3);
LABEL_17:
  v13 = 1;
  v14[0] = &v9;
  v14[1] = a1;
  v7 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v7 == -1)
  {
    v8 = (WebCore::CSSCalcNegateNode *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::CSSCalcNegateNode::~CSSCalcNegateNode(v8);
  }
  else
  {
    v15 = v14;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore3mixERKNS8_19CSSColorMixResolverEE3__0JEEEEEJRKNS0_6__implIJNS8_24ColorInterpolationMethod3HSLENSG_3HWBENSG_3LCHENSG_3LabENSG_5OKLCHENSG_5OKLabENSG_4SRGBENSG_10SRGBLinearENSG_9DisplayP3ENSG_6A98RGBENSG_11ProPhotoRGBENSG_7Rec2020ENSG_6XYZD50ENSG_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, a1);
  }
}

void WebCore::CSSCalcNegateNode::~CSSCalcNegateNode(WebCore::CSSCalcNegateNode *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

uint64_t WebCore::CSSCalcNegateNode::isZero(WebCore::CSSCalcNegateNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

double WebCore::CSSCalcNegateNode::computeLengthPx(WebCore::CSSCalcNegateNode *this, const WebCore::CSSToLengthConversionData *a2)
{
  return -(*(double (**)(_QWORD, const WebCore::CSSToLengthConversionData *))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::CSSCalcNegateNode::primitiveType(WebCore::CSSCalcNegateNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
}

uint64_t WebCore::CSSCalcNegateNode::collectComputedStyleDependencies(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

void WebCore::CSSCalcPrimitiveValueNode::~CSSCalcPrimitiveValueNode(WebCore::CSSCalcPrimitiveValueNode *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t i;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if (a3 < 2)
    return result;
  v6 = (uint64_t *)result;
  if (a3 == 2)
  {
    v7 = a2 - 1;
    result = WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(a2 - 1, (_QWORD *)result);
    if ((_DWORD)result)
    {
      v8 = (_DWORD *)*v6;
      *v6 = 0;
      v9 = *v7;
      *v7 = 0;
      v10 = (_DWORD *)*v6;
      *v6 = v9;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      result = *v7;
      *v7 = (uint64_t)v8;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
    }
    return result;
  }
  if ((uint64_t)a3 > 0)
  {
    v13 = a4;
    v14 = a3 >> 1;
    v15 = (uint64_t *)(result + 8 * (a3 >> 1));
    v16 = a3 >> 1;
    if ((uint64_t)a3 <= a5)
    {
      std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(result, v15, v16, a4);
      v28 = &v13[v14];
      result = std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v28);
      v29 = &v13[a3];
      v30 = v28;
      v31 = v13;
      while (v30 != v29)
      {
        if (WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(v30, v31))
        {
          v32 = *v30;
          *v30 = 0;
          result = *v6;
          *v6 = v32;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 8);
          }
          ++v30;
        }
        else
        {
          v33 = *v31;
          *v31 = 0;
          result = *v6;
          *v6 = v33;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 8);
          }
          ++v31;
        }
        ++v6;
        if (v31 == v28)
        {
          if (v30 != v29)
          {
            v36 = 0;
            do
            {
              v37 = v30[v36];
              v30[v36] = 0;
              result = v6[v36];
              v6[v36] = v37;
              if (result)
              {
                if (*(_DWORD *)(result + 8) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                else
                  --*(_DWORD *)(result + 8);
              }
              ++v36;
            }
            while (&v30[v36] != v29);
          }
          goto LABEL_63;
        }
      }
      if (v31 != v28)
      {
        v34 = 0;
        do
        {
          v35 = v31[v34];
          v31[v34] = 0;
          result = v6[v34];
          v6[v34] = v35;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 8);
          }
          ++v34;
        }
        while (&v31[v34] != v28);
      }
LABEL_63:
      if (v13)
      {
        v38 = a3;
        do
        {
          result = *v13;
          *v13 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 8);
          }
          ++v13;
          --v38;
        }
        while (v38);
      }
    }
    else
    {
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(result, v15, v16, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v13, a5);
      return std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v13, a5);
    }
    return result;
  }
  if ((uint64_t *)result == a2)
    return result;
  v17 = (_QWORD *)(result + 8);
  if ((uint64_t *)(result + 8) == a2)
    return result;
  v18 = 0;
  v19 = (_QWORD *)result;
  do
  {
    v20 = v19;
    v19 = v17;
    result = WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(v17, v20);
    if (!(_DWORD)result)
      goto LABEL_29;
    v21 = 0;
    v22 = *v19;
    *v19 = 0;
    v39 = v22;
    for (i = v18; ; i -= 8)
    {
      v24 = (uint64_t *)((char *)v6 + i);
      v25 = *(uint64_t *)((char *)v6 + i);
      *v24 = 0;
      v24[1] = v25;
      if (!v21)
        goto LABEL_21;
      if (v21[2] == 1)
        break;
      --v21[2];
LABEL_21:
      if (!i)
        goto LABEL_25;
LABEL_22:
      v26 = (uint64_t *)((char *)v6 + i);
      if (!WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(&v39, (uint64_t *)((char *)v6 + i - 8)))goto LABEL_26;
      v21 = (_DWORD *)*v24;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    if (i)
      goto LABEL_22;
LABEL_25:
    v26 = v6;
LABEL_26:
    v27 = v39;
    v39 = 0;
    result = *v26;
    *v26 = v27;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
LABEL_29:
    v17 = v19 + 1;
    v18 += 8;
  }
  while (v19 + 1 != a2);
  return result;
}

BOOL WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;
  const WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v24;

  v4 = *a1;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1) == 1)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    v6 = WebCore::sortingCategoryForType(WebCore::CSSUnitType)::sortOrder[WebCore::calcUnitCategory(v5)];
  }
  else
  {
    v6 = 3;
  }
  v7 = *a2;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2) != 1)
  {
    v10 = 3;
    return v6 < v10;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  v9 = WebCore::calcUnitCategory(v8);
  v10 = WebCore::sortingCategoryForType(WebCore::CSSUnitType)::sortOrder[v9];
  if (v6 != 2 || ((0x1F2uLL >> v9) & 1) == 0)
    return v6 < v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
  WebCore::CSSPrimitiveValue::unitTypeString(v11);
  v13 = v12;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
  WebCore::CSSPrimitiveValue::unitTypeString(v14);
  v17 = v15;
  if (!v13)
  {
    if (!v15)
      return 0;
    v19 = 0;
    goto LABEL_10;
  }
  v18 = (WTF::StringImpl *)(v13 - 1);
  if (v13 != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v24;
    if (!v17)
    {
      v22 = 0;
      goto LABEL_14;
    }
LABEL_10:
    if (v17 == 1)
    {
      v20 = (const WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v22 = WTF::codePointCompare(v19, v20, v16) >> 31;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v20 = v24;
      v22 = WTF::codePointCompare(v19, v24, v21) >> 31;
      if (!v24)
        goto LABEL_14;
    }
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
LABEL_14:
    if (!v19)
      return v22;
    goto LABEL_15;
  }
  v19 = (WTF *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  if (v17)
    goto LABEL_10;
  v22 = 0;
LABEL_15:
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy(v19, v18);
  else
    *(_DWORD *)v19 -= 2;
  return v22;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a3)
  {
    v4 = a4;
    v6 = (uint64_t *)result;
    if (a3 == 1)
    {
LABEL_9:
      v11 = *v6;
      *v6 = 0;
      *v4 = v11;
      return result;
    }
    if (a3 == 2)
    {
      v8 = a2 - 1;
      result = WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(a2 - 1, (_QWORD *)result);
      if ((_DWORD)result)
        v9 = v8;
      else
        v9 = v6;
      v10 = *v9;
      *v9 = 0;
      *v4++ = v10;
      if (!(_DWORD)result)
        v6 = v8;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v25 = (uint64_t *)(result + 8 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(result, v25, a3 >> 1, a4, a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v26 = &v6[a3 >> 1];
      while (v26 != a2)
      {
        result = WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(v26, v6);
        if ((_DWORD)result)
        {
          v27 = *v26;
          *v26++ = 0;
        }
        else
        {
          v27 = *v6;
          *v6++ = 0;
        }
        *v4++ = v27;
        if (v6 == v25)
        {
          if (v26 != a2)
          {
            v28 = 0;
            do
            {
              v29 = v26[v28];
              v26[v28] = 0;
              v4[v28++] = v29;
            }
            while (&v26[v28] != a2);
          }
          return result;
        }
      }
      if (v6 != v25)
      {
        v30 = 0;
        do
        {
          v31 = v6[v30];
          v6[v30] = 0;
          v4[v30++] = v31;
        }
        while (&v6[v30] != v25);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v12 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      v13 = (uint64_t *)(result + 8);
      *a4 = v12;
      if ((uint64_t *)(result + 8) != a2)
      {
        v14 = 0;
        v15 = a4;
        do
        {
          v16 = v15++;
          result = WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(v13, v16);
          if ((_DWORD)result)
          {
            v17 = *v16;
            *v16 = 0;
            v16[1] = v17;
            v18 = v4;
            if (v16 != v4)
            {
              v19 = v14;
              while (1)
              {
                v18 = (uint64_t *)((char *)v4 + v19);
                v20 = (uint64_t *)((char *)v4 + v19 - 8);
                if (!WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(v13, v20))break;
                v21 = *v20;
                *v20 = 0;
                v22 = *(_DWORD **)((char *)v4 + v19);
                *(uint64_t *)((char *)v4 + v19) = v21;
                if (v22)
                {
                  if (v22[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
                  else
                    --v22[2];
                }
                v19 -= 8;
                if (!v19)
                {
                  v18 = v4;
                  break;
                }
              }
            }
            v24 = *v13;
            *v13 = 0;
            result = *v18;
            *v18 = v24;
            if (result)
            {
              if (*(_DWORD *)(result + 8) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              else
                --*(_DWORD *)(result + 8);
            }
          }
          else
          {
            v23 = *v13;
            *v13 = 0;
            *v15 = v23;
          }
          ++v13;
          v14 += 8;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  WTF *v38;
  const WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  const WTF::StringImpl *v60;
  const WTF::StringImpl *v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  _DWORD *v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  const WTF::StringImpl *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  const WTF::StringImpl *v108;
  const WTF::StringImpl *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;

  v142 = a5;
  if (!a5)
    return result;
  v12 = (uint64_t *)result;
  while (1)
  {
    if (a4 <= a7 || v142 <= a7)
    {
      if (a4 <= v142)
      {
        if (v12 != a2)
        {
          v113 = 0;
          v86 = 0;
          do
          {
            v114 = v12[v113];
            v12[v113] = 0;
            a6[v113] = v114;
            ++v86;
            ++v113;
          }
          while (&v12[v113] != a2);
          if (!(v113 * 8))
            goto LABEL_221;
          v115 = a3;
          v116 = a6;
          v117 = &a6[v113];
          v118 = v117 - 1;
          v119 = v116;
          while (a2 != v115)
          {
            if (WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(a2, v116))
            {
              v120 = *a2;
              *a2 = 0;
              result = *v12;
              *v12 = v120;
              if (result)
              {
                if (*(_DWORD *)(result + 8) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                else
                  --*(_DWORD *)(result + 8);
              }
              ++a2;
            }
            else
            {
              v121 = *v116;
              *v116 = 0;
              result = *v12;
              *v12 = v121;
              if (result)
              {
                if (*(_DWORD *)(result + 8) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                else
                  --*(_DWORD *)(result + 8);
              }
              ++v116;
            }
            ++v12;
            if (v117 == v116)
            {
              a6 = v119;
              goto LABEL_221;
            }
          }
          v127 = 0;
          a6 = v119;
          do
          {
            v128 = v116[v127];
            v116[v127] = 0;
            result = v12[v127];
            v12[v127] = v128;
            if (result)
            {
              if (*(_DWORD *)(result + 8) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              else
                --*(_DWORD *)(result + 8);
            }
            ++v127;
          }
          while (v118 != &v116[v127 - 1]);
LABEL_221:
          if (a6)
          {
            v129 = 0;
            do
            {
              result = a6[v129];
              a6[v129] = 0;
              if (result)
              {
                if (*(_DWORD *)(result + 8) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                else
                  --*(_DWORD *)(result + 8);
              }
              ++v129;
            }
            while (v129 < v86);
          }
        }
        return result;
      }
      if (a2 == a3)
        return result;
      v85 = 0;
      v86 = 0;
      do
      {
        v87 = a2[v85];
        a2[v85] = 0;
        a6[v85] = v87;
        ++v86;
        ++v85;
      }
      while (&a2[v85] != a3);
      if (!(v85 * 8))
        goto LABEL_221;
      v88 = &a6[v85];
      v89 = a3 - 1;
      v132 = a6;
      while (1)
      {
        if (a2 == v12)
        {
          v125 = 0;
          do
          {
            v126 = v88[v125 - 1];
            v88[v125 - 1] = 0;
            result = v89[v125];
            v89[v125] = v126;
            if (result)
            {
              if (*(_DWORD *)(result + 8) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              else
                --*(_DWORD *)(result + 8);
            }
            --v125;
          }
          while (&v88[v125] != a6);
          goto LABEL_221;
        }
        v91 = v88 - 1;
        v90 = *(v88 - 1);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v90 + 64))(v90) == 1)
        {
          v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 72))(v90);
          v93 = WebCore::sortingCategoryForType(WebCore::CSSUnitType)::sortOrder[WebCore::calcUnitCategory(v92)];
        }
        else
        {
          v93 = 3;
        }
        v94 = a2 - 1;
        v95 = *(a2 - 1);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v95 + 64))(v95) != 1)
        {
          v98 = 3;
LABEL_158:
          if (v93 < v98)
            goto LABEL_159;
          goto LABEL_164;
        }
        v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 72))(v95);
        v97 = WebCore::calcUnitCategory(v96);
        v98 = WebCore::sortingCategoryForType(WebCore::CSSUnitType)::sortOrder[v97];
        if (v93 != 2 || ((0x1F2uLL >> v97) & 1) == 0)
          goto LABEL_158;
        v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v91 + 72))(*v91);
        WebCore::CSSPrimitiveValue::unitTypeString(v99);
        v101 = v100;
        v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v94 + 72))(*v94);
        WebCore::CSSPrimitiveValue::unitTypeString(v102);
        v105 = v103;
        if (v101)
        {
          v106 = (WTF::StringImpl *)(v101 - 1);
          if (v101 == 1)
          {
            *MEMORY[0x1E0CBEF70] += 2;
            if (!v105)
            {
              LOBYTE(v110) = 0;
              v107 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
LABEL_154:
              if (*(_DWORD *)v107 == 2)
              {
                WTF::StringImpl::destroy(v107, v106);
                if ((v110 & 1) != 0)
                  goto LABEL_159;
              }
              else
              {
                *(_DWORD *)v107 -= 2;
                if ((v110 & 1) != 0)
                  goto LABEL_159;
              }
              goto LABEL_164;
            }
            v107 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v107 = v147;
            if (!v105)
            {
              if (!v147)
                goto LABEL_164;
              LOBYTE(v110) = 0;
              goto LABEL_154;
            }
          }
        }
        else
        {
          if (!v103)
            goto LABEL_164;
          v107 = 0;
        }
        if (v105 == 1)
        {
          v108 = (const WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          v110 = WTF::codePointCompare(v107, v108, v104) >> 31;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v108 = v147;
          v110 = WTF::codePointCompare(v107, v147, v109) >> 31;
          if (!v147)
            goto LABEL_153;
        }
        if (*(_DWORD *)v108 != 2)
        {
          *(_DWORD *)v108 -= 2;
LABEL_153:
          if (v107)
            goto LABEL_154;
          goto LABEL_172;
        }
        WTF::StringImpl::destroy(v108, v106);
        if (v107)
          goto LABEL_154;
LABEL_172:
        if (v110)
        {
LABEL_159:
          v111 = *v94;
          *v94 = 0;
          result = *v89;
          *v89 = v111;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            else
              --*(_DWORD *)(result + 8);
          }
          goto LABEL_168;
        }
LABEL_164:
        v112 = *v91;
        *v91 = 0;
        result = *v89;
        *v89 = v112;
        if (result)
        {
          if (*(_DWORD *)(result + 8) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          else
            --*(_DWORD *)(result + 8);
        }
        v94 = a2;
        --v88;
LABEL_168:
        --v89;
        a2 = v94;
        a6 = v132;
        if (v88 == v132)
          goto LABEL_221;
      }
    }
    if (!a4)
      return result;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = &v12[v13];
      result = WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(a2, &v12[v13]);
      if ((result & 1) != 0)
        break;
      ++v14;
      ++v13;
      if (a4 == v14)
        return result;
    }
    v139 = a4;
    v140 = a3;
    if (a4 - v14 >= v142)
      break;
    if (v142 >= 0)
      v16 = v142;
    else
      v16 = v142 + 1;
    v17 = v16 >> 1;
    v18 = (WTF::StringImpl *)&a2[v16 >> 1];
    if (v15 != a2)
    {
      v141 = v16 >> 1;
      v130 = a6;
      v133 = a7;
      v136 = &v12[v13];
      v19 = ((char *)a2 - (char *)v12 - v13 * 8) >> 3;
      v20 = &v12[v13];
      v144 = (WTF::StringImpl *)&a2[v16 >> 1];
      while (1)
      {
        v21 = *(_QWORD *)v18;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v18 + 64))(*(_QWORD *)v18) == 1)
        {
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
          v23 = WebCore::sortingCategoryForType(WebCore::CSSUnitType)::sortOrder[WebCore::calcUnitCategory(v22)];
        }
        else
        {
          v23 = 3;
        }
        v24 = v19 >> 1;
        v25 = &v20[v19 >> 1];
        v26 = *v25;
        v27 = v20;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v25 + 64))(*v25) != 1)
          break;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
        v29 = WebCore::calcUnitCategory(v28);
        v30 = WebCore::sortingCategoryForType(WebCore::CSSUnitType)::sortOrder[v29];
        if (v23 != 2)
          goto LABEL_35;
        v18 = v144;
        if (((0x1F2uLL >> v29) & 1) != 0)
        {
          v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v144 + 72))(*(_QWORD *)v144);
          WebCore::CSSPrimitiveValue::unitTypeString(v31);
          v33 = v32;
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v25 + 72))(*v25);
          WebCore::CSSPrimitiveValue::unitTypeString(v34);
          v37 = v35;
          if (v33)
          {
            if (v33 != 1)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v38 = v147;
              if (v37)
                goto LABEL_25;
              v18 = v144;
              if (v147)
              {
                LOBYTE(v41) = 0;
                goto LABEL_30;
              }
LABEL_37:
              v27 = v25 + 1;
              v24 = v19 + ~v24;
              goto LABEL_38;
            }
            *MEMORY[0x1E0CBEF70] += 2;
            if (!v35)
            {
              LOBYTE(v41) = 0;
              v38 = (WTF *)MEMORY[0x1E0CBEF70];
              v18 = v144;
              goto LABEL_30;
            }
            v38 = (WTF *)MEMORY[0x1E0CBEF70];
          }
          else
          {
            v18 = v144;
            if (!v37)
              goto LABEL_37;
            v38 = 0;
          }
LABEL_25:
          if (v37 == 1)
          {
            v39 = (const WTF::StringImpl *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            v41 = WTF::codePointCompare(v38, v39, v36) >> 31;
            v18 = v144;
LABEL_27:
            if (*(_DWORD *)v39 != 2)
            {
              *(_DWORD *)v39 -= 2;
              goto LABEL_29;
            }
            WTF::StringImpl::destroy(v39, v18);
            v18 = v144;
            if (v38)
            {
LABEL_30:
              if (*(_DWORD *)v38 == 2)
              {
                WTF::StringImpl::destroy(v38, v18);
                v18 = v144;
              }
              else
              {
                *(_DWORD *)v38 -= 2;
              }
            }
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v39 = v147;
            v41 = WTF::codePointCompare(v38, v147, v40) >> 31;
            v18 = v144;
            if (v147)
              goto LABEL_27;
LABEL_29:
            if (v38)
              goto LABEL_30;
          }
          if ((v41 & 1) != 0)
            goto LABEL_38;
          goto LABEL_37;
        }
LABEL_36:
        if (v23 >= v30)
          goto LABEL_37;
LABEL_38:
        v19 = v24;
        v20 = v27;
        if (!v24)
        {
          a6 = v130;
          a7 = v133;
          a3 = v140;
          v17 = v141;
          v63 = v136;
          goto LABEL_92;
        }
      }
      v30 = 3;
LABEL_35:
      v18 = v144;
      goto LABEL_36;
    }
    v20 = a2;
    v63 = a2;
LABEL_92:
    v65 = v20 - v63;
LABEL_95:
    v66 = v18;
    v67 = v18;
    v146 = (WTF::StringImpl *)v20;
    if (v20 != a2)
    {
      v66 = (WTF::StringImpl *)v20;
      if (a2 != (uint64_t *)v18)
      {
        v138 = v65;
        v66 = (WTF::StringImpl *)(v20 + 1);
        v68 = (WTF::StringImpl *)(a2 + 1);
        v69 = v17;
        while (1)
        {
          v70 = *((_QWORD *)v66 - 1);
          *((_QWORD *)v66 - 1) = 0;
          v71 = *((_QWORD *)v68 - 1);
          *((_QWORD *)v68 - 1) = 0;
          v72 = (_DWORD *)*((_QWORD *)v66 - 1);
          *((_QWORD *)v66 - 1) = v71;
          if (v72)
          {
            if (v72[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 8))(v72);
              v17 = v69;
              v18 = v67;
            }
            else
            {
              --v72[2];
            }
          }
          v73 = (_DWORD *)*((_QWORD *)v68 - 1);
          *((_QWORD *)v68 - 1) = v70;
          if (v73)
          {
            if (v73[2] == 1)
            {
              (*(void (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v73 + 8))(v73, v18);
              v17 = v69;
              v18 = v67;
            }
            else
            {
              --v73[2];
            }
          }
          if (v68 == v18)
            break;
          if (v66 == (WTF::StringImpl *)a2)
            a2 = (uint64_t *)v68;
          v66 = (WTF::StringImpl *)((char *)v66 + 8);
          v68 = (WTF::StringImpl *)((char *)v68 + 8);
        }
        if (v66 == (WTF::StringImpl *)a2)
        {
          v66 = (WTF::StringImpl *)a2;
          a3 = v140;
        }
        else
        {
          v135 = a7;
          v74 = a6;
          v75 = (uint64_t *)v66;
          v76 = a2;
          do
          {
            while (1)
            {
              v77 = (_DWORD *)*v75;
              *v75 = 0;
              v78 = *a2;
              *a2 = 0;
              v79 = (_DWORD *)*v75;
              *v75 = v78;
              if (v79)
              {
                if (v79[2] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
                  v17 = v69;
                  v18 = v67;
                }
                else
                {
                  --v79[2];
                }
              }
              v80 = (_DWORD *)*a2;
              *a2 = (uint64_t)v77;
              if (v80)
              {
                if (v80[2] == 1)
                {
                  (*(void (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v80 + 8))(v80, v18);
                  v17 = v69;
                  v18 = v67;
                }
                else
                {
                  --v80[2];
                }
              }
              ++v75;
              if (++a2 == (uint64_t *)v18)
                break;
              if (v75 == v76)
                v76 = a2;
            }
            a2 = v76;
          }
          while (v75 != v76);
          a6 = v74;
          a3 = v140;
          a7 = v135;
        }
        v65 = v138;
      }
    }
    v81 = v139 - v65 - v14;
    v82 = v142 - v17;
    if (v65 + v17 >= v142 + v139 - (v65 + v17) - v14)
    {
      v84 = v17;
      result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(v66);
      v83 = v146;
      v82 = v84;
      v81 = v65;
      a3 = (uint64_t *)v66;
    }
    else
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::sortChildren(WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>*>(v15);
      v83 = v67;
      v15 = (uint64_t *)v66;
    }
    a4 = v81;
    v142 = v82;
    v12 = v15;
    a2 = (uint64_t *)v83;
    if (!v82)
      return result;
  }
  if (a4 - 1 != v14)
  {
    v137 = (a4 - v14) / 2;
    v143 = &v12[v137];
    if (a3 == a2)
    {
      v18 = (WTF::StringImpl *)a3;
      v64 = a3;
LABEL_94:
      v20 = &v143[v13];
      v17 = (v18 - (WTF::StringImpl *)v64) >> 3;
      v65 = v137;
      goto LABEL_95;
    }
    v131 = a6;
    v134 = a7;
    v42 = a3 - a2;
    v18 = (WTF::StringImpl *)a2;
    while (2)
    {
      v43 = v42 >> 1;
      v145 = v18;
      v44 = (_QWORD *)((char *)v18 + 8 * (v42 >> 1));
      v45 = *v44;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v44 + 64))(*v44) == 1)
      {
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 72))(v45);
        v47 = WebCore::sortingCategoryForType(WebCore::CSSUnitType)::sortOrder[WebCore::calcUnitCategory(v46)];
      }
      else
      {
        v47 = 3;
      }
      v48 = v143[v14];
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 64))(v48) == 1)
      {
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 72))(v48);
        v50 = WebCore::calcUnitCategory(v49);
        v51 = WebCore::sortingCategoryForType(WebCore::CSSUnitType)::sortOrder[v50];
        if (v47 == 2 && ((0x1F2uLL >> v50) & 1) != 0)
        {
          v52 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v44 + 72))(*v44);
          WebCore::CSSPrimitiveValue::unitTypeString(v52);
          v54 = v53;
          v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143[v14] + 72))(v143[v14]);
          WebCore::CSSPrimitiveValue::unitTypeString(v55);
          v58 = v56;
          if (v54)
          {
            if (v54 != 1)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v59 = v147;
              if (v58)
                goto LABEL_63;
              if (v147)
              {
                LOBYTE(v62) = 0;
                goto LABEL_85;
              }
LABEL_89:
              v18 = v145;
LABEL_74:
              v42 = v43;
              if (!v43)
              {
                v64 = a2;
                a6 = v131;
                a7 = v134;
                a3 = v140;
                goto LABEL_94;
              }
              continue;
            }
            *MEMORY[0x1E0CBEF70] += 2;
            if (v56)
            {
              v59 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
              goto LABEL_63;
            }
            LOBYTE(v62) = 0;
            v59 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
LABEL_85:
            v18 = v145;
LABEL_68:
            if (*(_DWORD *)v59 == 2)
            {
              WTF::StringImpl::destroy(v59, v18);
              v18 = v145;
              if ((v62 & 1) == 0)
                goto LABEL_74;
            }
            else
            {
              *(_DWORD *)v59 -= 2;
              if ((v62 & 1) == 0)
                goto LABEL_74;
            }
LABEL_73:
            v18 = (WTF::StringImpl *)(v44 + 1);
            v43 = v42 + ~v43;
            goto LABEL_74;
          }
          if (!v56)
            goto LABEL_89;
          v59 = 0;
LABEL_63:
          if (v58 == 1)
          {
            v60 = (const WTF::StringImpl *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            v62 = WTF::codePointCompare(v59, v60, v57) >> 31;
            v18 = v145;
LABEL_65:
            if (*(_DWORD *)v60 != 2)
            {
              *(_DWORD *)v60 -= 2;
              goto LABEL_67;
            }
            WTF::StringImpl::destroy(v60, v18);
            v18 = v145;
            if (v59)
              goto LABEL_68;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v60 = v147;
            v62 = WTF::codePointCompare(v59, v147, v61) >> 31;
            v18 = v145;
            if (v147)
              goto LABEL_65;
LABEL_67:
            if (v59)
              goto LABEL_68;
          }
          if (!v62)
            goto LABEL_74;
          goto LABEL_73;
        }
      }
      else
      {
        v51 = 3;
      }
      break;
    }
    v18 = v145;
    if (v47 >= v51)
      goto LABEL_74;
    goto LABEL_73;
  }
  v122 = v12[v14];
  v12[v14] = 0;
  v123 = *a2;
  *a2 = 0;
  v124 = (_DWORD *)v12[v14];
  v12[v14] = v123;
  if (v124)
  {
    if (v124[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v124 + 8))(v124);
    else
      --v124[2];
  }
  result = *a2;
  *a2 = v122;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t *WebCore::createCSS(uint64_t *this, const WebCore::Length *a2, const WebCore::RenderStyle *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v4 = this;
  v5 = *((unsigned __int8 *)a2 + 4);
  if ((v5 - 3) >= 2)
  {
    if (v5 == 11)
    {
      v11 = WebCore::Length::calculationValue(a2);
      return (uint64_t *)WebCore::createCSS(v4, *(_QWORD *)(v11 + 8), a3);
    }
    else
    {
      *this = 0;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v13, a2, a3, a3);
    v6 = WTF::fastMalloc((WTF *)0x18);
    v7 = v13;
    v8 = *(_WORD *)(v13 + 4);
    v9 = v8 & 0x7F;
    v10 = 22;
    if ((v9 - 79) >= 2)
    {
      if (v9 == 77)
      {
        v10 = 20;
      }
      else if (v9 != 63)
      {
        v10 = *(_WORD *)(v13 + 4) & 0x7F;
        if ((v8 & 0x7F) == 0x49)
        {
          v12 = *(_BYTE **)(*(_QWORD *)(v13 + 8) + 8);
          if (v12[12] == 1)
          {
LABEL_11:
            v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 72))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
          }
          else
          {
            v10 = 1;
            switch(v12[12])
            {
              case 0:
                break;
              case 2:
                v10 = 3;
                break;
              case 3:
                v10 = 74;
                break;
              case 4:
                v10 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_11;
              default:
                v10 = 0;
                break;
            }
          }
        }
      }
    }
    this = (uint64_t *)WebCore::calcUnitCategory(v10);
    *(_DWORD *)(v6 + 8) = 1;
    *(_BYTE *)(v6 + 12) = (_BYTE)this;
    *(_QWORD *)v6 = off_1E3399F60;
    *(_QWORD *)(v6 + 16) = v7;
    *v4 = v6;
  }
  return this;
}

_DWORD *WebCore::createBlendHalf(WebCore *this, const WebCore::Length *a2, const WebCore::RenderStyle *a3, float a4)
{
  int *v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  int v12;
  char v13;
  _DWORD *result;
  _BYTE *v15;
  _DWORD *v16;
  _DWORD *v17;

  WebCore::createCSS((uint64_t *)&v17, a2, a3);
  if ((int)a4 <= 0xFF && COERCE__INT64(a4) == COERCE__INT64((double)(int)a4))
  {
    v7 = &WebCore::staticCSSValuePool[4 * (int)a4 + 2064];
    *v7 += 2;
  }
  else
  {
    v7 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v7 = 2;
    v8 = *((_BYTE *)v7 + 6);
    *((_WORD *)v7 + 2) = 1;
    *((_BYTE *)v7 + 6) = v8 & 0xFC;
    *((double *)v7 + 1) = a4;
  }
  v9 = WTF::fastMalloc((WTF *)0x18);
  v10 = *((_WORD *)v7 + 2);
  v11 = v10 & 0x7F;
  v12 = 22;
  if ((v11 - 79) >= 2)
  {
    if (v11 == 77)
    {
      v12 = 20;
    }
    else if (v11 != 63)
    {
      v12 = v7[1] & 0x7F;
      if ((v10 & 0x7F) == 0x49)
      {
        v15 = *(_BYTE **)(*((_QWORD *)v7 + 1) + 8);
        if (v15[12] == 1)
        {
LABEL_21:
          v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v15 + 72))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 8));
        }
        else
        {
          v12 = 1;
          switch(v15[12])
          {
            case 0:
              break;
            case 2:
              v12 = 3;
              break;
            case 3:
              v12 = 74;
              break;
            case 4:
              v12 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_21;
            default:
              v12 = 0;
              break;
          }
        }
      }
    }
  }
  v13 = WebCore::calcUnitCategory(v12);
  *(_DWORD *)(v9 + 8) = 1;
  *(_BYTE *)(v9 + 12) = v13;
  *(_QWORD *)v9 = off_1E3399F60;
  *(_QWORD *)(v9 + 16) = v7;
  v16 = (_DWORD *)v9;
  WebCore::CSSCalcOperationNode::create((uint64_t)this, 42, (uint64_t)&v17, (uint64_t)&v16);
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v16 + 8))();
    else
      --v16[2];
  }
  result = v17;
  if (v17)
  {
    if (v17[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v17 + 8))();
    else
      --v17[2];
  }
  return result;
}

WTF *WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::createCSS(WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::$_0,WTF::Vector<std::unique_ptr<WebCore::CalcExpressionNode>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(WTF *result, uint64_t a2, _QWORD *a3)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;

  v3 = result;
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  v4 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v4)
    goto LABEL_15;
  if (!(v4 >> 29))
  {
    v7 = WTF::fastMalloc((WTF *)(8 * v4));
    *((_DWORD *)v3 + 2) = v4;
    *(_QWORD *)v3 = v7;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)a2;
      v10 = 8 * v8;
      do
      {
        WebCore::createCSS(&v20, *v9, *a3);
        v11 = v20;
        if (v20)
        {
          v19 = v20;
          v20 = 0;
          v12 = *((unsigned int *)v3 + 3);
          if ((_DWORD)v12 == *((_DWORD *)v3 + 2))
          {
            v14 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v12 + 1, (unint64_t)&v19);
            v12 = *((unsigned int *)v3 + 3);
            v15 = *(_QWORD *)v3;
            v16 = *v14;
            *v14 = 0;
            *(_QWORD *)(v15 + 8 * v12) = v16;
          }
          else
          {
            v13 = *(_QWORD *)v3;
            v19 = 0;
            *(_QWORD *)(v13 + 8 * v12) = v11;
          }
          *((_DWORD *)v3 + 3) = v12 + 1;
          v17 = v19;
          v19 = 0;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      v18 = *((unsigned int *)v3 + 3);
      return WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, v18);
    }
LABEL_15:
    v18 = 0;
    return WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, v18);
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

WTF *WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, unint64_t a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  if (*((unsigned int *)result + 2) > a2)
  {
    v3 = result;
    if (*((unsigned int *)result + 3) > a2)
      result = (WTF *)WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (*((_DWORD *)v3 + 2))
      {
        *((_DWORD *)v3 + 2) = a2;
        result = (WTF *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = *((unsigned int *)v3 + 3);
      result = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = a2;
      *(_QWORD *)v3 = result;
      if (result != v4)
        result = (WTF *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

_DWORD *WTF::Vector<WTF::Ref<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(_DWORD *result, uint64_t a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if (v4 != a2)
  {
    v5 = (_DWORD **)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *result;
  _QWORD **v12;
  _QWORD *v13;

  v4 = *a1;
  if (!*a1)
  {
    LODWORD(v5) = 0;
    v6 = 0;
    goto LABEL_3;
  }
  LODWORD(v5) = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!(_DWORD)v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = (_DWORD)v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v12 = (_QWORD **)v4;
    do
    {
      v9 = *v12;
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::reinsert(*a1, v9);
        if (v12 == a2)
          v10 = v13;
      }
      ++v12;
      --v5;
    }
    while (v5);
    goto LABEL_16;
  }
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v10;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (_QWORD **)v4;
    do
    {
      v8 = *v10;
      if ((unint64_t)*v10 + 1 >= 2)
        WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::reinsert(*a1, v8);
      ++v10;
      --v9;
    }
    while (v9);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*a2 << 32) + *a2;
  v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 8 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 8 * v8);
  *result = a2;
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2)
{
  uint64_t v3;
  char *result;
  int8x16_t *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int16 v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 || (v3 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v5 = *a2;
      v6 = &result[2 * a2[1]];
      v7 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v7)
      {
        v8 = &result[2 * v7];
        v9 = 0uLL;
        do
        {
          v19.val[0] = *v5;
          v10 = v5[1];
          v20.val[0] = v5[2];
          v11 = v5[3];
          v5 += 4;
          v12 = v11;
          v20.val[1] = 0uLL;
          v21.val[0] = v10;
          v19.val[1] = 0uLL;
          v13 = result;
          vst2q_s8(v13, v19);
          v13 += 32;
          v21.val[1] = 0uLL;
          vst2q_s8(v13, v21);
          v14 = result + 64;
          vst2q_s8(v14, v20);
          v15 = result + 96;
          vst2q_s8(v15, *(int8x16x2_t *)(&v9 - 1));
          result += 128;
        }
        while (result != v8);
        result = v8;
      }
      while (result != v6)
      {
        v16 = v5->u8[0];
        v5 = (int8x16_t *)((char *)v5 + 1);
        *(_WORD *)result = v16;
        result += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v17 = a2[1];
      if ((_DWORD)v17)
      {
        v18 = *a2;
        if ((_DWORD)v17 == 1)
          *result = v18->i8[0];
        else
          return (char *)memcpy(result, v18, a2[1]);
      }
    }
  }
  return result;
}

__int16 *WTF::HashTable<WebCore::CSSValueID,WTF::KeyValuePair<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>>>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueID>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int16 *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  __int16 *v24;
  __int128 v25;
  __int16 *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_OWORD *)(v9 + 24);
    do
    {
      *((_WORD *)v12 - 4) = -1;
      *v12 = xmmword_1969EF400;
      v12 = (_OWORD *)((char *)v12 + 24);
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unsigned __int16 *)(v6 + 24 * v13);
      v16 = *v15;
      if (v16 <= 0xFFFD)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = 0;
        v20 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
        v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
        v22 = v21 ^ HIWORD(v21);
        do
        {
          v23 = v22 & v18;
          v24 = (__int16 *)(v17 + 24 * v23);
          v10 = *v24;
          v22 = ++v19 + v23;
        }
        while ((_DWORD)v10 != -1);
        v25 = *(_OWORD *)v15;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v24 = v25;
        if (v15 == a3)
          v14 = v24;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), (void *)v10);
  return v14;
}

_DWORD *WTF::HashTable<WebCore::CSSValueID,WTF::KeyValuePair<WebCore::CSSValueID,WebCore::CSSUnitType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueID,WebCore::CSSUnitType>>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueID>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(4 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_BYTE *)(v9 + 18);
    do
    {
      *((_WORD *)v12 - 1) = -1;
      *v12 = 0;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_DWORD *)(v6 + 4 * v13);
      v16 = *(unsigned __int16 *)v15;
      if (v16 <= 0xFFFD)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = 0;
        v20 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
        v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
        do
        {
          v22 = v21 & v18;
          v21 = ++v19 + v22;
        }
        while (*(__int16 *)(v17 + 4 * v22) != -1);
        v23 = (_DWORD *)(v17 + 4 * v22);
        *v23 = *v15;
        if (v15 == a3)
          v14 = v23;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  float v36;
  uint64_t v37;
  double v38;
  char v39;
  __int128 v40;
  __int128 v41;

  v4 = **(_QWORD **)result;
  if (*(_BYTE *)(v4 + 32))
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*(_QWORD *)result + 8);
    v7 = *(double *)v4;
    v8 = *(double *)(v4 + 8);
    v9 = *(double *)(v4 + 16);
    v10 = *(unsigned __int8 *)(v4 + 24);
    v11 = *(_QWORD *)(v6 + 16);
    if ((v11 & 0x8000000000000) != 0)
    {
      v40 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v41 = &v39;
      *((_QWORD *)&v41 + 1) = &v40;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v11), (uint64_t)&v41);
    }
    else
    {
      v12 = bswap32(v11);
      *(float *)&v41 = (float)v12 / 255.0;
      *(float32x2_t *)((char *)&v41 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v12), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v41 + 3) = (float)HIBYTE(v12) / 255.0;
      v13 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v41);
    }
    v17 = v13;
    v18 = v14;
    v19 = v15;
    v20 = v16;
    v21 = *(_QWORD *)(v6 + 40);
    if ((v21 & 0x8000000000000) != 0)
    {
      v40 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v41 = &v39;
      *((_QWORD *)&v41 + 1) = &v40;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v21), (uint64_t)&v41);
    }
    else
    {
      v22 = bswap32(v21);
      *(float *)&v41 = (float)v22 / 255.0;
      *(float32x2_t *)((char *)&v41 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v41 + 3) = (float)HIBYTE(v22) / 255.0;
      v23 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v41);
    }
    v38 = COERCE_DOUBLE(__PAIR64__(LODWORD(v26), LODWORD(v25)));
    LODWORD(v24) = v18;
    LODWORD(v25) = v19;
    LODWORD(v26) = v20;
    WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::HSL>(v5, v17, v24, v25, v26, v7 / 100.0, v8 / 100.0, v27, v28, v23, v38, v8 / 100.0);
    v31 = v30;
    v33 = v32;
    v35 = v34;
    v36 = v29;
    if (v10)
      v36 = v9 / 100.0 * v29;
    if ((*(_BYTE *)(v6 + 22) & 1) != 0 || (*(_BYTE *)(v6 + 46) & 1) != 0)
      v37 = 0x80F000000000000;
    else
      v37 = 0x80E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(_DWORD *)(result + 4) = v31;
    *(_DWORD *)(result + 8) = v33;
    *(_DWORD *)(result + 12) = v35;
    *(float *)(result + 16) = v36;
    *a3 = v37 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  float v36;
  uint64_t v37;
  double v38;
  char v39;
  __int128 v40;
  __int128 v41;

  v4 = **(_QWORD **)result;
  if (*(_BYTE *)(v4 + 32))
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*(_QWORD *)result + 8);
    v7 = *(double *)v4;
    v8 = *(double *)(v4 + 8);
    v9 = *(double *)(v4 + 16);
    v10 = *(unsigned __int8 *)(v4 + 24);
    v11 = *(_QWORD *)(v6 + 16);
    if ((v11 & 0x8000000000000) != 0)
    {
      v40 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v41 = &v39;
      *((_QWORD *)&v41 + 1) = &v40;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v11), (uint64_t)&v41);
    }
    else
    {
      v12 = bswap32(v11);
      *(float *)&v41 = (float)v12 / 255.0;
      *(float32x2_t *)((char *)&v41 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v12), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v41 + 3) = (float)HIBYTE(v12) / 255.0;
      v13 = WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v41);
    }
    v17 = v13;
    v18 = v14;
    v19 = v15;
    v20 = v16;
    v21 = *(_QWORD *)(v6 + 40);
    if ((v21 & 0x8000000000000) != 0)
    {
      v40 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v41 = &v39;
      *((_QWORD *)&v41 + 1) = &v40;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v21), (uint64_t)&v41);
    }
    else
    {
      v22 = bswap32(v21);
      *(float *)&v41 = (float)v22 / 255.0;
      *(float32x2_t *)((char *)&v41 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v41 + 3) = (float)HIBYTE(v22) / 255.0;
      v23 = WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v41);
    }
    v38 = COERCE_DOUBLE(__PAIR64__(LODWORD(v26), LODWORD(v25)));
    LODWORD(v24) = v18;
    LODWORD(v25) = v19;
    LODWORD(v26) = v20;
    WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::HWB>(v5, v17, v24, v25, v26, v7 / 100.0, v8 / 100.0, v27, v28, v23, v38, v8 / 100.0);
    v31 = v30;
    v33 = v32;
    v35 = v34;
    v36 = v29;
    if (v10)
      v36 = v9 / 100.0 * v29;
    if ((*(_BYTE *)(v6 + 22) & 1) != 0 || (*(_BYTE *)(v6 + 46) & 1) != 0)
      v37 = 0x90F000000000000;
    else
      v37 = 0x90E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(_DWORD *)(result + 4) = v31;
    *(_DWORD *)(result + 8) = v33;
    *(_DWORD *)(result + 12) = v35;
    *(float *)(result + 16) = v36;
    *a3 = v37 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  float v23;
  float v24;
  float v25;
  double v26;
  double v27;
  float v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float v34;
  uint64_t v35;
  float v36;
  char v37;
  char v38;

  v4 = **(_QWORD **)result;
  if (*(_BYTE *)(v4 + 32))
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*(_QWORD *)result + 8);
    v7 = *(double *)v4;
    v8 = *(double *)(v4 + 8);
    v9 = *(double *)(v4 + 16);
    v10 = *(unsigned __int8 *)(v4 + 24);
    v11 = v6 + 16;
    v12 = v6 + 40;
    WebCore::Color::callOnUnderlyingType<WebCore::LCHA<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::LCHA<float>>(void)::{lambda(WebCore::LCHA<float> const&)#1}>((unint64_t *)(v6 + 16), (unint64_t)&v37);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    WebCore::Color::callOnUnderlyingType<WebCore::LCHA<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::LCHA<float>>(void)::{lambda(WebCore::LCHA<float> const&)#1}>((unint64_t *)v12, (unint64_t)&v38);
    v36 = v21;
    LODWORD(v22) = v16;
    v29 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::LCH>(v5, v14, v22, v18, v20, v7 / 100.0, v8 / 100.0, v26, v27, v23, v36, v24, v25, v8 / 100.0);
    v31 = v30;
    v33 = v32;
    v34 = v28;
    if (v10)
      v34 = v9 / 100.0 * v28;
    if ((*(_BYTE *)(v11 + 6) & 1) != 0 || (*(_BYTE *)(v12 + 6) & 1) != 0)
      v35 = 0xA0F000000000000;
    else
      v35 = 0xA0E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v29;
    *(_DWORD *)(result + 8) = v31;
    *(_DWORD *)(result + 12) = v33;
    *(float *)(result + 16) = v34;
    *a3 = v35 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  unint64_t v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  unint64_t v18;
  float v19;
  double v20;
  double v21;
  float v22;
  double v23;
  double v24;
  float v25;
  float v26;
  int v27;
  int v28;
  int v29;
  int v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  char v35;
  __int128 v36;
  char *v37;
  __int128 *v38;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = *(_QWORD *)(v4 + 16);
    if ((v9 & 0x8000000000000) != 0)
    {
      v36 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      v37 = &v35;
      v38 = &v36;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v9), (uint64_t)&v37);
    }
    else
    {
      LODWORD(v37) = bswap32(v9);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v37);
    }
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v13;
    v18 = *(_QWORD *)(v4 + 40);
    if ((v18 & 0x8000000000000) != 0)
    {
      v36 = *(_OWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 4);
      v37 = &v35;
      v38 = &v36;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v18), (uint64_t)&v37);
    }
    else
    {
      LODWORD(v37) = bswap32(v18);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v37);
    }
    v33 = *(float *)&v20;
    v34 = *(float *)&v21;
    LODWORD(v20) = v15;
    LODWORD(v21) = v16;
    v26 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::Lab>(v14, v20, v21, v17, v5 / 100.0, v6 / 100.0, v23, v24, v19, v33, v34, v22, v6 / 100.0);
    v28 = v27;
    v30 = v29;
    v31 = v25;
    if (v8)
      v31 = v7 / 100.0 * v25;
    if ((*(_BYTE *)(v4 + 22) & 1) != 0 || (*(_BYTE *)(v4 + 46) & 1) != 0)
      v32 = 0xB0F000000000000;
    else
      v32 = 0xB0E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v26;
    *(_DWORD *)(result + 8) = v28;
    *(_DWORD *)(result + 12) = v30;
    *(float *)(result + 16) = v31;
    *a2 = v32 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  float v23;
  float v24;
  float v25;
  double v26;
  double v27;
  float v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float v34;
  uint64_t v35;
  float v36;
  char v37;
  char v38;

  v4 = **(_QWORD **)result;
  if (*(_BYTE *)(v4 + 32))
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*(_QWORD *)result + 8);
    v7 = *(double *)v4;
    v8 = *(double *)(v4 + 8);
    v9 = *(double *)(v4 + 16);
    v10 = *(unsigned __int8 *)(v4 + 24);
    v11 = v6 + 16;
    v12 = v6 + 40;
    WebCore::Color::callOnUnderlyingType<WebCore::OKLCHA<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLCHA<float>>(void)::{lambda(WebCore::OKLCHA<float> const&)#1}>((unint64_t *)(v6 + 16), (unint64_t)&v37);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    WebCore::Color::callOnUnderlyingType<WebCore::OKLCHA<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLCHA<float>>(void)::{lambda(WebCore::OKLCHA<float> const&)#1}>((unint64_t *)v12, (unint64_t)&v38);
    v36 = v21;
    LODWORD(v22) = v16;
    v29 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::OKLCH>(v5, v14, v22, v18, v20, v7 / 100.0, v8 / 100.0, v26, v27, v23, v36, v24, v25, v8 / 100.0);
    v31 = v30;
    v33 = v32;
    v34 = v28;
    if (v10)
      v34 = v9 / 100.0 * v28;
    if ((*(_BYTE *)(v11 + 6) & 1) != 0 || (*(_BYTE *)(v12 + 6) & 1) != 0)
      v35 = 0xD0F000000000000;
    else
      v35 = 0xD0E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v29;
    *(_DWORD *)(result + 8) = v31;
    *(_DWORD *)(result + 12) = v33;
    *(float *)(result + 16) = v34;
    *a3 = v35 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  double v25;
  double v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  char v37;
  char v38;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = v4 + 16;
    v10 = v4 + 40;
    WebCore::Color::callOnUnderlyingType<WebCore::OKLab<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLab<float>>(void)::{lambda(WebCore::OKLab<float> const&)#1}>((unint64_t *)(v4 + 16), (uint64_t)&v37);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    WebCore::Color::callOnUnderlyingType<WebCore::OKLab<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLab<float>>(void)::{lambda(WebCore::OKLab<float> const&)#1}>((unint64_t *)v10, (uint64_t)&v38);
    v36 = v19;
    v35 = v20;
    LODWORD(v21) = v14;
    LODWORD(v22) = v16;
    v28 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::OKLab>(v12, v21, v22, v18, v5 / 100.0, v6 / 100.0, v25, v26, v23, v35, v36, v24, v6 / 100.0);
    v30 = v29;
    v32 = v31;
    v33 = v27;
    if (v8)
      v33 = v7 / 100.0 * v27;
    if ((*(_BYTE *)(v9 + 6) & 1) != 0 || (*(_BYTE *)(v10 + 6) & 1) != 0)
      v34 = 0xE0F000000000000;
    else
      v34 = 0xE0E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v28;
    *(_DWORD *)(result + 8) = v30;
    *(_DWORD *)(result + 12) = v32;
    *(float *)(result + 16) = v33;
    *a2 = v34 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(unint64_t **a1@<X0>, uint64_t *a2@<X8>, double a3@<D1>, double a4@<D2>, double a5@<D5>, double a6@<D6>, double a7@<D7>)
{
  unint64_t v7;
  int v8;
  double v9;
  double v10;
  double v11;
  unint64_t v13;
  unsigned int v14;
  float v15;
  float v16;
  unint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  int v22;
  int v23;
  int v24;
  int v25;
  float v26;
  uint64_t v27;
  uint64_t result;
  float v29;
  int v30;
  float v31;
  int v32;
  int v33;
  float v34;
  char v35;
  __int128 v36;
  char *v37;
  __int128 *v38;

  v13 = **a1;
  if (*(_BYTE *)(v13 + 32))
  {
    v7 = (*a1)[1];
    v9 = *(double *)v13;
    v10 = *(double *)(v13 + 8);
    v11 = *(double *)(v13 + 16);
    v8 = *(unsigned __int8 *)(v13 + 24);
    v13 = *(_QWORD *)(v7 + 16);
    if ((v13 & 0x8000000000000) == 0)
    {
      v14 = bswap32(v13);
      v15 = (float)v14 / 255.0;
      *(float *)&a3 = (float)BYTE1(v14) / 255.0;
      *(float *)&a4 = (float)BYTE2(v14) / 255.0;
      v16 = (float)HIBYTE(v14) / 255.0;
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  v36 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
  v37 = &v35;
  v38 = &v36;
  _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v13), (uint64_t)&v37);
LABEL_4:
  v17 = *(_QWORD *)(v7 + 40);
  if ((v17 & 0x8000000000000) != 0)
  {
    v36 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4);
    v37 = &v35;
    v38 = &v36;
    v29 = v15;
    v30 = LODWORD(a3);
    v33 = LODWORD(a4);
    v34 = v16;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v17), (uint64_t)&v37);
    v19 = v31;
    v15 = v29;
    LODWORD(a5) = LODWORD(a3);
    LODWORD(a3) = v30;
    LODWORD(a6) = LODWORD(a4);
    LODWORD(a7) = v32;
    LODWORD(a4) = v33;
    v16 = v34;
  }
  else
  {
    v18 = bswap32(v17);
    v19 = (float)v18 / 255.0;
    *(float *)&a5 = (float)BYTE1(v18) / 255.0;
    *(float *)&a6 = (float)BYTE2(v18) / 255.0;
    *(float *)&a7 = (float)HIBYTE(v18) / 255.0;
  }
  v21 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v15, a3, a4, v16, v9 / 100.0, a5, a6, a7, v19, *(float *)&a5, *(float *)&a6, *(float *)&a7, v10 / 100.0);
  v23 = v22;
  v25 = v24;
  v26 = v20;
  if (v8)
    v26 = v11 / 100.0 * v20;
  if ((*(_BYTE *)(v7 + 22) & 1) != 0 || (*(_BYTE *)(v7 + 46) & 1) != 0)
    v27 = 0x70F000000000000;
  else
    v27 = 0x70E000000000000;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v21;
  *(_DWORD *)(result + 8) = v23;
  *(_DWORD *)(result + 12) = v25;
  *(float *)(result + 16) = v26;
  *a2 = v27 | result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  double v25;
  double v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  char v37;
  char v38;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = v4 + 16;
    v10 = v4 + 40;
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)(v4 + 16), (uint64_t)&v37);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)v10, (uint64_t)&v38);
    v36 = v19;
    v35 = v20;
    LODWORD(v21) = v14;
    LODWORD(v22) = v16;
    v28 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v12, v21, v22, v18, v5 / 100.0, v6 / 100.0, v25, v26, v23, v35, v36, v24, v6 / 100.0);
    v30 = v29;
    v32 = v31;
    v33 = v27;
    if (v8)
      v33 = v7 / 100.0 * v27;
    if ((*(_BYTE *)(v9 + 6) & 1) != 0 || (*(_BYTE *)(v10 + 6) & 1) != 0)
      v34 = 0x40F000000000000;
    else
      v34 = 0x40E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v28;
    *(_DWORD *)(result + 8) = v30;
    *(_DWORD *)(result + 12) = v32;
    *(float *)(result + 16) = v33;
    *a2 = v34 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  double v25;
  double v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  char v37;
  char v38;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = v4 + 16;
    v10 = v4 + 40;
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>((unint64_t *)(v4 + 16), (uint64_t)&v37);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>((unint64_t *)v10, (uint64_t)&v38);
    v36 = v19;
    v35 = v20;
    LODWORD(v21) = v14;
    LODWORD(v22) = v16;
    v28 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v12, v21, v22, v18, v5 / 100.0, v6 / 100.0, v25, v26, v23, v35, v36, v24, v6 / 100.0);
    v30 = v29;
    v32 = v31;
    v33 = v27;
    if (v8)
      v33 = v7 / 100.0 * v27;
    if ((*(_BYTE *)(v9 + 6) & 1) != 0 || (*(_BYTE *)(v10 + 6) & 1) != 0)
      v34 = 0x30F000000000000;
    else
      v34 = 0x30E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v28;
    *(_DWORD *)(result + 8) = v30;
    *(_DWORD *)(result + 12) = v32;
    *(float *)(result + 16) = v33;
    *a2 = v34 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  double v24;
  double v25;
  float v26;
  float v27;
  int v28;
  int v29;
  int v30;
  int v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  char v36;
  char v37;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = v4 + 16;
    v10 = v4 + 40;
    v11 = WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>((unint64_t *)(v4 + 16), (uint64_t)&v36);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v18 = WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>((unint64_t *)v10, (uint64_t)&v37);
    v35 = v19;
    v34 = v20;
    LODWORD(v21) = v13;
    LODWORD(v22) = v15;
    v27 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v11, v21, v22, v17, v5 / 100.0, v6 / 100.0, v24, v25, v18, v34, v35, v23, v6 / 100.0);
    v29 = v28;
    v31 = v30;
    v32 = v26;
    if (v8)
      v32 = v7 / 100.0 * v26;
    if ((*(_BYTE *)(v9 + 6) & 1) != 0 || (*(_BYTE *)(v10 + 6) & 1) != 0)
      v33 = 0x20F000000000000;
    else
      v33 = 0x20E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v27;
    *(_DWORD *)(result + 8) = v29;
    *(_DWORD *)(result + 12) = v31;
    *(float *)(result + 16) = v32;
    *a2 = v33 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  double v25;
  double v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  char v37;
  char v38;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = v4 + 16;
    v10 = v4 + 40;
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>((unint64_t *)(v4 + 16), (uint64_t)&v37);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>((unint64_t *)v10, (uint64_t)&v38);
    v36 = v19;
    v35 = v20;
    LODWORD(v21) = v14;
    LODWORD(v22) = v16;
    v28 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v12, v21, v22, v18, v5 / 100.0, v6 / 100.0, v25, v26, v23, v35, v36, v24, v6 / 100.0);
    v30 = v29;
    v32 = v31;
    v33 = v27;
    if (v8)
      v33 = v7 / 100.0 * v27;
    if ((*(_BYTE *)(v9 + 6) & 1) != 0 || (*(_BYTE *)(v10 + 6) & 1) != 0)
      v34 = 0x50F000000000000;
    else
      v34 = 0x50E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v28;
    *(_DWORD *)(result + 8) = v30;
    *(_DWORD *)(result + 12) = v32;
    *(float *)(result + 16) = v33;
    *a2 = v34 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  double v25;
  double v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  char v37;
  char v38;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = v4 + 16;
    v10 = v4 + 40;
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>((unint64_t *)(v4 + 16), (uint64_t)&v37);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>((unint64_t *)v10, (uint64_t)&v38);
    v36 = v19;
    v35 = v20;
    LODWORD(v21) = v14;
    LODWORD(v22) = v16;
    v28 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v12, v21, v22, v18, v5 / 100.0, v6 / 100.0, v25, v26, v23, v35, v36, v24, v6 / 100.0);
    v30 = v29;
    v32 = v31;
    v33 = v27;
    if (v8)
      v33 = v7 / 100.0 * v27;
    if ((*(_BYTE *)(v9 + 6) & 1) != 0 || (*(_BYTE *)(v10 + 6) & 1) != 0)
      v34 = 0x60F000000000000;
    else
      v34 = 0x60E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v28;
    *(_DWORD *)(result + 8) = v30;
    *(_DWORD *)(result + 12) = v32;
    *(float *)(result + 16) = v33;
    *a2 = v34 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  float v11;
  int v12;
  int v13;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  unint64_t v19;
  unsigned int v20;
  float v21;
  double v22;
  double v23;
  float v24;
  double v25;
  double v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  char v37;
  __int128 v38;
  __int128 v39;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = *(_QWORD *)(v4 + 16);
    if ((v9 & 0x8000000000000) != 0)
    {
      v38 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v39 = &v37;
      *((_QWORD *)&v39 + 1) = &v38;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v9), (uint64_t)&v39);
    }
    else
    {
      v10 = bswap32(v9);
      *(float *)&v39 = (float)v10 / 255.0;
      *(float32x2_t *)((char *)&v39 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v10), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v39 + 3) = (float)HIBYTE(v10) / 255.0;
      v11 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v39);
    }
    v15 = v11;
    v16 = v12;
    v17 = v13;
    v18 = v14;
    v19 = *(_QWORD *)(v4 + 40);
    if ((v19 & 0x8000000000000) != 0)
    {
      v38 = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
      *(_QWORD *)&v39 = &v37;
      *((_QWORD *)&v39 + 1) = &v38;
      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v19), (uint64_t)&v39);
    }
    else
    {
      v20 = bswap32(v19);
      *(float *)&v39 = (float)v20 / 255.0;
      *(float32x2_t *)((char *)&v39 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v20), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v39 + 3) = (float)HIBYTE(v20) / 255.0;
      v21 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v39);
    }
    v35 = *(float *)&v22;
    v36 = *(float *)&v23;
    LODWORD(v22) = v16;
    LODWORD(v23) = v17;
    v28 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v15, v22, v23, v18, v5 / 100.0, v6 / 100.0, v25, v26, v21, v35, v36, v24, v6 / 100.0);
    v30 = v29;
    v32 = v31;
    v33 = v27;
    if (v8)
      v33 = v7 / 100.0 * v27;
    if ((*(_BYTE *)(v4 + 22) & 1) != 0 || (*(_BYTE *)(v4 + 46) & 1) != 0)
      v34 = 0x120F000000000000;
    else
      v34 = 0x120E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v28;
    *(_DWORD *)(result + 8) = v30;
    *(_DWORD *)(result + 12) = v32;
    *(float *)(result + 16) = v33;
    *a2 = v34 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mix(WebCore::CSSColorMixResolver const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> const&>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  double v25;
  double v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  char v37;
  char v38;

  v3 = **(_QWORD **)result;
  if (*(_BYTE *)(v3 + 32))
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
    v8 = *(unsigned __int8 *)(v3 + 24);
    v9 = v4 + 16;
    v10 = v4 + 40;
    WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>((unint64_t *)(v4 + 16), (uint64_t)&v37);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>((unint64_t *)v10, (uint64_t)&v38);
    v36 = v19;
    v35 = v20;
    LODWORD(v21) = v14;
    LODWORD(v22) = v16;
    v28 = WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(v12, v21, v22, v18, v5 / 100.0, v6 / 100.0, v25, v26, v23, v35, v36, v24, v6 / 100.0);
    v30 = v29;
    v32 = v31;
    v33 = v27;
    if (v8)
      v33 = v7 / 100.0 * v27;
    if ((*(_BYTE *)(v9 + 6) & 1) != 0 || (*(_BYTE *)(v10 + 6) & 1) != 0)
      v34 = 0x130F000000000000;
    else
      v34 = 0x130E000000000000;
    result = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)result = 1;
    *(float *)(result + 4) = v28;
    *(_DWORD *)(result + 8) = v30;
    *(_DWORD *)(result + 12) = v32;
    *(float *)(result + 16) = v33;
    *a2 = v34 | result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::HSL>(unsigned __int8 a1, float a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10, double a11, double a12)
{
  float v17;
  float v18;
  float v19;
  long double v20;

  v17 = WebCore::fixupHueComponentsPriorToInterpolation(a1, a2, a10);
  v19 = v18 * a12 + v17 * a6;
  v20 = fmod(v19, 360.0);
  fmod(v20 + 360.0, 360.0);
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int8x8_t *v27;
  __int32 v28;
  float v29;
  float v30;
  float v31;
  float32x2_t v32;
  int8x8_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x8_t *v36;
  __int32 v37;
  float v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  unsigned int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  __int32 v55;
  _DWORD *v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  float v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  _DWORD *v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  float v100;
  float v101;
  int8x8_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  float v131;
  float v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  int32x2_t v145;
  int32x2_t v146;
  _DWORD v147[4];
  __int128 v148;
  __int128 v149;
  int8x16_t v150;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v139 = v10.f32[0];
      v143 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v139, 2.1992);
      v11.f32[1] = v143;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v150.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v150.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v150);
      goto LABEL_17;
    case 1:
      v149 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v149);
      goto LABEL_49;
    case 2:
      v27 = *(int8x8_t **)(a2 + 8);
      v28 = v27[1].i32[1];
      v29 = *(float *)v27[1].i32;
      v30 = powf(fabsf(v29), 2.1992);
      if (v29 >= 0.0)
        v31 = v30;
      else
        v31 = -v30;
      v32 = (float32x2_t)vand_s8(*v27, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v27), (int8x8_t)vcgez_f32((float32x2_t)*v27)));
      v33 = (int8x8_t)vcltz_s32((int32x2_t)v32);
      v34 = vabs_f32(v32);
      v140 = v34.f32[0];
      v144 = powf(v34.f32[1], 2.1992);
      v35.f32[0] = powf(v140, 2.1992);
      v35.f32[1] = v144;
      *(int8x8_t *)v150.i8 = vbsl_s8(v33, (int8x8_t)vneg_f32(v35), (int8x8_t)v35);
      v150.i64[1] = __PAIR64__(v28, LODWORD(v31));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v150);
LABEL_17:
      v150.i64[0] = __PAIR64__(v19, v18);
      v150.i64[1] = __PAIR64__(v21, v20);
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v150);
      return;
    case 3:
      v36 = *(int8x8_t **)(a2 + 8);
      v37 = v36[1].i32[1];
      v38 = *(float *)v36[1].i32;
      v145 = (int32x2_t)vand_s8(*v36, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v36), (int8x8_t)vcgez_f32((float32x2_t)*v36)));
      v39 = fabsf(*(float *)v145.i32);
      if (v39 <= 0.04045)
        v141 = v39 / 12.92;
      else
        v141 = powf((float)(v39 + 0.055) / 1.055, 2.4);
      v105 = fabsf(*(float *)&v145.i32[1]);
      if (v105 <= 0.04045)
        v106 = v105 / 12.92;
      else
        v106 = powf((float)(v105 + 0.055) / 1.055, 2.4);
      v117 = fabsf(v38);
      if (v117 <= 0.04045)
      {
        v118 = v117 / 12.92;
      }
      else
      {
        v137 = v106;
        v118 = powf((float)(v117 + 0.055) / 1.055, 2.4);
        v106 = v137;
      }
      *(int8x8_t *)v150.i8 = vbsl_s8((int8x8_t)vcltz_s32(v145), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v106), LODWORD(v141))), (int8x8_t)__PAIR64__(LODWORD(v106), LODWORD(v141)));
      if (v38 < 0.0)
        v118 = -v118;
      v150.i64[1] = __PAIR64__(v37, LODWORD(v118));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v150);
      v150.i64[0] = __PAIR64__(v128, v127);
      v150.i64[1] = __PAIR64__(v130, v129);
      goto LABEL_132;
    case 4:
      v40 = *(_QWORD *)(a2 + 8);
      v41 = *(_DWORD *)(v40 + 12);
      v42 = *(float *)(v40 + 8);
      v146 = (int32x2_t)vand_s8(*(int8x8_t *)v40, vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v40), (int8x8_t)vcgez_f32(*(float32x2_t *)v40)));
      v43 = fabsf(*(float *)v146.i32);
      if (v43 >= 0.0031308)
        v44 = (float)(powf(v43, 0.41667) * 1.055) + -0.055;
      else
        v44 = v43 * 12.92;
      v142 = v44;
      v107 = fabsf(*(float *)&v146.i32[1]);
      if (v107 >= 0.0031308)
        v108 = (float)(powf(v107, 0.41667) * 1.055) + -0.055;
      else
        v108 = v107 * 12.92;
      v119 = fabsf(v42);
      if (v119 < 0.0031308)
        goto LABEL_113;
      goto LABEL_128;
    case 5:
      v45 = *(_QWORD *)(a2 + 8);
      v46 = *(float *)v45;
      v47 = *(_DWORD *)(v45 + 12);
      v48 = *(float *)(v45 + 4);
      v49 = *(float *)(v45 + 8);
      if (fabsf(*(float *)v45) <= 0.03125)
      {
        v52 = v46 * 0.0625;
      }
      else
      {
        v50 = *(float *)v45;
        v51 = powf(v46, 1.8);
        if (v50 >= 0.0)
          v52 = v51;
        else
          v52 = -v51;
      }
      if (fabsf(v48) <= 0.03125)
      {
        v110 = v48 * 0.0625;
      }
      else
      {
        v109 = powf(v48, 1.8);
        if (v48 >= 0.0)
          v110 = v109;
        else
          v110 = -v109;
      }
      if (fabsf(v49) <= 0.03125)
      {
        v120 = v49 * 0.0625;
      }
      else
      {
        v120 = powf(v49, 1.8);
        if (v49 < 0.0)
          v120 = -v120;
      }
      goto LABEL_127;
    case 6:
      v149 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v149);
      goto LABEL_49;
    case 7:
      v22 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_28;
    case 8:
      return;
    case 9:
      v149 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v150.i32[0] = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v149);
      *(uint64_t *)((char *)v150.i64 + 4) = __PAIR64__(v54, v53);
      v150.i32[3] = v55;
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v150);
      return;
    case 10:
      v56 = *(_DWORD **)(a2 + 8);
      v57 = v56[1];
      v58 = v56[2];
      v59 = v56[3];
      v147[0] = *v56;
      v147[1] = v57;
      v147[2] = v58;
      v147[3] = v59;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)v147);
      *(_QWORD *)&v148 = __PAIR64__(v61, v60);
      *((_QWORD *)&v148 + 1) = __PAIR64__(v63, v62);
      LODWORD(v149) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v148);
      *(_QWORD *)((char *)&v149 + 4) = __PAIR64__(v65, v64);
      HIDWORD(v149) = v66;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v149);
      v150.i64[0] = __PAIR64__(v68, v67);
      v150.i64[1] = __PAIR64__(v70, v69);
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v150);
      return;
    case 11:
      v148 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      LODWORD(v149) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v148);
      *(_QWORD *)((char *)&v149 + 4) = __PAIR64__(v72, v71);
      HIDWORD(v149) = v73;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v149);
      v150.i64[0] = __PAIR64__(v75, v74);
      v150.i64[1] = __PAIR64__(v77, v76);
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v150);
      return;
    case 12:
      v78 = *(_QWORD *)(a2 + 8);
      v79 = *(float *)v78;
      v80 = *(_DWORD *)(v78 + 12);
      v81 = 0.0;
      v82 = *(float *)(v78 + 4);
      v83 = *(float *)(v78 + 8);
      if (*(float *)v78 >= 0.0031308)
      {
        v111 = (float)(powf(v79, 0.41667) * 1.055) + -0.055;
        if (v111 > 0.0)
          v112 = v111;
        else
          v112 = 0.0;
        if (v111 >= 1.0)
          v81 = 1.0;
        else
          v81 = v112;
      }
      else
      {
        v84 = v79 * 12.92;
        if (v84 >= 0.0)
          v81 = v84;
      }
      if (v82 >= 0.0031308)
      {
        v121 = (float)(powf(v82, 0.41667) * 1.055) + -0.055;
        v122 = 0.0;
        if (v121 > 0.0)
          v122 = v121;
        if (v121 >= 1.0)
          v113 = 1.0;
        else
          v113 = v122;
      }
      else if ((float)(v82 * 12.92) >= 0.0)
      {
        v113 = v82 * 12.92;
      }
      else
      {
        v113 = 0.0;
      }
      if (v83 >= 0.0031308)
      {
        v131 = (float)(powf(v83, 0.41667) * 1.055) + -0.055;
        v132 = 0.0;
        if (v131 > 0.0)
          v132 = v131;
        if (v131 >= 1.0)
          v123 = 1.0;
        else
          v123 = v132;
      }
      else
      {
        v123 = v83 * 12.92;
        if ((float)(v83 * 12.92) < 0.0)
          v123 = 0.0;
      }
      v150.i64[0] = __PAIR64__(LODWORD(v113), LODWORD(v81));
      v150.i64[1] = __PAIR64__(v80, LODWORD(v123));
      goto LABEL_132;
    case 13:
      v85 = *(_DWORD **)(a2 + 8);
      v86 = v85[1];
      v87 = v85[2];
      v88 = v85[3];
      LODWORD(v149) = *v85;
      *(_QWORD *)((char *)&v149 + 4) = __PAIR64__(v87, v86);
      HIDWORD(v149) = v88;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v149);
      v150.i64[0] = __PAIR64__(v90, v89);
      v150.i64[1] = __PAIR64__(v92, v91);
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::OKLab<float>,void>::convert((float *)v150.i32);
      return;
    case 14:
      v150 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::OKLab<float>,void>::convert((float *)v150.i32);
      return;
    case 15:
      v93 = *(_QWORD *)(a2 + 8);
      v94 = *(float *)v93;
      v47 = *(_DWORD *)(v93 + 12);
      v95 = *(float *)(v93 + 4);
      v96 = *(float *)(v93 + 8);
      if (*(float *)v93 <= 0.03125)
      {
        v52 = v94 * 0.0625;
      }
      else
      {
        v97 = powf(v94, 1.8);
        if (v97 > 0.0)
          v98 = v97;
        else
          v98 = 0.0;
        if (v97 >= 1.0)
          v52 = 1.0;
        else
          v52 = v98;
      }
      if (v95 <= 0.03125)
      {
        v110 = v95 * 0.0625;
      }
      else
      {
        v114 = powf(v95, 1.8);
        v115 = 0.0;
        if (v114 > 0.0)
          v115 = v114;
        if (v114 >= 1.0)
          v110 = 1.0;
        else
          v110 = v115;
      }
      if (v96 <= 0.03125)
      {
        v120 = v96 * 0.0625;
      }
      else
      {
        v124 = powf(v96, 1.8);
        v125 = 0.0;
        if (v124 > 0.0)
          v125 = v124;
        if (v124 >= 1.0)
          v120 = 1.0;
        else
          v120 = v125;
      }
LABEL_127:
      v150.i64[0] = __PAIR64__(LODWORD(v110), LODWORD(v52));
      v150.i64[1] = __PAIR64__(v47, LODWORD(v120));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v150);
      v150.i64[0] = __PAIR64__(v134, v133);
      v150.i64[1] = __PAIR64__(v136, v135);
      goto LABEL_132;
    case 16:
      v149 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v149);
      goto LABEL_49;
    case 18:
      v149 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v149);
LABEL_49:
      v150.i64[0] = __PAIR64__(v24, v23);
      v150.i64[1] = __PAIR64__(v26, v25);
      goto LABEL_50;
    case 19:
      v99 = *(_QWORD *)(a2 + 8);
      v100 = *(float *)(v99 + 4);
      v101 = *(float *)(v99 + 8);
      v41 = *(_DWORD *)(v99 + 12);
      v102 = (int8x8_t)vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBF78205A404F6C0DLL, *(float *)v99), (float32x2_t)0x3FF01FB4BFC4C8F9, v100), (float32x2_t)0x3D2A35A3BEFF49E9, v101);
      v42 = (float)((float)((float)(*(float *)v99 * 0.05563) + 0.0) + (float)(v100 * -0.20398)) + (float)(v101 * 1.057);
      v146 = (int32x2_t)vand_s8(v102, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v102), (int8x8_t)vcgez_f32((float32x2_t)v102)));
      v103 = fabsf(*(float *)v146.i32);
      if (v103 >= 0.0031308)
        v104 = (float)(powf(v103, 0.41667) * 1.055) + -0.055;
      else
        v104 = v103 * 12.92;
      v142 = v104;
      v116 = fabsf(*(float *)&v146.i32[1]);
      if (v116 >= 0.0031308)
        v108 = (float)(powf(v116, 0.41667) * 1.055) + -0.055;
      else
        v108 = v116 * 12.92;
      v119 = fabsf(v42);
      if (v119 >= 0.0031308)
      {
LABEL_128:
        v138 = v108;
        v126 = (float)(powf(v119, 0.41667) * 1.055) + -0.055;
        v108 = v138;
      }
      else
      {
LABEL_113:
        v126 = v119 * 12.92;
      }
      *(int8x8_t *)v150.i8 = vbsl_s8((int8x8_t)vcltz_s32(v146), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v108), LODWORD(v142))), (int8x8_t)__PAIR64__(LODWORD(v108), LODWORD(v142)));
      if (v42 < 0.0)
        v126 = -v126;
      v150.i64[1] = __PAIR64__(v41, LODWORD(v126));
LABEL_132:
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v150);
      return;
    default:
      v22 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
LABEL_28:
      v150 = v22;
LABEL_50:
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v150);
      return;
  }
}

float WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(_DWORD *a1)
{
  return (float)*a1 / 255.0;
}

void WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::HWB>(unsigned __int8 a1, float a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10, double a11, double a12)
{
  float v17;
  float v18;
  float v19;
  long double v20;

  v17 = WebCore::fixupHueComponentsPriorToInterpolation(a1, a2, a10);
  v19 = v18 * a12 + v17 * a6;
  v20 = fmod(v19, 360.0);
  fmod(v20 + 360.0, 360.0);
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int8x8_t *v27;
  __int32 v28;
  float v29;
  float v30;
  float v31;
  float32x2_t v32;
  int8x8_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x8_t *v36;
  __int32 v37;
  float v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  unsigned int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  __int32 v55;
  uint64_t *v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  float v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  float v94;
  float v95;
  int8x8_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  float v125;
  float v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  int32x2_t v139;
  int32x2_t v140;
  uint64_t v141;
  int v142;
  int v143;
  __int128 v144;
  __int128 v145;
  int8x16_t v146;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v133 = v10.f32[0];
      v137 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v133, 2.1992);
      v11.f32[1] = v137;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v146.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v146.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v146);
      goto LABEL_17;
    case 1:
      v145 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v145);
      goto LABEL_49;
    case 2:
      v27 = *(int8x8_t **)(a2 + 8);
      v28 = v27[1].i32[1];
      v29 = *(float *)v27[1].i32;
      v30 = powf(fabsf(v29), 2.1992);
      if (v29 >= 0.0)
        v31 = v30;
      else
        v31 = -v30;
      v32 = (float32x2_t)vand_s8(*v27, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v27), (int8x8_t)vcgez_f32((float32x2_t)*v27)));
      v33 = (int8x8_t)vcltz_s32((int32x2_t)v32);
      v34 = vabs_f32(v32);
      v134 = v34.f32[0];
      v138 = powf(v34.f32[1], 2.1992);
      v35.f32[0] = powf(v134, 2.1992);
      v35.f32[1] = v138;
      *(int8x8_t *)v146.i8 = vbsl_s8(v33, (int8x8_t)vneg_f32(v35), (int8x8_t)v35);
      v146.i64[1] = __PAIR64__(v28, LODWORD(v31));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v146);
LABEL_17:
      v146.i64[0] = __PAIR64__(v19, v18);
      v146.i64[1] = __PAIR64__(v21, v20);
      WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v146);
      return;
    case 3:
      v36 = *(int8x8_t **)(a2 + 8);
      v37 = v36[1].i32[1];
      v38 = *(float *)v36[1].i32;
      v139 = (int32x2_t)vand_s8(*v36, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v36), (int8x8_t)vcgez_f32((float32x2_t)*v36)));
      v39 = fabsf(*(float *)v139.i32);
      if (v39 <= 0.04045)
        v135 = v39 / 12.92;
      else
        v135 = powf((float)(v39 + 0.055) / 1.055, 2.4);
      v99 = fabsf(*(float *)&v139.i32[1]);
      if (v99 <= 0.04045)
        v100 = v99 / 12.92;
      else
        v100 = powf((float)(v99 + 0.055) / 1.055, 2.4);
      v111 = fabsf(v38);
      if (v111 <= 0.04045)
      {
        v112 = v111 / 12.92;
      }
      else
      {
        v131 = v100;
        v112 = powf((float)(v111 + 0.055) / 1.055, 2.4);
        v100 = v131;
      }
      *(int8x8_t *)v146.i8 = vbsl_s8((int8x8_t)vcltz_s32(v139), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v100), LODWORD(v135))), (int8x8_t)__PAIR64__(LODWORD(v100), LODWORD(v135)));
      if (v38 < 0.0)
        v112 = -v112;
      v146.i64[1] = __PAIR64__(v37, LODWORD(v112));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v146);
      v146.i64[0] = __PAIR64__(v122, v121);
      v146.i64[1] = __PAIR64__(v124, v123);
      goto LABEL_133;
    case 4:
      v40 = *(_QWORD *)(a2 + 8);
      v41 = *(_DWORD *)(v40 + 12);
      v42 = *(float *)(v40 + 8);
      v140 = (int32x2_t)vand_s8(*(int8x8_t *)v40, vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v40), (int8x8_t)vcgez_f32(*(float32x2_t *)v40)));
      v43 = fabsf(*(float *)v140.i32);
      if (v43 >= 0.0031308)
        v44 = (float)(powf(v43, 0.41667) * 1.055) + -0.055;
      else
        v44 = v43 * 12.92;
      v136 = v44;
      v101 = fabsf(*(float *)&v140.i32[1]);
      if (v101 >= 0.0031308)
        v102 = (float)(powf(v101, 0.41667) * 1.055) + -0.055;
      else
        v102 = v101 * 12.92;
      v113 = fabsf(v42);
      if (v113 < 0.0031308)
        goto LABEL_114;
      goto LABEL_129;
    case 5:
      v45 = *(_QWORD *)(a2 + 8);
      v46 = *(float *)v45;
      v47 = *(_DWORD *)(v45 + 12);
      v48 = *(float *)(v45 + 4);
      v49 = *(float *)(v45 + 8);
      if (fabsf(*(float *)v45) <= 0.03125)
      {
        v52 = v46 * 0.0625;
      }
      else
      {
        v50 = *(float *)v45;
        v51 = powf(v46, 1.8);
        if (v50 >= 0.0)
          v52 = v51;
        else
          v52 = -v51;
      }
      if (fabsf(v48) <= 0.03125)
      {
        v104 = v48 * 0.0625;
      }
      else
      {
        v103 = powf(v48, 1.8);
        if (v48 >= 0.0)
          v104 = v103;
        else
          v104 = -v103;
      }
      if (fabsf(v49) <= 0.03125)
      {
        v114 = v49 * 0.0625;
      }
      else
      {
        v114 = powf(v49, 1.8);
        if (v49 < 0.0)
          v114 = -v114;
      }
      goto LABEL_128;
    case 6:
      v145 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v145);
      goto LABEL_49;
    case 7:
      v22 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_28;
    case 8:
      v145 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v146.i32[0] = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v145);
      *(uint64_t *)((char *)v146.i64 + 4) = __PAIR64__(v54, v53);
      v146.i32[3] = v55;
      WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v146);
      return;
    case 9:
      return;
    case 10:
      v56 = *(uint64_t **)(a2 + 8);
      v57 = *((_DWORD *)v56 + 2);
      v58 = *((_DWORD *)v56 + 3);
      v141 = *v56;
      v142 = v57;
      v143 = v58;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v141);
      *(_QWORD *)&v144 = __PAIR64__(v60, v59);
      *((_QWORD *)&v144 + 1) = __PAIR64__(v62, v61);
      LODWORD(v145) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v144);
      *(_QWORD *)((char *)&v145 + 4) = __PAIR64__(v64, v63);
      HIDWORD(v145) = v65;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v145);
      v146.i64[0] = __PAIR64__(v67, v66);
      v146.i64[1] = __PAIR64__(v69, v68);
      WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v146);
      return;
    case 11:
      v144 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      LODWORD(v145) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v144);
      *(_QWORD *)((char *)&v145 + 4) = __PAIR64__(v71, v70);
      HIDWORD(v145) = v72;
      goto LABEL_48;
    case 12:
      v73 = *(_QWORD *)(a2 + 8);
      v74 = *(float *)v73;
      v75 = *(_DWORD *)(v73 + 12);
      v76 = 0.0;
      v77 = *(float *)(v73 + 4);
      v78 = *(float *)(v73 + 8);
      if (*(float *)v73 >= 0.0031308)
      {
        v105 = (float)(powf(v74, 0.41667) * 1.055) + -0.055;
        if (v105 > 0.0)
          v106 = v105;
        else
          v106 = 0.0;
        if (v105 >= 1.0)
          v76 = 1.0;
        else
          v76 = v106;
      }
      else
      {
        v79 = v74 * 12.92;
        if (v79 >= 0.0)
          v76 = v79;
      }
      if (v77 >= 0.0031308)
      {
        v115 = (float)(powf(v77, 0.41667) * 1.055) + -0.055;
        v116 = 0.0;
        if (v115 > 0.0)
          v116 = v115;
        if (v115 >= 1.0)
          v107 = 1.0;
        else
          v107 = v116;
      }
      else if ((float)(v77 * 12.92) >= 0.0)
      {
        v107 = v77 * 12.92;
      }
      else
      {
        v107 = 0.0;
      }
      if (v78 >= 0.0031308)
      {
        v125 = (float)(powf(v78, 0.41667) * 1.055) + -0.055;
        v126 = 0.0;
        if (v125 > 0.0)
          v126 = v125;
        if (v125 >= 1.0)
          v117 = 1.0;
        else
          v117 = v126;
      }
      else
      {
        v117 = v78 * 12.92;
        if ((float)(v78 * 12.92) < 0.0)
          v117 = 0.0;
      }
      v146.i64[0] = __PAIR64__(LODWORD(v107), LODWORD(v76));
      v146.i64[1] = __PAIR64__(v75, LODWORD(v117));
      goto LABEL_133;
    case 13:
      v80 = *(_QWORD *)(a2 + 8);
      v81 = *(_DWORD *)(v80 + 8);
      v82 = *(_DWORD *)(v80 + 12);
      *(_QWORD *)&v145 = *(_QWORD *)v80;
      *((_QWORD *)&v145 + 1) = __PAIR64__(v82, v81);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v145);
      v146.i64[0] = __PAIR64__(v84, v83);
      v146.i64[1] = __PAIR64__(v86, v85);
      WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::OKLab<float>,void>::convert((float *)v146.i32);
      return;
    case 14:
      v146 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::OKLab<float>,void>::convert((float *)v146.i32);
      return;
    case 15:
      v87 = *(_QWORD *)(a2 + 8);
      v88 = *(float *)v87;
      v47 = *(_DWORD *)(v87 + 12);
      v89 = *(float *)(v87 + 4);
      v90 = *(float *)(v87 + 8);
      if (*(float *)v87 <= 0.03125)
      {
        v52 = v88 * 0.0625;
      }
      else
      {
        v91 = powf(v88, 1.8);
        if (v91 > 0.0)
          v92 = v91;
        else
          v92 = 0.0;
        if (v91 >= 1.0)
          v52 = 1.0;
        else
          v52 = v92;
      }
      if (v89 <= 0.03125)
      {
        v104 = v89 * 0.0625;
      }
      else
      {
        v108 = powf(v89, 1.8);
        v109 = 0.0;
        if (v108 > 0.0)
          v109 = v108;
        if (v108 >= 1.0)
          v104 = 1.0;
        else
          v104 = v109;
      }
      if (v90 <= 0.03125)
      {
        v114 = v90 * 0.0625;
      }
      else
      {
        v118 = powf(v90, 1.8);
        v119 = 0.0;
        if (v118 > 0.0)
          v119 = v118;
        if (v118 >= 1.0)
          v114 = 1.0;
        else
          v114 = v119;
      }
LABEL_128:
      v146.i64[0] = __PAIR64__(LODWORD(v104), LODWORD(v52));
      v146.i64[1] = __PAIR64__(v47, LODWORD(v114));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v146);
      v146.i64[0] = __PAIR64__(v128, v127);
      v146.i64[1] = __PAIR64__(v130, v129);
      goto LABEL_133;
    case 16:
      v145 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v145);
      goto LABEL_49;
    case 18:
      v145 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_48:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v145);
LABEL_49:
      v146.i64[0] = __PAIR64__(v24, v23);
      v146.i64[1] = __PAIR64__(v26, v25);
      goto LABEL_50;
    case 19:
      v93 = *(_QWORD *)(a2 + 8);
      v94 = *(float *)(v93 + 4);
      v95 = *(float *)(v93 + 8);
      v41 = *(_DWORD *)(v93 + 12);
      v96 = (int8x8_t)vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBF78205A404F6C0DLL, *(float *)v93), (float32x2_t)0x3FF01FB4BFC4C8F9, v94), (float32x2_t)0x3D2A35A3BEFF49E9, v95);
      v42 = (float)((float)((float)(*(float *)v93 * 0.05563) + 0.0) + (float)(v94 * -0.20398)) + (float)(v95 * 1.057);
      v140 = (int32x2_t)vand_s8(v96, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v96), (int8x8_t)vcgez_f32((float32x2_t)v96)));
      v97 = fabsf(*(float *)v140.i32);
      if (v97 >= 0.0031308)
        v98 = (float)(powf(v97, 0.41667) * 1.055) + -0.055;
      else
        v98 = v97 * 12.92;
      v136 = v98;
      v110 = fabsf(*(float *)&v140.i32[1]);
      if (v110 >= 0.0031308)
        v102 = (float)(powf(v110, 0.41667) * 1.055) + -0.055;
      else
        v102 = v110 * 12.92;
      v113 = fabsf(v42);
      if (v113 >= 0.0031308)
      {
LABEL_129:
        v132 = v102;
        v120 = (float)(powf(v113, 0.41667) * 1.055) + -0.055;
        v102 = v132;
      }
      else
      {
LABEL_114:
        v120 = v113 * 12.92;
      }
      *(int8x8_t *)v146.i8 = vbsl_s8((int8x8_t)vcltz_s32(v140), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v102), LODWORD(v136))), (int8x8_t)__PAIR64__(LODWORD(v102), LODWORD(v136)));
      if (v42 < 0.0)
        v120 = -v120;
      v146.i64[1] = __PAIR64__(v41, LODWORD(v120));
LABEL_133:
      WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v146);
      return;
    default:
      v22 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
LABEL_28:
      v146 = v22;
LABEL_50:
      WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v146);
      return;
  }
}

void WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::OKLab<float>,void>::convert(float *a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  int8x8_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int32x2_t v16;
  int8x8_t v17;
  float v18;
  int v19;

  v1 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(a1);
  v3 = v2;
  v6 = (int8x8_t)vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBF78205A404F6C0DLL, v1), (float32x2_t)0x3FF01FB4BFC4C8F9, v4), (float32x2_t)0x3D2A35A3BEFF49E9, v5);
  v7 = (float)((float)((float)(v1 * 0.05563) + 0.0) + (float)(v4 * -0.20398)) + (float)(v5 * 1.057);
  v16 = (int32x2_t)vand_s8(v6, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v6), (int8x8_t)vcgez_f32((float32x2_t)v6)));
  v8 = fabsf(*(float *)v16.i32);
  if (v8 >= 0.0031308)
    v9 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
  else
    v9 = v8 * 12.92;
  v15 = v9;
  v10 = fabsf(*(float *)&v16.i32[1]);
  if (v10 >= 0.0031308)
    v11 = (float)(powf(v10, 0.41667) * 1.055) + -0.055;
  else
    v11 = v10 * 12.92;
  v12 = fabsf(v7);
  if (v12 >= 0.0031308)
  {
    v14 = v11;
    v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
    v11 = v14;
  }
  else
  {
    v13 = v12 * 12.92;
  }
  v17 = vbsl_s8((int8x8_t)vcltz_s32(v16), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v11), LODWORD(v15))), (int8x8_t)__PAIR64__(LODWORD(v11), LODWORD(v15)));
  if (v7 < 0.0)
    v13 = -v13;
  v18 = v13;
  v19 = v3;
  WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v17);
}

float WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::LCH>(unsigned __int8 a1, float a2, double a3, float a4, float a5, double a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, double a14)
{
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  long double v31;

  v19 = a13 * a14 + a5 * a6;
  v20 = 1.0;
  if (v19 <= 1.0)
    v20 = a13 * a14 + a5 * a6;
  v21 = v19 < 0.0;
  v22 = 0.0;
  if (!v21)
    v22 = v20;
  v23 = (float)(a10 * a13) * a14 + (float)(a2 * a5) * a6;
  v24 = 1.0;
  if (v22 != 0.0)
    v24 = v22;
  v25 = v23 / v24;
  v26 = WebCore::fixupHueComponentsPriorToInterpolation(a1, a4, a12);
  v28 = v27 * a14 + v26 * a6;
  v29 = 100.0;
  if (v25 <= 100.0)
    v29 = v25;
  if (v25 >= 0.0)
    v30 = v29;
  else
    v30 = 0.0;
  v31 = fmod(v28, 360.0);
  fmod(v31 + 360.0, 360.0);
  return v30;
}

void WebCore::Color::callOnUnderlyingType<WebCore::LCHA<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::LCHA<float>>(void)::{lambda(WebCore::LCHA<float> const&)#1}>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  unint64_t v12;
  __int128 *v13;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v11 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v12 = a2;
    v13 = &v11;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4LCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v2), (uint64_t)&v12);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v11 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v11 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v11 + 3) = (float)HIBYTE(v3) / 255.0;
    LODWORD(v12) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v11);
    HIDWORD(v12) = v4;
    v13 = (__int128 *)__PAIR64__(v6, v5);
    WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v12);
    v12 = __PAIR64__(v8, v7);
    v13 = (__int128 *)__PAIR64__(v10, v9);
    WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)&v12);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4LCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int8x8_t v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int8x8_t *v24;
  float v25;
  float v26;
  float32x2_t v27;
  int8x8_t v28;
  float32x2_t v29;
  float32x2_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  _DWORD *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  float v65;
  float v66;
  float v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  float v74;
  int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  __int128 *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  float v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  float v118;
  float v119;
  float v120;
  float v121;
  __int128 v122[2];
  int v123;
  _OWORD v124[2];
  int v125;
  __int128 v126;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = v7;
      v9 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v10 = (int8x8_t)vcltz_s32((int32x2_t)v9);
      v11 = vabs_f32(v9);
      v118 = v11.f32[0];
      v120 = powf(v11.f32[1], 2.1992);
      v12.f32[0] = powf(v118, 2.1992);
      v12.f32[1] = v120;
      v13 = vbsl_s8(v10, (int8x8_t)vneg_f32(v12), (int8x8_t)v12);
      __asm { FMOV            V1.2S, #1.0 }
      v19 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v13, (float32x2_t)_D1), _D1, vbic_s8(v13, (int8x8_t)vclez_f32((float32x2_t)v13)));
      goto LABEL_16;
    case 1:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)v122);
      goto LABEL_34;
    case 2:
      v24 = *(int8x8_t **)(a2 + 8);
      v3 = v24[1].i32[1];
      v25 = *(float *)v24[1].i32;
      v26 = powf(fabsf(v25), 2.1992);
      if (v25 < 0.0)
        v26 = -v26;
      v8 = v26;
      v27 = (float32x2_t)vand_s8(*v24, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v24), (int8x8_t)vcgez_f32((float32x2_t)*v24)));
      v28 = (int8x8_t)vcltz_s32((int32x2_t)v27);
      v29 = vabs_f32(v27);
      v119 = v29.f32[0];
      v121 = powf(v29.f32[1], 2.1992);
      v30.f32[0] = powf(v119, 2.1992);
      v30.f32[1] = v121;
      v19 = vbsl_s8(v28, (int8x8_t)vneg_f32(v30), (int8x8_t)v30);
LABEL_16:
      *(int8x8_t *)&v126 = vand_s8(v19, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v19), (int8x8_t)vcgez_f32((float32x2_t)v19)));
      *((_QWORD *)&v126 + 1) = __PAIR64__(v3, LODWORD(v8));
      v124[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
      v124[1] = unk_1968BFBBC;
      v125 = 1065207884;
      v123 = 1061190357;
      v122[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
      v122[1] = unk_1969EF33C;
      LODWORD(v124[0]) = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v126, (float *)v124, (float *)v122);
      *(_QWORD *)((char *)v124 + 4) = __PAIR64__(v32, v31);
      HIDWORD(v124[0]) = v33;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v124);
      *(_QWORD *)&v124[0] = __PAIR64__(v35, v34);
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v37, v36);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v124);
      return;
    case 3:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)v122);
      goto LABEL_34;
    case 4:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v122);
      goto LABEL_34;
    case 5:
      v86 = *(_QWORD *)(a2 + 8);
      v87 = *(float *)v86;
      v75 = *(_DWORD *)(v86 + 12);
      v88 = *(float *)(v86 + 4);
      v77 = *(float *)(v86 + 8);
      if (fabsf(*(float *)v86) <= 0.03125)
      {
        v80 = v87 * 0.0625;
      }
      else
      {
        v89 = *(float *)v86;
        v90 = powf(v87, 1.8);
        if (v89 >= 0.0)
          v80 = v90;
        else
          v80 = -v90;
      }
      if (fabsf(v88) <= 0.03125)
      {
        v109 = v88 * 0.0625;
      }
      else
      {
        v110 = powf(v88, 1.8);
        if (v88 >= 0.0)
          v109 = v110;
        else
          v109 = -v110;
      }
      if (fabsf(v77) <= 0.03125)
        goto LABEL_70;
      v113 = powf(v77, 1.8);
      if (v77 < 0.0)
        v113 = -v113;
      goto LABEL_71;
    case 6:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v122);
      goto LABEL_34;
    case 7:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)v122);
      goto LABEL_36;
    case 8:
      v38 = *(_DWORD **)(a2 + 8);
      v39 = v38[1];
      v40 = v38[2];
      v41 = v38[3];
      LODWORD(v126) = *v38;
      *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(v40, v39);
      HIDWORD(v126) = v41;
      LODWORD(v122[0]) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v126);
      *(_QWORD *)((char *)v122 + 4) = __PAIR64__(v43, v42);
      HIDWORD(v122[0]) = v44;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)v122);
      *(_QWORD *)&v124[0] = __PAIR64__(v46, v45);
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v48, v47);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v124);
      return;
    case 9:
      v126 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      LODWORD(v122[0]) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v126);
      *(_QWORD *)((char *)v122 + 4) = __PAIR64__(v92, v91);
      HIDWORD(v122[0]) = v93;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)v122);
      *(_QWORD *)&v124[0] = __PAIR64__(v95, v94);
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v97, v96);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v124);
      return;
    case 10:
      return;
    case 11:
      v124[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_25;
    case 12:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v122);
      goto LABEL_34;
    case 13:
      v49 = *(_DWORD **)(a2 + 8);
      v50 = v49[1];
      v52 = v49[2];
      v51 = v49[3];
      LODWORD(v126) = *v49;
      *(_QWORD *)((char *)&v126 + 4) = __PAIR64__(v52, v50);
      HIDWORD(v126) = v51;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v126);
      *(_QWORD *)&v122[0] = __PAIR64__(v54, v53);
      *((_QWORD *)&v122[0] + 1) = __PAIR64__(v56, v55);
      v57 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v122);
      *(float32x2_t *)&v124[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, v57), (float32x2_t)0x3F7D8D1C3CBBFB13, v58), (float32x2_t)0xBC8BDE5ABD4D9668, v59);
      *((float *)v124 + 2) = (float)((float)((float)(v57 * -0.009243) + 0.0) + (float)(v58 * 0.015055))
                           + (float)(v59 * 0.75187);
      HIDWORD(v124[0]) = v60;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v124);
      *(_QWORD *)&v124[0] = __PAIR64__(v62, v61);
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v64, v63);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v124);
      return;
    case 14:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v65 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v122);
      *(float32x2_t *)&v124[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, v65), (float32x2_t)0x3F7D8D1C3CBBFB13, v66), (float32x2_t)0xBC8BDE5ABD4D9668, v67);
      *((float *)v124 + 2) = (float)((float)((float)(v65 * -0.009243) + 0.0) + (float)(v66 * 0.015055))
                           + (float)(v67 * 0.75187);
      HIDWORD(v124[0]) = v68;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v124);
      *(_QWORD *)&v124[0] = __PAIR64__(v70, v69);
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v72, v71);
LABEL_25:
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v124);
      return;
    case 15:
      v73 = *(_QWORD *)(a2 + 8);
      v74 = *(float *)v73;
      v75 = *(_DWORD *)(v73 + 12);
      v76 = *(float *)(v73 + 4);
      v77 = *(float *)(v73 + 8);
      if (*(float *)v73 <= 0.03125)
      {
        v80 = v74 * 0.0625;
      }
      else
      {
        v78 = powf(v74, 1.8);
        if (v78 > 0.0)
          v79 = v78;
        else
          v79 = 0.0;
        if (v78 >= 1.0)
          v80 = 1.0;
        else
          v80 = v79;
      }
      if (v76 <= 0.03125)
      {
        v109 = v76 * 0.0625;
      }
      else
      {
        v107 = powf(v76, 1.8);
        v108 = 0.0;
        if (v107 > 0.0)
          v108 = v107;
        if (v107 >= 1.0)
          v109 = 1.0;
        else
          v109 = v108;
      }
      if (v77 <= 0.03125)
      {
LABEL_70:
        v113 = v77 * 0.0625;
      }
      else
      {
        v111 = powf(v77, 1.8);
        v112 = 0.0;
        if (v111 > 0.0)
          v112 = v111;
        if (v111 >= 1.0)
          v113 = 1.0;
        else
          v113 = v112;
      }
LABEL_71:
      *(float32x2_t *)&v124[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v80), (float32x2_t)0x3F363AD53E0A6CF7, v109), (float32x2_t)0x38BC9C873D00667BLL, v113);
      *((float *)v124 + 2) = (float)((float)((float)(v80 * 0.0) + 0.0) + (float)(v109 * 0.0)) + (float)(v113 * 0.8251);
      HIDWORD(v124[0]) = v75;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v124);
      *(_QWORD *)&v124[0] = __PAIR64__(v115, v114);
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v117, v116);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v124);
      return;
    case 16:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v122);
      goto LABEL_34;
    case 18:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v81 = v122;
      goto LABEL_35;
    case 19:
      v98 = *(_QWORD *)(a2 + 8);
      v99 = *(float *)v98;
      v100 = *(float *)(v98 + 4);
      v101 = *(float *)(v98 + 8);
      v102 = *(_DWORD *)(v98 + 12);
      *(float32x2_t *)&v124[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, *(float *)v98), (float32x2_t)0x3F7D8D1C3CBBFB13, v100), (float32x2_t)0xBC8BDE5ABD4D9668, v101);
      *((float *)v124 + 2) = (float)((float)((float)(v99 * -0.009243) + 0.0) + (float)(v100 * 0.015055))
                           + (float)(v101 * 0.75187);
      HIDWORD(v124[0]) = v102;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v124);
      *(_QWORD *)&v124[0] = __PAIR64__(v104, v103);
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v106, v105);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v124);
      return;
    default:
      v122[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v122);
LABEL_34:
      *(_QWORD *)&v124[0] = __PAIR64__(v21, LODWORD(v20));
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v23, v22);
      v81 = v124;
LABEL_35:
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v81);
LABEL_36:
      *(_QWORD *)&v124[0] = __PAIR64__(v83, v82);
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v85, v84);
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v124);
      return;
  }
}

void WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _OWORD v15[2];
  int v16;
  _OWORD v17[2];
  int v18;
  float v19[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = 0.0;
  v4 = a1[1];
  v5 = a1[2];
  if (*a1 <= 0.04045)
  {
    v14 = v1 / 12.92;
    if (v14 >= 0.0)
      v3 = v14;
  }
  else
  {
    v6 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    if (v6 > 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    if (v6 >= 1.0)
      v3 = 1.0;
    else
      v3 = v7;
  }
  if (v4 <= 0.04045)
  {
    if ((float)(v4 / 12.92) >= 0.0)
      v10 = v4 / 12.92;
    else
      v10 = 0.0;
  }
  else
  {
    v8 = powf((float)(v4 + 0.055) / 1.055, 2.4);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v5 <= 0.04045)
  {
    v13 = v5 / 12.92;
    if ((float)(v5 / 12.92) < 0.0)
      v13 = 0.0;
  }
  else
  {
    v11 = powf((float)(v5 + 0.055) / 1.055, 2.4);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v19[0] = v3;
  v19[1] = v10;
  v19[2] = v13;
  v19[3] = v2;
  v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v17[1] = unk_1968BFC04;
  v18 = 1065721848;
  v16 = 1061190357;
  v15[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v15[1] = unk_1969EF33C;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v19, (float *)v17, (float *)v15);
}

void WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x8_t *a1)
{
  __int32 v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  int8x8_t v8;
  int8x8_t v9;
  float v10;
  float v11;
  int32x2_t v12;
  _OWORD v13[2];
  int v14;
  _OWORD v15[2];
  int v16;
  int8x8_t v17;
  float v18;
  __int32 v19;

  v1 = a1[1].i32[1];
  v2 = *(float *)a1[1].i32;
  v12 = (int32x2_t)vand_s8(*a1, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*a1), (int8x8_t)vcgez_f32((float32x2_t)*a1)));
  v3 = fabsf(*(float *)v12.i32);
  if (v3 <= 0.04045)
    v11 = v3 / 12.92;
  else
    v11 = powf((float)(v3 + 0.055) / 1.055, 2.4);
  v4 = fabsf(*(float *)&v12.i32[1]);
  if (v4 <= 0.04045)
    v5 = v4 / 12.92;
  else
    v5 = powf((float)(v4 + 0.055) / 1.055, 2.4);
  v6 = fabsf(v2);
  if (v6 <= 0.04045)
  {
    v7 = v6 / 12.92;
  }
  else
  {
    v10 = v5;
    v7 = powf((float)(v6 + 0.055) / 1.055, 2.4);
    v5 = v10;
  }
  v8 = (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v5), LODWORD(v11)));
  if (v2 < 0.0)
    v7 = -v7;
  v9 = vbsl_s8((int8x8_t)vcltz_s32(v12), v8, (int8x8_t)__PAIR64__(LODWORD(v5), LODWORD(v11)));
  v17 = vand_s8(v9, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v9), (int8x8_t)vcgez_f32((float32x2_t)v9)));
  v18 = v7;
  v19 = v1;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v15[1] = unk_1968BFC04;
  v16 = 1065721848;
  v14 = 1061190357;
  v13[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v13[1] = unk_1969EF33C;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v17, (float *)v15, (float *)v13);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion(uint64_t a1)
{
  _OWORD v2[2];
  int v3;
  _OWORD v4[2];
  int v5;
  char v6;

  v6 = 0;
  v5 = 1064523283;
  v4[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
  v4[1] = unk_1969EF2D0;
  v3 = 1061190357;
  v2[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v2[1] = unk_1969EF33C;
  return WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&)::{lambda(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&,WebCore::XYZA<float,(WebCore::WhitePoint)0>)#1}::operator()<WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((uint64_t)&v6, a1, (uint64_t)v4, (uint64_t)v2);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&)::{lambda(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&,WebCore::XYZA<float,(WebCore::WhitePoint)0>)#1}::operator()<WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v6;
  float v7;
  float v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  float v16[4];

  v16[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a2);
  v16[1] = v6;
  v16[2] = v7;
  v16[3] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v9;
  v15 = *(_DWORD *)(a3 + 32);
  v10 = *(_OWORD *)(a4 + 16);
  v12[0] = *(_OWORD *)a4;
  v12[1] = v10;
  v13 = *(_DWORD *)(a4 + 32);
  return WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v16, (float *)v14, (float *)v12);
}

void WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  float v16[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  if (fabsf(*a1) >= 0.081243)
  {
    v6 = *a1;
    v7 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 < 0.0)
      v7 = -v7;
    v5 = v7;
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v9 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v9 = -v9;
    v8 = v9;
  }
  else
  {
    v8 = v3 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
  {
    v11 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v4 < 0.0)
      v11 = -v11;
    v10 = v11;
  }
  else
  {
    v10 = v4 / 4.5;
  }
  v16[0] = v5;
  v16[1] = v8;
  v16[2] = v10;
  v16[3] = v2;
  v14[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v14[1] = unk_1968BFC4C;
  v15 = 1065864796;
  v13 = 1061190357;
  v12[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v12[1] = unk_1969EF33C;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v16, (float *)v14, (float *)v12);
}

void WebCore::ColorConversion<WebCore::Lab<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(int8x8_t *a1)
{
  __int32 v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  __int32 v8;
  float v9;
  __int32 v10;
  float v11;
  float v12;
  int32x2_t v13;
  int8x8_t v14;
  float v15;
  __int32 v16;

  v1 = a1[1].i32[1];
  v2 = *(float *)a1[1].i32;
  v13 = (int32x2_t)vand_s8(*a1, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*a1), (int8x8_t)vcgez_f32((float32x2_t)*a1)));
  v3 = fabsf(*(float *)v13.i32);
  if (v3 <= 0.04045)
    v12 = v3 / 12.92;
  else
    v12 = powf((float)(v3 + 0.055) / 1.055, 2.4);
  v4 = fabsf(*(float *)&v13.i32[1]);
  if (v4 <= 0.04045)
    v5 = v4 / 12.92;
  else
    v5 = powf((float)(v4 + 0.055) / 1.055, 2.4);
  v6 = fabsf(v2);
  if (v6 <= 0.04045)
  {
    v7 = v6 / 12.92;
  }
  else
  {
    v11 = v5;
    v7 = powf((float)(v6 + 0.055) / 1.055, 2.4);
    v5 = v11;
  }
  v14 = vbsl_s8((int8x8_t)vcltz_s32(v13), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v5), LODWORD(v12))), (int8x8_t)__PAIR64__(LODWORD(v5), LODWORD(v12)));
  if (v2 < 0.0)
    v7 = -v7;
  v15 = v7;
  v16 = v1;
  v14.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)&v14);
  v14.i32[1] = v8;
  v15 = v9;
  v16 = v10;
  WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v14);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  _DWORD v5[4];

  v5[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  return WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v5);
}

void WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  _OWORD v11[2];
  int v12;
  _OWORD v13[2];
  int v14;
  float v15[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  if (*a1 >= 0.081243)
  {
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 >= 1.0)
    {
      v5 = 1.0;
    }
    else if (v6 <= 0.0)
    {
      v5 = 0.0;
    }
    else
    {
      v5 = v6;
    }
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v8 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 >= 1.0)
    {
      v7 = 1.0;
    }
    else if (v8 <= 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = v3 / 4.5;
  }
  if (v4 >= 0.081243)
  {
    v10 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v10 >= 1.0)
    {
      v9 = 1.0;
    }
    else if (v10 <= 0.0)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = v4 / 4.5;
  }
  v15[0] = v5;
  v15[1] = v7;
  v15[2] = v9;
  v15[3] = v2;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v13[1] = unk_1968BFC4C;
  v14 = 1065864796;
  v12 = 1061190357;
  v11[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v11[1] = unk_1969EF33C;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v15, (float *)v13, (float *)v11);
}

void WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(__int128 *a1)
{
  int v1;
  int v2;
  int v3;
  _DWORD v4[4];

  v4[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(a1);
  v4[1] = v1;
  v4[2] = v2;
  v4[3] = v3;
  WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v4);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(__int128 *a1)
{
  int v1;
  int v2;
  int v3;
  _DWORD v5[4];

  v5[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(a1);
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  return WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v5);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)&v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v10;

  v1 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v3 = v2;
  v5 = v4;
  if (v1 <= 0.04045)
  {
    v10 = v1 / 12.92;
    if (v10 >= 0.0)
      v8 = v10;
    else
      v8 = 0.0;
  }
  else
  {
    v6 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    v7 = 0.0;
    if (v6 > 0.0)
      v7 = v6;
    if (v6 >= 1.0)
      v8 = 1.0;
    else
      v8 = v7;
  }
  if (v3 > 0.04045)
    powf((float)(v3 + 0.055) / 1.055, 2.4);
  if (v5 > 0.04045)
    powf((float)(v5 + 0.055) / 1.055, 2.4);
  return v8;
}

float WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::Lab>(float a1, double a2, double a3, float a4, double a5, double a6, double a7, double a8, float a9, float a10, float a11, float a12, double a13)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float result;

  v18 = a12 * a13 + a4 * a5;
  v19 = 1.0;
  if (v18 <= 1.0)
    v19 = a12 * a13 + a4 * a5;
  if (v18 >= 0.0)
    v20 = v19;
  else
    v20 = 0.0;
  v21 = (float)(a9 * a12) * a13 + (float)(a1 * a4) * a5;
  v22 = 1.0;
  if (v20 != 0.0)
    v22 = v20;
  v23 = v21 / v22;
  result = 100.0;
  if (v23 <= 100.0)
    result = v23;
  if (v23 < 0.0)
    return 0.0;
  return result;
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int8x8_t v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int8x8_t *v24;
  float v25;
  float v26;
  float32x2_t v27;
  int8x8_t v28;
  float32x2_t v29;
  float32x2_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  float v44;
  float v45;
  float v46;
  int v47;
  _DWORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  float v52;
  float v53;
  float v54;
  int v55;
  uint64_t v56;
  float v57;
  int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  __int128 v88[2];
  int v89;
  _OWORD v90[2];
  int v91;
  __int128 v92;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = v7;
      v9 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v10 = (int8x8_t)vcltz_s32((int32x2_t)v9);
      v11 = vabs_f32(v9);
      v84 = v11.f32[0];
      v86 = powf(v11.f32[1], 2.1992);
      v12.f32[0] = powf(v84, 2.1992);
      v12.f32[1] = v86;
      v13 = vbsl_s8(v10, (int8x8_t)vneg_f32(v12), (int8x8_t)v12);
      __asm { FMOV            V1.2S, #1.0 }
      v19 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v13, (float32x2_t)_D1), _D1, vbic_s8(v13, (int8x8_t)vclez_f32((float32x2_t)v13)));
      goto LABEL_16;
    case 1:
      v88[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)v88);
      goto LABEL_34;
    case 2:
      v24 = *(int8x8_t **)(a2 + 8);
      v3 = v24[1].i32[1];
      v25 = *(float *)v24[1].i32;
      v26 = powf(fabsf(v25), 2.1992);
      if (v25 < 0.0)
        v26 = -v26;
      v8 = v26;
      v27 = (float32x2_t)vand_s8(*v24, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v24), (int8x8_t)vcgez_f32((float32x2_t)*v24)));
      v28 = (int8x8_t)vcltz_s32((int32x2_t)v27);
      v29 = vabs_f32(v27);
      v85 = v29.f32[0];
      v87 = powf(v29.f32[1], 2.1992);
      v30.f32[0] = powf(v85, 2.1992);
      v30.f32[1] = v87;
      v19 = vbsl_s8(v28, (int8x8_t)vneg_f32(v30), (int8x8_t)v30);
LABEL_16:
      *(int8x8_t *)&v92 = vand_s8(v19, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v19), (int8x8_t)vcgez_f32((float32x2_t)v19)));
      *((_QWORD *)&v92 + 1) = __PAIR64__(v3, LODWORD(v8));
      v90[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
      v90[1] = unk_1968BFBBC;
      v91 = 1065207884;
      v89 = 1061190357;
      v88[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
      v88[1] = unk_1969EF33C;
      LODWORD(v90[0]) = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v92, (float *)v90, (float *)v88);
      *(_QWORD *)((char *)v90 + 4) = __PAIR64__(v32, v31);
      HIDWORD(v90[0]) = v33;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v90);
      return;
    case 3:
      v88[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)v88);
      goto LABEL_34;
    case 4:
      v88[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v88);
      goto LABEL_34;
    case 5:
      v64 = *(_QWORD *)(a2 + 8);
      v65 = *(float *)v64;
      v58 = *(_DWORD *)(v64 + 12);
      v66 = *(float *)(v64 + 4);
      v60 = *(float *)(v64 + 8);
      if (fabsf(*(float *)v64) <= 0.03125)
      {
        v63 = v65 * 0.0625;
      }
      else
      {
        v67 = *(float *)v64;
        v68 = powf(v65, 1.8);
        if (v67 >= 0.0)
          v63 = v68;
        else
          v63 = -v68;
      }
      if (fabsf(v66) <= 0.03125)
      {
        v79 = v66 * 0.0625;
      }
      else
      {
        v80 = powf(v66, 1.8);
        if (v66 >= 0.0)
          v79 = v80;
        else
          v79 = -v80;
      }
      if (fabsf(v60) <= 0.03125)
        goto LABEL_70;
      v83 = powf(v60, 1.8);
      if (v60 < 0.0)
        v83 = -v83;
      goto LABEL_71;
    case 6:
      v88[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v88);
      goto LABEL_34;
    case 7:
      v90[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_43;
    case 8:
      v34 = *(_QWORD *)(a2 + 8);
      v35 = *(_DWORD *)(v34 + 8);
      v36 = *(_DWORD *)(v34 + 12);
      *(_QWORD *)&v88[0] = *(_QWORD *)v34;
      *((_QWORD *)&v88[0] + 1) = __PAIR64__(v36, v35);
      LODWORD(v90[0]) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)v88);
      *(_QWORD *)((char *)v90 + 4) = __PAIR64__(v38, v37);
      HIDWORD(v90[0]) = v39;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)v90);
      return;
    case 9:
      v88[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      LODWORD(v90[0]) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)v88);
      *(_QWORD *)((char *)v90 + 4) = __PAIR64__(v70, v69);
      HIDWORD(v90[0]) = v71;
LABEL_43:
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)v90);
      return;
    case 10:
      v90[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)v90);
      return;
    case 11:
      return;
    case 12:
      v88[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v88);
      goto LABEL_34;
    case 13:
      v92 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v92);
      *(_QWORD *)&v88[0] = __PAIR64__(v41, v40);
      *((_QWORD *)&v88[0] + 1) = __PAIR64__(v43, v42);
      v44 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v88);
      *(float32x2_t *)&v90[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, v44), (float32x2_t)0x3F7D8D1C3CBBFB13, v45), (float32x2_t)0xBC8BDE5ABD4D9668, v46);
      *((float *)v90 + 2) = (float)((float)((float)(v44 * -0.009243) + 0.0) + (float)(v45 * 0.015055))
                          + (float)(v46 * 0.75187);
      HIDWORD(v90[0]) = v47;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v90);
      return;
    case 14:
      v48 = *(_DWORD **)(a2 + 8);
      v49 = v48[1];
      v51 = v48[2];
      v50 = v48[3];
      LODWORD(v88[0]) = *v48;
      *(_QWORD *)((char *)v88 + 4) = __PAIR64__(v51, v49);
      HIDWORD(v88[0]) = v50;
      v52 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v88);
      *(float32x2_t *)&v90[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, v52), (float32x2_t)0x3F7D8D1C3CBBFB13, v53), (float32x2_t)0xBC8BDE5ABD4D9668, v54);
      *((float *)v90 + 2) = (float)((float)((float)(v52 * -0.009243) + 0.0) + (float)(v53 * 0.015055))
                          + (float)(v54 * 0.75187);
      HIDWORD(v90[0]) = v55;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v90);
      return;
    case 15:
      v56 = *(_QWORD *)(a2 + 8);
      v57 = *(float *)v56;
      v58 = *(_DWORD *)(v56 + 12);
      v59 = *(float *)(v56 + 4);
      v60 = *(float *)(v56 + 8);
      if (*(float *)v56 <= 0.03125)
      {
        v63 = v57 * 0.0625;
      }
      else
      {
        v61 = powf(v57, 1.8);
        if (v61 > 0.0)
          v62 = v61;
        else
          v62 = 0.0;
        if (v61 >= 1.0)
          v63 = 1.0;
        else
          v63 = v62;
      }
      if (v59 <= 0.03125)
      {
        v79 = v59 * 0.0625;
      }
      else
      {
        v77 = powf(v59, 1.8);
        v78 = 0.0;
        if (v77 > 0.0)
          v78 = v77;
        if (v77 >= 1.0)
          v79 = 1.0;
        else
          v79 = v78;
      }
      if (v60 <= 0.03125)
      {
LABEL_70:
        v83 = v60 * 0.0625;
      }
      else
      {
        v81 = powf(v60, 1.8);
        v82 = 0.0;
        if (v81 > 0.0)
          v82 = v81;
        if (v81 >= 1.0)
          v83 = 1.0;
        else
          v83 = v82;
      }
LABEL_71:
      *(float32x2_t *)&v90[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v63), (float32x2_t)0x3F363AD53E0A6CF7, v79), (float32x2_t)0x38BC9C873D00667BLL, v83);
      *((float *)v90 + 2) = (float)((float)((float)(v63 * 0.0) + 0.0) + (float)(v79 * 0.0)) + (float)(v83 * 0.8251);
      HIDWORD(v90[0]) = v58;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v90);
      return;
    case 16:
      v88[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v88);
      goto LABEL_34;
    case 18:
      v90[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_35;
    case 19:
      v72 = *(_QWORD *)(a2 + 8);
      v73 = *(float *)v72;
      v74 = *(float *)(v72 + 4);
      v75 = *(float *)(v72 + 8);
      v76 = *(_DWORD *)(v72 + 12);
      *(float32x2_t *)&v90[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, *(float *)v72), (float32x2_t)0x3F7D8D1C3CBBFB13, v74), (float32x2_t)0xBC8BDE5ABD4D9668, v75);
      *((float *)v90 + 2) = (float)((float)((float)(v73 * -0.009243) + 0.0) + (float)(v74 * 0.015055))
                          + (float)(v75 * 0.75187);
      HIDWORD(v90[0]) = v76;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v90);
      return;
    default:
      v88[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v88);
LABEL_34:
      *(_QWORD *)&v90[0] = __PAIR64__(v21, LODWORD(v20));
      *((_QWORD *)&v90[0] + 1) = __PAIR64__(v23, v22);
LABEL_35:
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v90);
      return;
  }
}

void WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  __int128 v7;
  _DWORD v8[4];

  LODWORD(v7) = WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(a1);
  *(_QWORD *)((char *)&v7 + 4) = __PAIR64__(v2, v1);
  HIDWORD(v7) = v3;
  v8[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v7);
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v8);
}

float WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::OKLCH>(unsigned __int8 a1, float a2, double a3, float a4, float a5, double a6, double a7, double a8, double a9, float a10, float a11, float a12, float a13, double a14)
{
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  long double v31;

  v19 = a13 * a14 + a5 * a6;
  v20 = 1.0;
  if (v19 <= 1.0)
    v20 = a13 * a14 + a5 * a6;
  v21 = v19 < 0.0;
  v22 = 0.0;
  if (!v21)
    v22 = v20;
  v23 = (float)(a10 * a13) * a14 + (float)(a2 * a5) * a6;
  v24 = 1.0;
  if (v22 != 0.0)
    v24 = v22;
  v25 = v23 / v24;
  v26 = WebCore::fixupHueComponentsPriorToInterpolation(a1, a4, a12);
  v28 = v27 * a14 + v26 * a6;
  if (v25 <= 1.0)
    v29 = v25;
  else
    v29 = 1.0;
  if (v25 >= 0.0)
    v30 = v29;
  else
    v30 = 0.0;
  v31 = fmod(v28, 360.0);
  fmod(v31 + 360.0, 360.0);
  return v30;
}

void WebCore::Color::callOnUnderlyingType<WebCore::OKLCHA<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLCHA<float>>(void)::{lambda(WebCore::OKLCHA<float> const&)#1}>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  unint64_t v13;
  __int128 *v14;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v12 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v13 = a2;
    v14 = &v12;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_6OKLCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v2), (uint64_t)&v13);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v12 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v12 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v12 + 3) = (float)HIBYTE(v3) / 255.0;
    v4 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v12);
    v13 = (unint64_t)vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v4), (float32x2_t)0x3F37154B3EB7154BLL, v5), (float32x2_t)0x3D93D9913E38CFF5, v6);
    *(float *)&v14 = (float)((float)((float)(v4 * 0.019331) + 0.0) + (float)(v5 * 0.11919)) + (float)(v6 * 0.95053);
    HIDWORD(v14) = v7;
    WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v13);
    v13 = __PAIR64__(v9, v8);
    v14 = (__int128 *)__PAIR64__(v11, v10);
    WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v13);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_6OKLCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  unsigned int v5;
  float v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  _DWORD *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  float v82;
  float v83;
  float v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  float *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  float v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;

  switch(a1)
  {
    case 0:
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(float *)(v13 + 4);
      v15 = *(float *)(v13 + 8);
      v16 = *(float *)v13;
      v17 = *(_DWORD *)(v13 + 12);
      v18 = powf(fabsf(*(float *)v13), 2.1992);
      if (v16 < 0.0)
        v18 = -v18;
      if (v18 > 0.0)
        v19 = v18;
      else
        v19 = 0.0;
      if (v18 >= 1.0)
        v20 = 1.0;
      else
        v20 = v19;
      v21 = powf(fabsf(v14), 2.1992);
      if (v14 < 0.0)
        v21 = -v21;
      if (v21 > 0.0)
        v22 = v21;
      else
        v22 = 0.0;
      if (v21 >= 1.0)
        v23 = 1.0;
      else
        v23 = v22;
      v24 = powf(fabsf(v15), 2.1992);
      if (v15 < 0.0)
        v24 = -v24;
      if (v24 > 0.0)
        v25 = v24;
      else
        v25 = 0.0;
      if (v24 >= 1.0)
        v26 = 1.0;
      else
        v26 = v25;
      v27 = v20;
      goto LABEL_39;
    case 1:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v102);
      goto LABEL_53;
    case 2:
      v31 = *(_QWORD *)(a2 + 8);
      v32 = *(float *)(v31 + 4);
      v33 = *(float *)(v31 + 8);
      v34 = *(float *)v31;
      v17 = *(_DWORD *)(v31 + 12);
      v35 = powf(fabsf(*(float *)v31), 2.1992);
      if (v34 >= 0.0)
        v36 = v35;
      else
        v36 = -v35;
      v37 = powf(fabsf(v32), 2.1992);
      if (v32 >= 0.0)
        v23 = v37;
      else
        v23 = -v37;
      v26 = powf(fabsf(v33), 2.1992);
      if (v33 < 0.0)
        v26 = -v26;
      v27 = v36;
LABEL_39:
      *(float32x2_t *)&v103 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E983D9A3F13A095, v27), (float32x2_t)0x3F209AE63E3E02FBLL, v23), (float32x2_t)0x3D9A32683E40BF03, v26);
      *((float *)&v103 + 2) = (float)((float)((float)(v27 * 0.027031) + 0.0) + (float)(v23 * 0.070689))
                            + (float)(v26 * 0.99134);
      HIDWORD(v103) = v17;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v103);
      *(_QWORD *)&v103 = __PAIR64__(v39, v38);
      *((_QWORD *)&v103 + 1) = __PAIR64__(v41, v40);
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v103);
      return;
    case 3:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v102);
      goto LABEL_53;
    case 4:
    case 12:
      v2 = *(_QWORD *)(a2 + 8);
      v3 = *(float *)(v2 + 4);
      v4 = *(float *)(v2 + 8);
      v5 = *(_DWORD *)(v2 + 12);
      v6 = (float)((float)((float)(*(float *)v2 * 0.019331) + 0.0) + (float)(v3 * 0.11919)) + (float)(v4 * 0.95053);
      v7 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, *(float *)v2), (float32x2_t)0x3F37154B3EB7154BLL, v3);
      v8 = (float32x2_t)0x3D93D9913E38CFF5;
      goto LABEL_57;
    case 5:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v102);
      goto LABEL_53;
    case 6:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v102);
      goto LABEL_53;
    case 7:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v102);
      goto LABEL_53;
    case 8:
      v42 = *(_DWORD **)(a2 + 8);
      v43 = v42[1];
      v44 = v42[2];
      v45 = v42[3];
      LODWORD(v101) = *v42;
      *(_QWORD *)((char *)&v101 + 4) = __PAIR64__(v44, v43);
      HIDWORD(v101) = v45;
      LODWORD(v102) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v101);
      *(_QWORD *)((char *)&v102 + 4) = __PAIR64__(v47, v46);
      HIDWORD(v102) = v48;
      LODWORD(v103) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v102);
      *(_QWORD *)((char *)&v103 + 4) = __PAIR64__(v50, v49);
      HIDWORD(v103) = v51;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v103);
      *(_QWORD *)&v103 = __PAIR64__(v53, v52);
      *((_QWORD *)&v103 + 1) = __PAIR64__(v55, v54);
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v103);
      return;
    case 9:
      v101 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      LODWORD(v102) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v101);
      *(_QWORD *)((char *)&v102 + 4) = __PAIR64__(v57, v56);
      HIDWORD(v102) = v58;
      LODWORD(v103) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v102);
      *(_QWORD *)((char *)&v103 + 4) = __PAIR64__(v60, v59);
      HIDWORD(v103) = v61;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v103);
      *(_QWORD *)&v103 = __PAIR64__(v63, v62);
      *((_QWORD *)&v103 + 1) = __PAIR64__(v65, v64);
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v103);
      return;
    case 10:
      v66 = *(_DWORD **)(a2 + 8);
      v67 = v66[1];
      v69 = v66[2];
      v68 = v66[3];
      LODWORD(v101) = *v66;
      *(_QWORD *)((char *)&v101 + 4) = __PAIR64__(v69, v67);
      HIDWORD(v101) = v68;
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v101);
      *(_QWORD *)&v102 = __PAIR64__(v71, v70);
      *((_QWORD *)&v102 + 1) = __PAIR64__(v73, v72);
      v74 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v102);
      *(float32x2_t *)&v103 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, v74), (float32x2_t)0x3F814787BCBD38F9, v75), (float32x2_t)0x3CAC5F1A3D818E10, v76);
      *((float *)&v103 + 2) = (float)((float)((float)(v74 * 0.012314) + 0.0) + (float)(v75 * -0.020508))
                            + (float)(v76 * 1.3304);
      HIDWORD(v103) = v77;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v103);
      *(_QWORD *)&v103 = __PAIR64__(v79, v78);
      *((_QWORD *)&v103 + 1) = __PAIR64__(v81, v80);
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v103);
      return;
    case 11:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v82 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v102);
      *(float32x2_t *)&v103 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, v82), (float32x2_t)0x3F814787BCBD38F9, v83), (float32x2_t)0x3CAC5F1A3D818E10, v84);
      *((float *)&v103 + 2) = (float)((float)((float)(v82 * 0.012314) + 0.0) + (float)(v83 * -0.020508))
                            + (float)(v84 * 1.3304);
      HIDWORD(v103) = v85;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v103);
      *(_QWORD *)&v103 = __PAIR64__(v87, v86);
      *((_QWORD *)&v103 + 1) = __PAIR64__(v89, v88);
      goto LABEL_49;
    case 13:
      return;
    case 14:
      v103 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_49:
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v103);
      return;
    case 15:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v102);
      goto LABEL_53;
    case 16:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v102);
LABEL_53:
      *(_QWORD *)&v103 = __PAIR64__(v29, LODWORD(v28));
      DWORD2(v103) = v30;
      goto LABEL_54;
    case 18:
      v95 = *(_QWORD *)(a2 + 8);
      v96 = *(float *)(v95 + 4);
      v4 = *(float *)(v95 + 8);
      v5 = *(_DWORD *)(v95 + 12);
      v6 = (float)((float)((float)(*(float *)v95 * 0.012314) + 0.0) + (float)(v96 * -0.020508)) + (float)(v4 * 1.3304);
      v7 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, *(float *)v95), (float32x2_t)0x3F814787BCBD38F9, v96);
      v8 = (float32x2_t)0x3CAC5F1A3D818E10;
LABEL_57:
      *(float32x2_t *)&v103 = vmla_n_f32(v7, v8, v4);
      *((_QWORD *)&v103 + 1) = __PAIR64__(v5, LODWORD(v6));
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v103);
      *(_QWORD *)&v103 = __PAIR64__(v98, v97);
      *((_QWORD *)&v103 + 1) = __PAIR64__(v100, v99);
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v103);
      return;
    case 19:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v90 = (float *)&v102;
      goto LABEL_55;
    default:
      v102 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v9 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v102);
      *(float32x2_t *)&v103 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v9), (float32x2_t)0x3F37154B3EB7154BLL, v11), (float32x2_t)0x3D93D9913E38CFF5, v12);
      *((float *)&v103 + 2) = (float)((float)((float)(v9 * 0.019331) + 0.0) + (float)(v11 * 0.11919))
                            + (float)(v12 * 0.95053);
LABEL_54:
      HIDWORD(v103) = v10;
      v90 = (float *)&v103;
LABEL_55:
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(v90);
      *(_QWORD *)&v103 = __PAIR64__(v92, v91);
      *((_QWORD *)&v103 + 1) = __PAIR64__(v94, v93);
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v103);
      return;
  }
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v14;

  v1 = *a1;
  v2 = 0.0;
  v3 = a1[1];
  v4 = a1[2];
  if (*a1 <= 0.04045)
  {
    v14 = v1 / 12.92;
    if (v14 >= 0.0)
      v2 = v14;
  }
  else
  {
    v5 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    if (v5 > 0.0)
      v6 = v5;
    else
      v6 = 0.0;
    if (v5 >= 1.0)
      v2 = 1.0;
    else
      v2 = v6;
  }
  if (v3 <= 0.04045)
  {
    if ((float)(v3 / 12.92) >= 0.0)
      v9 = v3 / 12.92;
    else
      v9 = 0.0;
  }
  else
  {
    v7 = powf((float)(v3 + 0.055) / 1.055, 2.4);
    v8 = 0.0;
    if (v7 > 0.0)
      v8 = v7;
    if (v7 >= 1.0)
      v9 = 1.0;
    else
      v9 = v8;
  }
  if (v4 <= 0.04045)
  {
    v12 = v4 / 12.92;
    if ((float)(v4 / 12.92) < 0.0)
      v12 = 0.0;
  }
  else
  {
    v10 = powf((float)(v4 + 0.055) / 1.055, 2.4);
    v11 = 0.0;
    if (v10 > 0.0)
      v11 = v10;
    if (v10 >= 1.0)
      v12 = 1.0;
    else
      v12 = v11;
  }
  return (float)((float)((float)(v2 * 0.48657) + 0.0) + (float)(v9 * 0.26567)) + (float)(v12 * 0.19822);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = fabsf(*a1);
  if (v4 <= 0.04045)
    v5 = v4 / 12.92;
  else
    v5 = powf((float)(v4 + 0.055) / 1.055, 2.4);
  v6 = fabsf(v2);
  if (v6 <= 0.04045)
    v7 = v6 / 12.92;
  else
    v7 = powf((float)(v6 + 0.055) / 1.055, 2.4);
  v8 = fabsf(v3);
  if (v8 <= 0.04045)
    v9 = v8 / 12.92;
  else
    v9 = powf((float)(v8 + 0.055) / 1.055, 2.4);
  v10 = -v7;
  if (v2 >= 0.0)
    v10 = v7;
  v11 = -v5;
  if (v1 >= 0.0)
    v11 = v5;
  if (v3 < 0.0)
    v9 = -v9;
  return (float)((float)((float)(v11 * 0.48657) + 0.0) + (float)(v10 * 0.26567)) + (float)(v9 * 0.19822);
}

void WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  _OWORD v11[2];
  int v12;
  _OWORD v13[2];
  int v14;
  float v15[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  if (fabsf(*a1) <= 0.03125)
  {
    v7 = v1 * 0.0625;
  }
  else
  {
    v5 = *a1;
    v6 = powf(v1, 1.8);
    if (v5 >= 0.0)
      v7 = v6;
    else
      v7 = -v6;
  }
  if (fabsf(v3) <= 0.03125)
  {
    v9 = v3 * 0.0625;
  }
  else
  {
    v8 = powf(v3, 1.8);
    if (v3 >= 0.0)
      v9 = v8;
    else
      v9 = -v8;
  }
  if (fabsf(v4) <= 0.03125)
  {
    v10 = v4 * 0.0625;
  }
  else
  {
    v10 = powf(v4, 1.8);
    if (v4 < 0.0)
      v10 = -v10;
  }
  v15[0] = v7;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v2;
  v14 = 1062418958;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::linearToXYZ;
  v13[1] = unk_1969EF2F4;
  v11[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v11[1] = unk_1968BFC28;
  v12 = 1068124526;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v15, (float *)v13, (float *)v11);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  if (fabsf(*a1) >= 0.081243)
  {
    v5 = *a1;
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v5 < 0.0)
      v6 = -v6;
    v4 = v6;
  }
  else
  {
    v4 = v1 / 4.5;
  }
  if (fabsf(v2) >= 0.081243)
  {
    v8 = pow(((float)(v2 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v2 < 0.0)
      v8 = -v8;
    v7 = v8;
  }
  else
  {
    v7 = v2 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v10 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v10 = -v10;
    v9 = v10;
  }
  else
  {
    v9 = v3 / 4.5;
  }
  return (float)((float)((float)(v4 * 0.63696) + 0.0) + (float)(v7 * 0.14462)) + (float)(v9 * 0.16888);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = fabsf(*a1);
  if (v4 <= 0.04045)
    v5 = v4 / 12.92;
  else
    v5 = powf((float)(v4 + 0.055) / 1.055, 2.4);
  v6 = fabsf(v2);
  if (v6 <= 0.04045)
    v7 = v6 / 12.92;
  else
    v7 = powf((float)(v6 + 0.055) / 1.055, 2.4);
  v8 = fabsf(v3);
  if (v8 <= 0.04045)
    v9 = v8 / 12.92;
  else
    v9 = powf((float)(v8 + 0.055) / 1.055, 2.4);
  v10 = -v7;
  if (v2 >= 0.0)
    v10 = v7;
  v11 = -v5;
  if (v1 >= 0.0)
    v11 = v5;
  if (v3 < 0.0)
    v9 = -v9;
  return (float)((float)((float)(v11 * 0.41239) + 0.0) + (float)(v10 * 0.35758)) + (float)(v9 * 0.18048);
}

void WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _OWORD v14[2];
  int v15;
  _OWORD v16[2];
  int v17;
  float v18[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  if (*a1 <= 0.03125)
  {
    v7 = v1 * 0.0625;
  }
  else
  {
    v5 = powf(v1, 1.8);
    if (v5 > 0.0)
      v6 = v5;
    else
      v6 = 0.0;
    if (v5 >= 1.0)
      v7 = 1.0;
    else
      v7 = v6;
  }
  if (v3 <= 0.03125)
  {
    v10 = v3 * 0.0625;
  }
  else
  {
    v8 = powf(v3, 1.8);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v4 <= 0.03125)
  {
    v13 = v4 * 0.0625;
  }
  else
  {
    v11 = powf(v4, 1.8);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v18[0] = v7;
  v18[1] = v10;
  v18[2] = v13;
  v18[3] = v2;
  v17 = 1062418958;
  v16[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::linearToXYZ;
  v16[1] = unk_1969EF2F4;
  v14[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v14[1] = unk_1968BFC28;
  v15 = 1068124526;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v18, (float *)v16, (float *)v14);
}

float WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  double v5;
  BOOL v6;
  float v7;
  float v8;
  double v9;
  float v10;
  double v11;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  if (*a1 >= 0.081243)
  {
    v5 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v5 >= 1.0)
    {
      v4 = 1.0;
    }
    else
    {
      v6 = v5 <= 0.0;
      v7 = v5;
      if (v6)
        v4 = 0.0;
      else
        v4 = v7;
    }
  }
  else
  {
    v4 = v1 / 4.5;
  }
  if (v2 >= 0.081243)
  {
    v9 = pow(((float)(v2 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v9 >= 1.0)
    {
      v8 = 1.0;
    }
    else if (v9 <= 0.0)
    {
      v8 = 0.0;
    }
    else
    {
      v8 = v9;
    }
  }
  else
  {
    v8 = v2 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v11 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v11 >= 1.0)
    {
      v10 = 1.0;
    }
    else if (v11 <= 0.0)
    {
      v10 = 0.0;
    }
    else
    {
      v10 = v11;
    }
  }
  else
  {
    v10 = v3 / 4.5;
  }
  return (float)((float)((float)(v4 * 0.63696) + 0.0) + (float)(v8 * 0.14462)) + (float)(v10 * 0.16888);
}

float WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::OKLab>(float a1, double a2, double a3, float a4, double a5, double a6, double a7, double a8, float a9, float a10, float a11, float a12, double a13)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float result;

  v18 = a12 * a13 + a4 * a5;
  v19 = 1.0;
  if (v18 <= 1.0)
    v19 = a12 * a13 + a4 * a5;
  if (v18 >= 0.0)
    v20 = v19;
  else
    v20 = 0.0;
  v21 = (float)(a9 * a12) * a13 + (float)(a1 * a4) * a5;
  v22 = 1.0;
  if (v20 != 0.0)
    v22 = v20;
  v23 = v21 / v22;
  if ((float)(v21 / v22) <= 1.0)
    result = v21 / v22;
  else
    result = 1.0;
  if (v23 < 0.0)
    return 0.0;
  return result;
}

void WebCore::Color::callOnUnderlyingType<WebCore::OKLab<float> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::OKLab<float>>(void)::{lambda(WebCore::OKLab<float> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  int v7;
  __int128 v8;
  float32x2_t v9;
  __int128 *v10;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v8 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v9 = (float32x2_t)a2;
    v10 = &v8;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v2), (uint64_t)&v9);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v8 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v8 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v8 + 3) = (float)HIBYTE(v3) / 255.0;
    v4 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v8);
    v9 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v4), (float32x2_t)0x3F37154B3EB7154BLL, v5), (float32x2_t)0x3D93D9913E38CFF5, v6);
    *(float *)&v10 = (float)((float)((float)(v4 * 0.019331) + 0.0) + (float)(v5 * 0.11919)) + (float)(v6 * 0.95053);
    HIDWORD(v10) = v7;
    WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v9);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  unsigned int v5;
  float v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  int v57;
  _DWORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  int v65;
  uint64_t v66;
  float v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  switch(a1)
  {
    case 0:
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(float *)(v13 + 4);
      v15 = *(float *)(v13 + 8);
      v16 = *(float *)v13;
      v17 = *(_DWORD *)(v13 + 12);
      v18 = powf(fabsf(*(float *)v13), 2.1992);
      if (v16 < 0.0)
        v18 = -v18;
      if (v18 > 0.0)
        v19 = v18;
      else
        v19 = 0.0;
      if (v18 >= 1.0)
        v20 = 1.0;
      else
        v20 = v19;
      v21 = powf(fabsf(v14), 2.1992);
      if (v14 < 0.0)
        v21 = -v21;
      if (v21 > 0.0)
        v22 = v21;
      else
        v22 = 0.0;
      if (v21 >= 1.0)
        v23 = 1.0;
      else
        v23 = v22;
      v24 = powf(fabsf(v15), 2.1992);
      if (v15 < 0.0)
        v24 = -v24;
      if (v24 > 0.0)
        v25 = v24;
      else
        v25 = 0.0;
      if (v24 >= 1.0)
        v26 = 1.0;
      else
        v26 = v25;
      v27 = v20;
      goto LABEL_39;
    case 1:
      v69 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v69);
      goto LABEL_53;
    case 2:
      v31 = *(_QWORD *)(a2 + 8);
      v32 = *(float *)(v31 + 4);
      v33 = *(float *)(v31 + 8);
      v34 = *(float *)v31;
      v17 = *(_DWORD *)(v31 + 12);
      v35 = powf(fabsf(*(float *)v31), 2.1992);
      if (v34 >= 0.0)
        v36 = v35;
      else
        v36 = -v35;
      v37 = powf(fabsf(v32), 2.1992);
      if (v32 >= 0.0)
        v23 = v37;
      else
        v23 = -v37;
      v26 = powf(fabsf(v33), 2.1992);
      if (v33 < 0.0)
        v26 = -v26;
      v27 = v36;
LABEL_39:
      *(float32x2_t *)&v70 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E983D9A3F13A095, v27), (float32x2_t)0x3F209AE63E3E02FBLL, v23), (float32x2_t)0x3D9A32683E40BF03, v26);
      *((float *)&v70 + 2) = (float)((float)((float)(v27 * 0.027031) + 0.0) + (float)(v23 * 0.070689))
                           + (float)(v26 * 0.99134);
      HIDWORD(v70) = v17;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v70);
      return;
    case 3:
      v69 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v69);
      goto LABEL_53;
    case 4:
    case 12:
      v2 = *(_QWORD *)(a2 + 8);
      v3 = *(float *)(v2 + 4);
      v4 = *(float *)(v2 + 8);
      v5 = *(_DWORD *)(v2 + 12);
      v6 = (float)((float)((float)(*(float *)v2 * 0.019331) + 0.0) + (float)(v3 * 0.11919)) + (float)(v4 * 0.95053);
      v7 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, *(float *)v2), (float32x2_t)0x3F37154B3EB7154BLL, v3);
      v8 = (float32x2_t)0x3D93D9913E38CFF5;
      goto LABEL_57;
    case 5:
      v69 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v69);
      goto LABEL_53;
    case 6:
      v69 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v69);
      goto LABEL_53;
    case 7:
      v69 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_46;
    case 8:
      v38 = *(_QWORD *)(a2 + 8);
      v39 = *(_DWORD *)(v38 + 8);
      v40 = *(_DWORD *)(v38 + 12);
      *(_QWORD *)&v68 = *(_QWORD *)v38;
      *((_QWORD *)&v68 + 1) = __PAIR64__(v40, v39);
      LODWORD(v69) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v68);
      *(_QWORD *)((char *)&v69 + 4) = __PAIR64__(v42, v41);
      HIDWORD(v69) = v43;
      LODWORD(v70) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v69);
      *(_QWORD *)((char *)&v70 + 4) = __PAIR64__(v45, v44);
      HIDWORD(v70) = v46;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v70);
      return;
    case 9:
      v68 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      LODWORD(v69) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v68);
      *(_QWORD *)((char *)&v69 + 4) = __PAIR64__(v48, v47);
      HIDWORD(v69) = v49;
LABEL_46:
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v69);
      goto LABEL_53;
    case 10:
      v68 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v68);
      *(_QWORD *)&v69 = __PAIR64__(v51, v50);
      *((_QWORD *)&v69 + 1) = __PAIR64__(v53, v52);
      v54 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v69);
      *(float32x2_t *)&v70 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, v54), (float32x2_t)0x3F814787BCBD38F9, v55), (float32x2_t)0x3CAC5F1A3D818E10, v56);
      *((float *)&v70 + 2) = (float)((float)((float)(v54 * 0.012314) + 0.0) + (float)(v55 * -0.020508))
                           + (float)(v56 * 1.3304);
      HIDWORD(v70) = v57;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v70);
      return;
    case 11:
      v58 = *(_DWORD **)(a2 + 8);
      v59 = v58[1];
      v61 = v58[2];
      v60 = v58[3];
      LODWORD(v69) = *v58;
      *(_QWORD *)((char *)&v69 + 4) = __PAIR64__(v61, v59);
      HIDWORD(v69) = v60;
      v62 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v69);
      *(float32x2_t *)&v70 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, v62), (float32x2_t)0x3F814787BCBD38F9, v63), (float32x2_t)0x3CAC5F1A3D818E10, v64);
      *((float *)&v70 + 2) = (float)((float)((float)(v62 * 0.012314) + 0.0) + (float)(v63 * -0.020508))
                           + (float)(v64 * 1.3304);
      HIDWORD(v70) = v65;
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v70);
      return;
    case 13:
      v70 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v70);
      return;
    case 14:
      return;
    case 15:
      v69 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v69);
      goto LABEL_53;
    case 16:
      v69 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v28 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v69);
LABEL_53:
      *(_QWORD *)&v70 = __PAIR64__(v29, LODWORD(v28));
      DWORD2(v70) = v30;
      goto LABEL_54;
    case 18:
      v66 = *(_QWORD *)(a2 + 8);
      v67 = *(float *)(v66 + 4);
      v4 = *(float *)(v66 + 8);
      v5 = *(_DWORD *)(v66 + 12);
      v6 = (float)((float)((float)(*(float *)v66 * 0.012314) + 0.0) + (float)(v67 * -0.020508)) + (float)(v4 * 1.3304);
      v7 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, *(float *)v66), (float32x2_t)0x3F814787BCBD38F9, v67);
      v8 = (float32x2_t)0x3CAC5F1A3D818E10;
LABEL_57:
      *(float32x2_t *)&v70 = vmla_n_f32(v7, v8, v4);
      *((_QWORD *)&v70 + 1) = __PAIR64__(v5, LODWORD(v6));
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v70);
      return;
    case 19:
      v70 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_55;
    default:
      v69 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v9 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v69);
      *(float32x2_t *)&v70 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v9), (float32x2_t)0x3F37154B3EB7154BLL, v11), (float32x2_t)0x3D93D9913E38CFF5, v12);
      *((float *)&v70 + 2) = (float)((float)((float)(v9 * 0.019331) + 0.0) + (float)(v11 * 0.11919))
                           + (float)(v12 * 0.95053);
LABEL_54:
      HIDWORD(v70) = v10;
LABEL_55:
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v70);
      return;
  }
}

float WebCore::interpolateColorComponents<(WebCore::AlphaPremultiplication)0,WebCore::ColorInterpolationMethod::SRGB>(float a1, double a2, double a3, float a4, double a5, double a6, double a7, double a8, float a9, float a10, float a11, float a12, double a13)
{
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v19 = a12 * a13 + a4 * a5;
  v20 = 1.0;
  if (v19 <= 1.0)
    v20 = a12 * a13 + a4 * a5;
  if (v19 >= 0.0)
    v21 = v20;
  else
    v21 = 0.0;
  v22 = (float)(a9 * a12) * a13 + (float)(a1 * a4) * a5;
  v23 = 1.0;
  if (v21 != 0.0)
    v23 = v21;
  return v22 / v23;
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  __int32 *v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  __int32 *v49;
  __int32 v50;
  __int32 v51;
  __int32 v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  __int32 v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  __int32 *v76;
  __int32 v77;
  __int32 v78;
  __int32 v79;
  __int32 *v80;
  __int32 v81;
  __int32 v82;
  __int32 v83;
  float *v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  unsigned int v111;
  float v112;
  __int128 v113;
  __int128 v114;
  int8x16_t v115;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v107 = v10.f32[0];
      v108 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v107, 2.1992);
      v11.f32[1] = v108;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v115.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v115.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v115);
      return;
    case 1:
      v18 = *(__int32 **)(a2 + 8);
      v19 = v18[1];
      v20 = v18[2];
      v21 = v18[3];
      v115.i32[0] = *v18;
      *(uint64_t *)((char *)v115.i64 + 4) = __PAIR64__(v20, v19);
      v115.i32[3] = v21;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v115);
      return;
    case 2:
      v22 = *(_QWORD *)(a2 + 8);
      v23 = *(float *)(v22 + 4);
      v24 = *(float *)v22;
      v25 = *(float *)(v22 + 8);
      v111 = *(_DWORD *)(v22 + 12);
      v26 = powf(fabsf(*(float *)v22), 2.1992);
      if (v24 >= 0.0)
        v27 = v26;
      else
        v27 = -v26;
      v28 = powf(fabsf(v23), 2.1992);
      if (v23 >= 0.0)
        v29 = v28;
      else
        v29 = -v28;
      v30 = powf(fabsf(v25), 2.1992);
      v115.i64[0] = __PAIR64__(LODWORD(v29), LODWORD(v27));
      if (v25 >= 0.0)
        v31 = v30;
      else
        v31 = -v30;
      v115.i64[1] = __PAIR64__(v111, LODWORD(v31));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v115);
      return;
    case 3:
      v32 = *(_QWORD *)(a2 + 8);
      v33 = *(_DWORD *)(v32 + 12);
      v34 = *(float *)(v32 + 4);
      v112 = *(float *)(v32 + 8);
      v109 = *(float *)v32;
      v35 = fabsf(*(float *)v32);
      if (v35 <= 0.04045)
        v36 = v35 / 12.92;
      else
        v36 = powf((float)(v35 + 0.055) / 1.055, 2.4);
      v91 = fabsf(v34);
      if (v91 <= 0.04045)
        v92 = v91 / 12.92;
      else
        v92 = powf((float)(v91 + 0.055) / 1.055, 2.4);
      v99 = fabsf(v112);
      if (v99 <= 0.04045)
        v100 = v99 / 12.92;
      else
        v100 = powf((float)(v99 + 0.055) / 1.055, 2.4);
      v105 = -v92;
      if (v34 >= 0.0)
        v105 = v92;
      v106 = -v36;
      if (v109 >= 0.0)
        v106 = v36;
      v115.i64[0] = __PAIR64__(LODWORD(v105), LODWORD(v106));
      if (v112 < 0.0)
        v100 = -v100;
      v115.i64[1] = __PAIR64__(v33, LODWORD(v100));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v115);
      return;
    case 4:
      v37 = *(float **)(a2 + 8);
      v38 = v37[1];
      v39 = v37[2];
      v40 = fabsf(*v37);
      if (v40 >= 0.0031308)
        powf(v40, 0.41667);
      v93 = fabsf(v38);
      if (v93 >= 0.0031308)
        powf(v93, 0.41667);
      v101 = fabsf(v39);
      if (v101 >= 0.0031308)
        goto LABEL_113;
      return;
    case 5:
      v41 = *(_QWORD *)(a2 + 8);
      v42 = *(_DWORD *)(v41 + 12);
      v43 = *(float *)v41;
      v44 = *(float *)(v41 + 4);
      v45 = *(float *)(v41 + 8);
      if (fabsf(*(float *)v41) <= 0.03125)
      {
        v48 = v43 * 0.0625;
      }
      else
      {
        v46 = *(float *)v41;
        v47 = powf(v43, 1.8);
        if (v46 >= 0.0)
          v48 = v47;
        else
          v48 = -v47;
      }
      if (fabsf(v44) <= 0.03125)
      {
        v95 = v44 * 0.0625;
      }
      else
      {
        v94 = powf(v44, 1.8);
        if (v44 >= 0.0)
          v95 = v94;
        else
          v95 = -v94;
      }
      if (fabsf(v45) <= 0.03125)
      {
        v102 = v45 * 0.0625;
      }
      else
      {
        v102 = powf(v45, 1.8);
        if (v45 < 0.0)
          v102 = -v102;
      }
      goto LABEL_111;
    case 6:
      v49 = *(__int32 **)(a2 + 8);
      v50 = v49[1];
      v51 = v49[2];
      v52 = v49[3];
      v115.i32[0] = *v49;
      *(uint64_t *)((char *)v115.i64 + 4) = __PAIR64__(v51, v50);
      v115.i32[3] = v52;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v115);
      return;
    case 8:
      v115 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)v115.i32);
      return;
    case 9:
      v115 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v115);
      return;
    case 10:
      v113 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v113);
      *(_QWORD *)&v114 = __PAIR64__(v54, v53);
      *((_QWORD *)&v114 + 1) = __PAIR64__(v56, v55);
      goto LABEL_35;
    case 11:
      v114 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_35:
      v115.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v114);
      *(uint64_t *)((char *)v115.i64 + 4) = __PAIR64__(v58, v57);
      v115.i32[3] = v59;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v115);
      return;
    case 12:
      v115 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::convertColorCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((float *)v115.i32);
      return;
    case 13:
      v114 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v114);
      v115.i64[0] = __PAIR64__(v61, v60);
      v115.i64[1] = __PAIR64__(v63, v62);
      goto LABEL_39;
    case 14:
      v115 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_39:
      v64 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v115.i32);
      v67 = (float)((float)((float)(v64 * -0.96924) + 0.0) + (float)(v65 * 1.876)) + (float)(v66 * 0.041555);
      v68 = (float)((float)((float)(v64 * 0.05563) + 0.0) + (float)(v65 * -0.20398)) + (float)(v66 * 1.057);
      v69 = fabsf((float)((float)((float)(v64 * 3.241) + 0.0) + (float)(v65 * -1.5374)) + (float)(v66 * -0.49861));
      if (v69 >= 0.0031308)
        powf(v69, 0.41667);
      v89 = fabsf(v67);
      if (v89 >= 0.0031308)
        powf(v89, 0.41667);
      v90 = fabsf(v68);
      if (v90 >= 0.0031308)
        powf(v90, 0.41667);
      break;
    case 15:
      v70 = *(_QWORD *)(a2 + 8);
      v42 = *(_DWORD *)(v70 + 12);
      v71 = *(float *)v70;
      v72 = *(float *)(v70 + 4);
      v73 = *(float *)(v70 + 8);
      if (*(float *)v70 <= 0.03125)
      {
        v48 = v71 * 0.0625;
      }
      else
      {
        v74 = powf(v71, 1.8);
        if (v74 > 0.0)
          v75 = v74;
        else
          v75 = 0.0;
        if (v74 >= 1.0)
          v48 = 1.0;
        else
          v48 = v75;
      }
      if (v72 <= 0.03125)
      {
        v95 = v72 * 0.0625;
      }
      else
      {
        v96 = powf(v72, 1.8);
        v97 = 0.0;
        if (v96 > 0.0)
          v97 = v96;
        if (v96 >= 1.0)
          v95 = 1.0;
        else
          v95 = v97;
      }
      if (v73 <= 0.03125)
      {
        v102 = v73 * 0.0625;
      }
      else
      {
        v103 = powf(v73, 1.8);
        v104 = 0.0;
        if (v103 > 0.0)
          v104 = v103;
        if (v103 >= 1.0)
          v102 = 1.0;
        else
          v102 = v104;
      }
LABEL_111:
      v115.i64[0] = __PAIR64__(LODWORD(v95), LODWORD(v48));
      v115.i64[1] = __PAIR64__(v42, LODWORD(v102));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v115);
      break;
    case 16:
      v76 = *(__int32 **)(a2 + 8);
      v77 = v76[1];
      v78 = v76[2];
      v79 = v76[3];
      v115.i32[0] = *v76;
      *(uint64_t *)((char *)v115.i64 + 4) = __PAIR64__(v78, v77);
      v115.i32[3] = v79;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v115);
      break;
    case 18:
      v80 = *(__int32 **)(a2 + 8);
      v81 = v80[1];
      v82 = v80[2];
      v83 = v80[3];
      v115.i32[0] = *v80;
      *(uint64_t *)((char *)v115.i64 + 4) = __PAIR64__(v82, v81);
      v115.i32[3] = v83;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v115);
      break;
    case 19:
      v84 = *(float **)(a2 + 8);
      v85 = v84[1];
      v110 = v84[2];
      v86 = (float)((float)((float)(*v84 * -0.96924) + 0.0) + (float)(v85 * 1.876)) + (float)(v110 * 0.041555);
      v87 = (float)((float)((float)(*v84 * 0.05563) + 0.0) + (float)(v85 * -0.20398)) + (float)(v110 * 1.057);
      v88 = fabsf((float)((float)((float)(*v84 * 3.241) + 0.0) + (float)(v85 * -1.5374)) + (float)(v110 * -0.49861));
      if (v88 >= 0.0031308)
        powf(v88, 0.41667);
      v98 = fabsf(v86);
      if (v98 >= 0.0031308)
        powf(v98, 0.41667);
      v101 = fabsf(v87);
      if (v101 >= 0.0031308)
LABEL_113:
        powf(v101, 0.41667);
      break;
    default:
      return;
  }
}

void WebCore::convertColorCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>(float *a1)
{
  float v1;
  float v2;

  v1 = a1[1];
  v2 = a1[2];
  if (*a1 >= 0.0031308)
    powf(*a1, 0.41667);
  if (v1 >= 0.0031308)
    powf(v1, 0.41667);
  if (v2 >= 0.0031308)
    powf(v2, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v1 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(a1);
  v4 = (float)((float)((float)(v1 * -0.96924) + 0.0) + (float)(v2 * 1.876)) + (float)(v3 * 0.041555);
  v5 = (float)((float)((float)(v1 * 0.05563) + 0.0) + (float)(v2 * -0.20398)) + (float)(v3 * 1.057);
  v6 = fabsf((float)((float)((float)(v1 * 3.241) + 0.0) + (float)(v2 * -1.5374)) + (float)(v3 * -0.49861));
  if (v6 >= 0.0031308)
    powf(v6, 0.41667);
  v7 = fabsf(v4);
  if (v7 >= 0.0031308)
    powf(v7, 0.41667);
  v8 = fabsf(v5);
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
}

void WebCore::Color::callOnUnderlyingType<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  __int128 v7;
  _QWORD v8[2];

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8[0] = a2;
    v8[1] = &v7;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_21ExtendedLinearEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)v8);
  }
  else
  {
    v3 = bswap32(v2);
    v4 = (float)v3 / 255.0;
    v5 = (float)BYTE1(v3) / 255.0;
    if (v4 > 0.04045)
      powf((float)(v4 + 0.055) / 1.055, 2.4);
    v6 = (float)BYTE2(v3) / 255.0;
    if (v5 > 0.04045)
      powf((float)(v5 + 0.055) / 1.055, 2.4);
    if (v6 > 0.04045)
      powf((float)(v6 + 0.055) / 1.055, 2.4);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_21ExtendedLinearEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int8x8_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int8x8_t *v28;
  float v29;
  float v30;
  float32x2_t v31;
  int8x8_t v32;
  float32x2_t v33;
  float32x2_t v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  __int32 v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  _DWORD *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  _DWORD *v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  float *v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  __int128 v93;
  int v94;
  int8x16_t v95;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = v7;
      v9 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v10 = (int8x8_t)vcltz_s32((int32x2_t)v9);
      v11 = vabs_f32(v9);
      v83 = v11.f32[0];
      v85 = powf(v11.f32[1], 2.1992);
      v12.f32[0] = powf(v83, 2.1992);
      v12.f32[1] = v85;
      v13 = vbsl_s8(v10, (int8x8_t)vneg_f32(v12), (int8x8_t)v12);
      __asm { FMOV            V1.2S, #1.0 }
      v19 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v13, (float32x2_t)_D1), _D1, vbic_s8(v13, (int8x8_t)vclez_f32((float32x2_t)v13)));
      goto LABEL_21;
    case 1:
      v24 = *(_DWORD **)(a2 + 8);
      v25 = v24[1];
      v26 = v24[2];
      v27 = v24[3];
      LODWORD(v92) = *v24;
      *(_QWORD *)((char *)&v92 + 4) = __PAIR64__(v26, v25);
      HIDWORD(v92) = v27;
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v92);
      return;
    case 2:
      v28 = *(int8x8_t **)(a2 + 8);
      v3 = v28[1].i32[1];
      v29 = *(float *)v28[1].i32;
      v30 = powf(fabsf(v29), 2.1992);
      if (v29 < 0.0)
        v30 = -v30;
      v8 = v30;
      v31 = (float32x2_t)vand_s8(*v28, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v28), (int8x8_t)vcgez_f32((float32x2_t)*v28)));
      v32 = (int8x8_t)vcltz_s32((int32x2_t)v31);
      v33 = vabs_f32(v31);
      v84 = v33.f32[0];
      v86 = powf(v33.f32[1], 2.1992);
      v34.f32[0] = powf(v84, 2.1992);
      v34.f32[1] = v86;
      v19 = vbsl_s8(v32, (int8x8_t)vneg_f32(v34), (int8x8_t)v34);
LABEL_21:
      *(int8x8_t *)v95.i8 = vand_s8(v19, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v19), (int8x8_t)vcgez_f32((float32x2_t)v19)));
      v95.i64[1] = __PAIR64__(v3, LODWORD(v8));
      v92 = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
      v93 = unk_1968BFBBC;
      v94 = 1065207884;
      v89 = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
      v90 = unk_1968BFBE0;
      v91 = 1065831128;
      WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v95.i32, (float *)&v92, (float *)&v89);
      return;
    case 3:
      v35 = *(_DWORD **)(a2 + 8);
      v36 = v35[1];
      v37 = v35[2];
      v38 = v35[3];
      LODWORD(v92) = *v35;
      *(_QWORD *)((char *)&v92 + 4) = __PAIR64__(v37, v36);
      HIDWORD(v92) = v38;
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)&v92);
      return;
    case 4:
    case 12:
    case 19:
      return;
    case 5:
      v39 = *(_DWORD **)(a2 + 8);
      v40 = v39[1];
      v41 = v39[2];
      v42 = v39[3];
      LODWORD(v92) = *v39;
      *(_QWORD *)((char *)&v92 + 4) = __PAIR64__(v41, v40);
      HIDWORD(v92) = v42;
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v92);
      return;
    case 6:
      v43 = *(_DWORD **)(a2 + 8);
      v44 = v43[1];
      v45 = v43[2];
      v46 = v43[3];
      LODWORD(v92) = *v43;
      *(_QWORD *)((char *)&v92 + 4) = __PAIR64__(v45, v44);
      HIDWORD(v92) = v46;
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v92);
      return;
    case 7:
      v47 = *(float **)(a2 + 8);
      v48 = v47[1];
      v49 = v47[2];
      v50 = fabsf(*v47);
      if (v50 > 0.04045)
        powf((float)(v50 + 0.055) / 1.055, 2.4);
      v81 = fabsf(v48);
      if (v81 > 0.04045)
        powf((float)(v81 + 0.055) / 1.055, 2.4);
      v82 = fabsf(v49);
      if (v82 > 0.04045)
        powf((float)(v82 + 0.055) / 1.055, 2.4);
      return;
    case 8:
      v92 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v51 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v92);
      goto LABEL_29;
    case 9:
      v92 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v51 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v92);
LABEL_29:
      v54 = v52;
      v55 = v53;
      v56 = fabsf(v51);
      if (v56 > 0.04045)
        powf((float)(v56 + 0.055) / 1.055, 2.4);
      v79 = fabsf(v54);
      if (v79 > 0.04045)
        powf((float)(v79 + 0.055) / 1.055, 2.4);
      v80 = fabsf(v55);
      if (v80 > 0.04045)
        powf((float)(v80 + 0.055) / 1.055, 2.4);
      return;
    case 10:
      v87 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v87);
      *(_QWORD *)&v88 = __PAIR64__(v58, v57);
      *((_QWORD *)&v88 + 1) = __PAIR64__(v60, v59);
      goto LABEL_33;
    case 11:
      v88 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_33:
      v95.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v88);
      *(uint64_t *)((char *)v95.i64 + 4) = __PAIR64__(v62, v61);
      v95.i32[3] = v63;
      v92 = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
      v93 = unk_1968BFC28;
      v94 = 1068124526;
      v89 = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
      v90 = unk_1968BFBE0;
      v91 = 1065831128;
      WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v95.i32, (float *)&v92, (float *)&v89);
      return;
    case 13:
      v89 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v89);
      *(_QWORD *)&v92 = __PAIR64__(v65, v64);
      *((_QWORD *)&v92 + 1) = __PAIR64__(v67, v66);
      goto LABEL_36;
    case 14:
      v92 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_36:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v92);
      return;
    case 15:
      v68 = *(_DWORD **)(a2 + 8);
      v69 = v68[1];
      v70 = v68[2];
      v71 = v68[3];
      LODWORD(v92) = *v68;
      *(_QWORD *)((char *)&v92 + 4) = __PAIR64__(v70, v69);
      HIDWORD(v92) = v71;
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v92);
      return;
    case 16:
      v72 = *(_DWORD **)(a2 + 8);
      v73 = v72[1];
      v74 = v72[2];
      v75 = v72[3];
      LODWORD(v92) = *v72;
      *(_QWORD *)((char *)&v92 + 4) = __PAIR64__(v74, v73);
      HIDWORD(v92) = v75;
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v92);
      return;
    case 17:
      v76 = *(float **)(a2 + 8);
      v77 = v76[1];
      v78 = v76[2];
      if (*v76 > 0.04045)
        powf((float)(*v76 + 0.055) / 1.055, 2.4);
      if (v77 > 0.04045)
        powf((float)(v77 + 0.055) / 1.055, 2.4);
      if (v78 <= 0.04045)
        return;
      v23 = (float)(v78 + 0.055) / 1.055;
      break;
    case 18:
      v95 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
      v92 = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
      v93 = unk_1968BFC28;
      v94 = 1068124526;
      v89 = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
      v90 = unk_1968BFBE0;
      v91 = 1065831128;
      WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v95.i32, (float *)&v92, (float *)&v89);
      return;
    default:
      v20 = *(float **)(a2 + 8);
      v21 = v20[1];
      v22 = v20[2];
      if (*v20 > 0.04045)
        powf((float)(*v20 + 0.055) / 1.055, 2.4);
      if (v21 > 0.04045)
        powf((float)(v21 + 0.055) / 1.055, 2.4);
      if (v22 <= 0.04045)
        return;
      v23 = (float)(v22 + 0.055) / 1.055;
      break;
  }
  powf(v23, 2.4);
}

void WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _OWORD v15[2];
  int v16;
  _OWORD v17[2];
  int v18;
  float v19[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = 0.0;
  v4 = a1[1];
  v5 = a1[2];
  if (*a1 <= 0.04045)
  {
    v14 = v1 / 12.92;
    if (v14 >= 0.0)
      v3 = v14;
  }
  else
  {
    v6 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    if (v6 > 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    if (v6 >= 1.0)
      v3 = 1.0;
    else
      v3 = v7;
  }
  if (v4 <= 0.04045)
  {
    if ((float)(v4 / 12.92) >= 0.0)
      v10 = v4 / 12.92;
    else
      v10 = 0.0;
  }
  else
  {
    v8 = powf((float)(v4 + 0.055) / 1.055, 2.4);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v5 <= 0.04045)
  {
    v13 = v5 / 12.92;
    if ((float)(v5 / 12.92) < 0.0)
      v13 = 0.0;
  }
  else
  {
    v11 = powf((float)(v5 + 0.055) / 1.055, 2.4);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v19[0] = v3;
  v19[1] = v10;
  v19[2] = v13;
  v19[3] = v2;
  v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v17[1] = unk_1968BFC04;
  v18 = 1065721848;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v15[1] = unk_1968BFBE0;
  v16 = 1065831128;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v19, (float *)v17, (float *)v15);
}

void WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x8_t *a1)
{
  __int32 v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  int8x8_t v8;
  float v9;
  float v10;
  int32x2_t v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  int8x8_t v16;
  float v17;
  __int32 v18;

  v1 = a1[1].i32[1];
  v2 = *(float *)a1[1].i32;
  v11 = (int32x2_t)vand_s8(*a1, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*a1), (int8x8_t)vcgez_f32((float32x2_t)*a1)));
  v3 = fabsf(*(float *)v11.i32);
  if (v3 <= 0.04045)
    v10 = v3 / 12.92;
  else
    v10 = powf((float)(v3 + 0.055) / 1.055, 2.4);
  v4 = fabsf(*(float *)&v11.i32[1]);
  if (v4 <= 0.04045)
    v5 = v4 / 12.92;
  else
    v5 = powf((float)(v4 + 0.055) / 1.055, 2.4);
  v6 = fabsf(v2);
  if (v6 <= 0.04045)
  {
    v7 = v6 / 12.92;
  }
  else
  {
    v9 = v5;
    v7 = powf((float)(v6 + 0.055) / 1.055, 2.4);
    v5 = v9;
  }
  v8 = vbsl_s8((int8x8_t)vcltz_s32(v11), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v5), LODWORD(v10))), (int8x8_t)__PAIR64__(LODWORD(v5), LODWORD(v10)));
  v16 = vand_s8(v8, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v8), (int8x8_t)vcgez_f32((float32x2_t)v8)));
  if (v2 < 0.0)
    v7 = -v7;
  v17 = v7;
  v18 = v1;
  v14[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v14[1] = unk_1968BFC04;
  v15 = 1065721848;
  v12[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v12[1] = unk_1968BFBE0;
  v13 = 1065831128;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v16, (float *)v14, (float *)v12);
}

void WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  _OWORD v11[2];
  int v12;
  _OWORD v13[2];
  int v14;
  float32x2_t v15;
  float v16;
  int v17;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (fabsf(*(float *)a1) <= 0.03125)
  {
    v7 = v1 * 0.0625;
  }
  else
  {
    v5 = *(float *)a1;
    v6 = powf(v1, 1.8);
    if (v5 >= 0.0)
      v7 = v6;
    else
      v7 = -v6;
  }
  if (fabsf(v3) <= 0.03125)
  {
    v9 = v3 * 0.0625;
  }
  else
  {
    v8 = powf(v3, 1.8);
    if (v3 >= 0.0)
      v9 = v8;
    else
      v9 = -v8;
  }
  if (fabsf(v4) <= 0.03125)
  {
    v10 = v4 * 0.0625;
  }
  else
  {
    v10 = powf(v4, 1.8);
    if (v4 < 0.0)
      v10 = -v10;
  }
  v13[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v13[1] = unk_1968BFC28;
  v14 = 1068124526;
  v11[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v11[1] = unk_1968BFBE0;
  v12 = 1065831128;
  v15 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v7), (float32x2_t)0x3F363AD53E0A6CF7, v9), (float32x2_t)0x38BC9C873D00667BLL, v10);
  v16 = (float)((float)((float)(v7 * 0.0) + 0.0) + (float)(v9 * 0.0)) + (float)(v10 * 0.8251);
  v17 = v2;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v15, (float *)v13, (float *)v11);
}

void WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  float v16[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  if (fabsf(*a1) >= 0.081243)
  {
    v6 = *a1;
    v7 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 < 0.0)
      v7 = -v7;
    v5 = v7;
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v9 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v9 = -v9;
    v8 = v9;
  }
  else
  {
    v8 = v3 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
  {
    v11 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v4 < 0.0)
      v11 = -v11;
    v10 = v11;
  }
  else
  {
    v10 = v4 / 4.5;
  }
  v16[0] = v5;
  v16[1] = v8;
  v16[2] = v10;
  v16[3] = v2;
  v14[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v14[1] = unk_1968BFC4C;
  v15 = 1065864796;
  v12[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v12[1] = unk_1968BFBE0;
  v13 = 1065831128;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v16, (float *)v14, (float *)v12);
}

void WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _OWORD v14[2];
  int v15;
  _OWORD v16[2];
  int v17;
  float32x2_t v18;
  float v19;
  int v20;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (*(float *)a1 <= 0.03125)
  {
    v7 = v1 * 0.0625;
  }
  else
  {
    v5 = powf(v1, 1.8);
    if (v5 > 0.0)
      v6 = v5;
    else
      v6 = 0.0;
    if (v5 >= 1.0)
      v7 = 1.0;
    else
      v7 = v6;
  }
  if (v3 <= 0.03125)
  {
    v10 = v3 * 0.0625;
  }
  else
  {
    v8 = powf(v3, 1.8);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v4 <= 0.03125)
  {
    v13 = v4 * 0.0625;
  }
  else
  {
    v11 = powf(v4, 1.8);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v16[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v16[1] = unk_1968BFC28;
  v17 = 1068124526;
  v14[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v14[1] = unk_1968BFBE0;
  v15 = 1065831128;
  v18 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v7), (float32x2_t)0x3F363AD53E0A6CF7, v10), (float32x2_t)0x38BC9C873D00667BLL, v13);
  v19 = (float)((float)((float)(v7 * 0.0) + 0.0) + (float)(v10 * 0.0)) + (float)(v13 * 0.8251);
  v20 = v2;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v18, (float *)v16, (float *)v14);
}

void WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  _OWORD v11[2];
  int v12;
  _OWORD v13[2];
  int v14;
  float v15[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  if (*a1 >= 0.081243)
  {
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 >= 1.0)
    {
      v5 = 1.0;
    }
    else if (v6 <= 0.0)
    {
      v5 = 0.0;
    }
    else
    {
      v5 = v6;
    }
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v8 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 >= 1.0)
    {
      v7 = 1.0;
    }
    else if (v8 <= 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = v3 / 4.5;
  }
  if (v4 >= 0.081243)
  {
    v10 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v10 >= 1.0)
    {
      v9 = 1.0;
    }
    else if (v10 <= 0.0)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = v4 / 4.5;
  }
  v15[0] = v5;
  v15[1] = v7;
  v15[2] = v9;
  v15[3] = v2;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v13[1] = unk_1968BFC4C;
  v14 = 1065864796;
  v11[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v11[1] = unk_1968BFBE0;
  v12 = 1065831128;
  WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v15, (float *)v13, (float *)v11);
}

void WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = a2;
    v9 = &v7;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_19DisplayP3DescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)&v8);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v7 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v7 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v7 + 3) = (float)HIBYTE(v3) / 255.0;
    LODWORD(v8) = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v7);
    HIDWORD(v8) = v4;
    v9 = (__int128 *)__PAIR64__(v6, v5);
    WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v8);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_19DisplayP3DescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  __int32 v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  __int32 *v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  uint64_t v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  __int32 *v47;
  __int32 v48;
  __int32 v49;
  __int32 v50;
  uint64_t v51;
  unsigned int v52;
  float v53;
  float v54;
  float v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  __int32 v62;
  __int32 *v63;
  __int32 v64;
  __int32 v65;
  __int32 v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  __int32 *v83;
  __int32 v84;
  __int32 v85;
  __int32 v86;
  __int32 *v87;
  __int32 v88;
  __int32 v89;
  __int32 v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  unsigned int v117;
  float v118;
  __int128 v119;
  __int128 v120;
  int8x16_t v121;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v113 = v10.f32[0];
      v114 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v113, 2.1992);
      v11.f32[1] = v114;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v121.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v121.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v121);
      return;
    case 1:
    case 3:
      return;
    case 2:
      v25 = *(_QWORD *)(a2 + 8);
      v26 = *(float *)(v25 + 4);
      v27 = *(float *)v25;
      v28 = *(float *)(v25 + 8);
      v117 = *(_DWORD *)(v25 + 12);
      v29 = powf(fabsf(*(float *)v25), 2.1992);
      if (v27 >= 0.0)
        v30 = v29;
      else
        v30 = -v29;
      v31 = powf(fabsf(v26), 2.1992);
      if (v26 >= 0.0)
        v32 = v31;
      else
        v32 = -v31;
      v33 = powf(fabsf(v28), 2.1992);
      v121.i64[0] = __PAIR64__(LODWORD(v32), LODWORD(v30));
      if (v28 >= 0.0)
        v34 = v33;
      else
        v34 = -v33;
      v121.i64[1] = __PAIR64__(v117, LODWORD(v34));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v121);
      return;
    case 4:
      v35 = *(__int32 **)(a2 + 8);
      v36 = v35[1];
      v37 = v35[2];
      v38 = v35[3];
      v121.i32[0] = *v35;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v37, v36);
      v121.i32[3] = v38;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v121);
      return;
    case 5:
      v39 = *(_QWORD *)(a2 + 8);
      v40 = *(_DWORD *)(v39 + 12);
      v41 = *(float *)v39;
      v42 = *(float *)(v39 + 4);
      v43 = *(float *)(v39 + 8);
      if (fabsf(*(float *)v39) <= 0.03125)
      {
        v46 = v41 * 0.0625;
      }
      else
      {
        v44 = *(float *)v39;
        v45 = powf(v41, 1.8);
        if (v44 >= 0.0)
          v46 = v45;
        else
          v46 = -v45;
      }
      if (fabsf(v42) <= 0.03125)
      {
        v99 = v42 * 0.0625;
      }
      else
      {
        v98 = powf(v42, 1.8);
        if (v42 >= 0.0)
          v99 = v98;
        else
          v99 = -v98;
      }
      if (fabsf(v43) <= 0.03125)
      {
        v105 = v43 * 0.0625;
      }
      else
      {
        v105 = powf(v43, 1.8);
        if (v43 < 0.0)
          v105 = -v105;
      }
      goto LABEL_96;
    case 6:
      v47 = *(__int32 **)(a2 + 8);
      v48 = v47[1];
      v49 = v47[2];
      v50 = v47[3];
      v121.i32[0] = *v47;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v49, v48);
      v121.i32[3] = v50;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v121);
      return;
    case 7:
      v51 = *(_QWORD *)(a2 + 8);
      v52 = *(_DWORD *)(v51 + 12);
      v53 = *(float *)(v51 + 4);
      v118 = *(float *)(v51 + 8);
      v115 = *(float *)v51;
      v54 = fabsf(*(float *)v51);
      if (v54 <= 0.04045)
        v55 = v54 / 12.92;
      else
        v55 = powf((float)(v54 + 0.055) / 1.055, 2.4);
      v100 = fabsf(v53);
      if (v100 <= 0.04045)
        v101 = v100 / 12.92;
      else
        v101 = powf((float)(v100 + 0.055) / 1.055, 2.4);
      v106 = fabsf(v118);
      if (v106 <= 0.04045)
        v107 = v106 / 12.92;
      else
        v107 = powf((float)(v106 + 0.055) / 1.055, 2.4);
      v111 = -v101;
      if (v53 >= 0.0)
        v111 = v101;
      v112 = -v55;
      if (v115 >= 0.0)
        v112 = v55;
      v121.i64[0] = __PAIR64__(LODWORD(v111), LODWORD(v112));
      if (v118 < 0.0)
        v107 = -v107;
      v121.i64[1] = __PAIR64__(v52, LODWORD(v107));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v121);
      return;
    case 8:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::HSLA<float>,void>::convert((float *)v121.i32);
      return;
    case 9:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v121);
      return;
    case 10:
      v119 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v119);
      *(_QWORD *)&v120 = __PAIR64__(v57, v56);
      *((_QWORD *)&v120 + 1) = __PAIR64__(v59, v58);
      goto LABEL_34;
    case 11:
      v120 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_34:
      v121.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v120);
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v61, v60);
      v121.i32[3] = v62;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v121);
      return;
    case 12:
      v63 = *(__int32 **)(a2 + 8);
      v64 = v63[1];
      v65 = v63[2];
      v66 = v63[3];
      v121.i32[0] = *v63;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v65, v64);
      v121.i32[3] = v66;
      goto LABEL_36;
    case 13:
      v120 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v120);
      v121.i64[0] = __PAIR64__(v68, v67);
      v121.i64[1] = __PAIR64__(v70, v69);
      goto LABEL_39;
    case 14:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_39:
      v71 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v121.i32);
      v74 = (float)((float)((float)(v71 * -0.82949) + 0.0) + (float)(v72 * 1.7627)) + (float)(v73 * 0.023625);
      v75 = (float)((float)((float)(v71 * 0.035846) + 0.0) + (float)(v72 * -0.076172)) + (float)(v73 * 0.95688);
      v76 = fabsf((float)((float)((float)(v71 * 2.4935) + 0.0) + (float)(v72 * -0.93138)) + (float)(v73 * -0.40271));
      if (v76 >= 0.0031308)
        powf(v76, 0.41667);
      v96 = fabsf(v74);
      if (v96 >= 0.0031308)
        powf(v96, 0.41667);
      v97 = fabsf(v75);
      if (v97 >= 0.0031308)
        powf(v97, 0.41667);
      break;
    case 15:
      v77 = *(_QWORD *)(a2 + 8);
      v40 = *(_DWORD *)(v77 + 12);
      v78 = *(float *)v77;
      v79 = *(float *)(v77 + 4);
      v80 = *(float *)(v77 + 8);
      if (*(float *)v77 <= 0.03125)
      {
        v46 = v78 * 0.0625;
      }
      else
      {
        v81 = powf(v78, 1.8);
        if (v81 > 0.0)
          v82 = v81;
        else
          v82 = 0.0;
        if (v81 >= 1.0)
          v46 = 1.0;
        else
          v46 = v82;
      }
      if (v79 <= 0.03125)
      {
        v99 = v79 * 0.0625;
      }
      else
      {
        v102 = powf(v79, 1.8);
        v103 = 0.0;
        if (v102 > 0.0)
          v103 = v102;
        if (v102 >= 1.0)
          v99 = 1.0;
        else
          v99 = v103;
      }
      if (v80 <= 0.03125)
      {
        v105 = v80 * 0.0625;
      }
      else
      {
        v108 = powf(v80, 1.8);
        v109 = 0.0;
        if (v108 > 0.0)
          v109 = v108;
        if (v108 >= 1.0)
          v105 = 1.0;
        else
          v105 = v109;
      }
LABEL_96:
      v121.i64[0] = __PAIR64__(LODWORD(v99), LODWORD(v46));
      v121.i64[1] = __PAIR64__(v40, LODWORD(v105));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v121);
      break;
    case 16:
      v83 = *(__int32 **)(a2 + 8);
      v84 = v83[1];
      v85 = v83[2];
      v86 = v83[3];
      v121.i32[0] = *v83;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v85, v84);
      v121.i32[3] = v86;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v121);
      break;
    case 18:
      v87 = *(__int32 **)(a2 + 8);
      v88 = v87[1];
      v89 = v87[2];
      v90 = v87[3];
      v121.i32[0] = *v87;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v89, v88);
      v121.i32[3] = v90;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v121);
      break;
    case 19:
      v91 = *(float **)(a2 + 8);
      v92 = v91[1];
      v116 = v91[2];
      v93 = (float)((float)((float)(*v91 * -0.82949) + 0.0) + (float)(v92 * 1.7627)) + (float)(v116 * 0.023625);
      v94 = (float)((float)((float)(*v91 * 0.035846) + 0.0) + (float)(v92 * -0.076172)) + (float)(v116 * 0.95688);
      v95 = fabsf((float)((float)((float)(*v91 * 2.4935) + 0.0) + (float)(v92 * -0.93138)) + (float)(v116 * -0.40271));
      if (v95 >= 0.0031308)
        powf(v95, 0.41667);
      v104 = fabsf(v93);
      if (v104 >= 0.0031308)
        powf(v104, 0.41667);
      v110 = fabsf(v94);
      if (v110 >= 0.0031308)
        powf(v110, 0.41667);
      break;
    default:
      v18 = *(_DWORD **)(a2 + 8);
      v19 = v18[1];
      v20 = v18[2];
      v21 = v18[3];
      LODWORD(v120) = *v18;
      *(_QWORD *)((char *)&v120 + 4) = __PAIR64__(v20, v19);
      HIDWORD(v120) = v21;
      v121.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v120);
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v23, v22);
      v121.i32[3] = v24;
LABEL_36:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v121);
      break;
  }
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _OWORD v9[2];
  int v10;
  _OWORD v11[2];
  int v12;
  int8x16_t v13;

  v13 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v11[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
  v11[1] = unk_1968BFBBC;
  v12 = 1065207884;
  v10 = 1064629858;
  v9[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v9[1] = unk_1969EF318;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v13.i32, (float *)v11, (float *)v9);
  v3 = v2;
  v5 = v4;
  v6 = fabsf(v1);
  if (v6 >= 0.0031308)
    powf(v6, 0.41667);
  v7 = fabsf(v3);
  if (v7 >= 0.0031308)
    powf(v7, 0.41667);
  v8 = fabsf(v5);
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  float v16[4];

  v16[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v16[1] = v1;
  v16[2] = v2;
  v16[3] = v3;
  v15 = 1064523283;
  v14[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
  v14[1] = unk_1969EF2D0;
  v13 = 1064629858;
  v12[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v12[1] = unk_1969EF318;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v16, (float *)v14, (float *)v12);
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v4);
  if (v9 >= 0.0031308)
    powf(v9, 0.41667);
  v10 = fabsf(v6);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  v11 = fabsf(v8);
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _OWORD v13[2];
  int v14;
  _OWORD v15[2];
  int v16;
  float32x2_t v17;
  float v18;
  int v19;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v15[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v15[1] = unk_1968BFC28;
  v16 = 1068124526;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v13[1] = unk_1969EF318;
  v14 = 1064629858;
  v17 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v1), (float32x2_t)0x3F363AD53E0A6CF7, v2), (float32x2_t)0x38BC9C873D00667BLL, v3);
  v18 = (float)((float)((float)(v1 * 0.0) + 0.0) + (float)(v2 * 0.0)) + (float)(v3 * 0.8251);
  v19 = v4;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v17, (float *)v15, (float *)v13);
  v7 = v6;
  v9 = v8;
  v10 = fabsf(v5);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  v11 = fabsf(v7);
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
  v12 = fabsf(v9);
  if (v12 >= 0.0031308)
    powf(v12, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  int8x16_t v12;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (fabsf(*(float *)a1) >= 0.081243)
  {
    v6 = *(float *)a1;
    v7 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 < 0.0)
      v7 = -v7;
    v5 = v7;
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v9 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v9 = -v9;
    v8 = v9;
  }
  else
  {
    v8 = v3 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
  {
    v11 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v4 < 0.0)
      v11 = -v11;
    v10 = v11;
  }
  else
  {
    v10 = v4 / 4.5;
  }
  v12.i64[0] = __PAIR64__(LODWORD(v8), LODWORD(v5));
  v12.i64[1] = __PAIR64__(v2, LODWORD(v10));
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v12);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _OWORD v9[2];
  int v10;
  _OWORD v11[2];
  int v12;
  int8x16_t v13;

  v13 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v11[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v11[1] = unk_1968BFC4C;
  v12 = 1065864796;
  v10 = 1064629858;
  v9[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v9[1] = unk_1969EF318;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v13.i32, (float *)v11, (float *)v9);
  v3 = v2;
  v5 = v4;
  v6 = fabsf(v1);
  if (v6 >= 0.0031308)
    powf(v6, 0.41667);
  v7 = fabsf(v3);
  if (v7 >= 0.0031308)
    powf(v7, 0.41667);
  v8 = fabsf(v5);
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::HSLA<float>,void>::convert(float *a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD v17[4];

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert(a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v1);
  if (v9 <= 0.04045)
    v10 = v9 / 12.92;
  else
    v10 = powf((float)(v9 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v6);
  if (v11 <= 0.04045)
    v12 = v11 / 12.92;
  else
    v12 = powf((float)(v11 + 0.055) / 1.055, 2.4);
  v13 = fabsf(v8);
  if (v13 <= 0.04045)
    v14 = v13 / 12.92;
  else
    v14 = powf((float)(v13 + 0.055) / 1.055, 2.4);
  v15 = -v12;
  if (v6 >= 0.0)
    v15 = v12;
  v16 = -v10;
  if (v4 >= 0.0)
    v16 = v10;
  *(float *)v17 = v16;
  *(float *)&v17[1] = v15;
  if (v8 < 0.0)
    v14 = -v14;
  *(float *)&v17[2] = v14;
  v17[3] = v3;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v17);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::HWBA<float>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD v17[4];

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert(a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v1);
  if (v9 <= 0.04045)
    v10 = v9 / 12.92;
  else
    v10 = powf((float)(v9 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v6);
  if (v11 <= 0.04045)
    v12 = v11 / 12.92;
  else
    v12 = powf((float)(v11 + 0.055) / 1.055, 2.4);
  v13 = fabsf(v8);
  if (v13 <= 0.04045)
    v14 = v13 / 12.92;
  else
    v14 = powf((float)(v13 + 0.055) / 1.055, 2.4);
  v15 = -v12;
  if (v6 >= 0.0)
    v15 = v12;
  v16 = -v10;
  if (v4 >= 0.0)
    v16 = v10;
  *(float *)v17 = v16;
  *(float *)&v17[1] = v15;
  if (v8 < 0.0)
    v14 = -v14;
  *(float *)&v17[2] = v14;
  v17[3] = v3;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v17);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  float v16[4];

  v16[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v16[1] = v1;
  v16[2] = v2;
  v16[3] = v3;
  v14[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v14[1] = unk_1968BFC28;
  v15 = 1068124526;
  v13 = 1064629858;
  v12[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v12[1] = unk_1969EF318;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v16, (float *)v14, (float *)v12);
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v4);
  if (v9 >= 0.0031308)
    powf(v9, 0.41667);
  v10 = fabsf(v6);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  v11 = fabsf(v8);
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  float v16[4];

  v16[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v16[1] = v1;
  v16[2] = v2;
  v16[3] = v3;
  v15 = 1064523283;
  v14[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
  v14[1] = unk_1969EF2D0;
  v13 = 1064629858;
  v12[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v12[1] = unk_1969EF318;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v16, (float *)v14, (float *)v12);
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v4);
  if (v9 >= 0.0031308)
    powf(v9, 0.41667);
  v10 = fabsf(v6);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  v11 = fabsf(v8);
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  int8x16_t v11;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (*(float *)a1 >= 0.081243)
  {
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 >= 1.0)
    {
      v5 = 1.0;
    }
    else if (v6 <= 0.0)
    {
      v5 = 0.0;
    }
    else
    {
      v5 = v6;
    }
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v8 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 >= 1.0)
    {
      v7 = 1.0;
    }
    else if (v8 <= 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = v3 / 4.5;
  }
  if (v4 >= 0.081243)
  {
    v10 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v10 >= 1.0)
    {
      v9 = 1.0;
    }
    else if (v10 <= 0.0)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = v4 / 4.5;
  }
  v11.i64[0] = __PAIR64__(LODWORD(v7), LODWORD(v5));
  v11.i64[1] = __PAIR64__(v2, LODWORD(v9));
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v11);
}

float WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;
  __int128 v16;
  _OWORD v17[2];
  int v18;
  _OWORD v19[2];
  int v20;
  float v21[4];

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v17[0] = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    *(_QWORD *)&v19[0] = a2;
    *((_QWORD *)&v19[0] + 1) = v17;
    return _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_16A98RGBDescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)v19);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v16 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v16 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v16 + 3) = (float)HIBYTE(v3) / 255.0;
    v21[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v16);
    v21[1] = v4;
    v21[2] = v5;
    v21[3] = v6;
    v20 = 1064523283;
    v19[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
    v19[1] = unk_1969EF2D0;
    v18 = 1065480513;
    v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
    v17[1] = unk_1969EF3A8;
    v7 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v21, (float *)v19, (float *)v17);
    v9 = v8;
    v11 = v10;
    v12 = LODWORD(v7);
    v13 = powf(fabsf(v7), 0.45471);
    if (v12 >= 0)
      v14 = v13;
    else
      v14 = -v13;
    powf(fabsf(v9), 0.45471);
    powf(fabsf(v11), 0.45471);
  }
  return v14;
}

float _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_16A98RGBDescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int32 v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  float v14;
  float v15;
  float v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  float v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  float v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  __int32 v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  int v54;
  float v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  _DWORD *v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  _DWORD *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  int v80;
  float v81;
  float v82;
  float *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  int8x16_t v99;

  switch(a1)
  {
    case 0:
      return **(float **)(a2 + 8);
    case 1:
      v17 = *(_DWORD **)(a2 + 8);
      v18 = v17[1];
      v19 = v17[2];
      v20 = v17[3];
      LODWORD(v96) = *v17;
      *(_QWORD *)((char *)&v96 + 4) = __PAIR64__(v19, v18);
      HIDWORD(v96) = v20;
      v21 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v96);
      goto LABEL_31;
    case 2:
      return **(float **)(a2 + 8);
    case 3:
      v22 = *(_DWORD **)(a2 + 8);
      v23 = v22[1];
      v24 = v22[2];
      v25 = v22[3];
      LODWORD(v96) = *v22;
      *(_QWORD *)((char *)&v96 + 4) = __PAIR64__(v24, v23);
      HIDWORD(v96) = v25;
      v21 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)&v96);
      goto LABEL_31;
    case 4:
    case 12:
      v99 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
      v98 = 1064523283;
      v96 = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
      v97 = unk_1969EF2D0;
      goto LABEL_33;
    case 5:
      v26 = *(_DWORD **)(a2 + 8);
      v27 = v26[1];
      v28 = v26[2];
      v29 = v26[3];
      LODWORD(v96) = *v26;
      *(_QWORD *)((char *)&v96 + 4) = __PAIR64__(v28, v27);
      HIDWORD(v96) = v29;
      v21 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v96);
      goto LABEL_31;
    case 6:
      v30 = *(_DWORD **)(a2 + 8);
      v31 = v30[1];
      v32 = v30[2];
      v33 = v30[3];
      LODWORD(v96) = *v30;
      *(_QWORD *)((char *)&v96 + 4) = __PAIR64__(v32, v31);
      HIDWORD(v96) = v33;
      v21 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v96);
      goto LABEL_31;
    case 7:
      v34 = *(_DWORD **)(a2 + 8);
      v35 = v34[1];
      v36 = v34[2];
      v37 = v34[3];
      LODWORD(v96) = *v34;
      *(_QWORD *)((char *)&v96 + 4) = __PAIR64__(v36, v35);
      HIDWORD(v96) = v37;
      v21 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)&v96);
      goto LABEL_31;
    case 8:
      v93 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v38 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v93);
      goto LABEL_16;
    case 9:
      v93 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v38 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v93);
LABEL_16:
      *(_QWORD *)&v96 = __PAIR64__(v39, LODWORD(v38));
      *((_QWORD *)&v96 + 1) = __PAIR64__(v41, v40);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)&v96);
    case 10:
      v91 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v91);
      *(_QWORD *)&v92 = __PAIR64__(v43, v42);
      *((_QWORD *)&v92 + 1) = __PAIR64__(v45, v44);
      goto LABEL_19;
    case 11:
      v92 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_19:
      v99.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v92);
      *(uint64_t *)((char *)v99.i64 + 4) = __PAIR64__(v47, v46);
      v99.i32[3] = v48;
      v96 = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
      v97 = unk_1968BFC28;
      v98 = 1068124526;
      v95 = 1065480513;
      v93 = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
      v94 = unk_1969EF3A8;
      v49 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v99.i32, (float *)&v96, (float *)&v93);
      v51 = v50;
      v53 = v52;
      v54 = LODWORD(v49);
      v55 = powf(fabsf(v49), 0.45471);
      if (v54 >= 0)
        v16 = v55;
      else
        v16 = -v55;
      powf(fabsf(v51), 0.45471);
      powf(fabsf(v53), 0.45471);
      return v16;
    case 13:
      v93 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v93);
      *(_QWORD *)&v96 = __PAIR64__(v57, v56);
      *((_QWORD *)&v96 + 1) = __PAIR64__(v59, v58);
      goto LABEL_25;
    case 14:
      v96 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_25:
      v60 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v96);
      v63 = (float)((float)((float)(v60 * -0.96924) + 0.0) + (float)(v61 * 1.876)) + (float)(v62 * 0.041555);
      v64 = (float)((float)((float)(v60 * 0.013444) + 0.0) + (float)(v61 * -0.11836)) + (float)(v62 * 1.0152);
      v65 = (float)((float)((float)(v60 * 2.0416) + 0.0) + (float)(v61 * -0.56501)) + (float)(v62 * -0.34473);
      v66 = powf(fabsf(v65), 0.45471);
      if (v65 >= 0.0)
        v16 = v66;
      else
        v16 = -v66;
      powf(fabsf(v63), 0.45471);
      powf(fabsf(v64), 0.45471);
      return v16;
    case 15:
      v67 = *(_DWORD **)(a2 + 8);
      v68 = v67[1];
      v69 = v67[2];
      v70 = v67[3];
      LODWORD(v96) = *v67;
      *(_QWORD *)((char *)&v96 + 4) = __PAIR64__(v69, v68);
      HIDWORD(v96) = v70;
      v21 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v96);
      goto LABEL_31;
    case 16:
      v71 = *(_DWORD **)(a2 + 8);
      v72 = v71[1];
      v73 = v71[2];
      v74 = v71[3];
      LODWORD(v96) = *v71;
      *(_QWORD *)((char *)&v96 + 4) = __PAIR64__(v73, v72);
      HIDWORD(v96) = v74;
      v21 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v96);
LABEL_31:
      v16 = v21;
      break;
    case 18:
      v99 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
      v96 = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
      v97 = unk_1968BFC28;
      v98 = 1068124526;
LABEL_33:
      v95 = 1065480513;
      v93 = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
      v94 = unk_1969EF3A8;
      v75 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v99.i32, (float *)&v96, (float *)&v93);
      v77 = v76;
      v79 = v78;
      v80 = LODWORD(v75);
      v81 = powf(fabsf(v75), 0.45471);
      if (v80 >= 0)
        v82 = v81;
      else
        v82 = -v81;
      powf(fabsf(v77), 0.45471);
      powf(fabsf(v79), 0.45471);
      v16 = v82;
      break;
    case 19:
      v83 = *(float **)(a2 + 8);
      v84 = *v83;
      v85 = v83[1];
      v86 = v83[2];
      v87 = (float)((float)((float)(*v83 * 2.0416) + 0.0) + (float)(v85 * -0.56501)) + (float)(v86 * -0.34473);
      v88 = powf(fabsf(v87), 0.45471);
      if (v87 < 0.0)
        v88 = -v88;
      v16 = v88;
      powf(fabsf((float)((float)((float)(v84 * -0.96924) + 0.0) + (float)(v85 * 1.876)) + (float)(v86 * 0.041555)), 0.45471);
      powf(fabsf((float)((float)((float)(v84 * 0.013444) + 0.0) + (float)(v85 * -0.11836)) + (float)(v86 * 1.0152)), 0.45471);
      break;
    default:
      v2 = *(_DWORD **)(a2 + 8);
      v3 = v2[1];
      v4 = v2[2];
      v90 = v2[3];
      LODWORD(v92) = *v2;
      *(_QWORD *)((char *)&v92 + 4) = __PAIR64__(v4, v3);
      HIDWORD(v92) = v90;
      v99.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v92);
      *(uint64_t *)((char *)v99.i64 + 4) = __PAIR64__(v6, v5);
      v99.i32[3] = v7;
      v98 = 1064523283;
      v96 = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
      v97 = unk_1969EF2D0;
      v95 = 1065480513;
      v93 = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
      v94 = unk_1969EF3A8;
      v8 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v99.i32, (float *)&v96, (float *)&v93);
      v10 = v9;
      v12 = v11;
      v13 = LODWORD(v8);
      v14 = powf(fabsf(v8), 0.45471);
      if (v13 >= 0)
        v15 = v14;
      else
        v15 = -v14;
      powf(fabsf(v10), 0.45471);
      powf(fabsf(v12), 0.45471);
      v16 = v15;
      break;
  }
  return v16;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v23;
  _OWORD v24[2];
  int v25;
  _OWORD v26[2];
  int v27;
  float v28[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = 0.0;
  v4 = a1[1];
  v5 = a1[2];
  if (*a1 <= 0.04045)
  {
    v23 = v1 / 12.92;
    if (v23 >= 0.0)
      v3 = v23;
  }
  else
  {
    v6 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    if (v6 > 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    if (v6 >= 1.0)
      v3 = 1.0;
    else
      v3 = v7;
  }
  if (v4 <= 0.04045)
  {
    if ((float)(v4 / 12.92) >= 0.0)
      v10 = v4 / 12.92;
    else
      v10 = 0.0;
  }
  else
  {
    v8 = powf((float)(v4 + 0.055) / 1.055, 2.4);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v5 <= 0.04045)
  {
    v13 = v5 / 12.92;
    if ((float)(v5 / 12.92) < 0.0)
      v13 = 0.0;
  }
  else
  {
    v11 = powf((float)(v5 + 0.055) / 1.055, 2.4);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v28[0] = v3;
  v28[1] = v10;
  v28[2] = v13;
  v28[3] = v2;
  v26[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v26[1] = unk_1968BFC04;
  v27 = 1065721848;
  v25 = 1065480513;
  v24[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
  v24[1] = unk_1969EF3A8;
  v14 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v28, (float *)v26, (float *)v24);
  v16 = v15;
  v18 = v17;
  v19 = LODWORD(v14);
  v20 = powf(fabsf(v14), 0.45471);
  if (v19 >= 0)
    v21 = v20;
  else
    v21 = -v20;
  powf(fabsf(v16), 0.45471);
  powf(fabsf(v18), 0.45471);
  return v21;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x8_t *a1)
{
  __int32 v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  int8x8_t v8;
  int8x8_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  float v16;
  float v17;
  float v19;
  float v20;
  int32x2_t v21;
  _OWORD v22[2];
  int v23;
  _OWORD v24[2];
  int v25;
  int8x8_t v26;
  float v27;
  __int32 v28;

  v1 = a1[1].i32[1];
  v2 = *(float *)a1[1].i32;
  v21 = (int32x2_t)vand_s8(*a1, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*a1), (int8x8_t)vcgez_f32((float32x2_t)*a1)));
  v3 = fabsf(*(float *)v21.i32);
  if (v3 <= 0.04045)
    v20 = v3 / 12.92;
  else
    v20 = powf((float)(v3 + 0.055) / 1.055, 2.4);
  v4 = fabsf(*(float *)&v21.i32[1]);
  if (v4 <= 0.04045)
    v5 = v4 / 12.92;
  else
    v5 = powf((float)(v4 + 0.055) / 1.055, 2.4);
  v6 = fabsf(v2);
  if (v6 <= 0.04045)
  {
    v7 = v6 / 12.92;
  }
  else
  {
    v19 = v5;
    v7 = powf((float)(v6 + 0.055) / 1.055, 2.4);
    v5 = v19;
  }
  v8 = (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v5), LODWORD(v20)));
  if (v2 < 0.0)
    v7 = -v7;
  v9 = vbsl_s8((int8x8_t)vcltz_s32(v21), v8, (int8x8_t)__PAIR64__(LODWORD(v5), LODWORD(v20)));
  v26 = vand_s8(v9, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v9), (int8x8_t)vcgez_f32((float32x2_t)v9)));
  v27 = v7;
  v28 = v1;
  v24[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v24[1] = unk_1968BFC04;
  v25 = 1065721848;
  v23 = 1065480513;
  v22[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
  v22[1] = unk_1969EF3A8;
  v10 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v26, (float *)v24, (float *)v22);
  v12 = v11;
  v14 = v13;
  v15 = LODWORD(v10);
  v16 = powf(fabsf(v10), 0.45471);
  if (v15 >= 0)
    v17 = v16;
  else
    v17 = -v16;
  powf(fabsf(v12), 0.45471);
  powf(fabsf(v14), 0.45471);
  return v17;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;
  _OWORD v20[2];
  int v21;
  _OWORD v22[2];
  int v23;
  float32x2_t v24;
  float v25;
  int v26;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (fabsf(*(float *)a1) <= 0.03125)
  {
    v7 = v1 * 0.0625;
  }
  else
  {
    v5 = *(float *)a1;
    v6 = powf(v1, 1.8);
    if (v5 >= 0.0)
      v7 = v6;
    else
      v7 = -v6;
  }
  if (fabsf(v3) <= 0.03125)
  {
    v9 = v3 * 0.0625;
  }
  else
  {
    v8 = powf(v3, 1.8);
    if (v3 >= 0.0)
      v9 = v8;
    else
      v9 = -v8;
  }
  if (fabsf(v4) <= 0.03125)
  {
    v10 = v4 * 0.0625;
  }
  else
  {
    v10 = powf(v4, 1.8);
    if (v4 < 0.0)
      v10 = -v10;
  }
  v22[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v22[1] = unk_1968BFC28;
  v23 = 1068124526;
  v20[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
  v20[1] = unk_1969EF3A8;
  v21 = 1065480513;
  v24 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v7), (float32x2_t)0x3F363AD53E0A6CF7, v9), (float32x2_t)0x38BC9C873D00667BLL, v10);
  v25 = (float)((float)((float)(v7 * 0.0) + 0.0) + (float)(v9 * 0.0)) + (float)(v10 * 0.8251);
  v26 = v2;
  v11 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v24, (float *)v22, (float *)v20);
  v13 = v12;
  v15 = v14;
  v16 = LODWORD(v11);
  v17 = powf(fabsf(v11), 0.45471);
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = -v17;
  powf(fabsf(v13), 0.45471);
  powf(fabsf(v15), 0.45471);
  return v18;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;
  _OWORD v21[2];
  int v22;
  _OWORD v23[2];
  int v24;
  float v25[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  if (fabsf(*a1) >= 0.081243)
  {
    v6 = *a1;
    v7 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 < 0.0)
      v7 = -v7;
    v5 = v7;
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v9 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v9 = -v9;
    v8 = v9;
  }
  else
  {
    v8 = v3 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
  {
    v11 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v4 < 0.0)
      v11 = -v11;
    v10 = v11;
  }
  else
  {
    v10 = v4 / 4.5;
  }
  v25[0] = v5;
  v25[1] = v8;
  v25[2] = v10;
  v25[3] = v2;
  v23[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v23[1] = unk_1968BFC4C;
  v24 = 1065864796;
  v22 = 1065480513;
  v21[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
  v21[1] = unk_1969EF3A8;
  v12 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v25, (float *)v23, (float *)v21);
  v14 = v13;
  v16 = v15;
  v17 = LODWORD(v12);
  v18 = powf(fabsf(v12), 0.45471);
  if (v17 >= 0)
    v19 = v18;
  else
    v19 = -v18;
  powf(fabsf(v14), 0.45471);
  powf(fabsf(v16), 0.45471);
  return v19;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(int8x8_t *a1)
{
  __int32 v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  int8x8_t v8;
  int8x8_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  float v16;
  float v17;
  float v19;
  float v20;
  int32x2_t v21;
  _OWORD v22[2];
  int v23;
  _OWORD v24[2];
  int v25;
  int8x8_t v26;
  float v27;
  __int32 v28;

  v1 = a1[1].i32[1];
  v2 = *(float *)a1[1].i32;
  v21 = (int32x2_t)vand_s8(*a1, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*a1), (int8x8_t)vcgez_f32((float32x2_t)*a1)));
  v3 = fabsf(*(float *)v21.i32);
  if (v3 <= 0.04045)
    v20 = v3 / 12.92;
  else
    v20 = powf((float)(v3 + 0.055) / 1.055, 2.4);
  v4 = fabsf(*(float *)&v21.i32[1]);
  if (v4 <= 0.04045)
    v5 = v4 / 12.92;
  else
    v5 = powf((float)(v4 + 0.055) / 1.055, 2.4);
  v6 = fabsf(v2);
  if (v6 <= 0.04045)
  {
    v7 = v6 / 12.92;
  }
  else
  {
    v19 = v5;
    v7 = powf((float)(v6 + 0.055) / 1.055, 2.4);
    v5 = v19;
  }
  v8 = (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v5), LODWORD(v20)));
  if (v2 < 0.0)
    v7 = -v7;
  v9 = vbsl_s8((int8x8_t)vcltz_s32(v21), v8, (int8x8_t)__PAIR64__(LODWORD(v5), LODWORD(v20)));
  v26 = vand_s8(v9, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v9), (int8x8_t)vcgez_f32((float32x2_t)v9)));
  v27 = v7;
  v28 = v1;
  v25 = 1064523283;
  v24[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
  v24[1] = unk_1969EF2D0;
  v23 = 1065480513;
  v22[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
  v22[1] = unk_1969EF3A8;
  v10 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v26, (float *)v24, (float *)v22);
  v12 = v11;
  v14 = v13;
  v15 = LODWORD(v10);
  v16 = powf(fabsf(v10), 0.45471);
  if (v15 >= 0)
    v17 = v16;
  else
    v17 = -v16;
  powf(fabsf(v12), 0.45471);
  powf(fabsf(v14), 0.45471);
  return v17;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  _OWORD v23[2];
  int v24;
  _OWORD v25[2];
  int v26;
  float32x2_t v27;
  float v28;
  int v29;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (*(float *)a1 <= 0.03125)
  {
    v7 = v1 * 0.0625;
  }
  else
  {
    v5 = powf(v1, 1.8);
    if (v5 > 0.0)
      v6 = v5;
    else
      v6 = 0.0;
    if (v5 >= 1.0)
      v7 = 1.0;
    else
      v7 = v6;
  }
  if (v3 <= 0.03125)
  {
    v10 = v3 * 0.0625;
  }
  else
  {
    v8 = powf(v3, 1.8);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v4 <= 0.03125)
  {
    v13 = v4 * 0.0625;
  }
  else
  {
    v11 = powf(v4, 1.8);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v25[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v25[1] = unk_1968BFC28;
  v26 = 1068124526;
  v23[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
  v23[1] = unk_1969EF3A8;
  v24 = 1065480513;
  v27 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v7), (float32x2_t)0x3F363AD53E0A6CF7, v10), (float32x2_t)0x38BC9C873D00667BLL, v13);
  v28 = (float)((float)((float)(v7 * 0.0) + 0.0) + (float)(v10 * 0.0)) + (float)(v13 * 0.8251);
  v29 = v2;
  v14 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v27, (float *)v25, (float *)v23);
  v16 = v15;
  v18 = v17;
  v19 = LODWORD(v14);
  v20 = powf(fabsf(v14), 0.45471);
  if (v19 >= 0)
    v21 = v20;
  else
    v21 = -v20;
  powf(fabsf(v16), 0.45471);
  powf(fabsf(v18), 0.45471);
  return v21;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;
  _OWORD v20[2];
  int v21;
  _OWORD v22[2];
  int v23;
  float v24[4];

  v1 = *a1;
  v2 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  if (*a1 >= 0.081243)
  {
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 >= 1.0)
    {
      v5 = 1.0;
    }
    else if (v6 <= 0.0)
    {
      v5 = 0.0;
    }
    else
    {
      v5 = v6;
    }
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v8 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 >= 1.0)
    {
      v7 = 1.0;
    }
    else if (v8 <= 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = v3 / 4.5;
  }
  if (v4 >= 0.081243)
  {
    v10 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v10 >= 1.0)
    {
      v9 = 1.0;
    }
    else if (v10 <= 0.0)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = v4 / 4.5;
  }
  v24[0] = v5;
  v24[1] = v7;
  v24[2] = v9;
  v24[3] = v2;
  v22[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v22[1] = unk_1968BFC4C;
  v23 = 1065864796;
  v21 = 1065480513;
  v20[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
  v20[1] = unk_1969EF3A8;
  v11 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v24, (float *)v22, (float *)v20);
  v13 = v12;
  v15 = v14;
  v16 = LODWORD(v11);
  v17 = powf(fabsf(v11), 0.45471);
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = -v17;
  powf(fabsf(v13), 0.45471);
  powf(fabsf(v15), 0.45471);
  return v18;
}

void WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = a2;
    v9 = &v7;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_21ProPhotoRGBDescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)&v8);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v7 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v7 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v7 + 3) = (float)HIBYTE(v3) / 255.0;
    LODWORD(v8) = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v7);
    HIDWORD(v8) = v4;
    v9 = (__int128 *)__PAIR64__(v6, v5);
    WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v8);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_21ProPhotoRGBDescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  __int32 v24;
  __int32 *v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  __int32 *v44;
  __int32 v45;
  __int32 v46;
  __int32 v47;
  __int32 *v48;
  __int32 v49;
  __int32 v50;
  __int32 v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  __int32 v58;
  __int32 *v59;
  __int32 v60;
  __int32 v61;
  __int32 v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  __int32 v69;
  __int32 *v70;
  __int32 v71;
  __int32 v72;
  __int32 v73;
  __int32 *v74;
  __int32 v75;
  __int32 v76;
  __int32 v77;
  uint64_t v78;
  unsigned int v79;
  float v80;
  float v81;
  float v82;
  __int32 *v83;
  __int32 v84;
  __int32 v85;
  __int32 v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  unsigned int v103;
  float v104;
  float v105;
  __int128 v106;
  __int128 v107;
  int8x16_t v108;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v99 = v10.f32[0];
      v100 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v99, 2.1992);
      v11.f32[1] = v100;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v108.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v108.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)&v108);
      return;
    case 1:
      v25 = *(__int32 **)(a2 + 8);
      v26 = v25[1];
      v27 = v25[2];
      v28 = v25[3];
      v108.i32[0] = *v25;
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v27, v26);
      v108.i32[3] = v28;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v108);
      return;
    case 2:
      v29 = *(_QWORD *)(a2 + 8);
      v30 = *(float *)(v29 + 4);
      v31 = *(float *)v29;
      v32 = *(float *)(v29 + 8);
      v103 = *(_DWORD *)(v29 + 12);
      v33 = powf(fabsf(*(float *)v29), 2.1992);
      if (v31 >= 0.0)
        v34 = v33;
      else
        v34 = -v33;
      v35 = powf(fabsf(v30), 2.1992);
      if (v30 >= 0.0)
        v36 = v35;
      else
        v36 = -v35;
      v37 = powf(fabsf(v32), 2.1992);
      v108.i64[0] = __PAIR64__(LODWORD(v36), LODWORD(v34));
      if (v32 >= 0.0)
        v38 = v37;
      else
        v38 = -v37;
      v108.i64[1] = __PAIR64__(v103, LODWORD(v38));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)&v108);
      return;
    case 3:
      v39 = *(_QWORD *)(a2 + 8);
      v40 = *(_DWORD *)(v39 + 12);
      v41 = *(float *)(v39 + 4);
      v104 = *(float *)(v39 + 8);
      v101 = *(float *)v39;
      v42 = fabsf(*(float *)v39);
      if (v42 <= 0.04045)
        v43 = v42 / 12.92;
      else
        v43 = powf((float)(v42 + 0.055) / 1.055, 2.4);
      v87 = fabsf(v41);
      if (v87 <= 0.04045)
        v88 = v87 / 12.92;
      else
        v88 = powf((float)(v87 + 0.055) / 1.055, 2.4);
      v91 = fabsf(v104);
      if (v91 <= 0.04045)
        v92 = v91 / 12.92;
      else
        v92 = powf((float)(v91 + 0.055) / 1.055, 2.4);
      v95 = -v88;
      if (v41 >= 0.0)
        v95 = v88;
      v96 = -v43;
      if (v101 >= 0.0)
        v96 = v43;
      v108.i64[0] = __PAIR64__(LODWORD(v95), LODWORD(v96));
      if (v104 < 0.0)
        v92 = -v92;
      v108.i64[1] = __PAIR64__(v40, LODWORD(v92));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v108);
      return;
    case 4:
      v44 = *(__int32 **)(a2 + 8);
      v45 = v44[1];
      v46 = v44[2];
      v47 = v44[3];
      v108.i32[0] = *v44;
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v46, v45);
      v108.i32[3] = v47;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v108);
      return;
    case 5:
    case 15:
      return;
    case 6:
      v48 = *(__int32 **)(a2 + 8);
      v49 = v48[1];
      v50 = v48[2];
      v51 = v48[3];
      v108.i32[0] = *v48;
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v50, v49);
      v108.i32[3] = v51;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v108);
      return;
    case 7:
      v78 = *(_QWORD *)(a2 + 8);
      v79 = *(_DWORD *)(v78 + 12);
      v80 = *(float *)(v78 + 4);
      v105 = *(float *)(v78 + 8);
      v102 = *(float *)v78;
      v81 = fabsf(*(float *)v78);
      if (v81 <= 0.04045)
        v82 = v81 / 12.92;
      else
        v82 = powf((float)(v81 + 0.055) / 1.055, 2.4);
      v89 = fabsf(v80);
      if (v89 <= 0.04045)
        v90 = v89 / 12.92;
      else
        v90 = powf((float)(v89 + 0.055) / 1.055, 2.4);
      v93 = fabsf(v105);
      if (v93 <= 0.04045)
        v94 = v93 / 12.92;
      else
        v94 = powf((float)(v93 + 0.055) / 1.055, 2.4);
      v97 = -v90;
      if (v80 >= 0.0)
        v97 = v90;
      v98 = -v82;
      if (v102 >= 0.0)
        v98 = v82;
      v108.i64[0] = __PAIR64__(LODWORD(v97), LODWORD(v98));
      if (v105 < 0.0)
        v94 = -v94;
      v108.i64[1] = __PAIR64__(v79, LODWORD(v94));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v108);
      return;
    case 8:
      v108 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::HSLA<float>,void>::convert((float *)v108.i32);
      return;
    case 9:
      v108 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v108);
      return;
    case 10:
      v106 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v106);
      *(_QWORD *)&v107 = __PAIR64__(v53, v52);
      *((_QWORD *)&v107 + 1) = __PAIR64__(v55, v54);
      goto LABEL_31;
    case 11:
      v107 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_31:
      v108.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v107);
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v57, v56);
      v108.i32[3] = v58;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v108);
      return;
    case 12:
      v59 = *(__int32 **)(a2 + 8);
      v60 = v59[1];
      v61 = v59[2];
      v62 = v59[3];
      v108.i32[0] = *v59;
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v61, v60);
      v108.i32[3] = v62;
      goto LABEL_33;
    case 13:
      v106 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v106);
      *(_QWORD *)&v107 = __PAIR64__(v64, v63);
      *((_QWORD *)&v107 + 1) = __PAIR64__(v66, v65);
      goto LABEL_36;
    case 14:
      v107 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_36:
      v108.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v107);
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v68, v67);
      v108.i32[3] = v69;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(&v108);
      break;
    case 16:
      v70 = *(__int32 **)(a2 + 8);
      v71 = v70[1];
      v72 = v70[2];
      v73 = v70[3];
      v108.i32[0] = *v70;
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v72, v71);
      v108.i32[3] = v73;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v108);
      break;
    case 18:
      v74 = *(__int32 **)(a2 + 8);
      v75 = v74[1];
      v76 = v74[2];
      v77 = v74[3];
      v108.i32[0] = *v74;
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v76, v75);
      v108.i32[3] = v77;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v108);
      break;
    case 19:
      v83 = *(__int32 **)(a2 + 8);
      v84 = v83[1];
      v85 = v83[2];
      v86 = v83[3];
      v108.i32[0] = *v83;
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v85, v84);
      v108.i32[3] = v86;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(&v108);
      break;
    default:
      v18 = *(_DWORD **)(a2 + 8);
      v19 = v18[1];
      v20 = v18[2];
      v21 = v18[3];
      LODWORD(v107) = *v18;
      *(_QWORD *)((char *)&v107 + 4) = __PAIR64__(v20, v19);
      HIDWORD(v107) = v21;
      v108.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v107);
      *(uint64_t *)((char *)v108.i64 + 4) = __PAIR64__(v23, v22);
      v108.i32[3] = v24;
LABEL_33:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v108);
      break;
  }
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  float32x2_t v14;
  float v15;
  int v16;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v12[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v12[1] = unk_1969EF33C;
  v13 = 1061190357;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::xyzToLinear;
  v10[1] = unk_1969EF360;
  v11 = 1067131329;
  v14 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E983D9A3F13A095, v1), (float32x2_t)0x3F209AE63E3E02FBLL, v2), (float32x2_t)0x3D9A32683E40BF03, v3);
  v15 = (float)((float)((float)(v1 * 0.027031) + 0.0) + (float)(v2 * 0.070689)) + (float)(v3 * 0.99134);
  v16 = v4;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v14, (float *)v12, (float *)v10);
  v7 = v6;
  v9 = v8;
  if (fabsf(v5) >= 0.0019531)
    pow(v5, 0.55555557);
  if (fabsf(v7) >= 0.0019531)
    pow(v7, 0.55555557);
  if (fabsf(v9) >= 0.0019531)
    pow(v9, 0.55555557);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _DWORD v15[4];

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = 0.0;
  v4 = *(float *)(a1 + 4);
  v5 = *(float *)(a1 + 8);
  if (*(float *)a1 <= 0.04045)
  {
    v14 = v1 / 12.92;
    if (v14 >= 0.0)
      v3 = v14;
  }
  else
  {
    v6 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    if (v6 > 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    if (v6 >= 1.0)
      v3 = 1.0;
    else
      v3 = v7;
  }
  if (v4 <= 0.04045)
  {
    if ((float)(v4 / 12.92) >= 0.0)
      v10 = v4 / 12.92;
    else
      v10 = 0.0;
  }
  else
  {
    v8 = powf((float)(v4 + 0.055) / 1.055, 2.4);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v5 <= 0.04045)
  {
    v13 = v5 / 12.92;
    if ((float)(v5 / 12.92) < 0.0)
      v13 = 0.0;
  }
  else
  {
    v11 = powf((float)(v5 + 0.055) / 1.055, 2.4);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  *(float *)v15 = v3;
  *(float *)&v15[1] = v10;
  *(float *)&v15[2] = v13;
  v15[3] = v2;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)v15);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  float32x2_t v14;
  float v15;
  int v16;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v12[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v12[1] = unk_1969EF33C;
  v13 = 1061190357;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::xyzToLinear;
  v10[1] = unk_1969EF360;
  v11 = 1067131329;
  v14 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E6A784F3EF91FD4, v1), (float32x2_t)0x3F3115C73E880599, v2), (float32x2_t)0x3DA2612D3E4AF979, v3);
  v15 = (float)((float)((float)(v1 * 0.0) + 0.0) + (float)(v2 * 0.045113)) + (float)(v3 * 1.0439);
  v16 = v4;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v14, (float *)v12, (float *)v10);
  v7 = v6;
  v9 = v8;
  if (fabsf(v5) >= 0.0019531)
    pow(v5, 0.55555557);
  if (fabsf(v7) >= 0.0019531)
    pow(v7, 0.55555557);
  if (fabsf(v9) >= 0.0019531)
    pow(v9, 0.55555557);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  float32x2_t v14;
  float v15;
  int v16;

  v1 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v13 = 1061190357;
  v12[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v12[1] = unk_1969EF33C;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::xyzToLinear;
  v10[1] = unk_1969EF360;
  v11 = 1067131329;
  v14 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v1), (float32x2_t)0x3F37154B3EB7154BLL, v2), (float32x2_t)0x3D93D9913E38CFF5, v3);
  v15 = (float)((float)((float)(v1 * 0.019331) + 0.0) + (float)(v2 * 0.11919)) + (float)(v3 * 0.95053);
  v16 = v4;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v14, (float *)v12, (float *)v10);
  v7 = v6;
  v9 = v8;
  if (fabsf(v5) >= 0.0019531)
    pow(v5, 0.55555557);
  if (fabsf(v7) >= 0.0019531)
    pow(v7, 0.55555557);
  if (fabsf(v9) >= 0.0019531)
    pow(v9, 0.55555557);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  _DWORD v12[4];

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (fabsf(*(float *)a1) >= 0.081243)
  {
    v6 = *(float *)a1;
    v7 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 < 0.0)
      v7 = -v7;
    v5 = v7;
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v9 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v9 = -v9;
    v8 = v9;
  }
  else
  {
    v8 = v3 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
  {
    v11 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v4 < 0.0)
      v11 = -v11;
    v10 = v11;
  }
  else
  {
    v10 = v4 / 4.5;
  }
  *(float *)v12 = v5;
  *(float *)&v12[1] = v8;
  *(float *)&v12[2] = v10;
  v12[3] = v2;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)v12);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  float32x2_t v14;
  float v15;
  int v16;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v12[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v12[1] = unk_1969EF33C;
  v13 = 1061190357;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::xyzToLinear;
  v10[1] = unk_1969EF360;
  v11 = 1067131329;
  v14 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E8680A43F230FAFLL, v1), (float32x2_t)0x3F2D91483E141674, v2), (float32x2_t)0x3D72E65B3E2CEF22, v3);
  v15 = (float)((float)((float)(v1 * 0.0) + 0.0) + (float)(v2 * 0.028073)) + (float)(v3 * 1.061);
  v16 = v4;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v14, (float *)v12, (float *)v10);
  v7 = v6;
  v9 = v8;
  if (fabsf(v5) >= 0.0019531)
    pow(v5, 0.55555557);
  if (fabsf(v7) >= 0.0019531)
    pow(v7, 0.55555557);
  if (fabsf(v9) >= 0.0019531)
    pow(v9, 0.55555557);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::HSLA<float>,void>::convert(float *a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD v17[4];

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert(a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v1);
  if (v9 <= 0.04045)
    v10 = v9 / 12.92;
  else
    v10 = powf((float)(v9 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v6);
  if (v11 <= 0.04045)
    v12 = v11 / 12.92;
  else
    v12 = powf((float)(v11 + 0.055) / 1.055, 2.4);
  v13 = fabsf(v8);
  if (v13 <= 0.04045)
    v14 = v13 / 12.92;
  else
    v14 = powf((float)(v13 + 0.055) / 1.055, 2.4);
  v15 = -v12;
  if (v6 >= 0.0)
    v15 = v12;
  v16 = -v10;
  if (v4 >= 0.0)
    v16 = v10;
  *(float *)v17 = v16;
  *(float *)&v17[1] = v15;
  if (v8 < 0.0)
    v14 = -v14;
  *(float *)&v17[2] = v14;
  v17[3] = v3;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v17);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::HWBA<float>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD v17[4];

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert(a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v1);
  if (v9 <= 0.04045)
    v10 = v9 / 12.92;
  else
    v10 = powf((float)(v9 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v6);
  if (v11 <= 0.04045)
    v12 = v11 / 12.92;
  else
    v12 = powf((float)(v11 + 0.055) / 1.055, 2.4);
  v13 = fabsf(v8);
  if (v13 <= 0.04045)
    v14 = v13 / 12.92;
  else
    v14 = powf((float)(v13 + 0.055) / 1.055, 2.4);
  v15 = -v12;
  if (v6 >= 0.0)
    v15 = v12;
  v16 = -v10;
  if (v4 >= 0.0)
    v16 = v10;
  *(float *)v17 = v16;
  *(float *)&v17[1] = v15;
  if (v8 < 0.0)
    v14 = -v14;
  *(float *)&v17[2] = v14;
  v17[3] = v3;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v17);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v1 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v3 = (float)((float)(v1 * 0.0) + 0.0) + (float)(v2 * 0.0);
  v5 = (float)((float)((float)(v1 * -0.54463) + 0.0) + (float)(v2 * 1.5082)) + (float)(v4 * 0.020527);
  v6 = (float)((float)((float)(v1 * 1.3458) + 0.0) + (float)(v2 * -0.25557)) + (float)(v4 * -0.051102);
  v7 = v5;
  v8 = v3 + (float)(v4 * 1.212);
  if (fabsf(v6) >= 0.0019531)
    pow(v6, 0.55555557);
  if (fabsf(v7) >= 0.0019531)
    pow(v7, 0.55555557);
  if (fabsf(v8) >= 0.0019531)
    pow(v8, 0.55555557);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  float32x2_t v14;
  float v15;
  int v16;

  v1 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v12[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v12[1] = unk_1969EF33C;
  v13 = 1061190357;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::xyzToLinear;
  v10[1] = unk_1969EF360;
  v11 = 1067131329;
  v14 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v1), (float32x2_t)0x3F37154B3EB7154BLL, v2), (float32x2_t)0x3D93D9913E38CFF5, v3);
  v15 = (float)((float)((float)(v1 * 0.019331) + 0.0) + (float)(v2 * 0.11919)) + (float)(v3 * 0.95053);
  v16 = v4;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v14, (float *)v12, (float *)v10);
  v7 = v6;
  v9 = v8;
  if (fabsf(v5) >= 0.0019531)
    pow(v5, 0.55555557);
  if (fabsf(v7) >= 0.0019531)
    pow(v7, 0.55555557);
  if (fabsf(v9) >= 0.0019531)
    pow(v9, 0.55555557);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int8x16_t v10;

  v10 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v9 = 1061190357;
  v8[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
  v8[1] = unk_1969EF33C;
  v7 = 1067131329;
  v6[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::xyzToLinear;
  v6[1] = unk_1969EF360;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v10.i32, (float *)v8, (float *)v6);
  v3 = v2;
  v5 = v4;
  if (fabsf(v1) >= 0.0019531)
    pow(v1, 0.55555557);
  if (fabsf(v3) >= 0.0019531)
    pow(v3, 0.55555557);
  if (fabsf(v5) >= 0.0019531)
    pow(v5, 0.55555557);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  _DWORD v11[4];

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (*(float *)a1 >= 0.081243)
  {
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 >= 1.0)
    {
      v5 = 1.0;
    }
    else if (v6 <= 0.0)
    {
      v5 = 0.0;
    }
    else
    {
      v5 = v6;
    }
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v8 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 >= 1.0)
    {
      v7 = 1.0;
    }
    else if (v8 <= 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = v3 / 4.5;
  }
  if (v4 >= 0.081243)
  {
    v10 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v10 >= 1.0)
    {
      v9 = 1.0;
    }
    else if (v10 <= 0.0)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = v4 / 4.5;
  }
  *(float *)v11 = v5;
  *(float *)&v11[1] = v7;
  *(float *)&v11[2] = v9;
  v11[3] = v2;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)v11);
}

void WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = a2;
    v9 = &v7;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_17Rec2020DescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)&v8);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v7 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v7 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v7 + 3) = (float)HIBYTE(v3) / 255.0;
    LODWORD(v8) = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v7);
    HIDWORD(v8) = v4;
    v9 = (__int128 *)__PAIR64__(v6, v5);
    WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v8);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_20ExtendedGammaEncodedIfNS_17Rec2020DescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  __int32 v24;
  __int32 *v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  __int32 *v44;
  __int32 v45;
  __int32 v46;
  __int32 v47;
  uint64_t v48;
  unsigned int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  __int32 v62;
  __int32 *v63;
  __int32 v64;
  __int32 v65;
  __int32 v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  __int32 v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  __int32 *v80;
  __int32 v81;
  __int32 v82;
  __int32 v83;
  uint64_t v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  __int32 *v89;
  __int32 v90;
  __int32 v91;
  __int32 v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  unsigned int v116;
  float v117;
  float v118;
  __int128 v119;
  __int128 v120;
  int8x16_t v121;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v112 = v10.f32[0];
      v113 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v112, 2.1992);
      v11.f32[1] = v113;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v121.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v121.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v121);
      return;
    case 1:
      v25 = *(__int32 **)(a2 + 8);
      v26 = v25[1];
      v27 = v25[2];
      v28 = v25[3];
      v121.i32[0] = *v25;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v27, v26);
      v121.i32[3] = v28;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v121);
      return;
    case 2:
      v29 = *(_QWORD *)(a2 + 8);
      v30 = *(float *)(v29 + 4);
      v31 = *(float *)v29;
      v32 = *(float *)(v29 + 8);
      v116 = *(_DWORD *)(v29 + 12);
      v33 = powf(fabsf(*(float *)v29), 2.1992);
      if (v31 >= 0.0)
        v34 = v33;
      else
        v34 = -v33;
      v35 = powf(fabsf(v30), 2.1992);
      if (v30 >= 0.0)
        v36 = v35;
      else
        v36 = -v35;
      v37 = powf(fabsf(v32), 2.1992);
      v121.i64[0] = __PAIR64__(LODWORD(v36), LODWORD(v34));
      if (v32 >= 0.0)
        v38 = v37;
      else
        v38 = -v37;
      v121.i64[1] = __PAIR64__(v116, LODWORD(v38));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v121);
      return;
    case 3:
      v39 = *(_QWORD *)(a2 + 8);
      v40 = *(_DWORD *)(v39 + 12);
      v41 = *(float *)(v39 + 4);
      v117 = *(float *)(v39 + 8);
      v114 = *(float *)v39;
      v42 = fabsf(*(float *)v39);
      if (v42 <= 0.04045)
        v43 = v42 / 12.92;
      else
        v43 = powf((float)(v42 + 0.055) / 1.055, 2.4);
      v93 = fabsf(v41);
      if (v93 <= 0.04045)
        v94 = v93 / 12.92;
      else
        v94 = powf((float)(v93 + 0.055) / 1.055, 2.4);
      v101 = fabsf(v117);
      if (v101 <= 0.04045)
        v102 = v101 / 12.92;
      else
        v102 = powf((float)(v101 + 0.055) / 1.055, 2.4);
      v108 = -v94;
      if (v41 >= 0.0)
        v108 = v94;
      v109 = -v43;
      if (v114 >= 0.0)
        v109 = v43;
      v121.i64[0] = __PAIR64__(LODWORD(v108), LODWORD(v109));
      if (v117 < 0.0)
        v102 = -v102;
      v121.i64[1] = __PAIR64__(v40, LODWORD(v102));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v121);
      return;
    case 4:
      v44 = *(__int32 **)(a2 + 8);
      v45 = v44[1];
      v46 = v44[2];
      v47 = v44[3];
      v121.i32[0] = *v44;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v46, v45);
      v121.i32[3] = v47;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v121);
      return;
    case 5:
      v48 = *(_QWORD *)(a2 + 8);
      v49 = *(_DWORD *)(v48 + 12);
      v50 = *(float *)v48;
      v51 = *(float *)(v48 + 4);
      v52 = *(float *)(v48 + 8);
      if (fabsf(*(float *)v48) <= 0.03125)
      {
        v55 = v50 * 0.0625;
      }
      else
      {
        v53 = *(float *)v48;
        v54 = powf(v50, 1.8);
        if (v53 >= 0.0)
          v55 = v54;
        else
          v55 = -v54;
      }
      if (fabsf(v51) <= 0.03125)
      {
        v96 = v51 * 0.0625;
      }
      else
      {
        v95 = powf(v51, 1.8);
        if (v51 >= 0.0)
          v96 = v95;
        else
          v96 = -v95;
      }
      if (fabsf(v52) <= 0.03125)
      {
        v103 = v52 * 0.0625;
      }
      else
      {
        v103 = powf(v52, 1.8);
        if (v52 < 0.0)
          v103 = -v103;
      }
      goto LABEL_98;
    case 6:
    case 16:
      return;
    case 7:
      v84 = *(_QWORD *)(a2 + 8);
      v85 = *(_DWORD *)(v84 + 12);
      v86 = *(float *)(v84 + 4);
      v118 = *(float *)(v84 + 8);
      v115 = *(float *)v84;
      v87 = fabsf(*(float *)v84);
      if (v87 <= 0.04045)
        v88 = v87 / 12.92;
      else
        v88 = powf((float)(v87 + 0.055) / 1.055, 2.4);
      v99 = fabsf(v86);
      if (v99 <= 0.04045)
        v100 = v99 / 12.92;
      else
        v100 = powf((float)(v99 + 0.055) / 1.055, 2.4);
      v106 = fabsf(v118);
      if (v106 <= 0.04045)
        v107 = v106 / 12.92;
      else
        v107 = powf((float)(v106 + 0.055) / 1.055, 2.4);
      v110 = -v100;
      if (v86 >= 0.0)
        v110 = v100;
      v111 = -v88;
      if (v115 >= 0.0)
        v111 = v88;
      v121.i64[0] = __PAIR64__(LODWORD(v110), LODWORD(v111));
      if (v118 < 0.0)
        v107 = -v107;
      v121.i64[1] = __PAIR64__(v85, LODWORD(v107));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v121);
      return;
    case 8:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::HSLA<float>,void>::convert((float *)v121.i32);
      return;
    case 9:
      v121 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v121);
      return;
    case 10:
      v119 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v119);
      *(_QWORD *)&v120 = __PAIR64__(v57, v56);
      *((_QWORD *)&v120 + 1) = __PAIR64__(v59, v58);
      goto LABEL_34;
    case 11:
      v120 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_34:
      v121.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v120);
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v61, v60);
      v121.i32[3] = v62;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v121);
      return;
    case 12:
      v63 = *(__int32 **)(a2 + 8);
      v64 = v63[1];
      v65 = v63[2];
      v66 = v63[3];
      v121.i32[0] = *v63;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v65, v64);
      v121.i32[3] = v66;
      goto LABEL_36;
    case 13:
      v119 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v119);
      *(_QWORD *)&v120 = __PAIR64__(v68, v67);
      *((_QWORD *)&v120 + 1) = __PAIR64__(v70, v69);
      goto LABEL_39;
    case 14:
      v120 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_39:
      v121.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v120);
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v72, v71);
      v121.i32[3] = v73;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v121.i32);
      break;
    case 15:
      v74 = *(_QWORD *)(a2 + 8);
      v49 = *(_DWORD *)(v74 + 12);
      v75 = *(float *)v74;
      v76 = *(float *)(v74 + 4);
      v77 = *(float *)(v74 + 8);
      if (*(float *)v74 <= 0.03125)
      {
        v55 = v75 * 0.0625;
      }
      else
      {
        v78 = powf(v75, 1.8);
        if (v78 > 0.0)
          v79 = v78;
        else
          v79 = 0.0;
        if (v78 >= 1.0)
          v55 = 1.0;
        else
          v55 = v79;
      }
      if (v76 <= 0.03125)
      {
        v96 = v76 * 0.0625;
      }
      else
      {
        v97 = powf(v76, 1.8);
        v98 = 0.0;
        if (v97 > 0.0)
          v98 = v97;
        if (v97 >= 1.0)
          v96 = 1.0;
        else
          v96 = v98;
      }
      if (v77 <= 0.03125)
      {
        v103 = v77 * 0.0625;
      }
      else
      {
        v104 = powf(v77, 1.8);
        v105 = 0.0;
        if (v104 > 0.0)
          v105 = v104;
        if (v104 >= 1.0)
          v103 = 1.0;
        else
          v103 = v105;
      }
LABEL_98:
      v121.i64[0] = __PAIR64__(LODWORD(v96), LODWORD(v55));
      v121.i64[1] = __PAIR64__(v49, LODWORD(v103));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v121);
      break;
    case 18:
      v80 = *(__int32 **)(a2 + 8);
      v81 = v80[1];
      v82 = v80[2];
      v83 = v80[3];
      v121.i32[0] = *v80;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v82, v81);
      v121.i32[3] = v83;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v121);
      break;
    case 19:
      v89 = *(__int32 **)(a2 + 8);
      v90 = v89[1];
      v91 = v89[2];
      v92 = v89[3];
      v121.i32[0] = *v89;
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v91, v90);
      v121.i32[3] = v92;
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v121.i32);
      break;
    default:
      v18 = *(_DWORD **)(a2 + 8);
      v19 = v18[1];
      v20 = v18[2];
      v21 = v18[3];
      LODWORD(v120) = *v18;
      *(_QWORD *)((char *)&v120 + 4) = __PAIR64__(v20, v19);
      HIDWORD(v120) = v21;
      v121.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v120);
      *(uint64_t *)((char *)v121.i64 + 4) = __PAIR64__(v23, v22);
      v121.i32[3] = v24;
LABEL_36:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v121);
      break;
  }
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  int v6;
  double v7;
  float v8;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  int8x16_t v14;

  v14 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v12[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
  v12[1] = unk_1968BFBBC;
  v13 = 1065207884;
  v11 = 1064381868;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::xyzToLinear;
  v10[1] = unk_1969EF384;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v14.i32, (float *)v12, (float *)v10);
  v3 = v2;
  v5 = v4;
  if (fabsf(v1) <= 0.018054)
  {
    v8 = v1 * 4.5;
  }
  else
  {
    v6 = LODWORD(v1);
    v7 = (float)(powf(v1, 0.45) * 1.0993) + -0.0992968082;
    if (v6 < 0)
      v7 = -v7;
    v8 = v7;
  }
  if (fabsf(v3) > 0.018054)
    powf(v3, 0.45);
  if (fabsf(v5) > 0.018054)
    powf(v5, 0.45);
  return v8;
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int8x16_t v15;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = 0.0;
  v4 = *(float *)(a1 + 4);
  v5 = *(float *)(a1 + 8);
  if (*(float *)a1 <= 0.04045)
  {
    v14 = v1 / 12.92;
    if (v14 >= 0.0)
      v3 = v14;
  }
  else
  {
    v6 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    if (v6 > 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    if (v6 >= 1.0)
      v3 = 1.0;
    else
      v3 = v7;
  }
  if (v4 <= 0.04045)
  {
    if ((float)(v4 / 12.92) >= 0.0)
      v10 = v4 / 12.92;
    else
      v10 = 0.0;
  }
  else
  {
    v8 = powf((float)(v4 + 0.055) / 1.055, 2.4);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v5 <= 0.04045)
  {
    v13 = v5 / 12.92;
    if ((float)(v5 / 12.92) < 0.0)
      v13 = 0.0;
  }
  else
  {
    v11 = powf((float)(v5 + 0.055) / 1.055, 2.4);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v15.i64[0] = __PAIR64__(LODWORD(v10), LODWORD(v3));
  v15.i64[1] = __PAIR64__(v2, LODWORD(v13));
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v15);
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  int v6;
  double v7;
  float v8;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  int8x16_t v14;

  v14 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v12[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v12[1] = unk_1968BFC04;
  v13 = 1065721848;
  v11 = 1064381868;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::xyzToLinear;
  v10[1] = unk_1969EF384;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v14.i32, (float *)v12, (float *)v10);
  v3 = v2;
  v5 = v4;
  if (fabsf(v1) <= 0.018054)
  {
    v8 = v1 * 4.5;
  }
  else
  {
    v6 = LODWORD(v1);
    v7 = (float)(powf(v1, 0.45) * 1.0993) + -0.0992968082;
    if (v6 < 0)
      v7 = -v7;
    v8 = v7;
  }
  if (fabsf(v3) > 0.018054)
    powf(v3, 0.45);
  if (fabsf(v5) > 0.018054)
    powf(v5, 0.45);
  return v8;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  double v10;
  float v11;
  _OWORD v13[2];
  int v14;
  _OWORD v15[2];
  int v16;
  float v17[4];

  v17[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v17[1] = v1;
  v17[2] = v2;
  v17[3] = v3;
  v16 = 1064523283;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
  v15[1] = unk_1969EF2D0;
  v14 = 1064381868;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::xyzToLinear;
  v13[1] = unk_1969EF384;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v17, (float *)v15, (float *)v13);
  v6 = v5;
  v8 = v7;
  if (fabsf(v4) <= 0.018054)
  {
    v11 = v4 * 4.5;
  }
  else
  {
    v9 = LODWORD(v4);
    v10 = (float)(powf(v4, 0.45) * 1.0993) + -0.0992968082;
    if (v9 < 0)
      v10 = -v10;
    v11 = v10;
  }
  if (fabsf(v6) > 0.018054)
    powf(v6, 0.45);
  if (fabsf(v8) > 0.018054)
    powf(v8, 0.45);
  return v11;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  double v11;
  float v12;
  _OWORD v14[2];
  int v15;
  _OWORD v16[2];
  int v17;
  float32x2_t v18;
  float v19;
  int v20;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v16[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v16[1] = unk_1968BFC28;
  v17 = 1068124526;
  v14[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::xyzToLinear;
  v14[1] = unk_1969EF384;
  v15 = 1064381868;
  v18 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v1), (float32x2_t)0x3F363AD53E0A6CF7, v2), (float32x2_t)0x38BC9C873D00667BLL, v3);
  v19 = (float)((float)((float)(v1 * 0.0) + 0.0) + (float)(v2 * 0.0)) + (float)(v3 * 0.8251);
  v20 = v4;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v18, (float *)v16, (float *)v14);
  v7 = v6;
  v9 = v8;
  if (fabsf(v5) <= 0.018054)
  {
    v12 = v5 * 4.5;
  }
  else
  {
    v10 = LODWORD(v5);
    v11 = (float)(powf(v5, 0.45) * 1.0993) + -0.0992968082;
    if (v10 < 0)
      v11 = -v11;
    v12 = v11;
  }
  if (fabsf(v7) > 0.018054)
    powf(v7, 0.45);
  if (fabsf(v9) > 0.018054)
    powf(v9, 0.45);
  return v12;
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::HSLA<float>,void>::convert(float *a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD v17[4];

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert(a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v1);
  if (v9 <= 0.04045)
    v10 = v9 / 12.92;
  else
    v10 = powf((float)(v9 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v6);
  if (v11 <= 0.04045)
    v12 = v11 / 12.92;
  else
    v12 = powf((float)(v11 + 0.055) / 1.055, 2.4);
  v13 = fabsf(v8);
  if (v13 <= 0.04045)
    v14 = v13 / 12.92;
  else
    v14 = powf((float)(v13 + 0.055) / 1.055, 2.4);
  v15 = -v12;
  if (v6 >= 0.0)
    v15 = v12;
  v16 = -v10;
  if (v4 >= 0.0)
    v16 = v10;
  *(float *)v17 = v16;
  *(float *)&v17[1] = v15;
  if (v8 < 0.0)
    v14 = -v14;
  *(float *)&v17[2] = v14;
  v17[3] = v3;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v17);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::HWBA<float>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD v17[4];

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert(a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v1);
  if (v9 <= 0.04045)
    v10 = v9 / 12.92;
  else
    v10 = powf((float)(v9 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v6);
  if (v11 <= 0.04045)
    v12 = v11 / 12.92;
  else
    v12 = powf((float)(v11 + 0.055) / 1.055, 2.4);
  v13 = fabsf(v8);
  if (v13 <= 0.04045)
    v14 = v13 / 12.92;
  else
    v14 = powf((float)(v13 + 0.055) / 1.055, 2.4);
  v15 = -v12;
  if (v6 >= 0.0)
    v15 = v12;
  v16 = -v10;
  if (v4 >= 0.0)
    v16 = v10;
  *(float *)v17 = v16;
  *(float *)&v17[1] = v15;
  if (v8 < 0.0)
    v14 = -v14;
  *(float *)&v17[2] = v14;
  v17[3] = v3;
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v17);
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  double v10;
  float v11;
  _OWORD v13[2];
  int v14;
  _OWORD v15[2];
  int v16;
  float v17[4];

  v17[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v17[1] = v1;
  v17[2] = v2;
  v17[3] = v3;
  v15[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v15[1] = unk_1968BFC28;
  v16 = 1068124526;
  v14 = 1064381868;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::xyzToLinear;
  v13[1] = unk_1969EF384;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v17, (float *)v15, (float *)v13);
  v6 = v5;
  v8 = v7;
  if (fabsf(v4) <= 0.018054)
  {
    v11 = v4 * 4.5;
  }
  else
  {
    v9 = LODWORD(v4);
    v10 = (float)(powf(v4, 0.45) * 1.0993) + -0.0992968082;
    if (v9 < 0)
      v10 = -v10;
    v11 = v10;
  }
  if (fabsf(v6) > 0.018054)
    powf(v6, 0.45);
  if (fabsf(v8) > 0.018054)
    powf(v8, 0.45);
  return v11;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  double v10;
  float v11;
  _OWORD v13[2];
  int v14;
  _OWORD v15[2];
  int v16;
  float v17[4];

  v17[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v17[1] = v1;
  v17[2] = v2;
  v17[3] = v3;
  v16 = 1064523283;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
  v15[1] = unk_1969EF2D0;
  v14 = 1064381868;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::xyzToLinear;
  v13[1] = unk_1969EF384;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v17, (float *)v15, (float *)v13);
  v6 = v5;
  v8 = v7;
  if (fabsf(v4) <= 0.018054)
  {
    v11 = v4 * 4.5;
  }
  else
  {
    v9 = LODWORD(v4);
    v10 = (float)(powf(v4, 0.45) * 1.0993) + -0.0992968082;
    if (v9 < 0)
      v10 = -v10;
    v11 = v10;
  }
  if (fabsf(v6) > 0.018054)
    powf(v6, 0.45);
  if (fabsf(v8) > 0.018054)
    powf(v8, 0.45);
  return v11;
}

float WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;

  v1 = a1[1];
  v2 = a1[2];
  v3 = (float)((float)((float)(*a1 * 1.7167) + 0.0) + (float)(v1 * -0.35567)) + (float)(v2 * -0.25337);
  v4 = (float)((float)((float)(*a1 * -0.66668) + 0.0) + (float)(v1 * 1.6165)) + (float)(v2 * 0.015769);
  v5 = (float)((float)((float)(*a1 * 0.01764) + 0.0) + (float)(v1 * -0.042771)) + (float)(v2 * 0.9421);
  if (fabsf(v3) <= 0.018054)
  {
    v8 = v3 * 4.5;
  }
  else
  {
    v6 = (float)((float)((float)(*a1 * 1.7167) + 0.0) + (float)(v1 * -0.35567)) + (float)(v2 * -0.25337);
    v7 = (float)(powf(v3, 0.45) * 1.0993) + -0.0992968082;
    if (v6 < 0.0)
      v7 = -v7;
    v8 = v7;
  }
  if (fabsf(v4) > 0.018054)
    powf(v4, 0.45);
  if (fabsf(v5) > 0.018054)
    powf(v5, 0.45);
  return v8;
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int8x8_t v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int8x8_t *v28;
  float v29;
  float v30;
  float32x2_t v31;
  int8x8_t v32;
  float32x2_t v33;
  float32x2_t v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  _DWORD *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _DWORD *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  _OWORD v67[2];
  int v68;
  __int128 v69[2];
  int v70;
  int8x8_t v71;
  float v72;
  __int32 v73;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = v7;
      v9 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v10 = (int8x8_t)vcltz_s32((int32x2_t)v9);
      v11 = vabs_f32(v9);
      v63 = v11.f32[0];
      v65 = powf(v11.f32[1], 2.1992);
      v12.f32[0] = powf(v63, 2.1992);
      v12.f32[1] = v65;
      v13 = vbsl_s8(v10, (int8x8_t)vneg_f32(v12), (int8x8_t)v12);
      __asm { FMOV            V1.2S, #1.0 }
      v19 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v13, (float32x2_t)_D1), _D1, vbic_s8(v13, (int8x8_t)vclez_f32((float32x2_t)v13)));
      goto LABEL_16;
    case 1:
      v24 = *(_DWORD **)(a2 + 8);
      v25 = v24[1];
      v26 = v24[2];
      v27 = v24[3];
      LODWORD(v69[0]) = *v24;
      *(_QWORD *)((char *)v69 + 4) = __PAIR64__(v26, v25);
      HIDWORD(v69[0]) = v27;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)v69);
      return;
    case 2:
      v28 = *(int8x8_t **)(a2 + 8);
      v3 = v28[1].i32[1];
      v29 = *(float *)v28[1].i32;
      v30 = powf(fabsf(v29), 2.1992);
      if (v29 < 0.0)
        v30 = -v30;
      v8 = v30;
      v31 = (float32x2_t)vand_s8(*v28, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v28), (int8x8_t)vcgez_f32((float32x2_t)*v28)));
      v32 = (int8x8_t)vcltz_s32((int32x2_t)v31);
      v33 = vabs_f32(v31);
      v64 = v33.f32[0];
      v66 = powf(v33.f32[1], 2.1992);
      v34.f32[0] = powf(v64, 2.1992);
      v34.f32[1] = v66;
      v19 = vbsl_s8(v32, (int8x8_t)vneg_f32(v34), (int8x8_t)v34);
LABEL_16:
      v71 = vand_s8(v19, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v19), (int8x8_t)vcgez_f32((float32x2_t)v19)));
      v72 = v8;
      v73 = v3;
      v69[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
      v69[1] = unk_1968BFBBC;
      v70 = 1065207884;
      v68 = 1061190357;
      v67[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
      v67[1] = unk_1969EF33C;
      WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v71, (float *)v69, (float *)v67);
      return;
    case 3:
      v35 = *(_DWORD **)(a2 + 8);
      v36 = v35[1];
      v37 = v35[2];
      v38 = v35[3];
      LODWORD(v69[0]) = *v35;
      *(_QWORD *)((char *)v69 + 4) = __PAIR64__(v37, v36);
      HIDWORD(v69[0]) = v38;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)v69);
      return;
    case 4:
      v39 = *(_DWORD **)(a2 + 8);
      v40 = v39[1];
      v41 = v39[2];
      v42 = v39[3];
      LODWORD(v69[0]) = *v39;
      *(_QWORD *)((char *)v69 + 4) = __PAIR64__(v41, v40);
      HIDWORD(v69[0]) = v42;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v69);
      return;
    case 5:
      v69[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::convertColorCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>((float *)v69);
      return;
    case 6:
      v43 = *(_DWORD **)(a2 + 8);
      v44 = v43[1];
      v45 = v43[2];
      v46 = v43[3];
      LODWORD(v69[0]) = *v43;
      *(_QWORD *)((char *)v69 + 4) = __PAIR64__(v45, v44);
      HIDWORD(v69[0]) = v46;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v69);
      return;
    case 7:
      v69[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::convertColorCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v69);
      return;
    case 8:
      v69[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::HSLA<float>,void>::convert((float *)v69);
      return;
    case 9:
      v69[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::HWBA<float>,void>::convert((uint64_t)v69);
      return;
    case 10:
      v67[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)v67);
      *(_QWORD *)&v69[0] = __PAIR64__(v48, v47);
      *((_QWORD *)&v69[0] + 1) = __PAIR64__(v50, v49);
      goto LABEL_26;
    case 11:
      v69[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_26:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)v69);
      return;
    case 12:
      v51 = *(_DWORD **)(a2 + 8);
      v52 = v51[1];
      v53 = v51[2];
      v54 = v51[3];
      LODWORD(v69[0]) = *v51;
      *(_QWORD *)((char *)v69 + 4) = __PAIR64__(v53, v52);
      HIDWORD(v69[0]) = v54;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v69);
      return;
    case 13:
      v67[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)v67);
      *(_QWORD *)&v69[0] = __PAIR64__(v56, v55);
      *((_QWORD *)&v69[0] + 1) = __PAIR64__(v58, v57);
      goto LABEL_30;
    case 14:
      v69[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_30:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v69);
      break;
    case 15:
      v69[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::convertColorCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>((float *)v69);
      break;
    case 16:
      v59 = *(_DWORD **)(a2 + 8);
      v60 = v59[1];
      v61 = v59[2];
      v62 = v59[3];
      LODWORD(v69[0]) = *v59;
      *(_QWORD *)((char *)v69 + 4) = __PAIR64__(v61, v60);
      HIDWORD(v69[0]) = v62;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v69);
      break;
    case 18:
    case 19:
      return;
    default:
      v20 = *(_DWORD **)(a2 + 8);
      v21 = v20[1];
      v22 = v20[2];
      v23 = v20[3];
      LODWORD(v69[0]) = *v20;
      *(_QWORD *)((char *)v69 + 4) = __PAIR64__(v22, v21);
      HIDWORD(v69[0]) = v23;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v69);
      break;
  }
}

void WebCore::convertColorCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(float *a1)
{
  float v1;
  float v2;

  v1 = a1[1];
  v2 = a1[2];
  if (fabsf(*a1) > 0.03125)
    powf(*a1, 1.8);
  if (fabsf(v1) > 0.03125)
    powf(v1, 1.8);
  if (fabsf(v2) > 0.03125)
    powf(v2, 1.8);
}

void WebCore::convertColorCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(uint64_t a1)
{
  int v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _DWORD v13[4];

  v1 = *(_DWORD *)(a1 + 12);
  v2 = *(float *)(a1 + 4);
  v11 = *(float *)a1;
  v12 = *(float *)(a1 + 8);
  v3 = fabsf(*(float *)a1);
  if (v3 <= 0.04045)
    v4 = v3 / 12.92;
  else
    v4 = powf((float)(v3 + 0.055) / 1.055, 2.4);
  v5 = fabsf(v2);
  if (v5 <= 0.04045)
    v6 = v5 / 12.92;
  else
    v6 = powf((float)(v5 + 0.055) / 1.055, 2.4);
  v7 = fabsf(v12);
  if (v7 <= 0.04045)
    v8 = v7 / 12.92;
  else
    v8 = powf((float)(v7 + 0.055) / 1.055, 2.4);
  v9 = -v6;
  if (v2 >= 0.0)
    v9 = v6;
  v10 = -v4;
  if (v11 >= 0.0)
    v10 = v4;
  *(float *)v13 = v10;
  *(float *)&v13[1] = v9;
  if (v12 < 0.0)
    v8 = -v8;
  *(float *)&v13[2] = v8;
  v13[3] = v1;
  WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v13);
}

void WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::HSLA<float>,void>::convert(float *a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD v17[4];

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert(a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v1);
  if (v9 <= 0.04045)
    v10 = v9 / 12.92;
  else
    v10 = powf((float)(v9 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v6);
  if (v11 <= 0.04045)
    v12 = v11 / 12.92;
  else
    v12 = powf((float)(v11 + 0.055) / 1.055, 2.4);
  v13 = fabsf(v8);
  if (v13 <= 0.04045)
    v14 = v13 / 12.92;
  else
    v14 = powf((float)(v13 + 0.055) / 1.055, 2.4);
  v15 = -v12;
  if (v6 >= 0.0)
    v15 = v12;
  v16 = -v10;
  if (v4 >= 0.0)
    v16 = v10;
  *(float *)v17 = v16;
  *(float *)&v17[1] = v15;
  if (v8 < 0.0)
    v14 = -v14;
  *(float *)&v17[2] = v14;
  v17[3] = v3;
  WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v17);
}

void WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::HWBA<float>,void>::convert(uint64_t a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD v17[4];

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert(a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v1);
  if (v9 <= 0.04045)
    v10 = v9 / 12.92;
  else
    v10 = powf((float)(v9 + 0.055) / 1.055, 2.4);
  v11 = fabsf(v6);
  if (v11 <= 0.04045)
    v12 = v11 / 12.92;
  else
    v12 = powf((float)(v11 + 0.055) / 1.055, 2.4);
  v13 = fabsf(v8);
  if (v13 <= 0.04045)
    v14 = v13 / 12.92;
  else
    v14 = powf((float)(v13 + 0.055) / 1.055, 2.4);
  v15 = -v12;
  if (v6 >= 0.0)
    v15 = v12;
  v16 = -v10;
  if (v4 >= 0.0)
    v16 = v10;
  *(float *)v17 = v16;
  *(float *)&v17[1] = v15;
  if (v8 < 0.0)
    v14 = -v14;
  *(float *)&v17[2] = v14;
  v17[3] = v3;
  WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v17);
}

void WebCore::convertColorCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(float *a1)
{
  float v1;
  float v2;

  v1 = a1[1];
  v2 = a1[2];
  if (*a1 > 0.03125)
    powf(*a1, 1.8);
  if (v1 > 0.03125)
    powf(v1, 1.8);
  if (v2 > 0.03125)
    powf(v2, 1.8);
}

void WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossyCarryingForwardMissing<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  __int128 v4;
  __int128 v5;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v4 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    *(_QWORD *)&v5 = a2;
    *((_QWORD *)&v5 + 1) = &v4;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE1EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)&v5);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v5 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v5 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v5 + 3) = (float)HIBYTE(v3) / 255.0;
    WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v5);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color38toColorTypeLossyCarryingForwardMissingINS_4XYZAIfLNS_10WhitePointE1EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  float *v10;
  float v11;
  float v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  _DWORD *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  __int128 v49;
  __int128 v50;

  switch(a1)
  {
    case 0:
    case 2:
      v10 = *(float **)(a2 + 8);
      v11 = v10[1];
      v12 = v10[2];
      powf(fabsf(*v10), 2.1992);
      powf(fabsf(v11), 2.1992);
      powf(fabsf(v12), 2.1992);
      return;
    case 1:
      v6 = *(_DWORD **)(a2 + 8);
      v7 = v6[1];
      v8 = v6[2];
      v9 = v6[3];
      LODWORD(v50) = *v6;
      *(_QWORD *)((char *)&v50 + 4) = __PAIR64__(v8, v7);
      HIDWORD(v50) = v9;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v50);
      return;
    case 3:
      v13 = *(_DWORD **)(a2 + 8);
      v14 = v13[1];
      v15 = v13[2];
      v16 = v13[3];
      LODWORD(v50) = *v13;
      *(_QWORD *)((char *)&v50 + 4) = __PAIR64__(v15, v14);
      HIDWORD(v50) = v16;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v50);
      return;
    case 4:
    case 12:
    case 18:
    case 19:
      return;
    case 5:
      v17 = *(_DWORD **)(a2 + 8);
      v18 = v17[1];
      v19 = v17[2];
      v20 = v17[3];
      LODWORD(v50) = *v17;
      *(_QWORD *)((char *)&v50 + 4) = __PAIR64__(v19, v18);
      HIDWORD(v50) = v20;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v50);
      return;
    case 6:
      v21 = *(_DWORD **)(a2 + 8);
      v22 = v21[1];
      v23 = v21[2];
      v24 = v21[3];
      LODWORD(v50) = *v21;
      *(_QWORD *)((char *)&v50 + 4) = __PAIR64__(v23, v22);
      HIDWORD(v50) = v24;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v50);
      return;
    case 7:
      v25 = *(_DWORD **)(a2 + 8);
      v26 = v25[1];
      v27 = v25[2];
      v28 = v25[3];
      LODWORD(v50) = *v25;
      *(_QWORD *)((char *)&v50 + 4) = __PAIR64__(v27, v26);
      HIDWORD(v50) = v28;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v50);
      return;
    case 8:
      v49 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v29 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v49);
      goto LABEL_11;
    case 9:
      v49 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v29 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v49);
LABEL_11:
      *(_QWORD *)&v50 = __PAIR64__(v30, LODWORD(v29));
      *((_QWORD *)&v50 + 1) = __PAIR64__(v32, v31);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v50);
      return;
    case 10:
      v49 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v49);
      *(_QWORD *)&v50 = __PAIR64__(v34, v33);
      *((_QWORD *)&v50 + 1) = __PAIR64__(v36, v35);
      goto LABEL_14;
    case 11:
      v50 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_14:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v50);
      return;
    case 13:
      v49 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v49);
      *(_QWORD *)&v50 = __PAIR64__(v38, v37);
      *((_QWORD *)&v50 + 1) = __PAIR64__(v40, v39);
      goto LABEL_17;
    case 14:
      v50 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_17:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v50);
      break;
    case 15:
      v41 = *(_DWORD **)(a2 + 8);
      v42 = v41[1];
      v43 = v41[2];
      v44 = v41[3];
      LODWORD(v50) = *v41;
      *(_QWORD *)((char *)&v50 + 4) = __PAIR64__(v43, v42);
      HIDWORD(v50) = v44;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v50);
      break;
    case 16:
      v45 = *(_DWORD **)(a2 + 8);
      v46 = v45[1];
      v47 = v45[2];
      v48 = v45[3];
      LODWORD(v50) = *v45;
      *(_QWORD *)((char *)&v50 + 4) = __PAIR64__(v47, v46);
      HIDWORD(v50) = v48;
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v50);
      break;
    default:
      v2 = *(_DWORD **)(a2 + 8);
      v3 = v2[1];
      v4 = v2[2];
      v5 = v2[3];
      LODWORD(v50) = *v2;
      *(_QWORD *)((char *)&v50 + 4) = __PAIR64__(v4, v3);
      HIDWORD(v50) = v5;
      WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v50);
      break;
  }
}

void WebCore::CSSUnresolvedColor::~CSSUnresolvedColor(WebCore::CSSUnresolvedColor *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 22);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, WebCore::CSSUnresolvedColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v2])(&v3, this);
  *((_DWORD *)this + 22) = -1;
}

uint64_t WebCore::CSSUnresolvedColor::containsCurrentColor(WebCore::CSSUnresolvedColor *this)
{
  uint64_t v1;
  WebCore::CSSUnresolvedColor *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 22);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::CSSUnresolvedColor *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::CSSUnresolvedColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor20containsCurrentColorEvE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSJ_INS8_17HSLFunctionModernEEENSJ_INS8_11HWBFunctionEEENSJ_INS8_11LabFunctionEEENSJ_INS8_11LCHFunctionEEENSJ_INS8_13OKLabFunctionEEENSJ_INS8_13OKLCHFunctionEEENSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_19DisplayP3DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_17Rec2020DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_15SRGBADescriptorEEEEEEENSJ_INSY_INS8_21ExtendedLinearEncodedIfS1G_EEEEEENSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSJ_INS1O_INS1P_IfLS1Q_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(WebCore::CSSUnresolvedColor *this)
{
  uint64_t v1;
  WebCore::CSSUnresolvedColor *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 22);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::CSSUnresolvedColor *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSUnresolvedColor::serializationForCSS(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::CSSUnresolvedColor *))off_1E339A510[v1])(&v5, this);
  }
}

uint64_t WebCore::CSSUnresolvedColor::serializationForCSS(WebCore::CSSUnresolvedColor *this)
{
  uint64_t v1;
  WebCore::CSSUnresolvedColor *v3;
  const WebCore::CSSUnresolvedColor *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 22);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::CSSUnresolvedColor *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSUnresolvedColor::equals(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::CSSUnresolvedColor *))off_1E339A710[v1])(&v6, this);
  }
}

uint64_t WebCore::CSSUnresolvedColor::equals(WebCore::CSSUnresolvedColor *this, const WebCore::CSSUnresolvedColor *a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t result;
  BOOL v9;
  char v10;
  char *v11;

  v4 = *((unsigned int *)this + 22);
  v5 = *((_DWORD *)a2 + 22);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    result = v7;
  else
    result = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v11 = &v10;
    return ((uint64_t (*)(char **, WebCore::CSSUnresolvedColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v4])(&v11, this);
  }
  return result;
}

uint64_t WebCore::CSSUnresolvedColor::createStyleColor(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  _QWORD v8[3];
  _QWORD *v9;

  v7 = a4;
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = &v7;
  v4 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS(v6);
  }
  else
  {
    v9 = v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v9, a1);
  }
}

WTF::StringImpl *WebCore::serializationForCSS(uint64_t a1, unsigned int a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  unint64_t v8;
  WTF::StringImpl *v9;

  v8 = bswap32(a2) | 0x1104000000000000;
  WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v9, v8, (uint64_t *)&v8);
  v4 = v9;
  if (*(_DWORD *)(a1 + 16))
    v5 = 0;
  else
    v5 = *(_QWORD *)(a1 + 8) == 0;
  if (!v5)
  {
    if (v9 && (*((_BYTE *)v9 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_14;
  }
  if (v9)
    *(_DWORD *)v9 += 2;
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v3);
      v4 = v9;
      if (!v9)
        goto LABEL_13;
      goto LABEL_12;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (v4)
LABEL_12:
    LODWORD(v4) = *((_DWORD *)v4 + 1);
LABEL_13:
  *(_DWORD *)(a1 + 16) = (_DWORD)v4;
LABEL_14:
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSColorMix<WebCore::CSSUnresolvedColorMix>(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t (**v3)();
  uint64_t (**v4)();
  double v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t **v43;

  WTF::StringBuilder::append();
  v42 = (uint64_t *)a1;
  v8 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v8 == -1)
    goto LABEL_56;
  v2 = &v42;
  v43 = &v42;
  ((void (*)(uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSERNS6_13StringBuilderERKNS8_24ColorInterpolationMethodEE3__0JEEEEEJRKNS0_6__implIJNSB_3HSLENSB_3HWBENSB_3LCHENSB_3LabENSB_5OKLCHENSB_5OKLabENSB_4SRGBENSB_10SRGBLinearENSB_9DisplayP3ENSB_6A98RGBENSB_11ProPhotoRGBENSB_7Rec2020ENSB_6XYZD50ENSB_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[v8])(&v43, a2);
  WTF::StringBuilder::append();
  v9 = *(_QWORD *)(a2 + 16);
  v42 = (uint64_t *)a1;
  v10 = *(unsigned int *)(v9 + 88);
  if ((_DWORD)v10 == -1)
    goto LABEL_56;
  v43 = &v42;
  v4 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v43);
  v2 = (uint64_t **)(a2 + 24);
  v3 = off_1E339AFE0;
  if (!*(_BYTE *)(a2 + 40))
    goto LABEL_7;
  v41 = 0;
  v42 = &v41;
  v11 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v11 == -1)
    goto LABEL_56;
  v43 = &v42;
  v5 = ((double (*)(uint64_t ***, uint64_t))off_1E339AFE0[v11])(&v43, a2 + 24);
  v13 = v41;
  if (v41)
    goto LABEL_57;
  while (1)
  {
    if (v5 == 50.0)
    {
LABEL_7:
      if (!*(_BYTE *)(a2 + 72))
        goto LABEL_26;
      v41 = 0;
      v42 = &v41;
      v14 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v14 == -1)
        goto LABEL_56;
      v43 = &v42;
      v5 = ((double (*)(uint64_t ***, uint64_t))v3[v14])(&v43, a2 + 56);
      if (v41)
        WTF::fastFree((WTF *)(v41 - 16), v15);
      if (v5 == 50.0)
        goto LABEL_26;
    }
    LOBYTE(v43) = 32;
    v16 = *(_QWORD *)(a1 + 8);
    if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v18 = *(_DWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v16 + 8);
      *(_DWORD *)(a1 + 16) = v17 + 1;
      if ((v18 & 4) != 0)
        *(_BYTE *)(v19 + v17) = 32;
      else
        *(_WORD *)(v19 + 2 * v17) = 32;
    }
    if (*(_BYTE *)(a2 + 40))
    {
      v42 = (uint64_t *)a1;
      v20 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v20 == -1)
        goto LABEL_56;
      v43 = &v42;
      ((void (*)(uint64_t ***, uint64_t **))off_1E339A460[v20])(&v43, v2);
    }
    else
    {
      if (!*(_BYTE *)(a2 + 72))
        goto LABEL_55;
      v41 = 0;
      v42 = &v41;
      v21 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v21 == -1)
        goto LABEL_56;
      v43 = &v42;
      v5 = ((double (*)(uint64_t ***, uint64_t))v3[v21])(&v43, a2 + 56);
      if (v41)
        WTF::fastFree((WTF *)(v41 - 16), v22);
      WebCore::formatCSSNumberValue((WebCore *)a1, (int8x16_t *)"%", 2uLL, 100.0 - v5);
    }
LABEL_26:
    WTF::StringBuilder::append();
    v23 = *(_QWORD *)(a2 + 48);
    v42 = (uint64_t *)a1;
    v24 = *(unsigned int *)(v23 + 88);
    if ((_DWORD)v24 != -1)
    {
      v43 = &v42;
      result = ((uint64_t (*)(uint64_t ***))v4[v24])(&v43);
      if (!*(_BYTE *)(a2 + 40) || !*(_BYTE *)(a2 + 72))
        goto LABEL_46;
      v41 = 0;
      v42 = &v41;
      v26 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v26 != -1)
      {
        v43 = &v42;
        v5 = ((double (*)(uint64_t ***, uint64_t **))v3[v26])(&v43, v2);
        if (v41)
          WTF::fastFree((WTF *)(v41 - 16), v27);
        if (!*(_BYTE *)(a2 + 72))
          goto LABEL_55;
        v41 = 0;
        v42 = &v41;
        v28 = *(unsigned int *)(a2 + 64);
        if ((_DWORD)v28 != -1)
        {
          v2 = (uint64_t **)(a2 + 56);
          v43 = &v42;
          result = ((uint64_t (*)(uint64_t ***, uint64_t))v3[v28])(&v43, a2 + 56);
          if (v41)
          {
            v40 = v30;
            result = WTF::fastFree((WTF *)(v41 - 16), v29);
            v30 = v40;
          }
          if (v5 + v30 == 100.0)
            goto LABEL_46;
          LOBYTE(v43) = 32;
          v31 = *(_QWORD *)(a1 + 8);
          if (!v31 || (v32 = *(unsigned int *)(a1 + 16), v32 >= *(_DWORD *)(v31 + 4)) || *(_QWORD *)a1)
          {
            WTF::StringBuilder::append();
          }
          else
          {
            v33 = *(_DWORD *)(v31 + 16);
            v34 = *(_QWORD *)(v31 + 8);
            *(_DWORD *)(a1 + 16) = v32 + 1;
            if ((v33 & 4) != 0)
              *(_BYTE *)(v34 + v32) = 32;
            else
              *(_WORD *)(v34 + 2 * v32) = 32;
          }
          if (!*(_BYTE *)(a2 + 72))
          {
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          v42 = (uint64_t *)a1;
          v35 = *(unsigned int *)(a2 + 64);
          if ((_DWORD)v35 != -1)
            break;
        }
      }
    }
LABEL_56:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_57:
    WTF::fastFree((WTF *)(v13 - 16), v12);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t ***, uint64_t))off_1E339A460[v35])(&v43, a2 + 56);
LABEL_46:
  LOBYTE(v43) = 41;
  v36 = *(_QWORD *)(a1 + 8);
  if (!v36)
    return WTF::StringBuilder::append();
  v37 = *(unsigned int *)(a1 + 16);
  if (v37 >= *(_DWORD *)(v36 + 4) || *(_QWORD *)a1)
    return WTF::StringBuilder::append();
  v38 = *(_DWORD *)(v36 + 16);
  v39 = *(_QWORD *)(v36 + 8);
  *(_DWORD *)(a1 + 16) = v37 + 1;
  if ((v38 & 4) != 0)
    *(_BYTE *)(v39 + v37) = 41;
  else
    *(_WORD *)(v39 + 2 * v37) = 41;
  return result;
}

void WebCore::CSSUnresolvedColorResolutionDelegate::internalDocumentTextColor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::CSSUnresolvedColorResolutionDelegate::webkitLink(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::CSSUnresolvedColorResolutionDelegate::webkitLinkVisited(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::CSSUnresolvedColorResolutionDelegate::webkitActiveLink(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::CSSUnresolvedColorResolutionDelegate::webkitFocusRingColor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  if (*(_BYTE *)(a2 + 72))
  {
    v3 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E339A270[v3])(&v10, a2 + 56);
    *(_DWORD *)(a2 + 64) = -1;
  }
  v5 = *(unsigned int **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  if (v5)
  {
    v6 = v5[22];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v6])(&v11, v5);
    v5[22] = -1;
    result = WTF::fastFree((WTF *)v5, (void *)a2);
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v7 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v7 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E339A270[v7])(&v12, a2 + 24);
    *(_DWORD *)(a2 + 32) = -1;
  }
  v8 = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v13, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, (void *)a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  uint64_t v7;
  char v8;
  char v9;

  v3 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v3)
  {
    v4 = v3[22];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v4])(&v8, v3);
    v3[22] = -1;
    result = WTF::fastFree((WTF *)v3, a2);
  }
  v6 = (unsigned int *)*a2;
  *a2 = 0;
  if (v6)
  {
    v7 = v6[22];
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v7])(&v9, v6);
    v6[22] = -1;
    return WTF::fastFree((WTF *)v6, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 80))
  {
    v3 = a2[18];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 16);
    a2[18] = -1;
  }
  v5 = a2[14];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 12);
  a2[14] = -1;
  v6 = a2[10];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 8);
  a2[10] = -1;
  v7 = a2[6];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A2B0[v7])(&v13, a2 + 2);
  a2[6] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 80))
  {
    v3 = a2[18];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 16);
    a2[18] = -1;
  }
  v5 = a2[14];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 12);
  a2[14] = -1;
  v6 = a2[10];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 8);
  a2[10] = -1;
  v7 = a2[6];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A2B0[v7])(&v13, a2 + 2);
  a2[6] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 80))
  {
    v3 = a2[18];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 16);
    a2[18] = -1;
  }
  v5 = a2[14];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A2B0[v5])(&v11, a2 + 10);
  a2[14] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 80))
  {
    v3 = a2[18];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 16);
    a2[18] = -1;
  }
  v5 = a2[14];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A2B0[v5])(&v11, a2 + 10);
  a2[14] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1T_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEEEEDcS1V_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)a2 + 72))
  {
    v3 = a2[16];
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v3])(&v10, a2 + 14);
    a2[16] = -1;
  }
  v5 = a2[12];
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v5])(&v11, a2 + 10);
  a2[12] = -1;
  v6 = a2[8];
  if ((_DWORD)v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v6])(&v12, a2 + 6);
  a2[8] = -1;
  v7 = a2[4];
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339A280[v7])(&v13, a2 + 2);
  a2[4] = -1;
  v8 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v14, v8);
    v8[22] = -1;
    return WTF::fastFree((WTF *)v8, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *a3;
  if ((*a2 & 0x8000000000000) == 0)
    return (v4 & 0x8000000000000) == 0 && v3 == v4;
  if ((v4 & 0x8000000000000) != 0
    && *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4)
    && *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8)
    && *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC)
    && *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10))
  {
    return HIBYTE(v3) == HIBYTE(v4) && BYTE6(v3) == BYTE6(v4);
  }
  else
  {
    return 0;
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  char v25;
  char *v26;

  v5 = *(unsigned int *)(a2 + 4);
  v6 = *(_DWORD *)(a3 + 4);
  v7 = v6 == v5;
  v10 = v6 == -1;
  v8 = v6 == -1;
  if (v10)
    v7 = 0;
  if ((_DWORD)v5 == -1)
    v9 = v8;
  else
    v9 = v7;
  v10 = (_DWORD)v5 == -1 || !v7;
  if (!v10)
  {
    v26 = &v25;
    v9 = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A380[v5])(&v26, a2, a3);
  }
  if (v9)
    v11 = *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a3 + 8);
  else
    v11 = 0;
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(unsigned int *)(v12 + 88);
  if ((_DWORD)v13 == -1
    || (v26 = &v25,
        result = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v13])(&v26, v12, v12), (_DWORD)result))
  {
    v15 = (*(_BYTE *)(a2 + 40) != 0) == (*(_BYTE *)(a3 + 40) != 0);
    if (!*(_BYTE *)(a2 + 40) || !*(_BYTE *)(a3 + 40))
      goto LABEL_27;
    v16 = *(unsigned int *)(a2 + 32);
    v17 = *(_DWORD *)(a3 + 32);
    v18 = v17 == v16;
    v10 = v17 == -1;
    v15 = v17 == -1;
    if (v10)
      v18 = 0;
    if ((_DWORD)v16 != -1 && (v15 = v18))
    {
      v26 = &v25;
      if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A450[v16])(&v26, a2 + 24, a3 + 24) & 1) == 0)
        return 0;
    }
    else
    {
LABEL_27:
      if (!v15)
        return 0;
    }
    v19 = *(_QWORD *)(a2 + 48);
    v20 = *(unsigned int *)(v19 + 88);
    if ((_DWORD)v20 == -1
      || (v26 = &v25,
          result = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v20])(&v26, v19, v19), (_DWORD)result))
    {
      result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
      if (*(_BYTE *)(a2 + 72))
      {
        if (*(_BYTE *)(a3 + 72))
        {
          v21 = *(unsigned int *)(a2 + 64);
          v22 = *(_DWORD *)(a3 + 64);
          v23 = v22 == -1;
          v24 = v22 != -1 && v22 == v21;
          if ((_DWORD)v21 == -1)
            result = v23;
          else
            result = v24;
          if ((_DWORD)v21 != -1 && v24)
          {
            v26 = &v25;
            return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A450[v21])(&v26, a2 + 56, a3 + 56);
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t result;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*a2 + 88);
  v6 = *(_DWORD *)(*a3 + 88);
  v7 = v6 != (_DWORD)v5 || v6 == -1;
  v8 = !v7;
  if ((_DWORD)v5 == -1 || v8 == 0)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (v11 != 1)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  v12 = *(unsigned int *)(a2[1] + 88);
  v13 = *(_DWORD *)(a3[1] + 88);
  v14 = v13 == v12;
  v7 = v13 == -1;
  v15 = v13 == -1;
  if (v7)
    v14 = 0;
  if ((_DWORD)v12 == -1)
    result = v15;
  else
    result = v14;
  if ((_DWORD)v12 != -1 && v14)
  {
    v19 = &v18;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v12])(&v19);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 80) != 0) == (*(_BYTE *)(a3 + 80) != 0);
    if (*(_BYTE *)(a2 + 80))
    {
      if (*(_BYTE *)(a3 + 80))
      {
        v13 = *(unsigned int *)(a2 + 72);
        v14 = *(_DWORD *)(a3 + 72);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 64, a3 + 64);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul,7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 80) != 0) == (*(_BYTE *)(a3 + 80) != 0);
    if (*(_BYTE *)(a2 + 80))
    {
      if (*(_BYTE *)(a3 + 80))
      {
        v13 = *(unsigned int *)(a2 + 72);
        v14 = *(_DWORD *)(a3 + 72);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 64, a3 + 64);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul,8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul,9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 80) != 0) == (*(_BYTE *)(a3 + 80) != 0);
    if (*(_BYTE *)(a2 + 80))
    {
      if (*(_BYTE *)(a3 + 80))
      {
        v13 = *(unsigned int *)(a2 + 72);
        v14 = *(_DWORD *)(a3 + 72);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 64, a3 + 64);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul,10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul,11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 80) != 0) == (*(_BYTE *)(a3 + 80) != 0);
    if (*(_BYTE *)(a2 + 80))
    {
      if (*(_BYTE *)(a3 + 80))
      {
        v13 = *(unsigned int *)(a2 + 72);
        v14 = *(_DWORD *)(a3 + 72);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 64, a3 + 64);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul,12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul,13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul,14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul,15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul,16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul,17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul,18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<19ul,19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,std::__variant_detail::_Trait::CSSUnresolvedColorKeyword,std::__variant_detail::_Trait::CSSUnresolvedColorHex,std::__variant_detail::_Trait::CSSUnresolvedColorMix,std::__variant_detail::_Trait::CSSUnresolvedLightDark,std::__variant_detail::_Trait::CSSUnresolvedRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HSLFunctionModern>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::HWBFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::LCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLabFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::CSSUnresolvedLightDark<std::__variant_detail::_Trait::OKLCHFunction><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  char *v19;

  v5 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 88);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore26CSSUnresolvedAbsoluteColorENSC_25CSSUnresolvedColorKeywordENSC_21CSSUnresolvedColorHexENSC_21CSSUnresolvedColorMixENSC_22CSSUnresolvedLightDarkENSC_26CSSUnresolvedRelativeColorINSC_25RGBFunctionModernRelativeEEENSI_INSC_17HSLFunctionModernEEENSI_INSC_11HWBFunctionEEENSI_INSC_11LabFunctionEEENSI_INSC_11LCHFunctionEEENSI_INSC_13OKLabFunctionEEENSI_INSC_13OKLCHFunctionEEENSI_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_19DisplayP3DescriptorEEEEEEENSI_INSX_INSY_IfNSC_21ProPhotoRGBDescriptorEEEEEEENSI_INSX_INSY_IfNSC_17Rec2020DescriptorEEEEEEENSI_INSX_INSY_IfNSC_15SRGBADescriptorEEEEEEENSI_INSX_INSC_21ExtendedLinearEncodedIfS1F_EEEEEENSI_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEENSI_INS1N_INS1O_IfLS1P_1EEEEEEEEEES1Y_EEEDcmOT_DpOT0____fdiagonal[v5])(&v19) & 1) == 0)
      return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v17, (unsigned int *)(a2 + 8), (_DWORD *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = (*(_BYTE *)(a2 + 72) != 0) == (*(_BYTE *)(a3 + 72) != 0);
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_BYTE *)(a3 + 72))
      {
        v13 = *(unsigned int *)(a2 + 64);
        v14 = *(_DWORD *)(a3 + 64);
        v15 = v14 == -1;
        v16 = v14 != -1 && v14 == v13;
        if ((_DWORD)v13 == -1)
          result = v15;
        else
          result = v16;
        if ((_DWORD)v13 != -1 && v16)
        {
          v19 = &v18;
          return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339A3F0[v13])(&v19, a2 + 56, a3 + 56);
        }
      }
    }
  }
  return result;
}

uint64_t std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  uint64_t result;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  _BOOL4 v22;
  char v23;
  char *v24;

  v5 = a2[2];
  v6 = a3[2];
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v24 = &v23;
    if ((((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A3F0[v5])(&v24, a2, a3) & 1) == 0)
      return 0;
  }
  v12 = a2[6];
  v13 = a3[6];
  v15 = v13 == (_DWORD)v12 && v13 != -1;
  if ((_DWORD)v12 == -1 || !v15)
  {
    v17 = v13 == -1;
    if ((_DWORD)v12 == -1)
      v18 = v17;
    else
      v18 = v15;
    if (!v18)
      return 0;
  }
  else
  {
    v24 = &v23;
    if ((((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A3F0[v12])(&v24, a2 + 4, a3 + 4) & 1) == 0)
      return 0;
  }
  v19 = a2[10];
  v20 = a3[10];
  v21 = v20 == -1;
  v22 = v20 != -1 && v20 == v19;
  if ((_DWORD)v19 == -1)
    result = v21;
  else
    result = v22;
  if ((_DWORD)v19 != -1 && v22)
  {
    v24 = &v23;
    return ((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A3F0[v19])(&v24, a2 + 8, a3 + 8);
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::PercentRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return *a2 == *a3;
}

uint64_t std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  uint64_t result;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  _BOOL4 v22;
  char v23;
  char *v24;

  v5 = a2[4];
  v6 = a3[4];
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v24 = &v23;
    if ((((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A420[v5])(&v24, a2, a3) & 1) == 0)
      return 0;
  }
  v12 = a2[8];
  v13 = a3[8];
  v15 = v13 == (_DWORD)v12 && v13 != -1;
  if ((_DWORD)v12 == -1 || !v15)
  {
    v17 = v13 == -1;
    if ((_DWORD)v12 == -1)
      v18 = v17;
    else
      v18 = v15;
    if (!v18)
      return 0;
  }
  else
  {
    v24 = &v23;
    if ((((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A3F0[v12])(&v24, a2 + 6, a3 + 6) & 1) == 0)
      return 0;
  }
  v19 = a2[12];
  v20 = a3[12];
  v21 = v20 == -1;
  v22 = v20 != -1 && v20 == v19;
  if ((_DWORD)v19 == -1)
    result = v21;
  else
    result = v22;
  if ((_DWORD)v19 != -1 && v22)
  {
    v24 = &v23;
    return ((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A3F0[v19])(&v24, a2 + 10, a3 + 10);
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, double *a2, double *a3)
{
  return a2[1] == a3[1] && *(unsigned __int8 *)a2 == *(unsigned __int8 *)a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>,std::__variant_detail::_Trait::NumberRaw,WebCore::AngleRaw<std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>>,std::__variant_detail::_Trait::NoneRaw,std::__variant_detail::_Trait::SymbolRaw> const>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return *a2 == *a3;
}

uint64_t std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  uint64_t result;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  _BOOL4 v22;
  char v23;
  char *v24;

  v5 = a2[2];
  v6 = a3[2];
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v24 = &v23;
    if ((((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A3F0[v5])(&v24, a2, a3) & 1) == 0)
      return 0;
  }
  v12 = a2[6];
  v13 = a3[6];
  v15 = v13 == (_DWORD)v12 && v13 != -1;
  if ((_DWORD)v12 == -1 || !v15)
  {
    v17 = v13 == -1;
    if ((_DWORD)v12 == -1)
      v18 = v17;
    else
      v18 = v15;
    if (!v18)
      return 0;
  }
  else
  {
    v24 = &v23;
    if ((((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A3F0[v12])(&v24, a2 + 4, a3 + 4) & 1) == 0)
      return 0;
  }
  v19 = a2[12];
  v20 = a3[12];
  v21 = v20 == -1;
  v22 = v20 != -1 && v20 == v19;
  if ((_DWORD)v19 == -1)
    result = v21;
  else
    result = v22;
  if ((_DWORD)v19 != -1 && v22)
  {
    v24 = &v23;
    return ((uint64_t (*)(char **, unsigned int *, _DWORD *))off_1E339A420[v19])(&v24, a2 + 8, a3 + 8);
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEEEEEDcSN_DpT0_(WebCore ***a1, double *a2)
{
  return WebCore::formatCSSNumberValue(**a1, (int8x16_t *)"%", 2uLL, *a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEEEEEDcSN_DpT0_(uint64_t **a1, WebCore::CSSCalcValue **a2)
{
  return WebCore::unevaluatedCalcSerialization(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, unsigned __int16 *a2)
{
  return *a2 == 124;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v3 = *(unsigned int *)(*(_QWORD *)(a2 + 16) + 88);
  if ((_DWORD)v3 == -1)
    goto LABEL_7;
  v8 = &v7;
  if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor20containsCurrentColorEvE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSJ_INS8_17HSLFunctionModernEEENSJ_INS8_11HWBFunctionEEENSJ_INS8_11LabFunctionEEENSJ_INS8_11LCHFunctionEEENSJ_INS8_13OKLabFunctionEEENSJ_INS8_13OKLCHFunctionEEENSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_19DisplayP3DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_17Rec2020DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_15SRGBADescriptorEEEEEEENSJ_INSY_INS8_21ExtendedLinearEncodedIfS1G_EEEEEENSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSJ_INS1O_INS1P_IfLS1Q_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v8) & 1) != 0)
    return 1;
  v5 = *(unsigned int *)(*(_QWORD *)(a2 + 48) + 88);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v6);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor20containsCurrentColorEvE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSJ_INS8_17HSLFunctionModernEEENSJ_INS8_11HWBFunctionEEENSJ_INS8_11LabFunctionEEENSJ_INS8_11LCHFunctionEEENSJ_INS8_13OKLabFunctionEEENSJ_INS8_13OKLCHFunctionEEENSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_19DisplayP3DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_17Rec2020DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_15SRGBADescriptorEEEEEEENSJ_INSY_INS8_21ExtendedLinearEncodedIfS1G_EEEEEENSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSJ_INS1O_INS1P_IfLS1Q_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v8);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v3 = *(unsigned int *)(*a2 + 88);
  if ((_DWORD)v3 == -1)
    goto LABEL_7;
  v8 = &v7;
  if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor20containsCurrentColorEvE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSJ_INS8_17HSLFunctionModernEEENSJ_INS8_11HWBFunctionEEENSJ_INS8_11LabFunctionEEENSJ_INS8_11LCHFunctionEEENSJ_INS8_13OKLabFunctionEEENSJ_INS8_13OKLCHFunctionEEENSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_19DisplayP3DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_17Rec2020DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_15SRGBADescriptorEEEEEEENSJ_INSY_INS8_21ExtendedLinearEncodedIfS1G_EEEEEENSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSJ_INS1O_INS1P_IfLS1Q_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v8) & 1) != 0)
    return 1;
  v5 = *(unsigned int *)(a2[1] + 88);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v6);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor20containsCurrentColorEvE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSJ_INS8_17HSLFunctionModernEEENSJ_INS8_11HWBFunctionEEENSJ_INS8_11LabFunctionEEENSJ_INS8_11LCHFunctionEEENSJ_INS8_13OKLabFunctionEEENSJ_INS8_13OKLCHFunctionEEENSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_19DisplayP3DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_17Rec2020DescriptorEEEEEEENSJ_INSY_INSZ_IfNS8_15SRGBADescriptorEEEEEEENSJ_INSY_INS8_21ExtendedLinearEncodedIfS1G_EEEEEENSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSJ_INS1O_INS1P_IfLS1Q_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v8);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsCurrentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char *v5;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>();
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v5);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v2;
  _BOOL8 result;

  v2 = *a2;
  if (v2 >= 0xA7)
  {
    result = 1;
    if (v2 >= 0xE7 && v2 != 403)
      return v2 == 18;
  }
  else
  {
    if (v2 <= 0x90)
      return v2 == 18;
    return 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  char *v7;

  v3 = *(unsigned int *)(*(_QWORD *)(a2 + 16) + 88);
  if ((_DWORD)v3 == -1)
    goto LABEL_7;
  v7 = &v6;
  if ((((uint64_t (*)(char **))off_1E339A510[v3])(&v7) & 1) != 0)
    return 1;
  v5 = *(unsigned int *)(*(_QWORD *)(a2 + 48) + 88);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>();
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **))off_1E339A510[v5])(&v7);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 88);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E339A510[v2])(&v6);
  }
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  WTF::StringImpl *result;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v10[4];
  uint64_t **v11;

  v2 = **a1;
  v3 = *a2;
  if ((*a2 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v3;
  v8 = 0;
  v9 = v2;
  v10[0] = &v9;
  v10[1] = &v9;
  v10[2] = &v9;
  v10[3] = &v9;
  v11 = (uint64_t **)v10;
  result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(&v11, &v7);
  if (v8 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(_QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(v10, &v7);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>()
{
  return WTF::StringBuilder::append();
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, unsigned int *a2)
{
  return WebCore::serializationForCSS(**a1, *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t a2)
{
  return WebCore::serializationForCSSColorMix<WebCore::CSSUnresolvedColorMix>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSS(**a1, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(**a1, a2);
}

double std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::HWBFunction>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::LabFunction>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::OKLabFunction>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::OKLCHFunction>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>>(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(WTF::StringBuilder &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t **a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>>(**a1, a2);
}

void WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t **v29;
  int v30;
  _BYTE v31[8];
  int v32;
  _BYTE v33[8];
  int v34;
  _BYTE v35[8];
  int v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v4 = *a2;
  v39 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_59;
  v29 = &v39;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v29);
  LOBYTE(v29) = 0;
  v30 = -1;
  v6 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v6])(&v39, &v29, a2 + 1);
    v30 = v6;
  }
  v31[0] = 0;
  v32 = -1;
  v7 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v7])(&v39, v31, a2 + 3);
    v32 = v7;
  }
  v33[0] = 0;
  v34 = -1;
  v8 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v8])(&v39, v33, a2 + 5);
    v34 = v8;
  }
  v35[0] = 0;
  v37 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v36 = -1;
    v9 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v9])(&v39, v35, a2 + 7);
      v36 = v9;
    }
    v37 = 1;
  }
  LOBYTE(v39) = 32;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10 || (v11 = *(unsigned int *)(a1 + 16), v11 >= *(_DWORD *)(v10 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v12 = *(_DWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(a1 + 16) = v11 + 1;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v11) = 32;
    else
      *(_WORD *)(v13 + 2 * v11) = 32;
  }
  v38 = a1;
  if (v30 == -1)
    goto LABEL_59;
  v39 = &v38;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v30])(&v39, &v29);
  LOBYTE(v39) = 32;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14 || (v15 = *(unsigned int *)(a1 + 16), v15 >= *(_DWORD *)(v14 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(a1 + 16) = v15 + 1;
    if ((v16 & 4) != 0)
      *(_BYTE *)(v17 + v15) = 32;
    else
      *(_WORD *)(v17 + 2 * v15) = 32;
  }
  v38 = a1;
  if (v32 == -1)
    goto LABEL_59;
  v39 = &v38;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v32])(&v39, v31);
  LOBYTE(v39) = 32;
  v18 = *(_QWORD *)(a1 + 8);
  if (!v18 || (v19 = *(unsigned int *)(a1 + 16), v19 >= *(_DWORD *)(v18 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(a1 + 16) = v19 + 1;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v19) = 32;
    else
      *(_WORD *)(v21 + 2 * v19) = 32;
  }
  v38 = a1;
  if (v34 == -1)
    goto LABEL_59;
  v39 = &v38;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v34])(&v39, v33);
  if (!v37)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v37)
  {
    __break(1u);
    goto LABEL_59;
  }
  v38 = a1;
  if (v36 == -1)
  {
LABEL_59:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(v26, v27, v28);
    return;
  }
  v39 = &v38;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v39, v35);
LABEL_37:
  LOBYTE(v39) = 41;
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22 || (v23 = *(unsigned int *)(a1 + 16), v23 >= *(_DWORD *)(v22 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 8);
    *(_DWORD *)(a1 + 16) = v23 + 1;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = 41;
    else
      *(_WORD *)(v25 + 2 * v23) = 41;
  }
  if (v37)
  {
    if (v36 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v39, v35);
    v36 = -1;
  }
  if (v34 != -1)
    ((void (*)(uint64_t **, _BYTE *))off_1E339A280[v34])(&v39, v33);
  v34 = -1;
  if (v32 != -1)
    ((void (*)(uint64_t **, _BYTE *))off_1E339A280[v32])(&v39, v31);
  v32 = -1;
  if (v30 != -1)
    ((void (*)(uint64_t **, uint64_t ***))off_1E339A280[v30])(&v39, &v29);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_(WebCore ***a1, double *a2)
{
  return WebCore::formatCSSNumberValue(**a1, (int8x16_t *)"%", 2uLL, *a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_(uint64_t **a1, WebCore::CSSCalcValue **a2)
{
  return WebCore::unevaluatedCalcSerialization(**a1, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_(WebCore ***a1, double *a2)
{
  return WebCore::formatCSSNumberValue(**a1, (int8x16_t *)&str_1_37, 1uLL, *a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_(uint64_t **a1, WebCore::CSSCalcValue **a2)
{
  return WebCore::unevaluatedCalcSerialization(**a1, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_()
{
  return WTF::StringBuilder::append();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_()
{
  return WTF::StringBuilder::append();
}

double WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  __n128 *v29;
  _QWORD v30[2];
  int v31;
  _BYTE v32[8];
  int v33;
  _BYTE v34[8];
  int v35;
  _BYTE v36[8];
  int v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v4 = *a2;
  v40 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_59;
  v30[0] = &v40;
  ((void (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(v30);
  LOBYTE(v30[0]) = 0;
  v31 = -1;
  v6 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, _QWORD *, uint64_t *))off_1E339A6B0[v6])(&v40, v30, a2 + 1);
    v31 = v6;
  }
  v32[0] = 0;
  v33 = -1;
  v7 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v7])(&v40, v32, a2 + 4);
    v33 = v7;
  }
  v34[0] = 0;
  v35 = -1;
  v8 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v8])(&v40, v34, a2 + 6);
    v35 = v8;
  }
  v36[0] = 0;
  v38 = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v37 = -1;
    v9 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v9])(&v40, v36, a2 + 8);
      v37 = v9;
    }
    v38 = 1;
  }
  LOBYTE(v40) = 32;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10 || (v11 = *(unsigned int *)(a1 + 16), v11 >= *(_DWORD *)(v10 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v12 = *(_DWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(a1 + 16) = v11 + 1;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v11) = 32;
    else
      *(_WORD *)(v13 + 2 * v11) = 32;
  }
  v39 = a1;
  if (v31 == -1)
    goto LABEL_59;
  v40 = &v39;
  ((void (*)(uint64_t **, _QWORD *))off_1E339A6E0[v31])(&v40, v30);
  LOBYTE(v40) = 32;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14 || (v15 = *(unsigned int *)(a1 + 16), v15 >= *(_DWORD *)(v14 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(a1 + 16) = v15 + 1;
    if ((v16 & 4) != 0)
      *(_BYTE *)(v17 + v15) = 32;
    else
      *(_WORD *)(v17 + 2 * v15) = 32;
  }
  v39 = a1;
  if (v33 == -1)
    goto LABEL_59;
  v40 = &v39;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v33])(&v40, v32);
  LOBYTE(v40) = 32;
  v18 = *(_QWORD *)(a1 + 8);
  if (!v18 || (v19 = *(unsigned int *)(a1 + 16), v19 >= *(_DWORD *)(v18 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(a1 + 16) = v19 + 1;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v19) = 32;
    else
      *(_WORD *)(v21 + 2 * v19) = 32;
  }
  v39 = a1;
  if (v35 == -1)
    goto LABEL_59;
  v40 = &v39;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v35])(&v40, v34);
  if (!v38)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v38)
  {
    __break(1u);
    goto LABEL_59;
  }
  v39 = a1;
  if (v37 == -1)
  {
LABEL_59:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    *(_QWORD *)&result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(v27, v28, v29).n128_u64[0];
    return result;
  }
  v40 = &v39;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v37])(&v40, v36);
LABEL_37:
  LOBYTE(v40) = 41;
  v23 = *(_QWORD *)(a1 + 8);
  if (!v23 || (v24 = *(unsigned int *)(a1 + 16), v24 >= *(_DWORD *)(v23 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v25 = *(_DWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 8);
    *(_DWORD *)(a1 + 16) = v24 + 1;
    if ((v25 & 4) != 0)
      *(_BYTE *)(v26 + v24) = 41;
    else
      *(_WORD *)(v26 + 2 * v24) = 41;
  }
  if (v38)
  {
    if (v37 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E339A280[v37])(&v40, v36);
    v37 = -1;
  }
  if (v35 != -1)
    ((void (*)(uint64_t **, _BYTE *))off_1E339A280[v35])(&v40, v34);
  v35 = -1;
  if (v33 != -1)
    ((void (*)(uint64_t **, _BYTE *))off_1E339A280[v33])(&v40, v32);
  v33 = -1;
  if (v31 != -1)
    ((void (*)(uint64_t **, _QWORD *))off_1E339A2B0[v31])(&v40, v30);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_(WebCore ***a1, double *a2)
{
  WebCore *v2;
  double v3;
  int8x16_t *v4;
  unint64_t v5;

  v2 = **a1;
  v3 = a2[1];
  v4 = (int8x16_t *)WebCore::CSSPrimitiveValue::unitTypeString(*(unsigned __int8 *)a2);
  return WebCore::formatCSSNumberValue(v2, v4, v5, v3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_(uint64_t **a1, WebCore::CSSCalcValue **a2)
{
  return WebCore::unevaluatedCalcSerialization(**a1, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_(WebCore ***a1, double *a2)
{
  return WebCore::formatCSSNumberValue(**a1, (int8x16_t *)&str_1_37, 1uLL, *a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_(uint64_t **a1, WebCore::CSSCalcValue **a2)
{
  return WebCore::unevaluatedCalcSerialization(**a1, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_()
{
  return WTF::StringBuilder::append();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSR_DpT0_()
{
  return WTF::StringBuilder::append();
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::HWBFunction>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  _BYTE v30[8];
  int v31;
  _BYTE v32[8];
  int v33;
  _BYTE v34[8];
  int v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v4 = *a2;
  v38 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_59;
  v28[0] = &v38;
  ((void (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(v28);
  LOBYTE(v28[0]) = 0;
  v29 = -1;
  v6 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, _QWORD *, uint64_t *))off_1E339A6B0[v6])(&v38, v28, a2 + 1);
    v29 = v6;
  }
  v30[0] = 0;
  v31 = -1;
  v7 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v7])(&v38, v30, a2 + 4);
    v31 = v7;
  }
  v32[0] = 0;
  v33 = -1;
  v8 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v8])(&v38, v32, a2 + 6);
    v33 = v8;
  }
  v34[0] = 0;
  v36 = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v35 = -1;
    v9 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v9])(&v38, v34, a2 + 8);
      v35 = v9;
    }
    v36 = 1;
  }
  LOBYTE(v38) = 32;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10 || (v11 = *(unsigned int *)(a1 + 16), v11 >= *(_DWORD *)(v10 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v12 = *(_DWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(a1 + 16) = v11 + 1;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v11) = 32;
    else
      *(_WORD *)(v13 + 2 * v11) = 32;
  }
  v37 = a1;
  if (v29 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, _QWORD *))off_1E339A6E0[v29])(&v38, v28);
  LOBYTE(v38) = 32;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14 || (v15 = *(unsigned int *)(a1 + 16), v15 >= *(_DWORD *)(v14 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(a1 + 16) = v15 + 1;
    if ((v16 & 4) != 0)
      *(_BYTE *)(v17 + v15) = 32;
    else
      *(_WORD *)(v17 + 2 * v15) = 32;
  }
  v37 = a1;
  if (v31 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v31])(&v38, v30);
  LOBYTE(v38) = 32;
  v18 = *(_QWORD *)(a1 + 8);
  if (!v18 || (v19 = *(unsigned int *)(a1 + 16), v19 >= *(_DWORD *)(v18 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(a1 + 16) = v19 + 1;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v19) = 32;
    else
      *(_WORD *)(v21 + 2 * v19) = 32;
  }
  v37 = a1;
  if (v33 == -1)
    goto LABEL_59;
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v33])(&v38, v32);
  if (!v36)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v36)
  {
    __break(1u);
    goto LABEL_59;
  }
  v37 = a1;
  if (v35 == -1)
  {
LABEL_59:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::LabFunction>>(v27);
  }
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v35])(&v38, v34);
LABEL_37:
  LOBYTE(v38) = 41;
  v23 = *(_QWORD *)(a1 + 8);
  if (!v23 || (v24 = *(unsigned int *)(a1 + 16), v24 >= *(_DWORD *)(v23 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v25 = *(_DWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 8);
    *(_DWORD *)(a1 + 16) = v24 + 1;
    if ((v25 & 4) != 0)
      *(_BYTE *)(v26 + v24) = 41;
    else
      *(_WORD *)(v26 + 2 * v24) = 41;
  }
  if (v36)
  {
    if (v35 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v35])(&v38, v34);
    v35 = -1;
  }
  if (v33 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v33])(&v38, v32);
  v33 = -1;
  if (v31 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v31])(&v38, v30);
  v31 = -1;
  if (v29 != -1)
    return ((uint64_t (*)(uint64_t **, _QWORD *))off_1E339A2B0[v29])(&v38, v28);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::LabFunction>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  int v29;
  _BYTE v30[8];
  int v31;
  _BYTE v32[8];
  int v33;
  _BYTE v34[8];
  int v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v4 = *a2;
  v38 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_59;
  v28 = &v38;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v28);
  LOBYTE(v28) = 0;
  v29 = -1;
  v6 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v6])(&v38, &v28, a2 + 1);
    v29 = v6;
  }
  v30[0] = 0;
  v31 = -1;
  v7 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v7])(&v38, v30, a2 + 3);
    v31 = v7;
  }
  v32[0] = 0;
  v33 = -1;
  v8 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v8])(&v38, v32, a2 + 5);
    v33 = v8;
  }
  v34[0] = 0;
  v36 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v35 = -1;
    v9 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v9])(&v38, v34, a2 + 7);
      v35 = v9;
    }
    v36 = 1;
  }
  LOBYTE(v38) = 32;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10 || (v11 = *(unsigned int *)(a1 + 16), v11 >= *(_DWORD *)(v10 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v12 = *(_DWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(a1 + 16) = v11 + 1;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v11) = 32;
    else
      *(_WORD *)(v13 + 2 * v11) = 32;
  }
  v37 = a1;
  if (v29 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v29])(&v38, &v28);
  LOBYTE(v38) = 32;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14 || (v15 = *(unsigned int *)(a1 + 16), v15 >= *(_DWORD *)(v14 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(a1 + 16) = v15 + 1;
    if ((v16 & 4) != 0)
      *(_BYTE *)(v17 + v15) = 32;
    else
      *(_WORD *)(v17 + 2 * v15) = 32;
  }
  v37 = a1;
  if (v31 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v31])(&v38, v30);
  LOBYTE(v38) = 32;
  v18 = *(_QWORD *)(a1 + 8);
  if (!v18 || (v19 = *(unsigned int *)(a1 + 16), v19 >= *(_DWORD *)(v18 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(a1 + 16) = v19 + 1;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v19) = 32;
    else
      *(_WORD *)(v21 + 2 * v19) = 32;
  }
  v37 = a1;
  if (v33 == -1)
    goto LABEL_59;
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v33])(&v38, v32);
  if (!v36)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v36)
  {
    __break(1u);
    goto LABEL_59;
  }
  v37 = a1;
  if (v35 == -1)
  {
LABEL_59:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(v27);
  }
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v35])(&v38, v34);
LABEL_37:
  LOBYTE(v38) = 41;
  v23 = *(_QWORD *)(a1 + 8);
  if (!v23 || (v24 = *(unsigned int *)(a1 + 16), v24 >= *(_DWORD *)(v23 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v25 = *(_DWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 8);
    *(_DWORD *)(a1 + 16) = v24 + 1;
    if ((v25 & 4) != 0)
      *(_BYTE *)(v26 + v24) = 41;
    else
      *(_WORD *)(v26 + 2 * v24) = 41;
  }
  if (v36)
  {
    if (v35 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v35])(&v38, v34);
    v35 = -1;
  }
  if (v33 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v33])(&v38, v32);
  v33 = -1;
  if (v31 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v31])(&v38, v30);
  v31 = -1;
  if (v29 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v29])(&v38, &v28);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  int v29;
  _BYTE v30[8];
  int v31;
  _BYTE v32[16];
  int v33;
  _BYTE v34[8];
  int v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v4 = *a2;
  v38 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_59;
  v28 = &v38;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v28);
  LOBYTE(v28) = 0;
  v29 = -1;
  v6 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v6])(&v38, &v28, a2 + 1);
    v29 = v6;
  }
  v30[0] = 0;
  v31 = -1;
  v7 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v7])(&v38, v30, a2 + 3);
    v31 = v7;
  }
  v32[0] = 0;
  v33 = -1;
  v8 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A6B0[v8])(&v38, v32, a2 + 5);
    v33 = v8;
  }
  v34[0] = 0;
  v36 = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v35 = -1;
    v9 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v9])(&v38, v34, a2 + 8);
      v35 = v9;
    }
    v36 = 1;
  }
  LOBYTE(v38) = 32;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10 || (v11 = *(unsigned int *)(a1 + 16), v11 >= *(_DWORD *)(v10 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v12 = *(_DWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(a1 + 16) = v11 + 1;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v11) = 32;
    else
      *(_WORD *)(v13 + 2 * v11) = 32;
  }
  v37 = a1;
  if (v29 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v29])(&v38, &v28);
  LOBYTE(v38) = 32;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14 || (v15 = *(unsigned int *)(a1 + 16), v15 >= *(_DWORD *)(v14 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(a1 + 16) = v15 + 1;
    if ((v16 & 4) != 0)
      *(_BYTE *)(v17 + v15) = 32;
    else
      *(_WORD *)(v17 + 2 * v15) = 32;
  }
  v37 = a1;
  if (v31 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v31])(&v38, v30);
  LOBYTE(v38) = 32;
  v18 = *(_QWORD *)(a1 + 8);
  if (!v18 || (v19 = *(unsigned int *)(a1 + 16), v19 >= *(_DWORD *)(v18 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(a1 + 16) = v19 + 1;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v19) = 32;
    else
      *(_WORD *)(v21 + 2 * v19) = 32;
  }
  v37 = a1;
  if (v33 == -1)
    goto LABEL_59;
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A6E0[v33])(&v38, v32);
  if (!v36)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v36)
  {
    __break(1u);
    goto LABEL_59;
  }
  v37 = a1;
  if (v35 == -1)
  {
LABEL_59:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::OKLabFunction>>(v27);
  }
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v35])(&v38, v34);
LABEL_37:
  LOBYTE(v38) = 41;
  v23 = *(_QWORD *)(a1 + 8);
  if (!v23 || (v24 = *(unsigned int *)(a1 + 16), v24 >= *(_DWORD *)(v23 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v25 = *(_DWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 8);
    *(_DWORD *)(a1 + 16) = v24 + 1;
    if ((v25 & 4) != 0)
      *(_BYTE *)(v26 + v24) = 41;
    else
      *(_WORD *)(v26 + 2 * v24) = 41;
  }
  if (v36)
  {
    if (v35 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v35])(&v38, v34);
    v35 = -1;
  }
  if (v33 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A2B0[v33])(&v38, v32);
  v33 = -1;
  if (v31 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v31])(&v38, v30);
  v31 = -1;
  if (v29 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v29])(&v38, &v28);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::OKLabFunction>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  int v29;
  _BYTE v30[8];
  int v31;
  _BYTE v32[8];
  int v33;
  _BYTE v34[8];
  int v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v4 = *a2;
  v38 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_59;
  v28 = &v38;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v28);
  LOBYTE(v28) = 0;
  v29 = -1;
  v6 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v6])(&v38, &v28, a2 + 1);
    v29 = v6;
  }
  v30[0] = 0;
  v31 = -1;
  v7 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v7])(&v38, v30, a2 + 3);
    v31 = v7;
  }
  v32[0] = 0;
  v33 = -1;
  v8 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v8])(&v38, v32, a2 + 5);
    v33 = v8;
  }
  v34[0] = 0;
  v36 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v35 = -1;
    v9 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v9])(&v38, v34, a2 + 7);
      v35 = v9;
    }
    v36 = 1;
  }
  LOBYTE(v38) = 32;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10 || (v11 = *(unsigned int *)(a1 + 16), v11 >= *(_DWORD *)(v10 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v12 = *(_DWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(a1 + 16) = v11 + 1;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v11) = 32;
    else
      *(_WORD *)(v13 + 2 * v11) = 32;
  }
  v37 = a1;
  if (v29 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v29])(&v38, &v28);
  LOBYTE(v38) = 32;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14 || (v15 = *(unsigned int *)(a1 + 16), v15 >= *(_DWORD *)(v14 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(a1 + 16) = v15 + 1;
    if ((v16 & 4) != 0)
      *(_BYTE *)(v17 + v15) = 32;
    else
      *(_WORD *)(v17 + 2 * v15) = 32;
  }
  v37 = a1;
  if (v31 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v31])(&v38, v30);
  LOBYTE(v38) = 32;
  v18 = *(_QWORD *)(a1 + 8);
  if (!v18 || (v19 = *(unsigned int *)(a1 + 16), v19 >= *(_DWORD *)(v18 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(a1 + 16) = v19 + 1;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v19) = 32;
    else
      *(_WORD *)(v21 + 2 * v19) = 32;
  }
  v37 = a1;
  if (v33 == -1)
    goto LABEL_59;
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v33])(&v38, v32);
  if (!v36)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v36)
  {
    __break(1u);
    goto LABEL_59;
  }
  v37 = a1;
  if (v35 == -1)
  {
LABEL_59:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::OKLCHFunction>>(v27);
  }
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v35])(&v38, v34);
LABEL_37:
  LOBYTE(v38) = 41;
  v23 = *(_QWORD *)(a1 + 8);
  if (!v23 || (v24 = *(unsigned int *)(a1 + 16), v24 >= *(_DWORD *)(v23 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v25 = *(_DWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 8);
    *(_DWORD *)(a1 + 16) = v24 + 1;
    if ((v25 & 4) != 0)
      *(_BYTE *)(v26 + v24) = 41;
    else
      *(_WORD *)(v26 + 2 * v24) = 41;
  }
  if (v36)
  {
    if (v35 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v35])(&v38, v34);
    v35 = -1;
  }
  if (v33 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v33])(&v38, v32);
  v33 = -1;
  if (v31 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v31])(&v38, v30);
  v31 = -1;
  if (v29 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v29])(&v38, &v28);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::OKLCHFunction>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  int v29;
  _BYTE v30[8];
  int v31;
  _BYTE v32[16];
  int v33;
  _BYTE v34[8];
  int v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v4 = *a2;
  v38 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_59;
  v28 = &v38;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v28);
  LOBYTE(v28) = 0;
  v29 = -1;
  v6 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v6])(&v38, &v28, a2 + 1);
    v29 = v6;
  }
  v30[0] = 0;
  v31 = -1;
  v7 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v7])(&v38, v30, a2 + 3);
    v31 = v7;
  }
  v32[0] = 0;
  v33 = -1;
  v8 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A6B0[v8])(&v38, v32, a2 + 5);
    v33 = v8;
  }
  v34[0] = 0;
  v36 = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v35 = -1;
    v9 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v9])(&v38, v34, a2 + 8);
      v35 = v9;
    }
    v36 = 1;
  }
  LOBYTE(v38) = 32;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10 || (v11 = *(unsigned int *)(a1 + 16), v11 >= *(_DWORD *)(v10 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v12 = *(_DWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(a1 + 16) = v11 + 1;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v11) = 32;
    else
      *(_WORD *)(v13 + 2 * v11) = 32;
  }
  v37 = a1;
  if (v29 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v29])(&v38, &v28);
  LOBYTE(v38) = 32;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14 || (v15 = *(unsigned int *)(a1 + 16), v15 >= *(_DWORD *)(v14 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 8);
    *(_DWORD *)(a1 + 16) = v15 + 1;
    if ((v16 & 4) != 0)
      *(_BYTE *)(v17 + v15) = 32;
    else
      *(_WORD *)(v17 + 2 * v15) = 32;
  }
  v37 = a1;
  if (v31 == -1)
    goto LABEL_59;
  v38 = &v37;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v31])(&v38, v30);
  LOBYTE(v38) = 32;
  v18 = *(_QWORD *)(a1 + 8);
  if (!v18 || (v19 = *(unsigned int *)(a1 + 16), v19 >= *(_DWORD *)(v18 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 8);
    *(_DWORD *)(a1 + 16) = v19 + 1;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v19) = 32;
    else
      *(_WORD *)(v21 + 2 * v19) = 32;
  }
  v37 = a1;
  if (v33 == -1)
    goto LABEL_59;
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A6E0[v33])(&v38, v32);
  if (!v36)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v36)
  {
    __break(1u);
    goto LABEL_59;
  }
  v37 = a1;
  if (v35 == -1)
  {
LABEL_59:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>>(v27);
  }
  v38 = &v37;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v35])(&v38, v34);
LABEL_37:
  LOBYTE(v38) = 41;
  v23 = *(_QWORD *)(a1 + 8);
  if (!v23 || (v24 = *(unsigned int *)(a1 + 16), v24 >= *(_DWORD *)(v23 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v25 = *(_DWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 8);
    *(_DWORD *)(a1 + 16) = v24 + 1;
    if ((v25 & 4) != 0)
      *(_BYTE *)(v26 + v24) = 41;
    else
      *(_WORD *)(v26 + 2 * v24) = 41;
  }
  if (v36)
  {
    if (v35 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v35])(&v38, v34);
    v35 = -1;
  }
  if (v33 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A2B0[v33])(&v38, v32);
  v33 = -1;
  if (v31 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v31])(&v38, v30);
  v31 = -1;
  if (v29 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v29])(&v38, &v28);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v4 = *a2;
  v43 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_68;
  v33 = &v43;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33);
  LOBYTE(v33) = 32;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a1 == 0)
      : (v8 = 0),
        v8))
  {
    v30 = *(_DWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 16) = v7 + 1;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v7) = 32;
    else
      *(_WORD *)(v31 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  v34 = -1;
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v9])(&v43, &v33, a2 + 1);
    v34 = v9;
  }
  v35[0] = 0;
  v36 = -1;
  v10 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v10])(&v43, v35, a2 + 3);
    v36 = v10;
  }
  v37[0] = 0;
  v38 = -1;
  v11 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v11])(&v43, v37, a2 + 5);
    v38 = v11;
  }
  v39[0] = 0;
  v41 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v40 = -1;
    v12 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v12])(&v43, v39, a2 + 7);
      v40 = v12;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v42 = a1;
  if (v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v42 = a1;
  if (v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v43, v35);
  LOBYTE(v43) = 32;
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21 || (v22 = *(unsigned int *)(a1 + 16), v22 >= *(_DWORD *)(v21 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 8);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v22) = 32;
    else
      *(_WORD *)(v24 + 2 * v22) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>>(v32);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26 || (v27 = *(unsigned int *)(a1 + 16), v27 >= *(_DWORD *)(v26 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 8);
    *(_DWORD *)(a1 + 16) = v27 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 41;
    else
      *(_WORD *)(v29 + 2 * v27) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v38])(&v43, v37);
  v38 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v43, v35);
  v36 = -1;
  if (v34 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v34])(&v43, &v33);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v4 = *a2;
  v43 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_68;
  v33 = &v43;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33);
  LOBYTE(v33) = 32;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a1 == 0)
      : (v8 = 0),
        v8))
  {
    v30 = *(_DWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 16) = v7 + 1;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v7) = 32;
    else
      *(_WORD *)(v31 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  v34 = -1;
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v9])(&v43, &v33, a2 + 1);
    v34 = v9;
  }
  v35[0] = 0;
  v36 = -1;
  v10 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v10])(&v43, v35, a2 + 3);
    v36 = v10;
  }
  v37[0] = 0;
  v38 = -1;
  v11 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v11])(&v43, v37, a2 + 5);
    v38 = v11;
  }
  v39[0] = 0;
  v41 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v40 = -1;
    v12 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v12])(&v43, v39, a2 + 7);
      v40 = v12;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v42 = a1;
  if (v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v42 = a1;
  if (v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v43, v35);
  LOBYTE(v43) = 32;
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21 || (v22 = *(unsigned int *)(a1 + 16), v22 >= *(_DWORD *)(v21 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 8);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v22) = 32;
    else
      *(_WORD *)(v24 + 2 * v22) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>>(v32);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26 || (v27 = *(unsigned int *)(a1 + 16), v27 >= *(_DWORD *)(v26 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 8);
    *(_DWORD *)(a1 + 16) = v27 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 41;
    else
      *(_WORD *)(v29 + 2 * v27) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v38])(&v43, v37);
  v38 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v43, v35);
  v36 = -1;
  if (v34 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v34])(&v43, &v33);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v4 = *a2;
  v43 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_68;
  v33 = &v43;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33);
  LOBYTE(v33) = 32;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a1 == 0)
      : (v8 = 0),
        v8))
  {
    v30 = *(_DWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 16) = v7 + 1;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v7) = 32;
    else
      *(_WORD *)(v31 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  v34 = -1;
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v9])(&v43, &v33, a2 + 1);
    v34 = v9;
  }
  v35[0] = 0;
  v36 = -1;
  v10 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v10])(&v43, v35, a2 + 3);
    v36 = v10;
  }
  v37[0] = 0;
  v38 = -1;
  v11 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v11])(&v43, v37, a2 + 5);
    v38 = v11;
  }
  v39[0] = 0;
  v41 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v40 = -1;
    v12 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v12])(&v43, v39, a2 + 7);
      v40 = v12;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v42 = a1;
  if (v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v42 = a1;
  if (v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v43, v35);
  LOBYTE(v43) = 32;
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21 || (v22 = *(unsigned int *)(a1 + 16), v22 >= *(_DWORD *)(v21 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 8);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v22) = 32;
    else
      *(_WORD *)(v24 + 2 * v22) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>>(v32);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26 || (v27 = *(unsigned int *)(a1 + 16), v27 >= *(_DWORD *)(v26 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 8);
    *(_DWORD *)(a1 + 16) = v27 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 41;
    else
      *(_WORD *)(v29 + 2 * v27) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v38])(&v43, v37);
  v38 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v43, v35);
  v36 = -1;
  if (v34 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v34])(&v43, &v33);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v4 = *a2;
  v43 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_68;
  v33 = &v43;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33);
  LOBYTE(v33) = 32;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a1 == 0)
      : (v8 = 0),
        v8))
  {
    v30 = *(_DWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 16) = v7 + 1;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v7) = 32;
    else
      *(_WORD *)(v31 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  v34 = -1;
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v9])(&v43, &v33, a2 + 1);
    v34 = v9;
  }
  v35[0] = 0;
  v36 = -1;
  v10 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v10])(&v43, v35, a2 + 3);
    v36 = v10;
  }
  v37[0] = 0;
  v38 = -1;
  v11 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v11])(&v43, v37, a2 + 5);
    v38 = v11;
  }
  v39[0] = 0;
  v41 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v40 = -1;
    v12 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v12])(&v43, v39, a2 + 7);
      v40 = v12;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v42 = a1;
  if (v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v42 = a1;
  if (v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v43, v35);
  LOBYTE(v43) = 32;
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21 || (v22 = *(unsigned int *)(a1 + 16), v22 >= *(_DWORD *)(v21 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 8);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v22) = 32;
    else
      *(_WORD *)(v24 + 2 * v22) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>>(v32);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26 || (v27 = *(unsigned int *)(a1 + 16), v27 >= *(_DWORD *)(v26 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 8);
    *(_DWORD *)(a1 + 16) = v27 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 41;
    else
      *(_WORD *)(v29 + 2 * v27) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v38])(&v43, v37);
  v38 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v43, v35);
  v36 = -1;
  if (v34 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v34])(&v43, &v33);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v4 = *a2;
  v43 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_68;
  v33 = &v43;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33);
  LOBYTE(v33) = 32;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a1 == 0)
      : (v8 = 0),
        v8))
  {
    v30 = *(_DWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 16) = v7 + 1;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v7) = 32;
    else
      *(_WORD *)(v31 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  v34 = -1;
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v9])(&v43, &v33, a2 + 1);
    v34 = v9;
  }
  v35[0] = 0;
  v36 = -1;
  v10 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v10])(&v43, v35, a2 + 3);
    v36 = v10;
  }
  v37[0] = 0;
  v38 = -1;
  v11 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v11])(&v43, v37, a2 + 5);
    v38 = v11;
  }
  v39[0] = 0;
  v41 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v40 = -1;
    v12 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v12])(&v43, v39, a2 + 7);
      v40 = v12;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v42 = a1;
  if (v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v42 = a1;
  if (v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v43, v35);
  LOBYTE(v43) = 32;
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21 || (v22 = *(unsigned int *)(a1 + 16), v22 >= *(_DWORD *)(v21 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 8);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v22) = 32;
    else
      *(_WORD *)(v24 + 2 * v22) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>>(v32);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26 || (v27 = *(unsigned int *)(a1 + 16), v27 >= *(_DWORD *)(v26 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 8);
    *(_DWORD *)(a1 + 16) = v27 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 41;
    else
      *(_WORD *)(v29 + 2 * v27) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v38])(&v43, v37);
  v38 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v43, v35);
  v36 = -1;
  if (v34 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v34])(&v43, &v33);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v4 = *a2;
  v43 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_68;
  v33 = &v43;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33);
  LOBYTE(v33) = 32;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a1 == 0)
      : (v8 = 0),
        v8))
  {
    v30 = *(_DWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 16) = v7 + 1;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v7) = 32;
    else
      *(_WORD *)(v31 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  v34 = -1;
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v9])(&v43, &v33, a2 + 1);
    v34 = v9;
  }
  v35[0] = 0;
  v36 = -1;
  v10 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v10])(&v43, v35, a2 + 3);
    v36 = v10;
  }
  v37[0] = 0;
  v38 = -1;
  v11 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v11])(&v43, v37, a2 + 5);
    v38 = v11;
  }
  v39[0] = 0;
  v41 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v40 = -1;
    v12 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v12])(&v43, v39, a2 + 7);
      v40 = v12;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v42 = a1;
  if (v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v42 = a1;
  if (v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v43, v35);
  LOBYTE(v43) = 32;
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21 || (v22 = *(unsigned int *)(a1 + 16), v22 >= *(_DWORD *)(v21 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 8);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v22) = 32;
    else
      *(_WORD *)(v24 + 2 * v22) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>>(v32);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26 || (v27 = *(unsigned int *)(a1 + 16), v27 >= *(_DWORD *)(v26 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 8);
    *(_DWORD *)(a1 + 16) = v27 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 41;
    else
      *(_WORD *)(v29 + 2 * v27) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v38])(&v43, v37);
  v38 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v43, v35);
  v36 = -1;
  if (v34 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v34])(&v43, &v33);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v4 = *a2;
  v43 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_68;
  v33 = &v43;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33);
  LOBYTE(v33) = 32;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a1 == 0)
      : (v8 = 0),
        v8))
  {
    v30 = *(_DWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 16) = v7 + 1;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v7) = 32;
    else
      *(_WORD *)(v31 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  v34 = -1;
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v9])(&v43, &v33, a2 + 1);
    v34 = v9;
  }
  v35[0] = 0;
  v36 = -1;
  v10 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v10])(&v43, v35, a2 + 3);
    v36 = v10;
  }
  v37[0] = 0;
  v38 = -1;
  v11 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v11])(&v43, v37, a2 + 5);
    v38 = v11;
  }
  v39[0] = 0;
  v41 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v40 = -1;
    v12 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v12])(&v43, v39, a2 + 7);
      v40 = v12;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v42 = a1;
  if (v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v42 = a1;
  if (v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v43, v35);
  LOBYTE(v43) = 32;
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21 || (v22 = *(unsigned int *)(a1 + 16), v22 >= *(_DWORD *)(v21 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 8);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v22) = 32;
    else
      *(_WORD *)(v24 + 2 * v22) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>>(v32);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26 || (v27 = *(unsigned int *)(a1 + 16), v27 >= *(_DWORD *)(v26 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 8);
    *(_DWORD *)(a1 + 16) = v27 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 41;
    else
      *(_WORD *)(v29 + 2 * v27) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v38])(&v43, v37);
  v38 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v43, v35);
  v36 = -1;
  if (v34 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v34])(&v43, &v33);
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v4 = *a2;
  v43 = (uint64_t *)a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_68;
  v33 = &v43;
  ((void (*)(uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33);
  LOBYTE(v33) = 32;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a1 == 0)
      : (v8 = 0),
        v8))
  {
    v30 = *(_DWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 16) = v7 + 1;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v7) = 32;
    else
      *(_WORD *)(v31 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  v34 = -1;
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A650[v9])(&v43, &v33, a2 + 1);
    v34 = v9;
  }
  v35[0] = 0;
  v36 = -1;
  v10 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v10])(&v43, v35, a2 + 3);
    v36 = v10;
  }
  v37[0] = 0;
  v38 = -1;
  v11 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v11])(&v43, v37, a2 + 5);
    v38 = v11;
  }
  v39[0] = 0;
  v41 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v40 = -1;
    v12 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E339A650[v12])(&v43, v39, a2 + 7);
      v40 = v12;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v42 = a1;
  if (v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t ***))off_1E339A680[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v42 = a1;
  if (v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, _BYTE *))off_1E339A680[v36])(&v43, v35);
  LOBYTE(v43) = 32;
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21 || (v22 = *(unsigned int *)(a1 + 16), v22 >= *(_DWORD *)(v21 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 8);
    *(_DWORD *)(a1 + 16) = v22 + 1;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v22) = 32;
    else
      *(_WORD *)(v24 + 2 * v22) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v32);
  }
  v43 = &v42;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A680[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26 || (v27 = *(unsigned int *)(a1 + 16), v27 >= *(_DWORD *)(v26 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 8);
    *(_DWORD *)(a1 + 16) = v27 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 41;
    else
      *(_WORD *)(v29 + 2 * v27) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v38])(&v43, v37);
  v38 = -1;
  if (v36 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339A280[v36])(&v43, v35);
  v36 = -1;
  if (v34 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A280[v34])(&v43, &v33);
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(unint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  char v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl **v16;
  _QWORD v17[4];
  uint64_t **v18;

  v3 = *a1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  if ((v3 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v14 = v3;
  v15 = 0;
  v16 = &v10;
  v17[0] = &v16;
  v17[1] = &v16;
  v17[2] = &v16;
  v17[3] = &v16;
  v18 = (uint64_t **)v17;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(&v18, &v14);
  if (v15 != -1)
    ((void (*)(_QWORD *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(v17, &v14);
  v5 = v10;
  if (v10
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v10),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v10),
        (v5 = v10) != 0))
  {
    *(_DWORD *)v5 += 2;
  }
  *a2 = v5;
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(unsigned __int16 *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  unint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;

  v2 = *a1;
  if (v2 > 0x48D)
  {
    v10 = a2;
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_10;
  }
  {
    v9 = *a1;
    v11 = a2;
    bzero(&WebCore::nameStringForSerialization(WebCore::CSSValueID)::strings, 0x2470uLL);
    v2 = v9;
    a2 = v11;
  }
  v3 = (WTF::StringImpl **)((char *)&WebCore::nameStringForSerialization(WebCore::CSSValueID)::strings + 8 * v2);
  v4 = *v3;
  if (*v3)
    goto LABEL_5;
  if ((unint64_t)*(&WebCore::valueListForSerialization + 2 * v2 + 1) > 1)
  {
    v10 = a2;
    v5 = (WTF::StringImpl **)((char *)&WebCore::nameStringForSerialization(WebCore::CSSValueID)::strings + 8 * v2);
    WTF::AtomStringImpl::add();
    v4 = v12;
    v7 = *v5;
    v8 = v5;
    *v5 = v12;
    if (!v7)
    {
LABEL_11:
      a2 = v10;
      if (!v4)
        goto LABEL_6;
      goto LABEL_5;
    }
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
LABEL_10:
    v4 = *v8;
    goto LABEL_11;
  }
  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
  *(_DWORD *)v4 = *(_DWORD *)*MEMORY[0x1E0CBF3B8] + 2;
  *v3 = v4;
LABEL_5:
  *(_DWORD *)v4 += 2;
LABEL_6:
  *a2 = v4;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(unsigned int *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  unsigned int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;

  v3 = *a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  WebCore::serializationForCSS((uint64_t)&v7, v3);
  result = v7;
  if (v7
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v7),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v7),
        (result = v7) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      result = v7;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSColorMix<WebCore::CSSUnresolvedColorMix>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

