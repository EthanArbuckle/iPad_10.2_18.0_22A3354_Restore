uint64_t WebCore::LocalDOMWindow::ensureCustomElementRegistry(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;

  v1 = *((_QWORD *)this + 33);
  if (!v1)
  {
    v4 = *((_QWORD *)this + 9);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = (WebCore::ScriptExecutionContext *)(v5 - 96);
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    v1 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)(v1 + 16) = 1;
    *(_QWORD *)v1 = &off_1E33A18C0;
    *(_QWORD *)(v1 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v1, v6);
    *(_QWORD *)v1 = &off_1E33A18E8;
    v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    *(_QWORD *)(v1 + 24) = v7;
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 85) = 0;
    *(_WORD *)(v1 + 96) = 0;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_QWORD *)(v1 + 61) = 0;
    v9 = (_DWORD *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v1;
    if (v9)
    {
      if (v9[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        return *((_QWORD *)this + 33);
      }
      else
      {
        --v9[4];
      }
    }
  }
  return v1;
}

uint64_t WebCore::LocalDOMWindow::collectMatchingElementsInFlatTree(WebCore::LocalDOMWindow *this, WebCore::Node *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  int16x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::ShadowRoot *v21;
  __n128 v22;
  uint64_t v23;
  unsigned int ***v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  unint64_t v29;
  __int16 v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v48;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  WTF *v55;
  WTF *v57;
  uint64_t result;
  __n128 *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  __int16 v64;
  WTF *v65;
  uint64_t v66;
  _QWORD v67[3];
  _DWORD v68[66];
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  _DWORD v72[66];
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  __n128 v84;

  v7 = MEMORY[0x1E0C80A78](this, a2);
  v11 = v10;
  v13 = v12;
  v14 = &v81;
  v15 = *(_QWORD *)(v7 + 72);
  if (!v15)
    goto LABEL_65;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    goto LABEL_65;
  if (*(_BYTE *)(v16 + 178))
  {
    __break(0xC471u);
    goto LABEL_126;
  }
  v17 = *(_QWORD *)(v16 + 240);
  if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0 && (v3 = *(_QWORD *)(v18 + 296)) != 0)
  {
    *(_DWORD *)(v3 + 24) += 2;
    WebCore::Document::selectorQueryForString((WebCore::Document *)v3, v8, (uint64_t)&v81, v9);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
LABEL_65:
    LOBYTE(v81) = 6;
    v82 = 0;
    v83 = 1;
  }
  v19 = v83;
  if (v83)
  {
    if (v83 != 1)
    {
      v46 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_117;
    }
    v63 = v82;
    v82 = 0;
    *(_BYTE *)v13 = v81;
    *(_QWORD *)(v13 + 8) = v63;
    *(_DWORD *)(v13 + 16) = 1;
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33FF6D0[v19])(&v74, &v81);
  }
  if ((*(_WORD *)(v11 + 28) & 4) == 0)
  {
    v61 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v61 + 16) = 1;
    *(_QWORD *)v61 = off_1E33A8508;
    *(_QWORD *)(v61 + 8) = 0;
    v74 = 0;
    *(_QWORD *)(v61 + 24) = 0;
    v75 = 0;
    *(_QWORD *)(v61 + 32) = 0;
    *(_QWORD *)v13 = v61;
    *(_DWORD *)(v13 + 16) = 0;
    WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v62);
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33FF6D0[v19])(&v74, &v81);
  }
  *(_DWORD *)(v11 + 24) += 2;
  v20 = v81;
  v79 = 0;
  v80 = 0;
  WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v74, v11);
  v64 = 0;
  v5 = (WTF *)v67;
  v65 = (WTF *)v67;
  v67[0] = 0;
  v67[1] = v68;
  v67[2] = 16;
  v68[64] = 0;
  v69 = 0;
  v70 = v72;
  v71 = 16;
  v72[64] = 0;
  v73 = -1;
  v22.n128_u64[0] = 0x100000008;
  v66 = 0x100000008;
  v23 = v77;
  if (!v77)
    goto LABEL_123;
  v24 = (unsigned int ***)(v20 + 8);
LABEL_13:
  if (!HIDWORD(v66))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDBA5CLL);
  }
  v25 = (char *)v75 + 584 * v23 - 584;
  v6 = v65;
  v26 = *(_QWORD *)v25;
  if (*(_QWORD *)v25 != *((_QWORD *)v65 + 73 * HIDWORD(v66) - 73)
    && (*((_DWORD *)v25 + 70) || *((_DWORD *)v65 + 146 * HIDWORD(v66) - 76)))
  {
    if (v26)
      v27 = (*(_WORD *)(v26 + 28) & 8) == 0;
    else
      v27 = 1;
    if (!v27)
    {
      *(_DWORD *)(v26 + 24) += 2;
      if (WebCore::SelectorDataList::matches(v24, (WebCore::Element *)v26, v22)
        && ((v40 = **(_QWORD **)(v26 + 40)) != 0 ? (v41 = (*(_WORD *)(v40 + 28) & 0x80) == 0) : (v41 = 1),
            v41 || *(_BYTE *)(v40 + 193)))
      {
        v84.n128_u64[0] = v26;
        LODWORD(v42) = HIDWORD(v80);
        if (HIDWORD(v80) == (_DWORD)v80)
        {
          v43 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, HIDWORD(v80) + 1, (unint64_t)&v84);
          v42 = HIDWORD(v80);
          v44 = v79;
          v45 = *v43;
          *v43 = 0;
          *(_QWORD *)(v44 + 8 * v42) = v45;
        }
        else
        {
          v84.n128_u64[0] = 0;
          *(_QWORD *)(v79 + 8 * HIDWORD(v80)) = v26;
        }
        HIDWORD(v80) = v42 + 1;
        v39 = v84.n128_u64[0];
        v84.n128_u64[0] = 0;
        if (v39)
        {
          if (*(_DWORD *)(v39 + 24) == 2)
          {
            if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
              goto LABEL_53;
          }
          else
          {
            *(_DWORD *)(v39 + 24) -= 2;
          }
        }
      }
      else
      {
        if (*(_DWORD *)(v26 + 24) != 2)
        {
          *(_DWORD *)(v26 + 24) -= 2;
          goto LABEL_23;
        }
        if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        {
          v39 = v26;
LABEL_53:
          WebCore::Node::removedLastRef((WebCore::Node *)v39);
        }
      }
    }
LABEL_23:
    if (!v77)
    {
      __break(0xC471u);
      JUMPOUT(0x195FDBA6CLL);
    }
    v28 = (char *)v75 + 584 * v77 - 584;
    v29 = *(_QWORD *)v28;
    v30 = *(_WORD *)(*(_QWORD *)v28 + 28);
    if (*(_QWORD *)v28)
      v31 = (v30 & 8) == 0;
    else
      v31 = 1;
    if (!v31 && (*(_QWORD *)(v29 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v21 = *(WebCore::ShadowRoot **)((*(_QWORD *)(v29 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v21)
      {
        WebCore::ComposedTreeIterator::traverseShadowRoot((WebCore::ComposedTreeIterator *)&v74, v21);
        goto LABEL_42;
      }
    }
    if (v77 > 1 || (_BYTE)v74)
    {
      WebCore::ComposedTreeIterator::traverseNextInShadowTree((WebCore::ComposedTreeIterator *)&v74, v21);
      goto LABEL_42;
    }
    if ((v30 & 4) != 0 && (v32 = *(_QWORD *)(v29 + 80)) != 0)
    {
      do
      {
        if ((*(_WORD *)(v32 + 28) & 0xA) != 0)
        {
          v33 = v32;
          break;
        }
        v33 = 0;
        v32 = *(_QWORD *)(v32 + 56);
      }
      while (v32);
    }
    else
    {
      v33 = 0;
    }
    while (1)
    {
      v29 = *(_QWORD *)(v29 + 56);
      if (!v29)
        break;
      if ((*(_WORD *)(v29 + 28) & 0xA) != 0)
      {
        if (v33)
        {
          v34 = (uint64_t *)((char *)v75 + 584 * v77 - 576);
          v84.n128_u64[0] = v29;
          v84.n128_u32[2] = *((_DWORD *)v75 + 146 * v77 - 76);
          v35 = *((unsigned int *)v75 + 146 * v77 - 141);
          if ((_DWORD)v35 == *((_DWORD *)v75 + 146 * v77 - 142))
          {
            v60 = (__n128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v84);
            v35 = *((unsigned int *)v28 + 5);
            v36 = *((_QWORD *)v28 + 1);
            v22 = *v60;
          }
          else
          {
            v36 = *v34;
            v22 = v84;
          }
          *(__n128 *)(v36 + 16 * v35) = v22;
          ++*((_DWORD *)v28 + 5);
LABEL_41:
          ++*((_DWORD *)v28 + 70);
          *(_QWORD *)v28 = v33;
        }
        else
        {
          *(_QWORD *)v28 = v29;
        }
LABEL_42:
        v23 = v77;
        if (!v77)
        {
LABEL_123:
          __break(0xC471u);
          JUMPOUT(0x195FDBA64);
        }
        goto LABEL_13;
      }
    }
    if (v33)
      goto LABEL_41;
    v37 = *((unsigned int *)v75 + 146 * v77 - 141);
    if ((_DWORD)v37)
    {
      v38 = *((_QWORD *)v75 + 73 * v77 - 72) + 16 * v37;
      *(_QWORD *)v28 = *(_QWORD *)(v38 - 16);
      *((_DWORD *)v28 + 70) = *(_DWORD *)(v38 - 8);
      *((_DWORD *)v28 + 5) = v37 - 1;
      goto LABEL_42;
    }
    __break(0xC471u);
LABEL_126:
    JUMPOUT(0x195FDB9DCLL);
  }
  v3 = 0;
  v4 = 584 * HIDWORD(v66);
  do
  {
    v14 = (uint64_t *)((char *)v6 + v3);
    v46 = *(WTF **)((char *)v6 + v3 + 296);
    if ((WTF *)((char *)v6 + v3 + 312) != v46 && v46 != 0)
    {
LABEL_117:
      v14[37] = 0;
      *((_DWORD *)v14 + 76) = 0;
      WTF::fastFree(v46, v21);
    }
    v48 = (WTF *)v14[1];
    if (v14 + 3 != (uint64_t *)v48 && v48 != 0)
    {
      v14[1] = 0;
      *(_DWORD *)((char *)v6 + v3 + 16) = 0;
      WTF::fastFree(v48, v21);
    }
    v3 += 584;
  }
  while (v4 != v3);
  v50 = v65;
  if (v5 != v65 && v65)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree(v50, v21);
  }
  v51 = v75;
  if (v77)
  {
    v52 = 0;
    v53 = 584 * v77;
    do
    {
      v54 = (char *)v51 + v52;
      v55 = *(WTF **)((char *)v51 + v52 + 296);
      if ((WTF *)((char *)v51 + v52 + 312) != v55 && v55 != 0)
      {
        *((_QWORD *)v54 + 37) = 0;
        *((_DWORD *)v54 + 76) = 0;
        WTF::fastFree(v55, v21);
      }
      v57 = (WTF *)*((_QWORD *)v54 + 1);
      if (v54 + 24 != (char *)v57 && v57 != 0)
      {
        *((_QWORD *)v54 + 1) = 0;
        *(_DWORD *)((char *)v51 + v52 + 16) = 0;
        WTF::fastFree(v57, v21);
      }
      v52 += 584;
    }
    while (v53 != v52);
    v51 = v75;
  }
  if (&v78 != (uint64_t *)v51 && v51)
  {
    v75 = 0;
    v76 = 0;
    WTF::fastFree(v51, v21);
  }
  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 16) = 1;
  *(_QWORD *)result = off_1E33A8508;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 24) = v79;
  *(_QWORD *)(result + 32) = v80;
  *(_QWORD *)v13 = result;
  *(_DWORD *)(v13 + 16) = 0;
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if ((_DWORD)v19 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E33FF6D0[v19])(&v74, &v81);
  return result;
}

WTF::StringImpl *WebCore::selectorQueryInFrame(WTF::StringImpl *this, WebCore::LocalFrame *a2, WTF::StringImpl **a3, int16x8_t a4)
{
  uint64_t v4;

  if (a2 && (v4 = *((_QWORD *)a2 + 37)) != 0)
  {
    *(_DWORD *)(v4 + 24) += 2;
    this = WebCore::Document::selectorQueryForString((WebCore::Document *)v4, a3, (uint64_t)this, a4);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *(_BYTE *)this = 6;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 1;
  }
  return this;
}

WTF *WebCore::LocalDOMWindow::matchingElementInFlatTree(WebCore::LocalDOMWindow *this, WebCore::Node *a2, const WTF::String *a3)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  int16x8_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::LocalFrame *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __n128 v18;
  uint64_t v19;
  unsigned int ***v20;
  char *v21;
  WTF *v22;
  uint64_t v23;
  WTF *result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  WTF *v31;
  WTF *v33;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  WTF *v40;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  WTF *v47;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  WTF *v54;
  WTF *v57;
  __int16 v58;
  WTF *v59;
  uint64_t v60;
  _QWORD v61[3];
  _DWORD v62[66];
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD v66[66];
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  int v70;
  unsigned int v71;
  _BYTE v72[4672];
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v7 = v6;
  v9 = v8;
  v10 = *(_QWORD *)(v3 + 72);
  if (!v10)
    goto LABEL_6;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_6;
  if (*(_BYTE *)(v11 + 178))
  {
    __break(0xC471u);
    goto LABEL_116;
  }
  v12 = *(_QWORD *)(v11 + 240);
  if (v12)
    v13 = *(WebCore::LocalFrame **)(v12 + 8);
  else
LABEL_6:
    v13 = 0;
  WebCore::selectorQueryInFrame((WTF::StringImpl *)&v73, v13, v4, v5);
  v14 = v75;
  if (v75)
  {
    if (v75 == 1)
    {
      v15 = v74;
      v74 = 0;
      *(_BYTE *)v9 = v73;
      *((_QWORD *)v9 + 1) = v15;
LABEL_10:
      *((_DWORD *)v9 + 4) = v14;
      return (WTF *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33FF6D0[v14])(&v68, &v73);
    }
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    if (v9)
    {
      v69 = 0;
      v70 = 0;
      result = (WTF *)WTF::fastFree(v9, v17);
    }
    goto LABEL_81;
  }
  if ((*(_WORD *)(v7 + 28) & 4) == 0)
  {
    *(_QWORD *)v9 = 0;
    goto LABEL_10;
  }
  *(_DWORD *)(v7 + 24) += 2;
  v16 = v73;
  WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v68, v7);
  v58 = 0;
  v59 = (WTF *)v61;
  v61[0] = 0;
  v61[1] = v62;
  v61[2] = 16;
  v62[64] = 0;
  v63 = 0;
  v64 = v66;
  v65 = 16;
  v66[64] = 0;
  v67 = -1;
  v18.n128_u64[0] = 0x100000008;
  v60 = 0x100000008;
  v19 = v71;
  if (!v71)
  {
LABEL_114:
    __break(0xC471u);
    JUMPOUT(0x195FDC018);
  }
  v20 = (unsigned int ***)(v16 + 8);
  while (1)
  {
    if (!HIDWORD(v60))
    {
      __break(0xC471u);
LABEL_116:
      JUMPOUT(0x195FDBFACLL);
    }
    v21 = (char *)v69 + 584 * v19 - 584;
    v22 = v59;
    v23 = *(_QWORD *)v21;
    if (*(_QWORD *)v21 == *((_QWORD *)v59 + 73 * HIDWORD(v60) - 73)
      || !*((_DWORD *)v21 + 70) && !*((_DWORD *)v59 + 146 * HIDWORD(v60) - 76))
    {
      v28 = 0;
      v29 = 584 * HIDWORD(v60);
      do
      {
        v30 = (char *)v22 + v28;
        v31 = *(WTF **)((char *)v22 + v28 + 296);
        if ((WTF *)((char *)v22 + v28 + 312) != v31 && v31 != 0)
        {
          *((_QWORD *)v30 + 37) = 0;
          *((_DWORD *)v30 + 76) = 0;
          v57 = v22;
          WTF::fastFree(v31, v17);
          v22 = v57;
        }
        v33 = (WTF *)*((_QWORD *)v30 + 1);
        if (v30 + 24 != (char *)v33 && v33 != 0)
        {
          *((_QWORD *)v30 + 1) = 0;
          *(_DWORD *)((char *)v22 + v28 + 16) = 0;
          v35 = v22;
          WTF::fastFree(v33, v17);
          v22 = v35;
        }
        v28 += 584;
      }
      while (v29 != v28);
      result = v59;
      if (v61 != (_QWORD *)v59 && v59)
      {
        v59 = 0;
        LODWORD(v60) = 0;
        result = (WTF *)WTF::fastFree(result, v17);
      }
      v50 = v69;
      if (v71)
      {
        v51 = 0;
        v52 = 584 * v71;
        do
        {
          v53 = (char *)v50 + v51;
          v54 = *(WTF **)((char *)v50 + v51 + 296);
          if ((WTF *)((char *)v50 + v51 + 312) != v54 && v54 != 0)
          {
            *((_QWORD *)v53 + 37) = 0;
            *((_DWORD *)v53 + 76) = 0;
            WTF::fastFree(v54, v17);
          }
          result = (WTF *)*((_QWORD *)v53 + 1);
          if (v53 + 24 != (char *)result && result != 0)
          {
            *((_QWORD *)v53 + 1) = 0;
            *(_DWORD *)((char *)v50 + v51 + 16) = 0;
            result = (WTF *)WTF::fastFree(result, v17);
          }
          v51 += 584;
        }
        while (v52 != v51);
        v50 = v69;
      }
      if (v72 != (_BYTE *)v50 && v50)
      {
        v69 = 0;
        v70 = 0;
        result = (WTF *)WTF::fastFree(v50, v17);
      }
      *(_QWORD *)v9 = 0;
      *((_DWORD *)v9 + 4) = 0;
      goto LABEL_81;
    }
    if (v23 && (*(_WORD *)(v23 + 28) & 8) != 0)
      break;
LABEL_29:
    WebCore::ComposedTreeIterator::operator++((uint64_t)&v68, (WebCore::ShadowRoot *)v17);
    v19 = v71;
    if (!v71)
      goto LABEL_114;
  }
  *(_DWORD *)(v23 + 24) += 2;
  result = (WTF *)WebCore::SelectorDataList::matches(v20, (WebCore::Element *)v23, v18);
  if (!(_DWORD)result
    || ((v26 = **(_QWORD **)(v23 + 40)) != 0 ? (v27 = (*(_WORD *)(v26 + 28) & 0x80) == 0) : (v27 = 1),
        !v27 && !*(_BYTE *)(v26 + 193)))
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
    goto LABEL_29;
  }
  *(_QWORD *)v9 = v23;
  *((_DWORD *)v9 + 4) = 0;
  v36 = v59;
  if (HIDWORD(v60))
  {
    v37 = 0;
    v38 = 584 * HIDWORD(v60);
    do
    {
      v39 = (char *)v36 + v37;
      v40 = *(WTF **)((char *)v36 + v37 + 296);
      if ((WTF *)((char *)v36 + v37 + 312) != v40 && v40 != 0)
      {
        *((_QWORD *)v39 + 37) = 0;
        *((_DWORD *)v39 + 76) = 0;
        WTF::fastFree(v40, v17);
      }
      result = (WTF *)*((_QWORD *)v39 + 1);
      if (v39 + 24 != (char *)result && result != 0)
      {
        *((_QWORD *)v39 + 1) = 0;
        *(_DWORD *)((char *)v36 + v37 + 16) = 0;
        result = (WTF *)WTF::fastFree(result, v17);
      }
      v37 += 584;
    }
    while (v38 != v37);
    v36 = v59;
  }
  if (v61 != (_QWORD *)v36 && v36 != 0)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    result = (WTF *)WTF::fastFree(v36, v17);
  }
  v9 = v69;
  if (v71)
  {
    v44 = 0;
    v45 = 584 * v71;
    do
    {
      v46 = (char *)v9 + v44;
      v47 = *(WTF **)((char *)v9 + v44 + 296);
      if ((WTF *)((char *)v9 + v44 + 312) != v47 && v47 != 0)
      {
        *((_QWORD *)v46 + 37) = 0;
        *((_DWORD *)v46 + 76) = 0;
        WTF::fastFree(v47, v17);
      }
      result = (WTF *)*((_QWORD *)v46 + 1);
      if (v46 + 24 != (char *)result && result != 0)
      {
        *((_QWORD *)v46 + 1) = 0;
        *(_DWORD *)((char *)v9 + v44 + 16) = 0;
        result = (WTF *)WTF::fastFree(result, v17);
      }
      v44 += 584;
    }
    while (v45 != v44);
    v9 = v69;
  }
  if (v72 != (_BYTE *)v9)
    goto LABEL_108;
LABEL_81:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if ((_DWORD)v14 != -1)
    return (WTF *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33FF6D0[v14])(&v68, &v73);
  return result;
}

uint64_t WebCore::LocalDOMWindow::history(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 15);
  if (!v1)
  {
    v1 = bmalloc::api::isoAllocate();
    *(_QWORD *)v1 = 0;
    *(_DWORD *)(v1 + 8) = 1;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v1 + 16) = v4;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    __dmb(0xAu);
    v7 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v7)
      *(_QWORD *)(v7 + 8) = 3;
    *(_DWORD *)(v1 + 48) = 0;
    *(_BYTE *)(v1 + 76) = 0;
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 64) = 0;
    *(_BYTE *)(v1 + 72) = 0;
    v8 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v1;
    if (v8)
    {
      WTF::RefCounted<WebCore::History>::deref(v8 + 8, v5);
      return *((_QWORD *)this + 15);
    }
  }
  return v1;
}

uint64_t WebCore::LocalDOMWindow::navigation(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  unsigned int *v3;
  void *v4;
  unsigned int v5;
  WebCore::Navigation *v6;
  bmalloc::api *v8;
  void *v9;

  v1 = *((_QWORD *)this + 27);
  if (!v1)
  {
    v1 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v1 + 24) = 1;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)v1 = &unk_1E33A4FC0;
    v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v3)
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 + 1, v3));
    }
    *(_QWORD *)(v1 + 32) = v3;
    *(_QWORD *)v1 = off_1E33FFF20;
    *(_BYTE *)(v1 + 40) = 0;
    *(_BYTE *)(v1 + 48) = 0;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 82) = 0u;
    *(_QWORD *)(v1 + 112) = 0;
    *(_QWORD *)(v1 + 120) = 0;
    *(_QWORD *)(v1 + 104) = 0;
    v6 = (WebCore::Navigation *)*((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = v1;
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 1)
      {
        WebCore::Navigation::~Navigation(v6, v4);
        bmalloc::api::isoDeallocate(v8, v9);
        return *((_QWORD *)this + 27);
      }
      else
      {
        --*((_DWORD *)v6 + 6);
      }
    }
  }
  return v1;
}

uint64_t WebCore::LocalDOMWindow::protectedNavigation@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  bmalloc::api *v8;
  void *v9;

  v3 = *(_QWORD *)(this + 216);
  if (!v3)
  {
    v4 = this;
    v3 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v3 + 24) = 1;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = &unk_1E33A4FC0;
    v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
    if (v5)
    {
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 + 1, v5));
    }
    *(_QWORD *)(v3 + 32) = v5;
    *(_QWORD *)v3 = off_1E33FFF20;
    *(_BYTE *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 48) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 82) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    *(_QWORD *)(v3 + 120) = 0;
    *(_QWORD *)(v3 + 104) = 0;
    this = *(_QWORD *)(v4 + 216);
    *(_QWORD *)(v4 + 216) = v3;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 1)
      {
        WebCore::Navigation::~Navigation((WebCore::Navigation *)this, v6);
        this = bmalloc::api::isoDeallocate(v8, v9);
        v3 = *(_QWORD *)(v4 + 216);
      }
      else
      {
        --*(_DWORD *)(this + 24);
      }
    }
  }
  ++*(_DWORD *)(v3 + 24);
  *a2 = v3;
  return this;
}

uint64_t WebCore::LocalDOMWindow::crypto(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  WebCore::ScriptExecutionContext *v4;
  WebCore::Crypto *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    WebCore::LocalDOMWindow::protectedDocument((uint64_t)this, &v8);
    v3 = v8;
    if (v8)
      v4 = (WebCore::ScriptExecutionContext *)(v8 + 192);
    else
      v4 = 0;
    v5 = (WebCore::Crypto *)WTF::fastMalloc((WTF *)0x20);
    WebCore::Crypto::Crypto(v5, v4);
    v7 = (_DWORD *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v5;
    if (v7)
    {
      if (v7[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
      else
        --v7[4];
    }
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    return *((_QWORD *)this + 14);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::protectedDocument@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 72);
  if (!v2)
    goto LABEL_5;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
  {
    v2 = 0;
    goto LABEL_5;
  }
  if (!*(_BYTE *)(v3 + 178))
  {
    v2 = v3 - 288;
    *(_DWORD *)(v3 - 264) += 2;
LABEL_5:
    *a2 = v2;
    return this;
  }
  this = 105;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::LocalDOMWindow::locationbar(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  _DWORD *v15;

  result = *((_QWORD *)this + 16);
  if (!result)
  {
    v3 = bmalloc::api::isoAllocate();
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 1;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v3 + 16) = v4;
    *(_DWORD *)(v3 + 24) = 0;
    v15 = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v3;
    if (v7)
    {
      if (v7[2] == 1)
      {
        v8 = (unsigned int *)*((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v14 = v7;
            atomic_store(1u, v8);
            v11 = v8;
            v12 = v8[7];
            if ((_DWORD)v12)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v12));
            v13 = (WTF *)*((_QWORD *)v11 + 2);
            if (v13)
            {
              *((_QWORD *)v11 + 2) = 0;
              v11[6] = 0;
              WTF::fastFree(v13, v5);
            }
            WTF::fastFree((WTF *)v11, v5);
            v7 = v14;
          }
        }
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v7, v5);
      }
      else
      {
        --v7[2];
      }
    }
    WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v15, v5);
    return *((_QWORD *)this + 16);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::menubar(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  _DWORD *v15;

  result = *((_QWORD *)this + 18);
  if (!result)
  {
    v3 = bmalloc::api::isoAllocate();
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 1;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v3 + 16) = v4;
    *(_DWORD *)(v3 + 24) = 1;
    v15 = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v3;
    if (v7)
    {
      if (v7[2] == 1)
      {
        v8 = (unsigned int *)*((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v11 = v7;
            atomic_store(1u, v8);
            v14 = (WTF *)v8;
            v12 = v8[7];
            if ((_DWORD)v12)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v14 + 2), (WTF::StringImpl *)(*((_QWORD *)v14 + 2) + 32 * v12));
            v13 = (WTF *)*((_QWORD *)v14 + 2);
            if (v13)
            {
              *((_QWORD *)v14 + 2) = 0;
              *((_DWORD *)v14 + 6) = 0;
              WTF::fastFree(v13, v5);
            }
            WTF::fastFree(v14, v5);
            v7 = v11;
          }
        }
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v7, v5);
      }
      else
      {
        --v7[2];
      }
    }
    WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v15, v5);
    return *((_QWORD *)this + 18);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::personalbar(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  _DWORD *v15;

  result = *((_QWORD *)this + 20);
  if (!result)
  {
    v3 = bmalloc::api::isoAllocate();
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 1;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v3 + 16) = v4;
    *(_DWORD *)(v3 + 24) = 2;
    v15 = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v3;
    if (v7)
    {
      if (v7[2] == 1)
      {
        v8 = (unsigned int *)*((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v14 = v7;
            atomic_store(1u, v8);
            v11 = v8;
            v12 = v8[7];
            if ((_DWORD)v12)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v12));
            v13 = (WTF *)*((_QWORD *)v11 + 2);
            if (v13)
            {
              *((_QWORD *)v11 + 2) = 0;
              v11[6] = 0;
              WTF::fastFree(v13, v5);
            }
            WTF::fastFree((WTF *)v11, v5);
            v7 = v14;
          }
        }
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v7, v5);
      }
      else
      {
        --v7[2];
      }
    }
    WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v15, v5);
    return *((_QWORD *)this + 20);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::scrollbars(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  _DWORD *v15;

  result = *((_QWORD *)this + 22);
  if (!result)
  {
    v3 = bmalloc::api::isoAllocate();
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 1;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v3 + 16) = v4;
    *(_DWORD *)(v3 + 24) = 3;
    v15 = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v3;
    if (v7)
    {
      if (v7[2] == 1)
      {
        v8 = (unsigned int *)*((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v14 = v7;
            atomic_store(1u, v8);
            v11 = v8;
            v12 = v8[7];
            if ((_DWORD)v12)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v12));
            v13 = (WTF *)*((_QWORD *)v11 + 2);
            if (v13)
            {
              *((_QWORD *)v11 + 2) = 0;
              v11[6] = 0;
              WTF::fastFree(v13, v5);
            }
            WTF::fastFree((WTF *)v11, v5);
            v7 = v14;
          }
        }
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v7, v5);
      }
      else
      {
        --v7[2];
      }
    }
    WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v15, v5);
    return *((_QWORD *)this + 22);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::statusbar(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  _DWORD *v15;

  result = *((_QWORD *)this + 24);
  if (!result)
  {
    v3 = bmalloc::api::isoAllocate();
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 1;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v3 + 16) = v4;
    *(_DWORD *)(v3 + 24) = 4;
    v15 = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v3;
    if (v7)
    {
      if (v7[2] == 1)
      {
        v8 = (unsigned int *)*((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v14 = v7;
            atomic_store(1u, v8);
            v11 = v8;
            v12 = v8[7];
            if ((_DWORD)v12)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v12));
            v13 = (WTF *)*((_QWORD *)v11 + 2);
            if (v13)
            {
              *((_QWORD *)v11 + 2) = 0;
              v11[6] = 0;
              WTF::fastFree(v13, v5);
            }
            WTF::fastFree((WTF *)v11, v5);
            v7 = v14;
          }
        }
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v7, v5);
      }
      else
      {
        --v7[2];
      }
    }
    WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v15, v5);
    return *((_QWORD *)this + 24);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::toolbar(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  _DWORD *v15;

  result = *((_QWORD *)this + 25);
  if (!result)
  {
    v3 = bmalloc::api::isoAllocate();
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 1;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v3 + 16) = v4;
    *(_DWORD *)(v3 + 24) = 5;
    v15 = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = v3;
    if (v7)
    {
      if (v7[2] == 1)
      {
        v8 = (unsigned int *)*((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v14 = v7;
            atomic_store(1u, v8);
            v11 = v8;
            v12 = v8[7];
            if ((_DWORD)v12)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v12));
            v13 = (WTF *)*((_QWORD *)v11 + 2);
            if (v13)
            {
              *((_QWORD *)v11 + 2) = 0;
              v11[6] = 0;
              WTF::fastFree(v13, v5);
            }
            WTF::fastFree((WTF *)v11, v5);
            v7 = v14;
          }
        }
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v7, v5);
      }
      else
      {
        --v7[2];
      }
    }
    WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v15, v5);
    return *((_QWORD *)this + 25);
  }
  return result;
}

_DWORD *WebCore::LocalDOMWindow::protectedNavigator@<X0>(_DWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  void *v11;
  unsigned int v12;
  int v13;

  v3 = *((_QWORD *)this + 19);
  if (!v3)
  {
    v4 = (uint64_t)this;
    v5 = *((_QWORD *)this + 9);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    {
      v7 = v6 - 96;
      v8 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v8 == 1 || v8 == 2)
          ++*(_DWORD *)(v6 + 216);
      }
      else
      {
        *(_DWORD *)(v6 - 264) += 2;
      }
    }
    else
    {
      v7 = 0;
    }
    v9 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v9 + 16) = 1;
    *(_QWORD *)v9 = &off_1E33A18C0;
    *(_QWORD *)(v9 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v9, (WebCore::ScriptExecutionContext *)v7);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)v9 = &off_1E34001D0;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
    if (v10)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
    }
    *(_QWORD *)(v9 + 64) = v10;
    *(_QWORD *)(v9 + 72) = 0;
    *(_QWORD *)v9 = &off_1E3400100;
    *(_QWORD *)(v9 + 80) = &unk_1E3400178;
    *(_QWORD *)(v9 + 88) = 0;
    *(_WORD *)(v9 + 96) = 0;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_QWORD *)(v9 + 136) = 0;
    *(_QWORD *)(v9 + 144) = v9 + 80;
    this = *(_DWORD **)(v4 + 152);
    *(_QWORD *)(v4 + 152) = v9;
    if (this)
    {
      if (this[4] == 1)
      {
        this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
        if (v7)
        {
LABEL_14:
          v13 = *(unsigned __int8 *)(v7 + 274);
          if (*(_BYTE *)(v7 + 274))
          {
            if (v13 == 1)
            {
              if (*(_DWORD *)(v7 + 312) == 1)
                this = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
              else
                --*(_DWORD *)(v7 + 312);
            }
            else if (v13 == 2)
            {
              this = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 312));
            }
          }
          else if (*(_DWORD *)(v7 - 168) == 2)
          {
            if ((*(_WORD *)(v7 - 162) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 192), v11);
          }
          else
          {
            *(_DWORD *)(v7 - 168) -= 2;
          }
        }
LABEL_17:
        v3 = *(_QWORD *)(v4 + 152);
        goto LABEL_2;
      }
      --this[4];
    }
    if (v7)
      goto LABEL_14;
    goto LABEL_17;
  }
LABEL_2:
  ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
  return this;
}

uint64_t WebCore::LocalDOMWindow::protectedPerformance@<X0>(WebCore::LocalDOMWindow *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WebCore::LocalDOMWindow::performance(this);
  ++*(_DWORD *)(result + 16);
  *a2 = result;
  return result;
}

double WebCore::LocalDOMWindow::nowTimestamp(WebCore::LocalDOMWindow *this)
{
  double *v1;
  double v2;

  v1 = (double *)WebCore::LocalDOMWindow::performance(this);
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v1);
  return *(double *)&WebCore::timePrecision * floor((v2 - v1[21]) / *(double *)&WebCore::timePrecision);
}

void WebCore::LocalDOMWindow::sessionStorage(WebCore::LocalDOMWindow *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v9;
  const WebCore::SecurityOrigin *v10;
  WTF::StringImpl *v11;
  const WebCore::SecurityOrigin *v12;
  int v13;
  WebCore::SecurityOrigin *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _DWORD *v29;
  WebCore *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  _DWORD *v45;

  v4 = *((_QWORD *)this + 9);
  if (!v4)
    goto LABEL_7;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_7;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDCFCCLL);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(WebCore::LocalDOMWindow **)(*(_QWORD *)(v7 + 296) + 696) != this)
  {
LABEL_7:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  v9 = (_DWORD *)(v5 - 264);
  *(_DWORD *)(v5 - 264) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), a2);
  if (!v10)
    goto LABEL_48;
  v12 = v10;
  if (*((_DWORD *)v10 + 8) == 1)
    goto LABEL_48;
  v13 = *(unsigned __int8 *)(v5 + 176);
  if (v13 != 1)
  {
    if (v13 != 2)
      goto LABEL_12;
LABEL_48:
    *(_BYTE *)a3 = 14;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_49;
  }
  v14 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 256))(v5 - 96);
  WebCore::SecurityOrigin::isSameOriginAs(v14, v12);
LABEL_12:
  v15 = *((_QWORD *)this + 31);
  if (v15)
  {
    *(_QWORD *)a3 = v15;
  }
  else
  {
    v16 = *(_QWORD *)(v5 + 240);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 24);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            ++*(_DWORD *)v19;
            v20 = *(_QWORD *)(v19 + 928);
            WebCore::Document::topOrigin((WebCore::Document *)(v5 - 288), v11);
            (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 16))(v44, v20, v21, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 240) + 8) + 24) + 8), 1);
            v22 = v44[0];
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), v23);
            (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(&v45, v22, v24);
            v25 = (_DWORD *)v44[0];
            v44[0] = 0;
            if (v25)
            {
              if (v25[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
              else
                --v25[2];
            }
            v26 = bmalloc::api::isoAllocate();
            *(_QWORD *)v26 = 0;
            *(_DWORD *)(v26 + 8) = 1;
            v27 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
            if (v27)
            {
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 + 1, v27));
            }
            v29 = v45;
            v45 = 0;
            *(_QWORD *)(v26 + 16) = v27;
            *(_QWORD *)(v26 + 24) = v29;
            v30 = (WebCore *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 88))(v29);
            v31 = *((_QWORD *)this + 31);
            *((_QWORD *)this + 31) = v26;
            if (v31)
              v30 = (WebCore *)WTF::RefCounted<WebCore::Storage>::deref((_DWORD *)(v31 + 8));
            v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v32 || (v33 = *(_QWORD *)(v32 + 96)) == 0)
              v33 = WebCore::threadGlobalDataSlow(v30);
            v34 = *(_QWORD *)(v33 + 40);
            if (!v34)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v33);
              v34 = *(_QWORD *)(v33 + 40);
            }
            v35 = *((_QWORD *)this + 2);
            if ((v35 & 0x1000000000000) != 0)
            {
              v39 = v35 & 0xFFFFFFFFFFFFLL;
              v40 = *(unsigned int *)(v39 + 28);
              if ((_DWORD)v40)
              {
                v41 = *(_QWORD **)(v39 + 16);
                v42 = *(_QWORD *)(v34 + 2000);
                v43 = 32 * v40;
                while (*v41 != v42)
                {
                  v41 += 4;
                  v43 -= 32;
                  if (!v43)
                    goto LABEL_32;
                }
                {
                  WebCore::windowsInterestedInStorageEvents(void)::set = 0;
                  *(_QWORD *)algn_1EE2F7E78 = 0;
                }
                WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LocalDOMWindow>((uint64_t)&WebCore::windowsInterestedInStorageEvents(void)::set, this, (uint64_t)v44);
              }
            }
LABEL_32:
            *(_QWORD *)a3 = *((_QWORD *)this + 31);
            *(_DWORD *)(a3 + 16) = 0;
            v36 = v45;
            v45 = 0;
            if (v36)
            {
              if (v36[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
              else
                --v36[2];
            }
            if (*(_DWORD *)v19 == 1)
            {
              WebCore::Page::~Page(v19);
              WTF::fastFree(v37, v38);
            }
            else
            {
              --*(_DWORD *)v19;
            }
            goto LABEL_49;
          }
        }
      }
    }
    *(_QWORD *)a3 = 0;
  }
  *(_DWORD *)(a3 + 16) = 0;
LABEL_49:
  if (*v9 == 2)
  {
    if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v11);
  }
  else
  {
    *v9 -= 2;
  }
}

uint64_t WebCore::LocalDOMWindow::processPostMessage(JSC::JSGlobalObject &,WTF::String const&,WebCore::MessageWithMessagePorts const&,WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  WebCore::UserGestureToken *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  void *v27;
  char v28;

  v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v24 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = *(WTF::StringImpl **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, uint64_t))off_1E33FF730[v26])(&v28, v3 + 8);
      *(_DWORD *)(v3 + 32) = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v16 = (WTF *)MEMORY[0x19AEA6024]();
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*v6;
    }
  }
  v7 = *(WebCore::UserGestureToken **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v7, a2);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v20 = (uint64_t *)*((_QWORD *)v9 + 2);
      *((_QWORD *)v9 + 2) = 0;
      if (v20)
      {
        if (*v20)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v20, a2);
        WTF::fastFree((WTF *)v20, a2);
      }
      v21 = (unsigned int *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, a2);
        }
      }
      WTF::fastFree(v9, a2);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *(WTF **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v11 + 2), a2);
      WTF::fastFree((WTF *)v11, v27);
    }
  }
  v14 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v14)
  {
    if (v14[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 72))(v14);
    else
      --v14[6];
  }
  return a1;
}

uint64_t WebCore::LocalDOMWindow::postMessageFromRemoteFrame(uint64_t result, WebCore::ScriptExecutionContext *a2, uint64_t *a3, _DWORD **a4, WebCore::SecurityOriginData *this, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;

  v6 = *(_QWORD *)(result + 72);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 178))
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        v8 = *(_QWORD *)(v7 + 240);
        if (v8 && *(_QWORD *)(v8 + 8))
        {
          v13 = result;
          v15 = 0;
          if (*((_BYTE *)this + 32))
            WebCore::SecurityOriginData::securityOrigin(this, &v15);
          WebCore::LocalDOMWindow::processPostMessage(v13, a2, a4, a6, a3, &v15);
          result = (uint64_t)v15;
          if (v15)
            return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v15, v14);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::getSelection(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v7;
  uint64_t v8;
  WebCore::DOMSelection *v9;
  void *v10;
  WebCore::DOMSelection *v11;
  WebCore::DOMSelection *v12;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || *(WebCore::LocalDOMWindow **)(*(_QWORD *)(v4 + 296) + 696) != this)
    return 0;
  result = *((_QWORD *)this + 23);
  if (!result)
  {
    WebCore::DOMSelection::create(this, (uint64_t *)&v12);
    v8 = (uint64_t)v12;
    v12 = 0;
    v9 = (WebCore::DOMSelection *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v8;
    if (v9)
    {
      WTF::RefCounted<WebCore::DOMSelection>::deref(v9, v7);
      v11 = v12;
      v12 = 0;
      if (v11)
        WTF::RefCounted<WebCore::DOMSelection>::deref(v11, v10);
    }
    return *((_QWORD *)this + 23);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::frameElement(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
  {
    v3 = *(_QWORD *)(v2 + 240);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        v7 = *(_QWORD *)(v4 + 120);
        if (v7)
          v8 = *(_QWORD *)(v7 + 8);
        else
          v8 = 0;
        do
        {
          v9 = __ldaxr(v5);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v5));
        if (!v10)
        {
          atomic_store(1u, v5);
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v11 = off_1E31FE290;
          v11[1] = v5;
          v13 = v11;
          WTF::ensureOnMainThread();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
        return v8;
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WebCore::LocalDOMWindow *WebCore::LocalDOMWindow::focus(WebCore::LocalDOMWindow *this, WebCore::LocalDOMWindow *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WebCore::LocalDOMWindow *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_QWORD *)this + 9);
  if (!v3)
    return WebCore::LocalDOMWindow::focus(this, 0);
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return WebCore::LocalDOMWindow::focus(this, 0);
  if (*(_BYTE *)(v4 + 178))
    goto LABEL_37;
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return WebCore::LocalDOMWindow::focus(this, 0);
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return WebCore::LocalDOMWindow::focus(this, 0);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(v6 + 160);
  if (v9)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      if (v11 == v6)
        goto LABEL_20;
      v14 = *((_QWORD *)a2 + 9);
      if (!v14)
        goto LABEL_20;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        goto LABEL_20;
      if (!*(_BYTE *)(v15 + 178))
      {
        v16 = *(_QWORD *)(v15 + 240);
        if (v16)
        {
          if (v11 == *(_QWORD *)(v16 + 8))
          {
            v22 = *(_QWORD *)(v11 + 24);
            if (v22)
            {
              v23 = *(_QWORD *)(v22 + 8);
              if (v23)
              {
                v24 = (*(_DWORD *)v23)++;
                v17 = (~*(unsigned __int16 *)(v23 + 658) & 5) == 0;
                if (v24)
                {
                  *(_DWORD *)v23 = v24;
                }
                else
                {
                  WebCore::Page::~Page(v23);
                  WTF::fastFree(v25, v26);
                }
LABEL_21:
                result = WebCore::LocalDOMWindow::focus(this, (WTF::StringImpl *)v17);
                do
                {
                  v18 = __ldaxr(v12);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v12));
                if (!v19)
                {
                  atomic_store(1u, v12);
                  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v28 = off_1E31FE290;
                  v28[1] = v12;
                  v30 = (uint64_t)v28;
                  WTF::ensureOnMainThread();
                  result = (WebCore::LocalDOMWindow *)v30;
                  if (v30)
                    result = (WebCore::LocalDOMWindow *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
                }
                goto LABEL_24;
              }
            }
          }
        }
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195FDD6CCLL);
    }
  }
  result = WebCore::LocalDOMWindow::focus(this, 0);
  do
  {
LABEL_24:
    v20 = __ldaxr(v7);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v7));
  if (!v21)
  {
    atomic_store(1u, v7);
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = off_1E31FE290;
    v27[1] = v7;
    v29 = (uint64_t)v27;
    WTF::ensureOnMainThread();
    result = (WebCore::LocalDOMWindow *)v29;
    if (v29)
      return (WebCore::LocalDOMWindow *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  return result;
}

WebCore::LocalDOMWindow *WebCore::LocalDOMWindow::focus(WebCore::LocalDOMWindow *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::LocalDOMWindow *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  WTF *v28;
  void *v29;
  WebCore::LocalDOMWindow *v30;
  WebCore::LocalDOMWindow *v31;
  WebCore::LocalDOMWindow *v32;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FDD9D0);
      }
      v4 = *(_QWORD *)(v3 + 240);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = this;
          v7 = (unsigned int *)(v5 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          v9 = *(_QWORD *)(v5 + 24);
          if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
          {
            do
            {
LABEL_37:
              v24 = __ldaxr(v7);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v7));
            if (!v25)
            {
              atomic_store(1u, v7);
              v30 = (WebCore::LocalDOMWindow *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v30 = off_1E31FE290;
              *((_QWORD *)v30 + 1) = v7;
              v32 = v30;
              WTF::ensureOnMainThread();
              this = v32;
              v32 = 0;
              if (this)
                return (WebCore::LocalDOMWindow *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 8))(this);
            }
            return this;
          }
          ++*(_DWORD *)v10;
          v11 = 1;
          if ((a2 & 1) == 0 && !WebCore::s_windowFocusAllowed)
            v11 = (*(_QWORD *)(*(_QWORD *)(v5 + 136) + 704) & 0x1000000000) == 0;
          if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5 && v11)
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 48) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16));
          if (!*(_BYTE *)(v5 + 616))
          {
            this = (WebCore::LocalDOMWindow *)WebCore::LocalDOMWindow::isSameSecurityOriginAsMainFrame(v6, a2);
            if (!(_DWORD)this)
            {
LABEL_35:
              if (*(_DWORD *)v10 == 1)
              {
                WebCore::Page::~Page(v10);
                this = (WebCore::LocalDOMWindow *)WTF::fastFree(v28, v29);
              }
              else
              {
                --*(_DWORD *)v10;
              }
              goto LABEL_37;
            }
          }
          v13 = *(_QWORD *)(v10 + 72);
          v14 = *(_DWORD *)v13 + 1;
          *(_DWORD *)v13 = v14;
          v15 = *(_QWORD *)(v13 + 16);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 8);
            if (!v16)
              goto LABEL_24;
            if (!*(_BYTE *)(v16 + 144))
            {
              v26 = (unsigned int *)(v16 + 8);
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 + 1, v26));
              v17 = 0;
              v14 = *(_DWORD *)v13;
              if (*(_DWORD *)v13)
                goto LABEL_25;
              goto LABEL_43;
            }
          }
          v16 = 0;
LABEL_24:
          v17 = 1;
          if (v14)
          {
LABEL_25:
            *(_DWORD *)v13 = v14 - 1;
            if (v16 && v16 != v5)
            {
              v18 = *(_QWORD *)(v16 + 296);
              if (v18)
              {
                *(_DWORD *)(v18 + 24) += 2;
                WORD2(v32) = 0;
                LODWORD(v32) = 0;
                WebCore::Document::setFocusedElement((WebCore::Document *)v18, 0, &v32);
                if (*(_DWORD *)(v18 + 24) == 2)
                {
                  if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v18, v19);
                }
                else
                {
                  *(_DWORD *)(v18 + 24) -= 2;
                }
              }
              else
              {
                WORD2(v32) = 0;
                LODWORD(v32) = 0;
                WebCore::Document::setFocusedElement(0, 0, &v32);
              }
            }
            v20 = *(_DWORD **)(v5 + 640);
            ++*v20;
            this = (WebCore::LocalDOMWindow *)WebCore::EventHandler::focusDocumentView((uint64_t)v20);
            if (!*v20)
            {
              __break(0xC471u);
              JUMPOUT(0x195FDDA34);
            }
            --*v20;
            if ((v17 & 1) == 0)
            {
              v21 = (unsigned int *)(v16 + 8);
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                atomic_store(1u, v21);
                v31 = (WebCore::LocalDOMWindow *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v31 = off_1E31FE290;
                *((_QWORD *)v31 + 1) = v21;
                v32 = v31;
                WTF::ensureOnMainThread();
                this = v32;
                v32 = 0;
                if (this)
                  this = (WebCore::LocalDOMWindow *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 8))(this);
              }
            }
            goto LABEL_35;
          }
LABEL_43:
          __break(0xC471u);
          JUMPOUT(0x195FDD98CLL);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::isSameSecurityOriginAsMainFrame(WebCore::LocalDOMWindow *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isSameOriginDomain;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  _QWORD *v44;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDDD10);
  }
  v4 = *(_QWORD *)(v3 + 240);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v5 + 24);
  if (v8 && *(_QWORD *)(v8 + 8) && (v9 = *((_QWORD *)this + 9)) != 0 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    if (*(_BYTE *)(v10 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195FDDD30);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
    if (v11 == v5)
    {
      isSameOriginDomain = 1;
    }
    else
    {
      isSameOriginDomain = 0;
      if (v11 && !*(_BYTE *)(v11 + 144))
      {
        v13 = (unsigned int *)(v11 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        v15 = *(_QWORD *)(v11 + 296);
        if (!v15)
        {
          isSameOriginDomain = 0;
          do
          {
LABEL_35:
            v29 = __ldaxr(v13);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v13));
          if (!v30)
          {
            atomic_store(1u, v13);
            v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v31 = off_1E31FE290;
            v31[1] = v13;
            v44 = v31;
            WTF::ensureOnMainThread();
            v32 = v44;
            v44 = 0;
            if (v32)
              (*(void (**)(_QWORD *))(*v32 + 8))(v32);
          }
          goto LABEL_40;
        }
        *(_DWORD *)(v15 + 24) += 2;
        v16 = *((_QWORD *)this + 9);
        if (v16)
        {
          v16 = *(_QWORD *)(v16 + 8);
          if (v16)
          {
            if (*(_BYTE *)(v16 + 178))
            {
              __break(0xC471u);
              JUMPOUT(0x195FDDE4CLL);
            }
            v16 -= 288;
          }
        }
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v16 + 192), a2);
        v19 = v17;
        if (v17)
        {
          do
            v20 = __ldaxr(v17);
          while (__stlxr(v20 + 1, v17));
        }
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v15 + 192), v18);
        v22 = v21;
        if (v21)
        {
          do
            v23 = __ldaxr(v21);
          while (__stlxr(v23 + 1, v21));
        }
        isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain((WebCore::SecurityOrigin *)v19, (const WebCore::SecurityOrigin *)v21);
        do
        {
          v25 = __ldaxr(v22);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v22));
        if (v26)
        {
          if (!v19)
          {
LABEL_33:
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v15, v24);
            }
            else
            {
              *(_DWORD *)(v15 + 24) -= 2;
            }
            goto LABEL_35;
          }
        }
        else
        {
          atomic_store(1u, v22);
          v38 = (WTF::StringImpl *)*((_QWORD *)v22 + 6);
          *((_QWORD *)v22 + 6) = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v38 -= 2;
          }
          v39 = (WTF::StringImpl *)*((_QWORD *)v22 + 5);
          *((_QWORD *)v22 + 5) = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v39 -= 2;
          }
          v40 = v22[8];
          if ((_DWORD)v40 != -1)
            ((void (*)(_QWORD **, unsigned int *))off_1E33FF730[v40])(&v44, v22 + 2);
          v22[8] = -1;
          WTF::fastFree((WTF *)v22, v24);
          if (!v19)
            goto LABEL_33;
        }
        do
        {
          v27 = __ldaxr(v19);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v19));
        if (!v28)
        {
          atomic_store(1u, v19);
          v41 = (WTF::StringImpl *)*((_QWORD *)v19 + 6);
          *((_QWORD *)v19 + 6) = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v41 -= 2;
          }
          v42 = (WTF::StringImpl *)*((_QWORD *)v19 + 5);
          *((_QWORD *)v19 + 5) = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v42 -= 2;
          }
          v43 = v19[8];
          if ((_DWORD)v43 != -1)
            ((void (*)(_QWORD **, unsigned int *))off_1E33FF730[v43])(&v44, v19 + 2);
          v19[8] = -1;
          WTF::fastFree((WTF *)v19, v24);
        }
        goto LABEL_33;
      }
    }
  }
  else
  {
    isSameOriginDomain = 0;
  }
  do
  {
LABEL_40:
    v33 = __ldaxr(v6);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v6));
  if (!v34)
  {
    atomic_store(1u, v6);
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v35 = off_1E31FE290;
    v35[1] = v6;
    v44 = v35;
    WTF::ensureOnMainThread();
    v36 = v44;
    v44 = 0;
    if (v36)
      (*(void (**)(_QWORD *))(*v36 + 8))(v36);
  }
  return isSameOriginDomain;
}

uint64_t WebCore::LocalFrame::checkedEventHandler@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 640);
  *a2 = v2;
  ++*v2;
  return this;
}

{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 640);
  *a2 = v2;
  ++*v2;
  return this;
}

uint64_t WebCore::LocalDOMWindow::blur(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(this + 72);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FDDF80);
      }
      v3 = *(_QWORD *)(v2 + 240);
      if (v3)
      {
        v4 = *(_QWORD **)(v3 + 8);
        if (v4)
        {
          v5 = (unsigned int *)(v4 + 1);
          do
            v6 = __ldaxr(v5);
          while (__stlxr(v6 + 1, v5));
          v7 = v4[3];
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = (*(_DWORD *)v8)++;
              if ((*(_QWORD *)(v4[17] + 704) & 0x1000000000) == 0 && *(_QWORD **)(v4[16] + 8) == v4)
              {
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 40))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16));
                v9 = *(_DWORD *)v8 - 1;
              }
              if (v9)
              {
                *(_DWORD *)v8 = v9;
              }
              else
              {
                WebCore::Page::~Page(v8);
                this = WTF::fastFree(v12, v13);
              }
            }
          }
          do
          {
            v10 = __ldaxr(v5);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v5));
          if (!v11)
          {
            atomic_store(1u, v5);
            v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v14 = off_1E31FE290;
            v14[1] = v5;
            v15 = (uint64_t)v14;
            WTF::ensureOnMainThread();
            this = v15;
            if (v15)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::LocalDOMWindow::closePage(WebCore::LocalDOMWindow *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  void *v8;
  unsigned int *result;
  int v10;
  unsigned int *v11;

  v3 = *((_QWORD *)this + 9);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    if (*(_BYTE *)(v4 + 178))
    {
      __break(0xC471u);
LABEL_17:
      JUMPOUT(0x195FDE0E4);
    }
    v5 = v4 - 288;
    *(_DWORD *)(v4 - 264) += 2;
  }
  else
  {
    v5 = 0;
  }
  v6 = WebCore::Document::eventLoop((WebCore::Document *)v5, a2);
  ++*(_DWORD *)(v6 + 8);
  ++*((_DWORD *)this + 6);
  v7 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v7 = &off_1E33FF8E0;
  *((_QWORD *)v7 + 1) = this;
  *((_QWORD *)v7 + 2) = this;
  v11 = v7;
  WebCore::EventLoopTaskGroup::queueTask(v6, 0, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  v10 = *(_DWORD *)(v6 + 8);
  if (!v10)
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  *(_DWORD *)(v6 + 8) = v10 - 1;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

_DWORD *WebCore::LocalDOMWindow::print(_DWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  _BYTE *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return this;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return this;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    goto LABEL_50;
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
    return this;
  v4 = *(unsigned int **)(v3 + 8);
  if (!v4)
    return this;
  v5 = this;
  v6 = v4 + 2;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *((_QWORD *)v4 + 3);
  if (!v8)
    goto LABEL_34;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_34;
  ++*(_DWORD *)v9;
  if (*(_DWORD *)(v9 + 868))
  {
    this = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = v27;
    v26 = v27;
    if (!v27)
      goto LABEL_32;
    if (!*((_DWORD *)v27 + 1)
      || (this = (_DWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 104))(v5)) == 0
      || (v12 = *((_QWORD *)this + 3)) == 0
      || (v13 = *(_QWORD *)(v12 + 8)) == 0
      || (v14 = *(_QWORD *)(v13 + 792)) == 0)
    {
      v26 = 0;
      goto LABEL_30;
    }
    ++*(_DWORD *)(v14 + 16);
    this = WebCore::PageConsoleClient::addMessage((uint64_t *)v14, 1, 2, (uint64_t)&v26, 0, 0);
    v15 = *(_DWORD *)(v14 + 16);
    if (v15)
    {
      *(_DWORD *)(v14 + 16) = v15 - 1;
      v11 = v26;
      v26 = 0;
      if (!v11)
        goto LABEL_32;
LABEL_30:
      if (*(_DWORD *)v11 == 2)
        this = (_DWORD *)WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
      goto LABEL_32;
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x195FDE34CLL);
  }
  if (!*(_BYTE *)(v9 + 1091))
  {
    v16 = *((_QWORD *)v4 + 35);
    v17 = 88;
    if (!*(_BYTE *)(v16 + 80))
      v17 = 96;
    this = *(_DWORD **)(v16 + v17);
    if (this)
    {
      v18 = this[6];
      this[6] = v18 + 1;
      if (*((_BYTE *)this + 3548)
        || (v19 = *((_QWORD *)this + 11)) != 0 && *(_DWORD *)(v19 - 12)
        || (v24 = *((_QWORD *)this + 13)) != 0 && *(_DWORD *)(v24 - 12))
      {
        v5[88] = 1;
        if (v18)
          this[6] = v18;
        else
          this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 24))(this);
        goto LABEL_32;
      }
      if (v18)
        this[6] = v18;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)this + 24))(this);
    }
    v5[88] = 0;
    this = (_DWORD *)WebCore::Chrome::print(*(WebCore::Chrome **)(v9 + 48), (WebCore::LocalFrame *)v4);
  }
LABEL_32:
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::Page::~Page((WebCore::Page *)v9);
    this = (_DWORD *)WTF::fastFree(v22, v23);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  do
  {
LABEL_34:
    v20 = __ldaxr(v6);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v6));
  if (!v21)
  {
    atomic_store(1u, v6);
    v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v25 = off_1E31FE290;
    *((_QWORD *)v25 + 1) = v6;
    v27 = v25;
    WTF::ensureOnMainThread();
    this = v27;
    v27 = 0;
    if (this)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::printErrorMessage(uint64_t this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this);
      if (this)
      {
        v3 = *(_QWORD *)(this + 24);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 792);
            if (v5)
            {
              ++*(_DWORD *)(v5 + 16);
              this = (uint64_t)WebCore::PageConsoleClient::addMessage((uint64_t *)v5, 1, 2, (uint64_t)a2, 0, 0);
              v6 = *(_DWORD *)(v5 + 16);
              if (v6)
              {
                *(_DWORD *)(v5 + 16) = v6 - 1;
              }
              else
              {
                this = 286;
                __break(0xC471u);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::LocalDOMWindow::stop(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  WebCore::FrameLoader *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;

  v1 = *((_QWORD *)this + 9);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FDE538);
      }
      v3 = *(_QWORD *)(v2 + 240);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v6 = (unsigned int *)(v4 + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
          v8 = *((_BYTE *)this + 314);
          *((_BYTE *)this + 314) = 1;
          v9 = *(WebCore::FrameLoader **)(v4 + 280);
          ++*(_DWORD *)v9;
          WebCore::FrameLoader::stopForUserCancel(v9, 1);
          if (!*(_DWORD *)v9)
          {
            __break(0xC471u);
            JUMPOUT(0x195FDE558);
          }
          --*(_DWORD *)v9;
          *((_BYTE *)this + 314) = v8;
          do
          {
            v10 = __ldaxr(v6);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v6));
          if (!v11)
          {
            atomic_store(1u, v6);
            v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v12 = off_1E31FE290;
            v12[1] = v6;
            v13 = v12;
            WTF::ensureOnMainThread();
            if (v13)
              (*(void (**)(_QWORD *))(*v13 + 8))(v13);
          }
        }
      }
    }
  }
}

void WebCore::LocalDOMWindow::alert(WebCore::LocalDOMWindow *this, const char **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return;
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    goto LABEL_55;
  }
  v4 = *(_QWORD *)(v3 + 240);
  if (!v4)
    return;
  v5 = *(unsigned int **)(v4 + 8);
  if (!v5)
    return;
  v8 = v5 + 2;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(*((_QWORD *)this + 9) + 8);
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDE894);
  }
  v11 = (_DWORD *)(v10 - 264);
  *(_DWORD *)(v10 - 264) += 2;
  if ((*(_BYTE *)(v10 - 19) & 0x10) == 0)
  {
    v12 = *((_QWORD *)v5 + 3);
    if (!v12)
      goto LABEL_40;
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if (!v13)
      goto LABEL_40;
    ++*(_DWORD *)v13;
    if (!*((_DWORD *)v13 + 217))
    {
      WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v10 - 288));
      WebCore::Chrome::runJavaScriptAlert(*((WebCore::Chrome **)v13 + 6), (WebCore::LocalFrame *)v5, a2);
      goto LABEL_38;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v33;
    v32 = v33;
    if (!v33)
      goto LABEL_38;
    if (!*((_DWORD *)v33 + 1)
      || (v15 = (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 104))(this)) == 0
      || (v16 = *(_QWORD *)(v15 + 24)) == 0
      || (v17 = *(_QWORD *)(v16 + 8)) == 0
      || (v18 = *(_QWORD *)(v17 + 792)) == 0)
    {
      v32 = 0;
LABEL_36:
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v14 -= 2;
LABEL_38:
      v25 = *(_DWORD *)v13 - 1;
      if (*(_DWORD *)v13 == 1)
      {
        WebCore::Page::~Page((uint64_t)v13);
        WTF::fastFree(v28, v29);
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    ++*(_DWORD *)(v18 + 16);
    WebCore::PageConsoleClient::addMessage((uint64_t *)v18, 1, 2, (uint64_t)&v32, 0, 0);
    v19 = *(_DWORD *)(v18 + 16);
    if (v19)
    {
      *(_DWORD *)(v18 + 16) = v19 - 1;
      v14 = v32;
      v32 = 0;
      if (!v14)
        goto LABEL_38;
      goto LABEL_36;
    }
    __break(0xC471u);
LABEL_55:
    JUMPOUT(0x195FDE874);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v33;
  v32 = v33;
  if (v33)
  {
    if (*((_DWORD *)v33 + 1)
      && (v20 = (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 104))(this)) != 0
      && (v21 = *(_QWORD *)(v20 + 24)) != 0
      && (v22 = *(_QWORD *)(v21 + 8)) != 0
      && (v23 = *(_QWORD *)(v22 + 792)) != 0)
    {
      ++*(_DWORD *)(v23 + 16);
      WebCore::PageConsoleClient::addMessage((uint64_t *)v23, 1, 2, (uint64_t)&v32, 0, 0);
      v24 = *(_DWORD *)(v23 + 16);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x195FDE8F8);
      }
      *(_DWORD *)(v23 + 16) = v24 - 1;
      v13 = v32;
      v32 = 0;
      if (!v13)
        goto LABEL_40;
    }
    else
    {
      v32 = 0;
    }
    v25 = *(_DWORD *)v13 - 2;
    if (*(_DWORD *)v13 != 2)
    {
LABEL_39:
      *(_DWORD *)v13 = v25;
      goto LABEL_40;
    }
    WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
  }
LABEL_40:
  if (*v11 == 2)
  {
    if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), a2);
  }
  else
  {
    *v11 -= 2;
  }
  do
  {
    v26 = __ldaxr(v8);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v8));
  if (!v27)
  {
    atomic_store(1u, v8);
    v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v30 = off_1E31FE290;
    *((_QWORD *)v30 + 1) = v8;
    v33 = v30;
    WTF::ensureOnMainThread();
    v31 = v33;
    v33 = 0;
    if (v31)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
  }
}

uint64_t WebCore::LocalDOMWindow::confirmForBindings(WebCore::LocalDOMWindow *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    goto LABEL_59;
  }
  v4 = *(_QWORD *)(v3 + 240);
  if (!v4)
    return 0;
  v5 = *(unsigned int **)(v4 + 8);
  if (!v5)
    return 0;
  v8 = v5 + 2;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(*((_QWORD *)this + 9) + 8);
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDEC30);
  }
  v11 = (_DWORD *)(v10 - 264);
  *(_DWORD *)(v10 - 264) += 2;
  if ((*(_BYTE *)(v10 - 19) & 0x10) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = v35;
    v34 = v35;
    if (v35)
    {
      if (*((_DWORD *)v35 + 1)
        && (v22 = (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 104))(this)) != 0
        && (v23 = *(_QWORD *)(v22 + 24)) != 0
        && (v24 = *(_QWORD *)(v23 + 8)) != 0
        && (v25 = *(_QWORD *)(v24 + 792)) != 0)
      {
        ++*(_DWORD *)(v25 + 16);
        WebCore::PageConsoleClient::addMessage((uint64_t *)v25, 1, 2, (uint64_t)&v34, 0, 0);
        v26 = *(_DWORD *)(v25 + 16);
        if (!v26)
        {
          __break(0xC471u);
          JUMPOUT(0x195FDEC94);
        }
        *(_DWORD *)(v25 + 16) = v26 - 1;
        v21 = v34;
        v34 = 0;
        if (!v21)
          goto LABEL_36;
      }
      else
      {
        v34 = 0;
      }
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, a2);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  else
  {
    v12 = *((_QWORD *)v5 + 3);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        ++*(_DWORD *)v13;
        if (!*(_DWORD *)(v13 + 868))
        {
          WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v10 - 288));
          v20 = WebCore::Chrome::runJavaScriptConfirm(*(WebCore::Chrome **)(v13 + 48), (WebCore::LocalFrame *)v5, (const char **)a2);
          goto LABEL_41;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v35;
        v34 = v35;
        if (!v35)
        {
LABEL_40:
          v20 = 0;
LABEL_41:
          if (*(_DWORD *)v13 == 1)
          {
            WebCore::Page::~Page(v13);
            WTF::fastFree(v30, v31);
          }
          else
          {
            --*(_DWORD *)v13;
          }
          goto LABEL_43;
        }
        if (!*((_DWORD *)v35 + 1)
          || (v15 = (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 104))(this)) == 0
          || (v16 = *(_QWORD *)(v15 + 24)) == 0
          || (v17 = *(_QWORD *)(v16 + 8)) == 0
          || (v18 = *(_QWORD *)(v17 + 792)) == 0)
        {
          v34 = 0;
          goto LABEL_38;
        }
        ++*(_DWORD *)(v18 + 16);
        WebCore::PageConsoleClient::addMessage((uint64_t *)v18, 1, 2, (uint64_t)&v34, 0, 0);
        v19 = *(_DWORD *)(v18 + 16);
        if (v19)
        {
          *(_DWORD *)(v18 + 16) = v19 - 1;
          v14 = v34;
          v34 = 0;
          if (!v14)
            goto LABEL_40;
LABEL_38:
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, a2);
          else
            *(_DWORD *)v14 -= 2;
          goto LABEL_40;
        }
        __break(0xC471u);
LABEL_59:
        JUMPOUT(0x195FDEC10);
      }
    }
  }
LABEL_36:
  v20 = 0;
LABEL_43:
  if (*v11 == 2)
  {
    if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), a2);
  }
  else
  {
    *v11 -= 2;
  }
  do
  {
    v27 = __ldaxr(v8);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v8));
  if (!v28)
  {
    atomic_store(1u, v8);
    v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v32 = off_1E31FE290;
    *((_QWORD *)v32 + 1) = v8;
    v35 = v32;
    WTF::ensureOnMainThread();
    v33 = v35;
    v35 = 0;
    if (v33)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
  }
  return v20;
}

_QWORD *WebCore::LocalDOMWindow::prompt@<X0>(_QWORD *this@<X0>, const WTF::String *a2@<X1>, const char **a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  v5 = this[9];
  if (!v5)
    goto LABEL_22;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_22;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    goto LABEL_64;
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (!v7 || (v8 = *(unsigned int **)(v7 + 8)) == 0)
  {
LABEL_22:
    *a4 = 0;
    return this;
  }
  v11 = this;
  v12 = v8 + 2;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(_QWORD *)(this[9] + 8);
  if (*(_BYTE *)(v14 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDF018);
  }
  v15 = (_DWORD *)(v14 - 264);
  *(_DWORD *)(v14 - 264) += 2;
  if ((*(_BYTE *)(v14 - 19) & 0x10) != 0)
  {
    this = (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = v34;
    v33 = v34;
    if (v34)
    {
      if (*((_DWORD *)v34 + 1)
        && (this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + 104))(v11)) != 0
        && (v24 = this[3]) != 0
        && (v25 = *(_QWORD *)(v24 + 8)) != 0
        && (v26 = *(_QWORD *)(v25 + 792)) != 0)
      {
        ++*(_DWORD *)(v26 + 16);
        this = WebCore::PageConsoleClient::addMessage((uint64_t *)v26, 1, 2, (uint64_t)&v33, 0, 0);
        v27 = *(_DWORD *)(v26 + 16);
        if (!v27)
        {
          __break(0xC471u);
          JUMPOUT(0x195FDF07CLL);
        }
        *(_DWORD *)(v26 + 16) = v27 - 1;
        v23 = v33;
        v33 = 0;
        if (!v23)
          goto LABEL_37;
      }
      else
      {
        v33 = 0;
      }
      if (*(_DWORD *)v23 == 2)
        this = (_QWORD *)WTF::StringImpl::destroy(v23, a2);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  else
  {
    v16 = *((_QWORD *)v8 + 3);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        ++*(_DWORD *)v17;
        if (!*(_DWORD *)(v17 + 868))
        {
          WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v14 - 288));
          v34 = 0;
          this = (_QWORD *)WebCore::Chrome::runJavaScriptPrompt(*(WebCore::Chrome **)(v17 + 48), (WebCore::LocalFrame *)v8, (WTF::StringImpl **)a2, a3, (const char **)&v34);
          if ((_DWORD)this)
          {
            *a4 = v34;
          }
          else
          {
            *a4 = 0;
            this = v34;
            v34 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
                this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
              else
                *(_DWORD *)this -= 2;
            }
          }
          goto LABEL_45;
        }
        this = (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = v34;
        v33 = v34;
        if (!v34)
        {
LABEL_44:
          *a4 = 0;
LABEL_45:
          if (*(_DWORD *)v17 == 1)
          {
            WebCore::Page::~Page(v17);
            this = (_QWORD *)WTF::fastFree(v30, v31);
          }
          else
          {
            --*(_DWORD *)v17;
          }
          goto LABEL_47;
        }
        if (!*((_DWORD *)v34 + 1)
          || (this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + 104))(v11)) == 0
          || (v19 = this[3]) == 0
          || (v20 = *(_QWORD *)(v19 + 8)) == 0
          || (v21 = *(_QWORD *)(v20 + 792)) == 0)
        {
          v33 = 0;
          goto LABEL_42;
        }
        ++*(_DWORD *)(v21 + 16);
        this = WebCore::PageConsoleClient::addMessage((uint64_t *)v21, 1, 2, (uint64_t)&v33, 0, 0);
        v22 = *(_DWORD *)(v21 + 16);
        if (v22)
        {
          *(_DWORD *)(v21 + 16) = v22 - 1;
          v18 = v33;
          v33 = 0;
          if (!v18)
            goto LABEL_44;
LABEL_42:
          if (*(_DWORD *)v18 == 2)
            this = (_QWORD *)WTF::StringImpl::destroy(v18, a2);
          else
            *(_DWORD *)v18 -= 2;
          goto LABEL_44;
        }
        __break(0xC471u);
LABEL_64:
        JUMPOUT(0x195FDEFF8);
      }
    }
  }
LABEL_37:
  *a4 = 0;
LABEL_47:
  if (*v15 == 2)
  {
    if ((*(_WORD *)(v14 - 258) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)(v14 - 288), a2);
  }
  else
  {
    *v15 -= 2;
  }
  do
  {
    v28 = __ldaxr(v12);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v12));
  if (!v29)
  {
    atomic_store(1u, v12);
    v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v32 = off_1E31FE290;
    *((_QWORD *)v32 + 1) = v12;
    v34 = v32;
    WTF::ensureOnMainThread();
    this = v34;
    v34 = 0;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL WebCore::LocalDOMWindow::find(WebCore::LocalDOMWindow *this, const WTF::String *a2, __int16 a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  WebCore::Editor *v15;
  void *v16;
  WebCore::Editor *v17;
  uint64_t v18;
  void *v19;
  const WTF::String *v20;
  unsigned __int16 v21;

  v5 = *((_QWORD *)this + 9);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDF164);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(v8 + 296);
  if (*(WebCore::LocalDOMWindow **)(v9 + 696) != this || *(_QWORD *)a2 && *(_WORD *)(*(_QWORD *)a2 + 6))
    return 0;
  if (a4)
    v11 = 264;
  else
    v11 = 256;
  v12 = v11 | a3 ^ 1;
  if (a5)
    v13 = v12 | 0x10;
  else
    v13 = v12;
  v14 = *(_QWORD *)(v9 + 3056);
  if (!v14)
  {
    v20 = a2;
    v21 = v13;
    v15 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v15, (WebCore::Document *)v9);
    v17 = *(WebCore::Editor **)(v9 + 3056);
    *(_QWORD *)(v9 + 3056) = v15;
    if (v17)
    {
      WebCore::Editor::~Editor(v17, v16);
      if (*(_DWORD *)v18)
      {
        *(_QWORD *)(v18 + 496) = 0;
        *(_OWORD *)(v18 + 464) = 0u;
        *(_OWORD *)(v18 + 480) = 0u;
        *(_OWORD *)(v18 + 432) = 0u;
        *(_OWORD *)(v18 + 448) = 0u;
        *(_OWORD *)(v18 + 400) = 0u;
        *(_OWORD *)(v18 + 416) = 0u;
        *(_OWORD *)(v18 + 368) = 0u;
        *(_OWORD *)(v18 + 384) = 0u;
        *(_OWORD *)(v18 + 336) = 0u;
        *(_OWORD *)(v18 + 352) = 0u;
        *(_OWORD *)(v18 + 304) = 0u;
        *(_OWORD *)(v18 + 320) = 0u;
        *(_OWORD *)(v18 + 272) = 0u;
        *(_OWORD *)(v18 + 288) = 0u;
        *(_OWORD *)(v18 + 240) = 0u;
        *(_OWORD *)(v18 + 256) = 0u;
        *(_OWORD *)(v18 + 208) = 0u;
        *(_OWORD *)(v18 + 224) = 0u;
        *(_OWORD *)(v18 + 176) = 0u;
        *(_OWORD *)(v18 + 192) = 0u;
        *(_OWORD *)(v18 + 144) = 0u;
        *(_OWORD *)(v18 + 160) = 0u;
        *(_OWORD *)(v18 + 112) = 0u;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_OWORD *)(v18 + 80) = 0u;
        *(_OWORD *)(v18 + 96) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v18, v19);
      }
    }
    a2 = v20;
    v14 = *(_QWORD *)(v9 + 3056);
    v13 = v21;
  }
  return WebCore::Editor::findString(v14, a2, v13);
}

uint64_t WebCore::LocalDOMWindow::outerHeight(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v40;
  float MaxY;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  CGRect v45;
  CGRect v46;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDF420);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v4 + 24);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    ++*(_DWORD *)v9;
    v10 = *(unsigned int **)(v9 + 160);
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 112))(v10);
    do
    {
      v14 = __ldaxr(v11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v11));
    if (!v15)
    {
      atomic_store(1u, v11);
      v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v32 = off_1E31FE290;
      v32[1] = v11;
      v44 = v32;
      WTF::ensureOnMainThread();
      if (v44)
        (*(void (**)(_QWORD *))(*v44 + 8))(v44);
    }
    if ((v13 & 0x40) != 0)
    {
      v33 = WebCore::LocalDOMWindow::innerHeight(this);
    }
    else
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
      if (v16)
        v17 = *(_BYTE *)(v16 + 144) == 0;
      else
        v17 = 0;
      if (v17)
      {
        v18 = (unsigned int *)(v16 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4)
          v16 = v4;
        v20 = *(_QWORD *)(v16 + 288);
        if (v20)
        {
          ++*(_DWORD *)(v20 + 8);
          v21 = *(void **)(v20 + 40);
          if (v21)
          {
            v34 = v20;
            if (objc_msgSend(*(id *)(v20 + 40), "conformsToProtocol:", &unk_1EE342188))
              v21 = (void *)objc_msgSend(v21, "superview");
            objc_msgSend(v21, "frame");
            v36 = v35;
            y = v45.origin.y;
            width = v45.size.width;
            height = v45.size.height;
            *(float *)&v35 = v45.origin.y;
            v40 = vcvtms_s32_f32(*(float *)&v35);
            v45.origin.x = v36;
            CGRectGetMaxX(v45);
            v46.origin.x = v36;
            v46.origin.y = y;
            v46.size.width = width;
            v46.size.height = height;
            MaxY = CGRectGetMaxY(v46);
            v22 = (unint64_t)(vcvtps_s32_f32(MaxY) - v40) << 32;
            v20 = v34;
          }
          else
          {
            v22 = *(_QWORD *)(v20 + 56);
          }
          v33 = HIDWORD(v22);
          if (*(_DWORD *)(v20 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          else
            --*(_DWORD *)(v20 + 8);
        }
        else
        {
          v33 = 0;
        }
        do
        {
          v23 = __ldaxr(v18);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v18));
        if (!v24)
        {
          atomic_store(1u, v18);
          v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v25 = off_1E31FE290;
          v25[1] = v18;
          v42 = v25;
          WTF::ensureOnMainThread();
          if (v42)
            (*(void (**)(_QWORD *))(*v42 + 8))(v42);
        }
      }
      else
      {
        v33 = 0;
      }
    }
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::Page::~Page(v9);
      WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  else
  {
    v33 = 0;
  }
  do
  {
    v26 = __ldaxr(v6);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v6));
  if (!v27)
  {
    atomic_store(1u, v6);
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v31 = off_1E31FE290;
    v31[1] = v6;
    v43 = v31;
    WTF::ensureOnMainThread();
    if (v43)
      (*(void (**)(_QWORD *))(*v43 + 8))(v43);
  }
  return v33;
}

uint64_t WebCore::LocalDOMWindow::innerHeight(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v24;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDF77CLL);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return 0;
  v5 = WebCore::LocalDOMWindow::frameElement(this);
  if (v5)
  {
    v6 = v5;
    *(_DWORD *)(v5 + 24) += 2;
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::Document::updateLayoutIfDimensionsOutOfDate(v7, v5, 2);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 9);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    return 0;
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDF79CLL);
  }
  v11 = *(_QWORD *)(v10 + 240);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    return 0;
  v13 = (unsigned int *)(v12 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = *(_QWORD *)(v12 + 288);
  if (v15)
  {
    ++*(_DWORD *)(v15 + 8);
    WebCore::ScrollView::unobscuredContentRect(v15, 1);
    v17 = (v16 >> 26) & 0xFFFFFFC0;
    if (SHIDWORD(v16) < -33554432)
      LODWORD(v17) = 0x80000000;
    if (SHIDWORD(v16) <= 0x1FFFFFF)
      v18 = v17;
    else
      v18 = 0x7FFFFFFF;
    v19 = WebCore::LocalFrameView::mapFromLayoutToCSSUnits(*(_QWORD *)(v15 + 328), v18);
    if (*(_DWORD *)(v15 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    else
      --*(_DWORD *)(v15 + 8);
  }
  else
  {
    v19 = 0;
  }
  do
  {
    v20 = __ldaxr(v13);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v13));
  if (!v21)
  {
    atomic_store(1u, v13);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = off_1E31FE290;
    v22[1] = v13;
    v24 = v22;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  return v19;
}

uint64_t WebCore::LocalDOMWindow::outerWidth(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  CGFloat v35;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v39;
  float MaxX;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  CGRect v45;
  CGRect v46;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDF9C8);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v4 + 24);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    ++*(_DWORD *)v9;
    v10 = *(unsigned int **)(v9 + 160);
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 112))(v10);
    do
    {
      v14 = __ldaxr(v11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v11));
    if (!v15)
    {
      atomic_store(1u, v11);
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = off_1E31FE290;
      v31[1] = v11;
      v44 = v31;
      WTF::ensureOnMainThread();
      if (v44)
        (*(void (**)(_QWORD *))(*v44 + 8))(v44);
    }
    if ((v13 & 0x40) != 0)
    {
      v32 = WebCore::LocalDOMWindow::innerWidth(this);
    }
    else
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
      if (v16)
        v17 = *(_BYTE *)(v16 + 144) == 0;
      else
        v17 = 0;
      if (v17)
      {
        v18 = (unsigned int *)(v16 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4)
          v16 = v4;
        v20 = *(_QWORD *)(v16 + 288);
        if (v20)
        {
          ++*(_DWORD *)(v20 + 8);
          v21 = *(void **)(v20 + 40);
          if (v21)
          {
            v33 = v20;
            if (objc_msgSend(*(id *)(v20 + 40), "conformsToProtocol:", &unk_1EE342188))
              v21 = (void *)objc_msgSend(v21, "superview");
            objc_msgSend(v21, "frame");
            v35 = v34;
            y = v45.origin.y;
            width = v45.size.width;
            height = v45.size.height;
            *(float *)&v34 = v34;
            v39 = vcvtms_s32_f32(*(float *)&v34);
            v45.origin.x = v35;
            MaxX = CGRectGetMaxX(v45);
            v41 = vcvtps_s32_f32(MaxX);
            v46.origin.x = v35;
            v46.origin.y = y;
            v46.size.width = width;
            v46.size.height = height;
            CGRectGetMaxY(v46);
            v32 = v41 - v39;
            v20 = v33;
          }
          else
          {
            v32 = *(_QWORD *)(v20 + 56);
          }
          if (*(_DWORD *)(v20 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          else
            --*(_DWORD *)(v20 + 8);
        }
        else
        {
          v32 = 0;
        }
        do
        {
          v22 = __ldaxr(v18);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v18));
        if (!v23)
        {
          atomic_store(1u, v18);
          v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v24 = off_1E31FE290;
          v24[1] = v18;
          v42 = v24;
          WTF::ensureOnMainThread();
          if (v42)
            (*(void (**)(_QWORD *))(*v42 + 8))(v42);
        }
      }
      else
      {
        v32 = 0;
      }
    }
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::Page::~Page(v9);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  else
  {
    v32 = 0;
  }
  do
  {
    v25 = __ldaxr(v6);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v6));
  if (!v26)
  {
    atomic_store(1u, v6);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v30 = off_1E31FE290;
    v30[1] = v6;
    v43 = v30;
    WTF::ensureOnMainThread();
    if (v43)
      (*(void (**)(_QWORD *))(*v43 + 8))(v43);
  }
  return v32;
}

uint64_t WebCore::LocalDOMWindow::innerWidth(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v24;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDFD18);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return 0;
  v5 = WebCore::LocalDOMWindow::frameElement(this);
  if (v5)
  {
    v6 = v5;
    *(_DWORD *)(v5 + 24) += 2;
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::Document::updateLayoutIfDimensionsOutOfDate(v7, v5, 1);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 9);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    return 0;
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDFD38);
  }
  v11 = *(_QWORD *)(v10 + 240);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    return 0;
  v13 = (unsigned int *)(v12 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = *(_QWORD *)(v12 + 288);
  if (v15)
  {
    ++*(_DWORD *)(v15 + 8);
    WebCore::ScrollView::unobscuredContentRect(v15, 1);
    v17 = v16 << 6;
    if (v16 < -33554432)
      v17 = 0x80000000;
    if (v16 <= 0x1FFFFFF)
      v18 = v17;
    else
      v18 = 0x7FFFFFFF;
    v19 = WebCore::LocalFrameView::mapFromLayoutToCSSUnits(*(_QWORD *)(v15 + 328), v18);
    if (*(_DWORD *)(v15 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    else
      --*(_DWORD *)(v15 + 8);
  }
  else
  {
    v19 = 0;
  }
  do
  {
    v20 = __ldaxr(v13);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v13));
  if (!v21)
  {
    atomic_store(1u, v13);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = off_1E31FE290;
    v22[1] = v13;
    v24 = v22;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  return v19;
}

uint64_t WebCore::LocalFrameView::mapFromLayoutToCSSUnits(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(float *)(a1 + 592);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = 1.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v10 = (*(_DWORD *)v9)++;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) == a1 && !*(_BYTE *)(v9 + 1098))
        v8 = *(float *)(v9 + 356);
      if (v10)
      {
        *(_DWORD *)v9 = v10;
      }
      else
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v14, v15);
      }
    }
  }
  do
  {
    v11 = __ldaxr(v4);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v4));
  if (!v12)
  {
    atomic_store(1u, v4);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E31FE290;
    v16[1] = v4;
    v17 = v16;
    WTF::ensureOnMainThread();
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  return (int)(float)((float)((float)a2 * 0.015625) / (float)(v6 * v8));
}

uint64_t WebCore::LocalDOMWindow::screenX(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  WTF *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDFFD8);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v4 + 24);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    ++*(_DWORD *)v8;
    v9 = *(unsigned int **)(v8 + 160);
    v10 = v9 + 2;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 112))(v9);
    do
    {
      v13 = __ldaxr(v10);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v10));
    if (!v14)
    {
      atomic_store(1u, v10);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = off_1E31FE290;
      v22[1] = v10;
      v24 = v22;
      WTF::ensureOnMainThread();
      if (v24)
        (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    }
    if ((v12 & 0x40) != 0)
      v15 = 0;
    else
      v15 = (int)(*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16));
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::Page::~Page(v8);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  else
  {
    v15 = 0;
  }
  do
  {
    v16 = __ldaxr(v5);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v5));
  if (!v17)
  {
    atomic_store(1u, v5);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E31FE290;
    v18[1] = v5;
    v23 = v18;
    WTF::ensureOnMainThread();
    if (v23)
      (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  }
  return v15;
}

uint64_t WebCore::LocalDOMWindow::screenY(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  WTF *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE01A4);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v4 + 24);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    ++*(_DWORD *)v8;
    v9 = *(unsigned int **)(v8 + 160);
    v10 = v9 + 2;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 112))(v9);
    do
    {
      v13 = __ldaxr(v10);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v10));
    if (!v14)
    {
      atomic_store(1u, v10);
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v23 = off_1E31FE290;
      v23[1] = v10;
      v25 = v23;
      WTF::ensureOnMainThread();
      if (v25)
        (*(void (**)(_QWORD *))(*v25 + 8))(v25);
    }
    if ((v12 & 0x40) != 0)
    {
      v16 = 0;
    }
    else
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16));
      v16 = (int)v15;
    }
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::Page::~Page(v8);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  else
  {
    v16 = 0;
  }
  do
  {
    v17 = __ldaxr(v5);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v5));
  if (!v18)
  {
    atomic_store(1u, v5);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E31FE290;
    v19[1] = v5;
    v24 = v19;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  return v16;
}

uint64_t WebCore::LocalDOMWindow::scrollX(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  _QWORD *v24;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE0404);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v4 + 288);
  if (v8)
  {
    ++*(_DWORD *)(v8 + 8);
    if (*(_QWORD *)(v8 + 40))
      v9 = WebCore::ScrollView::unobscuredContentRect(v8, 0);
    else
      v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 + 64) + 832))(v8 + 64, 0, 1);
    if (!v9)
      goto LABEL_12;
    v15 = *(_QWORD *)(v4 + 296);
    if (v15)
    {
      *(_DWORD *)(v15 + 24) += 2;
      WebCore::Document::updateLayout(v15, 2u, 0);
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    else
    {
      WebCore::Document::updateLayout(0, 2u, 0);
    }
    v17 = WebCore::LocalDOMWindow::frame(this);
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = *(_QWORD *)(v17 + 288);
      if (v20)
      {
        ++*(_DWORD *)(v20 + 8);
        v21 = WebCore::ScrollView::contentsScrollPosition((WebCore::ScrollView *)v20);
        v22 = v21 << 6;
        if (v21 < -33554432)
          v22 = 0x80000000;
        if (v21 <= 0x1FFFFFF)
          v23 = v22;
        else
          v23 = 0x7FFFFFFF;
        v10 = WebCore::LocalFrameView::mapFromLayoutToCSSUnits(*(_QWORD *)(v20 + 328), v23);
        if (*(_DWORD *)(v20 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        else
          --*(_DWORD *)(v20 + 8);
      }
      else
      {
        v10 = 0;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18);
    }
    else
    {
LABEL_12:
      v10 = 0;
    }
    if (*(_DWORD *)(v8 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 8);
  }
  else
  {
    v10 = 0;
  }
  do
  {
    v11 = __ldaxr(v6);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v6));
  if (!v12)
  {
    atomic_store(1u, v6);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v6;
    v24 = v13;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  return v10;
}

uint64_t WebCore::LocalDOMWindow::scrollY(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE0678);
  }
  v3 = *(_QWORD *)(v2 + 240);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v4 + 288);
  if (v8)
  {
    ++*(_DWORD *)(v8 + 8);
    if (*(_QWORD *)(v8 + 40))
      v9 = WebCore::ScrollView::unobscuredContentRect(v8, 0);
    else
      v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 + 64) + 832))(v8 + 64, 0, 1);
    if (!HIDWORD(v9))
      goto LABEL_12;
    v15 = *(_QWORD *)(v4 + 296);
    if (v15)
    {
      *(_DWORD *)(v15 + 24) += 2;
      WebCore::Document::updateLayout(v15, 2u, 0);
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    else
    {
      WebCore::Document::updateLayout(0, 2u, 0);
    }
    v17 = WebCore::LocalDOMWindow::frame(this);
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = *(_QWORD *)(v17 + 288);
      if (v20)
      {
        ++*(_DWORD *)(v20 + 8);
        v21 = WebCore::ScrollView::contentsScrollPosition((WebCore::ScrollView *)v20);
        v22 = (v21 >> 26) & 0xFFFFFFC0;
        if (SHIDWORD(v21) < -33554432)
          LODWORD(v22) = 0x80000000;
        if (SHIDWORD(v21) <= 0x1FFFFFF)
          v23 = v22;
        else
          v23 = 0x7FFFFFFF;
        v10 = WebCore::LocalFrameView::mapFromLayoutToCSSUnits(*(_QWORD *)(v20 + 328), v23);
        if (*(_DWORD *)(v20 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        else
          --*(_DWORD *)(v20 + 8);
      }
      else
      {
        v10 = 0;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18);
    }
    else
    {
LABEL_12:
      v10 = 0;
    }
    if (*(_DWORD *)(v8 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 8);
  }
  else
  {
    v10 = 0;
  }
  do
  {
    v11 = __ldaxr(v6);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v6));
  if (!v12)
  {
    atomic_store(1u, v6);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v6;
    v24 = v13;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  return v10;
}

uint64_t WebCore::LocalDOMWindow::length(WebCore::LocalDOMWindow *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::TreeScope *v4;
  uint64_t v5;
  uint64_t v7;

  if (!WebCore::LocalDOMWindow::isCurrentlyDisplayedInFrame(this))
    return 0;
  WebCore::LocalDOMWindow::protectedFrame((uint64_t)this, &v7);
  v2 = v7;
  v5 = WebCore::FrameTree::scopedChildCount((WebCore::FrameTree *)(v7 + 48), v3, v4);
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  return v5;
}

uint64_t WebCore::LocalDOMWindow::name@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(this + 72);
  if (!v2)
    goto LABEL_15;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_15;
  if (*(_BYTE *)(v3 + 178))
  {
    this = 105;
    __break(0xC471u);
    return this;
  }
  v4 = *(_QWORD *)(v3 + 240);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(_DWORD **)(v5 + 64);
    if (v8)
      *v8 += 2;
    *a2 = v8;
    do
    {
      v9 = __ldaxr(v6);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v6));
    if (!v10)
    {
      atomic_store(1u, v6);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E31FE290;
      v11[1] = v6;
      v13 = (uint64_t)v11;
      WTF::ensureOnMainThread();
      this = v13;
      if (v13)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  else
  {
LABEL_15:
    v12 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v12 += 2;
    *a2 = v12;
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::setName(uint64_t this, const WTF::AtomString *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(this + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE0938);
      }
      v4 = *(_QWORD *)(v3 + 240);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = (unsigned int *)(v5 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          v9 = *(_DWORD **)a2;
          if (*(_QWORD *)a2)
            *v9 += 2;
          v10 = *(WTF::StringImpl **)(v5 + 64);
          *(_QWORD *)(v5 + 64) = v9;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = *(_QWORD *)(v5 + 280);
          ++*(_DWORD *)v11;
          this = (*(uint64_t (**)(_QWORD, const WTF::AtomString *))(**(_QWORD **)(v11 + 16) + 1240))(*(_QWORD *)(v11 + 16), a2);
          if (!*(_DWORD *)v11)
          {
            __break(0xC471u);
            JUMPOUT(0x195FE0958);
          }
          --*(_DWORD *)v11;
          do
          {
            v12 = __ldaxr(v7);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v7));
          if (!v13)
          {
            atomic_store(1u, v7);
            v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v14 = off_1E31FE290;
            v14[1] = v7;
            v15 = (uint64_t)v14;
            WTF::ensureOnMainThread();
            this = v15;
            if (v15)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::disownOpener(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(this + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE0A88);
      }
      v4 = *(_QWORD *)(v3 + 240);
      if (v4)
      {
        v5 = *(unsigned int **)(v4 + 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
          v8 = *((_QWORD *)v5 + 20);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (!v9)
            {
              *((_QWORD *)v5 + 20) = 0;
              goto LABEL_11;
            }
            WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(v9 + 168, v5);
            v8 = *((_QWORD *)v5 + 20);
            *((_QWORD *)v5 + 20) = 0;
            if (v8)
            {
              do
              {
LABEL_11:
                v10 = __ldaxr((unsigned int *)v8);
                v11 = v10 - 1;
              }
              while (__stlxr(v11, (unsigned int *)v8));
              if (!v11)
              {
                atomic_store(1u, (unsigned int *)v8);
                WTF::fastFree((WTF *)v8, a2);
              }
            }
          }
          else
          {
            *((_QWORD *)v5 + 20) = 0;
          }
          this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 136))(v5);
          do
          {
            v12 = __ldaxr(v6);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v6));
          if (!v13)
          {
            atomic_store(1u, v6);
            v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v14 = off_1E31FE290;
            v14[1] = v6;
            v15 = (uint64_t)v14;
            WTF::ensureOnMainThread();
            this = v15;
            if (v15)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::origin@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  char *v14;

  v4 = *(_QWORD *)(this + 72);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195FE0BF0);
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), a2);
    v7 = *(unsigned int *)(v6 + 32);
    if ((_DWORD)v7 == 1)
    {
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    else if ((_DWORD)v7 == -1)
    {
      v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::LocalDOMWindow::overrideTransientActivationDurationForTesting(v12);
    }
    else
    {
      v8 = v6;
      v9 = (WebCore::SecurityOriginData *)(v6 + 8);
      v14 = &v13;
      v10 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v7])(&v14, v6 + 8);
      if (MEMORY[0x19AEA53F4](*v10, "file", 4) && *(_BYTE *)(v8 + 59))
        return WTF::StringImpl::createWithoutCopyingNonEmpty();
      else
        return WebCore::SecurityOriginData::toString(v9, a3);
    }
  }
  else
  {
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v11 += 2;
    *a3 = v11;
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::overrideTransientActivationDurationForTesting(uint64_t result)
{
  uint64_t v1;

  {
    LOBYTE(WebCore::transientActivationDurationOverrideForTesting(void)::overrideForTesting) = 0;
    byte_1EE2F7E90 = 0;
  }
  v1 = *(_QWORD *)result;
  byte_1EE2F7E90 = *(_BYTE *)(result + 8);
  WebCore::transientActivationDurationOverrideForTesting(void)::overrideForTesting = v1;
  return result;
}

BOOL WebCore::LocalDOMWindow::hasTransientActivation(WebCore::LocalDOMWindow *this)
{
  double v2;
  double v3;
  double v5;

  WTF::MonotonicTime::now(this);
  v3 = *((double *)this + 37);
  if (v2 < v3)
    return 0;
  {
    LOBYTE(WebCore::transientActivationDurationOverrideForTesting(void)::overrideForTesting) = 0;
    byte_1EE2F7E90 = 0;
    goto LABEL_8;
  }
  if (!byte_1EE2F7E90)
  {
LABEL_8:
    v5 = 5.0;
    return v2 < v3 + v5;
  }
  v5 = *(double *)&WebCore::transientActivationDurationOverrideForTesting(void)::overrideForTesting;
  return v2 < v3 + v5;
}

BOOL WebCore::LocalDOMWindow::hasHistoryActionActivation(WebCore::LocalDOMWindow *this)
{
  return *((double *)this + 38) != *((double *)this + 37);
}

uint64_t WebCore::LocalDOMWindow::consumeTransientActivation(WebCore::LocalDOMWindow *this)
{
  _BOOL8 hasTransientActivation;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;

  hasTransientActivation = WebCore::LocalDOMWindow::hasTransientActivation(this);
  if (!hasTransientActivation)
    return hasTransientActivation;
  v3 = *((_QWORD *)this + 9);
  if (!v3)
    return hasTransientActivation;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return hasTransientActivation;
  if (!*(_BYTE *)(v4 + 178))
  {
    v5 = *(_QWORD *)(v4 + 240);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8) + 128) + 8);
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        while (1)
        {
          if (!*(_BYTE *)(v7 + 144))
          {
            v10 = (unsigned int *)(v7 + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 + 1, v10));
            v12 = *(_QWORD *)(v7 + 296);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 696);
              if (v13)
              {
                v14 = *(_DWORD *)(v13 + 24);
                *(_DWORD *)(v13 + 24) = v14 + 1;
                if (fabs(*(double *)(v13 + 296)) != INFINITY)
                  *(_QWORD *)(v13 + 296) = 0xFFF0000000000000;
                if (v14)
                  *(_DWORD *)(v13 + 24) = v14;
                else
                  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
              }
            }
            do
            {
              v15 = __ldaxr(v10);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v10));
            if (!v16)
            {
              atomic_store(1u, v10);
              v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v26 = off_1E31FE290;
              v26[1] = v10;
              v29 = v26;
              WTF::ensureOnMainThread();
              if (v29)
                (*(void (**)(_QWORD *))(*v29 + 8))(v29);
            }
          }
          v17 = *(_QWORD *)(v7 + 88);
          if (v17)
            break;
          v18 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8);
          if (v18)
          {
            v17 = *(_QWORD *)(v7 + 72);
            if (v17)
              break;
            while (1)
            {
              v19 = *(_QWORD *)(v18 + 56);
              if (!v19)
                break;
              v18 = *(_QWORD *)(v19 + 8);
              if (!v18)
                break;
              v17 = *(_QWORD *)(v18 + 72);
              if (v17)
                goto LABEL_26;
            }
          }
          v17 = 0;
          v22 = 1;
LABEL_30:
          v23 = (unsigned int *)(v7 + 8);
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v23);
            v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v27 = off_1E31FE290;
            v27[1] = v23;
            v30 = v27;
            WTF::ensureOnMainThread();
            if (v30)
              (*(void (**)(_QWORD *))(*v30 + 8))(v30);
          }
          v7 = v17;
          if (v22)
            return hasTransientActivation;
        }
LABEL_26:
        v20 = (unsigned int *)(v17 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        v22 = 0;
        goto LABEL_30;
      }
    }
    return hasTransientActivation;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalDOMWindow::consumeHistoryActionUserActivation(WebCore::LocalDOMWindow *this)
{
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;

  v2 = *((double *)this + 37);
  v1 = *((double *)this + 38);
  if (v1 == v2)
    return v1 != v2;
  v3 = *((_QWORD *)this + 9);
  if (!v3)
    return v1 != v2;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return v1 != v2;
  if (!*(_BYTE *)(v4 + 178))
  {
    v5 = *(_QWORD *)(v4 + 240);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8) + 128) + 8);
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        while (1)
        {
          if (!*(_BYTE *)(v7 + 144))
          {
            v10 = (unsigned int *)(v7 + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 + 1, v10));
            v12 = *(_QWORD *)(v7 + 296);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 696);
              if (v13)
              {
                v14 = *(_DWORD *)(v13 + 24);
                *(_DWORD *)(v13 + 24) = v14 + 1;
                *(_QWORD *)(v13 + 304) = *(_QWORD *)(v13 + 296);
                if (v14)
                  *(_DWORD *)(v13 + 24) = v14;
                else
                  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
              }
            }
            do
            {
              v15 = __ldaxr(v10);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v10));
            if (!v16)
            {
              atomic_store(1u, v10);
              v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v26 = off_1E31FE290;
              v26[1] = v10;
              v29 = v26;
              WTF::ensureOnMainThread();
              if (v29)
                (*(void (**)(_QWORD *))(*v29 + 8))(v29);
            }
          }
          v17 = *(_QWORD *)(v7 + 88);
          if (v17)
            break;
          v18 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8);
          if (v18)
          {
            v17 = *(_QWORD *)(v7 + 72);
            if (v17)
              break;
            while (1)
            {
              v19 = *(_QWORD *)(v18 + 56);
              if (!v19)
                break;
              v18 = *(_QWORD *)(v19 + 8);
              if (!v18)
                break;
              v17 = *(_QWORD *)(v18 + 72);
              if (v17)
                goto LABEL_24;
            }
          }
          v17 = 0;
          v22 = 1;
LABEL_28:
          v23 = (unsigned int *)(v7 + 8);
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v23);
            v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v27 = off_1E31FE290;
            v27[1] = v23;
            v30 = v27;
            WTF::ensureOnMainThread();
            if (v30)
              (*(void (**)(_QWORD *))(*v30 + 8))(v30);
          }
          v7 = v17;
          if (v22)
            return v1 != v2;
        }
LABEL_24:
        v20 = (unsigned int *)(v17 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        v22 = 0;
        goto LABEL_28;
      }
    }
    return v1 != v2;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalDOMWindow::styleMedia(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  WebCore::StyleMedia *v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;

  result = *((_QWORD *)this + 17);
  if (!result)
  {
    v3 = (WebCore::StyleMedia *)WTF::fastMalloc((WTF *)0x10);
    result = WebCore::StyleMedia::StyleMedia(v3, this);
    v5 = (WTF *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = result;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        v6 = *((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr((unsigned int *)v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, (unsigned int *)v6));
          if (!v8)
          {
            v11 = v5;
            v12 = (WTF *)v6;
            atomic_store(1u, (unsigned int *)v6);
            v9 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v9)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
            v10 = (WTF *)*((_QWORD *)v12 + 2);
            if (v10)
            {
              *((_QWORD *)v12 + 2) = 0;
              *((_DWORD *)v12 + 6) = 0;
              WTF::fastFree(v10, v4);
            }
            WTF::fastFree(v12, v4);
            v5 = v11;
          }
        }
        WTF::fastFree(v5, v4);
        return *((_QWORD *)this + 17);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
  }
  return result;
}

_QWORD *WTF::Ref<WebCore::CSSComputedStyleDeclaration,WTF::RawPtrTraits<WebCore::CSSComputedStyleDeclaration>,WTF::DefaultRefDerefTraits<WebCore::CSSComputedStyleDeclaration>>::~Ref(_DWORD **a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  WebCore::CSSComputedStyleDeclaration *v3;
  bmalloc::api *v5;
  void *v6;
  _QWORD *v7;

  v2 = a1;
  v3 = (WebCore::CSSComputedStyleDeclaration *)*a1;
  *v2 = 0;
  if (v3)
  {
    v7 = v2;
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::CSSComputedStyleDeclaration::~CSSComputedStyleDeclaration(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
    return v7;
  }
  return v2;
}

void WebCore::LocalDOMWindow::getMatchedCSSRules(WebCore::LocalDOMWindow *this@<X0>, WebCore::Element *a2@<X1>, unsigned int **a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>, int16x8_t a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  WebCore::Style::Scope *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  WTF *v43;
  int v44;
  WebCore::StyleRuleBase **v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  void *v52;
  int v53;
  WTF *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  _DWORD *v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  WTF::StringImpl *v69;
  char v70;
  char v71;
  char v72;
  WTF *v73;
  int v74;
  unsigned int v75;
  char v76[8];
  int v77;
  WTF::StringImpl *v78;
  char v79;
  BOOL v80;
  unsigned __int32 v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  char v85;

  v7 = *((_QWORD *)this + 9);
  if (!v7)
    goto LABEL_7;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_7;
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    goto LABEL_122;
  }
  v9 = *(_QWORD *)(v8 + 240);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(WebCore::LocalDOMWindow **)(*(_QWORD *)(v10 + 296) + 696) != this)
  {
LABEL_7:
    *a5 = 0;
    return;
  }
  v15 = *(_DWORD *)(v8 - 264);
  *(_DWORD *)(v8 - 264) = v15 + 2;
  v80 = *(_BYTE *)(v8 + 3096) == 2;
  v16 = *(_QWORD *)(v8 + 392);
  v17 = *(_DWORD *)(v16 + 704);
  v18 = *(_QWORD *)(v16 + 688);
  *((_QWORD *)&v20 + 1) = v18;
  *(_QWORD *)&v20 = *(_QWORD *)(v16 + 680);
  v19 = v20 >> 18;
  *((_QWORD *)&v20 + 1) = v18;
  v21 = v20 >> 14;
  *((_QWORD *)&v20 + 1) = v20;
  *(_QWORD *)&v20 = *(_QWORD *)(v16 + 672);
  a6.i16[0] = v20 >> 18;
  a6.i16[1] = v20 >> 38;
  a6.i16[2] = v21;
  a6.i16[3] = v19;
  v22 = *(_QWORD *)(v16 + 696);
  *(int8x8_t *)a6.i8 = vand_s8(*(int8x8_t *)a6.i8, (int8x8_t)0x1000100010001);
  v81 = vmovn_s16(a6).u32[0];
  v82 = (v18 & 0x20000000) != 0;
  v83 = (v22 & 0x20000000000000) != 0;
  v84 = (v17 & 0x400) != 0;
  v85 = 0;
  if (v15)
  {
    *(_DWORD *)(v8 - 264) = v15;
  }
  else if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288));
  }
  WebCore::CSSSelectorParser::parsePseudoElement(a3, (const WTF::String *)&v80, (uint64_t)v76);
  if (!v76[0] && (!v79 || !v78) && *a3 && (*a3)[1])
  {
    *a5 = 0;
    goto LABEL_80;
  }
  v25 = *((_QWORD *)this + 9);
  if (!v25)
    goto LABEL_23;
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26)
    goto LABEL_23;
  if (*(_BYTE *)(v26 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE17FCLL);
  }
  v27 = *(_QWORD *)(v26 + 240);
  if (!v27)
  {
LABEL_23:
    v28 = 0;
    goto LABEL_24;
  }
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
  {
LABEL_24:
    v31 = 1;
    goto LABEL_25;
  }
  v29 = (unsigned int *)(v28 + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  v31 = 0;
LABEL_25:
  v32 = *(_QWORD *)(v28 + 296);
  if (v32)
    *(_DWORD *)(v32 + 24) += 2;
  v33 = *(WebCore::Style::Scope **)(v32 + 1328);
  if (*((_BYTE *)v33 + 234))
    WebCore::Style::Scope::flushPendingDescendantUpdates(*(WebCore::Style::Scope **)(v32 + 1328), (uint64_t)v23, v24);
  if (*((_BYTE *)v33 + 233))
    WebCore::Style::Scope::flushPendingSelfUpdate(v33, (uint64_t)v23, v24);
  if (*(_DWORD *)(v32 + 24) == 2)
  {
    if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v32);
  }
  else
  {
    *(_DWORD *)(v32 + 24) -= 2;
  }
  if (a4)
    v34 = 4;
  else
    v34 = 6;
  v35 = *(_QWORD *)(*(_QWORD *)(v28 + 296) + 1328);
  if (!*(_QWORD *)(v35 + 32))
  {
    if (*(_QWORD *)(v35 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(*(_QWORD *)(v28 + 296) + 1328));
    else
      WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(*(_QWORD *)(v28 + 296) + 1328));
    v60 = *(_QWORD *)(v35 + 32);
    if (*(_DWORD *)(v60 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v60 + 32), v59);
    if (*(_BYTE *)(v60 + 242)
      || *(_BYTE *)(v60 + 243)
      || *(_BYTE *)(v60 + 244)
      || *(_BYTE *)(v60 + 245)
      || *(_BYTE *)(v60 + 246)
      || *(_BYTE *)(v60 + 247)
      || *(_BYTE *)(v60 + 248))
    {
      *(_BYTE *)(v35 + 236) = 1;
    }
  }
  v36 = *(_QWORD *)(v35 + 32);
  LOBYTE(v68) = 0;
  v72 = 0;
  if (v79)
  {
    LODWORD(v68) = v77;
    v37 = v78;
    if (v78)
      *(_DWORD *)v78 += 2;
    v69 = v37;
    v70 = 0;
    v71 = 0;
    v72 = 1;
  }
  WebCore::Style::Resolver::pseudoStyleRulesForElement(v36, a2, (uint64_t)&v68, v34, (uint64_t)&v73);
  if (v72)
  {
    v38 = v69;
    v69 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v23);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  if (!v75)
  {
    *a5 = 0;
    goto LABEL_75;
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v28 + 136) + 672);
  v40 = WTF::fastMalloc((WTF *)0x20);
  v41 = v40;
  *(_DWORD *)(v40 + 8) = 1;
  *(_QWORD *)v40 = off_1E3398910;
  *(_QWORD *)(v40 + 16) = 0;
  v42 = (void **)(v40 + 16);
  *(_QWORD *)(v40 + 24) = 0;
  if (v75)
  {
    v66 = v31;
    v67 = v28;
    v43 = 0;
    v44 = 0;
    v45 = (WebCore::StyleRuleBase **)v73;
    v46 = 8 * v75;
    do
    {
      if ((v39 & 1) != 0 || (*((_BYTE *)*v45 + 4) & 0x20) != 0)
      {
        WebCore::StyleRuleBase::createCSSOMWrapper(*v45, 0, 0, (uint64_t *)&v68);
        v47 = *(unsigned int *)(v41 + 28);
        if ((_DWORD)v47 == *(_DWORD *)(v41 + 24))
        {
          v48 = v47 + (v47 >> 2);
          if (v48 >= 0x10)
            v49 = v48 + 1;
          else
            v49 = 16;
          if (v49 <= v47 + 1)
            v50 = v47 + 1;
          else
            v50 = v49;
          if (v50 >> 29)
          {
            __break(0xC471u);
LABEL_122:
            JUMPOUT(0x195FE1798);
          }
          v51 = *v42;
          v52 = (void *)WTF::fastMalloc((WTF *)(8 * v50));
          *(_DWORD *)(v41 + 24) = v50;
          *(_QWORD *)(v41 + 16) = v52;
          memcpy(v52, v51, 8 * v47);
          if (v51)
          {
            if (*v42 == v51)
            {
              *(_QWORD *)(v41 + 16) = 0;
              *(_DWORD *)(v41 + 24) = 0;
            }
            WTF::fastFree((WTF *)v51, v23);
          }
          v47 = *(unsigned int *)(v41 + 28);
          v43 = *(WTF **)(v41 + 16);
          *((_QWORD *)v43 + v47) = v68;
        }
        else
        {
          v43 = (WTF *)*v42;
          *((_QWORD *)*v42 + v47) = v68;
        }
        v44 = v47 + 1;
        *(_DWORD *)(v41 + 28) = v47 + 1;
      }
      ++v45;
      v46 -= 8;
    }
    while (v46);
    v31 = v66;
    if (v44)
    {
      *a5 = v41;
      v28 = v67;
      goto LABEL_74;
    }
    *a5 = 0;
    v53 = *(_DWORD *)(v41 + 8) - 1;
    v28 = v67;
    if (*(_DWORD *)(v41 + 8) != 1)
      goto LABEL_73;
    if (v43)
    {
      *(_QWORD *)(v41 + 16) = 0;
      *(_DWORD *)(v41 + 24) = 0;
      WTF::fastFree(v43, v23);
    }
  }
  else
  {
    *a5 = 0;
    v53 = *(_DWORD *)(v40 + 8) - 1;
    if (*(_DWORD *)(v40 + 8) != 1)
    {
LABEL_73:
      *(_DWORD *)(v41 + 8) = v53;
      goto LABEL_74;
    }
  }
  WTF::fastFree((WTF *)v41, v23);
LABEL_74:
  if (v75)
  {
    v63 = v73;
    v64 = 8 * v75;
    do
    {
      v65 = *(_DWORD **)v63;
      *(_QWORD *)v63 = 0;
      if (v65)
      {
        if (*v65 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v65, v23);
        else
          --*v65;
      }
      v63 = (WTF *)((char *)v63 + 8);
      v64 -= 8;
    }
    while (v64);
  }
LABEL_75:
  v54 = v73;
  if (v73)
  {
    v73 = 0;
    v74 = 0;
    WTF::fastFree(v54, v23);
    if ((v31 & 1) != 0)
      goto LABEL_80;
LABEL_77:
    v55 = (unsigned int *)(v28 + 8);
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v61 = off_1E31FE290;
      v61[1] = v55;
      v68 = v61;
      WTF::ensureOnMainThread();
      v62 = (uint64_t)v68;
      v68 = 0;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    }
    goto LABEL_80;
  }
  if ((v31 & 1) == 0)
    goto LABEL_77;
LABEL_80:
  if (v79)
  {
    v58 = v78;
    v78 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v23);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
}

uint64_t WebCore::LocalDOMWindow::webkitConvertPointFromNodeToPage@<X0>(uint64_t result@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  float v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unint64_t v13;

  if (a2 && a3 && (v6 = *(_QWORD *)(result + 72)) != 0 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    if (*(_BYTE *)(v7 + 178))
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      *(_DWORD *)(v7 - 264) += 2;
      WebCore::Document::updateLayout(v7 - 288, 2u, 0);
      v13 = *(_QWORD *)(a3 + 4);
      v9 = WebCore::Node::convertToPage(a2, (const WebCore::FloatPoint *)&v13);
      v11 = v10;
      v13 = __PAIR64__(v10, LODWORD(v9));
      result = WTF::fastMalloc((WTF *)0xC);
      *(_DWORD *)result = 1;
      *(float *)(result + 4) = v9;
      *(_DWORD *)(result + 8) = v11;
      *a4 = result;
      if (*(_DWORD *)(v7 - 264) == 2)
      {
        if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), v12);
      }
      else
      {
        *(_DWORD *)(v7 - 264) -= 2;
      }
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::webkitConvertPointFromPageToNode@<X0>(uint64_t result@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  float v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unint64_t v13;

  if (a2 && a3 && (v6 = *(_QWORD *)(result + 72)) != 0 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    if (*(_BYTE *)(v7 + 178))
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      *(_DWORD *)(v7 - 264) += 2;
      WebCore::Document::updateLayout(v7 - 288, 2u, 0);
      v13 = *(_QWORD *)(a3 + 4);
      v9 = WebCore::Node::convertFromPage(a2, (const WebCore::FloatPoint *)&v13);
      v11 = v10;
      v13 = __PAIR64__(v10, LODWORD(v9));
      result = WTF::fastMalloc((WTF *)0xC);
      *(_DWORD *)result = 1;
      *(float *)(result + 4) = v9;
      *(_DWORD *)(result + 8) = v11;
      *a4 = result;
      if (*(_DWORD *)(v7 - 264) == 2)
      {
        if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), v12);
      }
      else
      {
        *(_DWORD *)(v7 - 264) -= 2;
      }
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

double WebCore::LocalDOMWindow::devicePixelRatio(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;

  v1 = *((_QWORD *)this + 9);
  v2 = 0.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE1B9CLL);
      }
      v4 = *(_QWORD *)(v3 + 240);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = (unsigned int *)(v5 + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
          v8 = *(_QWORD *)(v5 + 24);
          v2 = 0.0;
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = (*(_DWORD *)v9)++;
              v2 = *(float *)(v9 + 364);
              if (v10)
              {
                *(_DWORD *)v9 = v10;
              }
              else
              {
                WebCore::Page::~Page(v9);
                WTF::fastFree(v14, v15);
              }
            }
          }
          do
          {
            v11 = __ldaxr(v6);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v6));
          if (!v12)
          {
            atomic_store(1u, v6);
            v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v16 = off_1E31FE290;
            v16[1] = v6;
            v17 = v16;
            WTF::ensureOnMainThread();
            if (v17)
              (*(void (**)(_QWORD *))(*v17 + 8))(v17);
          }
        }
      }
    }
  }
  return v2;
}

_QWORD *WebCore::LocalDOMWindow::scrollBy(_QWORD *result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  __n128 v17;
  double v18;
  double v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  __int128 v31;
  __n128 v32;
  uint64_t v33;

  v2 = result[9];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE1EBCLL);
      }
      v4 = *(_QWORD *)(v3 + 240);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = (uint64_t)result;
          if (*(_QWORD **)(*(_QWORD *)(v5 + 296) + 696) == result)
          {
            *(_DWORD *)(v3 - 264) += 2;
            result = (_QWORD *)WebCore::Document::updateLayout(v3 - 288, 2u, 0);
            if (*(_DWORD *)(v3 - 264) == 2)
            {
              if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v8);
            }
            else
            {
              *(_DWORD *)(v3 - 264) -= 2;
            }
            v9 = *(_QWORD *)(v6 + 72);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 8);
              if (v10)
              {
                if (*(_BYTE *)(v10 + 178))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195FE1EDCLL);
                }
                v11 = *(_QWORD *)(v10 + 240);
                if (v11)
                {
                  v12 = *(_QWORD *)(v11 + 8);
                  if (v12)
                  {
                    v13 = (unsigned int *)(v12 + 8);
                    do
                      v14 = __ldaxr(v13);
                    while (__stlxr(v14 + 1, v13));
                    v15 = *(_QWORD *)(v12 + 288);
                    if (v15)
                    {
                      ++*(_DWORD *)(v15 + 8);
                      v16 = *a2;
                      v17 = (__n128)a2[1];
                      v33 = *((_QWORD *)a2 + 4);
                      v31 = v16;
                      v32 = v17;
                      v17.n128_u64[0] = *((_QWORD *)a2 + 1);
                      if ((v17.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
                        v17.n128_f64[0] = 0.0;
                      if (*((_BYTE *)a2 + 16))
                        v18 = v17.n128_f64[0];
                      else
                        v18 = 0.0;
                      v32.n128_u8[0] = 1;
                      v17.n128_u64[0] = *((_QWORD *)a2 + 3);
                      if ((v17.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
                        v17.n128_f64[0] = 0.0;
                      if (*((_BYTE *)a2 + 32))
                        v19 = v17.n128_f64[0];
                      else
                        v19 = 0.0;
                      LOBYTE(v33) = 1;
                      if (*(_QWORD *)(v15 + 40))
                        v20 = WebCore::ScrollView::unobscuredContentRect(v15, 0);
                      else
                        v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)(v15 + 64) + 832))(v15 + 64, 0, 1, v17);
                      v23 = v20 << 6;
                      if (v20 < -33554432)
                        v23 = 0x80000000;
                      if (v20 <= 0x1FFFFFF)
                        v24 = v23;
                      else
                        v24 = 0x7FFFFFFF;
                      *((double *)&v31 + 1) = v18
                                            + (double)(int)WebCore::LocalFrameView::mapFromLayoutToCSSUnits(*(_QWORD *)(v15 + 328), v24);
                      if (*(_QWORD *)(v15 + 40))
                        v25 = WebCore::ScrollView::unobscuredContentRect(v15, 0);
                      else
                        v25 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 + 64) + 832))(v15 + 64, 0, 1);
                      v26 = (v25 >> 26) & 0xFFFFFFC0;
                      if (SHIDWORD(v25) < -33554432)
                        LODWORD(v26) = 0x80000000;
                      if (SHIDWORD(v25) <= 0x1FFFFFF)
                        v27 = v26;
                      else
                        v27 = 0x7FFFFFFF;
                      v32.n128_f64[1] = v19
                                      + (double)(int)WebCore::LocalFrameView::mapFromLayoutToCSSUnits(*(_QWORD *)(v15 + 328), v27);
                      *(float *)&v21 = v18;
                      *(float *)&v22 = v19;
                      result = (_QWORD *)WebCore::LocalDOMWindow::scrollTo(v6, (double *)&v31, 1, 0, v21 | ((unint64_t)v22 << 32), 1);
                      if (*(_DWORD *)(v15 + 8) == 1)
                        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
                      else
                        --*(_DWORD *)(v15 + 8);
                    }
                    do
                    {
                      v28 = __ldaxr(v13);
                      v29 = v28 - 1;
                    }
                    while (__stlxr(v29, v13));
                    if (!v29)
                    {
                      atomic_store(1u, v13);
                      v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                      *v30 = off_1E31FE290;
                      v30[1] = v13;
                      *(_QWORD *)&v31 = v30;
                      WTF::ensureOnMainThread();
                      result = (_QWORD *)v31;
                      *(_QWORD *)&v31 = 0;
                      if (result)
                        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::scrollTo(uint64_t result, double *a2, __int8 a3, __int8 a4, uint64_t a5, __int8 a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LocalDOMWindow *v10;
  uint64_t v11;
  int v17;
  double v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __n128 v21;
  __n128 v22;
  int v23;
  int v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  uint64_t v32;
  int8x16_t v33;
  int v34;
  void *v35;
  __int8 v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  _DWORD v40[2];

  v6 = *(_QWORD *)(result + 72);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE2230);
      }
      v8 = *(_QWORD *)(v7 + 240);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v10 = (WebCore::LocalDOMWindow *)result;
          if (*(_QWORD *)(*(_QWORD *)(v9 + 296) + 696) == result)
          {
            v11 = *(_QWORD *)(v9 + 288);
            if (v11)
            {
              ++*(_DWORD *)(v11 + 8);
              if (*(_QWORD *)(v11 + 40))
                v17 = WebCore::ScrollView::unobscuredContentRect(v11, 0);
              else
                v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 + 64) + 832))(v11 + 64, 0, 1);
              v18 = (double)v17;
              if (*(_QWORD *)(v11 + 40))
                v19 = WebCore::ScrollView::unobscuredContentRect(v11, 0);
              else
                v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 + 64) + 832))(v11 + 64, 0, 1);
              v23 = *(unsigned __int8 *)a2;
              v24 = *((unsigned __int8 *)a2 + 1);
              v25 = a2[1];
              if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                v25 = 0.0;
              if (*((_BYTE *)a2 + 16))
                v26 = v25;
              else
                v26 = v18;
              v22.n128_f64[0] = a2[3];
              if ((v22.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
                v22.n128_f64[0] = 0.0;
              if (*((_BYTE *)a2 + 32))
                v27 = v22.n128_f64[0];
              else
                v27 = (double)SHIDWORD(v19);
              if (*(_BYTE *)(v11 + 109)
                || v26 != 0.0
                || v27 != 0.0
                || (!*(_QWORD *)(v11 + 40)
                  ? (v21.n128_f64[0] = (double)SHIDWORD(v19),
                     result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, __n128, __n128))(*(_QWORD *)(v11 + 64)
                                                                                                  + 832))(v11 + 64, 0, 1, v21, v22)): (result = WebCore::ScrollView::unobscuredContentRect(v11, 0)), result))
              {
                WebCore::LocalFrameView::cancelScheduledScrolls((WebCore::LocalFrameView *)v11, v20);
                WebCore::LocalDOMWindow::protectedDocument((uint64_t)v10, &v39);
                v28 = v39.i64[0];
                WebCore::Document::updateLayout(v39.i64[0], 0xAu, 0);
                if (v28)
                {
                  if (*(_DWORD *)(v28 + 24) == 2)
                  {
                    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v28, v29);
                  }
                  else
                  {
                    *(_DWORD *)(v28 + 24) -= 2;
                  }
                }
                v30 = (int)WebCore::LocalFrameView::mapFromCSSToLayoutUnits(*(WebCore::LocalFrameView **)(v11 + 328), (int)v26)/ 64;
                v31 = WebCore::LocalFrameView::mapFromCSSToLayoutUnits(*(WebCore::LocalFrameView **)(v11 + 328), (int)v27);
                v40[0] = v30;
                v40[1] = v31 / 64;
                v32 = *(_QWORD *)(WebCore::LocalDOMWindow::document(v10) + 1272);
                if (v32)
                {
                  if (v24)
                    v34 = v23;
                  else
                    v34 = 0;
                  *(_DWORD *)(v32 + 24) += 2;
                  v36 = WebCore::useSmoothScrolling(v34, v32);
                  if (*(_DWORD *)(v32 + 24) == 2)
                  {
                    if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v32, v35);
                  }
                  else
                  {
                    *(_DWORD *)(v32 + 24) -= 2;
                  }
                }
                else
                {
                  v36 = 0;
                }
                v37.i8[0] = 1;
                v37.i32[1] = 16843009;
                v37.i64[1] = 0x101010101010101;
                v37.i8[1] = a3;
                v37.i8[2] = v36;
                v37.i8[3] = a4;
                v33.i64[0] = a5;
                v38 = vextq_s8(v37, v33, 0xCuLL);
                v38.i32[0] = v37.i32[0];
                v38.i8[12] = a6;
                v39 = v38;
                result = WebCore::ScrollView::setContentsScrollPosition((WebCore::ScrollView *)v11, (WebCore::IntPoint *)v40, (uint64_t)&v39);
              }
              if (*(_DWORD *)(v11 + 8) == 1)
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
              else
                --*(_DWORD *)(v11 + 8);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::cancelScheduledScrolls(WebCore::LocalFrameView *this, WTF::StringImpl *a2)
{
  *((_BYTE *)this + 1373) = 0;
  if ((*((_QWORD *)this + 109) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 840));
  return WebCore::LocalFrameView::cancelScheduledTextFragmentIndicatorTimer((uint64_t)this, a2);
}

uint64_t WebCore::LocalFrameView::mapFromCSSToLayoutUnits(WebCore::LocalFrameView *this, int a2)
{
  unsigned int *v3;
  unsigned int v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = (unsigned int *)((char *)this + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *((float *)this + 148) * (float)a2;
  v6 = *((_QWORD *)this + 3);
  v7 = 1.0;
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v9 = (*(_DWORD *)v8)++;
      if (*(WebCore::LocalFrameView **)(*((_QWORD *)this + 16) + 8) == this && !*(_BYTE *)(v8 + 1098))
        v7 = *(float *)(v8 + 356);
      if (v9)
      {
        *(_DWORD *)v8 = v9;
      }
      else
      {
        WebCore::Page::~Page(v8);
        WTF::fastFree(v15, v16);
      }
    }
  }
  v10 = (float)(v5 * v7) * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFFLL;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v10;
  }
  do
  {
    v12 = __ldaxr(v3);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v3));
  if (!v13)
  {
    atomic_store(1u, v3);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E31FE290;
    v17[1] = v3;
    v18 = v17;
    WTF::ensureOnMainThread();
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v11;
}

uint64_t WebCore::LocalDOMWindow::allowedToChangeWindowGeometry(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL8 v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  if (!this)
    return 0;
  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  if (!*(_BYTE *)(v1 + 178))
  {
    v2 = *(_QWORD *)(v1 + 240);
    if (v2)
    {
      v3 = *(_QWORD **)(v2 + 8);
      if (v3)
      {
        v4 = (unsigned int *)(v3 + 1);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = v3[3];
        v7 = v6 && *(_QWORD *)(v6 + 8) && *(_QWORD **)(v3[16] + 8) == v3 && *(unsigned __int8 *)(v3[80] + 168) == 0;
        do
        {
          v8 = __ldaxr(v4);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v4));
        if (!v9)
        {
          atomic_store(1u, v4);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E31FE290;
          v10[1] = v4;
          v12 = v10;
          WTF::ensureOnMainThread();
          if (v12)
            (*(void (**)(_QWORD *))(*v12 + 8))(v12);
        }
        return v7;
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalDOMWindow::moveBy(WebCore::LocalDOMWindow **this, int a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  WebCore *v20;
  WebCore::Widget *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  WTF *v34;
  void *v35;
  _DWORD v36[4];

  result = WebCore::LocalDOMWindow::allowedToChangeWindowGeometry(this[9]);
  if (!(_DWORD)result)
    return result;
  v7 = *((_QWORD *)this[9] + 1);
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE26A8);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 240) + 8) + 24);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_29;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
LABEL_29:
    v10 = 1;
    goto LABEL_6;
  }
  v10 = 0;
  ++*(_DWORD *)v9;
LABEL_6:
  v11 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16));
  v13 = v12;
  v15 = v14;
  v16 = v11 + (float)a2;
  v18 = v17 + (float)a3;
  v19 = *(_QWORD *)(v9 + 48);
  v20 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 56))(*(_QWORD *)(v9 + 160));
  WebCore::screenAvailableRect(v20, v21);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 48)
                                                                                                 + 16));
  v30 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1360))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16));
  if (v30 < v13)
    v30 = v13;
  if (v27 < v30)
    v30 = v27;
  if (v31 < v15)
    v31 = v15;
  if (v29 < v31)
    v31 = v29;
  v32 = (float)(v23 + v27) - v30;
  if (v32 >= v16)
    v32 = v16;
  if (v23 >= v32)
    v32 = v23;
  v33 = (float)(v25 + v29) - v31;
  if (v33 >= v18)
    v33 = v18;
  if (v25 >= v33)
    v33 = v25;
  *(float *)v36 = v32;
  *(float *)&v36[1] = v33;
  *(float *)&v36[2] = v30;
  *(float *)&v36[3] = v31;
  result = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(v19 + 16) + 8))(*(_QWORD *)(v19 + 16), v36);
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::Page::~Page(v9);
      return WTF::fastFree(v34, v35);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::moveTo(WebCore::LocalDOMWindow **this, int a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float v11;
  float v12;
  float v13;
  float v14;
  WebCore *v15;
  WebCore::Widget *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  WebCore *v22;
  WebCore::Widget *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  WTF *v36;
  void *v37;
  _DWORD v38[4];

  result = WebCore::LocalDOMWindow::allowedToChangeWindowGeometry(this[9]);
  if (!(_DWORD)result)
    return result;
  v7 = *((_QWORD *)this[9] + 1);
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE28ACLL);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 240) + 8) + 24);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_29;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
LABEL_29:
    v10 = 1;
    goto LABEL_6;
  }
  v10 = 0;
  ++*(_DWORD *)v9;
LABEL_6:
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 48)
                                                                                                 + 16));
  v12 = v11;
  v14 = v13;
  v15 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 56))(*(_QWORD *)(v9 + 160));
  WebCore::screenAvailableRect(v15, v16);
  v18 = v17 + (float)a2;
  v20 = v19 + (float)a3;
  v21 = *(_QWORD *)(v9 + 48);
  v22 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 56))(*(_QWORD *)(v9 + 160));
  WebCore::screenAvailableRect(v22, v23);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 48)
                                                                                                 + 16));
  v32 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1360))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16));
  if (v32 < v12)
    v32 = v12;
  if (v29 < v32)
    v32 = v29;
  if (v33 < v14)
    v33 = v14;
  if (v31 < v33)
    v33 = v31;
  v34 = (float)(v25 + v29) - v32;
  if (v34 >= v18)
    v34 = v18;
  if (v25 >= v34)
    v34 = v25;
  v35 = (float)(v27 + v31) - v33;
  if (v35 >= v20)
    v35 = v20;
  if (v27 >= v35)
    v35 = v27;
  *(float *)v38 = v34;
  *(float *)&v38[1] = v35;
  *(float *)&v38[2] = v32;
  *(float *)&v38[3] = v33;
  result = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(v21 + 16) + 8))(*(_QWORD *)(v21 + 16), v38);
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::Page::~Page(v9);
      return WTF::fastFree(v36, v37);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::resizeBy(WebCore::LocalDOMWindow **this, int a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  double v17;
  float v18;
  float v19;
  double v20;
  float v21;
  double v22;
  float v23;
  double v24;
  float v25;
  uint64_t v26;
  WebCore *v27;
  WebCore::Widget *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  WTF *v41;
  void *v42;
  _DWORD v43[4];

  result = WebCore::LocalDOMWindow::allowedToChangeWindowGeometry(this[9]);
  if (!(_DWORD)result)
    return result;
  v7 = *((_QWORD *)this[9] + 1);
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE2BC0);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 240) + 8) + 24);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
LABEL_7:
    v10 = 1;
    goto LABEL_8;
  }
  v10 = 0;
  ++*(_DWORD *)v9;
LABEL_8:
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 48)
                                                                                                 + 16));
  v15 = a2 << 6;
  if (a2 < -33554432)
    v15 = 0x80000000;
  if (a2 > 0x1FFFFFF)
    v15 = 0x7FFFFFFF;
  if (a3 >= -33554432)
    v16 = a3 << 6;
  else
    v16 = 0x80000000;
  if (a3 > 0x1FFFFFF)
    v16 = 0x7FFFFFFF;
  v17 = v11 * 64.0;
  if (v17 >= 2147483650.0)
  {
    v18 = 33554000.0;
  }
  else if (v17 <= -2147483650.0)
  {
    v18 = -33554000.0;
  }
  else
  {
    v18 = (float)(int)v17 * 0.015625;
  }
  v19 = (float)((float)v15 * 0.015625) + v13;
  v20 = v12 * 64.0;
  if (v20 >= 2147483650.0)
  {
    v21 = 33554000.0;
  }
  else if (v20 <= -2147483650.0)
  {
    v21 = -33554000.0;
  }
  else
  {
    v21 = (float)(int)v20 * 0.015625;
  }
  v22 = v19 * 64.0;
  if (v22 >= 2147483650.0)
  {
    v23 = 33554000.0;
  }
  else if (v22 <= -2147483650.0)
  {
    v23 = -33554000.0;
  }
  else
  {
    v23 = (float)(int)v22 * 0.015625;
  }
  v24 = (float)((float)((float)v16 * 0.015625) + v14) * 64.0;
  if (v24 >= 2147483650.0)
  {
    v25 = 33554000.0;
  }
  else if (v24 <= -2147483650.0)
  {
    v25 = -33554000.0;
  }
  else
  {
    v25 = (float)(int)v24 * 0.015625;
  }
  v26 = *(_QWORD *)(v9 + 48);
  v27 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 56))(*(_QWORD *)(v9 + 160));
  WebCore::screenAvailableRect(v27, v28);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 48)
                                                                                                 + 16));
  v37 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1360))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16));
  if (v37 < v23)
    v37 = v23;
  if (v34 < v37)
    v37 = v34;
  if (v38 < v25)
    v38 = v25;
  if (v36 < v38)
    v38 = v36;
  v39 = (float)(v30 + v34) - v37;
  if (v39 >= v18)
    v39 = v18;
  if (v30 >= v39)
    v39 = v30;
  v40 = (float)(v32 + v36) - v38;
  if (v40 >= v21)
    v40 = v21;
  if (v32 >= v40)
    v40 = v32;
  *(float *)v43 = v39;
  *(float *)&v43[1] = v40;
  *(float *)&v43[2] = v37;
  *(float *)&v43[3] = v38;
  result = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(v26 + 16) + 8))(*(_QWORD *)(v26 + 16), v43);
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::Page::~Page(v9);
      return WTF::fastFree(v41, v42);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::resizeTo(WebCore::LocalDOMWindow **this, int a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float v11;
  float v12;
  unsigned int v13;
  int v14;
  int v15;
  double v16;
  float v17;
  double v18;
  float v19;
  double v20;
  float v21;
  double v22;
  float v23;
  uint64_t v24;
  WebCore *v25;
  WebCore::Widget *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  WTF *v39;
  void *v40;
  _DWORD v41[4];

  result = WebCore::LocalDOMWindow::allowedToChangeWindowGeometry(this[9]);
  if (!(_DWORD)result)
    return result;
  v7 = *((_QWORD *)this[9] + 1);
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE2F00);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 240) + 8) + 24);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
LABEL_7:
    v10 = 1;
    goto LABEL_8;
  }
  v10 = 0;
  ++*(_DWORD *)v9;
LABEL_8:
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 48)
                                                                                                 + 16));
  v13 = a2 << 6;
  if (a2 < -33554432)
    v13 = 0x80000000;
  if (a2 <= 0x1FFFFFF)
    v14 = v13;
  else
    v14 = 0x7FFFFFFF;
  v15 = a3 << 6;
  if (a3 < -33554432)
    v15 = 0x80000000;
  if (a3 > 0x1FFFFFF)
    v15 = 0x7FFFFFFF;
  v16 = v11 * 64.0;
  if (v16 >= 2147483650.0)
  {
    v17 = 33554000.0;
  }
  else if (v16 <= -2147483650.0)
  {
    v17 = -33554000.0;
  }
  else
  {
    v17 = (float)(int)v16 * 0.015625;
  }
  v18 = v12 * 64.0;
  if (v18 >= 2147483650.0)
  {
    v19 = 33554000.0;
  }
  else if (v18 <= -2147483650.0)
  {
    v19 = -33554000.0;
  }
  else
  {
    v19 = (float)(int)v18 * 0.015625;
  }
  v20 = (float)((float)v14 * 0.015625) * 64.0;
  if (v20 >= 2147483650.0)
  {
    v21 = 33554000.0;
  }
  else if (v20 <= -2147483650.0)
  {
    v21 = -33554000.0;
  }
  else
  {
    v21 = (float)(int)v20 * 0.015625;
  }
  v22 = (float)((float)v15 * 0.015625) * 64.0;
  if (v22 >= 2147483650.0)
  {
    v23 = 33554000.0;
  }
  else if (v22 <= -2147483650.0)
  {
    v23 = -33554000.0;
  }
  else
  {
    v23 = (float)(int)v22 * 0.015625;
  }
  v24 = *(_QWORD *)(v9 + 48);
  v25 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 56))(*(_QWORD *)(v9 + 160));
  WebCore::screenAvailableRect(v25, v26);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 48)
                                                                                                 + 16));
  v35 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1360))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16));
  if (v35 < v21)
    v35 = v21;
  if (v32 < v35)
    v35 = v32;
  if (v36 < v23)
    v36 = v23;
  if (v34 < v36)
    v36 = v34;
  v37 = (float)(v28 + v32) - v35;
  if (v37 >= v17)
    v37 = v17;
  if (v28 >= v37)
    v37 = v28;
  v38 = (float)(v30 + v34) - v36;
  if (v38 >= v19)
    v38 = v19;
  if (v30 >= v38)
    v38 = v30;
  *(float *)v41 = v37;
  *(float *)&v41[1] = v38;
  *(float *)&v41[2] = v35;
  *(float *)&v41[3] = v36;
  result = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(v24 + 16) + 8))(*(_QWORD *)(v24 + 16), v41);
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::Page::~Page(v9);
      return WTF::fastFree(v39, v40);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::setTimeout@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v35;
  _QWORD *v36;
  unsigned int *v37;
  _QWORD *v38;

  v6 = *(_QWORD *)(result + 72);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *(_BYTE *)a5 = 12;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 1;
    return result;
  }
  v10 = (_BYTE *)(v7 - 96);
  v11 = *(unsigned __int8 *)(v7 + 178);
  if (*(_BYTE *)(v7 + 178))
  {
    if (v11 == 1 || v11 == 2)
      ++*(_DWORD *)(v7 + 216);
  }
  else
  {
    *(_DWORD *)(v7 - 264) += 2;
  }
  v12 = *a2;
  v13 = *(_QWORD **)(*a2 + 8);
  if (v13 && *v13)
    goto LABEL_7;
  v36 = a4;
  v28 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 - 96));
  if (v28)
  {
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
  }
  v37 = v28;
  v30 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v7 - 96));
  v31 = *(_QWORD *)(*a2 + 24);
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    v33 = *(unsigned int *)(v31 + 4) | ((unint64_t)((*(_DWORD *)(v31 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v32 = 0;
    v33 = 0x100000000;
  }
  result = WebCore::ContentSecurityPolicy::allowEval((uint64_t)v37, v30, 1, v32, v33, 0);
  if (v37)
  {
    if (!atomic_load(v37))
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    do
      v35 = __ldaxr(v37);
    while (__stlxr(v35 - 1, v37));
  }
  if ((_DWORD)result)
  {
    v12 = *a2;
    a4 = v36;
LABEL_7:
    v14 = *a4;
    *a4 = 0;
    v15 = *(WTF **)(v12 + 16);
    *(_QWORD *)(v12 + 16) = v14;
    if (v15)
    {
      v16 = (uint64_t *)((char *)v15 + 8);
      v17 = *(unsigned int *)v15;
      if ((_DWORD)v17)
      {
        v18 = 8 * v17;
        do
        {
          v19 = *v16;
          if (*v16)
          {
            v20 = (uint64_t *)(v19 - 16);
            v21 = *(_QWORD *)(((v19 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v22 = *(uint64_t **)(v19 - 8);
            if (v22)
            {
              v23 = *v20;
              *v22 = *v20;
              *(_QWORD *)(v23 + 8) = v22;
              *v20 = 0;
              v20[1] = 0;
            }
            *v20 = *(_QWORD *)(v21 + 40);
            *(_QWORD *)(v21 + 40) = v20;
            *v16 = 0;
          }
          ++v16;
          v18 -= 8;
        }
        while (v18);
      }
      WTF::fastFree(v15, a2);
    }
    v24 = *a2;
    *a2 = 0;
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v25 = &off_1E33FE540;
    v25[1] = v24;
    v38 = v25;
    v26 = WebCore::DOMTimer::install(v10, (uint64_t *)&v38, 0, (double)a3 / 1000.0);
    result = (uint64_t)v38;
    if (v38)
      result = (*(uint64_t (**)(_QWORD *))(*v38 + 8))(v38);
    goto LABEL_18;
  }
  v26 = 0;
LABEL_18:
  *(_DWORD *)a5 = v26;
  *(_DWORD *)(a5 + 16) = 0;
  v27 = *(unsigned __int8 *)(v7 + 178);
  if (*(_BYTE *)(v7 + 178))
  {
    if (v27 == 1)
    {
      if (*(_DWORD *)(v7 + 216) == 1)
        return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v10 + 40))(v10);
      else
        --*(_DWORD *)(v7 + 216);
    }
    else if (v27 == 2)
    {
      return (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 216));
    }
  }
  else if (*(_DWORD *)(v7 - 264) == 2)
  {
    if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), a2);
  }
  else
  {
    *(_DWORD *)(v7 - 264) -= 2;
  }
  return result;
}

unsigned int *WebCore::LocalDOMWindow::clearTimeout(unsigned int *this, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  int v6;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(unsigned __int8 *)(v3 + 178);
      if (*(_BYTE *)(v3 + 178))
      {
        if (v4 == 1 || v4 == 2)
          ++*(_DWORD *)(v3 + 216);
      }
      else
      {
        *(_DWORD *)(v3 - 264) += 2;
      }
      this = (unsigned int *)WebCore::DOMTimer::removeById((WebCore::DOMTimer *)(v3 - 96), a2);
      v6 = *(unsigned __int8 *)(v3 + 178);
      if (*(_BYTE *)(v3 + 178))
      {
        if (v6 == 1)
        {
          if (*(_DWORD *)(v3 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
          else
            --*(_DWORD *)(v3 + 216);
        }
        else if (v6 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
        }
      }
      else if (*(_DWORD *)(v3 - 264) == 2)
      {
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v5);
      }
      else
      {
        *(_DWORD *)(v3 - 264) -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::LocalDOMWindow::setInterval@<X0>(unsigned int *result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  WebCore::ContentSecurityPolicyDirectiveList **v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50[2];

  v6 = *((_QWORD *)result + 9);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *(_BYTE *)a5 = 12;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 1;
    return result;
  }
  v11 = (_BYTE *)(v7 - 96);
  v12 = *(unsigned __int8 *)(v7 + 178);
  if (*(_BYTE *)(v7 + 178))
  {
    if (v12 == 1 || v12 == 2)
      ++*(_DWORD *)(v7 + 216);
  }
  else
  {
    *(_DWORD *)(v7 - 264) += 2;
  }
  v13 = *(_QWORD **)(*a2 + 8);
  if (v13 && *v13)
    goto LABEL_7;
  v29 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 - 96));
  v30 = v29;
  if (v29)
  {
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 + 1, v29));
  }
  v32 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v7 - 96));
  v33 = *(_QWORD *)(*a2 + 24);
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 8);
    v35 = *(unsigned int *)(v33 + 4) | ((unint64_t)((*(_DWORD *)(v33 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v34 = 0;
    v35 = 0x100000000;
  }
  v50[0] = v34;
  v50[1] = v35;
  v49 = v32;
  v48 = 1;
  v36 = v30[37];
  if (!(_DWORD)v36)
  {
    if (atomic_load(v30))
    {
      do
        v46 = __ldaxr(v30);
      while (__stlxr(v46 - 1, v30));
      goto LABEL_7;
    }
    goto LABEL_48;
  }
  v47 = 0;
  v38 = operator new(0x30uLL);
  *v38 = &off_1E34032D0;
  v38[1] = &v48;
  v38[2] = v30;
  v38[3] = &v49;
  v38[4] = v50;
  v38[5] = &v47;
  v39 = (WebCore::ContentSecurityPolicyDirectiveList **)*((_QWORD *)v30 + 17);
  v40 = 8 * v36;
  v41 = 1;
  do
  {
    v42 = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeEval(*v39, v37);
    if (v42)
    {
      v41 &= *(_BYTE *)(*(_QWORD *)(v42 + 24) + 17) != 0;
      (*(void (**)(_QWORD *, uint64_t))(*v38 + 48))(v38, v42);
    }
    ++v39;
    v40 -= 8;
  }
  while (v40);
  result = (unsigned int *)(*(uint64_t (**)(_QWORD *))(*v38 + 40))(v38);
  if (v30)
  {
    v43 = atomic_load(v30);
    v11 = (_BYTE *)(v7 - 96);
    if (v43)
    {
      do
        v44 = __ldaxr(v30);
      while (__stlxr(v44 - 1, v30));
      if ((v41 & 1) == 0)
        goto LABEL_36;
LABEL_7:
      v14 = *a2;
      v15 = *a4;
      *a4 = 0;
      v16 = *(WTF **)(v14 + 16);
      *(_QWORD *)(v14 + 16) = v15;
      if (v16)
      {
        v17 = (uint64_t *)((char *)v16 + 8);
        v18 = *(unsigned int *)v16;
        if ((_DWORD)v18)
        {
          v19 = 8 * v18;
          do
          {
            v20 = *v17;
            if (*v17)
            {
              v21 = (uint64_t *)(v20 - 16);
              v22 = *(_QWORD *)(((v20 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
              v23 = *(uint64_t **)(v20 - 8);
              if (v23)
              {
                v24 = *v21;
                *v23 = *v21;
                *(_QWORD *)(v24 + 8) = v23;
                *v21 = 0;
                v21[1] = 0;
              }
              *v21 = *(_QWORD *)(v22 + 40);
              *(_QWORD *)(v22 + 40) = v21;
              *v17 = 0;
            }
            ++v17;
            v19 -= 8;
          }
          while (v19);
        }
        WTF::fastFree(v16, a2);
      }
      v25 = *a2;
      *a2 = 0;
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = &off_1E33FE540;
      v26[1] = v25;
      v50[0] = (uint64_t)v26;
      v27 = WebCore::DOMTimer::install(v11, v50, 1, (double)a3 / 1000.0);
      result = (unsigned int *)v50[0];
      if (v50[0])
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50[0] + 8))(v50[0]);
      goto LABEL_18;
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x195FE36A0);
  }
  v11 = (_BYTE *)(v7 - 96);
  if ((v41 & 1) != 0)
    goto LABEL_7;
LABEL_36:
  v27 = 0;
LABEL_18:
  *(_DWORD *)a5 = v27;
  *(_DWORD *)(a5 + 16) = 0;
  v28 = *(unsigned __int8 *)(v7 + 178);
  if (*(_BYTE *)(v7 + 178))
  {
    if (v28 == 1)
    {
      if (*(_DWORD *)(v7 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 40))(v11);
      else
        --*(_DWORD *)(v7 + 216);
    }
    else if (v28 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 216));
    }
  }
  else if (*(_DWORD *)(v7 - 264) == 2)
  {
    if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), a2);
  }
  else
  {
    *(_DWORD *)(v7 - 264) -= 2;
  }
  return result;
}

WebCore::TimelineRecordFactory *WebCore::LocalDOMWindow::webkitRequestAnimationFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::TimelineRecordFactory *v12;
  WTF::StringImpl *v14;

  if ((WebCore::LocalDOMWindow::webkitRequestAnimationFrame(WTF::Ref<WebCore::RequestAnimationFrameCallback,WTF::RawPtrTraits<WebCore::RequestAnimationFrameCallback>,WTF::DefaultRefDerefTraits<WebCore::RequestAnimationFrameCallback>> &&)::firstTime & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 178))
        {
          __break(0xC471u);
LABEL_25:
          JUMPOUT(0x195FE3860);
        }
        v6 = (_DWORD *)(v5 - 264);
        *(_DWORD *)(v5 - 264) += 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::Document::addConsoleMessage((_QWORD *)(v5 - 288), 1, 1, &v14, 0);
        v8 = v14;
        v14 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
        }
        if (*v6 == 2)
        {
          if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v7);
        }
        else
        {
          *v6 -= 2;
        }
        WebCore::LocalDOMWindow::webkitRequestAnimationFrame(WTF::Ref<WebCore::RequestAnimationFrameCallback,WTF::RawPtrTraits<WebCore::RequestAnimationFrameCallback>,WTF::DefaultRefDerefTraits<WebCore::RequestAnimationFrameCallback>> &&)::firstTime = 1;
      }
    }
  }
  v9 = *(_QWORD *)(a1 + 72);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    return 0;
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  *(_DWORD *)(v10 - 264) += 2;
  v12 = WebCore::Document::requestAnimationFrame(v10 - 288, a2);
  if (*(_DWORD *)(v10 - 264) == 2)
  {
    if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v11);
  }
  else
  {
    *(_DWORD *)(v10 - 264) -= 2;
  }
  return v12;
}

unsigned int *WebCore::LocalDOMWindow::cancelAnimationFrame(WebCore::LocalDOMWindow *this, WebCore::Document *a2)
{
  unsigned int *result;
  unsigned int *v4;
  void *v5;

  result = (unsigned int *)WebCore::LocalDOMWindow::document(this);
  if (result)
  {
    v4 = result;
    result[6] += 2;
    result = (unsigned int *)WebCore::Document::cancelAnimationFrame((WebCore::Document *)result, a2);
    if (v4[6] == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      v4[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::requestIdleCallback(uint64_t a1, WTF::StringImpl *a2, _DWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  uint64_t v8;
  double v9;
  unsigned int *v10;
  void *v11;
  unsigned int v12;
  WebCore::IdleCallbackController *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 72);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if (!*(_BYTE *)(v5 + 178))
  {
    v7 = (_DWORD *)(v5 - 264);
    *(_DWORD *)(v5 - 264) += 2;
    LODWORD(a4) = *a3;
    v8 = *(_QWORD *)(v5 + 2048);
    v9 = (double)*(unint64_t *)&a4 / 1000.0;
    if (!v8)
    {
      v8 = WTF::fastMalloc((WTF *)0x58);
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5 - 288);
      if (v10)
      {
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 + 1, v10));
      }
      *(_QWORD *)(v8 + 80) = v10;
      v13 = *(WebCore::IdleCallbackController **)(v5 + 2048);
      *(_QWORD *)(v5 + 2048) = v8;
      if (v13)
      {
        WebCore::IdleCallbackController::~IdleCallbackController(v13, v11);
        WTF::fastFree(v14, v15);
        v8 = *(_QWORD *)(v5 + 2048);
      }
    }
    v16 = WebCore::IdleCallbackController::queueIdleCallback(v8, a2, v9);
    if (*v7 == 2)
    {
      if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288));
    }
    else
    {
      *v7 -= 2;
    }
    return v16;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalDOMWindow::createImageBitmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 178))
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      *(_DWORD *)(v5 - 264) += 2;
      result = (uint64_t)WebCore::ImageBitmap::createPromise(v5 - 96, a2, a3, a4);
      if (*(_DWORD *)(v5 - 264) == 2)
      {
        if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v7);
      }
      else
      {
        *(_DWORD *)(v5 - 264) -= 2;
      }
    }
  }
  else
  {
    v8 = *a4;
    v10 = 0;
    WebCore::DeferredPromise::reject(v8, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v10, 0);
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::createImageBitmap(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, WTF::StringImpl *a7, WTF::StringImpl *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v8 = *(_QWORD *)(a1 + 72);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    if (*(_BYTE *)(v9 + 178))
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      *(_DWORD *)(v9 - 264) += 2;
      result = (uint64_t)WebCore::ImageBitmap::createPromise((WTF::StringImpl *)(v9 - 96), a2, a7, a3, a4, a5, a6, a8);
      if (*(_DWORD *)(v9 - 264) == 2)
      {
        if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 288), v11);
      }
      else
      {
        *(_DWORD *)(v9 - 264) -= 2;
      }
    }
  }
  else
  {
    v12 = *(_QWORD *)a8;
    v14 = 0;
    WebCore::DeferredPromise::reject(v12, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v14, 0);
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore *WebCore::LocalDOMWindow::addEventListener(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  WebCore *v6;
  WTF::StringImpl *v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  WebCore::Quirks *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  const WebCore::Document *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::Quirks *v37;
  uint64_t v38;
  WTF *v40;
  void *v41;
  WebCore *v42;
  uint64_t v43[2];
  int v44;
  __int128 v45;
  int v46;
  int v47;

  v6 = (WebCore *)WebCore::EventTarget::addEventListener((WebCore *)a1, a2, a3, a4);
  v8 = v6;
  if (!(_DWORD)v6)
    return v8;
  v9 = *(_QWORD *)(a1 + 72);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    if (*(_BYTE *)(v10 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195FE40A8);
    }
    v11 = 0;
    v12 = v10 - 288;
    *(_DWORD *)(v10 - 264) += 2;
  }
  else
  {
    v12 = 0;
    v11 = 1;
  }
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v6 = *(WebCore **)(v13 + 96)) == 0)
    v6 = (WebCore *)WebCore::threadGlobalDataSlow(v6);
  v14 = *((_QWORD *)v6 + 5);
  if (!v14)
  {
    v42 = v6;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v14 = *((_QWORD *)v42 + 5);
  }
  v15 = *(_QWORD *)(v14 + 2552);
  if (v15)
  {
    v16 = *(_DWORD *)(v14 + 2560);
    v17 = v16 - 1;
    v18 = *(_DWORD *)(v14 + 2568);
    v19 = *((_DWORD *)*a2 + 4);
    v20 = (v18 ^ (v19 >> 8)) & (v16 - 1);
    v21 = *(WTF::StringImpl **)(v15 + 16 * v20);
    if (v21)
    {
      v22 = v19 >> 8;
      v23 = -1;
      do
      {
        v24 = *((_DWORD *)v21 + 4);
        v7 = (WTF::StringImpl *)(v20 + v16);
        if (++v23 > (((_DWORD)v7 - ((v18 ^ (v24 >> 8)) & v17)) & v17))
          break;
        if (v21 == *a2 && v24 >> 8 == v22)
        {
          v25 = *(_DWORD *)(v15 + 16 * v20 + 8);
          goto LABEL_21;
        }
        v20 = ((_DWORD)v20 + 1) & v17;
        v21 = *(WTF::StringImpl **)(v15 + 16 * v20);
      }
      while (v21);
    }
  }
  v25 = 0;
LABEL_21:
  if (v12)
  {
    WebCore::Document::didAddEventListenersOfType((WebCore::EventNames **)v12, (const WTF::AtomString *)a2, 1);
    if ((v25 & 0x4000000) != 0)
    {
      WebCore::Document::didAddWheelEventHandler((WebCore::Document *)v12, (WebCore::Node *)v12);
      WebCore::Document::invalidateEventListenerRegions((WTF::StringImpl *)v12, v28, v29);
    }
    else
    {
      if ((v25 & 0x40000) != 0 && (*(_QWORD *)(v12 + 16) & 0x2000000000000) != 0)
      {
        v26 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 688);
        if (!v26)
          v26 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8));
        if ((WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v26, (const WebCore::EventTarget *)v12) & 1) != 0)
          goto LABEL_35;
      }
      if ((v25 & 0x1000000) != 0)
      {
LABEL_35:
        WebCore::Document::didAddTouchEventHandler((WebCore::Document *)v12, (WebCore::Node *)v12);
      }
      else if (*a2 == *(WTF::StringImpl **)(v14 + 2000))
      {
        WebCore::LocalDOMWindow::localStorage((WebCore::LocalDOMWindow *)a1, v7, (uint64_t)&v45);
        if (v46 != -1)
          ((void (**)(uint64_t *, __int128 *))off_1E33FF6C0)[v46](v43, &v45);
        v46 = -1;
        WebCore::LocalDOMWindow::sessionStorage((WebCore::LocalDOMWindow *)a1, v27, (uint64_t)v43);
        if (v44 != -1)
          ((void (**)(int *, uint64_t *))off_1E33FF6C0)[v44](&v47, v43);
      }
    }
  }
  if ((unsigned __int16)v25 > 0x4Du)
  {
    switch((unsigned __int16)v25)
    {
      case 0x4Eu:
        WebCore::LocalDOMWindow::startListeningForDeviceOrientationIfNecessary((WebCore *)a1);
        if ((v11 & 1) != 0)
          return v8;
        goto LABEL_85;
      case 0xDAu:
        WebCore::LocalDOMWindow::incrementScrollEventListenersCount((unsigned int *)a1, (unsigned int *)v7);
        if ((v11 & 1) != 0)
          return v8;
        goto LABEL_85;
      case 0x110u:
        v43[0] = a1;
        if ((byte_1ECE8389B & 1) == 0)
        {
          qword_1ECE838A8 = 0;
          byte_1ECE8389B = 1;
        }
        v47 = 0;
        WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v45, &qword_1ECE838A8, v43, &v47);
        ++*(_DWORD *)(v45 + 8);
        if ((_BYTE)v46)
        {
          v30 = *(_QWORD *)(a1 + 72);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              if (*(_BYTE *)(v31 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x195FE3E98);
              }
              goto LABEL_62;
            }
          }
        }
LABEL_84:
        if ((v11 & 1) != 0)
          return v8;
        goto LABEL_85;
    }
LABEL_69:
    if ((v25 & 0x40000) != 0 && (*(_QWORD *)(v12 + 16) & 0x2000000000000) != 0)
    {
      v37 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 688);
      if (!v37)
        v37 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8));
      if ((WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v37, (const WebCore::EventTarget *)v12) & 1) != 0)
        goto LABEL_78;
    }
    if ((v25 & 0x1000000) != 0)
    {
LABEL_78:
      ++*(_DWORD *)(a1 + 236);
      if ((v25 & 0x100000) == 0)
      {
LABEL_76:
        if ((v25 & 0x80000) == 0)
          goto LABEL_84;
        goto LABEL_80;
      }
    }
    else if ((v25 & 0x100000) == 0)
    {
      goto LABEL_76;
    }
    ++*(_DWORD *)(a1 + 236);
    if ((v25 & 0x80000) == 0)
      goto LABEL_84;
LABEL_80:
    v38 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v38 + 1;
    if (!v38)
    {
      {
        WebCore::GamepadManager::singleton(void)::sharedManager = (uint64_t)&off_1E31FCE70;
        unk_1EE2EF6A0 = 0;
        byte_1EE2EF6A8 = 0;
        xmmword_1EE2EF6B0 = 0u;
        xmmword_1EE2EF6C0 = 0u;
        unk_1EE2EF6D0 = 0u;
        unk_1EE2EF6E0 = 0u;
      }
      WebCore::GamepadManager::registerDOMWindow((WebCore::GamepadManager *)&WebCore::GamepadManager::singleton(void)::sharedManager, (WebCore::LocalDOMWindow *)a1);
    }
    goto LABEL_84;
  }
  if ((unsigned __int16)v25 != 36)
  {
    if ((unsigned __int16)v25 == 77)
    {
      WebCore::LocalDOMWindow::startListeningForDeviceMotionIfNecessary((WebCore *)a1);
      if ((v11 & 1) != 0)
        return v8;
      goto LABEL_85;
    }
    goto LABEL_69;
  }
  if (!WebCore::allowsBeforeUnloadListeners((WebCore *)a1, v7))
    goto LABEL_84;
  v43[0] = a1;
  if ((byte_1ECE8389A & 1) == 0)
  {
    qword_1ECE838A0 = 0;
    byte_1ECE8389A = 1;
  }
  v47 = 0;
  WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v45, &qword_1ECE838A0, v43, &v47);
  ++*(_DWORD *)(v45 + 8);
  if (!(_BYTE)v46)
    goto LABEL_84;
  v32 = *(_QWORD *)(a1 + 72);
  if (!v32)
    goto LABEL_84;
  v31 = *(_QWORD *)(v32 + 8);
  if (!v31)
    goto LABEL_84;
  if (*(_BYTE *)(v31 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE40D4);
  }
LABEL_62:
  v33 = *(_QWORD *)(v31 + 240);
  if (!v33)
    goto LABEL_84;
  v34 = *(_QWORD *)(v33 + 8);
  if (!v34)
    goto LABEL_84;
  v35 = *(_QWORD *)(v34 + 24);
  if (!v35)
    goto LABEL_84;
  v36 = *(_QWORD *)(v35 + 8);
  if (!v36)
    goto LABEL_84;
  ++*(_DWORD *)v36;
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v36 + 48) + 16) + 1272))(*(_QWORD *)(*(_QWORD *)(v36 + 48) + 16));
  if (*(_DWORD *)v36 == 1)
  {
    WebCore::Page::~Page(v36);
    WTF::fastFree(v40, v41);
    if ((v11 & 1) != 0)
      return v8;
  }
  else
  {
    --*(_DWORD *)v36;
    if ((v11 & 1) != 0)
      return v8;
  }
LABEL_85:
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v7);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return v8;
}

uint64_t WebCore::allowsBeforeUnloadListeners(WebCore *this, WebCore::LocalDOMWindow *a2)
{
  uint64_t result;
  uint64_t v3;

  result = WebCore::LocalDOMWindow::frame(this);
  if (result)
  {
    v3 = *(_QWORD *)(result + 24);
    return v3 && *(_QWORD *)(v3 + 8) && *(_QWORD *)(*(_QWORD *)(result + 128) + 8) == result;
  }
  return result;
}

unsigned int *WebCore::LocalDOMWindow::incrementScrollEventListenersCount(unsigned int *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *((_QWORD *)this + 9);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    if (*(_BYTE *)(v3 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195FE4380);
    }
    v4 = 0;
    v5 = v3 - 288;
    *(_DWORD *)(v3 - 264) += 2;
  }
  else
  {
    v5 = 0;
    v4 = 1;
  }
  v6 = this[58];
  this[58] = v6 + 1;
  if (!v6)
  {
    if (*(_BYTE *)(v5 + 3362) || *(_BYTE *)(v5 + 3405))
    {
      v24 = *(_QWORD *)(v5 + 528);
      i = v5;
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        i = v5;
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 120);
          i = v5;
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            for (i = v5; v27; v27 = *(_QWORD *)(v30 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 8);
              v28 = *(_QWORD *)(i + 528);
              if (!v28)
                break;
              v29 = *(_QWORD *)(v28 + 8);
              if (!v29)
                break;
              v30 = *(_QWORD *)(v29 + 120);
              if (!v30)
                break;
            }
          }
        }
      }
    }
    else
    {
      v7 = *(_QWORD *)(v5 + 528);
      i = v5;
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8);
        i = v5;
        if (v9)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8);
          v11 = v10 && *(_BYTE *)(v10 + 144) == 0;
          i = v5;
          if (v11)
          {
            v12 = *(_QWORD *)(v10 + 296);
            i = v5;
            if (v12)
              i = v12;
          }
        }
      }
    }
    if (v2)
    {
      if (v5 == i)
      {
        v13 = *(_QWORD *)(v2 + 8);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195FE43FCLL);
          }
          v14 = *(_QWORD *)(v13 + 240);
          if (v14)
          {
            a2 = *(unsigned int **)(v14 + 8);
            if (a2)
            {
              v15 = a2 + 2;
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 + 1, v15));
              v17 = *((_QWORD *)a2 + 3);
              if (v17)
              {
                v18 = *(_QWORD *)(v17 + 8);
                if (v18)
                {
                  ++*(_DWORD *)v18;
                  this = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v18 + 48) + 16)
                                                                           + 640))(*(_QWORD *)(*(_QWORD *)(v18 + 48)
                                                                                               + 16));
                  if (*(_DWORD *)v18 == 1)
                  {
                    WebCore::Page::~Page(v18);
                    this = (unsigned int *)WTF::fastFree(v22, v23);
                  }
                  else
                  {
                    --*(_DWORD *)v18;
                  }
                }
              }
              do
              {
                v19 = __ldaxr(v15);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v15));
              if (!v20)
              {
                atomic_store(1u, v15);
                v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v21 = off_1E31FE290;
                v21[1] = v15;
                v31 = (uint64_t)v21;
                WTF::ensureOnMainThread();
                this = (unsigned int *)v31;
                if (v31)
                  this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
              }
            }
          }
        }
      }
    }
  }
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

WebCore *WebCore::LocalDOMWindow::startListeningForDeviceOrientationIfNecessary(WebCore *this)
{
  WebCore *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  WebCore *v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = *((_QWORD *)v1 + 2);
  if ((v5 & 0x1000000000000) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFLL;
    v7 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD **)(v6 + 16);
      v9 = *(_QWORD *)(v4 + 616);
      v10 = 32 * v7;
      while (*v8 != v9)
      {
        v8 += 4;
        v10 -= 32;
        if (!v10)
          return this;
      }
      v11 = *((_QWORD *)v1 + 9);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          if (*(_BYTE *)(v12 + 178))
          {
            __break(0xC471u);
          }
          else
          {
            v13 = *(_QWORD *)(v12 + 2080);
            v14 = *(_DWORD *)(v13 + 8) + 1;
            *(_DWORD *)(v13 + 8) = v14;
            v15 = *(_QWORD *)(v13 + 16);
            if (v15)
            {
              v16 = *(_DWORD *)(v15 - 8);
              v17 = ((unint64_t)v1 + ~((_QWORD)v1 << 32)) ^ (((unint64_t)v1 + ~((_QWORD)v1 << 32)) >> 22);
              v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
              v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
              v20 = v16 & ((v19 >> 31) ^ v19);
              v21 = *(WebCore **)(v15 + 16 * v20);
              if (v21 == v1)
              {
LABEL_42:
                if (!v14)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195FE46D4);
                }
                *(_DWORD *)(v13 + 8) = v14 - 1;
                return this;
              }
              v22 = 1;
              while (v21)
              {
                v20 = (v20 + v22) & v16;
                v21 = *(WebCore **)(v15 + 16 * v20);
                ++v22;
                if (v21 == v1)
                  goto LABEL_42;
              }
            }
            v32 = 0;
            if (WebCore::LocalDOMWindow::isAllowedToUseDeviceOrientation(v1, (WTF::String *)&v32)
              && WebCore::LocalDOMWindow::hasPermissionToReceiveDeviceMotionOrOrientationEvents(*((WebCore::LocalDOMWindow **)v1 + 9), &v32))
            {
              WebCore::DeviceController::addDeviceEventListener((WebCore::DeviceController *)v13, v1);
LABEL_38:
              this = v32;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  this = (WebCore *)WTF::StringImpl::destroy(v32, v23);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v14 = *(_DWORD *)(v13 + 8);
              goto LABEL_42;
            }
            v24 = *((_QWORD *)v1 + 9);
            if (!v24)
              goto LABEL_38;
            v25 = *(_QWORD *)(v24 + 8);
            if (!v25)
              goto LABEL_38;
            if (!*(_BYTE *)(v25 + 178))
            {
              v26 = (_DWORD *)(v25 - 264);
              *(_DWORD *)(v25 - 264) += 2;
              v27 = v32;
              if (v32)
                *(_DWORD *)v32 += 2;
              v30 = v27;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"No device orientation events will be fired, reason: ", 53, (uint64_t *)&v30, 46, &v31);
              WebCore::Document::addConsoleMessage((_QWORD *)(v25 - 288), 1, 1, &v31, 0);
              v28 = v31;
              v31 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v23);
                else
                  *(_DWORD *)v28 -= 2;
              }
              v29 = v30;
              v30 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v23);
                else
                  *(_DWORD *)v29 -= 2;
              }
              if (*v26 == 2)
              {
                if ((*(_WORD *)(v25 - 258) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)(v25 - 288), v23);
              }
              else
              {
                *v26 -= 2;
              }
              goto LABEL_38;
            }
            __break(0xC471u);
          }
          JUMPOUT(0x195FE46B4);
        }
      }
    }
  }
  return this;
}

WebCore *WebCore::LocalDOMWindow::startListeningForDeviceMotionIfNecessary(WebCore *this)
{
  WebCore *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  WebCore *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int isSecureContext;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  char v48;
  int v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55[2];
  __int128 v56;
  uint64_t v57;

  v1 = this;
  v57 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = *((_QWORD *)v1 + 2);
  if ((v5 & 0x1000000000000) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFLL;
    v7 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD **)(v6 + 16);
      v9 = *(_QWORD *)(v4 + 608);
      v10 = 32 * v7;
      while (*v8 != v9)
      {
        v8 += 4;
        v10 -= 32;
        if (!v10)
          return this;
      }
      v11 = *((_QWORD *)v1 + 9);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          if (*(_BYTE *)(v12 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195FE4BDCLL);
          }
          v13 = *(_QWORD *)(v12 + 2064);
          v14 = *(_DWORD *)(v13 + 8) + 1;
          *(_DWORD *)(v13 + 8) = v14;
          v15 = *(_QWORD *)(v13 + 16);
          if (v15)
          {
            v16 = *(_DWORD *)(v15 - 8);
            v17 = ((unint64_t)v1 + ~((_QWORD)v1 << 32)) ^ (((unint64_t)v1 + ~((_QWORD)v1 << 32)) >> 22);
            v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
            v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
            v20 = v16 & ((v19 >> 31) ^ v19);
            v21 = *(WebCore **)(v15 + 16 * v20);
            if (v21 == v1)
            {
LABEL_71:
              if (!v14)
              {
                __break(0xC471u);
                JUMPOUT(0x195FE4BFCLL);
              }
              *(_DWORD *)(v13 + 8) = v14 - 1;
              return this;
            }
            v22 = 1;
            while (v21)
            {
              v20 = (v20 + v22) & v16;
              v21 = *(WebCore **)(v15 + 16 * v20);
              ++v22;
              if (v21 == v1)
                goto LABEL_71;
            }
          }
          v53 = 0;
          if (WebCore::LocalDOMWindow::isAllowedToUseDeviceMotion(v1, (WTF::String *)&v53)
            && WebCore::LocalDOMWindow::hasPermissionToReceiveDeviceMotionOrOrientationEvents(*((WebCore::LocalDOMWindow **)v1 + 9), &v53))
          {
            WebCore::DeviceController::addDeviceEventListener((WebCore::DeviceController *)v13, v1);
LABEL_67:
            this = v53;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                this = (WebCore *)WTF::StringImpl::destroy(v53, v24);
              else
                *(_DWORD *)v53 -= 2;
            }
            v14 = *(_DWORD *)(v13 + 8);
            goto LABEL_71;
          }
          if (WebCore::LocalDOMWindow::isSameSecurityOriginAsMainFrame(v1, v23))
          {
            v25 = *((_QWORD *)v1 + 9);
            if (!v25)
              goto LABEL_67;
            v26 = *(_QWORD *)(v25 + 8);
            if (v26)
            {
              if (*(_BYTE *)(v26 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x195FE4C40);
              }
              *(_DWORD *)(v26 - 264) += 2;
              isSecureContext = WebCore::Document::isSecureContext((WebCore::Document *)(v26 - 288), v24);
              if (*(_DWORD *)(v26 - 264) == 2)
              {
                v48 = isSecureContext;
                if ((*(_WORD *)(v26 - 258) & 0x400) != 0)
                {
                  if (!isSecureContext)
                    goto LABEL_54;
                }
                else
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)(v26 - 288), v24);
                  if ((v48 & 1) == 0)
                    goto LABEL_54;
                }
LABEL_31:
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v28 = v55[0];
                if (v55[0])
                {
                  v29 = *((_DWORD *)v55[0] + 1);
                  *(_DWORD *)v55[0] += 2;
                  if (v29)
                  {
                    v54 = v28;
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v54 = v55[0];
                    if (*(_DWORD *)v28 == 2)
                      WTF::StringImpl::destroy(v28, v51);
                    else
                      *(_DWORD *)v28 -= 2;
                  }
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v54 = v55[0];
                }
                v30 = *((_QWORD *)v1 + 9);
                if (v30)
                {
                  v30 = *(_QWORD *)(v30 + 8);
                  if (v30)
                  {
                    if (*(_BYTE *)(v30 + 178))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FE4C80);
                    }
                    v30 -= 288;
                  }
                }
                v31 = WTF::URL::host((WTF::URL *)(v30 + 736));
                v33 = WebCore::RegistrableDomain::matches(&v54, v31, v32);
                v34 = v54;
                v54 = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                  {
                    v49 = v33;
                    WTF::StringImpl::destroy(v34, v24);
                    v33 = v49;
                    if (!v28)
                      goto LABEL_44;
                    goto LABEL_42;
                  }
                  *(_DWORD *)v34 -= 2;
                }
                if (!v28)
                  goto LABEL_44;
LABEL_42:
                if (*(_DWORD *)v28 == 2)
                {
                  v50 = v33;
                  WTF::StringImpl::destroy(v28, v24);
                  v33 = v50;
                }
                else
                {
                  *(_DWORD *)v28 -= 2;
                }
LABEL_44:
                if (v33)
                {
                  v35 = *((_QWORD *)v1 + 9);
                  if (v35 && (v36 = *(_QWORD *)(v35 + 8)) != 0)
                  {
                    if (*(_BYTE *)(v36 + 178))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FE4CA0);
                    }
                    v37 = v36 - 288;
                    *(_DWORD *)(v36 - 264) += 2;
                  }
                  else
                  {
                    v37 = 0;
                  }
                  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v38 = off_1E33FF908;
                  v39 = *(_OWORD *)(v37 + 432);
                  *(_OWORD *)v55 = *(_OWORD *)(v37 + 416);
                  v56 = v39;
                  v40 = WTF::fastMalloc((WTF *)0x40);
                  *(_QWORD *)v40 = &off_1E33A3A20;
                  *(_OWORD *)(v40 + 16) = *(_OWORD *)v55;
                  *(_OWORD *)(v40 + 32) = v56;
                  *(_QWORD *)(v40 + 48) = v38;
                  *(_BYTE *)(v40 + 56) = 0;
                  v54 = (WTF::StringImpl *)v40;
                  WTF::callOnMainThread();
                  v41 = v54;
                  v54 = 0;
                  if (v41)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
                  if (*(_DWORD *)(v37 + 24) == 2)
                  {
                    if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v37, v24);
                  }
                  else
                  {
                    *(_DWORD *)(v37 + 24) -= 2;
                  }
                }
                goto LABEL_54;
              }
              *(_DWORD *)(v26 - 264) -= 2;
              if ((isSecureContext & 1) != 0)
                goto LABEL_31;
            }
          }
LABEL_54:
          v42 = *((_QWORD *)v1 + 9);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 8);
            if (v43)
            {
              if (*(_BYTE *)(v43 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x195FE4C20);
              }
              v44 = (_DWORD *)(v43 - 264);
              *(_DWORD *)(v43 - 264) += 2;
              v45 = v53;
              if (v53)
                *(_DWORD *)v53 += 2;
              v52 = v45;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"No device motion events will be fired, reason: ", 48, (uint64_t *)&v52, 46, v55);
              WebCore::Document::addConsoleMessage((_QWORD *)(v43 - 288), 1, 1, v55, 0);
              v46 = v55[0];
              v55[0] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v24);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = v52;
              v52 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, v24);
                else
                  *(_DWORD *)v47 -= 2;
              }
              if (*v44 == 2)
              {
                if ((*(_WORD *)(v43 - 258) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)(v43 - 288), v24);
              }
              else
              {
                *v44 -= 2;
              }
            }
          }
          goto LABEL_67;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::isAllowedToUseDeviceMotionOrOrientation(WebCore::LocalDOMWindow *this, WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t result;
  char isSecureContext;
  void *v11;
  char v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 178))
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v5 = *(_QWORD *)(v4 + 240);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if ((*(_QWORD *)(*(_QWORD *)(v6 + 136) + 704) & 0x2000000000000) != 0)
          {
            *(_DWORD *)(v4 - 264) += 2;
            isSecureContext = WebCore::Document::isSecureContext((WebCore::Document *)(v4 - 288), a2);
            v12 = isSecureContext;
            if (*(_DWORD *)(v4 - 264) == 2)
            {
              if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v11);
                if ((v12 & 1) == 0)
                  goto LABEL_7;
                return 1;
              }
            }
            else
            {
              *(_DWORD *)(v4 - 264) -= 2;
            }
            if ((isSecureContext & 1) == 0)
              goto LABEL_7;
            return 1;
          }
        }
      }
    }
  }
LABEL_7:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v13;
  if (!v8)
    return 0;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy(v8, v7);
    return 0;
  }
  result = 0;
  *(_DWORD *)v8 -= 2;
  return result;
}

uint64_t WebCore::LocalDOMWindow::isAllowedToUseDeviceMotion(WebCore::LocalDOMWindow *this, WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  uint64_t v11;

  if (!WebCore::LocalDOMWindow::isAllowedToUseDeviceMotionOrOrientation(this, a2))
    return 0;
  v4 = *((_QWORD *)this + 9);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v6 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v5 + 178))
  {
    v6 = v5 - 288;
LABEL_8:
    *(_DWORD *)(v6 + 24) += 2;
    if (WebCore::PermissionsPolicy::isFeatureEnabled(0xBu, (_QWORD *)v6, 0)
      && (WebCore::PermissionsPolicy::isFeatureEnabled(0xCu, (_QWORD *)v6, 0) & 1) != 0)
    {
      v7 = 1;
      goto LABEL_14;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v11;
    if (v9)
    {
      if (*(_DWORD *)v9 != 2)
      {
        v7 = 0;
        *(_DWORD *)v9 -= 2;
        goto LABEL_14;
      }
      WTF::StringImpl::destroy(v9, v8);
    }
    v7 = 0;
LABEL_14:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    return v7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalDOMWindow::isAllowedToUseDeviceOrientation(WebCore::LocalDOMWindow *this, WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  uint64_t v11;

  if (!WebCore::LocalDOMWindow::isAllowedToUseDeviceMotionOrOrientation(this, a2))
    return 0;
  v4 = *((_QWORD *)this + 9);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v6 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v5 + 178))
  {
    v6 = v5 - 288;
LABEL_8:
    *(_DWORD *)(v6 + 24) += 2;
    if (WebCore::PermissionsPolicy::isFeatureEnabled(0xBu, (_QWORD *)v6, 0)
      && WebCore::PermissionsPolicy::isFeatureEnabled(0xCu, (_QWORD *)v6, 0)
      && (WebCore::PermissionsPolicy::isFeatureEnabled(0xDu, (_QWORD *)v6, 0) & 1) != 0)
    {
      v7 = 1;
      goto LABEL_15;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v11;
    if (v9)
    {
      if (*(_DWORD *)v9 != 2)
      {
        v7 = 0;
        *(_DWORD *)v9 -= 2;
        goto LABEL_15;
      }
      WTF::StringImpl::destroy(v9, v8);
    }
    v7 = 0;
LABEL_15:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    return v7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

BOOL WebCore::LocalDOMWindow::hasPermissionToReceiveDeviceMotionOrOrientationEvents(WebCore::LocalDOMWindow *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  _DWORD *v7;
  WebCore::DeviceOrientationAndMotionAccessController *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (this)
  {
    v3 = *((_QWORD *)this + 1);
    if (*(_BYTE *)(v3 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195FE51B4);
    }
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 240) + 8);
    if ((*(_QWORD *)(*(_QWORD *)(v4 + 136) + 704) & 0x4000000000000) == 0)
      return 1;
    v6 = *(_QWORD *)(v4 + 24);
    if (v6 && *(_QWORD *)(v6 + 8))
    {
      v7 = (_DWORD *)(v3 - 264);
      *(_DWORD *)(v3 - 264) += 2;
      v8 = (WebCore::DeviceOrientationAndMotionAccessController *)WebCore::Document::deviceOrientationAndMotionAccessController((WebCore::Document *)(v3 - 288));
      v9 = WebCore::DeviceOrientationAndMotionAccessController::accessState(v8, (const WebCore::Document *)(v3 - 288));
      if (v9 == 2 || v9 == 1)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = *a2;
        *a2 = v15;
        if (v11)
        {
          if (*(_DWORD *)v11 != 2)
          {
            v12 = 0;
            *(_DWORD *)v11 -= 2;
            goto LABEL_13;
          }
          WTF::StringImpl::destroy(v11, v10);
        }
        v12 = 0;
      }
      else
      {
        v12 = 1;
      }
LABEL_13:
      if (*v7 == 2)
      {
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v10);
      }
      else
      {
        *v7 -= 2;
      }
      return v12 != 0;
    }
  }
  else if ((*(_QWORD *)(MEMORY[0x88] + 704) & 0x4000000000000) == 0)
  {
    return 1;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = *a2;
  *a2 = v15;
  if (!v14)
    return 0;
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v13);
    return 0;
  }
  result = 0;
  *(_DWORD *)v14 -= 2;
  return result;
}

uint64_t WebCore::LocalDOMWindow::decrementScrollEventListenersCount(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  WebCore::Page *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(this + 72);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195FE541CLL);
    }
    v3 = 0;
    v4 = v2 - 288;
    *(_DWORD *)(v2 - 264) += 2;
  }
  else
  {
    v4 = 0;
    v3 = 1;
  }
  v5 = *(_DWORD *)(this + 232) - 1;
  *(_DWORD *)(this + 232) = v5;
  if (!v5)
  {
    if (*(_BYTE *)(v4 + 3362) || *(_BYTE *)(v4 + 3405))
    {
      v24 = *(_QWORD *)(v4 + 528);
      i = v4;
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        i = v4;
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 120);
          i = v4;
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            for (i = v4; v27; v27 = *(_QWORD *)(v30 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 8);
              v28 = *(_QWORD *)(i + 528);
              if (!v28)
                break;
              v29 = *(_QWORD *)(v28 + 8);
              if (!v29)
                break;
              v30 = *(_QWORD *)(v29 + 120);
              if (!v30)
                break;
            }
          }
        }
      }
    }
    else
    {
      v6 = *(_QWORD *)(v4 + 528);
      i = v4;
      if (v6)
      {
        v8 = *(_QWORD *)(v6 + 8);
        i = v4;
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
          v10 = v9 && *(_BYTE *)(v9 + 144) == 0;
          i = v4;
          if (v10)
          {
            v11 = *(_QWORD *)(v9 + 296);
            i = v4;
            if (v11)
              i = v11;
          }
        }
      }
    }
    if (v1)
    {
      if (v4 == i)
      {
        v12 = *(_QWORD *)(v1 + 8);
        if (v12)
        {
          if (*(_BYTE *)(v12 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195FE5498);
          }
          v13 = *(_QWORD *)(v12 + 240);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 8);
            if (v14)
            {
              v15 = (unsigned int *)(v14 + 8);
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 + 1, v15));
              v17 = *(_QWORD *)(v14 + 24);
              if (v17)
              {
                v18 = *(WebCore::Page **)(v17 + 8);
                if (v18)
                {
                  if (!*(_BYTE *)(v4 + 3362))
                  {
                    ++*(_DWORD *)v18;
                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v18 + 6) + 16) + 640))(*(_QWORD *)(*((_QWORD *)v18 + 6) + 16));
                    if (*(_DWORD *)v18 == 1)
                    {
                      WebCore::Page::~Page(v18);
                      this = WTF::fastFree(v22, v23);
                    }
                    else
                    {
                      --*(_DWORD *)v18;
                    }
                  }
                }
              }
              do
              {
                v19 = __ldaxr(v15);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v15));
              if (!v20)
              {
                atomic_store(1u, v15);
                v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v21 = off_1E31FE290;
                v21[1] = v15;
                v31 = (uint64_t)v21;
                WTF::ensureOnMainThread();
                this = v31;
                if (v31)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
              }
            }
          }
        }
      }
    }
  }
  if ((v3 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::removeEventListener(uint64_t a1, WTF::StringImpl **a2, WebCore::EventListener *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  WebCore::EventListenerMap *v8;
  int v9;
  uint64_t result;
  WebCore *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  WebCore::Quirks *v43;
  uint64_t v44;
  const WebCore::Document *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  WebCore::Quirks *v60;
  uint64_t v61;
  WebCore::InspectorInstrumentation *v62;
  WebCore::ScriptExecutionContext *v63;
  _QWORD *v64;
  uint64_t v65;
  int *v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  void *v83;
  char *v84;

  v4 = *(_QWORD *)(a1 + 16);
  if ((v4 & 0x1000000000000) == 0)
    return 0;
  v8 = (WebCore::EventListenerMap *)((v4 & 0xFFFFFFFFFFFFLL) + 16);
  v9 = *a4;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v62 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    if (v62)
    {
      v64 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v62, v63);
      if (v64)
        WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(v64, (WebCore::EventTarget *)a1, a2, a3, v9 != 0);
    }
  }
  result = WebCore::EventListenerMap::remove(v8, (const WTF::AtomString *)a2, a3, v9 != 0);
  if ((_DWORD)result)
  {
    v12 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    v14 = *(_QWORD *)(a1 + 72);
    if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
    {
      if (*(_BYTE *)(v15 + 178))
        goto LABEL_138;
      v16 = 0;
      v17 = v15 - 288;
      *(_DWORD *)(v15 - 264) += 2;
    }
    else
    {
      v17 = 0;
      v16 = 1;
    }
    v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
      v19 = WebCore::threadGlobalDataSlow(v12);
    v20 = *(_QWORD *)(v19 + 40);
    if (!v20)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
      v20 = *(_QWORD *)(v19 + 40);
    }
    v21 = *(_QWORD *)(v20 + 2552);
    if (v21)
    {
      v22 = *(_DWORD *)(v20 + 2560);
      v23 = v22 - 1;
      v24 = *(_DWORD *)(v20 + 2568);
      v25 = *((_DWORD *)*a2 + 4);
      v26 = (v24 ^ (v25 >> 8)) & (v22 - 1);
      v27 = *(WTF::StringImpl **)(v21 + 16 * v26);
      if (v27)
      {
        v28 = v25 >> 8;
        v29 = -1;
        do
        {
          v30 = *((_DWORD *)v27 + 4);
          v13 = (v26 + v22);
          if (++v29 > (((_DWORD)v13 - ((v24 ^ (v30 >> 8)) & v23)) & v23))
            break;
          if (v27 == *a2 && v30 >> 8 == v28)
          {
            v31 = *(_DWORD *)(v21 + 16 * v26 + 8);
            goto LABEL_23;
          }
          v26 = ((_DWORD)v26 + 1) & v23;
          v27 = *(WTF::StringImpl **)(v21 + 16 * v26);
        }
        while (v27);
      }
    }
    v31 = 0;
LABEL_23:
    if (v17)
    {
      v32 = *(_QWORD *)(v17 + 3296);
      v33 = *(unsigned int *)(v17 + 3304);
      if (v32)
      {
        v34 = v33 - 1;
        v35 = *(_DWORD *)(v17 + 3312);
        v36 = *((_DWORD *)*a2 + 4);
        v37 = (v35 ^ (v36 >> 8)) & ((_DWORD)v33 - 1);
        v38 = *(WTF::StringImpl **)(v32 + 16 * v37);
        if (v38)
        {
          v39 = v36 >> 8;
          v40 = -1;
          do
          {
            v41 = *((_DWORD *)v38 + 4);
            v13 = (v37 + v33);
            if (++v40 > (((_DWORD)v13 - ((v35 ^ (v41 >> 8)) & v34)) & v34))
              break;
            if (v38 == *a2 && v41 >> 8 == v39)
            {
              v42 = v32 + 16 * v37;
              goto LABEL_33;
            }
            v37 = ((_DWORD)v37 + 1) & v34;
            v38 = *(WTF::StringImpl **)(v32 + 16 * v37);
          }
          while (v38);
        }
        v42 = v32 + 16 * v33;
      }
      else
      {
        v42 = 16 * v33;
      }
LABEL_33:
      --*(_DWORD *)(v42 + 8);
      if ((v31 & 0x4000000) != 0)
      {
        WebCore::Document::didRemoveWheelEventHandler(v17, (WebCore::Node *)v17, 0);
        WebCore::Document::invalidateEventListenerRegions((WTF::StringImpl *)v17, v44, v45);
      }
      else
      {
        if ((v31 & 0x40000) != 0 && (*(_QWORD *)(v17 + 16) & 0x2000000000000) != 0)
        {
          v43 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 8) + 688);
          if (!v43)
            v43 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v17 + 40) + 8));
          if ((WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v43, (const WebCore::EventTarget *)v17) & 1) != 0)
            goto LABEL_40;
        }
        if ((v31 & 0x1000000) != 0)
LABEL_40:
          WebCore::Document::didRemoveTouchEventHandler((WebCore::Document *)v17, v17, 0);
      }
    }
    if ((unsigned __int16)v31 > 0x4Du)
    {
      switch((unsigned __int16)v31)
      {
        case 0x4Eu:
          WebCore::LocalDOMWindow::stopListeningForDeviceOrientationIfNecessary((WebCore *)a1);
          break;
        case 0xDAu:
          WebCore::LocalDOMWindow::decrementScrollEventListenersCount(a1);
          break;
        case 0x110u:
          if ((byte_1ECE8389B & 1) != 0)
          {
            if (!qword_1ECE838A8)
              break;
            v46 = *(_DWORD *)(qword_1ECE838A8 - 8);
            v47 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
            v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
            v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
            v50 = v46 & ((v49 >> 31) ^ v49);
            v51 = *(_QWORD *)(qword_1ECE838A8 + 16 * v50);
            if (v51 != a1)
            {
              v52 = 1;
              while (v51)
              {
                v50 = ((_DWORD)v50 + v52) & v46;
                v51 = *(_QWORD *)(qword_1ECE838A8 + 16 * v50);
                ++v52;
                if (v51 == a1)
                  goto LABEL_95;
              }
              v50 = *(unsigned int *)(qword_1ECE838A8 - 4);
            }
LABEL_95:
            if (v50 == *(_DWORD *)(qword_1ECE838A8 - 4))
              break;
            v65 = qword_1ECE838A8 + 16 * v50;
            v66 = (int *)(v65 + 8);
            v67 = *(_DWORD *)(v65 + 8) - 1;
            if (*(_DWORD *)(v65 + 8) == 1)
            {
              *(_QWORD *)v65 = -1;
              ++*(_DWORD *)(qword_1ECE838A8 - 16);
              if (qword_1ECE838A8)
                v68 = *(_DWORD *)(qword_1ECE838A8 - 12) - 1;
              else
                v68 = -1;
              *(_DWORD *)(qword_1ECE838A8 - 12) = v68;
              if (qword_1ECE838A8)
              {
                v71 = *(_DWORD *)(qword_1ECE838A8 - 4);
                if (6 * *(_DWORD *)(qword_1ECE838A8 - 12) < v71 && v71 >= 9)
                  WTF::HashTable<WebCore::LocalDOMWindow *,WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>>,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LocalDOMWindow *>>::rehash(&qword_1ECE838A8, v71 >> 1, 0);
              }
              v73 = *(_QWORD *)(a1 + 72);
              if (!v73)
                break;
              v74 = *(_QWORD *)(v73 + 8);
              if (!v74)
                break;
              if (*(_BYTE *)(v74 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x195FE5B04);
              }
              goto LABEL_128;
            }
            goto LABEL_102;
          }
          v84 = &byte_1ECE8389B;
          qword_1ECE838A8 = 0;
LABEL_137:
          *v84 = 1;
          break;
        default:
LABEL_66:
          if (v17)
          {
            if ((v31 & 0x40000) != 0 && (*(_QWORD *)(v17 + 16) & 0x2000000000000) != 0)
            {
              v60 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 8) + 688);
              if (!v60)
                v60 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v17 + 40)
                                                                                               + 8));
              if ((WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v60, (const WebCore::EventTarget *)v17) & 1) != 0)
                goto LABEL_73;
            }
            if ((v31 & 0x1000000) != 0)
LABEL_73:
              --*(_DWORD *)(a1 + 236);
          }
          if ((v31 & 0x100000) != 0)
            --*(_DWORD *)(a1 + 236);
          if ((v31 & 0x80000) != 0)
          {
            v61 = *(_QWORD *)(a1 + 240) - 1;
            *(_QWORD *)(a1 + 240) = v61;
            if (!v61)
            {
              {
                WebCore::GamepadManager::singleton(void)::sharedManager = (uint64_t)&off_1E31FCE70;
                unk_1EE2EF6A0 = 0;
                byte_1EE2EF6A8 = 0;
                xmmword_1EE2EF6B0 = 0u;
                xmmword_1EE2EF6C0 = 0u;
                xmmword_1EE2EF6D0 = 0u;
                xmmword_1EE2EF6E0 = 0u;
              }
              WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::LocalDOMWindow>((uint64_t)&xmmword_1EE2EF6D0, (_QWORD *)a1);
              WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::LocalDOMWindow>((uint64_t)&xmmword_1EE2EF6E0, (_QWORD *)a1);
              WebCore::GamepadManager::maybeStopMonitoringGamepads((uint64_t)&WebCore::GamepadManager::singleton(void)::sharedManager);
            }
          }
          break;
      }
LABEL_81:
      if ((v16 & 1) == 0)
      {
        if (*(_DWORD *)(v17 + 24) == 2)
        {
          if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v17, (void *)v13);
        }
        else
        {
          *(_DWORD *)(v17 + 24) -= 2;
        }
      }
      return 1;
    }
    if ((unsigned __int16)v31 != 36)
    {
      if ((unsigned __int16)v31 != 77)
        goto LABEL_66;
      WebCore::LocalDOMWindow::stopListeningForDeviceMotionIfNecessary((WebCore *)a1);
      goto LABEL_81;
    }
    if (!WebCore::allowsBeforeUnloadListeners((WebCore *)a1, (WebCore::LocalDOMWindow *)v13))
      goto LABEL_81;
    if ((byte_1ECE8389A & 1) == 0)
    {
      v84 = &byte_1ECE8389A;
      qword_1ECE838A0 = 0;
      goto LABEL_137;
    }
    if (!qword_1ECE838A0)
      goto LABEL_81;
    v53 = *(_DWORD *)(qword_1ECE838A0 - 8);
    v54 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
    v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
    v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
    v57 = v53 & ((v56 >> 31) ^ v56);
    v58 = *(_QWORD *)(qword_1ECE838A0 + 16 * v57);
    if (v58 != a1)
    {
      v59 = 1;
      while (v58)
      {
        v57 = ((_DWORD)v57 + v59) & v53;
        v58 = *(_QWORD *)(qword_1ECE838A0 + 16 * v57);
        ++v59;
        if (v58 == a1)
          goto LABEL_100;
      }
      v57 = *(unsigned int *)(qword_1ECE838A0 - 4);
    }
LABEL_100:
    if (v57 == *(_DWORD *)(qword_1ECE838A0 - 4))
      goto LABEL_81;
    v69 = qword_1ECE838A0 + 16 * v57;
    v66 = (int *)(v69 + 8);
    v67 = *(_DWORD *)(v69 + 8) - 1;
    if (*(_DWORD *)(v69 + 8) != 1)
    {
LABEL_102:
      *v66 = v67;
      goto LABEL_81;
    }
    *(_QWORD *)v69 = -1;
    ++*(_DWORD *)(qword_1ECE838A0 - 16);
    if (qword_1ECE838A0)
      v70 = *(_DWORD *)(qword_1ECE838A0 - 12) - 1;
    else
      v70 = -1;
    *(_DWORD *)(qword_1ECE838A0 - 12) = v70;
    if (qword_1ECE838A0)
    {
      v75 = *(_DWORD *)(qword_1ECE838A0 - 4);
      if (6 * *(_DWORD *)(qword_1ECE838A0 - 12) < v75 && v75 >= 9)
        WTF::HashTable<WebCore::LocalDOMWindow *,WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>>,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LocalDOMWindow *>>::rehash(&qword_1ECE838A0, v75 >> 1, 0);
    }
    v77 = *(_QWORD *)(a1 + 72);
    if (!v77)
      goto LABEL_81;
    v74 = *(_QWORD *)(v77 + 8);
    if (!v74)
      goto LABEL_81;
    if (!*(_BYTE *)(v74 + 178))
    {
LABEL_128:
      v78 = *(_QWORD *)(v74 + 240);
      if (v78)
      {
        v79 = *(_QWORD *)(v78 + 8);
        if (v79)
        {
          v80 = *(_QWORD *)(v79 + 24);
          if (v80)
          {
            v81 = *(_QWORD *)(v80 + 8);
            if (v81)
            {
              ++*(_DWORD *)v81;
              (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v81 + 48) + 16) + 1264))(*(_QWORD *)(*(_QWORD *)(v81 + 48) + 16));
              if (*(_DWORD *)v81 == 1)
              {
                WebCore::Page::~Page(v81);
                WTF::fastFree(v82, v83);
              }
              else
              {
                --*(_DWORD *)v81;
              }
            }
          }
        }
      }
      goto LABEL_81;
    }
LABEL_138:
    __break(0xC471u);
    JUMPOUT(0x195FE59BCLL);
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::willDispatchEventOnWindow(uint64_t this, WebCore::LocalFrame *a2, const WebCore::Event *a3, WebCore::LocalDOMWindow *a4)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v5 = this == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(this + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        return WebCore::InspectorInstrumentation::willDispatchEventOnWindowImpl(*(_QWORD *)(*(_QWORD *)(v7 + 80) + 8), a2, (uint64_t)a3);
    }
  }
  return this;
}

uint64_t WebCore::InspectorInstrumentation::didDispatchEventOnWindow(uint64_t this, WebCore::LocalFrame *a2, const WebCore::Event *a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v4 = this == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(_QWORD *)(this + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        this = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 80) + 8) + 232);
        if (this)
          return WebCore::InspectorTimelineAgent::didDispatchEvent(this, (WTF::JSONImpl::Value *)((*((_DWORD *)a2 + 5) >> 6) & 1));
      }
    }
  }
  return this;
}

_DWORD *WebCore::LocalDOMWindow::finishedLoading(_DWORD *this)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*((_BYTE *)this + 88))
  {
    v1 = this;
    *((_BYTE *)this + 88) = 0;
    this = (_DWORD *)WebCore::LocalDOMWindow::frame((WebCore::LocalDOMWindow *)this);
    v2 = *((_QWORD *)this + 35);
    v3 = 88;
    if (!*(_BYTE *)(v2 + 80))
      v3 = 96;
    v4 = *(_QWORD *)(v2 + v3);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v4 + 24) = v5 + 1;
      if (!*(_BYTE *)(v4 + 1588))
      {
        this = WebCore::LocalDOMWindow::print(v1);
        v5 = *(_DWORD *)(v4 + 24) - 1;
      }
      if (v5)
        *(_DWORD *)(v4 + 24) = v5;
      else
        return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      return WebCore::LocalDOMWindow::print(v1);
    }
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::setLocation(uint64_t result, WebCore::LocalDOMWindow *a2, WTF::URL *a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  WebCore::LocalDOMWindow *v9;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  WebCore::FrameLoader *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  _QWORD *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  _DWORD *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  unsigned int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WebCore::Node *v74;
  uint64_t (**v75)();
  int v76;
  int v77;
  char v78;
  WebCore::Node *v79;
  char v80;
  WTF::StringImpl *v81[2];
  WTF::StringImpl *v82;
  WTF::StringImpl *v83[5];

  v5 = *(_QWORD *)(result + 72);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE62A4);
      }
      v7 = *(_QWORD *)(v6 + 240);
      if (v7)
      {
        v8 = *(unsigned int **)(v7 + 8);
        if (v8)
        {
          v9 = (WebCore::LocalDOMWindow *)result;
          if (*(_QWORD *)(*((_QWORD *)v8 + 37) + 696) == result)
          {
            v11 = *((_QWORD *)a2 + 9);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 8);
              if (v12)
              {
                if (*(_BYTE *)(v12 + 178))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195FE62C4);
                }
                v16 = (WebCore::Node *)(v12 - 288);
                v17 = (_DWORD *)(v12 - 264);
                *(_DWORD *)(v12 - 264) += 2;
                v18 = v8 + 2;
                do
                  v19 = __ldaxr(v18);
                while (__stlxr(v19 + 1, v18));
                result = WebCore::Document::canNavigate((WebCore::Document *)(v12 - 288), (WebCore::Frame *)v8, a3);
                if (!(_DWORD)result)
                  goto LABEL_60;
                result = WebCore::LocalDOMWindow::isInsecureScriptAccess(v9, a2, *(const WTF::String **)a3);
                if ((result & 1) != 0)
                  goto LABEL_60;
                v80 = a4;
                if (WTF::URL::protocolIsJavaScript(a3) && WebCore::LocalDOMWindow::frameElement(v9))
                {
                  v56 = *(_DWORD **)(*(_QWORD *)(WebCore::LocalDOMWindow::frameElement(v9) + 40) + 8);
                  v56[6] += 2;
                  v74 = (WebCore::Node *)v56;
                  v57 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v56 + 48));
                  v58 = v57;
                  if (v57)
                  {
                    do
                      v59 = __ldaxr(v57);
                    while (__stlxr(v59 + 1, v57));
                  }
                  v75 = (uint64_t (**)())WTF::aboutBlankURL((WTF *)v57);
                  LODWORD(v83[0]) = 0;
                  v60 = WebCore::LocalDOMWindow::frameElement(v9);
                  if (v60)
                  {
                    *(_DWORD *)(v60 + 24) += 2;
                    v79 = (WebCore::Node *)v60;
                    v61 = WebCore::ContentSecurityPolicy::allowJavaScriptURLs((uint64_t)v58, v75, (uint64_t (**)())v83, (uint64_t (**)())a3, v60);
                    if (*((_DWORD *)v79 + 6) == 2)
                    {
                      v77 = v61;
                      if ((*((_WORD *)v79 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v79, v20);
                      v61 = v77;
                    }
                    else
                    {
                      *((_DWORD *)v79 + 6) -= 2;
                    }
                  }
                  else
                  {
                    v61 = WebCore::ContentSecurityPolicy::allowJavaScriptURLs((uint64_t)v58, v75, (uint64_t (**)())v83, (uint64_t (**)())a3, 0);
                  }
                  if (v58)
                  {
                    if (!atomic_load(v58))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FE650CLL);
                    }
                    do
                      v63 = __ldaxr(v58);
                    while (__stlxr(v63 - 1, v58));
                  }
                  result = (uint64_t)v74;
                  if (*((_DWORD *)v74 + 6) == 2)
                  {
                    if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                    {
                      v76 = v61;
                      result = (uint64_t)WebCore::Node::removedLastRef(v74, v20);
                      v61 = v76;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v74 + 6) -= 2;
                  }
                  if (!v61)
                    goto LABEL_60;
                }
                v21 = *((_QWORD *)v8 + 7);
                if (v21)
                {
                  v22 = *(_QWORD *)(v21 + 8);
                  if (!v22)
                    goto LABEL_17;
                  if (!*(_BYTE *)(v22 + 144))
                  {
                    v54 = (unsigned int *)(v22 + 8);
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 + 1, v54));
                    v78 = 0;
                    goto LABEL_18;
                  }
                }
                v22 = 0;
LABEL_17:
                v78 = 1;
LABEL_18:
                v23 = *((_QWORD *)a2 + 9);
                if (!v23)
                  goto LABEL_38;
                v24 = *(_QWORD *)(v23 + 8);
                if (!v24)
                  goto LABEL_38;
                if (*(_BYTE *)(v24 + 178))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195FE6448);
                }
                v25 = *(_QWORD *)(v24 + 240);
                if (!v25)
                  goto LABEL_38;
                v26 = *(_QWORD *)(v25 + 8);
                if (!v26)
                  goto LABEL_38;
                v27 = (unsigned int *)(v26 + 8);
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 + 1, v27));
                WebCore::FrameLoader::outgoingReferrer(*(WebCore::FrameLoader **)(v26 + 280), v83);
                if (v83[0])
                {
                  if (*((_DWORD *)v83[0] + 1))
                  {
                    if (*(_DWORD *)v83[0] == 2)
                      WTF::StringImpl::destroy(v83[0], (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v83[0] -= 2;
                    do
                    {
LABEL_36:
                      v33 = __ldaxr(v27);
                      v34 = v33 - 1;
                    }
                    while (__stlxr(v34, v27));
                    if (!v34)
                    {
                      atomic_store(1u, v27);
                      v72 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v72 = off_1E31FE290;
                      *((_QWORD *)v72 + 1) = v27;
                      v83[0] = v72;
                      WTF::ensureOnMainThread();
                      v73 = v83[0];
                      v83[0] = 0;
                      if (v73)
                        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v73 + 8))(v73);
                    }
LABEL_38:
                    if ((a5 & 1) != 0)
                      v35 = 1;
                    else
                      v35 = WebCore::UserGestureIndicator::processingUserGesture(0, (const WebCore::Document *)v20) ^ 1;
                    v36 = (_QWORD *)*((_QWORD *)v8 + 19);
                    ++*(_DWORD *)v36;
                    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 - 96), (WTF::StringImpl *)v20);
                    v38 = v37;
                    if (v37)
                    {
                      do
                        v39 = __ldaxr(v37);
                      while (__stlxr(v39 + 1, v37));
                    }
                    WebCore::FrameLoader::nonSrcdocFrame(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v12 + 240) + 8) + 280), (uint64_t *)v81);
                    v40 = v81[0];
                    if (v81[0])
                    {
                      v41 = *(WTF::StringImpl **)(*((_QWORD *)v81[0] + 35) + 160);
                      if (v41)
                        *(_DWORD *)v41 += 2;
                      v82 = v41;
                      v81[0] = 0;
                      v42 = (unsigned int *)((char *)v40 + 8);
                      do
                      {
                        v43 = __ldaxr(v42);
                        v44 = v43 - 1;
                      }
                      while (__stlxr(v44, v42));
                      if (!v44)
                      {
                        atomic_store(1u, v42);
                        v70 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v70 = off_1E31FE290;
                        *((_QWORD *)v70 + 1) = v42;
                        v83[0] = v70;
                        WTF::ensureOnMainThread();
                        v71 = v83[0];
                        v83[0] = 0;
                        if (v71)
                          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v71 + 8))(v71);
                      }
                    }
                    else
                    {
                      v64 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                      if (*MEMORY[0x1E0CBF738])
                        *(_DWORD *)v64 += 2;
                      v82 = v64;
                    }
                    v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v45 = off_1E33F7EC8;
                    v83[0] = v45;
                    v16 = (WebCore::Node *)(v12 - 288);
                    WebCore::NavigationScheduler::scheduleLocationChange(v36, (WebCore::Document *)(v12 - 288), v38, a3, &v82, v35, a5, v80, (uint64_t *)v83);
                    v46 = v83[0];
                    v83[0] = 0;
                    if (v46)
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
                    result = (uint64_t)v82;
                    v82 = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)result -= 2;
                    }
                    do
                    {
                      v47 = __ldaxr(v38);
                      v48 = v47 - 1;
                    }
                    while (__stlxr(v48, v38));
                    if (!v48)
                    {
                      atomic_store(1u, v38);
                      v66 = (WTF::StringImpl *)*((_QWORD *)v38 + 6);
                      *((_QWORD *)v38 + 6) = 0;
                      if (v66)
                      {
                        if (*(_DWORD *)v66 == 2)
                          WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v20);
                        else
                          *(_DWORD *)v66 -= 2;
                      }
                      v67 = (WTF::StringImpl *)*((_QWORD *)v38 + 5);
                      *((_QWORD *)v38 + 5) = 0;
                      if (v67)
                      {
                        if (*(_DWORD *)v67 == 2)
                          WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v20);
                        else
                          *(_DWORD *)v67 -= 2;
                      }
                      v68 = v38[8];
                      if ((_DWORD)v68 != -1)
                        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33FF730[v68])(v83, v38 + 2);
                      v38[8] = -1;
                      result = WTF::fastFree((WTF *)v38, v20);
                    }
                    if (!*(_DWORD *)v36)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FE63A0);
                    }
                    --*(_DWORD *)v36;
                    if ((v78 & 1) == 0)
                    {
                      v49 = (unsigned int *)(v22 + 8);
                      do
                      {
                        v50 = __ldaxr(v49);
                        v51 = v50 - 1;
                      }
                      while (__stlxr(v51, v49));
                      if (!v51)
                      {
                        atomic_store(1u, v49);
                        v69 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v69 = off_1E31FE290;
                        *((_QWORD *)v69 + 1) = v49;
                        v83[0] = v69;
                        WTF::ensureOnMainThread();
                        result = (uint64_t)v83[0];
                        v83[0] = 0;
                        if (result)
                          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                      }
                    }
                    do
                    {
LABEL_60:
                      v52 = __ldaxr(v18);
                      v53 = v52 - 1;
                    }
                    while (__stlxr(v53, v18));
                    if (!v53)
                    {
                      atomic_store(1u, v18);
                      v65 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v65 = off_1E31FE290;
                      *((_QWORD *)v65 + 1) = v18;
                      v83[0] = v65;
                      WTF::ensureOnMainThread();
                      result = (uint64_t)v83[0];
                      v83[0] = 0;
                      if (result)
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                    }
                    if (*v17 == 2)
                    {
                      if ((*(_WORD *)(v12 - 258) & 0x400) == 0)
                        return (uint64_t)WebCore::Node::removedLastRef(v16, v20);
                    }
                    else
                    {
                      *v17 -= 2;
                    }
                    return result;
                  }
                  if (*(_DWORD *)v83[0] == 2)
                    WTF::StringImpl::destroy(v83[0], (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v83[0] -= 2;
                }
                if (v22)
                {
                  v29 = *(WebCore::FrameLoader **)(v26 + 280);
                  WebCore::LocalDOMWindow::protectedDocument((uint64_t)v9, &v82);
                  v30 = v82;
                  WTF::URL::strippedForUseAsReferrer((WTF::URL *)(*(_QWORD *)(v22 + 296) + 736));
                  WebCore::Document::completeURL(v30, v81, (uint64_t)v30 + 848, 0, (WTF::URL *)v83);
                  WebCore::FrameLoader::setOutgoingReferrer(v29, (const WTF::URL *)v83);
                  v31 = v83[0];
                  v83[0] = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v32 = v81[0];
                  v81[0] = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  if (v30)
                  {
                    if (*((_DWORD *)v30 + 6) == 2)
                    {
                      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v30, v20);
                    }
                    else
                    {
                      *((_DWORD *)v30 + 6) -= 2;
                    }
                  }
                }
                goto LABEL_36;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::isInsecureScriptAccess(WebCore::LocalDOMWindow *this, WebCore::LocalDOMWindow *a2, const WTF::String *a3)
{
  uint64_t result;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  WebCore::SecurityOrigin *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  char isSameOriginDomain;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  WTF::StringImpl *v21;

  result = WTF::protocolIsJavaScript();
  if ((_DWORD)result)
  {
    if (!WebCore::LocalDOMWindow::isCurrentlyDisplayedInFrame(this))
      goto LABEL_10;
    if (a2 == this)
      return 0;
    v6 = WebCore::LocalDOMWindow::document(a2);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v6 + 192), v7);
    v9 = (WebCore::SecurityOrigin *)v8;
    if (v8)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
    }
    v21 = (WTF::StringImpl *)v8;
    v11 = WebCore::LocalDOMWindow::document(this);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), v12);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    v20 = v13;
    isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain(v9, (const WebCore::SecurityOrigin *)v13);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v20, v16);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v21, v17);
    if ((isSameOriginDomain & 1) != 0)
    {
      return 0;
    }
    else
    {
LABEL_10:
      WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(this, a2, 1, (char **)&v21);
      WebCore::LocalDOMWindow::printErrorMessage((uint64_t)this, (const WTF::String *)&v21);
      v19 = v21;
      v21 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      return 1;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::LocalDOMWindow::crossDomainAccessErrorMessage@<X0>(WTF::StringImpl *result@<X0>, WTF::StringImpl *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v6;
  const char **v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  const char *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF **v46;
  const WTF::StringImpl **v47;
  const WTF::StringImpl *v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  char *v61;
  _WORD *v62;
  int8x16_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  unsigned int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  int v88;
  _BOOL4 v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  BOOL v108;
  int v109;
  int v110;
  int v111;
  BOOL v112;
  uint64_t v113;
  char *v114;
  _BYTE *v115;
  size_t v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  _WORD *v121;
  int8x16_t *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  int v129;
  char *v130;
  char *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  char *v134;
  char *v135;
  _BYTE *v136;
  _BYTE *v137;
  size_t v138;
  char *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  __int128 v146;
  char *v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  char *v151;
  char *v152;
  char *v153;
  __int16 v154;
  _WORD *v155;
  _WORD *v156;
  _WORD *v157;
  _WORD *v158;
  _WORD *v159;
  __int128 v160;
  char *v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  char *v165;
  char *v166;
  char *v167;
  __int16 v168;
  _WORD *v169;
  WTF::StringImpl *v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  unsigned __int128 *v181;
  unsigned __int128 *v182;
  unsigned __int128 v183;
  char v184;
  unsigned __int128 *v185;
  unsigned __int128 *v186;
  unsigned __int128 v187;
  char v188;
  _BYTE *__src;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  __int128 v201;
  __int128 v202;
  WTF::StringImpl *v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  _QWORD v209[2];
  const char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  int8x16x2_t v214;
  int8x16x2_t v215;
  int8x16x2_t v216;
  int8x16x2_t v217;
  int8x16x2_t v218;
  int8x16x2_t v219;

  v6 = (uint64_t)a2;
  v7 = (const char **)result;
  v9 = *((_QWORD *)a2 + 9);
  if (!v9)
  {
    if (MEMORY[0x2E0])
    {
      v11 = 0;
      goto LABEL_5;
    }
LABEL_271:
    *a4 = 0;
    return result;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    goto LABEL_425;
  }
  if (!*(_QWORD *)(v10 + 448))
    goto LABEL_271;
  v11 = v10 - 288;
LABEL_5:
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), a2);
  v14 = v12;
  do
    v15 = __ldaxr(v12);
  while (__stlxr(v15 + 1, v12));
  v16 = v7[9];
  if (v16)
  {
    v16 = (const char *)*((_QWORD *)v16 + 1);
    if (v16)
    {
      if (v16[178])
      {
        __break(0xC471u);
        JUMPOUT(0x195FE7598);
      }
      v16 -= 288;
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v16 + 192), v13);
  v18 = v17;
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 + 1, v17));
  if (!a3)
  {
    v27 = v14[8];
    if ((_DWORD)v27 == 1)
      goto LABEL_312;
    if ((_DWORD)v27 == -1)
      goto LABEL_389;
    v203 = (WTF::StringImpl *)&v200;
    v28 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v27])(&v203, v14 + 2);
    if (MEMORY[0x19AEA53F4](*v28, "file", 4) && *((_BYTE *)v14 + 59))
LABEL_312:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    else
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v14 + 2), &v206);
    if (v206)
    {
      v29 = *(_DWORD *)(v206 + 4);
      if (v29 < 0)
        goto LABEL_407;
    }
    else
    {
      v29 = 0;
    }
    v30 = __OFADD__(v29, 39);
    v31 = v29 + 39;
    if (!v30 && !__OFADD__(v31, 29))
    {
      v32 = !v206 || (*(_BYTE *)(v206 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v31 + 29), v32, (int8x16_t *)"Blocked a frame with origin \"", 0x1Du, v206, (int8x16_t *)"\" from accessing a cross-origin frame. ", 0x27u, &v203);
      v4 = v203;
      if (v203)
      {
        v203 = 0;
        v26 = (WTF::StringImpl *)v206;
        v206 = 0;
        if (!v26)
          goto LABEL_44;
        goto LABEL_42;
      }
LABEL_408:
      __break(0xC471u);
      JUMPOUT(0x195FE7D8CLL);
    }
LABEL_407:
    v203 = 0;
    goto LABEL_408;
  }
  v20 = v14[8];
  if ((_DWORD)v20 == 1)
    goto LABEL_310;
  if ((_DWORD)v20 == -1)
    goto LABEL_389;
  v4 = (WTF::StringImpl *)(v14 + 2);
  v203 = (WTF::StringImpl *)&v200;
  v21 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v20])(&v203, v14 + 2);
  if (MEMORY[0x19AEA53F4](*v21, "file", 4) && *((_BYTE *)v14 + 59))
LABEL_310:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v14 + 2), &v208);
  v22 = v18[8];
  if ((_DWORD)v22 == 1)
    goto LABEL_314;
  if ((_DWORD)v22 == -1)
    goto LABEL_389;
  v203 = (WTF::StringImpl *)&v200;
  v23 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v22])(&v203, v18 + 2);
  if (MEMORY[0x19AEA53F4](*v23, "file", 4) && *((_BYTE *)v18 + 59))
LABEL_314:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v18 + 2), &v207);
  v203 = (WTF::StringImpl *)"Blocked a frame with origin \"";
  *(_QWORD *)&v204 = 30;
  v200 = (WTF::StringImpl *)"\" from accessing a frame with origin \"";
  *(_QWORD *)&v201 = 39;
  v212 = "\". ";
  v213 = 4;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v203, (uint64_t *)&v208, (uint64_t)&v200, (uint64_t *)&v207, (uint64_t)&v212, &v210);
  v4 = (WTF::StringImpl *)v210;
  if (!v210)
  {
    __break(0xC471u);
    JUMPOUT(0x195FE7DD0);
  }
  v210 = 0;
  v25 = v207;
  v207 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v208;
  v208 = 0;
  if (v26)
  {
LABEL_42:
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_44:
  v33 = *(_QWORD *)(v6 + 72);
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 8);
    if (v34)
    {
      if (*(_BYTE *)(v34 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE75B8);
      }
      v34 -= 288;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = *(WTF::StringImpl **)(v34 + 736);
  if (v35)
    *(_DWORD *)v35 += 2;
  v203 = v35;
  v36 = v34 + 736;
  v204 = *(_OWORD *)(v36 + 8);
  v205 = *(_OWORD *)(v36 + 24);
  v37 = v7[9];
  if (v37)
  {
    v38 = *((_QWORD *)v37 + 1);
    if (v38)
    {
      if (*(_BYTE *)(v38 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE75D8);
      }
      v38 -= 288;
    }
  }
  else
  {
    v38 = 0;
  }
  v39 = *(WTF::StringImpl **)(v38 + 736);
  if (v39)
    *(_DWORD *)v39 += 2;
  v200 = v39;
  v40 = v38 + 736;
  v201 = *(_OWORD *)(v40 + 8);
  v202 = *(_OWORD *)(v40 + 24);
  v41 = *((_QWORD *)v37 + 1);
  if (*(_BYTE *)(v41 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE7528);
  }
  if ((*(_BYTE *)(v41 - 20) & 4) == 0)
  {
    v42 = *(_QWORD *)(v33 + 8);
    if (*(_BYTE *)(v42 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195FE7608);
    }
    if ((*(_BYTE *)(v42 - 20) & 4) == 0)
    {
      if (!a3)
        goto LABEL_230;
      v43 = v18[8];
      if ((_DWORD)v43 != -1)
      {
        v7 = &v210;
        v212 = (char *)&v210;
        v44 = ((uint64_t (*)(char **, unsigned int *))off_1E33FF710[v43])(&v212, v18 + 2);
        v45 = v14[8];
        if ((_DWORD)v45 != -1)
        {
          v46 = (WTF **)v44;
          v212 = (char *)&v210;
          v47 = (const WTF::StringImpl **)((uint64_t (*)(char **, unsigned int *))off_1E33FF710[v45])(&v212, v14 + 2);
          if ((WTF::equal(*v46, *v47, v48) & 1) != 0)
          {
            v50 = *((unsigned __int8 *)v14 + 57);
            if (*((_BYTE *)v18 + 57))
            {
              *(_DWORD *)v4 += 2;
              if (v50)
              {
                v6 = *((_QWORD *)v14 + 5);
                if (v6)
                  *(_DWORD *)v6 += 2;
                v7 = (const char **)*((_QWORD *)v18 + 5);
                if (v7)
                  *(_DWORD *)v7 += 2;
                if (v6)
                  v51 = *(_DWORD *)(v6 + 4);
                else
                  v51 = 0;
                v52 = *((_DWORD *)v4 + 1);
                if (v7)
                {
                  v53 = *((_DWORD *)v7 + 1);
                  if (v53 < 0)
                    goto LABEL_422;
                }
                else
                {
                  v53 = 0;
                }
                v30 = __OFADD__(v53, 69);
                v54 = v53 + 69;
                if (!v30)
                {
                  v30 = __OFADD__(v54, 39);
                  v55 = v54 + 39;
                  v56 = v30;
                  if ((v51 & 0x80000000) == 0 && !v56)
                  {
                    v30 = __OFADD__(v51, v55);
                    v57 = v51 + v55;
                    if (!v30)
                    {
                      v30 = __OFADD__(v57, 54);
                      v58 = v57 + 54;
                      v59 = v30;
                      if ((v52 & 0x80000000) == 0 && !v59)
                      {
                        v60 = (v52 + v58);
                        if (!__OFADD__(v52, v58))
                        {
                          if ((*((_BYTE *)v4 + 16) & 4) == 0
                            || v6 && (*(_BYTE *)(v6 + 16) & 4) == 0
                            || v7 && ((_BYTE)v7[2] & 4) == 0)
                          {
                            if ((_DWORD)v60)
                            {
                              if (v60 <= 0x7FFFFFEF)
                              {
                                WTF::tryFastCompactMalloc((WTF *)(2 * v60 + 20));
                                v61 = v212;
                                if (v212)
                                {
                                  v62 = v212 + 20;
                                  *(_DWORD *)v212 = 2;
                                  *((_DWORD *)v61 + 1) = v60;
                                  *((_QWORD *)v61 + 1) = v61 + 20;
                                  *((_DWORD *)v61 + 4) = 0;
                                  v63 = (int8x16_t *)*((_QWORD *)v4 + 1);
                                  v64 = *((unsigned int *)v4 + 1);
                                  if ((*((_BYTE *)v4 + 16) & 4) != 0)
                                  {
                                    v134 = (char *)&v62[v64];
                                    if (v64 >= 0x40)
                                    {
                                      v135 = (char *)&v62[v64 & 0xFFFFFFC0];
                                      v160 = 0uLL;
                                      v161 = v61 + 20;
                                      do
                                      {
                                        v215.val[0] = *v63;
                                        v162 = v63[1];
                                        v217.val[0] = v63[2];
                                        v163 = v63[3];
                                        v63 += 4;
                                        v164 = v163;
                                        v217.val[1] = 0uLL;
                                        v219.val[0] = v162;
                                        v215.val[1] = 0uLL;
                                        v165 = v161;
                                        vst2q_s8(v165, v215);
                                        v165 += 32;
                                        v219.val[1] = 0uLL;
                                        vst2q_s8(v165, v219);
                                        v166 = v161 + 64;
                                        vst2q_s8(v166, v217);
                                        v167 = v161 + 96;
                                        vst2q_s8(v167, *(int8x16x2_t *)(&v160 - 1));
                                        v161 += 128;
                                      }
                                      while (v161 != v135);
                                    }
                                    else
                                    {
                                      v135 = v61 + 20;
                                    }
                                    while (v135 != v134)
                                    {
                                      v168 = v63->u8[0];
                                      v63 = (int8x16_t *)((char *)v63 + 1);
                                      *(_WORD *)v135 = v168;
                                      v135 += 2;
                                    }
                                  }
                                  else if ((_DWORD)v64 == 1)
                                  {
                                    *v62 = v63->i16[0];
                                  }
                                  else if ((_DWORD)v64)
                                  {
                                    memcpy(v61 + 20, v63, 2 * v64);
                                  }
                                  v169 = &v62[*((unsigned int *)v4 + 1)];
                                  *(_OWORD *)v169 = xmmword_1969F58A0;
                                  *((_OWORD *)v169 + 1) = xmmword_1969F58B0;
                                  *((_OWORD *)v169 + 2) = xmmword_1969F58C0;
                                  *((_OWORD *)v169 + 3) = xmmword_1969F58D0;
                                  *((_OWORD *)v169 + 4) = xmmword_1969F58E0;
                                  *((_OWORD *)v169 + 5) = xmmword_1969F58F0;
                                  *((_DWORD *)v169 + 26) = 2228256;
                                  *((_QWORD *)v169 + 12) = 0x6F007400200022;
                                  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v169 + 54, v6, (int8x16_t *)"\", the frame being accessed set it to \"", 39, (uint64_t)v7, (int8x16_t *)"\". Both must set \"document.domain\" to the same value to allow access.", 69);
                                  goto LABEL_325;
                                }
                              }
                              goto LABEL_422;
                            }
LABEL_390:
                            v61 = (char *)MEMORY[0x1E0CBEF70];
                            *MEMORY[0x1E0CBEF70] += 2;
                            goto LABEL_325;
                          }
                          if (!(_DWORD)v60)
                            goto LABEL_390;
                          if ((v60 & 0x80000000) == 0)
                          {
                            WTF::tryFastCompactMalloc((WTF *)(v60 + 20));
                            v61 = v212;
                            if (v212)
                            {
                              v136 = v212 + 20;
                              *(_DWORD *)v212 = 2;
                              *((_DWORD *)v61 + 1) = v60;
                              *((_QWORD *)v61 + 1) = v61 + 20;
                              *((_DWORD *)v61 + 4) = 4;
                              v137 = (_BYTE *)*((_QWORD *)v4 + 1);
                              v138 = *((unsigned int *)v4 + 1);
                              if ((*((_BYTE *)v4 + 16) & 4) != 0)
                              {
                                if ((_DWORD)v138)
                                {
                                  if ((_DWORD)v138 == 1)
                                    *v136 = *v137;
                                  else
                                    memcpy(v61 + 20, v137, v138);
                                }
                              }
                              else
                              {
                                if (v138 < 0x10)
                                {
                                  v185 = (unsigned __int128 *)(v61 + 20);
                                }
                                else
                                {
                                  v185 = (unsigned __int128 *)&v136[v138 & 0xFFFFFFF0];
                                  v186 = (unsigned __int128 *)(v61 + 20);
                                  do
                                  {
                                    v187 = (unsigned __int128)vld2q_s8(v137);
                                    v137 += 32;
                                    *v186++ = v187;
                                  }
                                  while (v186 != v185);
                                }
                                while (v185 != (unsigned __int128 *)&v136[v138])
                                {
                                  v188 = *v137;
                                  v137 += 2;
                                  *(_BYTE *)v185 = v188;
                                  v185 = (unsigned __int128 *)((char *)v185 + 1);
                                }
                              }
                              v139 = &v136[*((unsigned int *)v4 + 1)];
                              qmemcpy(v139, "The frame requesting access set \"document.domain\" to \"", 54);
                              WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v139 + 54, v6, "\", the frame being accessed set it to \"", 0x27u, (uint64_t)v7, "\". Both must set \"document.domain\" to the same value to allow access.", 0x45u);
LABEL_325:
                              *a4 = v61;
                              if (v7)
                              {
                                if (*(_DWORD *)v7 == 2)
                                {
                                  WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v49);
                                  if (v6)
                                  {
LABEL_329:
                                    if (*(_DWORD *)v6 == 2)
                                      WTF::StringImpl::destroy((WTF::StringImpl *)v6, (WTF::StringImpl *)v49);
                                    else
                                      *(_DWORD *)v6 -= 2;
                                  }
LABEL_331:
                                  if (*(_DWORD *)v4 != 2)
                                  {
                                    *(_DWORD *)v4 -= 2;
                                    goto LABEL_333;
                                  }
                                  v128 = v4;
                                  goto LABEL_353;
                                }
                                *(_DWORD *)v7 -= 2;
                              }
                              if (v6)
                                goto LABEL_329;
                              goto LABEL_331;
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_422:
                *a4 = 0;
                __break(0xC471u);
                JUMPOUT(0x195FE7DF0);
              }
              v191 = v4;
              v132 = (WTF::StringImpl *)*((_QWORD *)v18 + 5);
              if (v132)
                *(_DWORD *)v132 += 2;
              v190 = v132;
              v212 = "The frame being accessed set \"document.domain\" to \"";
              v213 = 52;
              v210 = "\", but the frame requesting access did not. Both must set \"document.domain\" to the same value to allow access.";
              v211 = 111;
              WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v191, (uint64_t)&v212, (uint64_t *)&v190, (uint64_t)&v210, a4);
              if (*a4)
              {
                v133 = v190;
                v190 = 0;
                if (v133)
                {
                  if (*(_DWORD *)v133 == 2)
                    WTF::StringImpl::destroy(v133, (WTF::StringImpl *)v49);
                  else
                    *(_DWORD *)v133 -= 2;
                }
                v128 = v191;
                v191 = 0;
                if (!v128)
                  goto LABEL_333;
LABEL_245:
                if (*(_DWORD *)v128 != 2)
                {
                  *(_DWORD *)v128 -= 2;
LABEL_333:
                  v72 = v4;
                  goto LABEL_334;
                }
LABEL_353:
                WTF::StringImpl::destroy(v128, (WTF::StringImpl *)v49);
                goto LABEL_333;
              }
              __break(0xC471u);
LABEL_425:
              JUMPOUT(0x195FE7508);
            }
            if (*((_BYTE *)v14 + 57))
            {
              *(_DWORD *)v4 += 2;
              v193 = v4;
              v126 = (WTF::StringImpl *)*((_QWORD *)v14 + 5);
              if (v126)
                *(_DWORD *)v126 += 2;
              v192 = v126;
              v212 = "The frame requesting access set \"document.domain\" to \"";
              v213 = 55;
              v210 = "\", but the frame being accessed did not. Both must set \"document.domain\" to the same value to allow access.";
              v211 = 108;
              WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v193, (uint64_t)&v212, (uint64_t *)&v192, (uint64_t)&v210, a4);
              if (!*a4)
              {
                __break(0xC471u);
                JUMPOUT(0x195FE7DF8);
              }
              v127 = v192;
              v192 = 0;
              if (v127)
              {
                if (*(_DWORD *)v127 == 2)
                  WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v49);
                else
                  *(_DWORD *)v127 -= 2;
              }
              v128 = v193;
              v193 = 0;
              if (!v128)
                goto LABEL_333;
              goto LABEL_245;
            }
LABEL_230:
            v129 = *((_DWORD *)v4 + 1);
            *(_DWORD *)v4 += 2;
            if (v129 < 0 || __OFADD__(v129, 41))
            {
              *a4 = 0;
            }
            else
            {
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v129 + 41), (*((_DWORD *)v4 + 4) >> 2) & 1, (uint64_t)v4, (int8x16_t *)"Protocols, domains, and ports must match.", 0x29u, a4);
              if (*a4)
                goto LABEL_331;
            }
            __break(0xC471u);
            JUMPOUT(0x195FE7DE4);
          }
          *(_DWORD *)v4 += 2;
          v102 = (_BYTE *)WTF::URL::protocol((WTF::URL *)&v203);
          v104 = v103;
          v105 = WTF::URL::protocol((WTF::URL *)&v200);
          v106 = v49;
          if ((v49 & 0x80000000) != 0 || __OFADD__((_DWORD)v49, 25))
            goto LABEL_413;
          v107 = v49 + 72;
          v108 = __OFADD__(v49 + 25, 47);
          if ((v104 & 0x80000000) != 0)
            goto LABEL_413;
          if (v108)
            goto LABEL_413;
          v109 = v104 + v107;
          if (__OFADD__((_DWORD)v104, v107))
            goto LABEL_413;
          v110 = *((_DWORD *)v4 + 1);
          v30 = __OFADD__(v109, 48);
          v111 = v109 + 48;
          v112 = v30;
          if (v110 < 0)
            goto LABEL_413;
          if (v112)
            goto LABEL_413;
          v113 = (v110 + v111);
          if (__OFADD__(v110, v111))
            goto LABEL_413;
          __src = (_BYTE *)v105;
          if ((*((_BYTE *)v4 + 16) & 4) != 0 && (v104 & 0xFF00000000) != 0 && (v49 & 0xFF00000000) != 0)
          {
            if ((_DWORD)v113)
            {
              if ((v113 & 0x80000000) == 0)
              {
                WTF::tryFastCompactMalloc((WTF *)(v113 + 20));
                v114 = v212;
                if (v212)
                {
                  v115 = v212 + 20;
                  *(_DWORD *)v212 = 2;
                  *((_DWORD *)v114 + 1) = v113;
                  *((_QWORD *)v114 + 1) = v114 + 20;
                  *((_DWORD *)v114 + 4) = 4;
                  v49 = *((_QWORD *)v4 + 1);
                  v116 = *((unsigned int *)v4 + 1);
                  if ((*((_BYTE *)v4 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v116)
                    {
                      if ((_DWORD)v116 == 1)
                        *v115 = *(_BYTE *)v49;
                      else
                        memcpy(v114 + 20, (const void *)v49, v116);
                    }
                  }
                  else
                  {
                    if (v116 < 0x10)
                    {
                      v181 = (unsigned __int128 *)(v114 + 20);
                    }
                    else
                    {
                      v181 = (unsigned __int128 *)&v115[v116 & 0xFFFFFFF0];
                      v182 = (unsigned __int128 *)(v114 + 20);
                      do
                      {
                        v183 = (unsigned __int128)vld2q_s8((const char *)v49);
                        v49 += 32;
                        *v182++ = v183;
                      }
                      while (v182 != v181);
                    }
                    while (v181 != (unsigned __int128 *)&v115[v116])
                    {
                      v184 = *(_BYTE *)v49;
                      v49 += 2;
                      *(_BYTE *)v181 = v184;
                      v181 = (unsigned __int128 *)((char *)v181 + 1);
                    }
                  }
                  v117 = &v115[*((unsigned int *)v4 + 1)];
                  qmemcpy(v117, " The frame requesting access has a protocol of \"", 48);
                  v118 = v117 + 48;
                  if ((_DWORD)v104)
                  {
                    if ((_DWORD)v104 == 1)
                      *v118 = *v102;
                    else
                      memcpy(v117 + 48, v102, v104);
                  }
                  v119 = &v118[v104];
                  qmemcpy(v119, "\", the frame being accessed has a protocol of \"", 47);
                  v120 = v119 + 47;
                  if ((_DWORD)v106)
                  {
                    if ((_DWORD)v106 == 1)
                      *v120 = *__src;
                    else
                      memcpy(v119 + 47, __src, v106);
                  }
                  qmemcpy(&v120[v106], "\". Protocols must match.\n", 25);
                  goto LABEL_308;
                }
              }
LABEL_413:
              *a4 = 0;
              __break(0xC471u);
              JUMPOUT(0x195FE7DB0);
            }
          }
          else if ((_DWORD)v113)
          {
            if (v113 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * v113 + 20));
              v114 = v212;
              if (v212)
              {
                v121 = v212 + 20;
                *(_DWORD *)v212 = 2;
                *((_DWORD *)v114 + 1) = v113;
                *((_QWORD *)v114 + 1) = v114 + 20;
                *((_DWORD *)v114 + 4) = 0;
                v122 = (int8x16_t *)*((_QWORD *)v4 + 1);
                v123 = *((unsigned int *)v4 + 1);
                if ((*((_BYTE *)v4 + 16) & 4) != 0)
                {
                  v130 = (char *)&v121[v123];
                  if (v123 >= 0x40)
                  {
                    v131 = (char *)&v121[v123 & 0xFFFFFFC0];
                    v146 = 0uLL;
                    v147 = v114 + 20;
                    do
                    {
                      v214.val[0] = *v122;
                      v148 = v122[1];
                      v216.val[0] = v122[2];
                      v149 = v122[3];
                      v122 += 4;
                      v150 = v149;
                      v216.val[1] = 0uLL;
                      v218.val[0] = v148;
                      v214.val[1] = 0uLL;
                      v151 = v147;
                      vst2q_s8(v151, v214);
                      v151 += 32;
                      v218.val[1] = 0uLL;
                      vst2q_s8(v151, v218);
                      v152 = v147 + 64;
                      vst2q_s8(v152, v216);
                      v153 = v147 + 96;
                      vst2q_s8(v153, *(int8x16x2_t *)(&v146 - 1));
                      v147 += 128;
                    }
                    while (v147 != v131);
                  }
                  else
                  {
                    v131 = v114 + 20;
                  }
                  while (v131 != v130)
                  {
                    v154 = v122->u8[0];
                    v122 = (int8x16_t *)((char *)v122 + 1);
                    *(_WORD *)v131 = v154;
                    v131 += 2;
                  }
                }
                else if ((_DWORD)v123 == 1)
                {
                  *v121 = v122->i16[0];
                }
                else if ((_DWORD)v123)
                {
                  memcpy(v114 + 20, v122, 2 * v123);
                }
                v155 = &v121[*((unsigned int *)v4 + 1)];
                *(_OWORD *)v155 = xmmword_1969F57C0;
                *((_OWORD *)v155 + 1) = xmmword_1969F57D0;
                *((_OWORD *)v155 + 2) = xmmword_1969F57E0;
                *((_OWORD *)v155 + 3) = xmmword_1969F57F0;
                *((_OWORD *)v155 + 4) = xmmword_1969F5800;
                *((_OWORD *)v155 + 5) = xmmword_1969F5810;
                v156 = v155 + 48;
                v210 = v102;
                v211 = v104;
                WTF::StringView::getCharacters<char16_t>(&v210, (char *)v155 + 96);
                v157 = &v156[v211];
                *(_OWORD *)v157 = xmmword_1969F5820;
                *((_OWORD *)v157 + 1) = xmmword_1969F5830;
                *((_OWORD *)v157 + 2) = xmmword_1969F5840;
                *((_OWORD *)v157 + 3) = xmmword_1969F5850;
                *((_OWORD *)v157 + 4) = xmmword_1969F5860;
                *((_QWORD *)v157 + 10) = 0x6F0020006C006FLL;
                *((_DWORD *)v157 + 22) = 2097254;
                v157[46] = 34;
                v158 = v157 + 47;
                v212 = __src;
                v213 = v106;
                WTF::StringView::getCharacters<char16_t>(&v212, (char *)v157 + 94);
                v159 = &v158[v213];
                *v159 = 34;
                *(_OWORD *)(v159 + 1) = xmmword_1969F5870;
                *(_OWORD *)(v159 + 9) = xmmword_1969F5880;
                *(_OWORD *)(v159 + 17) = xmmword_1969F5890;
                goto LABEL_308;
              }
            }
            goto LABEL_413;
          }
          v114 = (char *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
LABEL_308:
          *a4 = v114;
          goto LABEL_331;
        }
      }
LABEL_389:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_390;
    }
  }
  if (a3)
  {
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v203, &v197);
    v65 = v197;
    v66 = *(unsigned int *)(v197 + 32);
    if ((_DWORD)v66 == 1)
      goto LABEL_382;
    if ((_DWORD)v66 == -1)
      goto LABEL_389;
    v212 = (char *)&v210;
    v67 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v66])(&v212, v197 + 8);
    if (MEMORY[0x19AEA53F4](*v67, "file", 4) && *(_BYTE *)(v65 + 59))
LABEL_382:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    else
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v65 + 8), &v198);
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v200, &v195);
    v68 = v195;
    v69 = *(unsigned int *)(v195 + 32);
    if ((_DWORD)v69 == 1)
      goto LABEL_386;
    if ((_DWORD)v69 == -1)
      goto LABEL_389;
    v212 = (char *)&v210;
    v70 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v69])(&v212, v195 + 8);
    if (MEMORY[0x19AEA53F4](*v70, "file", 4) && *(_BYTE *)(v68 + 59))
LABEL_386:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    else
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v68 + 8), &v196);
    v212 = "Blocked a frame at \"";
    v213 = 21;
    v210 = "\" from accessing a frame at \"";
    v211 = 30;
    v209[0] = "\". ";
    v209[1] = 4;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v212, (uint64_t *)&v198, (uint64_t)&v210, (uint64_t *)&v196, (uint64_t)v209, &v199);
    v72 = v199;
    if (!v199)
    {
      __break(0xC471u);
      JUMPOUT(0x195FE7DD8);
    }
    v199 = 0;
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v71);
      v125 = v199;
      v199 = 0;
      if (v125)
      {
        if (*(_DWORD *)v125 == 2)
          WTF::StringImpl::destroy(v125, v71);
        else
          *(_DWORD *)v125 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v4 -= 2;
      v199 = 0;
    }
    v73 = v196;
    v196 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, v71);
      else
        *(_DWORD *)v73 -= 2;
    }
    v195 = 0;
    do
    {
      v74 = __ldaxr((unsigned int *)v68);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, (unsigned int *)v68));
    if (!v75)
    {
      atomic_store(1u, (unsigned int *)v68);
      v143 = *(WTF::StringImpl **)(v68 + 48);
      *(_QWORD *)(v68 + 48) = 0;
      if (v143)
      {
        if (*(_DWORD *)v143 == 2)
          WTF::StringImpl::destroy(v143, v71);
        else
          *(_DWORD *)v143 -= 2;
      }
      v144 = *(WTF::StringImpl **)(v68 + 40);
      *(_QWORD *)(v68 + 40) = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
          WTF::StringImpl::destroy(v144, v71);
        else
          *(_DWORD *)v144 -= 2;
      }
      v145 = *(unsigned int *)(v68 + 32);
      if ((_DWORD)v145 != -1)
        ((void (*)(char **, uint64_t))off_1E33FF730[v145])(&v212, v68 + 8);
      *(_DWORD *)(v68 + 32) = -1;
      WTF::fastFree((WTF *)v68, v71);
    }
    v76 = v198;
    v198 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v71);
      else
        *(_DWORD *)v76 -= 2;
    }
    v77 = v197;
    v197 = 0;
    if (v77)
    {
      do
      {
        v78 = __ldaxr((unsigned int *)v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, (unsigned int *)v77));
      if (!v79)
      {
        atomic_store(1u, (unsigned int *)v77);
        v80 = *(WTF::StringImpl **)(v77 + 48);
        *(_QWORD *)(v77 + 48) = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
            WTF::StringImpl::destroy(v80, v71);
          else
            *(_DWORD *)v80 -= 2;
        }
        v81 = *(WTF::StringImpl **)(v77 + 40);
        *(_QWORD *)(v77 + 40) = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v71);
          else
            *(_DWORD *)v81 -= 2;
        }
        v82 = *(unsigned int *)(v77 + 32);
        if ((_DWORD)v82 != -1)
          ((void (*)(char **, uint64_t))off_1E33FF730[v82])(&v212, v77 + 8);
        *(_DWORD *)(v77 + 32) = -1;
        v83 = (WTF *)v77;
LABEL_288:
        WTF::fastFree(v83, v71);
        goto LABEL_152;
      }
    }
    goto LABEL_152;
  }
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v203, (uint64_t *)&v210);
  v84 = (uint64_t)v210;
  v85 = *((unsigned int *)v210 + 8);
  if ((_DWORD)v85 == 1)
    goto LABEL_384;
  if ((_DWORD)v85 == -1)
    goto LABEL_389;
  v212 = (char *)v209;
  v86 = (_QWORD *)((uint64_t (*)(char **, const char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v85])(&v212, v210 + 8);
  if (MEMORY[0x19AEA53F4](*v86, "file", 4) && *(_BYTE *)(v84 + 59))
LABEL_384:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v84 + 8), &v194);
  if (v194)
  {
    v87 = *((_DWORD *)v194 + 1);
    if (v87 < 0)
    {
LABEL_411:
      v212 = 0;
      goto LABEL_412;
    }
  }
  else
  {
    v87 = 0;
  }
  v30 = __OFADD__(v87, 39);
  v88 = v87 + 39;
  if (v30 || __OFADD__(v88, 20))
    goto LABEL_411;
  v89 = !v194 || (*((_BYTE *)v194 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v88 + 20), v89, (int8x16_t *)"Blocked a frame at \"", 0x14u, (uint64_t)v194, (int8x16_t *)"\" from accessing a cross-origin frame. ", 0x27u, &v212);
  v72 = (WTF::StringImpl *)v212;
  if (!v212)
  {
LABEL_412:
    __break(0xC471u);
    JUMPOUT(0x195FE7DA4);
  }
  v212 = 0;
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, v71);
    v124 = (WTF::StringImpl *)v212;
    v212 = 0;
    if (v124)
    {
      if (*(_DWORD *)v124 == 2)
        WTF::StringImpl::destroy(v124, v71);
      else
        *(_DWORD *)v124 -= 2;
    }
  }
  else
  {
    *(_DWORD *)v4 -= 2;
    v212 = 0;
  }
  v90 = v194;
  v194 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, v71);
    else
      *(_DWORD *)v90 -= 2;
  }
  v210 = 0;
  do
  {
    v91 = __ldaxr((unsigned int *)v84);
    v92 = v91 - 1;
  }
  while (__stlxr(v92, (unsigned int *)v84));
  if (!v92)
  {
    atomic_store(1u, (unsigned int *)v84);
    v140 = *(WTF::StringImpl **)(v84 + 48);
    *(_QWORD *)(v84 + 48) = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
        WTF::StringImpl::destroy(v140, v71);
      else
        *(_DWORD *)v140 -= 2;
    }
    v141 = *(WTF::StringImpl **)(v84 + 40);
    *(_QWORD *)(v84 + 40) = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 2)
        WTF::StringImpl::destroy(v141, v71);
      else
        *(_DWORD *)v141 -= 2;
    }
    v142 = *(unsigned int *)(v84 + 32);
    if ((_DWORD)v142 != -1)
      ((void (*)(_QWORD *, uint64_t))off_1E33FF730[v142])(v209, v84 + 8);
    *(_DWORD *)(v84 + 32) = -1;
    v83 = (WTF *)v84;
    goto LABEL_288;
  }
LABEL_152:
  v93 = *((_QWORD *)v7[9] + 1);
  if (*(_BYTE *)(v93 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE7578);
  }
  if ((*(_BYTE *)(v93 - 20) & 4) != 0)
  {
    v96 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8);
    if (*(_BYTE *)(v96 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195FE7718);
    }
    v97 = *(_DWORD *)(v96 - 20);
    *(_DWORD *)v72 += 2;
    if ((v97 & 4) == 0)
    {
      v98 = *((_DWORD *)v72 + 1);
      if (v98 < 0 || (v30 = __OFADD__(v98, 78), v99 = v98 + 78, v30) || __OFADD__(v99, 26))
      {
        *a4 = 0;
      }
      else
      {
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v99 + 26), (*((_DWORD *)v72 + 4) >> 2) & 1, (int8x16_t *)"Sandbox access violation: ", 0x1Au, (uint64_t)v72, (int8x16_t *)" The frame being accessed is sandboxed and lacks the \"allow-same-origin\" flag.", 0x4Eu, a4);
        if (*a4)
          goto LABEL_170;
      }
      __break(0xC471u);
      JUMPOUT(0x195FE7DBCLL);
    }
    v100 = *((_DWORD *)v72 + 1);
    if (v100 < 0 || (v30 = __OFADD__(v100, 65), v101 = v100 + 65, v30) || __OFADD__(v101, 26))
    {
      *a4 = 0;
    }
    else
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v101 + 26), (*((_DWORD *)v72 + 4) >> 2) & 1, (int8x16_t *)"Sandbox access violation: ", 0x1Au, (uint64_t)v72, (int8x16_t *)" Both frames are sandboxed and lack the \"allow-same-origin\" flag.", 0x41u, a4);
      if (*a4)
        goto LABEL_170;
    }
    __break(0xC471u);
    JUMPOUT(0x195FE7DC8);
  }
  v94 = *((_DWORD *)v72 + 1);
  *(_DWORD *)v72 += 2;
  if (v94 < 0 || (v30 = __OFADD__(v94, 81), v95 = v94 + 81, v30) || __OFADD__(v95, 26))
  {
    *a4 = 0;
LABEL_410:
    __break(0xC471u);
    JUMPOUT(0x195FE7D98);
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v95 + 26), (*((_DWORD *)v72 + 4) >> 2) & 1, (int8x16_t *)"Sandbox access violation: ", 0x1Au, (uint64_t)v72, (int8x16_t *)" The frame requesting access is sandboxed and lacks the \"allow-same-origin\" flag.", 0x51u, a4);
  if (!*a4)
    goto LABEL_410;
LABEL_170:
  if (*(_DWORD *)v72 == 2)
    WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v49);
  else
    *(_DWORD *)v72 -= 2;
LABEL_334:
  v170 = v200;
  v200 = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
      WTF::StringImpl::destroy(v170, (WTF::StringImpl *)v49);
    else
      *(_DWORD *)v170 -= 2;
  }
  result = v203;
  v203 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v49);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)v72 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v49);
    if (v18)
    {
      do
      {
LABEL_342:
        v171 = __ldaxr(v18);
        v172 = v171 - 1;
      }
      while (__stlxr(v172, v18));
      if (!v172)
      {
        atomic_store(1u, v18);
        v175 = (WTF::StringImpl *)*((_QWORD *)v18 + 6);
        *((_QWORD *)v18 + 6) = 0;
        if (v175)
        {
          if (*(_DWORD *)v175 == 2)
            WTF::StringImpl::destroy(v175, (WTF::StringImpl *)v49);
          else
            *(_DWORD *)v175 -= 2;
        }
        v176 = (WTF::StringImpl *)*((_QWORD *)v18 + 5);
        *((_QWORD *)v18 + 5) = 0;
        if (v176)
        {
          if (*(_DWORD *)v176 == 2)
            WTF::StringImpl::destroy(v176, (WTF::StringImpl *)v49);
          else
            *(_DWORD *)v176 -= 2;
        }
        v177 = v18[8];
        if ((_DWORD)v177 != -1)
          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33FF730[v177])(&v203, v18 + 2);
        v18[8] = -1;
        result = (WTF::StringImpl *)WTF::fastFree((WTF *)v18, (void *)v49);
      }
    }
  }
  else
  {
    *(_DWORD *)v72 -= 2;
    if (v18)
      goto LABEL_342;
  }
  if (v14)
  {
    do
    {
      v173 = __ldaxr(v14);
      v174 = v173 - 1;
    }
    while (__stlxr(v174, v14));
    if (!v174)
    {
      atomic_store(1u, v14);
      v178 = (WTF::StringImpl *)*((_QWORD *)v14 + 6);
      *((_QWORD *)v14 + 6) = 0;
      if (v178)
      {
        if (*(_DWORD *)v178 == 2)
          WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v49);
        else
          *(_DWORD *)v178 -= 2;
      }
      v179 = (WTF::StringImpl *)*((_QWORD *)v14 + 5);
      *((_QWORD *)v14 + 5) = 0;
      if (v179)
      {
        if (*(_DWORD *)v179 == 2)
          WTF::StringImpl::destroy(v179, (WTF::StringImpl *)v49);
        else
          *(_DWORD *)v179 -= 2;
      }
      v180 = v14[8];
      if ((_DWORD)v180 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33FF730[v180])(&v203, v14 + 2);
      v14[8] = -1;
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v14, (void *)v49);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::LocalDOMWindow::createWindow(WTF::StringImpl *result, _QWORD *a2, _DWORD **a3, uint64_t a4, WebCore::LocalDOMWindow *a5, uint64_t a6, WebCore::Frame *a7, WebCore::Node **a8)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore::Frame *v30;
  const WTF::String *v31;
  char v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  WebCore::SecurityContext *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  unsigned int v49;
  WebCore::Frame *v50;
  WebCore::Node *v51;
  WTF::StringImpl *v52;
  WebCore::Frame *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  WTF *v57;
  void *v58;
  unsigned int *v59;
  unsigned int v60;
  WebCore::LocalDOMWindow *v61;
  int isInsecureScriptAccess;
  int v63;
  WebCore::Frame *v64;
  unsigned int *v65;
  unsigned int v66;
  _DWORD *v67;
  const WTF::String *v68;
  char v69;
  _DWORD *v70;
  WTF::StringImpl *v71;
  const WebCore::Page *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  char v77;
  char v78;
  _QWORD *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  WebCore::Node *v83;
  WebCore::Node *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  unsigned int v92;
  unsigned int v93;
  WTF::StringImpl *v94;
  void *v95;
  WebCore::Frame *v96;
  uint64_t v97;
  char v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  WebCore::Frame *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  void *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unsigned int v111;
  unsigned int v112;
  WTF::StringImpl **v113;
  uint64_t v114;
  WTF::StringImpl **v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl **v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WebCore::Node *v125;
  WebCore::Node *v126;
  WebCore::Node *v127;
  WebCore::Node *v128;
  char v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  unsigned int v136;
  WebCore::Node *v137;
  char v138;
  char v141;
  _DWORD *v142;
  char v143;
  uint64_t v144;
  WebCore::Node *v145;
  _DWORD *v147;
  WebCore::Node *v148;
  WebCore::Node *v149;
  WebCore::Node *v150[69];
  char v151;
  const WTF::String *v152;
  __int128 v153;
  __int128 v154;
  _QWORD v155[7];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  int v159;
  char v160;
  uint64_t v161;
  _DWORD *v162;
  uint64_t v163;
  char v164;
  char v165;
  char v166;
  uint64_t v167;
  WebCore::Frame *v168;
  char v169;
  WTF::StringImpl *v170[69];
  char shouldOpenExternalURLsPolicyToPropagate;
  const WTF::String *v172;
  __int128 v173;
  __int128 v174;
  _QWORD v175[7];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  int v179;
  char v180;
  uint64_t v181;
  _DWORD *v182;
  uint64_t v183;
  char v184;
  char v185;
  char v186;
  uint64_t v187;
  WTF::StringImpl **v188;
  _OWORD v189[2];
  _BYTE v190[26];
  WTF::StringImpl **v191;
  int v192;
  unsigned int v193;
  const WTF::String *v194;
  __int128 v195;
  __int128 v196;

  v8 = result;
  v9 = *((_QWORD *)a5 + 9);
  if (!v9)
    goto LABEL_28;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_28;
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE8A0CLL);
  }
  v11 = *(_QWORD *)(v10 + 240);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
LABEL_28:
    *(_QWORD *)result = 0;
    *((_DWORD *)result + 4) = 0;
    return result;
  }
  v17 = (unsigned int *)(v12 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = *((_QWORD *)a5 + 9);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      if (*(_BYTE *)(v20 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE8A70);
      }
      v142 = (_DWORD *)(v20 - 264);
      *(_DWORD *)(v20 - 264) += 2;
      v144 = v20;
      if (*a2 && *(_DWORD *)(*a2 + 4))
      {
        v54 = *(_QWORD *)(a6 + 296);
        if (v54)
        {
          *(_DWORD *)(v54 + 24) += 2;
          WebCore::Document::completeURL((WebCore::Document *)v54, a2, v54 + 848, 0, (WTF::URL *)&v194);
          if (*(_DWORD *)(v54 + 24) == 2)
          {
            v23 = v144;
            if ((*(_WORD *)(v54 + 30) & 0x400) != 0)
              goto LABEL_16;
            WebCore::Node::removedLastRef((WebCore::Node *)v54);
          }
          else
          {
            *(_DWORD *)(v54 + 24) -= 2;
          }
        }
        else
        {
          WebCore::Document::completeURL(0, a2, 848, 0, (WTF::URL *)&v194);
        }
      }
      else
      {
        v170[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v170);
        MEMORY[0x19AEA52F8](&v194, v170, MEMORY[0x1E0CBF738], 0);
        v22 = v170[0];
        v170[0] = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      v23 = v144;
LABEL_16:
      v145 = (WebCore::Node *)(v23 - 288);
      result = v194;
      if (v194 && *((_DWORD *)v194 + 1) && (v195 & 1) == 0)
      {
        *(_BYTE *)v8 = 9;
        *((_QWORD *)v8 + 1) = 0;
        *((_DWORD *)v8 + 4) = 1;
        v194 = 0;
        v34 = v142;
LABEL_163:
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
        else
          *(_DWORD *)result -= 2;
LABEL_165:
        if (*v34 == 2)
        {
          if ((*(_WORD *)(v144 - 258) & 0x400) == 0)
            result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v145);
        }
        else
        {
          *v34 -= 2;
        }
        goto LABEL_167;
      }
      v24 = *(_OWORD *)(a4 + 16);
      v189[0] = *(_OWORD *)a4;
      v189[1] = v24;
      *(_OWORD *)v190 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)&v190[10] = *(_OWORD *)(a4 + 42);
      v25 = *(unsigned int *)(a4 + 76);
      v191 = 0;
      v192 = 0;
      v193 = v25;
      if ((_DWORD)v25)
      {
        if (v25 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195FE8E3CLL);
        }
        v113 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(8 * v25));
        v192 = v25;
        v191 = v113;
        v114 = *(unsigned int *)(a4 + 76);
        if ((_DWORD)v114)
        {
          v115 = *(WTF::StringImpl ***)(a4 + 64);
          v116 = 8 * v114;
          do
          {
            v117 = *v115;
            if (*v115)
              *(_DWORD *)v117 += 2;
            *v113++ = v117;
            ++v115;
            v116 -= 8;
          }
          while (v116);
        }
      }
      if (v190[25])
        v26 = v190[24] == 0;
      else
        v26 = 1;
      if (v26)
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 296) + 192) + 8))(*(_QWORD *)(a6 + 296) + 192);
        WebCore::FrameLoader::outgoingReferrerURL(*(WebCore::FrameLoader **)(a6 + 280), (uint64_t)v170);
        v30 = a7;
        {
          WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
        }
        WebCore::SecurityPolicy::generateReferrerHeader((WebCore::SecurityPolicy *)&v194, (WTF::StringImpl ***)v170, v27, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, &v188);
        v29 = v170[0];
        v170[0] = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v28);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
      else
      {
        v188 = 0;
        v30 = a7;
      }
      v143 = *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) != v12;
      v31 = v194;
      if (v194)
        *(_DWORD *)v194 += 2;
      v173 = v195;
      v174 = v196;
      v172 = v31;
      v175[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v175);
      v175[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v175[6] = v170[0];
      v176 = 0u;
      v177 = 0u;
      v178 = 0u;
      v179 = 0x10000;
      v32 = v180 & 0x80 | 4;
      v180 = v32;
      v181 = 0;
      v33 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *v33 += 2;
        v32 = v180;
      }
      v34 = v142;
      v182 = v33;
      v183 = 0;
      v184 = 0;
      v185 = 0;
      v186 = v186 & 0xE0 | 5;
      v180 = v32 | 2;
      v187 = 0;
      WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v172, (WTF::StringImpl **)&v188);
      v36 = *((_QWORD *)v30 + 37);
      if (!v36)
      {
        v40 = 0;
        v141 = 1;
        v38 = v144;
        goto LABEL_44;
      }
      v37 = *(_QWORD *)(v36 + 528);
      v38 = v144;
      if (v37)
      {
        v39 = *(_QWORD *)(v37 + 8);
        if (v39)
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v39 + 280) + 88);
          if (!v40)
          {
LABEL_78:
            v141 = 1;
            goto LABEL_44;
          }
          if (*(_QWORD *)(v39 + 296) == v36)
          {
            ++*(_DWORD *)(v40 + 24);
            v41 = *(unsigned __int8 *)(v40 + 3533);
            v42 = v186;
            if ((v186 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v172);
              v38 = v144;
              v42 = v186 | 1;
              v186 |= 1u;
            }
            v141 = 0;
            if ((v41 != 0) == ((v180 & 4) == 0))
            {
              v180 = v180 & 0xFB | (4 * (v41 != 0));
              v186 = v42 & 0xFD;
            }
LABEL_44:
            *v142 += 2;
            v150[0] = v145;
            v43 = (WebCore::SecurityContext *)(v38 - 96);
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v38 - 96), v35);
            v45 = v44;
            if (v44)
            {
              do
                v46 = __ldaxr(v44);
              while (__stlxr(v46 + 1, v44));
            }
            v152 = 0;
            WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)v170, (uint64_t *)v150, v44, (uint64_t)&v172, a3, v143, (_DWORD **)&v152);
            do
            {
              v48 = __ldaxr(v45);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v45));
            if (!v49)
            {
              atomic_store(1u, v45);
              v122 = (WTF::StringImpl *)*((_QWORD *)v45 + 6);
              *((_QWORD *)v45 + 6) = 0;
              if (v122)
              {
                if (*(_DWORD *)v122 == 2)
                  WTF::StringImpl::destroy(v122, v47);
                else
                  *(_DWORD *)v122 -= 2;
              }
              v123 = (WTF::StringImpl *)*((_QWORD *)v45 + 5);
              *((_QWORD *)v45 + 5) = 0;
              if (v123)
              {
                if (*(_DWORD *)v123 == 2)
                  WTF::StringImpl::destroy(v123, v47);
                else
                  *(_DWORD *)v123 -= 2;
              }
              v124 = v45[8];
              if ((_DWORD)v124 != -1)
                ((void (*)(const WTF::String **, unsigned int *))off_1E33FF730[v124])(&v152, v45 + 2);
              v45[8] = -1;
              WTF::fastFree((WTF *)v45, v47);
            }
            v50 = a7;
            if (v150[0])
            {
              if (*((_DWORD *)v150[0] + 6) == 2)
              {
                if ((*((_WORD *)v150[0] + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v150[0]);
              }
              else
              {
                *((_DWORD *)v150[0] + 6) -= 2;
              }
            }
            shouldOpenExternalURLsPolicyToPropagate = WebCore::Document::shouldOpenExternalURLsPolicyToPropagate(v145, v47);
            v169 = 0;
            v51 = (WebCore::Node *)WebCore::createWindow(v12, (uint64_t)a7, (uint64_t)v170, (uint64_t)v189, &v169, &v168);
            v53 = v168;
            if (!v168)
            {
              *(_QWORD *)v8 = 0;
              *((_DWORD *)v8 + 4) = 0;
              goto LABEL_149;
            }
            if (v190[23] && v190[22] || v190[25] && v190[24])
            {
              v138 = 1;
            }
            else
            {
              v51 = (WebCore::Node *)WebCore::Frame::setOpener(v168, a7);
              v138 = 0;
              v53 = v168;
            }
            if (v169)
            {
              v55 = *((_QWORD *)v53 + 3);
              if (!v55 || (v51 = *(WebCore::Node **)(v55 + 8)) == 0)
              {
                MEMORY[0x150] = 1;
LABEL_81:
                v59 = (unsigned int *)((char *)v53 + 8);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 + 1, v59));
                if (*((_BYTE *)v53 + 144))
                {
                  do
                    v136 = __ldaxr(v59);
                  while (__stlxr(v136 - 1, v59));
                  if (v136 == 1)
                  {
                    atomic_store(1u, v59);
                    v137 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v137 = off_1E31FE290;
                    *((_QWORD *)v137 + 1) = v59;
                    v150[0] = v137;
                    WTF::ensureOnMainThread();
                    v51 = v150[0];
                    v150[0] = 0;
                    if (v51)
                      v51 = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v51 + 8))(v51);
                  }
                  v53 = 0;
                  v34 = v142;
                }
                else
                {
                  v61 = *(WebCore::LocalDOMWindow **)(*((_QWORD *)v53 + 37) + 696);
                  if (v61)
                  {
                    ++*((_DWORD *)v61 + 6);
                    isInsecureScriptAccess = WebCore::LocalDOMWindow::isInsecureScriptAccess(v61, a5, v194);
                    v63 = isInsecureScriptAccess;
                    if (*((_DWORD *)v61 + 6) == 1)
                    {
                      (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v61 + 72))(v61);
                      if (v63)
                        goto LABEL_87;
                    }
                    else
                    {
                      --*((_DWORD *)v61 + 6);
                      if ((isInsecureScriptAccess & 1) != 0)
                      {
LABEL_87:
                        if ((v138 & 1) != 0)
                        {
                          v64 = 0;
                        }
                        else
                        {
                          v64 = v168;
                          if (v168)
                          {
                            v65 = (unsigned int *)((char *)v168 + 8);
                            do
                              v66 = __ldaxr(v65);
                            while (__stlxr(v66 + 1, v65));
                          }
                        }
                        *(_QWORD *)v8 = v64;
                        *((_DWORD *)v8 + 4) = 0;
                        goto LABEL_146;
                      }
                    }
                  }
                  else if ((WebCore::LocalDOMWindow::isInsecureScriptAccess(0, a5, v194) & 1) != 0)
                  {
                    goto LABEL_87;
                  }
                  v51 = *a8;
                  if (*a8)
                  {
                    v67 = *(_DWORD **)(*((_QWORD *)v53 + 37) + 696);
                    if (v67)
                    {
                      ++v67[6];
                      v51 = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *, _DWORD *))(*(_QWORD *)v51 + 16))(v51, v67);
                      if (v67[6] == 1)
                        v51 = (WebCore::Node *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 72))(v67);
                      else
                        --v67[6];
                    }
                    else
                    {
                      v51 = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *, _QWORD))(*(_QWORD *)v51 + 16))(v51, 0);
                    }
                  }
                }
                v50 = a7;
LABEL_99:
                if (!v169)
                {
                  if (*a2 && *(_DWORD *)(*a2 + 4))
                  {
                    if (WTF::isMainThread(v51))
                    {
                      {
                        v77 = WebCore::currentToken(void)::token;
                        if (WebCore::currentToken(void)::token)
                        {
                          if (*(_DWORD *)(WebCore::currentToken(void)::token + 68))
                            v77 = 0;
                          else
                            v77 = *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1;
                          v34 = v142;
                        }
                      }
                      else
                      {
                        v77 = 0;
                        WebCore::currentToken(void)::token = 0;
                      }
                    }
                    else
                    {
                      v77 = 0;
                    }
                    v78 = v77 ^ 1;
                    v79 = (_QWORD *)*((_QWORD *)v168 + 19);
                    ++*(_DWORD *)v79;
                    WebCore::SecurityContext::securityOrigin(v43, v76);
                    v81 = v80;
                    if (v80)
                    {
                      do
                        v82 = __ldaxr(v80);
                      while (__stlxr(v82 + 1, v80));
                    }
                    v83 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v83 = off_1E33F7EC8;
                    v150[0] = v83;
                    WebCore::NavigationScheduler::scheduleLocationChange(v79, v145, v81, (WTF::URL *)&v194, (WTF::StringImpl **)&v188, v78, 0, 0, (uint64_t *)v150);
                    v84 = v150[0];
                    v150[0] = 0;
                    if (v84)
                      (*(void (**)(WebCore::Node *))(*(_QWORD *)v84 + 8))(v84);
                    do
                    {
                      v85 = __ldaxr(v81);
                      v86 = v85 - 1;
                    }
                    while (__stlxr(v86, v81));
                    if (!v86)
                    {
                      atomic_store(1u, v81);
                      v133 = (WTF::StringImpl *)*((_QWORD *)v81 + 6);
                      *((_QWORD *)v81 + 6) = 0;
                      if (v133)
                      {
                        if (*(_DWORD *)v133 == 2)
                          WTF::StringImpl::destroy(v133, v52);
                        else
                          *(_DWORD *)v133 -= 2;
                      }
                      v134 = (WTF::StringImpl *)*((_QWORD *)v81 + 5);
                      *((_QWORD *)v81 + 5) = 0;
                      if (v134)
                      {
                        if (*(_DWORD *)v134 == 2)
                          WTF::StringImpl::destroy(v134, v52);
                        else
                          *(_DWORD *)v134 -= 2;
                      }
                      v135 = v81[8];
                      if ((_DWORD)v135 != -1)
                        ((void (*)(WebCore::Node **, unsigned int *))off_1E33FF730[v135])(v150, v81 + 2);
                      v81[8] = -1;
                      WTF::fastFree((WTF *)v81, v52);
                      v34 = v142;
                    }
                    if (!*(_DWORD *)v79)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FE8D64);
                    }
                    --*(_DWORD *)v79;
                  }
LABEL_137:
                  v96 = v168;
                  v97 = *((_QWORD *)v168 + 3);
                  if (!v97)
                    goto LABEL_142;
                  v26 = *(_QWORD *)(v97 + 8) == 0;
                  v98 = v138;
                  if (v26)
                    v98 = 1;
                  if ((v98 & 1) == 0)
                  {
                    v99 = (unsigned int *)((char *)v168 + 8);
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 + 1, v99));
                  }
                  else
                  {
LABEL_142:
                    v96 = 0;
                  }
                  *(_QWORD *)v8 = v96;
                  *((_DWORD *)v8 + 4) = 0;
                  if (!v53)
                  {
LABEL_149:
                    v104 = v168;
                    v168 = 0;
                    if (v104)
                    {
                      v105 = (unsigned int *)((char *)v104 + 8);
                      do
                      {
                        v106 = __ldaxr(v105);
                        v107 = v106 - 1;
                      }
                      while (__stlxr(v107, v105));
                      if (!v107)
                      {
                        atomic_store(1u, v105);
                        v125 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v125 = off_1E31FE290;
                        *((_QWORD *)v125 + 1) = v105;
                        v150[0] = v125;
                        WTF::ensureOnMainThread();
                        v126 = v150[0];
                        v150[0] = 0;
                        if (v126)
                          (*(void (**)(WebCore::Node *))(*(_QWORD *)v126 + 8))(v126);
                      }
                    }
                    WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v170, v52);
                    if ((v141 & 1) == 0)
                    {
                      if (*(_DWORD *)(v40 + 24) == 1)
                        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
                      else
                        --*(_DWORD *)(v40 + 24);
                    }
                    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v172, v108);
                    v109 = (WTF::StringImpl *)v188;
                    v188 = 0;
                    if (v109)
                    {
                      if (*(_DWORD *)v109 == 2)
                        WTF::StringImpl::destroy(v109, v21);
                      else
                        *(_DWORD *)v109 -= 2;
                    }
                    if (v193)
                    {
                      v118 = v191;
                      v119 = 8 * v193;
                      do
                      {
                        v120 = *v118;
                        *v118 = 0;
                        if (v120)
                        {
                          if (*(_DWORD *)v120 == 2)
                            WTF::StringImpl::destroy(v120, v21);
                          else
                            *(_DWORD *)v120 -= 2;
                        }
                        ++v118;
                        v119 -= 8;
                      }
                      while (v119);
                    }
                    v110 = (WTF *)v191;
                    if (v191)
                    {
                      v191 = 0;
                      v192 = 0;
                      WTF::fastFree(v110, v21);
                    }
                    result = v194;
                    v194 = 0;
                    if (!result)
                      goto LABEL_165;
                    goto LABEL_163;
                  }
LABEL_146:
                  v101 = (unsigned int *)((char *)v53 + 8);
                  do
                  {
                    v102 = __ldaxr(v101);
                    v103 = v102 - 1;
                  }
                  while (__stlxr(v103, v101));
                  if (!v103)
                  {
                    atomic_store(1u, v101);
                    v127 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v127 = off_1E31FE290;
                    *((_QWORD *)v127 + 1) = v101;
                    v150[0] = v127;
                    WTF::ensureOnMainThread();
                    v128 = v150[0];
                    v150[0] = 0;
                    if (v128)
                      (*(void (**)(WebCore::Node *))(*(_QWORD *)v128 + 8))(v128);
                  }
                  goto LABEL_149;
                }
                v68 = v194;
                if (v194)
                  *(_DWORD *)v194 += 2;
                v153 = v195;
                v154 = v196;
                v152 = v68;
                v155[0] = 0;
                WTF::URL::invalidate((WTF::URL *)v155);
                v155[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v155[6] = v150[0];
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0x10000;
                v69 = v160 & 0x80 | 4;
                v160 = v69;
                v161 = 0;
                v70 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                {
                  *v70 += 2;
                  v69 = v160;
                }
                v162 = v70;
                v163 = 0;
                v164 = 0;
                v165 = 0;
                v166 = v166 & 0xE0 | 5;
                v160 = v69 | 2;
                v167 = 0;
                WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v152, (WTF::StringImpl **)&v188);
                v73 = *((_QWORD *)v50 + 37);
                if (v73)
                {
                  *(_DWORD *)(v73 + 24) += 2;
                  WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded((uint64_t)&v152, (WebCore::ResourceRequest *)v73, 0, v72);
                  if (*(_DWORD *)(v73 + 24) == 2)
                  {
                    if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v73);
                  }
                  else
                  {
                    *(_DWORD *)(v73 + 24) -= 2;
                  }
                }
                else if (!BYTE1(v159))
                {
                  v129 = v166;
                  if ((v166 & 1) != 0
                    || (WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v152),
                        v129 = v166 | 1,
                        v166 |= 1u,
                        v34 = v142,
                        BYTE1(v159) != 1))
                  {
                    BYTE1(v159) = 1;
                    v166 = v129 & 0xFD;
                    v34 = v142;
                  }
                }
                v74 = *((_QWORD *)a5 + 9);
                if (v74)
                {
                  v75 = *(_QWORD *)(v74 + 8);
                  if (v75)
                  {
                    if (*(_BYTE *)(v75 + 178))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FE8C94);
                    }
                    v74 = v75 - 288;
                    *(_DWORD *)(v75 - 264) += 2;
                    v149 = (WebCore::Node *)(v75 - 288);
                    goto LABEL_126;
                  }
                  v74 = 0;
                }
                v149 = 0;
LABEL_126:
                WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v74 + 192), v71);
                v88 = v87;
                if (v87)
                {
                  do
                    v89 = __ldaxr(v87);
                  while (__stlxr(v89 + 1, v87));
                }
                WTF::AtomStringImpl::add();
                v90 = v150[0];
                v147 = 0;
                v148 = v150[0];
                WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)v150, (uint64_t *)&v149, v88, (uint64_t)&v152, (_DWORD **)&v148, v143, &v147);
                if (v90)
                {
                  if (*(_DWORD *)v90 == 2)
                    WTF::StringImpl::destroy(v90, v91);
                  else
                    *(_DWORD *)v90 -= 2;
                }
                do
                {
                  v92 = __ldaxr(v88);
                  v93 = v92 - 1;
                }
                while (__stlxr(v93, v88));
                if (!v93)
                {
                  atomic_store(1u, v88);
                  v130 = (WTF::StringImpl *)*((_QWORD *)v88 + 6);
                  *((_QWORD *)v88 + 6) = 0;
                  if (v130)
                  {
                    if (*(_DWORD *)v130 == 2)
                      WTF::StringImpl::destroy(v130, v91);
                    else
                      *(_DWORD *)v130 -= 2;
                  }
                  v131 = (WTF::StringImpl *)*((_QWORD *)v88 + 5);
                  *((_QWORD *)v88 + 5) = 0;
                  if (v131)
                  {
                    if (*(_DWORD *)v131 == 2)
                      WTF::StringImpl::destroy(v131, v91);
                    else
                      *(_DWORD *)v131 -= 2;
                  }
                  v132 = v88[8];
                  if ((_DWORD)v132 != -1)
                    ((void (*)(WebCore::Node **, unsigned int *))off_1E33FF730[v132])(&v148, v88 + 2);
                  v88[8] = -1;
                  WTF::fastFree((WTF *)v88, v91);
                  v34 = v142;
                }
                if (v149)
                {
                  if (*((_DWORD *)v149 + 6) == 2)
                  {
                    if ((*((_WORD *)v149 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v149);
                  }
                  else
                  {
                    *((_DWORD *)v149 + 6) -= 2;
                  }
                }
                v151 = WebCore::Document::shouldOpenExternalURLsPolicyToPropagate(v145, v91);
                (*(void (**)(WebCore::Frame *, WebCore::Node **))(*(_QWORD *)v168 + 40))(v168, v150);
                WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v150, v94);
                WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v152, v95);
                goto LABEL_137;
              }
              v56 = (*(_DWORD *)v51)++;
              *((_BYTE *)v51 + 336) = 1;
              if (v56)
              {
                *(_DWORD *)v51 = v56;
                goto LABEL_81;
              }
              WebCore::Page::~Page(v51);
              v51 = (WebCore::Node *)WTF::fastFree(v57, v58);
              v53 = v168;
            }
            if (!v53)
              goto LABEL_99;
            goto LABEL_81;
          }
        }
      }
      v40 = 0;
      goto LABEL_78;
    }
  }
  *(_QWORD *)result = 0;
  *((_DWORD *)result + 4) = 0;
  do
  {
LABEL_167:
    v111 = __ldaxr(v17);
    v112 = v111 - 1;
  }
  while (__stlxr(v112, v17));
  if (!v112)
  {
    atomic_store(1u, v17);
    v121 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v121 = off_1E31FE290;
    *((_QWORD *)v121 + 1) = v17;
    v170[0] = v121;
    WTF::ensureOnMainThread();
    result = v170[0];
    v170[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unsigned int *WebCore::LocalDOMWindow::open@<X0>(unsigned int *this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, const WTF::String *a4@<X3>, const WTF::AtomString *a5@<X4>, const WTF::String *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v14;
  const char *v15;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v25;
  unsigned int v26;
  _DWORD *v27;
  WebCore::Quirks *v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int isMainThread;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WebCore::Frame *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  _DWORD *v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WebCore::Frame *v92;
  void (*v93)(WebCore::Frame *);
  WebCore::Frame *v94;
  WTF *v95;
  uint64_t v96;
  WebCore::Frame *v97;
  _DWORD *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  BOOL canNavigate;
  WTF::StringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t Ref;
  unsigned int *v115;
  unsigned int v116;
  uint64_t v117;
  WebCore::LocalDOMWindow *v118;
  int v119;
  _DWORD *v120;
  uint64_t v121;
  _DWORD *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  WTF::StringImpl *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  WTF *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  int *v145;
  char v146;
  char v147;
  _QWORD *v148;
  unsigned int *v149;
  unsigned int *v150;
  unsigned int v151;
  WebCore::Node *v152;
  WTF::StringImpl *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  WebCore::Frame *v157;
  WebCore::Frame *v158;
  WTF::StringImpl *v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF *v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  WebCore::Frame *v184;
  WebCore::Frame *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  WebCore::Frame *v192;
  WebCore::Frame *v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  WebCore::Frame *v198;
  char v199;
  char v200;
  char v201;
  char v202;
  _DWORD *v203;
  int v204[2];
  int v205[2];
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  WebCore::Document *v220;
  char v221;
  const char *v222;
  uint64_t v223;
  WTF::StringImpl *v224;
  char v225;
  char v226;
  char v227;
  char v228;
  char v229;
  char v230;
  char v231;
  uint64_t v232;
  _QWORD v233[2];
  WTF *v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WebCore::Node *v237[5];
  WebCore::Frame *v238;
  uint64_t v239;
  int v240;
  _QWORD v241[2];

  v8 = *((_QWORD *)this + 9);
  if (!v8)
    goto LABEL_7;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_7;
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FE952CLL);
  }
  v10 = *(_QWORD *)(v9 + 240);
  if (!v10
    || (v11 = *(_QWORD *)(v10 + 8)) == 0
    || (v12 = this, *(unsigned int **)(*(_QWORD *)(v11 + 296) + 696) != this)
    || (v14 = *((_QWORD *)a2 + 9)) == 0
    || (v15 = *(const char **)(v14 + 8)) == 0)
  {
LABEL_7:
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 16) = 0;
    return this;
  }
  if (v15[178])
  {
    __break(0xC471u);
    JUMPOUT(0x195FE954CLL);
  }
  v220 = (WebCore::Document *)(v15 - 288);
  v17 = v15 - 264;
  *((_DWORD *)v15 - 66) += 2;
  v18 = *((_QWORD *)a3 + 9);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      if (*(_BYTE *)(v19 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FE956CLL);
      }
      v20 = *(_QWORD *)(v19 + 240);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if (v21)
        {
          v223 = v21;
          v25 = (unsigned int *)(v21 + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 + 1, v25));
          v222 = v15 - 264;
          v27 = *(_DWORD **)a4;
          if (*(_QWORD *)a4)
            *v27 += 2;
          v241[0] = v27;
          v28 = (WebCore::Quirks *)*((_QWORD *)v15 + 50);
          if (!v28)
            v28 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v220);
          if (WebCore::Quirks::shouldOpenAsAboutBlank(v28, a4))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v30 = (WTF::StringImpl *)v241[0];
            v241[0] = v224;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, a2);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          v31 = *(_QWORD *)(v223 + 24);
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 8);
            if (v32)
            {
              v221 = 0;
              ++*(_DWORD *)v32;
              goto LABEL_33;
            }
          }
          else
          {
            v32 = 0;
          }
          v221 = 1;
LABEL_33:
          v33 = *(_QWORD *)(v223 + 296);
          if (v33)
            *(_DWORD *)(v33 + 24) += 2;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v223 + 128) + 8) + 144))
            v34 = 0;
          else
            v34 = *(_QWORD *)(*(_QWORD *)(v223 + 128) + 8);
          if (v34)
          {
            v35 = (unsigned int *)(v34 + 8);
            do
            {
              v36 = __ldaxr(v35);
              v29 = __stlxr(v36 + 1, v35);
            }
            while (v29);
            v37 = *(_QWORD *)(v34 + 296);
            if (v37)
            {
              *(_DWORD *)(v37 + 24) += 2;
              v38 = *(_QWORD *)(v37 + 528);
              if (v38)
              {
                v39 = *(_QWORD *)(v38 + 8);
                if (v39)
                {
                  v40 = *(_DWORD **)(*(_QWORD *)(v39 + 280) + 88);
                  if (!v40)
                  {
                    v41 = 0;
                    goto LABEL_92;
                  }
                  if (*(_QWORD *)(v39 + 296) == v37)
                  {
                    v41 = 0;
                    ++v40[6];
                    if (v32 && v33)
                    {
                      v213 = v37;
                      v216 = v34;
                      v207 = v33;
                      v211 = v15;
                      v42 = v32;
                      v43 = *(_DWORD **)(v32 + 936);
                      ++v43[2];
                      v44 = v40;
                      WebCore::Document::completeURL((WebCore::Document *)v33, v241, v33 + 848, 0, (WTF::URL *)&v238);
                      v237[0] = 0;
                      WTF::URL::invalidate((WTF::URL *)v237);
                      *(_QWORD *)v204 = v42;
                      v45 = v42;
                      v46 = v44;
                      WebCore::UserContentProvider::processContentRuleListsForLoad((uint64_t)v43, v45, &v238, 128, (uint64_t)v44, (WTF::URL *)v237, (uint64_t)&v224);
                      v48 = v237[0];
                      v237[0] = 0;
                      if (v48)
                      {
                        if (*(_DWORD *)v48 == 2)
                          WTF::StringImpl::destroy(v48, v47);
                        else
                          *(_DWORD *)v48 -= 2;
                      }
                      v49 = v238;
                      v238 = 0;
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2)
                          WTF::StringImpl::destroy(v49, v47);
                        else
                          *(_DWORD *)v49 -= 2;
                      }
                      if (v43[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
                      else
                        --v43[2];
                      if ((_BYTE)v224)
                      {
                        *(_QWORD *)a7 = 0;
                        *(_DWORD *)(a7 + 16) = 0;
                        WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)&v224, v47);
                        v32 = *(_QWORD *)v204;
                        if (v44[6] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 24))(v44);
                        else
                          --v44[6];
                        v33 = v207;
                        v15 = v211;
                        v37 = v213;
                        v34 = v216;
LABEL_200:
                        if (*(_DWORD *)(v37 + 24) == 2)
                        {
                          if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
                          {
                            v142 = v33;
                            v143 = v34;
                            WebCore::Node::removedLastRef((WebCore::Node *)v37, a2);
                            v34 = v143;
                            v33 = v142;
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v37 + 24) -= 2;
                        }
                        if (!v34)
                          goto LABEL_206;
LABEL_202:
                        v132 = (unsigned int *)(v34 + 8);
                        do
                        {
                          v133 = __ldaxr(v132);
                          v134 = v133 - 1;
                        }
                        while (__stlxr(v134, v132));
                        if (!v134)
                        {
                          v164 = v33;
                          atomic_store(1u, v132);
                          v165 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v165 = off_1E31FE290;
                          *((_QWORD *)v165 + 1) = v132;
                          v224 = v165;
                          WTF::ensureOnMainThread();
                          v166 = v224;
                          v224 = 0;
                          if (v166)
                            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v166 + 8))(v166);
                          v33 = v164;
                          if (!v164)
                            goto LABEL_209;
                        }
                        else
                        {
LABEL_206:
                          if (!v33)
                          {
LABEL_209:
                            if ((v221 & 1) == 0)
                            {
                              if (*(_DWORD *)v32 == 1)
                              {
                                WebCore::Page::~Page(v32);
                                WTF::fastFree(v137, v138);
                              }
                              else
                              {
                                --*(_DWORD *)v32;
                              }
                            }
                            this = (unsigned int *)v241[0];
                            v241[0] = 0;
                            if (this)
                            {
                              if (*this == 2)
                                this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
                              else
                                *this -= 2;
                            }
                            do
                            {
                              v135 = __ldaxr(v25);
                              v136 = v135 - 1;
                            }
                            while (__stlxr(v136, v25));
                            v17 = v222;
                            if (!v136)
                            {
                              atomic_store(1u, v25);
                              v163 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                              *(_QWORD *)v163 = off_1E31FE290;
                              *((_QWORD *)v163 + 1) = v25;
                              v224 = v163;
                              WTF::ensureOnMainThread();
                              this = (unsigned int *)v224;
                              v224 = 0;
                              if (this)
                                this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
                              v17 = v222;
                            }
                            goto LABEL_217;
                          }
                        }
                        if (*(_DWORD *)(v33 + 24) == 2)
                        {
                          if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v33, a2);
                        }
                        else
                        {
                          *(_DWORD *)(v33 + 24) -= 2;
                        }
                        goto LABEL_209;
                      }
                      WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)&v224, v47);
                      v50 = 0;
                      v32 = *(_QWORD *)v204;
                      v33 = v207;
                      v15 = v211;
                      v37 = v213;
                      v34 = v216;
                      v40 = v46;
                      v41 = 0;
                    }
                    else
                    {
                      v50 = 0;
                    }
LABEL_62:
                    v51 = *((_QWORD *)v12 + 9);
                    if (!v51)
                      goto LABEL_86;
                    v52 = *(_QWORD *)(v51 + 8);
                    if (!v52)
                      goto LABEL_86;
                    if (*(_BYTE *)(v52 + 178))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FE959CLL);
                    }
                    v53 = *(_QWORD *)(v52 + 240);
                    if (!v53 || (v54 = *(_QWORD *)(v53 + 8)) == 0)
                    {
LABEL_86:
                      *(_QWORD *)a7 = 0;
                      *(_DWORD *)(a7 + 16) = 0;
                      goto LABEL_196;
                    }
                    v55 = (unsigned int *)(v54 + 8);
                    do
                      v56 = __ldaxr(v55);
                    while (__stlxr(v56 + 1, v55));
                    v57 = *((_QWORD *)a3 + 9);
                    v203 = v40;
                    if (!v57)
                      goto LABEL_96;
                    v58 = *(_QWORD *)(v57 + 8);
                    if (!v58)
                      goto LABEL_96;
                    if (*(_BYTE *)(v58 + 178))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FE95C8);
                    }
                    v59 = *(_QWORD *)(v58 + 240);
                    if (!v59)
                      goto LABEL_96;
                    v60 = *(_QWORD *)(v59 + 8);
                    if (!v60)
                      goto LABEL_96;
                    v212 = v15;
                    *(_QWORD *)v205 = v32;
                    v61 = *(_QWORD *)(*(_QWORD *)(v60 + 280) + 88);
                    if (!v61)
                      goto LABEL_81;
                    v62 = *(_DWORD *)(v61 + 24);
                    *(_DWORD *)(v61 + 24) = v62 + 1;
                    v63 = *(unsigned __int8 *)(v61 + 3522);
                    v64 = 1;
                    if (v63 != 1)
                    {
                      if (v63 != 2)
                        goto LABEL_79;
                      LOBYTE(v64) = 0;
                    }
                    LOBYTE(v29) = v64;
                    v64 = 0;
LABEL_79:
                    if (v62)
                    {
                      *(_DWORD *)(v61 + 24) = v62;
                      if (v64)
                      {
LABEL_81:
                        v196 = v54;
                        v199 = v50;
                        v65 = v33;
                        v66 = v34;
                        v195 = v41;
                        v67 = v37;
                        isMainThread = WTF::isMainThread((WTF *)v61);
                        v54 = v196;
                        v50 = v199;
                        v37 = v67;
                        v41 = v195;
                        v34 = v66;
                        v33 = v65;
                        v40 = v203;
                        v32 = *(_QWORD *)v205;
                        v15 = v212;
                        if (isMainThread)
                        {
                          {
                            if (WebCore::currentToken(void)::token
                              && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
                              && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
                            {
LABEL_105:
                              v215 = v37;
                              v219 = v34;
                              v77 = *(_DWORD **)a5;
                              v210 = v33;
                              v202 = v50;
                              if (!*(_QWORD *)a5)
                              {
                                v198 = (WebCore::Frame *)v54;
                                v78 = 0;
                                v79 = 0;
                                v84 = 1;
LABEL_129:
                                if (!WebCore::isParentTargetFrameName(v78, v79 | (unint64_t)(v84 << 32)))
                                {
                                  v87 = *(_QWORD *)a6;
                                  if (*(_QWORD *)a6)
                                  {
                                    v88 = *(unsigned int *)(v87 + 16);
                                    v89 = *(_QWORD *)(v87 + 8);
                                    LODWORD(v87) = *(_DWORD *)(v87 + 4);
                                    v90 = (v88 >> 2) & 1;
                                  }
                                  else
                                  {
                                    v89 = 0;
                                    v90 = 1;
                                  }
                                  LOBYTE(v224) = 0;
                                  BYTE4(v224) = 0;
                                  v225 = 0;
                                  v226 = 0;
                                  v227 = 0;
                                  v228 = 0;
                                  v229 = 0;
                                  v230 = 0;
                                  v231 = 0;
                                  v234 = 0;
                                  v235 = 0;
                                  v233[0] = 0;
                                  v232 = 0;
                                  *(_QWORD *)((char *)v233 + 6) = 0;
                                  if ((_DWORD)v87)
                                  {
                                    v212 = (const char *)(v87 | (unint64_t)(v90 << 32));
                                    v91 = v41;
                                    v92 = (WebCore::Frame *)WTF::fastMalloc((WTF *)0x10);
                                    *(_QWORD *)v92 = off_1E3402F00;
                                    *((_QWORD *)v92 + 1) = &v224;
                                    v238 = v92;
                                    WebCore::processFeaturesString(v89, v212, 0, &v238);
                                    v93 = *(void (**)(WebCore::Frame *))(*(_QWORD *)v92 + 8);
                                    v94 = v92;
                                    v41 = v91;
                                    v93(v94);
                                  }
                                  v237[0] = 0;
                                  WebCore::LocalDOMWindow::createWindow((WTF::StringImpl *)&v238, v241, (_DWORD **)a5, (uint64_t)&v224, a2, v223, v198, v237);
                                  if (HIDWORD(v235))
                                  {
                                    v173 = v234;
                                    v174 = 8 * HIDWORD(v235);
                                    do
                                    {
                                      a5 = (const WTF::AtomString *)v41;
                                      v175 = *(WTF::StringImpl **)v173;
                                      *(_QWORD *)v173 = 0;
                                      if (v175)
                                      {
                                        if (*(_DWORD *)v175 == 2)
                                          WTF::StringImpl::destroy(v175, a2);
                                        else
                                          *(_DWORD *)v175 -= 2;
                                      }
                                      v173 = (WTF *)((char *)v173 + 8);
                                      v174 -= 8;
                                    }
                                    while (v174);
                                  }
                                  v95 = v234;
                                  v37 = v215;
                                  v34 = v219;
                                  v40 = v203;
                                  if (v234)
                                  {
                                    v234 = 0;
                                    LODWORD(v235) = 0;
                                    WTF::fastFree(v95, a2);
                                    v40 = v203;
                                    v37 = v215;
                                    v34 = v219;
                                  }
                                  if (v240)
                                  {
                                    if (v240 != 1)
                                    {
                                      std::__throw_bad_variant_access[abi:sn180100]();
                                      goto LABEL_319;
                                    }
                                    v96 = v239;
                                    v239 = 0;
                                    *(_BYTE *)a7 = (_BYTE)v238;
                                    *(_QWORD *)(a7 + 8) = v96;
                                    *(_DWORD *)(a7 + 16) = 1;
                                  }
                                  else
                                  {
                                    v97 = v238;
                                    v238 = 0;
                                    if (v97)
                                    {
                                      v98 = (_DWORD *)*((_QWORD *)v97 + 14);
                                      ++*v98;
                                      *(_QWORD *)a7 = v98;
                                      *(_DWORD *)(a7 + 16) = 0;
                                      v99 = (unsigned int *)((char *)v97 + 8);
                                      do
                                      {
                                        v100 = __ldaxr(v99);
                                        v101 = v100 - 1;
                                      }
                                      while (__stlxr(v101, v99));
                                      if (!v101)
                                      {
                                        v102 = v37;
                                        atomic_store(1u, v99);
                                        v103 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                                        *(_QWORD *)v103 = off_1E31FE290;
                                        *((_QWORD *)v103 + 1) = v99;
                                        v224 = v103;
                                        WTF::ensureOnMainThread();
                                        v104 = v224;
                                        v224 = 0;
                                        if (v104)
                                          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v104 + 8))(v104);
                                        v34 = v219;
                                        v37 = v102;
                                        v40 = v203;
                                      }
                                    }
                                    else
                                    {
                                      *(_QWORD *)a7 = 0;
                                      *(_DWORD *)(a7 + 16) = 0;
                                    }
                                  }
                                  if (v240 != -1)
                                  {
                                    v121 = v37;
                                    ((void (*)(WTF::StringImpl **, WebCore::Frame **))off_1E33FF720[v240])(&v224, &v238);
                                    v40 = v203;
                                    v37 = v121;
                                    v34 = v219;
                                  }
                                  v33 = v210;
                                  v50 = v202;
                                  do
                                  {
LABEL_194:
                                    v130 = __ldaxr(v55);
                                    v131 = v130 - 1;
                                  }
                                  while (__stlxr(v131, v55));
                                  if (!v131)
                                  {
                                    v167 = v50;
                                    v168 = v37;
                                    v169 = v34;
                                    v170 = v33;
                                    atomic_store(1u, v55);
                                    v171 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                                    *(_QWORD *)v171 = off_1E31FE290;
                                    *((_QWORD *)v171 + 1) = v55;
                                    v224 = v171;
                                    WTF::ensureOnMainThread();
                                    v172 = v224;
                                    v224 = 0;
                                    if (v172)
                                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v172 + 8))(v172);
                                    v33 = v170;
                                    v34 = v169;
                                    v37 = v168;
                                    v40 = v203;
                                    if ((v167 & 1) != 0)
                                    {
LABEL_199:
                                      if ((v41 & 1) != 0)
                                        goto LABEL_202;
                                      goto LABEL_200;
                                    }
LABEL_197:
                                    if (v40[6] == 1)
                                    {
                                      v139 = v33;
                                      v140 = v34;
                                      v141 = v37;
                                      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 24))(v40);
                                      v37 = v141;
                                      v34 = v140;
                                      v33 = v139;
                                    }
                                    else
                                    {
                                      --v40[6];
                                    }
                                    goto LABEL_199;
                                  }
LABEL_196:
                                  if ((v50 & 1) != 0)
                                    goto LABEL_199;
                                  goto LABEL_197;
                                }
                                v85 = *((_QWORD *)v198 + 7);
                                if (v85 && (a5 = *(const WTF::AtomString **)(v85 + 8)) != 0)
                                {
                                  v105 = (unsigned int *)((char *)a5 + 8);
                                  do
                                    v106 = __ldaxr(v105);
                                  while (__stlxr(v106 + 1, v105));
                                  do
                                    v107 = __ldaxr(v105);
                                  while (__stlxr(v107 + 1, v105));
                                  do
                                  {
                                    v108 = __ldaxr(v105);
                                    v109 = v108 - 1;
                                  }
                                  while (__stlxr(v109, v105));
                                  if (!v109)
                                  {
                                    atomic_store(1u, v105);
                                    v186 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                                    *(_QWORD *)v186 = off_1E31FE290;
                                    *((_QWORD *)v186 + 1) = v105;
                                    v224 = v186;
                                    WTF::ensureOnMainThread();
                                    v187 = v224;
                                    v224 = 0;
                                    if (v187)
                                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v187 + 8))(v187);
                                  }
                                }
                                else
                                {
                                  do
                                    v86 = __ldaxr(v55);
                                  while (__stlxr(v86 + 1, v55));
                                  a5 = v198;
                                }
LABEL_156:
                                v224 = 0;
                                WTF::URL::invalidate((WTF::URL *)&v224);
                                canNavigate = WebCore::Document::canNavigate(v220, a5, (const WTF::URL *)&v224);
                                v112 = v223;
                                v111 = v224;
                                v224 = 0;
                                v34 = v219;
                                v40 = v203;
                                v50 = v202;
                                if (v111)
                                {
                                  if (*(_DWORD *)v111 == 2)
                                  {
                                    WTF::StringImpl::destroy(v111, a2);
                                    v112 = v223;
                                    v50 = v202;
                                    v40 = v203;
                                    v34 = v219;
                                  }
                                  else
                                  {
                                    *(_DWORD *)v111 -= 2;
                                  }
                                }
                                v37 = v215;
                                if (!canNavigate)
                                {
                                  *(_QWORD *)a7 = 0;
                                  *(_DWORD *)(a7 + 16) = 0;
                                  v33 = v210;
LABEL_191:
                                  v127 = (unsigned int *)((char *)a5 + 8);
                                  do
                                  {
                                    v128 = __ldaxr(v127);
                                    v129 = v128 - 1;
                                  }
                                  while (__stlxr(v129, v127));
                                  if (!v129)
                                  {
                                    v176 = v50;
                                    v177 = v37;
                                    v178 = v33;
                                    atomic_store(1u, v127);
                                    v179 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                                    *(_QWORD *)v179 = off_1E31FE290;
                                    *((_QWORD *)v179 + 1) = v127;
                                    v224 = v179;
                                    WTF::ensureOnMainThread();
                                    v180 = v224;
                                    v224 = 0;
                                    if (v180)
                                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v180 + 8))(v180);
                                    v33 = v178;
                                    v34 = v219;
                                    v37 = v177;
                                    v40 = v203;
                                    v50 = v176;
                                  }
                                  goto LABEL_194;
                                }
                                v113 = *(_QWORD *)(v112 + 296);
                                LOBYTE(v195) = v41;
                                if (v113)
                                {
                                  *(_DWORD *)(v113 + 24) += 2;
                                  Ref = (uint64_t)WebCore::Document::completeURL((WebCore::Document *)v113, v241, v113 + 848, 0, (WTF::URL *)&v224);
                                  if (*(_DWORD *)(v113 + 24) == 2)
                                  {
                                    v33 = v210;
                                    v37 = v215;
                                    v34 = v219;
                                    v40 = v203;
                                    v50 = v202;
                                    if ((*(_WORD *)(v113 + 30) & 0x400) == 0)
                                    {
                                      Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v113, a2);
                                      v50 = v202;
                                      v40 = v203;
                                      v37 = v215;
                                      v34 = v219;
                                      v33 = v210;
                                    }
                                    goto LABEL_164;
                                  }
                                  *(_DWORD *)(v113 + 24) -= 2;
                                }
                                else
                                {
                                  Ref = (uint64_t)WebCore::Document::completeURL(0, v241, 848, 0, (WTF::URL *)&v224);
                                }
                                v33 = v210;
                                v37 = v215;
                                v34 = v219;
                                v40 = v203;
                                v50 = v202;
LABEL_164:
                                LODWORD(v212) = *((unsigned __int8 *)a5 + 144);
                                if (!*((_BYTE *)a5 + 144))
                                {
                                  v115 = (unsigned int *)((char *)a5 + 8);
                                  do
                                    v116 = __ldaxr(v115);
                                  while (__stlxr(v116 + 1, v115));
                                  v117 = v33;
                                  v118 = *(WebCore::LocalDOMWindow **)(*((_QWORD *)a5 + 37) + 696);
                                  if (v118)
                                  {
                                    ++*((_DWORD *)v118 + 6);
                                    Ref = WebCore::LocalDOMWindow::isInsecureScriptAccess(v118, a2, v224);
                                    v119 = Ref;
                                    if (*((_DWORD *)v118 + 6) == 1)
                                    {
                                      Ref = (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v118 + 72))(v118);
                                      v33 = v117;
                                      v37 = v215;
                                      v34 = v219;
                                      v40 = v203;
                                      v50 = v202;
                                      if (v119)
                                        goto LABEL_170;
                                    }
                                    else
                                    {
                                      --*((_DWORD *)v118 + 6);
                                      v33 = v117;
                                      v37 = v215;
                                      v34 = v219;
                                      v40 = v203;
                                      v50 = v202;
                                      if ((Ref & 1) != 0)
                                      {
LABEL_170:
                                        v120 = (_DWORD *)*((_QWORD *)a5 + 14);
                                        if (v120)
                                          ++*v120;
                                        *(_QWORD *)a7 = v120;
                                        *(_DWORD *)(a7 + 16) = 0;
                                        LOBYTE(v41) = v195;
                                        goto LABEL_185;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    Ref = WebCore::LocalDOMWindow::isInsecureScriptAccess(0, a2, v224);
                                    v33 = v117;
                                    v37 = v215;
                                    v34 = v219;
                                    v40 = v203;
                                    v50 = v202;
                                    if ((Ref & 1) != 0)
                                      goto LABEL_170;
                                  }
                                }
                                if (!v241[0] || !*(_DWORD *)(v241[0] + 4))
                                {
                                  v122 = (_DWORD *)*((_QWORD *)a5 + 14);
                                  LOBYTE(v41) = v195;
                                  if (!v122)
                                    goto LABEL_184;
                                  goto LABEL_183;
                                }
                                if (!WTF::isMainThread((WTF *)Ref))
                                {
                                  v146 = 0;
LABEL_311:
                                  LOBYTE(v41) = v195;
                                  goto LABEL_232;
                                }
                                v145 = &dword_1ECE90000;
                                {
                                  v146 = WebCore::currentToken(void)::token;
                                  LOBYTE(v41) = v195;
                                  if (WebCore::currentToken(void)::token)
                                  {
                                    if (*(_DWORD *)(WebCore::currentToken(void)::token + 68))
                                      v146 = 0;
                                    else
                                      v146 = *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1;
                                  }
LABEL_232:
                                  v147 = v146 ^ 1;
                                  v148 = (_QWORD *)*((_QWORD *)a5 + 19);
                                  ++*(_DWORD *)v148;
                                  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v15 - 96), v144);
                                  v150 = v149;
                                  if (v149)
                                  {
                                    do
                                      v151 = __ldaxr(v149);
                                    while (__stlxr(v151 + 1, v149));
                                  }
                                  WebCore::FrameLoader::nonSrcdocFrame(*(uint64_t **)(v223 + 280), (uint64_t *)v237);
                                  v152 = v237[0];
                                  v206 = v147;
                                  if (v237[0])
                                  {
                                    v153 = *(WTF::StringImpl **)(*((_QWORD *)v237[0] + 35) + 160);
                                    if (v153)
                                      *(_DWORD *)v153 += 2;
                                    v236 = v153;
                                    v237[0] = 0;
                                    v154 = (unsigned int *)((char *)v152 + 8);
                                    do
                                    {
                                      v155 = __ldaxr(v154);
                                      v156 = v155 - 1;
                                    }
                                    while (__stlxr(v156, v154));
                                    if (!v156)
                                    {
                                      atomic_store(1u, v154);
                                      v192 = (WebCore::Frame *)WTF::fastMalloc((WTF *)0x10);
                                      *(_QWORD *)v192 = off_1E31FE290;
                                      *((_QWORD *)v192 + 1) = v154;
                                      v238 = v192;
                                      WTF::ensureOnMainThread();
                                      v193 = v238;
                                      v238 = 0;
                                      if (v193)
                                        (*(void (**)(WebCore::Frame *))(*(_QWORD *)v193 + 8))(v193);
                                      LOBYTE(v41) = v195;
                                    }
                                  }
                                  else
                                  {
                                    v188 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                                    if (*MEMORY[0x1E0CBF738])
                                      *(_DWORD *)v188 += 2;
                                    v236 = v188;
                                  }
                                  v157 = (WebCore::Frame *)WTF::fastMalloc((WTF *)0x10);
                                  *(_QWORD *)v157 = off_1E33F7EC8;
                                  v238 = v157;
                                  WebCore::NavigationScheduler::scheduleLocationChange(v148, v220, v150, (WTF::URL *)&v224, &v236, v206, 0, 0, (uint64_t *)&v238);
                                  v158 = v238;
                                  v238 = 0;
                                  if (v158)
                                    (*(void (**)(WebCore::Frame *))(*(_QWORD *)v158 + 8))(v158);
                                  v159 = v236;
                                  v236 = 0;
                                  v33 = v210;
                                  v37 = v215;
                                  v34 = v219;
                                  v40 = v203;
                                  v50 = v202;
                                  if (v159)
                                  {
                                    if (*(_DWORD *)v159 == 2)
                                    {
                                      WTF::StringImpl::destroy(v159, a2);
                                      v50 = v202;
                                      v40 = v203;
                                      v37 = v215;
                                      v34 = v219;
                                      v33 = v210;
                                    }
                                    else
                                    {
                                      *(_DWORD *)v159 -= 2;
                                    }
                                  }
                                  do
                                  {
                                    v160 = __ldaxr(v150);
                                    v161 = v160 - 1;
                                  }
                                  while (__stlxr(v161, v150));
                                  if (!v161)
                                  {
                                    atomic_store(1u, v150);
                                    v189 = (WTF::StringImpl *)*((_QWORD *)v150 + 6);
                                    *((_QWORD *)v150 + 6) = 0;
                                    if (v189)
                                    {
                                      if (*(_DWORD *)v189 == 2)
                                        WTF::StringImpl::destroy(v189, a2);
                                      else
                                        *(_DWORD *)v189 -= 2;
                                    }
                                    v190 = (WTF::StringImpl *)*((_QWORD *)v150 + 5);
                                    *((_QWORD *)v150 + 5) = 0;
                                    if (v190)
                                    {
                                      if (*(_DWORD *)v190 == 2)
                                        WTF::StringImpl::destroy(v190, a2);
                                      else
                                        *(_DWORD *)v190 -= 2;
                                    }
                                    v191 = v150[8];
                                    if ((_DWORD)v191 != -1)
                                      ((void (*)(WebCore::Frame **, unsigned int *))off_1E33FF730[v191])(&v238, v150 + 2);
                                    v150[8] = -1;
                                    WTF::fastFree((WTF *)v150, a2);
                                    v33 = v210;
                                    v37 = v215;
                                    v34 = v219;
                                    v40 = v203;
                                    v50 = v202;
                                  }
                                  if (!*(_DWORD *)v148)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x195FEA260);
                                  }
                                  --*(_DWORD *)v148;
                                  v122 = (_DWORD *)*((_QWORD *)a5 + 14);
                                  if (!v122)
                                  {
LABEL_184:
                                    *(_QWORD *)a7 = v122;
                                    *(_DWORD *)(a7 + 16) = 0;
                                    if ((_DWORD)v212)
                                    {
LABEL_188:
                                      v126 = v224;
                                      v224 = 0;
                                      if (v126)
                                      {
                                        if (*(_DWORD *)v126 == 2)
                                        {
                                          v162 = v33;
                                          WTF::StringImpl::destroy(v126, a2);
                                          v50 = v202;
                                          v40 = v203;
                                          v37 = v215;
                                          v34 = v219;
                                          v33 = v162;
                                        }
                                        else
                                        {
                                          *(_DWORD *)v126 -= 2;
                                        }
                                      }
                                      goto LABEL_191;
                                    }
LABEL_185:
                                    v123 = (unsigned int *)((char *)a5 + 8);
                                    do
                                    {
                                      v124 = __ldaxr(v123);
                                      v125 = v124 - 1;
                                    }
                                    while (__stlxr(v125, v123));
                                    if (!v125)
                                    {
                                      v183 = v33;
                                      atomic_store(1u, v123);
                                      v184 = (WebCore::Frame *)WTF::fastMalloc((WTF *)0x10);
                                      *(_QWORD *)v184 = off_1E31FE290;
                                      *((_QWORD *)v184 + 1) = v123;
                                      v238 = v184;
                                      WTF::ensureOnMainThread();
                                      v185 = v238;
                                      v238 = 0;
                                      if (v185)
                                        (*(void (**)(WebCore::Frame *))(*(_QWORD *)v185 + 8))(v185);
                                      v33 = v183;
                                      v37 = v215;
                                      v34 = v219;
                                      v40 = v203;
                                      v50 = v202;
                                    }
                                    goto LABEL_188;
                                  }
LABEL_183:
                                  ++*v122;
                                  goto LABEL_184;
                                }
LABEL_319:
                                v146 = 0;
                                WebCore::currentToken(void)::token = 0;
                                *((_BYTE *)v145 + 1392) = 1;
                                goto LABEL_311;
                              }
                              v78 = (unsigned __int8 *)*((_QWORD *)v77 + 1);
                              v79 = v77[1];
                              v80 = v77[4];
                              if (v79 == 4)
                              {
                                if ((v80 & 4) != 0)
                                {
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v78) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v78[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v78[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                  {
                                    v81 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v78[3]);
                                    goto LABEL_112;
                                  }
                                }
                                else if ((*(unsigned __int16 *)v78 | (32
                                                                     * (*(unsigned __int16 *)v78 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                       && (*((unsigned __int16 *)v78 + 1) | (32
                                                                           * (*((unsigned __int16 *)v78 + 1)
                                                                            - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                       && (*((unsigned __int16 *)v78 + 2) | (32
                                                                           * (*((unsigned __int16 *)v78 + 2)
                                                                            - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                {
                                  v81 = *((unsigned __int16 *)v78 + 3) | (32
                                                                        * (*((unsigned __int16 *)v78 + 3)
                                                                         - 65 < 0x1A));
LABEL_112:
                                  if (v81 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                  {
                                    a5 = *(const WTF::AtomString **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 48) + 8)
                                                                               + 128)
                                                                   + 8);
                                    v82 = (unsigned int *)((char *)a5 + 8);
                                    do
                                      v83 = __ldaxr(v82);
                                    while (__stlxr(v83 + 1, v82));
                                    goto LABEL_156;
                                  }
                                }
                              }
                              v198 = (WebCore::Frame *)v54;
                              v84 = (v80 >> 2) & 1;
                              goto LABEL_129;
                            }
                          }
                          else
                          {
                            WebCore::currentToken(void)::token = 0;
                          }
                        }
                        if ((*(_QWORD *)(*(_QWORD *)(v60 + 136) + 680) & 0x100000000000) != 0)
                          goto LABEL_105;
LABEL_96:
                        if (*(_QWORD *)a5 && *(_DWORD *)(*(_QWORD *)a5 + 4))
                        {
                          v201 = v50;
                          v195 = v41;
                          v214 = v37;
                          v218 = v34;
                          v209 = v33;
                          v212 = v15;
                          v70 = v32;
                          v71 = v54;
                          v72 = *(WTF::StringImpl **)(v54 + 280);
                          ++*(_DWORD *)v72;
                          WebCore::FrameLoader::findFrameForNavigation(v72, a5, v220, &v238);
                          v73 = v238;
                          v238 = 0;
                          if (v73)
                          {
                            v74 = (unsigned int *)((char *)v73 + 8);
                            do
                            {
                              v75 = __ldaxr(v74);
                              v76 = v75 - 1;
                            }
                            while (__stlxr(v76, v74));
                            v33 = v209;
                            v37 = v214;
                            v34 = v218;
                            v50 = v201;
                            v54 = v71;
                            if (!v76)
                            {
                              atomic_store(1u, v74);
                              v181 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                              *(_QWORD *)v181 = off_1E31FE290;
                              *((_QWORD *)v181 + 1) = v74;
                              v224 = v181;
                              WTF::ensureOnMainThread();
                              v182 = v224;
                              v224 = 0;
                              if (v182)
                                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v182 + 8))(v182);
                              v33 = v209;
                              v37 = v214;
                              v34 = v218;
                              v50 = v201;
                              v54 = v71;
                            }
                            if (*(_DWORD *)v72)
                            {
                              --*(_DWORD *)v72;
                              v32 = v70;
                              v15 = v212;
                              v41 = v195;
                              goto LABEL_105;
                            }
LABEL_277:
                            __break(0xC471u);
                            JUMPOUT(0x195FEA020);
                          }
                          v33 = v209;
                          v37 = v214;
                          v34 = v218;
                          v40 = v203;
                          v50 = v201;
                          if (!*(_DWORD *)v72)
                            goto LABEL_277;
                          --*(_DWORD *)v72;
                          v15 = v212;
                          LOBYTE(v41) = v195;
                        }
                        *(_QWORD *)a7 = 0;
                        *(_DWORD *)(a7 + 16) = 0;
                        goto LABEL_194;
                      }
                    }
                    else
                    {
                      v208 = v33;
                      v217 = v34;
                      v69 = v37;
                      v200 = v50;
                      v197 = v54;
                      v194 = v29;
                      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
                      LOBYTE(v29) = v194;
                      v54 = v197;
                      v50 = v200;
                      v40 = v203;
                      v37 = v69;
                      v34 = v217;
                      v33 = v208;
                      if (v64)
                        goto LABEL_81;
                    }
                    v32 = *(_QWORD *)v205;
                    v15 = v212;
                    if ((v29 & 1) != 0)
                      goto LABEL_105;
                    goto LABEL_96;
                  }
                }
              }
              v41 = 0;
              v40 = 0;
LABEL_92:
              v50 = 1;
              goto LABEL_62;
            }
          }
          else
          {
            v37 = 0;
          }
          v40 = 0;
          v41 = 1;
          goto LABEL_92;
        }
      }
    }
  }
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 16) = 0;
LABEL_217:
  if (*(_DWORD *)v17 == 2)
  {
    if ((*((_WORD *)v15 - 129) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v220, a2);
  }
  else
  {
    *(_DWORD *)v17 -= 2;
  }
  return this;
}

void WebCore::LocalDOMWindow::showModalDialog(_QWORD *a1, WTF::StringImpl *a2, uint64_t *a3, WebCore::LocalDOMWindow *a4, uint64_t a5, WebCore::Node **a6)
{
  uint64_t v6;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WebCore::Widget *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  WebCore *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  WTF::StringImpl *v70;
  WTF *v71;
  int v72;
  WTF::StringImpl *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  _QWORD *v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  _QWORD *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  float v86[4];
  _QWORD v87[8];
  WTF *v88;
  int v89;
  unsigned int v90;
  WTF::StringImpl *v91[2];
  int v92;

  v6 = a1[9];
  if (v6)
  {
    v13 = *(_QWORD *)(v6 + 8);
    if (v13)
    {
      if (*(_BYTE *)(v13 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FEA70CLL);
      }
      v14 = (_DWORD *)(v13 - 264);
      *(_DWORD *)(v13 - 264) += 2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v91[0] = (WTF::StringImpl *)v87[0];
      WebCore::Document::addConsoleMessage((_QWORD *)(v13 - 288), 1, 1, v91, 0);
      v15 = v91[0];
      v91[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (*v14 == 2)
      {
        if ((*(_WORD *)(v13 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v13 - 288));
      }
      else
      {
        *v14 -= 2;
      }
    }
    v16 = a1[9];
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x195FEA72CLL);
        }
        v18 = *(_QWORD *)(v17 + 240);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            if (*(_QWORD **)(*(_QWORD *)(v19 + 296) + 696) == a1)
            {
              v20 = *((_QWORD *)a4 + 9);
              if (v20)
              {
                v21 = *(_QWORD *)(v20 + 8);
                if (v21)
                {
                  if (*(_BYTE *)(v21 + 178))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195FEA87CLL);
                  }
                  v22 = *(_QWORD *)(v21 + 240);
                  if (v22)
                  {
                    if (*(_QWORD *)(v22 + 8))
                    {
                      v23 = *(_QWORD *)(a5 + 72);
                      if (v23)
                      {
                        v24 = *(_QWORD *)(v23 + 8);
                        if (v24)
                        {
                          if (*(_BYTE *)(v24 + 178))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x195FEA8C0);
                          }
                          v25 = *(_QWORD *)(v24 + 240);
                          if (v25)
                          {
                            v26 = *(_QWORD *)(v25 + 8);
                            if (v26)
                            {
                              v27 = (unsigned int *)(v26 + 8);
                              do
                                v28 = __ldaxr(v27);
                              while (__stlxr(v28 + 1, v27));
                              v29 = a1[9];
                              if (!v29)
                                goto LABEL_39;
                              v30 = *(_QWORD *)(v29 + 8);
                              if (!v30)
                                goto LABEL_39;
                              if (*(_BYTE *)(v30 + 178))
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195FEA924);
                              }
                              v31 = *(_QWORD *)(v30 + 240);
                              if (v31)
                              {
                                v32 = *(unsigned int **)(v31 + 8);
                                if (v32)
                                {
                                  v33 = v32 + 2;
                                  do
                                    v34 = __ldaxr(v33);
                                  while (__stlxr(v34 + 1, v33));
                                  v35 = 0;
LABEL_41:
                                  v36 = *((_QWORD *)v32 + 3);
                                  if (!v36)
                                    goto LABEL_74;
                                  v37 = *(_QWORD *)(v36 + 8);
                                  if (!v37)
                                    goto LABEL_74;
                                  if (*(_DWORD *)(v37 + 868))
                                  {
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    v39 = (WTF::StringImpl *)v87[0];
                                    v91[0] = (WTF::StringImpl *)v87[0];
                                    if (v87[0])
                                    {
                                      if (*(_DWORD *)(v87[0] + 4)
                                        && (v40 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1)) != 0
                                        && (v41 = *(_QWORD *)(v40 + 24)) != 0
                                        && (v42 = *(_QWORD *)(v41 + 8)) != 0
                                        && (v43 = *(_QWORD *)(v42 + 792)) != 0)
                                      {
                                        ++*(_DWORD *)(v43 + 16);
                                        WebCore::PageConsoleClient::addMessage((uint64_t *)v43, 1, 2, (uint64_t)v91, 0, 0);
                                        v44 = *(_DWORD *)(v43 + 16);
                                        if (!v44)
                                        {
                                          __break(0xC471u);
                                          JUMPOUT(0x195FEA9B4);
                                        }
                                        *(_DWORD *)(v43 + 16) = v44 - 1;
                                        v39 = v91[0];
                                        v91[0] = 0;
                                        if (!v39)
                                          goto LABEL_74;
                                      }
                                      else
                                      {
                                        v91[0] = 0;
                                      }
                                      if (*(_DWORD *)v39 == 2)
                                        WTF::StringImpl::destroy(v39, v38);
                                      else
                                        *(_DWORD *)v39 -= 2;
                                    }
LABEL_74:
                                    if ((v35 & 1) == 0)
                                    {
                                      v55 = v32 + 2;
                                      do
                                      {
                                        v56 = __ldaxr(v55);
                                        v57 = v56 - 1;
                                      }
                                      while (__stlxr(v57, v55));
                                      if (!v57)
                                      {
                                        atomic_store(1u, v55);
                                        v77 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                                        *v77 = off_1E31FE290;
                                        v77[1] = v55;
                                        v87[0] = v77;
                                        WTF::ensureOnMainThread();
                                        v78 = v87[0];
                                        v87[0] = 0;
                                        if (v78)
                                          (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
                                      }
                                    }
                                    do
                                    {
                                      v58 = __ldaxr(v27);
                                      v59 = v58 - 1;
                                    }
                                    while (__stlxr(v59, v27));
                                    if (!v59)
                                    {
                                      atomic_store(1u, v27);
                                      v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                                      *v60 = off_1E31FE290;
                                      v60[1] = v27;
                                      v87[0] = v60;
                                      WTF::ensureOnMainThread();
                                      v61 = v87[0];
                                      v87[0] = 0;
                                      if (v61)
                                        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
                                    }
                                    return;
                                  }
                                  if (!WebCore::LocalDOMWindow::canShowModalDialog((WebCore::LocalDOMWindow *)v32, a2))goto LABEL_74;
                                  v47 = *(_QWORD *)(a5 + 72);
                                  if (!v47)
                                    goto LABEL_74;
                                  v48 = *(_QWORD *)(v47 + 8);
                                  if (!v48)
                                    goto LABEL_74;
                                  if (*(_BYTE *)(v48 + 178))
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x195FEA994);
                                  }
                                  v49 = *(_QWORD *)(v48 + 240);
                                  if (!v49)
                                    goto LABEL_74;
                                  v50 = *(_QWORD *)(v49 + 8);
                                  if (!v50)
                                    goto LABEL_74;
                                  v51 = *(_QWORD *)(*(_QWORD *)(v50 + 280) + 88);
                                  if (!v51)
                                    goto LABEL_66;
                                  v52 = *(_DWORD *)(v51 + 24);
                                  *(_DWORD *)(v51 + 24) = v52 + 1;
                                  v53 = *(unsigned __int8 *)(v51 + 3522);
                                  v54 = 1;
                                  if (v53 != 1)
                                  {
                                    if (v53 != 2)
                                      goto LABEL_64;
                                    LOBYTE(v54) = 0;
                                  }
                                  v46 = v54;
                                  v54 = 0;
LABEL_64:
                                  if (v52)
                                  {
                                    *(_DWORD *)(v51 + 24) = v52;
                                    if (v54)
                                    {
LABEL_66:
                                      if (WTF::isMainThread((WTF *)v51))
                                      {
                                        {
                                          if (WebCore::currentToken(void)::token
                                            && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
                                            && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
                                          {
                                            goto LABEL_87;
                                          }
                                        }
                                        else
                                        {
                                          WebCore::currentToken(void)::token = 0;
                                        }
                                      }
                                      if ((*(_QWORD *)(*(_QWORD *)(v50 + 136) + 680) & 0x100000000000) == 0)
                                        goto LABEL_74;
LABEL_87:
                                      v62 = *a3;
                                      if (*a3)
                                      {
                                        v85 = *(_QWORD *)(v62 + 8);
                                        v63 = *(unsigned int *)(v62 + 4);
                                        v64 = (unint64_t)((*(_DWORD *)(v62 + 16) >> 2) & 1) << 32;
                                      }
                                      else
                                      {
                                        v85 = 0;
                                        v63 = 0;
                                        v64 = 0x100000000;
                                      }
                                      v65 = (WebCore *)*((_QWORD *)v32 + 36);
                                      if (v65)
                                        ++*((_DWORD *)v65 + 2);
                                      WebCore::screenAvailableRect(v65, v45);
                                      v86[0] = v66;
                                      v86[1] = v67;
                                      v86[2] = v68;
                                      v86[3] = v69;
                                      WebCore::parseDialogFeatures(v85, v64 | v63, v86, (uint64_t)v87);
                                      WebCore::LocalDOMWindow::createWindow((WTF::StringImpl *)v91, a2, MEMORY[0x1E0CBF3B8], (uint64_t)v87, a4, v26, (WebCore::Frame *)v32, a6);
                                      if (v90)
                                      {
                                        v79 = v88;
                                        v80 = 8 * v90;
                                        do
                                        {
                                          v81 = *(WTF::StringImpl **)v79;
                                          *(_QWORD *)v79 = 0;
                                          if (v81)
                                          {
                                            if (*(_DWORD *)v81 == 2)
                                              WTF::StringImpl::destroy(v81, v70);
                                            else
                                              *(_DWORD *)v81 -= 2;
                                          }
                                          v79 = (WTF *)((char *)v79 + 8);
                                          v80 -= 8;
                                        }
                                        while (v80);
                                      }
                                      v71 = v88;
                                      if (v88)
                                      {
                                        v88 = 0;
                                        v89 = 0;
                                        WTF::fastFree(v71, v70);
                                        if (v65)
                                        {
LABEL_94:
                                          if (*((_DWORD *)v65 + 2) == 1)
                                            (*(void (**)(WebCore *))(*(_QWORD *)v65 + 8))(v65);
                                          else
                                            --*((_DWORD *)v65 + 2);
                                        }
                                      }
                                      else if (v65)
                                      {
                                        goto LABEL_94;
                                      }
                                      v72 = v92;
                                      if (!v92)
                                      {
                                        v73 = v91[0];
                                        v91[0] = 0;
                                        if (v73)
                                        {
                                          WebCore::Chrome::runModal(*(WebCore::Chrome **)(*(_QWORD *)(*((_QWORD *)v73 + 3) + 8)
                                                                                        + 48));
                                          v74 = (unsigned int *)((char *)v73 + 8);
                                          do
                                          {
                                            v75 = __ldaxr(v74);
                                            v76 = v75 - 1;
                                          }
                                          while (__stlxr(v76, v74));
                                          if (!v76)
                                          {
                                            atomic_store(1u, v74);
                                            v82 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                                            *v82 = off_1E31FE290;
                                            v82[1] = v74;
                                            v87[0] = v82;
                                            WTF::ensureOnMainThread();
                                            v83 = v87[0];
                                            v87[0] = 0;
                                            if (v83)
                                              (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
                                          }
                                        }
                                        v72 = v92;
                                      }
                                      if (v72 != -1)
                                        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33FF720[v72])(v87, v91);
                                      goto LABEL_74;
                                    }
                                  }
                                  else
                                  {
                                    v84 = v46;
                                    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
                                    v46 = v84;
                                    if (v54)
                                      goto LABEL_66;
                                  }
                                  if ((v46 & 1) == 0)
                                    goto LABEL_74;
                                  goto LABEL_87;
                                }
                              }
                              else
                              {
LABEL_39:
                                v32 = 0;
                              }
                              v35 = 1;
                              goto LABEL_41;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::LocalDOMWindow::cookieStore(WebCore::LocalDOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::CookieStore *v6;
  void *v7;
  WebCore::CookieStore *v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;

  result = *((_QWORD *)this + 41);
  if (!result)
  {
    v3 = *((_QWORD *)this + 9);
    if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    {
      if (*(_BYTE *)(v4 + 178))
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v5 = v4 - 288;
      *(_DWORD *)(v4 - 264) += 2;
    }
    else
    {
      v5 = 0;
    }
    if (v5)
      v6 = (WebCore::CookieStore *)(v5 + 192);
    else
      v6 = 0;
    WebCore::CookieStore::create(v6, &v11);
    v8 = (WebCore::CookieStore *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = v11;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 1)
      {
        WebCore::CookieStore::~CookieStore(v8, v7);
        bmalloc::api::isoDeallocate(v9, v10);
        if (v5)
        {
LABEL_14:
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v5);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
        }
        return *((_QWORD *)this + 41);
      }
      --*((_DWORD *)v8 + 6);
    }
    if (v5)
      goto LABEL_14;
    return *((_QWORD *)this + 41);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindowProperty::frame(WebCore::LocalDOMWindowProperty *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 72);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_BYTE *)(v3 + 178))
  {
    v4 = *(_QWORD *)(v3 + 240);
    if (v4)
      return *(_QWORD *)(v4 + 8);
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalFrame::LocalFrame(uint64_t a1, WebCore::Page *a2, uint64_t *a3, uint64_t a4, uint64_t a5, WebCore::HTMLFrameOwnerElement *a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v22;
  float v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  WebCore::EventHandler *v27;
  WebCore::EventHandler *v28;
  uint64_t v29;
  WebCore::Document *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v47;
  float v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  char **v60;
  char *v61;

  v12 = (_OWORD *)(a1 + 324);
  v13 = WebCore::Frame::Frame(a1, a2, a4, a5, 0, a6, a7, a8);
  *(_OWORD *)(v13 + 248) = 0u;
  *(_QWORD *)v13 = off_1E33FEDC0;
  *(_OWORD *)(v13 + 264) = 0u;
  v14 = *a3;
  *a3 = 0;
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(&v61, v14, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = WTF::fastMalloc((WTF *)0x198);
  *(_QWORD *)(a1 + 280) = WebCore::FrameLoader::FrameLoader(v15, a1, (uint64_t *)&v61);
  v16 = (uint64_t)v61;
  v61 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v17 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v17 = 0;
  *(_DWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_WORD *)(v17 + 32) = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_QWORD *)(a1 + 304) = v17;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  __asm { FMOV            V0.4S, #-1.0 }
  *v12 = _Q0;
  v12[1] = _Q0;
  v12[2] = _Q0;
  *(_WORD *)(a1 + 372) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 396) &= 0xF0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 412) &= 0xF0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 428) &= 0xF0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 444) &= 0xF0u;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 460) &= 0xF0u;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 476) &= 0xF0u;
  *(_WORD *)(a1 + 480) = 1;
  *(_BYTE *)(a1 + 482) = *(_BYTE *)(a1 + 482) & 0xFC | 1;
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 500) &= 0xF0u;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 516) &= 0xF0u;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 532) &= 0xF0u;
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 548) &= 0xF0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 564) &= 0xF0u;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 580) &= 0xF0u;
  *(_WORD *)(a1 + 584) = 1;
  *(_BYTE *)(a1 + 586) = *(_BYTE *)(a1 + 586) & 0xFC | 1;
  v22 = *(_QWORD *)(a1 + 56);
  if (v22 && (v47 = *(_QWORD *)(v22 + 8)) != 0)
  {
    v23 = 1.0;
    v48 = 1.0;
    if (!*(_BYTE *)(v47 + 144))
      v48 = *(float *)(v47 + 592);
    *(float *)(a1 + 592) = v48;
    if (!*(_BYTE *)(v47 + 144))
      v23 = *(float *)(v47 + 596);
  }
  else
  {
    *(_DWORD *)(a1 + 592) = 1065353216;
    v23 = 1.0;
  }
  *(float *)(a1 + 596) = v23;
  *(_DWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 604) = 0;
  *(_QWORD *)(a1 + 620) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  v24 = a1;
  *(_WORD *)(a1 + 616) = 0;
  if (v22)
  {
    v49 = *(_QWORD *)(v22 + 8);
    v24 = a1;
    if (v49)
    {
      v24 = a1;
      if (!*(_BYTE *)(v49 + 144))
        v24 = *(_QWORD *)(*(_QWORD *)(v49 + 632) + 8);
    }
  }
  if (!*(_QWORD *)(v24 + 16))
  {
    v51 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v51 = 1;
    *(_QWORD *)(v51 + 8) = v24;
    v52 = *(unsigned int **)(v24 + 16);
    *(_QWORD *)(v24 + 16) = v51;
    if (v52)
    {
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, v50);
      }
    }
  }
  v25 = *(unsigned int **)(v24 + 16);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  *(_QWORD *)(a1 + 632) = v25;
  v27 = (WebCore::EventHandler *)WTF::fastMalloc((WTF *)0x330);
  v28 = WebCore::EventHandler::EventHandler(v27, (WebCore::LocalFrame *)a1);
  *(_QWORD *)(a1 + 640) = v28;
  *(_QWORD *)(a1 + 648) = 0;
  WebCore::ProcessWarming::initializeNames(v28);
  v31 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v31 != -1)
  {
    v61 = &v59;
    v60 = &v61;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
  if (v32)
    _ZF = *(_BYTE *)(v32 + 144) == 0;
  else
    _ZF = 0;
  if (_ZF)
  {
    v34 = (unsigned int *)(v32 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    if (a7)
    {
      v36 = *(_DWORD *)(v32 + 612);
      *(_DWORD *)(v32 + 612) = v36 + 1;
      if (!v36)
      {
        do
          v37 = __ldaxr(v34);
        while (__stlxr(v37 + 1, v34));
      }
    }
    do
    {
      v38 = __ldaxr(v34);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v34));
    if (!v39)
    {
      atomic_store(1u, v34);
      v55 = (char *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v55 = off_1E31FE290;
      *((_QWORD *)v55 + 1) = v34;
      v61 = v55;
      WTF::ensureOnMainThread();
      v56 = (uint64_t)v61;
      v61 = 0;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    }
  }
  v40 = *(_QWORD *)(a1 + 56);
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 8);
    if (v41)
    {
      if (!*(_BYTE *)(v41 + 144))
      {
        v42 = (unsigned int *)(v41 + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
        if (*(int *)(v41 + 600) >= 1)
          WebCore::LocalFrame::suspendActiveDOMObjectsAndAnimations((unsigned int *)a1, v29, v30);
        do
        {
          v44 = __ldaxr(v42);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v42));
        if (!v45)
        {
          atomic_store(1u, v42);
          v57 = (char *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v57 = off_1E31FE290;
          *((_QWORD *)v57 + 1) = v42;
          v61 = v57;
          WTF::ensureOnMainThread();
          v58 = (uint64_t)v61;
          v61 = 0;
          if (v58)
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        }
      }
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 632) + 8) == a1)
    WebCore::Page::addRootFrame(a2, (WebCore::LocalFrame *)a1);
  return a1;
}

unsigned int *WebCore::LocalFrame::suspendActiveDOMObjectsAndAnimations(unsigned int *this, uint64_t a2, WebCore::Document *a3)
{
  int v3;
  unsigned int *v4;
  WTF *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v3 = this[150];
  this[150] = v3 + 1;
  if (v3 <= 0)
  {
    v4 = this;
    v5 = (WTF *)*((_QWORD *)this + 36);
    if (v5)
      ++*((_DWORD *)v5 + 2);
    v6 = *((_QWORD *)this + 37);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      this = (unsigned int *)WebCore::LocalFrame::clearTimers(v5, (WebCore::DocumentTimelinesController **)v6, a3);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    else
    {
      this = (unsigned int *)WebCore::LocalFrame::clearTimers(v5, 0, a3);
    }
    if (v5)
    {
      if (*((_DWORD *)v5 + 2) == 1)
        this = (unsigned int *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v5 + 8))(v5);
      else
        --*((_DWORD *)v5 + 2);
    }
    v8 = *((_QWORD *)v4 + 37);
    if (v8)
    {
      *(_DWORD *)(v8 + 24) += 2;
      this = (unsigned int *)WebCore::Document::suspendScheduledTasks(v8, 3);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalFrame::createMainFrame@<X0>(WebCore::Page *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;

  v12 = WTF::fastMalloc((WTF *)0x290);
  result = WebCore::LocalFrame::LocalFrame(v12, a1, a2, a3, a4, 0, 0, a5);
  *a6 = result;
  return result;
}

uint64_t WebCore::LocalFrame::createSubframe@<X0>(WebCore::Page *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WebCore::HTMLFrameOwnerElement *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = WTF::fastMalloc((WTF *)0x290);
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 5) + 8) + 528);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  result = WebCore::LocalFrame::LocalFrame(v12, a1, a2, a3, a4, a5, v14, 0);
  *a6 = result;
  return result;
}

uint64_t WebCore::LocalFrame::createProvisionalSubframe@<X0>(WebCore::Page *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;

  v12 = WTF::fastMalloc((WTF *)0x290);
  result = WebCore::LocalFrame::LocalFrame(v12, a1, a2, a3, a4, 0, a5, 0);
  *a6 = result;
  return result;
}

void WebCore::LocalFrame::~LocalFrame(WebCore::LocalFrame *this)
{
  WebCore::FrameLoader *v2;
  WebCore::Node *v3;
  void *v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  WebCore::HTMLFrameOwnerElement **v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int ***v16;
  void *v17;
  unsigned int **v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  void (***v28)(_QWORD);
  uint64_t v29;
  BOOL v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WebCore::EventHandler *v37;
  _DWORD *v38;
  void *v39;
  unsigned int *v40;
  WebScriptObject *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  const void **v45;
  const void *v46;
  const void *v47;
  WebCore::ScriptController *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  WebCore::FrameLoader *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  unsigned int **v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WebCore::UserStyleSheet **v64;
  WebCore::UserStyleSheet *v65;
  WTF *v66;
  void *v67;
  WebCore::DOMWrapperWorld *v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  uint64_t i;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  WTF::StringImpl *v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  uint64_t v79;
  WTF *v80;
  unsigned int **v81;
  WebCore::Node *v82;
  WebCore::Node *v83;

  v83 = 0;
  WebCore::LocalFrame::setView((uint64_t)this, (uint64_t *)&v83);
  if (v83)
  {
    if (*((_DWORD *)v83 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v83 + 8))();
    else
      --*((_DWORD *)v83 + 2);
  }
  v2 = (WebCore::FrameLoader *)*((_QWORD *)this + 35);
  ++*(_DWORD *)v2;
  if (!*((_BYTE *)v2 + 216))
    WebCore::FrameLoader::closeURL(v2);
  v3 = (WebCore::Node *)*((_QWORD *)this + 37);
  if (v3)
    *((_DWORD *)v3 + 6) += 2;
  v82 = 0;
  v83 = v3;
  WebCore::FrameLoader::clear((uint64_t)v2, (uint64_t)&v83, 0, 1, 1, &v82);
  v5 = v82;
  v82 = 0;
  if (v5)
    (*(void (**)(WebCore::Node *))(*(_QWORD *)v5 + 8))(v5);
  v6 = v83;
  v83 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v4);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 38);
  ++*(_DWORD *)(v7 + 8);
  WebCore::ScriptController::updatePlatformScriptObjects(v7);
  v9 = *(_DWORD *)(v7 + 8);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195FEB870);
  }
  *(_DWORD *)(v7 + 8) = v9 - 1;
  v10 = *((_QWORD *)this + 15);
  if (v10)
  {
    v11 = *(WebCore::HTMLFrameOwnerElement ***)(v10 + 8);
    if (v11)
    {
      WebCore::HTMLFrameOwnerElement::clearContentFrame(v11, v8);
      v13 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr((unsigned int *)v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)v13));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)v13);
          v79 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v79)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v79));
          v80 = *(WTF **)(v13 + 16);
          if (v80)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            WTF::fastFree(v80, v12);
          }
          WTF::fastFree((WTF *)v13, v12);
        }
      }
    }
  }
  v16 = (unsigned int ***)((char *)this + 248);
  (*(void (**)(WebCore::LocalFrame *))(*(_QWORD *)this + 120))(this);
  while (1)
  {
    v18 = *v16;
    if (!*v16)
    {
      v19 = 0;
      v20 = 0;
LABEL_22:
      v21 = v19;
      v19 = &v18[v20];
      goto LABEL_23;
    }
    v20 = *((unsigned int *)v18 - 1);
    v19 = &v18[v20];
    if (!*((_DWORD *)v18 - 3))
      goto LABEL_22;
    if (!(_DWORD)v20)
    {
      v26 = 0;
      v21 = *v16;
      goto LABEL_42;
    }
    v25 = 8 * v20;
    v21 = *v16;
    while ((unint64_t)*v21 + 1 <= 1)
    {
      ++v21;
      v25 -= 8;
      if (!v25)
      {
        v21 = v19;
        break;
      }
    }
LABEL_23:
    if (!v18)
    {
      v22 = 0;
      goto LABEL_25;
    }
    v26 = *((unsigned int *)v18 - 1);
LABEL_42:
    v22 = &v18[v26];
LABEL_25:
    if (v22 != v21)
    {
      while (!*((_QWORD *)*v21 + 1))
      {
        v81 = v21 + 1;
        v21 = v19;
        if (v81 != v19)
        {
          v21 = v81;
          while ((unint64_t)*v21 + 1 <= 1)
          {
            if (++v21 == v19)
            {
              v21 = v19;
              break;
            }
          }
        }
        if (v21 == v22)
        {
          v21 = v22;
          break;
        }
      }
    }
    if (v18)
      v18 += *((unsigned int *)v18 - 1);
    if (v21 == v18)
      break;
    WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::take((uint64_t *)&v83, (uint64_t *)this + 31, v21);
    v27 = (unsigned int *)v83;
    v28 = (void (***)(_QWORD))*((_QWORD *)v83 + 1);
    v83 = 0;
    do
    {
      v23 = __ldaxr(v27);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v27));
    if (!v24)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v17);
    }
    if (!v28)
      break;
    (**v28)(v28);
  }
  v29 = *(_QWORD *)(*((_QWORD *)this + 16) + 8);
  if (v29)
    v30 = *(_BYTE *)(v29 + 144) == 0;
  else
    v30 = 0;
  if (v30)
  {
    v31 = (unsigned int *)(v29 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    if (*(WebCore::LocalFrame **)(*((_QWORD *)this + 16) + 8) != this)
    {
      v33 = *(_DWORD *)(v29 + 612) - 1;
      *(_DWORD *)(v29 + 612) = v33;
      if (!v33)
      {
        v59 = atomic_load(v31);
        if (v59 == 1)
          WebCore::LocalFrame::dropChildren(v29, v17);
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v31);
      }
    }
    WebCore::Frame::detachFromPage(this);
    do
    {
      v34 = __ldaxr(v31);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v31));
    if (!v35)
    {
      atomic_store(1u, v31);
      v77 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v77 = off_1E31FE290;
      *((_QWORD *)v77 + 1) = v31;
      v83 = v77;
      WTF::ensureOnMainThread();
      v78 = v83;
      v83 = 0;
      if (v78)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v78 + 8))(v78);
    }
  }
  else
  {
    WebCore::Frame::detachFromPage(this);
  }
  if (!*(_DWORD *)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195FEB890);
  }
  --*(_DWORD *)v2;
  v36 = *((_QWORD *)this + 81);
  if (v36)
  {
    v60 = *(unsigned int *)(v36 - 4);
    if ((_DWORD)v60)
    {
      v61 = (WTF::StringImpl **)*((_QWORD *)this + 81);
      do
      {
        v62 = *v61;
        if (*v61 != (WTF::StringImpl *)-1)
        {
          *v61 = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
              WTF::StringImpl::destroy(v62, v76);
            else
              *(_DWORD *)v62 -= 2;
          }
        }
        ++v61;
        --v60;
      }
      while (v60);
    }
    WTF::fastFree((WTF *)(v36 - 16), v76);
  }
  v37 = (WebCore::EventHandler *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v37)
  {
    WebCore::EventHandler::~EventHandler(v37, v76);
    if (*v38)
      bzero(v38, 0x330uLL);
    else
      WTF::fastFree((WTF *)v38, v39);
  }
  v40 = (unsigned int *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v40)
  {
    do
    {
      v57 = __ldaxr(v40);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v40));
    if (!v58)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, v76);
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::LocalFrame *)((char *)this + 488));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::LocalFrame *)((char *)this + 384));
  v42 = (WTF *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v42)
  {
    v43 = *((_QWORD *)v42 + 1);
    if (v43)
    {
      v44 = *(unsigned int *)(v43 - 4);
      if ((_DWORD)v44)
      {
        v45 = (const void **)(v43 + 8);
        do
        {
          if (*(v45 - 1) != (const void *)-1)
          {
            v46 = *v45;
            *v45 = 0;
            if (v46)
              CFRelease(v46);
          }
          v45 += 2;
          --v44;
        }
        while (v44);
      }
      WTF::fastFree((WTF *)(v43 - 16), v41);
    }
    v47 = *(const void **)v42;
    *(_QWORD *)v42 = 0;
    if (v47)
      CFRelease(v47);
    WTF::fastFree(v42, v41);
  }
  v48 = (WebCore::ScriptController *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v48)
  {
    WebCore::ScriptController::~ScriptController(v48, v41);
    if (*(_DWORD *)(v49 + 8))
    {
      *(_QWORD *)(v49 + 64) = 0;
      *(_OWORD *)(v49 + 32) = 0u;
      *(_OWORD *)(v49 + 48) = 0u;
      *(_OWORD *)v49 = 0u;
      *(_OWORD *)(v49 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v49, v41);
    }
  }
  v50 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v50)
  {
    if (*(_DWORD *)(v50 + 24) == 2)
    {
      if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v50, v41);
    }
    else
    {
      *(_DWORD *)(v50 + 24) -= 2;
    }
  }
  v51 = (_DWORD *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (WebCore::FrameLoader *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v52)
  {
    WebCore::FrameLoader::~FrameLoader(v52, v41);
    if (*(_DWORD *)v53)
    {
      *(_QWORD *)(v53 + 400) = 0;
      *(_OWORD *)(v53 + 368) = 0u;
      *(_OWORD *)(v53 + 384) = 0u;
      *(_OWORD *)(v53 + 336) = 0u;
      *(_OWORD *)(v53 + 352) = 0u;
      *(_OWORD *)(v53 + 304) = 0u;
      *(_OWORD *)(v53 + 320) = 0u;
      *(_OWORD *)(v53 + 272) = 0u;
      *(_OWORD *)(v53 + 288) = 0u;
      *(_OWORD *)(v53 + 240) = 0u;
      *(_OWORD *)(v53 + 256) = 0u;
      *(_OWORD *)(v53 + 208) = 0u;
      *(_OWORD *)(v53 + 224) = 0u;
      *(_OWORD *)(v53 + 176) = 0u;
      *(_OWORD *)(v53 + 192) = 0u;
      *(_OWORD *)(v53 + 144) = 0u;
      *(_OWORD *)(v53 + 160) = 0u;
      *(_OWORD *)(v53 + 112) = 0u;
      *(_OWORD *)(v53 + 128) = 0u;
      *(_OWORD *)(v53 + 80) = 0u;
      *(_OWORD *)(v53 + 96) = 0u;
      *(_OWORD *)(v53 + 48) = 0u;
      *(_OWORD *)(v53 + 64) = 0u;
      *(_OWORD *)(v53 + 16) = 0u;
      *(_OWORD *)(v53 + 32) = 0u;
      *(_OWORD *)v53 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v53, v41);
    }
  }
  v54 = *((unsigned int *)this + 69);
  if ((_DWORD)v54)
  {
    v63 = 16 * v54;
    v64 = (WebCore::UserStyleSheet **)(*((_QWORD *)this + 33) + 8);
    do
    {
      v65 = *v64;
      *v64 = 0;
      if (v65)
      {
        WebCore::UserStyleSheet::~UserStyleSheet(v65, (WTF::StringImpl *)v41);
        WTF::fastFree(v66, v67);
      }
      v68 = *(v64 - 1);
      *(v64 - 1) = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 1)
        {
          WebCore::DOMWrapperWorld::~DOMWrapperWorld(v68, (WTF::StringImpl *)v41);
          WTF::fastFree(v69, v70);
        }
        else
        {
          --*(_DWORD *)v68;
        }
      }
      v64 += 2;
      v63 -= 16;
    }
    while (v63);
  }
  v55 = (WTF *)*((_QWORD *)this + 33);
  if (v55)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v55, v41);
  }
  v56 = *v16;
  if (v56)
  {
    v71 = *((unsigned int *)v56 - 1);
    if ((_DWORD)v71)
    {
      for (i = 0; i != v71; ++i)
      {
        v73 = v56[i];
        if (v73 != (unsigned int *)-1)
        {
          v56[i] = 0;
          if (v73)
          {
            do
            {
              v74 = __ldaxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
            {
              atomic_store(1u, v73);
              WTF::fastFree((WTF *)v73, v41);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v56 - 2), v41);
  }
  WebCore::Frame::~Frame((WebCore::WindowProxy **)this, v41);
}

{
  WTF *v1;
  void *v2;

  WebCore::LocalFrame::~LocalFrame(this);
  WTF::fastFree(v1, v2);
}

unsigned int *WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FrameDestructionObserver>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int *result;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int **v27;
  unsigned int v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF *v35;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v21 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_20:
      v22 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_21:
      v23 = v22;
LABEL_22:
      *(_DWORD *)(a1 + 12) = 2 * v23;
      goto LABEL_2;
    }
    v24 = *(unsigned int *)(v21 - 4);
    if (!(_DWORD)v24)
      goto LABEL_36;
    v25 = 0;
    v26 = v24 - 1;
    do
    {
      v27 = (unsigned int **)(v21 + 8 * v26);
      if ((unint64_t)*v27 + 1 >= 2 && !*((_QWORD *)*v27 + 1))
      {
        v34 = v25;
        v33 = v26;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v27, a2);
        v26 = v33;
        v25 = v34 + 1;
      }
    }
    while ((unint64_t)v26--);
    v21 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v21 - 16) += v25;
      v31 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      *(_DWORD *)(v31 - 12) = v32 - v25;
      v21 = *(_QWORD *)a1;
    }
    if (!v21)
      goto LABEL_20;
    v29 = *(_DWORD *)(v21 - 4);
    if (v29 < 9 || 6 * *(_DWORD *)(v21 - 12) >= v29)
    {
LABEL_36:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v21 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v21)
      {
        v22 = 0;
        goto LABEL_21;
      }
    }
    v22 = *(_DWORD *)(v21 - 12);
    v23 = 0x7FFFFFFF;
    if (v22 >= 0x7FFFFFFF)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_2:
  v8 = a2[1];
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v10 = (unsigned int *)a2[1];
    a2[1] = v8;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
      v8 = a2[1];
    }
  }
  do
    v13 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v13 + 1, (unsigned int *)v8));
  do
    v14 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v14 + 1, (unsigned int *)v8));
  v35 = (WTF *)v8;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v35, a3);
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    do
    {
      v19 = __ldaxr(result);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, result));
    if (!v20)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
    }
  }
  if (v8)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v8);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v8));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v15);
    }
  }
  return result;
}

void WebCore::LocalFrame::checkedEditor(WebCore::LocalFrame *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::Document *v2;
  _DWORD *v3;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;

  v2 = (WebCore::Document *)*((_QWORD *)this + 37);
  v3 = (_DWORD *)*((_QWORD *)v2 + 382);
  if (!v3)
  {
    v9 = a2;
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v2);
    v6 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    *((_QWORD *)v2 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v3 = (_DWORD *)*((_QWORD *)v2 + 382);
    a2 = v9;
  }
  *a2 = v3;
  ++*v3;
}

uint64_t WebCore::LocalFrame::frameDetached(WebCore::LocalFrame *this)
{
  WebCore::FrameLoader *v1;
  uint64_t result;

  v1 = (WebCore::FrameLoader *)*((_QWORD *)this + 35);
  ++*(_DWORD *)v1;
  result = WebCore::FrameLoader::frameDetached(v1);
  if (*(_DWORD *)v1)
  {
    --*(_DWORD *)v1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

void WebCore::LocalFrame::changeLocation(uint64_t a1, uint64_t a2)
{
  WebCore::FrameLoader *v2;
  WTF::StringImpl *v3;
  _BYTE v4[312];
  char v5;

  v2 = *(WebCore::FrameLoader **)(a1 + 280);
  ++*(_DWORD *)v2;
  v4[0] = 0;
  v5 = 0;
  WebCore::FrameLoader::changeLocation(v2, a2, 0, (const WebCore::Document *)v4);
  if (v5)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v4, v3);
  if (*(_DWORD *)v2)
    --*(_DWORD *)v2;
  else
    __break(0xC471u);
}

uint64_t WebCore::LocalFrame::didFinishLoadInAnotherProcess(WebCore::LocalFrame *this)
{
  WTF *v1;
  uint64_t result;

  v1 = (WTF *)*((_QWORD *)this + 35);
  ++*(_DWORD *)v1;
  result = (uint64_t)WebCore::FrameLoader::provisionalLoadFailedInAnotherProcess(v1);
  if (*(_DWORD *)v1)
  {
    --*(_DWORD *)v1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::LocalFrame::orientationChanged(WebCore::LocalFrame *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  WTF *v7;
  void *v8;
  _DWORD *v9;

  v2 = *((_QWORD *)this + 3);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    ++*(_DWORD *)v3;
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 768))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16));
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Page::~Page(v3);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E33FF930;
  v5[2] = v4;
  v9 = v5;
  WebCore::Page::forEachDocumentFromMainFrame((uint64_t)this, &v9);
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::LocalFrame::searchForLabelsAboveCell@<X0>(const JSC::Yarr::RegularExpression *a1@<X1>, WebCore::HTMLTableCellElement *a2@<X2>, unint64_t *a3@<X3>, unsigned int **a4@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v20;
  BOOL v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  int v25;

  result = WebCore::HTMLTableCellElement::cellAbove(a2);
  if (!result)
    goto LABEL_75;
  v10 = result;
  *(_DWORD *)(result + 24) += 2;
  v11 = *(_QWORD *)(result + 80);
  if (!v11)
  {
LABEL_71:
    v25 = 1;
    goto LABEL_72;
  }
  v12 = *(_WORD *)(v11 + 28);
  if ((v12 & 2) != 0)
  {
    v13 = *(_QWORD *)(result + 80);
  }
  else
  {
    do
    {
      if ((v12 & 4) == 0 || (v13 = *(_QWORD *)(v11 + 80)) == 0)
      {
        if (v11 == result)
          goto LABEL_71;
        while (1)
        {
          v13 = *(_QWORD *)(v11 + 56);
          if (v13)
            break;
          v11 = *(_QWORD *)(v11 + 32);
          if (v11)
            v14 = v11 == result;
          else
            v14 = 1;
          if (v14)
            goto LABEL_71;
        }
      }
      v12 = *(_WORD *)(v13 + 28);
      v11 = v13;
    }
    while ((v12 & 2) == 0);
  }
  v15 = 0;
  *(_DWORD *)(v13 + 24) += 2;
  while (1)
  {
    v16 = v13;
    if ((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_18;
    if ((*(_BYTE *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FEC1CCLL);
    }
    v22 = *(_QWORD *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v22)
      v22 = *(_QWORD *)(v22 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 104) + 239) & 4) != 0 || (*(_BYTE *)(v22 + 120) & 0x30) != 0)
      goto LABEL_18;
    v23 = *(unsigned int **)(v13 + 80);
    if (v23)
      *v23 += 2;
    result = JSC::Yarr::RegularExpression::searchRev();
    v24 = result;
    if ((result & 0x80000000) != 0)
    {
      if (!v23)
        goto LABEL_18;
      v15 += v23[1];
      goto LABEL_62;
    }
    if (a3)
      *a3 = v15;
    result = JSC::Yarr::RegularExpression::matchedLength(a1);
    if (!v23)
      break;
    if (v24 || v23[1] > result)
    {
      result = WTF::StringImpl::substring((WTF::StringImpl *)v23);
    }
    else
    {
      *v23 += 2;
      *a4 = v23;
    }
LABEL_62:
    if (*v23 == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)v23, v9);
      if ((v24 & 0x80000000) == 0)
        goto LABEL_83;
    }
    else
    {
      *v23 -= 2;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_83;
    }
LABEL_18:
    if (v16 != v10)
    {
      v17 = *(_QWORD *)(v16 + 56);
      if (v17)
      {
LABEL_26:
        v20 = *(_WORD *)(v17 + 28);
        if ((v20 & 2) != 0)
        {
          v13 = v17;
        }
        else
        {
          do
          {
            if ((v20 & 4) == 0 || (v13 = *(_QWORD *)(v17 + 80)) == 0)
            {
              if (v17 == v10)
                goto LABEL_39;
              while (1)
              {
                v13 = *(_QWORD *)(v17 + 56);
                if (v13)
                  break;
                v17 = *(_QWORD *)(v17 + 32);
                if (v17)
                  v21 = v17 == v10;
                else
                  v21 = 1;
                if (v21)
                  goto LABEL_39;
              }
            }
            v20 = *(_WORD *)(v13 + 28);
            v17 = v13;
          }
          while ((v20 & 2) == 0);
        }
        *(_DWORD *)(v13 + 24) += 2;
        goto LABEL_42;
      }
      v18 = v16;
      while (1)
      {
        v18 = *(_QWORD *)(v18 + 32);
        if (!v18 || v18 == v10)
          break;
        v17 = *(_QWORD *)(v18 + 56);
        if (v17)
          goto LABEL_26;
      }
    }
LABEL_39:
    v13 = 0;
LABEL_42:
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v16, v9);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
    if (!v13)
      goto LABEL_71;
  }
  *a4 = 0;
LABEL_83:
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v16, v9);
    v25 = 0;
  }
  else
  {
    v25 = 0;
    *(_DWORD *)(v16 + 24) -= 2;
  }
LABEL_72:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  if (v25)
  {
LABEL_75:
    if (a3)
      *a3 = -1;
    *a4 = 0;
  }
  return result;
}

void WebCore::LocalFrame::searchForLabelsBeforeElement(uint64_t **a1@<X1>, uint64_t a2@<X2>, unint64_t *a3@<X3>, _BYTE *a4@<X4>, unsigned int **a5@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _BYTE v38[8];
  WTF::StringImpl *v39;

  WebCore::createRegExpForLabels((uint64_t)v38, a1);
  if (a3)
    *a3 = -1;
  if (a4)
    *a4 = 0;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_WORD *)((v10 & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
    {
      do
      {
        v36 = *(_QWORD *)(v11 + 88);
        if (!v36)
          break;
        v11 = *(_QWORD *)(v11 + 88);
      }
      while ((*(_WORD *)(v36 + 28) & 4) != 0);
    }
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 32);
    if (!v11)
    {
      v14 = 0;
      v30 = 0;
      goto LABEL_91;
    }
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  *(_DWORD *)(v11 + 24) += 2;
  while (1)
  {
    v15 = *(_WORD *)(v11 + 28);
    if ((v15 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      break;
    if ((v15 & 8) != 0)
    {
      *(_DWORD *)(v11 + 24) += 2;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 840))(v11);
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
      if ((v16 & 1) != 0)
        break;
      v15 = *(_WORD *)(v11 + 28);
    }
    if ((v15 & 0x10) == 0)
      goto LABEL_29;
    v17 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24);
    if (v17 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) && v14 == 0)
    {
      *(_DWORD *)(v11 + 24) += 2;
      v14 = v11;
      goto LABEL_52;
    }
    if (v17 != *(_QWORD *)(WebCore::HTMLNames::trTag + 24) || v14 == 0)
    {
LABEL_29:
      if ((v15 & 2) == 0)
        goto LABEL_52;
      v20 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v20)
        goto LABEL_52;
      if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v20 = *(_QWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v20)
          v20 = *(_QWORD *)(v20 + 8);
      }
      if ((*(_BYTE *)(*(_QWORD *)(v20 + 104) + 239) & 4) != 0 || (*(_BYTE *)(v20 + 120) & 0x30) != 0)
        goto LABEL_52;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v11 + 112))(&v37, v11);
      v21 = v37;
      if (v37)
      {
        v22 = *((_DWORD *)v37 + 1);
        if (v22 + v12 >= 0x259)
        {
          v23 = (WTF::StringImpl *)(v22 - (500 - v12));
          if (v22 == 500 - v12)
          {
            *(_DWORD *)v37 += 2;
            v39 = 0;
            goto LABEL_34;
          }
          WTF::StringImpl::substring(v37);
          v34 = v39;
          v21 = v37;
          v39 = 0;
          v37 = v34;
          if (v21)
          {
LABEL_34:
            v24 = *(_DWORD *)v21 - 2;
            if (*(_DWORD *)v21 != 2)
              goto LABEL_35;
            WTF::StringImpl::destroy(v21, v23);
            v21 = v39;
            v39 = 0;
            if (!v21)
              goto LABEL_36;
            v24 = *(_DWORD *)v21 - 2;
            if (*(_DWORD *)v21 != 2)
            {
LABEL_35:
              *(_DWORD *)v21 = v24;
              goto LABEL_36;
            }
            WTF::StringImpl::destroy(v21, v33);
          }
        }
      }
LABEL_36:
      v25 = JSC::Yarr::RegularExpression::searchRev();
      if (v25 < 0)
      {
        v27 = v37;
        if (v37)
          v32 = *((_DWORD *)v37 + 1);
        else
          v32 = 0;
        v12 += v32;
      }
      else
      {
        if (a3)
          *a3 = v12;
        v26 = JSC::Yarr::RegularExpression::matchedLength((JSC::Yarr::RegularExpression *)v38);
        v27 = v37;
        if (!v37)
        {
          *a5 = 0;
          goto LABEL_93;
        }
        if (!v25 && *((_DWORD *)v37 + 1) <= v26)
        {
          *(_DWORD *)v37 += 2;
          *a5 = (unsigned int *)v27;
          v37 = 0;
LABEL_72:
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v9);
          else
            *(_DWORD *)v27 -= 2;
LABEL_74:
          if ((v25 & 0x80000000) == 0)
            goto LABEL_93;
          goto LABEL_52;
        }
        WTF::StringImpl::substring(v37);
        *a5 = (unsigned int *)v39;
        v27 = v37;
      }
      v37 = 0;
      if (v27)
        goto LABEL_72;
      goto LABEL_74;
    }
    WebCore::LocalFrame::searchForLabelsAboveCell((const JSC::Yarr::RegularExpression *)v38, (WebCore::HTMLTableCellElement *)v14, a3, a5);
    v28 = *a5;
    if (*a5)
    {
      v29 = v28[1];
      if (a4 && v29)
      {
        *a4 = 1;
        goto LABEL_93;
      }
      if (v29)
        goto LABEL_93;
      *a5 = 0;
      if (*v28 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v28, (WTF::StringImpl *)v9);
      else
        *v28 -= 2;
    }
    else
    {
      *a5 = 0;
    }
    v13 = 1;
LABEL_52:
    v30 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL;
    if (v30)
    {
      if ((*(_WORD *)((*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v31 = *(_QWORD *)(v30 + 88);
          if (!v31)
            break;
          v30 = *(_QWORD *)(v30 + 88);
        }
        while ((*(_WORD *)(v31 + 28) & 4) != 0);
      }
LABEL_54:
      *(_DWORD *)(v30 + 24) += 2;
      goto LABEL_55;
    }
    v30 = *(_QWORD *)(v11 + 32);
    if (v30)
      goto LABEL_54;
LABEL_55:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    if (v30)
    {
      v11 = v30;
      if (v12 < 0x1F4)
        continue;
    }
    goto LABEL_88;
  }
  v30 = v11;
LABEL_88:
  if (v14
    && (v13 & 1) == 0
    && (WebCore::LocalFrame::searchForLabelsAboveCell((const JSC::Yarr::RegularExpression *)v38, (WebCore::HTMLTableCellElement *)v14, a3, a5), (v35 = *a5) != 0))
  {
    if (!v35[1])
    {
      *a5 = 0;
      if (*v35 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v35, (WTF::StringImpl *)v9);
      else
        *v35 -= 2;
      goto LABEL_91;
    }
    if (a4)
      *a4 = 1;
  }
  else
  {
LABEL_91:
    *a5 = 0;
  }
  v11 = v30;
  if (v30)
  {
LABEL_93:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v9);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v38);
}

WTF::StringImpl *WebCore::createRegExpForLabels(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  int64x2_t v8;
  uint64_t v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  int64x2_t v15;
  uint64_t v16;
  BOOL v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  int v22;
  uint64_t v23;
  int64x2_t v24;
  uint64_t **v25;
  int64x2_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  char v34;

  if ((byte_1ECE8389C & 1) == 0)
  {
    JSC::Yarr::RegularExpression::RegularExpression();
    byte_1ECE8389C = 1;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  LOBYTE(v29) = 40;
  WTF::StringBuilder::append();
  v3 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v3)
    goto LABEL_26;
  v4 = *a2;
  v5 = **a2;
  if (v5 && *(_DWORD *)(v5 + 4))
  {
    v6 = JSC::Yarr::RegularExpression::match();
    v7 = JSC::Yarr::RegularExpression::match();
    v29 = "";
    v30 = 1;
    if (v6 < 0)
    {
      v27 = "";
      v28 = 1;
      if (v7 < 0)
        goto LABEL_12;
    }
    else
    {
      v27 = "\\b";
      v28 = 3;
      if (v7 < 0)
        goto LABEL_12;
    }
    v8 = vdupq_n_s64(3uLL);
    v8.i64[0] = (uint64_t)"\\b";
    goto LABEL_13;
  }
  v29 = "";
  v30 = 1;
  v27 = "";
  v28 = 1;
LABEL_12:
  v8 = vdupq_n_s64(1uLL);
  v8.i64[0] = (uint64_t)"";
LABEL_13:
  v26 = v8;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v31, (uint64_t *)&v29, (uint64_t *)&v27, v4, v26.i64);
  if ((_DWORD)v3 != 1)
  {
    v9 = 1;
    v10 = vdupq_n_s64(3uLL);
    v10.i64[0] = (uint64_t)"\\b";
    v24 = v10;
    v11 = 1;
    v25 = a2;
    while (1)
    {
      if (v11 >= *((unsigned int *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x195FECBB4);
      }
      v12 = &(*a2)[v9];
      if (!*v12 || !*(_DWORD *)(*v12 + 4))
        break;
      v13 = JSC::Yarr::RegularExpression::match();
      v14 = JSC::Yarr::RegularExpression::match();
      v29 = "|";
      v30 = 2;
      if (v13 < 0)
      {
        v27 = "";
        v28 = 1;
        a2 = v25;
        if (v14 < 0)
          goto LABEL_24;
        v15 = vdupq_n_s64(3uLL);
        v15.i64[0] = (uint64_t)"\\b";
      }
      else
      {
        v27 = "\\b";
        v28 = 3;
        v15 = v24;
        a2 = v25;
        if (v14 < 0)
          goto LABEL_24;
      }
LABEL_25:
      v26 = v15;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v31, (uint64_t *)&v29, (uint64_t *)&v27, v12, v26.i64);
      ++v11;
      if (v3 == ++v9)
        goto LABEL_26;
    }
    v29 = "|";
    v30 = 2;
    v27 = "";
    v28 = 1;
LABEL_24:
    v15 = vdupq_n_s64(1uLL);
    v15.i64[0] = (uint64_t)"";
    goto LABEL_25;
  }
LABEL_26:
  LOBYTE(v29) = 41;
  if (v32 && ((v16 = v33, v33 < *((_DWORD *)v32 + 1)) ? (v17 = v31 == 0) : (v17 = 0), v17))
  {
    v22 = *((_DWORD *)v32 + 4);
    v23 = *((_QWORD *)v32 + 1);
    ++v33;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v16) = 41;
    else
      *(_WORD *)(v23 + 2 * v16) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v18 = v31;
  if (v31
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v31),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v31),
        (v18 = v31) != 0))
  {
    *(_DWORD *)v18 += 2;
    JSC::Yarr::RegularExpression::RegularExpression();
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  else
  {
    JSC::Yarr::RegularExpression::RegularExpression();
  }
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::LocalFrame::matchLabelsAgainstElement@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, WTF::StringImpl *a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v6 = *(_QWORD *)(a2 + 104);
  if (v6 && (v7 = *(_DWORD *)(v6 + 4), (v7 & 2) != 0))
  {
    if ((v7 & 1) != 0)
    {
      v18 = *(_QWORD **)(v6 + 40);
      LODWORD(v19) = *(_DWORD *)(v6 + 52);
    }
    else
    {
      v18 = (_QWORD *)(v6 + 32);
      LODWORD(v19) = v7 >> 5;
    }
    if ((_DWORD)v19)
    {
      v19 = v19;
      while (1)
      {
        v20 = *v18;
        if (*v18 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v18 += 2;
        if (!--v19)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      v18 = 0;
    }
    v8 = (WTF::StringImpl **)(v18 + 1);
  }
  else
  {
    v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  result = WebCore::matchLabelsAgainstString((WTF::StringImpl *)&v21, a1, *v8);
  v10 = v21;
  if (v21 && *((_DWORD *)v21 + 1))
  {
    *(_QWORD *)a3 = v21;
    return result;
  }
  v11 = *(_QWORD *)(a2 + 104);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 4);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(v11 + 40);
      LODWORD(v14) = *(_DWORD *)(v11 + 52);
      if ((_DWORD)v14)
      {
LABEL_8:
        v14 = v14;
        v15 = (WTF::StringImpl **)(v13 + 8);
        while (1)
        {
          v16 = (uint64_t)*(v15 - 1);
          if (v16 == WebCore::HTMLNames::idAttr
            || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
            && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
          {
            goto LABEL_19;
          }
          v15 += 2;
          if (!--v14)
          {
            v15 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      v13 = v11 + 32;
      LODWORD(v14) = v12 >> 5;
      if ((_DWORD)v14)
        goto LABEL_8;
    }
  }
  v15 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_19:
  result = WebCore::matchLabelsAgainstString(a3, a1, *v15);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v17);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::matchLabelsAgainstString(WTF::StringImpl *result, uint64_t **a2, WTF::StringImpl *a3)
{
  _QWORD *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14[8];
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = result;
  if (a3 && *((_DWORD *)a3 + 1))
  {
    *(_DWORD *)a3 += 2;
    v15 = a3;
    JSC::Yarr::RegularExpression::RegularExpression();
    JSC::Yarr::replace();
    JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)&v16);
    WTF::StringImpl::replace();
    v6 = v15;
    v15 = v16;
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
    WebCore::createRegExpForLabels((uint64_t)v14, a2);
    v7 = -1;
    v8 = -1;
    while (1)
    {
      v9 = JSC::Yarr::RegularExpression::match();
      if (v9 == -1)
        break;
      v10 = v9;
      v11 = JSC::Yarr::RegularExpression::matchedLength((JSC::Yarr::RegularExpression *)v14);
      if (v11 >= v8)
        v7 = v10;
      if (v11 > v8)
        v8 = v11;
    }
    if (v7 == -1 || (v12 = v15) == 0)
    {
      *v3 = 0;
    }
    else if (v7 || *((_DWORD *)v15 + 1) > v8)
    {
      WTF::StringImpl::substring(v15);
      *v3 = v16;
    }
    else
    {
      *(_DWORD *)v15 += 2;
      *v3 = v12;
    }
    JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v14);
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t WebCore::LocalFrame::setSelectionChangeCallbacksDisabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 376) = a2;
  return this;
}

uint64_t WebCore::LocalFrame::requestDOMPasteAccess(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  WebCore::Document *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  WebCore::Editor *v20;
  void *v21;
  void *v22;
  WebCore::Editor *v23;
  WebCore::Editor *v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  if (!(~*(_QWORD *)(*(_QWORD *)(a1 + 136) + 680) & 0x80000000000 | ~*(_QWORD *)(*(_QWORD *)(a1 + 136) + 672) & 0x40000000000000))
    return 1;
  v2 = a1;
  v3 = *(WebCore::Document **)(a1 + 296);
  if (!v3)
    return 0;
  v5 = *((_QWORD *)v3 + 382);
  if (!v5)
  {
    v20 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v20, v3);
    a1 = *((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v20;
    if (a1)
    {
      WebCore::Editor::~Editor((WebCore::Editor *)a1, v21);
      if (*(_DWORD *)a1)
      {
        *(_QWORD *)(a1 + 496) = 0;
        *(_OWORD *)(a1 + 464) = 0u;
        *(_OWORD *)(a1 + 480) = 0u;
        *(_OWORD *)(a1 + 432) = 0u;
        *(_OWORD *)(a1 + 448) = 0u;
        *(_OWORD *)(a1 + 400) = 0u;
        *(_OWORD *)(a1 + 416) = 0u;
        *(_OWORD *)(a1 + 368) = 0u;
        *(_OWORD *)(a1 + 384) = 0u;
        *(_OWORD *)(a1 + 336) = 0u;
        *(_OWORD *)(a1 + 352) = 0u;
        *(_OWORD *)(a1 + 304) = 0u;
        *(_OWORD *)(a1 + 320) = 0u;
        *(_OWORD *)(a1 + 272) = 0u;
        *(_OWORD *)(a1 + 288) = 0u;
        *(_OWORD *)(a1 + 240) = 0u;
        *(_OWORD *)(a1 + 256) = 0u;
        *(_OWORD *)(a1 + 208) = 0u;
        *(_OWORD *)(a1 + 224) = 0u;
        *(_OWORD *)(a1 + 176) = 0u;
        *(_OWORD *)(a1 + 192) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        *(_OWORD *)(a1 + 160) = 0u;
        *(_OWORD *)(a1 + 112) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 80) = 0u;
        *(_OWORD *)(a1 + 96) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)a1 = 0u;
      }
      else
      {
        a1 = WTF::fastFree((WTF *)a1, v22);
      }
    }
    v5 = *((_QWORD *)v3 + 382);
  }
  if (*(_BYTE *)(v5 + 476))
    return 1;
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 136) + 672) & 0x20000000000000) == 0
    || !WTF::isMainThread((WTF *)a1))
  {
    return 0;
  }
  {
    v6 = 0;
    WebCore::currentToken(void)::token = 0;
    return v6;
  }
  v9 = WebCore::currentToken(void)::token;
  if (!WebCore::currentToken(void)::token)
    return 0;
  ++*(_DWORD *)WebCore::currentToken(void)::token;
  if (*(_DWORD *)(v9 + 68) || *(_BYTE *)(v9 + 16) != 1 || !*(_BYTE *)(v9 + 64))
    goto LABEL_17;
  if (*(_BYTE *)(v9 + 65))
  {
    if (*(_BYTE *)(v9 + 65) != 2)
    {
LABEL_17:
      v6 = 0;
      goto LABEL_18;
    }
    v6 = 1;
  }
  else
  {
    v12 = *(WebCore::Document **)(v2 + 296);
    v13 = *((_QWORD *)v12 + 382);
    if (!v13)
    {
      v23 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v23, v12);
      v24 = (WebCore::Editor *)*((_QWORD *)v12 + 382);
      *((_QWORD *)v12 + 382) = v23;
      if (v24)
      {
        WebCore::Editor::~Editor(v24, v8);
        if (*(_DWORD *)v25)
        {
          *(_QWORD *)(v25 + 496) = 0;
          *(_OWORD *)(v25 + 464) = 0u;
          *(_OWORD *)(v25 + 480) = 0u;
          *(_OWORD *)(v25 + 432) = 0u;
          *(_OWORD *)(v25 + 448) = 0u;
          *(_OWORD *)(v25 + 400) = 0u;
          *(_OWORD *)(v25 + 416) = 0u;
          *(_OWORD *)(v25 + 368) = 0u;
          *(_OWORD *)(v25 + 384) = 0u;
          *(_OWORD *)(v25 + 336) = 0u;
          *(_OWORD *)(v25 + 352) = 0u;
          *(_OWORD *)(v25 + 304) = 0u;
          *(_OWORD *)(v25 + 320) = 0u;
          *(_OWORD *)(v25 + 272) = 0u;
          *(_OWORD *)(v25 + 288) = 0u;
          *(_OWORD *)(v25 + 240) = 0u;
          *(_OWORD *)(v25 + 256) = 0u;
          *(_OWORD *)(v25 + 208) = 0u;
          *(_OWORD *)(v25 + 224) = 0u;
          *(_OWORD *)(v25 + 176) = 0u;
          *(_OWORD *)(v25 + 192) = 0u;
          *(_OWORD *)(v25 + 144) = 0u;
          *(_OWORD *)(v25 + 160) = 0u;
          *(_OWORD *)(v25 + 112) = 0u;
          *(_OWORD *)(v25 + 128) = 0u;
          *(_OWORD *)(v25 + 80) = 0u;
          *(_OWORD *)(v25 + 96) = 0u;
          *(_OWORD *)(v25 + 48) = 0u;
          *(_OWORD *)(v25 + 64) = 0u;
          *(_OWORD *)(v25 + 16) = 0u;
          *(_OWORD *)(v25 + 32) = 0u;
          *(_OWORD *)v25 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v25, v8);
        }
      }
      v13 = *((_QWORD *)v12 + 382);
    }
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      goto LABEL_17;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      goto LABEL_17;
    v16 = *(_QWORD *)(v2 + 32);
    v17 = *(_QWORD *)(v2 + 40);
    WebCore::Document::originIdentifierForPasteboard(*(WebCore::Document **)(v2 + 296), (WTF::StringImpl *)v8, &v26);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 328))(v15, a2, v16, v17, &v26);
    v19 = v26;
    v26 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v19 -= 2;
    }
    v6 = 1;
    if (!v18)
    {
      *(_BYTE *)(v9 + 65) = 1;
      goto LABEL_17;
    }
    if (v18 != 1)
    {
      if (v18 != 2)
        goto LABEL_17;
      *(_BYTE *)(v9 + 65) = 2;
    }
  }
LABEL_18:
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::UserGestureToken::~UserGestureToken((WebCore::UserGestureToken *)v9, v8);
    WTF::fastFree(v10, v11);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return v6;
}

void WebCore::LocalFrame::setPrinting(_QWORD *a1, void *a2, float *a3, float *a4, uint64_t a5, float a6)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  WebCore::LocalFrameView *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RenderLayer **v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  if (!a1[36])
    return;
  v7 = a1[37];
  if (!v7)
    return;
  *(_DWORD *)(v7 + 24) += 2;
  v13 = *(_QWORD *)(v7 + 720);
  if (!v13)
    v13 = WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v7, a2);
  if (!*(_QWORD *)(v13 + 8))
  {
    v50 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v50 = 1;
    *(_QWORD *)(v50 + 8) = v13;
    v51 = *(unsigned int **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v50;
    if (v51)
    {
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v49);
      }
    }
  }
  v14 = *(_QWORD *)(v13 + 8);
  do
    v15 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v15 + 1, (unsigned int *)v14));
  v16 = *(_BYTE *)(v13 + 274);
  *(_BYTE *)(*(_QWORD *)(v14 + 8) + 274) = 1;
  *(_BYTE *)(v7 + 3382) = (_BYTE)a2;
  v17 = (WebCore::LocalFrameView *)a1[36];
  if (v17)
  {
    ++*((_DWORD *)v17 + 2);
    WebCore::LocalFrameView::adjustMediaTypeForPrinting(v17, (WTF::StringImpl *)a2);
    if (*((_DWORD *)v17 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 2);
  }
  else
  {
    WebCore::LocalFrameView::adjustMediaTypeForPrinting(0, (WTF::StringImpl *)a2);
  }
  WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)(v7 + 1328), v18);
  v20 = *(_QWORD *)(v7 + 2288);
  if (v20)
    WebCore::MediaQueryMatcher::evaluateAll(v20, 1);
  v21 = a1[36];
  if (v21)
  {
    ++*(_DWORD *)(v21 + 8);
    v22 = a1[7];
    if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
    {
      if (*(_BYTE *)(v23 + 144))
        v23 = 0;
      if (!*(_BYTE *)(a1[37] + 3382) || v23 && *(_BYTE *)(*(_QWORD *)(v23 + 296) + 3382))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(a1[37] + 3382))
    {
LABEL_23:
      v24 = *(_QWORD *)(v21 + 464);
      if (v24 && *(_QWORD *)(v24 + 8))
        WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout((WebCore::LocalFrameViewLayoutContext *)(v21 + 336));
      WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v21 + 336));
      if ((_DWORD)a5 == 1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v21 + 328) + 296);
        if (v25)
        {
          v26 = *(WebCore::RenderLayer ***)(v25 + 1944);
          if (v26)
          {
            v27 = WebCore::RenderView::documentRect(v26);
            v57 = v28;
            LODWORD(v56) = -(int)v27;
            HIDWORD(v56) = -HIDWORD(v27);
            if (*(_DWORD *)(v21 + 96) + (_DWORD)v27)
              v29 = 0;
            else
              v29 = *(_DWORD *)(v21 + 100) == -HIDWORD(v27);
            if (!v29)
            {
              v54 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v21 + 328) + 296) + 3382);
              v55 = *(_QWORD *)(v21 + 256);
              *(_QWORD *)(v21 + 96) = v56;
              *(_BYTE *)(v21 + 111) = 1;
              if (*(_QWORD *)(v21 + 40))
              {
                WebCore::ScrollView::platformSetScrollOrigin((id *)v21, (const WebCore::IntPoint *)&v56);
              }
              else if (!v54 && v28 == v55)
              {
                v58 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 + 64) + 832))(v21 + 64, 0, 1);
                WebCore::ScrollView::updateScrollbars(v21, (const WebCore::IntPoint *)&v58);
              }
            }
            WebCore::LocalFrameView::setContentsSize((WebCore::LocalFrameView *)v21, (const WebCore::IntSize *)&v57);
          }
        }
      }
      goto LABEL_36;
    }
    WebCore::LocalFrameView::forceLayoutForPagination(v21, a3, a4, a5, a6);
LABEL_36:
    v30 = a1[11];
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      do
      {
        if (!*(_BYTE *)(v30 + 144))
        {
          v33 = (unsigned int *)(v30 + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
          v57 = 0;
          v58 = 0;
          WebCore::LocalFrame::setPrinting(v30, a2, &v58, &v57, a5, 0.0);
          do
          {
            v35 = __ldaxr(v33);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v33));
          if (!v36)
          {
            atomic_store(1u, v33);
            v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v45 = off_1E31FE290;
            v45[1] = v33;
            v58 = (uint64_t)v45;
            WTF::ensureOnMainThread();
            v46 = v58;
            v58 = 0;
            if (v46)
              (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          }
        }
        v37 = *(_QWORD *)(v30 + 72);
        if (v37)
        {
          v38 = (unsigned int *)(v37 + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
        }
        v40 = (unsigned int *)(v30 + 8);
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          atomic_store(1u, v40);
          v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v43 = off_1E31FE290;
          v43[1] = v40;
          v58 = (uint64_t)v43;
          WTF::ensureOnMainThread();
          v44 = v58;
          v58 = 0;
          if (v44)
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        }
        v30 = v37;
      }
      while (v37);
    }
    if (*(_DWORD *)(v21 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    else
      --*(_DWORD *)(v21 + 8);
  }
  *(_BYTE *)(*(_QWORD *)(v14 + 8) + 274) = v16;
  do
  {
    v47 = __ldaxr((unsigned int *)v14);
    v48 = v47 - 1;
  }
  while (__stlxr(v48, (unsigned int *)v14));
  if (!v48)
  {
    atomic_store(1u, (unsigned int *)v14);
    WTF::fastFree((WTF *)v14, v19);
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v19);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
}

WTF::StringImpl *WebCore::LocalFrameView::adjustMediaTypeForPrinting(WebCore::LocalFrameView *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  int v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = (_DWORD *)*((_QWORD *)this + 131);
  if ((_DWORD)a2)
  {
    if (v3)
      goto LABEL_10;
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 41) + 280)
                                                                         + 16)
                                                           + 896))(&v16);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 80) + 8) + 200);
          if (v14)
          {
            v5 = *(WTF::StringImpl **)(v14 + 136);
            if (v5)
            {
              if (*((_DWORD *)v5 + 1))
              {
                *(_DWORD *)v5 += 2;
                v15 = v16;
                v16 = v5;
                if (!v15)
                {
LABEL_7:
                  v6 = (WTF::StringImpl *)*((_QWORD *)this + 131);
                  *((_QWORD *)this + 131) = v5;
                  if (v6)
                  {
                    if (*(_DWORD *)v6 == 2)
                      WTF::StringImpl::destroy(v6, a2);
                    else
                      *(_DWORD *)v6 -= 2;
                  }
LABEL_10:
                  v7 = WebCore::printAtomData;
                  if (WebCore::printAtomData)
                    *(_DWORD *)WebCore::printAtomData += 2;
                  result = (WTF::StringImpl *)*((_QWORD *)this + 130);
                  *((_QWORD *)this + 130) = v7;
                  if (result)
                  {
                    v9 = *(_DWORD *)result - 2;
                    if (*(_DWORD *)result == 2)
                      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
LABEL_23:
                    *(_DWORD *)result = v9;
                    return result;
                  }
                  return result;
                }
                if (*(_DWORD *)v15 == 2)
                  WTF::StringImpl::destroy(v15, a2);
                else
                  *(_DWORD *)v15 -= 2;
              }
            }
          }
        }
      }
    }
    v5 = v16;
    if (!v16)
    {
      v5 = (WTF::StringImpl *)*((_QWORD *)this + 130);
      if (v5)
        *(_DWORD *)v5 += 2;
    }
    goto LABEL_7;
  }
  if (v3)
  {
    *v3 += 2;
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 130);
    *((_QWORD *)this + 130) = v3;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v11 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = v11;
  if (result)
  {
    v9 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    goto LABEL_23;
  }
  return result;
}

BOOL WebCore::LocalFrame::shouldUsePrintingLayout(WebCore::LocalFrame *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 7);
  if (!v1)
    return *(_BYTE *)(*((_QWORD *)this + 37) + 3382) != 0;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return *(_BYTE *)(*((_QWORD *)this + 37) + 3382) != 0;
  if (*(_BYTE *)(v3 + 144))
    v3 = 0;
  if (!*(_BYTE *)(*((_QWORD *)this + 37) + 3382))
    return 0;
  if (v3)
    return *(unsigned __int8 *)(*(_QWORD *)(v3 + 296) + 3382) == 0;
  return 1;
}

uint64_t WebCore::LocalFrameView::forceLayoutForPagination(uint64_t result, float *a2, float *a3, int a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unsigned int v12;
  float *v13;
  float v14;
  float *v15;
  float v16;
  double v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  WebCore::RenderElement *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  double v49;
  uint64_t v50;
  double v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  WebCore::RenderElement *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v5 = *(_QWORD *)(*(_QWORD *)(result + 328) + 296);
  if (!v5)
    return result;
  v6 = *(_QWORD *)(v5 + 1944);
  if (!v6)
    return result;
  v11 = result;
  ++*(_DWORD *)(result + 8);
  v12 = ((*(_DWORD *)(v6 + 124) >> 13) & 6) - 2;
  if (v12 <= 3)
    v13 = a2 + 1;
  else
    v13 = a2;
  v14 = *v13;
  if (v12 >= 4)
    v15 = a2 + 1;
  else
    v15 = a2;
  v16 = floorf(*v15);
  v17 = floorf(v14) * 64.0;
  if (v17 > -2147483650.0)
    v18 = (int)v17;
  else
    v18 = 0x80000000;
  if (v17 < 2147483650.0)
    v19 = v18;
  else
    v19 = 0x7FFFFFFFLL;
  v20 = v16 * 64.0;
  if (v20 >= 2147483650.0)
  {
    v21 = 0x7FFFFFFFLL;
  }
  else if (v20 <= -2147483650.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v20;
  }
  v22 = v19 | (v21 << 32);
  v23 = (_BYTE *)(v6 + 392);
  if (*(_BYTE *)(v6 + 392))
  {
    if (*(_DWORD *)(v6 + 388) == (_DWORD)v21)
      goto LABEL_23;
    v24 = (_BYTE *)(v6 + 396);
  }
  else
  {
    *(_BYTE *)(v6 + 396) = 1;
    v24 = (_BYTE *)(v6 + 392);
  }
  *v24 = 1;
LABEL_23:
  *(_QWORD *)(v6 + 384) = v22;
  v25 = *(_DWORD *)(v6 + 20);
  if ((v25 & 8) == 0)
  {
    *(_DWORD *)(v6 + 20) = v25 | 8;
    v26 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v6, 0);
    WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v6, v26);
    if ((*(_BYTE *)(v6 + 21) & 0x80) != 0)
    {
      if ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195FEDF1CLL);
      }
      v27 = *(_QWORD *)(v6 + 144);
      if (v27)
      {
        v28 = *(_DWORD *)(v27 + 8) + 1;
        *(_DWORD *)(v27 + 8) = v28;
      }
      else
      {
        v28 = MEMORY[8];
      }
      *(_QWORD *)(v27 + 24) = *(_QWORD *)(v27 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v28)
      {
        __break(0xC471u);
        JUMPOUT(0x195FEDF48);
      }
      *(_DWORD *)(v27 + 8) = v28 - 1;
    }
  }
  WebCore::RenderObject::setPreferredLogicalWidthsDirty(v6, 1, 1);
  v29 = *(_QWORD *)(v11 + 464);
  if (v29 && *(_QWORD *)(v29 + 8))
    WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout((WebCore::LocalFrameViewLayoutContext *)(v11 + 336));
  result = WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v11 + 336));
  if (*(_DWORD *)(v11 + 8) != 1)
  {
    v30 = (unsigned __int16)*(_DWORD *)(v6 + 124) >> 13;
    v78 = 2;
    switch((unsigned __int16)*(_DWORD *)(v6 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_36;
      case 3:
      case 5:
        LOBYTE(v30) = 3;
        goto LABEL_36;
      case 4:
        goto LABEL_37;
      default:
        LOBYTE(v30) = 0;
LABEL_36:
        v78 = v30;
LABEL_37:
        v31 = v78 & 6;
        result = WebCore::RenderView::documentRect((WebCore::RenderLayer **)v6);
        v34 = v32 << 6;
        if (v32 < -33554432)
          v34 = 0x80000000;
        if (v32 > 0x1FFFFFF)
          v34 = 0x7FFFFFFF;
        if (v33 >= -33554432)
          v35 = v33 << 6;
        else
          v35 = 0x80000000;
        if (v33 <= 0x1FFFFFF)
          v36 = v35;
        else
          v36 = 0x7FFFFFFF;
        if (v31 == 2)
          v37 = v36;
        else
          v37 = v34;
        if ((float)((float)v37 * 0.015625) <= v14)
          goto LABEL_123;
        v38 = a2[1];
        v39 = *a2 * a5;
        if (v39 >= (float)((float)v34 * 0.015625))
          v39 = (float)v34 * 0.015625;
        v40 = v38 * a5;
        if ((float)(v38 * a5) >= (float)((float)v36 * 0.015625))
          v40 = (float)v36 * 0.015625;
        v41 = *(_QWORD *)(*(_QWORD *)(v11 + 328) + 296);
        v42 = 0.0;
        if (v41)
        {
          v43 = *(_QWORD *)(v41 + 1944);
          v44 = 0.0;
          if (v43)
          {
            v45 = *a3;
            v46 = a3[1];
            if (((*(_DWORD *)(v43 + 124) >> 13) & 6u) - 2 < 4)
            {
              v42 = (float)(int)v40;
              v44 = floorf((float)(v45 / v46) * v42);
            }
            else
            {
              v44 = (float)(int)v39;
              v42 = floorf((float)(v46 / v45) * v44);
            }
          }
        }
        else
        {
          v44 = 0.0;
        }
        if (v31 == 2)
          v47 = v42;
        else
          v47 = v44;
        if (v31 == 2)
          v42 = v44;
        v48 = floorf(v42);
        v49 = floorf(v47) * 64.0;
        if (v49 >= 2147483650.0)
        {
          v50 = 0x7FFFFFFFLL;
        }
        else if (v49 <= -2147483650.0)
        {
          v50 = 0x80000000;
        }
        else
        {
          v50 = (int)v49;
        }
        v51 = v48 * 64.0;
        if (v51 >= 2147483650.0)
        {
          v52 = 0x7FFFFFFF00000000;
        }
        else if (v51 <= -2147483650.0)
        {
          v52 = 0x8000000000000000;
        }
        else
        {
          v52 = (unint64_t)(int)v51 << 32;
        }
        v53 = v52 | v50;
        if (*v23)
        {
          if (*(_DWORD *)(v6 + 388) == HIDWORD(v52))
            goto LABEL_75;
          v23 = (_BYTE *)(v6 + 396);
        }
        else
        {
          *(_BYTE *)(v6 + 396) = 1;
        }
        *v23 = 1;
LABEL_75:
        *(_QWORD *)(v6 + 384) = v53;
        v54 = *(_DWORD *)(v6 + 20);
        if ((v54 & 8) == 0)
        {
          *(_DWORD *)(v6 + 20) = v54 | 8;
          v55 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v6, 0);
          WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v6, v55);
          if ((*(_BYTE *)(v6 + 21) & 0x80) != 0)
          {
            if ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195FEDF80);
            }
            v56 = *(_QWORD *)(v6 + 144);
            if (v56)
            {
              v57 = *(_DWORD *)(v56 + 8) + 1;
              *(_DWORD *)(v56 + 8) = v57;
            }
            else
            {
              v57 = MEMORY[8];
            }
            *(_QWORD *)(v56 + 24) = *(_QWORD *)(v56 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v57)
            {
              __break(0xC471u);
              JUMPOUT(0x195FEDFACLL);
            }
            *(_DWORD *)(v56 + 8) = v57 - 1;
          }
        }
        WebCore::RenderObject::setPreferredLogicalWidthsDirty(v6, 1, 1);
        v58 = *(_QWORD *)(v11 + 464);
        if (v58 && *(_QWORD *)(v58 + 8))
          WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout((WebCore::LocalFrameViewLayoutContext *)(v11 + 336));
        result = WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v11 + 336));
        if (*(_DWORD *)(v11 + 8) != 1)
        {
          v59 = WebCore::RenderView::documentRect((WebCore::RenderLayer **)v6);
          v61 = (_DWORD)v59 << 6;
          if ((int)v59 < -33554432)
            v61 = 0x80000000;
          if ((int)v59 <= 0x1FFFFFF)
            v62 = v61;
          else
            v62 = 0x7FFFFFFF;
          v63 = HIDWORD(v59) << 6;
          if (SHIDWORD(v59) < -33554432)
            v63 = 0x80000000;
          if (SHIDWORD(v59) <= 0x1FFFFFF)
            v64 = v63;
          else
            v64 = 0x7FFFFFFF;
          v65 = (_DWORD)v60 << 6;
          if ((int)v60 < -33554432)
            v65 = 0x80000000;
          if ((int)v60 > 0x1FFFFFF)
            v65 = 0x7FFFFFFF;
          if (SHIDWORD(v60) >= -33554432)
            v66 = HIDWORD(v60) << 6;
          else
            v66 = 0x80000000;
          if (SHIDWORD(v60) <= 0x1FFFFFF)
            v67 = v66;
          else
            v67 = 0x7FFFFFFF;
          if (v31 == 2)
          {
            v68 = v64 + v67;
            if (__OFADD__(v64, v67))
              v68 = (v64 >> 31) + 0x7FFFFFFF;
            v64 = v62;
            v67 = v65;
          }
          else
          {
            v68 = v62 + v65;
            if (__OFADD__(v62, v65))
              v68 = (v62 >> 31) + 0x7FFFFFFF;
          }
          if ((*(_BYTE *)(v6 + 123) & 4) != 0)
          {
            v70 = (float)((float)((float)v68 * 0.015625) - v47) * 64.0;
            if (v70 >= 2147483650.0)
            {
              v69 = 0x7FFFFFFFLL;
            }
            else if (v70 <= -2147483650.0)
            {
              v69 = 0x80000000;
            }
            else
            {
              v69 = (int)v70;
            }
          }
          else
          {
            v69 = 0;
          }
          v71 = v47 * 64.0;
          if (v71 >= 2147483650.0)
          {
            v72 = 0x7FFFFFFFLL;
          }
          else if (v71 <= -2147483650.0)
          {
            v72 = 0x80000000;
          }
          else
          {
            v72 = (int)v71;
          }
          v79 = __PAIR64__(v64, v69);
          v80 = __PAIR64__(v67, v72);
          if (v31 == 2)
          {
            v79 = v64 | (unint64_t)(v69 << 32);
            v80 = v67 | (unint64_t)(v72 << 32);
          }
          WebCore::RenderBlock::clearLayoutOverflow((WTF *)v6, v60);
          result = WebCore::RenderBox::addLayoutOverflow((WebCore::RenderBox *)v6, (const WebCore::LayoutRect *)&v79);
LABEL_123:
          if (a4)
          {
            v73 = *(_QWORD *)(*(_QWORD *)(v11 + 328) + 296);
            if (v73)
            {
              result = *(_QWORD *)(v73 + 1944);
              if (result)
              {
                v74 = WebCore::RenderView::documentRect((WebCore::RenderLayer **)result);
                v82 = v75;
                LODWORD(v81) = -(int)v74;
                HIDWORD(v81) = -HIDWORD(v74);
                v76 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 328) + 296) + 3382);
                v77 = *(_QWORD *)(v11 + 256);
                if (*(_DWORD *)(v11 + 96) + (_DWORD)v74 || *(_DWORD *)(v11 + 100) != -HIDWORD(v74))
                {
                  *(_QWORD *)(v11 + 96) = v81;
                  *(_BYTE *)(v11 + 111) = 1;
                  if (*(_QWORD *)(v11 + 40))
                  {
                    WebCore::ScrollView::platformSetScrollOrigin((id *)v11, (const WebCore::IntPoint *)&v81);
                  }
                  else if (!v76 && v75 == v77)
                  {
                    v79 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 + 64) + 832))(v11 + 64, 0, 1);
                    WebCore::ScrollView::updateScrollbars(v11, (const WebCore::IntPoint *)&v79);
                  }
                }
                result = (uint64_t)WebCore::LocalFrameView::setContentsSize((WebCore::LocalFrameView *)v11, (const WebCore::IntSize *)&v82);
              }
            }
          }
        }
        break;
    }
  }
  if (*(_DWORD *)(v11 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  --*(_DWORD *)(v11 + 8);
  return result;
}

uint64_t WebCore::LocalFrameView::forceLayout(WebCore::LocalFrameView *this, char a2)
{
  uint64_t v3;

  if ((a2 & 1) == 0)
  {
    v3 = *((_QWORD *)this + 58);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8))
        WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout((WebCore::LocalFrameView *)((char *)this + 336));
    }
  }
  return WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameView *)((char *)this + 336));
}

WebCore::LocalFrameView *WebCore::LocalFrameView::adjustViewSize(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
  {
    v2 = (uint64_t)this;
    this = *(WebCore::LocalFrameView **)(v1 + 1944);
    if (this)
    {
      v3 = WebCore::RenderView::documentRect(this);
      v10 = v4;
      LODWORD(v9) = -(int)v3;
      HIDWORD(v9) = -HIDWORD(v3);
      if (*(_DWORD *)(v2 + 96) + (_DWORD)v3)
        v5 = 0;
      else
        v5 = *(_DWORD *)(v2 + 100) == -HIDWORD(v3);
      if (!v5)
      {
        v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 328) + 296) + 3382);
        v7 = *(_QWORD *)(v2 + 256);
        *(_QWORD *)(v2 + 96) = v9;
        *(_BYTE *)(v2 + 111) = 1;
        if (*(_QWORD *)(v2 + 40))
        {
          WebCore::ScrollView::platformSetScrollOrigin((id *)v2, (const WebCore::IntPoint *)&v9);
        }
        else
        {
          if (v6)
            v8 = 0;
          else
            v8 = v4 == v7;
          if (v8)
          {
            v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 + 64) + 832))(v2 + 64, 0, 1);
            WebCore::ScrollView::updateScrollbars(v2, (const WebCore::IntPoint *)&v11);
          }
        }
      }
      return WebCore::LocalFrameView::setContentsSize((WebCore::LocalFrameView *)v2, (const WebCore::IntSize *)&v10);
    }
  }
  return this;
}

float WebCore::LocalFrame::resizePageRectsKeepingRatio(WebCore::LocalFrame *this, const WebCore::FloatSize *a2, const WebCore::FloatSize *a3)
{
  uint64_t v3;
  uint64_t v4;
  float result;

  v3 = *((_QWORD *)this + 37);
  if (!v3)
    return 0.0;
  v4 = *(_QWORD *)(v3 + 1944);
  result = 0.0;
  if (v4)
  {
    if (((*(_DWORD *)(v4 + 124) >> 13) & 6u) - 2 < 4)
      return floorf((float)(*(float *)a2 / *((float *)a2 + 1)) * floorf(*((float *)a3 + 1)));
    else
      return floorf(*(float *)a3);
  }
  return result;
}

uint64_t WebCore::LocalFrame::contentRenderer(WebCore::LocalFrame *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 37);
  if (v1)
    return *(_QWORD *)(v1 + 1944);
  else
    return 0;
}

WebCore::DOMWrapperWorld *WebCore::LocalFrame::addUserScriptAwaitingNotification(uint64_t a1, WebCore::DOMWrapperWorld *a2, uint64_t a3)
{
  uint64_t v6;
  WebCore::UserStyleSheet *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::UserStyleSheet *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WebCore::DOMWrapperWorld **v19;
  WebCore::DOMWrapperWorld *result;
  WTF *v21;
  void *v22;
  WebCore::DOMWrapperWorld *v23;
  WebCore::UserStyleSheet *v24;

  v6 = WTF::fastMalloc((WTF *)0x58);
  v7 = (WebCore::UserStyleSheet *)WebCore::UserScript::UserScript(v6, a3);
  ++*(_DWORD *)a2;
  v23 = a2;
  v24 = v7;
  v9 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 272))
  {
    v10 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 264), v9 + 1, (unint64_t)&v23);
    v11 = *(unsigned int *)(a1 + 276);
    v12 = (_QWORD *)(*(_QWORD *)(a1 + 264) + 16 * v11);
    v13 = *(_QWORD *)v10;
    *(_QWORD *)v10 = 0;
    *v12 = v13;
    v14 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = 0;
    v12[1] = v14;
    v15 = v24;
    *(_DWORD *)(a1 + 276) = v11 + 1;
    v24 = 0;
    if (v15)
    {
      WebCore::UserStyleSheet::~UserStyleSheet(v15, v8);
      WTF::fastFree(v16, v17);
    }
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 264);
    v23 = 0;
    v19 = (WebCore::DOMWrapperWorld **)(v18 + 16 * v9);
    *v19 = a2;
    v19[1] = v7;
    *(_DWORD *)(a1 + 276) = v9 + 1;
    v24 = 0;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(result, v8);
      return (WebCore::DOMWrapperWorld *)WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::LocalFrame::injectUserScriptsAwaitingNotification(uint64_t this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  _QWORD *v4;
  WTF *v5;
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::UserStyleSheet **v9;
  WebCore::UserStyleSheet *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;

  v2 = *(WTF **)(this + 264);
  v3 = *(unsigned int *)(this + 276);
  *(_QWORD *)(this + 264) = 0;
  *(_QWORD *)(this + 272) = 0;
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)this;
    v5 = v2;
    do
    {
      v6 = *(WebCore::DOMWrapperWorld **)v5;
      v7 = *((_QWORD *)v5 + 1);
      v5 = (WTF *)((char *)v5 + 16);
      WebCore::LocalFrame::injectUserScriptImmediately(v4, v6, v7);
    }
    while (v5 != (WTF *)((char *)v2 + 16 * v3));
    v8 = 16 * v3;
    v9 = (WebCore::UserStyleSheet **)((char *)v2 + 8);
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        WebCore::UserStyleSheet::~UserStyleSheet(v10, a2);
        WTF::fastFree(v11, v12);
      }
      this = (uint64_t)*(v9 - 1);
      *(v9 - 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::DOMWrapperWorld::~DOMWrapperWorld((WebCore::DOMWrapperWorld *)this, a2);
          this = WTF::fastFree(v13, v14);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  if (v2)
    return WTF::fastFree(v2, a2);
  return this;
}

uint64_t WebCore::LocalFrame::frameForWidget(WebCore::LocalFrame *this, const WebCore::Widget *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;

  {
    WebCore::widgetRendererMap(void)::staticWidgetRendererMap = 0;
    goto LABEL_17;
  }
  if (!WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
    goto LABEL_17;
  v3 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 8);
  v4 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        goto LABEL_17;
      if (*(WebCore::LocalFrame **)(v10 + 8) == this)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  v11 = *(_QWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v9 + 8);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
LABEL_17:
    if (((*(uint64_t (**)(WebCore::LocalFrame *, const WebCore::Widget *))(*(_QWORD *)this + 72))(this, a2) & 1) != 0)
    {
      v15 = (char *)this + 328;
      return *(_QWORD *)v15;
    }
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x195FEE548);
  }
  v13 = *(_QWORD **)(*(_QWORD *)(v12 + 24) + 8);
  if (((*(uint64_t (**)(_QWORD *, const WebCore::Widget *))(*v13 + 192))(v13, a2) & 1) == 0)
    goto LABEL_19;
  v14 = *(_QWORD *)(*(_QWORD *)(v13[5] + 8) + 528);
  if (v14)
  {
    v15 = (char *)(v14 + 8);
    return *(_QWORD *)v15;
  }
  return 0;
}

WTF *WebCore::LocalFrame::clearTimers(WTF *this, WebCore::DocumentTimelinesController **a2, WebCore::Document *a3)
{
  uint64_t v3;
  int v4;
  WebCore::DocumentTimelinesController *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  WebCore::LocalFrameView *v13;
  WebCore::LocalFrameView *v14;
  uint64_t v15;

  if (this)
  {
    v3 = (uint64_t)this;
    ++*((_DWORD *)this + 84);
    if ((*((_QWORD *)this + 55) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)this + 55) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      v13 = (WebCore::LocalFrameView *)a2;
      WebCore::TimerBase::stopSlowCase((WTF *)((char *)this + 408));
      a2 = (WebCore::DocumentTimelinesController **)v13;
    }
    if ((*(_QWORD *)(v3 + 384) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v3 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      v14 = (WebCore::LocalFrameView *)a2;
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 352));
      a2 = (WebCore::DocumentTimelinesController **)v14;
    }
    v4 = *(_DWORD *)(v3 + 336);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x195FEE694);
    }
    *(_DWORD *)(v3 + 336) = v4 - 1;
    v5 = a2[367];
    if (v5)
    {
      ++*(_DWORD *)v5;
      WebCore::DocumentTimelinesController::suspendAnimations(v5, a2);
      if (!*(_DWORD *)v5)
      {
        __break(0xC471u);
        JUMPOUT(0x195FEE6B4);
      }
      --*(_DWORD *)v5;
    }
    v6 = *(_QWORD *)(v3 + 328);
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_QWORD *)(v6 + 640);
    ++*(_DWORD *)v9;
    this = WebCore::AutoscrollController::stopAutoscrollTimer(*(WebCore::AutoscrollController **)(v9 + 144), 0);
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x195FEE6D4);
    }
    --*(_DWORD *)v9;
    do
    {
      v10 = __ldaxr(v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v7));
    if (!v11)
    {
      atomic_store(1u, v7);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E31FE290;
      v12[1] = v7;
      v15 = (uint64_t)v12;
      WTF::ensureOnMainThread();
      this = (WTF *)v15;
      if (v15)
        return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::protectedFrame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 328);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *a2 = v2;
  return this;
}

uint64_t WebCore::LocalFrame::willDetachPage(WebCore::LocalFrame *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Page *v17;
  uint64_t v18;
  int v19;
  WebCore::LocalFrame *v20;
  uint64_t v21;
  WebCore::Page *v22;
  WebCore::ScriptController *v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  WebCore::Page *v30;
  unsigned __int8 **v31;
  _DWORD *v32;
  void *v33;
  unsigned __int8 **v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 144))
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(_DWORD **)(v3 + 280);
        ++*v6;
        WebCore::FrameLoader::checkLoadComplete(v6, 0);
        if (!*v6)
        {
          __break(0xC471u);
          JUMPOUT(0x195FEEAA0);
        }
        --*v6;
        do
        {
          v7 = __ldaxr(v4);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v4));
        if (!v8)
        {
          atomic_store(1u, v4);
          v35 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v35 = off_1E31FE290;
          *(_QWORD *)(v35 + 8) = v4;
          v39 = (unsigned __int8 **)v35;
          WTF::ensureOnMainThread();
          v36 = v39;
          v39 = 0;
          if (v36)
            (*((void (**)(unsigned __int8 **))*v36 + 1))(v36);
        }
      }
    }
  }
  v9 = *((_QWORD *)this + 31);
  if (!v9)
  {
    v10 = 0;
    v11 = 0;
LABEL_12:
    v12 = v9 + 8 * v11;
    goto LABEL_13;
  }
  v11 = *(unsigned int *)(v9 - 4);
  v12 = v9 + 8 * v11;
  if (!*(_DWORD *)(v9 - 12))
  {
    v10 = v9 + 8 * v11;
    goto LABEL_12;
  }
  v10 = *((_QWORD *)this + 31);
  if ((_DWORD)v11)
  {
    v26 = 8 * v11;
    v10 = *((_QWORD *)this + 31);
    while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
    {
      v10 += 8;
      v26 -= 8;
      if (!v26)
      {
        v10 = v12;
        break;
      }
    }
  }
LABEL_13:
  v39 = (unsigned __int8 **)((char *)this + 248);
  v40 = v10;
  v41 = v12;
  if (v9)
  {
    v14 = *(unsigned int *)(v9 - 4);
    v13 = v9 + 8 * v14;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v42 = v13;
  v43 = v9 + 8 * v14;
  if (v10 != v13)
  {
    if (!*(_QWORD *)(*(_QWORD *)v10 + 8))
    {
      v37 = v10;
      do
      {
        v38 = v37 + 8;
        v37 = v12;
        if (v38 != v12)
        {
          v37 = v38;
          while ((unint64_t)(*(_QWORD *)v37 + 1) <= 1)
          {
            v37 += 8;
            if (v37 == v12)
            {
              v37 = v12;
              break;
            }
          }
        }
        v10 = v13;
        if (v37 == v13)
          break;
        v10 = v37;
      }
      while (!*(_QWORD *)(*(_QWORD *)v37 + 8));
    }
    v40 = v10;
  }
  if (v9)
    v15 = v9 + 8 * *(unsigned int *)(v9 - 4);
  else
    v15 = 0;
  while (v10 != v15)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v10 + 8) + 8))(*(_QWORD *)(*(_QWORD *)v10 + 8));
    WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v39);
    v10 = v40;
  }
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    v17 = *(WebCore::Page **)(v16 + 8);
    if (v17)
    {
      ++*(_DWORD *)v17;
      v18 = *((_QWORD *)v17 + 9);
      v19 = *(_DWORD *)v18 + 1;
      *(_DWORD *)v18 = v19;
      v20 = *(WebCore::LocalFrame **)(v18 + 16);
      if (v20)
        v20 = (WebCore::LocalFrame *)*((_QWORD *)v20 + 1);
      if (v20 == this)
      {
        WebCore::FocusController::setFocusedFrame(v18, 0, 1);
        v19 = *(_DWORD *)v18;
      }
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x195FEEA80);
      }
      *(_DWORD *)v18 = v19 - 1;
      if (*(_DWORD *)v17 == 1)
      {
        WebCore::Page::~Page(v17);
        WTF::fastFree(v27, v28);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
    v21 = *((_QWORD *)this + 3);
    if (v21)
    {
      v22 = *(WebCore::Page **)(v21 + 8);
      if (v22)
      {
        if (WebCore::Page::scrollingCoordinator(v22) && *((_QWORD *)this + 36))
        {
          v29 = *((_QWORD *)this + 3);
          v30 = v29 ? *(WebCore::Page **)(v29 + 8) : 0;
          WebCore::Page::protectedScrollingCoordinator(v30, &v39);
          v31 = v39;
          v32 = (_DWORD *)*((_QWORD *)this + 36);
          if (v32)
          {
            ++v32[2];
            (*((void (**)(unsigned __int8 **, _DWORD *))*v31 + 56))(v31, v32 + 16);
            if (v32[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
            else
              --v32[2];
          }
          else
          {
            (*((void (**)(unsigned __int8 **, uint64_t))*v39 + 56))(v39, 64);
          }
          v34 = v39;
          v39 = 0;
          if (v34)
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v34 + 1, v33);
        }
      }
    }
  }
  v23 = (WebCore::ScriptController *)*((_QWORD *)this + 38);
  ++*((_DWORD *)v23 + 2);
  WebCore::ScriptController::clearScriptObjects(v23);
  result = WebCore::ScriptController::updatePlatformScriptObjects((uint64_t)v23);
  v25 = *((_DWORD *)v23 + 2);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x195FEEA4CLL);
  }
  *((_DWORD *)v23 + 2) = v25 - 1;
  return result;
}

_DWORD *WebCore::LocalFrame::displayStringModifiedByEncoding@<X0>(_DWORD *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  _DWORD *v10;
  const char *v11[2];

  v5 = *((_QWORD *)this + 37);
  if (v5 && (v6 = *(_QWORD *)(v5 + 1744)) != 0)
  {
    v8 = *(const char **)(v6 + 16);
    v7 = *(const char **)(v6 + 24);
    v11[0] = v8;
    v11[1] = v7;
    if (v7)
      v9 = PAL::nonBackslashEncodings == 0;
    else
      v9 = 1;
    if (!v9 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v11);
    this = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      return (_DWORD *)WTF::StringImpl::replace();
    else
      *a3 = 0;
  }
  else
  {
    v10 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v10 += 2;
    *a3 = v10;
  }
  return this;
}

void WebCore::LocalFrame::visiblePositionForPoint(WebCore::LocalFrame *this@<X0>, int32x2_t *a2@<X1>, int8x8_t *a3@<X8>)
{
  uint64_t v4;
  int8x8_t v5;
  WebCore::Node *v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int8x8_t v10;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13[2];
  int8x8_t v14;
  int v15;
  char v16;
  _BYTE v17[80];
  uint64_t v18;
  uint64_t v19;

  v4 = *((_QWORD *)this + 80);
  v5 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
  v14 = vorr_s8((int8x8_t)(*(_QWORD *)&v5 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v5));
  WebCore::EventHandler::hitTestResultAtPoint(v4, (int *)&v14, 0x1003u, (uint64_t)v17);
  v7 = v18;
  if (!v18)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    a3[2].i8[0] = 1;
    goto LABEL_13;
  }
  v8 = *(_DWORD *)(v18 + 24);
  *(_DWORD *)(v18 + 24) = v8 + 2;
  v9 = (_DWORD *)(*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v9)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    a3[2].i8[0] = 1;
    if (v8)
      goto LABEL_12;
    goto LABEL_20;
  }
  ++*(_DWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  (*(void (**)(_DWORD *, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v9 + 352))(v9, &v19, 1, 0);
  if (!*(_QWORD *)a3)
  {
    WebCore::firstPositionInOrBeforeNode(v7, v6, (uint64_t)v13);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v13, (uint64_t)&v14);
    v10 = *a3;
    *a3 = v14;
    if (v10)
    {
      if (*(_DWORD *)(*(_QWORD *)&v10 + 24) == 2)
      {
        if ((*(_WORD *)(*(_QWORD *)&v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef(*(WebCore::Node **)&v10, v6);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)&v10 + 24) -= 2;
      }
    }
    a3[1].i32[0] = v15;
    a3[1].i8[4] = v16;
    a3[2].i8[0] = 1;
    v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v6);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
  }
  v12 = v9[4];
  if (v12)
  {
    v9[4] = v12 - 1;
    v8 = *(_DWORD *)(v7 + 24) - 2;
    if (*(_DWORD *)(v7 + 24) != 2)
    {
LABEL_12:
      *(_DWORD *)(v7 + 24) = v8;
LABEL_13:
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v17, v6);
      return;
    }
LABEL_20:
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
    goto LABEL_13;
  }
  __break(0xC471u);
}

uint64_t WebCore::LocalFrame::documentAtPoint(WebCore::LocalFrame *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  WebCore::ScrollView *v3;
  void *v5;
  unint64_t v6;
  int8x8_t v7;
  int32x2_t v8;
  uint64_t v9;
  _DWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  int32x2_t v14;
  _BYTE v15[136];
  _QWORD v16[4];
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v3 = (WebCore::ScrollView *)*((_QWORD *)this + 36);
  if (!v3)
    return 0;
  ++*((_DWORD *)v3 + 2);
  v6 = WebCore::ScrollView::windowToContents(v3, a2, a3);
  if (*((_DWORD *)v3 + 2) == 1)
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v3 + 8))(v3);
  else
    --*((_DWORD *)v3 + 2);
  v7 = (int8x8_t)vcgt_s32((int32x2_t)v6, (int32x2_t)0xFE000000FE000000);
  v16[2] = 0x4000000040;
  v8 = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v7 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v6), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v6, 6uLL)), v7));
  v16[0] = v8;
  v16[1] = v8.i32[0] & 0xFFFFFFC0 | ((unint64_t)((v8.i32[1] & 0xFFFFFFC0) >> 6) << 38);
  v16[3] = vmul_f32(vcvt_f32_s32(v8), (float32x2_t)vdup_n_s32(0x3C800000u));
  v17 = (float)(int)(v8.i32[0] & 0xFFFFFFC0) * 0.015625;
  v18 = (float)(int)(v8.i32[1] & 0xFFFFFFC0) * 0.015625;
  v19 = v17 + 1.0;
  v20 = v18;
  v21 = v17 + 1.0;
  v22 = v18 + 1.0;
  v23 = v17;
  v24 = v18 + 1.0;
  v25 = 256;
  v26 = 0;
  v27 = 0;
  v33 = 0;
  v28 = v8;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v9 = *((_QWORD *)this + 37);
  if (!v9 || !*(_QWORD *)(v9 + 1944))
    goto LABEL_9;
  v10 = (_DWORD *)*((_QWORD *)this + 80);
  ++*v10;
  v14 = v8;
  WebCore::EventHandler::hitTestResultAtPoint((uint64_t)v10, (int *)&v14, 0x903u, (uint64_t)v15);
  WebCore::HitTestResult::operator=((uint64_t)v16, (uint64_t)v15);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v15, v11);
  if (*v10)
  {
    --*v10;
    if (v26)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8);
LABEL_10:
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v16, v5);
      return v12;
    }
LABEL_9:
    v12 = 0;
    goto LABEL_10;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::LocalFrame::rangeForPoint@<X0>(WebCore::LocalFrame *this@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::LocalFrame *v4;
  WebCore::Editor *v6;
  void *v7;
  WebCore::Node *v8;
  int v9;
  WebCore::Node *v10;
  unsigned int *result;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  void *v15;
  WebCore::Node *v16;
  void *v17;
  char *v18;
  WebCore::Node *v19;
  void *v20;
  WebCore::Node *v21;
  unint64_t RectForRange;
  _BOOL4 v23;
  int v24;
  int v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  unint64_t v29;
  _BOOL4 v30;
  int v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  int v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  WebCore::Editor *v37;
  void *v38;
  WebCore::Editor *v39;
  uint64_t v40;
  void *v41;
  int v42;
  WebCore::Editor *v43;
  void *v44;
  WebCore::Editor *v45;
  uint64_t v46;
  void *v47;
  int v48;
  int v49;
  char v50;
  WebCore::Node *v51;
  int v52;
  WebCore::Node *v53;
  int v54;
  unsigned __int8 v55;
  WebCore::Node *v56;
  char v57;
  WebCore::Node *v58;
  int v59;
  char v60;
  char v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  unsigned __int8 v65;
  WebCore::Node *v66;
  int v67;
  char v68;

  v4 = this;
  v6 = (WebCore::Editor *)&v56;
  WebCore::LocalFrame::visiblePositionForPoint(this, a2, (int8x8_t *)&v56);
  v8 = v56;
  if (v56)
  {
    v9 = *((_DWORD *)v56 + 6);
    *((_DWORD *)v56 + 6) = v9 + 2;
    if ((v57 & 7) != 0)
    {
      v10 = 0;
      if (v9)
      {
LABEL_4:
        *((_DWORD *)v8 + 6) = v9;
        goto LABEL_5;
      }
    }
    else
    {
      if ((*((_WORD *)v8 + 14) & 2) != 0)
        v10 = v8;
      else
        v10 = 0;
      if (v9)
        goto LABEL_4;
    }
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v8, v7);
LABEL_5:
    if (!v10 || (*((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_7;
    if ((*(_BYTE *)((*((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      __break(0xC471u);
      goto LABEL_121;
    }
    v12 = *(_QWORD **)((*((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v12)
      v12 = (_QWORD *)v12[1];
    v13 = v12[13];
    if ((*(_BYTE *)(v13 + 239) & 1) != 0)
      goto LABEL_7;
    v14 = *(_DWORD *)(v13 + 228);
    if (((v14 & 0x30) == 0 || (*(_DWORD *)(*(_QWORD *)(v12[11] + 32) + 148) & 0xC00000) == 0x800000)
      && (v14 & 0x18000) == 0)
    {
      goto LABEL_7;
    }
    WebCore::previousVisuallyDistinctCandidate(&v56, (uint64_t)&v58);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v58))
    {
      v10 = 0;
      v50 = 0;
      v49 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v58, (uint64_t)&v62);
      v10 = v62;
      v49 = v63;
      v50 = v64;
    }
    v16 = v58;
    v58 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v15);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    if (!v10)
      goto LABEL_122;
    *((_DWORD *)v10 + 6) += 2;
    v58 = v10;
    v59 = v49;
    v60 = v50;
    WebCore::makeBoundaryPoint((uint64_t *)&v58, (uint64_t)&v62);
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v17);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
    while (1)
    {
      v18 = (char *)v6 + 8;
      v19 = v56;
      if (v56)
      {
        *((_DWORD *)v56 + 6) += 2;
        v66 = v19;
        v67 = *(_DWORD *)v18;
        v68 = v18[4];
        WebCore::makeBoundaryPoint((uint64_t *)&v66, (uint64_t)&v58);
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19, v20);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      else
      {
        v66 = 0;
        v67 = *(_DWORD *)v18;
        v68 = v18[4];
        WebCore::makeBoundaryPoint((uint64_t *)&v66, (uint64_t)&v58);
      }
      v6 = (WebCore::Editor *)v65;
      if (v65 && v61)
      {
        v21 = v62;
        v62 = 0;
        v51 = v21;
        v52 = v63;
        v53 = v58;
        v54 = v59;
        v55 = 1;
      }
      else
      {
        LOBYTE(v51) = 0;
        v55 = 0;
        if (v61 && v58)
        {
          if (*((_DWORD *)v58 + 6) == 2)
          {
            if ((*((_WORD *)v58 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v58, v20);
          }
          else
          {
            *((_DWORD *)v58 + 6) -= 2;
          }
        }
        if ((_DWORD)v6 && v62)
        {
          if (*((_DWORD *)v62 + 6) == 2)
          {
            if ((*((_WORD *)v62 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v62, v20);
          }
          else
          {
            *((_DWORD *)v62 + 6) -= 2;
          }
        }
      }
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v20);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      if (v55)
      {
        v10 = (WebCore::Node *)*((_QWORD *)v4 + 37);
        v6 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
        if (v6)
        {
          ++*(_DWORD *)v6;
        }
        else
        {
          v37 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v37, v10);
          v39 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
          *((_QWORD *)v10 + 382) = v37;
          if (v39)
          {
            WebCore::Editor::~Editor(v39, v38);
            if (*(_DWORD *)v40)
            {
              *(_QWORD *)(v40 + 496) = 0;
              *(_OWORD *)(v40 + 464) = 0u;
              *(_OWORD *)(v40 + 480) = 0u;
              *(_OWORD *)(v40 + 432) = 0u;
              *(_OWORD *)(v40 + 448) = 0u;
              *(_OWORD *)(v40 + 400) = 0u;
              *(_OWORD *)(v40 + 416) = 0u;
              *(_OWORD *)(v40 + 368) = 0u;
              *(_OWORD *)(v40 + 384) = 0u;
              *(_OWORD *)(v40 + 336) = 0u;
              *(_OWORD *)(v40 + 352) = 0u;
              *(_OWORD *)(v40 + 304) = 0u;
              *(_OWORD *)(v40 + 320) = 0u;
              *(_OWORD *)(v40 + 272) = 0u;
              *(_OWORD *)(v40 + 288) = 0u;
              *(_OWORD *)(v40 + 240) = 0u;
              *(_OWORD *)(v40 + 256) = 0u;
              *(_OWORD *)(v40 + 208) = 0u;
              *(_OWORD *)(v40 + 224) = 0u;
              *(_OWORD *)(v40 + 176) = 0u;
              *(_OWORD *)(v40 + 192) = 0u;
              *(_OWORD *)(v40 + 144) = 0u;
              *(_OWORD *)(v40 + 160) = 0u;
              *(_OWORD *)(v40 + 112) = 0u;
              *(_OWORD *)(v40 + 128) = 0u;
              *(_OWORD *)(v40 + 80) = 0u;
              *(_OWORD *)(v40 + 96) = 0u;
              *(_OWORD *)(v40 + 48) = 0u;
              *(_OWORD *)(v40 + 64) = 0u;
              *(_OWORD *)(v40 + 16) = 0u;
              *(_OWORD *)(v40 + 32) = 0u;
              *(_OWORD *)v40 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v40, v41);
            }
          }
          v6 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
          v42 = v55;
          ++*(_DWORD *)v6;
          if (!v42)
            goto LABEL_121;
        }
        RectForRange = WebCore::Editor::firstRectForRange(v6, (const WebCore::SimpleRange *)&v51);
        v23 = 0;
        if (a2->i32[0] >= (int)RectForRange && (int)v7 + (int)RectForRange > a2->i32[0])
        {
          v24 = a2->i32[1];
          v23 = v24 >= SHIDWORD(RectForRange) && HIDWORD(v7) + HIDWORD(RectForRange) > v24;
        }
        if (!*(_DWORD *)v6)
        {
          __break(0xC471u);
          JUMPOUT(0x195FEF5E4);
        }
        --*(_DWORD *)v6;
        v25 = v55;
        if (v23)
          goto LABEL_76;
        if (v55)
        {
          v26 = v53;
          v53 = 0;
          if (v26)
          {
            if (*((_DWORD *)v26 + 6) == 2)
            {
              if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v26, v7);
            }
            else
            {
              *((_DWORD *)v26 + 6) -= 2;
            }
          }
          v27 = v51;
          v51 = 0;
          if (v27)
          {
            if (*((_DWORD *)v27 + 6) == 2)
            {
              if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v27, v7);
            }
            else
            {
              *((_DWORD *)v27 + 6) -= 2;
            }
          }
        }
      }
      WebCore::VisiblePosition::next((unsigned __int8 *)&v56, 0, 0, (uint64_t)&v62);
      WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v56, (uint64_t)&v62, (uint64_t)&v51);
      v28 = v62;
      v62 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, v7);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      if (!v55)
        break;
      v4 = (WebCore::LocalFrame *)*((_QWORD *)v4 + 37);
      v10 = (WebCore::Node *)*((_QWORD *)v4 + 382);
      if (v10)
      {
        ++*(_DWORD *)v10;
      }
      else
      {
        v43 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v43, v4);
        v45 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
        *((_QWORD *)v4 + 382) = v43;
        if (v45)
        {
          WebCore::Editor::~Editor(v45, v44);
          if (*(_DWORD *)v46)
          {
            *(_QWORD *)(v46 + 496) = 0;
            *(_OWORD *)(v46 + 464) = 0u;
            *(_OWORD *)(v46 + 480) = 0u;
            *(_OWORD *)(v46 + 432) = 0u;
            *(_OWORD *)(v46 + 448) = 0u;
            *(_OWORD *)(v46 + 400) = 0u;
            *(_OWORD *)(v46 + 416) = 0u;
            *(_OWORD *)(v46 + 368) = 0u;
            *(_OWORD *)(v46 + 384) = 0u;
            *(_OWORD *)(v46 + 336) = 0u;
            *(_OWORD *)(v46 + 352) = 0u;
            *(_OWORD *)(v46 + 304) = 0u;
            *(_OWORD *)(v46 + 320) = 0u;
            *(_OWORD *)(v46 + 272) = 0u;
            *(_OWORD *)(v46 + 288) = 0u;
            *(_OWORD *)(v46 + 240) = 0u;
            *(_OWORD *)(v46 + 256) = 0u;
            *(_OWORD *)(v46 + 208) = 0u;
            *(_OWORD *)(v46 + 224) = 0u;
            *(_OWORD *)(v46 + 176) = 0u;
            *(_OWORD *)(v46 + 192) = 0u;
            *(_OWORD *)(v46 + 144) = 0u;
            *(_OWORD *)(v46 + 160) = 0u;
            *(_OWORD *)(v46 + 112) = 0u;
            *(_OWORD *)(v46 + 128) = 0u;
            *(_OWORD *)(v46 + 80) = 0u;
            *(_OWORD *)(v46 + 96) = 0u;
            *(_OWORD *)(v46 + 48) = 0u;
            *(_OWORD *)(v46 + 64) = 0u;
            *(_OWORD *)(v46 + 16) = 0u;
            *(_OWORD *)(v46 + 32) = 0u;
            *(_OWORD *)v46 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v46, v47);
          }
        }
        v10 = (WebCore::Node *)*((_QWORD *)v4 + 382);
        v48 = v55;
        ++*(_DWORD *)v10;
        if (!v48)
          goto LABEL_121;
      }
      v29 = WebCore::Editor::firstRectForRange(v10, (const WebCore::SimpleRange *)&v51);
      v30 = 0;
      if (a2->i32[0] >= (int)v29 && (int)v7 + (int)v29 > a2->i32[0])
      {
        v31 = a2->i32[1];
        v30 = v31 >= SHIDWORD(v29) && HIDWORD(v7) + HIDWORD(v29) > v31;
      }
      if (!*(_DWORD *)v10)
      {
        __break(0xC471u);
        JUMPOUT(0x195FEF624);
      }
      --*(_DWORD *)v10;
      v25 = v55;
      if (!v30)
      {
        if (v55)
        {
          v35 = v53;
          v53 = 0;
          if (v35)
          {
            if (*((_DWORD *)v35 + 6) == 2)
            {
              if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v35, v7);
            }
            else
            {
              *((_DWORD *)v35 + 6) -= 2;
            }
          }
          v36 = v51;
          v51 = 0;
          if (v36)
          {
            if (*((_DWORD *)v36 + 6) == 2)
            {
              if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v36, v7);
            }
            else
            {
              *((_DWORD *)v36 + 6) -= 2;
            }
          }
        }
        break;
      }
LABEL_76:
      if (v25)
      {
        v32 = v51;
        *((_DWORD *)v51 + 6) += 2;
        *(_QWORD *)a3 = v32;
        *(_DWORD *)(a3 + 8) = v52;
        v33 = v53;
        v34 = *((_DWORD *)v53 + 6);
        *((_DWORD *)v53 + 6) = v34 + 2;
        *(_QWORD *)(a3 + 16) = v33;
        *(_DWORD *)(a3 + 24) = v54;
        *(_BYTE *)(a3 + 32) = 1;
        v53 = 0;
        if (v34)
        {
          *((_DWORD *)v33 + 6) = v34;
          goto LABEL_79;
        }
        if ((*((_WORD *)v33 + 15) & 0x400) != 0)
        {
LABEL_79:
          v51 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v33, v7);
          v32 = v51;
          v51 = 0;
          if (!v32)
            goto LABEL_8;
        }
        if (*((_DWORD *)v32 + 6) == 2)
        {
          if ((*((_WORD *)v32 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v32, v7);
        }
        else
        {
          *((_DWORD *)v32 + 6) -= 2;
        }
        goto LABEL_8;
      }
LABEL_121:
      __break(1u);
LABEL_122:
      v58 = 0;
      v59 = v49;
      v60 = v50;
      WebCore::makeBoundaryPoint((uint64_t *)&v58, (uint64_t)&v62);
    }
  }
LABEL_7:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
LABEL_8:
  result = (unsigned int *)v56;
  v56 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void *WebCore::LocalFrameView::create@<X0>(WebCore::LocalFrameView *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  void *result;
  uint64_t v7;
  uint64_t v8;

  v5 = bmalloc::api::isoAllocate();
  result = WebCore::LocalFrameView::LocalFrameView((WebCore::LocalFrameView *)v5, this);
  *a2 = result;
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if ((*(_WORD *)(v8 + 658) & 4) != 0)
      {
        result = WebCore::ScrollView::show((uint64_t *)v5);
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 328) + 128) + 8) == *(_QWORD *)(v5 + 328))
        {
          *(_BYTE *)(v5 + 1381) = 0;
          *(_BYTE *)(v5 + 1372) = 0;
          return (void *)WebCore::LocalFrameView::adjustTiledBackingCoverage(v5);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::setCanHaveScrollbars(WebCore::ScrollView *this, int a2)
{
  *((_BYTE *)this + 1364) = a2;
  return WebCore::ScrollView::setCanHaveScrollbars(this, a2);
}

unsigned int *WebCore::LocalFrame::reinitializeDocumentSecurityContext(unsigned int *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  void *v4;

  v3 = *((_QWORD *)this + 37);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    this = (unsigned int *)WebCore::Document::initSecurityContext(v3, a2, a3);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return this;
}

_DWORD *WebCore::LocalFrame::disconnectView(WebCore::LocalFrame *this)
{
  _DWORD *result;
  _DWORD *v2;

  v2 = 0;
  WebCore::LocalFrame::setView((uint64_t)this, (uint64_t *)&v2);
  result = v2;
  if (v2)
  {
    if (v2[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v2 + 8))();
    else
      --v2[2];
  }
  return result;
}

uint64_t WebCore::LocalFrame::loaderClient(WebCore::LocalFrame *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 35) + 16);
}

WTF::StringImpl *WebCore::LocalFrame::documentURLForConsoleLog(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *result;
  void *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[5];

  v3 = *(_QWORD *)(a1 + 296);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3 + 736);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    v9[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v9);
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    result = v9[0];
    v9[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::LocalFrame::trackedRepaintRectsAsText@<X0>(WTF::StringImpl *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::LocalFrameView *v2;

  v2 = (WebCore::LocalFrameView *)*((_QWORD *)this + 36);
  if (v2)
  {
    ++*((_DWORD *)v2 + 2);
    this = WebCore::LocalFrameView::trackedRepaintRectsAsText(v2);
    if (*((_DWORD *)v2 + 2) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v2 + 8))(v2);
    else
      --*((_DWORD *)v2 + 2);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::LocalFrameView::trackedRepaintRectsAsText(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  float *v8;
  float *v9;
  double v10;
  int v11;
  double v12;
  int v13;
  double v14;
  int v15;
  double v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  char v27;
  int v28;
  __int16 v29;
  int v30;
  double v31;

  v2 = *((_QWORD *)this + 41);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(v2 + 296);
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    WebCore::Document::updateLayout(v5, 0, 0);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v28 = 0;
  v29 = 256;
  v30 = 0;
  if (*((_DWORD *)this + 267))
  {
    WTF::TextStream::operator<<();
    v7 = *((unsigned int *)this + 267);
    if ((_DWORD)v7)
    {
      v8 = (float *)*((_QWORD *)this + 132);
      v9 = &v8[4 * v7];
      do
      {
        WTF::TextStream::operator<<();
        v10 = *v8 * 64.0;
        if (v10 >= 2147483650.0)
        {
          v11 = 0x7FFFFFFF;
        }
        else if (v10 <= -2147483650.0)
        {
          v11 = 0x80000000;
        }
        else
        {
          v11 = (int)v10;
        }
        v31 = (float)((float)v11 * 0.015625);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v12 = v8[1] * 64.0;
        if (v12 >= 2147483650.0)
        {
          v13 = 0x7FFFFFFF;
        }
        else if (v12 <= -2147483650.0)
        {
          v13 = 0x80000000;
        }
        else
        {
          v13 = (int)v12;
        }
        v31 = (float)((float)v13 * 0.015625);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v14 = v8[2] * 64.0;
        if (v14 >= 2147483650.0)
        {
          v15 = 0x7FFFFFFF;
        }
        else if (v14 <= -2147483650.0)
        {
          v15 = 0x80000000;
        }
        else
        {
          v15 = (int)v14;
        }
        v31 = (float)((float)v15 * 0.015625);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v16 = v8[3] * 64.0;
        if (v16 >= 2147483650.0)
        {
          v17 = 0x7FFFFFFF;
        }
        else if (v16 <= -2147483650.0)
        {
          v17 = 0x80000000;
        }
        else
        {
          v17 = (int)v16;
        }
        v31 = (float)((float)v17 * 0.015625);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        v8 += 4;
      }
      while (v8 != v9);
    }
    WTF::TextStream::operator<<();
  }
  WTF::TextStream::release((WTF::TextStream *)&v24);
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      if (!v2)
        return result;
      goto LABEL_39;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v2)
    return result;
  do
  {
LABEL_39:
    v21 = __ldaxr(v3);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v3));
  if (!v22)
  {
    atomic_store(1u, v3);
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = off_1E31FE290;
    *((_QWORD *)v23 + 1) = v3;
    v24 = v23;
    WTF::ensureOnMainThread();
    result = v24;
    v24 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WebCore::Page *WebCore::LocalFrame::setPageZoomFactor(WebCore::LocalFrame *this, float a2)
{
  return WebCore::LocalFrame::setPageAndTextZoomFactors(this, a2, *((float *)this + 149));
}

WebCore::Page *WebCore::LocalFrame::setTextZoomFactor(WebCore::LocalFrame *this, float a2)
{
  return WebCore::LocalFrame::setPageAndTextZoomFactors(this, *((float *)this + 148), a2);
}

BOOL WebCore::LocalFrameView::didFirstLayout(WebCore::LocalFrameView *this)
{
  return *((_BYTE *)this + 475) == 0;
}

uint64_t WebCore::LocalFrameView::setScrollPosition(WebCore::LocalFrameView *this, WTF::StringImpl *a2, _BYTE *a3)
{
  char v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  int v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t result;
  unsigned __int8 *v25;
  void *v26;
  unsigned __int8 **v27;
  float v28[2];
  unsigned __int8 **v29;

  v6 = *((_BYTE *)this + 108);
  *((_BYTE *)this + 108) = *a3;
  v7 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = (char *)this + 64;
  *((_BYTE *)this + 1373) = 0;
  if ((*((_QWORD *)this + 109) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 840));
  WebCore::LocalFrameView::cancelScheduledTextFragmentIndicatorTimer((uint64_t)this, a2);
  v9 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 968))
      {
        v25 = (unsigned __int8 *)WebCore::ScrollableArea::scrollAnimator((WebCore::LocalFrameView *)((char *)this + 64));
        WebCore::Page::wheelEventTestMonitor(v10, &v29);
        WebCore::ScrollAnimator::setWheelEventTestMonitor(v25, &v29);
        v27 = v29;
        v29 = 0;
        if (v27)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v27, v26);
      }
    }
  }
  v11 = *((_QWORD *)this + 10);
  if (!v11)
  {
    v11 = WTF::fastMalloc((WTF *)0xB0);
    *(_QWORD *)v11 = off_1E3405EF0;
    *(_QWORD *)(v11 + 8) = v8;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = &off_1E3406D78;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_QWORD *)(v11 + 80) = 0;
    *(_QWORD *)(v11 + 88) = v11;
    *(_QWORD *)(v11 + 96) = 0;
    *(_QWORD *)(v11 + 104) = 0;
    *(_QWORD *)(v11 + 110) = 0;
    *(_QWORD *)(v11 + 120) = 0;
    v12 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v12 = 0;
    *(_DWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = v8;
    *(_BYTE *)(v12 + 24) = 0;
    *(_QWORD *)(v11 + 128) = v12;
    *(_BYTE *)(v11 + 136) = 0;
    *(_QWORD *)v11 = off_1E3354B08;
    *(_QWORD *)(v11 + 168) = 0;
    *(_DWORD *)(v11 + 140) = 0;
    *(_DWORD *)(v11 + 143) = 0;
    *(_QWORD *)(v11 + 156) = 0;
    *(_QWORD *)(v11 + 148) = 0;
    v13 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v11;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v11 = *((_QWORD *)this + 10);
    }
  }
  v14 = *((_QWORD *)this + 12);
  v15 = ((v14 & 0xFFFFFFFF00000000) + *(_QWORD *)a2) >> 32;
  *(float *)&v29 = (float)(int)(v14 + *(_QWORD *)a2);
  *((float *)&v29 + 1) = (float)(int)v15;
  v16 = ceilf(WebCore::ScrollAnimator::scrollOffsetAdjustedForSnapping(v11, (float *)&v29, a3[3]));
  if (v16 >= 2147500000.0)
  {
    v18 = 0x7FFFFFFF;
  }
  else if (v16 <= -2147500000.0)
  {
    v18 = 0x80000000;
  }
  else
  {
    v18 = (int)v16;
  }
  v19 = ceilf(v17);
  if (v19 >= 2147500000.0)
  {
    v20 = 0x7FFFFFFF00000000;
  }
  else if (v19 <= -2147500000.0)
  {
    v20 = 0x8000000000000000;
  }
  else
  {
    v20 = (unint64_t)(int)v19 << 32;
  }
  v21 = *((_QWORD *)this + 12);
  v22 = v18 - v21;
  v23 = v20 - (v21 & 0xFFFFFFFF00000000);
  v29 = (unsigned __int8 **)(v23 | v22);
  if (a3[2])
  {
    v28[0] = (float)v22;
    v28[1] = (float)SHIDWORD(v23);
    result = WebCore::ScrollableArea::scrollToPositionWithAnimation((WebCore::LocalFrameView *)((char *)this + 64), v28, (uint64_t)a3);
  }
  else
  {
    result = WebCore::ScrollView::setScrollPosition((uint64_t)this, (WebCore::IntPoint *)&v29, (uint64_t)a3);
  }
  *((_BYTE *)this + 108) = v6;
  return result;
}

float WebCore::LocalFrame::frameScaleFactor(WebCore::LocalFrame *this)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  int v5;
  WTF *v7;
  void *v8;

  v1 = *((_QWORD *)this + 3);
  v2 = 1.0;
  if (v1)
  {
    v4 = *(_QWORD *)(v1 + 8);
    if (v4)
    {
      v5 = (*(_DWORD *)v4)++;
      if (*(WebCore::LocalFrame **)(*((_QWORD *)this + 16) + 8) == this && !*(_BYTE *)(v4 + 1098))
        v2 = *(float *)(v4 + 356);
      if (v5)
      {
        *(_DWORD *)v4 = v5;
      }
      else
      {
        WebCore::Page::~Page((WebCore::Page *)v4);
        WTF::fastFree(v7, v8);
      }
    }
  }
  return v2;
}

void WebCore::LocalFrame::resumeActiveDOMObjectsAndAnimations(WebCore::LocalFrame *this)
{
  int v1;
  BOOL v2;
  int v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  double v10;
  int v11;
  uint64_t *v12[5];
  uint64_t *v13;
  uint64_t *v14;

  v1 = *((_DWORD *)this + 150);
  v2 = __OFSUB__(v1, 1);
  v3 = v1 - 1;
  if (v3 < 0 == v2)
  {
    *((_DWORD *)this + 150) = v3;
    if (!v3)
    {
      v5 = *((_QWORD *)this + 37);
      if (v5)
      {
        *(_DWORD *)(v5 + 24) += 2;
        WebCore::Document::resumeScheduledTasks(v5, 3);
        v7 = *(_QWORD *)(v5 + 2936);
        if (v7)
        {
          v8 = *(_DWORD *)v7 + 1;
          *(_DWORD *)v7 = v8;
          if (*(_BYTE *)(v7 + 80))
          {
            *(_QWORD *)(v7 + 72) = 0x7FF8000000000000;
            *(_BYTE *)(v7 + 80) = 0;
            WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(v7 + 16), &v13);
            WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t *)(v7 + 16), v12);
            while (v14 != v12[1])
            {
              WebCore::DocumentTimeline::resumeAnimations(*(WebCore::DocumentTimeline **)(*v14 + 8));
              WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v13);
            }
            v8 = *(_DWORD *)v7;
          }
          if (!v8)
            goto LABEL_22;
          *(_DWORD *)v7 = v8 - 1;
        }
        v9 = (_DWORD *)*((_QWORD *)this + 36);
        if (!v9)
        {
LABEL_16:
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
          return;
        }
        ++v9[2];
        ++v9[84];
        v10 = WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v9 + 84));
        v11 = v9[84];
        if (v11)
        {
          v9[84] = v11 - 1;
          if (v9[2] == 1)
            (*(void (**)(_DWORD *, double))(*(_QWORD *)v9 + 8))(v9, v10);
          else
            --v9[2];
          goto LABEL_16;
        }
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x195FF0234);
      }
    }
  }
}

uint64_t WebCore::LocalFrame::dropChildren(uint64_t this, void *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v2 = (uint64_t *)(this + 88);
  v3 = *(_QWORD **)(this + 88);
  if (v3)
  {
    v4 = this;
    v5 = (uint64_t *)(this + 96);
    do
    {
      v6 = (unsigned int *)(v3 + 1);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      if (!*v5 || (v8 = v5, *(_QWORD **)(*v5 + 8) != v3))
        v8 = (uint64_t *)(v3[9] + 80);
      v9 = v2;
      if ((_QWORD *)*v2 != v3)
      {
        v10 = v3[10];
        if (v10)
          v10 = *(_QWORD *)(v10 + 8);
        v9 = (uint64_t *)(v10 + 72);
      }
      v11 = (unsigned int *)v3[7];
      v3[7] = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      v14 = v3[10];
      v3[10] = 0;
      this = *v8;
      *v8 = v14;
      if (this)
      {
        do
        {
          v15 = __ldaxr((unsigned int *)this);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)this));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
      v17 = v3[9];
      v3[9] = 0;
      v18 = *v9;
      *v9 = v17;
      if (v18)
      {
        v19 = (unsigned int *)(v18 + 8);
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v24 = off_1E31FE290;
          v24[1] = v19;
          v26 = (uint64_t)v24;
          WTF::ensureOnMainThread();
          this = v26;
          if (v26)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      *(_DWORD *)(v4 + 104) = -1;
      do
      {
        v22 = __ldaxr(v6);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v6));
      if (!v23)
      {
        atomic_store(1u, v6);
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v25 = off_1E31FE290;
        v25[1] = v6;
        v27 = (uint64_t)v25;
        WTF::ensureOnMainThread();
        this = v27;
        if (v27)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      v3 = (_QWORD *)*v2;
    }
    while (*v2);
  }
  return this;
}

uint64_t WebCore::LocalFrame::fromJSContext(WebCore::LocalFrame *this, const OpaqueJSContext *a2)
{
  uint64_t v3;
  _BOOL4 v4;
  char **v5;
  BOOL v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t result;
  BOOL v11;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSDOMWindow::s_info;
  else
    v6 = 1;
  v7 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v6)
  {
    v8 = 16 * v3;
    do
    {
      v8 = *(_QWORD *)(v8 + 16);
      v7 = v8 != 0;
    }
    while ((char **)v8 != &WebCore::JSDOMWindow::s_info && v8 != 0);
  }
  if (v7)
  {
    result = (*(uint64_t (**)(_QWORD, const OpaqueJSContext *))(**((_QWORD **)this + 426) + 104))(*((_QWORD *)this + 426), a2);
    if (!result)
      return result;
    goto LABEL_13;
  }
  if ((_DWORD)v3)
    v11 = v5 == &WebCore::JSServiceWorkerGlobalScope::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSServiceWorkerGlobalScope::s_info && v5 != 0);
  }
  if (!v4)
    return 0;
  v13 = *((_QWORD *)this + 425);
  if (!*(_BYTE *)(v13 + 1776))
    return 0;
  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_46;
  }
  if (!*(_BYTE *)(v13 + 1776))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v14 = *(_OWORD *)(v13 + 1760);
  v23 = *(_OWORD *)(v13 + 1744);
  v24 = v14;
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  v15 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::Document::allDocumentsMap(void)::documents, (uint64_t *)&v23);
  if (!v15)
    return 0;
  v16 = v15[4];
  if (!v16)
    return 0;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    return 0;
  v18 = *(_QWORD *)(v17 + 528);
  if (!v18)
    return 0;
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
    return 0;
  v20 = *(_QWORD *)(v19 + 24);
  if (!v20 || !*(_QWORD *)(v20 + 8))
    return 0;
  v21 = *((_QWORD *)this + 425);
  if ((WTF::isMainThread((WTF *)v15) & 1) == 0)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x195FF0634);
  }
  if (!*(_BYTE *)(v21 + 1776))
    goto LABEL_46;
  v22 = *(_OWORD *)(v21 + 1760);
  v23 = *(_OWORD *)(v21 + 1744);
  v24 = v22;
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::Document::allDocumentsMap(void)::documents, (uint64_t *)&v23)[4]+ 8)+ 528)+ 8)+ 24)+ 8)+ 160);
LABEL_13:
  if (*(_BYTE *)(result + 144))
    return 0;
  return result;
}

uint64_t WebCore::LocalFrame::contentFrameFromWindowOrFrameElement(WebCore::LocalFrame *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  uint64_t v20;
  void *v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = 2;
  if (a2)
    v3 = (uint64_t)a2;
  if ((v3 & 0xFFFE000000000002) != 0)
    return 0;
  v4 = *(unsigned __int8 *)(v3 + 5);
  if (v4 < 0x17)
    return 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMWindow::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = 16 * v5;
    do
    {
      v9 = *(_QWORD *)(v9 + 16);
      v6 = v9 != 0;
    }
    while ((char **)v9 != &WebCore::JSDOMWindow::s_info && v9 != 0);
  }
  v11 = v3;
  if (v6)
    goto LABEL_52;
  if (v7 == &WebCore::JSWindowProxy::s_info)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v15 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v16 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v17 = (char **)(16 * v15);
    if ((_DWORD)v15)
      v18 = v17 == &WebCore::JSDOMWindow::s_info;
    else
      v18 = 1;
    if (!v18)
    {
      do
      {
        v17 = (char **)v17[2];
        v16 = v17 != 0;
      }
      while (v17 != &WebCore::JSDOMWindow::s_info && v17 != 0);
    }
    if (v16)
    {
LABEL_52:
      v12 = *(_DWORD **)(v11 + 3408);
      if (v12)
      {
        ++v12[6];
        v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 104))(v12);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 144))
            v14 = 0;
          else
            v14 = v13;
        }
        else
        {
          v14 = 0;
        }
        if (v12[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 72))(v12);
        else
          --v12[6];
        return v14;
      }
    }
  }
  if (v4 < 0xF0)
    return 0;
  v20 = *(_QWORD *)(v3 + 24);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 192))(v20))
    return 0;
  v23 = *(_DWORD *)(v20 + 24);
  *(_DWORD *)(v20 + 24) = v23 + 2;
  v24 = v20;
  v25 = *(_QWORD *)(v20 + 112);
  if (v25 && (v26 = *(_QWORD *)(v25 + 8)) != 0)
  {
    if (*(_BYTE *)(v26 + 144))
      v14 = 0;
    else
      v14 = v26;
  }
  else
  {
    v14 = 0;
  }
  if (v23)
  {
    *(_DWORD *)(v24 + 24) = v23;
  }
  else if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v24, v21);
  }
  return v14;
}

uint64_t WebCore::LocalFrame::documentURLDidChange(uint64_t this, const WTF::URL *a2)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t v4;
  int v5;
  WTF *v6;
  void *v7;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v3 = *(WebCore::Page **)(v2 + 8);
    if (v3)
    {
      v4 = this;
      v5 = (*(_DWORD *)v3)++;
      if (*(_QWORD *)(*(_QWORD *)(this + 128) + 8) == this)
      {
        WebCore::Page::setMainFrameURL(v3, a2);
        v9 = *(_QWORD *)(v4 + 280);
        ++*(_DWORD *)v9;
        this = (*(uint64_t (**)(_QWORD, const WTF::URL *))(**(_QWORD **)(v9 + 16) + 1208))(*(_QWORD *)(v9 + 16), a2);
        if (!*(_DWORD *)v9)
        {
          this = 286;
          __break(0xC471u);
          return this;
        }
        --*(_DWORD *)v9;
        v5 = *(_DWORD *)v3 - 1;
      }
      if (v5)
      {
        *(_DWORD *)v3 = v5;
      }
      else
      {
        WebCore::Page::~Page(v3);
        return WTF::fastFree(v6, v7);
      }
    }
  }
  return this;
}

_QWORD *WebCore::LocalFrame::dataDetectionResults(WebCore::LocalFrame *this)
{
  _QWORD *result;
  void *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  const void *v8;
  const void *v9;

  result = (_QWORD *)*((_QWORD *)this + 39);
  if (!result)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *result = 0;
    result[1] = 0;
    v4 = (WTF *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = result;
    if (v4)
    {
      v5 = *((_QWORD *)v4 + 1);
      if (v5)
      {
        v6 = *(unsigned int *)(v5 - 4);
        if ((_DWORD)v6)
        {
          v7 = (const void **)(v5 + 8);
          do
          {
            if (*(v7 - 1) != (const void *)-1)
            {
              v8 = *v7;
              *v7 = 0;
              if (v8)
                CFRelease(v8);
            }
            v7 += 2;
            --v6;
          }
          while (v6);
        }
        WTF::fastFree((WTF *)(v5 - 16), v3);
      }
      v9 = *(const void **)v4;
      *(_QWORD *)v4 = 0;
      if (v9)
        CFRelease(v9);
      WTF::fastFree(v4, v3);
      return (_QWORD *)*((_QWORD *)this + 39);
    }
  }
  return result;
}

unsigned int *WebCore::LocalFrame::frameWasDisconnectedFromOwner(unsigned int *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  WebCore::LocalDOMWindow *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    v3 = this;
    v4 = *(WebCore::LocalDOMWindow **)(v2 + 696);
    if (v4)
    {
      ++*((_DWORD *)v4 + 6);
      WebCore::LocalDOMWindow::willDetachDocumentFromFrame(v4);
      if (*((_DWORD *)v4 + 6) == 1)
        (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v4 + 72))(v4);
      else
        --*((_DWORD *)v4 + 6);
    }
    v5 = *((_QWORD *)v3 + 37);
    if (!v5)
      return WebCore::Document::detachFromFrame(0, a2);
    *(_DWORD *)(v5 + 24) += 2;
    this = *(unsigned int **)(v5 + 528);
    if (this)
    {
      v6 = *((_QWORD *)this + 1);
      if (!v6)
      {
        *(_QWORD *)(v5 + 528) = 0;
        do
        {
LABEL_10:
          v7 = __ldaxr(this);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, this));
        if (!v8)
        {
          atomic_store(1u, this);
          this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
        }
        v9 = *(_QWORD *)(v5 + 528);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
            this = WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FrameDestructionObserver>(v10 + 248, (_QWORD *)(v5 + 512), (uint64_t)v11);
        }
        goto LABEL_16;
      }
      WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::FrameDestructionObserver>(v6 + 248, (_QWORD *)(v5 + 512));
      this = *(unsigned int **)(v5 + 528);
      *(_QWORD *)(v5 + 528) = 0;
      if (this)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)(v5 + 528) = 0;
    }
LABEL_16:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::LocalFrame::checkedSelection@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 296) + 3064);
  *a2 = v2;
  ++*(_DWORD *)(v2 + 28);
  return this;
}

uint64_t WebCore::LocalFrame::requestSkipUserActivationCheckForStorageAccess(uint64_t a1, WTF::ASCIICaseInsensitiveHash *this)
{
  uint64_t v2;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  WTF **v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v2 = *(_QWORD *)(a1 + 648);
  if (!v2)
    return 0;
  v4 = (uint64_t *)(a1 + 648);
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::ASCIICaseInsensitiveHash::hash(this, this) & v5;
  v7 = (WTF **)(v2 + 8 * v6);
  if ((WTF::equal(*v7, 0, v8) & 1) != 0)
  {
LABEL_7:
    v12 = *v4;
    if (!*v4)
      return 0;
    v13 = *(unsigned int *)(v12 - 4);
    v7 = (WTF **)(v12 + 8 * v13);
  }
  else
  {
    v11 = 1;
    while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *(const WTF::StringImpl **)this, v10) & 1) == 0)
    {
      v6 = (v6 + v11) & v5;
      v7 = (WTF **)(v2 + 8 * v6);
      ++v11;
      if (WTF::equal(*v7, 0, v10))
        goto LABEL_7;
    }
    v12 = *v4;
    if (!*v4)
      goto LABEL_10;
    v13 = *(unsigned int *)(v12 - 4);
  }
  v12 += 8 * v13;
  if ((WTF **)v12 == v7)
    return 0;
LABEL_10:
  if ((WTF **)v12 != v7)
  {
    v14 = *v7;
    *v7 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    *v7 = (WTF *)-1;
    ++*(_DWORD *)(*v4 - 16);
    v15 = *v4;
    if (*v4)
      v16 = *(_DWORD *)(v15 - 12) - 1;
    else
      v16 = -1;
    *(_DWORD *)(v15 - 12) = v16;
    v18 = *v4;
    if (*v4)
    {
      v19 = 6 * *(_DWORD *)(v18 - 12);
      v20 = *(_DWORD *)(v18 - 4);
      if (v19 < v20 && v20 >= 9)
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v4, v20 >> 1, 0);
    }
  }
  return 1;
}

uint64_t WebCore::LocalFrame::didAccessWindowProxyPropertyViaOpener(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t IdentifierInternal;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _QWORD v24[3];
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(result + 617) & 1) == 0)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 296);
    if (v3)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v3 + 192), a2);
      LOBYTE(v26) = 0;
      DWORD2(v27) = -1;
      v5 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(_QWORD *, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_7[v5])(v24, &v26, v4 + 8);
        DWORD2(v27) = v5;
      }
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)&v26);
    v6 = DWORD2(v27);
    if ((result & 1) != 0)
      goto LABEL_30;
    if (DWORD2(v27) == 1)
      goto LABEL_30;
    v7 = *(_QWORD *)(v2 + 160);
    if (!v7)
      goto LABEL_30;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_30;
    v9 = *(_QWORD *)(v8 + 24);
    if (!v9)
      goto LABEL_30;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      goto LABEL_30;
    v11 = *(_QWORD *)(v10 + 208);
    if (!v11)
    {
      {
        v11 = WebCore::SecurityOrigin::opaqueOrigin(void)::origin;
      }
      else
      {
        v11 = WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)v11 = 1;
        IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
        v19 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
        if (v19 != -1)
        {
          v24[0] = &v22;
          v23 = (WTF::StringImpl *)v24;
          std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
        }
        if ((WebCore::Process::globalIdentifier & 1) == 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v20 = WebCore::Process::globalIdentifier;
        *(_QWORD *)(v11 + 8) = IdentifierInternal;
        *(_QWORD *)(v11 + 16) = v20;
        *(_DWORD *)(v11 + 32) = 1;
        v21 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v21 += 2;
        *(_QWORD *)(v11 + 40) = v21;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 54) = 0;
        *(_WORD *)(v11 + 62) = 1;
        WebCore::SecurityOrigin::opaqueOrigin(void)::origin = v11;
      }
    }
    LOBYTE(v24[0]) = 0;
    v25 = -1;
    v12 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(WTF::StringImpl **, _QWORD *, uint64_t))off_1E33FF740[v12])(&v23, v24, v11 + 8);
      v25 = v12;
    }
    result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v24);
    if ((result & 1) != 0)
    {
LABEL_27:
      v13 = v25;
      if (v25 == -1)
      {
LABEL_29:
        v6 = DWORD2(v27);
LABEL_30:
        if (v6 != -1)
          return ((uint64_t (*)(_QWORD *, __int128 *))off_1E33FF730[v6])(v24, &v26);
        return result;
      }
LABEL_28:
      result = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33FF730[v13])(&v23, v24);
      goto LABEL_29;
    }
    v13 = v25;
    if (v25 == 1)
      goto LABEL_28;
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v23, (const WebCore::SecurityOriginData *)&v26);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v22, (const WebCore::SecurityOriginData *)v24);
    if ((WTF::equal(v23, v22, v14) & 1) != 0)
    {
LABEL_21:
      v17 = v22;
      v22 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      result = (uint64_t)v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_27;
    }
    *(_BYTE *)(v2 + 617) |= 1u;
    v16 = *(_QWORD *)(v2 + 280);
    ++*(_DWORD *)v16;
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v16 + 16) + 1224))(*(_QWORD *)(v16 + 16), v24, 1);
    if (*(_DWORD *)v16)
    {
      --*(_DWORD *)v16;
      goto LABEL_21;
    }
    __break(0xC471u);
LABEL_44:
    JUMPOUT(0x195FF0F08);
  }
  return result;
}

uint64_t WebCore::LocalFrame::customUserAgent@<X0>(WebCore::LocalFrame *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  _DWORD *v6;

  v2 = *((_QWORD *)this + 35);
  v3 = 88;
  if (!*(_BYTE *)(v2 + 80))
    v3 = 96;
  result = *(_QWORD *)(v2 + v3);
  if (result)
  {
    v5 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v5 + 1;
    v6 = *(_DWORD **)(result + 3384);
    if (v6)
      *v6 += 2;
    *a2 = v6;
    if (v5)
      *(_DWORD *)(result + 24) = v5;
    else
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::LocalFrame::customUserAgentAsSiteSpecificQuirks@<X0>(WebCore::LocalFrame *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  _DWORD *v6;

  v2 = *((_QWORD *)this + 35);
  v3 = 88;
  if (!*(_BYTE *)(v2 + 80))
    v3 = 96;
  result = *(_QWORD *)(v2 + v3);
  if (result)
  {
    v5 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v5 + 1;
    v6 = *(_DWORD **)(result + 3392);
    if (v6)
      *v6 += 2;
    *a2 = v6;
    if (v5)
      *(_DWORD *)(result + 24) = v5;
    else
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::LocalFrame::customNavigatorPlatform@<X0>(WebCore::LocalFrame *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  _DWORD *v6;

  v2 = *((_QWORD *)this + 35);
  v3 = 88;
  if (!*(_BYTE *)(v2 + 80))
    v3 = 96;
  result = *(_QWORD *)(v2 + v3);
  if (result)
  {
    v5 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v5 + 1;
    v6 = *(_DWORD **)(result + 3400);
    if (v6)
      *v6 += 2;
    *a2 = v6;
    if (v5)
      *(_DWORD *)(result + 24) = v5;
    else
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::LocalFrame::advancedPrivacyProtections(WebCore::LocalFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 35);
  v2 = 88;
  if (!*(_BYTE *)(v1 + 80))
    v2 = 96;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
    return *(unsigned __int16 *)(v3 + 3514);
  else
    return 0;
}

uint64_t WebCore::paginationModeForRenderStyle(WebCore *this, const WebCore::RenderStyle *a2)
{
  int v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;

  v2 = (unsigned __int16)*((_DWORD *)this + 4) >> 13;
  if ((v2 - 7) >= 0xFFFFFFFE)
  {
    switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
    {
      case 1:
        v5 = (*((unsigned __int8 *)this + 43) >> 2) & 1;
        v4 = 1;
LABEL_14:
        v7 = 0;
        v6 = 0;
        break;
      case 2:
      case 4:
        v4 = 0;
        v5 = (*((unsigned __int8 *)this + 43) >> 2) & 1;
LABEL_17:
        v7 = 0;
        v6 = 1;
        break;
      case 3:
      case 5:
        v4 = 0;
        goto LABEL_5;
      default:
        v4 = 1;
LABEL_5:
        v5 = (*((unsigned __int8 *)this + 43) >> 2) & 1;
        switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
        {
          case 1:
          case 3:
          case 5:
            goto LABEL_14;
          case 2:
          case 4:
            goto LABEL_17;
          default:
            v6 = 0;
            v7 = 1;
            break;
        }
        break;
    }
    if (v2 == 5)
    {
      v8 = (v4 & (v5 ^ 1) | v6) == 0;
      v3 = 1;
    }
    else
    {
      v8 = (v7 | v5 & ~v4) == 0;
      v3 = 3;
    }
    if (v8)
      ++v3;
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t WebCore::LocalFrameView::scheduleScrollEvent(WebCore::LocalFrameView *this)
{
  return WebCore::EventHandler::scheduleScrollEvent(*(_QWORD *)(*((_QWORD *)this + 41) + 640));
}

_QWORD *WebCore::LocalFrameView::scrollToFocusedElementTimerFired(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  WebCore::Node *v4;
  WebCore::Node *v5;
  uint64_t v6;
  BOOL v7;
  WebCore::RenderElement *v8;
  uint64_t v9;
  int *v10[3];
  __int16 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  _OWORD v15[2];
  BOOL v16;
  WebCore::Node *v17;

  ++*((_DWORD *)this + 2);
  if (!*((_BYTE *)this + 1373))
  {
    __break(0xC471u);
    JUMPOUT(0x195FF14A4);
  }
  v1 = this;
  v2 = *(_QWORD *)(this[41] + 296);
  if (v2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    this = (_QWORD *)WebCore::Document::updateLayout(v2, 2u, 0);
    if (!*((_BYTE *)v1 + 1373)
      || (v1[109] & 0xFFFFFFFFFFFFLL) != 0 && *(double *)((v1[109] & 0xFFFFFFFFFFFFLL) + 8) != 0.0
      || (*((_BYTE *)v1 + 1373) = 0, (v4 = *(WebCore::Node **)(v2 + 1248)) == 0))
    {
LABEL_24:
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
      goto LABEL_26;
    }
    *((_DWORD *)v4 + 6) += 2;
    this = (*(_QWORD *(**)(WebCore::Node **__return_ptr, WebCore::Node *))(*(_QWORD *)v4 + 672))(&v17, v4);
    v5 = v17;
    if (v17)
    {
      v6 = **((_QWORD **)v17 + 5);
      if (v6)
        v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
      else
        v7 = 1;
      if (v7 || *(_BYTE *)(v6 + 193))
      {
        this = v17;
      }
      else
      {
        v9 = *(_QWORD *)(v6 + 200);
        if (v9)
        {
          this = *(_QWORD **)(v9 + 8);
          if (this)
            *((_DWORD *)this + 6) += 2;
        }
        else
        {
          this = 0;
        }
        v17 = (WebCore::Node *)this;
        if (*((_DWORD *)v5 + 6) == 2)
        {
          if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v5, v3);
            this = v17;
          }
        }
        else
        {
          *((_DWORD *)v5 + 6) -= 2;
        }
      }
      v8 = (WebCore::RenderElement *)(this[8] & 0xFFFFFFFFFFFFLL);
      if (!v8)
        goto LABEL_19;
      if ((*(_BYTE *)((this[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195FF14C4);
      }
      if ((*(_BYTE *)((this[8] & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
        && (*(_BYTE *)((this[8] & 0xFFFFFFFFFFFFLL) + 0x35) & 4) != 0)
      {
LABEL_19:
        v17 = 0;
      }
      else
      {
        v16 = 0;
        WebCore::RenderElement::absoluteAnchorRectWithScrollMargin(v8, &v16, (uint64_t)v15);
        v14 = v15[0];
        v12 = v15[1];
        LOBYTE(v10[0]) = *((_BYTE *)v1 + 1330);
        v10[1] = (int *)&WebCore::ScrollAlignment::alignCenterIfNeeded;
        v10[2] = (int *)&WebCore::ScrollAlignment::alignCenterIfNeeded;
        v11 = 0;
        v13 = 1;
        WebCore::LocalFrameView::scrollRectToVisible(&v14, (uint64_t)v8, v16, v10);
        this = v17;
        v17 = 0;
        if (!this)
          goto LABEL_22;
      }
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, v3);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
LABEL_22:
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef(v4, v3);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
    goto LABEL_24;
  }
LABEL_26:
  if (*((_DWORD *)v1 + 2) == 1)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
  --*((_DWORD *)v1 + 2);
  return this;
}

uint64_t WebCore::LocalFrameView::speculativeTilingEnableTimerFired(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 1381))
  {
    v1 = this;
    *(_BYTE *)(this + 1381) = WebCore::shouldEnableSpeculativeTilingDuringLoading(*(WebCore **)(*(_QWORD *)(this + 328) + 24), (const WebCore::LocalFrameView *)*(unsigned __int8 *)(this + 1375));
    return WebCore::LocalFrameView::adjustTiledBackingCoverage(v1);
  }
  return this;
}

WTF::StringImpl *WebCore::LocalFrameView::textFragmentIndicatorTimerFired(WTF::StringImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int32x2_t v14;
  int8x8_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  int32x2_t v20;
  int8x8_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int32x2_t v26;
  int8x8_t v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int32x2_t v32;
  int8x8_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::TextIndicator *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF *v53;
  WTF *v54;
  WebCore::TextIndicator *v55;
  void *v56;
  uint64_t v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  void *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  int8x8_t v73;
  _OWORD v74[3];
  WTF *v75;
  int v76;
  int v77;
  int v78;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  int v83;
  WTF::StringImpl *v84[9];
  uint64_t v85;
  WTF *v86;
  int v87;
  unsigned int v88;
  WebCore::TextIndicator *v89;
  _BYTE v90[104];
  char v91;
  _BYTE v92[128];
  WTF::StringImpl *v93;
  int v94;
  uint64_t v95;
  int v96;

  v1 = (uint64_t)this;
  ++*((_DWORD *)this + 2);
  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if ((*((_QWORD *)this + 123) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WTF::StringImpl *)WebCore::TimerBase::stopSlowCase((WTF::StringImpl *)((char *)this + 952));
  if (*(_BYTE *)(v1 + 640))
  {
    WebCore::plainText((_DWORD *)(v1 + 608), 0, 0, (const WTF::String *)v84);
    v5 = WTF::equal(*(WTF **)(v1 + 648), v84[0], v3);
    this = v84[0];
    v84[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v4);
        if (!v5)
          goto LABEL_84;
LABEL_8:
        if (!*(_BYTE *)(v1 + 640))
        {
          std::__throw_bad_optional_access[abi:sn180100]();
LABEL_113:
          v70 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (!v72)
          {
            atomic_store(1u, v70);
            WTF::fastFree((WTF *)v70, v17);
          }
LABEL_60:
          v50 = v81;
          v81 = 0;
          if (v50)
          {
            if (v50[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
            else
              --v50[2];
          }
          v51 = v80;
          v80 = 0;
          if (v51)
          {
            if (v51[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
            else
              --v51[2];
          }
          v52 = v79;
          v79 = 0;
          if (v52)
          {
            if (v52[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
            else
              --v52[2];
          }
          v53 = v75;
          if (v75)
          {
            v75 = 0;
            v76 = 0;
            WTF::fastFree(v53, v17);
          }
          if (*(_DWORD *)v2 == 1)
          {
            WebCore::Page::~Page(v2);
            WTF::fastFree(v60, v61);
          }
          else
          {
            --*(_DWORD *)v2;
          }
LABEL_73:
          WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v84, v17);
          v54 = v86;
          if (v86)
          {
            v86 = 0;
            v87 = 0;
            WTF::fastFree(v54, v8);
          }
          goto LABEL_75;
        }
        v6 = *(WTF::StringImpl **)(v1 + 608);
        *((_DWORD *)v6 + 6) += 2;
        v93 = v6;
        v94 = *(_DWORD *)(v1 + 616);
        v7 = *(_QWORD *)(v1 + 624);
        *(_DWORD *)(v7 + 24) += 2;
        v95 = v7;
        v96 = *(_DWORD *)(v1 + 632);
        WebCore::VisibleSelection::VisibleSelection((uint64_t)v90, (uint64_t)&v93, 1, 0);
        v91 = 1;
        WebCore::TemporarySelectionChange::TemporarySelectionChange((uint64_t)v92, v2, (uint64_t)v90, 449);
        if (v91)
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v90);
        WebCore::LocalFrameView::maintainScrollPositionAtScrollToTextFragmentRange((WebCore::LocalFrameView *)v1, (WebCore::SimpleRange *)&v93);
        WebCore::TextIndicator::createWithRange((uint64_t)&v93, (void *)0x100, 1, (uint64_t *)&v89, 2.0, 1.0);
        v9 = *(_QWORD *)(*(_QWORD *)(v1 + 328) + 24);
        if (!v9)
          goto LABEL_75;
        v10 = *(_QWORD *)(v9 + 8);
        if (!v10)
          goto LABEL_75;
        if (!v89)
        {
LABEL_78:
          WebCore::TemporarySelectionChange::~TemporarySelectionChange((WebCore::TemporarySelectionChange *)v92, v8);
          v57 = v95;
          v95 = 0;
          if (v57)
          {
            if (*(_DWORD *)(v57 + 24) == 2)
            {
              if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v57, v56);
            }
            else
            {
              *(_DWORD *)(v57 + 24) -= 2;
            }
          }
          this = v93;
          v93 = 0;
          if (this)
          {
            if (*((_DWORD *)this + 6) == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                this = (WTF::StringImpl *)WebCore::Node::removedLastRef(this, v56);
            }
            else
            {
              *((_DWORD *)this + 6) -= 2;
            }
          }
          goto LABEL_84;
        }
        v11 = *(_QWORD *)(v10 + 160);
        if (!v11 || *(_BYTE *)(v11 + 144) != 0)
        {
LABEL_75:
          v55 = v89;
          v89 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 1)
            {
              WebCore::TextIndicator::~TextIndicator(v55, v8);
              WTF::fastFree(v58, v59);
            }
            else
            {
              --*(_DWORD *)v55;
            }
          }
          goto LABEL_78;
        }
        WebCore::RenderObject::absoluteTextRects((uint64_t)&v93, 0, (uint64_t)&v86);
        if (v88)
        {
          v13 = *(_QWORD *)(v11 + 640);
          v14 = vsra_n_s32(*(int32x2_t *)v86, (int32x2_t)vsra_n_u32(*(uint32x2_t *)((char *)v86 + 8), *(uint32x2_t *)((char *)v86 + 8), 0x1FuLL), 1uLL);
          v15 = (int8x8_t)vcgt_s32(v14, (int32x2_t)0xFE000000FE000000);
          *(int8x8_t *)&v74[0] = vorr_s8((int8x8_t)(*(_QWORD *)&v15 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v14), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v14, 6uLL)), v15));
          WebCore::EventHandler::hitTestResultAtPoint(v13, (int *)v74, 0x1003u, (uint64_t)v84);
          v16 = v85;
          if (v85)
            *(_DWORD *)(v85 + 24) += 2;
          v18 = WebCore::intersects<(WebCore::TreeType)0>((int *)&v93, v16);
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16, v17);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
          if (!v18)
            goto LABEL_73;
          if (v88 >= 2)
          {
            v19 = *(_QWORD *)(v11 + 640);
            v20 = vsra_n_s32(*(int32x2_t *)((char *)v86 + 16), (int32x2_t)vsra_n_u32(*(uint32x2_t *)((char *)v86 + 24), *(uint32x2_t *)((char *)v86 + 24), 0x1FuLL), 1uLL);
            v21 = (int8x8_t)vcgt_s32(v20, (int32x2_t)0xFE000000FE000000);
            v73 = vorr_s8((int8x8_t)(*(_QWORD *)&v21 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v20), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v20, 6uLL)), v21));
            WebCore::EventHandler::hitTestResultAtPoint(v19, (int *)&v73, 0x1003u, (uint64_t)v74);
            WebCore::HitTestResult::operator=((uint64_t)v84, (uint64_t)v74);
            WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v74, v22);
            v23 = v85;
            if (v85)
              *(_DWORD *)(v85 + 24) += 2;
            v24 = WebCore::intersects<(WebCore::TreeType)0>((int *)&v93, v23);
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v17);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
            if (!v24)
              goto LABEL_73;
            if (v88 >= 4)
            {
              v25 = *(_QWORD *)(v11 + 640);
              v26 = vsra_n_s32(*(int32x2_t *)((char *)v86 + 16 * v88 - 16), (int32x2_t)vsra_n_u32(*(uint32x2_t *)((char *)v86 + 16 * v88 - 8), *(uint32x2_t *)((char *)v86 + 16 * v88 - 8), 0x1FuLL), 1uLL);
              v27 = (int8x8_t)vcgt_s32(v26, (int32x2_t)0xFE000000FE000000);
              v73 = vorr_s8((int8x8_t)(*(_QWORD *)&v27 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v26), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v26, 6uLL)), v27));
              WebCore::EventHandler::hitTestResultAtPoint(v25, (int *)&v73, 0x1003u, (uint64_t)v74);
              WebCore::HitTestResult::operator=((uint64_t)v84, (uint64_t)v74);
              WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v74, v28);
              v29 = v85;
              if (v85)
                *(_DWORD *)(v85 + 24) += 2;
              v30 = WebCore::intersects<(WebCore::TreeType)0>((int *)&v93, v29);
              if (*(_DWORD *)(v29 + 24) == 2)
              {
                if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v29, v17);
              }
              else
              {
                *(_DWORD *)(v29 + 24) -= 2;
              }
              if (!v30)
                goto LABEL_73;
              if (v88 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x195FF1C90);
              }
              v31 = *(_QWORD *)(v11 + 640);
              v32 = vsra_n_s32(*(int32x2_t *)((char *)v86 + 16 * v88 - 32), (int32x2_t)vsra_n_u32(*(uint32x2_t *)((char *)v86 + 16 * v88 - 24), *(uint32x2_t *)((char *)v86 + 16 * v88 - 24), 0x1FuLL), 1uLL);
              v33 = (int8x8_t)vcgt_s32(v32, (int32x2_t)0xFE000000FE000000);
              v73 = vorr_s8((int8x8_t)(*(_QWORD *)&v33 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v32), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v32, 6uLL)), v33));
              WebCore::EventHandler::hitTestResultAtPoint(v31, (int *)&v73, 0x1003u, (uint64_t)v74);
              WebCore::HitTestResult::operator=((uint64_t)v84, (uint64_t)v74);
              WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v74, v34);
              v35 = v85;
              if (v85)
                *(_DWORD *)(v85 + 24) += 2;
              v36 = WebCore::intersects<(WebCore::TreeType)0>((int *)&v93, v35);
              if (*(_DWORD *)(v35 + 24) == 2)
              {
                if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v35, v17);
              }
              else
              {
                *(_DWORD *)(v35 + 24) -= 2;
              }
              if (!v36)
                goto LABEL_73;
            }
          }
          v37 = *(_QWORD *)(v2 + 528);
          if (v37 && (v38 = *(_QWORD *)(v37 + 8)) != 0 && (v39 = *(_QWORD *)(v38 + 24)) != 0)
          {
            v2 = *(_QWORD *)(v39 + 8);
            if (v2)
              ++*(_DWORD *)v2;
          }
          else
          {
            v2 = 0;
          }
          v40 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16);
          v41 = v89;
          v42 = *(_OWORD *)((char *)v89 + 40);
          v43 = *(_OWORD *)((char *)v89 + 24);
          v74[0] = *(_OWORD *)((char *)v89 + 8);
          v74[1] = v43;
          v74[2] = v42;
          v44 = *((unsigned int *)v89 + 17);
          v75 = 0;
          v76 = 0;
          v77 = v44;
          if (!(_DWORD)v44)
          {
LABEL_52:
            v78 = *((_DWORD *)v41 + 18);
            v45 = (_DWORD *)*((_QWORD *)v41 + 10);
            if (v45)
              ++v45[2];
            v79 = v45;
            v46 = (_DWORD *)*((_QWORD *)v41 + 11);
            if (v46)
              ++v46[2];
            v80 = v46;
            v47 = (_DWORD *)*((_QWORD *)v41 + 12);
            if (v47)
              ++v47[2];
            v48 = *((_QWORD *)v41 + 13);
            v81 = v47;
            v82 = v48;
            if ((v48 & 0x8000000000000) != 0)
            {
              v68 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 + 1, v68));
            }
            v83 = *((_DWORD *)v41 + 28);
            (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v40 + 808))(v40, v74);
            v49 = v82;
            if ((v82 & 0x8000000000000) == 0)
              goto LABEL_60;
            goto LABEL_113;
          }
          if (!(v44 >> 28))
          {
            v62 = v40;
            v63 = (WTF *)WTF::fastMalloc((WTF *)(16 * v44));
            v76 = v44;
            v75 = v63;
            v64 = *((unsigned int *)v41 + 17);
            v40 = v62;
            if ((_DWORD)v64)
            {
              v65 = (__int128 *)*((_QWORD *)v41 + 7);
              v66 = 16 * v64;
              do
              {
                v67 = *v65++;
                *(_OWORD *)v63 = v67;
                v63 = (WTF *)((char *)v63 + 16);
                v66 -= 16;
              }
              while (v66);
            }
            goto LABEL_52;
          }
          __break(0xC471u);
        }
        else
        {
          __break(0xC471u);
        }
        JUMPOUT(0x195FF1C88);
      }
      *(_DWORD *)this -= 2;
    }
    if (!v5)
      goto LABEL_84;
    goto LABEL_8;
  }
LABEL_84:
  if (*(_DWORD *)(v1 + 8) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  --*(_DWORD *)(v1 + 8);
  return this;
}

uint64_t WebCore::LocalFrameView::resetScrollbars(WebCore::LocalFrameView *this)
{
  int v2;
  int v3;

  *((_BYTE *)this + 475) = 1;
  WebCore::ScrollView::setScrollbarsSuppressed((uint64_t)this, 1, 0);
  if (*((_BYTE *)this + 1364))
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v2 = 1;
    v3 = 1;
  }
  WebCore::ScrollView::setScrollbarModes((uint64_t)this, v2, v3, 0, 0);
  return WebCore::ScrollView::setScrollbarsSuppressed((uint64_t)this, 0, 0);
}

void `non-virtual thunk to'WebCore::LocalFrameView::~LocalFrameView(WebCore::LocalFrameView *this)
{
  WebCore::LocalFrameView::~LocalFrameView((WebCore::LocalFrameView *)((char *)this - 64));
}

{
  void *v2;
  void *v3;

  WebCore::LocalFrameView::~LocalFrameView((WebCore::LocalFrameView *)((char *)this - 64));
  if (*((_DWORD *)this + 18))
    bzero(v2, 0x570uLL);
  else
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
}

uint64_t WebCore::LocalFrameView::axObjectCache(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::Document *v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  WebCore::Document *v7;
  uint64_t result;
  uint64_t v10;
  int v11;

  v1 = *((_QWORD *)this + 41);
  v2 = *(WebCore::Document **)(v1 + 296);
  v3 = WebCore::Document::hasEverCreatedAnAXObjectCache;
  if (v2)
    v4 = WebCore::Document::hasEverCreatedAnAXObjectCache == 0;
  else
    v4 = 1;
  if (v4
    || (v11 = WebCore::Document::hasEverCreatedAnAXObjectCache,
        v10 = v1,
        result = WebCore::Document::existingAXObjectCacheSlow(v2),
        v1 = v10,
        v3 = v11,
        !result))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8);
    if (v5 == v1)
      return 0;
    if (!v5 || *(_BYTE *)(v5 + 144) != 0)
      return 0;
    v7 = *(WebCore::Document **)(v5 + 296);
    if (!v7 || v3 == 0)
      return 0;
    else
      return WebCore::Document::existingAXObjectCacheSlow(v7);
  }
  return result;
}

uint64_t WebCore::LocalFrameView::willBeDestroyed(WebCore::LocalFrameView *this)
{
  uint64_t result;
  uint64_t v3;

  WebCore::ScrollView::setHasScrollbarInternal(this, (uint64_t *)this + 19, 0, 0, 0);
  result = WebCore::ScrollView::setHasScrollbarInternal(this, (uint64_t *)this + 20, 1, 0, 0);
  v3 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v3)
    return WebCore::RenderObjectDeleter::operator()((uint64_t)this + 664, v3);
  return result;
}

float std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>(unint64_t *a1, unint64_t *a2, float result)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t *v10;

  if (*((_BYTE *)a1 + 8))
  {
    v3 = *a1;
    v4 = *a2;
    if ((*a1 & 0x8000000000000) != 0)
    {
      if ((v4 & 0x8000000000000) == 0
        || (result = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10),
            *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4))
        || *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC)
        || result != *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v3) != HIBYTE(v4)
        || BYTE6(v3) != BYTE6(v4))
      {
        v9 = a2;
        v10 = a1;
        v6 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
          a2 = v9;
          a1 = v10;
        }
        goto LABEL_7;
      }
    }
    else if (v3 != v4 || (v4 & 0x8000000000000) != 0)
    {
LABEL_7:
      *a1 = *a2;
      *a2 = 0;
    }
  }
  else
  {
    *a1 = 0;
    if (*a2)
    {
      *a1 = *a2;
      *a2 = 0;
    }
    *((_BYTE *)a1 + 8) = 1;
  }
  return result;
}

void WebCore::LocalFrameView::didReplaceMultipartContent(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::LegacyTileCache *v2;

  v1 = *((_QWORD *)this + 4);
  if (!v1 || !*(_QWORD *)(v1 + 8))
  {
    v2 = (WebCore::LegacyTileCache *)objc_msgSend((id)objc_msgSend(*((id *)this + 5), "window"), "tileCache");
    if (v2)
      WebCore::LegacyTileCache::setTilingMode(v2, 0);
  }
}

WebCore::LocalFrameView *WebCore::LocalFrameView::viewportContentsChanged(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::LocalFrameView *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 41);
  if (*(_QWORD *)(v1 + 288))
  {
    v2 = this;
    v3 = *(_QWORD *)(v1 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 232);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      }
    }
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E33FF9B8;
    v7 = v6;
    WebCore::LocalFrameView::applyRecursivelyWithVisibleRect(v2, &v7);
    return (WebCore::LocalFrameView *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t WebCore::LocalFrameView::updateCanHaveScrollbars(WebCore::LocalFrameView *this)
{
  int v1;
  int v2;
  BOOL v3;
  BOOL v5;
  int v6;
  int v8;
  BOOL v10;
  WebCore::LocalFrameView *v11;
  WebCore::LocalFrameView *v12;
  __int16 v13;
  __int16 v14;

  v13 = 0;
  if (*((_QWORD *)this + 5))
  {
    v11 = this;
    WebCore::ScrollView::platformScrollbarModes((uint64_t)this, (uint64_t)&v13 + 1, (uint64_t)&v13);
    this = v11;
    v1 = HIBYTE(v13);
    v2 = v13;
    v3 = *((_QWORD *)v11 + 5) == 0;
  }
  else
  {
    v1 = *((unsigned __int8 *)this + 168);
    HIBYTE(v13) = *((_BYTE *)this + 168);
    v2 = *((unsigned __int8 *)this + 169);
    LOBYTE(v13) = *((_BYTE *)this + 169);
    v3 = 1;
  }
  v5 = v1 != 1 || v2 != 1;
  *((_BYTE *)this + 1364) = v5;
  v14 = 0;
  if (v3)
  {
    HIBYTE(v14) = *((_BYTE *)this + 168);
    v6 = *((unsigned __int8 *)this + 169);
    LOBYTE(v14) = *((_BYTE *)this + 169);
  }
  else
  {
    v12 = this;
    v10 = v5;
    WebCore::ScrollView::platformScrollbarModes((uint64_t)this, (uint64_t)&v14 + 1, (uint64_t)&v14);
    v5 = v10;
    this = v12;
    v6 = v14;
  }
  if (v6 == 1 && v5)
  {
    v6 = 0;
    LOBYTE(v14) = 0;
  }
  else if (!v5)
  {
    v6 = 1;
    v14 = 257;
    v8 = 1;
    return WebCore::ScrollView::setScrollbarModes((uint64_t)this, v8, v6, 0, 0);
  }
  v8 = HIBYTE(v14);
  if (HIBYTE(v14) == 1)
  {
    v8 = 0;
    HIBYTE(v14) = 0;
  }
  return WebCore::ScrollView::setScrollbarModes((uint64_t)this, v8, v6, 0, 0);
}

uint64_t WebCore::LocalFrameView::scrollbarWidthStyle(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1272);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    if (*(_QWORD *)(v1 + 1944))
      return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 586);
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalFrameView::createScrollbar@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  WebCore::LocalFrameView::rootElementForCustomScrollbarPartStyle((uint64_t)&v18, (WebCore::LocalFrameView *)a1);
  v6 = v18;
  if (!v18)
  {
    v7 = *(_QWORD *)(a1[41] + 120);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v9 + 2;
        if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            goto LABEL_33;
          v10 = (*(unsigned __int8 *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
          if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
            LOBYTE(v10) = 0;
          if ((v10 & 1) != 0)
            v11 = *(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL;
          else
            v11 = 0;
        }
        else
        {
          v11 = 0;
        }
        if (v9)
        {
          *(_DWORD *)(v8 + 24) = v9;
        }
        else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
        }
        if (v11
          && (*(_BYTE *)(v11 + 103) & 2) != 0
          && !WebCore::RenderStyle::usesStandardScrollbarStyle((WebCore::RenderStyle *)(v11 + 80)))
        {
          return WebCore::RenderScrollbar::createCustomScrollbar((uint64_t)(a1 + 8), a2, 0, a1[41], a3);
        }
      }
    }
    v12 = *(_QWORD *)(a1[41] + 296);
    if (!v12)
      goto LABEL_23;
    v13 = *(_QWORD *)(v12 + 1272);
    if (!v13)
      goto LABEL_23;
    v14 = *(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v14)
      goto LABEL_23;
    if ((*(_BYTE *)(v14 + 45) & 2) == 0)
    {
      if (*(_QWORD *)(v12 + 1944))
      {
        v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 586);
LABEL_21:
        v16 = WTF::fastMalloc((WTF *)0xD0);
        result = WebCore::Scrollbar::Scrollbar(v16, (uint64_t)(a1 + 8), a2, v15, 0, 0);
        *a3 = result;
        return result;
      }
LABEL_23:
      v15 = 0;
      goto LABEL_21;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x195FF23A0);
  }
  result = WebCore::RenderScrollbar::createCustomScrollbar((uint64_t)(a1 + 8), a2, v18, 0, a3);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

WebCore::LocalFrameView *WebCore::LocalFrameView::contentsResized(WebCore::LocalFrameView *this)
{
  if (*((_BYTE *)this + 312) == 1)
    return WebCore::LocalFrameView::updateTiledBackingAdaptiveSizing(this);
  return this;
}

double WebCore::LocalFrameView::applyPaginationToViewport(WebCore::LocalFrameView *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  double result;
  uint64_t v11;
  int v12;
  WebCore::LocalFrameView *v13;
  int v14;
  WebCore::RenderObject *v15;
  _BYTE v16[4];
  unsigned int v17;
  char v18;

  v2 = *((_QWORD *)this + 41);
  v3 = *(_QWORD *)(v2 + 296);
  if (v3 && (v4 = *(_QWORD *)(v3 + 1272)) != 0 && (v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FF2558);
    }
    if ((*(_WORD *)(v4 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v6 = *(_QWORD *)(v4 + 80);
      if (v6)
      {
        while ((*(_WORD *)(v6 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v6 = *(_QWORD *)(v6 + 56);
          if (!v6)
            goto LABEL_16;
        }
        v7 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
        if (v7)
        {
          if ((*(_BYTE *)(v7 + 45) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195FF2578);
          }
          if (!(*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x16) & 8 | *(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                             + 0x61) & 0x1C))
            v5 = v7;
        }
      }
    }
LABEL_16:
    if (((unsigned __int16)*(_DWORD *)(v5 + 96) >> 13) - 5 <= 1)
    {
      v13 = this;
      v11 = v5;
      v14 = WebCore::paginationModeForRenderStyle((WebCore *)(v5 + 80), a2);
      v15 = (WebCore::RenderObject *)v11;
      WebCore::GapLength::GapLength((uint64_t)v16, *(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 376);
      if (!v16[0]
        && ((*(_BYTE *)(v11 + 45) & 4) != 0
         || (v15 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v11)) != 0))
      {
        v12 = WebCore::RenderBox::contentLogicalWidth(v15);
        v8 = (int)WebCore::valueForLength((unsigned __int8 *)&v17, v12) / 64;
      }
      else
      {
        v8 = 0;
      }
      if (v18 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17);
      }
      this = v13;
      v9 = v14;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    if (*((unsigned __int8 *)this + 1316) != v9
      || *((_BYTE *)this + 1317)
      || *((_DWORD *)this + 330)
      || *((_DWORD *)this + 331) != v8)
    {
      *((_BYTE *)this + 1316) = v9;
      *((_BYTE *)this + 1317) = 0;
      *((_DWORD *)this + 330) = 0;
      *((_DWORD *)this + 331) = v8;
      return WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)(*(_QWORD *)(*((_QWORD *)this + 41) + 296) + 1328), a2);
    }
  }
  else if (*((_BYTE *)this + 1316) || *((_BYTE *)this + 1317) || *((_DWORD *)this + 330) || *((_DWORD *)this + 331))
  {
    *((_DWORD *)this + 331) = 0;
    *(_QWORD *)((char *)this + 1316) = 0;
    return WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)(*(_QWORD *)(v2 + 296) + 1328), a2);
  }
  return result;
}

uint64_t WebCore::GapLength::GapLength(uint64_t a1, uint64_t a2)
{
  int *v3;
  unsigned int v4;
  int v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = 0;
  v3 = (int *)(a1 + 4);
  *(_WORD *)(a1 + 9) = 0;
  v4 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  if (v4 <= 0xD)
  {
    v5 = 1 << v4;
    if ((v5 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
      *v3 = *(_DWORD *)(a2 + 4);
    }
    else if ((v5 & 0x3003) != 0)
    {
      *v3 = 0;
    }
    else
    {
      *v3 = *(_DWORD *)(a2 + 4);
      WebCore::Length::ref(v3);
    }
  }
  return a1;
}

_QWORD *WebCore::LocalFrameView::updateCompositingLayersAfterLayout(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this[41] + 296);
  if (v1)
  {
    v2 = this;
    this = *(_QWORD **)(v1 + 1944);
    if (this)
    {
      v3 = WebCore::RenderView::compositor((WebCore::RenderView *)this);
      this = (_QWORD *)WebCore::RenderLayerCompositor::updateCompositingLayers(v3, 1, 0);
      *((_BYTE *)v2 + 1391) = 0;
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::invalidateScrollbarsForAllScrollableAreas(uint64_t this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  WebCore::ScrollableArea *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v1 = *(uint64_t ***)(this + 1288);
  if (!v1)
    return this;
  v2 = *v1;
  if (!*v1)
  {
    v3 = 0;
    v4 = 0;
LABEL_4:
    v5 = v3;
    v3 = &v2[v4];
    goto LABEL_5;
  }
  v4 = *((unsigned int *)v2 - 1);
  v3 = &v2[v4];
  if (!*((_DWORD *)v2 - 3))
    goto LABEL_4;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *v1;
    goto LABEL_38;
  }
  v13 = 8 * v4;
  v5 = *v1;
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v13 -= 8;
    if (!v13)
    {
      v5 = v3;
      break;
    }
  }
LABEL_5:
  if (v2)
  {
    v14 = *((unsigned int *)v2 - 1);
LABEL_38:
    v6 = &v2[v14];
    goto LABEL_7;
  }
  v6 = 0;
LABEL_7:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v15 = v5 + 1;
      v5 = v3;
      if (v15 != v3)
      {
        v5 = v15;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v7 = &v2[*((unsigned int *)v2 - 1)];
  else
    v7 = 0;
  while (v5 != v7)
  {
    v9 = *v5;
    v8 = v5 + 1;
    v10 = *(WebCore::ScrollableArea **)(v9 + 8);
    (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v10 + 16))(v10);
    WebCore::ScrollableArea::invalidateScrollbars(v10);
    this = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v10 + 24))(v10);
    v11 = v3;
    if (v8 != v3)
    {
      v11 = v8;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        if (++v11 == v3)
        {
          v11 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v11 != v6)
    {
      v5 = v11;
      if (!*(_QWORD *)(*v11 + 8))
      {
        while (1)
        {
          v12 = v5 + 1;
          v5 = v3;
          if (v12 != v3)
          {
            v5 = v12;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_17;
        }
        v5 = v6;
      }
    }
LABEL_17:
    ++*((_DWORD *)v1 + 2);
  }
  return this;
}

uint64_t WebCore::LocalFrameView::layerForHorizontalScrollbar(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v2);
    v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v6)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
      WTF::fastFree(v7, v8);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  return *((_QWORD *)v3 + 33);
}

uint64_t WebCore::LocalFrameView::layerForVerticalScrollbar(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v2);
    v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v6)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
      WTF::fastFree(v7, v8);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  return *((_QWORD *)v3 + 34);
}

uint64_t WebCore::LocalFrameView::layerForScrollCorner(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v2);
    v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v6)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
      WTF::fastFree(v7, v8);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  return *((_QWORD *)v3 + 35);
}

WebCore::RenderLayerCompositor *WebCore::LocalFrameView::scrollableAreaForScrollingNodeID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::RenderView *v4;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v15;
  void *v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  int v20;
  void *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t *v28;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  WebCore::RenderLayerCompositor *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];

  v37 = a2;
  v38 = a3;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
  if (!v3)
    return 0;
  v4 = *(WebCore::RenderView **)(v3 + 1944);
  if (!v4)
    return 0;
  v5 = *(WebCore::RenderLayerCompositor **)(a1 + 576);
  if (v5)
  {
    v20 = *((_DWORD *)v5 - 2);
    v22 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v37) & v20;
    v23 = (uint64_t *)((char *)v5 + 24 * v22);
    v24 = *v23;
    v25 = v23[1];
    if (*v23 == v37 && v25 == v38)
    {
LABEL_36:
      v30 = *((_QWORD *)v5 + 3 * v22 + 2);
      if (v30)
      {
        do
          v31 = __ldaxr((unsigned int *)v30);
        while (__stlxr(v31 + 1, (unsigned int *)v30));
        v5 = *(WebCore::RenderLayerCompositor **)(v30 + 8);
        do
        {
          v32 = __ldaxr((unsigned int *)v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, (unsigned int *)v30));
        if (!v33)
        {
          atomic_store(1u, (unsigned int *)v30);
          WTF::fastFree((WTF *)v30, v21);
        }
        if (v5)
          return v5;
      }
    }
    else
    {
      v27 = 1;
      while (v24 | v25)
      {
        v22 = (v22 + v27) & v20;
        v28 = (uint64_t *)((char *)v5 + 24 * v22);
        v24 = *v28;
        v25 = v28[1];
        ++v27;
        if (v24 == v37 && v25 == v38)
          goto LABEL_36;
      }
    }
  }
  v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
  if (!v6)
  {
    v34 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v6 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v34, v4);
    v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
    *((_QWORD *)v4 + 50) = v6;
    if (v5)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v5);
      WTF::fastFree(v35, v36);
      v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
    }
  }
  v39[0] = v37;
  v39[1] = v38;
  if (!v37)
    return 0;
  v7 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 248);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 328) + 296);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 1944);
    if (v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 256);
      if (v10)
      {
        v12 = *(_QWORD *)(v10 + 224);
        v11 = *(_QWORD *)(v10 + 232);
        if (v37 == v12 && v38 == v11)
          return (WebCore::RenderLayerCompositor *)(v7 + 64);
      }
    }
  }
  v15 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v6 + 39, v39);
  if (!v15)
    return 0;
  v17 = (WTF *)v15[2];
  if (!v17)
    return 0;
  v18 = (*(_DWORD *)v17)++;
  v19 = *((_QWORD *)v17 + 1);
  if (v19)
    v5 = *(WebCore::RenderLayerCompositor **)(v19 + 264);
  if (v18)
    *(_DWORD *)v17 = v18;
  else
    WTF::fastFree(v17, v16);
  if (!v19)
    return 0;
  return v5;
}

BOOL WebCore::LocalFrameView::isScrollSnapInProgress(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (*((_BYTE *)this + 318))
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v2)
  {
    v3 = *(WebCore::Page **)(v2 + 8);
    if (v3)
    {
      v4 = WebCore::Page::scrollingCoordinator(v3);
      if (v4)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
        if (v5 && (v6 = *(_QWORD *)(v5 + 1944)) != 0 && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256)) != 0)
        {
          v8 = *(_QWORD *)(v7 + 224);
          v9 = *(_QWORD *)(v7 + 232);
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 416))(v4, v8, v9) & 1) != 0)
          return 1;
      }
    }
  }
  v10 = *((_QWORD *)this + 10);
  return v10
      && *(_QWORD *)(v10 + 104)
      && (*(_BYTE *)(v10 + 117)
       || (v12 = *(_QWORD *)(v10 + 96)) != 0
       && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) != 0);
}

uint64_t WebCore::LocalFrameView::graphicsLayerForPlatformWidget(WebCore::LocalFrameView *this, WAKView *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = (uint64_t *)(v2 + 8 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = (uint64_t *)*((_QWORD *)this + 18);
      if ((_DWORD)v3)
      {
        v6 = 8 * v3;
        v5 = (uint64_t *)*((_QWORD *)this + 18);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          ++v5;
          v6 -= 8;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = (uint64_t *)(v2 + 8 * v3);
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = (uint64_t *)(v2 + 8 * v3);
  if (!v2)
  {
    v7 = 0;
    goto LABEL_12;
  }
LABEL_8:
  v7 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
LABEL_12:
  if (v7 == v5)
    return 0;
  while (1)
  {
    v8 = *v5;
    if (*(WAKView **)(*v5 + 40) == a2)
      break;
    v9 = v5 + 1;
    v5 = v4;
    if (v9 != v4)
    {
      v5 = v9;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        if (++v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
    if (v5 == v7)
      return 0;
  }
  {
    result = 0;
    WebCore::widgetRendererMap(void)::staticWidgetRendererMap = 0;
    return result;
  }
  if (!WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
    return 0;
  v10 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 8);
  v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  for (i = 1; ; v14 = (v16 + i++) & v10)
  {
    v16 = v14;
    v17 = *(_QWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v14);
    if (v17 != -1)
    {
      if (!v17)
        return 0;
      if (*(_QWORD *)(v17 + 8) == v8)
        break;
    }
  }
  v18 = *(_QWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v16 + 8);
  if (!v18)
    return 0;
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
    return 0;
  v20 = *(_QWORD *)(v19 + 144);
  if (!v20)
    return 0;
  v21 = *(_QWORD **)(v20 + 256);
  if (!v21)
    return 0;
  result = v21[21];
  if (!result)
  {
    result = v21[12];
    if (!result)
      return v21[9];
  }
  return result;
}

uint64_t WebCore::LocalFrameView::graphicsLayerForPageScale(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = *((_QWORD *)this + 41);
  v2 = *(_QWORD *)(v1 + 24);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (*(_BYTE *)(v3 + 1098))
    return 0;
  v4 = *(_QWORD *)(v1 + 296);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 1944);
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 21) & 0x80) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 256);
  if (!v6)
    return 0;
  result = *(_QWORD *)(v6 + 64);
  if (!result)
    return *(_QWORD *)(v6 + 72);
  return result;
}

uint64_t WebCore::LocalFrameView::graphicsLayerForScrolledContents(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v2);
    v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v6)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
      WTF::fastFree(v7, v8);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  return *((_QWORD *)v3 + 31);
}

unint64_t WebCore::LocalFrameView::fixedScrollableAreaBoundsInflatedForScrolling(WebCore::LocalFrameView *this, const WebCore::LayoutRect *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::RenderView *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  const CGRect *v34;
  CGRect v35;

  v4 = (_QWORD *)*((_QWORD *)this + 41);
  if ((*(_QWORD *)(v4[17] + 704) & 0x1000) != 0)
  {
    if (*((_BYTE *)this + 1104))
    {
      v5 = (char *)this + 1088;
    }
    else
    {
      v5 = (char *)this + 1080;
      v6 = v4[37];
      if (!v6 || !*(_QWORD *)(v6 + 1944))
      {
        v7 = (void *)*((_QWORD *)this + 5);
        if (v7)
        {
          if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
            v7 = (void *)objc_msgSend(v7, "superview");
          objc_msgSend(v7, "frame");
          v35.origin.x = v30;
          v35.origin.y = v31;
          v35.size.width = v32;
          v35.size.height = v33;
          WebCore::enclosingIntRect(&v35, v34);
        }
        v4 = (_QWORD *)*((_QWORD *)this + 41);
      }
    }
    v9 = *(_DWORD *)v5;
    v8 = *((_DWORD *)v5 + 1);
    v10 = v4[37];
    if (v10 && (v11 = *(WebCore::RenderView **)(v10 + 1944)) != 0)
    {
      v12 = WebCore::RenderView::unscaledDocumentRect(v11);
      if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41)
        && *((_BYTE *)this + 1329) == 2)
      {
        v13 = WebCore::LocalFrameView::unscaledMaximumScrollPosition(this);
        goto LABEL_12;
      }
    }
    else
    {
      v12 = -*((_DWORD *)this + 24) - (*((_QWORD *)this + 12) & 0xFFFFFFFF00000000);
      if (*(_QWORD **)(v4[16] + 8) == v4 && *((_BYTE *)this + 1329) == 2)
      {
        v13 = WebCore::LocalFrameView::maximumScrollPosition(this);
        goto LABEL_12;
      }
    }
    HIDWORD(v13) = HIDWORD(v12);
LABEL_12:
    if ((int)v12 >= -33554432)
      v14 = (_DWORD)v12 << 6;
    else
      v14 = 0x80000000;
    if ((int)v12 > 0x1FFFFFF)
      v14 = 0x7FFFFFFF;
    if (SHIDWORD(v13) >= -33554432)
      v15 = HIDWORD(v13) << 6;
    else
      v15 = 0x80000000;
    if (SHIDWORD(v13) <= 0x1FFFFFF)
      v16 = v15;
    else
      v16 = 0x7FFFFFFF;
    v17 = v9 - v14;
    if (__OFSUB__(v9, v14))
      v17 = (v9 >> 31) + 0x7FFFFFFF;
    v18 = v8 - v16;
    if (__OFSUB__(v8, v16))
      v18 = (v8 >> 31) + 0x7FFFFFFF;
    WebCore::LocalFrameView::unscaledMaximumScrollPosition(this);
    goto LABEL_28;
  }
  v23 = WebCore::LocalFrameView::scrollPositionRespectingCustomFixedPosition(this);
  v24 = v23;
  v25 = HIDWORD(v23);
  v26 = WebCore::LocalFrameView::minimumScrollPosition(this);
  if ((int)v26 >= -33554432)
    v27 = (_DWORD)v26 << 6;
  else
    v27 = 0x80000000;
  if ((int)v26 > 0x1FFFFFF)
    v27 = 0x7FFFFFFF;
  if (SHIDWORD(v26) >= -33554432)
    v28 = HIDWORD(v26) << 6;
  else
    v28 = 0x80000000;
  if (SHIDWORD(v26) <= 0x1FFFFFF)
    v29 = v28;
  else
    v29 = 0x7FFFFFFF;
  v17 = v24 - v27;
  if (__OFSUB__(v24, v27))
    v17 = (v24 >> 31) + 0x7FFFFFFF;
  v18 = v25 - v29;
  if (__OFSUB__((_DWORD)v25, v29))
    v18 = (v25 >> 31) + 0x7FFFFFFF;
  WebCore::LocalFrameView::maximumScrollPosition(this);
LABEL_28:
  v19 = *((_DWORD *)a2 + 1);
  v20 = *(_DWORD *)a2 - v17;
  if (__OFSUB__(*(_DWORD *)a2, v17))
    v20 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  v21 = v19 - v18;
  if (__OFSUB__(v19, v18))
    v21 = (v19 >> 31) + 0x7FFFFFFF;
  return v20 | (unint64_t)(v21 << 32);
}

unint64_t WebCore::LocalFrameView::unscaledMinimumScrollPosition(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderView *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = *((_QWORD *)this + 41);
  v3 = *(_QWORD *)(v2 + 296);
  if (!v3 || (v4 = *(WebCore::RenderView **)(v3 + 1944)) == 0)
  {
    v5 = -*((_DWORD *)this + 24) - (*((_QWORD *)this + 12) & 0xFFFFFFFF00000000);
    if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) != v2 || *((_BYTE *)this + 1329) != 2)
      goto LABEL_5;
    v8 = -*((_DWORD *)this + 24) - (*((_QWORD *)this + 12) & 0xFFFFFFFF00000000);
    v5 = WebCore::LocalFrameView::maximumScrollPosition(this);
LABEL_11:
    v6 = v5;
    LODWORD(v5) = v8;
    return v6 & 0xFFFFFFFF00000000 | v5;
  }
  v5 = WebCore::RenderView::unscaledDocumentRect(v4);
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41)
    && *((_BYTE *)this + 1329) == 2)
  {
    LODWORD(v8) = v5;
    v5 = WebCore::LocalFrameView::unscaledMaximumScrollPosition(this);
    goto LABEL_11;
  }
LABEL_5:
  v6 = v5;
  return v6 & 0xFFFFFFFF00000000 | v5;
}

unint64_t WebCore::LocalFrameView::scrollPositionRespectingCustomFixedPosition(WebCore::LocalFrameView *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  BOOL v7;

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 136) + 704) & 0x1000) != 0)
  {
    v2 = WebCore::LocalFrameView::scrollPositionForFixedPosition((int32x2_t *)this);
    v3 = v2 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (*((_BYTE *)this + 1176))
      v1 = *(_QWORD *)((char *)this + 1180);
    else
      v1 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    v4 = HIDWORD(v1);
    v5 = (_DWORD)v1 << 6;
    if ((int)v1 < -33554432)
      v5 = 0x80000000;
    if ((int)v1 <= 0x1FFFFFF)
      LODWORD(v2) = v5;
    else
      LODWORD(v2) = 0x7FFFFFFF;
    v6 = v4 << 38;
    if ((int)v4 < -33554432)
      v6 = 0x8000000000000000;
    v7 = (int)v4 <= 0x1FFFFFF;
    v3 = 0x7FFFFFFF00000000;
    if (v7)
      v3 = v6;
  }
  return v3 | v2;
}

_QWORD *WebCore::LocalFrameView::topContentInsetDidChange(_QWORD *this, float a2)
{
  uint64_t v2;
  WebCore::RenderView *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  WebCore::RenderLayerCompositor *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this[41] + 296);
  if (v2)
  {
    v3 = *(WebCore::RenderView **)(v2 + 1944);
    if (v3)
    {
      v5 = (uint64_t)this;
      if (this[5])
        JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(this);
      WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v5 + 336));
      v6 = *(_BYTE *)(v5 + 108);
      *(_BYTE *)(v5 + 108) = 1;
      v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 + 64) + 832))(v5 + 64, 0, 1);
      WebCore::ScrollView::updateScrollbars(v5, (const WebCore::IntPoint *)&v9);
      v7 = *((_QWORD *)v3 + 50);
      if (v7 && *(_BYTE *)(v7 + 195))
      {
        v8 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(v3);
        WebCore::RenderLayerCompositor::frameViewDidChangeSize(v8);
      }
      this = (_QWORD *)WebCore::LocalFrameView::tiledBacking((WebCore::LocalFrameView *)v5);
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *, float))(*this + 104))(this, a2);
      *(_BYTE *)(v5 + 108) = v6;
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::topContentDirectionDidChange(uint64_t this)
{
  *(_WORD *)(this + 1379) = 257;
  return this;
}

double WebCore::LocalFrameView::enterCompositingMode(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderLayerCompositor *v8;
  WebCore::RenderLayerCompositor *v9;
  WebCore::RenderLayerCompositor *v10;
  WTF *v11;
  void *v12;
  WebCore::RenderLayerCompositor *v13;
  WebCore::RenderLayerCompositor *v14;
  WTF *v15;
  void *v16;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
  {
    v2 = *(WebCore::RenderView **)(v1 + 1944);
    if (v2)
    {
      v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
      if (!v4)
      {
        v9 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v4 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v9, v2);
        v10 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        *((_QWORD *)v2 + 50) = v4;
        if (v10)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v10);
          WTF::fastFree(v11, v12);
          v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        }
      }
      WebCore::RenderLayerCompositor::enableCompositingMode(v4, 1);
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 43) + 8) + 328) + 296);
      if (v6)
        v6 = *(_QWORD *)(v6 + 1944);
      if ((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) == 0
        || (result = *(double *)((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
      {
        if (!v6 || (*(_BYTE *)(v6 + 20) & 0xF8) == 0)
        {
          v7 = *((_QWORD *)this + 58);
          if ((!v7 || !*(_QWORD *)(v7 + 8)) && (!*((_DWORD *)this + 122) || !*((_BYTE *)this + 478)))
          {
            v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
            if (!v8)
            {
              v13 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
              v8 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v13, v2);
              v14 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
              *((_QWORD *)v2 + 50) = v8;
              if (v14)
              {
                WebCore::RenderLayerCompositor::~RenderLayerCompositor(v14);
                WTF::fastFree(v15, v16);
                v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
              }
            }
            return WebCore::TileCoverageMap::setNeedsUpdate(v8);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::isEnclosedInCompositingLayer(WebCore::LocalFrameView *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 120);
  if (!v3)
    goto LABEL_16;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_16;
  v5 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  if ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_30;
    }
    v6 = (*(unsigned __int8 *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v6) = 0;
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL);
    else
      v7 = 0;
    if (v5)
      goto LABEL_11;
  }
  else
  {
    v7 = 0;
    if (v5)
    {
LABEL_11:
      *(_DWORD *)(v4 + 24) = v5;
      goto LABEL_12;
    }
  }
  if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
LABEL_12:
  if (v7)
  {
    WebCore::RenderObject::containerForRepaint(v7, (uint64_t)&v13);
    if (v14)
    {
      v8 = *(_DWORD *)(v14 + 16);
      if (v8)
      {
        *(_DWORD *)(v14 + 16) = v8 - 1;
        return 1;
      }
      __break(0xC471u);
LABEL_30:
      JUMPOUT(0x195FF3820);
    }
  }
LABEL_16:
  v10 = *((_QWORD *)this + 4);
  if (!v10)
    return 0;
  if (!*(_QWORD *)(v10 + 8))
    return 0;
  v11 = *(_QWORD *)(*((_QWORD *)this + 41) + 56);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12 || *(_BYTE *)(v12 + 144))
    return 0;
  result = *(_QWORD *)(v12 + 288);
  if (result)
    return WebCore::LocalFrameView::isEnclosedInCompositingLayer((WebCore::LocalFrameView *)result);
  return result;
}

uint64_t WebCore::LocalFrameView::parentFrameView(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  if (v1
    && *(_QWORD *)(v1 + 8)
    && (v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 56)) != 0
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && !*(_BYTE *)(v3 + 144))
  {
    return *(_QWORD *)(v3 + 288);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::LocalFrameView::isSoftwareRenderable(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 1;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 1;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v2);
    v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v6)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
      WTF::fastFree(v7, v8);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  return WebCore::RenderLayerCompositor::layerHas3DContent(v3, *(const WebCore::RenderLayer **)(*((_QWORD *)v3 + 1) + 144)) ^ 1;
}

WebCore::RenderLayerCompositor *WebCore::LocalFrameView::setIsInWindow(WebCore::RenderLayerCompositor *this, BOOL a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 1944);
    if (v3)
    {
      this = *(WebCore::RenderLayerCompositor **)(v3 + 400);
      if (this)
        return (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::setIsInWindow(this, a2);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::embeddedContentBox(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = *(unsigned int *)(v2 + 64) | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32);
  if (!v3)
    return 0;
  result = *(_QWORD *)(v3 + 8);
  if (result)
  {
    v5 = *(unsigned __int8 *)(result + 46);
    if (v5 != 103 && v5 != 83)
      return 0;
  }
  return result;
}

void WebCore::RenderElement::setChildNeedsLayout(WebCore::RenderObject *this, int a2)
{
  int v2;
  WebCore::RenderElement *v4;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x20) == 0)
  {
    *((_DWORD *)this + 5) = v2 | 0x20;
    if (a2 == 1)
    {
      v4 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v4);
    }
  }
}

unsigned __int8 *WebCore::ScrollAnimator::setWheelEventTestMonitor(unsigned __int8 *result, unsigned __int8 ***a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  int v6;
  unsigned __int8 **v7;

  v2 = result;
  v3 = *a2;
  if (!*a2)
    goto LABEL_11;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v4);
LABEL_6:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v4))
LABEL_10:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  v7 = (unsigned __int8 **)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = v3;
  if (v7)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v7, a2);
  return result;
}

uint64_t WebCore::LocalFrameView::didLayout(int32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderLayer *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  unsigned int updated;
  double v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  int32x2_t v23;
  _QWORD *v24;
  uint64_t v25;
  int32x2_t v26;
  int32x2_t *v27;
  int32x2_t v28;
  int32x2_t v29;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  WebCore::AXObjectCache *v35;
  WebCore::RenderObject *v36;
  int v37;
  uint64_t v38;

  ++WebCore::ScriptDisallowedScope::s_count;
  v6 = *a2;
  if (*a2)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
  {
    v8 = *(_QWORD *)(v7 + 32);
    if (!v8)
      goto LABEL_39;
    v7 = *(_QWORD *)(v8 + 8);
    if (!v7)
      goto LABEL_39;
    v9 = 0;
    while ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
    {
      v10 = *(_QWORD *)(v7 + 32);
      if (!v10)
        goto LABEL_39;
      v7 = *(_QWORD *)(v10 + 8);
      if (!v7)
        goto LABEL_16;
    }
  }
LABEL_14:
  if ((*(_BYTE *)(v7 + 21) & 0x80) != 0)
  {
    v9 = *(WebCore::RenderLayer **)(v7 + 144);
    goto LABEL_16;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v7 + 32);
    if (!v11)
      break;
    v7 = *(_QWORD *)(v11 + 8);
    if (!v7)
      break;
    if ((*(_BYTE *)(v7 + 45) & 0x10) != 0)
      goto LABEL_14;
  }
LABEL_39:
  v9 = 0;
LABEL_16:
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 8) + 46);
  v13 = a1[59].u8[4];
  v14 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 4) + 24) + 8) + 40) + 8)
                   + 1496);
  if (v14)
  {
    ++*(_DWORD *)v14;
    WebCore::DocumentMarkerController::invalidateRectsForAllMarkers(v14, a2);
    if (!*(_DWORD *)v14)
      goto LABEL_79;
    --*(_DWORD *)v14;
  }
  updated = WebCore::RenderLayer::flagsForUpdateLayerPositions(v9, (WebCore::RenderLayer *)a2);
  v17 = updated & 0xFFFFFFFC | 2;
  if (!v13)
    v17 = updated;
  if (v12 != 49)
  {
    v18 = *((_QWORD *)v9 + 27);
    if (v18)
    {
      if (*(_QWORD *)(v18 + 8))
        v17 |= 8u;
    }
  }
  WebCore::RenderLayer::recursiveUpdateLayerPositions((uint64_t)v9, v17, a3, v16);
  a1[173].i8[7] = 1;
  v19 = (_QWORD *)a1[41];
  v20 = v19[37];
  *(_DWORD *)(v20 + 24) += 2;
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v34 = v19;
    v35 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v20);
    v19 = v34;
    if (v35)
    {
      ++*((_DWORD *)v35 + 2);
      if (*a2)
        v36 = *(WebCore::RenderObject **)(*a2 + 8);
      else
        v36 = 0;
      WebCore::AXObjectCache::postNotification(v35, v36, 34, 0);
      v37 = *((_DWORD *)v35 + 2);
      if (v37)
      {
        *((_DWORD *)v35 + 2) = v37 - 1;
        v19 = (_QWORD *)a1[41];
        goto LABEL_24;
      }
LABEL_79:
      __break(0xC471u);
      JUMPOUT(0x195FF3D50);
    }
  }
LABEL_24:
  WebCore::LocalFrame::invalidateContentEventRegionsIfNeeded(v19, 0);
  result = (uint64_t)WebCore::Document::invalidateRenderingDependentRegions((WebCore::Document *)v20);
  v23 = a1[41];
  if (v23)
  {
    while (1)
    {
      do
      {
LABEL_25:
        v24 = (_QWORD *)v23;
        if (!*(_BYTE *)(*(_QWORD *)&v23 + 144))
        {
          v25 = *(_QWORD *)(*(_QWORD *)&v23 + 288);
          if (v25)
          {
            result = WebCore::LocalFrameView::useSlowRepaints(*(WebCore::LocalFrameView **)(*(_QWORD *)&v23 + 288), 1);
            v22 = result ^ 1;
            if (*(_QWORD *)(v25 + 40))
              result = WebCore::ScrollView::platformSetCanBlitOnScroll((id *)v25, v22);
            else
              *(_BYTE *)(v25 + 317) = result ^ 1;
          }
        }
        v23 = (int32x2_t)v24[11];
      }
      while (v23);
      v26 = a1[41];
      v27 = *(int32x2_t **)(v24[6] + 8);
      if (v27 == (int32x2_t *)v26)
        break;
      v23 = (int32x2_t)v24[9];
      if (!*(_QWORD *)&v23)
      {
        if (v26)
        {
          while (1)
          {
            v29 = v27[7];
            if (!*(_QWORD *)&v29)
              break;
            v27 = *(int32x2_t **)(*(_QWORD *)&v29 + 8);
            if (v27 == (int32x2_t *)v26 || v27 == 0)
              break;
            v23 = v27[9];
            if (v23)
              goto LABEL_25;
          }
        }
        else
        {
          while (1)
          {
            v28 = v27[7];
            if (!*(_QWORD *)&v28)
              break;
            v27 = *(int32x2_t **)(*(_QWORD *)&v28 + 8);
            if (!v27)
              break;
            v23 = v27[9];
            if (v23)
              goto LABEL_25;
          }
        }
        break;
      }
    }
  }
  if (a1[34].i8[0])
  {
    (*(void (**)(int32x2_t *))(*(_QWORD *)a1 + 688))(a1);
    WebCore::ScrollView::scrollContents(a1, (const WebCore::IntSize *)&a1[33]);
    result = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 696))(a1);
  }
  else
  {
    if (!a1[36].i8[4])
      goto LABEL_50;
    result = (*(uint64_t (**)(int32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 648))(a1, (uint64_t)&a1[34] + 4, (uint64_t)&a1[35] + 4);
  }
  if (a1[34].i8[0])
    a1[34].i8[0] = 0;
  if (a1[36].i8[4])
    a1[36].i8[4] = 0;
LABEL_50:
  if (a1[172].i8[3])
  {
    a1[172].i8[3] = 0;
    v38 = (*(uint64_t (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)&a1[8] + 832))(a1 + 8, 0, 1);
    result = WebCore::ScrollView::updateScrollbars((uint64_t)a1, (const WebCore::IntPoint *)&v38);
  }
  if (a1[172].i8[4])
  {
    a1[172].i8[4] = 0;
    result = WebCore::ScrollView::positionScrollbarLayers((WebCore::ScrollView *)a1);
  }
  if ((*(_WORD *)(v20 + 3292) & 0x40) != 0)
  {
    v32 = (int)WebCore::ScrollView::layoutSize((WebCore::ScrollView *)a1) < a1[32].i32[0];
    v33 = (int)(WebCore::ScrollView::layoutSize((WebCore::ScrollView *)a1) >> 32) < a1[32].i32[1];
    result = WebCore::LocalFrameView::updateOverflowStatus((uint64_t)a1, v32, v33);
  }
  v31 = *(_QWORD **)(v20 + 1496);
  if (v31)
  {
    ++*(_DWORD *)v31;
    result = (uint64_t)WebCore::DocumentMarkerController::invalidateRectsForAllMarkers(v31, (void *)v22);
    if (!*(_DWORD *)v31)
    {
      __break(0xC471u);
      JUMPOUT(0x195FF3D70);
    }
    --*(_DWORD *)v31;
  }
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v20);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
  --WebCore::ScriptDisallowedScope::s_count;
  return result;
}

uint64_t WebCore::LocalFrameView::updateCanBlitOnScrollRecursively(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(this + 328);
  if (v1)
  {
    v2 = this;
    do
    {
      if (!*(_BYTE *)(v1 + 144))
      {
        v3 = *(_QWORD *)(v1 + 288);
        if (v3)
        {
          v4 = WebCore::LocalFrameView::useSlowRepaints(*(WebCore::LocalFrameView **)(v1 + 288), 1) ^ 1;
          if (*(_QWORD *)(v3 + 40))
            WebCore::ScrollView::platformSetCanBlitOnScroll((id *)v3, v4);
          else
            *(_BYTE *)(v3 + 317) = v4;
        }
      }
      this = WebCore::FrameTree::traverseNext((_QWORD *)(v1 + 48), *(_QWORD *)(v2 + 328));
      v1 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebCore::LocalFrameView::updateOverflowStatus(uint64_t this, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WebCore *v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  BOOL v21;
  __int16 v22;
  uint64_t v23;
  WebCore::Document *v24;
  WebCore *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(unsigned __int8 *)(this + 1328);
  if (!*(_BYTE *)(this + 1328))
    return this;
  v4 = this;
  v5 = *(_QWORD *)(*(_QWORD *)(this + 328) + 296);
  if (!v5)
    return this;
  if (v3 == 2)
  {
    v10 = *(_QWORD *)(v5 + 1272);
    if (!v10)
      return this;
    if ((*(_WORD *)(v10 + 28) & 0x10) == 0)
      return this;
    if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      return this;
    v11 = *(_QWORD *)(v10 + 80);
    if (!v11)
      return this;
    while ((*(_WORD *)(v11 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      v11 = *(_QWORD *)(v11 + 56);
      if (!v11)
        return this;
    }
    v9 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v9)
      return this;
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FF4208);
    }
  }
  else
  {
    if (v3 != 1)
      return this;
    v8 = *(_QWORD *)(v5 + 1272);
    if (!v8)
      return this;
    v9 = *(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v9)
      return this;
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_45;
  }
  if (*(_BYTE *)(this + 1361))
  {
    *(_BYTE *)(this + 1362) = a2;
    *(_BYTE *)(this + 1363) = a3;
    *(_BYTE *)(this + 1361) = 0;
  }
  else
  {
    v12 = *(unsigned __int8 *)(this + 1362);
    v13 = *(unsigned __int8 *)(this + 1363);
    if (__PAIR64__(v13, v12) != __PAIR64__(a3, a2))
    {
      *(_BYTE *)(this + 1362) = a2;
      *(_BYTE *)(this + 1363) = a3;
      v14 = (WebCore *)bmalloc::api::isoAllocate();
      v15 = v14;
      v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v16 || (v14 = *(WebCore **)(v16 + 96)) == 0)
        v14 = (WebCore *)WebCore::threadGlobalDataSlow(v14);
      v17 = *((_QWORD *)v14 + 5);
      if (!v17)
      {
        v26 = v9;
        v25 = v14;
        v14 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v17 = *((_QWORD *)v25 + 5);
        v9 = v26;
      }
      WTF::MonotonicTime::now(v14);
      *((_QWORD *)v15 + 1) = 0;
      v19 = *((_DWORD *)v15 + 5) & 0xFFC00000 | 0x280200 | (*(_QWORD *)(v17 + 1392) != 0);
      *((_DWORD *)v15 + 4) = 1;
      *((_DWORD *)v15 + 5) = v19;
      v20 = *(_DWORD **)(v17 + 1392);
      if (v20)
        *v20 += 2;
      v21 = v13 == a3 || v12 == a2;
      *((_QWORD *)v15 + 3) = v20;
      *((_QWORD *)v15 + 4) = 0;
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 6) = 0;
      *((_QWORD *)v15 + 7) = v18;
      *((_QWORD *)v15 + 8) = 0;
      *(_QWORD *)v15 = off_1E33A6400;
      *((_BYTE *)v15 + 74) = a2;
      *((_BYTE *)v15 + 75) = a3;
      if (v21)
        v22 = v12 == a2;
      else
        v22 = 2;
      *((_WORD *)v15 + 36) = v22;
      if ((*(_BYTE *)(v9 + 45) & 1) == 0)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8);
        if (v23)
        {
          if ((*(_WORD *)(v23 + 28) & 8) == 0)
          {
LABEL_45:
            __break(0xC471u);
            JUMPOUT(0x195FF3FE0);
          }
          *(_DWORD *)(v23 + 24) += 2;
          *((_QWORD *)v15 + 6) = v23;
          WebCore::Event::receivedTarget(v15);
        }
      }
      v24 = *(WebCore::Document **)(*(_QWORD *)(v4 + 328) + 296);
      v27 = (uint64_t)v15;
      WebCore::Document::enqueueOverflowEvent(v24, (WTF::StringImpl *)&v27);
      this = v27;
      v27 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 16) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 16);
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::addEmbeddedObjectToUpdate(WebCore::LocalFrameView *this, WebCore::RenderEmbeddedObject *a2)
{
  _QWORD *v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  _WORD *v10;
  uint64_t result;
  void *v12;
  int v13;
  uint64_t *v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int i;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;

  if (!*((_QWORD *)this + 70))
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    v6 = (WTF *)*((_QWORD *)this + 70);
    *((_QWORD *)this + 70) = v4;
    if (v6)
    {
      v7 = (WTF *)*((_QWORD *)v6 + 1);
      while (v7)
      {
        v8 = v7;
        v7 = (WTF *)*((_QWORD *)v7 + 2);
        v9 = *(WTF **)v8;
        *(_QWORD *)v8 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 1)
            WTF::fastFree(v9, v5);
          else
            --*(_DWORD *)v9;
        }
        WTF::fastFree(v8, v5);
      }
      if (*(_QWORD *)v6)
        WTF::fastFree((WTF *)(*(_QWORD *)v6 - 16), v5);
      WTF::fastFree(v6, v5);
    }
  }
  v10 = *(_WORD **)(*((_QWORD *)a2 + 3) + 8);
  if (((*(uint64_t (**)(_WORD *))(*(_QWORD *)v10 + 192))(v10) & 1) == 0)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v10 + 200))(v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v10 + 1288))(v10);
    if ((_DWORD)result)
    {
      v13 = *((_DWORD *)v10 + 6);
      *((_DWORD *)v10 + 6) = v13 + 2;
      *((_BYTE *)v10 + 224) = 1;
      if (v13)
      {
        *((_DWORD *)v10 + 6) = v13;
      }
      else if ((v10[15] & 0x400) == 0)
      {
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v12);
      }
    }
  }
  v14 = (uint64_t *)*((_QWORD *)this + 70);
  v15 = (WTF *)*((_QWORD *)a2 + 1);
  if (!v15)
  {
    v15 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *((_QWORD *)v15 + 1) = a2;
    result = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v15;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        result = WTF::fastFree((WTF *)result, v12);
        v15 = (WTF *)*((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  ++*(_DWORD *)v15;
  v16 = *v14;
  if (*v14
    || (result = (uint64_t)WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>>::rehash(v14, 8u, 0), (v16 = *v14) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = 0;
  v19 = *((_QWORD *)v15 + 1);
  v20 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = (v22 >> 31) ^ v22;
  for (i = 1; ; ++i)
  {
    v25 = v23 & v17;
    v26 = (uint64_t *)(v16 + 8 * v25);
    v27 = *v26;
    if (*v26 == -1)
    {
      v18 = (uint64_t *)(v16 + 8 * v25);
      goto LABEL_28;
    }
    if (!v27)
      break;
    if (*(_QWORD *)(*(_QWORD *)v27 + 8) == v19)
    {
      if (*(_DWORD *)v15 == 1)
        return WTF::fastFree(v15, v12);
      --*(_DWORD *)v15;
      return result;
    }
LABEL_28:
    v23 = i + v25;
  }
  if (v18)
  {
    *v18 = 0;
    --*(_DWORD *)(*v14 - 16);
    v26 = v18;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v15;
  *v26 = result;
  v28 = *v14;
  if (*v14)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v14;
  if (*v14)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 <= 2 * v32)
    {
LABEL_42:
      v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
      goto LABEL_45;
    }
  }
  else if (3 * v33 <= 4 * v32)
  {
    if ((_DWORD)v33)
      goto LABEL_42;
    v34 = 8;
LABEL_45:
    result = *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>>::rehash(v14, v34, v26);
  }
  v35 = v14[2];
  *(_QWORD *)(result + 8) = v35;
  *(_QWORD *)(result + 16) = 0;
  if (v35)
    v36 = (_QWORD *)(v35 + 16);
  else
    v36 = v14 + 1;
  *v36 = result;
  v14[2] = result;
  return result;
}

uint64_t WTF::ListHashSet<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>::remove<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int i;
  WTF *v11;
  int v12;
  int j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WTF *v26;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = 1;
  for (i = v8; ; i = (i + v9++) & v4)
  {
    v11 = *(WTF **)(v2 + 8 * i);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        return 0;
      if (*(void **)(*(_QWORD *)v11 + 8) == a2)
        break;
    }
  }
  v12 = *(_DWORD *)(v2 - 4);
  if (i == v12)
    return 0;
  for (j = 1; ; ++j)
  {
    v15 = v8;
    v16 = *(_QWORD *)(v2 + 8 * v8);
    if (v16 != -1)
    {
      if (!v16)
        goto LABEL_25;
      if (*(void **)(*(_QWORD *)v16 + 8) == a2)
        break;
    }
    v8 = (v15 + j) & v4;
  }
  if (v12 != (_DWORD)v15)
  {
    *(_QWORD *)(v2 + 8 * v15) = -1;
    ++*(_DWORD *)(*a1 - 16);
    v17 = *a1;
    v18 = *a1 ? *(_DWORD *)(v17 - 12) - 1 : -1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *a1;
    if (*a1)
    {
      v20 = 6 * *(_DWORD *)(v19 - 12);
      v21 = *(_DWORD *)(v19 - 4);
      if (v20 < v21 && v21 >= 9)
        WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>>::rehash(a1, v21 >> 1, 0);
    }
  }
LABEL_25:
  v23 = *((_QWORD *)v11 + 1);
  v24 = *((_QWORD *)v11 + 2);
  if (v23)
  {
    *(_QWORD *)(v23 + 16) = v24;
    v24 = *((_QWORD *)v11 + 2);
  }
  else
  {
    a1[1] = v24;
  }
  if (v24)
    v25 = (_QWORD *)(v24 + 8);
  else
    v25 = a1 + 2;
  *v25 = v23;
  v26 = *(WTF **)v11;
  *(_QWORD *)v11 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree(v26, a2);
    else
      --*(_DWORD *)v26;
  }
  WTF::fastFree(v11, a2);
  return 1;
}

WTF::StringImpl *WebCore::LocalFrameView::setMediaType(WebCore::LocalFrameView *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::LocalFrameView::hasViewportConstrainedObjects(WebCore::LocalFrameView *this)
{
  _QWORD **v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD **)*((_QWORD *)this + 163);
  if (!v1)
    return 0;
  v2 = *v1;
  if (!v2 || !*((_DWORD *)v2 - 3))
    return 0;
  v4 = *((unsigned int *)v2 - 1);
  v5 = &v2[v4];
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while ((unint64_t)(*v2 + 1) <= 1)
    {
      ++v2;
      v6 -= 8;
      if (!v6)
        goto LABEL_9;
    }
  }
  if (v2 != v5)
  {
    v7 = *v2;
LABEL_13:
    if (*(_QWORD *)(v7 + 8))
      return v2 != v5;
    while (++v2 != v5)
    {
      v7 = *v2;
      if ((unint64_t)(*v2 + 1) > 1)
      {
        if (v2 != v5)
          goto LABEL_13;
        break;
      }
    }
  }
LABEL_9:
  v2 = v5;
  return v2 != v5;
}

uint64_t WebCore::LocalFrameView::usesCompositedScrolling(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1944);
  if (!v2 || (*(_BYTE *)(v2 + 21) & 0x80) == 0)
    return 0;
  if ((*(_BYTE *)(v2 + 45) & 0x10) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 256);
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 72);
      if (v5)
      {
        if ((*(_WORD *)(v5 + 177) & 0x20) != 0)
          return 1;
      }
    }
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::usesCompositedScrolling(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1944);
  if (!v2 || (*(_BYTE *)(v2 + 21) & 0x80) == 0)
    return 0;
  if ((*(_BYTE *)(v2 + 45) & 0x10) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 256);
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 72);
      if (v5)
      {
        if ((*(_WORD *)(v5 + 177) & 0x20) != 0)
          return 1;
      }
    }
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalFrameView::usesAsyncScrolling(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::Page *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v1 && (v3 = *(WebCore::Page **)(v1 + 8)) != 0 && (v4 = WebCore::Page::scrollingCoordinator(v3)) != 0)
    return (*(uint64_t (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)v4 + 40))(v4, this);
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::usesAsyncScrolling(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::Page *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
  if (v1 && (v3 = *(WebCore::Page **)(v1 + 8)) != 0 && (v4 = WebCore::Page::scrollingCoordinator(v3)) != 0)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 40))(v4, (char *)this - 64);
  else
    return 0;
}

uint64_t WebCore::LocalFrameView::mockScrollbarsControllerEnabled(WebCore::LocalFrameView *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 136) + 688) >> 12) & 1;
}

WTF::StringImpl *WebCore::LocalFrameView::logMockScrollbarsControllerMessage(WTF::StringImpl *this, const WTF::String *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  WTF::StringImpl *v15;

  v2 = *((_QWORD *)this + 41);
  v3 = *(_QWORD **)(v2 + 296);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
    v5 = v4 == v2;
    if (v4 == v2)
      v6 = "Main";
    else
      v6 = "";
    v7 = 5;
    if (!v5)
      v7 = 1;
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v8 += 2;
    v14 = v7 - 1;
    if ((unint64_t)(v7 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_33:
      JUMPOUT(0x195FF4B00);
    }
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      if (v9 < 0)
        goto LABEL_29;
    }
    else
    {
      v9 = 0;
    }
    v10 = __OFADD__(v9, 16);
    v11 = v9 + 16;
    if (!v10 && !__OFADD__(v14, v11))
    {
      if (v8)
        v12 = (*(unsigned __int8 *)(v8 + 16) >> 2) & 1;
      else
        v12 = 1;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v14 + v11, v12, v6, v14, "LocalFrameView: ", 0x10u, v8, &v15);
      if (v15)
      {
        WebCore::Document::addConsoleMessage(v3, 16, 3, &v15, 0);
        this = v15;
        v15 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v13);
            if (!v8)
              return this;
            goto LABEL_21;
          }
          *(_DWORD *)this -= 2;
        }
        if (!v8)
          return this;
LABEL_21:
        if (*(_DWORD *)v8 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v8, v13);
        *(_DWORD *)v8 -= 2;
        return this;
      }
LABEL_30:
      __break(0xC471u);
      goto LABEL_33;
    }
LABEL_29:
    v15 = 0;
    goto LABEL_30;
  }
  return this;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::LocalFrameView::logMockScrollbarsControllerMessage(WebCore::LocalFrameView *this, const WTF::String *a2)
{
  return WebCore::LocalFrameView::logMockScrollbarsControllerMessage((WebCore::LocalFrameView *)((char *)this - 64), a2);
}

WTF::StringImpl *WebCore::LocalFrameView::debugDescription@<X0>(WebCore::LocalFrameView *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char *v21;
  int8x16_t *v22;
  uint64_t v23;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  __int128 v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  char v52;
  uint64_t *v53;
  WTF::StringImpl *v54;
  int v55;
  unsigned int __n;
  uint64_t __n_4[2];
  int v58;
  uint64_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;

  v59 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  __n = v4;
  v5 = *((_QWORD *)this + 41);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 1;
  WTF::Internal::appendHex();
  v58 = v6;
  v53 = __n_4;
  v54 = (WTF::StringImpl *)"Frame 0x";
  v55 = 8;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v49, (int8x16_t **)&v54, (uint64_t *)&v53);
  if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5)
    WTF::StringBuilder::append();
  v8 = *(_QWORD *)(v5 + 296);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    v9 = *(unsigned int *)(v8 + 1168);
    if ((_DWORD)v9 == -1)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_74;
    }
    __n_4[0] = (uint64_t)&v53;
    ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8Document11documentURIEvE3__0JZNKS9_11documentURIEvE3__1EEEEEJRKNS0_6__implIJNS6_6StringENS6_3URLEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v54, __n_4, v8 + 1128);
    LOBYTE(v53) = 32;
    __n_4[0] = (uint64_t)v54;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v49, (char *)&v53, __n_4);
    v10 = v54;
    v54 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v11 = v49;
  if (v49
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v49),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v49),
        (v11 = v49) != 0))
  {
    *(_DWORD *)v11 += 2;
  }
  v12 = v50;
  v50 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)result -= 2;
  }
  if (v11)
  {
    v14 = *((_DWORD *)v11 + 1);
    if (v14 < 0)
      goto LABEL_74;
  }
  else
  {
    v14 = 0;
  }
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  v17 = v15;
  if ((__n & 0x80000000) != 0)
    goto LABEL_74;
  if ((v17 & 1) != 0)
    goto LABEL_74;
  v18 = __n + v16;
  if (__OFADD__(__n, v16))
    goto LABEL_74;
  v19 = (v18 + 17);
  if (__OFADD__(v18, 17))
    goto LABEL_74;
  if (!v11 || (*((_BYTE *)v11 + 16) & 4) != 0)
  {
    if (v18 == -17)
    {
      v20 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_64;
    }
    if ((v19 & 0x80000000) == 0)
    {
      result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
      v20 = v49;
      if (v49)
      {
        *(_DWORD *)v49 = 2;
        *((_DWORD *)v20 + 1) = v19;
        *((_QWORD *)v20 + 1) = (char *)v20 + 20;
        *((_DWORD *)v20 + 4) = 4;
        *((_BYTE *)v20 + 36) = 120;
        *(_OWORD *)((char *)v20 + 20) = *(_OWORD *)"LocalFrameView 0x";
        v25 = (char *)v20 + 37;
        v26 = __n;
        if (__n)
        {
          v27 = (char *)&__n - __n;
          if (__n == 1)
            *v25 = *v27;
          else
            memcpy((char *)v20 + 37, v27, __n);
        }
        result = (WTF::StringImpl *)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v25[v26], 32, (uint64_t)v11);
        goto LABEL_64;
      }
    }
LABEL_74:
    *a2 = 0;
    __break(0xC471u);
    return result;
  }
  if (v18 != -17)
  {
    if (v19 <= 0x7FFFFFEF)
    {
      result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(2 * v19 + 20));
      v20 = v49;
      if (v49)
      {
        *(_DWORD *)v49 = 2;
        *((_DWORD *)v20 + 1) = v19;
        *(_OWORD *)((char *)v20 + 20) = xmmword_1969F5900;
        *((_QWORD *)v20 + 1) = (char *)v20 + 20;
        *((_DWORD *)v20 + 4) = 0;
        v21 = (char *)v20 + 54;
        *(_OWORD *)((char *)v20 + 36) = xmmword_1969F5910;
        *((_WORD *)v20 + 26) = 120;
        v22 = (int8x16_t *)((char *)&__n - __n);
        v23 = (uint64_t)v20 + 2 * __n + 54;
        if (__n >= 0x40)
        {
          v24 = &v21[2 * (__n & 0xFFFFFFC0)];
          v28 = 0uLL;
          v29 = (char *)v20 + 54;
          do
          {
            v60.val[0] = *v22;
            v30 = v22[1];
            v62.val[0] = v22[2];
            v31 = v22[3];
            v22 += 4;
            v32 = v31;
            v62.val[1] = 0uLL;
            v64.val[0] = v30;
            v60.val[1] = 0uLL;
            v33 = v29;
            vst2q_s8(v33, v60);
            v33 += 32;
            v64.val[1] = 0uLL;
            vst2q_s8(v33, v64);
            v34 = v29 + 64;
            vst2q_s8(v34, v62);
            v35 = v29 + 96;
            vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
            v29 += 128;
          }
          while (v29 != v24);
        }
        else
        {
          v24 = (char *)v20 + 54;
        }
        while (v24 != (char *)v23)
        {
          v36 = v22->u8[0];
          v22 = (int8x16_t *)((char *)v22 + 1);
          *(_WORD *)v24 = v36;
          v24 += 2;
        }
        v37 = &v21[2 * __n];
        *(_WORD *)v37 = 32;
        result = (WTF::StringImpl *)(v37 + 2);
        v7 = (_OWORD *)*((_QWORD *)v11 + 1);
        v38 = *((unsigned int *)v11 + 1);
        if ((*((_BYTE *)v11 + 16) & 4) == 0)
        {
          if ((_DWORD)v38 == 1)
          {
            *(_WORD *)result = *(_WORD *)v7;
          }
          else if ((_DWORD)v38)
          {
            result = (WTF::StringImpl *)memcpy(result, v7, 2 * v38);
          }
          goto LABEL_57;
        }
        v39 = (WTF::StringImpl *)((char *)result + 2 * v38);
        if (v38 >= 0x40)
        {
          v40 = (WTF::StringImpl *)((char *)result + 2 * (v38 & 0xFFFFFFC0));
          v41 = 0uLL;
          do
          {
            v61.val[0] = (int8x16_t)*v7;
            v42 = *((int8x16_t *)v7 + 1);
            v63.val[0] = (int8x16_t)v7[2];
            v43 = v7[3];
            v7 += 4;
            v44 = v43;
            v63.val[1] = 0uLL;
            v65.val[0] = v42;
            v61.val[1] = 0uLL;
            v45 = (char *)result;
            vst2q_s8(v45, v61);
            v45 += 32;
            v65.val[1] = 0uLL;
            vst2q_s8(v45, v65);
            v46 = (char *)result + 64;
            vst2q_s8(v46, v63);
            v47 = (char *)result + 96;
            vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
            result = (WTF::StringImpl *)((char *)result + 128);
          }
          while (result != v40);
          result = v40;
        }
        while (result != v39)
        {
          v48 = *(unsigned __int8 *)v7;
          v7 = (_OWORD *)((char *)v7 + 1);
          *(_WORD *)result = v48;
          result = (WTF::StringImpl *)((char *)result + 2);
        }
LABEL_64:
        *a2 = v20;
        if (!v11)
          return result;
        goto LABEL_65;
      }
    }
    goto LABEL_74;
  }
  v20 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_57:
  *a2 = v20;
LABEL_65:
  if (*(_DWORD *)v11 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v7);
  *(_DWORD *)v11 -= 2;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::LocalFrameView::debugDescription@<X0>(WebCore::LocalFrameView *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::LocalFrameView::debugDescription((WebCore::LocalFrameView *)((char *)this - 64), a2);
}

uint64_t WebCore::LocalFrameView::canShowNonOverlayScrollbars(WebCore::LocalFrameView *this)
{
  const WebCore::StyleColor *v2;
  int v3;
  WebCore::Node *v4;
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  _BYTE v19[8];
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;

  WebCore::LocalFrameView::rootElementForCustomScrollbarPartStyle((uint64_t)&v18, this);
  v4 = v18;
  if (!v18)
  {
    v7 = 0;
    goto LABEL_11;
  }
  v5 = *((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    if ((*(_BYTE *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FF51B4);
    }
    if ((*(_BYTE *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    {
      v6 = *(_DWORD *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v6;
      if ((*(_BYTE *)(v5 + 103) & 2) == 0)
      {
        v3 = 0;
LABEL_7:
        if (!v6)
        {
          __break(0xC471u);
          JUMPOUT(0x195FF51DCLL);
        }
        *(_DWORD *)(v5 + 16) = v6 - 1;
        LODWORD(v5) = 1;
        goto LABEL_9;
      }
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 40) + 586))
      {
        v13 = *(_QWORD *)(v5 + 104);
        v2 = (const WebCore::StyleColor *)(v13 + 384);
        if (!*(_DWORD *)(v13 + 392) && (*(_BYTE *)(v13 + 390) & 4) == 0)
        {
          v14 = 0;
LABEL_27:
          v3 = v14 ^ 1;
          goto LABEL_7;
        }
        v16 = v5;
        v17 = v4;
        WebCore::StyleColor::StyleColor((WebCore::StyleColor *)v19, v2);
        WebCore::StyleColor::StyleColor((WebCore::StyleColor *)&v21, (const WebCore::StyleColor *)(v13 + 400));
        v23 = 1;
        if (v22 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v24, &v21);
        v22 = -1;
        if (v20 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(&v24, v19);
        v5 = v16;
        v4 = v17;
        v6 = *(_DWORD *)(v16 + 16);
      }
      v14 = 1;
      goto LABEL_27;
    }
    LODWORD(v5) = 0;
  }
LABEL_9:
  v7 = v3 & v5;
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, v2);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
LABEL_11:
  v9 = *((_QWORD *)this + 8);
  v8 = (char *)this + 64;
  v10 = (*(unsigned int (**)(char *))(v9 + 144))(v8) == 1
     && (*(uint64_t (**)(char *))(*(_QWORD *)v8 + 152))(v8) == 1;
  if (((v7 | v10) & 1) == 0)
  {
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v12 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_19;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_36;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v12 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
    {
LABEL_19:
      v10 = (*(uint64_t (**)(uint64_t *))(*v12 + 64))(v12);
      return v10 ^ 1u;
    }
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_36:
    *v15 = 1;
    goto LABEL_19;
  }
  return v10 ^ 1u;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::canShowNonOverlayScrollbars(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::canShowNonOverlayScrollbars((WebCore::LocalFrameView *)((char *)this - 64));
}

BOOL WebCore::LocalFrameView::horizontalNativeScrollbarVisibility(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::styleHidesScrollbarWithOrientation(this, 0);
}

BOOL WebCore::LocalFrameView::verticalNativeScrollbarVisibility(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::styleHidesScrollbarWithOrientation(this, 1);
}

uint64_t WebCore::LocalFrameView::addSlowRepaintObject(WebCore::LocalFrameView *this, WebCore::RenderElement *a2)
{
  _QWORD *v4;
  void *v5;
  WTF ***v6;
  WTF **v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v4 = (_QWORD *)*((_QWORD *)this + 71);
  if (v4)
  {
    v22 = (_QWORD *)*v4;
    if (!*v4 || !*((_DWORD *)v22 - 3))
    {
      LOBYTE(v6) = 0;
      goto LABEL_15;
    }
    v23 = *((unsigned int *)v22 - 1);
    v24 = &v22[v23];
    if ((_DWORD)v23)
    {
      v25 = 8 * v23;
      while ((unint64_t)(*v22 + 1) <= 1)
      {
        ++v22;
        v25 -= 8;
        if (!v25)
          goto LABEL_57;
      }
    }
    if (v22 != v24)
    {
      v26 = *v22;
LABEL_61:
      if (*(_QWORD *)(v26 + 8))
        goto LABEL_58;
      while (++v22 != v24)
      {
        v26 = *v22;
        if ((unint64_t)(*v22 + 1) > 1)
        {
          if (v22 != v24)
            goto LABEL_61;
          break;
        }
      }
    }
LABEL_57:
    v22 = v24;
LABEL_58:
    LOBYTE(v6) = v22 != v24;
    goto LABEL_15;
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = 0;
  v4[1] = 0;
  v6 = (WTF ***)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = v4;
  if (v6)
  {
    v7 = *v6;
    if (*v6)
    {
      v8 = *((unsigned int *)v7 - 1);
      if ((_DWORD)v8)
      {
        v9 = *v6;
        do
        {
          v10 = *v9;
          if (*v9 != (WTF *)-1)
          {
            *v9 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 1)
                WTF::fastFree(v10, v5);
              else
                --*(_DWORD *)v10;
            }
          }
          ++v9;
          --v8;
        }
        while (v8);
      }
      WTF::fastFree((WTF *)(v7 - 2), v5);
    }
    WTF::fastFree((WTF *)v6, v5);
    LOBYTE(v6) = 0;
    v4 = (_QWORD *)*((_QWORD *)this + 71);
  }
LABEL_15:
  result = (uint64_t)WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)v4, a2, (uint64_t)v27);
  if (v27[16])
  {
    while ((*((_BYTE *)a2 + 45) & 0x10) == 0)
    {
      v12 = *((_QWORD *)a2 + 4);
      if (v12)
      {
        a2 = *(WebCore::RenderElement **)(v12 + 8);
        if (a2)
          continue;
      }
      goto LABEL_27;
    }
LABEL_20:
    if ((*((_BYTE *)a2 + 21) & 0x80) != 0)
    {
      result = *((_QWORD *)a2 + 18);
      if (result)
      {
        *(_DWORD *)(result + 12) |= 0x100u;
        result = WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(result, 2);
      }
    }
    else
    {
      while (1)
      {
        v13 = *((_QWORD *)a2 + 4);
        if (!v13)
          break;
        a2 = *(WebCore::RenderElement **)(v13 + 8);
        if (!a2)
          break;
        if ((*((_BYTE *)a2 + 45) & 0x10) != 0)
          goto LABEL_20;
      }
    }
  }
LABEL_27:
  if ((v6 & 1) == 0)
  {
    v14 = *((_QWORD *)this + 41);
    if (v14)
    {
      while (1)
      {
        do
        {
LABEL_29:
          v15 = (_QWORD *)v14;
          if (!*(_BYTE *)(v14 + 144))
          {
            v16 = *(_QWORD *)(v14 + 288);
            if (v16)
            {
              result = WebCore::LocalFrameView::useSlowRepaints(*(WebCore::LocalFrameView **)(v14 + 288), 1);
              if (*(_QWORD *)(v16 + 40))
                result = WebCore::ScrollView::platformSetCanBlitOnScroll((id *)v16, result ^ 1);
              else
                *(_BYTE *)(v16 + 317) = result ^ 1;
            }
          }
          v14 = v15[11];
        }
        while (v14);
        v17 = *((_QWORD *)this + 41);
        v18 = *(_QWORD *)(v15[6] + 8);
        if (v18 == v17)
          break;
        v14 = v15[9];
        if (!v14)
        {
          if (v17)
          {
            while (1)
            {
              v20 = *(_QWORD *)(v18 + 56);
              if (!v20)
                break;
              v18 = *(_QWORD *)(v20 + 8);
              if (v18 == v17 || v18 == 0)
                break;
              v14 = *(_QWORD *)(v18 + 72);
              if (v14)
                goto LABEL_29;
            }
          }
          else
          {
            while (1)
            {
              v19 = *(_QWORD *)(v18 + 56);
              if (!v19)
                break;
              v18 = *(_QWORD *)(v19 + 8);
              if (!v18)
                break;
              v14 = *(_QWORD *)(v18 + 72);
              if (v14)
                goto LABEL_29;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

WTF *WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WTF *v11;
  void *v12;
  WTF *result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF **v17;
  unsigned int v19;
  void *v21;
  WTF *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v14 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v14)
      goto LABEL_23;
    v15 = 0;
    v16 = v14 - 1;
    do
    {
      v17 = (WTF **)(v8 + 8 * v16);
      if ((unint64_t)*v17 + 1 >= 2 && !*((_QWORD *)*v17 + 1))
      {
        v27 = v15;
        v26 = v16;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v17, a2);
        v16 = v26;
        v15 = v27 + 1;
      }
    }
    while ((unint64_t)v16--);
    v8 = *(_QWORD *)a1;
    if (v15)
    {
      v23 = v15;
      *(_DWORD *)(v8 - 16) += v15;
      v24 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      *(_DWORD *)(v24 - 12) = v25 - v23;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v19 = *(_DWORD *)(v8 - 4);
    if (v19 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v19)
    {
LABEL_23:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = (WTF *)a2[1];
  if (!v11)
  {
    v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *((_QWORD *)v11 + 1) = a2;
    v22 = (WTF *)a2[1];
    a2[1] = v11;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, v21);
        v11 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  *(_DWORD *)v11 += 2;
  v28 = v11;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v28, a3);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v11 == 1)
    return (WTF *)WTF::fastFree(v11, v12);
  --*(_DWORD *)v11;
  return result;
}

uint64_t WebCore::LocalFrameView::removeSlowRepaintObject(WebCore::LocalFrameView *this, WebCore::RenderElement *a2)
{
  uint64_t result;
  WebCore::RenderElement *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF **v9;
  WTF **v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  WTF **v24;
  WTF **v25;
  WTF *v26;

  result = *((_QWORD *)this + 71);
  if (!result)
    return result;
  v4 = a2;
  result = WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>(result, a2);
  if ((_DWORD)result)
  {
    while ((*((_BYTE *)v4 + 45) & 0x10) == 0)
    {
      v6 = *((_QWORD *)v4 + 4);
      if (v6)
      {
        v4 = *(WebCore::RenderElement **)(v6 + 8);
        if (v4)
          continue;
      }
      goto LABEL_14;
    }
LABEL_7:
    if ((*((_BYTE *)v4 + 21) & 0x80) != 0)
    {
      result = *((_QWORD *)v4 + 18);
      if (result)
      {
        *(_DWORD *)(result + 12) |= 0x100u;
        result = WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(result, 2);
      }
    }
    else
    {
      while (1)
      {
        v7 = *((_QWORD *)v4 + 4);
        if (!v7)
          break;
        v4 = *(WebCore::RenderElement **)(v7 + 8);
        if (!v4)
          break;
        if ((*((_BYTE *)v4 + 45) & 0x10) != 0)
          goto LABEL_7;
      }
    }
  }
LABEL_14:
  v8 = (WTF *)*((_QWORD *)this + 71);
  v9 = *(WTF ***)v8;
  if (!*(_QWORD *)v8 || !*((_DWORD *)v9 - 3))
    goto LABEL_16;
  v22 = *((unsigned int *)v9 - 1);
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    v24 = *(WTF ***)v8;
    while ((unint64_t)*v24 + 1 <= 1)
    {
      ++v24;
      v23 -= 8;
      if (!v23)
        goto LABEL_16;
    }
  }
  else
  {
    v24 = *(WTF ***)v8;
  }
  v25 = &v9[v22];
  if (v24 == v25)
    goto LABEL_16;
  v26 = *v24;
LABEL_56:
  if (!*((_QWORD *)v26 + 1))
  {
    while (++v24 != v25)
    {
      v26 = *v24;
      if ((unint64_t)*v24 + 1 > 1)
      {
        if (v24 != v25)
          goto LABEL_56;
        break;
      }
    }
LABEL_16:
    *((_QWORD *)this + 71) = 0;
    v10 = *(WTF ***)v8;
    if (*(_QWORD *)v8)
    {
      v11 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v11)
      {
        v12 = *(WTF ***)v8;
        do
        {
          v13 = *v12;
          if (*v12 != (WTF *)-1)
          {
            *v12 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
                WTF::fastFree(v13, v5);
              else
                --*(_DWORD *)v13;
            }
          }
          ++v12;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree((WTF *)(v10 - 2), v5);
    }
    result = WTF::fastFree(v8, v5);
    v14 = *((_QWORD *)this + 41);
    if (v14)
    {
      while (1)
      {
        do
        {
LABEL_28:
          v15 = (_QWORD *)v14;
          if (!*(_BYTE *)(v14 + 144))
          {
            v16 = *(_QWORD *)(v14 + 288);
            if (v16)
            {
              result = WebCore::LocalFrameView::useSlowRepaints(*(WebCore::LocalFrameView **)(v14 + 288), 1);
              if (*(_QWORD *)(v16 + 40))
                result = WebCore::ScrollView::platformSetCanBlitOnScroll((id *)v16, result ^ 1);
              else
                *(_BYTE *)(v16 + 317) = result ^ 1;
            }
          }
          v14 = v15[11];
        }
        while (v14);
        v17 = *((_QWORD *)this + 41);
        v18 = *(_QWORD *)(v15[6] + 8);
        if (v18 == v17)
          break;
        v14 = v15[9];
        if (!v14)
        {
          if (v17)
          {
            while (1)
            {
              v20 = *(_QWORD *)(v18 + 56);
              if (!v20)
                break;
              v18 = *(_QWORD *)(v20 + 8);
              if (v18 == v17 || v18 == 0)
                break;
              v14 = *(_QWORD *)(v18 + 72);
              if (v14)
                goto LABEL_28;
            }
          }
          else
          {
            while (1)
            {
              v19 = *(_QWORD *)(v18 + 56);
              if (!v19)
                break;
              v18 = *(_QWORD *)(v19 + 8);
              if (!v18)
                break;
              v14 = *(_QWORD *)(v18 + 72);
              if (v14)
                goto LABEL_28;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  WTF *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v4 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v5 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v6 = v5;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v6;
      goto LABEL_6;
    }
    v9 = *(unsigned int *)(v4 - 4);
    if (!(_DWORD)v9)
      goto LABEL_22;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = v4 + 8 * v11;
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v12 + 8))
      {
        v23 = a2;
        v25 = a1;
        v20 = v4;
        v21 = v10;
        v19 = v11;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket((WTF **)(v4 + 8 * v11), a2);
        v11 = v19;
        v4 = v20;
        a2 = v23;
        a1 = v25;
        v10 = v21 + 1;
      }
    }
    while ((unint64_t)v11--);
    v4 = *(_QWORD *)a1;
    if (v10)
    {
      v16 = v10;
      *(_DWORD *)(v4 - 16) += v10;
      v17 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      *(_DWORD *)(v17 - 12) = v18 - v16;
      v4 = *(_QWORD *)a1;
    }
    if (!v4)
      goto LABEL_3;
    v14 = *(_DWORD *)(v4 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v4 - 12) >= v14)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v22 = a2;
      v24 = a1;
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v22;
      a1 = v24;
      v4 = *(_QWORD *)v24;
      *(_DWORD *)(v24 + 8) = 0;
      if (!v4)
      {
        v5 = 0;
        goto LABEL_4;
      }
    }
    v5 = *(_DWORD *)(v4 - 12);
    v6 = 0x7FFFFFFF;
    if (v5 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v7 = (WTF *)a2[1];
  if (v7 && *((_QWORD *)v7 + 1))
    return WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((uint64_t *)a1, v7);
  else
    return 0;
}

uint64_t WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  if (!*a1 || !*((_DWORD *)v1 - 3))
    return 1;
  v3 = *((unsigned int *)v1 - 1);
  v4 = &v1[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*v1 + 1) <= 1)
    {
      ++v1;
      v5 -= 8;
      if (!v5)
        goto LABEL_8;
    }
  }
  if (v1 != v4)
  {
    v6 = *v1;
LABEL_12:
    if (*(_QWORD *)(v6 + 8))
      return v1 == v4;
    while (++v1 != v4)
    {
      v6 = *v1;
      if ((unint64_t)(*v1 + 1) > 1)
      {
        if (v1 != v4)
          goto LABEL_12;
        break;
      }
    }
  }
LABEL_8:
  v1 = v4;
  return v1 == v4;
}

uint64_t WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::RenderElement>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;

  ++*((_DWORD *)a1 + 2);
  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *a1;
      if (*a1)
      {
        v4 = *(_DWORD *)(v3 - 8);
        v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
        v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        for (i = 1; ; ++i)
        {
          v10 = *(_QWORD *)(v3 + 8 * v8);
          if (!v10)
            break;
          if (v10 != -1 && v10 == v2)
            return 1;
          v8 = (v8 + i) & v4;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::LocalFrameView::addViewportConstrainedObject(WebCore::LocalFrameView *this, WebCore::RenderLayerModelObject *a2)
{
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  WTF *v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  WebCore::ScrollingCoordinator *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  WTF *v19;
  WTF **v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF **v24;
  unsigned int v26;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF *v38;

  v4 = (_QWORD *)*((_QWORD *)this + 163);
  if (!v4)
  {
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = 0;
    v17[1] = 0;
    v19 = (WTF *)*((_QWORD *)this + 163);
    *((_QWORD *)this + 163) = v17;
    if (v19)
    {
      v20 = *(WTF ***)v19;
      if (*(_QWORD *)v19)
      {
        v28 = *((unsigned int *)v20 - 1);
        if ((_DWORD)v28)
        {
          v29 = *(WTF ***)v19;
          do
          {
            v30 = *v29;
            if (*v29 != (WTF *)-1)
            {
              *v29 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 1)
                  WTF::fastFree(v30, v18);
                else
                  --*(_DWORD *)v30;
              }
            }
            ++v29;
            --v28;
          }
          while (v28);
        }
        WTF::fastFree((WTF *)(v20 - 2), v18);
      }
      WTF::fastFree(v19, v18);
      v4 = (_QWORD *)*((_QWORD *)this + 163);
    }
    else
    {
      v4 = v17;
    }
  }
  v5 = *((_DWORD *)v4 + 2);
  *((_DWORD *)v4 + 2) = v5 + 1;
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (!v6
    || !v6[1]
    || (result = WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::contains<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(*v4, (uint64_t)v6), (result & 1) == 0))
  {
    *((_DWORD *)v4 + 2) = v5 + 2;
    if ((v5 + 2) <= *((_DWORD *)v4 + 3))
      goto LABEL_8;
    v7 = *v4;
    if (!*v4)
      goto LABEL_5;
    v21 = *(_DWORD *)(v7 - 4);
    if (!v21)
      goto LABEL_40;
    v22 = 0;
    v23 = v21 - 1;
    do
    {
      v24 = (WTF **)(v7 + 8 * v23);
      if ((unint64_t)*v24 + 1 >= 2 && !*((_QWORD *)*v24 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v24, v6);
        ++v22;
      }
    }
    while ((unint64_t)v23--);
    v7 = *v4;
    if (v22)
    {
      *(_DWORD *)(v7 - 16) += v22;
      v35 = *v4;
      if (*v4)
        v36 = *(_DWORD *)(v35 - 12);
      else
        v36 = 0;
      *(_DWORD *)(v35 - 12) = v36 - v22;
      v7 = *v4;
    }
    if (!v7)
    {
LABEL_5:
      v8 = 0;
      *((_DWORD *)v4 + 2) = 0;
LABEL_6:
      v9 = v8;
LABEL_7:
      *((_DWORD *)v4 + 3) = 2 * v9;
LABEL_8:
      v10 = (WTF *)*((_QWORD *)a2 + 1);
      if (!v10)
      {
        v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v10 = 1;
        *((_QWORD *)v10 + 1) = a2;
        v32 = (WTF *)*((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v10;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1)
          {
            WTF::fastFree(v32, v31);
            v10 = (WTF *)*((_QWORD *)a2 + 1);
          }
          else
          {
            --*(_DWORD *)v32;
          }
        }
      }
      *(_DWORD *)v10 += 2;
      v38 = v10;
      WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add(v4, &v38, (uint64_t)&v37);
      result = (uint64_t)v38;
      v38 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = WTF::fastFree((WTF *)result, v11);
        else
          --*(_DWORD *)result;
      }
      if (*(_DWORD *)v10 == 1)
        result = WTF::fastFree(v10, v11);
      else
        --*(_DWORD *)v10;
      if (*((_QWORD *)this + 5))
        result = WebCore::LocalFrameView::updateCanBlitOnScrollRecursively((uint64_t)this);
      v13 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
      if (v13)
      {
        result = *(_QWORD *)(v13 + 8);
        if (result)
        {
          result = WebCore::Page::scrollingCoordinator((WebCore::Page *)result);
          if (result)
          {
            v14 = (WebCore::ScrollingCoordinator *)result;
            result = (*(uint64_t (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)result + 40))(result, this);
            if ((_DWORD)result)
              result = WebCore::ScrollingCoordinator::updateSynchronousScrollingReasons(v14, this);
          }
        }
      }
      v15 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
        {
          ++*(_DWORD *)v16;
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v16 + 48) + 16) + 1744))(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16));
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::Page::~Page(v16);
            return WTF::fastFree(v33, v34);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
      return result;
    }
    v26 = *(_DWORD *)(v7 - 4);
    if (v26 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v26)
    {
LABEL_40:
      *((_DWORD *)v4 + 2) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(v4);
      v7 = *v4;
      *((_DWORD *)v4 + 2) = 0;
      if (!v7)
      {
        v8 = 0;
        goto LABEL_6;
      }
    }
    v8 = *(_DWORD *)(v7 - 12);
    v9 = 0x7FFFFFFF;
    if (v8 >= 0x7FFFFFFF)
      goto LABEL_7;
    goto LABEL_6;
  }
  return result;
}

uint64_t WebCore::LocalFrameView::removeViewportConstrainedObject(WebCore::LocalFrameView *this, WebCore::RenderLayerModelObject *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScrollingCoordinator *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;

  result = *((_QWORD *)this + 163);
  if (result)
  {
    result = WTF::WeakHashSet<WebCore::RenderLayerModelObject,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayerModelObject>(result, a2);
    if ((_DWORD)result)
    {
      v4 = *((_QWORD *)this + 41);
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        result = *(_QWORD *)(v5 + 8);
        if (result)
        {
          result = WebCore::Page::scrollingCoordinator((WebCore::Page *)result);
          if (result)
          {
            v6 = (WebCore::ScrollingCoordinator *)result;
            result = (*(uint64_t (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)result + 40))(result, this);
            if ((_DWORD)result)
              result = WebCore::ScrollingCoordinator::updateSynchronousScrollingReasons(v6, this);
          }
        }
        v4 = *((_QWORD *)this + 41);
      }
      while (1)
      {
        do
        {
LABEL_9:
          v7 = (_QWORD *)v4;
          if (!*(_BYTE *)(v4 + 144))
          {
            v8 = *(_QWORD *)(v4 + 288);
            if (v8)
            {
              result = WebCore::LocalFrameView::useSlowRepaints(*(WebCore::LocalFrameView **)(v4 + 288), 1);
              if (*(_QWORD *)(v8 + 40))
                result = WebCore::ScrollView::platformSetCanBlitOnScroll((id *)v8, result ^ 1);
              else
                *(_BYTE *)(v8 + 317) = result ^ 1;
            }
          }
          v4 = v7[11];
        }
        while (v4);
        v9 = *((_QWORD *)this + 41);
        v10 = *(_QWORD *)(v7[6] + 8);
        if (v10 == v9)
          break;
        v4 = v7[9];
        if (!v4)
        {
          if (v9)
          {
            while (1)
            {
              v11 = *(_QWORD *)(v10 + 56);
              if (!v11)
                goto LABEL_26;
              v10 = *(_QWORD *)(v11 + 8);
              if (v10 == v9 || v10 == 0)
                goto LABEL_26;
              v4 = *(_QWORD *)(v10 + 72);
              if (v4)
                goto LABEL_9;
            }
          }
          do
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8);
            v4 = *(_QWORD *)(v10 + 72);
          }
          while (!v4);
        }
      }
LABEL_26:
      v13 = *(_QWORD *)(v9 + 24);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          ++*(_DWORD *)v14;
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v14 + 48) + 16) + 1744))(*(_QWORD *)(*(_QWORD *)(v14 + 48) + 16));
          if (*(_DWORD *)v14 == 1)
          {
            WebCore::Page::~Page(v14);
            return WTF::fastFree(v15, v16);
          }
          else
          {
            --*(_DWORD *)v14;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::RenderLayerModelObject,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayerModelObject>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  WTF *v9;
  int v11;
  int v12;
  unsigned int v13;
  WTF **v14;
  unsigned int v16;
  uint64_t v18;
  int v19;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v8 = v7;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v8;
      goto LABEL_6;
    }
    v11 = *(_DWORD *)(v6 - 4);
    if (!v11)
      goto LABEL_22;
    v12 = 0;
    v13 = v11 - 1;
    do
    {
      v14 = (WTF **)(v6 + 8 * v13);
      if ((unint64_t)*v14 + 1 >= 2 && !*((_QWORD *)*v14 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v14, a2);
        ++v12;
      }
    }
    while ((unint64_t)v13--);
    v6 = *(_QWORD *)a1;
    if (v12)
    {
      *(_DWORD *)(v6 - 16) += v12;
      v18 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v19 = *(_DWORD *)(v18 - 12);
      else
        v19 = 0;
      *(_DWORD *)(v18 - 12) = v19 - v12;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v16 = *(_DWORD *)(v6 - 4);
    if (v16 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v16)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_4;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v9 = (WTF *)a2[1];
  if (v9 && *((_QWORD *)v9 + 1))
    return WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((uint64_t *)a1, v9);
  else
    return 0;
}

void WebCore::LocalFrameView::setBaseLayoutViewportOrigin(WebCore::LocalFrameView *this, uint64_t a2, int a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  WebCore::RenderView *v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  CGFloat v30;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v34;
  unsigned int v35;
  float MaxX;
  unsigned int v37;
  float MaxY;
  void *v39;
  float v40[4];
  char v41;
  CGRect v42;
  CGRect v43;

  if (*((_DWORD *)this + 270) != (_DWORD)a2 || *((_DWORD *)this + 271) != HIDWORD(a2))
  {
    v5 = (int *)((char *)this + 1080);
    *((_QWORD *)this + 135) = a2;
    if (a3)
      WebCore::LocalFrameView::setViewportConstrainedObjectsNeedLayout(this);
    v6 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 1944);
      if (v7)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 256);
        if (v8)
        {
          v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 832))(*(_QWORD *)(v8 + 72));
          if (v9)
          {
            v10 = v9;
            if (*((_BYTE *)this + 1104))
            {
              v5 = (int *)((char *)this + 1088);
              v20 = *((_QWORD *)this + 137);
            }
            else
            {
              v11 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
              if (v11 && (v12 = *(_QWORD *)(v11 + 1944)) != 0)
              {
                v14 = *(_QWORD *)(v12 + 160);
                v19 = v14 & 0xFFFFFFFF00000000;
              }
              else
              {
                v13 = (void *)*((_QWORD *)this + 5);
                if (v13)
                {
                  v39 = (void *)*((_QWORD *)this + 5);
                  if (objc_msgSend(v13, "conformsToProtocol:", &unk_1EE342188))
                    v39 = (void *)objc_msgSend(v39, "superview");
                  objc_msgSend(v39, "frame", v39);
                  v30 = v29;
                  y = v42.origin.y;
                  width = v42.size.width;
                  height = v42.size.height;
                  *(float *)&v29 = v29;
                  v34 = vcvtms_s32_f32(*(float *)&v29);
                  *(float *)&v29 = v42.origin.y;
                  v35 = vcvtms_s32_f32(*(float *)&v29);
                  v42.origin.x = v30;
                  MaxX = CGRectGetMaxX(v42);
                  v37 = vcvtps_s32_f32(MaxX);
                  v43.origin.x = v30;
                  v43.origin.y = y;
                  v43.size.width = width;
                  v43.size.height = height;
                  MaxY = CGRectGetMaxY(v43);
                  v14 = (v37 - v34) | ((unint64_t)(vcvtps_s32_f32(MaxY) - v35) << 32);
                }
                else
                {
                  v14 = *((_QWORD *)this + 7);
                }
                v15 = HIDWORD(v14);
                v16 = (_DWORD)v14 << 6;
                if ((int)v14 < -33554432)
                  v16 = 0x80000000;
                v17 = (int)v14 <= 0x1FFFFFF;
                LODWORD(v14) = 0x7FFFFFFF;
                if (v17)
                  LODWORD(v14) = v16;
                v18 = v15 << 38;
                if ((int)v15 < -33554432)
                  v18 = 0x8000000000000000;
                v17 = (int)v15 <= 0x1FFFFFF;
                v19 = 0x7FFFFFFF00000000;
                if (v17)
                  v19 = v18;
              }
              v20 = v19 | v14;
            }
            v21 = (float)*v5 * 0.015625;
            v22 = (float)v5[1] * 0.015625;
            v23 = (float)(int)v20 * 0.015625;
            v24 = (float)SHIDWORD(v20) * 0.015625;
            v25 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
            if (v25)
            {
              v26 = *(WebCore::RenderView **)(v25 + 1944);
              if (v26)
              {
                v27 = WebCore::RenderView::unscaledDocumentRect(v26);
                LODWORD(v25) = -(int)v27;
                v28 = -(uint64_t)(v27 & 0xFFFFFFFF00000000);
LABEL_32:
                v40[0] = v21 + (float)(int)(v28 | v25);
                v40[1] = v22 + (float)SHIDWORD(v28);
                v40[2] = v23;
                v40[3] = v24;
                v41 = 1;
                (*(void (**)(uint64_t, float *))(*(_QWORD *)v10 + 64))(v10, v40);
                return;
              }
              LODWORD(v25) = 0;
            }
            v28 = 0;
            goto LABEL_32;
          }
        }
      }
    }
  }
}

uint64_t WebCore::LocalFrameView::invalidateScrollAnchoringElement(WebCore::LocalFrameView *this, const WebCore::RenderObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 169);
  if (result)
    return WebCore::ScrollAnchoringController::invalidateAnchorElement(result, a2);
  return result;
}

WebCore::ScrollAnchoringController *WebCore::LocalFrameView::updateScrollAnchoringElement(WebCore::LocalFrameView *this)
{
  WebCore::ScrollAnchoringController *result;

  result = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 169);
  if (result)
    return (WebCore::ScrollAnchoringController *)WebCore::ScrollAnchoringController::updateAnchorElement(result);
  return result;
}

float WebCore::LocalFrameView::frameScaleFactor(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  int v5;
  WTF *v7;
  void *v8;

  v1 = *((_QWORD *)this + 41);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = 1.0;
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      v5 = (*(_DWORD *)v4)++;
      if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1 && !*(_BYTE *)(v4 + 1098))
        v3 = *(float *)(v4 + 356);
      if (v5)
      {
        *(_DWORD *)v4 = v5;
      }
      else
      {
        WebCore::Page::~Page((WebCore::Page *)v4);
        WTF::fastFree(v7, v8);
      }
    }
  }
  return v3;
}

double WebCore::LocalFrameView::viewportConstrainedVisibleContentRect(WebCore::LocalFrameView *this)
{
  int64x2_t v2;
  int32x2_t v3;
  int32x2_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int32x2_t v7;
  int64x2_t v8;
  int32x2_t v9;
  int8x16_t v10;
  int32x2_t v11;
  int8x16_t v12;
  int32x2_t v13;
  int8x16_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int8x16_t v21;
  double result;

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 136) + 704) & 0x1000) != 0 || !*((_BYTE *)this + 1176))
  {
    (*(void (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 0);
    v16 = v15 << 6;
    if ((int)v15 < -33554432)
      v16 = 0x80000000;
    if ((int)v15 <= 0x1FFFFFF)
      v17 = v16;
    else
      v17 = 0x7FFFFFFFLL;
    v18 = HIDWORD(v15) << 38;
    if (SHIDWORD(v15) < -33554432)
      v18 = 0x8000000000000000;
    if (SHIDWORD(v15) <= 0x1FFFFFF)
      v19 = v18;
    else
      v19 = 0x7FFFFFFF00000000;
    v20 = WebCore::LocalFrameView::scrollPositionForFixedPosition((int32x2_t *)this);
    v14.i64[0] = v20 & 0xFFFFFFFF00000000;
    v14.i64[1] = v19;
    v10.i64[0] = v20;
    v10.i64[1] = v17;
  }
  else
  {
    v2 = *(int64x2_t *)((char *)this + 1180);
    v3 = vmovn_s64(v2);
    v4 = vcgt_s32(v3, (int32x2_t)0xFE000000FE000000);
    v5.i64[0] = v4.i32[0];
    v5.i64[1] = v4.i32[1];
    v6 = v5;
    v7 = vcgt_s32((int32x2_t)0xFE000000FE000000, v3);
    v5.i64[0] = v7.i32[0];
    v5.i64[1] = v7.i32[1];
    v8 = (int64x2_t)vshrq_n_u64((uint64x2_t)v2, 0x20uLL);
    v9 = vshrn_n_s64(v2, 0x20uLL);
    v10 = vbslq_s8(v6, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), vbslq_s8(v5, (int8x16_t)vdupq_n_s64(0x80000000uLL), (int8x16_t)vshlq_n_s64(v2, 6uLL)));
    v11 = vcgt_s32(v9, (int32x2_t)0xFE000000FE000000);
    v5.i64[0] = v11.i32[0];
    v5.i64[1] = v11.i32[1];
    v12 = v5;
    v13 = vcgt_s32((int32x2_t)0xFE000000FE000000, v9);
    v5.i64[0] = v13.i32[0];
    v5.i64[1] = v13.i32[1];
    v14 = vbslq_s8(v12, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v5, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v8, 0x26uLL)));
  }
  v21.i64[0] = 0xFFFFFFFFLL;
  v21.i64[1] = 0xFFFFFFFFLL;
  *(_QWORD *)&result = vorrq_s8(v14, vandq_s8(v10, v21)).u64[0];
  return result;
}

unint64_t WebCore::LocalFrameView::scrollPositionForFixedPosition(WebCore::ScrollableArea *this, WebCore::LayoutRect *a2, const WebCore::LayoutSize *a3, const WebCore::LayoutPoint *a4, char a5, char a6, WebCore::LayoutPoint *a7, int a8, float a9)
{
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unint64_t v31;

  if ((a6 & 1) != 0)
  {
    v13 = *(_QWORD *)a3;
    v14 = HIDWORD(*(_QWORD *)a3);
    v15 = (_DWORD)a7 << 6;
    if ((int)a7 < -33554432)
      v15 = 0x80000000;
    if ((int)a7 > 0x1FFFFFF)
      v15 = 0x7FFFFFFF;
    v16 = __OFSUB__((_DWORD)v14, v15);
    v17 = v14 - v15;
    LODWORD(v14) = (v14 >> 31) + 0x7FFFFFFF;
    if (!v16)
      LODWORD(v14) = v17;
  }
  else
  {
    v13 = WebCore::ScrollableArea::constrainScrollPositionForOverhang(this, a2, a3, a4, a7, a8);
    v14 = HIDWORD(v13);
  }
  v19 = *((_DWORD *)this + 2);
  v18 = *((_DWORD *)this + 3);
  v20 = *(_DWORD *)a2;
  v21 = *(_DWORD *)a2 - v19;
  if (__OFSUB__(*(_DWORD *)a2, v19))
    v21 = (v20 >> 31) + 0x7FFFFFFF;
  v22 = *((_DWORD *)a2 + 1);
  v23 = v22 - v18;
  if (__OFSUB__(v22, v18))
    v23 = (v22 >> 31) + 0x7FFFFFFF;
  v24 = 1.0;
  v25 = 1.0;
  if ((a5 & 1) == 0)
  {
    if (v21)
      v24 = (float)((float)((float)v20 * 0.015625) - (float)((float)((float)v19 * 0.015625) * a9))
          / (float)((float)v21 * 0.015625);
    if (v23)
      v25 = (float)((float)((float)v22 * 0.015625) - (float)((float)((float)v18 * 0.015625) * a9))
          / (float)((float)v23 * 0.015625);
  }
  v26 = (float)((float)((float)(int)v14 * 0.015625) * v25) / a9;
  v27 = (float)((float)((float)((float)(int)v13 * 0.015625) * v24) / a9) * 64.0;
  v28 = 0x7FFFFFFFLL;
  v29 = 0x80000000;
  if (v27 > -2147483650.0)
    v29 = (int)v27;
  if (v27 < 2147483650.0)
    v28 = v29;
  v30 = v26 * 64.0;
  if (v30 >= 2147483650.0)
  {
    v31 = 0x7FFFFFFF00000000;
  }
  else if (v30 <= -2147483650.0)
  {
    v31 = 0x8000000000000000;
  }
  else
  {
    v31 = (unint64_t)(int)v30 << 32;
  }
  return v31 | v28;
}

float WebCore::LocalFrameView::yPositionForHeaderLayer(WebCore::LocalFrameView *this, const WebCore::FloatPoint *a2, float result)
{
  float v3;

  if (result == 0.0)
    return 0.0;
  v3 = fmaxf(*((float *)this + 1), 0.0);
  if (v3 < result)
    return v3;
  return result;
}

float WebCore::LocalFrameView::yPositionForFooterLayer(WebCore::LocalFrameView *this, const WebCore::FloatPoint *a2, float a3, float a4, float a5)
{
  float v5;

  if (a3 == 0.0)
  {
    a3 = 0.0;
  }
  else
  {
    v5 = fmaxf(*((float *)this + 1), 0.0);
    if (v5 < a3)
      a3 = v5;
  }
  return (float)(a3 + a4) - a5;
}

float WebCore::LocalFrameView::positionForRootContentLayer(WebCore::LocalFrameView *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, float a4, float a5)
{
  return 0.0 - *(float *)a2;
}

uint64_t WebCore::LocalFrameView::lastKnownMousePositionInView(WebCore::LocalFrameView *this, uint64_t a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 640);
  if (*(_BYTE *)(v3 + 308))
    v4 = *(_QWORD *)(v3 + 300);
  else
    v4 = 0;
  v6 = v4;
  return WebCore::Widget::convertFromContainingWindow(this, (const WebCore::IntPoint *)&v6, a3);
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::lastKnownMousePositionInView(WebCore::LocalFrameView *this, uint64_t a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*((_QWORD *)this + 33) + 640);
  if (*(_BYTE *)(v3 + 308))
    v4 = *(_QWORD *)(v3 + 300);
  else
    v4 = 0;
  v6 = v4;
  return WebCore::Widget::convertFromContainingWindow((WebCore::LocalFrameView *)((char *)this - 64), (const WebCore::IntPoint *)&v6, a3);
}

uint64_t WebCore::LocalFrameView::isHandlingWheelEvent(WebCore::LocalFrameView *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 41) + 640) + 187);
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::isHandlingWheelEvent(WebCore::LocalFrameView *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 33) + 640) + 187);
}

uint64_t WebCore::LocalFrameView::shouldSetCursor(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (*(_WORD *)(v2 + 658) & 4) != 0)
    return *(_WORD *)(*(_QWORD *)(v2 + 72) + 26) & 1;
  else
    return 0;
}

WebCore::Document *WebCore::LocalFrameView::useDarkAppearance(WebCore::LocalFrameView *this)
{
  WebCore::Document *result;
  uint64_t v2;
  uint64_t v3;

  result = *(WebCore::Document **)(*((_QWORD *)this + 41) + 296);
  if (result)
  {
    v2 = *((_QWORD *)result + 159);
    if (!v2)
      return (WebCore::Document *)WebCore::Document::useDarkAppearance(result, 0);
    v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v3)
      return (WebCore::Document *)WebCore::Document::useDarkAppearance(result, 0);
    if ((*(_BYTE *)(v3 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FF6A7CLL);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 148) & 4) != 0)
      return (WebCore::Document *)WebCore::RenderObject::useDarkAppearance((WebCore::RenderObject *)v3);
    else
      return (WebCore::Document *)WebCore::Document::useDarkAppearance(result, 0);
  }
  return result;
}

unint64_t WebCore::LocalFrameView::scrollContentsSlowPath(WebCore::LocalFrameView *this, const WebCore::IntRect *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  int v22;
  unint64_t result;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[20];
  __int128 v38;
  char v39;

  WebCore::LocalFrameView::repaintSlowRepaintObjects(*((_QWORD **)this + 71));
  v5 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 1944);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
          goto LABEL_52;
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256);
        if (v7)
        {
          v35 = *(_QWORD *)(v7 + 72);
          if (v35)
          {
            if ((*(_WORD *)(v35 + 177) & 0x20) != 0)
              goto LABEL_47;
          }
        }
      }
    }
  }
  if (!WebCore::LocalFrameView::isEnclosedInCompositingLayer(this, v4))
    goto LABEL_47;
  v9 = *(_QWORD *)(*((_QWORD *)this + 41) + 120);
  if (!v9)
    goto LABEL_47;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_47;
  v11 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 2;
  if ((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v12 = (*(unsigned __int8 *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if ((*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
        LOBYTE(v12) = 0;
      if ((v12 & 1) != 0)
        v13 = (_QWORD *)(*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL);
      else
        v13 = 0;
      if (v11)
        goto LABEL_17;
      goto LABEL_49;
    }
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x195FF6D54);
  }
  v13 = 0;
  if (v11)
  {
LABEL_17:
    *(_DWORD *)(v10 + 24) = v11;
    goto LABEL_18;
  }
LABEL_49:
  if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
LABEL_18:
  if (!v13)
  {
LABEL_47:
    v36 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 312))(this);
    return (*(uint64_t (**)(uint64_t, const WebCore::IntRect *))(*(_QWORD *)v36 + 80))(v36, a2);
  }
  v14 = (*(uint64_t (**)(_QWORD *))(*v13 + 1016))(v13);
  v15 = (*(uint64_t (**)(_QWORD *))(*v13 + 944))(v13);
  if (__OFADD__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  else
    v16 = v14 + v15;
  v17 = (*(uint64_t (**)(_QWORD *))(*v13 + 1000))(v13);
  v18 = (*(uint64_t (**)(_QWORD *))(*v13 + 928))(v13);
  if (__OFADD__(v17, v18))
    v19 = (v17 >> 31) + 0x7FFFFFFF;
  else
    v19 = v17 + v18;
  v21 = *((_QWORD *)this + 8);
  v20 = (char *)this + 64;
  v22 = (*(uint64_t (**)(char *))(v21 + 488))(v20);
  result = (*(uint64_t (**)(char *))(*(_QWORD *)v20 + 488))(v20);
  v24 = (v22 << 6);
  if (v22 < -33554432)
    v24 = 0x80000000;
  if (v22 > 0x1FFFFFF)
    v24 = 0x7FFFFFFFLL;
  v25 = 0x8000000000000000;
  if (SHIDWORD(result) >= -33554432)
    v25 = HIDWORD(result) << 38;
  v26 = 0x7FFFFFFF00000000;
  if (SHIDWORD(result) <= 0x1FFFFFF)
    v26 = v25;
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13[3] + 8) + 40) + 8) + 1944);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) + 40) + 8) + 3382))
  {
    v28 = v26 | v24;
    v29 = *(_QWORD *)(v27 + 248);
    v30 = *(unsigned int *)(v29 + 508);
    if ((_DWORD)v30 && (v30 = *(_QWORD *)(*(_QWORD *)(v29 + 496) + 8 * v30 - 8)) != 0)
    {
      v31 = *(_DWORD *)(v30 + 64);
      LODWORD(v30) = *(_DWORD *)(v30 + 68);
    }
    else
    {
      v31 = 0;
    }
    v32 = __OFADD__(v16, v31);
    v33 = v16 + v31;
    if (v32)
      v33 = (v16 >> 31) + 0x7FFFFFFF;
    v32 = __OFADD__(v19, (_DWORD)v30);
    v34 = v19 + v30;
    if (v32)
      v34 = (v19 >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v38 = __PAIR64__(v34, v33);
    *((_QWORD *)&v38 + 1) = v28;
    v39 = 1;
    v37[0] = 0;
    v37[16] = 0;
    return WebCore::RenderObject::issueRepaint((uint64_t)v13, &v38, 1, 0, (uint64_t)v37);
  }
  return result;
}

_QWORD *WebCore::LocalFrameView::repaintSlowRepaintObjects(_QWORD *this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  if (!this)
    return this;
  v1 = this;
  v2 = (uint64_t *)*this;
  if (!*this)
  {
    v3 = 0;
    v4 = 0;
LABEL_4:
    v5 = v3;
    v3 = &v2[v4];
    goto LABEL_11;
  }
  v4 = *((unsigned int *)v2 - 1);
  v3 = &v2[v4];
  if (!*((_DWORD *)v2 - 3))
    goto LABEL_4;
  if (!(_DWORD)v4)
  {
    v8 = 0;
    v5 = (uint64_t *)*this;
    goto LABEL_14;
  }
  v6 = 8 * v4;
  v5 = (uint64_t *)*this;
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v6 -= 8;
    if (!v6)
    {
      v5 = v3;
      break;
    }
  }
LABEL_11:
  if (v2)
  {
    v8 = *((unsigned int *)v2 - 1);
LABEL_14:
    v7 = &v2[v8];
    goto LABEL_15;
  }
  v7 = 0;
LABEL_15:
  if (v7 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v14 = v5 + 1;
      v5 = v3;
      if (v14 != v3)
      {
        v5 = v14;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v7)
      {
        v5 = v7;
        break;
      }
    }
  }
  if (v2)
    v9 = &v2[*((unsigned int *)v2 - 1)];
  else
    v9 = 0;
  while (v5 != v9)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = WebCore::RenderObject::repaintSlowRepaintObject(*(_QWORD **)(v11 + 8));
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v7;
    if (v12 != v7)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v7)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_26;
        }
        v5 = v7;
      }
    }
LABEL_26:
    ++*((_DWORD *)v1 + 2);
  }
  return this;
}

uint64_t WebCore::LocalFrameView::setIsOverlapped(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(this + 1366) != a2)
  {
    v2 = this;
    *(_BYTE *)(this + 1366) = a2;
    v3 = *(_QWORD *)(this + 328);
    if (v3)
    {
      while (1)
      {
        do
        {
LABEL_3:
          v4 = (_QWORD *)v3;
          if (!*(_BYTE *)(v3 + 144))
          {
            v5 = *(_QWORD *)(v3 + 288);
            if (v5)
            {
              this = WebCore::LocalFrameView::useSlowRepaints(*(WebCore::LocalFrameView **)(v3 + 288), 1);
              if (*(_QWORD *)(v5 + 40))
                this = WebCore::ScrollView::platformSetCanBlitOnScroll((id *)v5, this ^ 1);
              else
                *(_BYTE *)(v5 + 317) = this ^ 1;
            }
          }
          v3 = v4[11];
        }
        while (v3);
        v6 = *(_QWORD *)(v2 + 328);
        v7 = *(_QWORD *)(v4[6] + 8);
        if (v7 == v6)
          break;
        v3 = v4[9];
        if (!v3)
        {
          if (v6)
          {
            while (1)
            {
              v9 = *(_QWORD *)(v7 + 56);
              if (!v9)
                break;
              v7 = *(_QWORD *)(v9 + 8);
              if (v7 == v6 || v7 == 0)
                break;
              v3 = *(_QWORD *)(v7 + 72);
              if (v3)
                goto LABEL_3;
            }
          }
          else
          {
            while (1)
            {
              v8 = *(_QWORD *)(v7 + 56);
              if (!v8)
                break;
              v7 = *(_QWORD *)(v8 + 8);
              if (!v7)
                break;
              v3 = *(_QWORD *)(v7 + 72);
              if (v3)
                goto LABEL_3;
            }
          }
          return this;
        }
      }
    }
  }
  return this;
}

uint64_t WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 27))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *a2;
      v8 = *a2 + 32 * v6;
      do
      {
        v9 = *(_DWORD **)v7;
        if (*(_QWORD *)v7)
          *v9 += 2;
        *v5 = v9;
        v10 = *(_DWORD **)(v7 + 8);
        if (v10)
          *v10 += 2;
        v5[1] = v10;
        v11 = *(_DWORD **)(v7 + 16);
        if (v11)
          *v11 += 2;
        v5[2] = v11;
        v12 = *(_DWORD **)(v7 + 24);
        if (v12)
          *v12 += 2;
        v5[3] = v12;
        v7 += 32;
        v5 += 4;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void WebCore::LocalFrameView::maintainScrollPositionAtScrollToTextFragmentRange(WebCore::LocalFrameView *this, WebCore::SimpleRange *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>((uint64_t *)this + 76, (uint64_t *)a2);
  WebCore::plainText(a2, 0, 0, (const WTF::String *)&v9);
  v5 = v9;
  v9 = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = v5;
  if (!v6)
    goto LABEL_4;
  v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 != 2)
    goto LABEL_3;
  WTF::StringImpl::destroy(v6, v4);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
    {
LABEL_3:
      *(_DWORD *)v6 = v7;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v6, v8);
  }
LABEL_4:
  if (*((_BYTE *)this + 640))
    WebCore::LocalFrameView::scrollToTextFragmentRange(this);
}

uint64_t WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::ImageResource>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::LocalFrameView::scrollToAnchorAndTextFragmentNowIfNeeded(WebCore::LocalFrameView *this, WTF::StringImpl *a2)
{
  if (*((_BYTE *)this + 1390))
  {
    *((_BYTE *)this + 1390) = 0;
    WebCore::LocalFrameView::scrollToAnchor((uint64_t *)this, a2);
    WebCore::LocalFrameView::scrollToTextFragmentRange(this);
  }
}

void WebCore::LocalFrameView::scrollToTextFragmentRange(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  void *v10;
  WTF::StringImpl *v11;
  _BYTE v12[104];
  char v13;
  WTF::StringImpl *v14[16];
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  if (*((_BYTE *)this + 640)
    && !WebCore::LocalFrameViewLayoutContext::needsLayout((WebCore::LocalFrameView *)((char *)this + 336)))
  {
    if (*((_BYTE *)this + 640))
    {
      v2 = *((_QWORD *)this + 76);
      *(_DWORD *)(v2 + 24) += 2;
      v17 = v2;
      v18 = *((_DWORD *)this + 154);
      v3 = *((_QWORD *)this + 78);
      *(_DWORD *)(v3 + 24) += 2;
      v19 = v3;
      v20 = *((_DWORD *)this + 158);
      WebCore::plainText(&v17, 0, 0, (const WTF::String *)&v16);
      WebCore::plainText(&v17, 0, 0, (const WTF::String *)v14);
      v6 = WTF::equal(*((WTF **)this + 81), v14[0], v4);
      v7 = v14[0];
      v14[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      if (v6 && (*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) != 0 && (*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v8 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
        *(_DWORD *)(v8 + 24) += 2;
        v15 = v8;
        v9 = *((_BYTE *)this + 656);
        *((_BYTE *)this + 656) = 1;
        WebCore::VisibleSelection::VisibleSelection((uint64_t)v12, (uint64_t)&v17, 1, 0);
        v13 = 1;
        WebCore::TemporarySelectionChange::TemporarySelectionChange((uint64_t)v14, v8, (uint64_t)v12, 449);
        if (v13)
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v12);
        WebCore::TemporarySelectionChange::~TemporarySelectionChange((WebCore::TemporarySelectionChange *)v14, v10);
        *((_BYTE *)this + 656) = v9;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
      }
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v5);
        else
          *(_DWORD *)v11 -= 2;
      }
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&v17);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t WebCore::LocalFrameView::scrollElementToRect(WebCore::LocalFrameView *this, const WebCore::Element *a2, const WebCore::IntRect *a3)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  __int128 v33;
  _DWORD v34[2];

  v6 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    WebCore::Document::updateLayout(v6, 2u, 0);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::updateLayout(0, 2u, 0);
  }
  v8 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FF75DCLL);
    }
    v8 = WebCore::RenderElement::absoluteAnchorRect((WebCore::RenderElement *)v8, 0);
    v10 = HIDWORD(v8);
  }
  else
  {
    v9 = 0;
    LODWORD(v10) = 0;
  }
  v11 = *((_DWORD *)a3 + 2);
  v12 = *((_DWORD *)a3 + 3);
  if (v11 >= -33554432)
    v13 = v11 << 6;
  else
    v13 = 0x80000000;
  if (v11 > 0x1FFFFFF)
    v13 = 0x7FFFFFFF;
  v14 = __OFSUB__(v13, (_DWORD)v9);
  v15 = v13 - v9;
  v16 = (v13 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v16 = v15;
  v17 = v16 / 128;
  v18 = v12 << 6;
  if (v12 < -33554432)
    v18 = 0x80000000;
  if (v12 <= 0x1FFFFFF)
    v19 = v18;
  else
    v19 = 0x7FFFFFFF;
  v14 = __OFSUB__(v19, HIDWORD(v9));
  v20 = v19 - HIDWORD(v9);
  v21 = (v19 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v21 = v20;
  v22 = v21 / 128;
  v14 = __OFSUB__((_DWORD)v8, v17 << 6);
  v23 = v8 - (v17 << 6);
  if (v14)
    v23 = (v8 >> 31) + 0x7FFFFFFF;
  if (*(int *)a3 >= -33554432)
    v24 = *(_DWORD *)a3 << 6;
  else
    v24 = 0x80000000;
  if (*(int *)a3 > 0x1FFFFFF)
    v24 = 0x7FFFFFFF;
  v14 = __OFSUB__(v23, v24);
  v25 = v23 - v24;
  v26 = (v23 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v26 = v25;
  v27 = v10 - (v22 << 6);
  if (__OFSUB__((_DWORD)v10, v22 << 6))
    v27 = (v10 >> 31) + 0x7FFFFFFF;
  v28 = *((_DWORD *)a3 + 1);
  v29 = v28 << 6;
  if (v28 < -33554432)
    v29 = 0x80000000;
  if (v28 > 0x1FFFFFF)
    v29 = 0x7FFFFFFF;
  v14 = __OFSUB__(v27, v29);
  v30 = v27 - v29;
  v31 = (v27 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v31 = v30;
  v34[0] = v26 / 64;
  v34[1] = v31 / 64;
  v33 = xmmword_1968DF820;
  return WebCore::LocalFrameView::setScrollPosition(this, (WTF::StringImpl *)v34, &v33);
}

uint64_t WebCore::LocalFrameView::scheduleScrollToFocusedElement(uint64_t result, int a2)
{
  uint64_t v2;
  double v3;

  if (a2 != 3)
  {
    *(_BYTE *)(result + 1330) = a2;
    if (!*(_BYTE *)(result + 1373))
    {
      *(_BYTE *)(result + 1373) = 1;
      v2 = result + 840;
      *(_QWORD *)(result + 864) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      return WebCore::TimerBase::setNextFireTime(v2, v3 + 0.0);
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::scrollRectToVisible(__int128 *a1, uint64_t a2, char a3, int **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::RenderLayer *v10;
  WebCore::RenderObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::HTMLFrameElementBase *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  if (*(_BYTE *)a4 == 3)
    return 0;
  v7 = *(_QWORD *)(a2 + 32);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    v9 = a2;
    if ((*(_BYTE *)(a2 + 45) & 0x10) != 0)
      goto LABEL_13;
    return 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 104) + 239) & 0x18) != 0)
    return 0;
  v9 = a2;
  if ((*(_BYTE *)(a2 + 45) & 0x10) == 0)
  {
    while ((*(_BYTE *)(v8 + 45) & 0x10) == 0)
    {
      v19 = *(_QWORD *)(v8 + 32);
      if (!v19)
        return 0;
      v9 = 0;
      v8 = *(_QWORD *)(v19 + 8);
      if (!v8)
        return v9;
    }
    v9 = v8;
  }
LABEL_13:
  if ((*(_BYTE *)(v9 + 21) & 0x80) == 0)
  {
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 32);
      if (!v9)
        return v9;
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        return v9;
      if ((*(_BYTE *)(v9 + 45) & 0x10) != 0)
        goto LABEL_13;
    }
  }
  v10 = *(WebCore::RenderLayer **)(v9 + 144);
  if (!v10)
    return 0;
  v22 = *a1;
LABEL_16:
  if (WebCore::RenderLayer::shouldTryToScrollForScrollIntoView(v10))
  {
    v20 = WebCore::RenderLayer::ensureLayerScrollableArea(v10);
    *(_QWORD *)&v22 = WebCore::RenderLayerScrollableArea::scrollRectToVisible(v20, (int32x2_t *)&v22, (uint64_t)a4);
    *((_QWORD *)&v22 + 1) = v21;
  }
  v11 = (WebCore::RenderObject *)*((_QWORD *)v10 + 4);
  while (1)
  {
    v11 = WebCore::RenderObject::containingBlock(v11);
    if (!v11)
      break;
    v10 = (WebCore::RenderLayer *)*((_QWORD *)v11 + 18);
    if (v10)
      goto LABEL_16;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 328) + 296);
  if (!v13
    || (v14 = *(_QWORD *)(v13 + 528)) == 0
    || (v15 = *(_QWORD *)(v14 + 8)) == 0
    || (v16 = *(_QWORD *)(v15 + 120)) == 0
    || (v17 = *(WebCore::HTMLFrameElementBase **)(v16 + 8)) == 0
    || (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    WebCore::LocalFrameView::scrollRectToVisibleInTopLevelView(v12, (WebCore *)&v22, a3, a4);
    return 1;
  }
  if ((*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    WebCore::LocalFrameView::scrollRectToVisibleInChildView(v12, (WTF::StringImpl *)&v22, a3, (uint64_t)a4, v17);
    return 1;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalFrameView::scrollRectToVisibleInChildView(uint64_t a1, WTF::StringImpl *a2, char a3, uint64_t a4, WebCore::HTMLFrameElementBase *this)
{
  uint64_t v10;
  uint64_t result;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int32x4_t v20;
  uint64_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int8x16_t v25;
  uint64_t PossiblyFixedRectToExpose;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  signed int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int32x4_t v44;
  uint64_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int8x16_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int8x16_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  int8x16_t v74;
  __int128 v75;

  if (!this
    || (v10 = *(_QWORD *)(*((_QWORD *)this + 12) + 24), v10 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
    && v10 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
    || (result = WebCore::HTMLFrameElementBase::scrollingMode(this, a2), (_DWORD)result != 1)
    || !*(_BYTE *)(a1 + 1372) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 640) + 144) + 64) != 2)
  {
    v72 = a3;
    ++WebCore::ScriptDisallowedScope::s_count;
    v12 = 1;
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 1);
    v15 = v13;
    v16 = v14;
    v75 = *(_OWORD *)a2;
    v17 = *((_QWORD *)this + 14);
    v18 = HIDWORD(v13);
    v19 = HIDWORD(v14);
    if (v17
      && (v50 = *(_QWORD *)(v17 + 8)) != 0
      && !*(_BYTE *)(v50 + 144)
      && (v51 = *(_QWORD *)(v50 + 296)) != 0
      && (v52 = *(_QWORD *)(v51 + 1272)) != 0)
    {
      v53 = *(_QWORD *)(v52 + 64);
      v71 = v52;
      if ((v53 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v53 & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        v54.i64[0] = v13;
        v54.i64[1] = v14;
        v55.i64[0] = 0xFE000000FE000000;
        v55.i64[1] = 0xFE000000FE000000;
        v56 = (int8x16_t)vcgtq_s32(v54, v55);
        v57.i64[0] = 0xFE000000FE000000;
        v57.i64[1] = 0xFE000000FE000000;
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        v74 = vorrq_s8((int8x16_t)(*(_OWORD *)&v56 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v57, v54), v58, (int8x16_t)vshlq_n_s32(v54, 6uLL)), v56));
        v59 = WebCore::RenderBox::scrollPaddingForViewportRect((WebCore::RenderBox *)(v53 & 0xFFFFFFFFFFFFLL), (const WebCore::LayoutRect *)&v74);
        if (v61 == 0x80000000)
          v62 = 0x7FFFFFFF;
        else
          v62 = -v61;
        if ((_DWORD)v59 == 0x80000000)
          v63 = 0x7FFFFFFF;
        else
          v63 = -(int)v59;
        v64 = __OFADD__((_DWORD)v75, v62);
        v65 = v75 + v62;
        if (v64)
          v65 = (v75 >> 31) + 0x7FFFFFFF;
        LODWORD(v75) = v65;
        v64 = __OFADD__(DWORD1(v75), v63);
        v66 = DWORD1(v75) + v63;
        if (v64)
          v66 = (DWORD1(v75) >> 31) + 0x7FFFFFFF;
        DWORD1(v75) = v66;
        v67 = v61 + HIDWORD(v59);
        if (__OFADD__(v61, HIDWORD(v59)))
          v67 = (v61 >> 31) + 0x7FFFFFFF;
        v68 = v59 + v60;
        if (__OFADD__((_DWORD)v59, v60))
          v68 = (v59 >> 31) + 0x7FFFFFFF;
        v64 = __OFADD__(DWORD2(v75), v67);
        v69 = DWORD2(v75) + v67;
        if (v64)
          v69 = (DWORD2(v75) >> 31) + 0x7FFFFFFF;
        DWORD2(v75) = v69;
        v64 = __OFADD__(HIDWORD(v75), v68);
        v70 = HIDWORD(v75) + v68;
        if (v64)
          v70 = (HIDWORD(v75) >> 31) + 0x7FFFFFFF;
        v12 = 0;
        HIDWORD(v75) = v70;
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v71 = 0;
    }
    v20.i64[0] = __PAIR64__(v18, v15);
    v21 = 16777473;
    v20.i64[1] = __PAIR64__(v19, v16);
    v22.i64[0] = 0xFE000000FE000000;
    v22.i64[1] = 0xFE000000FE000000;
    v23 = (int8x16_t)vcgtq_s32(v20, v22);
    v24.i64[0] = 0xFE000000FE000000;
    v24.i64[1] = 0xFE000000FE000000;
    v25.i64[0] = 0x8000000080000000;
    v25.i64[1] = 0x8000000080000000;
    v74 = vorrq_s8((int8x16_t)(*(_OWORD *)&v23 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v24, v20), v25, (int8x16_t)vshlq_n_s32(v20, 6uLL)), v23));
    PossiblyFixedRectToExpose = WebCore::LocalFrameView::getPossiblyFixedRectToExpose((WebCore::LocalFrameView *)a1, v74.i32, (unsigned int *)&v75, v72, *(int **)(a4 + 8), *(int **)(a4 + 16));
    v28 = ((int)(PossiblyFixedRectToExpose - (v27 & 0xFFFFFFC0) + 32) >> 6) + (int)PossiblyFixedRectToExpose / 64;
    v29 = ((int)(HIDWORD(PossiblyFixedRectToExpose) - (v27 & 0xFFFFFFC0) + 32) >> 6)
        + SHIDWORD(PossiblyFixedRectToExpose) / 64;
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 424))(a1 + 64);
    v31 = v30;
    v32 = HIDWORD(v30);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 432))(a1 + 64);
    v34 = HIDWORD(v33);
    if (v28 >= (int)v33)
      LODWORD(v35) = v33;
    else
      LODWORD(v35) = v28;
    if (v31 <= (int)v35)
      v35 = v35;
    else
      v35 = v31;
    if (v29 < SHIDWORD(v33))
      LODWORD(v34) = v29;
    if ((int)v32 <= (int)v34)
      v34 = v34;
    else
      v34 = v32;
    v73 = v35 | (v34 << 32);
    if ((v12 & 1) == 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 640) + 144) + 64) != 2
      && WebCore::useSmoothScrolling(*(unsigned __int8 *)(a4 + 25), v71))
    {
      v21 = 16843009;
    }
    v74 = (int8x16_t)(unint64_t)v21;
    result = WebCore::LocalFrameView::setScrollPosition((WebCore::LocalFrameView *)a1, (WTF::StringImpl *)&v73, &v74);
    if (*(_BYTE *)(a4 + 24)
      || (result = WebCore::LocalFrameView::safeToPropagateScrollToParent(*(WebCore::LocalFrameView **)(a1 + 328), v36),
          (_DWORD)result))
    {
      v37 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
      if (v37)
      {
        if ((*(_BYTE *)(v37 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195FF7BFCLL);
        }
        v38 = (v75 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__((_DWORD)v75, DWORD2(v75)))
          v38 = v75 + DWORD2(v75);
        v39 = -(-v38 >> 6);
        if (v38 >= 0)
          v39 = (v38 + 63) >> 6;
        if (v38 <= 2147483583)
          v40 = v39;
        else
          v40 = 0x1FFFFFF;
        if (!DWORD2(v75))
          v40 = (int)v75 >> 6;
        v41 = (DWORD1(v75) >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(DWORD1(v75), HIDWORD(v75)))
          v41 = DWORD1(v75) + HIDWORD(v75);
        v42 = -(-v41 >> 6);
        if (v41 >= 0)
          v42 = (v41 + 63) >> 6;
        if (v41 <= 2147483583)
          v43 = v42;
        else
          v43 = 0x1FFFFFF;
        if (!HIDWORD(v75))
          v43 = (uint64_t)v75 >> 38;
        v44.i64[0] = WebCore::ScrollView::contentsToContainingViewContents(a1, ((int)v75 >> 6) | (unint64_t)((uint64_t)v75 >> 38 << 32), (v40 - ((int)v75 >> 6)) | ((unint64_t)(v43- ((uint64_t)v75 >> 38)) << 32));
        v44.i64[1] = v45;
        v46.i64[0] = 0xFE000000FE000000;
        v46.i64[1] = 0xFE000000FE000000;
        v47 = (int8x16_t)vcgtq_s32(v44, v46);
        v48.i64[0] = 0xFE000000FE000000;
        v48.i64[1] = 0xFE000000FE000000;
        v49.i64[0] = 0x8000000080000000;
        v49.i64[1] = 0x8000000080000000;
        v74 = vorrq_s8((int8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v48, v44), v49, (int8x16_t)vshlq_n_s32(v44, 6uLL)), v47));
        result = WebCore::LocalFrameView::scrollRectToVisible(&v74, v37, 0, a4);
      }
    }
    --WebCore::ScriptDisallowedScope::s_count;
  }
  return result;
}

uint64_t WebCore::LocalFrameView::scrollRectToVisibleInTopLevelView(uint64_t this, WebCore *a2, char a3, int **a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  float v20;
  int v21;
  float v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int8x16_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t PossiblyFixedRectToExpose;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  BOOL v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  WebCore::Chrome *v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  int8x16_t v109;

  v7 = this;
  v8 = *(unsigned __int8 *)a4;
  v9 = *(_QWORD *)(this + 328);
  if (v8 == 1 && *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8) == v9)
    return this;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    return this;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return this;
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8);
  if (v8 == 2 && v12 == v9)
  {
    v100 = *(WebCore::Chrome **)(v11 + 48);
    v109.i64[0] = WebCore::snappedIntRect(a2, a2);
    v109.i64[1] = v101;
    return WebCore::Chrome::scrollMainFrameToRevealRect(v100, (const WebCore::IntRect *)&v109);
  }
  v14 = *(_QWORD *)(this + 96);
  v15 = -(uint64_t)(v14 & 0xFFFFFFFF00000000);
  if (v12 == v9 && *(_BYTE *)(this + 1329) == 2)
    v15 = WebCore::LocalFrameView::maximumScrollPosition((WebCore::LocalFrameView *)this);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 496))(v7 + 64);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 528))(v7 + 64);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 536))(v7 + 64);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 488))(v7 + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 328) + 128) + 8) == *(_QWORD *)(v7 + 328)
    && *(_BYTE *)(v7 + 1329) == 1)
  {
    WebCore::LocalFrameView::minimumScrollPosition((WebCore::LocalFrameView *)v7);
  }
  if (*(_BYTE *)(v7 + 312) == 1 && *(_QWORD *)(v7 + 40))
  {
    v16 = WebCore::ScrollView::unobscuredContentRect(v7, 0);
    v17 = (float)(int)v16;
    v18 = (float)SHIDWORD(v16);
    v20 = (float)v19;
    v22 = (float)v21;
  }
  else
  {
    v23 = WebCore::LocalFrameView::visualViewportRect((WebCore::LocalFrameView *)v7);
    v17 = (float)(int)v23 * 0.015625;
    v18 = (float)SHIDWORD(v23) * 0.015625;
    v20 = (float)v24 * 0.015625;
    v22 = (float)v25 * 0.015625;
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v7 + 328) + 24);
  if (v26)
  {
    v27 = *(float **)(v26 + 8);
    if (v27)
    {
      v28 = v27[101];
      v29 = v27[98];
      v17 = v17 - v28;
      v18 = v18 - v29;
      v20 = v20 + (float)(v28 + v27[99]);
      v22 = v22 + (float)(v29 + v27[100]);
    }
  }
  if (v17 >= 2147500000.0)
  {
    v30 = 0x7FFFFFFF;
  }
  else if (v17 <= -2147500000.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v17;
  }
  if (v18 >= 2147500000.0)
  {
    v31 = 0x7FFFFFFF;
  }
  else if (v18 <= -2147500000.0)
  {
    v31 = 0x80000000;
  }
  else
  {
    v31 = (int)v18;
  }
  v32 = HIDWORD(v15);
  if (v20 >= 2147500000.0)
  {
    v33 = 0x7FFFFFFF;
  }
  else if (v20 <= -2147500000.0)
  {
    v33 = 0x80000000;
  }
  else
  {
    v33 = (int)v20;
  }
  v104 = a3;
  if (v22 >= 2147500000.0)
  {
    v34 = 0x7FFFFFFF;
  }
  else if (v22 > -2147500000.0)
  {
    v34 = (int)v22;
  }
  else
  {
    v34 = 0x80000000;
  }
  v35.i64[0] = __PAIR64__(v31, v30);
  v35.i64[1] = __PAIR64__(v34, v33);
  v36.i64[0] = 0xFE000000FE000000;
  v36.i64[1] = 0xFE000000FE000000;
  v37 = (int8x16_t)vcgtq_s32(v35, v36);
  v38.i64[0] = 0xFE000000FE000000;
  v38.i64[1] = 0xFE000000FE000000;
  v39.i64[0] = 0x8000000080000000;
  v39.i64[1] = 0x8000000080000000;
  v109 = vorrq_s8((int8x16_t)(*(_OWORD *)&v37 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v38, v35), v39, (int8x16_t)vshlq_n_s32(v35, 6uLL)), v37));
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 496))(v7 + 64);
  v41 = v40;
  v42 = HIDWORD(v40);
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 528))(v7 + 64);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 536))(v7 + 64);
  v45 = *(_QWORD *)(v7 + 96);
  v46 = ((unint64_t)(v43 + v44 + v42 - (v109.i32[3] >> 6)) << 32) - (v45 & 0xFFFFFFFF00000000);
  v47 = (int)(float)-*(float *)(v11 + 404) - v14;
  v48 = (int)(float)-*(float *)(v11 + 392) + v32;
  v49 = v41 - (v45 + (v109.i32[2] >> 6)) + (int)*(float *)(v11 + 396);
  v50 = HIDWORD(v46) + (int)*(float *)(v11 + 400);
  v108 = *(_OWORD *)a2;
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 720))(v7);
  v52 = (unsigned int *)(v51 + 8);
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 + 1, v52));
  if (*(_QWORD *)(*(_QWORD *)(v51 + 128) + 8) == v51
    && (v82 = *(_QWORD *)(v51 + 24)) != 0
    && (v83 = *(_QWORD *)(v82 + 8)) != 0)
  {
    v54 = *(_DWORD *)(v83 + 664);
  }
  else
  {
    v54 = 0;
  }
  do
  {
    v55 = __ldaxr(v52);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, v52));
  if (!v56)
  {
    atomic_store(1u, v52);
    v102 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v102 = off_1E31FE290;
    v102[1] = v52;
    v105 = (unint64_t)v102;
    WTF::ensureOnMainThread();
    v103 = v105;
    v105 = 0;
    if (v103)
      (*(void (**)(unint64_t))(*(_QWORD *)v103 + 8))(v103);
  }
  if (v54 >= -33554432)
    v57 = v54 << 6;
  else
    v57 = 0x80000000;
  if (v54 <= 0x1FFFFFF)
    v58 = v57;
  else
    v58 = 0x7FFFFFFF;
  v59 = DWORD1(v108) + v58;
  if (__OFADD__(DWORD1(v108), v58))
    v59 = (DWORD1(v108) >> 31) + 0x7FFFFFFF;
  DWORD1(v108) = v59;
  v60 = *(_QWORD *)(*(_QWORD *)(v7 + 328) + 296);
  if (v60)
  {
    v61 = *(_QWORD *)(v60 + 1272);
    if (v61)
    {
      v88 = *(_QWORD *)(v61 + 64);
      if ((v88 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v88 & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        v89 = WebCore::RenderBox::scrollPaddingForViewportRect((WebCore::RenderBox *)(v88 & 0xFFFFFFFFFFFFLL), (const WebCore::LayoutRect *)&v109);
        if (v91 == 0x80000000)
          v92 = 0x7FFFFFFF;
        else
          v92 = -v91;
        if ((_DWORD)v89 == 0x80000000)
          v93 = 0x7FFFFFFF;
        else
          v93 = -(int)v89;
        v77 = __OFADD__((_DWORD)v108, v92);
        v94 = v108 + v92;
        if (v77)
          v94 = (v108 >> 31) + 0x7FFFFFFF;
        LODWORD(v108) = v94;
        v77 = __OFADD__(v59, v93);
        v95 = v59 + v93;
        if (v77)
          v95 = (v59 >> 31) + 0x7FFFFFFF;
        v62 = v104;
        DWORD1(v108) = v95;
        v96 = v91 + HIDWORD(v89);
        if (__OFADD__(v91, HIDWORD(v89)))
          v96 = (v91 >> 31) + 0x7FFFFFFF;
        v97 = v89 + v90;
        if (__OFADD__((_DWORD)v89, v90))
          v97 = (v89 >> 31) + 0x7FFFFFFF;
        v77 = __OFADD__(DWORD2(v108), v96);
        v98 = DWORD2(v108) + v96;
        if (v77)
          v98 = (DWORD2(v108) >> 31) + 0x7FFFFFFF;
        DWORD2(v108) = v98;
        v77 = __OFADD__(HIDWORD(v108), v97);
        v99 = HIDWORD(v108) + v97;
        if (v77)
          v99 = (HIDWORD(v108) >> 31) + 0x7FFFFFFF;
        HIDWORD(v108) = v99;
        goto LABEL_47;
      }
    }
  }
  else
  {
    v61 = 0;
  }
  v62 = v104;
LABEL_47:
  PossiblyFixedRectToExpose = WebCore::LocalFrameView::getPossiblyFixedRectToExpose((WebCore::LocalFrameView *)v7, v109.i32, (unsigned int *)&v108, v62, a4[1], a4[2]);
  if (v109.i32[0] != (_DWORD)PossiblyFixedRectToExpose
    || *(uint64_t *)((char *)v109.i64 + 4) != __PAIR64__(v64, HIDWORD(PossiblyFixedRectToExpose))
    || v109.i32[3] != v65)
  {
    v84 = v48;
    v85 = 16777473;
    LODWORD(v86) = ((int)(PossiblyFixedRectToExpose - (v66 & 0xFFFFFFC0) + 32) >> 6)
                 + (int)PossiblyFixedRectToExpose / 64;
    LODWORD(v87) = ((int)(HIDWORD(PossiblyFixedRectToExpose) - (v67 & 0xFFFFFFC0) + 32) >> 6)
                 + SHIDWORD(PossiblyFixedRectToExpose) / 64;
    if ((int)v86 >= v49)
      LODWORD(v86) = v49;
    if (v47 <= (int)v86)
      v86 = v86;
    else
      v86 = v47;
    if ((int)v87 >= v50)
      LODWORD(v87) = v50;
    if (v84 <= (int)v87)
      v87 = v87;
    else
      v87 = v84;
    v107 = v86 | (v87 << 32);
    if (v61
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 328) + 640) + 144) + 64) != 2
      && WebCore::useSmoothScrolling(*((unsigned __int8 *)a4 + 25), v61))
    {
      v85 = 16843009;
    }
    v105 = v85;
    v106 = 0;
    WebCore::LocalFrameView::setScrollPosition((WebCore::LocalFrameView *)v7, (WTF::StringImpl *)&v107, &v105);
  }
  v68 = *(_QWORD *)(v11 + 48);
  v69 = HIDWORD(*(_QWORD *)a2);
  v70 = *(_QWORD *)a2 + 63;
  if ((int)*(_QWORD *)a2 >= 0)
    v70 = *(_QWORD *)a2;
  v71 = v70 >> 6;
  v72 = *(_QWORD *)a2 - (v70 & 0xFFFFFFC0);
  v73 = (int)v69 / 64;
  v74 = v69 - (v70 & 0xFFFFFFC0);
  v76 = *((_DWORD *)a2 + 2);
  v75 = *((_DWORD *)a2 + 3);
  v77 = __OFADD__(v72, v76);
  v78 = v72 + v76;
  if (v77)
    v78 = (v72 >> 31) + 0x7FFFFFFF;
  v77 = __OFADD__(v74, v75);
  v79 = v74 + v75;
  if (v77)
    v79 = (v74 >> 31) + 0x7FFFFFFF;
  v80 = v74 + 32;
  v81 = v72 + 32;
  v105 = (v71 + (v81 >> 6)) | ((unint64_t)(v73 + (v80 >> 6)) << 32);
  v106 = (v78 / 64 - (v81 >> 6) + ((int)(v78 - (v73 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v79 / 64 - (v80 >> 6) + ((int)(v79 - (v73 & 0xFFFFFFC0) + 32) >> 6)) << 32);
  return (*(uint64_t (**)(_QWORD, unint64_t *))(**(_QWORD **)(v68 + 16) + 496))(*(_QWORD *)(v68 + 16), &v105);
}

uint64_t WebCore::LocalFrameView::wasScrolledByUser(WebCore::LocalFrameView *this)
{
  return *((unsigned __int8 *)this + 1372);
}

uint64_t WebCore::LocalFrameView::getPossiblyFixedRectToExpose(WebCore::LocalFrameView *this, int *a2, unsigned int *a3, char a4, int *a5, int *a6)
{
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  float v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  int v28;
  unsigned int v29;
  int v30;
  _BYTE v31[20];
  _QWORD v32[2];
  _QWORD v33[2];
  unsigned int v34[6];
  _BYTE v35[20];
  _BYTE v36[20];
  __int128 v37;

  if ((a4 & 1) == 0)
  {
    v11 = (char *)this + 64;
    v36[0] = 0;
    v36[16] = 0;
    v12 = v36;
LABEL_3:
    *(_QWORD *)&v37 = WebCore::ScrollableArea::getRectToExposeForScrollIntoView((uint64_t)v11, a2, a3, a5, a6, (uint64_t)v12);
    *((_QWORD *)&v37 + 1) = v13;
    return v37;
  }
  if (WebCore::LocalFrameView::frameScaleFactor(this) == 1.0)
    return *(_OWORD *)a2;
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 136) + 704) & 0x1000) == 0)
  {
    v11 = (char *)this + 64;
    v35[0] = 0;
    v35[16] = 0;
    v12 = v35;
    goto LABEL_3;
  }
  *(_OWORD *)v34 = *(_OWORD *)a3;
  v15 = WebCore::LocalFrameView::frameScaleFactor(this);
  WebCore::LayoutRect::scale((int *)v34, 1.0 / v15);
  v16 = WebCore::FrameView::headerHeight(this);
  if (v16 <= 0x2000000)
    v17 = -64 * v16;
  else
    v17 = 0x80000000;
  if (v16 < -33554431)
    v17 = 0x7FFFFFFF;
  v18 = __OFADD__(v34[1], v17);
  v19 = v34[1] + v17;
  if (v18)
    v19 = (v34[1] >> 31) + 0x7FFFFFFF;
  v34[1] = v19;
  v33[0] = WebCore::LocalFrameView::layoutViewportRect(this);
  v33[1] = v20;
  v21 = WebCore::LocalFrameView::visualViewportRect(this);
  v23 = v22;
  v32[0] = v21;
  v32[1] = v22;
  WebCore::LayoutRect::intersect((int *)v34, (const WebCore::LayoutRect *)v33);
  if ((int)v34[2] >= (int)v23)
    v24 = v23;
  else
    v24 = v34[2];
  if ((int)v34[3] >= SHIDWORD(v23))
    v25 = HIDWORD(v23);
  else
    v25 = v34[3];
  *(_QWORD *)&v34[2] = v24 | (v25 << 32);
  v31[0] = 0;
  v31[16] = 0;
  *(_QWORD *)&v37 = WebCore::ScrollableArea::getRectToExposeForScrollIntoView((uint64_t)this + 64, (int *)v32, v34, a5, a6, (uint64_t)v31);
  *((_QWORD *)&v37 + 1) = v26;
  v27 = WebCore::LocalFrameView::frameScaleFactor(this);
  WebCore::LayoutRect::scale((int *)&v37, v27);
  v28 = WebCore::FrameView::headerHeight(this);
  v29 = v28 << 6;
  if (v28 < -33554432)
    v29 = 0x80000000;
  if (v28 > 0x1FFFFFF)
    v29 = 0x7FFFFFFF;
  v18 = __OFADD__(DWORD1(v37), v29);
  v30 = DWORD1(v37) + v29;
  if (v18)
    v30 = (DWORD1(v37) >> 31) + 0x7FFFFFFF;
  DWORD1(v37) = v30;
  return v37;
}

uint64_t WebCore::LocalFrameView::safeToPropagateScrollToParent(WebCore::LocalFrameView *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t isSameOriginDomain;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v2 = *((_QWORD *)this + 37);
  if (!v2)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 + 1, v6));
      if (*(_BYTE *)(v5 + 144))
      {
        do
          v37 = __ldaxr(v6);
        while (__stlxr(v37 - 1, v6));
        if (v37 == 1)
        {
          atomic_store(1u, v6);
          v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v38 = off_1E31FE290;
          v38[1] = v6;
          v40 = v38;
          WTF::ensureOnMainThread();
          v39 = v40;
          v40 = 0;
          if (v39)
            (*(void (**)(_QWORD *))(*v39 + 8))(v39);
        }
        isSameOriginDomain = 0;
        goto LABEL_24;
      }
      v9 = *(_QWORD *)(v5 + 296);
      if (!v9)
      {
        isSameOriginDomain = 0;
        do
        {
LABEL_22:
          v22 = __ldaxr(v6);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v6));
        if (!v23)
        {
          atomic_store(1u, v6);
          v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v29 = off_1E31FE290;
          v29[1] = v6;
          v40 = v29;
          WTF::ensureOnMainThread();
          v30 = v40;
          v40 = 0;
          if (v30)
            (*(void (**)(_QWORD *))(*v30 + 8))(v30);
        }
        do
        {
LABEL_24:
          v24 = __ldaxr(v6);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v6));
        if (!v25)
        {
          atomic_store(1u, v6);
          v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v27 = off_1E31FE290;
          v27[1] = v6;
          v40 = v27;
          WTF::ensureOnMainThread();
          v28 = v40;
          v40 = 0;
          if (v28)
            (*(void (**)(_QWORD *))(*v28 + 8))(v28);
        }
        goto LABEL_26;
      }
      *(_DWORD *)(v9 + 24) += 2;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), a2);
      v12 = v10;
      if (v10)
      {
        do
          v13 = __ldaxr(v10);
        while (__stlxr(v13 + 1, v10));
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 + 192), v11);
      v15 = v14;
      if (v14)
      {
        do
          v16 = __ldaxr(v14);
        while (__stlxr(v16 + 1, v14));
      }
      isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain((WebCore::SecurityOrigin *)v12, (const WebCore::SecurityOrigin *)v14);
      do
      {
        v18 = __ldaxr(v15);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v15));
      if (v19)
      {
        if (!v12)
        {
LABEL_20:
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
          goto LABEL_22;
        }
      }
      else
      {
        atomic_store(1u, v15);
        v31 = (WTF::StringImpl *)*((_QWORD *)v15 + 6);
        *((_QWORD *)v15 + 6) = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v17);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = (WTF::StringImpl *)*((_QWORD *)v15 + 5);
        *((_QWORD *)v15 + 5) = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v17);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = v15[8];
        if ((_DWORD)v33 != -1)
          ((void (*)(_QWORD **, unsigned int *))off_1E33FF730[v33])(&v40, v15 + 2);
        v15[8] = -1;
        WTF::fastFree((WTF *)v15, v17);
        if (!v12)
          goto LABEL_20;
      }
      do
      {
        v20 = __ldaxr(v12);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v12));
      if (!v21)
      {
        atomic_store(1u, v12);
        v34 = (WTF::StringImpl *)*((_QWORD *)v12 + 6);
        *((_QWORD *)v12 + 6) = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v17);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = (WTF::StringImpl *)*((_QWORD *)v12 + 5);
        *((_QWORD *)v12 + 5) = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v17);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = v12[8];
        if ((_DWORD)v36 != -1)
          ((void (*)(_QWORD **, unsigned int *))off_1E33FF730[v36])(&v40, v12 + 2);
        v12[8] = -1;
        WTF::fastFree((WTF *)v12, v17);
      }
      goto LABEL_20;
    }
  }
  isSameOriginDomain = 0;
LABEL_26:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return isSameOriginDomain;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::contentsResized(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(this + 248) == 1)
  {
    v1 = this;
    v2 = *(_QWORD *)(*(_QWORD *)(this + 264) + 296);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 1944);
      if (v3)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 256);
        if (v4)
        {
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 832))(*(_QWORD *)(v4 + 72));
          if (this)
          {
            v12 = this;
            v5 = *(_QWORD *)(*(_QWORD *)(v1 + 264) + 24);
            if (!v5)
              goto LABEL_18;
            v6 = *(_QWORD *)(v5 + 8);
            if (!v6 || (*(_WORD *)(v6 + 658) & 1) == 0)
              goto LABEL_18;
            v7 = *(unsigned __int8 *)(v6 + 448) | *(unsigned __int8 *)(v1 + 1080);
            if (*(_BYTE *)(v1 + 248) == 1)
            {
              v8 = *(_QWORD *)(v1 + 192);
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1 + 832))(v1, 0, 1);
              if (v7)
                goto LABEL_18;
              v10 = SHIDWORD(v8) > SHIDWORD(v9);
              if ((int)v8 <= (int)v9)
                goto LABEL_13;
            }
            else
            {
              if (v7)
                goto LABEL_18;
              v10 = *(_QWORD *)(v1 + 96) != 0;
              if (!*(_QWORD *)(v1 + 88))
              {
LABEL_13:
                if (v10)
                  v11 = 2;
                else
                  v11 = 0;
                return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 128))(v12, v11);
              }
            }
            if (!v10)
            {
              v11 = 1;
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 128))(v12, v11);
            }
LABEL_18:
            v11 = 3;
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 128))(v12, v11);
          }
        }
      }
    }
  }
  return this;
}

void WebCore::LocalFrameView::scrollOffsetChangedViaPlatformWidgetImpl(WebCore::LocalFrameView *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  const WebCore::IntPoint *v3;
  uint64_t v4;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  int v9;
  unint64_t IdentifierInternal;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v15;
  void *v16;
  const WebCore::IntPoint *v17;
  const WebCore::IntPoint *v18;
  const WebCore::RenderObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  void *v27;
  WebCore::ScrollAnchoringController *v28;
  char v29;
  char **v30;
  char *v31;
  int v32;
  int v33;

  v6 = *(unsigned __int8 ***)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 24) + 8) + 968);
  if (v6)
  {
    v7 = *v6;
    if (__ldaxr(*v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v7, a2, a3);
LABEL_6:
    ++*((_QWORD *)v7 + 1);
    v9 = __ldxr(v7);
    if (v9 == 1)
    {
      if (!__stlxr(0, v7))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
LABEL_11:
  IdentifierInternal = *((_QWORD *)this + 15);
  if (IdentifierInternal)
  {
    v3 = (const WebCore::IntPoint *)*((_QWORD *)this + 16);
    if (!v6)
      goto LABEL_32;
LABEL_22:
    v13 = *v6;
    if (__ldaxr(*v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_26;
    }
    MEMORY[0x19AEA534C](v13, a2, a3);
LABEL_26:
    ++*((_QWORD *)v13 + 1);
    v15 = __ldxr(v13);
    if (v15 == 1)
    {
      if (!__stlxr(0, v13))
        goto LABEL_31;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_31:
    WebCore::WheelEventTestMonitor::deferForReason((unsigned __int8 *)v6, IdentifierInternal, (unint64_t)v3, 128);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v6, v16);
    goto LABEL_32;
  }
  v11 = (*(uint64_t (**)(char *, const WebCore::IntPoint *, const WebCore::IntPoint *))(*((_QWORD *)this + 8)
                                                                                                + 296))((char *)this + 64, a2, a3);
  if (v11)
  {
    IdentifierInternal = v11;
    v3 = a2;
    if (!v6)
      goto LABEL_32;
    goto LABEL_22;
  }
  if (WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v12 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v12 != -1)
  {
    v31 = &v29;
    v30 = &v31;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v30, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_46;
  v3 = (const WebCore::IntPoint *)WebCore::Process::globalIdentifier;
  *((_QWORD *)this + 15) = IdentifierInternal;
  *((_QWORD *)this + 16) = v3;
  if (v6)
    goto LABEL_22;
LABEL_32:
  WebCore::LocalFrameView::updateLayerPositionsAfterScrolling(this);
  WebCore::LocalFrameView::updateCompositingLayersAfterScrolling(this);
  WebCore::LocalFrameView::repaintSlowRepaintObjects(*((_QWORD **)this + 71));
  WebCore::LocalFrameView::scrollPositionChanged(this, v17, v18);
  v20 = *((_QWORD *)this + 169);
  if (v20)
  {
    WebCore::ScrollAnchoringController::invalidateAnchorElement(v20, v19);
    v28 = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 169);
    if (v28)
      WebCore::ScrollAnchoringController::updateAnchorElement(v28);
  }
  v21 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 1944);
    if (v22)
    {
      v4 = *(_QWORD *)(v22 + 400);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 195))
        {
          v23 = *(_QWORD *)(v4 + 256);
          if (v23)
          {
LABEL_38:
            LODWORD(v31) = WebCore::ScrollView::exposedContentRect(*(WebCore::ScrollView **)(*(_QWORD *)(v4 + 8) + 248));
            HIDWORD(v31) = v24;
            v32 = v25;
            v33 = v26;
            if ((*(unsigned int (**)(uint64_t, char **))(*(_QWORD *)v23 + 760))(v23, &v31))
              WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), 0x4000);
            goto LABEL_40;
          }
LABEL_47:
          v23 = *(_QWORD *)(v4 + 224);
          if (!v23)
            goto LABEL_40;
          goto LABEL_38;
        }
      }
    }
  }
LABEL_40:
  if (v6)
  {
    WebCore::WheelEventTestMonitor::removeDeferralForReason((uint64_t *)v6, IdentifierInternal, (unint64_t)v3, 128);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v6, v27);
  }
}

BOOL WebCore::LocalFrameView::isUserScrollInProgress(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v2)
  {
    v3 = *(WebCore::Page **)(v2 + 8);
    if (v3)
    {
      v4 = WebCore::Page::scrollingCoordinator(v3);
      if (v4)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
        if (v5 && (v6 = *(_QWORD *)(v5 + 1944)) != 0 && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256)) != 0)
        {
          v8 = *(_QWORD *)(v7 + 224);
          v9 = *(_QWORD *)(v7 + 232);
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 408))(v4, v8, v9) & 1) != 0)
          return 1;
      }
    }
  }
  v10 = *((_QWORD *)this + 10);
  return v10 && *(_BYTE *)(v10 + 117) != 0;
}

uint64_t WebCore::LocalFrameView::isRubberBandInProgress(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (*((_BYTE *)this + 318))
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (!v2 || (v3 = *(WebCore::Page **)(v2 + 8)) == 0 || (v4 = WebCore::Page::scrollingCoordinator(v3)) == 0)
  {
    v11 = *((_QWORD *)this + 10);
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 216))(v11);
    return 0;
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v5 && (v6 = *(_QWORD *)(v5 + 1944)) != 0 && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256)) != 0)
  {
    v8 = *(_QWORD *)(v7 + 224);
    v9 = *(_QWORD *)(v7 + 232);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 400))(v4, v8, v9);
}

uint64_t WebCore::LocalFrameView::isInStableState(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1768))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
  else
    return 1;
}

uint64_t WebCore::LocalFrameView::requestStartKeyboardScrollAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Page *v4;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 24);
  if (v2 && (v4 = *(WebCore::Page **)(v2 + 8)) != 0 && (v6 = WebCore::Page::scrollingCoordinator(v4)) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 184))(v6, a1 + 64, a2);
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::requestStartKeyboardScrollAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Page *v4;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
  if (v2 && (v4 = *(WebCore::Page **)(v2 + 8)) != 0 && (v6 = WebCore::Page::scrollingCoordinator(v4)) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 184))(v6, a1, a2);
  else
    return 0;
}

uint64_t WebCore::LocalFrameView::requestStopKeyboardScrollAnimation(WebCore::LocalFrameView *this, uint64_t a2)
{
  uint64_t v2;
  WebCore::Page *v4;
  uint64_t v6;

  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v2 && (v4 = *(WebCore::Page **)(v2 + 8)) != 0 && (v6 = WebCore::Page::scrollingCoordinator(v4)) != 0)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v6 + 192))(v6, (char *)this + 64, a2);
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::requestStopKeyboardScrollAnimation(WebCore::LocalFrameView *this, uint64_t a2)
{
  uint64_t v2;
  WebCore::Page *v4;
  uint64_t v6;

  v2 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
  if (v2 && (v4 = *(WebCore::Page **)(v2 + 8)) != 0 && (v6 = WebCore::Page::scrollingCoordinator(v4)) != 0)
    return (*(uint64_t (**)(uint64_t, WebCore::LocalFrameView *, uint64_t))(*(_QWORD *)v6 + 192))(v6, this, a2);
  else
    return 0;
}

_QWORD *WebCore::LocalFrameView::stopAsyncAnimatedScroll(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(this[41] + 24);
  if (v1)
  {
    v2 = this;
    this = *(_QWORD **)(v1 + 8);
    if (this)
    {
      this = (_QWORD *)WebCore::Page::scrollingCoordinator((WebCore::Page *)this);
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*this + 208))(this, v2 + 8);
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::LocalFrameView::stopAsyncAnimatedScroll(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(this[33] + 24);
  if (v1)
  {
    v2 = this;
    this = *(_QWORD **)(v1 + 8);
    if (this)
    {
      this = (_QWORD *)WebCore::Page::scrollingCoordinator((WebCore::Page *)this);
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*this + 208))(this, v2);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::addTrackedRepaintRect(uint64_t this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_BYTE *)(this + 1371) && *((float *)a2 + 2) > 0.0 && *((float *)a2 + 3) > 0.0)
  {
    v2 = this;
    v6 = *(_OWORD *)a2;
    v3 = this + 64;
    this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(this + 64) + 832))(this + 64, 0, 1);
    v4.i32[0] = -(int)this;
    v4.i32[1] = (unint64_t)-(uint64_t)(this & 0xFFFFFFFF00000000) >> 32;
    *(float32x2_t *)&v6 = vadd_f32(*(float32x2_t *)&v6, vcvt_f32_s32(v4));
    v5 = *(unsigned int *)(v3 + 1004);
    if ((_DWORD)v5 == *(_DWORD *)(v3 + 1000))
    {
      return WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v3 + 992, (unint64_t)&v6);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)(v2 + 1056) + 16 * v5) = v6;
      ++*(_DWORD *)(v2 + 1068);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::repaintContentRectangle(uint64_t this, const WebCore::IntRect *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_QWORD *)(this + 40))
  {
    this = WebCore::ScrollView::platformIsOffscreen((id *)this);
    if ((this & 1) == 0)
      return WebCore::ScrollView::repaintContentRectangle(v3, a2);
  }
  else if (*(_BYTE *)(this + 24) && *(_BYTE *)(this + 25))
  {
    return WebCore::ScrollView::repaintContentRectangle(v3, a2);
  }
  if (*(_BYTE *)(v3 + 1360))
    return WebCore::ScrollView::repaintContentRectangle(v3, a2);
  return this;
}

uint64_t WebCore::LocalFrameView::renderedCharactersExceed(WebCore::LocalFrameView *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v2)
    return 0;
  result = *(_QWORD *)(v2 + 1944);
  if (result)
  {
    v5 = 0;
    while (1)
    {
LABEL_4:
      v6 = result;
      if ((*(_BYTE *)(result + 45) & 2) != 0)
      {
        v7 = *(_DWORD *)(result + 16);
        *(_DWORD *)(result + 16) = v7 + 1;
        v8 = *(_QWORD *)(result + 104);
        if (v8)
          LODWORD(v8) = *(_DWORD *)(v8 + 4);
        v5 += v8;
        if (v5 >= a2)
        {
          if (v7 == -1)
          {
LABEL_23:
            __break(0xC471u);
            JUMPOUT(0x195FF9370);
          }
          *(_DWORD *)(result + 16) = v7;
          return v5 >= a2;
        }
        if (v7 == -1)
          goto LABEL_23;
        *(_DWORD *)(result + 16) = v7;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
      if (!result)
      {
        v9 = *(unsigned int *)(v6 + 47);
        if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32))
          || (result = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8)) == 0)
        {
          v10 = *(_QWORD *)(v6 + 32);
          if (v10)
          {
            while (1)
            {
              v11 = *(_QWORD *)(v10 + 8);
              if (!v11)
                break;
              v12 = *(unsigned int *)(v11 + 47);
              if (v12 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
              {
                result = *(_QWORD *)((v12 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
                if (result)
                  goto LABEL_4;
              }
              v10 = *(_QWORD *)(v11 + 32);
              if (!v10)
                return v5 >= a2;
            }
          }
          return v5 >= a2;
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::availableContentSizeChanged(uint64_t a1, void *a2)
{
  int v2;
  WebCore::LocalFrameView *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = (int)a2;
  v4 = (WebCore::LocalFrameView *)(a1 - 64);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 296);
  if (v5 && (*(_BYTE *)(a1 + 416) != 3 || !*(_BYTE *)(a1 + 257)))
    WebCore::Style::Scope::didChangeViewportSize(*(_QWORD *)(v5 + 1328), a2);
  WebCore::LocalFrameView::updateLayoutViewport(v4);
  WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameViewLayoutContext *)(a1 + 272));
  result = WebCore::ScrollableArea::availableContentSizeChanged((WebCore::ScrollAnimator *)a1);
  if (!*(_QWORD *)(a1 - 24))
  {
    if (v2)
    {
      v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 832))(a1, 0, 1);
      return WebCore::ScrollView::updateScrollbars((uint64_t)v4, (const WebCore::IntPoint *)&v7);
    }
  }
  return result;
}

WebCore::RenderLayerCompositor *`non-virtual thunk to'WebCore::LocalFrameView::updateContentsSize(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::updateContentsSize((WebCore::LocalFrameView *)((char *)this - 64));
}

double WebCore::LocalFrameView::addedOrRemovedScrollbar(WebCore::LocalFrameView *this, WebCore::Document *a2)
{
  uint64_t v3;
  WebCore::RenderView *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  unsigned __int8 v11;
  WebCore::RenderLayerCompositor *v13;
  uint64_t v14;

  v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v3)
  {
    v4 = *(WebCore::RenderView **)(v3 + 1944);
    if (!v4
      || (v5 = *((_QWORD *)v4 + 50)) == 0
      || !*(_BYTE *)(v5 + 195)
      || (v13 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(v4),
          WebCore::RenderLayerCompositor::frameViewDidAddOrRemoveScrollbars(v13),
          (v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 296)) != 0))
    {
      v6 = *(_QWORD *)(v3 + 1944);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256);
        if (v7)
        {
          v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 832))(*(_QWORD *)(v7 + 72));
          if (v8)
          {
            v10 = v8;
            v11 = WebCore::LocalFrameView::computeScrollability(this);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 128))(v10, v11);
          }
        }
      }
    }
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v14 = WebCore::InspectorInstrumentation::instrumentingAgents(*(_QWORD *)(*((_QWORD *)this + 41) + 296), a2);
    if (v14)
      return WebCore::InspectorInstrumentation::didAddOrRemoveScrollbarsImpl(v14, (uint64_t)this);
  }
  return result;
}

void WebCore::LocalFrameView::loadProgressingStatusChanged(id *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;

  if (*((_BYTE *)this + 1376) && *(_BYTE *)(*((_QWORD *)this[41] + 35) + 216))
    WebCore::LocalFrameView::fireLayoutRelatedMilestonesIfNeeded((WebCore::LocalFrameView *)this);
  if (!*((_BYTE *)this + 1381))
    WebCore::LocalFrameView::enableSpeculativeTilingIfNeeded((uint64_t)this);
  v2 = *((_QWORD *)this[41] + 37);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 1944);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 144);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 256);
        if (v5)
          WebCore::RenderLayerBacking::adjustTiledBackingCoverage(v5);
      }
    }
  }
  v6 = this[4];
  if (!v6 || !v6[1])
  {
    v7 = objc_msgSend((id)objc_msgSend(this[5], "window"), "tileCache");
    if (v7)
    {
      v8 = *((unsigned __int8 *)this + 1381);
      if (*(unsigned __int8 *)(v7 + 67) != v8)
      {
        *(_BYTE *)(v7 + 67) = v8;
        if (v8)
        {
          v9 = v7 + 88;
          *(_QWORD *)(v7 + 112) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
          WebCore::TimerBase::setNextFireTime(v9, v10 + 0.0);
        }
      }
    }
  }
}

uint64_t WebCore::LocalFrameView::enableSpeculativeTilingIfNeeded(uint64_t this)
{
  uint64_t v1;
  double v2;

  v1 = this;
  if (*(_BYTE *)(this + 1372))
  {
    *(_BYTE *)(this + 1381) = 1;
  }
  else
  {
    this = WebCore::shouldEnableSpeculativeTilingDuringLoading(*(WebCore **)(*(_QWORD *)(this + 328) + 24), (const WebCore::LocalFrameView *)*(unsigned __int8 *)(this + 1375));
    if ((_DWORD)this)
    {
      if (*(_BYTE *)(v1 + 1384))
      {
        return WebCore::LocalFrameView::speculativeTilingEnableTimerFired(v1);
      }
      else if ((*(_QWORD *)(v1 + 928) & 0xFFFFFFFFFFFFLL) == 0
             || *(double *)((*(_QWORD *)(v1 + 928) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *(_QWORD *)(v1 + 920) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        return WebCore::TimerBase::setNextFireTime(v1 + 896, v2 + 0.5);
      }
    }
  }
  return this;
}

BOOL WebCore::shouldEnableSpeculativeTilingDuringLoading(WebCore *this, const WebCore::LocalFrameView *a2)
{
  WebCore::ProgressTracker **v2;
  int v3;
  _BOOL8 v4;
  WTF *v6;
  void *v7;

  if (!this)
    return 0;
  v2 = (WebCore::ProgressTracker **)*((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = (*(_DWORD *)v2)++;
  if ((_BYTE)a2)
  {
    v4 = !WebCore::ProgressTracker::isMainLoadProgressing(v2[16]);
    v3 = *(_DWORD *)v2 - 1;
  }
  else
  {
    v4 = 0;
  }
  if (v3)
  {
    *(_DWORD *)v2 = v3;
  }
  else
  {
    WebCore::Page::~Page((WebCore::Page *)v2);
    WTF::fastFree(v6, v7);
  }
  return v4;
}

double WebCore::LocalFrameView::setNeedsCompositingGeometryUpdate(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  uint64_t v4;
  double result;
  WebCore::RenderLayerCompositor *v6;
  WebCore::RenderLayerCompositor *v7;
  WTF *v8;
  void *v9;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
    v2 = *(WebCore::RenderView **)(v1 + 1944);
  else
    v2 = 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (v3 && *((_BYTE *)v3 + 195))
  {
    v4 = *((_QWORD *)v2 + 18);
    if (v4)
    {
      *(_DWORD *)(v4 + 12) |= 0x40u;
      WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v4, 2);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
      if (!v3)
      {
        v6 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v6, v2);
        v7 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        *((_QWORD *)v2 + 50) = v3;
        if (v7)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v7);
          WTF::fastFree(v8, v9);
          v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        }
      }
    }
    return WebCore::TileCoverageMap::setNeedsUpdate(v3);
  }
  return result;
}

double WebCore::LocalFrameView::setDescendantsNeedUpdateBackingAndHierarchyTraversal(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  uint64_t v4;
  double result;
  WebCore::RenderLayerCompositor *v6;
  WebCore::RenderLayerCompositor *v7;
  WTF *v8;
  void *v9;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
    v2 = *(WebCore::RenderView **)(v1 + 1944);
  else
    v2 = 0;
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (v3 && *((_BYTE *)v3 + 195))
  {
    v4 = *((_QWORD *)v2 + 18);
    if (v4)
    {
      *(_DWORD *)(v4 + 12) |= 0x800u;
      WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v4, 2);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
      if (!v3)
      {
        v6 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v6, v2);
        v7 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        *((_QWORD *)v2 + 50) = v3;
        if (v7)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v7);
          WTF::fastFree(v8, v9);
          v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        }
      }
    }
    return WebCore::TileCoverageMap::setNeedsUpdate(v3);
  }
  return result;
}

uint64_t WebCore::LocalFrameView::isTransparent(WebCore::LocalFrameView *this)
{
  return *((unsigned __int8 *)this + 1369);
}

double WebCore::LocalFrameView::setTransparent(WebCore::LocalFrameView *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  if (*((unsigned __int8 *)this + 1369) != a2)
  {
    *((_BYTE *)this + 1369) = a2;
    v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 1944);
      if (v4)
      {
        if (*(WebCore::LocalFrameView **)(v4 + 248) == this)
        {
          WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameView *)((char *)this + 336));
          return WebCore::LocalFrameView::setNeedsCompositingConfigurationUpdate(this);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::hasExtendedBackgroundRectForPainting(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 1944)) != 0
    && (v3 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 256)) != 0
    && (v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 832))(*(_QWORD *)(v3 + 72))) != 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5);
  }
  else
  {
    return 0;
  }
}

WebCore::RenderView *WebCore::LocalFrameView::extendedBackgroundRectForPainting(WebCore::LocalFrameView *this)
{
  WebCore::RenderView *result;
  uint64_t v3;
  WebCore::RenderView *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  signed int v17;
  signed int v18;
  int v19;
  int v20;
  int v21;

  result = (WebCore::RenderView *)WebCore::LocalFrameView::tiledBacking(this);
  if (result)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (v3)
    {
      v4 = result;
      result = *(WebCore::RenderView **)(v3 + 1944);
      if (result)
      {
        v5 = WebCore::RenderView::unextendedBackgroundRect(result);
        v7 = v6;
        v9 = v8;
        if (((*(uint64_t (**)(WebCore::RenderView *, double))(*(_QWORD *)v4 + 272))(v4, v5) & 1) != 0)
        {
          v12 = (*(uint64_t (**)(WebCore::RenderView *))(*(_QWORD *)v4 + 312))(v4);
          v13 = (*(uint64_t (**)(WebCore::RenderView *))(*(_QWORD *)v4 + 296))(v4);
          if (v12 <= 0x2000000)
            v14 = -64 * v12;
          else
            v14 = 0x80000000;
          if (v12 < -33554431)
            v14 = 0x7FFFFFFF;
          if (v13 <= 0x2000000)
            v15 = -64 * v13;
          else
            v15 = 0x80000000;
          if (v13 < -33554431)
            v15 = 0x7FFFFFFF;
          v16 = __OFADD__((_DWORD)v7, v14);
          v17 = v7 + v14;
          if (v16)
            v18 = (v7 >> 31) + 0x7FFFFFFF;
          else
            v18 = v17;
          v16 = __OFADD__(HIDWORD(v7), v15);
          v19 = HIDWORD(v7) + v15;
          if (v16)
            v20 = (HIDWORD(v7) >> 31) + 0x7FFFFFFF;
          else
            v20 = v19;
          (*(void (**)(WebCore::RenderView *))(*(_QWORD *)v4 + 312))(v4);
          (*(uint64_t (**)(WebCore::RenderView *))(*(_QWORD *)v4 + 320))(v4);
          v21 = (*(uint64_t (**)(WebCore::RenderView *))(*(_QWORD *)v4 + 296))(v4);
          return (WebCore::RenderView *)((v18 / 64
                                                      + ((int)(v18 - (((v9 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v20 / 64 + ((int)(v20 - (((*(unsigned int (**)(WebCore::RenderView *))(*(_QWORD *)v4 + 304))(v4) + v21) << 6) + 32) >> 6)) << 32));
        }
        else
        {
          return (WebCore::RenderView *)(((int)v7 / 64 + ((int)(v7 - (v10 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(SHIDWORD(v7) / 64 + ((int)(HIDWORD(v7) - (v11 & 0xFFFFFFC0) + 32) >> 6)) << 32));
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::setShouldUpdateWhileOffscreen(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1360) = a2;
  return this;
}

uint64_t *WebCore::LocalFrameView::scrollToAnchor(uint64_t *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  WebCore::RenderElement *v6;
  uint64_t v8;
  int v9;
  char v10;
  __int128 *v11;
  uint64_t *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  __int128 v17;
  uint64_t *v18;
  __int16 v19;
  char v20;
  char v21;
  BOOL v22;
  __int128 v23;
  uint64_t v24;

  v2 = this[73];
  if (!v2)
    return this;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v24 = v2;
  if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v24 = 0;
LABEL_17:
    if (v3)
    {
      *(_DWORD *)(v2 + 24) = v3;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    return this;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  v4 = this;
  WebCore::LocalFrameView::cancelScheduledScrolls((WebCore::LocalFrameView *)this, a2);
  v23 = 0uLL;
  v22 = 0;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (WebCore::RenderElement *)(v5 & 0xFFFFFFFFFFFFLL);
  if (v2 != *(_QWORD *)(v4[41] + 296) && v6 != 0)
  {
    if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FF9DCCLL);
    }
    WebCore::RenderElement::absoluteAnchorRectWithScrollMargin(v6, &v22, (uint64_t)&v17);
    v23 = v17;
    v5 = *(_QWORD *)(v2 + 64);
  }
  v8 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195FF9DACLL);
  }
  v9 = (unsigned __int16)*(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x7C) >> 13;
  if ((v9 - 2) < 4)
  {
    if (v9 != 5 && v9 != 3)
    {
      if (v8 && (*(_BYTE *)(v8 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195FF9E50);
      }
      v10 = v22;
      v11 = (__int128 *)&WebCore::ScrollAlignment::alignLeftAlways;
      goto LABEL_35;
    }
    if (!v8 || (*(_BYTE *)(v8 + 45) & 2) == 0)
    {
      v10 = v22;
      v11 = (__int128 *)&WebCore::ScrollAlignment::alignRightAlways;
LABEL_35:
      v12 = (uint64_t *)&WebCore::ScrollAlignment::alignToEdgeIfNeeded;
      goto LABEL_14;
    }
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x195FF9D8CLL);
  }
  v10 = v22;
  v11 = &WebCore::ScrollAlignment::alignToEdgeIfNeeded;
  v12 = &WebCore::ScrollAlignment::alignTopAlways;
LABEL_14:
  LOBYTE(v17) = 0;
  *((_QWORD *)&v17 + 1) = v11;
  v18 = v12;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  WebCore::LocalFrameView::scrollRectToVisible(&v23, v8, v10, (int **)&v17);
  v13 = v4 + 73;
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v15 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(v4[41] + 296));
    v13 = v4 + 73;
    if (v15)
    {
      JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(v15);
      v13 = v4 + 73;
    }
  }
  WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=(v13, &v24);
  this = (uint64_t *)WebCore::LocalFrameView::cancelScheduledScrolls((WebCore::LocalFrameView *)v4, v14);
  v2 = v24;
  v24 = 0;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24) - 2;
    goto LABEL_17;
  }
  return this;
}

uint64_t WebCore::LocalFrameView::updateEmbeddedObject(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;

  if (*(_QWORD *)result)
  {
    v1 = *(_QWORD *)(*(_QWORD *)result + 8);
    if (!*(_BYTE *)(v1 + 256))
    {
      v2 = result;
      v3 = *(int **)(*(_QWORD *)(v1 + 24) + 8);
      if (((*(uint64_t (**)(int *))(*(_QWORD *)v3 + 192))(v3) & 1) != 0)
      {
        result = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 200))(v3);
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 1288))(v3);
          if ((_DWORD)result)
          {
            v4 = v3[6];
            v3[6] = v4 + 2;
            if (*((_BYTE *)v3 + 224))
            {
              result = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v3 + 1320))(v3, 1);
              v4 = v3[6] - 2;
            }
            if (v4)
            {
              v3[6] = v4;
            }
            else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
            {
              result = WebCore::Node::removedLastRef((WebCore::Node *)v3);
            }
          }
        }
        if (*(_QWORD *)v2)
        {
          result = *(_QWORD *)(*(_QWORD *)v2 + 8);
          if (result)
            return WebCore::RenderWidget::updateWidgetPosition((WebCore::RenderWidget *)result);
        }
      }
      else
      {
        result = 96;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>::takeFirst(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF **v21;
  WTF *v22;
  WTF *v23;
  WTF **v24;
  WTF *v25;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(*(_QWORD *)a2 - 8);
  v5 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 8);
  v6 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v4 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = v9;
    v12 = *(uint64_t **)(v3 + 8 * v9);
    if (v12 == (uint64_t *)-1)
      goto LABEL_5;
    if (!v12)
      break;
    v13 = *v12;
    if (*(_QWORD *)(*v12 + 8) == v5)
      goto LABEL_7;
LABEL_5:
    v9 = (v11 + i) & v4;
  }
  v11 = *(unsigned int *)(v3 - 4);
  v12 = *(uint64_t **)(v3 + 8 * v11);
  v13 = *v12;
LABEL_7:
  v14 = (_QWORD *)(v3 + 8 * v11);
  *v12 = 0;
  *a1 = v13;
  if (!*(_QWORD *)a2 || (_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)a2 - 4)) != v14)
  {
    *v14 = -1;
    ++*(_DWORD *)(*(_QWORD *)a2 - 16);
    v15 = *(_QWORD *)a2;
    v16 = *(_QWORD *)a2 ? *(_DWORD *)(v15 - 12) - 1 : -1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v18 = 6 * *(_DWORD *)(v17 - 12);
      v19 = *(_DWORD *)(v17 - 4);
      if (v18 < v19 && v19 >= 9)
        WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>>::rehash((uint64_t *)a2, v19 >> 1, 0);
    }
  }
  v21 = *(WTF ***)(a2 + 8);
  v22 = v21[1];
  v23 = v21[2];
  if (v22)
  {
    *((_QWORD *)v22 + 2) = v23;
    v23 = v21[2];
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v23;
  }
  if (v23)
    v24 = (WTF **)((char *)v23 + 8);
  else
    v24 = (WTF **)(a2 + 16);
  *v24 = v22;
  v25 = *v21;
  *v21 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree(v25, (void *)a2);
    else
      --*(_DWORD *)v25;
  }
  return WTF::fastFree((WTF *)v21, (void *)a2);
}

void WebCore::WidgetHierarchyUpdatesSuspensionScope::~WidgetHierarchyUpdatesSuspensionScope(WebCore::WidgetHierarchyUpdatesSuspensionScope *this, void *a2)
{
  int v2;

  v2 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets(this, a2);
    v2 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v2 - 1;
}

uint64_t WebCore::LocalFrameView::flushAnyPendingPostLayoutTasks(uint64_t this, void *a2)
{
  uint64_t v2;
  WebCore::LocalFrameView *v3;
  _QWORD *v4;
  _QWORD *v5;

  if ((*(_QWORD *)(this + 440) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(this + 440) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    v2 = this;
    WebCore::LocalFrameViewLayoutContext::runPostLayoutTasks((_QWORD *)(this + 336), a2);
    this = v2;
  }
  if ((*(_QWORD *)(this + 704) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(this + 704) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    ++*(_DWORD *)(this + 8);
    v3 = (WebCore::LocalFrameView *)this;
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 672));
    this = WebCore::LocalFrameView::updateEmbeddedObjects(v3, v4);
    if ((this & 1) == 0)
      this = WebCore::LocalFrameView::updateEmbeddedObjects(v3, v5);
    if (*((_DWORD *)v3 + 2) == 1)
      return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
  return this;
}

unsigned int *WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScrollableArea>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int **v27;
  unsigned int v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF *v35;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_36;
    v25 = 0;
    v26 = v24 - 1;
    do
    {
      v27 = (unsigned int **)(v8 + 8 * v26);
      if ((unint64_t)*v27 + 1 >= 2 && !*((_QWORD *)*v27 + 1))
      {
        v34 = v25;
        v33 = v26;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v27, a2);
        v26 = v33;
        v25 = v34 + 1;
      }
    }
    while ((unint64_t)v26--);
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v31 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      *(_DWORD *)(v31 - 12) = v32 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v29 = *(_DWORD *)(v8 - 4);
    if (v29 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v29)
    {
LABEL_36:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[1];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)a2[1];
    a2[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = a2[1];
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v35 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v35, a3);
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    do
    {
      v22 = __ldaxr(result);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, result));
    if (!v23)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    }
  }
  if (v11)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v11);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v11));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v11);
      return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::willStartLiveResize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = this;
  if (!*(_BYTE *)(this + 110))
  {
    *(_BYTE *)(this + 110) = 1;
    v2 = *(_QWORD *)(this + 88);
    if (v2)
    {
LABEL_3:
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
      goto LABEL_4;
    }
    v10 = (_QWORD *)(v1 + 64);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + 64) + 688))(v1 + 64))
    {
      v12 = WTF::fastMalloc((WTF *)0x30);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E3406CB0;
      v13[1] = v10;
      v11 = 1;
      *(_BYTE *)(v12 + 16) = 1;
      *(_QWORD *)v12 = off_1E341C188;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(v12 + 24) = v13;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      v10 = *(_QWORD **)(v1 + 88);
      *(_QWORD *)(v1 + 88) = v12;
      if (!v10)
      {
        v2 = v12;
        goto LABEL_3;
      }
    }
    else
    {
      v11 = 38;
    }
    (*(void (**)(_QWORD *))(*v10 + 8 * v11))(v10);
    v2 = *(_QWORD *)(v1 + 88);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x195FFA5ACLL);
    }
    goto LABEL_3;
  }
LABEL_4:
  if (!*(_BYTE *)(v1 + 1381))
    this = WebCore::LocalFrameView::enableSpeculativeTilingIfNeeded(v1);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 328) + 296);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1944);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 144);
      if (v5)
      {
        this = *(_QWORD *)(v5 + 256);
        if (this)
          this = WebCore::RenderLayerBacking::adjustTiledBackingCoverage(this);
      }
    }
  }
  v6 = *(_QWORD *)(v1 + 32);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    this = objc_msgSend((id)objc_msgSend(*(id *)(v1 + 40), "window"), "tileCache");
    if (this)
    {
      v7 = *(unsigned __int8 *)(v1 + 1381);
      if (*(unsigned __int8 *)(this + 67) != v7)
      {
        *(_BYTE *)(this + 67) = v7;
        if (v7)
        {
          v8 = this + 88;
          *(_QWORD *)(this + 112) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          return WebCore::TimerBase::setNextFireTime(v8, v9 + 0.0);
        }
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::willStartLiveResize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = this;
  if (!*(_BYTE *)(this + 46))
  {
    *(_BYTE *)(this + 46) = 1;
    v2 = *(_QWORD *)(this + 24);
    if (v2)
    {
LABEL_3:
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
      goto LABEL_4;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 688))(v1))
    {
      v12 = WTF::fastMalloc((WTF *)0x30);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E3406CB0;
      v13[1] = v1;
      v10 = 1;
      *(_BYTE *)(v12 + 16) = 1;
      *(_QWORD *)v12 = off_1E341C188;
      *(_QWORD *)(v12 + 8) = v1;
      *(_QWORD *)(v12 + 24) = v13;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      v11 = *(_QWORD **)(v1 + 24);
      *(_QWORD *)(v1 + 24) = v12;
      if (!v11)
      {
        v2 = v12;
        goto LABEL_3;
      }
    }
    else
    {
      v10 = 38;
      v11 = (_QWORD *)v1;
    }
    (*(void (**)(void))(*v11 + 8 * v10))();
    v2 = *(_QWORD *)(v1 + 24);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x195FFA750);
    }
    goto LABEL_3;
  }
LABEL_4:
  if (!*(_BYTE *)(v1 + 1317))
    this = WebCore::LocalFrameView::enableSpeculativeTilingIfNeeded(v1 - 64);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 264) + 296);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1944);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 144);
      if (v5)
      {
        this = *(_QWORD *)(v5 + 256);
        if (this)
          this = WebCore::RenderLayerBacking::adjustTiledBackingCoverage(this);
      }
    }
  }
  v6 = *(_QWORD *)(v1 - 32);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    this = objc_msgSend((id)objc_msgSend(*(id *)(v1 - 24), "window"), "tileCache");
    if (this)
    {
      v7 = *(unsigned __int8 *)(v1 + 1317);
      if (*(unsigned __int8 *)(this + 67) != v7)
      {
        *(_BYTE *)(this + 67) = v7;
        if (v7)
        {
          v8 = this + 88;
          *(_QWORD *)(this + 112) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          return WebCore::TimerBase::setNextFireTime(v8, v9 + 0.0);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::willEndLiveResize(WebCore::LocalFrameView *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;

  result = WebCore::ScrollableArea::willEndLiveResize((uint64_t)this + 64);
  if (!*((_BYTE *)this + 1381))
    result = WebCore::LocalFrameView::enableSpeculativeTilingIfNeeded((uint64_t)this);
  v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1944);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 144);
      if (v5)
      {
        result = *(_QWORD *)(v5 + 256);
        if (result)
          result = WebCore::RenderLayerBacking::adjustTiledBackingCoverage(result);
      }
    }
  }
  v6 = *((_QWORD *)this + 4);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    result = objc_msgSend((id)objc_msgSend(*((id *)this + 5), "window"), "tileCache");
    if (result)
    {
      v7 = *((unsigned __int8 *)this + 1381);
      if (*(unsigned __int8 *)(result + 67) != v7)
      {
        *(_BYTE *)(result + 67) = v7;
        if (v7)
        {
          v8 = result + 88;
          *(_QWORD *)(result + 112) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
          return WebCore::TimerBase::setNextFireTime(v8, v9 + 0.0);
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::willEndLiveResize(WebCore::LocalFrameView *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;

  result = WebCore::ScrollableArea::willEndLiveResize((uint64_t)this);
  if (!*((_BYTE *)this + 1317))
    result = WebCore::LocalFrameView::enableSpeculativeTilingIfNeeded((uint64_t)this - 64);
  v3 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1944);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 144);
      if (v5)
      {
        result = *(_QWORD *)(v5 + 256);
        if (result)
          result = WebCore::RenderLayerBacking::adjustTiledBackingCoverage(result);
      }
    }
  }
  v6 = *((_QWORD *)this - 4);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    result = objc_msgSend((id)objc_msgSend(*((id *)this - 3), "window"), "tileCache");
    if (result)
    {
      v7 = *((unsigned __int8 *)this + 1317);
      if (*(unsigned __int8 *)(result + 67) != v7)
      {
        *(_BYTE *)(result + 67) = v7;
        if (v7)
        {
          v8 = result + 88;
          *(_QWORD *)(result + 112) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
          return WebCore::TimerBase::setNextFireTime(v8, v9 + 0.0);
        }
      }
    }
  }
  return result;
}

WTF *WebCore::LocalFrameView::autoSizeIfEnabled(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::LocalFrameView *v8;

  if (*((_BYTE *)this + 1386))
  {
    if (!*((_BYTE *)this + 1387))
    {
      v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
      if (v1)
      {
        v2 = *(_QWORD *)(v1 + 1944);
        if (v2)
        {
          v3 = *(unsigned int *)(v2 + 64) | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32);
          if (v3)
          {
            if (*(_QWORD *)(v3 + 8))
            {
              *((_BYTE *)this + 1387) = 1;
              v8 = this;
              v4 = *((_QWORD *)this + 58);
              if (v4 && *(_QWORD *)(v4 + 8))
                this = WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout((WTF *)((char *)this + 336));
              if (*((_BYTE *)v8 + 1385))
              {
                if (*((_BYTE *)v8 + 1385) == 1)
                  this = WebCore::LocalFrameView::performSizeToContentAutoSize(v8);
              }
              else
              {
                this = (WTF *)WebCore::LocalFrameView::performFixedWidthAutoSize(v8);
              }
              v5 = *((_QWORD *)v8 + 41);
              v6 = *(_QWORD *)(v5 + 24);
              if (v6)
              {
                v7 = *(_QWORD *)(v6 + 8);
                if (v7)
                {
                  if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5)
                    this = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 48) + 16)
                                                                             + 488))(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16), (uint64_t)v8 + 1280);
                }
              }
              *(_WORD *)((char *)v8 + 1387) = 256;
            }
          }
        }
      }
    }
  }
  return this;
}

WebCore::Node *WebCore::LocalFrameView::performSizeToContentAutoSize(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v3;
  WebCore::RenderView *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  int v26;
  int v27;
  unsigned __int8 v28;
  unint64_t v30;
  int v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  double v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  double v53;
  void *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  float v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  unsigned int v70;
  float v71;
  unsigned int v72;
  unint64_t v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  CGFloat v78;
  unsigned int v79;
  float v80;
  double v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  CGFloat v85;
  unsigned int v86;
  float v87;
  unsigned int v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  unsigned int v94;
  float v95;
  WebCore::Node *result;
  double v97;
  CGFloat v98;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v102;
  CGFloat v103;
  CGFloat v104;
  CGFloat v105;
  CGFloat v106;
  unsigned int v107;
  unsigned int v108;
  float MaxX;
  unsigned int v110;
  float MaxY;
  void *exc_buf;
  void *exc_bufa;
  unsigned __int16 *v114;
  _QWORD v115[2];
  WebCore::Node *v116;
  unint64_t v117;
  unint64_t v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;

  v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v116 = (WebCore::Node *)v3;
  v4 = *(WebCore::RenderView **)(v3 + 1944);
  v115[0] = &v116;
  v115[1] = v4;
  v114 = (unsigned __int16 *)((char *)this + 1217);
  if (*((_BYTE *)this + 1224))
    v5 = ((unint64_t)*(unsigned __int16 *)((char *)this + 1217) << 8) | ((unint64_t)*((unsigned __int8 *)this
                                                                                                  + 1219) << 24) | *((unsigned __int8 *)this + 1216) | ((unint64_t)*((unsigned __int8 *)this + 1220) << 32);
  else
    v5 = 0;
  WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits((uint64_t)this, 0, v5);
  if (*((_BYTE *)this + 1244))
    v6 = ((unint64_t)v114[10] << 8) | ((unint64_t)*((unsigned __int8 *)v114 + 22) << 24) | *((unsigned __int8 *)this + 1236) | ((unint64_t)*((unsigned __int8 *)this + 1240) << 32);
  else
    v6 = 0;
  WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits((uint64_t)this, 0, v6);
  if (*((_BYTE *)this + 1264))
    v7 = ((unint64_t)v114[20] << 8) | ((unint64_t)*((unsigned __int8 *)v114 + 42) << 24) | *((unsigned __int8 *)this + 1256) | ((unint64_t)*((unsigned __int8 *)this + 1260) << 32);
  else
    v7 = 0;
  WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits((uint64_t)this, 0, v7);
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
      v8 = objc_msgSend((id)v8, "superview");
    objc_msgSend((id)v8, "frame");
    v98 = v97;
    y = v130.origin.y;
    width = v130.size.width;
    height = v130.size.height;
    *(float *)&v97 = v97;
    LODWORD(v8) = vcvtms_s32_f32(*(float *)&v97);
    *(float *)&v97 = v130.origin.y;
    LODWORD(v1) = vcvtms_s32_f32(*(float *)&v97);
    v130.origin.x = v98;
    CGRectGetMaxX(v130);
    v131.origin.x = v98;
    v131.origin.y = y;
    v131.size.width = width;
    v131.size.height = height;
    CGRectGetMaxY(v131);
    v9 = v8 | (v1 << 32);
  }
  else
  {
    v9 = *((_QWORD *)this + 6);
  }
  v117 = v9;
  v118 = 0x100000001;
  (*(void (**)(WebCore::LocalFrameView *, unint64_t *))(*(_QWORD *)this + 16))(this, &v117);
  v10 = (void *)*((_QWORD *)this + 5);
  if (v10)
  {
    if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
      v10 = (void *)objc_msgSend(v10, "superview");
    objc_msgSend(v10, "frame");
    v103 = v102;
    v104 = v132.origin.y;
    v105 = v132.size.width;
    v106 = v132.size.height;
    *(float *)&v102 = v102;
    v107 = vcvtms_s32_f32(*(float *)&v102);
    *(float *)&v102 = v132.origin.y;
    v108 = vcvtms_s32_f32(*(float *)&v102);
    v132.origin.x = v103;
    MaxX = CGRectGetMaxX(v132);
    v110 = vcvtps_s32_f32(MaxX);
    v133.origin.x = v103;
    v133.origin.y = v104;
    v133.size.width = v105;
    v133.size.height = v106;
    MaxY = CGRectGetMaxY(v133);
    v11 = (v110 - v107) | ((unint64_t)(vcvtps_s32_f32(MaxY) - v108) << 32);
  }
  else
  {
    v11 = *((_QWORD *)this + 7);
  }
  v12 = HIDWORD(v11);
  v13 = 1;
  while (1)
  {
    v14 = v13;
    WebCore::LocalFrameView::performSizeToContentAutoSize(void)::$_0::operator()((uint64_t)v115);
    if ((*((_BYTE *)v4 + 21) & 0x20) != 0)
      (*(void (**)(WebCore::RenderView *))(*(_QWORD *)v4 + 1640))(v4);
    v15 = *((_DWORD *)v4 + 46) / 64;
    WebCore::RenderView::documentRect(v4);
    v17 = HIDWORD(v16);
    if (v15 > *((_DWORD *)this + 317))
    {
      v18 = *((_QWORD *)this + 19);
      if (v18)
      {
        ++*(_DWORD *)(v18 + 8);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 272))(v18) & 1) == 0)
        {
          v44 = *(void **)(v18 + 40);
          if (v44)
          {
            v73 = v11;
            if (objc_msgSend(*(id *)(v18 + 40), "conformsToProtocol:", &unk_1EE342188))
              v44 = (void *)objc_msgSend(v44, "superview");
            objc_msgSend(v44, "frame");
            v75 = v74;
            v76 = v124.origin.y;
            v77 = v124.size.width;
            v78 = v124.size.height;
            *(float *)&v74 = v124.origin.y;
            v79 = vcvtms_s32_f32(*(float *)&v74);
            v124.origin.x = v75;
            CGRectGetMaxX(v124);
            v125.origin.x = v75;
            v125.origin.y = v76;
            v125.size.width = v77;
            v125.size.height = v78;
            v80 = CGRectGetMaxY(v125);
            v45 = (unint64_t)(vcvtps_s32_f32(v80) - v79) << 32;
            v11 = v73;
          }
          else
          {
            v45 = *(_QWORD *)(v18 + 56);
          }
          v19 = HIDWORD(v45);
          goto LABEL_23;
        }
      }
      else
      {
        WebCore::LocalFrameView::createScrollbar((uint64_t *)this, 0, (uint64_t *)&v117);
        v18 = v117;
        if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v117 + 272))(v117) & 1) == 0)
        {
          v41 = v11;
          v42 = *(void **)(v18 + 40);
          if (v42)
          {
            if (objc_msgSend(*(id *)(v18 + 40), "conformsToProtocol:", &unk_1EE342188))
              v42 = (void *)objc_msgSend(v42, "superview");
            objc_msgSend(v42, "frame");
            v90 = v89;
            v91 = v128.origin.y;
            v92 = v128.size.width;
            v93 = v128.size.height;
            *(float *)&v89 = v128.origin.y;
            v94 = vcvtms_s32_f32(*(float *)&v89);
            v128.origin.x = v90;
            CGRectGetMaxX(v128);
            v129.origin.x = v90;
            v129.origin.y = v91;
            v129.size.width = v92;
            v129.size.height = v93;
            v95 = CGRectGetMaxY(v129);
            v43 = (unint64_t)(vcvtps_s32_f32(v95) - v94) << 32;
          }
          else
          {
            v43 = *(_QWORD *)(v18 + 56);
          }
          v19 = HIDWORD(v43);
          v11 = v41;
          goto LABEL_23;
        }
      }
      LODWORD(v19) = 0;
LABEL_23:
      LODWORD(v17) = v19 + v17;
      goto LABEL_29;
    }
    if (*((_DWORD *)this + 318) < SHIDWORD(v16))
    {
      v18 = *((_QWORD *)this + 20);
      if (v18)
      {
        ++*(_DWORD *)(v18 + 8);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 272))(v18) & 1) != 0)
        {
LABEL_27:
          LODWORD(v20) = 0;
LABEL_28:
          v15 += v20;
LABEL_29:
          if (*(_DWORD *)(v18 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          else
            --*(_DWORD *)(v18 + 8);
          goto LABEL_31;
        }
        v40 = *(void **)(v18 + 40);
        if (!v40)
        {
          v20 = *(_QWORD *)(v18 + 56);
          goto LABEL_28;
        }
        v46 = v11;
        if (objc_msgSend(*(id *)(v18 + 40), "conformsToProtocol:", &unk_1EE342188))
          v40 = (void *)objc_msgSend(v40, "superview");
        objc_msgSend(v40, "frame");
        v66 = v65;
        v67 = v122.origin.y;
        v68 = v122.size.width;
        v69 = v122.size.height;
        *(float *)&v65 = v65;
        v70 = vcvtms_s32_f32(*(float *)&v65);
        v122.origin.x = v66;
        v71 = CGRectGetMaxX(v122);
        v72 = vcvtps_s32_f32(v71);
        v123.origin.x = v66;
        v123.origin.y = v67;
        v123.size.width = v68;
        v123.size.height = v69;
        CGRectGetMaxY(v123);
        LODWORD(v20) = v72 - v70;
      }
      else
      {
        WebCore::LocalFrameView::createScrollbar((uint64_t *)this, 1, (uint64_t *)&v117);
        v18 = v117;
        if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v117 + 272))(v117) & 1) != 0)
          goto LABEL_27;
        v46 = v11;
        v47 = *(void **)(v18 + 40);
        if (v47)
        {
          if (objc_msgSend(*(id *)(v18 + 40), "conformsToProtocol:", &unk_1EE342188))
            v47 = (void *)objc_msgSend(v47, "superview");
          objc_msgSend(v47, "frame");
          v82 = v81;
          v83 = v126.origin.y;
          v84 = v126.size.width;
          v85 = v126.size.height;
          *(float *)&v81 = v81;
          v86 = vcvtms_s32_f32(*(float *)&v81);
          v126.origin.x = v82;
          v87 = CGRectGetMaxX(v126);
          v88 = vcvtps_s32_f32(v87);
          v127.origin.x = v82;
          v127.origin.y = v83;
          v127.size.width = v84;
          v127.size.height = v85;
          CGRectGetMaxY(v127);
          LODWORD(v20) = v88 - v86;
        }
        else
        {
          v20 = *(_QWORD *)(v18 + 56);
        }
      }
      v11 = v46;
      goto LABEL_28;
    }
LABEL_31:
    v21 = v15 <= 1 ? 1 : v15;
    v22 = (int)v17 <= 1 ? 1 : v17;
    v23 = *((_DWORD *)this + 317);
    v24 = v21 >= v23 ? *((_DWORD *)this + 317) : v21;
    v25 = v21 <= v23 ? 1 : 2;
    v26 = *((_DWORD *)this + 318);
    v27 = v22 >= v26 ? *((_DWORD *)this + 318) : v22;
    v28 = v22 <= v26 ? 1 : 2;
    if (v24 != (_DWORD)v11 || v27 != (_DWORD)v12)
      break;
LABEL_77:
    v13 = 0;
    if ((v14 & 1) == 0)
      goto LABEL_112;
  }
  if (!*((_BYTE *)this + 1388)
    || v26 < (int)v12
    || v23 < (int)v11
    || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 41) + 280) + 216)
    || v27 >= (int)v12 && v24 >= (int)v11)
  {
    v30 = v11;
    if ((v14 & 1) != 0)
      v31 = 1;
    else
      v31 = v27;
    v32 = (void *)*((_QWORD *)this + 5);
    if (!v32)
    {
      v33 = *((_DWORD *)this + 12);
      goto LABEL_64;
    }
    if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
      v32 = (void *)objc_msgSend(v32, "superview");
    objc_msgSend(v32, "frame");
    v49 = v48;
    v50 = v119.origin.y;
    v51 = v119.size.width;
    v52 = v119.size.height;
    *(float *)&v48 = v48;
    v33 = vcvtms_s32_f32(*(float *)&v48);
    v119.origin.x = v49;
    CGRectGetMaxX(v119);
    v120.origin.x = v49;
    v120.origin.y = v50;
    v120.size.width = v51;
    v120.size.height = v52;
    v53 = CGRectGetMaxY(v120);
    exc_buf = (void *)*((_QWORD *)this + 5);
    if (exc_buf)
    {
      if (objc_msgSend(exc_buf, "conformsToProtocol:", &unk_1EE342188, v53))
        objc_msgSend((id)objc_msgSend(exc_buf, "superview"), "frame");
      else
        objc_msgSend(exc_buf, "frame");
      v59 = v55;
      v60 = v56;
      v61 = v57;
      v62 = v58;
      v63 = v56;
      LODWORD(v54) = vcvtms_s32_f32(v63);
      exc_bufa = v54;
      v64 = v59;
      CGRectGetMaxX(*(CGRect *)(&v56 - 1));
      v121.origin.x = v59;
      v121.origin.y = v60;
      v121.size.width = v61;
      v121.size.height = v62;
      CGRectGetMaxY(v121);
      v34 = (_QWORD)exc_bufa << 32;
    }
    else
    {
LABEL_64:
      v34 = *((_QWORD *)this + 6);
    }
    v117 = __PAIR64__(HIDWORD(v34), v33);
    v118 = __PAIR64__(v31, v24);
    (*(void (**)(WebCore::LocalFrameView *, unint64_t *))(*(_QWORD *)this + 16))(this, &v117);
    v35 = *((_DWORD *)this + 317);
    if (v35 >= v24)
      v35 = v24;
    if (*((_BYTE *)this + 1224))
      v36 = ((unint64_t)*v114 << 8) | ((unint64_t)*((unsigned __int8 *)v114 + 2) << 24) | *((unsigned __int8 *)this + 1216) | ((unint64_t)*((unsigned __int8 *)this + 1220) << 32);
    else
      v36 = 0;
    v11 = v30;
    v37 = (void *)(COERCE_UNSIGNED_INT((float)v35) | 0x100000000);
    WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits((uint64_t)this, v37, v36);
    if (*((_BYTE *)this + 1244))
      v38 = ((unint64_t)v114[10] << 8) | ((unint64_t)*((unsigned __int8 *)v114 + 22) << 24) | *((unsigned __int8 *)this + 1236) | ((unint64_t)*((unsigned __int8 *)this + 1240) << 32);
    else
      v38 = 0;
    WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits((uint64_t)this, v37, v38);
    if (*((_BYTE *)this + 1264))
      v39 = ((unint64_t)v114[20] << 8) | ((unint64_t)*((unsigned __int8 *)v114 + 42) << 24) | *((unsigned __int8 *)this + 1256) | ((unint64_t)*((unsigned __int8 *)this + 1260) << 32);
    else
      v39 = 0;
    WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits((uint64_t)this, v37, v39);
    *(_WORD *)((char *)this + 313) = 0;
    WebCore::ScrollView::setScrollbarModes((uint64_t)this, v25, v28, 1, 1);
    goto LABEL_77;
  }
LABEL_112:
  WebCore::LocalFrameView::performSizeToContentAutoSize(void)::$_0::operator()((uint64_t)v115);
  *((_QWORD *)this + 160) = *((_QWORD *)this + 32);
  result = v116;
  v116 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::performFixedWidthAutoSize(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  double v17;
  CGFloat v18;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MaxY;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  double v34;
  uint64_t v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;

  v2 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  if (*(unsigned int *)(*(_QWORD *)(v2 + 1944) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 + 1944)
                                                                                                + 68) << 32))
    v3 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(v2 + 1944) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 + 1944) + 68) << 32))
                   + 8);
  else
    v3 = 0;
  *(_WORD *)((char *)this + 313) = 0;
  WebCore::ScrollView::setScrollbarModes((uint64_t)this, 1, 1, 1, 1);
  if ((*(_BYTE *)(v3 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195FFB69CLL);
  }
  v46 = *((_DWORD *)this + 317);
  LOWORD(v47) = 4;
  BYTE2(v47) = 0;
  WebCore::RenderStyle::setMaxWidth(v3 + 80, (WebCore::Length *)&v46);
  if (v47 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
  }
  v4 = *(_QWORD *)((char *)this + 1268);
  v5 = (void *)*((_QWORD *)this + 5);
  if (!v5)
  {
    v6 = *((_DWORD *)this + 12);
LABEL_10:
    v7 = *((_QWORD *)this + 6);
    goto LABEL_11;
  }
  v44 = *(_QWORD *)((char *)this + 1268);
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE342188))
    v5 = (void *)objc_msgSend(v5, "superview");
  objc_msgSend(v5, "frame");
  v18 = v17;
  y = v49.origin.y;
  width = v49.size.width;
  height = v49.size.height;
  *(float *)&v17 = v17;
  v42 = vcvtms_s32_f32(*(float *)&v17);
  v49.origin.x = v18;
  CGRectGetMaxX(v49);
  v50.origin.x = v18;
  v50.origin.y = y;
  v50.size.width = width;
  v50.size.height = height;
  MaxY = CGRectGetMaxY(v50);
  v23 = *((_QWORD *)this + 5);
  if (!v23)
  {
    v4 = v44;
    v6 = v42;
    goto LABEL_10;
  }
  if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188, MaxY))
    v23 = objc_msgSend((id)v23, "superview");
  objc_msgSend((id)v23, "frame");
  v25 = v24;
  v26 = v51.origin.y;
  v27 = v51.size.width;
  v28 = v51.size.height;
  *(float *)&v24 = v51.origin.y;
  LODWORD(v23) = vcvtms_s32_f32(*(float *)&v24);
  v51.origin.x = v25;
  CGRectGetMaxX(v51);
  v52.origin.x = v25;
  v52.origin.y = v26;
  v52.size.width = v27;
  v52.size.height = v28;
  CGRectGetMaxY(v52);
  v7 = v23 << 32;
  v4 = v44;
  v6 = v42;
LABEL_11:
  v46 = v6;
  v47 = HIDWORD(v7);
  v48 = v4;
  (*(void (**)(WebCore::LocalFrameView *, unsigned int *))(*(_QWORD *)this + 16))(this, &v46);
  ++*((_DWORD *)this + 2);
  WebCore::Document::updateLayout(v2, 2u, 0);
  v8 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 160) = v8;
  v9 = *((_DWORD *)this + 317);
  if (v9 <= (int)v8)
    v9 = v8;
  v10 = *((_DWORD *)this + 319);
  v11 = HIDWORD(v8);
  if (v10 <= (int)v11)
    v12 = v11;
  else
    v12 = *((_DWORD *)this + 319);
  if (v10)
    LODWORD(v11) = v12;
  v13 = (void *)*((_QWORD *)this + 5);
  if (!v13)
  {
    v14 = *((_DWORD *)this + 12);
LABEL_20:
    v15 = *((_QWORD *)this + 6);
    goto LABEL_21;
  }
  v45 = v11;
  v43 = v9;
  if (objc_msgSend(v13, "conformsToProtocol:", &unk_1EE342188))
    v13 = (void *)objc_msgSend(v13, "superview");
  objc_msgSend(v13, "frame");
  v30 = v29;
  v31 = v53.origin.y;
  v32 = v53.size.width;
  v33 = v53.size.height;
  *(float *)&v29 = v29;
  v41 = vcvtms_s32_f32(*(float *)&v29);
  v53.origin.x = v30;
  CGRectGetMaxX(v53);
  v54.origin.x = v30;
  v54.origin.y = v31;
  v54.size.width = v32;
  v54.size.height = v33;
  v34 = CGRectGetMaxY(v54);
  v35 = *((_QWORD *)this + 5);
  if (!v35)
  {
    v14 = v41;
    v9 = v43;
    LODWORD(v11) = v45;
    goto LABEL_20;
  }
  if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188, v34))
    v35 = objc_msgSend((id)v35, "superview");
  objc_msgSend((id)v35, "frame");
  v37 = v36;
  v38 = v55.origin.y;
  v39 = v55.size.width;
  v40 = v55.size.height;
  *(float *)&v36 = v55.origin.y;
  LODWORD(v35) = vcvtms_s32_f32(*(float *)&v36);
  v55.origin.x = v37;
  CGRectGetMaxX(v55);
  v56.origin.x = v37;
  v56.origin.y = v38;
  v56.size.width = v39;
  v56.size.height = v40;
  CGRectGetMaxY(v56);
  v15 = v35 << 32;
  v14 = v41;
  v9 = v43;
  LODWORD(v11) = v45;
LABEL_21:
  v46 = v14;
  v47 = HIDWORD(v15);
  v48 = __PAIR64__(v11, v9);
  (*(void (**)(WebCore::LocalFrameView *, unsigned int *))(*(_QWORD *)this + 16))(this, &v46);
  result = WebCore::Document::updateLayout(v2, 2u, 0);
  if (*((_DWORD *)this + 2) == 1)
    result = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::LocalFrameView::performSizeToContentAutoSize(void)::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD v7[2];

  WebCore::Document::updateStyleIfNeeded(**(WebCore::Document ***)a1);
  if (*(unsigned int *)(*(_QWORD *)(a1 + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 68) << 32))
  {
    v2 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(a1 + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 68) << 32))
                   + 8);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195FFBA14);
      }
      v3 = v2 + 80;
      v4 = ((*(_DWORD *)(v2 + 124) >> 13) & 6) - 2;
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8);
      if (v4 <= 3)
      {
        if (*(_BYTE *)(v5 + 8) != 3)
          return WebCore::Document::updateLayout(**(_QWORD **)a1, 0, 0);
        *(_DWORD *)((char *)v7 + 3) = 0;
        v7[0] = 0;
        WebCore::RenderStyle::setWidth(v3, (WebCore::Length *)v7);
      }
      else
      {
        if (*(_BYTE *)(v5 + 16) != 3)
          return WebCore::Document::updateLayout(**(_QWORD **)a1, 0, 0);
        *(_DWORD *)((char *)v7 + 3) = 0;
        v7[0] = 0;
        WebCore::RenderStyle::setHeight(v3, (WebCore::Length *)v7);
      }
      if (LOBYTE(v7[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v7[0]);
      }
    }
  }
  return WebCore::Document::updateLayout(**(_QWORD **)a1, 0, 0);
}

double WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight(WebCore::LocalFrameView *this, int a2)
{
  double result;

  if (*((_DWORD *)this + 319) != a2)
  {
    *((_DWORD *)this + 319) = a2;
    return WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameView *)((char *)this + 336));
  }
  return result;
}

uint64_t WebCore::LocalFrameView::pagination(WebCore::LocalFrameView *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = (uint64_t)this + 1316;
  if (!*((_BYTE *)this + 1316) && !*((_BYTE *)this + 1317) && !*((_DWORD *)this + 330) && !*((_DWORD *)this + 331))
  {
    v3 = *((_QWORD *)this + 41);
    if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          return v5 + 468;
      }
    }
  }
  return result;
}

float WebCore::LocalFrameView::adjustVerticalPageScrollStepForFixedContent(WebCore::LocalFrameView *this, float a2)
{
  uint64_t v3;
  WebCore::RenderBlock *v4;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  WTF *v11;
  uint64_t v12;
  _QWORD *v13;
  WTF *v14;
  WTF *v15;
  uint64_t isRectilinear;
  int v17;
  int v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  unint64_t v28;
  int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v39;
  float v40;
  float v41;
  float v43;
  float v45;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v54;
  int v55;
  int v56;
  __int128 v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v3 && (v4 = *(WebCore::RenderBlock **)(v3 + 1944)) != 0)
  {
    v6 = (_QWORD *)WebCore::RenderBlock::positionedObjects(*(WebCore::RenderBlock **)(v3 + 1944));
    if (v6)
    {
      v8 = v6;
      v9 = *v6;
      if (*v6)
      {
        if (*(_DWORD *)(v9 - 12))
        {
          v10 = v6 + 1;
          v11 = (WTF *)v6[1];
          if (!v11)
            goto LABEL_7;
          v13 = (_QWORD *)v6[1];
          do
          {
            if (*(_QWORD *)(*v13 + 8))
            {
              v12 = WebCore::RenderBlock::positionedObjects(v4);
              goto LABEL_22;
            }
            v13 = (_QWORD *)v13[2];
          }
          while (v13);
          do
          {
            v14 = v11;
            v11 = (WTF *)*((_QWORD *)v11 + 2);
            v15 = *(WTF **)v14;
            *(_QWORD *)v14 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 1)
                WTF::fastFree(v15, v7);
              else
                --*(_DWORD *)v15;
            }
            WTF::fastFree(v14, v7);
          }
          while (v11);
          v9 = *v8;
          if (*v8)
          {
LABEL_7:
            *v8 = 0;
            WTF::fastFree((WTF *)(v9 - 16), v7);
            v9 = *v8;
            *v10 = 0;
            v8[2] = 0;
            *((_DWORD *)v8 + 6) = 0;
            if (v9)
            {
              LODWORD(v9) = *(_DWORD *)(v9 - 12);
              if (v9 > 0x7FFFFFFE)
                LODWORD(v9) = 0x7FFFFFFF;
            }
          }
          else
          {
            *v10 = 0;
            v8[2] = 0;
            *((_DWORD *)v8 + 6) = 0;
          }
          *((_DWORD *)v8 + 7) = 2 * v9;
        }
      }
    }
  }
  else
  {
    v12 = 0;
LABEL_22:
    isRectilinear = WebCore::ScrollView::unobscuredContentRect((uint64_t)this, 0);
    v19 = (float)v18;
    v20 = *(_QWORD **)(v12 + 8);
    v21 = 0.0;
    if (v20)
    {
      v22 = (float)(int)isRectilinear;
      v23 = (float)SHIDWORD(isRectilinear);
      v24 = (float)v17;
      while (1)
      {
        v25 = *(_QWORD *)(*v20 + 8);
        if (v25)
          break;
        v20 = (_QWORD *)v20[2];
        if (!v20)
          goto LABEL_26;
      }
      v27 = v23 + v19;
      v26 = 0.0;
      v21 = 0.0;
LABEL_28:
      if ((*(_QWORD *)(v25 + 96) & 0x380000) == 0x300000
        && (*(_BYTE *)(*(_QWORD *)(v25 + 104) + 239) & 4) == 0
        && (*(_DWORD *)(v25 + 120) & 0x30) != 0x10
        && *(float *)(*(_QWORD *)(*(_QWORD *)(v25 + 88) + 32) + 4) != 0.0)
      {
        v28 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)v25);
        v63 = (float)(int)v28 * 0.015625;
        v64 = (float)SHIDWORD(v28) * 0.015625;
        v65 = v63 + (float)((float)v29 * 0.015625);
        v66 = v64;
        v67 = v65;
        v68 = v64 + (float)((float)v30 * 0.015625);
        v69 = v63;
        v70 = v68;
        WebCore::RenderObject::localToContainerQuad(v25, &v63, 0, 2u, &v58);
        isRectilinear = WebCore::FloatQuad::isRectilinear((WebCore::FloatQuad *)&v58);
        if ((_DWORD)isRectilinear)
        {
          v32 = v59;
          v31 = v60;
          if (v61 >= v59)
            v33 = v59;
          else
            v33 = v61;
          v34 = *((float *)&v58 + 1);
          v35 = *(float *)&v58;
          if (*((float *)&v58 + 2) >= *(float *)&v58)
            v36 = *(float *)&v58;
          else
            v36 = *((float *)&v58 + 2);
          if (v33 >= v36)
            v33 = v36;
          v37 = fabsf(v33);
          if (v37 == INFINITY || v37 > 2147500000.0)
            v33 = (float)((SLODWORD(v33) >> 31) ^ 0x7FFFFFFF);
          if (v62 >= v60)
            v39 = v60;
          else
            v39 = v62;
          if (*((float *)&v58 + 3) >= *((float *)&v58 + 1))
            v40 = *((float *)&v58 + 1);
          else
            v40 = *((float *)&v58 + 3);
          if (v39 >= v40)
            v39 = v40;
          v41 = fabsf(v39);
          if (v41 == INFINITY || v41 > 2147500000.0)
            v39 = (float)((SLODWORD(v39) >> 31) ^ 0x7FFFFFFF);
          if (*(float *)&v58 < *((float *)&v58 + 2))
            v35 = *((float *)&v58 + 2);
          if (v59 < v61)
            v32 = v61;
          if (v35 >= v32)
            v32 = v35;
          v43 = fabsf(v32);
          if (v43 == INFINITY || v43 > 2147500000.0)
            v32 = (float)((SLODWORD(v32) >> 31) ^ 0x7FFFFFFF);
          if (*((float *)&v58 + 1) < *((float *)&v58 + 3))
            v34 = *((float *)&v58 + 3);
          if (v60 < v62)
            v31 = v62;
          if (v34 >= v31)
            v31 = v34;
          v45 = fabsf(v31);
          if (v45 == INFINITY || v45 > 2147500000.0)
            v31 = (float)((SLODWORD(v31) >> 31) ^ 0x7FFFFFFF);
          v47 = v32 - v33;
          v48 = v31 - v39;
          if (v33 <= v22)
            v49 = v22;
          else
            v49 = v33;
          if (v39 <= v23)
            v50 = v23;
          else
            v50 = v39;
          v51 = v33 + v47;
          if (v51 >= (float)(v22 + v24))
            v51 = v22 + v24;
          v52 = v39 + v48;
          if (v52 >= v27)
            v52 = v23 + v19;
          if (v49 >= v51 || v50 >= v52)
          {
            v49 = 0.0;
            v50 = 0.0;
            v51 = 0.0;
            v52 = 0.0;
          }
          if ((float)(v51 - v49) >= v24)
          {
            v54 = v52 - v50;
            if (v50 == v23)
            {
              if (v26 < v54)
                v26 = v52 - v50;
            }
            else if ((float)(v50 + v54) == v27 && v21 < v54)
            {
              v21 = v52 - v50;
            }
          }
        }
      }
      while (1)
      {
        v20 = (_QWORD *)v20[2];
        if (!v20)
          break;
        v25 = *(_QWORD *)(*v20 + 8);
        if (v25)
        {
          ++*(_DWORD *)(v12 + 24);
          goto LABEL_28;
        }
      }
      ++*(_DWORD *)(v12 + 24);
    }
    else
    {
LABEL_26:
      v26 = 0.0;
    }
    v55 = llroundf((float)(int)v19 * 0.8);
    v56 = llroundf((float)(int)((int)(float)((float)(v19 - v26) - v21)
                              - WebCore::Scrollbar::maxOverlapBetweenPages((WebCore::Scrollbar *)isRectilinear)));
    if (v55 > v56)
      v56 = v55;
    if (v56 <= 1)
      return (float)1;
    return (float)v56;
  }
  return a2;
}

float `non-virtual thunk to'WebCore::LocalFrameView::adjustVerticalPageScrollStepForFixedContent(WebCore::LocalFrameView *this, float a2)
{
  return WebCore::LocalFrameView::adjustVerticalPageScrollStepForFixedContent((WebCore::LocalFrameView *)((char *)this - 64), a2);
}

uint64_t WebCore::LocalFrameView::invalidateScrollbarRect(WebCore::LocalFrameView *this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  void *v3;
  uint64_t v4;
  WebCore::LocalFrameView *v6;
  const CGRect *v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  void *v12;
  __int128 v13;
  CGRect v14;

  v13 = *(_OWORD *)a3;
  v3 = (void *)*((_QWORD *)a2 + 5);
  if (v3)
  {
    v6 = this;
    v12 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v12, "superview"), "frame");
    else
      objc_msgSend(v12, "frame");
    v14.origin.x = v8;
    v14.origin.y = v9;
    v14.size.width = v10;
    v14.size.height = v11;
    v4 = WebCore::enclosingIntRect(&v14, v7);
    this = v6;
  }
  else
  {
    v4 = *((_QWORD *)a2 + 6);
  }
  LODWORD(v13) = v13 + v4;
  DWORD1(v13) += HIDWORD(v4);
  return WebCore::FrameView::invalidateRect(this, (const WebCore::IntRect *)&v13);
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::invalidateScrollbarRect(WebCore::LocalFrameView *this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  WebCore::LocalFrameView *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  __int128 v21;
  CGRect v22;

  v21 = *(_OWORD *)a3;
  v4 = (void *)*((_QWORD *)a2 + 5);
  if (v4)
  {
    HIDWORD(v7) = HIDWORD(a2);
    v8 = this;
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v4, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v7) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v22.origin.x = v13;
    v22.origin.y = v14;
    v22.size.width = v15;
    v22.size.height = v16;
    CGRectGetMaxY(v22);
    v5 = v7 | (v3 << 32);
    this = v8;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
  }
  LODWORD(v21) = v21 + v5;
  DWORD1(v21) += HIDWORD(v5);
  return WebCore::FrameView::invalidateRect((WebCore::LocalFrameView *)((char *)this - 64), (const WebCore::IntRect *)&v21);
}

uint64_t WebCore::LocalFrameView::setVisibleScrollerThumbRect(uint64_t this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(this + 328);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) == v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        return (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16)
                                                                           + 1320))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16), a2);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::setVisibleScrollerThumbRect(uint64_t this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(this + 264);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) == v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        return (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16)
                                                                           + 1320))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16), a2);
    }
  }
  return this;
}

BOOL `non-virtual thunk to'WebCore::LocalFrameView::isScrollableOrRubberbandable(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::isScrollable((uint64_t)this - 64);
}

BOOL WebCore::LocalFrameView::hasScrollableOrRubberbandableAncestor(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 41);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1)
    return WebCore::LocalFrameView::isScrollable((uint64_t)this);
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  if (!*(_QWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(v1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 144))
    return 0;
  v6 = *(_QWORD *)(v4 + 288);
  if (!v6)
    return 0;
  do
  {
    result = WebCore::LocalFrameView::isScrollable(v6);
    if ((result & 1) != 0)
      break;
    v7 = *(_QWORD *)(v6 + 32);
    if (!v7)
      break;
    if (!*(_QWORD *)(v7 + 8))
      break;
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + 328) + 56);
    if (!v8)
      break;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      break;
    if (*(_BYTE *)(v9 + 144))
      break;
    v6 = *(_QWORD *)(v9 + 288);
  }
  while (v6);
  return result;
}

BOOL `non-virtual thunk to'WebCore::LocalFrameView::hasScrollableOrRubberbandableAncestor(WebCore::LocalFrameView *this)
{
  return WebCore::LocalFrameView::hasScrollableOrRubberbandableAncestor((WebCore::LocalFrameView *)((char *)this - 64));
}

uint64_t WebCore::LocalFrameView::removeScrollableArea(WebCore::LocalFrameView *this, WebCore::ScrollableArea *a2)
{
  uint64_t result;
  uint64_t v4;
  WebCore::Page *v5;
  uint64_t v6;

  result = *((_QWORD *)this + 161);
  if (result)
  {
    result = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScrollableArea>(result, a2);
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
      if (v4)
      {
        v5 = *(WebCore::Page **)(v4 + 8);
        if (v5)
        {
          v6 = WebCore::Page::scrollingCoordinator(v5);
          if (v6)
            (*(void (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)v6 + 88))(v6, this);
        }
      }
      return 1;
    }
  }
  return result;
}

BOOL WebCore::LocalFrameView::shouldSuspendScrollAnimations(WebCore::LocalFrameView *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 41) + 280) + 80) != 2;
}

BOOL `non-virtual thunk to'WebCore::LocalFrameView::shouldSuspendScrollAnimations(WebCore::LocalFrameView *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 33) + 280) + 80) != 2;
}

void WebCore::LocalFrameView::updateScrollCorner(WebCore::RenderElement **this)
{
  uint64_t v2;
  const WebCore::Element *v3;
  WebCore::Frame *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderStyle *v8;
  WebCore::RenderElement *v9;
  WebCore::RenderStyle *v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  BOOL v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF::StringImpl *v28;
  int v29;
  WebCore::RenderStyle *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const WebCore::Element *v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  void *v38;
  WTF::StringImpl *v39;
  WebCore::RenderStyle *v40;
  _QWORD v41[2];
  WebCore::RenderStyle *v42;
  uint64_t v43;
  WebCore::RenderElement *v44;
  WTF::StringImpl *v45;
  _BYTE v46[8];
  int v47;
  char v48;

  v42 = 0;
  v43 = 0;
  v41[0] = WebCore::ScrollView::scrollCornerRect((WebCore::ScrollView *)this);
  v41[1] = v2;
  v4 = this[41];
  v5 = *((_QWORD *)v4 + 37);
  if (!v5)
  {
    if ((int)v2 < 1 || SHIDWORD(v2) < 1)
      goto LABEL_10;
    v16 = 0;
    v17 = 1;
    goto LABEL_59;
  }
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(v5 + 1272);
  if (!v6 || (*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_8:
    if ((int)v2 < 1 || SHIDWORD(v2) < 1)
      goto LABEL_10;
    v14 = WebCore::Document::bodyOrFrameset((WebCore::Document *)v5);
    v16 = v14;
    v17 = v14 == 0;
    v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    if (v14)
    {
      *(_DWORD *)(v14 + 24) += 2;
      v15 = (WTF::StringImpl *)(*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL);
      if (v15)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195FFC870);
        }
        WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v43, (uint64_t)v15);
        v19 = v43;
        LODWORD(v44) = 21;
        v20 = *v18;
        if (*v18)
          *(_DWORD *)v20 += 2;
        v45 = v20;
        v46[0] = 0;
        v48 = 0;
        WebCore::RenderElement::getUncachedPseudoStyle(v19, (int *)&v44, v19 + 80, 0, &v40);
        std::unique_ptr<WebCore::RenderStyle>::operator=[abi:sn180100](&v42, &v40);
        std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v40, v21);
        v22 = v45;
        v45 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v15);
          else
            *(_DWORD *)v22 -= 2;
        }
        if (v42)
        {
LABEL_34:
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16, v15);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
          goto LABEL_10;
        }
        v6 = *(_QWORD *)(v5 + 1272);
      }
    }
    if (v6)
    {
      v24 = *(_DWORD *)(v6 + 24) + 2;
      *(_DWORD *)(v6 + 24) = v24;
      v15 = (WTF::StringImpl *)(*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL);
      if (v15)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_86;
        WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v43, (uint64_t)v15);
        v25 = v43;
        LODWORD(v44) = 21;
        v26 = *v18;
        if (*v18)
          *(_DWORD *)v26 += 2;
        v45 = v26;
        v46[0] = 0;
        v48 = 0;
        WebCore::RenderElement::getUncachedPseudoStyle(v25, (int *)&v44, v25 + 80, 0, &v40);
        std::unique_ptr<WebCore::RenderStyle>::operator=[abi:sn180100](&v42, &v40);
        std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v40, v27);
        v28 = v45;
        v45 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v15);
          else
            *(_DWORD *)v28 -= 2;
        }
        v24 = *(_DWORD *)(v6 + 24);
      }
      v29 = v24 - 2;
      if (v29)
      {
        *(_DWORD *)(v6 + 24) = v29;
      }
      else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v15);
      }
    }
    if (v42)
    {
LABEL_53:
      if (v17)
        goto LABEL_10;
      goto LABEL_34;
    }
    v4 = this[41];
LABEL_59:
    v35 = WebCore::Frame::ownerRenderer(v4);
    if (v35)
    {
      v36 = (_DWORD *)v35;
      ++*(_DWORD *)(v35 + 224);
      LODWORD(v44) = 21;
      v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *(_DWORD *)v37 += 2;
      v45 = v37;
      v46[0] = 0;
      v48 = 0;
      WebCore::RenderElement::getUncachedPseudoStyle(v35, (int *)&v44, v35 + 80, 0, &v40);
      std::unique_ptr<WebCore::RenderStyle>::operator=[abi:sn180100](&v42, &v40);
      std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v40, v38);
      v39 = v45;
      v45 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v15);
        else
          *(_DWORD *)v39 -= 2;
      }
      if (v36[56] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      else
        --v36[56];
    }
    goto LABEL_53;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195FFC790);
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 40) + 586))
  {
    v7 = *(_QWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x68);
    if (!*(_DWORD *)(v7 + 392) && (*(_BYTE *)(v7 + 390) & 4) == 0)
      goto LABEL_8;
    WebCore::StyleColor::StyleColor((WebCore::StyleColor *)&v44, (const WebCore::StyleColor *)(v7 + 384));
    WebCore::StyleColor::StyleColor((WebCore::StyleColor *)v46, (const WebCore::StyleColor *)(v7 + 400));
    v48 = 1;
    if (v47 != -1)
      ((void (*)(WebCore::RenderStyle **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v47])(&v40, v46);
    v47 = -1;
    if ((_DWORD)v45 != -1)
      ((void (*)(WebCore::RenderStyle **, WebCore::RenderElement **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v45])(&v40, &v44);
  }
LABEL_10:
  v8 = v42;
  if (v42 && v43)
  {
    v23 = (uint64_t)this[83];
    if (v23)
    {
      WebCore::RenderElement::setStyle(v23, v42, 0, v3);
    }
    else
    {
      v30 = *(WebCore::RenderStyle **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8) + 40) + 8);
      *((_DWORD *)v30 + 6) += 2;
      v40 = v30;
      WebCore::createRenderer<WebCore::RenderScrollbarPart,WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WebCore::RenderStyle>((uint64_t *)&v44, (uint64_t *)&v40, v8);
      v31 = (uint64_t)this[83];
      this[83] = v44;
      if (v31)
        WebCore::RenderObjectDeleter::operator()((uint64_t)(this + 83), v31);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v40);
      WebCore::RenderElement::initializeStyle(this[83], v32, v33, v34);
    }
    WebCore::ScrollableArea::invalidateScrollCorner((WebCore::ScrollableArea *)(this + 8), (const WebCore::IntRect *)v41);
  }
  else
  {
    v9 = this[83];
    this[83] = 0;
    if (v9)
      WebCore::RenderObjectDeleter::operator()((uint64_t)(this + 83), (uint64_t)v9);
  }
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v10 = v42;
  v42 = 0;
  if (v10)
  {
    WebCore::RenderStyle::~RenderStyle(v10, v9);
    if (*(_DWORD *)v11)
    {
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v11, v12);
    }
  }
  if (v43)
  {
    v13 = *(_DWORD *)(v43 + 16);
    if (v13)
    {
      *(_DWORD *)(v43 + 16) = v13 - 1;
      return;
    }
LABEL_86:
    __break(0xC471u);
    JUMPOUT(0x195FFC758);
  }
}

uint64_t WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (a2)
    ++*(_DWORD *)(a2 + 16);
  v2 = *(_QWORD *)result;
  *(_QWORD *)result = a2;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16);
    if (v3)
    {
      *(_DWORD *)(v2 + 16) = v3 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

double WebCore::createRenderer<WebCore::RenderScrollbarPart,WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WebCore::RenderStyle>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 31, *a2, a3, 76, 0);
  result = 0.0;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E342F9F8;
  *(_QWORD *)(v7 + 200) = 0;
  *(_DWORD *)(v7 + 208) = 0;
  *a1 = v7;
  return result;
}

void WebCore::LocalFrameView::paintScrollCorner(WebCore::RenderElement **this, WebCore::GraphicsContext *a2, int32x2_t *a3)
{
  WebCore::RenderScrollbarPart *v6;
  int8x8_t v7;
  float v8;
  float v9;
  int8x8_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int8x8_t v17;
  int32x4_t v18;

  if ((*(unsigned int (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 56))(a2))
  {
    WebCore::LocalFrameView::updateScrollCorner(this);
  }
  else
  {
    v6 = this[83];
    if (v6)
    {
      if (*(WebCore::RenderElement **)(*((_QWORD *)this[41] + 16) + 8) == this[41])
      {
        v8 = (float)a3->i32[1];
        *(float *)v18.i32 = (float)a3->i32[0];
        *(float *)&v18.i32[1] = v8;
        v9 = (float)a3[1].i32[1];
        *(float *)&v18.i32[2] = (float)a3[1].i32[0];
        *(float *)&v18.i32[3] = v9;
        v10 = (int8x8_t)this[128];
        v17 = v10;
        if ((*(_QWORD *)&v10 & 0x8000000000000) != 0)
        {
          v12 = (unsigned int *)(*(_QWORD *)&v10 & 0xFFFFFFFFFFFFLL);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
        }
        (*(void (**)(WebCore::GraphicsContext *, int32x4_t *, int8x8_t *))(*(_QWORD *)a2 + 224))(a2, &v18, &v17);
        if ((*(_QWORD *)&v17 & 0x8000000000000) != 0)
        {
          v14 = (unsigned int *)(*(_QWORD *)&v17 & 0xFFFFFFFFFFFFLL);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v11);
          }
        }
        v6 = this[83];
      }
      v7 = (int8x8_t)vcgt_s32(*a3, (int32x2_t)0xFE000000FE000000);
      v17 = vorr_s8((int8x8_t)(*(_QWORD *)&v7 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a3), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a3, 6uLL)), v7));
      WebCore::LayoutRect::LayoutRect((int8x8_t *)&v18, a3);
      WebCore::RenderScrollbarPart::paintIntoRect(v6, a2, (const WebCore::LayoutPoint *)&v17, &v18);
    }
    else
    {
      WebCore::ScrollView::paintScrollCorner((WebCore::ScrollView *)this, a2, (const WebCore::IntRect *)a3);
    }
  }
}

uint64_t WebCore::LocalFrameView::paintScrollbar(WebCore::LocalFrameView *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3, const WebCore::IntRect *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  void *v22;
  unsigned int *v24;
  unsigned int v25;
  WebCore::LocalFrameView *v26;
  double v27;
  CGFloat v28;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  float MaxX;
  unsigned int v33;
  float MaxY;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  float v40[4];
  CGRect v41;
  CGRect v42;

  if (*((_BYTE *)a3 + 137) && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41))
  {
    v9 = (void *)*((_QWORD *)a3 + 5);
    if (v9)
    {
      v26 = this;
      v38 = (void *)*((_QWORD *)a3 + 5);
      if (objc_msgSend(v9, "conformsToProtocol:", &unk_1EE342188))
        v38 = (void *)objc_msgSend(v38, "superview");
      objc_msgSend(v38, "frame", v38);
      v28 = v27;
      y = v41.origin.y;
      width = v41.size.width;
      height = v41.size.height;
      *(float *)&v27 = v27;
      LODWORD(v4) = vcvtms_s32_f32(*(float *)&v27);
      *(float *)&v27 = v41.origin.y;
      LODWORD(v5) = vcvtms_s32_f32(*(float *)&v27);
      v41.origin.x = v28;
      MaxX = CGRectGetMaxX(v41);
      v33 = vcvtps_s32_f32(MaxX);
      v42.origin.x = v28;
      v42.origin.y = y;
      v42.size.width = width;
      v42.size.height = height;
      MaxY = CGRectGetMaxY(v42);
      v10 = v4 | (v5 << 32);
      v11 = (v33 - v4) | ((unint64_t)(vcvtps_s32_f32(MaxY) - v5) << 32);
      this = v26;
    }
    else
    {
      v10 = *((_QWORD *)a3 + 6);
      v11 = *((_QWORD *)a3 + 7);
    }
    v12 = *((_DWORD *)a4 + 1);
    if ((int)v10 <= *(_DWORD *)a4)
      v13 = *(_DWORD *)a4;
    else
      v13 = v10;
    v14 = HIDWORD(v10);
    v15 = *((_DWORD *)a4 + 3);
    if (SHIDWORD(v10) <= v12)
      v16 = *((_DWORD *)a4 + 1);
    else
      v16 = HIDWORD(v10);
    v17 = v11 + v10;
    if (*((_DWORD *)a4 + 2) + *(_DWORD *)a4 < v17)
      v17 = *((_DWORD *)a4 + 2) + *(_DWORD *)a4;
    LODWORD(v11) = HIDWORD(v11) + v14;
    if (v15 + v12 < HIDWORD(v11) + (int)v14)
      LODWORD(v11) = v15 + v12;
    v18 = v13 < v17 && v16 < (int)v11;
    if (v18)
      v19 = v13;
    else
      v19 = 0;
    if (v18)
      v20 = v16;
    else
      v20 = 0;
    if (!v18)
    {
      v17 = 0;
      LODWORD(v11) = 0;
    }
    v40[0] = (float)v19;
    v40[1] = (float)v20;
    v40[2] = (float)(v17 - v19);
    v40[3] = (float)((int)v11 - v20);
    v21 = *((_QWORD *)this + 128);
    v39 = v21;
    if ((v21 & 0x8000000000000) != 0)
    {
      v24 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    (*(void (**)(WebCore::GraphicsContext *, float *, uint64_t *))(*(_QWORD *)a2 + 224))(a2, v40, &v39);
    if ((v39 & 0x8000000000000) != 0)
    {
      v35 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, v22);
      }
    }
  }
  return (*(uint64_t (**)(WebCore::Scrollbar *, WebCore::GraphicsContext *, const WebCore::IntRect *, _QWORD, _QWORD))(*(_QWORD *)a3 + 24))(a3, a2, a4, 0, 0);
}

uint64_t WebCore::LocalFrameView::hasCustomScrollbars(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char hasCustomScrollbars;
  int v9;
  uint64_t *v10;

  v1 = *((_QWORD *)this + 18);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = (uint64_t *)(v1 + 8 * v2);
    if (*(_DWORD *)(v1 - 12))
    {
      v4 = (uint64_t *)*((_QWORD *)this + 18);
      if ((_DWORD)v2)
      {
        v5 = 8 * v2;
        v4 = (uint64_t *)*((_QWORD *)this + 18);
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          ++v4;
          v5 -= 8;
          if (!v5)
          {
            v4 = v3;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v4 = (uint64_t *)(v1 + 8 * v2);
  }
  else
  {
    v4 = 0;
    v2 = 0;
  }
  v3 = (uint64_t *)(v1 + 8 * v2);
  if (v1)
  {
LABEL_8:
    v6 = (uint64_t *)(v1 + 8 * *(unsigned int *)(v1 - 4));
    goto LABEL_12;
  }
  v6 = 0;
LABEL_12:
  if (v6 == v4)
    return 0;
  while (1)
  {
    v7 = *v4;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(*v4 + 8) + 1;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7) & 1) != 0)
    {
      hasCustomScrollbars = WebCore::LocalFrameView::hasCustomScrollbars((WebCore::LocalFrameView *)v7);
      v9 = *(_DWORD *)(v7 + 8) - 1;
      if ((hasCustomScrollbars & 1) != 0)
        goto LABEL_33;
LABEL_20:
      if (!v9)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (*(_DWORD *)(v7 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    else
      --*(_DWORD *)(v7 + 8);
    v7 = *v4;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(*v4 + 8) + 1;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) & 1) != 0)
      break;
    v9 = *(_DWORD *)(v7 + 8) - 1;
    if (*(_DWORD *)(v7 + 8) == 1)
    {
LABEL_30:
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      goto LABEL_22;
    }
LABEL_21:
    *(_DWORD *)(v7 + 8) = v9;
LABEL_22:
    v10 = v4 + 1;
    v4 = v3;
    if (v10 != v3)
    {
      v4 = v10;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        if (++v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
    if (v4 == v6)
      return 0;
  }
  v9 = *(_DWORD *)(v7 + 8) - 1;
  if (!*(_BYTE *)(v7 + 137))
    goto LABEL_20;
LABEL_33:
  if (v9)
    *(_DWORD *)(v7 + 8) = v9;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return 1;
}

void WebCore::LocalFrameView::invalidateControlTints(int32x4_t *this)
{
  WebCore::LocalFrameView::traverseForPaintInvalidation(this, 1);
}

void WebCore::LocalFrameView::traverseForPaintInvalidation(int32x4_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  int32x4_t v9;
  void (**v10)(WebCore::NullGraphicsContext *__hidden);
  _BYTE v11[344];
  WTF *v12;
  uint64_t v13;
  _DWORD v14[87];
  char v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[21].i64[1] + 8) + 328) + 296);
  if (v4)
    v4 = *(_QWORD *)(v4 + 1944);
  if ((a1[24].i64[0] & 0xFFFFFFFFFFFFLL) != 0 && *(double *)((a1[24].i64[0] & 0xFFFFFFFFFFFFLL) + 8) != 0.0
    || v4 && (*(_BYTE *)(v4 + 20) & 0xF8) != 0
    || (v5 = a1[29].i64[0]) != 0 && *(_QWORD *)(v5 + 8)
    || a1[30].i32[2] && a1[29].i8[14])
  {
    WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)&a1[21]);
  }
  v9.i32[0] = 0;
  v10 = (void (**)(WebCore::NullGraphicsContext *__hidden))off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v11, &v9, 0);
  v13 = 1;
  v14[86] = 0;
  v15 &= 0xFCu;
  v12 = (WTF *)v14;
  v10 = off_1E33FFA58;
  v16 = a2;
  if (a1[2].i64[1])
  {
    v9.i64[0] = (*(uint64_t (**)(int32x4_t *, _QWORD, uint64_t))(a1[4].i64[0] + 832))(a1 + 4, 0, 1);
    v9.i64[1] = v6;
    WebCore::LocalFrameView::paintContents((uint64_t)a1, (WTF *)&v10, &v9, 0, 0);
  }
  else
  {
    v9 = a1[3];
    WebCore::ScrollView::paint((uint64_t)a1, (WebCore::GraphicsContext *)&v10, v9.i32, 0, 0);
  }
  v10 = (void (**)(WebCore::NullGraphicsContext *__hidden))off_1E340BA10;
  if (HIDWORD(v13))
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct((unsigned int *)v12, (unsigned int *)v12 + 86 * HIDWORD(v13));
  v8 = v12;
  if (v14 != (_DWORD *)v12 && v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v8, v7);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v11, v7);
}

void WebCore::LocalFrameView::invalidateImagesWithAsyncDecodes(int32x4_t *this)
{
  WebCore::LocalFrameView::traverseForPaintInvalidation(this, 2);
}

void WebCore::NullGraphicsContext::~NullGraphicsContext(WebCore::NullGraphicsContext *this, void *a2)
{
  unsigned int v3;
  WTF *v4;

  *(_QWORD *)this = off_1E340BA10;
  v3 = *((_DWORD *)this + 91);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::NullGraphicsContext *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::NullGraphicsContext *)((char *)this + 8), a2);
}

{
  unsigned int v3;
  WTF *v4;
  void *v6;

  *(_QWORD *)this = off_1E340BA10;
  v3 = *((_DWORD *)this + 91);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::NullGraphicsContext *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::NullGraphicsContext *)((char *)this + 8), a2);
  WTF::fastFree(this, v6);
}

uint64_t WebCore::LocalFrameView::paintBehavior(WebCore::LocalFrameView *this)
{
  return *((unsigned int *)this + 287);
}

uint64_t WebCore::LocalFrameView::notifyWidgetsInAllFrames(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  _DWORD *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v2 = *(_QWORD *)(result + 328);
  if (v2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 328);
    while (1)
    {
LABEL_3:
      v6 = (_QWORD *)v5;
      if (!*(_BYTE *)(v5 + 144))
      {
        v7 = *(_QWORD *)(v5 + 288);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 552);
          if (v8)
          {
            v13 = *(unsigned int *)(v8 - 12);
            if ((_DWORD)v13)
            {
              if (v13 >> 29)
              {
                __break(0xC471u);
                return result;
              }
              v26 = WTF::fastMalloc((WTF *)(8 * v13));
              v27 = (WTF *)v26;
              v28 = *(_QWORD *)(v7 + 552);
              if (v28 && *(_DWORD *)(v28 - 12))
              {
                v29 = *(unsigned int *)(v28 - 4);
                if ((_DWORD)v29)
                {
                  v12 = 8 * v29;
                  v11 = *(uint64_t **)(v7 + 552);
                  while ((unint64_t)(*v11 + 1) <= 1)
                  {
                    ++v11;
                    v12 -= 8;
                    if (!v12)
                      goto LABEL_40;
                  }
                }
                else
                {
                  v11 = *(uint64_t **)(v7 + 552);
                }
                v30 = (uint64_t *)(v28 + 8 * v29);
                if (v11 != v30)
                {
                  v16 = 0;
                  v17 = *v11;
                  v18 = 1;
LABEL_19:
                  v14 = v18;
                  v15 = *(_QWORD *)(v17 + 8);
                  ++*(_DWORD *)(v15 + 8);
                  *(_QWORD *)(v26 + 8 * v16++) = v15;
                  while (++v11 != v30)
                  {
                    v17 = *v11;
                    if ((unint64_t)(*v11 + 1) > 1)
                    {
                      ++v18;
                      if (v11 != v30)
                        goto LABEL_19;
                      break;
                    }
                  }
                  if (v16)
                  {
                    v19 = 8 * v14;
                    v20 = (uint64_t *)v26;
                    do
                    {
                      v21 = *v20++;
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 128))(v21, a2);
                      v19 -= 8;
                    }
                    while (v19);
                    v23 = 8 * v14;
                    v24 = v27;
                    do
                    {
                      v25 = *(_DWORD **)v24;
                      *(_QWORD *)v24 = 0;
                      if (v25)
                      {
                        if (v25[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
                        else
                          --v25[2];
                      }
                      v24 = (WTF *)((char *)v24 + 8);
                      v23 -= 8;
                    }
                    while (v23);
                  }
                }
              }
LABEL_40:
              result = WTF::fastFree(v27, v22);
              v2 = *(_QWORD *)(v4 + 328);
            }
          }
        }
      }
      v5 = v6[11];
      if (!v5)
      {
        v9 = *(_QWORD *)(v6[6] + 8);
        if (v9 == v2)
          return result;
        v5 = v6[9];
        if (!v5)
          break;
      }
    }
    if (v2)
    {
      while (1)
      {
        v31 = *(_QWORD *)(v9 + 56);
        if (!v31)
          break;
        v9 = *(_QWORD *)(v31 + 8);
        if (v9 == v2 || v9 == 0)
          break;
        v5 = *(_QWORD *)(v9 + 72);
        if (v5)
          goto LABEL_3;
      }
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)(v9 + 56);
        if (!v10)
          break;
        v9 = *(_QWORD *)(v10 + 8);
        if (!v9)
          break;
        v5 = *(_QWORD *)(v9 + 72);
        if (v5)
          goto LABEL_3;
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::setPaintBehavior(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1148) = a2;
  return result;
}

uint64_t *WebCore::LocalFrameView::setNodeToDraw(WebCore::LocalFrameView *this, WebCore::Node *a2)
{
  return WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 75, (uint64_t)a2);
}

void WebCore::LocalFrameView::paintContentsForSnapshot(uint64_t a1, WebCore::GraphicsContext *a2, int32x4_t *a3, int a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive((_DWORD *)a1, 0);
  v10 = *(_DWORD *)(a1 + 1148);
  *(_DWORD *)(a1 + 1148) = v10 | 0x10200;
  if (a4 == 1)
  {
    v11 = *(_QWORD *)(a1 + 328);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 328);
      do
      {
        if (!*(_BYTE *)(v12 + 144))
        {
          v13 = *(_QWORD *)(v12 + 296);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 1944);
            if (v14)
            {
              WebCore::RenderSelection::clear((WebCore::RenderSelection *)(v14 + 288));
              v11 = *(_QWORD *)(a1 + 328);
            }
          }
        }
        v12 = WebCore::FrameTree::traverseNext((_QWORD *)(v12 + 48), v11);
      }
      while (v12);
    }
  }
  if (a5)
    WebCore::ScrollView::paint(a1, a2, a3->i32, 0, 0);
  else
    WebCore::LocalFrameView::paintContents(a1, a2, a3, 0, 0);
  if (a4 == 1)
  {
    v15 = *(_QWORD *)(a1 + 328);
    if (v15)
    {
      v16 = *(_QWORD *)(a1 + 328);
      do
      {
        if (!*(_BYTE *)(v16 + 144))
        {
          WebCore::FrameSelection::updateAppearance(*(WebCore::FrameSelection **)(*(_QWORD *)(v16 + 296) + 3064));
          v15 = *(_QWORD *)(a1 + 328);
        }
        v16 = WebCore::FrameTree::traverseNext((_QWORD *)(v16 + 48), v15);
      }
      while (v16);
    }
  }
  *(_DWORD *)(a1 + 1148) = v10;
}

uint64_t WebCore::LocalFrameView::paintOverhangAreas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t *v11;
  char *v12;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) == 0 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 296) + 3382))
  {
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v11 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + 128))(v11, a1, a2, a3, a4, a5);
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_12;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v11 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + 128))(v11, a1, a2, a3, a4, a5);
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_12:
    *v12 = 1;
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + 128))(v11, a1, a2, a3, a4, a5);
  }
  return result;
}

BOOL WebCore::LocalFrameView::hasContentfulDescendants(WebCore::LocalFrameView *this)
{
  return *((_DWORD *)this + 289) || *((_DWORD *)this + 290) != 0;
}

uint64_t WebCore::LocalFrameView::enableFixedWidthAutoSizeMode(WebCore::LocalFrameView *this, int a2, const WebCore::IntSize *a3)
{
  return WebCore::LocalFrameView::enableAutoSizeMode((uint64_t)this, a2, (uint64_t)a3, 0);
}

uint64_t WebCore::LocalFrameView::enableAutoSizeMode(uint64_t result, int a2, uint64_t a3, char a4)
{
  uint64_t v4;
  BOOL v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v4 = result;
  if (*(unsigned __int8 *)(result + 1386) != a2
    || (*(_DWORD *)(result + 1268) == *(_DWORD *)a3
      ? (v5 = *(_DWORD *)(result + 1272) == *(_DWORD *)(a3 + 4))
      : (v5 = 0),
        !v5))
  {
    *(_BYTE *)(result + 1385) = a4;
    *(_BYTE *)(result + 1386) = a2;
    *(_QWORD *)(result + 1268) = *(_QWORD *)a3;
    *(_QWORD *)(result + 1280) = *(_QWORD *)(result + 256);
    *(_BYTE *)(result + 1388) = 0;
    WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameViewLayoutContext *)(result + 336));
    WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v4 + 336));
    if (*(_BYTE *)(v4 + 1386))
    {
      if (*(_BYTE *)(v4 + 1224))
        v7 = ((unint64_t)*(unsigned __int16 *)(v4 + 1217) << 8) | ((unint64_t)*(unsigned __int8 *)(v4 + 1219) << 24) | *(unsigned __int8 *)(v4 + 1216) | ((unint64_t)*(unsigned __int8 *)(v4 + 1220) << 32);
      else
        v7 = 0;
      WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits(v4, (void *)(COERCE_UNSIGNED_INT((float)*(int *)(v4 + 1268)) | 0x100000000), v7);
      if (*(_BYTE *)(v4 + 1244))
        v11 = ((unint64_t)*(unsigned __int16 *)(v4 + 1237) << 8) | ((unint64_t)*(unsigned __int8 *)(v4 + 1239) << 24) | *(unsigned __int8 *)(v4 + 1236) | ((unint64_t)*(unsigned __int8 *)(v4 + 1240) << 32);
      else
        v11 = 0;
      WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits(v4, (void *)(COERCE_UNSIGNED_INT((float)*(int *)(v4 + 1268)) | 0x100000000), v11);
      if (*(_BYTE *)(v4 + 1264))
        v12 = ((unint64_t)*(unsigned __int16 *)(v4 + 1257) << 8) | ((unint64_t)*(unsigned __int8 *)(v4 + 1259) << 24) | *(unsigned __int8 *)(v4 + 1256) | ((unint64_t)*(unsigned __int8 *)(v4 + 1260) << 32);
      else
        v12 = 0;
      return WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits(v4, (void *)(COERCE_UNSIGNED_INT((float)*(int *)(v4 + 1268)) | 0x100000000), v12);
    }
    else
    {
      if (*(_BYTE *)(v4 + 1224))
      {
        *(_BYTE *)(v4 + 1224) = 0;
        v8 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 296);
        if (v8)
          WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)(v8 + 1328), v6);
      }
      if (*(_BYTE *)(v4 + 1244))
      {
        *(_BYTE *)(v4 + 1244) = 0;
        v9 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 296);
        if (v9)
          WebCore::Style::Scope::didChangeViewportSize(*(_QWORD *)(v9 + 1328), v6);
      }
      if (*(_BYTE *)(v4 + 1264))
      {
        *(_BYTE *)(v4 + 1264) = 0;
        v10 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 296);
        if (v10)
          WebCore::Style::Scope::didChangeViewportSize(*(_QWORD *)(v10 + 1328), v6);
      }
      *(_WORD *)(v4 + 313) = 0;
      return WebCore::ScrollView::setScrollbarModes(v4, 0, 0, 0, 0);
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::enableSizeToContentAutoSizeMode(WebCore::LocalFrameView *this, int a2, const WebCore::IntSize *a3)
{
  return WebCore::LocalFrameView::enableAutoSizeMode((uint64_t)this, a2, (uint64_t)a3, 1);
}

void WebCore::LocalFrameView::adjustPageHeightDeprecated(WebCore::LocalFrameView *this, float *a2, float a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  signed int v16;
  int v17;
  signed int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  void *v24;
  int v25;
  float v26;
  WTF *v27;
  uint64_t v28;
  _DWORD v29[4];
  void (**v30)(WebCore::NullGraphicsContext *__hidden);
  _BYTE v31[344];
  WTF *v32;
  uint64_t v33;
  _DWORD v34[87];
  char v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v8 && (v9 = *(_QWORD *)(v8 + 1944)) != 0)
  {
    v11 = (_QWORD *)(v9 + 356);
    v29[0] = 0;
    v30 = (void (**)(WebCore::NullGraphicsContext *__hidden))off_1E340BA10;
    WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v31, v29, 0);
    v33 = 1;
    v34[86] = 0;
    v35 &= 0xFCu;
    v32 = (WTF *)v34;
    v30 = off_1E33FFA58;
    v36 = 0;
    *(_DWORD *)(v9 + 348) = vcvtms_s32_f32(a4);
    *(_DWORD *)(v9 + 344) = 0;
    *(_DWORD *)(v9 + 352) = 0;
    *(_BYTE *)(v9 + 372) = 0;
    LODWORD(v5) = vcvtms_s32_f32(a3);
    v13 = *(_QWORD *)(v9 + 192);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 4);
      v15 = *(_QWORD *)(v13 + 12);
    }
    else
    {
      LODWORD(v14) = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v9);
    }
    v16 = v14 + v15;
    if (__OFADD__((_DWORD)v14, (_DWORD)v15))
      v16 = (v14 >> 31) + 0x7FFFFFFF;
    v18 = v16;
    v17 = v16 + (v16 < 0 ? 0x3F : 0);
    LODWORD(v12) = vcvtps_s32_f32(a4 - a3);
    *v11 = v5 << 32;
    *(_QWORD *)(v9 + 364) = (v18 / 64) | (unint64_t)(v12 << 32);
    v19 = *(_QWORD *)(v9 + 144);
    v20 = (_DWORD)v5 << 6;
    if ((int)v5 < -33554432)
      v20 = 0x80000000;
    if ((int)v5 > 0x1FFFFFF)
      v20 = 0x7FFFFFFF;
    v29[0] = 0;
    v29[1] = v20;
    v21 = v17 & 0xFFFFFFC0;
    v22 = (_DWORD)v12 << 6;
    if ((int)v12 < -33554432)
      v22 = 0x80000000;
    if ((int)v12 <= 0x1FFFFFF)
      v23 = v22;
    else
      v23 = 0x7FFFFFFF;
    v29[2] = v21;
    v29[3] = v23;
    v28 = 0;
    WebCore::RenderLayer::paint(v19, (WTF *)&v30, (uint64_t)v29, &v28, 0, 0, 0, 0, 0);
    v25 = *(_DWORD *)(v9 + 344);
    v26 = (float)v25;
    if (!v25)
      v26 = a4;
    *a2 = v26;
    *v11 = 0;
    *(_QWORD *)(v9 + 364) = 0;
    v30 = (void (**)(WebCore::NullGraphicsContext *__hidden))off_1E340BA10;
    if (HIDWORD(v33))
      WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct((unsigned int *)v32, (unsigned int *)v32 + 86 * HIDWORD(v33));
    v27 = v32;
    if (v34 != (_DWORD *)v32)
    {
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v27, v24);
      }
    }
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v31, v24);
  }
  else
  {
    *a2 = a4;
  }
}

float WebCore::LocalFrameView::documentToAbsoluteScaleFactor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int v8;
  float v9;
  WTF *v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 328);
  v4 = *(float *)(v3 + 592);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = 1.0;
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
    {
      v8 = (*(_DWORD *)v7)++;
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3 && !*(_BYTE *)(v7 + 1098))
        v6 = *(float *)(v7 + 356);
      if (v8)
      {
        *(_DWORD *)v7 = v8;
      }
      else
      {
        WebCore::Page::~Page(v7);
        WTF::fastFree(v11, v12);
      }
    }
  }
  v9 = *(float *)&a2;
  if ((a2 & 0xFF00000000) == 0)
    v9 = v4;
  return v9 * v6;
}

float WebCore::LocalFrameView::absoluteToDocumentRect(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  float v11;
  WTF *v13;
  void *v14;

  v5 = *(_QWORD *)(a1 + 328);
  v6 = *(float *)(v5 + 592);
  v7 = *(_QWORD *)(v5 + 24);
  v8 = 1.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v10 = (*(_DWORD *)v9)++;
      if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5 && !*(_BYTE *)(v9 + 1098))
        v8 = *(float *)(v9 + 356);
      if (v10)
      {
        *(_DWORD *)v9 = v10;
      }
      else
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v13, v14);
      }
    }
  }
  v11 = *(float *)&a2;
  if ((a2 & 0xFF00000000) == 0)
    v11 = v6;
  return a3 * (float)(1.0 / (float)(v11 * v8));
}

float WebCore::LocalFrameView::absoluteToDocumentPoint(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  float v11;
  WTF *v13;
  void *v14;

  v5 = *(_QWORD *)(a1 + 328);
  v6 = *(float *)(v5 + 592);
  v7 = *(_QWORD *)(v5 + 24);
  v8 = 1.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v10 = (*(_DWORD *)v9)++;
      if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5 && !*(_BYTE *)(v9 + 1098))
        v8 = *(float *)(v9 + 356);
      if (v10)
      {
        *(_DWORD *)v9 = v10;
      }
      else
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v13, v14);
      }
    }
  }
  v11 = *(float *)&a2;
  if ((a2 & 0xFF00000000) == 0)
    v11 = v6;
  return a3 * (float)(1.0 / (float)(v11 * v8));
}

float WebCore::LocalFrameView::documentToClientOffset(WebCore::LocalFrameView *this)
{
  char *v1;
  int v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int v8;
  WTF *v10;
  void *v11;

  v1 = (char *)this + 64;
  v2 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 0);
  v3 = *((_QWORD *)v1 + 33);
  v4 = *(float *)(v3 + 592);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = 1.0;
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
    {
      v8 = (*(_DWORD *)v7)++;
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3 && !*(_BYTE *)(v7 + 1098))
        v6 = *(float *)(v7 + 356);
      if (v8)
      {
        *(_DWORD *)v7 = v8;
      }
      else
      {
        WebCore::Page::~Page((WebCore::Page *)v7);
        WTF::fastFree(v10, v11);
      }
    }
  }
  return -(float)((float)v2 * (float)(1.0 / (float)(v4 * v6)));
}

float WebCore::LocalFrameView::clientToDocumentRect(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  WTF *v12;
  void *v13;

  v3 = a1 + 64;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 0);
  v5 = *(_QWORD *)(v3 + 264);
  v6 = *(float *)(v5 + 592);
  v7 = *(_QWORD *)(v5 + 24);
  v8 = 1.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v10 = (*(_DWORD *)v9)++;
      if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5 && !*(_BYTE *)(v9 + 1098))
        v8 = *(float *)(v9 + 356);
      if (v10)
      {
        *(_DWORD *)v9 = v10;
      }
      else
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v12, v13);
      }
    }
  }
  return a2 + (float)((float)(1.0 / (float)(v6 * v8)) * (float)v4);
}

float WebCore::LocalFrameView::clientToDocumentPoint(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  WTF *v12;
  void *v13;

  v3 = a1 + 64;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 0);
  v5 = *(_QWORD *)(v3 + 264);
  v6 = *(float *)(v5 + 592);
  v7 = *(_QWORD *)(v5 + 24);
  v8 = 1.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v10 = (*(_DWORD *)v9)++;
      if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5 && !*(_BYTE *)(v9 + 1098))
        v8 = *(float *)(v9 + 356);
      if (v10)
      {
        *(_DWORD *)v9 = v10;
      }
      else
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v12, v13);
      }
    }
  }
  return a2 + (float)((float)(1.0 / (float)(v6 * v8)) * (float)v4);
}

float WebCore::LocalFrameView::absoluteToLayoutViewportPoint(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  float v12;
  WTF *v14;
  void *v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  float v20;
  _DWORD *v21;
  CGRect v22;
  CGRect v23;

  v4 = *(_QWORD *)(a1 + 328);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = 1.0;
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
    {
      v8 = (*(_DWORD *)v7)++;
      if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4 && !*(_BYTE *)(v7 + 1098))
        v6 = *(float *)(v7 + 356);
      if (v8)
      {
        *(_DWORD *)v7 = v8;
      }
      else
      {
        WebCore::Page::~Page(v7);
        WTF::fastFree(v14, v15);
      }
    }
  }
  if (*(_BYTE *)(a1 + 1104))
  {
    v9 = (_DWORD *)(a1 + 1088);
  }
  else
  {
    v9 = (_DWORD *)(a1 + 1080);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
    if (!v10 || !*(_QWORD *)(v10 + 1944))
    {
      v11 = *(void **)(a1 + 40);
      if (v11)
      {
        v21 = v9;
        v20 = v6;
        if (objc_msgSend(v11, "conformsToProtocol:", &unk_1EE342188))
          v11 = (void *)objc_msgSend(v11, "superview");
        objc_msgSend(v11, "frame");
        x = v22.origin.x;
        y = v22.origin.y;
        width = v22.size.width;
        height = v22.size.height;
        CGRectGetMaxX(v22);
        v23.origin.x = x;
        v23.origin.y = y;
        v23.size.width = width;
        v23.size.height = height;
        CGRectGetMaxY(v23);
        v6 = v20;
        v9 = v21;
      }
    }
  }
  v12 = (float)-*v9 * 0.015625;
  if (*v9 == 0x80000000)
    v12 = 33554000.0;
  return (float)(a2 * (float)(1.0 / v6)) + v12;
}

float WebCore::LocalFrameView::layoutViewportToAbsolutePoint(uint64_t a1, float a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  int v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  CGFloat v16;
  double v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  void *v24;
  CGRect v25;

  if (*(_BYTE *)(a1 + 1104))
  {
    v3 = (uint64_t *)(a1 + 1088);
  }
  else
  {
    v3 = (uint64_t *)(a1 + 1080);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
    if (!v4 || !*(_QWORD *)(v4 + 1944))
    {
      v5 = *(void **)(a1 + 40);
      if (v5)
      {
        v15 = a1;
        v24 = *(void **)(a1 + 40);
        if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE342188))
          objc_msgSend((id)objc_msgSend(v24, "superview"), "frame");
        else
          objc_msgSend(v24, "frame");
        v20 = v16;
        v21 = v17;
        v22 = v18;
        v23 = v19;
        CGRectGetMaxX(*(CGRect *)&v16);
        v25.origin.x = v20;
        v25.origin.y = v21;
        v25.size.width = v22;
        v25.size.height = v23;
        CGRectGetMaxY(v25);
        a1 = v15;
      }
    }
  }
  v6 = *v3;
  v7 = *(_QWORD *)(a1 + 328);
  v8 = *(_QWORD *)(v7 + 24);
  v9 = 1.0;
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
    {
      v11 = (*(_DWORD *)v10)++;
      if (*(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7 && !*(_BYTE *)(v10 + 1098))
        v9 = *(float *)(v10 + 356);
      if (v11)
      {
        *(_DWORD *)v10 = v11;
      }
      else
      {
        WebCore::Page::~Page(v10);
        WTF::fastFree(v13, v14);
      }
    }
  }
  return (float)(a2 + (float)((float)(int)v6 * 0.015625)) * v9;
}

float WebCore::LocalFrameView::clientToLayoutViewportRect(uint64_t a1, float a2)
{
  return a2 * *(float *)(*(_QWORD *)(a1 + 328) + 592);
}

float WebCore::LocalFrameView::clientToLayoutViewportPoint(uint64_t a1, float a2)
{
  return a2 * *(float *)(*(_QWORD *)(a1 + 328) + 592);
}

uint64_t WebCore::LocalFrameView::setTracksRepaints(uint64_t this, void *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::RenderView *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::RenderLayerCompositor *v11;
  WebCore::RenderLayerCompositor *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WebCore::RenderView *v16;
  uint64_t v17;
  _QWORD *v18;
  WebCore::RenderLayerCompositor *v19;
  WebCore::RenderLayerCompositor *v20;
  WTF *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;

  if (*(unsigned __int8 *)(this + 1371) != (_DWORD)a2)
  {
    v2 = (char)a2;
    v3 = this;
    if ((_DWORD)a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(this + 328) + 296);
      if (v4)
      {
        *(_DWORD *)(v4 + 24) += 2;
        this = WebCore::Document::updateLayout(v4, 8u, 0);
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 328) + 48) + 8) + 128) + 8);
    while (1)
    {
      do
      {
LABEL_7:
        v6 = (_QWORD *)v5;
        if (!*(_BYTE *)(v5 + 144))
        {
          v7 = *(_QWORD *)(v5 + 296);
          if (v7)
          {
            v8 = *(WebCore::RenderView **)(v7 + 1944);
            if (v8)
            {
              this = *((_QWORD *)v8 + 50);
              if (!this)
              {
                v23 = (_QWORD *)v5;
                v11 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                this = (uint64_t)WebCore::RenderLayerCompositor::RenderLayerCompositor(v11, v8);
                v12 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
                *((_QWORD *)v8 + 50) = this;
                if (v12)
                {
                  WebCore::RenderLayerCompositor::~RenderLayerCompositor(v12);
                  WTF::fastFree(v13, v14);
                  this = *((_QWORD *)v8 + 50);
                }
                v6 = v23;
              }
              *(_BYTE *)(this + 199) = v2;
            }
          }
        }
        v5 = v6[11];
      }
      while (v5);
      v9 = *(_QWORD *)(v6[6] + 8);
      if (!v9)
        break;
      v5 = v6[9];
      if (!v5)
      {
        while (1)
        {
          v10 = *(_QWORD *)(v9 + 56);
          if (!v10)
            goto LABEL_22;
          v9 = *(_QWORD *)(v10 + 8);
          if (!v9)
            goto LABEL_22;
          v5 = *(_QWORD *)(v9 + 72);
          if (v5)
            goto LABEL_7;
        }
      }
    }
LABEL_22:
    if (*(_DWORD *)(v3 + 1064))
    {
      if (*(_DWORD *)(v3 + 1068))
        *(_DWORD *)(v3 + 1068) = 0;
      this = *(_QWORD *)(v3 + 1056);
      if (this)
      {
        *(_QWORD *)(v3 + 1056) = 0;
        *(_DWORD *)(v3 + 1064) = 0;
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 328) + 296);
    if (v15)
    {
      v16 = *(WebCore::RenderView **)(v15 + 1944);
      if (v16)
      {
        this = *((_QWORD *)v16 + 50);
        if (!this)
        {
          v19 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          this = (uint64_t)WebCore::RenderLayerCompositor::RenderLayerCompositor(v19, v16);
          v20 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v16 + 50);
          *((_QWORD *)v16 + 50) = this;
          if (v20)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v20);
            WTF::fastFree(v21, v22);
            this = *((_QWORD *)v16 + 50);
          }
        }
        v17 = *(_QWORD *)(this + 256);
        if (v17 || (v17 = *(_QWORD *)(this + 224)) != 0)
        {
          v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v18 = off_1E3429270;
          v24 = (uint64_t)v18;
          WebCore::GraphicsLayer::traverse(v17, &v24);
          this = v24;
          v24 = 0;
          if (this)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        }
      }
    }
    *(_BYTE *)(v3 + 1371) = v2;
  }
  return this;
}

uint64_t WebCore::LocalFrameView::resetTrackedRepaints(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderView *v4;
  uint64_t v5;
  _QWORD *v6;
  WebCore::RenderLayerCompositor *v7;
  WebCore::RenderLayerCompositor *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v2 = this;
  if (*(_DWORD *)(this + 1064))
  {
    if (*(_DWORD *)(this + 1068))
      *(_DWORD *)(this + 1068) = 0;
    this = *(_QWORD *)(this + 1056);
    if (this)
    {
      *(_QWORD *)(v2 + 1056) = 0;
      *(_DWORD *)(v2 + 1064) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 328) + 296);
  if (v3)
  {
    v4 = *(WebCore::RenderView **)(v3 + 1944);
    if (v4)
    {
      this = *((_QWORD *)v4 + 50);
      if (!this)
      {
        v7 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        this = (uint64_t)WebCore::RenderLayerCompositor::RenderLayerCompositor(v7, v4);
        v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
        *((_QWORD *)v4 + 50) = this;
        if (v8)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v8);
          WTF::fastFree(v9, v10);
          this = *((_QWORD *)v4 + 50);
        }
      }
      v5 = *(_QWORD *)(this + 256);
      if (v5 || (v5 = *(_QWORD *)(this + 224)) != 0)
      {
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = off_1E3429270;
        v11 = (uint64_t)v6;
        WebCore::GraphicsLayer::traverse(v5, &v11);
        this = v11;
        v11 = 0;
        if (this)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

unsigned int *WebCore::LocalFrameView::addScrollableAreaForAnimatedScroll(WebCore::LocalFrameView *this, WebCore::ScrollableArea *a2)
{
  _QWORD *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t i;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v4 = (_QWORD *)*((_QWORD *)this + 162);
  if (!v4)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = 0;
    v4[1] = 0;
    v6 = (WTF *)*((_QWORD *)this + 162);
    *((_QWORD *)this + 162) = v4;
    if (v6)
    {
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
      {
        v9 = *(unsigned int *)(v7 - 4);
        if ((_DWORD)v9)
        {
          for (i = 0; i != v9; ++i)
          {
            v11 = *(unsigned int **)(v7 + 8 * i);
            if (v11 != (unsigned int *)-1)
            {
              *(_QWORD *)(v7 + 8 * i) = 0;
              if (v11)
              {
                do
                {
                  v12 = __ldaxr(v11);
                  v13 = v12 - 1;
                }
                while (__stlxr(v13, v11));
                if (!v13)
                {
                  atomic_store(1u, v11);
                  v15 = i;
                  v16 = v7;
                  v14 = v9;
                  WTF::fastFree((WTF *)v11, v5);
                  v9 = v14;
                  i = v15;
                  v7 = v16;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v7 - 16), v5);
      }
      WTF::fastFree(v6, v5);
      v4 = (_QWORD *)*((_QWORD *)this + 162);
    }
  }
  return WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScrollableArea>((uint64_t)v4, a2, (uint64_t)v17);
}

uint64_t WebCore::LocalFrameView::handleWheelEventForScrolling(int32x2_t *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t result;
  int32x2_t v7;
  int32x2_t *v8;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14;
  __int32 v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  const WebCore::IntPoint *v19;
  const WebCore::IntPoint *v20;
  WebCore::LocalFrame *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  WebCore::Page *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t v39;
  uint64_t v40;
  int32x2_t v41;
  unint64_t v42;

  result = WebCore::LocalFrameView::isScrollable((uint64_t)a1);
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    v7 = a1[8];
    if (a1[39].i8[0] == 1)
    {
      v9 = (*(uint64_t (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)&v7 + 832))(a1 + 8, 0, 1);
      v10 = *(float *)(a2 + 68);
      v11 = (int)*(float *)(a2 + 72);
      v12 = (v9 - (int)v10);
      v13 = (HIDWORD(v9) - v11);
      v14 = (int32x2_t)(v12 | (v13 << 32));
      v41 = v14;
      if ((int)v10 | v11)
      {
        v15 = a1[25].i32[1];
        v16 = (v12 - a1[25].i32[0]);
        v17 = v16 | ((unint64_t)(v13 - v15) << 32);
        v42 = v17;
        if ((_DWORD)v16)
          v18 = 0;
        else
          v18 = (_DWORD)v13 == v15;
        if (!v18)
        {
          if (a1[5])
          {
            WebCore::ScrollView::platformSetScrollPosition((id *)a1, (const WebCore::IntPoint *)&v41);
          }
          else
          {
            a1[25] = v14;
            if (!a1[39].i8[6])
            {
              if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a1 + 640))(a1))
              {
                if (!a1[34].i8[0])
                  a1[34].i8[0] = 1;
                a1[33] = (int32x2_t)v17;
              }
              else
              {
                (*(void (**)(int32x2_t *))(*(_QWORD *)a1 + 688))(a1);
                WebCore::ScrollView::scrollContents(a1, (const WebCore::IntSize *)&v42);
                (*(void (**)(int32x2_t *))(*(_QWORD *)a1 + 696))(a1);
              }
            }
          }
        }
        (*(void (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)&a1[8] + 832))(a1 + 8, 0, 1);
        WebCore::LocalFrameView::scrollPositionChanged((WebCore::LocalFrameView *)a1, v19, v20);
        v21 = (WebCore::LocalFrame *)a1[41];
        v22 = *((_QWORD *)v21 + 3);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            WebCore::PageOverlayController::didScrollFrame(*(WebCore::PageOverlayController **)(v23 + 1232), v21);
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 200);
              if (v40)
                WebCore::InspectorOverlay::update(*(WebCore::InspectorOverlay **)(v40 + 72));
            }
          }
        }
        v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&a1[41] + 280) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 960))(v25);
      }
      return 1;
    }
    else if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)&v7 + 144))(a1 + 8) == 1
           && (*(unsigned int (**)(int32x2_t *))(*(_QWORD *)v8 + 152))(a1 + 8) == 1
           || *(_QWORD *)&a1[5])
    {
      return 0;
    }
    else
    {
      v26 = *(_QWORD *)(*(_QWORD *)&a1[41] + 24);
      if (!v26)
        goto LABEL_46;
      v27 = *(WebCore::Page **)(v26 + 8);
      if (!v27)
        goto LABEL_46;
      v28 = WebCore::Page::scrollingCoordinator(v27);
      if (!v28)
        goto LABEL_46;
      v29 = v28;
      if (!(*(unsigned int (**)(uint64_t, int32x2_t *))(*(_QWORD *)v28 + 40))(v28, a1))
        goto LABEL_46;
      v30 = *(_QWORD *)(*(_QWORD *)&a1[41] + 296);
      if (v30 && (v31 = *(_QWORD *)(v30 + 1944)) != 0 && (v32 = *(_QWORD *)(*(_QWORD *)(v31 + 144) + 256)) != 0)
      {
        v33 = *(_QWORD *)(v32 + 224);
        v34 = *(_QWORD *)(v32 + 232);
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
      v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 216))(v29, a2, v33, v34, a3);
      v36 = v35;
      result = v35 > 0xFFu;
      if ((v36 & 0xE) != 0)
      {
LABEL_46:
        result = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v8 + 592))(a1 + 8);
        if ((_DWORD)result)
        {
          v37 = (uint64_t)a1[10];
          if (!v37)
          {
            v37 = WTF::fastMalloc((WTF *)0xB0);
            *(_QWORD *)v37 = off_1E3405EF0;
            *(_QWORD *)(v37 + 8) = v8;
            *(_QWORD *)(v37 + 16) = 0;
            *(_QWORD *)(v37 + 24) = &off_1E3406D78;
            *(_OWORD *)(v37 + 32) = 0u;
            *(_OWORD *)(v37 + 48) = 0u;
            *(_OWORD *)(v37 + 64) = 0u;
            *(_QWORD *)(v37 + 80) = 0;
            *(_QWORD *)(v37 + 88) = v37;
            *(_QWORD *)(v37 + 96) = 0;
            *(_QWORD *)(v37 + 104) = 0;
            *(_QWORD *)(v37 + 110) = 0;
            *(_QWORD *)(v37 + 120) = 0;
            v38 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v38 = 0;
            *(_DWORD *)(v38 + 8) = 0;
            *(_QWORD *)(v38 + 16) = v8;
            *(_BYTE *)(v38 + 24) = 0;
            *(_QWORD *)(v37 + 128) = v38;
            *(_BYTE *)(v37 + 136) = 0;
            *(_QWORD *)v37 = off_1E3354B08;
            *(_QWORD *)(v37 + 168) = 0;
            *(_DWORD *)(v37 + 140) = 0;
            *(_DWORD *)(v37 + 143) = 0;
            *(_QWORD *)(v37 + 156) = 0;
            *(_QWORD *)(v37 + 148) = 0;
            v39 = a1[10];
            a1[10] = (int32x2_t)v37;
            if (v39)
            {
              (*(void (**)(int32x2_t))(**(_QWORD **)&v39 + 8))(v39);
              v37 = (uint64_t)a1[10];
            }
          }
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 184))(v37, a2);
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::handleWheelEventForScrolling(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  return WebCore::LocalFrameView::handleWheelEventForScrolling((int32x2_t *)(a1 - 64), a2, a3);
}

BOOL WebCore::LocalFrameView::isVerticalDocument(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  _BOOL8 result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 1944);
  if (!v2)
    return 1;
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  v4 = 2;
  switch(v3)
  {
    case 1:
    case 2:
      goto LABEL_5;
    case 3:
    case 5:
      LOBYTE(v3) = 3;
      goto LABEL_5;
    case 4:
      goto LABEL_6;
    default:
      LOBYTE(v3) = 0;
LABEL_5:
      v4 = v3;
LABEL_6:
      result = (v4 & 6) != 2;
      break;
  }
  return result;
}

BOOL WebCore::LocalFrameView::isFlippedDocument(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  _BOOL8 result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  v4 = 2;
  switch(v3)
  {
    case 1:
    case 2:
      goto LABEL_5;
    case 3:
    case 5:
      v3 = 3;
      goto LABEL_5;
    case 4:
      goto LABEL_6;
    default:
      v3 = 0;
LABEL_5:
      v4 = v3;
LABEL_6:
      result = (v4 & 0xFFFFFFFD) == 1;
      break;
  }
  return result;
}

uint64_t WebCore::LocalFrameView::setScrollingPerformanceTestingEnabled(WebCore::LocalFrameView *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD, _QWORD, _QWORD);
  uint64_t result;

  if ((_DWORD)a2)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(void (****)(_QWORD, _QWORD, _QWORD))(v5 + 264);
        if (v6)
        {
          WTF::MonotonicTime::now(this);
          (**v6)(v6, 0, 0);
        }
      }
    }
  }
  result = WebCore::LocalFrameView::tiledBacking(this);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 232))(result, a2);
  return result;
}

uint64_t WebCore::LocalFrameView::createScrollbarsController(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1080))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
  else
    return WebCore::ScrollableArea::createScrollbarsController((WebCore::LocalFrameView *)((char *)this + 64));
}

double WebCore::LocalFrameView::didAddScrollbar(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  unsigned __int8 *v7;
  void *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  WebCore::Document *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  WebCore::Document *v16;
  WebCore::AXObjectCache *v18;
  unsigned __int8 **v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    WebCore::ScrollableArea::didAddScrollbar((WebCore::ScrollAnimator *)(a1 + 64), a2, a3);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 968))
      {
        v7 = (unsigned __int8 *)WebCore::ScrollableArea::scrollAnimator((WebCore::ScrollableArea *)(a1 + 64));
        WebCore::Page::wheelEventTestMonitor(v5, &v19);
        WebCore::ScrollAnimator::setWheelEventTestMonitor(v7, &v19);
        v9 = v19;
        v19 = 0;
        if (v9)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v9, v8);
      }
    }
  }
  else
  {
    WebCore::ScrollableArea::didAddScrollbar((WebCore::ScrollAnimator *)(a1 + 64), a2, a3);
  }
  v10 = *(_QWORD *)(a1 + 328);
  v11 = *(WebCore::Document **)(v10 + 296);
  v12 = WebCore::Document::hasEverCreatedAnAXObjectCache;
  if (v11)
    v13 = WebCore::Document::hasEverCreatedAnAXObjectCache == 0;
  else
    v13 = 1;
  if (!v13)
  {
    v18 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(v11);
    if (v18)
      return WebCore::AXObjectCache::onScrollbarUpdate(v18, (WTF **)a1);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
  if (v14 != v10 && v14 && *(_BYTE *)(v14 + 144) == 0)
  {
    v16 = *(WebCore::Document **)(v14 + 296);
    if (v16 && v12 != 0)
    {
      v18 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(v16);
      if (v18)
        return WebCore::AXObjectCache::onScrollbarUpdate(v18, (WTF **)a1);
    }
  }
  return result;
}

double `non-virtual thunk to'WebCore::LocalFrameView::didAddScrollbar(uint64_t a1, uint64_t a2, int a3)
{
  return WebCore::LocalFrameView::didAddScrollbar(a1 - 64, a2, a3);
}

double WebCore::LocalFrameView::willRemoveScrollbar(uint64_t a1, WebCore::Widget *a2, int a3)
{
  double result;
  uint64_t v6;
  WebCore::Document *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  WebCore::Document *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  WebCore::ScrollableArea::willRemoveScrollbar((_QWORD *)(a1 + 64), (uint64_t)a2, a3);
  v6 = *(_QWORD *)(a1 + 328);
  v7 = *(WebCore::Document **)(v6 + 296);
  v8 = WebCore::Document::hasEverCreatedAnAXObjectCache;
  if (v7)
    v9 = WebCore::Document::hasEverCreatedAnAXObjectCache == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v18 = WebCore::Document::hasEverCreatedAnAXObjectCache;
    v14 = *(_QWORD *)(a1 + 328);
    v15 = WebCore::Document::existingAXObjectCacheSlow(v7);
    v6 = v14;
    v8 = v18;
    v16 = (uint64_t *)v15;
    if (v15)
      goto LABEL_21;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
  if (v10 != v6 && v10 && *(_BYTE *)(v10 + 144) == 0)
  {
    v12 = *(WebCore::Document **)(v10 + 296);
    if (v12 && v8 != 0)
    {
      v17 = WebCore::Document::existingAXObjectCacheSlow(v12);
      v16 = (uint64_t *)v17;
      if (v17)
      {
LABEL_21:
        WebCore::AXObjectCache::remove(v16, a2);
        return WebCore::AXObjectCache::onScrollbarUpdate((WebCore::AXObjectCache *)v16, (WTF **)a1);
      }
    }
  }
  return result;
}

double `non-virtual thunk to'WebCore::LocalFrameView::willRemoveScrollbar(uint64_t a1, WebCore::Widget *a2, int a3)
{
  return WebCore::LocalFrameView::willRemoveScrollbar(a1 - 64, a2, a3);
}

double WebCore::LocalFrameView::scheduleUpdateWidgetPositions(WebCore::LocalFrameView *this)
{
  char *v1;
  double v2;
  double result;

  if ((*((_QWORD *)this + 95) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 95) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v1 = (char *)this + 728;
    *((_QWORD *)this + 94) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
  }
  return result;
}

float WebCore::LocalFrameView::calculateSizeForCSSViewportUnitsOverride(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  int v4;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(float *)a2;
    v2 = *(unsigned __int8 *)(a2 + 4);
    if (*(_BYTE *)(a2 + 4) && *(_BYTE *)(a2 + 12))
      return v3;
  }
  else
  {
    v2 = 0;
    v3 = 0.0;
  }
  if (*(_BYTE *)(a1 + 321))
  {
    if (!v2)
      return (float)(int)*(_QWORD *)(a1 + 248);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 1, 0);
    if (!v2)
      return (float)v4;
  }
  return v3;
}

uint64_t WebCore::LocalFrameView::shouldPlaceVerticalScrollbarOnLeft(WebCore::LocalFrameView *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameView::didFinishProhibitingScrollingWhenChangingContentSize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 328) + 296);
  if (v1)
  {
    v2 = this;
    if (!*(_BYTE *)(v1 + 3362))
    {
      if (*(_BYTE *)(v1 + 3390))
        goto LABEL_17;
      if ((*(_BYTE *)(v1 + 70) & 8) != 0)
        goto LABEL_17;
      if (*(_QWORD *)(v1 + 1560))
        goto LABEL_17;
      v3 = *(_QWORD *)(v1 + 1328);
      if (*(_BYTE *)(v3 + 233) || *(_BYTE *)(v3 + 234))
        goto LABEL_17;
    }
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 344) + 8) + 328) + 296);
    if (v4)
      v4 = *(_QWORD *)(v4 + 1944);
    if ((*(_QWORD *)(this + 384) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(this + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
      || v4 && (*(_BYTE *)(v4 + 20) & 0xF8) != 0
      || (v5 = *(_QWORD *)(this + 464)) != 0 && *(_QWORD *)(v5 + 8)
      || *(_DWORD *)(this + 488) && *(_BYTE *)(this + 478)
      || *(_BYTE *)(this + 480))
    {
LABEL_17:
      *(_BYTE *)(this + 1379) = 1;
    }
    else
    {
      v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(this + 64) + 832))(this + 64, 0, 1);
      return WebCore::ScrollView::updateScrollbars(v2, (const WebCore::IntPoint *)&v6);
    }
  }
  return this;
}

float WebCore::LocalFrameView::pageScaleFactor(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  int v5;
  WTF *v7;
  void *v8;

  v1 = *((_QWORD *)this + 41);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = 1.0;
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      v5 = (*(_DWORD *)v4)++;
      if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1 && !*(_BYTE *)(v4 + 1098))
        v3 = *(float *)(v4 + 356);
      if (v5)
      {
        *(_DWORD *)v4 = v5;
      }
      else
      {
        WebCore::Page::~Page(v4);
        WTF::fastFree(v7, v8);
      }
    }
  }
  return v3;
}

float `non-virtual thunk to'WebCore::LocalFrameView::pageScaleFactor(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  int v5;
  WTF *v7;
  void *v8;

  v1 = *((_QWORD *)this + 33);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = 1.0;
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      v5 = (*(_DWORD *)v4)++;
      if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1 && !*(_BYTE *)(v4 + 1098))
        v3 = *(float *)(v4 + 356);
      if (v5)
      {
        *(_DWORD *)v4 = v5;
      }
      else
      {
        WebCore::Page::~Page(v4);
        WTF::fastFree(v7, v8);
      }
    }
  }
  return v3;
}

uint64_t WebCore::LocalFrameView::didStartScrollAnimation(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 328) + 24);
  if (v1)
  {
    this = *(_QWORD *)(v1 + 8);
    if (this)
      return WebCore::Page::scheduleRenderingUpdate(this, 2);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::didStartScrollAnimation(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 264) + 24);
  if (v1)
  {
    this = *(_QWORD *)(v1 + 8);
    if (this)
      return WebCore::Page::scheduleRenderingUpdate(this, 2);
  }
  return this;
}

_QWORD *WebCore::LocalFrameView::updateScrollbarSteps(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderBox *v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  signed int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  _DWORD *v30;
  _QWORD *v31;
  WebCore::Scrollbar *v32;
  uint64_t v33;
  uint64_t v34;

  v1 = this;
  v2 = *(_QWORD *)(this[41] + 296);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 1272)) != 0
    && (v4 = (WebCore::RenderBox *)(*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL)) != 0
    && (*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(this[8] + 832))(this + 8, 0, 1);
    v11 = ((_DWORD)v10 << 6);
    if ((int)v10 < -33554432)
      v11 = 0x80000000;
    v12 = 0x8000000000000000;
    if (SHIDWORD(v10) >= -33554432)
      v12 = HIDWORD(v10) << 38;
    v13 = 0x7FFFFFFF00000000;
    if (SHIDWORD(v10) <= 0x1FFFFFF)
      v13 = v12;
    if ((int)v10 > 0x1FFFFFF)
      v11 = 0x7FFFFFFFLL;
    v33 = 0;
    v34 = v13 | v11;
    this = (_QWORD *)WebCore::RenderBox::scrollPaddingForViewportRect(v4, (const WebCore::LayoutRect *)&v33);
    v16 = v33 + v15;
    if (__OFADD__((_DWORD)v33, v15))
      v16 = (v33 >> 31) + 0x7FFFFFFF;
    LODWORD(v33) = v16;
    v17 = HIDWORD(v33) + (_DWORD)this;
    if (__OFADD__(HIDWORD(v33), (_DWORD)this))
      v17 = (HIDWORD(v33) >> 31) + 0x7FFFFFFF;
    HIDWORD(v33) = v17;
    v18 = (v15 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v15, HIDWORD(this)))
      v18 = v15 + HIDWORD(this);
    v19 = (_DWORD)this + v14;
    if (__OFADD__((_DWORD)this, v14))
      v19 = (this >> 31) + 0x7FFFFFFF;
    v20 = __OFSUB__((_DWORD)v34, v18);
    v21 = v34 - v18;
    if (v20)
      v21 = (v34 >> 31) + 0x7FFFFFFF;
    LODWORD(v34) = v21;
    v20 = __OFSUB__(HIDWORD(v34), v19);
    v22 = HIDWORD(v34) - v19;
    if (v20)
      v22 = (HIDWORD(v34) >> 31) + 0x7FFFFFFF;
    HIDWORD(v34) = v22;
    if (v1[19])
    {
      v27 = v21 / 64;
      v28 = llroundf((float)(v21 / 64) * 0.8);
      this = (_QWORD *)WebCore::Scrollbar::maxOverlapBetweenPages((WebCore::Scrollbar *)this);
      v29 = llroundf((float)(v27 - (int)this));
      if (v28 > v29)
        v29 = v28;
      if (v29 <= 1)
        v29 = 1;
      v30 = (_DWORD *)v1[19];
      v30[26] = 40;
      v30[27] = v29;
      v30[28] = 1065353216;
    }
    if (v1[20])
    {
      v23 = SHIDWORD(v34) / 64;
      v24 = llroundf((float)(SHIDWORD(v34) / 64) * 0.8);
      this = (_QWORD *)WebCore::Scrollbar::maxOverlapBetweenPages((WebCore::Scrollbar *)this);
      v25 = llroundf((float)(v23 - (int)this));
      if (v24 > v25)
        v25 = v24;
      if (v25 <= 1)
        v25 = 1;
      v26 = (_DWORD *)v1[20];
      v26[26] = 40;
      v26[27] = v25;
      v26[28] = 1065353216;
    }
  }
  else
  {
    v5 = (_DWORD *)this[19];
    if (v5)
    {
      v31 = this + 8;
      (*(void (**)(_QWORD *))(this[8] + 488))(this + 8);
      v32 = (WebCore::Scrollbar *)(*(uint64_t (**)(_QWORD *))(*v31 + 488))(v1 + 8);
      this = (_QWORD *)WebCore::Scrollbar::pageStep(v32);
      v5[26] = 40;
      v5[27] = (_DWORD)this;
      v5[28] = 1065353216;
    }
    v6 = (_DWORD *)v1[20];
    if (v6)
    {
      v8 = v1[8];
      v7 = v1 + 8;
      (*(void (**)(_QWORD *))(v8 + 488))(v7);
      v9 = (*(uint64_t (**)(_QWORD *))(*v7 + 488))(v7);
      this = (_QWORD *)WebCore::Scrollbar::pageStep((WebCore::Scrollbar *)HIDWORD(v9));
      v6[26] = 40;
      v6[27] = (_DWORD)this;
      v6[28] = 1065353216;
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::horizontalOverscrollBehavior(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1272);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    if (*(_QWORD *)(v1 + 1944))
      return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 636) >> 1) & 3;
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalFrameView::verticalOverscrollBehavior(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1272);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    if (*(_QWORD *)(v1 + 1944))
      return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 636) >> 3) & 3;
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalFrameView::scrollbarThumbColorStyle@<X0>(uint64_t this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 328) + 296);
  if (v2 && (v3 = *(_QWORD *)(v2 + 1272)) != 0 && (v4 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else
    {
      return WebCore::RenderStyle::usedScrollbarThumbColor(v4 + 80, a2);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::scrollbarThumbColorStyle@<X0>(uint64_t this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 264) + 296);
  if (v2 && (v3 = *(_QWORD *)(v2 + 1272)) != 0 && (v4 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else
    {
      return WebCore::RenderStyle::usedScrollbarThumbColor(v4 + 80, a2);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return this;
}

uint64_t WebCore::LocalFrameView::scrollbarTrackColorStyle@<X0>(uint64_t this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 328) + 296);
  if (v2 && (v3 = *(_QWORD *)(v2 + 1272)) != 0 && (v4 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else
    {
      return WebCore::RenderStyle::usedScrollbarTrackColor(v4 + 80, a2);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::scrollbarTrackColorStyle@<X0>(uint64_t this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 264) + 296);
  if (v2 && (v3 = *(_QWORD *)(v2 + 1272)) != 0 && (v4 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
    }
    else
    {
      return WebCore::RenderStyle::usedScrollbarTrackColor(v4 + 80, a2);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return this;
}

uint64_t WebCore::LocalFrameView::scrollbarGutterStyle(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1 || (v1 = *(_QWORD *)(v1 + 1272)) == 0 || (v1 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    LOBYTE(v2) = 1;
    return v2 | ((_DWORD)v1 << 8);
  }
  if ((*(_BYTE *)(v1 + 45) & 2) == 0)
  {
    v2 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 584);
    LODWORD(v1) = v2 >> 8;
    return v2 | ((_DWORD)v1 << 8);
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::scrollbarGutterStyle(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (!v1 || (v1 = *(_QWORD *)(v1 + 1272)) == 0 || (v1 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    LOBYTE(v2) = 1;
    return v2 | ((_DWORD)v1 << 8);
  }
  if ((*(_BYTE *)(v1 + 45) & 2) == 0)
  {
    v2 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 584);
    LODWORD(v1) = v2 >> 8;
    return v2 | ((_DWORD)v1 << 8);
  }
  result = 105;
  __break(0xC471u);
  return result;
}

BOOL WebCore::LocalFrameView::isVisibleToHitTesting(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 120);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FFF6BCLL);
    }
    v4 = *(_DWORD *)(*(_QWORD *)(v3 + 104) + 236);
    if ((v4 & 0x4000000) == 0 && (*(_BYTE *)(v3 + 120) & 0x30) == 0)
    {
      v5 = *(_QWORD *)(v3 + 32);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 104) + 239) & 0x18) == 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
        if (*(_BYTE *)(v8 + 3441))
        {
          v10 = v4 & 0x1000000;
          if (*(_QWORD *)(v8 + 1272) == v7 && v10 == 0)
            return (*(_WORD *)(v3 + 124) & 0x3C0) != 0;
        }
        else if ((v4 & 0x1000000) == 0)
        {
          return (*(_WORD *)(v3 + 124) & 0x3C0) != 0;
        }
      }
    }
  }
  return 0;
}

BOOL `non-virtual thunk to'WebCore::LocalFrameView::isVisibleToHitTesting(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 120);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FFF78CLL);
    }
    v4 = *(_DWORD *)(*(_QWORD *)(v3 + 104) + 236);
    if ((v4 & 0x4000000) == 0 && (*(_BYTE *)(v3 + 120) & 0x30) == 0)
    {
      v5 = *(_QWORD *)(v3 + 32);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 104) + 239) & 0x18) == 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
        if (*(_BYTE *)(v8 + 3441))
        {
          v10 = v4 & 0x1000000;
          if (*(_QWORD *)(v8 + 1272) == v7 && v10 == 0)
            return (*(_WORD *)(v3 + 124) & 0x3C0) != 0;
        }
        else if ((v4 & 0x1000000) == 0)
        {
          return (*(_WORD *)(v3 + 124) & 0x3C0) != 0;
        }
      }
    }
  }
  return 0;
}

float WebCore::LocalFrameView::deviceScaleFactor(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  result = 1.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
      return *(float *)(v3 + 364);
  }
  return result;
}

float `non-virtual thunk to'WebCore::LocalFrameView::deviceScaleFactor(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
  result = 1.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
      return *(float *)(v3 + 364);
  }
  return result;
}

void WebCore::LocalFrameView::writeRenderTreeAsText(uint64_t a1, WTF::TextStream *a2, unsigned __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1944);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 144);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 164);
        v7 = *(_DWORD *)(v5 + 168);
        LODWORD(v8) = v6 << 6;
        if (v6 < -33554432)
          LODWORD(v8) = 0x80000000;
        if (v6 <= 0x1FFFFFF)
          v8 = v8;
        else
          v8 = 0x7FFFFFFFLL;
        if (v7 >= -33554432)
          v9 = v7 << 6;
        else
          v9 = 0x80000000;
        if (v7 <= 0x1FFFFFF)
          v10 = v9;
        else
          v10 = 0x7FFFFFFFLL;
        *(_QWORD *)&v11 = *(_QWORD *)(v5 + 156);
        *((_QWORD *)&v11 + 1) = v8 | (v10 << 32);
        WebCore::writeLayers(a2, v5, (WebCore::RenderLayer *)v5, &v11, a3);
      }
    }
  }
}

uint64_t WebCore::LocalFrameView::updateScrollPositionForScrollAnchoringController(WebCore::LocalFrameView *this, const WebCore::RenderObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 169);
  if (result)
    return WebCore::ScrollAnchoringController::adjustScrollPositionForAnchoring(result, a2);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::updateScrollPositionForScrollAnchoringController(WebCore::LocalFrameView *this, const WebCore::RenderObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 161);
  if (result)
    return WebCore::ScrollAnchoringController::adjustScrollPositionForAnchoring(result, a2);
  return result;
}

uint64_t WebCore::LocalFrameView::scrollbarStyleDidChange(WebCore::LocalFrameView *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  WTF *v25;

  v2 = (uint64_t *)*((_QWORD *)this + 161);
  if (!v2)
    goto LABEL_36;
  v3 = *v2;
  if (!*v2)
  {
    v4 = 0;
    v5 = 0;
LABEL_4:
    v6 = v4;
    v4 = v3 + 8 * v5;
    goto LABEL_5;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v4 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  if (!(_DWORD)v5)
  {
    v19 = 0;
    v6 = *v2;
    goto LABEL_51;
  }
  v18 = 8 * v5;
  v6 = *v2;
  while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
  {
    v6 += 8;
    v18 -= 8;
    if (!v18)
    {
      v6 = v4;
      break;
    }
  }
LABEL_5:
  if (v3)
  {
    v19 = *(unsigned int *)(v3 - 4);
LABEL_51:
    v7 = v3 + 8 * v19;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (v7 != v6)
  {
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v23 = v6 + 8;
      v6 = v4;
      if (v23 != v4)
      {
        v6 = v23;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  if (v3)
    v8 = v3 + 8 * *(unsigned int *)(v3 - 4);
  else
    v8 = 0;
  while (v6 != v8)
  {
    v9 = *(_QWORD **)(*(_QWORD *)v6 + 8);
    v10 = v9[3];
    if (!v10)
    {
      if ((*(unsigned int (**)(_QWORD))(*v9 + 688))(*(_QWORD *)(*(_QWORD *)v6 + 8)))
      {
        v24 = v9;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v25, (uint64_t)v9, (uint64_t *)&v24);
        v14 = v25;
        v25 = 0;
        v15 = v9[3];
        v9[3] = v14;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v25, v13);
      }
      else
      {
        (*(void (**)(_QWORD *))(*v9 + 304))(v9);
      }
      v10 = v9[3];
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x195FFFB3CLL);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 336))(v10);
    v11 = v4;
    if (v6 + 8 != v4)
    {
      v11 = v6 + 8;
      while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
      {
        v11 += 8;
        if (v11 == v4)
        {
          v11 = v4;
          break;
        }
      }
    }
    v6 = v7;
    if (v11 != v7)
    {
      v6 = v11;
      if (!*(_QWORD *)(*(_QWORD *)v11 + 8))
      {
        while (1)
        {
          v12 = v6 + 8;
          v6 = v4;
          if (v12 != v4)
          {
            v6 = v12;
            while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
            {
              v6 += 8;
              if (v6 == v4)
              {
                v6 = v4;
                break;
              }
            }
          }
          if (v6 == v7)
            break;
          if (*(_QWORD *)(*(_QWORD *)v6 + 8))
            goto LABEL_18;
        }
        v6 = v7;
      }
    }
LABEL_18:
    ++*((_DWORD *)v2 + 2);
  }
LABEL_36:
  v16 = *((_QWORD *)this + 11);
  if (!v16)
  {
    if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 8) + 688))((char *)this + 64))
    {
      v24 = (_QWORD *)((char *)this + 64);
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v25, (uint64_t)this + 64, (uint64_t *)&v24);
      v21 = v25;
      v25 = 0;
      v22 = *((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = v21;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v25, v20);
    }
    else
    {
      (*(void (**)(char *))(*((_QWORD *)this + 8) + 304))((char *)this + 64);
    }
    v16 = *((_QWORD *)this + 11);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x195FFFB0CLL);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 336))(v16);
}

uint64_t WebCore::LocalFrameView::rootFrameID(WebCore::LocalFrameView *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 632) + 8) + 32);
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::rootFrameID(WebCore::LocalFrameView *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 632) + 8) + 32);
}

void WebCore::ImageOverlayController::~ImageOverlayController(WebCore::ImageOverlayController *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ImageOverlayController::~ImageOverlayController(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::PageOverlay *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_QWORD *)this + 8);
  if ((v3 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v14 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v14)
      {
        v20 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v14));
        v5 = v20;
      }
      v15 = *(WTF **)(v5 + 16);
      if (v15)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v19 = v5;
        WTF::fastFree(v15, a2);
        v5 = v19;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (WebCore::PageOverlay *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
    {
      WebCore::PageOverlay::~PageOverlay(v8, a2);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*((_DWORD *)v8 + 2);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
}

uint64_t WebCore::ImageOverlayController::mouseEvent()
{
  return 0;
}

unint64_t WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;

  result = WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)v4 = 0;
  *(_WORD *)(v4 + 5) = 0;
  v5 = *(unsigned __int8 *)(result + 4);
  *(_BYTE *)(v4 + 4) = v5;
  *(_BYTE *)(v4 + 5) = *(_BYTE *)(result + 5);
  if (v5 - 2 >= 9)
  {
    if (v5 > 0xD)
      goto LABEL_4;
    if (((1 << v5) & 0x3003) != 0)
    {
      *(_DWORD *)v4 = 0;
      goto LABEL_4;
    }
    if (v5 != 11)
      goto LABEL_4;
    v7 = *(_DWORD *)result;
    *(_DWORD *)result = 0;
    goto LABEL_6;
  }
  v6 = *(unsigned __int8 *)(result + 6);
  *(_BYTE *)(v4 + 6) = v6;
  if (!v6)
  {
    v7 = *(_DWORD *)result;
LABEL_6:
    *(_DWORD *)v4 = v7;
    goto LABEL_4;
  }
  *(_DWORD *)v4 = *(_DWORD *)result;
LABEL_4:
  *(_BYTE *)(result + 4) = 0;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int v8;
  int v9;
  int v10;

  if (*(unsigned int *)(result + 8) >= a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 >= 5)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = result;
    if (!(_DWORD)v5)
      goto LABEL_20;
    goto LABEL_7;
  }
  result += 16;
  *(_QWORD *)v3 = v3 + 16;
  *(_DWORD *)(v3 + 8) = 4;
  if ((_DWORD)v5)
  {
LABEL_7:
    v6 = 8 * v5;
    v7 = v4;
    while (1)
    {
      *(_DWORD *)result = 0;
      *(_WORD *)(result + 5) = 0;
      v8 = *((unsigned __int8 *)v7 + 4);
      *(_BYTE *)(result + 4) = v8;
      *(_BYTE *)(result + 5) = *((_BYTE *)v7 + 5);
      if (v8 - 2 >= 9)
        break;
      v9 = *((unsigned __int8 *)v7 + 6);
      *(_BYTE *)(result + 6) = v9;
      if (!v9)
      {
        v10 = *(_DWORD *)v7;
LABEL_14:
        *(_DWORD *)result = v10;
        goto LABEL_11;
      }
      *(_DWORD *)result = *(_DWORD *)v7;
LABEL_11:
      *((_BYTE *)v7 + 4) = 0;
      result += 8;
      v7 = (WTF *)((char *)v7 + 8);
      v6 -= 8;
      if (!v6)
        goto LABEL_20;
    }
    if (v8 > 0xD)
      goto LABEL_11;
    if (((1 << v8) & 0x3003) != 0)
    {
      *(_DWORD *)result = 0;
      goto LABEL_11;
    }
    if (v8 != 11)
      goto LABEL_11;
    v10 = *(_DWORD *)v7;
    *(_DWORD *)v7 = 0;
    goto LABEL_14;
  }
LABEL_20:
  if ((WTF *)(v3 + 16) != v4 && v4)
  {
    if (*(WTF **)v3 == v4)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
    }
    return WTF::fastFree(v4, (void *)a2);
  }
  return result;
}

int *WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  int *result;
  unsigned int v5;
  int v6;

  v3 = WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = (int *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12));
  *result = 0;
  *(_WORD *)((char *)result + 5) = 0;
  v5 = *(unsigned __int8 *)(v3 + 4);
  *((_BYTE *)result + 4) = v5;
  *((_BYTE *)result + 5) = *(_BYTE *)(v3 + 5);
  if (v5 <= 0xD)
  {
    v6 = 1 << v5;
    if ((v6 & 0x7FC) != 0)
    {
      *((_BYTE *)result + 6) = *(_BYTE *)(v3 + 6);
      *result = *(_DWORD *)v3;
    }
    else if ((v6 & 0x3003) != 0)
    {
      *result = 0;
    }
    else
    {
      *result = *(_DWORD *)v3;
      result = WebCore::Length::ref(result);
    }
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9LengthBoxENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int *a2)
{
  int *result;

  if (*((_BYTE *)a2 + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[6]);
  }
  if (*((_BYTE *)a2 + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[4]);
  }
  if (*((_BYTE *)a2 + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[2]);
  }
  if (*((_BYTE *)a2 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9LengthBoxENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if (*result)
  {
    v2 = *result + 16 * *(unsigned int *)(*result - 4);
    if ((_QWORD *)v2 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 0;
  }
  if ((_QWORD *)v2 != a2)
  {
    *a2 = -1;
    ++*(_DWORD *)(*result - 16);
    v3 = *result;
    v4 = *result ? *(_DWORD *)(v3 - 12) - 1 : -1;
    *(_DWORD *)(v3 - 12) = v4;
    v5 = *result;
    if (*result)
    {
      v6 = 6 * *(_DWORD *)(v5 - 12);
      v7 = *(_DWORD *)(v5 - 4);
      if (v6 < v7 && v7 >= 9)
        return (uint64_t *)WTF::HashTable<WebCore::LocalDOMWindow *,WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>>,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LocalDOMWindow *>>::rehash(result, v7 >> 1, 0);
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::LocalDOMWindow *,WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>>,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LocalDOMWindow *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14SecurityOriginENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      v5 = *(WTF::StringImpl **)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(WTF::StringImpl **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(unsigned int *)(v2 + 32);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, uint64_t))off_1E33FF730[v7])(&v8, v2 + 8);
      *(_DWORD *)(v2 + 32) = -1;
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14SecurityOriginENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_OWORD *WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(_OWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::LocalDOMWindow *,WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>>,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LocalDOMWindow *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v23 = 0;
        v24 = v8 + 16 * v22;
        goto LABEL_30;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_DWORD *)v16 + 2) = *a4;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
      goto LABEL_24;
  }
  else if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v29 = 8;
LABEL_27:
      result = WTF::HashTable<WebCore::LocalDOMWindow *,WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LocalDOMWindow *,unsigned int>>,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashMap<WebCore::LocalDOMWindow *,unsigned int,WTF::DefaultHash<WebCore::LocalDOMWindow *>,WTF::HashTraits<WebCore::LocalDOMWindow *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LocalDOMWindow *>>::rehash(a2, v29, v16);
      v16 = result;
      v25 = *a2;
      if (*a2)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_29;
    }
LABEL_24:
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
    goto LABEL_27;
  }
LABEL_29:
  v24 = v25 + 16 * v28;
  v23 = 1;
LABEL_30:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v24;
  *((_BYTE *)v7 + 16) = v23;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore5FrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E31FE290;
      v6[1] = v3;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore5FrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::RenderStyle::usesStandardScrollbarStyle(WebCore::RenderStyle *this)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 586))
    return 1;
  v1 = *((_QWORD *)this + 3);
  if (!*(_DWORD *)(v1 + 392) && (*(_BYTE *)(v1 + 390) & 4) == 0)
    return 0;
  std::optional<WebCore::ScrollbarColor>::optional[abi:sn180100]<WebCore::ScrollbarColor const&,0>((uint64_t)&v3, v1 + 384);
  result = v7 != 0;
  if (v7)
  {
    if (v6 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v8, &v5);
    v6 = -1;
    if (v4 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v4])(&v8, &v3);
    return 1;
  }
  return result;
}

uint64_t std::optional<WebCore::ScrollbarColor>::optional[abi:sn180100]<WebCore::ScrollbarColor const&,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v7;
  WebCore::Document *v8;
  char v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char **v14;

  v10 = &v9;
  v11 = &v9;
  v12 = &v9;
  v13 = &v9;
  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1
    || (v14 = &v10,
        ((void (*)(char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v2])(&v14),
        v10 = &v9,
        v11 = &v9,
        v12 = &v9,
        v13 = &v9,
        v5 = *(unsigned int *)(a2 + 24),
        (_DWORD)v5 == -1))
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InspectorInstrumentation::instrumentingAgents(v7, v8);
  }
  else
  {
    v14 = &v10;
    ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v14, a2 + 16);
    *(_BYTE *)(a1 + 32) = 1;
    return a1;
  }
}

uint64_t WebCore::InspectorInstrumentation::instrumentingAgents(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (this)
  {
    v2 = *(_QWORD *)(this + 528);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 24);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 8);
          if (v5)
            return *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
        }
      }
    }
    v6 = *(_QWORD *)(this + 2632);
    if (v6
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && (v8 = *(_QWORD *)(v7 + 528)) != 0
      && (v9 = *(_QWORD *)(v8 + 8)) != 0
      && (v10 = *(_QWORD *)(v9 + 24)) != 0
      && (v5 = *(_QWORD *)(v10 + 8)) != 0)
    {
      return *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContext::hasPlatformContext(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::platformContext(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t *WebCore::GraphicsContext::colorSpace(WebCore::GraphicsContext *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  return &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
}

BOOL WebCore::NullGraphicsContext::invalidatingControlTints(WebCore::NullGraphicsContext *this)
{
  return *((_BYTE *)this + 717) == 1;
}

uint64_t WebCore::GraphicsContext::state(WebCore::GraphicsContext *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebCore::NullGraphicsContext::isCALayerContext(WebCore::NullGraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::renderingMode(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::strokeEllipse(WebCore::GraphicsContext *this, __n128 *a2)
{
  __n128 v3;
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v3 = WebCore::Path::addEllipseInRect((WebCore::Path *)v6, a2);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, _BYTE *, __n128))(*(_QWORD *)this + 184))(this, v6, v3);
  if (v8 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_5[v8])(&v5, &v7);
  return result;
}

uint64_t WebCore::NullGraphicsContext::drawImage()
{
  return 0;
}

uint64_t WebCore::NullGraphicsContext::drawTiledImage()
{
  return 0;
}

{
  return 0;
}

uint64_t WebCore::NullGraphicsContext::clipBounds(WebCore::NullGraphicsContext *this)
{
  return 0;
}

float WebCore::NullGraphicsContext::drawText()
{
  return 0.0;
}

uint64_t WebCore::GraphicsContext::drawGlyphsAndCacheResources(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 552))(a1);
}

double WebCore::NullGraphicsContext::getCTM@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = xmmword_1969F5938;
  a1[1] = unk_1969F5948;
  result = 0.0;
  a1[2] = xmmword_1969F5958;
  return result;
}

uint64_t WebCore::GraphicsContext::applyDeviceScaleFactor(WebCore::GraphicsContext *this, float a2)
{
  _DWORD v3[2];

  *(float *)v3 = a2;
  *(float *)&v3[1] = a2;
  return (*(uint64_t (**)(WebCore::GraphicsContext *, _DWORD *))(*(_QWORD *)this + 632))(this, v3);
}

uint64_t WebCore::GraphicsContext::supportsInternalLinks(WebCore::GraphicsContext *this)
{
  return 0;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &&,WebCore::IntersectionObserver::Init &&)::$_0,WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &,WebCore::IntersectionObserver::Init)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<std::__variant_detail::__base>,WTF::DefaultRefDerefTraits<std::__variant_detail::__base>>,std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &&,WebCore::IntersectionObserver::Init &&)::$_0,WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &,WebCore::IntersectionObserver::Init)::$_1>> &&<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>> &>(unsigned int ****a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int *result;

  v2 = *a2;
  v3 = **a1;
  if (*a2)
    *(_DWORD *)(v2 + 24) += 4;
  result = *v3;
  *v3 = (unsigned int *)v2;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &&,WebCore::IntersectionObserver::Init &&)::$_0,WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &,WebCore::IntersectionObserver::Init)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<std::__variant_detail::__base>,WTF::DefaultRefDerefTraits<std::__variant_detail::__base>>,std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &&,WebCore::IntersectionObserver::Init &&)::$_0,WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &,WebCore::IntersectionObserver::Init)::$_1>> &&<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int *result;

  v2 = *a2;
  v3 = *(unsigned int ***)(*(_QWORD *)a1 + 8);
  if (*a2)
    *(_DWORD *)(v2 + 24) += 4;
  result = *v3;
  *v3 = (unsigned int *)v2;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return result;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &&,WebCore::IntersectionObserver::Init &&)::$_2,WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &,WebCore::IntersectionObserver::Init)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  v3 = **result;
  v5 = *a2;
  v4 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(v3 + 8))
  {
    result = (uint64_t **)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v4 + 1, (unint64_t)&v5);
    v4 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = *result;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  }
  *(_DWORD *)(v3 + 12) = v4 + 1;
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &&,WebCore::IntersectionObserver::Init &&)::$_2,WebCore::IntersectionObserver::create(WebCore::Document &,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &,WebCore::IntersectionObserver::Init)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  result = *(WTF **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)v3 = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(v3 + 8) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(uint64_t a1, uint64_t a2)
{
  float *v3;
  uint64_t v4;

  v3 = (float *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,float>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(double *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,float>(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v4 = *(unsigned int *)(result + 8);
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  if (v7 <= v4)
    return a3;
  if (!(v7 >> 29))
  {
    v8 = result;
    v9 = *(void **)result;
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v8 + 8) = v7;
    *(_QWORD *)v8 = v11;
    memcpy(v11, v9, 8 * v10);
    if (v9)
    {
      if (*(void **)v8 == v9)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v12);
    }
    return a3;
  }
  __break(0xC471u);
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _WORD *result;
  _WORD *v12;
  unsigned int v13;
  int8x16_t *v14;
  size_t v15;
  int8x16_t *v16;
  size_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  unint64_t v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  _BYTE v26[13];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v24 = -v7;
    v25 = 1;
    do
    {
      ++v25;
      v23 = v24 >= 0xA;
      v24 /= 0xAu;
    }
    while (v23);
  }
  else
  {
    v8 = 0;
    do
    {
      ++v8;
      v9 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v9);
  }
  v10 = *((_QWORD *)a1 + 1);
  if ((v10 || (v10 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v10 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(result, *a2, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), *(int8x16_t **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v12 = result;
      v13 = *a2;
      v14 = *(int8x16_t **)a3;
      v15 = *(unsigned int *)(a3 + 8);
      v16 = *(int8x16_t **)a4;
      v17 = *(unsigned int *)(a4 + 8);
      if ((v13 & 0x80000000) != 0)
      {
        v22 = -v13;
        result = (_WORD *)WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(v22, result);
        v20 = 1;
        do
        {
          ++v20;
          v23 = v22 >= 0xA;
          LODWORD(v22) = v22 / 0xA;
        }
        while (v23);
      }
      else
      {
        v18 = 0;
        v19 = v13;
        do
        {
          v26[v18-- + 12] = (v19 % 0xA) | 0x30;
          v9 = v19 > 9;
          v19 /= 0xAu;
        }
        while (v9);
        if (v18 + 14 <= 13)
          result = memcpy(result, &v26[v18 + 13], -v18);
        v20 = 0;
        do
        {
          ++v20;
          v9 = v13 > 9;
          v13 /= 0xAu;
        }
        while (v9);
      }
      v21 = (char *)v12 + v20;
      if ((_DWORD)v15)
      {
        if ((_DWORD)v15 == 1)
          *v21 = v14->i8[0];
        else
          result = memcpy(v21, v14, v15);
      }
      if ((_DWORD)v17)
      {
        result = &v21[v15];
        if ((_DWORD)v17 == 1)
          *(_BYTE *)result = v16->i8[0];
        else
          return memcpy(result, v16, v17);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::IntersectionObserverRegistration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<WebCore::IntersectionObserverRegistration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<WebCore::IntersectionObserverRegistration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::IntersectionObserverRegistration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  void *v9;
  char *v10;
  WTF *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x196001370);
    }
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(_DWORD *)(result + 12);
    v8 = 24 * v4;
    result = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v5 = result;
    if (v7)
    {
      v10 = (char *)v6 + 24 * v7;
      v11 = v6;
      do
      {
        v12 = *(unsigned int **)v11;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)result = v12;
        v13 = result;
        *(_OWORD *)(result + 8) = *(_OWORD *)((char *)v11 + 8);
        v14 = *(unsigned int **)v11;
        v15 = v11;
        *(_QWORD *)v11 = 0;
        if (v14)
        {
          do
          {
            v16 = __ldaxr(v14);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v14));
          if (!v17)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v9);
          }
        }
        result = v13 + 24;
        v11 = (WTF *)((char *)v15 + 24);
      }
      while ((char *)v15 + 24 != v10);
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      return WTF::fastFree(v6, v9);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::GCReachableRef<WebCore::Element,void>>::move(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[9];

  if ((uint64_t *)result != a2)
  {
    v10[7] = v3;
    v10[8] = v4;
    v7 = (uint64_t *)result;
    do
    {
      v8 = *v7;
      *v7 = 0;
      *a3 = v8;
      v9 = *v7;
      if (*v7)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v10[0] = v9;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, v10))*(_QWORD *)(v9 + 16) &= ~0x4000000000000uLL;
        result = *v7;
        *v7 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
      }
      else
      {
        *v7 = 0;
      }
      ++a3;
      ++v7;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::Element*>(WebCore::Element* const&)::{lambda(WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(uint64_t **)result;
    if (*a2)
    {
      v5 = 0;
      while (1)
      {
        result = v4[v5];
        if (result)
        {
          if (*(_QWORD *)(result + 8) == *a2)
            break;
        }
        if (v2 == ++v5)
          return result;
      }
    }
    else
    {
      result = *v4;
      if (!*v4)
      {
        v6 = v4;
LABEL_10:
        *v6 = 0;
        goto LABEL_19;
      }
      v5 = 0;
      v7 = v2 - 1;
      v6 = v4;
      while (*(_QWORD *)(result + 8))
      {
        if (v7 == v5)
          return result;
        v8 = v6[1];
        ++v6;
        result = v8;
        ++v5;
        if (!v8)
          goto LABEL_10;
      }
    }
    v6 = &v4[v5];
    *v6 = 0;
    do
    {
      v9 = __ldaxr((unsigned int *)result);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)result));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)result);
      v14 = *(unsigned int *)(result + 28);
      if ((_DWORD)v14)
      {
        v17 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v14));
        result = v17;
      }
      v15 = *(WTF **)(result + 16);
      if (v15)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v16 = result;
        WTF::fastFree(v15, a2);
        result = v16;
      }
      result = WTF::fastFree((WTF *)result, a2);
    }
LABEL_19:
    v11 = v6 + 1;
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD *)v3 + 8 * v12;
    while (v11 != (_QWORD *)v13)
    {
      *(v11 - 1) = *v11;
      *v11++ = 0;
    }
    *(_DWORD *)(v3 + 12) = v12 - 1;
  }
  return result;
}

unint64_t WTF::VectorMover<false,WebCore::GCReachableRef<WebCore::Element,void>>::moveOverlapping(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  v4 = (uint64_t *)result;
  if (result > (unint64_t)a3)
    return WTF::VectorMover<false,WebCore::GCReachableRef<WebCore::Element,void>>::move(result, a2, a3);
  if (a2 != (uint64_t *)result)
  {
    v5 = (uint64_t *)((char *)a3 + (((unint64_t)a2 - result) & 0xFFFFFFFFFFFFFFF8) - 8);
    v6 = a2;
    do
    {
      v7 = *--v6;
      *v6 = 0;
      *v5 = v7;
      v8 = *v6;
      if (*v6)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v9 = v8;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v9))*(_QWORD *)(v8 + 16) &= ~0x4000000000000uLL;
        result = *(v3 - 1);
        *(v3 - 1) = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
      }
      else
      {
        *(v3 - 1) = 0;
      }
      --v5;
      v3 = v6;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      v7 = *v5;
      if (*v5)
      {
        {
          WebCore::GCReachableRefMap::map(void)::map = 0;
        }
        v8 = v7;
        if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v8))*(_QWORD *)(v7 + 16) &= ~0x4000000000000uLL;
        result = *v5;
        *v5 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
      }
      else
      {
        *v5 = 0;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::IntersectionObserverEntry,WTF::RawPtrTraits<WebCore::IntersectionObserverEntry>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Ref<WebCore::IntersectionObserverEntry,WTF::RawPtrTraits<WebCore::IntersectionObserverEntry>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::IntersectionObserverEntry,WTF::RawPtrTraits<WebCore::IntersectionObserverEntry>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *result;
      v8 = *((unsigned int *)result + 3);
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
      result = (void **)memcpy(v9, v7, 8 * v8);
      if (v7)
      {
        if (*v6 == v7)
        {
          *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v7, v10);
      }
    }
  }
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>&&)#1},WTF::Vector<WTF::Ref<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t *)a2, (void *)a2);
  if ((_DWORD)result)
  {
    v5 = result;
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * result));
    *((_DWORD *)a1 + 2) = v5;
    *a1 = result;
  }
  v6 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v7 = 0;
    v8 = 0;
LABEL_6:
    v9 = v7;
    v7 = v6 + 8 * v8;
    goto LABEL_7;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v7 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_6;
  if (!(_DWORD)v8)
  {
    v11 = 0;
    v9 = *(_QWORD *)a2;
    goto LABEL_10;
  }
  v21 = 8 * v8;
  v9 = *(_QWORD *)a2;
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v21 -= 8;
    if (!v21)
    {
      v9 = v7;
      break;
    }
  }
LABEL_7:
  if (v6)
  {
    v11 = *(unsigned int *)(v6 - 4);
LABEL_10:
    v10 = v6 + 8 * v11;
    goto LABEL_11;
  }
  v10 = 0;
LABEL_11:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v12 = v9 + 8;
      v9 = v7;
      if (v12 != v7)
      {
        v9 = v12;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v6)
    v6 += 8 * *(unsigned int *)(v6 - 4);
  if (v9 != v6)
  {
    v13 = *a1;
    v14 = *((_DWORD *)a1 + 3);
    v15 = *(_DWORD *)(a2 + 8);
    do
    {
      v17 = *(_QWORD *)v9;
      v16 = v9 + 8;
      v18 = *(_QWORD *)(v17 + 8);
      ++*(_DWORD *)(v18 + 24);
      *(_QWORD *)(v13 + 8 * v14) = v18;
      v19 = v7;
      if (v16 != v7)
      {
        v19 = v16;
        while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
        {
          v19 += 8;
          if (v19 == v7)
          {
            v19 = v7;
            break;
          }
        }
      }
      v9 = v10;
      if (v19 != v10)
      {
        v9 = v19;
        if (!*(_QWORD *)(*(_QWORD *)v19 + 8))
        {
          while (1)
          {
            v20 = v9 + 8;
            v9 = v7;
            if (v20 != v7)
            {
              v9 = v20;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v10)
              break;
            if (*(_QWORD *)(*(_QWORD *)v9 + 8))
              goto LABEL_40;
          }
          v9 = v10;
        }
      }
LABEL_40:
      ++v14;
      ++v15;
    }
    while (v9 != v6);
    *((_DWORD *)a1 + 3) = v14;
    *(_DWORD *)(a2 + 8) = v15;
  }
  return result;
}

WebCore::DOMSelection *WTF::RefCounted<WebCore::DOMSelection>::deref(WebCore::DOMSelection *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::DOMSelection::~DOMSelection(result, a2);
    return (WebCore::DOMSelection *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::DOMSelection::~DOMSelection(WebCore::DOMSelection *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

_DWORD *WTF::RefCounted<WebCore::Storage>::deref(_DWORD *result)
{
  bmalloc::api *v1;
  void *v2;

  if (*result == 1)
  {
    WebCore::Storage::~Storage((WebCore::Storage *)(result - 2));
    return (_DWORD *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Mapper<WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::LocalDOMWindowObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*a2)
  {
    v2 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = result;
        result = WTF::fastMalloc((WTF *)(8 * v2));
        *(_DWORD *)(v4 + 8) = v2;
        *(_QWORD *)v4 = result;
        v5 = *a2;
        if (*a2 && *((_DWORD *)v5 - 3))
        {
          v6 = *((unsigned int *)v5 - 1);
          if ((_DWORD)v6)
          {
            v7 = 8 * v6;
            for (i = *a2; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v7 -= 8;
              if (!v7)
                return result;
            }
          }
          else
          {
            i = *a2;
          }
          v9 = &v5[v6];
          if (i != v9)
          {
            v10 = *i;
LABEL_15:
            result = WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::LocalDOMWindowObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1}::operator()(&v12, *(_QWORD *)(v10 + 8));
            v11 = *(unsigned int *)(v4 + 12);
            *(_QWORD *)(*(_QWORD *)v4 + 8 * v11) = v12;
            *(_DWORD *)(v4 + 12) = v11 + 1;
            while (++i != v9)
            {
              v10 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                if (i == v9)
                  return result;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::LocalDOMWindowObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    result = *(_QWORD *)(a2 + 8);
    if (result)
      goto LABEL_14;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v6 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = result;
    if (!v6)
      goto LABEL_14;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
    result = *(_QWORD *)(a2 + 8);
    if (result)
    {
LABEL_14:
      do
        v9 = __ldaxr((unsigned int *)result);
      while (__stlxr(v9 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::willDestroyCachedFrame(void)::$_0,void,WebCore::LocalDOMWindowObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::willDestroyDocumentInFrame(void)::$_0,void,WebCore::LocalDOMWindowObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::willDetachDocumentFromFrame(void)::$_0,void,WebCore::LocalDOMWindowObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t *WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove(uint64_t *result, unsigned int **a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int **v12;
  uint64_t *v13;

  if (*result)
  {
    v2 = *result + 8 * *(unsigned int *)(*result - 4);
    if ((unsigned int **)v2 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 0;
  }
  if ((unsigned int **)v2 != a2)
  {
    v3 = *a2;
    *a2 = 0;
    if (v3)
    {
      do
      {
        v7 = __ldaxr(v3);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v3));
      if (!v8)
      {
        atomic_store(1u, v3);
        v12 = a2;
        v13 = result;
        WTF::fastFree((WTF *)v3, a2);
        a2 = v12;
        result = v13;
      }
    }
    *a2 = (unsigned int *)-1;
    ++*(_DWORD *)(*result - 16);
    v4 = *result;
    if (*result)
      v5 = *(_DWORD *)(v4 - 12) - 1;
    else
      v5 = -1;
    *(_DWORD *)(v4 - 12) = v5;
    v6 = *result;
    if (*result)
    {
      v9 = 6 * *(_DWORD *)(v6 - 12);
      v10 = *(_DWORD *)(v6 - 4);
      if (v9 < v10 && v10 >= 9)
        return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(result, v10 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::suspendForBackForwardCache(void)::$_0,void,WebCore::LocalDOMWindowObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::resumeFromBackForwardCache(void)::$_0,void,WebCore::LocalDOMWindowObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::shouldHaveWebKitNamespaceForWorld(WebCore::DOMWrapperWorld &)::$_0,void,WebCore::UserMessageHandlerDescriptor const&>::call(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 24) == *(_QWORD *)(result + 8))
    **(_BYTE **)(result + 16) = 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::processPostMessage(JSC::JSGlobalObject &,WTF::String const&,WebCore::MessageWithMessagePorts const&,WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33FF8A0;
  WebCore::LocalDOMWindow::processPostMessage(JSC::JSGlobalObject &,WTF::String const&,WebCore::MessageWithMessagePorts const&,WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::processPostMessage(JSC::JSGlobalObject &,WTF::String const&,WebCore::MessageWithMessagePorts const&,WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33FF8A0;
  WebCore::LocalDOMWindow::processPostMessage(JSC::JSGlobalObject &,WTF::String const&,WebCore::MessageWithMessagePorts const&,WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::processPostMessage(JSC::JSGlobalObject &,WTF::String const&,WebCore::MessageWithMessagePorts const&,WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>> &&)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::EventTarget *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Node *v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  BOOL isSameSchemeHostPort;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void *v25;
  int v26;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WebCore::Event *v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  WTF *v45;
  void *v46;
  BOOL v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WebCore::SecurityOriginData *v63;
  _QWORD *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  const char *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  unsigned int v74;
  unsigned int v75;
  WTF *v76;
  void *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  WebCore::Node *v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  char v102;
  WTF::StringImpl *v103;
  unsigned int *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WebCore::Event *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  char v111;

  v2 = *(WebCore::EventTarget **)(a1 + 8);
  v3 = *((_QWORD *)v2 + 9);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    goto LABEL_147;
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6 || *(WebCore::EventTarget **)(*(_QWORD *)(v6 + 296) + 696) != v2)
    return;
  v8 = (WebCore::Node *)(v4 - 288);
  v9 = (_DWORD *)(v4 - 264);
  *(_DWORD *)(v4 - 264) += 2;
  v10 = (unsigned int *)(v6 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(a1 + 88);
  if (!v12)
    goto LABEL_16;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 - 96), a2);
  v14 = v13;
  if (v13)
  {
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
  }
  isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort(v12, (uint64_t)v13);
  do
  {
    v18 = __ldaxr(v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v14));
  if (v19)
  {
    if (isSameSchemeHostPort)
      goto LABEL_16;
  }
  else
  {
    v47 = isSameSchemeHostPort;
    atomic_store(1u, v14);
    v48 = (WTF::StringImpl *)*((_QWORD *)v14 + 6);
    *((_QWORD *)v14 + 6) = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v17);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = (WTF::StringImpl *)*((_QWORD *)v14 + 5);
    *((_QWORD *)v14 + 5) = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v17);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v14[8];
    if ((_DWORD)v50 != -1)
      ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33FF730[v50])(&v100, v14 + 2);
    v14[8] = -1;
    WTF::fastFree((WTF *)v14, v17);
    v51 = v47;
    v8 = (WebCore::Node *)(v4 - 288);
    if (v51)
    {
LABEL_16:
      v20 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v4 - 96));
      if (v20)
      {
        v22 = (WTF::StringImpl *)v20;
        v97 = v8;
        v23 = *(_QWORD *)(v20 + 56);
        v24 = *(WTF::StringImpl **)(a1 + 64);
        if (v24)
        {
          ++*(_DWORD *)v24;
          v105 = v24;
          WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)&v106, (uint64_t *)&v105, 0, 0);
          v105 = 0;
          if (*(_DWORD *)v24 == 1)
          {
            WebCore::UserGestureToken::~UserGestureToken(v24, v25);
            WTF::fastFree(v45, v46);
          }
          else
          {
            --*(_DWORD *)v24;
          }
        }
        else
        {
          v105 = 0;
          WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)&v106, (uint64_t *)&v105, 0, 0);
          v105 = 0;
        }
        v26 = *(_DWORD *)(a1 + 72);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v80 = *(_QWORD *)(v6 + 24);
          if (v80)
          {
            v81 = *(_QWORD *)(v80 + 8);
            if (v81)
            {
              if (v26)
              {
                v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v81 + 80) + 8) + 136);
                if (v82)
                {
                  v83 = *(_QWORD *)(v82 + 280);
                  if (v83)
                  {
                    v84 = *(_DWORD *)(v83 - 8);
                    v85 = 9 * ((v26 + ~(v26 << 15)) ^ ((v26 + ~(v26 << 15)) >> 10));
                    v86 = v84 & (((v85 ^ (v85 >> 6)) + ~((v85 ^ (v85 >> 6)) << 11)) ^ (((v85 ^ (v85 >> 6))
                                                                                      + ~((v85 ^ (v85 >> 6)) << 11)) >> 16));
                    v87 = *(_DWORD *)(v83 + 4 * v86);
                    if (v87 == v26)
                    {
LABEL_123:
                      Inspector::InspectorDebuggerAgent::willDispatchAsyncCall();
                    }
                    else
                    {
                      v88 = 1;
                      while (v87)
                      {
                        v86 = (v86 + v88) & v84;
                        v87 = *(_DWORD *)(v83 + 4 * v86);
                        ++v88;
                        if (v87 == v26)
                          goto LABEL_123;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (*(_DWORD *)(a1 + 44))
        {
          v100 = (WTF::StringImpl *)(v4 - 96);
          WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::entanglePorts(WebCore::ScriptExecutionContext &,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v109, a1 + 32, &v100);
        }
        else
        {
          v109 = 0;
          v110 = 0;
        }
        v28 = *(_QWORD *)(a1 + 24);
        v103 = 0;
        v104 = (unsigned int *)v28;
        *(_QWORD *)(a1 + 24) = 0;
        v29 = *(WTF::StringImpl **)(a1 + 48);
        if (v29)
        {
          *(_QWORD *)(a1 + 48) = 0;
          v99 = 0;
          v98 = 0;
          v100 = v29;
          v30 = 1;
          LODWORD(v101) = 0;
        }
        else
        {
          v30 = 0;
          LOBYTE(v100) = 0;
        }
        v102 = v30;
        WebCore::MessageEvent::create(v22, (uint64_t *)&v104, (_DWORD **)(a1 + 56), (_DWORD **)&v103, (uint64_t)&v100, (uint64_t *)&v109, (uint64_t *)&v107);
        if (v102)
        {
          if ((_DWORD)v101 != -1)
            ((void (*)(char *, WTF::StringImpl **))off_1E33FF8B8[v101])(&v111, &v100);
          LODWORD(v101) = -1;
        }
        if (v29 && v99 != -1)
          ((void (*)(char *, WTF::StringImpl **))off_1E33FF8B8[v99])(&v111, &v98);
        v32 = v103;
        v103 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = v104;
        v104 = 0;
        if (v33)
        {
          do
          {
            v42 = __ldaxr(v33);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v33));
          if (!v43)
          {
            atomic_store(1u, v33);
            WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v33 + 2), v31);
            WTF::fastFree((WTF *)v33, v44);
          }
        }
        v34 = *(_QWORD *)(v23 + 16);
        if (v34)
        {
          if (*(_QWORD *)(v23 + 24) != v34)
          {
            __break(0xC471u);
            JUMPOUT(0x1960027C8);
          }
        }
        else
        {
          WebCore::EventTarget::dispatchEvent(v2, v107);
          v31 = (WTF::StringImpl *)*(unsigned int *)(a1 + 72);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v89 = *(_QWORD *)(v6 + 24);
            if (v89)
            {
              v90 = *(_QWORD *)(v89 + 8);
              if (v90)
              {
                v91 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v90 + 80) + 8) + 136);
                if (v91)
                  WebCore::WebDebuggerAgent::didDispatchPostMessage(v91, (int)v31);
              }
            }
          }
        }
        if (v108)
        {
          v36 = (uint64_t *)(v108 - 16);
          v37 = *(_QWORD *)(((v108 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v38 = *(uint64_t **)(v108 - 8);
          if (v38)
          {
            v39 = *v36;
            *v38 = *v36;
            *(_QWORD *)(v39 + 8) = v38;
            *v36 = 0;
            v36[1] = 0;
          }
          *v36 = *(_QWORD *)(v37 + 40);
          *(_QWORD *)(v37 + 40) = v36;
          v108 = 0;
        }
        v40 = v107;
        v107 = 0;
        if (v40)
        {
          if (*((_DWORD *)v40 + 4) == 1)
            (*(void (**)(WebCore::Event *, WTF::StringImpl *))(*(_QWORD *)v40 + 8))(v40, v31);
          else
            --*((_DWORD *)v40 + 4);
        }
        if (HIDWORD(v110))
        {
          v95 = (uint64_t *)v109;
          v96 = 8 * HIDWORD(v110);
          do
          {
            v95 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v95, v31)+ 1;
            v96 -= 8;
          }
          while (v96);
        }
        v41 = (WTF *)v109;
        if (v109)
        {
          v109 = 0;
          LODWORD(v110) = 0;
          WTF::fastFree(v41, v31);
        }
        WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v106);
        v8 = v97;
      }
      goto LABEL_99;
    }
  }
  v52 = (*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)v2 + 104))(v2);
  if (v52)
  {
    v53 = *(_QWORD *)(v52 + 24);
    if (v53)
    {
      v54 = *(_QWORD *)(v53 + 8);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 792);
        if (v55)
        {
          ++*(_DWORD *)(v55 + 16);
          v56 = *(_QWORD *)(a1 + 88);
          v57 = *(unsigned int *)(v56 + 32);
          if ((_DWORD)v57 == 1)
            goto LABEL_142;
          if ((_DWORD)v57 == -1)
            goto LABEL_145;
          v100 = (WTF::StringImpl *)&v109;
          v58 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v57])(&v100, v56 + 8);
          if (MEMORY[0x19AEA53F4](*v58, "file", 4) && *(_BYTE *)(v56 + 59))
LABEL_142:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
          else
            WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v56 + 8), &v106);
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 - 96), v59);
          v61 = *(unsigned int *)(v60 + 32);
          if ((_DWORD)v61 == 1)
            goto LABEL_144;
          if ((_DWORD)v61 != -1)
          {
            v62 = v60;
            v63 = (WebCore::SecurityOriginData *)(v60 + 8);
            v100 = (WTF::StringImpl *)&v109;
            v64 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v61])(&v100, v60 + 8);
            if (!MEMORY[0x19AEA53F4](*v64, "file", 4) || !*(_BYTE *)(v62 + 59))
            {
              WebCore::SecurityOriginData::toString(v63, &v105);
              goto LABEL_78;
            }
LABEL_144:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_78:
            v100 = (WTF::StringImpl *)"Unable to post message to ";
            v101 = 27;
            v109 = ". Recipient has origin ";
            v110 = 24;
            v107 = (WebCore::Event *)".\n";
            v108 = 3;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v100, (uint64_t *)&v106, (uint64_t)&v109, (uint64_t *)&v105, (uint64_t)&v107, &v98);
            if (v98)
            {
              v66 = v105;
              v105 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, v65);
                else
                  *(_DWORD *)v66 -= 2;
              }
              v67 = v106;
              v106 = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, v65);
                else
                  *(_DWORD *)v67 -= 2;
              }
              v68 = *(const char **)(a1 + 80);
              if (v68)
              {
                ++*(_DWORD *)v68;
                v100 = 0;
                v109 = v68;
                WebCore::PageConsoleClient::addMessage((uint64_t *)v55, 8, 2, (uint64_t)&v98, (uint64_t)&v100, 0, 0, (_DWORD **)&v109, 0, 0);
                if (v109)
                {
                  if (*(_DWORD *)v109 == 1)
                  {
                    v76 = (WTF *)MEMORY[0x19AEA6024]();
                    WTF::fastFree(v76, v77);
                  }
                  else
                  {
                    --*(_DWORD *)v109;
                  }
                }
                v70 = v100;
                v100 = 0;
                if (v70)
                {
                  if (*(_DWORD *)v70 == 2)
                    WTF::StringImpl::destroy(v70, v69);
                  else
                    *(_DWORD *)v70 -= 2;
                }
              }
              else
              {
                WebCore::PageConsoleClient::addMessage((uint64_t *)v55, 8, 2, (uint64_t)&v98, 0, 0);
              }
              v71 = v98;
              v98 = 0;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, v69);
                else
                  *(_DWORD *)v71 -= 2;
              }
              v72 = *(_DWORD *)(v55 + 16);
              if (!v72)
              {
                __break(0xC471u);
                JUMPOUT(0x196002850);
              }
              *(_DWORD *)(v55 + 16) = v72 - 1;
              goto LABEL_98;
            }
            goto LABEL_146;
          }
LABEL_145:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_146:
          __break(0xC471u);
LABEL_147:
          JUMPOUT(0x196002334);
        }
      }
    }
  }
LABEL_98:
  v21 = (void *)*(unsigned int *)(a1 + 72);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v92 = *(_QWORD *)(v6 + 24);
    if (v92)
    {
      v93 = *(_QWORD *)(v92 + 8);
      if (v93)
      {
        v94 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v93 + 80) + 8) + 136);
        if (v94)
          WebCore::WebDebuggerAgent::didFailPostMessage(v94, (int)v21);
      }
    }
  }
  do
  {
LABEL_99:
    v74 = __ldaxr(v10);
    v75 = v74 - 1;
  }
  while (__stlxr(v75, v10));
  if (!v75)
  {
    atomic_store(1u, v10);
    v78 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v78 = off_1E31FE290;
    *((_QWORD *)v78 + 1) = v10;
    v100 = v78;
    WTF::ensureOnMainThread();
    v79 = v100;
    v100 = 0;
    if (v79)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v79 + 8))(v79);
  }
  if (*v9 == 2)
  {
    if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef(v8, v21);
  }
  else
  {
    *v9 -= 2;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::closePage(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33FF8E0;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 72))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::closePage(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33FF8E0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::closePage(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 72);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        v3 = *(_QWORD *)(v2 + 240);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 24);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 8);
              if (v6)
                return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 16) + 216))(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16));
            }
          }
        }
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::LocalDOMWindow::failedToRegisterDeviceMotionEventListener(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::EventTarget *v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unsigned int v13;
  _DWORD *v14;
  void *v15;
  void *v16;

  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x196002C0CLL);
  }
  v2 = *(WebCore::EventTarget **)(a2 + 504);
  if (v2)
  {
    ++*((_DWORD *)v2 + 6);
    v3 = (WTF *)WTF::fastMalloc((WTF *)0x38);
    v4 = v3;
    *(_DWORD *)v3 = 1;
    *((_BYTE *)v3 + 8) = 0;
    *((_BYTE *)v3 + 16) = 0;
    *((_BYTE *)v3 + 24) = 0;
    *((_BYTE *)v3 + 32) = 0;
    *((_BYTE *)v3 + 40) = 0;
    *((_BYTE *)v3 + 48) = 0;
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
      v6 = WebCore::threadGlobalDataSlow(v3);
    v7 = *(_QWORD *)(v6 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v7 = *(_QWORD *)(v6 + 40);
    }
    *(_DWORD *)v4 += 2;
    v8 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v8 = 1;
    *(_BYTE *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 0;
    *(_BYTE *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 32) = 0;
    *(_BYTE *)(v8 + 40) = 0;
    *(_BYTE *)(v8 + 48) = 0;
    v9 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v4;
    *(_QWORD *)(v9 + 16) = v4;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 24) = v8;
    v10 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
    *(_QWORD *)(v10 + 8) = 0;
    v12 = *(_QWORD *)(v7 + 608) != 0;
    v13 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x48200;
    *(_DWORD *)(v10 + 16) = 1;
    *(_DWORD *)(v10 + 20) = v13 | v12;
    v14 = *(_DWORD **)(v7 + 608);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(v10 + 24) = v14;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = v11;
    *(_QWORD *)v10 = off_1E33A28E0;
    ++*(_DWORD *)v9;
    *(_QWORD *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 72) = v9;
    WebCore::EventTarget::dispatchEvent(v2, (WebCore::Event *)v10);
    if (*(_DWORD *)(v10 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    else
      --*(_DWORD *)(v10 + 16);
    WTF::RefCounted<WebCore::DeviceMotionData>::deref((WTF **)v9, v15);
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, v16);
    else
      --*(_DWORD *)v4;
    if (*((_DWORD *)v2 + 6) == 1)
      (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v2 + 72))(v2);
    else
      --*((_DWORD *)v2 + 6);
  }
}

uint64_t *WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, unsigned int **a3)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *a2;
  if (*a2)
    v3 += 8 * *(unsigned int *)(v3 - 4);
  if ((unsigned int **)v3 == a3)
  {
    *result = 0;
  }
  else
  {
    v4 = *a3;
    if (*a3)
      *a3 = 0;
    *result = (uint64_t)v4;
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove(a2, a3);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalFrame::orientationChanged(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, WebCore::Document *this)
{
  return WebCore::Document::orientationChanged(this, *(unsigned int *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalFrame::injectUserScripts(WebCore::UserScriptInjectionTime)::$_0,void,WebCore::DOMWrapperWorld &,WebCore::UserScript const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E33FF958;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalFrame::injectUserScripts(WebCore::UserScriptInjectionTime)::$_0,void,WebCore::DOMWrapperWorld &,WebCore::UserScript const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E33FF958;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::LocalFrame::injectUserScripts(WebCore::UserScriptInjectionTime)::$_0,void,WebCore::DOMWrapperWorld &,WebCore::UserScript const&>::call(uint64_t a1, WebCore::DOMWrapperWorld *a2, uint64_t a3)
{
  if ((*(_BYTE *)(a3 + 80) != 0) != (*(_BYTE *)(a1 + 24) == 0))
  {
    if (*(_BYTE *)(a3 + 82) && !*(_BYTE *)(a1 + 25))
      WebCore::LocalFrame::addUserScriptAwaitingNotification(*(_QWORD *)(a1 + 8), a2, a3);
    else
      WebCore::LocalFrame::injectUserScriptImmediately(*(_QWORD **)(a1 + 8), a2, a3);
  }
}

uint64_t WebCore::UserScript::UserScript(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  _QWORD *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(unsigned int *)(a2 + 60);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
      goto LABEL_22;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 48) = v11;
    v12 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD ***)(a2 + 48);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        if (*v13)
          *v15 += 2;
        *v11++ = v15;
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  v8 = *(unsigned int *)(a2 + 76);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v8;
  if (!(_DWORD)v8)
    goto LABEL_7;
  if (v8 >> 29)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x196002F38);
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
  *(_DWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 64) = v16;
  v17 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v17)
  {
    v18 = *(_DWORD ***)(a2 + 64);
    v19 = 8 * v17;
    do
    {
      v20 = *v18;
      if (*v18)
        *v20 += 2;
      *v16++ = v20;
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
LABEL_7:
  v9 = *(_WORD *)(a2 + 80);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_WORD *)(a1 + 80) = v9;
  return a1;
}

uint64_t WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(_QWORD *a1)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v1 = a1[1];
  v2 = (*a1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a1 - 1640531527) << 16) ^ ((unsigned __int16)*a1
                                                                                            - 1640531527);
  v3 = v2 + (unsigned __int16)WORD2(*a1);
  v4 = (*a1 >> 37) & 0x7FFF800 ^ ((v3 + (v2 >> 11)) << 16) ^ (v3 + (v2 >> 11));
  v5 = (v1 >> 5) & 0x7FFF800 ^ ((v4 + (unsigned __int16)v1 + (v4 >> 11)) << 16) ^ (v4
                                                                                               + (unsigned __int16)v1
                                                                                               + (v4 >> 11));
  v6 = (v1 >> 37) & 0x7FFF800 ^ ((v5 + WORD2(v1) + (v5 >> 11)) << 16) ^ (v5 + WORD2(v1) + (v5 >> 11));
  v7 = (v6 + (v6 >> 11)) ^ (8 * (v6 + (v6 >> 11)));
  v8 = (v7 + (v7 >> 5)) ^ (4 * (v7 + (v7 >> 5)));
  v9 = (v8 + (v8 >> 15)) ^ ((v8 + (v8 >> 15)) << 10);
  if (v9)
    return v9;
  else
    return 0x800000;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v12 = 0;
    if (!v6)
      return v12;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (uint64_t *)(v6 + 8 * v11);
    v14 = *v13;
    if ((unint64_t)(*v13 + 1) >= 2)
    {
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 8);
      else
        v16 = 0;
      v17 = ~(*(_QWORD *)(*(_QWORD *)v14 + 8) << 32) + *(_QWORD *)(*(_QWORD *)v14 + 8);
      v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
      v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
      v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
      v21 = 1;
      do
      {
        v22 = v20;
        v23 = *(_QWORD *)(v15 + 8 * v20);
        v20 = (v20 + v21++) & v16;
      }
      while (v23);
      v24 = (_QWORD *)(v15 + 8 * v22);
      *v24 = v14;
      if (v13 == a3)
        v12 = v24;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v6)
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::contains<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = *(_QWORD *)(result + 8 * v6);
      if (!v8)
        break;
      if (v8 != -1 && v8 == a2)
        return 1;
      v6 = (v6 + i) & v2;
    }
    return 0;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::LocalFrameView::viewportContentsChanged(void)::$_0,void,WebCore::LocalFrameView&,WebCore::IntRect const&>::call(int a1, uint64_t a2, WebCore::IntRect *a3)
{
  uint64_t v6;
  WebCore::RenderView *v7;
  _QWORD *v8;
  uint64_t v9;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  WebCore::RenderView *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  if (*((int *)a3 + 2) >= 1 && *((_DWORD *)a3 + 3) >= 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
    if (v6)
    {
      v7 = *(WebCore::RenderView **)(v6 + 1944);
      if (v7)
        WebCore::RenderView::resumePausedImageAnimationsIfNeeded(v7, a3);
    }
  }
  v8 = *(_QWORD **)(a2 + 328);
  if (*(_QWORD **)(v8[16] + 8) == v8)
    goto LABEL_31;
  v9 = v8[37];
  if (!v9)
    goto LABEL_31;
  if ((*((int *)a3 + 3) <= 0 || *((_DWORD *)a3 + 2) <= 0) && *(_DWORD *)(a2 + 1016) >= 1 && *(_DWORD *)(a2 + 1020) >= 1)
  {
    v22 = v8[15];
    if (!v22 || (v23 = *(_QWORD *)(v22 + 8)) == 0)
    {
      v26 = 0;
      goto LABEL_46;
    }
    v24 = *(_DWORD *)(v23 + 24);
    *(_DWORD *)(v23 + 24) = v24 + 2;
    if ((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        return;
      }
      v25 = (*(unsigned __int8 *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if ((*(_BYTE *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
        LOBYTE(v25) = 0;
      if ((v25 & 1) != 0)
        v26 = *(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v26 = 0;
      if (v24)
        goto LABEL_45;
    }
    else
    {
      v26 = 0;
      if (v24)
      {
LABEL_45:
        *(_DWORD *)(v23 + 24) = v24;
LABEL_46:
        v13 = v26 != 0;
        goto LABEL_22;
      }
    }
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v23, (void *)a2);
    goto LABEL_46;
  }
  v13 = 0;
LABEL_22:
  if (*(unsigned __int8 *)(v9 + 3411) != v13)
  {
    *(_BYTE *)(v9 + 3411) = v13;
    WebCore::ScriptExecutionContext::didChangeTimerAlignmentInterval((WebCore::ScriptExecutionContext *)(v9 + 192));
  }
  v8 = *(_QWORD **)(a2 + 328);
  v14 = v8[3];
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 1169) & 2) == 0)
      {
        v16 = *(_QWORD *)(v9 + 2328);
        if (v16)
        {
          v17 = *(_BYTE *)(v16 + 48);
          v18 = v17 & 0xFD;
          v19 = v17 | 2;
          if (!v13)
            v19 = v18;
          *(_BYTE *)(v16 + 48) = v19;
        }
      }
    }
  }
LABEL_31:
  v20 = v8[37];
  if (v20)
  {
    v21 = *(WebCore::RenderView **)(v20 + 1944);
    if (v21)
      WebCore::RenderView::updateVisibleViewportRect(v21, a3);
  }
}

void WTF::Detail::CallableWrapper<WebCore::LocalFrameView::resumeVisibleImageAnimationsIncludingSubframes(void)::$_0,void,WebCore::LocalFrameView&,WebCore::IntRect const&>::call(int a1, uint64_t a2, WebCore::IntRect *a3)
{
  uint64_t v4;
  WebCore::RenderView *v5;

  if (*((int *)a3 + 2) >= 1 && *((_DWORD *)a3 + 3) >= 1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
    if (v4)
    {
      v5 = *(WebCore::RenderView **)(v4 + 1944);
      if (v5)
        WebCore::RenderView::resumePausedImageAnimationsIfNeeded(v5, a3);
    }
  }
}

void WTF::Detail::CallableWrapper<WebCore::LocalFrameView::updatePlayStateForAllAnimationsIncludingSubframes(void)::$_0,void,WebCore::LocalFrameView&,WebCore::IntRect const&>::call(int a1, uint64_t a2, WebCore::IntRect *a3)
{
  uint64_t v3;
  WebCore::RenderView *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
  if (v3)
  {
    v4 = *(WebCore::RenderView **)(v3 + 1944);
    if (v4)
      WebCore::RenderView::updatePlayStateForAllAnimations(v4, a3);
  }
}

uint64_t WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalFrameView::scheduleScrollToAnchorAndTextFragment(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E33FFA30;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalFrameView::scheduleScrollToAnchorAndTextFragment(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33FFA30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::LocalFrameView::scheduleScrollToAnchorAndTextFragment(void)::$_0,void>::call(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  _QWORD v5[2];

  v2 = result[1];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)(v3 + 8);
      if (*(_QWORD *)(v3 + 584))
      {
        WebCore::LocalFrameView::scrollToAnchorAndTextFragmentNowIfNeeded((WebCore::LocalFrameView *)v3, a2);
      }
      else
      {
        v5[0] = v3 + 584;
        v5[1] = 0;
        WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v3 + 584), (uint64_t *)(v3 + 592));
        WebCore::LocalFrameView::scrollToAnchorAndTextFragmentNowIfNeeded((WebCore::LocalFrameView *)v3, v4);
        WTF::SetForScope<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>::~SetForScope((uint64_t)v5);
      }
      result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)(v3 + 592));
      if (*(_DWORD *)(v3 + 8) == 1)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      else
        --*(_DWORD *)(v3 + 8);
    }
  }
  return result;
}

uint64_t WTF::SetForScope<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>::~SetForScope(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(*(uint64_t **)a1, (uint64_t *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

WebCore::LocalFrameViewLayoutContext *WebCore::LocalFrameViewLayoutContext::LocalFrameViewLayoutContext(WebCore::LocalFrameViewLayoutContext *this, WebCore::LocalFrameView *a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  void *v13;
  WTF *v14;

  *(_DWORD *)this = 0;
  v3 = *((_QWORD *)a2 + 2);
  if (!v3)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v14 = (WTF *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
      {
        WTF::fastFree(v14, v13);
        v3 = *((_QWORD *)a2 + 2);
      }
      else
      {
        --*(_DWORD *)v14;
      }
    }
  }
  ++*(_DWORD *)v3;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 2) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33FFDB8;
  v7[1] = WebCore::LocalFrameViewLayoutContext::layoutTimerFired;
  v7[2] = 0;
  v7[3] = this;
  *((_QWORD *)this + 8) = v7;
  *((_QWORD *)this + 9) = off_1E3407128;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v8 = *(unsigned int **)(StatusReg + 736);
  if (!v8)
    v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 14) = v8;
  *((_QWORD *)this + 9) = off_1E31F7378;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E33FFDB8;
  v10[1] = WebCore::LocalFrameViewLayoutContext::runPostLayoutTasks;
  v10[2] = 0;
  v10[3] = this;
  *((_QWORD *)this + 15) = v10;
  *((_QWORD *)this + 16) = 0;
  *((_WORD *)this + 68) &= 0xF000u;
  *((_WORD *)this + 69) = 257;
  *((_BYTE *)this + 140) = 1;
  *((_BYTE *)this + 145) = 0;
  *(_DWORD *)((char *)this + 141) = 0;
  *((_DWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  return this;
}

_QWORD *WebCore::LocalFrameViewLayoutContext::runPostLayoutTasks(_QWORD *this, void *a2)
{
  uint64_t v2;
  WebCore::LocalFrameView *v3;

  v2 = (uint64_t)this;
  if ((this[13] & 0xFFFFFFFFFFFFLL) != 0)
    this = (_QWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 9));
  if (!*(_BYTE *)(v2 + 141))
  {
    *(_BYTE *)(v2 + 141) = 1;
    v3 = *(WebCore::LocalFrameView **)(*(_QWORD *)(v2 + 8) + 8);
    ++*((_DWORD *)v3 + 2);
    this = WebCore::LocalFrameView::performPostLayoutTasks(v3, a2);
    if (*((_DWORD *)v3 + 2) == 1)
      this = (_QWORD *)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
    *(_BYTE *)(v2 + 141) = 0;
  }
  return this;
}

void WebCore::LocalFrameViewLayoutContext::~LocalFrameViewLayoutContext(WebCore::LocalFrameViewLayoutContext *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::Layout::LayoutState *v6;
  bmalloc::api *v7;
  void *v8;
  bmalloc::api *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  WTF **v19;
  WTF *v20;

  v3 = *((_QWORD *)this + 25);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deallocateTable(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (v5)
    {
      v18 = *(unsigned int *)(v5 - 4);
      if ((_DWORD)v18)
      {
        v19 = (WTF **)*((_QWORD *)v4 + 1);
        do
        {
          v20 = *v19;
          if (*v19 != (WTF *)-1)
          {
            *v19 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 1)
                WTF::fastFree(v20, a2);
              else
                --*(_DWORD *)v20;
            }
          }
          ++v19;
          --v18;
        }
        while (v18);
      }
      WTF::fastFree((WTF *)(v5 - 16), a2);
    }
    WTF::fastFree(v4, a2);
  }
  v6 = (WebCore::Layout::LayoutState *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v6)
  {
    WebCore::Layout::LayoutState::~LayoutState(v6, (WTF::StringImpl *)a2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
  v9 = (bmalloc::api *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)v9;
    *(_QWORD *)v9 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    bmalloc::api::isoDeallocate(v9, a2);
  }
  v11 = *((unsigned int *)this + 43);
  if ((_DWORD)v11)
    WTF::VectorTypeOperations<std::unique_ptr<WebCore::RenderLayoutState>>::destruct(*((_QWORD *)this + 20), (uint64_t *)(*((_QWORD *)this + 20) + 8 * v11));
  v12 = (WTF *)*((_QWORD *)this + 20);
  if (v12)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, a2);
    else
      --*(_DWORD *)v13;
  }
  *((_QWORD *)this + 9) = off_1E31F7378;
  v14 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  WebCore::TimerBase::~TimerBase((WebCore::LocalFrameViewLayoutContext *)((char *)this + 72));
  *((_QWORD *)this + 2) = off_1E31F7378;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  WebCore::TimerBase::~TimerBase((WebCore::LocalFrameViewLayoutContext *)((char *)this + 16));
  v17 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::fastFree(v17, v16);
    else
      --*(_DWORD *)v17;
  }
}

double WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange(WebCore::LocalFrameViewLayoutContext *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  WebCore::RenderElement *v5;
  double result;
  uint64_t v7;
  int v8;

  if (*((_DWORD *)this + 38))
  {
    *((_BYTE *)this + 142) = 1;
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328) + 296);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 1944);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 + 20);
        if ((v4 & 8) == 0)
        {
          *(_DWORD *)(v3 + 20) = v4 | 8;
          v5 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v3, 0);
          WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v3, v5);
          if ((*(_BYTE *)(v3 + 21) & 0x80) != 0)
          {
            if ((*(_BYTE *)(v3 + 45) & 0x10) == 0
              || ((v7 = *(_QWORD *)(v3 + 144)) == 0
                ? (v8 = MEMORY[8])
                : (v8 = *(_DWORD *)(v7 + 8) + 1, *(_DWORD *)(v7 + 8) = v8),
                  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
                  !v8))
            {
              __break(0xC471u);
              JUMPOUT(0x196003A50);
            }
            *(_DWORD *)(v7 + 8) = v8 - 1;
          }
        }
        return WebCore::LocalFrameViewLayoutContext::scheduleLayout(this);
      }
    }
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::didInvalidateLayout(WTF::JSONImpl::Object *this, WebCore::LocalFrame *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        return WebCore::InspectorInstrumentation::didInvalidateLayoutImpl(*(WTF::JSONImpl::Object **)(*(_QWORD *)(v4 + 80) + 8), this);
    }
  }
  return this;
}

WebCore::RenderObject *WebCore::LocalFrameViewLayoutContext::scheduleSubtreeLayout(WebCore::RenderObject *this, WTF::MonotonicTime **a2)
{
  WebCore::RenderObject *v3;
  WebCore::RenderElement *v4;
  uint64_t v5;
  WTF::MonotonicTime *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  double v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::MonotonicTime *v18;
  uint64_t v19;
  WebCore::RenderElement *v20;
  WebCore::RenderObject *v21;
  WebCore::LocalFrame *v22;
  WTF::JSONImpl::Object *v23;
  unsigned int *v24;
  unsigned int v25;
  WebCore::RenderObject *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  WebCore::RenderElement *v31;
  WTF::MonotonicTime *v32;

  v3 = this;
  v4 = *(WebCore::RenderElement **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328) + 296)
                                  + 1944);
  if ((*((_BYTE *)v4 + 20) & 0xF8) != 0)
  {
    v5 = *((_QWORD *)this + 16);
    if (!v5 || !*(_QWORD *)(v5 + 8))
      return WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a2, v4);
  }
  if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
    || !*((_BYTE *)this + 138))
  {
    v31 = *(WebCore::RenderElement **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328) + 296)
                                     + 1944);
    v19 = *((_QWORD *)this + 16);
    if (!v19)
      goto LABEL_39;
    v20 = *(WebCore::RenderElement **)(v19 + 8);
    if (v20 == (WebCore::RenderElement *)a2)
      return this;
    if (v20)
    {
      v21 = (WebCore::RenderObject *)a2;
      do
        v21 = (WebCore::RenderObject *)WebCore::RenderObject::container(v21);
      while (v21 != v20 && v21);
      if (v21)
        return WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a2, v20);
      v26 = v20;
      do
        v26 = (WebCore::RenderObject *)WebCore::RenderObject::container(v26);
      while (v26 != (WebCore::RenderObject *)a2 && v26);
      if (v26)
      {
        WebCore::RenderObject::markContainingBlocksForLayout(v20, (WebCore::RenderElement *)a2);
        WebCore::LocalFrameViewLayoutContext::setSubtreeLayoutRoot(v3, (WebCore::RenderElement *)a2);
        v23 = *(WTF::JSONImpl::Object **)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 328);
        v27 = (unsigned int *)((char *)v23 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
      }
      else
      {
        WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout(v3);
        WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a2, v31);
        v23 = *(WTF::JSONImpl::Object **)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 328);
        v29 = (unsigned int *)((char *)v23 + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
      }
    }
    else
    {
LABEL_39:
      WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a2, v31);
      v23 = *(WTF::JSONImpl::Object **)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 328);
      v24 = (unsigned int *)((char *)v23 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    v32 = v23;
    WebCore::InspectorInstrumentation::didInvalidateLayout(v23, v22);
    return (WebCore::RenderObject *)WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v32);
  }
  v6 = a2[1];
  if (!v6)
  {
    v6 = (WTF::MonotonicTime *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *((_QWORD *)v6 + 1) = a2;
    v15 = a2[1];
    a2[1] = v6;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WTF::fastFree(v15, v4);
        v6 = a2[1];
        if (!v6)
          goto LABEL_9;
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  ++*(_DWORD *)v6;
LABEL_9:
  v7 = (WTF *)*((_QWORD *)v3 + 16);
  *((_QWORD *)v3 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      v6 = (WTF::MonotonicTime *)WTF::fastFree(v7, v4);
    else
      --*(_DWORD *)v7;
  }
  v8 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 328);
  v9 = v8 + 2;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v16 = *((_QWORD *)v8 + 3);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
        v6 = WebCore::InspectorInstrumentation::didInvalidateLayoutImpl(*(WTF::JSONImpl::Object **)(*(_QWORD *)(v17 + 80) + 8), (WebCore::Frame *)v8);
    }
  }
  do
  {
    v12 = __ldaxr(v9);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v9));
  if (!v13)
  {
    atomic_store(1u, v9);
    v18 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v18 = off_1E31FE290;
    *((_QWORD *)v18 + 1) = v9;
    v32 = v18;
    WTF::ensureOnMainThread();
    v6 = v32;
    v32 = 0;
    if (v6)
      v6 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v6 + 8))(v6);
  }
  *((_QWORD *)v3 + 5) = 0;
  WTF::MonotonicTime::now(v6);
  return (WebCore::RenderObject *)WebCore::TimerBase::setNextFireTime((uint64_t)v3 + 16, v14 + 0.0);
}

uint64_t WebCore::LocalFrameViewLayoutContext::setSubtreeLayoutRoot(WebCore::LocalFrameViewLayoutContext *this, WebCore::RenderElement *a2)
{
  uint64_t result;
  WTF *v4;
  WTF *v6;

  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_2;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v6 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (!v6)
    goto LABEL_2;
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
LABEL_2:
    ++*(_DWORD *)result;
    goto LABEL_3;
  }
  WTF::fastFree(v6, a2);
  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_2;
LABEL_3:
  v4 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = result;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

WTF *WebCore::LocalFrameViewLayoutContext::setBoxNeedsTransformUpdateAfterContainerLayout(WebCore::LocalFrameViewLayoutContext *this, WTF **a2, WebCore::RenderBlock *a3)
{
  unsigned int **v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int *v12;
  char v13;
  int v14;
  WTF **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  int v24;
  unsigned int *v25;
  WTF ***v26;
  uint64_t v27;
  WTF **v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  unsigned int *v32;
  int v33;
  unsigned int *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  WTF *result;
  uint64_t v42;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  WTF *v51;

  v5 = (unsigned int **)((char *)this + 200);
  v6 = *((_DWORD *)this + 52);
  v7 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 52) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderBlock,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t *)this + 25, a2);
  v8 = *((_QWORD *)a3 + 1);
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a3;
    v48 = (WTF *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v8;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
      {
        WTF::fastFree(v48, a2);
        v8 = *((_QWORD *)a3 + 1);
      }
      else
      {
        --*(_DWORD *)v48;
      }
    }
  }
  v9 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    WTF::fastFree((WTF *)v8, a2);
  else
    *(_DWORD *)v8 = v11;
  v12 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v5, 8u, 0), (v12 = *v5) != 0))
  {
    v13 = 0;
    v14 = *(v12 - 2);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = 0;
  v16 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (v18 >> 31) ^ v18;
  for (i = 1; ; ++i)
  {
    v21 = v19 & v14;
    v22 = &v12[6 * v21];
    v23 = *(_QWORD *)v22;
    if (*(_QWORD *)v22 != -1)
      break;
    v15 = (WTF **)&v12[6 * v21];
LABEL_15:
    v19 = i + v21;
  }
  if (!v23)
  {
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(*v5 - 4);
      *v15 = (WTF *)v8;
    }
    else
    {
      *(_QWORD *)v22 = v8;
      v15 = (WTF **)&v12[6 * v21];
    }
    v26 = (WTF ***)(v15 + 1);
    v27 = *((unsigned int *)v15 + 5);
    if ((_DWORD)v27)
    {
      v28 = *v26;
      v29 = 8 * v27;
      do
      {
        v30 = *v28;
        *v28 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
            WTF::fastFree(v30, a2);
          else
            --*(_DWORD *)v30;
        }
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    v31 = (WTF *)*v26;
    if (*v26)
    {
      v15[1] = 0;
      *((_DWORD *)v15 + 4) = 0;
      WTF::fastFree(v31, a2);
    }
    *v26 = 0;
    v15[2] = 0;
    v32 = *v5;
    if (*v5)
      v33 = *(v32 - 3) + 1;
    else
      v33 = 1;
    *(v32 - 3) = v33;
    v34 = *v5;
    if (*v5)
      v35 = *(v34 - 3);
    else
      v35 = 0;
    v36 = *(v34 - 4) + v35;
    v37 = *(v34 - 1);
    if (v37 > 0x400)
    {
      if (v37 <= 2 * v36)
        goto LABEL_40;
    }
    else if (3 * v37 <= 4 * v36)
    {
      if (!(_DWORD)v37)
      {
        v38 = 8;
LABEL_43:
        v15 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v5, v38, v15);
        v34 = *v5;
        if (*v5)
          LODWORD(v37) = *(v34 - 1);
        else
          LODWORD(v37) = 0;
        goto LABEL_45;
      }
LABEL_40:
      v38 = (_DWORD)v37 << (6 * *(v34 - 3) >= 2 * (int)v37);
      goto LABEL_43;
    }
LABEL_45:
    v25 = &v34[6 * v37];
    v22 = (unsigned int *)v15;
    goto LABEL_46;
  }
  if (v23 != v8)
    goto LABEL_15;
  if ((v13 & 1) != 0)
    v24 = 0;
  else
    v24 = *(v12 - 1);
  v25 = &v12[6 * v24];
  if (*(_DWORD *)v8 == 1)
    WTF::fastFree((WTF *)v8, a2);
  else
    --*(_DWORD *)v8;
LABEL_46:
  v39 = *v5;
  if (*v5)
    v39 += 6 * *(v39 - 1);
  if (v22 != v39)
  {
    while (!*(_QWORD *)(*(_QWORD *)v22 + 8))
    {
      v40 = v22 + 6;
      v22 = v25;
      if (v40 != v25)
      {
        v22 = v40;
        while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
        {
          v22 += 6;
          if (v22 == v25)
          {
            v22 = v25;
            break;
          }
        }
      }
      if (v22 == v39)
      {
        v22 = v39;
        break;
      }
    }
  }
  result = a2[1];
  if (result)
    goto LABEL_58;
  result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *((_QWORD *)result + 1) = a2;
  v50 = a2[1];
  a2[1] = result;
  if (!v50)
    goto LABEL_58;
  if (*(_DWORD *)v50 != 1)
  {
    --*(_DWORD *)v50;
    goto LABEL_58;
  }
  WTF::fastFree(v50, v49);
  result = a2[1];
  if (result)
LABEL_58:
    ++*(_DWORD *)result;
  v51 = result;
  v42 = v22[5];
  if ((_DWORD)v42 == v22[4])
  {
    v43 = (uint64_t *)WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22 + 2, v42 + 1, (unint64_t)&v51);
    v45 = v22[5];
    v46 = *((_QWORD *)v22 + 1);
    v47 = *v43;
    *v43 = 0;
    *(_QWORD *)(v46 + 8 * v45) = v47;
    result = v51;
    v22[5] = v45 + 1;
    v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v44);
      else
        --*(_DWORD *)result;
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)v22 + 1) + 8 * v42) = result;
    v22[5] = v42 + 1;
  }
  return result;
}

uint64_t WebCore::LocalFrameViewLayoutContext::takeBoxesNeedingTransformUpdateAfterContainerLayout@<X0>(uint64_t this@<X0>, WebCore::RenderBlock *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v5 = (uint64_t *)(this + 200);
  v6 = *(_DWORD *)(this + 208);
  v7 = *(_DWORD *)(this + 212);
  *(_DWORD *)(this + 208) = v6 + 1;
  if (v6 > v7)
    this = WTF::WeakHashMap<WebCore::RenderBlock,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t *)(this + 200), a2);
  v8 = *((_QWORD *)a2 + 1);
  if (v8 && *(_QWORD *)(v8 + 8))
  {
    v14[0] = *((_QWORD *)a2 + 1);
    if (!*v5)
      goto LABEL_6;
    this = (uint64_t)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::SingleThreadWeakPtrImpl const*>(v5, v14);
    v11 = *v5;
    if (this)
    {
      v12 = this;
      if (!v11)
        goto LABEL_11;
    }
    else
    {
      if (!v11)
        goto LABEL_6;
      v12 = v11 + 24 * *(unsigned int *)(v11 - 4);
    }
    v11 += 24 * *(unsigned int *)(v11 - 4);
LABEL_11:
    if (v11 != v12)
    {
      v9 = *(_QWORD *)(v12 + 8);
      v13 = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      this = WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(v5, (WTF **)v12);
      v10 = v13;
      goto LABEL_7;
    }
LABEL_6:
    v9 = 0;
    v10 = 0;
LABEL_7:
    *a3 = v9;
    a3[1] = v10;
    return this;
  }
  v14[0] = 0;
  *a3 = 0;
  v14[1] = 0;
  a3[1] = 0;
  return WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, a2);
}

uint64_t *WebCore::Location::url(WebCore::Location *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;

  if (this && ((v1 = *((_QWORD *)this + 1)) != 0 ? (v2 = *(_BYTE *)(v1 + 56) == 0) : (v2 = 0), v2))
  {
    ++*(_DWORD *)(v1 + 24);
    v3 = WebCore::LocalDOMWindow::document((WebCore::LocalDOMWindow *)v1);
    v4 = (uint64_t *)WebCore::Document::urlForBindings(v3);
    v5 = v4;
    if ((v4[1] & 1) == 0)
      v5 = (uint64_t *)WTF::aboutBlankURL((WTF *)v4);
    if (*(_DWORD *)(v1 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
    else
      --*(_DWORD *)(v1 + 24);
  }
  else
  {
    v5 = WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  return v5;
}

WTF::StringImpl *WebCore::Location::href@<X0>(WebCore::Location *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;

  v3 = *((_QWORD *)this + 2);
  if (v3 && ((v4 = *(_QWORD *)(v3 + 8)) != 0 ? (v5 = *(_BYTE *)(v4 + 56) == 0) : (v5 = 0), v5))
  {
    ++*(_DWORD *)(v4 + 24);
    v6 = *(_QWORD *)(v4 + 72);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    {
      if (*(_BYTE *)(v7 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1960045A0);
      }
      v8 = v7 - 288;
    }
    else
    {
      v8 = 0;
    }
    v9 = (uint64_t *)WebCore::Document::urlForBindings(v8);
    v10 = v9;
    if ((v9[1] & 1) == 0)
      v10 = (uint64_t *)WTF::aboutBlankURL((WTF *)v9);
    if (*(_DWORD *)(v4 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    else
      --*(_DWORD *)(v4 + 24);
  }
  else
  {
    v10 = WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  v11 = (WTF::StringImpl *)*v10;
  if (*v10)
    *(_DWORD *)v11 += 2;
  v16 = v11;
  v12 = *(_OWORD *)(v10 + 3);
  v17 = *(_OWORD *)(v10 + 1);
  v18 = v12;
  WTF::URL::removeCredentials((WTF::URL *)&v16);
  result = v16;
  if (v16)
  {
    v15 = *(_DWORD *)v16;
    *(_DWORD *)v16 += 2;
    *a2 = result;
    v16 = 0;
    if (v15)
      *(_DWORD *)result = v15;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::Location::protocol@<X0>(WebCore::Location *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::URL *v9;
  WTF::URL *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t result;

  v3 = *((_QWORD *)this + 2);
  if (v3 && ((v4 = *(_QWORD *)(v3 + 8)) != 0 ? (v5 = *(_BYTE *)(v4 + 56) == 0) : (v5 = 0), v5))
  {
    ++*(_DWORD *)(v4 + 24);
    v6 = *(_QWORD *)(v4 + 72);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    {
      if (*(_BYTE *)(v7 + 178))
        goto LABEL_25;
      v8 = v7 - 288;
    }
    else
    {
      v8 = 0;
    }
    v9 = (WTF::URL *)WebCore::Document::urlForBindings(v8);
    v10 = v9;
    if ((*((_BYTE *)v9 + 8) & 1) == 0)
      v10 = (WTF::URL *)WTF::aboutBlankURL(v9);
    if (*(_DWORD *)(v4 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    else
      --*(_DWORD *)(v4 + 24);
  }
  else
  {
    v10 = (WTF::URL *)WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  v11 = (_BYTE *)WTF::URL::protocol(v10);
  if ((v12 & 0x80000000) != 0 || __OFADD__((_DWORD)v12, 1))
  {
    *a2 = 0;
    goto LABEL_25;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((v12 + 1), (v12 & 0xFF00000000) != 0, v11, v12, 58, a2);
  if (!*a2)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1960046D4);
  }
  return result;
}

uint64_t WebCore::Location::host(WebCore::Location *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::URL *v7;
  WTF::URL *v8;

  v1 = *((_QWORD *)this + 2);
  if (v1 && ((v2 = *(_QWORD *)(v1 + 8)) != 0 ? (v3 = *(_BYTE *)(v2 + 56) == 0) : (v3 = 0), v3))
  {
    ++*(_DWORD *)(v2 + 24);
    v4 = *(_QWORD *)(v2 + 72);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
    {
      if (*(_BYTE *)(v5 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1960047E4);
      }
      v6 = v5 - 288;
    }
    else
    {
      v6 = 0;
    }
    v7 = (WTF::URL *)WebCore::Document::urlForBindings(v6);
    v8 = v7;
    if ((*((_BYTE *)v7 + 8) & 1) == 0)
      v8 = (WTF::URL *)WTF::aboutBlankURL(v7);
    if (*(_DWORD *)(v2 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    else
      --*(_DWORD *)(v2 + 24);
  }
  else
  {
    v8 = (WTF::URL *)WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  return WTF::URL::hostAndPort(v8);
}

uint64_t WebCore::Location::hostname(WebCore::Location *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::URL *v7;
  WTF::URL *v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 2);
  if (v1 && ((v2 = *(_QWORD *)(v1 + 8)) != 0 ? (v3 = *(_BYTE *)(v2 + 56) == 0) : (v3 = 0), v3))
  {
    ++*(_DWORD *)(v2 + 24);
    v4 = *(_QWORD *)(v2 + 72);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
    {
      if (*(_BYTE *)(v5 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x196004914);
      }
      v6 = v5 - 288;
    }
    else
    {
      v6 = 0;
    }
    v7 = (WTF::URL *)WebCore::Document::urlForBindings(v6);
    v8 = v7;
    if ((*((_BYTE *)v7 + 8) & 1) == 0)
      v8 = (WTF::URL *)WTF::aboutBlankURL(v7);
    if (*(_DWORD *)(v2 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    else
      --*(_DWORD *)(v2 + 24);
  }
  else
  {
    v8 = (WTF::URL *)WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  WTF::URL::host(v8);
  if ((v9 & 0xFF00000000) != 0)
    return WTF::String::String();
  else
    return WTF::String::String();
}

uint64_t WebCore::Location::port@<X0>(WebCore::Location **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  _DWORD *v5;

  v3 = WebCore::Location::url(this[2]);
  result = WTF::URL::port((WTF::URL *)v3);
  if ((result & 0xFF0000) != 0)
    return WTF::String::number((WTF::String *)(unsigned __int16)result);
  v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v5 += 2;
  *a2 = v5;
  return result;
}

uint64_t WebCore::Location::pathname(WebCore::Location *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::URL *v7;
  WTF::URL *v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 2);
  if (v1 && ((v2 = *(_QWORD *)(v1 + 8)) != 0 ? (v3 = *(_BYTE *)(v2 + 56) == 0) : (v3 = 0), v3))
  {
    ++*(_DWORD *)(v2 + 24);
    v4 = *(_QWORD *)(v2 + 72);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
    {
      if (*(_BYTE *)(v5 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x196004ACCLL);
      }
      v6 = v5 - 288;
    }
    else
    {
      v6 = 0;
    }
    v7 = (WTF::URL *)WebCore::Document::urlForBindings(v6);
    v8 = v7;
    if ((*((_BYTE *)v7 + 8) & 1) == 0)
      v8 = (WTF::URL *)WTF::aboutBlankURL(v7);
    if (*(_DWORD *)(v2 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    else
      --*(_DWORD *)(v2 + 24);
  }
  else
  {
    v8 = (WTF::URL *)WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  WTF::URL::path(v8);
  if (!(_DWORD)v9)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((v9 & 0xFF00000000) != 0)
    return WTF::String::String();
  return WTF::String::String();
}

uint64_t WebCore::Location::search@<X0>(WebCore::Location *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::URL *v10;
  WTF::URL *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::URL *v20;
  WTF::URL *v21;
  uint64_t v22;
  _DWORD *v23;

  v4 = *((_QWORD *)this + 2);
  if (v4 && ((v5 = *(_QWORD *)(v4 + 8)) != 0 ? (v6 = *(_BYTE *)(v5 + 56) == 0) : (v6 = 0), v6))
  {
    ++*(_DWORD *)(v5 + 24);
    v7 = *(_QWORD *)(v5 + 72);
    if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    {
      if (*(_BYTE *)(v8 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x196004CE8);
      }
      v9 = v8 - 288;
    }
    else
    {
      v9 = 0;
    }
    v10 = (WTF::URL *)WebCore::Document::urlForBindings(v9);
    v11 = v10;
    if ((*((_BYTE *)v10 + 8) & 1) == 0)
      v11 = (WTF::URL *)WTF::aboutBlankURL(v10);
    if (*(_DWORD *)(v5 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
    else
      --*(_DWORD *)(v5 + 24);
  }
  else
  {
    v11 = (WTF::URL *)WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  result = WTF::URL::query(v11);
  if (v13)
  {
    v14 = *((_QWORD *)this + 2);
    if (v14 && ((v15 = *(_QWORD *)(v14 + 8)) != 0 ? (v16 = *(_BYTE *)(v15 + 56) == 0) : (v16 = 0), v16))
    {
      ++*(_DWORD *)(v15 + 24);
      v17 = *(_QWORD *)(v15 + 72);
      if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
      {
        if (*(_BYTE *)(v18 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x196004D08);
        }
        v19 = v18 - 288;
      }
      else
      {
        v19 = 0;
      }
      v20 = (WTF::URL *)WebCore::Document::urlForBindings(v19);
      v21 = v20;
      if ((*((_BYTE *)v20 + 8) & 1) == 0)
        v21 = (WTF::URL *)WTF::aboutBlankURL(v20);
      if (*(_DWORD *)(v15 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
      else
        --*(_DWORD *)(v15 + 24);
    }
    else
    {
      v21 = (WTF::URL *)WebCore::Location::url(void)const::nullURL;
      {
        WebCore::Location::url(void)const::nullURL[0] = 0;
        WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
      }
    }
    WTF::URL::queryWithLeadingQuestionMark(v21);
    if ((v22 & 0xFF00000000) != 0)
      return WTF::String::String();
    else
      return WTF::String::String();
  }
  else
  {
    v23 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v23 += 2;
    *a2 = v23;
  }
  return result;
}

uint64_t WebCore::Location::origin@<X0>(WebCore::Location *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::SecurityOrigin *v9;
  WebCore::SecurityOrigin *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WebCore::Location *v21;
  uint64_t v22;
  char v23;
  char *v24;

  v3 = *((_QWORD *)this + 2);
  if (v3 && ((v4 = *(_QWORD *)(v3 + 8)) != 0 ? (v5 = *(_BYTE *)(v4 + 56) == 0) : (v5 = 0), v5))
  {
    ++*(_DWORD *)(v4 + 24);
    v6 = *(_QWORD *)(v4 + 72);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    {
      if (*(_BYTE *)(v7 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x196004F14);
      }
      v8 = v7 - 288;
    }
    else
    {
      v8 = 0;
    }
    v9 = (WebCore::SecurityOrigin *)WebCore::Document::urlForBindings(v8);
    v10 = v9;
    if ((*((_BYTE *)v9 + 8) & 1) == 0)
      v10 = (WebCore::SecurityOrigin *)WTF::aboutBlankURL(v9);
    if (*(_DWORD *)(v4 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    else
      --*(_DWORD *)(v4 + 24);
  }
  else
  {
    v10 = (WebCore::SecurityOrigin *)WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  WebCore::SecurityOrigin::create(v10, &v22);
  v11 = v22;
  v12 = *(unsigned int *)(v22 + 32);
  if ((_DWORD)v12 == 1)
    goto LABEL_40;
  if ((_DWORD)v12 == -1)
  {
    v21 = (WebCore::Location *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Location::ancestorOrigins(v21);
  }
  v24 = &v23;
  v13 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v12])(&v24, v22 + 8);
  if (MEMORY[0x19AEA53F4](*v13, "file", 4) && *(_BYTE *)(v11 + 59))
LABEL_40:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    result = WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v11 + 8), a2);
  v22 = 0;
  do
  {
    v16 = __ldaxr((unsigned int *)v11);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v11));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v11);
    v18 = *(WTF::StringImpl **)(v11 + 48);
    *(_QWORD *)(v11 + 48) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(WTF::StringImpl **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v20 != -1)
      ((void (*)(char **, uint64_t))off_1E33FFD30[v20])(&v24, v11 + 8);
    *(_DWORD *)(v11 + 32) = -1;
    return WTF::fastFree((WTF *)v11, v15);
  }
  return result;
}

WTF::StringImpl *WebCore::Location::ancestorOrigins@<X0>(WebCore::Location *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SecurityOriginData *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Location *v21;
  _QWORD *v22;
  char v23;
  WTF::StringImpl *v24;

  result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *((_QWORD *)result + 1) = 0;
  v5 = (_QWORD *)((char *)result + 8);
  *((_QWORD *)result + 2) = 0;
  *a2 = result;
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = result;
    result = *(WTF::StringImpl **)(v6 + 8);
    if (result)
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 104))(result);
      if (result)
      {
        v9 = *((_QWORD *)result + 7);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            while (1)
            {
              if (!*(_BYTE *)(v10 + 144))
              {
                WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v10 + 296) + 192), v8);
                v12 = *(unsigned int *)(v11 + 32);
                if ((_DWORD)v12 == 1)
                  goto LABEL_22;
                if ((_DWORD)v12 == -1)
                {
                  v21 = (WebCore::Location *)std::__throw_bad_variant_access[abi:sn180100]();
                  return (WTF::StringImpl *)WebCore::Location::hash(v21, v22);
                }
                v13 = v11;
                v14 = (WebCore::SecurityOriginData *)(v11 + 8);
                v24 = (WTF::StringImpl *)&v23;
                v15 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v12])(&v24, v11 + 8);
                if (MEMORY[0x19AEA53F4](*v15, "file", 4) && *(_BYTE *)(v13 + 59))
LABEL_22:
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                else
                  WebCore::SecurityOriginData::toString(v14, &v24);
                v16 = *((unsigned int *)v7 + 5);
                if ((_DWORD)v16 == *((_DWORD *)v7 + 4))
                {
                  v18 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v16 + 1, (unint64_t)&v24);
                  v16 = *((unsigned int *)v7 + 5);
                  v17 = (_QWORD *)(*((_QWORD *)v7 + 1) + 8 * v16);
                }
                else
                {
                  v17 = (_QWORD *)(*v5 + 8 * v16);
                  v18 = (uint64_t *)&v24;
                }
                v19 = *v18;
                *v18 = 0;
                *v17 = v19;
                *((_DWORD *)v7 + 5) = v16 + 1;
                result = v24;
                v24 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
                  else
                    *(_DWORD *)result -= 2;
                }
              }
              v20 = *(_QWORD *)(v10 + 56);
              if (v20)
              {
                v10 = *(_QWORD *)(v20 + 8);
                if (v10)
                  continue;
              }
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Location::hash@<X0>(WebCore::Location *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::URL *v10;
  WTF::URL *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::URL *v20;
  WTF::URL *v21;
  uint64_t v22;
  _DWORD *v23;

  v4 = *((_QWORD *)this + 2);
  if (v4 && ((v5 = *(_QWORD *)(v4 + 8)) != 0 ? (v6 = *(_BYTE *)(v5 + 56) == 0) : (v6 = 0), v6))
  {
    ++*(_DWORD *)(v5 + 24);
    v7 = *(_QWORD *)(v5 + 72);
    if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    {
      if (*(_BYTE *)(v8 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1960052F4);
      }
      v9 = v8 - 288;
    }
    else
    {
      v9 = 0;
    }
    v10 = (WTF::URL *)WebCore::Document::urlForBindings(v9);
    v11 = v10;
    if ((*((_BYTE *)v10 + 8) & 1) == 0)
      v11 = (WTF::URL *)WTF::aboutBlankURL(v10);
    if (*(_DWORD *)(v5 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
    else
      --*(_DWORD *)(v5 + 24);
  }
  else
  {
    v11 = (WTF::URL *)WebCore::Location::url(void)const::nullURL;
    {
      WebCore::Location::url(void)const::nullURL[0] = 0;
      WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
    }
  }
  result = WTF::URL::fragmentIdentifier(v11);
  if (v13)
  {
    v14 = *((_QWORD *)this + 2);
    if (v14 && ((v15 = *(_QWORD *)(v14 + 8)) != 0 ? (v16 = *(_BYTE *)(v15 + 56) == 0) : (v16 = 0), v16))
    {
      ++*(_DWORD *)(v15 + 24);
      v17 = *(_QWORD *)(v15 + 72);
      if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
      {
        if (*(_BYTE *)(v18 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x196005314);
        }
        v19 = v18 - 288;
      }
      else
      {
        v19 = 0;
      }
      v20 = (WTF::URL *)WebCore::Document::urlForBindings(v19);
      v21 = v20;
      if ((*((_BYTE *)v20 + 8) & 1) == 0)
        v21 = (WTF::URL *)WTF::aboutBlankURL(v20);
      if (*(_DWORD *)(v15 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
      else
        --*(_DWORD *)(v15 + 24);
    }
    else
    {
      v21 = (WTF::URL *)WebCore::Location::url(void)const::nullURL;
      {
        WebCore::Location::url(void)const::nullURL[0] = 0;
        WTF::URL::invalidate((WTF::URL *)WebCore::Location::url(void)const::nullURL);
      }
    }
    WTF::URL::fragmentIdentifierWithLeadingNumberSign(v21);
    if ((v22 & 0xFF00000000) != 0)
      return WTF::String::String();
    else
      return WTF::String::String();
  }
  else
  {
    v23 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v23 += 2;
    *a2 = v23;
  }
  return result;
}

WebCore::Document *WebCore::Location::setLocation@<X0>(WebCore::Document *this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, const WTF::String *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  WebCore::Frame *v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Document *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  char v35;

  v9 = *((_QWORD *)this + 2);
  if (v9 && (this = *(WebCore::Document **)(v9 + 8)) != 0)
  {
    this = (WebCore::Document *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)this + 104))(this);
    v10 = this;
    if (this)
    {
      v11 = (unsigned int *)((char *)this + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    v10 = 0;
  }
  v13 = 1;
LABEL_7:
  v14 = *((_QWORD *)a3 + 9);
  if (!v14)
    goto LABEL_34;
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
    goto LABEL_34;
  if (*(_BYTE *)(v15 + 178))
  {
    __break(0xC471u);
    goto LABEL_53;
  }
  v16 = *(_QWORD *)(v15 + 240);
  if (!v16 || (v17 = *(_QWORD *)(v16 + 8)) == 0)
  {
LABEL_34:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_29;
  }
  v18 = (unsigned int *)(v17 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  this = *(WebCore::Document **)(v17 + 296);
  if (this)
  {
    WebCore::Document::completeURL(this, a4, (uint64_t)this + 848, 0, (WTF::URL *)&v34);
    if ((v35 & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 9;
      goto LABEL_44;
    }
    v20 = *((_QWORD *)a2 + 9);
    if (!v20 || (v21 = *(_QWORD *)(v20 + 8)) == 0)
    {
      v22 = 0;
      goto LABEL_20;
    }
    if (!*(_BYTE *)(v21 + 178))
    {
      v22 = (WebCore::Document *)(v21 - 288);
LABEL_20:
      if (WebCore::Document::canNavigate(v22, v10, (const WTF::URL *)&v34))
      {
        if (*(_BYTE *)(*(_QWORD *)(v17 + 280) + 216) || (v31 = *(_QWORD *)(v17 + 296)) == 0)
        {
          v24 = 0;
        }
        else if (WebCore::LocalDOMWindow::hasTransientActivation(*(WebCore::LocalDOMWindow **)(v31 + 696)))
        {
          v24 = 0;
        }
        else
        {
          v24 = 2;
        }
        v25 = (*(uint64_t (**)(WebCore::Frame *))(*(_QWORD *)v10 + 128))(v10);
        (*(void (**)(uint64_t, WebCore::LocalDOMWindow *, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v25 + 112))(v25, a2, &v34, v24, 0);
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
LABEL_24:
        this = v34;
        v34 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WebCore::Document *)WTF::StringImpl::destroy(this, v23);
          else
            *(_DWORD *)this -= 2;
        }
        goto LABEL_27;
      }
      *(_BYTE *)a5 = 14;
      a5[1] = 0;
LABEL_44:
      *((_BYTE *)a5 + 16) = 1;
      goto LABEL_24;
    }
    __break(0xC471u);
LABEL_53:
    JUMPOUT(0x1960055ECLL);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  do
  {
LABEL_27:
    v26 = __ldaxr(v18);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v18));
  if (!v27)
  {
    atomic_store(1u, v18);
    v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v33 = off_1E31FE290;
    *((_QWORD *)v33 + 1) = v18;
    v34 = v33;
    WTF::ensureOnMainThread();
    this = v34;
    v34 = 0;
    if (this)
      this = (WebCore::Document *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)this + 8))(this);
  }
LABEL_29:
  if ((v13 & 1) == 0)
  {
    v28 = (unsigned int *)((char *)v10 + 8);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = off_1E31FE290;
      *((_QWORD *)v32 + 1) = v28;
      v34 = v32;
      WTF::ensureOnMainThread();
      this = v34;
      v34 = 0;
      if (this)
        return (WebCore::Document *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebCore::Location::setProtocol@<X0>(uint64_t this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  WebCore::Document *v7;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;

  v6 = *(_QWORD *)(this + 16);
  if (v6
    && (v7 = (WebCore::Document *)this, (this = *(_QWORD *)(v6 + 8)) != 0)
    && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this)) != 0
    && !*(_BYTE *)(this + 144))
  {
    v10 = (unsigned int *)(this + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(this + 296);
    v13 = *(WTF::StringImpl **)(v12 + 736);
    if (v13)
      *(_DWORD *)v13 += 2;
    v20 = v13;
    v14 = v12 + 736;
    v15 = *(_OWORD *)(v14 + 24);
    v21 = *(_OWORD *)(v14 + 8);
    v22 = v15;
    if ((WTF::URL::setProtocol() & 1) != 0)
    {
      WebCore::Location::setLocation(v7, a2, a3, (const WTF::String *)&v20, (_QWORD *)a4);
    }
    else
    {
      *(_BYTE *)a4 = 9;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 16) = 1;
    }
    this = (uint64_t)v20;
    v20 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
      else
        *(_DWORD *)this -= 2;
    }
    do
    {
      v17 = __ldaxr(v10);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v10));
    if (!v18)
    {
      atomic_store(1u, v10);
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E31FE290;
      *((_QWORD *)v19 + 1) = v10;
      v20 = v19;
      WTF::ensureOnMainThread();
      this = (uint64_t)v20;
      v20 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::Location::setHost@<X0>(uint64_t this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  WebCore::Document *v7;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;

  v6 = *(_QWORD *)(this + 16);
  if (v6
    && (v7 = (WebCore::Document *)this, (this = *(_QWORD *)(v6 + 8)) != 0)
    && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this)) != 0
    && !*(_BYTE *)(this + 144))
  {
    v10 = (unsigned int *)(this + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(this + 296);
    v13 = *(WTF::StringImpl **)(v12 + 736);
    if (v13)
      *(_DWORD *)v13 += 2;
    v20 = v13;
    v14 = v12 + 736;
    v15 = *(_OWORD *)(v14 + 24);
    v21 = *(_OWORD *)(v14 + 8);
    v22 = v15;
    WTF::URL::setHostAndPort();
    WebCore::Location::setLocation(v7, a2, a3, (const WTF::String *)&v20, a4);
    this = (uint64_t)v20;
    v20 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
      else
        *(_DWORD *)this -= 2;
    }
    do
    {
      v17 = __ldaxr(v10);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v10));
    if (!v18)
    {
      atomic_store(1u, v10);
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E31FE290;
      *((_QWORD *)v19 + 1) = v10;
      v20 = v19;
      WTF::ensureOnMainThread();
      this = (uint64_t)v20;
      v20 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return this;
}

uint64_t WebCore::Location::setHostname@<X0>(uint64_t this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  WebCore::Document *v7;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;

  v6 = *(_QWORD *)(this + 16);
  if (v6
    && (v7 = (WebCore::Document *)this, (this = *(_QWORD *)(v6 + 8)) != 0)
    && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this)) != 0
    && !*(_BYTE *)(this + 144))
  {
    v10 = (unsigned int *)(this + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(this + 296);
    v13 = *(WTF::StringImpl **)(v12 + 736);
    if (v13)
      *(_DWORD *)v13 += 2;
    v20 = v13;
    v14 = v12 + 736;
    v15 = *(_OWORD *)(v14 + 24);
    v21 = *(_OWORD *)(v14 + 8);
    v22 = v15;
    WTF::URL::setHost();
    WebCore::Location::setLocation(v7, a2, a3, (const WTF::String *)&v20, a4);
    this = (uint64_t)v20;
    v20 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
      else
        *(_DWORD *)this -= 2;
    }
    do
    {
      v17 = __ldaxr(v10);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v10));
    if (!v18)
    {
      atomic_store(1u, v10);
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E31FE290;
      *((_QWORD *)v19 + 1) = v10;
      v20 = v19;
      WTF::ensureOnMainThread();
      this = (uint64_t)v20;
      v20 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::Location::setPort@<X0>(WTF::StringImpl *this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, const WTF::String *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  WebCore::Document *v7;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;

  v6 = *((_QWORD *)this + 2);
  if (!v6
    || (v7 = this, (this = *(WTF::StringImpl **)(v6 + 8)) == 0)
    || (this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 104))(this)) == 0
    || *((_BYTE *)this + 144))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return this;
  }
  v11 = (unsigned int *)((char *)this + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *((_QWORD *)this + 37);
  v14 = *(WTF::StringImpl **)(v13 + 736);
  if (v14)
    *(_DWORD *)v14 += 2;
  v24 = v14;
  v15 = v13 + 736;
  v16 = *(_OWORD *)(v15 + 24);
  v25 = *(_OWORD *)(v15 + 8);
  v26 = v16;
  v17 = *(_QWORD *)a4;
  if (!*(_QWORD *)a4)
  {
    v18 = 0;
    v19 = 0;
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(unsigned int *)(v17 + 4);
  if ((*(_BYTE *)(v17 + 16) & 4) != 0)
  {
LABEL_14:
    WTF::parseInteger<unsigned short,unsigned char>(v18, v19, 10, 0);
    goto LABEL_15;
  }
  WTF::parseInteger<unsigned short,char16_t>(v18, v19, 10, 0);
LABEL_15:
  WTF::URL::setPort();
  WebCore::Location::setLocation(v7, a2, a3, (const WTF::String *)&v24, a5);
  this = v24;
  v24 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v20);
    else
      *(_DWORD *)this -= 2;
  }
  do
  {
    v21 = __ldaxr(v11);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v11));
  if (!v22)
  {
    atomic_store(1u, v11);
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = off_1E31FE290;
    *((_QWORD *)v23 + 1) = v11;
    v24 = v23;
    WTF::ensureOnMainThread();
    this = v24;
    v24 = 0;
    if (this)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::Location::setPathname@<X0>(uint64_t this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  WebCore::Document *v7;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;

  v6 = *(_QWORD *)(this + 16);
  if (v6
    && (v7 = (WebCore::Document *)this, (this = *(_QWORD *)(v6 + 8)) != 0)
    && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this)) != 0
    && !*(_BYTE *)(this + 144))
  {
    v10 = (unsigned int *)(this + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(this + 296);
    v13 = *(WTF::StringImpl **)(v12 + 736);
    if (v13)
      *(_DWORD *)v13 += 2;
    v20 = v13;
    v14 = v12 + 736;
    v15 = *(_OWORD *)(v14 + 24);
    v21 = *(_OWORD *)(v14 + 8);
    v22 = v15;
    WTF::URL::setPath();
    WebCore::Location::setLocation(v7, a2, a3, (const WTF::String *)&v20, a4);
    this = (uint64_t)v20;
    v20 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
      else
        *(_DWORD *)this -= 2;
    }
    do
    {
      v17 = __ldaxr(v10);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v10));
    if (!v18)
    {
      atomic_store(1u, v10);
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E31FE290;
      *((_QWORD *)v19 + 1) = v10;
      v20 = v19;
      WTF::ensureOnMainThread();
      this = (uint64_t)v20;
      v20 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return this;
}

uint64_t WebCore::Location::setSearch@<X0>(uint64_t this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  WebCore::Document *v7;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;

  v6 = *(_QWORD *)(this + 16);
  if (v6
    && (v7 = (WebCore::Document *)this, (this = *(_QWORD *)(v6 + 8)) != 0)
    && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this)) != 0
    && !*(_BYTE *)(this + 144))
  {
    v10 = (unsigned int *)(this + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(this + 296);
    v13 = *(WTF::StringImpl **)(v12 + 736);
    if (v13)
      *(_DWORD *)v13 += 2;
    v20 = v13;
    v14 = v12 + 736;
    v15 = *(_OWORD *)(v14 + 24);
    v21 = *(_OWORD *)(v14 + 8);
    v22 = v15;
    WTF::URL::setQuery();
    WebCore::Location::setLocation(v7, a2, a3, (const WTF::String *)&v20, a4);
    this = (uint64_t)v20;
    v20 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
      else
        *(_DWORD *)this -= 2;
    }
    do
    {
      v17 = __ldaxr(v10);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v10));
    if (!v18)
    {
      atomic_store(1u, v10);
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E31FE290;
      *((_QWORD *)v19 + 1) = v10;
      v20 = v19;
      WTF::ensureOnMainThread();
      this = (uint64_t)v20;
      v20 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::Location::setHash@<X0>(WTF::StringImpl *this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, const WTF::String *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  WebCore::Document *v7;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;

  v6 = *((_QWORD *)this + 2);
  if (!v6
    || (v7 = this, (this = *(WTF::StringImpl **)(v6 + 8)) == 0)
    || (this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 104))(this)) == 0
    || *((_BYTE *)this + 144))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return this;
  }
  v11 = (unsigned int *)((char *)this + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *((_QWORD *)this + 37);
  v14 = *(WTF::StringImpl **)(v13 + 736);
  if (v14)
    *(_DWORD *)v14 += 2;
  v30 = v14;
  v15 = v13 + 736;
  v16 = *(_OWORD *)(v15 + 24);
  v31 = *(_OWORD *)(v15 + 8);
  v32 = v16;
  v17 = (unsigned __int8 *)WTF::URL::fragmentIdentifier((WTF::URL *)&v30);
  v19 = v18;
  v20 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v21 = *(unsigned int *)(v20 + 16);
    v22 = *(unsigned int *)(v20 + 4);
    this = (WTF::StringImpl *)WTF::StringImpl::startsWith();
    if ((_DWORD)this)
    {
      if (v22 >= 2)
      {
        v29 = (v22 - 1);
        if (((v21 >> 2) & 1) != 0)
        {
          if (v22 - 1 >= v29)
            goto LABEL_13;
        }
        else if (v22 - 1 >= v29)
        {
          goto LABEL_13;
        }
        __break(1u);
        return this;
      }
    }
  }
LABEL_13:
  WTF::URL::setFragmentIdentifier();
  v23 = (unsigned __int8 *)WTF::URL::fragmentIdentifier((WTF::URL *)&v30);
  if (WTF::equalIgnoringNullity(v17, v19, v23, v24))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  else
  {
    WebCore::Location::setLocation(v7, a2, a3, (const WTF::String *)&v30, a5);
  }
  this = v30;
  v30 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v25);
    else
      *(_DWORD *)this -= 2;
  }
  do
  {
    v26 = __ldaxr(v11);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v11));
  if (!v27)
  {
    atomic_store(1u, v11);
    v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = off_1E31FE290;
    *((_QWORD *)v28 + 1) = v11;
    v30 = v28;
    WTF::ensureOnMainThread();
    this = v30;
    v30 = 0;
    if (this)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

BOOL WTF::equalIgnoringNullity(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v4;
  _BOOL8 result;
  uint64_t v6;
  uint8x8_t *v7;
  unsigned int v8;
  int16x8_t *v9;
  int16x8_t *v10;
  unsigned int v11;
  __int32 v12;
  __int32 v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint16x8_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8x8_t *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint8x16_t v37;
  unsigned int v38;
  uint8x16_t v39;
  BOOL v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint16x8_t v46;
  unsigned int v47;
  uint16x8_t v48;
  BOOL v49;
  uint16x8_t v50;
  unsigned int v51;
  uint16x8_t v52;
  BOOL v53;
  uint16x8_t v54;
  unsigned int v55;
  uint16x8_t v56;
  BOOL v57;

  v4 = a1;
  result = (_DWORD)a2 == (_DWORD)a4 && a1 == a3;
  if (v4 == a3 || (_DWORD)a2 != (_DWORD)a4)
    return result;
  if (!(_DWORD)a2)
    return 1;
  v6 = a4 & 0xFF00000000;
  v7 = (uint8x8_t *)a4;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (v6)
    {
      if (!(_DWORD)a4)
        goto LABEL_58;
      if (*(_WORD *)v4 != *a3)
        return 0;
      v4 += 2;
      LODWORD(v6) = a4 - 1;
      v7 = (uint8x8_t *)(a3 + 1);
      if ((a4 - 1) < 8)
      {
        if (v6 >= 4)
        {
          v20 = (v7->u32[0] | ((unint64_t)v7->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v14 = ((v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL) == *(_QWORD *)v4;
          v21 = v6 & 3;
          v22 = (*(unsigned int *)((char *)v7->u32 + v21) | ((unint64_t)*(unsigned int *)((char *)v7->u32 + v21) << 16)) & 0xFFFF0000FFFFLL;
          v23 = (v22 | (v22 << 8)) & 0xFF00FF00FF00FFLL;
          v24 = *(_QWORD *)&v4[2 * v21];
          return v14 && v23 == v24;
        }
        goto LABEL_59;
      }
      v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v4, (int16x8_t)vmovl_u8(*v7));
      v46.i16[0] = vminvq_u16(v46);
      if (v46.i32[0])
      {
        v47 = v6 & 7;
        do
        {
          v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v4[2 * v47], (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v7 + v47)));
          v48.i16[0] = vminvq_u16(v48);
          result = v48.i32[0] != 0;
          v47 += 8;
          if (v48.i32[0])
            v49 = v47 >= v6;
          else
            v49 = 1;
        }
        while (!v49);
        return result;
      }
      return 0;
    }
    if (!(_DWORD)a4)
      goto LABEL_58;
    if (*(unsigned __int16 *)v4 != *(unsigned __int16 *)a3)
      return 0;
    v18 = a4 - 1;
    if ((_DWORD)a4 != 1)
    {
      v9 = (int16x8_t *)(v4 + 2);
      v10 = (int16x8_t *)(a3 + 2);
      if ((_DWORD)a4 == 2)
        goto LABEL_14;
      switch(31 - __clz(a4 - 2))
      {
        case 0u:
          v12 = v9->i32[0];
          v13 = v10->i32[0];
          return v12 == v13;
        case 1u:
          if (v9->i32[0] != v10->i32[0])
            return 0;
          v12 = *(_DWORD *)&v4[2 * a4 - 4];
          v17 = &a3[2 * a4];
LABEL_28:
          v13 = *((_DWORD *)v17 - 1);
          return v12 == v13;
        case 2u:
          if (v9->i64[0] != v10->i64[0])
            return 0;
          v15 = *(_QWORD *)&v4[2 * a4 - 8];
          v16 = &a3[2 * a4];
          return v15 == *((_QWORD *)v16 - 1);
        case 3u:
          v19 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v4[2 * a4 - 16], *(int16x8_t *)&a3[2 * a4 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v4 + 2), *(int16x8_t *)(a3 + 2)));
          v19.i16[0] = vminvq_u16(v19);
          return v19.i32[0] != 0;
        default:
          v54 = (uint16x8_t)vceqq_s16(*v9, *v10);
          v54.i16[0] = vminvq_u16(v54);
          if (!v54.i32[0])
            return 0;
          if (v18 < 8)
            return 1;
          v55 = v18 & 7;
          do
          {
            v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v9 + 2 * v55), *(int16x8_t *)((char *)v10 + 2 * v55));
            v56.i16[0] = vminvq_u16(v56);
            result = v56.i32[0] != 0;
            v55 += 8;
            if (v56.i32[0])
              v57 = v55 >= v18;
            else
              v57 = 1;
          }
          while (!v57);
          break;
      }
      return result;
    }
    return 1;
  }
  if (!v6)
  {
    if (!(_DWORD)a4)
      goto LABEL_58;
    if (*(_WORD *)a3 != *v4)
      return 0;
    v25 = (uint8x8_t *)(v4 + 1);
    v26 = a4 - 1;
    v4 = a3 + 2;
    if ((a4 - 1) < 8)
    {
      if (v26 >= 4)
      {
        v27 = (v25->u32[0] | ((unint64_t)v25->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v14 = ((v27 | (v27 << 8)) & 0xFF00FF00FF00FFLL) == *(_QWORD *)v4;
        v28 = v26 & 3;
        v29 = (*(unsigned int *)((char *)v25->u32 + v28) | ((unint64_t)*(unsigned int *)((char *)v25->u32 + v28) << 16)) & 0xFFFF0000FFFFLL;
        v30 = (v29 | (v29 << 8)) & 0xFF00FF00FF00FFLL;
        v31 = *(_QWORD *)&v4[2 * v28];
        return v14 && v30 == v31;
      }
      if (v26 >= 2)
      {
        v41 = (v25->u16[0] | (v25->u16[0] << 8)) & 0xFF00FF;
        v42 = *(_DWORD *)v4;
        v43 = v26 & 1;
        v44 = (*(unsigned __int16 *)((char *)v25->u16 + v43) | (*(unsigned __int16 *)((char *)v25->u16 + v43) << 8)) & 0xFF00FF;
        v45 = *(_DWORD *)&v4[2 * v43];
        return v41 == v42 && v44 == v45;
      }
      if ((_DWORD)a4 != 2)
        return 1;
      v13 = v25->u8[0];
      goto LABEL_105;
    }
    v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v4, (int16x8_t)vmovl_u8(*v25));
    v50.i16[0] = vminvq_u16(v50);
    if (v50.i32[0])
    {
      v51 = v26 & 7;
      do
      {
        v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v4[2 * v51], (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v25 + v51)));
        v52.i16[0] = vminvq_u16(v52);
        result = v52.i32[0] != 0;
        v51 += 8;
        if (v52.i32[0])
          v53 = v51 >= v26;
        else
          v53 = 1;
      }
      while (!v53);
      return result;
    }
    return 0;
  }
  if (!(_DWORD)a4)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    if (v6 >= 2)
    {
      v32 = (v7->u16[0] | (v7->u16[0] << 8)) & 0xFF00FF;
      v33 = *(_DWORD *)v4;
      v34 = v6 & 1;
      v35 = (*(unsigned __int16 *)((char *)v7->u16 + v34) | (*(unsigned __int16 *)((char *)v7->u16 + v34) << 8)) & 0xFF00FF;
      v36 = *(_DWORD *)&v4[2 * v34];
      return v32 == v33 && v35 == v36;
    }
    if ((_DWORD)v6 != 1)
      return 1;
    v13 = v7->u8[0];
LABEL_105:
    v12 = *(unsigned __int16 *)v4;
    return v12 == v13;
  }
  if (*v4 != *a3)
    return 0;
  v8 = a4 - 1;
  if ((_DWORD)a4 == 1)
    return 1;
  v9 = (int16x8_t *)(v4 + 1);
  v10 = (int16x8_t *)(a3 + 1);
  if ((_DWORD)a4 == 2)
  {
    v12 = v9->u8[0];
    v13 = v10->u8[0];
    return v12 == v13;
  }
  v11 = 32 - __clz(a4 - 2);
  if (v11 == 1)
  {
LABEL_14:
    v12 = v9->u16[0];
    v13 = v10->u16[0];
    return v12 == v13;
  }
  switch(v11)
  {
    case 2u:
      if (v9->u16[0] != v10->u16[0])
        return 0;
      v12 = *(unsigned __int16 *)&v4[a4 - 2];
      v13 = *(unsigned __int16 *)&a3[a4 - 2];
      return v12 == v13;
    case 3u:
      if (v9->i32[0] != v10->i32[0])
        return 0;
      v12 = *(_DWORD *)&v4[a4 - 4];
      v17 = &a3[a4];
      goto LABEL_28;
    case 4u:
      if (v9->i64[0] != v10->i64[0])
        return 0;
      v15 = *(_QWORD *)&v4[a4 - 8];
      v16 = &a3[a4];
      return v15 == *((_QWORD *)v16 - 1);
    case 5u:
      v19 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v4[a4 - 16], *(int8x16_t *)&a3[a4 - 16]), vceqq_s8(*(int8x16_t *)(v4 + 1), *(int8x16_t *)(a3 + 1)));
      v19.i8[0] = vminvq_u8((uint8x16_t)v19);
      return v19.i32[0] != 0;
    default:
      v37 = (uint8x16_t)vceqq_s8(*(int8x16_t *)v9, *(int8x16_t *)v10);
      v37.i8[0] = vminvq_u8(v37);
      if (!v37.i32[0])
        return 0;
      if (v8 < 0x10)
        return 1;
      v38 = v8 & 0xF;
      do
      {
        v39 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v9 + v38), *(int8x16_t *)((char *)v10 + v38));
        v39.i8[0] = vminvq_u8(v39);
        result = v39.i32[0] != 0;
        v38 += 16;
        if (v39.i32[0])
          v40 = v38 >= v8;
        else
          v40 = 1;
      }
      while (!v40);
      break;
  }
  return result;
}

unsigned int *WebCore::Location::replace@<X0>(unsigned int *this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, const WTF::String *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  WebCore::Frame *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::Document *v14;
  WTF::StringImpl *v15;
  WebCore::Document *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  char v21;

  v6 = *((_QWORD *)this + 2);
  if (!v6
    || (this = *(unsigned int **)(v6 + 8)) == 0
    || (this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 104))(this)) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return this;
  }
  v10 = (WebCore::Frame *)this;
  v11 = this + 2;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = WebCore::LocalDOMWindow::frame(a3);
  if (v13)
  {
    v14 = *(WebCore::Document **)(v13 + 296);
    if (v14)
    {
      WebCore::Document::completeURL(v14, a4, (uint64_t)v14 + 848, 0, (WTF::URL *)&v20);
      if ((v21 & 1) != 0)
      {
        v16 = (WebCore::Document *)WebCore::LocalDOMWindow::document(a2);
        if (WebCore::Document::canNavigate(v16, v10, (const WTF::URL *)&v20))
        {
          v17 = (*(uint64_t (**)(WebCore::Frame *))(*(_QWORD *)v10 + 128))(v10);
          (*(void (**)(uint64_t, WebCore::LocalDOMWindow *, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v17 + 112))(v17, a2, &v20, 2, 1);
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
          goto LABEL_11;
        }
        v19 = 14;
      }
      else
      {
        v19 = 9;
      }
      *(_BYTE *)a5 = v19;
      a5[1] = 0;
      *((_BYTE *)a5 + 16) = 1;
LABEL_11:
      v18 = v20;
      v20 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v15);
        else
          *(_DWORD *)v18 -= 2;
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
    }
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
}

uint64_t WebCore::Location::reload(uint64_t this, WebCore::LocalDOMWindow *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  char isSameOriginDomain;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;

  v2 = *(_QWORD *)(this + 16);
  if (!v2)
    return this;
  this = *(_QWORD *)(v2 + 8);
  if (!this)
    return this;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this);
  if (!this)
    return this;
  v5 = this;
  if (*(_BYTE *)(this + 144))
    return this;
  v6 = (unsigned int *)(this + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *((_QWORD *)a2 + 9);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    if (*(_BYTE *)(v9 + 178))
    {
      __break(0xC471u);
      goto LABEL_80;
    }
    v10 = v9 - 288;
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(v10 + 24) += 2;
  v11 = *(_QWORD *)(this + 296);
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v10 + 192), v4);
  v14 = v12;
  if (v12)
  {
    do
      v15 = __ldaxr(v12);
    while (__stlxr(v15 + 1, v12));
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), v13);
  v17 = v16;
  if (v16)
  {
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
  }
  isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain((WebCore::SecurityOrigin *)v14, (const WebCore::SecurityOrigin *)v16);
  do
  {
    v21 = __ldaxr(v17);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v17));
  if (v22)
  {
    if (!v14)
      goto LABEL_22;
    goto LABEL_20;
  }
  atomic_store(1u, v17);
  v35 = (WTF::StringImpl *)*((_QWORD *)v17 + 6);
  *((_QWORD *)v17 + 6) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v19);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (WTF::StringImpl *)*((_QWORD *)v17 + 5);
  *((_QWORD *)v17 + 5) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v19);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = v17[8];
  if ((_DWORD)v37 != -1)
    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33FFD30[v37])(&v42, v17 + 2);
  v17[8] = -1;
  WTF::fastFree((WTF *)v17, v19);
  if (v14)
  {
    do
    {
LABEL_20:
      v23 = __ldaxr(v14);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v14));
    if (!v24)
    {
      atomic_store(1u, v14);
      v39 = (WTF::StringImpl *)*((_QWORD *)v14 + 6);
      *((_QWORD *)v14 + 6) = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v19);
        else
          *(_DWORD *)v39 -= 2;
      }
      v40 = (WTF::StringImpl *)*((_QWORD *)v14 + 5);
      *((_QWORD *)v14 + 5) = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v19);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v14[8];
      if ((_DWORD)v41 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33FFD30[v41])(&v42, v14 + 2);
      v14[8] = -1;
      WTF::fastFree((WTF *)v14, v19);
    }
  }
LABEL_22:
  if ((isSameOriginDomain & 1) != 0)
  {
    this = WTF::URL::protocolIsJavaScript((WTF::URL *)(v11 + 736));
    if ((this & 1) == 0)
    {
      v26 = *(_QWORD **)(v5 + 152);
      ++*(_DWORD *)v26;
      this = (uint64_t)WebCore::NavigationScheduler::scheduleRefresh(v26, (WebCore::Document *)v10);
      if (!*(_DWORD *)v26)
      {
        __break(0xC471u);
        JUMPOUT(0x196006C38);
      }
      --*(_DWORD *)v26;
    }
    goto LABEL_39;
  }
  v27 = *(WTF::StringImpl **)(v11 + 696);
  ++*((_DWORD *)v27 + 6);
  this = (uint64_t)WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(v27, a2, 1, (char **)&v42);
  if (v42)
  {
    if (!*((_DWORD *)v42 + 1)
      || (v28 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 104))(v27)) == 0
      || (v29 = *(_QWORD *)(v28 + 24)) == 0
      || (v30 = *(_QWORD *)(v29 + 8)) == 0
      || (v31 = *(_QWORD *)(v30 + 792)) == 0)
    {
LABEL_34:
      this = (uint64_t)v42;
      v42 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v25);
        else
          *(_DWORD *)this -= 2;
      }
      goto LABEL_37;
    }
    ++*(_DWORD *)(v31 + 16);
    WebCore::PageConsoleClient::addMessage((uint64_t *)v31, 1, 2, (uint64_t)&v42, 0, 0);
    v32 = *(_DWORD *)(v31 + 16);
    if (v32)
    {
      *(_DWORD *)(v31 + 16) = v32 - 1;
      goto LABEL_34;
    }
    __break(0xC471u);
LABEL_80:
    JUMPOUT(0x196006C18);
  }
LABEL_37:
  if (*((_DWORD *)v27 + 6) == 1)
    this = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 72))(v27);
  else
    --*((_DWORD *)v27 + 6);
LABEL_39:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, v25);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v25);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  do
  {
    v33 = __ldaxr(v6);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v6));
  if (!v34)
  {
    atomic_store(1u, v6);
    v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v38 = off_1E31FE290;
    *((_QWORD *)v38 + 1) = v6;
    v42 = v38;
    WTF::ensureOnMainThread();
    this = (uint64_t)v42;
    v42 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void *WebCore::LoginStatus::bisoHeap(WebCore::LoginStatus *this)
{
  return &WebCore::LoginStatus::bisoHeap(void)::heap;
}

uint64_t WebCore::LoginStatus::operator new(uint64_t this)
{
  if (this == 40)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::LoginStatus::create@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  return WebCore::LoginStatus::create(a1, a2, a3, a4, a5, dbl_1969F5970[a4 == 2]);
}

uint64_t WebCore::LoginStatus::create@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  _DWORD *v8;
  uint64_t result;
  char v10;
  int v11;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  __int128 *v31;
  uint64_t v32;
  double v33;
  _DWORD *v34;
  _DWORD *v35;
  __int128 v36;
  unsigned __int16 *v37;
  uint64_t v38;

  v8 = (_DWORD *)*a1;
  if (!v8 || !v8[1] || MEMORY[0x19AEA53F4]())
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = 14;
LABEL_3:
    *(_BYTE *)a5 = v10;
LABEL_4:
    v11 = 1;
    goto LABEL_5;
  }
  v16 = (_DWORD *)*a2;
  if (!*a2 || (v17 = v16[1], !(_DWORD)v17))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = 9;
    goto LABEL_3;
  }
  if (v17 >= 0x41)
  {
    result = WTF::makeString<WTF::ASCIILiteral,unsigned int>((uint64_t)"LoginStatus usernames cannot be longer than ", 45, 0x40u, &v38);
    v18 = v38;
    *(_BYTE *)a5 = 9;
    *(_QWORD *)(a5 + 8) = v18;
    goto LABEL_4;
  }
  v19 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
  if ((v16[4] & 4) == 0)
  {
    while (1)
    {
      v21 = *v19++;
      v20 = v21;
      if (v21 > 0xFF)
      {
        v37 = v19;
        v23 = MEMORY[0x19AEA858C]();
        v19 = v37;
        if (v23 == 9)
          goto LABEL_23;
      }
      else if (v20 <= 0x20 && ((1 << v20) & 0x100003E00) != 0)
      {
        goto LABEL_23;
      }
      if (!--v17)
        goto LABEL_30;
    }
  }
  do
  {
    v24 = *(unsigned __int8 *)v19;
    v19 = (unsigned __int16 *)((char *)v19 + 1);
    v25 = (1 << v24) & 0x100003E00;
    if (v24 <= 0x20 && v25 != 0)
    {
LABEL_23:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = 3;
      goto LABEL_3;
    }
    --v17;
  }
  while (v17);
LABEL_30:
  v27 = bmalloc::api::isoAllocate();
  v28 = v27;
  v29 = (_DWORD *)*a1;
  if (*a1)
    *v29 += 2;
  *(_QWORD *)v27 = v29;
  v30 = (_DWORD *)*a2;
  if (*a2)
    *v30 += 2;
  *(_QWORD *)(v27 + 8) = v30;
  *(_BYTE *)(v27 + 16) = a3;
  v31 = (__int128 *)(v27 + 16);
  *(_BYTE *)(v27 + 17) = a4;
  WTF::WallTime::now((WTF::WallTime *)v27);
  v33 = dbl_1969F5970[*(_BYTE *)(v28 + 17) == 2];
  if (v33 >= a6)
    v33 = a6;
  *(_QWORD *)(v28 + 24) = v32;
  *(double *)(v28 + 32) = v33;
  result = bmalloc::api::isoAllocate();
  v34 = *(_DWORD **)v28;
  if (*(_QWORD *)v28)
    *v34 += 2;
  *(_QWORD *)result = v34;
  v35 = *(_DWORD **)(v28 + 8);
  if (v35)
    *v35 += 2;
  v11 = 0;
  *(_QWORD *)(result + 8) = v35;
  v36 = *v31;
  *(_QWORD *)(result + 32) = *(_QWORD *)(v28 + 32);
  *(_OWORD *)(result + 16) = v36;
  *(_QWORD *)a5 = result;
LABEL_5:
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

uint64_t WebCore::LoginStatus::setTimeToLive(uint64_t result, double a2)
{
  if (dbl_1969F5970[*(_BYTE *)(result + 17) == 2] < a2)
    a2 = dbl_1969F5970[*(_BYTE *)(result + 17) == 2];
  *(double *)(result + 32) = a2;
  return result;
}

BOOL WebCore::LoginStatus::hasExpired(WebCore::LoginStatus *this)
{
  double v2;

  WTF::WallTime::now(this);
  return v2 > *((double *)this + 4) + *((double *)this + 3);
}

double WebCore::LoginStatus::expiry(WebCore::LoginStatus *this)
{
  double v2;

  WTF::WallTime::now(this);
  return *((double *)this + 4) + v2;
}

uint64_t WebCore::releaseMemory(char a1, uint64_t a2, char a3, WebCore::RenderTheme *a4)
{
  uint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  WebCore::HRTFElevation *v16;
  void *v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  WTF *v31;
  uint64_t v32;
  WebCore::Document **v33;
  WebCore::Document *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  const WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WebCore::CachedResourceLoader *v45;
  WebCore::Document *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  WTF *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t *v63;
  char v65;
  uint64_t *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;

  v65 = a1;
  v8 = kdebug_trace();
  if ((a1 & 1) != 0)
  {
    v9 = (uint64_t *)MEMORY[0x19AEA50A0](v8);
    if ((a3 & 1) == 0)
    {
      v11 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v9);
      v12 = atomic_load((unsigned __int8 *)(v11 + 4));
      if (*(_BYTE *)(v11 + 7))
        v13 = 1;
      else
        v13 = v12 == 2;
      if (v13)
        v14 = 2;
      else
        v14 = 1;
      {
        WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
      }
      v15 = dword_1ECE90590;
      dword_1ECE90590 = 0;
      v9 = WebCore::BackForwardCache::prune(&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, v14);
      dword_1ECE90590 = v15;
    }
    if ((a4 & 1) == 0)
    {
      if ((WTF::isMainThread((WTF *)v9) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1960074ACLL);
      }
      {
        WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
      }
      WebCore::MemoryCache::pruneLiveResourcesToSize((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, 0, 1);
    }
    {
      WebCore::CSSValuePool::singleton(void)::pool = 0;
      unk_1ECE88B90 = 0;
      qword_1ECE88B98 = 0;
    }
    v16 = (WebCore::HRTFElevation *)WebCore::CSSValuePool::drain(&WebCore::CSSValuePool::singleton(void)::pool, v10);
    WebCore::HRTFElevation::clearCache(v16, v17);
    v18 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *v18 = (uint64_t)off_1E33FFD50;
    v66 = v18;
    WebCore::Page::forEachPage((uint64_t)&v66);
    (*(void (**)(uint64_t *))(*v18 + 8))(v18);
    {
      WebCore::Document::allDocumentsMap(void)::documents = 0;
    }
    WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::values(&WebCore::Document::allDocumentsMap(void)::documents, &v66);
    if (*v66 && (v20 = *(unsigned int *)(*v66 - 12), (_DWORD)v20))
    {
      if (v20 >> 29)
      {
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x19600748CLL);
      }
      v21 = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
    }
    else
    {
      v21 = 0;
    }
    v22 = v67;
    v23 = v69;
    if (v67 == v69)
    {
      v51 = 1;
      v31 = v21;
    }
    else
    {
      v24 = 0;
      v25 = v68;
      v26 = 1;
      do
      {
        v27 = v26;
        v28 = *(_QWORD *)(v22[4] + 8);
        *(_DWORD *)(v28 + 24) += 2;
        *((_QWORD *)v21 + v24) = v28;
        while (1)
        {
          v22 += 6;
          if (v22 == v25)
            break;
          v29 = v22[2];
          if (*v22 | v22[1] | v29)
            v30 = v29 == -1;
          else
            v30 = 1;
          if (!v30)
            goto LABEL_37;
        }
        v22 = v25;
LABEL_37:
        ++v24;
        v26 = v27 + 1;
      }
      while (v22 != v23);
      v31 = (WTF *)((char *)v21 + 8 * v24);
      if (v24)
      {
        v32 = 8 * v27;
        v33 = (WebCore::Document **)v21;
        while (1)
        {
          v34 = *v33;
          v35 = *((_QWORD *)*v33 + 272);
          if (v35)
          {
            *((_QWORD *)v34 + 272) = 0;
            WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v35, v19);
            v36 = 0;
            v37 = *((_QWORD *)v34 + 272);
            *((_DWORD *)v34 + 546) = 0;
            if (v37)
            {
              v36 = *(_DWORD *)(v37 - 12);
              if (v36 > 0x7FFFFFFE)
                v36 = 0x7FFFFFFF;
            }
          }
          else
          {
            v36 = 0;
            *((_DWORD *)v34 + 546) = 0;
          }
          *((_DWORD *)v34 + 547) = 2 * v36;
          WebCore::Style::Scope::releaseMemory(*((WebCore::Style::Scope **)*v33 + 166), v19);
          v40 = *((_QWORD *)*v33 + 331);
          if (v40)
          {
            v41 = *(_DWORD *)(v40 + 8) + 1;
            *(_DWORD *)(v40 + 8) = v41;
            v42 = *(_QWORD *)(v40 + 96);
            v43 = *(_QWORD *)(v42 + 56);
            if (v43)
            {
              *(_QWORD *)(v42 + 56) = 0;
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v43, v38);
              v41 = *(_DWORD *)(v40 + 8);
            }
            v44 = v41 - 1;
            if (v44)
              *(_DWORD *)(v40 + 8) = v44;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          }
          v45 = (WebCore::CachedResourceLoader *)*((_QWORD *)*v33 + 90);
          if (!v45)
            v45 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(*v33, v38);
          WebCore::CachedResourceLoader::garbageCollectDocumentResources(v45, (WTF::StringImpl *)v38, v39);
          v46 = *v33;
          v47 = *((_DWORD *)*v33 + 6);
          *((_DWORD *)v46 + 6) = v47 + 2;
          if ((*((_BYTE *)v46 + 3358) & 8) != 0)
          {
            v48 = *((_QWORD *)v46 + 441);
            if (v48)
            {
              v49 = *(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL;
              if (v49)
              {
                if ((*(_BYTE *)(v49 + 45) & 2) != 0)
                  goto LABEL_116;
                if (*(_BYTE *)(v49 + 46) == 7)
                {
                  v50 = *(_DWORD **)(v49 + 232);
                  if (v50)
                  {
                    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v50 + 88))(v50))
                    {
                      ++v50[2];
                      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 408))(v50);
                      if (v50[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
                      else
                        --v50[2];
                    }
                  }
                }
              }
            }
            v47 = *((_DWORD *)v46 + 6) - 2;
            if (*((_DWORD *)v46 + 6) == 2)
            {
LABEL_68:
              if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v46, v19);
              goto LABEL_57;
            }
          }
          else if (!v47)
          {
            goto LABEL_68;
          }
          *((_DWORD *)v46 + 6) = v47;
LABEL_57:
          ++v33;
          v32 -= 8;
          if (!v32)
          {
            v51 = 0;
            goto LABEL_74;
          }
        }
      }
      v51 = 1;
    }
LABEL_74:
    {
      WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    }
    WebCore::GCController::deleteAllCode((WTF::RunLoop *)&WebCore::GCController::singleton(void)::controller);
    {
      if (WebCore::HTMLMediaElement::allMediaElements(void)::elements
        && *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12))
      {
        v52 = *(unsigned int *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 4);
        if ((_DWORD)v52)
        {
          v53 = 8 * v52;
          v54 = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
          while ((unint64_t)(*(_QWORD *)v54 + 1) <= 1)
          {
            v54 += 8;
            v53 -= 8;
            if (!v53)
              goto LABEL_97;
          }
        }
        else
        {
          v54 = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
        }
        v55 = WebCore::HTMLMediaElement::allMediaElements(void)::elements + 8 * v52;
        if (v55 != v54)
        {
LABEL_86:
          v56 = *(_QWORD *)(*(_QWORD *)v54 + 8);
          *(_DWORD *)(v56 + 24) += 2;
          WebCore::HTMLMediaElement::purgeBufferedDataIfPossible(v56);
          if (*(_DWORD *)(v56 + 24) == 2)
          {
            if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v56, v57);
          }
          else
          {
            *(_DWORD *)(v56 + 24) -= 2;
          }
          while (1)
          {
            v54 += 8;
            if (v54 == v55)
              break;
            if ((unint64_t)(*(_QWORD *)v54 + 1) > 1)
            {
              if (v54 != v55)
                goto LABEL_86;
              break;
            }
          }
        }
      }
    }
    else
    {
      WebCore::HTMLMediaElement::allMediaElements(void)::elements = 0;
    }
LABEL_97:
    {
      WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    }
    if ((a2 & 1) != 0)
      WebCore::GCController::garbageCollectNow((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    else
      WebCore::GCController::garbageCollectNowIfNotDoneRecently((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    WebCore::WorkerGlobalScope::releaseMemoryInWorkers(a2);
    if ((v51 & 1) == 0)
    {
      v59 = v21;
      do
      {
        v60 = *(_QWORD *)v59;
        *(_QWORD *)v59 = 0;
        if (v60)
        {
          if (*(_DWORD *)(v60 + 24) == 2)
          {
            if ((*(_WORD *)(v60 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v60, v58);
          }
          else
          {
            *(_DWORD *)(v60 + 24) -= 2;
          }
        }
        v59 = (WTF *)((char *)v59 + 8);
      }
      while (v59 != v31);
    }
    if (v21)
      WTF::fastFree(v21, v58);
  }
  else
  {
    {
      WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    }
    WebCore::GCController::garbageCollectNowIfNotDoneRecently((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  WebCore::releaseNoncriticalMemory(a4);
  v61 = WebCore::platformReleaseMemory();
  if ((_DWORD)a2)
  {
    v62 = WebCore::WorkerOrWorkletThread::releaseFastMallocFreeMemoryInAllThreads((WebCore::WorkerOrWorkletThread *)v61);
    MEMORY[0x19AEA50A0](v62);
  }
  v63 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v63 = (uint64_t)off_1E33FFE00;
  v63[1] = (uint64_t)&v65;
  v66 = v63;
  WebCore::Page::forEachPage((uint64_t)&v66);
  (*(void (**)(uint64_t *))(*v63 + 8))(v63);
  return kdebug_trace();
}

void WebCore::releaseNoncriticalMemory(WebCore::RenderTheme *a1)
{
  char v1;
  uint64_t *v2;
  WebCore::FontCache *v3;
  WebCore::GlyphDisplayListCache *v4;
  uint64_t *v5;
  void *v6;
  WTF **v7;
  uint64_t *v8;
  void *v9;
  WebCore::MemoryCache *v10;
  WebCore::RenderView *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  WebCore::LayoutIntegration::LineLayout *v15;
  WebCore::Layout::TextBreakingPositionCache *v16;
  uint64_t *v17;
  void *v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  WebCore::MemoryCache *v22;
  uint64_t *v23;
  void *v24;
  WTF::StringImpl **v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WebCore::SVGPathElement *v31;
  void *v32;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;

  v1 = (char)a1;
  v2 = WebCore::RenderTheme::singleton(a1);
  v3 = (WebCore::FontCache *)(*(uint64_t (**)(uint64_t *))(*v2 + 16))(v2);
  v4 = (WebCore::GlyphDisplayListCache *)WebCore::FontCache::releaseNoncriticalMemoryInAllFontCaches(v3);
  v5 = WebCore::GlyphDisplayListCache::singleton(v4);
  v7 = WebCore::GlyphDisplayListCache::clear((WebCore::GlyphDisplayListCache *)v5, v6);
  v8 = WebCore::SelectorQueryCache::singleton((WebCore::SelectorQueryCache *)v7);
  WebCore::SelectorQueryCache::clear((WebCore::SelectorQueryCache *)v8, v9);
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  v10 = (WebCore::MemoryCache *)WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::values(&WebCore::Document::allDocumentsMap(void)::documents, &v33);
  v12 = v34;
  v13 = v36;
  if (v34 != v36)
  {
    v14 = v35;
    do
    {
      v15 = *(WebCore::LayoutIntegration::LineLayout **)(*(_QWORD *)(v12[4] + 8) + 1944);
      if (v15)
      {
        ++*((_DWORD *)v15 + 4);
        v16 = (WebCore::Layout::TextBreakingPositionCache *)WebCore::LayoutIntegration::LineLayout::releaseCaches(v15, v11);
        v17 = WebCore::Layout::TextBreakingPositionCache::singleton(v16);
        v10 = (WebCore::MemoryCache *)WebCore::Layout::TextBreakingPositionCache::clear((WebCore::Layout::TextBreakingPositionCache *)v17, v18);
        v19 = *((_DWORD *)v15 + 4);
        if (!v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1960077D8);
        }
        *((_DWORD *)v15 + 4) = v19 - 1;
      }
      while (1)
      {
        v12 += 6;
        if (v12 == v14)
          break;
        v20 = v12[2];
        if (*v12 | v12[1] | v20)
          v21 = v20 == -1;
        else
          v21 = 1;
        if (!v21)
          goto LABEL_13;
      }
      v12 = v14;
LABEL_13:
      ;
    }
    while (v12 != v13);
  }
  if ((v1 & 1) == 0)
  {
    v22 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(v10);
    v10 = (WebCore::MemoryCache *)WebCore::MemoryCache::pruneDeadResourcesToSize(v22, 0);
  }
  v23 = WebCore::Style::StyleSheetContentsCache::singleton(v10);
  v25 = WebCore::Style::StyleSheetContentsCache::clear((WTF::StringImpl ***)v23, v24);
  v26 = WebCore::HTMLNameCache::atomStringCache((WebCore::HTMLNameCache *)v25);
  v33 = 0;
  v27 = std::array<WTF::AtomString,512ul>::fill[abi:sn180100]((uint64_t)v26, (WTF::StringImpl *)&v33);
  v28 = WebCore::HTMLNameCache::qualifiedNameCache(v27);
  v33 = 0;
  v29 = std::array<WTF::RefPtr<WebCore::QualifiedName::QualifiedNameImpl,WTF::RawPtrTraits<WebCore::QualifiedName::QualifiedNameImpl>,WTF::DefaultRefDerefTraits<WebCore::QualifiedName::QualifiedNameImpl>>,512ul>::fill[abi:sn180100]((uint64_t)v28, (_DWORD **)&v33);
  WebCore::ImmutableStyleProperties::clearDeduplicationMap((WebCore::ImmutableStyleProperties *)v29, v30);
  WebCore::SVGPathElement::clearCache(v31, v32);
}

uint64_t WebCore::releaseGraphicsMemory()
{
  void *v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  char v4;

  kdebug_trace();
  std::call_once[abi:sn180100]<WebCore::IOSurfacePool::sharedPool(void)::$_0>((uint64_t)&v4);
  v1 = (unsigned __int8 *)WebCore::IOSurfacePool::discardAllSurfaces((WebCore::IOSurfacePool *)&WebCore::IOSurfacePool::sharedPool(void)::pool, v0);
  v2 = WebCore::CGSubimageCacheWithTimer::clear(v1);
  MEMORY[0x19AEA50A0](v2);
  return kdebug_trace();
}

WTF *WebCore::logMemoryStatistics(uint64_t a1, uint64_t a2)
{
  const char *v2;
  NSObject *v3;
  _BOOL8 v4;
  uint64_t v5;
  unsigned int **v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  WTF *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  NSObject *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  NSObject *v42;
  uint64_t v43;
  int v44;
  WTF *result;
  const char *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  int v50;
  unsigned int v51;
  _BYTE v52[12];
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;

  MEMORY[0x1E0C80A78](a1, a2);
  v61 = *MEMORY[0x1E0C80C00];
  v2 = WebCore::logMemoryStatisticsReasonDescription();
  v3 = qword_1ECE7C568;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v58 = (uint64_t)v2;
    _os_log_impl(&dword_1940B8000, v3, OS_LOG_TYPE_DEFAULT, "WebKit memory usage statistics at time of %{public}s:", buf, 0xCu);
    v3 = qword_1ECE7C568;
  }
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = WTF::MemoryPressureHandler::processStateDescription((WTF::MemoryPressureHandler *)v4);
    *(_DWORD *)buf = 136446210;
    v58 = v5;
    _os_log_impl(&dword_1940B8000, v3, OS_LOG_TYPE_DEFAULT, "Websam state: %{public}s", buf, 0xCu);
  }
  v6 = WebCore::PerformanceLogging::memoryUsageStatistics(1, (uint64_t)&v49);
  if (v51)
  {
    v7 = qword_1ECE7C568;
    v8 = 24 * v51;
    v9 = (uint64_t *)((char *)v49 + 16);
    do
    {
      v6 = (unsigned int **)os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v6)
      {
        v10 = *(v9 - 2);
        v11 = *v9;
        *(_DWORD *)buf = 136446466;
        v58 = v10;
        v59 = 2048;
        v60 = v11;
        _os_log_impl(&dword_1940B8000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s: %zu", buf, 0x16u);
        v7 = qword_1ECE7C568;
      }
      v9 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  v12 = WTF::vmPageSize((WTF *)v6);
  WTF::pagesPerVMTag((WTF *)v12);
  v13 = qword_1ECE7C568;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = v2;
    _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "Dirty memory per VM tag at time of %{public}s:", v52, 0xCu);
  }
  v46 = v2;
  v14 = 0;
  v15 = (char *)&v58 + 4;
  v16 = (char *)&v58 + 4;
  do
  {
    v17 = *(_QWORD *)v16;
    v16 += 32;
    v18 = v17 * v12;
    if (!(v17 * v12))
      goto LABEL_14;
    v19 = WTF::displayNameForVMTag(v14);
    WTF::String::String(&v48, v19, v20);
    if (!v48)
    {
      WTF::makeString<WTF::ASCIILiteral,unsigned int>((uint64_t)"Tag ", 5, v14, v52);
      v22 = *(WTF::StringImpl **)v52;
      *(_QWORD *)v52 = 0;
      v23 = v48;
      v48 = v22;
      if (v23)
      {
        v24 = *(_DWORD *)v23 - 2;
        if (*(_DWORD *)v23 != 2)
          goto LABEL_19;
        WTF::StringImpl::destroy(v23, v21);
        v23 = *(WTF::StringImpl **)v52;
        *(_QWORD *)v52 = 0;
        if (v23)
        {
          v24 = *(_DWORD *)v23 - 2;
          if (*(_DWORD *)v23 != 2)
          {
LABEL_19:
            *(_DWORD *)v23 = v24;
            goto LABEL_20;
          }
          WTF::StringImpl::destroy(v23, v31);
        }
      }
    }
LABEL_20:
    v25 = qword_1ECE7C568;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C568, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::latin1((WTF::String *)&v48);
      v27 = v47 ? (char *)v47 + 16 : 0;
      v28 = *((_QWORD *)v15 - 1);
      *(_DWORD *)v52 = 136446722;
      *(_QWORD *)&v52[4] = v27;
      v53 = 2048;
      v54 = v18 >> 20;
      v55 = 2048;
      v56 = v28;
      _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "  %{public}s: %lu MB in %zu regions", v52, 0x20u);
      v29 = v47;
      v47 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
          WTF::fastFree(v29, v26);
        else
          --*(_DWORD *)v29;
      }
    }
    v30 = v48;
    v48 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)v30 -= 2;
    }
LABEL_14:
    v14 = (WTF *)((char *)v14 + 1);
    v15 = v16;
  }
  while (v14 != (WTF *)256);
  v32 = os_variant_allows_internal_security_policies();
  if ((v32 & 1) != 0)
  {
    v34 = WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      v34 = WebCore::commonVMSlow((WebCore *)v32);
    MEMORY[0x19AEA3294](&v48, v34);
    v35 = qword_1ECE7C568;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v52 = 136446210;
      *(_QWORD *)&v52[4] = v46;
      _os_log_impl(&dword_1940B8000, v35, OS_LOG_TYPE_DEFAULT, "Live JavaScript objects at time of %{public}s:", v52, 0xCu);
    }
    JSC::Heap::objectTypeCounts((JSC::Heap *)(v34 + 192));
    v36 = *(_QWORD *)v47;
    v37 = WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::begin(*(_QWORD **)v47);
    v39 = v37;
    v40 = v38;
    if (v36)
      v41 = (_QWORD *)(v36 + 16 * *(unsigned int *)(v36 - 4));
    else
      v41 = 0;
    if (v41 != v37)
    {
      v42 = qword_1ECE7C568;
      do
      {
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          v43 = *v39;
          v44 = *((_DWORD *)v39 + 2);
          *(_DWORD *)v52 = 136446466;
          *(_QWORD *)&v52[4] = v43;
          v53 = 1024;
          LODWORD(v54) = v44;
          _os_log_impl(&dword_1940B8000, v42, OS_LOG_TYPE_DEFAULT, "  %{public}s: %d", v52, 0x12u);
          v42 = qword_1ECE7C568;
        }
        while (1)
        {
          v39 += 2;
          if (v39 == v40)
            break;
          if ((unint64_t)(*v39 + 1) > 1)
            goto LABEL_48;
        }
        v39 = v40;
LABEL_48:
        ;
      }
      while (v39 != v41);
    }
    std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100](&v47, v38);
    MEMORY[0x19AEA32A0](&v48);
  }
  result = v49;
  if (v49)
  {
    v49 = 0;
    v50 = 0;
    return (WTF *)WTF::fastFree(result, v33);
  }
  return result;
}

const char *WebCore::logMemoryStatisticsReasonDescription()
{
  const char *result;

  result = "debug notification";
  switch("debug notification")
  {
    case 0u:
      return result;
    case 1u:
      result = "warning memory pressure notification";
      break;
    case 2u:
      result = "critical memory pressure notification";
      break;
    case 3u:
      result = "out of memory death";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x196007DF4);
  }
  return result;
}

WTF **std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_QWORD *)v3)
      WTF::fastFree((WTF *)(*(_QWORD *)v3 - 16), a2);
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::NavigateEvent::create@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  v6 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  *(_QWORD *)(v6 + 8) = 0;
  if (v9)
    v12 = 2556418;
  else
    v12 = 2556416;
  v13 = v12 | (4 * v10) | (8 * v11) | (*a1 != 0) | *(_DWORD *)(v6 + 20) & 0xFFC00000;
  *(_DWORD *)(v6 + 16) = 1;
  *(_DWORD *)(v6 + 20) = v13;
  v14 = (_DWORD *)*a1;
  if (*a1)
  {
    *v14 += 2;
    v13 = *(_DWORD *)(v6 + 20);
  }
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 24) = v14;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 20) = v13 | 0x4000;
  *(_QWORD *)v6 = off_1E33FFE58;
  *(_BYTE *)(v6 + 72) = a2[3];
  v15 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v15)
    ++*v15;
  *(_QWORD *)(v6 + 80) = v15;
  v16 = *((_QWORD *)a2 + 2);
  if (v16)
    ++*(_DWORD *)(v16 + 24);
  *(_QWORD *)(v6 + 88) = v16;
  v17 = *((_QWORD *)a2 + 3);
  if (v17)
    ++*(_DWORD *)(v17 + 16);
  *(_QWORD *)(v6 + 96) = v17;
  v18 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 104) = v18;
  *(_QWORD *)(v6 + 128) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v6 + 136) = *((unsigned int *)a2 + 12);
  *(_WORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::NavigateEvent::intercept@<X0>(WebCore::Document *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  result = WebCore::Document::isFullyActive(this);
  if ((result & 1) == 0)
    goto LABEL_4;
  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x200) == 0)
  {
LABEL_3:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 14;
LABEL_5:
    *(_BYTE *)a4 = v9;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if ((v8 & 0x40) != 0)
    goto LABEL_4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (!*(_BYTE *)(a2 + 136))
    goto LABEL_3;
  if ((v8 & 0x3000) == 0)
  {
LABEL_4:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 8;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v19 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v11 = *(unsigned int *)(a2 + 124);
    if ((_DWORD)v11 == *(_DWORD *)(a2 + 120))
    {
      v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 112), v11 + 1, (unint64_t)&v19);
      v13 = *(unsigned int *)(a2 + 124);
      v14 = *(_QWORD *)(a2 + 112);
      v15 = *(_QWORD *)v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v14 + 8 * v13) = v15;
      result = v19;
      *(_DWORD *)(a2 + 124) = v13 + 1;
      v19 = 0;
      if (result)
      {
        v16 = (unsigned int *)(result + 16);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)(result + 16));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v11) = v10;
      *(_DWORD *)(a2 + 124) = v11 + 1;
    }
  }
  if (*(_BYTE *)(a3 + 9))
    *(_WORD *)(a2 + 142) = *(_WORD *)(a3 + 8);
  if (*(_BYTE *)(a3 + 11))
    *(_WORD *)(a2 + 144) = *(_WORD *)(a3 + 10);
  *(_WORD *)(a2 + 140) = 256;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  return result;
}

BOOL WebCore::Navigation::hasEntriesAndEventsDisabled(WebCore::Navigation *this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 72);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 1;
  if (*(_BYTE *)(v2 + 178))
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1960082ACLL);
  }
  if (!WebCore::Document::isFullyActive((WebCore::Document *)(v2 - 288)))
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 72);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1960082CCLL);
      }
      v6 -= 288;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v6 + 528);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if (*(_QWORD *)(*(_QWORD *)(v8 + 280) + 88) && *(_QWORD *)(v8 + 296) == v6)
      {
        if (v5)
        {
          v9 = *(_QWORD *)(v5 + 8);
          if (v9)
          {
            if (*(_BYTE *)(v9 + 178))
            {
              __break(0xC471u);
              JUMPOUT(0x1960082ECLL);
            }
            v9 -= 288;
          }
        }
        else
        {
          v9 = 0;
        }
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 528) + 8);
        v11 = *(_QWORD *)(v10 + 296) == v9 ? *(_QWORD *)(*(_QWORD *)(v10 + 280) + 88) : 0;
        if (*(_BYTE *)(v11 + 3544))
          return 1;
      }
    }
  }
  if (v5)
  {
    v13 = *(_QWORD *)(v5 + 8);
    if (v13)
    {
      if (*(_BYTE *)(v13 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19600831CLL);
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v13 - 96), v4);
      if (v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 72) + 8);
        if (!*(_BYTE *)(v16 + 178))
        {
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v16 - 96), v14);
          return *(_DWORD *)(v17 + 32) == 1;
        }
        goto LABEL_35;
      }
    }
  }
  return 0;
}

uint64_t WebCore::Navigation::initializeEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WebCore::HistoryItem *v28;
  void *v29;
  bmalloc::api *v30;
  void *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  _QWORD v42[2];

  result = WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  if ((result & 1) == 0)
  {
    v7 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      v9 = *(_QWORD **)a3;
      do
      {
        v10 = (_DWORD *)*v9;
        ++*(_DWORD *)*v9;
        v11 = *(_QWORD *)(a1 + 32);
        if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
        {
LABEL_27:
          v17 = 0;
          goto LABEL_13;
        }
        v13 = *(_DWORD *)(v12 + 24);
        *(_DWORD *)(v12 + 24) = v13 + 1;
        v14 = *(_QWORD *)(v12 + 72);
        if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
        {
          if (*(_BYTE *)(v15 + 178))
          {
            result = 105;
            __break(0xC471u);
            return result;
          }
          v16 = v15 - 288;
          if (v13)
          {
LABEL_10:
            *(_DWORD *)(v12 + 24) = v13;
            if (!v16)
              goto LABEL_27;
            goto LABEL_11;
          }
        }
        else
        {
          v16 = 0;
          if (v13)
            goto LABEL_10;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
        if (!v16)
          goto LABEL_27;
LABEL_11:
        v17 = v16 + 192;
        v18 = *(unsigned __int8 *)(v16 + 466);
        if (*(_BYTE *)(v16 + 466))
        {
          if (v18 == 1 || v18 == 2)
            ++*(_DWORD *)(v16 + 504);
        }
        else
        {
          *(_DWORD *)(v16 + 24) += 2;
        }
LABEL_13:
        v19 = bmalloc::api::isoAllocate();
        *(_DWORD *)(v19 + 24) = 1;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)v19 = &unk_1E33A4FC0;
        *(_QWORD *)(v19 + 32) = &off_1E33A18C0;
        *(_QWORD *)(v19 + 40) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v19 + 32), (WebCore::ScriptExecutionContext *)v17);
        *(_QWORD *)v19 = off_1E3400060;
        *(_QWORD *)(v19 + 32) = &unk_1E34000D8;
        result = WTF::UUID::UUID((WTF::UUID *)v42);
        v21 = v42[1];
        *(_QWORD *)(v19 + 48) = v42[0];
        *(_QWORD *)(v19 + 56) = v21;
        *(_QWORD *)(v19 + 64) = v10;
        v42[0] = v19;
        v22 = *(unsigned int *)(a1 + 84);
        if ((_DWORD)v22 == *(_DWORD *)(a1 + 80))
        {
          result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 72), v22 + 1, (unint64_t)v42);
          v22 = *(unsigned int *)(a1 + 84);
          v23 = *(_QWORD *)(a1 + 72);
          v24 = *(_QWORD *)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)(v23 + 8 * v22) = v24;
        }
        else
        {
          v25 = *(_QWORD *)(a1 + 72);
          v42[0] = 0;
          *(_QWORD *)(v25 + 8 * v22) = v19;
        }
        *(_DWORD *)(a1 + 84) = v22 + 1;
        v26 = v42[0];
        v42[0] = 0;
        if (v26)
        {
          if (*(_DWORD *)(v26 + 24) == 1)
          {
            v28 = *(WebCore::HistoryItem **)(v26 + 64);
            *(_QWORD *)(v26 + 64) = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
              {
                WebCore::HistoryItem::~HistoryItem(v28);
                WTF::fastFree(v32, v33);
              }
              else
              {
                --*(_DWORD *)v28;
              }
            }
            WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v26 + 32), v20);
            WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v26, v29);
            result = bmalloc::api::isoDeallocate(v30, v31);
            if (!v17)
              goto LABEL_23;
LABEL_20:
            v27 = *(unsigned __int8 *)(v17 + 274);
            if (*(_BYTE *)(v17 + 274))
            {
              if (v27 == 1)
              {
                if (*(_DWORD *)(v17 + 312) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
                else
                  --*(_DWORD *)(v17 + 312);
              }
              else if (v27 == 2)
              {
                result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v17 + 312));
              }
            }
            else if (*(_DWORD *)(v17 - 168) == 2)
            {
              if ((*(_WORD *)(v17 - 162) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)(v17 - 192));
            }
            else
            {
              *(_DWORD *)(v17 - 168) -= 2;
            }
            goto LABEL_23;
          }
          --*(_DWORD *)(v26 + 24);
        }
        if (v17)
          goto LABEL_20;
LABEL_23:
        ++v9;
        v8 -= 8;
      }
      while (v8);
    }
    v34 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v34)
    {
      v35 = 0;
      v36 = 8 * v34;
      while (1)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v35) + 64);
        v39 = *(_QWORD *)(v37 + 352);
        v38 = *(_QWORD *)(v37 + 360);
        if (v39 == *(_QWORD *)(*(_QWORD *)a2 + 352) && v38 == *(_QWORD *)(*(_QWORD *)a2 + 360))
          break;
        ++v35;
        v36 -= 8;
        if (!v36)
          goto LABEL_53;
      }
      v41 = 1;
    }
    else
    {
LABEL_53:
      v41 = 0;
      v35 = 0;
    }
    *(_QWORD *)(a1 + 40) = v35;
    *(_BYTE *)(a1 + 48) = v41;
  }
  return result;
}

WTF::StringImpl *WebCore::Navigation::updateForActivation(uint64_t a1, uint64_t a2, __int16 a3)
{
  WTF::StringImpl *result;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char isAboutBlank;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const WebCore::SecurityOrigin *v24;
  WTF::StringImpl *v25;
  _BOOL4 isSameOriginAs;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WebCore::ScriptExecutionContext *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  bmalloc::api *v52;
  void *v53;
  WebCore::HistoryItem *v54;
  void *v55;
  bmalloc::api *v56;
  void *v57;
  WTF *v58;
  void *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63[5];
  char v64;
  WTF::StringImpl *v65[6];

  result = (WTF::StringImpl *)WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  if ((result & 1) != 0 || (a3 & 0xFF00) == 0)
    return result;
  WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 >= *(unsigned int *)(a1 + 84))
  {
    __break(0xC471u);
    JUMPOUT(0x196008C88);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v7) + 64);
  v65[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v65);
  MEMORY[0x19AEA52F8](v63, v65, v8 + 16, 0);
  v10 = v65[0];
  v65[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  isAboutBlank = WTF::URL::isAboutBlank((WTF::URL *)v63);
  result = v63[0];
  v63[0] = 0;
  if (!result)
    goto LABEL_10;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_10:
    if ((isAboutBlank & 1) != 0)
      return result;
    goto LABEL_11;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
  if ((isAboutBlank & 1) != 0)
    return result;
LABEL_11:
  if (a2)
  {
    v65[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v65);
    MEMORY[0x19AEA52F8](v63, v65, a2 + 16, 0);
    v14 = v65[0];
    v65[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v16 = WTF::URL::isAboutBlank((WTF::URL *)v63);
    v17 = v63[0];
    v63[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (v16)
      LOBYTE(a3) = 1;
  }
  else
  {
    v16 = 0;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72) + 8);
  if (*(_BYTE *)(v18 + 178))
    goto LABEL_115;
  if (a2 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 240) + 8) + 296))
  {
    v65[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v65);
    MEMORY[0x19AEA52F8](v63, v65, a2 + 16, 0);
    v20 = v65[0];
    v65[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v63, (uint64_t *)v65);
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72) + 8);
    if (*(_BYTE *)(v22 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x196008BD0);
    }
    v23 = v65[0];
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 240) + 8) + 296) + 192), v21);
    isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v23, v24);
    v65[0] = 0;
    if (v23)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)v23);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v23));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)v23);
        v60 = (WTF::StringImpl *)*((_QWORD *)v23 + 6);
        *((_QWORD *)v23 + 6) = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v25);
          else
            *(_DWORD *)v60 -= 2;
        }
        v61 = (WTF::StringImpl *)*((_QWORD *)v23 + 5);
        *((_QWORD *)v23 + 5) = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v25);
          else
            *(_DWORD *)v61 -= 2;
        }
        v62 = *((unsigned int *)v23 + 8);
        if ((_DWORD)v62 != -1)
          ((void (*)(char *, char *))off_1E33FFD30[v62])(&v64, (char *)v23 + 8);
        *((_DWORD *)v23 + 8) = -1;
        WTF::fastFree(v23, v25);
      }
    }
    v29 = v63[0];
    v63[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v25);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  else
  {
    isSameOriginAs = 0;
    if (!a2)
    {
LABEL_48:
      v38 = 0;
      goto LABEL_49;
    }
  }
  v30 = *(unsigned int *)(a1 + 84);
  if (!(_DWORD)v30)
    goto LABEL_48;
  v31 = 0;
  v32 = *(_QWORD *)(a1 + 72);
  v33 = 8 * v30;
  while (1)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v32 + 8 * v31) + 64);
    v36 = *(_QWORD *)(v34 + 352);
    v35 = *(_QWORD *)(v34 + 360);
    if (v36 == *(_QWORD *)(a2 + 352) && v35 == *(_QWORD *)(a2 + 360))
      break;
    ++v31;
    v33 -= 8;
    if (!v33)
      goto LABEL_48;
  }
  if (!isSameOriginAs)
    goto LABEL_48;
  if (v31 >= v30)
  {
    __break(0xC471u);
    JUMPOUT(0x196008C98);
  }
  v38 = *(_QWORD *)(v32 + 8 * v31);
  if (v38)
    ++*(_DWORD *)(v38 + 24);
  isSameOriginAs = 1;
LABEL_49:
  if (a3 == 1)
  {
    if ((v16 | isSameOriginAs) == 1)
    {
      v42 = *(_QWORD *)(a1 + 32);
      if (v42 && (v43 = *(_QWORD *)(v42 + 8)) != 0)
      {
        v44 = *(_DWORD *)(v43 + 24);
        *(_DWORD *)(v43 + 24) = v44 + 1;
        v45 = *(_QWORD *)(v43 + 72);
        if (v45)
        {
          v45 = *(_QWORD *)(v45 + 8);
          if (v45)
          {
            if (*(_BYTE *)(v45 + 178))
            {
              __break(0xC471u);
              JUMPOUT(0x196008C70);
            }
            v45 -= 288;
          }
        }
        if (v45)
          v46 = (WebCore::ScriptExecutionContext *)(v45 + 192);
        else
          v46 = 0;
        if (v44)
          *(_DWORD *)(v43 + 24) = v44;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 72))(v43);
      }
      else
      {
        v46 = 0;
      }
      ++*(_DWORD *)a2;
      v41 = bmalloc::api::isoAllocate();
      *(_DWORD *)(v41 + 24) = 1;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = 0;
      *(_QWORD *)v41 = &unk_1E33A4FC0;
      *(_QWORD *)(v41 + 32) = &off_1E33A18C0;
      *(_QWORD *)(v41 + 40) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v41 + 32), v46);
      *(_QWORD *)v41 = off_1E3400060;
      *(_QWORD *)(v41 + 32) = &unk_1E34000D8;
      WTF::UUID::UUID((WTF::UUID *)v65);
      v47 = v65[1];
      *(WTF::StringImpl **)(v41 + 48) = v65[0];
      *(_QWORD *)(v41 + 56) = v47;
      *(_QWORD *)(v41 + 64) = a2;
      goto LABEL_71;
    }
  }
  else if (a3 == 2)
  {
    if (WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1) || !*(_BYTE *)(a1 + 48))
    {
      v41 = 0;
LABEL_71:
      if (v38)
      {
        if (*(_DWORD *)(v38 + 24) == 1)
        {
          v54 = *(WebCore::HistoryItem **)(v38 + 64);
          *(_QWORD *)(v38 + 64) = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 1)
            {
              WebCore::HistoryItem::~HistoryItem(v54);
              WTF::fastFree(v58, v59);
            }
            else
            {
              --*(_DWORD *)v54;
            }
          }
          WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v38 + 32), v39);
          WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v38, v55);
          bmalloc::api::isoDeallocate(v56, v57);
        }
        else
        {
          --*(_DWORD *)(v38 + 24);
        }
      }
      goto LABEL_74;
    }
    v40 = *(_QWORD *)(a1 + 40);
    if (v40 < *(unsigned int *)(a1 + 84))
    {
      v41 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v40);
      if (v41)
        ++*(_DWORD *)(v41 + 24);
      goto LABEL_71;
    }
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x196008BB0);
  }
  v41 = v38;
LABEL_74:
  if (WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1) || !*(_BYTE *)(a1 + 48))
  {
    v49 = 0;
  }
  else
  {
    v48 = *(_QWORD *)(a1 + 40);
    if (v48 >= *(unsigned int *)(a1 + 84))
    {
      __break(0xC471u);
      JUMPOUT(0x196008C90);
    }
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v48);
  }
  ++*(_DWORD *)(v49 + 24);
  v51 = bmalloc::api::isoAllocate();
  *(_DWORD *)v51 = 1;
  *(_QWORD *)(v51 + 8) = 0;
  *(_BYTE *)(v51 + 16) = a3;
  *(_QWORD *)(v51 + 24) = v49;
  *(_QWORD *)(v51 + 32) = v41;
  result = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v51;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::NavigationActivation::~NavigationActivation(result, v50);
      return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v52, v53);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::Navigation::scriptExecutionContext(WebCore::Navigation *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 1;
  v4 = *(_QWORD *)(v2 + 72);
  if (!v4 || (v4 = *(_QWORD *)(v4 + 8)) == 0)
  {
LABEL_7:
    if (v4)
      v5 = v4 + 192;
    else
      v5 = 0;
    if (v3)
      *(_DWORD *)(v2 + 24) = v3;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    return v5;
  }
  if (!*(_BYTE *)(v4 + 178))
  {
    v4 -= 288;
    goto LABEL_7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::Navigation::~Navigation(WebCore::Navigation *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::NavigationAPIMethodTracker *v7;
  WTF *v8;
  void *v9;
  WebCore::NavigationAPIMethodTracker *v10;
  WebCore::NavigationAPIMethodTracker *v11;
  _DWORD *v12;
  void *v13;
  WebCore::NavigationActivation *v14;
  bmalloc::api *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  void *v22;
  bmalloc::api *v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 15);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v7, a2);
              WTF::fastFree(v8, v9);
              v6 = *v5;
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v10 = (WebCore::NavigationAPIMethodTracker *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v10, a2);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = (WebCore::NavigationAPIMethodTracker *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v11, a2);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[4];
  }
  WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  v14 = (WebCore::NavigationActivation *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::NavigationActivation::~NavigationActivation(v14, v13);
      bmalloc::api::isoDeallocate(v23, v24);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  v15 = (bmalloc::api *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v15)
    WTF::RefCounted<WebCore::NavigationTransition>::deref(v15, v13);
  v16 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v25 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v25)
      {
        v28 = v16;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v25));
        v16 = v28;
      }
      v26 = *(WTF **)(v16 + 16);
      if (v26)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        v27 = v16;
        WTF::fastFree(v26, v13);
        v16 = v27;
      }
      WTF::fastFree((WTF *)v16, v13);
    }
  }
  WebCore::EventTarget::~EventTarget(this, v13);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Navigation::~Navigation(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::Navigation::eventTargetInterface(WebCore::Navigation *this)
{
  return 66;
}

uint64_t *WebCore::Navigation::serializeState(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::JSGlobalObject *v17;
  void *v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  unsigned int *v29;
  uint64_t v30;
  int v31;
  WTF *v32;
  uint64_t v33;

  v3 = result;
  if (a3 == 10)
  {
    *result = 0;
    *((_DWORD *)result + 4) = 0;
    return result;
  }
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
    goto LABEL_25;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_25;
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    goto LABEL_25;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_25;
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x196009180);
  }
  v8 = *(_QWORD *)(v7 + 240);
  if (!v8 || !*(_QWORD *)(v8 + 8))
  {
LABEL_25:
    result = (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)v3 = 21;
    *((_DWORD *)v3 + 4) = 1;
    return result;
  }
  v32 = 0;
  v33 = 0;
  v10 = *(_QWORD *)(v4 + 8);
  if (!v10)
    goto LABEL_39;
  v11 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 1;
  v12 = *(_QWORD *)(v10 + 72);
  if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
  {
    if (*(_BYTE *)(v13 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x1960091A0);
    }
    v14 = v13 - 288;
    if (v11)
    {
LABEL_15:
      *(_DWORD *)(v10 + 24) = v11;
      if (v14)
        goto LABEL_16;
LABEL_39:
      v15 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v14 = 0;
    if (v11)
      goto LABEL_15;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
  if (!v14)
    goto LABEL_39;
LABEL_16:
  v15 = v14 + 192;
  v16 = *(unsigned __int8 *)(v14 + 466);
  if (*(_BYTE *)(v14 + 466))
  {
    if (v16 == 1 || v16 == 2)
      ++*(_DWORD *)(v14 + 504);
  }
  else
  {
    *(_DWORD *)(v14 + 24) += 2;
  }
LABEL_18:
  v17 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)v15);
  v28[0] = 0;
  v28[1] = 0;
  WebCore::SerializedScriptValue::create(v17, a3, (uint64_t)v28, (uint64_t)&v32, 1, 0, 0, (uint64_t)&v29);
  if (v15)
  {
    v19 = *(unsigned __int8 *)(v15 + 274);
    if (*(_BYTE *)(v15 + 274))
    {
      if (v19 == 1)
      {
        if (*(_DWORD *)(v15 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
        else
          --*(_DWORD *)(v15 + 312);
      }
      else if (v19 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
      }
    }
    else if (*(_DWORD *)(v15 - 168) == 2)
    {
      if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), v18);
    }
    else
    {
      *(_DWORD *)(v15 - 168) -= 2;
    }
  }
  if (v31)
  {
    if (v31 != 1)
    {
      v27 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebCore::Navigation::maybeSetUpcomingNonTraversalTracker(v27);
    }
    v20 = v30;
    v30 = 0;
    *(_BYTE *)v3 = (_BYTE)v29;
    v3[1] = v20;
    *((_DWORD *)v3 + 4) = 1;
  }
  else
  {
    v21 = v29;
    v29 = 0;
    if (v21)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      *v3 = (uint64_t)v21;
      *((_DWORD *)v3 + 4) = 0;
      do
      {
        v23 = __ldaxr(v21);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v21));
      if (!v24)
      {
        atomic_store(1u, v21);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v21 + 2), v18);
        WTF::fastFree((WTF *)v21, v25);
      }
    }
    else
    {
      *v3 = 0;
      *((_DWORD *)v3 + 4) = 0;
    }
  }
  if (v31 != -1)
    ((void (*)(_QWORD *, unsigned int **))off_1E33FFD68[v31])(v28, &v29);
  result = (uint64_t *)v32;
  if (!HIDWORD(v33))
  {
    if (!v32)
      return result;
LABEL_53:
    v32 = 0;
    LODWORD(v33) = 0;
    return (uint64_t *)WTF::fastFree((WTF *)result, v18);
  }
  v26 = 8 * HIDWORD(v33);
  do
  {
    result = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(result, v18)+ 1;
    v26 -= 8;
  }
  while (v26);
  result = (uint64_t *)v32;
  if (v32)
    goto LABEL_53;
  return result;
}

uint64_t WebCore::Navigation::maybeSetUpcomingNonTraversalTracker(uint64_t *a1, WebCore::Navigation *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unsigned int **a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSPromise *v20;
  uint64_t v21;
  JSC::JSGlobalObject *v22;
  uint64_t result;
  void *v24;
  WTF *v25;
  void *v26;

  v12 = WTF::fastMalloc((WTF *)0x40);
  v13 = v12;
  *(_DWORD *)v12 = 1;
  *(_BYTE *)(v12 + 4) = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = a5;
  v14 = *a6;
  if (*a6)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  *(_QWORD *)(v12 + 24) = v14;
  *(_QWORD *)(v12 + 32) = 0;
  v16 = *a3;
  *a3 = 0;
  *(_QWORD *)(v12 + 40) = v16;
  v17 = *a4;
  *a4 = 0;
  *(_QWORD *)(v12 + 48) = v17;
  *(_QWORD *)(v12 + 56) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *a1 = v13;
  v18 = *(_QWORD *)(v13 + 48);
  v19 = **(_QWORD **)(v18 + 24);
  if ((v19 & 0xFFFE000000000002) != 0)
  {
    v20 = 0;
  }
  else if (*(_BYTE *)(v19 + 5) == 68)
  {
    v20 = **(JSC::JSPromise ***)(v18 + 24);
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD *)(v18 + 32);
  if (!v21 || (*(_BYTE *)(v21 + 8) & 3) != 0)
    v22 = 0;
  else
    v22 = *(JSC::JSGlobalObject **)v21;
  JSC::JSPromise::markAsHandled(v20, v22);
  result = WebCore::Navigation::hasEntriesAndEventsDisabled(a2);
  if ((result & 1) == 0)
  {
    ++*(_DWORD *)v13;
    result = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 14) = v13;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker((WebCore::NavigationAPIMethodTracker *)result, v24);
        return WTF::fastFree(v25, v26);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

_QWORD *WebCore::Navigation::reload@<X0>(WebCore::Navigation *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v10;
  _QWORD *result;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  WebCore::DOMGuardedObject *v31;
  WebCore::DOMGuardedObject *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  WebCore::DOMGuardedObject *v37;
  void *v38;
  WTF *v39;
  void *v40;
  void *v41;
  unsigned int *v42;
  unsigned int *v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;

  WebCore::Navigation::serializeState((uint64_t *)&v43, (uint64_t)a1, a2[1]);
  if (v45)
  {
    if (v45 == 1)
    {
      LOBYTE(v46) = (_BYTE)v43;
      v10 = v44;
      v44 = 0;
      v47 = v10;
      result = WebCore::createErrorResult((WebCore::DOMGuardedObject **)a5, a3, a4, (uint64_t)&v46);
      if (v10)
        goto LABEL_4;
      goto LABEL_34;
    }
    goto LABEL_62;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 72);
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    if (*(_BYTE *)(v15 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x196009768);
    }
    v16 = v15 - 288;
    *(_DWORD *)(v15 - 264) += 2;
  }
  else
  {
    v16 = 0;
  }
  if (WebCore::Document::isFullyActive((WebCore::Document *)v16))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 72) + 8);
    if (*(_BYTE *)(v18 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x196009788);
    }
    v19 = *(_DWORD *)(v18 + 3052);
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v17);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
    if (!v19)
    {
      if (!v45)
      {
        v20 = *a2;
        v21 = v43;
        v42 = v43;
        v43 = 0;
        WebCore::Navigation::maybeSetUpcomingNonTraversalTracker(&v46, a1, a3, a4, v20, &v42);
        v42 = 0;
        if (v21)
        {
          do
          {
            v23 = __ldaxr(v21);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v21));
          if (!v24)
          {
            atomic_store(1u, v21);
            WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v21 + 2), v22);
            WTF::fastFree((WTF *)v21, v41);
          }
        }
        v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 72) + 8);
        if (*(_BYTE *)(v25 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x1960097A8);
        }
        WebCore::FrameLoader::reload(*(const WTF::URL **)(*(_QWORD *)(*(_QWORD *)(v25 + 240) + 8) + 280), 0);
        a4 = (uint64_t *)v46;
        v26 = *(_QWORD *)(*(_QWORD *)(v46 + 40) + 24);
        if (!v26 || (v27 = *(_QWORD *)v26) == 0 || (*(_BYTE *)(v26 + 8) & 3) != 0)
        {
          v28 = 10;
          goto LABEL_42;
        }
        if ((v27 & 0xFFFE000000000002) == 0)
        {
          if (*(_BYTE *)(v27 + 5) == 68)
            v28 = *(_QWORD *)v26;
          else
            v28 = 0;
          goto LABEL_42;
        }
LABEL_63:
        v28 = 0;
LABEL_42:
        v30 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x28);
        v31 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
        v32 = WebCore::DOMGuardedObject::DOMGuardedObject(v31, v30, v28);
        *(_QWORD *)v32 = &off_1E3251870;
        *(_QWORD *)a5 = v32;
        v33 = *(_QWORD *)(a4[6] + 24);
        if (v33 && (v34 = *(_QWORD *)v33) != 0 && (*(_BYTE *)(v33 + 8) & 3) == 0)
        {
          if ((v34 & 0xFFFE000000000002) != 0)
          {
            v35 = 0;
          }
          else if (*(_BYTE *)(v34 + 5) == 68)
          {
            v35 = *(_QWORD *)v33;
          }
          else
          {
            v35 = 0;
          }
        }
        else
        {
          v35 = 10;
        }
        v36 = *(_QWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x28);
        v37 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
        result = WebCore::DOMGuardedObject::DOMGuardedObject(v37, v36, v35);
        *result = &off_1E3251870;
        *(_QWORD *)(a5 + 8) = result;
        if (*(_DWORD *)a4 == 1)
        {
          WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker((WebCore::NavigationAPIMethodTracker *)a4, v38);
          result = (_QWORD *)WTF::fastFree(v39, v40);
        }
        else
        {
          --*(_DWORD *)a4;
        }
        goto LABEL_34;
      }
LABEL_62:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_63;
    }
  }
  else if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v17);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = (WTF::StringImpl *)v46;
  if (v46)
  {
    *(_DWORD *)v46 += 2;
    LOBYTE(v46) = 8;
    v47 = v10;
    result = WebCore::createErrorResult((WebCore::DOMGuardedObject **)a5, a3, a4, (uint64_t)&v46);
    v13 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
      *(_DWORD *)v10 = v13;
LABEL_32:
      v29 = v13 - 2;
      if (v29)
        *(_DWORD *)v10 = v29;
      else
        result = (_QWORD *)WTF::StringImpl::destroy(v10, v12);
      goto LABEL_34;
    }
    result = (_QWORD *)WTF::StringImpl::destroy(v10, v12);
LABEL_4:
    v13 = *(_DWORD *)v10;
    goto LABEL_32;
  }
  v46 = 8;
  v47 = 0;
  result = WebCore::createErrorResult((WebCore::DOMGuardedObject **)a5, a3, a4, (uint64_t)&v46);
LABEL_34:
  if (v45 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t *, unsigned int **))off_1E33FFD78[v45])(&v46, &v43);
  return result;
}

WTF::StringImpl *WebCore::createErrorResult(WebCore::DOMGuardedObject **a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WebCore::DOMGuardedObject *v12;
  WebCore::DOMGuardedObject *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WebCore::DOMGuardedObject *v18;
  WebCore::DOMGuardedObject *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  unsigned __int8 v28[8];
  WTF::StringImpl *v29;
  unsigned __int8 v30[8];
  WTF::StringImpl *v31;
  objc_class *v32;

  v8 = *(_QWORD *)(*a2 + 24);
  if (v8 && (v9 = *(_QWORD *)v8) != 0 && (*(_BYTE *)(v8 + 8) & 3) == 0)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v10 = 0;
    }
    else if (*(_BYTE *)(v9 + 5) == 68)
    {
      v10 = *(_QWORD *)v8;
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 10;
  }
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v12 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  v13 = WebCore::DOMGuardedObject::DOMGuardedObject(v12, v11, v10);
  *(_QWORD *)v13 = &off_1E3251870;
  *a1 = v13;
  v14 = *(_QWORD *)(*a3 + 24);
  if (v14 && (v15 = *(_QWORD *)v14) != 0 && (*(_BYTE *)(v14 + 8) & 3) == 0)
  {
    if ((v15 & 0xFFFE000000000002) != 0)
    {
      v16 = 0;
    }
    else if (*(_BYTE *)(v15 + 5) == 68)
    {
      v16 = *(_QWORD *)v14;
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    v16 = 10;
  }
  v17 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28);
  v18 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  v19 = WebCore::DOMGuardedObject::DOMGuardedObject(v18, v17, v16);
  *(_QWORD *)v19 = &off_1E3251870;
  a1[1] = v19;
  v32 = 0;
  v20 = *a2;
  v30[0] = *(_BYTE *)a4;
  v21 = *(WTF::StringImpl **)(a4 + 8);
  if (v21)
    *(_DWORD *)v21 += 2;
  v31 = v21;
  WebCore::DeferredPromise::reject(v20, v30, 0, &v32);
  v23 = v31;
  v31 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *a3;
  v28[0] = *(_BYTE *)a4;
  v25 = *(WTF::StringImpl **)(a4 + 8);
  if (v25)
    *(_DWORD *)v25 += 2;
  v29 = v25;
  WebCore::DeferredPromise::reject(v24, v28, 0, &v32);
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Navigation::navigate@<X0>(WebCore::Navigation *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  WebCore::Document *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::URL *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::LocalFrame *v43;
  int v44;
  WTF::StringImpl *result;
  uint64_t v46;
  char v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  _DWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  int v62;
  unint64_t v63;
  WebCore::DOMGuardedObject *v64;
  WebCore::DOMGuardedObject *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  WebCore::DOMGuardedObject *v70;
  WebCore::DOMGuardedObject *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  void *v74;
  WTF *v75;
  void *v76;
  char v77;
  void *v78;
  _OWORD v79[3];
  _OWORD v80[8];
  __int128 v81;
  int64x2_t v82;
  int64x2_t v83;
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  _DWORD *v90;
  __int128 v91;
  __int128 v92;
  _QWORD v93[7];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  char v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  char v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  char v108;
  uint64_t *v109;
  unsigned int *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  __int128 v114;
  __int128 v115;

  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 72);
  if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
  {
    if (*(_BYTE *)(v12 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19600A27CLL);
    }
    v13 = (WebCore::Document *)(v12 - 288);
  }
  else
  {
    v13 = 0;
  }
  WebCore::Document::completeURL(v13, a2, (uint64_t)v13 + 848, 0, (WTF::URL *)&v113);
  v14 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 8);
  v15 = *(_DWORD *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v15 + 1;
  v16 = *(_QWORD *)(v14 + 72);
  if (v16)
  {
    v16 = *(_QWORD *)(v16 + 8);
    if (v16)
    {
      if (*(_BYTE *)(v16 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19600A29CLL);
      }
      v16 -= 288;
    }
  }
  if (v16)
    v17 = v16 + 192;
  else
    v17 = 0;
  if (v15)
    *(_DWORD *)(v14 + 24) = v15;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 112))(v17);
  if ((v114 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = (WTF::StringImpl *)v106;
    if (v106)
    {
      *(_DWORD *)v106 += 2;
      v20 = 9;
LABEL_22:
      LOBYTE(v106) = v20;
      v107 = v19;
      WebCore::createErrorResult((WebCore::DOMGuardedObject **)a6, a4, a5, (uint64_t)&v106);
      v23 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v22);
        v23 = *(_DWORD *)v19;
      }
      else
      {
        *(_DWORD *)v19 = v23;
      }
      v24 = v23 - 2;
      if (v24)
        *(_DWORD *)v19 = v24;
      else
        WTF::StringImpl::destroy(v19, v22);
      goto LABEL_66;
    }
    v77 = 9;
LABEL_129:
    LOBYTE(v106) = v77;
    v107 = 0;
    WebCore::createErrorResult((WebCore::DOMGuardedObject **)a6, a4, a5, (uint64_t)&v106);
    goto LABEL_66;
  }
  if (*(_BYTE *)(a3 + 16) == 1)
  {
    v21 = (WTF::URL *)v18;
    if (WTF::URL::protocolIsJavaScript((WTF::URL *)&v113)
      || *(_BYTE *)(a3 + 16) == 1 && WTF::URL::isAboutBlank(v21))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v19 = (WTF::StringImpl *)v106;
      if (v106)
      {
        *(_DWORD *)v106 += 2;
        v20 = 6;
        goto LABEL_22;
      }
      v77 = 6;
      goto LABEL_129;
    }
  }
  WebCore::Navigation::serializeState((uint64_t *)&v110, (uint64_t)a1, *(_QWORD *)(a3 + 8));
  if (v112)
  {
    if (v112 == 1)
    {
      LOBYTE(v106) = (_BYTE)v110;
      v25 = v111;
      v111 = 0;
      v107 = v25;
      WebCore::createErrorResult((WebCore::DOMGuardedObject **)a6, a4, a5, (uint64_t)&v106);
      if (!v25)
        goto LABEL_64;
      goto LABEL_31;
    }
    goto LABEL_136;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 72);
  if (v27 && (v28 = *(_QWORD *)(v27 + 8)) != 0)
  {
    if (*(_BYTE *)(v28 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19600A30CLL);
    }
    v29 = v28 - 288;
    *(_DWORD *)(v28 - 264) += 2;
  }
  else
  {
    v29 = 0;
  }
  if (!WebCore::Document::isFullyActive((WebCore::Document *)v29))
  {
    if (v29)
    {
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v29, v30);
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
    goto LABEL_59;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 72) + 8);
  if (*(_BYTE *)(v31 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19600A32CLL);
  }
  v32 = *(_DWORD *)(v31 + 3052);
  if (v29)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v30);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  if (v32)
  {
LABEL_59:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = (WTF::StringImpl *)v106;
    if (!v106)
    {
      v106 = 8;
      v107 = 0;
      WebCore::createErrorResult((WebCore::DOMGuardedObject **)a6, a4, a5, (uint64_t)&v106);
      goto LABEL_64;
    }
    *(_DWORD *)v106 += 2;
    LOBYTE(v106) = 8;
    v107 = v25;
    WebCore::createErrorResult((WebCore::DOMGuardedObject **)a6, a4, a5, (uint64_t)&v106);
    v26 = *(_DWORD *)v25 - 2;
    if (*(_DWORD *)v25 != 2)
    {
      *(_DWORD *)v25 = v26;
LABEL_62:
      v44 = v26 - 2;
      if (v44)
        *(_DWORD *)v25 = v44;
      else
        WTF::StringImpl::destroy(v25, v22);
      goto LABEL_64;
    }
    WTF::StringImpl::destroy(v25, v22);
LABEL_31:
    v26 = *(_DWORD *)v25;
    goto LABEL_62;
  }
  if (v112)
  {
LABEL_136:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_137;
  }
  v33 = *(_QWORD *)a3;
  v34 = v110;
  v110 = 0;
  v106 = (uint64_t)v34;
  WebCore::Navigation::maybeSetUpcomingNonTraversalTracker((uint64_t *)&v109, a1, a4, a5, v33, (unsigned int **)&v106);
  v106 = 0;
  if (v34)
  {
    do
    {
      v36 = __ldaxr(v34);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v34));
    if (!v37)
    {
      atomic_store(1u, v34);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v34 + 2), v35);
      WTF::fastFree((WTF *)v34, v78);
    }
  }
  v38 = *((_QWORD *)a1 + 4);
  if (!v38)
    goto LABEL_74;
  v39 = *(_QWORD *)(v38 + 8);
  if (!v39)
    goto LABEL_74;
  v40 = *(_QWORD *)(v39 + 72);
  if (!v40)
    goto LABEL_74;
  v41 = *(_QWORD *)(v40 + 8);
  if (!v41)
    goto LABEL_74;
  if (*(_BYTE *)(v41 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19600A388);
  }
  v42 = *(_QWORD *)(v41 + 240);
  if (v42)
    v43 = *(WebCore::LocalFrame **)(v42 + 8);
  else
LABEL_74:
    v43 = 0;
  v46 = (uint64_t)v113;
  if (v113)
    *(_DWORD *)v113 += 2;
  v91 = v114;
  v92 = v115;
  v90 = (_DWORD *)v46;
  v93[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v93);
  v93[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93[6] = *(_QWORD *)&v79[0];
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0x10000;
  v47 = v98 & 0x80 | 4;
  v98 = v47;
  v99 = 0;
  v48 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v48 += 2;
    v47 = v98;
  }
  v100 = v48;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = v104 & 0xE0 | 5;
  v98 = v47 | 2;
  v105 = 0;
  v88 = 0;
  v86 = 0uLL;
  v87 = 0uLL;
  memset(v85, 0, sizeof(v85));
  v83 = 0uLL;
  v84 = 0uLL;
  v81 = 0uLL;
  v82 = 0uLL;
  memset(v80, 0, sizeof(v80));
  memset(v79, 0, sizeof(v79));
  WTF::URL::invalidate((WTF::URL *)((char *)v79 + 8));
  *(_QWORD *)&v80[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v80);
  LOBYTE(v81) = 0;
  WORD4(v81) = 0;
  memset((char *)&v80[2] + 8, 0, 81);
  v82 = vdupq_n_s64(0x7FF8000000000000uLL);
  v83 = v82;
  v84 = 0uLL;
  *(int64x2_t *)((char *)v85 + 8) = v82;
  *(_QWORD *)&v85[0] = 0x8000000000000000;
  *((_QWORD *)&v85[1] + 1) = 0x7FF8000000000000;
  LOBYTE(v86) = v86 & 0xF0;
  WORD4(v86) &= 0xC000u;
  BYTE10(v86) = BYTE10(v86) & 0xF8 | 2;
  *(_QWORD *)&v87 = 0;
  BYTE8(v87) = 0;
  BYTE10(v81) = BYTE10(v81) & 0xC0 | 5;
  LOBYTE(v88) = 1;
  WebCore::FrameLoadRequest::FrameLoadRequest((WebCore::FrameLoadRequest *)&v106, v43, (const WebCore::ResourceRequest *)&v90, (unsigned int **)v79);
  WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v79, v49);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v90, v50);
  v108 = *(_BYTE *)(a3 + 16);
  v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 72) + 8);
  if (*(_BYTE *)(v51 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19600A34CLL);
  }
  v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 240) + 8) + 280);
  v90 = 0;
  LOBYTE(v79[0]) = 0;
  v89 = 0;
  WebCore::FrameLoader::loadFrameRequest(v52, (uint64_t)&v106, 0, (uint64_t *)&v90, (const WebCore::Document *)v79);
  if (v89)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v79, v53);
  v54 = v90;
  v90 = 0;
  if (v54)
  {
    if (v54[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 24))(v54);
    else
      --v54[6];
  }
  v55 = (uint64_t *)*((_QWORD *)a1 + 14);
  a3 = (uint64_t)v109;
  if (v55 == v109)
  {
    *((_QWORD *)a1 + 14) = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 1)
      {
        WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker((WebCore::NavigationAPIMethodTracker *)v55, v53);
        WTF::fastFree(v75, v76);
      }
      else
      {
        --*(_DWORD *)v55;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v59 = *(WTF::StringImpl **)&v79[0];
    if (*(_QWORD *)&v79[0])
    {
      **(_DWORD **)&v79[0] += 2;
      LOBYTE(v79[0]) = 16;
      *((_QWORD *)&v79[0] + 1) = v59;
      WebCore::createErrorResult((WebCore::DOMGuardedObject **)a6, v55 + 5, v55 + 6, (uint64_t)v79);
      v61 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::destroy(v59, v60);
        v61 = *(_DWORD *)v59;
      }
      else
      {
        *(_DWORD *)v59 = v61;
      }
      v62 = v61 - 2;
      if (v62)
        *(_DWORD *)v59 = v62;
      else
        WTF::StringImpl::destroy(v59, v60);
    }
    else
    {
      v79[0] = 0x10uLL;
      WebCore::createErrorResult((WebCore::DOMGuardedObject **)a6, v55 + 5, v55 + 6, (uint64_t)v79);
    }
    WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)&v106, v60);
    if (!v55)
      goto LABEL_64;
    goto LABEL_114;
  }
  v56 = *(_QWORD *)(v109[5] + 24);
  if (!v56 || (v57 = *(_QWORD *)v56) == 0 || (*(_BYTE *)(v56 + 8) & 3) != 0)
  {
    v58 = 10;
    goto LABEL_105;
  }
  if ((v57 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v57 + 5) == 68)
      v58 = *(_QWORD *)v56;
    else
      v58 = 0;
    goto LABEL_105;
  }
LABEL_137:
  v58 = 0;
LABEL_105:
  v63 = *(_QWORD *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x28);
  v64 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  v65 = WebCore::DOMGuardedObject::DOMGuardedObject(v64, v63, v58);
  *(_QWORD *)v65 = &off_1E3251870;
  *(_QWORD *)a6 = v65;
  v66 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 24);
  if (v66 && (v67 = *(_QWORD *)v66) != 0 && (*(_BYTE *)(v66 + 8) & 3) == 0)
  {
    if ((v67 & 0xFFFE000000000002) != 0)
    {
      v68 = 0;
    }
    else if (*(_BYTE *)(v67 + 5) == 68)
    {
      v68 = *(_QWORD *)v66;
    }
    else
    {
      v68 = 0;
    }
  }
  else
  {
    v68 = 10;
  }
  v69 = *(_QWORD *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x28);
  v70 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  v71 = WebCore::DOMGuardedObject::DOMGuardedObject(v70, v69, v68);
  *(_QWORD *)v71 = &off_1E3251870;
  *(_QWORD *)(a6 + 8) = v71;
  WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)&v106, v72);
LABEL_114:
  if (*(_DWORD *)a3 == 1)
  {
    WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker((WebCore::NavigationAPIMethodTracker *)a3, v22);
    WTF::fastFree(v73, v74);
  }
  else
  {
    --*(_DWORD *)a3;
  }
LABEL_64:
  if (v112 != -1)
    ((void (*)(uint64_t *, unsigned int **))off_1E33FFD78[v112])(&v106, &v110);
LABEL_66:
  result = v113;
  v113 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Navigation::performTraversal@<X0>(uint64_t a1@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  void *v20;
  const WTF::StringImpl *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WebCore::DOMGuardedObject *v43;
  WebCore::DOMGuardedObject *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WebCore::DOMGuardedObject *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int i;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  const WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  JSC::JSPromise *v66;
  uint64_t v67;
  JSC::JSGlobalObject *v68;
  void *v69;
  const WTF::StringImpl *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  WebCore::NavigationAPIMethodTracker *v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  WTF **v80;
  int j;
  WTF **v82;
  WTF *v83;
  const WTF::StringImpl *v84;
  WebCore::NavigationAPIMethodTracker *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  WebCore::DOMGuardedObject *v94;
  WebCore::DOMGuardedObject *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  WebCore::DOMGuardedObject *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unsigned int **v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  WebCore::DOMGuardedObject *v110;
  WebCore::DOMGuardedObject *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  WebCore::DOMGuardedObject *v116;
  WebCore::HistoryItem *v117;
  void *v118;
  bmalloc::api *v119;
  void *v120;
  WebCore::HistoryItem *v121;
  void *v122;
  bmalloc::api *v123;
  void *v124;
  WebCore::NavigationAPIMethodTracker *v125;
  WTF *v126;
  void *v127;
  WTF *v128;
  void *v129;
  WTF *v130;
  void *v131;
  WTF *v132;
  void *v133;
  char v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;

  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72);
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    if (*(_BYTE *)(v15 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19600ADF4);
    }
    v16 = v15 - 288;
    *(_DWORD *)(v15 - 264) += 2;
  }
  else
  {
    v16 = 0;
  }
  if (!WebCore::Document::isFullyActive((WebCore::Document *)v16))
  {
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v17);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
    goto LABEL_20;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72) + 8);
  if (*(_BYTE *)(v18 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19600AE24);
  }
  v19 = *(_DWORD *)(v18 + 3052);
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v17);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  if (v19)
  {
LABEL_20:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = v138;
    if (v138)
    {
      *(_DWORD *)v138 += 2;
      LOBYTE(v138) = 8;
      v139 = v25;
      result = WebCore::createErrorResult((WebCore::DOMGuardedObject **)a7, a5, a6, (uint64_t)&v138);
      v28 = *(_DWORD *)v25 - 2;
      if (*(_DWORD *)v25 == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v25, v27);
        v28 = *(_DWORD *)v25;
      }
      else
      {
        *(_DWORD *)v25 = v28;
      }
      v29 = v28 - 2;
      if (v29)
        *(_DWORD *)v25 = v29;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v25, v27);
    }
    else
    {
      v138 = (WTF::StringImpl *)8;
      v139 = 0;
      return WebCore::createErrorResult((WebCore::DOMGuardedObject **)a7, a5, a6, (uint64_t)&v138);
    }
    return result;
  }
  if (WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1) || !*(_BYTE *)(a1 + 48))
  {
    v23 = 0;
LABEL_27:
    v24 = 1;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(a1 + 40);
  if (v22 >= *(unsigned int *)(a1 + 84))
  {
    __break(0xC471u);
    JUMPOUT(0x19600AE80);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v22);
  if (!v23)
    goto LABEL_27;
  v24 = 0;
  ++*(_DWORD *)(v23 + 24);
LABEL_28:
  v30 = *(_QWORD *)(v23 + 40);
  v136 = a4;
  if (v30 && (v31 = *(_QWORD *)(v30 + 8)) != 0 && !*(_BYTE *)(v31 + 178))
  {
    v32 = v31 - 288;
    *(_DWORD *)(v31 - 264) += 2;
    if ((WebCore::Document::isFullyActive((WebCore::Document *)(v31 - 288)) & 1) != 0)
    {
      WTF::UUID::toString((WTF::UUID *)(*(_QWORD *)(v23 + 64) + 368));
LABEL_35:
      if (*(_DWORD *)(v32 + 24) == 2)
      {
        if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v32, v20);
      }
      else
      {
        *(_DWORD *)(v32 + 24) -= 2;
      }
      goto LABEL_37;
    }
    v33 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 1;
  }
  v34 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *(_DWORD *)v34 += 2;
  v138 = v34;
  if ((v33 & 1) == 0)
    goto LABEL_35;
LABEL_37:
  v37 = WTF::equal(v138, *a2, v21);
  v38 = v138;
  v138 = 0;
  if (!v38)
    goto LABEL_40;
  if (*(_DWORD *)v38 != 2)
  {
    *(_DWORD *)v38 -= 2;
LABEL_40:
    if (v37)
    {
LABEL_41:
      WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::NavigationHistoryEntry>>(*a5, v23);
      WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::NavigationHistoryEntry>>(*a6, v23);
      v39 = *(_QWORD *)(*a5 + 24);
      if (v39 && (v40 = *(_QWORD *)v39) != 0 && (*(_BYTE *)(v39 + 8) & 3) == 0)
      {
        if ((v40 & 0xFFFE000000000002) != 0)
        {
          v41 = 0;
        }
        else if (*(_BYTE *)(v40 + 5) == 68)
        {
          v41 = *(_QWORD *)v39;
        }
        else
        {
          v41 = 0;
        }
      }
      else
      {
        v41 = 10;
      }
      v42 = *(_QWORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x28);
      v43 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
      v44 = WebCore::DOMGuardedObject::DOMGuardedObject(v43, v42, v41);
      *(_QWORD *)v44 = &off_1E3251870;
      *(_QWORD *)a7 = v44;
      v45 = *(_QWORD *)(*a6 + 24);
      if (v45 && (v46 = *(_QWORD *)v45) != 0 && (*(_BYTE *)(v45 + 8) & 3) == 0)
      {
        if ((v46 & 0xFFFE000000000002) != 0)
        {
          v47 = 0;
        }
        else if (*(_BYTE *)(v46 + 5) == 68)
        {
          v47 = *(_QWORD *)v45;
        }
        else
        {
          v47 = 0;
        }
      }
      else
      {
        v47 = 10;
      }
      v48 = *(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x28);
      v49 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
      result = WebCore::DOMGuardedObject::DOMGuardedObject(v49, v48, v47);
      *(_QWORD *)result = &off_1E3251870;
      *(_QWORD *)(a7 + 8) = result;
      if ((v24 & 1) != 0)
        return result;
LABEL_167:
      if (*(_DWORD *)(v23 + 24) == 1)
      {
        v117 = *(WebCore::HistoryItem **)(v23 + 64);
        *(_QWORD *)(v23 + 64) = 0;
        if (v117)
        {
          if (*(_DWORD *)v117 == 1)
          {
            WebCore::HistoryItem::~HistoryItem(v117, v50);
            WTF::fastFree(v130, v131);
          }
          else
          {
            --*(_DWORD *)v117;
          }
        }
        WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v23 + 32), v50);
        WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v23, v118);
        return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v119, v120);
      }
      else
      {
        --*(_DWORD *)(v23 + 24);
      }
      return result;
    }
    goto LABEL_69;
  }
  WTF::StringImpl::destroy(v38, v35);
  if (v37)
    goto LABEL_41;
LABEL_69:
  v134 = v24;
  v135 = v23;
  v51 = *(_QWORD *)(a1 + 120);
  v137 = (uint64_t *)(a1 + 120);
  if (v51)
  {
    v52 = *(_DWORD *)(v51 - 8);
    v53 = *((_DWORD *)*a2 + 4);
    if (v53 < 0x100)
      v54 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v54 = v53 >> 8;
    for (i = 0; ; v54 = i + v56)
    {
      v56 = v54 & v52;
      v57 = *(WTF **)(v51 + 16 * v56);
      if (v57 != (WTF *)-1)
      {
        if (!v57)
          goto LABEL_78;
        if ((WTF::equal(v57, *a2, v36) & 1) != 0)
          break;
      }
      ++i;
    }
    v75 = *(WebCore::NavigationAPIMethodTracker **)(v51 + 16 * v56 + 8);
    ++*(_DWORD *)v75;
    v76 = *(_QWORD *)(*((_QWORD *)v75 + 5) + 24);
    if (!v76)
    {
      v79 = 10;
      v23 = v135;
      v78 = v134;
      goto LABEL_128;
    }
    v77 = *(_QWORD *)v76;
    v78 = v134;
    if (*(_QWORD *)v76)
    {
      v23 = v135;
      if ((*(_BYTE *)(v76 + 8) & 3) != 0)
      {
        v79 = 10;
      }
      else if ((v77 & 0xFFFE000000000002) != 0)
      {
        v79 = 0;
      }
      else if (*(_BYTE *)(v77 + 5) == 68)
      {
        v79 = *(_QWORD *)v76;
      }
      else
      {
        v79 = 0;
      }
      goto LABEL_128;
    }
LABEL_194:
    v79 = 10;
    v23 = v135;
LABEL_128:
    v93 = *(_QWORD *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x28);
    v94 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
    v95 = WebCore::DOMGuardedObject::DOMGuardedObject(v94, v93, v79);
    *(_QWORD *)v95 = &off_1E3251870;
    *(_QWORD *)a7 = v95;
    v96 = *(_QWORD *)(*((_QWORD *)v75 + 6) + 24);
    if (v96 && (v97 = *(_QWORD *)v96) != 0 && (*(_BYTE *)(v96 + 8) & 3) == 0)
    {
      if ((v97 & 0xFFFE000000000002) != 0)
      {
        v98 = 0;
      }
      else if (*(_BYTE *)(v97 + 5) == 68)
      {
        v98 = *(_QWORD *)v96;
      }
      else
      {
        v98 = 0;
      }
    }
    else
    {
      v98 = 10;
    }
    v99 = *(_QWORD *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x28);
    v100 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
    result = WebCore::DOMGuardedObject::DOMGuardedObject(v100, v99, v98);
    *(_QWORD *)result = &off_1E3251870;
    *(_QWORD *)(a7 + 8) = result;
    if (*(_DWORD *)v75 != 1)
    {
      --*(_DWORD *)v75;
      if ((v78 & 1) != 0)
        return result;
      goto LABEL_167;
    }
    v125 = v75;
LABEL_182:
    WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v125, v50);
    result = (WTF::StringImpl *)WTF::fastFree(v126, v127);
    if ((v78 & 1) == 0)
      goto LABEL_167;
    return result;
  }
LABEL_78:
  v58 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v58 = 1;
  *(_BYTE *)(v58 + 4) = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = a3;
  *(_QWORD *)(v58 + 24) = 0;
  *(_QWORD *)(v58 + 32) = 0;
  v59 = *a5;
  *a5 = 0;
  *(_QWORD *)(v58 + 40) = v59;
  v60 = *a6;
  *a6 = 0;
  *(_QWORD *)(v58 + 48) = v60;
  *(_QWORD *)(v58 + 56) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v62 = *a2;
  if (*a2)
    *(_DWORD *)v62 += 2;
  v63 = *(WTF::StringImpl **)(v58 + 8);
  *(_QWORD *)(v58 + 8) = v62;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v61);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = *(_QWORD *)(v58 + 48);
  v65 = **(_QWORD **)(v64 + 24);
  if ((v65 & 0xFFFE000000000002) != 0)
  {
    v66 = 0;
  }
  else if (*(_BYTE *)(v65 + 5) == 68)
  {
    v66 = **(JSC::JSPromise ***)(v64 + 24);
  }
  else
  {
    v66 = 0;
  }
  v67 = *(_QWORD *)(v64 + 32);
  if (!v67 || (*(_BYTE *)(v67 + 8) & 3) != 0)
    v68 = 0;
  else
    v68 = *(JSC::JSGlobalObject **)v67;
  JSC::JSPromise::markAsHandled(v66, v68);
  v71 = *v137;
  if (*v137
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v137, 8u), (v71 = *v137) != 0))
  {
    v72 = *(_DWORD *)(v71 - 8);
  }
  else
  {
    v72 = 0;
  }
  v73 = *((_DWORD *)*a2 + 4);
  if (v73 < 0x100)
    v74 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v74 = v73 >> 8;
  v80 = 0;
  for (j = 1; ; ++j)
  {
    v75 = (WebCore::NavigationAPIMethodTracker *)(v74 & v72);
    v82 = (WTF **)(v71 + 16 * v75);
    v83 = *v82;
    if (*v82 == (WTF *)-1)
    {
      v80 = (WTF **)(v71 + 16 * v75);
      goto LABEL_106;
    }
    if (!v83)
      break;
    if ((WTF::equal(v83, *a2, v70) & 1) != 0)
      goto LABEL_144;
LABEL_106:
    v74 = j + (_DWORD)v75;
  }
  if (v80)
  {
    *v80 = 0;
    v80[1] = 0;
    --*(_DWORD *)(*v137 - 16);
    v82 = v80;
  }
  v84 = *a2;
  if (*a2)
    *(_DWORD *)v84 += 2;
  *v82 = v84;
  ++*(_DWORD *)v58;
  v85 = v82[1];
  v82[1] = (WTF *)v58;
  if (v85)
  {
    if (*(_DWORD *)v85 == 1)
    {
      WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v85, v69);
      WTF::fastFree(v128, v129);
    }
    else
    {
      --*(_DWORD *)v85;
    }
  }
  v86 = *v137;
  if (*v137)
    v87 = *(_DWORD *)(v86 - 12) + 1;
  else
    v87 = 1;
  *(_DWORD *)(v86 - 12) = v87;
  v88 = *v137;
  if (*v137)
    v89 = *(_DWORD *)(v88 - 12);
  else
    v89 = 0;
  v90 = (*(_DWORD *)(v88 - 16) + v89);
  v91 = *(unsigned int *)(v88 - 4);
  if (v91 > 0x400)
  {
    if (v91 <= 2 * v90)
    {
LABEL_123:
      v92 = (_DWORD)v91 << (6 * *(_DWORD *)(v88 - 12) >= (2 * v91));
      goto LABEL_143;
    }
  }
  else if (3 * v91 <= 4 * v90)
  {
    if ((_DWORD)v91)
      goto LABEL_123;
    v92 = 8;
LABEL_143:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v137, v92);
  }
LABEL_144:
  WebCore::Navigation::findEntryByKey((_DWORD *)a1, a2, v70, &v138);
  v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72) + 8);
  if (*(_BYTE *)(v101 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19600AE50);
  }
  v23 = v135;
  v78 = v134;
  if (!(_BYTE)v139)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_194;
  }
  v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 240) + 8) + 280);
  v103 = v138;
  v104 = (unsigned int **)*((_QWORD *)v138 + 8);
  WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  v105 = *(_QWORD *)(a1 + 40);
  if (v105 >= *(unsigned int *)(a1 + 84))
  {
    __break(0xC471u);
    JUMPOUT(0x19600AE78);
  }
  WebCore::FrameLoader::loadItem(v102, v104, *(WebCore::HistoryItem **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v105) + 64), v136, 0);
  v106 = *(_QWORD *)(*(_QWORD *)(v58 + 40) + 24);
  if (v106 && (v107 = *(_QWORD *)v106) != 0 && (*(_BYTE *)(v106 + 8) & 3) == 0)
  {
    if ((v107 & 0xFFFE000000000002) != 0)
    {
      v108 = 0;
    }
    else if (*(_BYTE *)(v107 + 5) == 68)
    {
      v108 = *(_QWORD *)v106;
    }
    else
    {
      v108 = 0;
    }
  }
  else
  {
    v108 = 10;
  }
  v109 = *(_QWORD *)(16 * (*(_DWORD *)v108 & 0xFFFFFFFE) + 0x28);
  v110 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  v111 = WebCore::DOMGuardedObject::DOMGuardedObject(v110, v109, v108);
  *(_QWORD *)v111 = &off_1E3251870;
  *(_QWORD *)a7 = v111;
  v112 = *(_QWORD *)(*(_QWORD *)(v58 + 48) + 24);
  if (v112 && (v113 = *(_QWORD *)v112) != 0 && (*(_BYTE *)(v112 + 8) & 3) == 0)
  {
    if ((v113 & 0xFFFE000000000002) != 0)
    {
      v114 = 0;
    }
    else if (*(_BYTE *)(v113 + 5) == 68)
    {
      v114 = *(_QWORD *)v112;
    }
    else
    {
      v114 = 0;
    }
  }
  else
  {
    v114 = 10;
  }
  v115 = *(_QWORD *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0x28);
  v116 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  result = WebCore::DOMGuardedObject::DOMGuardedObject(v116, v115, v114);
  *(_QWORD *)result = &off_1E3251870;
  *(_QWORD *)(a7 + 8) = result;
  if (*((_DWORD *)v103 + 6) == 1)
  {
    v121 = (WebCore::HistoryItem *)*((_QWORD *)v103 + 8);
    *((_QWORD *)v103 + 8) = 0;
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v121, v50);
        WTF::fastFree(v132, v133);
      }
      else
      {
        --*(_DWORD *)v121;
      }
    }
    WebCore::ContextDestructionObserver::~ContextDestructionObserver((WTF::StringImpl *)((char *)v103 + 32), v50);
    WebCore::EventTarget::~EventTarget(v103, v122);
    result = (WTF::StringImpl *)bmalloc::api::isoDeallocate(v123, v124);
  }
  else
  {
    --*((_DWORD *)v103 + 6);
  }
  if (*(_DWORD *)v58 == 1)
  {
    v125 = (WebCore::NavigationAPIMethodTracker *)v58;
    goto LABEL_182;
  }
  --*(_DWORD *)v58;
  if ((v134 & 1) == 0)
    goto LABEL_167;
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::NavigationHistoryEntry>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::NavigationHistoryEntry>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

_DWORD *WebCore::Navigation::findEntryByKey@<X0>(_DWORD *this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _BYTE *a4@<X8>)
{
  _DWORD *v6;
  unint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;
  WebCore::HistoryItem *v16;
  void *v17;
  bmalloc::api *v18;
  void *v19;
  WTF *v20;
  void *v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  if (!this[21])
  {
LABEL_31:
    v22 = 0;
    *a4 = 0;
    goto LABEL_34;
  }
  v6 = this;
  v7 = 0;
  v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
  while (1)
  {
    v9 = *(_QWORD *)(*((_QWORD *)v6 + 9) + 8 * v7);
    ++*(_DWORD *)(v9 + 24);
    v10 = *(_QWORD *)(v9 + 40);
    if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && !*(_BYTE *)(v11 + 178))
    {
      v12 = v11 - 288;
      *(_DWORD *)(v11 - 264) += 2;
      if ((WebCore::Document::isFullyActive((WebCore::Document *)(v11 - 288)) & 1) != 0)
      {
        WTF::UUID::toString((WTF::UUID *)(*(_QWORD *)(v9 + 64) + 368));
LABEL_10:
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
        goto LABEL_12;
      }
      v13 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = *v8;
    if (*v8)
      *(_DWORD *)v14 += 2;
    v24 = v14;
    if ((v13 & 1) == 0)
      goto LABEL_10;
LABEL_12:
    v15 = WTF::equal(v24, *a2, a3);
    this = v24;
    v24 = 0;
    if (this)
    {
      if (*this == 2)
        this = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
      else
        *this -= 2;
    }
    if (*(_DWORD *)(v9 + 24) == 1)
      break;
    --*(_DWORD *)(v9 + 24);
    if ((v15 & 1) != 0)
      goto LABEL_32;
LABEL_17:
    if (++v7 >= v6[21])
      goto LABEL_31;
  }
  v16 = *(WebCore::HistoryItem **)(v9 + 64);
  *(_QWORD *)(v9 + 64) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v16, (WTF::StringImpl *)a2);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v9 + 32), a2);
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v9, v17);
  this = (_DWORD *)bmalloc::api::isoDeallocate(v18, v19);
  if ((v15 & 1) == 0)
    goto LABEL_17;
LABEL_32:
  if (v7 >= v6[21])
  {
    __break(0xC471u);
  }
  else
  {
    v23 = *(_QWORD *)(*((_QWORD *)v6 + 9) + 8 * v7);
    ++*(_DWORD *)(v23 + 24);
    *(_QWORD *)a4 = v23;
    v22 = 1;
LABEL_34:
    a4[8] = v22;
  }
  return this;
}

WTF::StringImpl *WebCore::Navigation::traverseTo@<X0>(_DWORD *a1@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, WebCore::DOMGuardedObject **a6@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  WebCore::HistoryItem *v19;
  void *v20;
  bmalloc::api *v21;
  void *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  WebCore::Navigation::findEntryByKey(a1, a2, a3, &v25);
  if (v26)
  {
    result = WebCore::Navigation::performTraversal((uint64_t)a1, a2, *(_QWORD *)a3, 3u, a4, a5, (uint64_t)a6);
    v14 = v25;
    if (v25)
    {
      if (*(_DWORD *)(v25 + 24) == 1)
      {
        v19 = *(WebCore::HistoryItem **)(v25 + 64);
        *(_QWORD *)(v25 + 64) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
          {
            WebCore::HistoryItem::~HistoryItem(v19, v13);
            WTF::fastFree(v23, v24);
          }
          else
          {
            --*(_DWORD *)v19;
          }
        }
        WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v14 + 32), v13);
        WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v14, v20);
        return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v21, v22);
      }
      else
      {
        --*(_DWORD *)(v25 + 24);
      }
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = (WTF::StringImpl *)v27;
    if (v27)
    {
      *(_DWORD *)v27 += 2;
      LOBYTE(v27) = 8;
      v28 = v15;
      result = WebCore::createErrorResult(a6, a4, a5, (uint64_t)&v27);
      v17 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v16);
        v17 = *(_DWORD *)v15;
      }
      else
      {
        *(_DWORD *)v15 = v17;
      }
      v18 = v17 - 2;
      if (v18)
        *(_DWORD *)v15 = v18;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v16);
    }
    else
    {
      v27 = 8;
      v28 = 0;
      return WebCore::createErrorResult(a6, a4, a5, (uint64_t)&v27);
    }
  }
  return result;
}

uint64_t WebCore::Navigation::back@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, WebCore::DOMGuardedObject **a5@<X8>)
{
  uint64_t result;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  WebCore::HistoryItem *v25;
  void *v26;
  bmalloc::api *v27;
  void *v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  result = WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  if ((result & 1) != 0)
    goto LABEL_19;
  if (!*(_BYTE *)(a1 + 48))
  {
    __break(1u);
    goto LABEL_40;
  }
  v12 = *(_QWORD *)(a1 + 40);
  if (!v12)
  {
LABEL_19:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = v31;
    if (v31)
    {
      *(_DWORD *)v31 += 2;
      LOBYTE(v31) = 8;
      v32 = v21;
      result = (uint64_t)WebCore::createErrorResult(a5, a3, a4, (uint64_t)&v31);
      v23 = *(_DWORD *)v21 - 2;
      if (*(_DWORD *)v21 == 2)
      {
        result = WTF::StringImpl::destroy(v21, v22);
        v23 = *(_DWORD *)v21;
      }
      else
      {
        *(_DWORD *)v21 = v23;
      }
      v24 = v23 - 2;
      if (v24)
        *(_DWORD *)v21 = v24;
      else
        return WTF::StringImpl::destroy(v21, v22);
    }
    else
    {
      v31 = (WTF::StringImpl *)8;
      v32 = 0;
      return (uint64_t)WebCore::createErrorResult(a5, a3, a4, (uint64_t)&v31);
    }
    return result;
  }
  v13 = v12 - 1;
  if (v13 >= *(unsigned int *)(a1 + 84))
  {
LABEL_40:
    __break(0xC471u);
    return result;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v13);
  ++*(_DWORD *)(v14 + 24);
  v15 = *(_QWORD *)(v14 + 40);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0 || *(_BYTE *)(v16 + 178))
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_9;
  }
  v17 = v16 - 288;
  *(_DWORD *)(v16 - 264) += 2;
  if ((WebCore::Document::isFullyActive((WebCore::Document *)(v16 - 288)) & 1) == 0)
  {
    v18 = 0;
LABEL_9:
    v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v19 += 2;
    v31 = v19;
    if ((v18 & 1) != 0)
      goto LABEL_14;
    goto LABEL_12;
  }
  WTF::UUID::toString((WTF::UUID *)(*(_QWORD *)(v14 + 64) + 368));
LABEL_12:
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17, v11);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
LABEL_14:
  WebCore::Navigation::performTraversal(a1, &v31, *a2, 1u, a3, a4, (uint64_t)a5);
  result = (uint64_t)v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(v14 + 24) == 1)
  {
    v25 = *(WebCore::HistoryItem **)(v14 + 64);
    *(_QWORD *)(v14 + 64) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v25, v20);
        WTF::fastFree(v29, v30);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
    WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v14 + 32), v20);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v14, v26);
    return bmalloc::api::isoDeallocate(v27, v28);
  }
  else
  {
    --*(_DWORD *)(v14 + 24);
  }
  return result;
}

uint64_t WebCore::Navigation::forward@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, WebCore::DOMGuardedObject **a5@<X8>)
{
  uint64_t result;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebCore::HistoryItem *v26;
  void *v27;
  bmalloc::api *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  result = WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  if ((result & 1) != 0)
  {
LABEL_4:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v32;
    if (v32)
    {
      *(_DWORD *)v32 += 2;
      LOBYTE(v32) = 8;
      v33 = v14;
      result = (uint64_t)WebCore::createErrorResult(a5, a3, a4, (uint64_t)&v32);
      v16 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 == 2)
      {
        result = WTF::StringImpl::destroy(v14, v15);
        v16 = *(_DWORD *)v14;
      }
      else
      {
        *(_DWORD *)v14 = v16;
      }
      v17 = v16 - 2;
      if (v17)
        *(_DWORD *)v14 = v17;
      else
        return WTF::StringImpl::destroy(v14, v15);
    }
    else
    {
      v32 = (WTF::StringImpl *)8;
      v33 = 0;
      return (uint64_t)WebCore::createErrorResult(a5, a3, a4, (uint64_t)&v32);
    }
    return result;
  }
  if (!*(_BYTE *)(a1 + 48))
  {
    __break(1u);
    goto LABEL_40;
  }
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(unsigned int *)(a1 + 84);
  if (v12 == v13 - 1)
    goto LABEL_4;
  v18 = v12 + 1;
  if (v18 >= v13)
  {
LABEL_40:
    __break(0xC471u);
    return result;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v18);
  ++*(_DWORD *)(v19 + 24);
  v20 = *(_QWORD *)(v19 + 40);
  if (!v20 || (v21 = *(_QWORD *)(v20 + 8)) == 0 || *(_BYTE *)(v21 + 178))
  {
    v22 = 0;
    v23 = 1;
    goto LABEL_14;
  }
  v22 = v21 - 288;
  *(_DWORD *)(v21 - 264) += 2;
  if ((WebCore::Document::isFullyActive((WebCore::Document *)(v21 - 288)) & 1) == 0)
  {
    v23 = 0;
LABEL_14:
    v24 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v24 += 2;
    v32 = v24;
    if ((v23 & 1) != 0)
      goto LABEL_19;
    goto LABEL_17;
  }
  WTF::UUID::toString((WTF::UUID *)(*(_QWORD *)(v19 + 64) + 368));
LABEL_17:
  if (*(_DWORD *)(v22 + 24) == 2)
  {
    if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v22, v11);
  }
  else
  {
    *(_DWORD *)(v22 + 24) -= 2;
  }
LABEL_19:
  WebCore::Navigation::performTraversal(a1, &v32, *a2, 2u, a3, a4, (uint64_t)a5);
  result = (uint64_t)v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(v19 + 24) == 1)
  {
    v26 = *(WebCore::HistoryItem **)(v19 + 64);
    *(_QWORD *)(v19 + 64) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v26, v25);
        WTF::fastFree(v30, v31);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v19 + 32), v25);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v19, v27);
    return bmalloc::api::isoDeallocate(v28, v29);
  }
  else
  {
    --*(_DWORD *)(v19 + 24);
  }
  return result;
}

uint64_t WebCore::Navigation::updateCurrentEntry@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  int v21;
  unsigned int **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  WebCore::HistoryItem *v35;
  void *v36;
  bmalloc::api *v37;
  void *v38;
  WebCore::HistoryItem *v39;
  void *v40;
  bmalloc::api *v41;
  void *v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  unsigned int *v48[2];
  _QWORD v49[2];
  int v50;
  WTF *v51;
  uint64_t v52;
  char v53;

  result = WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  if ((result & 1) != 0 || !*(_BYTE *)(a1 + 48))
    goto LABEL_39;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 >= *(unsigned int *)(a1 + 84))
    goto LABEL_77;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v7);
  if (!v8)
  {
LABEL_39:
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  ++*(_DWORD *)(v8 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
    goto LABEL_42;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_42;
  v11 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 1;
  v12 = *(_QWORD *)(v10 + 72);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      if (!*(_BYTE *)(v13 + 178))
      {
        v14 = v13 - 288;
        if (v11)
          goto LABEL_11;
        goto LABEL_41;
      }
LABEL_77:
      __break(0xC471u);
      JUMPOUT(0x19600BC5CLL);
    }
  }
  v14 = 0;
  if (v11)
  {
LABEL_11:
    *(_DWORD *)(v10 + 24) = v11;
    if (v14)
      goto LABEL_12;
LABEL_42:
    v15 = 0;
    goto LABEL_14;
  }
LABEL_41:
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
  if (!v14)
    goto LABEL_42;
LABEL_12:
  v15 = v14 + 192;
  v16 = *(unsigned __int8 *)(v14 + 466);
  if (*(_BYTE *)(v14 + 466))
  {
    if (v16 == 1 || v16 == 2)
      ++*(_DWORD *)(v14 + 504);
  }
  else
  {
    *(_DWORD *)(v14 + 24) += 2;
  }
LABEL_14:
  v17 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)v15);
  v18 = *a2;
  v51 = 0;
  v52 = 0;
  v48[0] = 0;
  v48[1] = 0;
  WebCore::SerializedScriptValue::create(v17, v18, (uint64_t)v48, (uint64_t)&v51, 1, 1, 0, (uint64_t)v49);
  if (!v50)
  {
    v20 = (unsigned int *)v49[0];
    v49[0] = 0;
    v48[0] = v20;
LABEL_16:
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v50])(&v53, v49);
    goto LABEL_17;
  }
  v48[0] = 0;
  if (v50 != -1)
    goto LABEL_16;
LABEL_17:
  result = (uint64_t)v51;
  if (HIDWORD(v52))
  {
    v47 = 8 * HIDWORD(v52);
    do
    {
      result = (uint64_t)(WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)result, v19)+ 1);
      v47 -= 8;
    }
    while (v47);
    result = (uint64_t)v51;
    if (!v51)
    {
LABEL_19:
      if (v15)
        goto LABEL_20;
      goto LABEL_23;
    }
  }
  else if (!v51)
  {
    goto LABEL_19;
  }
  v51 = 0;
  LODWORD(v52) = 0;
  result = WTF::fastFree((WTF *)result, v19);
  if (v15)
  {
LABEL_20:
    v21 = *(unsigned __int8 *)(v15 + 274);
    if (*(_BYTE *)(v15 + 274))
    {
      if (v21 == 1)
      {
        if (*(_DWORD *)(v15 + 312) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
        else
          --*(_DWORD *)(v15 + 312);
      }
      else if (v21 == 2)
      {
        result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
      }
    }
    else if (*(_DWORD *)(v15 - 168) == 2)
    {
      if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), v19);
    }
    else
    {
      *(_DWORD *)(v15 - 168) -= 2;
    }
  }
LABEL_23:
  if (v48[0])
  {
    v22 = WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>::operator=((unsigned int **)(*(_QWORD *)(v8 + 64) + 176), v48);
    v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
      v24 = WebCore::threadGlobalDataSlow((WebCore *)v22);
    v25 = *(_QWORD *)(v24 + 40);
    if (!v25)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
      v25 = *(_QWORD *)(v24 + 40);
    }
    ++*(_DWORD *)(v8 + 24);
    v26 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v26);
    *(_QWORD *)(v26 + 8) = 0;
    *(_DWORD *)(v26 + 16) = 1;
    *(_DWORD *)(v26 + 20) = *(_DWORD *)(v26 + 20) & 0xFFC00000 | 0x278200 | (*(_QWORD *)(v25 + 552) != 0);
    v29 = *(_DWORD **)(v25 + 552);
    if (v29)
      *v29 += 2;
    *(_QWORD *)(v26 + 24) = v29;
    *(_QWORD *)(v26 + 32) = 0;
    *(_QWORD *)(v26 + 40) = 0;
    *(_QWORD *)(v26 + 48) = 0;
    *(_QWORD *)(v26 + 56) = v28;
    *(_QWORD *)(v26 + 64) = 0;
    *(_QWORD *)v26 = off_1E33FFF98;
    *(_WORD *)(v26 + 72) = 0;
    v30 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v30 + 1;
    *(_QWORD *)(v26 + 80) = v8;
    if (v30)
    {
      *(_DWORD *)(v8 + 24) = v30;
    }
    else
    {
      v39 = *(WebCore::HistoryItem **)(v8 + 64);
      *(_QWORD *)(v8 + 64) = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v39, v27);
          WTF::fastFree(v45, v46);
        }
        else
        {
          --*(_DWORD *)v39;
        }
      }
      WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v8 + 32), v27);
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v8, v40);
      bmalloc::api::isoDeallocate(v41, v42);
    }
    result = (uint64_t)WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)a1, (WebCore::Event *)v26);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (*(_DWORD *)(v26 + 16) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    else
      --*(_DWORD *)(v26 + 16);
    v31 = v48[0];
    v48[0] = 0;
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v31 + 2), v19);
        result = WTF::fastFree((WTF *)v31, v34);
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  if (*(_DWORD *)(v8 + 24) == 1)
  {
    v35 = *(WebCore::HistoryItem **)(v8 + 64);
    *(_QWORD *)(v8 + 64) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v35, (WTF::StringImpl *)v19);
        WTF::fastFree(v43, v44);
      }
      else
      {
        --*(_DWORD *)v35;
      }
    }
    WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v8 + 32), v19);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v8, v36);
    return bmalloc::api::isoDeallocate(v37, v38);
  }
  else
  {
    --*(_DWORD *)(v8 + 24);
  }
  return result;
}

uint64_t WebCore::Navigation::cleanupAPIMethodTracker(uint64_t result, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF *v16;
  void *v17;

  v4 = result;
  if (*(const WTF::StringImpl ***)(result + 104) == a2)
  {
    *(_QWORD *)(result + 104) = 0;
    if (*(_DWORD *)a2 == 1)
    {
      WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker((WebCore::NavigationAPIMethodTracker *)a2, a2);
      return WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)a2;
    }
  }
  else
  {
    result = (uint64_t)a2[1];
    if (result)
    {
      v7 = *(_QWORD *)(v4 + 120);
      v5 = (uint64_t *)(v4 + 120);
      v6 = v7;
      if (v7)
      {
        v8 = *(_DWORD *)(v6 - 8);
        v9 = *(_DWORD *)(result + 16);
        if (v9 < 0x100)
          v10 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
        else
          v10 = v9 >> 8;
        for (i = 0; ; v10 = i + v12)
        {
          v12 = v10 & v8;
          result = *(_QWORD *)(v6 + 16 * v12);
          if (result != -1)
          {
            if (!result)
            {
              v13 = *v5;
              if (!*v5)
                return result;
              v14 = *(unsigned int *)(v13 - 4);
              v15 = (WTF::StringImpl **)(v13 + 16 * v14);
              goto LABEL_19;
            }
            result = WTF::equal((WTF *)result, a2[1], a3);
            if ((result & 1) != 0)
              break;
          }
          ++i;
        }
        v15 = (WTF::StringImpl **)(v6 + 16 * v12);
        v13 = *v5;
        if (!*v5)
          goto LABEL_20;
        v14 = *(unsigned int *)(v13 - 4);
LABEL_19:
        v13 += 16 * v14;
        if ((WTF::StringImpl **)v13 == v15)
          return result;
LABEL_20:
        if ((WTF::StringImpl **)v13 != v15)
          return (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v5, v15);
      }
    }
  }
  return result;
}

uint64_t WebCore::Navigation::updateForNavigation(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  WebCore::HistoryItem *v36;
  void *v37;
  bmalloc::api *v38;
  void *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const WTF::StringImpl *v61;
  unint64_t StatusReg;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  WebCore *v72;
  WebCore::EventTarget **v73;
  uint64_t v74;
  WebCore::EventTarget *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  _DWORD *v82;
  WTF::StringImpl *v83;
  WebCore::HistoryItem *v84;
  void *v85;
  bmalloc::api *v86;
  void *v87;
  WebCore::HistoryItem *v88;
  void *v89;
  bmalloc::api *v90;
  void *v91;
  WebCore::HistoryItem *v92;
  void *v93;
  bmalloc::api *v94;
  void *v95;
  WebCore::HistoryItem *v96;
  void *v97;
  bmalloc::api *v98;
  void *v99;
  WTF *v100;
  void *v101;
  WTF *v102;
  void *v103;
  WTF *v104;
  void *v105;
  WTF *v106;
  void *v107;
  _DWORD *v108;
  char *v109;
  uint64_t v110;
  _QWORD v111[2];

  result = WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  if ((result & 1) != 0)
    return result;
  result = WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
  if ((result & 1) != 0 || !*(_BYTE *)(a1 + 48))
    return result;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(unsigned int *)(a1 + 84);
  if (v9 >= v10)
  {
    __break(0xC471u);
    goto LABEL_163;
  }
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(v11 + 8 * v9);
  if (!v12)
    return result;
  ++*(_DWORD *)(v12 + 24);
  v109 = 0;
  v110 = 0;
  if (!a3)
  {
    v20 = v9 + 1;
    *(_QWORD *)(a1 + 40) = v9 + 1;
    *(_BYTE *)(a1 + 48) = 1;
    if (v9 + 1 < v10)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      v3 = 8 * v9 + 8;
      do
      {
        v23 = *(_QWORD *)(a1 + 72) + v3;
        if ((_DWORD)v22 == (_DWORD)v110)
        {
          result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v109, v22 + 1, v23);
          v22 = HIDWORD(v110);
          v21 = v109;
          v24 = *(_QWORD *)result;
          *(_DWORD *)(v24 + 24) = *(_DWORD *)(*(_QWORD *)result + 24) + 1;
          *(_QWORD *)&v21[8 * v22] = v24;
          v10 = *(unsigned int *)(a1 + 84);
        }
        else
        {
          v25 = *(_QWORD *)v23;
          *(_DWORD *)(v25 + 24) = *(_DWORD *)(*(_QWORD *)v23 + 24) + 1;
          *(_QWORD *)&v21[8 * v22] = v25;
        }
        LODWORD(v22) = v22 + 1;
        HIDWORD(v110) = v22;
        ++v20;
        v3 += 8;
      }
      while (v20 < v10);
      v26 = *(unsigned __int8 *)(a1 + 48);
      if (!*(_BYTE *)(a1 + 48))
        goto LABEL_148;
      v20 = *(_QWORD *)(a1 + 40);
    }
    v27 = v20 + 1;
    if (v20 + 1 <= v10)
    {
      if (v20 + 1 != v10)
      {
        v34 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 8 * v27);
        v35 = 8 * v10 - 8 * v20 - 8;
        do
        {
          v3 = *v34;
          *v34 = 0;
          if (v3)
          {
            if (*(_DWORD *)(v3 + 24) == 1)
            {
              v36 = *(WebCore::HistoryItem **)(v3 + 64);
              *(_QWORD *)(v3 + 64) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 1)
                {
                  WebCore::HistoryItem::~HistoryItem(v36, v8);
                  WTF::fastFree(v40, v41);
                }
                else
                {
                  --*(_DWORD *)v36;
                }
              }
              WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v3 + 32), v8);
              WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v3, v37);
              result = bmalloc::api::isoDeallocate(v38, v39);
            }
            else
            {
              --*(_DWORD *)(v3 + 24);
            }
          }
          ++v34;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_55;
    }
    v28 = *(unsigned int *)(a1 + 80);
    v3 = *(_QWORD *)(a1 + 72);
    if (v27 <= v28)
    {
LABEL_53:
      if (v3)
        bzero((void *)(v3 + 8 * *(unsigned int *)(a1 + 84)), 8 * v27 - 8 * *(unsigned int *)(a1 + 84));
LABEL_55:
      *(_DWORD *)(a1 + 84) = v27;
      goto LABEL_56;
    }
    v29 = v28 + (v28 >> 2);
    if (v29 >= 0x10)
      v30 = v29 + 1;
    else
      v30 = 16;
    if (v30 <= v27)
      v31 = v20 + 1;
    else
      v31 = v30;
    if (!(v31 >> 29))
    {
      v32 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
      *(_DWORD *)(a1 + 80) = v31;
      *(_QWORD *)(a1 + 72) = v32;
      result = (uint64_t)memcpy(v32, (const void *)v3, 8 * v10);
      if (v3)
      {
        if (*(_QWORD *)(a1 + 72) == v3)
        {
          *(_QWORD *)(a1 + 72) = 0;
          *(_DWORD *)(a1 + 80) = 0;
        }
        result = WTF::fastFree((WTF *)v3, v33);
        v3 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        v3 = *(_QWORD *)(a1 + 72);
      }
      goto LABEL_53;
    }
    __break(0xC471u);
LABEL_163:
    JUMPOUT(0x19600C708);
  }
  if (a3 == 1)
  {
    v19 = (char *)WTF::fastMalloc((WTF *)0x80);
    v109 = v19;
    ++*(_DWORD *)(v12 + 24);
    *(_QWORD *)v19 = v12;
    v110 = 0x100000010;
    goto LABEL_57;
  }
  if (a3 != 3)
    goto LABEL_75;
  if (v10)
  {
    v13 = 0;
    v14 = 8 * v10;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * v13) + 64);
      v17 = *(_QWORD *)(v15 + 352);
      v16 = *(_QWORD *)(v15 + 360);
      if (v17 == *(_QWORD *)(*a2 + 352) && v16 == *(_QWORD *)(*a2 + 360))
        break;
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_16;
    }
    *(_QWORD *)(a1 + 40) = v13;
    *(_BYTE *)(a1 + 48) = 1;
LABEL_56:
    if (a3 > 1)
      goto LABEL_75;
LABEL_57:
    v42 = *(_QWORD *)(a1 + 32);
    if (!v42)
      goto LABEL_93;
    v43 = *(_QWORD *)(v42 + 8);
    if (!v43)
      goto LABEL_93;
    v26 = *(_DWORD *)(v43 + 24);
    *(_DWORD *)(v43 + 24) = v26 + 1;
    v44 = *(_QWORD *)(v43 + 72);
    if (v44 && (v45 = *(_QWORD *)(v44 + 8)) != 0)
    {
      if (*(_BYTE *)(v45 + 178))
      {
        result = 105;
        __break(0xC471u);
        goto LABEL_148;
      }
      v46 = v45 - 288;
      if (v26)
      {
LABEL_63:
        *(_DWORD *)(v43 + 24) = v26;
        if (v46)
          goto LABEL_64;
        goto LABEL_93;
      }
    }
    else
    {
      v46 = 0;
      if (v26)
        goto LABEL_63;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 72))(v43);
    if (v46)
    {
LABEL_64:
      v3 = v46 + 192;
      v47 = *(unsigned __int8 *)(v46 + 466);
      if (*(_BYTE *)(v46 + 466))
      {
        if (v47 == 1 || v47 == 2)
          ++*(_DWORD *)(v46 + 504);
      }
      else
      {
        *(_DWORD *)(v46 + 24) += 2;
      }
LABEL_66:
      v48 = bmalloc::api::isoAllocate();
      *(_DWORD *)(v48 + 24) = 1;
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v48 + 16) = 0;
      *(_QWORD *)v48 = &unk_1E33A4FC0;
      *(_QWORD *)(v48 + 32) = &off_1E33A18C0;
      *(_QWORD *)(v48 + 40) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v48 + 32), (WebCore::ScriptExecutionContext *)v3);
      *(_QWORD *)v48 = off_1E3400060;
      *(_QWORD *)(v48 + 32) = &unk_1E34000D8;
      result = WTF::UUID::UUID((WTF::UUID *)v111);
      v50 = v111[1];
      *(_QWORD *)(v48 + 48) = v111[0];
      *(_QWORD *)(v48 + 56) = v50;
      v51 = *a2;
      *a2 = 0;
      *(_QWORD *)(v48 + 64) = v51;
      v26 = *(unsigned __int8 *)(a1 + 48);
      if (*(_BYTE *)(a1 + 48))
      {
        v52 = *(_QWORD *)(a1 + 40);
        if (v52 >= *(unsigned int *)(a1 + 84))
        {
          __break(0xC471u);
          JUMPOUT(0x19600C710);
        }
        v53 = *(_QWORD *)(a1 + 72);
        v54 = *(_QWORD *)(v53 + 8 * v52);
        *(_QWORD *)(v53 + 8 * v52) = v48;
        if (v54)
        {
          if (*(_DWORD *)(v54 + 24) == 1)
          {
            v96 = *(WebCore::HistoryItem **)(v54 + 64);
            *(_QWORD *)(v54 + 64) = 0;
            if (v96)
            {
              if (*(_DWORD *)v96 == 1)
              {
                WebCore::HistoryItem::~HistoryItem(v96, v49);
                WTF::fastFree(v106, v107);
              }
              else
              {
                --*(_DWORD *)v96;
              }
            }
            WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v54 + 32), v49);
            WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v54, v97);
            result = bmalloc::api::isoDeallocate(v98, v99);
            if (!v3)
              goto LABEL_75;
LABEL_72:
            v26 = *(unsigned __int8 *)(v3 + 274);
            if (!*(_BYTE *)(v3 + 274))
            {
              if (*(_DWORD *)(v3 - 168) == 2)
              {
                if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
                  result = WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192));
              }
              else
              {
                *(_DWORD *)(v3 - 168) -= 2;
              }
              goto LABEL_75;
            }
LABEL_149:
            if (v26 == 1)
            {
              if (*(_DWORD *)(v3 + 312) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
              else
                --*(_DWORD *)(v3 + 312);
            }
            else if (v26 == 2)
            {
              result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
            }
            goto LABEL_75;
          }
          --*(_DWORD *)(v54 + 24);
        }
        if (v3)
          goto LABEL_72;
LABEL_75:
        v55 = *(_QWORD *)(a1 + 104);
        if (v55)
        {
          result = WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1);
          if ((result & 1) != 0 || !*(_BYTE *)(a1 + 48))
          {
            v58 = 0;
          }
          else
          {
            v57 = *(_QWORD *)(a1 + 40);
            if (v57 >= *(unsigned int *)(a1 + 84))
            {
              __break(0xC471u);
              JUMPOUT(0x19600C718);
            }
            v58 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v57);
            if (v58)
              ++*(_DWORD *)(v58 + 24);
          }
          v59 = *(_QWORD *)(v55 + 32);
          *(_QWORD *)(v55 + 32) = v58;
          if (v59)
          {
            if (*(_DWORD *)(v59 + 24) == 1)
            {
              v92 = *(WebCore::HistoryItem **)(v59 + 64);
              *(_QWORD *)(v59 + 64) = 0;
              if (v92)
              {
                if (*(_DWORD *)v92 == 1)
                {
                  WebCore::HistoryItem::~HistoryItem(v92, v56);
                  WTF::fastFree(v104, v105);
                }
                else
                {
                  --*(_DWORD *)v92;
                }
              }
              WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v59 + 32), v56);
              WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v59, v93);
              result = bmalloc::api::isoDeallocate(v94, v95);
            }
            else
            {
              --*(_DWORD *)(v59 + 24);
            }
          }
          if (a3 != 3)
            result = (uint64_t)WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>::operator=((unsigned int **)(*(_QWORD *)(*(_QWORD *)(v55 + 32) + 64) + 176), (unsigned int **)(v55 + 24));
          if (*(_BYTE *)(v55 + 4))
          {
            v60 = *(_QWORD *)(v55 + 32);
            if (v60)
            {
              WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::NavigationHistoryEntry>>(*(_QWORD *)(v55 + 40), v60);
              WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::NavigationHistoryEntry>>(*(_QWORD *)(v55 + 48), *(_QWORD *)(v55 + 32));
              result = WebCore::Navigation::cleanupAPIMethodTracker(a1, (const WTF::StringImpl **)v55, v61);
            }
            else
            {
              *(_BYTE *)(v55 + 4) = 1;
            }
          }
          else
          {
            result = WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::NavigationHistoryEntry>>(*(_QWORD *)(v55 + 40), v58);
          }
        }
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v63 = *(_QWORD *)(StatusReg + 736);
        if (!v63 || (v64 = *(_QWORD *)(v63 + 96)) == 0)
          v64 = WebCore::threadGlobalDataSlow((WebCore *)result);
        v65 = *(_QWORD *)(v64 + 40);
        if (!v65)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v64);
          v65 = *(_QWORD *)(v64 + 40);
        }
        v66 = a3 | 0x100;
        ++*(_DWORD *)(v12 + 24);
        v67 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v67);
        *(_QWORD *)(v67 + 8) = 0;
        *(_DWORD *)(v67 + 16) = 1;
        *(_DWORD *)(v67 + 20) = *(_DWORD *)(v67 + 20) & 0xFFC00000 | 0x278200 | (*(_QWORD *)(v65 + 552) != 0);
        v70 = *(_DWORD **)(v65 + 552);
        if (v70)
          *v70 += 2;
        *(_QWORD *)(v67 + 24) = v70;
        *(_QWORD *)(v67 + 32) = 0;
        *(_QWORD *)(v67 + 40) = 0;
        *(_QWORD *)(v67 + 48) = 0;
        *(_QWORD *)(v67 + 56) = v69;
        *(_QWORD *)(v67 + 64) = 0;
        *(_QWORD *)v67 = off_1E33FFF98;
        *(_WORD *)(v67 + 72) = v66;
        v71 = *(_DWORD *)(v12 + 24);
        *(_DWORD *)(v12 + 24) = v71 + 1;
        *(_QWORD *)(v67 + 80) = v12;
        if (v71)
        {
          *(_DWORD *)(v12 + 24) = v71;
        }
        else
        {
          v88 = *(WebCore::HistoryItem **)(v12 + 64);
          *(_QWORD *)(v12 + 64) = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 1)
            {
              WebCore::HistoryItem::~HistoryItem(v88, v68);
              WTF::fastFree(v102, v103);
            }
            else
            {
              --*(_DWORD *)v88;
            }
          }
          WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v12 + 32), v68);
          WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v12, v89);
          bmalloc::api::isoDeallocate(v90, v91);
        }
        v108 = (_DWORD *)v67;
        v72 = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)a1, (WebCore::Event *)v67);
        if (HIDWORD(v110))
        {
          v73 = (WebCore::EventTarget **)v109;
          v74 = 8 * HIDWORD(v110);
          do
          {
            v75 = *v73;
            v76 = *(_QWORD *)(StatusReg + 736);
            if (!v76 || (v77 = *(_QWORD *)(v76 + 96)) == 0)
              v77 = WebCore::threadGlobalDataSlow(v72);
            v78 = *(_QWORD *)(v77 + 40);
            if (!v78)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v77);
              v78 = *(_QWORD *)(v77 + 40);
            }
            v79 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v79);
            *(_DWORD *)(v79 + 16) = 1;
            *(_QWORD *)v79 = off_1E33A4B48;
            *(_QWORD *)(v79 + 8) = 0;
            v81 = *(_DWORD *)(v79 + 20) & 0xFFC00000 | 0x1E8000 | (*(_QWORD *)(v78 + 640) != 0);
            *(_DWORD *)(v79 + 20) = v81;
            v82 = *(_DWORD **)(v78 + 640);
            if (v82)
            {
              *v82 += 2;
              v81 = *(_DWORD *)(v79 + 20);
            }
            *(_QWORD *)(v79 + 24) = v82;
            *(_QWORD *)(v79 + 32) = 0;
            *(_QWORD *)(v79 + 40) = 0;
            *(_QWORD *)(v79 + 48) = 0;
            *(_QWORD *)(v79 + 56) = v80;
            *(_QWORD *)(v79 + 64) = 0;
            *(_DWORD *)(v79 + 20) = v81 | 0x4000;
            v72 = WebCore::EventTarget::dispatchEvent(v75, (WebCore::Event *)v79);
            if (*(_DWORD *)(v79 + 16) == 1)
              v72 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
            else
              --*(_DWORD *)(v79 + 16);
            ++v73;
            v74 -= 8;
          }
          while (v74);
        }
        if (v108[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v108 + 8))(v108);
        else
          --v108[4];
        goto LABEL_120;
      }
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
LABEL_93:
    v3 = 0;
    goto LABEL_66;
  }
LABEL_16:
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
LABEL_120:
  result = WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v8);
  if (*(_DWORD *)(v12 + 24) == 1)
  {
    v84 = *(WebCore::HistoryItem **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v84, v83);
        WTF::fastFree(v100, v101);
      }
      else
      {
        --*(_DWORD *)v84;
      }
    }
    WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v12 + 32), v83);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v12, v85);
    return bmalloc::api::isoDeallocate(v86, v87);
  }
  else
  {
    --*(_DWORD *)(v12 + 24);
  }
  return result;
}

uint64_t WebCore::Navigation::updateForReactivation(WebCore::Navigation *a1, uint64_t a2, uint64_t a3)
{
  WebCore::Navigation *v5;
  uint64_t result;
  WebCore::EventTarget **v7;
  int v8;
  unsigned int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  WebCore::HistoryItem **v13;
  uint64_t v14;
  _UNKNOWN **v15;
  WebCore::HistoryItem *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WebCore::Navigation *v32;
  _UNKNOWN **v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::HistoryItem *v39;
  void *v40;
  bmalloc::api *v41;
  void *v42;
  WTF *v43;
  void *v44;
  WebCore::HistoryItem *v45;
  void *v46;
  bmalloc::api *v47;
  void *v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;
  WebCore *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  unint64_t StatusReg;
  uint64_t v64;
  WebCore::EventTarget *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  _DWORD *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::EventTarget **v76;
  int v77;
  unsigned int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v5 = a1;
  result = WebCore::Navigation::hasEntriesAndEventsDisabled(a1);
  if ((result & 1) == 0)
  {
    v74 = a3;
    v79 = 0;
    v80 = 0;
    v7 = (WebCore::EventTarget **)*((_QWORD *)v5 + 9);
    v81 = 0;
    v82 = 0;
    v75 = (uint64_t)v5 + 72;
    v76 = v7;
    v8 = *((_DWORD *)v5 + 20);
    v9 = *((_DWORD *)v5 + 21);
    *((_QWORD *)v5 + 9) = 0;
    *((_QWORD *)v5 + 10) = 0;
    v77 = v8;
    v78 = v9;
    WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v5 + 72, &v81);
    WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v10);
    v12 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v12)
    {
      v13 = *(WebCore::HistoryItem ***)a2;
      v14 = *(_QWORD *)a2 + 8 * v12;
      v15 = &bmalloc::api::IsoHeapBase<WebCore::NavigationHistoryEntry>::provideHeap(void)::heap;
      do
      {
        v16 = *v13;
        ++*(_DWORD *)*v13;
        if (v9)
        {
          v17 = 8 * v9;
          v18 = (uint64_t *)v7;
          while (1)
          {
            v19 = *v18;
            v20 = *(_QWORD *)(*v18 + 64);
            v22 = *(_QWORD *)(v20 + 352);
            v21 = *(_QWORD *)(v20 + 360);
            if (v22 == *((_QWORD *)v16 + 44) && v21 == *((_QWORD *)v16 + 45))
              break;
            ++v18;
            v17 -= 8;
            if (!v17)
              goto LABEL_11;
          }
          v30 = *(_DWORD *)(v19 + 24);
          *(_DWORD *)(v19 + 24) = v30 + 1;
          *v18 = 0;
          if (v30)
          {
            v31 = v14;
            v32 = v5;
            v33 = v15;
            *(_DWORD *)(v19 + 24) = v30;
          }
          else
          {
            v45 = *(WebCore::HistoryItem **)(v19 + 64);
            *(_QWORD *)(v19 + 64) = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 1)
              {
                WebCore::HistoryItem::~HistoryItem(v45);
                WTF::fastFree(v51, v52);
              }
              else
              {
                --*(_DWORD *)v45;
              }
            }
            v31 = v14;
            v32 = v5;
            v33 = v15;
            WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v19 + 32), v11);
            WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v19, v46);
            bmalloc::api::isoDeallocate(v47, v48);
          }
          memmove(v18, v18 + 1, (char *)v76 - (char *)v7 + v17 - 8);
          --v78;
          v7 = v76;
          v15 = v33;
          v5 = v32;
          v14 = v31;
          v9 = v78;
        }
        else
        {
LABEL_11:
          v24 = *((_QWORD *)v5 + 4);
          if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
          {
            v26 = *(_DWORD *)(v25 + 24);
            *(_DWORD *)(v25 + 24) = v26 + 1;
            v27 = *(_QWORD *)(v25 + 72);
            if (v27)
            {
              v27 = *(_QWORD *)(v27 + 8);
              if (v27)
              {
                if (*(_BYTE *)(v27 + 178))
                {
                  result = 105;
                  __break(0xC471u);
                  return result;
                }
                v27 -= 288;
              }
            }
            if (v27)
              v28 = (WebCore::ScriptExecutionContext *)(v27 + 192);
            else
              v28 = 0;
            if (v26)
              *(_DWORD *)(v25 + 24) = v26;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
          }
          else
          {
            v28 = 0;
          }
          v19 = bmalloc::api::isoAllocate();
          *(_DWORD *)(v19 + 24) = 1;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)v19 = &unk_1E33A4FC0;
          *(_QWORD *)(v19 + 32) = &off_1E33A18C0;
          *(_QWORD *)(v19 + 40) = 0;
          WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v19 + 32), v28);
          *(_QWORD *)v19 = off_1E3400060;
          *(_QWORD *)(v19 + 32) = &unk_1E34000D8;
          WTF::UUID::UUID((WTF::UUID *)&v81);
          v29 = v82;
          *(_QWORD *)(v19 + 48) = v81;
          *(_QWORD *)(v19 + 56) = v29;
          *(_QWORD *)(v19 + 64) = v16;
          v16 = 0;
        }
        v81 = v19;
        LODWORD(v34) = HIDWORD(v80);
        if (HIDWORD(v80) == (_DWORD)v80)
        {
          v35 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v79, HIDWORD(v80) + 1, (unint64_t)&v81);
          v34 = HIDWORD(v80);
          v36 = v79;
          v37 = *(_QWORD *)v35;
          *(_QWORD *)v35 = 0;
          *(_QWORD *)&v36[8 * v34] = v37;
        }
        else
        {
          v81 = 0;
          *(_QWORD *)&v79[8 * HIDWORD(v80)] = v19;
        }
        HIDWORD(v80) = v34 + 1;
        v38 = v81;
        v81 = 0;
        if (v38)
        {
          if (*(_DWORD *)(v38 + 24) == 1)
          {
            v39 = *(WebCore::HistoryItem **)(v38 + 64);
            *(_QWORD *)(v38 + 64) = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 1)
              {
                WebCore::HistoryItem::~HistoryItem(v39);
                WTF::fastFree(v49, v50);
              }
              else
              {
                --*(_DWORD *)v39;
              }
            }
            WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v38 + 32), v11);
            WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v38, v40);
            bmalloc::api::isoDeallocate(v41, v42);
            if (!v16)
              goto LABEL_35;
LABEL_33:
            if (*(_DWORD *)v16 == 1)
            {
              WebCore::HistoryItem::~HistoryItem(v16);
              WTF::fastFree(v43, v44);
            }
            else
            {
              --*(_DWORD *)v16;
            }
            goto LABEL_35;
          }
          --*(_DWORD *)(v38 + 24);
        }
        if (v16)
          goto LABEL_33;
LABEL_35:
        ++v13;
      }
      while (v13 != (WebCore::HistoryItem **)v14);
    }
    v53 = (WebCore *)WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v75, &v79);
    v55 = *((unsigned int *)v5 + 21);
    if ((_DWORD)v55)
    {
      v56 = 0;
      v57 = 8 * v55;
      while (1)
      {
        v58 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 9) + 8 * v56) + 64);
        v60 = *(_QWORD *)(v58 + 352);
        v59 = *(_QWORD *)(v58 + 360);
        if (v60 == *(_QWORD *)(v74 + 352) && v59 == *(_QWORD *)(v74 + 360))
          break;
        ++v56;
        v57 -= 8;
        if (!v57)
          goto LABEL_58;
      }
      v62 = 1;
    }
    else
    {
LABEL_58:
      v62 = 0;
      v56 = 0;
    }
    *((_QWORD *)v5 + 5) = v56;
    *((_BYTE *)v5 + 48) = v62;
    if (v9)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v64 = 8 * v9;
      do
      {
        v65 = *v7;
        v66 = *(_QWORD *)(StatusReg + 736);
        if (!v66 || (v67 = *(_QWORD *)(v66 + 96)) == 0)
          v67 = WebCore::threadGlobalDataSlow(v53);
        v68 = *(_QWORD *)(v67 + 40);
        if (!v68)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v67);
          v68 = *(_QWORD *)(v67 + 40);
        }
        v69 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v69);
        *(_DWORD *)(v69 + 16) = 1;
        *(_QWORD *)v69 = off_1E33A4B48;
        *(_QWORD *)(v69 + 8) = 0;
        v71 = *(_DWORD *)(v69 + 20) & 0xFFC00000 | 0x1E8000 | (*(_QWORD *)(v68 + 640) != 0);
        *(_DWORD *)(v69 + 20) = v71;
        v72 = *(_DWORD **)(v68 + 640);
        if (v72)
        {
          *v72 += 2;
          v71 = *(_DWORD *)(v69 + 20);
        }
        *(_QWORD *)(v69 + 24) = v72;
        *(_QWORD *)(v69 + 32) = 0;
        *(_QWORD *)(v69 + 40) = 0;
        *(_QWORD *)(v69 + 48) = 0;
        *(_QWORD *)(v69 + 56) = v70;
        *(_QWORD *)(v69 + 64) = 0;
        *(_DWORD *)(v69 + 20) = v71 | 0x4000;
        v53 = WebCore::EventTarget::dispatchEvent(v65, (WebCore::Event *)v69);
        if (*(_DWORD *)(v69 + 16) == 1)
          v53 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
        else
          --*(_DWORD *)(v69 + 16);
        ++v7;
        v64 -= 8;
      }
      while (v64);
    }
    WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v54);
    return WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v73);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::HistoryItem *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  uint64_t v15;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(WTF **)a1;
    v6 = 8 * v4;
    do
    {
      v7 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 1)
        {
          v8 = *(WebCore::HistoryItem **)(v7 + 64);
          *(_QWORD *)(v7 + 64) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::HistoryItem::~HistoryItem(v8);
              WTF::fastFree(v12, v13);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
          WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v7 + 32), a2);
          WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v7, v9);
          bmalloc::api::isoDeallocate(v10, v11);
        }
        else
        {
          --*(_DWORD *)(v7 + 24);
        }
      }
      v5 = (WTF *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  v14 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v15;
  LODWORD(v15) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v15;
  LODWORD(v15) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v15;
  return a1;
}

uint64_t WebCore::Navigation::abortOngoingNavigation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t result;
  JSC *v10;
  int v11;
  WTF::StringImpl *v13;
  uint64_t DOMException;
  WTF::StringImpl *v15;
  WebCore *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WebCore::Event *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  bmalloc::api *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49[8];
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WebCore::Event *v52;
  WTF::StringImpl *v53;
  objc_class *v54;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 1;
    v7 = *(_QWORD *)(v5 + 72);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19600D118);
        }
        v7 -= 288;
      }
    }
    if (v7)
      v8 = (WebCore::ScriptExecutionContext *)(v7 + 192);
    else
      v8 = 0;
    if (v6)
      *(_DWORD *)(v5 + 24) = v6;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  }
  else
  {
    v8 = 0;
  }
  result = WebCore::ScriptExecutionContext::globalObject(v8);
  v10 = (JSC *)result;
  if (result
    || (v44 = *(_QWORD *)(a1 + 104)) != 0
    && (v45 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 32)) != 0
    && (*(_BYTE *)(v45 + 8) & 3) == 0
    && (v10 = *(JSC **)v45) != 0)
  {
    *(_WORD *)(a1 + 96) = 0;
    v11 = *(_DWORD *)(a2 + 20);
    if ((v11 & 0x3000) != 0 && (*(_DWORD *)(a2 + 20) & 0x404) == 4)
      *(_DWORD *)(a2 + 20) = v11 | 0x40;
    MEMORY[0x19AEA3294](v49, *((_QWORD *)v10 + 7));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v47 = 16;
    v48 = v52;
    WTF::String::isolatedCopy();
    LOBYTE(v52) = 16;
    v53 = v50;
    DOMException = WebCore::createDOMException(v10, (JSC::JSGlobalObject *)0x10, (JSC::JSGlobalObject *)&v53);
    v15 = v53;
    v53 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    WebCore::AbortSignal::signalAbort(*(_BYTE **)(a2 + 88), DOMException);
    v16 = *(WebCore **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 4) == 1)
        v16 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v16 + 8))(v16);
      else
        --*((_DWORD *)v16 + 4);
    }
    v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v17 || (v18 = *(_QWORD *)(v17 + 96)) == 0)
      v18 = WebCore::threadGlobalDataSlow(v16);
    v19 = *(_QWORD *)(v18 + 40);
    if (!v19)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v18);
      v19 = *(_QWORD *)(v18 + 40);
    }
    v20 = (_DWORD **)(v19 + 1288);
    v50 = 0;
    v21 = *((_QWORD *)v10 + 7);
    v22 = *(_QWORD *)(v21 + 712);
    if (!v22)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v21 + 672));
      v22 = *(_QWORD *)(v21 + 712);
    }
    *(_QWORD *)(v21 + 712) = *(_QWORD *)v22;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    v46 = (_QWORD *)(v22 + 16);
    if (DOMException && (DOMException & 0xFFFE000000000002) == 0)
    {
      v23 = *(unint64_t **)((v22 & 0xFFFFFFFFFFFFF000) + 0x10);
      v24 = v23[3];
      v23 += 3;
      *(_QWORD *)v22 = v24;
      *(_QWORD *)(v22 + 8) = v23;
      *v23 = v22;
      *(_QWORD *)(v24 + 8) = v22;
    }
    *(_QWORD *)(v22 + 16) = DOMException;
    WebCore::ErrorEvent::create(v20, (_DWORD **)&v50, 0, 0, (unint64_t *)&v46, &v52);
    WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)a1, v52);
    v26 = v52;
    v52 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 4) == 1)
        (*(void (**)(WebCore::Event *))(*(_QWORD *)v26 + 8))(v26);
      else
        --*((_DWORD *)v26 + 4);
    }
    if (v46)
    {
      v27 = v46 - 2;
      v28 = *(_QWORD *)(((unint64_t)(v46 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = (uint64_t *)*(v46 - 1);
      if (v29)
      {
        v30 = *v27;
        *v29 = *v27;
        *(_QWORD *)(v30 + 8) = v29;
        *v27 = 0;
        v27[1] = 0;
      }
      *v27 = *(_QWORD *)(v28 + 40);
      *(_QWORD *)(v28 + 40) = v27;
      v46 = 0;
    }
    v31 = v50;
    v50 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v25);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = *(_QWORD *)(a1 + 104);
    if (v32)
    {
      v54 = (objc_class *)DOMException;
      v33 = *(_QWORD *)(v32 + 48);
      LOBYTE(v52) = v47;
      v34 = v48;
      if (v48)
        *(_DWORD *)v48 += 2;
      v53 = v34;
      WebCore::DeferredPromise::reject(v33, (unsigned __int8 *)&v52, 1, &v54);
      v36 = v53;
      v53 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v35);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = *(_QWORD *)(v32 + 40);
      LOBYTE(v50) = v47;
      v38 = v48;
      if (v48)
        *(_DWORD *)v48 += 2;
      v51 = v38;
      WebCore::DeferredPromise::reject(v37, (unsigned __int8 *)&v50, 0, &v54);
      v41 = v51;
      v51 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v39);
        else
          *(_DWORD *)v41 -= 2;
      }
      WebCore::Navigation::cleanupAPIMethodTracker(a1, (const WTF::StringImpl **)v32, v40);
    }
    v42 = *(bmalloc::api **)(a1 + 56);
    if (v42)
    {
      *(_QWORD *)(a1 + 56) = 0;
      WTF::RefCounted<WebCore::NavigationTransition>::deref(v42, v25);
    }
    v43 = v48;
    v48 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v25);
      else
        *(_DWORD *)v43 -= 2;
    }
    return MEMORY[0x19AEA32A0](v49);
  }
  return result;
}

uint64_t WebCore::Navigation::innerDispatchNavigateEvent(uint64_t a1, unsigned int a2, WebCore::NavigationDestination **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6)
{
  const WTF::StringImpl *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  WebCore::NavigationAPIMethodTracker *v25;
  int i;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  WebCore::NavigationAPIMethodTracker *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  WebCore::NavigationDestination *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WebCore::NavigationDestination *v46;
  int v47;
  WebCore::SecurityOrigin *v48;
  WTF::URL *v49;
  WebCore::SecurityOrigin *v50;
  WebCore::SecurityOrigin *v51;
  char *v52;
  WTF::StringImpl *v53;
  uint64_t (**v54)();
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  _BOOL4 isTopDocument;
  int v62;
  uint64_t v63;
  const WTF::StringImpl *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  WebCore::DOMFormData *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  WebCore::NavigationDestination *v77;
  WTF::StringImpl *v78;
  WebCore *isMainThread;
  char v80;
  uint64_t (*v81)();
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  _DWORD *v93;
  WebCore::NavigationDestination *v94;
  _DWORD *v95;
  WTF::StringImpl *v96;
  const WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  bmalloc::api *v109;
  void *v110;
  bmalloc::api *v111;
  void *v112;
  WebCore::AbortSignal *v113;
  WTF *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  bmalloc::api *v118;
  uint64_t v119;
  char *v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  WebCore::Event *v126;
  uint64_t isFullyActive;
  _DWORD *v128;
  uint64_t v129;
  char *v130;
  _DWORD *v131;
  WTF *v132;
  void *v133;
  uint64_t v134;
  WebCore::EventNames *v135;
  uint64_t v136;
  uint64_t v137;
  WebCore::Event *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WebCore::HistoryItem *v145;
  void *v146;
  bmalloc::api *v147;
  void *v148;
  _DWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  _DWORD *v156;
  bmalloc::api *v157;
  const WTF::StringImpl *v158;
  bmalloc::api *v159;
  void *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  WTF *v164;
  void *v165;
  void *v166;
  unint64_t StatusReg;
  char v168;
  BOOL v169;
  char v170;
  uint64_t v171;
  int v172;
  WebCore::Document *v173;
  uint64_t v174;
  WebCore::NavigationDestination *v175;
  WebCore::NavigationDestination **v176;
  WTF::StringImpl *v177;
  uint64_t v179;
  unint64_t v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WebCore::Event *v183;
  unsigned int v184;
  const WTF::StringImpl *v185;
  uint64_t v186;
  int v187;

  if (WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1))
    return 1;
  v13 = *(_QWORD *)(a1 + 88);
  if (v13)
    WebCore::Navigation::abortOngoingNavigation(a1, v13);
  v14 = *((_QWORD *)*a3 + 2);
  if (!v14)
  {
    v185 = 0;
    goto LABEL_21;
  }
  v15 = *(_QWORD *)(v14 + 40);
  if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0 && !*(_BYTE *)(v16 + 178))
  {
    v17 = v16 - 288;
    *(_DWORD *)(v16 - 264) += 2;
    if ((WebCore::Document::isFullyActive((WebCore::Document *)(v16 - 288)) & 1) != 0)
    {
      WTF::UUID::toString((WTF::UUID *)(*(_QWORD *)(v14 + 64) + 368));
LABEL_13:
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
      v19 = (char *)v185;
      goto LABEL_16;
    }
    v18 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = (char *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *(_DWORD *)v19 += 2;
  v185 = (const WTF::StringImpl *)v19;
  if ((v18 & 1) == 0)
    goto LABEL_13;
LABEL_16:
  if (v19)
  {
    v20 = (uint64_t *)(a1 + 120);
    v21 = *(_QWORD *)(a1 + 120);
    if (!v21)
      goto LABEL_49;
    v22 = *(_DWORD *)(v21 - 8);
    v23 = *((_DWORD *)v19 + 4);
    if (v23 < 0x100)
      v24 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v19);
    else
      v24 = v23 >> 8;
    for (i = 0; ; v24 = i + v27)
    {
      v27 = v24 & v22;
      v28 = *(WTF **)(v21 + 16 * v27);
      if (v28 != (WTF *)-1)
      {
        if (!v28)
        {
          v29 = *v20;
          if (*v20)
          {
            v30 = *(unsigned int *)(v29 - 4);
            v13 = v29 + 16 * v30;
            goto LABEL_37;
          }
          goto LABEL_48;
        }
        if ((WTF::equal(v28, v185, v11) & 1) != 0)
        {
          v13 = v21 + 16 * v27;
          v29 = *v20;
          if (*v20)
          {
            v30 = *(unsigned int *)(v29 - 4);
LABEL_37:
            v31 = v29 + 16 * v30;
          }
          else
          {
            v31 = 0;
          }
          if (v31 != v13)
          {
            v21 = *(_QWORD *)(v13 + 8);
            if (v21)
            {
              *(_QWORD *)(v13 + 8) = 0;
              v29 = *v20;
            }
            if (!v29 || (v29 += 16 * *(unsigned int *)(v29 - 4), v29 != v13))
            {
              if (v29 != v13)
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 120), (WTF::StringImpl **)v13);
            }
LABEL_49:
            v34 = *(WebCore::NavigationAPIMethodTracker **)(a1 + 104);
            *(_QWORD *)(a1 + 104) = v21;
            if (v34)
            {
LABEL_50:
              if (*(_DWORD *)v34 == 1)
              {
                WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v34, (void *)v13);
                WTF::fastFree(v132, v133);
              }
              else
              {
                --*(_DWORD *)v34;
              }
            }
            goto LABEL_52;
          }
LABEL_48:
          v21 = 0;
          goto LABEL_49;
        }
      }
      ++i;
    }
  }
LABEL_21:
  v25 = *(WebCore::NavigationAPIMethodTracker **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v25, (void *)v13);
      WTF::fastFree(v32, v33);
      v34 = *(WebCore::NavigationAPIMethodTracker **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;
      if (v34)
        goto LABEL_50;
    }
    else
    {
      --*(_DWORD *)v25;
      *(_QWORD *)(a1 + 112) = 0;
    }
  }
LABEL_52:
  v35 = v185;
  v185 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72);
  if (v36 && (v37 = *(_QWORD *)(v36 + 8)) != 0)
  {
    if (*(_BYTE *)(v37 + 178))
    {
      __break(0xC471u);
      goto LABEL_355;
    }
    v38 = v37 - 288;
    *(_DWORD *)(v37 - 264) += 2;
  }
  else
  {
    v38 = 0;
  }
  v39 = *(_QWORD *)(a1 + 104);
  if (v39)
  {
    ++*(_DWORD *)v39;
    v40 = *(unsigned int **)(v39 + 24);
    if (v40)
    {
      v41 = *a3;
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 + 1, v40));
      v43 = (unsigned int *)*((_QWORD *)v41 + 9);
      *((_QWORD *)v41 + 9) = v40;
      if (v43)
      {
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v43);
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v43 + 2), (void *)v13);
          WTF::fastFree((WTF *)v43, v166);
        }
      }
    }
  }
  v173 = (WebCore::Document *)v38;
  v174 = v39;
  v176 = a3;
  v46 = *a3;
  v47 = *((unsigned __int8 *)*a3 + 64);
  v48 = (WebCore::NavigationDestination *)((char *)*a3 + 24);
  v49 = (WTF::URL *)(v38 + 736);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v38 + 192), (WTF::StringImpl *)v13);
  v51 = v50;
  WebCore::SecurityOrigin::create(v48, (uint64_t *)&v185);
  v52 = (char *)v185;
  if (WebCore::SecurityOrigin::isSameSiteAs(v51, v185))
  {
    v54 = (uint64_t (**)())v173;
    if ((*((_BYTE *)v46 + 32) & 2) != 0)
    {
      v56 = 1;
      v55 = v174;
    }
    else
    {
      v55 = v174;
      if (WTF::URL::protocolIs() && !WTF::isEqualIgnoringQueryAndFragments())
        v56 = 0;
      else
        v56 = WTF::equalIgnoringFragmentIdentifier();
    }
    v52 = (char *)v185;
  }
  else
  {
    v56 = 0;
    v54 = (uint64_t (**)())v173;
    v55 = v174;
  }
  v185 = 0;
  if (v52)
  {
    do
    {
      v57 = __ldaxr((unsigned int *)v52);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, (unsigned int *)v52));
    if (!v58)
    {
      atomic_store(1u, (unsigned int *)v52);
      v161 = (WTF::StringImpl *)*((_QWORD *)v52 + 6);
      *((_QWORD *)v52 + 6) = 0;
      if (v161)
      {
        if (*(_DWORD *)v161 == 2)
          WTF::StringImpl::destroy(v161, v53);
        else
          *(_DWORD *)v161 -= 2;
      }
      v162 = (WTF::StringImpl *)*((_QWORD *)v52 + 5);
      *((_QWORD *)v52 + 5) = 0;
      if (v162)
      {
        if (*(_DWORD *)v162 == 2)
          WTF::StringImpl::destroy(v162, v53);
        else
          *(_DWORD *)v162 -= 2;
      }
      v163 = *((unsigned int *)v52 + 8);
      if ((_DWORD)v163 != -1)
        ((void (*)(WebCore::Event **, char *))off_1E33FFD30[v163])(&v183, v52 + 8);
      *((_DWORD *)v52 + 8) = -1;
      WTF::fastFree((WTF *)v52, v53);
    }
  }
  if (v47)
    v59 = 1;
  else
    v59 = a2 != 3;
  if (a2 == 3)
  {
    isTopDocument = WebCore::Document::isTopDocument((WebCore::Document *)v54);
    if (v47)
      v60 = isTopDocument;
    else
      v60 = 0;
  }
  else
  {
    v60 = 1;
  }
  v172 = v60;
  if (a6 || !WTF::equalIgnoringFragmentIdentifier())
  {
    LOBYTE(v62) = 0;
    if (!v55)
      goto LABEL_90;
  }
  else
  {
    WTF::URL::fragmentIdentifier(v49);
    WTF::URL::fragmentIdentifier((WebCore::NavigationDestination *)((char *)*v176 + 24));
    v62 = WTF::equalRespectingNullity() ^ 1;
    if (!v55)
    {
LABEL_90:
      v63 = 10;
      goto LABEL_93;
    }
  }
  v63 = *(_QWORD *)(v55 + 16);
LABEL_93:
  v64 = 0;
  if (a2 <= 1 && a5)
  {
    v65 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v66 = *(_DWORD *)(v65 + 24);
    *(_DWORD *)(v65 + 24) = v66 + 1;
    v67 = *(_QWORD *)(v65 + 72);
    if (v67)
    {
      v67 = *(_QWORD *)(v67 + 8);
      if (v67)
      {
        if (*(_BYTE *)(v67 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19600E310);
        }
        v67 -= 288;
      }
    }
    if (v67)
      v68 = (WebCore::DOMFormData *)(v67 + 192);
    else
      v68 = 0;
    if (v66)
      *(_DWORD *)(v65 + 24) = v66;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 72))(v65);
    WebCore::DOMFormData::create(v68, *(WebCore::ScriptExecutionContext **)(a5 + 32), 0, (uint64_t)&v185);
    v64 = 0;
    if (v187 != -1)
    {
      if (!v187)
      {
        v64 = v185;
        v185 = 0;
      }
      ((void (*)(WebCore::Event **, const WTF::StringImpl **))off_1E33FFD88[v187])(&v183, &v185);
    }
  }
  v69 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v70 = *(_DWORD *)(v69 + 24);
  *(_DWORD *)(v69 + 24) = v70 + 1;
  v71 = *(_QWORD *)(v69 + 72);
  v171 = v63;
  if (v71)
  {
    v71 = *(_QWORD *)(v71 + 8);
    if (v71)
    {
      if (*(_BYTE *)(v71 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19600E2B4);
      }
      v71 -= 288;
    }
  }
  if (v71)
    v72 = (WebCore::ScriptExecutionContext *)(v71 + 192);
  else
    v72 = 0;
  v169 = v59;
  v170 = v56;
  v168 = v62;
  if (v70)
    *(_DWORD *)(v69 + 24) = v70;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 72))(v69);
  v73 = bmalloc::api::isoAllocate();
  *(_QWORD *)v73 = 0;
  *(_DWORD *)(v73 + 8) = 1;
  v74 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v74 + 24) = 1;
  *(_QWORD *)(v74 + 8) = 0;
  *(_QWORD *)(v74 + 16) = 0;
  *(_QWORD *)v74 = &unk_1E33A4FC0;
  *(_QWORD *)(v74 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v74 + 40) = 0;
  v75 = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v74 + 32), v72);
  *(_QWORD *)v74 = off_1E33A0468;
  *(_QWORD *)(v74 + 32) = &unk_1E33A04E0;
  v76 = v73;
  *(_OWORD *)(v74 + 48) = 0u;
  *(_OWORD *)(v74 + 64) = 0u;
  *(_OWORD *)(v74 + 80) = 0u;
  *(_OWORD *)(v74 + 96) = 0u;
  *(_OWORD *)(v74 + 112) = 0u;
  *(_OWORD *)(v74 + 128) = 0u;
  *(_QWORD *)(v74 + 144) = 0;
  *(_QWORD *)(v74 + 152) = 0;
  *(_QWORD *)(v74 + 136) = 10;
  *(_QWORD *)(v73 + 16) = v74;
  v77 = *v176;
  ++*(_DWORD *)*v176;
  ++*(_DWORD *)(v74 + 24);
  if (v64)
    ++*((_DWORD *)v64 + 4);
  v78 = *a4;
  if (*a4)
    *(_DWORD *)v78 += 2;
  v177 = v78;
  isMainThread = (WebCore *)WTF::isMainThread((WTF *)v75);
  v175 = v77;
  if ((_DWORD)isMainThread)
  {
    {
      v80 = 0;
      WebCore::currentToken(void)::token = 0;
      goto LABEL_125;
    }
    isMainThread = (WebCore *)WebCore::currentToken(void)::token;
    if (WebCore::currentToken(void)::token)
    {
      if (*(_DWORD *)(WebCore::currentToken(void)::token + 68)
        || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
      {
        v80 = 0;
      }
      else
      {
        if (v173)
        {
          v54 = (uint64_t (**)())v173;
          isMainThread = (WebCore *)WebCore::UserGestureToken::isValidForDocument((WebCore::UserGestureToken *)WebCore::currentToken(void)::token, v173);
          v80 = (char)isMainThread;
LABEL_346:
          v55 = v174;
          goto LABEL_125;
        }
        v80 = 1;
      }
      v54 = (uint64_t (**)())v173;
      goto LABEL_346;
    }
  }
  v80 = 0;
LABEL_125:
  v81 = v54[66];
  if (v81)
  {
    v82 = *((_QWORD *)v81 + 1);
    if (v82)
    {
      v83 = *(_QWORD *)(v82 + 24);
      if (v83)
      {
        v84 = *(_QWORD *)(v83 + 8);
        if (v84)
        {
          v85 = *(_BYTE *)(v84 + 1101) != 0;
          if (!v55)
            goto LABEL_133;
          goto LABEL_132;
        }
      }
    }
  }
  v85 = 0;
  if (v55)
LABEL_132:
    *(_QWORD *)(v55 + 16) = 10;
LABEL_133:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v86 = *(_QWORD *)(StatusReg + 736);
  if (!v86 || (v87 = *(_QWORD *)(v86 + 96)) == 0)
    v87 = WebCore::threadGlobalDataSlow(isMainThread);
  v88 = *(_QWORD *)(v87 + 40);
  if (!v88)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v87);
    v88 = *(_QWORD *)(v87 + 40);
  }
  v89 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v89);
  *(_QWORD *)(v89 + 8) = 0;
  *(_DWORD *)(v89 + 16) = 1;
  if (v172)
    v91 = 2556420;
  else
    v91 = 2556416;
  v92 = v91 | *(_DWORD *)(v89 + 20) & 0xFFC00000 | (*(_QWORD *)(v88 + 1280) != 0);
  *(_DWORD *)(v89 + 20) = v92;
  v93 = *(_DWORD **)(v88 + 1280);
  if (v93)
  {
    *v93 += 2;
    v92 = *(_DWORD *)(v89 + 20);
  }
  v94 = v175;
  *(_QWORD *)(v89 + 24) = v93;
  *(_QWORD *)(v89 + 32) = 0;
  *(_QWORD *)(v89 + 40) = 0;
  *(_QWORD *)(v89 + 48) = 0;
  *(_QWORD *)(v89 + 56) = v90;
  *(_QWORD *)(v89 + 64) = 0;
  *(_DWORD *)(v89 + 20) = v92 | 0x4000;
  *(_QWORD *)v89 = off_1E33FFE58;
  *(_BYTE *)(v89 + 72) = a2;
  ++*(_DWORD *)v175;
  *(_QWORD *)(v89 + 80) = v175;
  ++*(_DWORD *)(v74 + 24);
  *(_QWORD *)(v89 + 88) = v74;
  if (v64)
    ++*((_DWORD *)v64 + 4);
  *(_QWORD *)(v89 + 96) = v64;
  if (v177)
    *(_DWORD *)v177 += 2;
  *(_QWORD *)(v89 + 104) = v177;
  *(_QWORD *)(v89 + 112) = 0;
  *(_QWORD *)(v89 + 120) = 0;
  *(_QWORD *)(v89 + 128) = v171;
  *(_BYTE *)(v89 + 136) = v169 & v170;
  *(_BYTE *)(v89 + 137) = v80;
  *(_BYTE *)(v89 + 138) = v168;
  *(_BYTE *)(v89 + 139) = v85;
  *(_DWORD *)(v89 + 140) = 0;
  *(_WORD *)(v89 + 144) = 0;
  ++*(_DWORD *)(v76 + 8);
  *(_QWORD *)(v89 + 152) = v76;
  ++*(_DWORD *)(v89 + 16);
  v95 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v89;
  if (v95)
  {
    if (v95[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 8))(v95);
    else
      --v95[4];
  }
  *(_WORD *)(a1 + 96) = 0;
  WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)a1, (WebCore::Event *)v89);
  v98 = *(_QWORD *)(a1 + 32);
  if (!v98)
    goto LABEL_168;
  v99 = *(_QWORD *)(v98 + 8);
  if (!v99)
    goto LABEL_168;
  v100 = *(_QWORD *)(v99 + 72);
  if (!v100)
    goto LABEL_168;
  v101 = *(_QWORD *)(v100 + 8);
  if (!v101)
    goto LABEL_168;
  if (*(_BYTE *)(v101 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19600E2D4);
  }
  v102 = *(_QWORD *)(v101 + 240);
  if (!v102 || !*(_QWORD *)(v102 + 8))
  {
LABEL_168:
    WebCore::Navigation::abortOngoingNavigation(a1, v89);
    goto LABEL_169;
  }
  if ((*(_BYTE *)(v89 + 20) & 0x40) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(v89 + 88) + 156))
    {
      v106 = *(_DWORD **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = 0;
      if (v106)
      {
        if (v106[4] != 1)
        {
          v12 = 0;
          --v106[4];
          goto LABEL_170;
        }
        (*(void (**)(_DWORD *))(*(_QWORD *)v106 + 8))(v106);
      }
      goto LABEL_169;
    }
    goto LABEL_168;
  }
  if (*(_BYTE *)(v89 + 141))
  {
    *(_WORD *)(v89 + 140) = 257;
    if (WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)a1) || !*(_BYTE *)(a1 + 48))
    {
      v104 = 0;
      goto LABEL_210;
    }
    v103 = *(_QWORD *)(a1 + 40);
    if (v103 < *(unsigned int *)(a1 + 84))
    {
      v104 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v103);
      if (v104)
      {
        v105 = 0;
        ++*(_DWORD *)(v104 + 24);
LABEL_211:
        ++*(_DWORD *)(v104 + 24);
        v117 = bmalloc::api::isoAllocate();
        *(_DWORD *)v117 = 1;
        *(_QWORD *)(v117 + 8) = 0;
        *(_BYTE *)(v117 + 16) = a2;
        *(_QWORD *)(v117 + 24) = v104;
        *(_QWORD *)(v117 + 32) = 0;
        v118 = *(bmalloc::api **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v117;
        if (v118)
          WTF::RefCounted<WebCore::NavigationTransition>::deref(v118, v116);
        if (a2 == 3)
          *(_BYTE *)(a1 + 97) = 1;
        if ((v105 & 1) == 0)
        {
          if (*(_DWORD *)(v104 + 24) == 1)
          {
            v145 = *(WebCore::HistoryItem **)(v104 + 64);
            *(_QWORD *)(v104 + 64) = 0;
            if (v145)
            {
              if (*(_DWORD *)v145 == 1)
              {
                WebCore::HistoryItem::~HistoryItem(v145);
                WTF::fastFree(v164, v165);
              }
              else
              {
                --*(_DWORD *)v145;
              }
            }
            WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v104 + 32), v116);
            WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v104, v146);
            bmalloc::api::isoDeallocate(v147, v148);
          }
          else
          {
            --*(_DWORD *)(v104 + 24);
          }
        }
        goto LABEL_220;
      }
LABEL_210:
      v105 = 1;
      goto LABEL_211;
    }
    __break(0xC471u);
LABEL_355:
    JUMPOUT(0x19600E294);
  }
  if (!*((_BYTE *)*v176 + 64))
  {
    if (v55)
    {
      WebCore::Navigation::cleanupAPIMethodTracker(a1, (const WTF::StringImpl **)v55, v97);
      v94 = v175;
    }
    else
    {
      v149 = *(_DWORD **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = 0;
      v94 = v175;
      if (v149)
      {
        if (v149[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v149 + 8))(v149);
        else
          --v149[4];
      }
    }
    goto LABEL_250;
  }
LABEL_220:
  v179 = v76;
  v185 = 0;
  v186 = 0;
  v119 = *(unsigned int *)(v89 + 124);
  if ((_DWORD)v119)
  {
    v120 = 0;
    v121 = 0;
    v76 = 0;
    v94 = *(WebCore::NavigationDestination **)(v89 + 112);
    v55 = 8 * v119;
    v54 = off_1E33FFD98;
    while (1)
    {
      (*(void (**)(WebCore::Event **__return_ptr))(**(_QWORD **)v94 + 40))(&v183);
      if (v184)
      {
        if (v184 != 1 || !(_DWORD)v183)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_352;
        }
        v76 = 1;
        v122 = 1;
      }
      else if (v121 == (_DWORD)v186)
      {
        v123 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v185, v121 + 1, (unint64_t)&v183);
        v124 = HIDWORD(v186);
        v120 = (char *)v185;
        v125 = *(_QWORD *)v123;
        *(_QWORD *)v123 = 0;
        *(_QWORD *)&v120[8 * v124] = v125;
        v122 = v184;
        v121 = v124 + 1;
        HIDWORD(v186) = v124 + 1;
        if (v184 == -1)
          goto LABEL_231;
      }
      else
      {
        v122 = 0;
        v126 = v183;
        v183 = 0;
        *(_QWORD *)&v120[8 * v121++] = v126;
        HIDWORD(v186) = v121;
      }
      ((void (*)(WTF::StringImpl **, WebCore::Event **))off_1E33FFD98[v122])(&v182, &v183);
LABEL_231:
      v94 = (WebCore::NavigationDestination *)((char *)v94 + 8);
      v55 -= 8;
      if (!v55)
        goto LABEL_235;
    }
  }
  v120 = 0;
  v121 = 0;
  LOBYTE(v76) = 0;
LABEL_235:
  v54 = (uint64_t (**)())v173;
  isFullyActive = WebCore::Document::isFullyActive(v173);
  if ((isFullyActive & 1) != 0 && !*(_BYTE *)(*(_QWORD *)(v179 + 16) + 156))
  {
    v55 = v174;
    v94 = v175;
    if (*(_QWORD *)(a1 + 88) == v89)
    {
      *(_QWORD *)(a1 + 88) = 0;
      if (*(_DWORD *)(v89 + 16) == 1)
        isFullyActive = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
      else
        --*(_DWORD *)(v89 + 16);
      if (*(_BYTE *)(v89 + 141))
        *(_WORD *)(v89 + 140) = 259;
      if ((v76 & 1) != 0)
      {
        v136 = *(_QWORD *)(StatusReg + 736);
        if (!v136 || (v120 = *(char **)(v136 + 96)) == 0)
          v120 = (char *)WebCore::threadGlobalDataSlow((WebCore *)isFullyActive);
        v137 = *((_QWORD *)v120 + 5);
        v76 = v179;
        if (!v137)
        {
LABEL_352:
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v120);
          v137 = *((_QWORD *)v120 + 5);
        }
        v181 = 0;
        v182 = 0;
        v180 = 0;
        WebCore::ErrorEvent::create((_QWORD *)(v137 + 1288), (_DWORD **)&v182, (_DWORD **)&v181, 0, 0, &v180, (uint64_t *)&v183);
        WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)a1, v183);
        v138 = v183;
        v183 = 0;
        if (v138)
        {
          if (*((_DWORD *)v138 + 4) == 1)
            (*(void (**)(WebCore::Event *))(*(_QWORD *)v138 + 8))(v138);
          else
            --*((_DWORD *)v138 + 4);
        }
        if (v180)
        {
          v139 = (uint64_t *)(v180 - 16);
          v140 = *(_QWORD *)(((v180 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v141 = *(uint64_t **)(v180 - 8);
          if (v141)
          {
            v142 = *v139;
            *v141 = *v139;
            *(_QWORD *)(v142 + 8) = v141;
            *v139 = 0;
            v139[1] = 0;
          }
          *v139 = *(_QWORD *)(v140 + 40);
          *(_QWORD *)(v140 + 40) = v139;
          v180 = 0;
        }
        v143 = v181;
        v181 = 0;
        if (v143)
        {
          if (*(_DWORD *)v143 == 2)
            WTF::StringImpl::destroy(v143, v96);
          else
            *(_DWORD *)v143 -= 2;
        }
        v144 = v182;
        v182 = 0;
        if (v144)
        {
          if (*(_DWORD *)v144 == 2)
            WTF::StringImpl::destroy(v144, v96);
          else
            *(_DWORD *)v144 -= 2;
        }
        v121 = HIDWORD(v186);
        v120 = (char *)v185;
      }
      else
      {
        v150 = *(_QWORD *)(StatusReg + 736);
        if (!v150 || (v151 = *(_QWORD *)(v150 + 96)) == 0)
          v151 = WebCore::threadGlobalDataSlow((WebCore *)isFullyActive);
        v152 = *(_QWORD *)(v151 + 40);
        v76 = v179;
        if (!v152)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v151);
          v152 = *(_QWORD *)(v151 + 40);
        }
        v153 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v153);
        *(_DWORD *)(v153 + 16) = 1;
        *(_QWORD *)v153 = off_1E33A4B48;
        *(_QWORD *)(v153 + 8) = 0;
        v155 = *(_DWORD *)(v153 + 20) & 0xFFC00000 | 0x1E8000 | (*(_QWORD *)(v152 + 1296) != 0);
        *(_DWORD *)(v153 + 20) = v155;
        v156 = *(_DWORD **)(v152 + 1296);
        if (v156)
        {
          *v156 += 2;
          v155 = *(_DWORD *)(v153 + 20);
        }
        v94 = v175;
        *(_QWORD *)(v153 + 24) = v156;
        *(_QWORD *)(v153 + 32) = 0;
        *(_QWORD *)(v153 + 40) = 0;
        *(_QWORD *)(v153 + 48) = 0;
        *(_QWORD *)(v153 + 56) = v154;
        *(_QWORD *)(v153 + 64) = 0;
        *(_DWORD *)(v153 + 20) = v155 | 0x4000;
        WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)a1, (WebCore::Event *)v153);
        if (*(_DWORD *)(v153 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
        else
          --*(_DWORD *)(v153 + 16);
        v157 = *(bmalloc::api **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = 0;
        v55 = v174;
        if (v157)
          WTF::RefCounted<WebCore::NavigationTransition>::deref(v157, v96);
        if (v174)
        {
          v96 = *(WTF::StringImpl **)(v174 + 32);
          if (v96)
          {
            WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::NavigationHistoryEntry>>(*(_QWORD *)(v174 + 40), (uint64_t)v96);
            WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::NavigationHistoryEntry>>(*(_QWORD *)(v174 + 48), *(_QWORD *)(v174 + 32));
            WebCore::Navigation::cleanupAPIMethodTracker(a1, (const WTF::StringImpl **)v174, v158);
          }
          else
          {
            *(_BYTE *)(v174 + 4) = 1;
          }
        }
      }
      goto LABEL_240;
    }
    if (v121)
    {
      v134 = 8 * v121;
      v76 = v179;
      do
      {
        v135 = *(WebCore::EventNames **)v120;
        *(_QWORD *)v120 = 0;
        if (v135)
        {
          if (*((_DWORD *)v135 + 4) == 1)
            (*(void (**)(WebCore::EventNames *))(*(_QWORD *)v135 + 16))(v135);
          else
            --*((_DWORD *)v135 + 4);
        }
        v120 += 8;
        v134 -= 8;
      }
      while (v134);
      v120 = (char *)v185;
    }
    else
    {
      v76 = v179;
    }
    if (v120)
    {
      v185 = 0;
      LODWORD(v186) = 0;
      WTF::fastFree((WTF *)v120, v96);
    }
LABEL_169:
    v12 = 0;
    goto LABEL_170;
  }
  v128 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  v55 = v174;
  v94 = v175;
  if (v128)
  {
    v76 = v179;
    if (v128[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v128 + 8))(v128);
    else
      --v128[4];
  }
  else
  {
    v76 = v179;
  }
LABEL_240:
  if (v121)
  {
    v129 = 8 * v121;
    v130 = v120;
    do
    {
      v131 = *(_DWORD **)v130;
      *(_QWORD *)v130 = 0;
      if (v131)
      {
        if (v131[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v131 + 16))(v131);
        else
          --v131[4];
      }
      v130 += 8;
      v129 -= 8;
    }
    while (v129);
  }
  if (v120)
  {
    v185 = 0;
    LODWORD(v186) = 0;
    WTF::fastFree((WTF *)v120, v96);
  }
LABEL_250:
  v12 = *(_BYTE *)(v89 + 141) == 0;
LABEL_170:
  v107 = v177;
  if (*(_DWORD *)(v89 + 16) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
    v107 = v177;
    if (!v177)
      goto LABEL_174;
  }
  else
  {
    --*(_DWORD *)(v89 + 16);
    if (!v177)
      goto LABEL_174;
  }
  if (*(_DWORD *)v107 == 2)
    WTF::StringImpl::destroy(v107, v96);
  else
    *(_DWORD *)v107 -= 2;
LABEL_174:
  if (v64)
  {
    if (*((_DWORD *)v64 + 4) == 1)
      (*(void (**)(const WTF::StringImpl *))(*(_QWORD *)v64 + 16))(v64);
    else
      --*((_DWORD *)v64 + 4);
  }
  if (*(_DWORD *)(v74 + 24) == 1)
  {
    WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)v74, v96);
    bmalloc::api::isoDeallocate(v109, v110);
  }
  else
  {
    --*(_DWORD *)(v74 + 24);
  }
  if (*(_DWORD *)v94 == 1)
  {
    WebCore::NavigationDestination::~NavigationDestination(v94, v96);
    bmalloc::api::isoDeallocate(v111, v112);
  }
  else
  {
    --*(_DWORD *)v94;
  }
  if (*(_DWORD *)(v76 + 8) != 1)
  {
    --*(_DWORD *)(v76 + 8);
    if (!v64)
      goto LABEL_185;
    goto LABEL_183;
  }
  v113 = *(WebCore::AbortSignal **)(v76 + 16);
  *(_QWORD *)(v76 + 16) = 0;
  if (v113)
  {
    if (*((_DWORD *)v113 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v113, v96);
      bmalloc::api::isoDeallocate(v159, v160);
    }
    else
    {
      --*((_DWORD *)v113 + 6);
    }
  }
  if (*(_QWORD *)v76)
  {
    *(_QWORD *)(*(_QWORD *)v76 + 8) = 3;
    *(_QWORD *)v76 = 0;
  }
  bmalloc::api::isoDeallocate((bmalloc::api *)v76, v96);
  if (v64)
  {
LABEL_183:
    if (*((_DWORD *)v64 + 4) == 1)
      (*(void (**)(const WTF::StringImpl *))(*(_QWORD *)v64 + 16))(v64);
    else
      --*((_DWORD *)v64 + 4);
  }
LABEL_185:
  if (!v55)
    goto LABEL_188;
  if (*(_DWORD *)v55 != 1)
  {
    --*(_DWORD *)v55;
LABEL_188:
    if (!v54)
      return v12;
    goto LABEL_189;
  }
  WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker((WebCore::NavigationAPIMethodTracker *)v55, v96);
  WTF::fastFree(v114, v115);
  if (!v54)
    return v12;
LABEL_189:
  if (*((_DWORD *)v54 + 6) == 2)
  {
    if ((*((_WORD *)v54 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v54);
  }
  else
  {
    *((_DWORD *)v54 + 6) -= 2;
  }
  return v12;
}

uint64_t WebCore::Navigation::abortOngoingNavigationIfNeeded(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 88);
  if (v1)
    return WebCore::Navigation::abortOngoingNavigation(this, v1);
  return this;
}

uint64_t WebCore::Navigation::dispatchTraversalNavigateEvent(WebCore::Navigation *this, WebCore::HistoryItem *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  bmalloc::api *v28;
  void *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  WTF::StringImpl *v33[5];

  v4 = *((_QWORD *)this + 4);
  if (!v4)
    goto LABEL_10;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_10;
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    goto LABEL_10;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_10;
  if (*(_BYTE *)(v7 + 178))
    goto LABEL_35;
  v8 = *(_QWORD *)(v7 + 240);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && (v10 = *(_QWORD *)(*(_QWORD *)(v9 + 184) + 16)) != 0)
    v11 = *(_QWORD *)(v10 + 160) == *((_QWORD *)a2 + 20);
  else
LABEL_10:
    v11 = 0;
  v12 = *((unsigned int *)this + 21);
  if (!(_DWORD)v12)
  {
LABEL_18:
    v14 = 0;
    goto LABEL_21;
  }
  v13 = 0;
  while (1)
  {
    v14 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v13);
    v15 = *(_QWORD *)(v14 + 64);
    v17 = *(_QWORD *)(v15 + 352);
    v16 = *(_QWORD *)(v15 + 360);
    if (v17 == *((_QWORD *)a2 + 44) && v16 == *((_QWORD *)a2 + 45))
      break;
    if (v12 == ++v13)
      goto LABEL_18;
  }
  if (v13 >= v12)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x19600E5B8);
  }
  ++*(_DWORD *)(v14 + 24);
LABEL_21:
  v33[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v33);
  MEMORY[0x19AEA52F8](&v30, v33, (char *)a2 + 16, 0);
  v20 = v33[0];
  v33[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v22 = bmalloc::api::isoAllocate();
  *(_DWORD *)v22 = 1;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = v14;
  v23 = v30;
  if (v30)
    *(_DWORD *)v30 += 2;
  *(_QWORD *)(v22 + 24) = v23;
  v24 = v32;
  *(_OWORD *)(v22 + 32) = v31;
  *(_OWORD *)(v22 + 48) = v24;
  *(_BYTE *)(v22 + 64) = v11;
  *(_QWORD *)(v22 + 72) = 0;
  v33[0] = (WTF::StringImpl *)v22;
  v30 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v30 = 0;
  v26 = WebCore::Navigation::innerDispatchNavigateEvent((uint64_t)this, 3u, v33, &v30, 0, 0);
  if (*(_DWORD *)v22 == 1)
  {
    WebCore::NavigationDestination::~NavigationDestination((WebCore::NavigationDestination *)v22, v25);
    bmalloc::api::isoDeallocate(v28, v29);
  }
  else
  {
    --*(_DWORD *)v22;
  }
  return v26;
}

uint64_t WebCore::Navigation::dispatchPushReplaceReloadNavigateEvent(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v12;
  void *v13;
  WebCore::NavigationDestination *v14;
  _DWORD *v15;
  __int128 v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  bmalloc::api *v24;
  void *v25;
  void *v26;
  WTF::StringImpl *v27;
  WebCore::NavigationDestination *v28;

  v12 = bmalloc::api::isoAllocate();
  v14 = (WebCore::NavigationDestination *)v12;
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  v15 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v15 += 2;
  *(_QWORD *)(v12 + 24) = v15;
  v16 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v12 + 48) = v16;
  *(_BYTE *)(v12 + 64) = a4;
  *(_QWORD *)(v12 + 72) = 0;
  v28 = (WebCore::NavigationDestination *)v12;
  if (!a6)
  {
    v27 = 0;
    v22 = WebCore::Navigation::innerDispatchNavigateEvent(a1, a3, &v28, &v27, a5, 0);
LABEL_12:
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::NavigationDestination::~NavigationDestination(v14, v21);
      bmalloc::api::isoDeallocate(v24, v25);
    }
    else
    {
      --*(_DWORD *)v14;
    }
    return v22;
  }
  do
    v17 = __ldaxr(a6);
  while (__stlxr(v17 + 1, a6));
  v18 = *(unsigned int **)(v12 + 72);
  *(_QWORD *)(v12 + 72) = a6;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v18 + 2), v13);
      WTF::fastFree((WTF *)v18, v26);
    }
  }
  v27 = 0;
  v22 = WebCore::Navigation::innerDispatchNavigateEvent(a1, a3, &v28, &v27, a5, (uint64_t)a6);
  v14 = v28;
  if (v28)
    goto LABEL_12;
  return v22;
}

uint64_t WebCore::Navigation::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::Navigation *WebCore::Navigation::derefEventTarget(WebCore::Navigation *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::Navigation::~Navigation(this, a2);
    return (WebCore::Navigation *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

void WebCore::NavigateEvent::~NavigateEvent(WebCore::NavigateEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::NavigateEvent::~NavigateEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WebCore::AbortSignal *v14;
  WebCore::NavigationDestination *v15;
  WebCore::AbortSignal *v16;
  bmalloc::api *v17;
  void *v18;
  bmalloc::api *v19;
  void *v20;
  bmalloc::api *v21;
  void *v22;

  v3 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    if (v3[2] == 1)
    {
      v16 = (WebCore::AbortSignal *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v16, a2);
          bmalloc::api::isoDeallocate(v21, v22);
        }
        else
        {
          --*((_DWORD *)v16 + 6);
        }
      }
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
        *(_QWORD *)v3 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
    else
    {
      --v3[2];
    }
  }
  v4 = *((unsigned int *)this + 31);
  if ((_DWORD)v4)
  {
    v5 = (unsigned int **)*((_QWORD *)this + 14);
    v6 = &v5[v4];
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        v8 = v7 + 4;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v7 + 4);
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  v11 = (WTF *)*((_QWORD *)this + 14);
  if (v11)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v13)
  {
    if (v13[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
    else
      --v13[4];
  }
  v14 = (WebCore::AbortSignal *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v14, a2);
      bmalloc::api::isoDeallocate(v17, v18);
    }
    else
    {
      --*((_DWORD *)v14 + 6);
    }
  }
  v15 = (WebCore::NavigationDestination *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::NavigationDestination::~NavigationDestination(v15, a2);
      bmalloc::api::isoDeallocate(v19, v20);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  WebCore::Event::~Event(this, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF **v5;
  uint64_t v6;
  WTF ***v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF **v11;
  uint64_t v12;
  WTF *v13;
  WTF **v14;
  WTF ***v16;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF **)(a1 + 24 * i);
      if (*v5 != (WTF *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = (WTF ***)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v11 = *v7;
          v12 = 8 * v8;
          v16 = v7;
          do
          {
            v13 = *v11;
            *v11 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
                WTF::fastFree(v13, a2);
              else
                --*(_DWORD *)v13;
            }
            ++v11;
            v12 -= 8;
            v5 = (WTF **)(a1 + 24 * i);
            v7 = v16;
          }
          while (v12);
        }
        v9 = (WTF *)*v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          v14 = v5;
          WTF::fastFree(v9, a2);
          v5 = v14;
        }
        v10 = *v5;
        *v5 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 1)
            WTF::fastFree(v10, a2);
          else
            --*(_DWORD *)v10;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(WTF ***)result;
    v5 = 8 * v2;
    v8 = result;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, a2);
        else
          --*(_DWORD *)v6;
      }
      ++v4;
      v5 -= 8;
      result = v8;
    }
    while (v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v7 = result;
    WTF::fastFree(v3, a2);
    return v7;
  }
  return result;
}

void std::default_delete<WebCore::RenderLayoutState>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;

  if (this)
  {
    if (*((_BYTE *)this + 160))
    {
      v3 = (WTF *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
          WTF::fastFree(v3, this);
        else
          --*(_DWORD *)v3;
      }
    }
    if (*((_BYTE *)this + 136))
    {
      v4 = (WTF *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
          WTF::fastFree(v4, this);
        else
          --*(_DWORD *)v4;
      }
    }
    v5 = (WTF *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, this);
      else
        --*(_DWORD *)v5;
    }
    v6 = (WTF *)*((_QWORD *)this + 1);
    if (v6)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v6, this);
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::releaseCriticalMemory(WTF::Synchronous,WebCore::MaintainBackForwardCache,WebCore::MaintainMemoryCache)::$_0,void,WebCore::Page &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 888) + 96))(*(_QWORD *)(a2 + 888));
}

WTF::StringImpl *std::array<WTF::AtomString,512ul>::fill[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t i;
  _DWORD *v5;
  WTF::StringImpl *result;

  for (i = 0; i != 4096; i += 8)
  {
    v5 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v5 += 2;
    result = *(WTF::StringImpl **)(a1 + i);
    *(_QWORD *)(a1 + i) = v5;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **std::array<WTF::RefPtr<WebCore::QualifiedName::QualifiedNameImpl,WTF::RawPtrTraits<WebCore::QualifiedName::QualifiedNameImpl>,WTF::DefaultRefDerefTraits<WebCore::QualifiedName::QualifiedNameImpl>>,512ul>::fill[abi:sn180100](uint64_t a1, _DWORD **a2)
{
  uint64_t i;
  _DWORD *v5;
  WTF::StringImpl **result;
  WTF *v7;
  void *v8;

  for (i = 0; i != 4096; i += 8)
  {
    v5 = *a2;
    if (*a2)
      ++*v5;
    result = *(WTF::StringImpl ***)(a1 + i);
    *(_QWORD *)(a1 + i) = v5;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        result = (WTF::StringImpl **)WTF::fastFree(v7, v8);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  uint64_t result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v2 + 2), a2);
      return WTF::fastFree((WTF *)v2, v5);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::VectorTypeOperations<std::unique_ptr<WebCore::RenderLayoutState>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      v4 = *v3;
      *v3 = 0;
      if (v4)
      {
        if (*(_BYTE *)(v4 + 160))
        {
          v5 = *(WTF **)(v4 + 152);
          *(_QWORD *)(v4 + 152) = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 1)
              WTF::fastFree(v5, a2);
            else
              --*(_DWORD *)v5;
          }
        }
        if (*(_BYTE *)(v4 + 136))
        {
          v6 = *(WTF **)(v4 + 128);
          *(_QWORD *)(v4 + 128) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v7 = *(WTF **)(v4 + 24);
        *(_QWORD *)(v4 + 24) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 1)
            WTF::fastFree(v7, a2);
          else
            --*(_DWORD *)v7;
        }
        v8 = *(WTF **)(v4 + 8);
        if (v8)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v8, a2);
        }
        result = WTF::fastFree((WTF *)v4, a2);
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::RenderLayoutState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::RenderLayoutState>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

WTF *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *result;
  WTF **v6;
  uint64_t v7;
  WTF *v8;

  v3 = *(WTF **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)a1 = -1;
  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4)
  {
    v6 = *(WTF ***)(a1 + 8);
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, a2);
        else
          --*(_DWORD *)v8;
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  result = *(WTF **)(a1 + 8);
  if (result)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(_QWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(_QWORD *a1, unsigned int a2, WTF **a3)
{
  uint64_t v4;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF **v13;
  uint64_t v14;
  WTF **v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  WTF ***v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  WTF **v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  WTF ***v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  WTF **v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF **v47;
  _QWORD *v48;
  WTF **v49;
  uint64_t v50;
  _QWORD *v51;
  WTF **v52;
  _QWORD *v53;
  WTF **v54;
  uint64_t v55;
  WTF **v56;
  uint64_t v57;
  WTF **v58;
  _QWORD *v59;
  WTF **v60;
  WTF *v61;
  WTF **v62;
  _QWORD *v63;
  WTF **v64;
  uint64_t v65;
  WTF **v66;
  WTF *v67;
  BOOL v68;
  _QWORD *v69;
  WTF **v70;
  uint64_t v71;
  WTF **v72;
  WTF *v73;
  WTF **v74;
  _QWORD *v75;
  WTF **v76;
  uint64_t v77;
  WTF **result;
  WTF **v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  WTF **v83;
  WTF **v84;
  WTF **v85;
  WTF **v86;
  WTF **v87;
  WTF **v88;
  WTF **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v4 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v4 - 4);
    v8 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = a1;
    v12 = 0;
    v13 = 0;
    v14 = v7;
    v15 = a3;
    do
    {
      v16 = (WTF **)(v4 + 24 * v12);
      v17 = *v16;
      if (*v16 != (WTF *)-1)
      {
        if (v17)
        {
          v23 = *v11;
          if (*v11)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = (WTF **)(v23 + 24 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (*v31);
          v32 = v30;
          v33 = v23 + 24 * v30;
          v36 = *(_DWORD *)(v33 + 20);
          v35 = (_DWORD *)(v33 + 20);
          v34 = v36;
          v37 = (WTF ***)(v35 - 3);
          if (v36)
          {
            v66 = *v37;
            v80 = 8 * v34;
            v81 = v11;
            v84 = v15;
            v87 = v13;
            v92 = v14;
            do
            {
              v67 = *v66;
              *v66 = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 1)
                  WTF::fastFree(v67, v10);
                else
                  --*(_DWORD *)v67;
              }
              ++v66;
              v11 = v81;
              v68 = v80 == 8;
              v80 -= 8;
              v15 = v84;
              v13 = v87;
              v14 = v92;
            }
            while (!v68);
          }
          v38 = (WTF *)*v37;
          if (*v37)
          {
            *v37 = 0;
            *(_DWORD *)(v23 + 24 * v32 + 16) = 0;
            v85 = v15;
            v88 = v13;
            v69 = v11;
            v93 = v14;
            WTF::fastFree(v38, v10);
            v13 = v88;
            v14 = v93;
            v11 = v69;
            v15 = v85;
          }
          v39 = *v31;
          *v31 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
            {
              v83 = v15;
              v86 = v13;
              v51 = v11;
              v90 = v14;
              WTF::fastFree(v39, v10);
              v13 = v86;
              v14 = v90;
              v11 = v51;
              v15 = v83;
            }
            else
            {
              --*(_DWORD *)v39;
            }
          }
          v40 = *v16;
          *v16 = 0;
          *v31 = v40;
          v41 = v4 + 24 * v12;
          *v37 = 0;
          *(_QWORD *)(v35 - 1) = 0;
          v43 = *(WTF ***)(v41 + 8);
          v42 = v41 + 8;
          *(_QWORD *)v42 = 0;
          *v37 = v43;
          LODWORD(v40) = *(_DWORD *)(v42 + 8);
          *(_DWORD *)(v42 + 8) = 0;
          *(_DWORD *)(v23 + 24 * v32 + 16) = (_DWORD)v40;
          LODWORD(v40) = *(_DWORD *)(v42 + 12);
          *(_DWORD *)(v42 + 12) = 0;
          *v35 = (_DWORD)v40;
          v44 = *(unsigned int *)(v42 + 12);
          if ((_DWORD)v44)
          {
            v70 = *(WTF ***)v42;
            v71 = 8 * v44;
            v82 = v11;
            v89 = v13;
            v94 = v14;
            do
            {
              v72 = v15;
              v73 = *v70;
              *v70 = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 1)
                  WTF::fastFree(v73, v10);
                else
                  --*(_DWORD *)v73;
              }
              ++v70;
              v71 -= 8;
              v15 = v72;
              v11 = v82;
              v13 = v89;
              v14 = v94;
            }
            while (v71);
          }
          v45 = *(WTF **)v42;
          if (*(_QWORD *)v42)
          {
            *(_QWORD *)v42 = 0;
            *(_DWORD *)(v42 + 8) = 0;
            v74 = v15;
            v75 = v11;
            v76 = v13;
            v77 = v14;
            WTF::fastFree(v45, v10);
            v14 = v77;
            v13 = v76;
            v11 = v75;
            v15 = v74;
          }
          v46 = *v16;
          *v16 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 1)
            {
              v52 = v15;
              v53 = v11;
              v54 = v13;
              v55 = v14;
              WTF::fastFree(v46, v10);
              v14 = v55;
              v13 = v54;
              v11 = v53;
              v15 = v52;
            }
            else
            {
              --*(_DWORD *)v46;
            }
          }
          if (v16 == v15)
            v13 = v31;
        }
        else
        {
          v18 = v4 + 24 * v12;
          v19 = (WTF ***)(v18 + 8);
          v20 = *(unsigned int *)(v18 + 20);
          if ((_DWORD)v20)
          {
            v56 = *v19;
            v57 = 8 * v20;
            v91 = v14;
            do
            {
              v58 = v13;
              v59 = v11;
              v60 = v15;
              v61 = *v56;
              *v56 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 1)
                  WTF::fastFree(v61, v10);
                else
                  --*(_DWORD *)v61;
              }
              ++v56;
              v57 -= 8;
              v15 = v60;
              v11 = v59;
              v13 = v58;
              v14 = v91;
            }
            while (v57);
          }
          v21 = (WTF *)*v19;
          if (*v19)
          {
            *v19 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            v62 = v15;
            v63 = v11;
            v64 = v13;
            v65 = v14;
            WTF::fastFree(v21, v10);
            v14 = v65;
            v13 = v64;
            v11 = v63;
            v15 = v62;
          }
          v22 = *v16;
          *v16 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
            {
              v47 = v15;
              v48 = v11;
              v49 = v13;
              v50 = v14;
              WTF::fastFree(v22, v10);
              v14 = v50;
              v13 = v49;
              v11 = v48;
              v15 = v47;
            }
            else
            {
              --*(_DWORD *)v22;
            }
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  v79 = v13;
  WTF::fastFree((WTF *)(v4 - 16), v10);
  return v79;
}

unint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = 8 * v8;
        v12 = (unsigned int **)v7;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *(_QWORD *)v10 = v13;
          result = *v12;
          *v12 = 0;
          if (result)
          {
            if (*result == 1)
              result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
            else
              --*result;
          }
          v10 += 2;
          ++v12;
          v11 -= 8;
        }
        while (v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  WTF **v15;
  uint64_t v16;
  WTF *v17;

  if (*a1)
  {
    v4 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    if ((WTF **)v4 != a2)
      goto LABEL_4;
    return 0;
  }
  if (!a2)
    return 0;
  v4 = 0;
LABEL_4:
  if ((WTF **)v4 != a2)
  {
    v5 = *a2;
    *a2 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    *a2 = (WTF *)-1;
    v6 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v6)
    {
      v15 = (WTF **)a2[1];
      v16 = 8 * v6;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            WTF::fastFree(v17, a2);
          else
            --*(_DWORD *)v17;
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    v7 = a2[1];
    if (v7)
    {
      a2[1] = 0;
      *((_DWORD *)a2 + 4) = 0;
      WTF::fastFree(v7, a2);
    }
    ++*(_DWORD *)(*a1 - 16);
    v8 = *a1;
    if (*a1)
      v9 = *(_DWORD *)(v8 - 12) - 1;
    else
      v9 = -1;
    *(_DWORD *)(v8 - 12) = v9;
    v10 = *a1;
    if (*a1)
    {
      v12 = 6 * *(_DWORD *)(v10 - 12);
      v13 = *(_DWORD *)(v10 - 4);
      if (v12 < v13 && v13 >= 9)
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v13 >> 1, 0);
    }
  }
  return 1;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::SingleThreadWeakPtrImpl const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t *result;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  for (i = 1; ; ++i)
  {
    result = (uint64_t *)(v2 + 24 * v7);
    v10 = *result;
    if (*result != -1)
    {
      if (!v10)
        return 0;
      if (v10 == *a2)
        break;
    }
    v7 = (v7 + i) & v3;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::releaseMemory(WTF::Critical,WTF::Synchronous,WebCore::MaintainBackForwardCache,WebCore::MaintainMemoryCache)::$_0,void,WebCore::Page &>::call(WTF::StringImpl *result, uint64_t a2)
{
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    return WebCore::InspectorInstrumentation::didHandleMemoryPressureImpl(*(WTF::StringImpl **)(*(_QWORD *)(a2 + 80) + 8), **((unsigned __int8 **)result + 1) != 0);
  return result;
}

void WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(WebCore::NavigationAPIMethodTracker *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WebCore::HistoryItem *v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;
  WTF *v14;
  void *v15;
  void *v16;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 1)
    {
      v10 = *(WebCore::HistoryItem **)(v5 + 64);
      *(_QWORD *)(v5 + 64) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v10);
          WTF::fastFree(v14, v15);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v5 + 32), a2);
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v5, v11);
      bmalloc::api::isoDeallocate(v12, v13);
    }
    else
    {
      --*(_DWORD *)(v5 + 24);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v6 + 2), a2);
      WTF::fastFree((WTF *)v6, v16);
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::NavigationHistoryEntry,WTF::RawPtrTraits<WebCore::NavigationHistoryEntry>,WTF::DefaultRefDerefTraits<WebCore::NavigationHistoryEntry>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::HistoryItem *v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;
  WTF *v11;
  void *v12;
  WTF *v13;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 1)
        {
          v7 = *(WebCore::HistoryItem **)(v6 + 64);
          *(_QWORD *)(v6 + 64) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::HistoryItem::~HistoryItem(v7);
              WTF::fastFree(v11, v12);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v6 + 32), a2);
          WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v6, v8);
          bmalloc::api::isoDeallocate(v9, v10);
        }
        else
        {
          --*(_DWORD *)(v6 + 24);
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v13 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::NavigationAPIMethodTracker *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WebCore::NavigationAPIMethodTracker *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WebCore::NavigationAPIMethodTracker *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  void *v32;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 == (WTF::StringImpl *)-1)
        goto LABEL_32;
      if (v11)
        break;
      v12 = v4 + 16 * v9;
      v13 = *(WebCore::NavigationAPIMethodTracker **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v13, v8);
          WTF::fastFree(v26, v27);
          v11 = *v10;
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      *v10 = 0;
      if (!v11)
        goto LABEL_32;
      if (*(_DWORD *)v11 == 2)
      {
LABEL_34:
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
        goto LABEL_32;
      }
      *(_DWORD *)v11 -= 2;
LABEL_32:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 8);
    else
      v15 = 0;
    v16 = *((_DWORD *)v11 + 4);
    if (v16 < 0x100)
      v17 = WTF::StringImpl::hashSlowCase(v11);
    else
      v17 = v16 >> 8;
    v18 = 0;
    do
    {
      v19 = v17 & v15;
      v17 = ++v18 + v19;
    }
    while (*(_QWORD *)(v14 + 16 * v19));
    v20 = (WTF::StringImpl **)(v14 + 16 * v19);
    v21 = v20[1];
    v20[1] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v21, v8);
        WTF::fastFree(v28, v29);
        v30 = *v20;
        *v20 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v30 -= 2;
        }
        goto LABEL_26;
      }
      --*(_DWORD *)v21;
    }
    *v20 = 0;
LABEL_26:
    v22 = *v10;
    *v10 = 0;
    *v20 = v22;
    v23 = v4 + 16 * v9;
    v24 = *(WTF::StringImpl **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    v20[1] = v24;
    v25 = *(WebCore::NavigationAPIMethodTracker **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(v25, v8);
        WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
    v11 = *v10;
    *v10 = 0;
    if (!v11)
      goto LABEL_32;
    if (*(_DWORD *)v11 == 2)
      goto LABEL_34;
    *(_DWORD *)v11 -= 2;
    goto LABEL_32;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WebCore::NavigationAPIMethodTracker *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WebCore::NavigationAPIMethodTracker *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v12;
  void *v13;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::NavigationAPIMethodTracker::~NavigationAPIMethodTracker(result, a2);
      result = (WebCore::NavigationAPIMethodTracker *)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (WebCore::NavigationAPIMethodTracker *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::NavigationAPIMethodTracker,WTF::RawPtrTraits<WebCore::NavigationAPIMethodTracker>,WTF::DefaultRefDerefTraits<WebCore::NavigationAPIMethodTracker>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1);
  }
  return result;
}

uint64_t WebCore::NavigationHistoryEntry::scriptExecutionContext(WebCore::NavigationHistoryEntry *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::NavigationHistoryEntry::eventTargetInterface(WebCore::NavigationHistoryEntry *this)
{
  return 67;
}

uint64_t WebCore::NavigationHistoryEntry::index(WebCore::NavigationHistoryEntry *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  WebCore::Navigation *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  bmalloc::api *v17;
  void *v18;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return -1;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 178))
    return -1;
  v5 = (_DWORD *)(v2 - 264);
  *(_DWORD *)(v2 - 264) += 2;
  if (!WebCore::Document::isFullyActive((WebCore::Document *)(v2 - 288)))
    goto LABEL_21;
  v7 = *(_QWORD *)(v2 + 408);
  v8 = *(_QWORD *)(v7 + 216);
  if (!v8)
  {
    v8 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v8 + 24) = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = &unk_1E33A4FC0;
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
    if (v9)
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 + 1, v9));
    }
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)v8 = off_1E33FFF20;
    *(_BYTE *)(v8 + 40) = 0;
    *(_BYTE *)(v8 + 48) = 0;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 82) = 0u;
    *(_QWORD *)(v8 + 112) = 0;
    *(_QWORD *)(v8 + 120) = 0;
    *(_QWORD *)(v8 + 104) = 0;
    v12 = *(WebCore::Navigation **)(v7 + 216);
    *(_QWORD *)(v7 + 216) = v8;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 1)
      {
        WebCore::Navigation::~Navigation(v12, v10);
        bmalloc::api::isoDeallocate(v17, v18);
        v8 = *(_QWORD *)(v7 + 216);
      }
      else
      {
        --*((_DWORD *)v12 + 6);
      }
    }
  }
  {
    WebCore::Navigation::entries(void)const::emptyEntries = 0;
    unk_1EE2F7EE0 = 0;
  }
  v13 = WebCore::Navigation::hasEntriesAndEventsDisabled((WebCore::Navigation *)v8)
      ? &WebCore::Navigation::entries(void)const::emptyEntries
      : (uint64_t *)(v8 + 72);
  v14 = *((unsigned int *)v13 + 3);
  if ((_DWORD)v14)
  {
    v3 = 0;
    v15 = *v13;
    while (*(WebCore::NavigationHistoryEntry **)(v15 + 8 * v3) != this)
    {
      if (v14 == ++v3)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    v3 = -1;
  }
  if (*v5 == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v6);
  }
  else
  {
    *v5 -= 2;
  }
  return v3;
}

uint64_t WebCore::NavigationHistoryEntry::sameDocument(WebCore::NavigationHistoryEntry *this)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  _DWORD *v5;
  void *v6;
  int *v7;
  int v8;
  int v9;
  WebCore::HistoryItem *v10;
  int v11;
  uint64_t result;
  WTF *v13;
  void *v14;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 178))
    return 0;
  v5 = (_DWORD *)(v2 - 264);
  *(_DWORD *)(v2 - 264) += 2;
  if (!WebCore::Document::isFullyActive((WebCore::Document *)(v2 - 288)))
  {
    v3 = 0;
    goto LABEL_11;
  }
  v7 = *(int **)(*(_QWORD *)(*(_QWORD *)(v2 + 240) + 8) + 184);
  v8 = *v7;
  v9 = *v7 + 1;
  *v7 = v9;
  v10 = (WebCore::HistoryItem *)*((_QWORD *)v7 + 2);
  if (!v10)
  {
    if (!v9)
      goto LABEL_19;
    v3 = 0;
    *v7 = v8;
LABEL_11:
    if (*v5 == 2)
    {
      if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v6);
    }
    else
    {
      *v5 -= 2;
    }
    return v3;
  }
  v11 = (*(_DWORD *)v10)++;
  if (v9)
  {
    *v7 = v8;
    v3 = *((_QWORD *)v10 + 20) == *(_QWORD *)(*((_QWORD *)this + 8) + 160);
    if (v11)
    {
      *(_DWORD *)v10 = v11;
    }
    else
    {
      WebCore::HistoryItem::~HistoryItem(v10, (WTF::StringImpl *)v6);
      WTF::fastFree(v13, v14);
    }
    goto LABEL_11;
  }
LABEL_19:
  result = 286;
  __break(0xC471u);
  return result;
}

void WebCore::Navigator::~Navigator(WebCore::Navigator *this, void *a2)
{
  WebCore::GPU *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ShareDataReader *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (WebCore::GPU *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::GPU::~GPU(v3, a2);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
    WTF::RefCounted<WebCore::DOMMimeTypeArray>::deref((_DWORD *)(v6 + 8));
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    WTF::RefCounted<WebCore::DOMPluginArray>::deref((_DWORD *)(v7 + 8));
  v8 = (WebCore::ShareDataReader *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::ShareDataReader::~ShareDataReader(v8, a2);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = *((_QWORD *)this + 9);
  if (v9)
    WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::deallocateTable(v9, a2);
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v18 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v18)
      {
        v21 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v18));
        v10 = v21;
      }
      v19 = *(WTF **)(v10 + 16);
      if (v19)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v20 = v10;
        WTF::fastFree(v19, a2);
        v10 = v20;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *((_QWORD *)this + 7);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 7) = 0;
  }
  WebCore::NavigatorBase::~NavigatorBase(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Navigator::~Navigator(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::NavigatorBase::~NavigatorBase(WebCore::NavigatorBase *this, void *a2)
{
  WebCore::ServiceWorkerContainer *v3;
  bmalloc::api *v4;
  void *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  bmalloc::api *v15;

  *(_QWORD *)this = &off_1E34001D0;
  v3 = (WebCore::ServiceWorkerContainer *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    WebCore::ServiceWorkerContainer::~ServiceWorkerContainer(v3, a2);
    bmalloc::api::isoDeallocate(v4, v5);
  }
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[6];
  }
  v7 = (bmalloc::api *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v12 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          v15 = v7;
          WTF::fastFree((WTF *)v12, a2);
          v7 = v15;
        }
      }
      bmalloc::api::isoDeallocate(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

void `non-virtual thunk to'WebCore::Navigator::~Navigator(WebCore::Navigator *this, void *a2)
{
  WebCore::Navigator::~Navigator((WebCore::Navigator *)((char *)this - 80), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Navigator::~Navigator((WebCore::Navigator *)((char *)this - 80), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t *WebCore::Navigator::appVersion@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::NavigatorBase *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;

  v3 = this[8];
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_18;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_18;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19601036CLL);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (WebCore::NavigatorBase *)this;
    if ((*(_QWORD *)(*(_QWORD *)(v8 + 136) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v10 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v10 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      v11 = *(_QWORD *)(v8 + 296);
      if (v11)
      {
        *(_DWORD *)(v11 + 24) += 2;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 64))(v10, v11, 1);
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v10 + 64))(v10, 0, 1);
      }
    }
    return WebCore::NavigatorBase::appVersion(v9, a2);
  }
  else
  {
LABEL_18:
    *a2 = 0;
  }
  return this;
}

uint64_t *WebCore::NavigatorBase::appVersion@<X0>(WebCore::NavigatorBase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x8_t *v11;
  int16x8_t v12;
  int16x8_t *v13;
  int8x16_t v14;
  int16x8_t *v15;
  char *v16;
  int16x8_t v17;
  __int16 *v18;
  uint64_t v19;

  result = (uint64_t *)(*(uint64_t (**)(WebCore::NavigatorBase *))(*(_QWORD *)this + 24))(this);
  v5 = *result;
  if (!*result)
  {
    *a2 = 0;
    return result;
  }
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 4);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    if (!(_DWORD)v7)
    {
LABEL_14:
      *(_DWORD *)v5 += 2;
      *a2 = v5;
      return result;
    }
    v8 = 16;
    if (v7 < 0x10)
      v8 = *(unsigned int *)(v5 + 4);
    v9 = v8;
    result = *(uint64_t **)(v5 + 8);
    do
    {
      if (*(_BYTE *)result == 47)
        goto LABEL_11;
      result = (uint64_t *)((char *)result + 1);
      --v9;
    }
    while (v9);
    if (v7 < 0x11)
      goto LABEL_14;
    result = (uint64_t *)memchr((void *)(v6 + v8), 47, v7 - v8);
    if (result)
    {
LABEL_11:
      LODWORD(v10) = (_DWORD)result - v6;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  if (!(_DWORD)v7)
    goto LABEL_14;
  v11 = (int16x8_t *)(v6 + 2 * v7);
  if (v7 > 0x1F)
  {
    v12.i64[0] = 0x2F002F002F002FLL;
    v12.i64[1] = 0x2F002F002F002FLL;
    v13 = *(int16x8_t **)(v5 + 8);
    do
    {
      v14 = (int8x16_t)vceqq_s16(*v13, v12);
      LOWORD(v4) = vmaxvq_u16((uint16x8_t)v14);
      if (v4)
        goto LABEL_25;
      v15 = v13 + 1;
      v16 = &v13[1].i8[14];
      ++v13;
    }
    while (v16 < (char *)v11);
    if (v15 < v11)
    {
      v17.i64[0] = 0x2F002F002F002FLL;
      v17.i64[1] = 0x2F002F002F002FLL;
      v14 = (int8x16_t)vceqq_s16(v11[-1], v17);
      v17.i16[0] = vmaxvq_u16((uint16x8_t)v14);
      if (v17.i32[0])
      {
        v13 = v11 - 1;
LABEL_25:
        v18 = &v13->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v14))];
        goto LABEL_26;
      }
    }
    goto LABEL_13;
  }
  v19 = 2 * v7;
  v18 = *(__int16 **)(v5 + 8);
  while (*v18 != 47)
  {
    ++v18;
    v19 -= 2;
    if (!v19)
      goto LABEL_13;
  }
LABEL_26:
  if (v18 == (__int16 *)v11)
    goto LABEL_13;
  v10 = ((uint64_t)v18 - v6) >> 1;
LABEL_12:
  if ((_DWORD)v10 == -1)
  {
LABEL_13:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_14;
  }
  return (uint64_t *)WTF::StringImpl::substring((WTF::StringImpl *)v5);
}

uint64_t WebCore::Navigator::platform@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v2 = this;
  v4 = *(_QWORD *)(this + 64);
  if (!v4)
    goto LABEL_15;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_15;
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    goto LABEL_15;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_15;
  if (*(_BYTE *)(v7 + 178))
  {
    this = 105;
    __break(0xC471u);
    return this;
  }
  v8 = *(_QWORD *)(v7 + 240);
  if (!v8)
  {
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
LABEL_16:
    LOBYTE(v12) = 1;
    goto LABEL_17;
  }
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(v9 + 24);
  if (v12)
  {
    v12 = *(_QWORD *)(v12 + 8);
    if (v12)
    {
      v13 = *(WTF::StringImpl **)(this + 128);
      if (v13)
      {
LABEL_13:
        *(_DWORD *)v13 += 2;
LABEL_14:
        *a2 = v13;
LABEL_20:
        v15 = (unsigned int *)(v9 + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v24 = off_1E31FE290;
          *((_QWORD *)v24 + 1) = v15;
          v25 = v24;
          WTF::ensureOnMainThread();
          this = (uint64_t)v25;
          v25 = 0;
          if (this)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        }
        return this;
      }
      WebCore::FrameLoader::navigatorPlatform(*(WebCore::FrameLoader **)(v9 + 280), &v25);
      v13 = v25;
      v25 = 0;
      this = *(_QWORD *)(v2 + 128);
      *(_QWORD *)(v2 + 128) = v13;
      if (!this)
      {
LABEL_28:
        if (v13)
          goto LABEL_13;
        PAL::deviceName((uint64_t)&v25);
        v13 = v25;
        v25 = 0;
        this = *(_QWORD *)(v2 + 128);
        *(_QWORD *)(v2 + 128) = v13;
        if (!this)
        {
LABEL_33:
          if (!v13)
            goto LABEL_14;
          goto LABEL_13;
        }
        v21 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
          this = (uint64_t)v25;
          v25 = 0;
          if (!this)
            goto LABEL_32;
          v21 = *(_DWORD *)this - 2;
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v23);
            goto LABEL_32;
          }
        }
        *(_DWORD *)this = v21;
LABEL_32:
        v13 = *(WTF::StringImpl **)(v2 + 128);
        goto LABEL_33;
      }
      v19 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)this, v18);
        this = (uint64_t)v25;
        v25 = 0;
        if (!this)
          goto LABEL_27;
        v19 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
        {
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v22);
          goto LABEL_27;
        }
      }
      *(_DWORD *)this = v19;
LABEL_27:
      v13 = *(WTF::StringImpl **)(v2 + 128);
      goto LABEL_28;
    }
  }
LABEL_17:
  v14 = *(WTF::StringImpl **)(this + 128);
  if (v14)
    *(_DWORD *)v14 += 2;
  *a2 = v14;
  if ((v12 & 1) == 0)
    goto LABEL_20;
  return this;
}

uint64_t WebCore::Navigator::onLine(WebCore::Navigator *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = WebCore::s_platformStrategies;
  v2 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v1 + 8) = v2;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
}

uint64_t WebCore::Navigator::canShare(WebCore::Navigator *this, WebCore::Document *a2, const WebCore::ShareData *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;

  result = WebCore::Document::isFullyActive(a2);
  if ((_DWORD)result)
  {
    result = WebCore::PermissionsPolicy::isFeatureEnabled(0xAu, a2, 1);
    if ((_DWORD)result)
    {
      if (*(_OWORD *)a3 == 0)
      {
        if (*((_DWORD *)a3 + 9))
          v6 = *(_DWORD *)(*((_QWORD *)a2 + 85) + 704) >> 31;
        else
          v6 = 0;
        v7 = *((_QWORD *)a3 + 2);
        if (!v7 && !v6)
          return 0;
      }
      else
      {
        v7 = *((_QWORD *)a3 + 2);
      }
      if (!v7)
        return 1;
      (*(void (**)(WTF::StringImpl **__return_ptr, char *, char *, _QWORD))(*((_QWORD *)a2 + 24) + 120))(&v10, (char *)a2 + 192, (char *)a3 + 16, 0);
      v9 = v10;
      if ((~v11 & 3) == 0)
      {
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
        return 1;
      }
      v10 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Navigator::share(uint64_t a1, WebCore::Document *this, uint64_t a3, uint64_t *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  WebCore::LocalDOMWindow *v18;
  WebCore::Navigator *v19;
  WTF::StringImpl *v20;
  _DWORD **v21;
  WTF::StringImpl *v22;
  int v23;
  char v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  WebCore::ShareDataReader *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::StringImpl *v52;
  _DWORD **v53;
  uint64_t v54;
  _DWORD *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF *v59;
  void *v60;
  __int128 v61;
  char v62[16];
  int v63;
  WTF::StringImpl *v64;
  _BYTE v65[28];
  unsigned int v66;
  WTF::StringImpl *v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  WTF *v73;
  uint64_t v74;
  char v75;
  _BYTE v76[9];

  if ((WebCore::Document::isFullyActive(this) & 1) == 0)
  {
    v12 = *a4;
    v64 = 0;
    goto LABEL_6;
  }
  if ((WebCore::PermissionsPolicy::isFeatureEnabled(0xAu, this, 1) & 1) == 0)
  {
    v14 = *a4;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v14;
    v13 = 31;
LABEL_8:
    WebCore::DeferredPromise::reject(v12, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v64, 0);
    result = v64;
    v64 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    v11 = *a4;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v11;
LABEL_6:
    v13 = 8;
    goto LABEL_8;
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (!v17)
  {
    v18 = 0;
    goto LABEL_110;
  }
  v18 = *(WebCore::LocalDOMWindow **)(v17 + 8);
  if (!v18)
  {
LABEL_110:
    v24 = 1;
    goto LABEL_21;
  }
  ++*((_DWORD *)v18 + 6);
  v19 = (WebCore::Navigator *)WebCore::LocalDOMWindow::consumeTransientActivation(v18);
  if ((v19 & 1) != 0)
  {
    if ((WebCore::Navigator::canShare(v19, this, (const WebCore::ShareData *)a3) & 1) == 0)
    {
      v27 = *a4;
      v64 = 0;
      WebCore::DeferredPromise::reject(v27, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v64, 0);
      result = v64;
      v64 = 0;
      if (!result)
        goto LABEL_96;
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_96;
      }
LABEL_107:
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
      goto LABEL_96;
    }
    v21 = (_DWORD **)(a3 + 16);
    if (*(_QWORD *)(a3 + 16))
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, char *, uint64_t, _QWORD))(*((_QWORD *)this + 24) + 120))(&v64, (char *)this + 192, a3 + 16, 0);
      v4 = *(_DWORD *)v65;
      v22 = v64;
      if ((~*(_DWORD *)v65 & 3) != 0)
      {
        v64 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::destroy(v22, v20);
            v23 = 0;
          }
          else
          {
            v23 = 0;
            *(_DWORD *)v22 -= 2;
          }
          v22 = 0;
        }
        else
        {
          v23 = 0;
        }
      }
      else
      {
        v61 = *(_OWORD *)&v65[4];
        v6 = *(_QWORD *)&v65[20];
        v23 = 1;
        v5 = v66;
      }
    }
    else
    {
      v23 = 0;
      v22 = 0;
    }
    v29 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v29 += 2;
    v64 = v29;
    v30 = *(_DWORD **)(a3 + 8);
    if (v30)
      *v30 += 2;
    *(_QWORD *)v65 = v30;
    v31 = *v21;
    if (*v21)
      *v31 += 2;
    v32 = *(unsigned int *)(a3 + 36);
    *(_QWORD *)&v65[16] = 0;
    *(_DWORD *)&v65[24] = 0;
    *(_QWORD *)&v65[8] = v31;
    v66 = v32;
    if ((_DWORD)v32)
    {
      if (v32 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x196010E74);
      }
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v32));
      *(_DWORD *)&v65[24] = v32;
      *(_QWORD *)&v65[16] = v33;
      v34 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v34)
      {
        v35 = *(uint64_t **)(a3 + 24);
        v36 = 8 * v34;
        do
        {
          v37 = *v35++;
          ++*(_DWORD *)(v37 + 16);
          *v33++ = v37;
          v36 -= 8;
        }
        while (v36);
      }
    }
    LOBYTE(v67) = 0;
    v72 = 0;
    if (v23)
    {
      if (v22)
        *(_DWORD *)v22 += 2;
      v67 = v22;
      v68 = v4;
      v69 = v61;
      v70 = v6;
      v71 = v5;
      v72 = 1;
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    if ((*(_DWORD *)(*((_QWORD *)this + 85) + 704) & 0x80000000) != 0 && *(_DWORD *)(a3 + 36))
    {
      v38 = *(_QWORD *)(a1 + 88);
      if (v38)
      {
        v39 = *(WTF **)(v38 + 136);
        v40 = *(unsigned int *)(v38 + 148);
        *(_QWORD *)(v38 + 136) = 0;
        *(_QWORD *)(v38 + 144) = 0;
        if ((_DWORD)v40)
        {
          v41 = 8 * v40;
          v42 = (uint64_t *)v39;
          do
          {
            std::unique_ptr<WebCore::BlobLoader>::reset[abi:sn180100](v42++, 0);
            v41 -= 8;
          }
          while (v41);
        }
        if (v39)
          WTF::fastFree(v39, v20);
      }
      v43 = *a4;
      *a4 = 0;
      v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v44 = &off_1E34002E8;
      v44[1] = a1;
      v44[2] = v43;
      v45 = WTF::fastMalloc((WTF *)0x98);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = v44;
      *(_BYTE *)(v45 + 96) = 0;
      *(_QWORD *)(v45 + 104) = 0;
      *(_QWORD *)(v45 + 112) = 0;
      *(_OWORD *)(v45 + 16) = 0u;
      *(_OWORD *)(v45 + 32) = 0u;
      *(_OWORD *)(v45 + 41) = 0u;
      *(_QWORD *)(v45 + 136) = 0;
      *(_QWORD *)(v45 + 144) = 0;
      v47 = *(WebCore::ShareDataReader **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v45;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1)
        {
          WebCore::ShareDataReader::~ShareDataReader(v47, v46);
          WTF::fastFree(v59, v60);
          v45 = *(_QWORD *)(a1 + 88);
        }
        else
        {
          --*(_DWORD *)v47;
        }
      }
      WebCore::ShareDataReader::start(v45, this, (uint64_t *)&v64);
    }
    else
    {
      *(_QWORD *)v62 = &v64;
      v63 = 0;
      WebCore::Navigator::showShareData(a1, v62, a4);
      if (v63 != -1)
        ((void (*)(_BYTE *, char *))off_1E3400200[v63])(v76, v62);
      v63 = -1;
    }
    if (HIDWORD(v74))
    {
      v48 = v73;
      v49 = 16 * HIDWORD(v74);
      do
      {
        WebCore::RawFile::~RawFile(v48, v28);
        v48 = (WTF *)(v50 + 16);
        v49 -= 16;
      }
      while (v49);
    }
    v51 = v73;
    if (v73)
    {
      v73 = 0;
      LODWORD(v74) = 0;
      WTF::fastFree(v51, v28);
    }
    if (v72)
    {
      v52 = v67;
      v67 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v28);
        else
          *(_DWORD *)v52 -= 2;
      }
    }
    if (v66)
    {
      v53 = *(_DWORD ***)&v65[16];
      v54 = 8 * v66;
      do
      {
        v55 = *v53;
        *v53 = 0;
        if (v55)
        {
          if (v55[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
          else
            --v55[4];
        }
        ++v53;
        v54 -= 8;
      }
      while (v54);
    }
    v56 = *(WTF **)&v65[16];
    if (*(_QWORD *)&v65[16])
    {
      *(_QWORD *)&v65[16] = 0;
      *(_DWORD *)&v65[24] = 0;
      WTF::fastFree(v56, v28);
    }
    v57 = *(WTF::StringImpl **)&v65[8];
    *(_QWORD *)&v65[8] = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v28);
      else
        *(_DWORD *)v57 -= 2;
    }
    v58 = *(WTF::StringImpl **)v65;
    *(_QWORD *)v65 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v28);
      else
        *(_DWORD *)v58 -= 2;
    }
    result = v64;
    v64 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
        if (!v23)
        {
LABEL_96:
          if (*((_DWORD *)v18 + 6) == 1)
            return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v18 + 72))(v18);
          --*((_DWORD *)v18 + 6);
          return result;
        }
        goto LABEL_93;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v23)
      goto LABEL_96;
LABEL_93:
    if (!v22)
      goto LABEL_96;
    if (*(_DWORD *)v22 != 2)
    {
      *(_DWORD *)v22 -= 2;
      goto LABEL_96;
    }
    result = v22;
    goto LABEL_107;
  }
  v24 = 0;
LABEL_21:
  v25 = *a4;
  v64 = 0;
  WebCore::DeferredPromise::reject(v25, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v64, 0);
  result = v64;
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  if ((v24 & 1) == 0)
    goto LABEL_96;
  return result;
}

uint64_t WebCore::Navigator::showShareData(uint64_t result, char *a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  __int128 v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  _DWORD **v39;
  _DWORD **v40;
  _DWORD *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  objc_class *v48;
  void *v49;
  objc_class *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF::StringImpl *v55;
  WTF *v56;
  uint64_t v57;
  _DWORD *v58;
  WTF *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unsigned int v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF *v68;
  int v69;
  unsigned int v70;
  WTF::StringImpl *v71;
  __int128 v72;
  __int128 v73;
  char v74;
  WTF *v75;
  int v76;
  unsigned int v77;
  char v78;
  objc_class *v79;

  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = *a3;
      v6 = *a2;
      v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v79 = 0;
      LOBYTE(v65) = v6;
      if (v7)
        *(_DWORD *)v7 += 2;
      v66 = v7;
      WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v65, 0, &v79);
      result = (uint64_t)v66;
      v66 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
          if (!v7)
            return result;
LABEL_9:
          if (*(_DWORD *)v7 == 2)
            return WTF::StringImpl::destroy(v7, v8);
          *(_DWORD *)v7 -= 2;
          return result;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v7)
        return result;
      goto LABEL_9;
    }
    goto LABEL_97;
  }
  v9 = result;
  v10 = *(_QWORD *)(result + 64);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 72);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          if (!*(_BYTE *)(v13 + 178))
          {
            v14 = *(_QWORD *)(v13 + 240);
            if (!v14)
              return result;
            v15 = *(_QWORD *)(v14 + 8);
            if (!v15)
              return result;
            v16 = (unsigned int *)(v15 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
            v18 = *(_QWORD *)(v15 + 24);
            if (!v18)
              goto LABEL_87;
            v19 = *(_QWORD *)(v18 + 8);
            if (!v19)
              goto LABEL_87;
            *(_BYTE *)(result + 96) = 1;
            if (*(_BYTE *)(v19 + 1091))
            {
              WTF::RunLoop::main((WTF::RunLoop *)result);
              v20 = *a3;
              *a3 = 0;
              WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 24), v9);
              v21 = *(unsigned int **)(v9 + 24);
              if (v21)
              {
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 + 1, v21));
              }
              v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v23 = &off_1E3400330;
              *((_QWORD *)v23 + 1) = v20;
              *((_QWORD *)v23 + 2) = v21;
              v65 = v23;
              WTF::RunLoop::dispatch();
              result = (uint64_t)v65;
              v65 = 0;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              do
              {
LABEL_87:
                v62 = __ldaxr(v16);
                v63 = v62 - 1;
              }
              while (__stlxr(v63, v16));
              if (!v63)
              {
                atomic_store(1u, v16);
                v64 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v64 = off_1E31FE290;
                *((_QWORD *)v64 + 1) = v16;
                v65 = v64;
                WTF::ensureOnMainThread();
                result = (uint64_t)v65;
                v65 = 0;
                if (result)
                  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              }
              return result;
            }
            if (*((_DWORD *)a2 + 4))
            {
LABEL_97:
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_98;
            }
            v24 = *(_QWORD *)a2;
            v25 = **(WTF::StringImpl ***)a2;
            if (v25)
              *(_DWORD *)v25 += 2;
            v65 = v25;
            v26 = *(WTF::StringImpl **)(v24 + 8);
            if (v26)
              *(_DWORD *)v26 += 2;
            v66 = v26;
            v27 = *(WTF::StringImpl **)(v24 + 16);
            if (v27)
              *(_DWORD *)v27 += 2;
            v28 = *(unsigned int *)(v24 + 36);
            v68 = 0;
            v69 = 0;
            v67 = v27;
            v70 = v28;
            if ((_DWORD)v28)
            {
              if (v28 >> 29)
              {
LABEL_98:
                __break(0xC471u);
                JUMPOUT(0x1960113CCLL);
              }
              v29 = (WTF *)WTF::fastMalloc((WTF *)(8 * v28));
              v69 = v28;
              v68 = v29;
              v30 = *(unsigned int *)(v24 + 36);
              if ((_DWORD)v30)
              {
                v31 = *(uint64_t **)(v24 + 24);
                v32 = 8 * v30;
                do
                {
                  v33 = *v31++;
                  ++*(_DWORD *)(v33 + 16);
                  *(_QWORD *)v29 = v33;
                  v29 = (WTF *)((char *)v29 + 8);
                  v32 -= 8;
                }
                while (v32);
              }
            }
            LOBYTE(v71) = 0;
            v74 = 0;
            if (*(_BYTE *)(v24 + 80))
            {
              v34 = *(WTF::StringImpl **)(v24 + 40);
              if (v34)
                *(_DWORD *)v34 += 2;
              v71 = v34;
              v35 = *(_OWORD *)(v24 + 64);
              v72 = *(_OWORD *)(v24 + 48);
              v73 = v35;
              v74 = 1;
            }
            v36 = *(unsigned int *)(v24 + 100);
            v75 = 0;
            v76 = 0;
            v77 = v36;
            if (!(_DWORD)v36)
            {
LABEL_55:
              v78 = *(_BYTE *)(v24 + 104);
              v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 48);
              v45 = *a3;
              *a3 = 0;
              WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 24), v9);
              v46 = *(unsigned int **)(v9 + 24);
              if (v46)
              {
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 + 1, v46));
              }
              v48 = (objc_class *)WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v48 = &off_1E3400358;
              *((_QWORD *)v48 + 1) = v45;
              *((_QWORD *)v48 + 2) = v46;
              v79 = v48;
              (*(void (**)(_QWORD, WTF::StringImpl **, objc_class **))(**(_QWORD **)(v44 + 16) + 824))(*(_QWORD *)(v44 + 16), &v65, &v79);
              v50 = v79;
              v79 = 0;
              if (v50)
                (*(void (**)(objc_class *))(*(_QWORD *)v50 + 8))(v50);
              if (v77)
              {
                v51 = v75;
                v52 = 16 * v77;
                do
                {
                  WebCore::RawFile::~RawFile(v51, v49);
                  v51 = (WTF *)(v53 + 16);
                  v52 -= 16;
                }
                while (v52);
              }
              v54 = v75;
              if (v75)
              {
                v75 = 0;
                v76 = 0;
                WTF::fastFree(v54, v49);
              }
              if (v74)
              {
                v55 = v71;
                v71 = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v49);
                  else
                    *(_DWORD *)v55 -= 2;
                }
              }
              if (v70)
              {
                v56 = v68;
                v57 = 8 * v70;
                do
                {
                  v58 = *(_DWORD **)v56;
                  *(_QWORD *)v56 = 0;
                  if (v58)
                  {
                    if (v58[4] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
                    else
                      --v58[4];
                  }
                  v56 = (WTF *)((char *)v56 + 8);
                  v57 -= 8;
                }
                while (v57);
              }
              v59 = v68;
              if (v68)
              {
                v68 = 0;
                v69 = 0;
                WTF::fastFree(v59, v49);
              }
              v60 = v67;
              v67 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v49);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = v66;
              v66 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v49);
                else
                  *(_DWORD *)v61 -= 2;
              }
              result = (uint64_t)v65;
              v65 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v49);
                else
                  *(_DWORD *)result -= 2;
              }
              goto LABEL_87;
            }
            if (!(v36 >> 28))
            {
              v37 = (WTF *)WTF::fastMalloc((WTF *)(16 * v36));
              v76 = v36;
              v75 = v37;
              v38 = *(unsigned int *)(v24 + 100);
              if ((_DWORD)v38)
              {
                v39 = *(_DWORD ***)(v24 + 88);
                v40 = &v39[2 * v38];
                do
                {
                  v41 = *v39;
                  if (*v39)
                    *v41 += 2;
                  *(_QWORD *)v37 = v41;
                  v42 = v39[1];
                  if (v42)
                  {
                    do
                      v43 = __ldaxr(v42);
                    while (__stlxr(v43 + 1, v42));
                  }
                  *((_QWORD *)v37 + 1) = v42;
                  v37 = (WTF *)((char *)v37 + 16);
                  v39 += 2;
                }
                while (v39 != v40);
              }
              goto LABEL_55;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x19601137CLL);
        }
      }
    }
  }
  return result;
}

uint64_t std::optional<WebCore::PluginInfo>::value_or[abi:sn180100]<WebCore::PluginInfo>(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v3 = result;
  if (*(_BYTE *)(a2 + 56))
  {
    v5 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v5 += 2;
    *(_QWORD *)result = v5;
    v6 = *(_DWORD **)(a2 + 8);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(result + 8) = v6;
    v7 = *(_DWORD **)(a2 + 16);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(result + 16) = v7;
    result = WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result + 24, a2 + 24);
    *(_WORD *)(v3 + 40) = *(_WORD *)(a2 + 40);
    v8 = *(_DWORD **)(a2 + 48);
    if (v8)
      *v8 += 2;
  }
  else
  {
    v9 = *a3;
    v10 = a3[1];
    *a3 = 0u;
    a3[1] = 0u;
    *(_OWORD *)result = v9;
    *(_OWORD *)(result + 16) = v10;
    v11 = *((_QWORD *)a3 + 4);
    *((_QWORD *)a3 + 4) = 0;
    *(_QWORD *)(result + 32) = v11;
    *(_WORD *)(result + 40) = *((_WORD *)a3 + 20);
    v8 = (_DWORD *)*((_QWORD *)a3 + 6);
    *((_QWORD *)a3 + 6) = 0;
  }
  *(_QWORD *)(v3 + 48) = v8;
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(void **result, _DWORD **a2, unsigned int a3)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;

  if (a3)
  {
    v4 = result;
    v5 = a3;
    v7 = *((unsigned int *)result + 2);
    v6 = *((unsigned int *)result + 3);
    v8 = v6 + a3;
    if (v8 > v7
      && ((v9 = v7 + (v7 >> 2), v9 >= 0x10) ? (v10 = v9 + 1) : (v10 = 16),
          v10 <= v8 ? (v11 = v8) : (v11 = v10),
          result = WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, v11), v6 = *((unsigned int *)v4 + 3), v8 < v6))
    {
      __break(0xC471u);
    }
    else
    {
      v12 = (char *)*v4 + 8 * v6;
      v13 = 8 * v5;
      do
      {
        v14 = *a2++;
        ++*v14;
        *v12++ = v14;
        v13 -= 8;
      }
      while (v13);
      *((_DWORD *)v4 + 3) = v8;
    }
  }
  return result;
}

uint64_t WebCore::Navigator::plugins(WebCore::Navigator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  WebCore::Node *v10;
  void *v11;
  WebCore::Node *v12;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 72);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x1960115D4);
          }
          v6 = *(_QWORD *)(v5 + 240);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              if ((*(_QWORD *)(*(_QWORD *)(v7 + 136) + 704) & 0x4000) != 0)
              {
                {
                  WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
                }
                if (WebCore::sharedObserver(void)::observer)
                  v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
                else
                  v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
                v10 = *(WebCore::Node **)(v7 + 296);
                if (v10)
                {
                  *((_DWORD *)v10 + 6) += 2;
                  v12 = v10;
                  (*(void (**)(uint64_t *, WebCore::Node *, uint64_t))(*v9 + 64))(v9, v10, 4);
                  if (*((_DWORD *)v12 + 6) == 2)
                  {
                    if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v12, v11);
                  }
                  else
                  {
                    *((_DWORD *)v12 + 6) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v9 + 64))(v9, 0, 4);
                }
              }
            }
          }
        }
      }
    }
  }
  WebCore::Navigator::initializePluginAndMimeTypeArrays(this);
  return *((_QWORD *)this + 13);
}

uint64_t WebCore::Navigator::mimeTypes(WebCore::Navigator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  WebCore::Node *v10;
  void *v11;
  WebCore::Node *v12;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 72);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x196011718);
          }
          v6 = *(_QWORD *)(v5 + 240);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              if ((*(_QWORD *)(*(_QWORD *)(v7 + 136) + 704) & 0x4000) != 0)
              {
                {
                  WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
                }
                if (WebCore::sharedObserver(void)::observer)
                  v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
                else
                  v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
                v10 = *(WebCore::Node **)(v7 + 296);
                if (v10)
                {
                  *((_DWORD *)v10 + 6) += 2;
                  v12 = v10;
                  (*(void (**)(uint64_t *, WebCore::Node *, uint64_t))(*v9 + 64))(v9, v10, 8);
                  if (*((_DWORD *)v12 + 6) == 2)
                  {
                    if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v12, v11);
                  }
                  else
                  {
                    *((_DWORD *)v12 + 6) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v9 + 64))(v9, 0, 8);
                }
              }
            }
          }
        }
      }
    }
  }
  WebCore::Navigator::initializePluginAndMimeTypeArrays(this);
  return *((_QWORD *)this + 14);
}

_QWORD *WebCore::Navigator::cookieEnabled(WebCore::Navigator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v15;
  void *v16;

  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x196011968);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 0;
  v6 = *(_QWORD **)(v5 + 8);
  if (!v6)
    return v6;
  if ((*(_QWORD *)(v6[17] + 704) & 0x4000) != 0)
  {
    {
      WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
    }
    if (WebCore::sharedObserver(void)::observer)
      v7 = (uint64_t *)WebCore::sharedObserver(void)::observer;
    else
      v7 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
    v8 = v6[37];
    if (v8)
    {
      *(_DWORD *)(v8 + 24) += 2;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 64))(v7, v8, 16);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v7 + 64))(v7, 0, 16);
    }
  }
  v10 = v6[3];
  if (!v10)
    return 0;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return 0;
  ++*(_DWORD *)v11;
  if ((*(_QWORD *)(*(_QWORD *)(v11 + 112) + 664) & 0x800000000000000) != 0 && (v12 = v6[37]) != 0)
  {
    *(_DWORD *)(v12 + 24) += 2;
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 888) + 16))(*(_QWORD *)(v11 + 888), v12);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  else
  {
    v6 = 0;
  }
  if (*(_DWORD *)v11 == 1)
  {
    WebCore::Page::~Page(v11);
    WTF::fastFree(v15, v16);
  }
  else
  {
    --*(_DWORD *)v11;
  }
  return v6;
}

uint64_t WebCore::Navigator::gpu(WebCore::Navigator *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  void *v14;
  WebCore::GPU *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;

  result = *((_QWORD *)this + 17);
  if (!result)
  {
    v3 = *((_QWORD *)this + 8);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 72);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return 0;
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(v6 + 240);
    if (v7
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && (*(_QWORD *)(*(_QWORD *)(v8 + 136) + 704) & 0x1000000) != 0
      && (v9 = *(_QWORD *)(v8 + 24)) != 0
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && ((*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v10 + 48) + 32))(&v19), (v11 = v19) != 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v12 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v12 = 1;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_QWORD *)(v12 + 40) = v11;
      v13 = (_DWORD *)WTF::fastMalloc((WTF *)4);
      *v13 = 1;
      *(_QWORD *)(v12 + 48) = v13;
      v15 = (WebCore::GPU *)*((_QWORD *)this + 17);
      *((_QWORD *)this + 17) = v12;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::GPU::~GPU(v15, v14);
          WTF::fastFree(v17, v18);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
      v16 = v19;
      v19 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
      return *((_QWORD *)this + 17);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Navigator::setAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  WTF *v36;
  void *v37;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40[2];
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 72);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          if (*(_BYTE *)(v8 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x196011E10);
          }
          v9 = *(_QWORD *)(v8 + 240);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
            {
              v13 = (unsigned int *)(v10 + 8);
              do
                v14 = __ldaxr(v13);
              while (__stlxr(v14 + 1, v13));
              v15 = *(_QWORD *)(v10 + 24);
              if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0)
              {
                v31 = *a4;
                v40[0] = 0;
                WebCore::DeferredPromise::reject(v31, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v40, 0);
                result = v40[0];
                v40[0] = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
                  else
                    *(_DWORD *)result -= 2;
                }
                goto LABEL_41;
              }
              ++*(_DWORD *)v16;
              v17 = *(_QWORD *)(v10 + 296);
              if (v17)
              {
                *(_DWORD *)(v17 + 24) += 2;
                if ((WebCore::Document::isFullyActive((WebCore::Document *)v17) & 1) == 0)
                {
                  v33 = *a4;
                  v40[0] = 0;
                  WebCore::DeferredPromise::reject(v33, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v40, 0);
                  result = v40[0];
                  v40[0] = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
                    else
                      *(_DWORD *)result -= 2;
                  }
LABEL_37:
                  if (*(_DWORD *)(v17 + 24) == 2)
                  {
                    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v17, v24);
                  }
                  else
                  {
                    *(_DWORD *)(v17 + 24) -= 2;
                  }
LABEL_39:
                  if (*(_DWORD *)v16 == 1)
                  {
                    WebCore::Page::~Page(v16);
                    result = (WTF::StringImpl *)WTF::fastFree(v36, v37);
                  }
                  else
                  {
                    --*(_DWORD *)v16;
                  }
                  do
                  {
LABEL_41:
                    v34 = __ldaxr(v13);
                    v35 = v34 - 1;
                  }
                  while (__stlxr(v35, v13));
                  if (!v35)
                  {
                    atomic_store(1u, v13);
                    v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v38 = off_1E31FE290;
                    *((_QWORD *)v38 + 1) = v13;
                    v40[0] = v38;
                    WTF::ensureOnMainThread();
                    result = v40[0];
                    v40[0] = 0;
                    if (result)
                      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
                  }
                  return result;
                }
                v19 = *(_QWORD *)(v10 + 296);
                v20 = *(_QWORD *)(v16 + 1816);
                if (v19)
                {
                  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v19 + 192), v18);
                  LOBYTE(v40[0]) = 0;
                  DWORD2(v41) = -1;
                  v22 = *(unsigned int *)(v21 + 32);
                  if ((_DWORD)v22 != -1)
                  {
                    ((void (*)(char *, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_7[v22])(&v39, v40, v21 + 8);
                    DWORD2(v41) = v22;
                  }
LABEL_17:
                  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v16, v40, a2, a3);
                  if (DWORD2(v41) != -1)
                    result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E3400230[DWORD2(v41)])(&v39, v40);
                  v25 = *a4;
                  v26 = *(_QWORD *)(v25 + 24);
                  if (v26 && *(_QWORD *)v26 && (*(_BYTE *)(v26 + 8) & 3) == 0)
                  {
                    v27 = *(_QWORD *)(v25 + 32);
                    if (!v27 || (*(_BYTE *)(v27 + 8) & 3) != 0)
                      v28 = 0;
                    else
                      v28 = *(uint64_t **)v27;
                    JSC::JSLockHolder::JSLockHolder();
                    WebCore::DeferredPromise::callFunction(v25, v28, 0, (objc_class *)0xA);
                    result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v40);
                  }
                  if (!v17)
                    goto LABEL_39;
                  goto LABEL_37;
                }
              }
              else
              {
                v20 = *(_QWORD *)(v16 + 1816);
              }
              *(_OWORD *)v40 = 0u;
              v41 = 0u;
              goto LABEL_17;
            }
          }
        }
      }
    }
  }
  v29 = *a4;
  v40[0] = 0;
  WebCore::DeferredPromise::reject(v29, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v40, 0);
  result = v40[0];
  v40[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::Navigator::setClientBadge(_QWORD *result, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = result[8];
  if (!v5)
    goto LABEL_30;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_30;
  v7 = *(_QWORD *)(v6 + 72);
  if (!v7)
    goto LABEL_30;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_30;
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x196012170);
  }
  v9 = *(_QWORD *)(v8 + 240);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    v13 = (unsigned int *)(v10 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = *(_QWORD *)(v10 + 24);
    if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
    {
      ++*(_DWORD *)v16;
      v17 = *(_QWORD *)(v16 + 1816);
      v18 = *(_QWORD *)(v10 + 296);
      if (v18)
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v18 + 192), a2);
        LOBYTE(v37) = 0;
        DWORD2(v38) = -1;
        v20 = *(unsigned int *)(v19 + 32);
        if ((_DWORD)v20 != -1)
        {
          ((void (*)(char *, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_7[v20])(&v36, &v37, v19 + 8);
          DWORD2(v38) = v20;
        }
      }
      else
      {
        v37 = 0u;
        v38 = 0u;
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, WTF::StringImpl *, uint64_t))(*(_QWORD *)v17 + 24))(v17, v16, &v37, a2, a3);
      if (DWORD2(v38) != -1)
        result = (_QWORD *)((uint64_t (*)(char *, __int128 *))off_1E3400230[DWORD2(v38)])(&v36, &v37);
      v21 = *a4;
      v22 = *(_QWORD *)(v21 + 24);
      if (v22 && *(_QWORD *)v22 && (*(_BYTE *)(v22 + 8) & 3) == 0)
      {
        v23 = *(_QWORD *)(v21 + 32);
        if (!v23 || (*(_BYTE *)(v23 + 8) & 3) != 0)
          v24 = 0;
        else
          v24 = *(uint64_t **)v23;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v21, v24, 0, (objc_class *)0xA);
        result = (_QWORD *)MEMORY[0x19AEA32A0](&v37);
      }
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::Page::~Page(v16);
        result = (_QWORD *)WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
    else
    {
      v33 = *a4;
      v34 = *(_QWORD *)(*a4 + 24);
      if (v34 && *(_QWORD *)v34 && (*(_BYTE *)(v34 + 8) & 3) == 0)
      {
        v35 = **(uint64_t ***)(v33 + 32);
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v33, v35, 1, (objc_class *)0xA);
        result = (_QWORD *)MEMORY[0x19AEA32A0](&v37);
      }
    }
    do
    {
      v25 = __ldaxr(v13);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v13));
    if (!v26)
    {
      atomic_store(1u, v13);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = off_1E31FE290;
      v27[1] = v13;
      *(_QWORD *)&v37 = v27;
      WTF::ensureOnMainThread();
      result = (_QWORD *)v37;
      *(_QWORD *)&v37 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  else
  {
LABEL_30:
    v28 = *a4;
    v29 = *(_QWORD *)(*a4 + 24);
    if (v29 && *(_QWORD *)v29 && (*(_BYTE *)(v29 + 8) & 3) == 0)
    {
      v30 = **(uint64_t ***)(v28 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v28, v30, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v37);
    }
  }
  return result;
}

uint64_t WebCore::Navigator::subscribeToPushService(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t result;
  WTF::StringImpl *v22[5];
  WTF::StringImpl *v23;

  v6 = WebCore::s_platformStrategies;
  v7 = *(_QWORD *)(WebCore::s_platformStrategies + 48);
  if (!v7)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 48))(WebCore::s_platformStrategies);
    *(_QWORD *)(v6 + 48) = v7;
  }
  v8 = *(_QWORD *)(a1 + 64);
  if (!v8)
    goto LABEL_14;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_14;
  v10 = *(_QWORD *)(v9 + 72);
  if (!v10)
    goto LABEL_14;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_14;
  if (*(_BYTE *)(v11 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v12 = *(_QWORD *)(v11 + 240);
  if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0 && (v14 = *(_QWORD *)(v13 + 296)) != 0)
  {
    WTF::URL::protocolHostAndPort((WTF::URL *)(v14 + 736));
    MEMORY[0x19AEA52D4](v22, &v23, 0);
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
LABEL_14:
    v22[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v22);
  }
  ++*(_DWORD *)(a1 + 16);
  v17 = *a3;
  *a3 = 0;
  v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v18 = &off_1E3400380;
  *((_QWORD *)v18 + 1) = a1;
  *((_QWORD *)v18 + 2) = v17;
  v23 = v18;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, v22, a2, &v23);
  v20 = v23;
  v23 = 0;
  if (v20)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
  result = (uint64_t)v22[0];
  v22[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Navigator::subscribeToPushService(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::Navigator::subscribeToPushService(a1 - 80, a2, a3);
}

uint64_t WebCore::Navigator::unsubscribeFromPushService(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t result;
  WTF::StringImpl *v22[5];
  WTF::StringImpl *v23;

  v6 = WebCore::s_platformStrategies;
  v7 = *(_QWORD *)(WebCore::s_platformStrategies + 48);
  if (!v7)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 48))(WebCore::s_platformStrategies);
    *(_QWORD *)(v6 + 48) = v7;
  }
  v8 = *(_QWORD *)(a1 + 64);
  if (!v8)
    goto LABEL_14;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_14;
  v10 = *(_QWORD *)(v9 + 72);
  if (!v10)
    goto LABEL_14;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_14;
  if (*(_BYTE *)(v11 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v12 = *(_QWORD *)(v11 + 240);
  if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0 && (v14 = *(_QWORD *)(v13 + 296)) != 0)
  {
    WTF::URL::protocolHostAndPort((WTF::URL *)(v14 + 736));
    MEMORY[0x19AEA52D4](v22, &v23, 0);
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
LABEL_14:
    v22[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v22);
  }
  v17 = *a3;
  *a3 = 0;
  v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v18 = &off_1E34003A8;
  *((_QWORD *)v18 + 1) = v17;
  v23 = v18;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 24))(v7, v22, a2, &v23);
  v20 = v23;
  v23 = 0;
  if (v20)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
  result = (uint64_t)v22[0];
  v22[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Navigator::unsubscribeFromPushService(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::Navigator::unsubscribeFromPushService(a1 - 80, a2, a3);
}

uint64_t WebCore::Navigator::getPushSubscription(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t result;
  WTF::StringImpl *v20[5];
  WTF::StringImpl *v21;

  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 48);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 48))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 48) = v5;
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    goto LABEL_14;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_14;
  v8 = *(_QWORD *)(v7 + 72);
  if (!v8)
    goto LABEL_14;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_14;
  if (*(_BYTE *)(v9 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v10 = *(_QWORD *)(v9 + 240);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && (v12 = *(_QWORD *)(v11 + 296)) != 0)
  {
    WTF::URL::protocolHostAndPort((WTF::URL *)(v12 + 736));
    MEMORY[0x19AEA52D4](v20, &v21, 0);
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
LABEL_14:
    v20[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v20);
  }
  ++*(_DWORD *)(a1 + 16);
  v15 = *a2;
  *a2 = 0;
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v16 = &off_1E34003D0;
  *((_QWORD *)v16 + 1) = a1;
  *((_QWORD *)v16 + 2) = v15;
  v21 = v16;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v5 + 32))(v5, v20, &v21);
  v18 = v21;
  v21 = 0;
  if (v18)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
  result = (uint64_t)v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Navigator::getPushSubscription(uint64_t a1, uint64_t *a2)
{
  return WebCore::Navigator::getPushSubscription(a1 - 80, a2);
}

uint64_t WebCore::Navigator::getPushPermissionState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t result;
  WTF::StringImpl *v20[5];
  WTF::StringImpl *v21;

  v4 = WebCore::s_platformStrategies;
  v5 = *(_QWORD *)(WebCore::s_platformStrategies + 48);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 48))(WebCore::s_platformStrategies);
    *(_QWORD *)(v4 + 48) = v5;
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    goto LABEL_14;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_14;
  v8 = *(_QWORD *)(v7 + 72);
  if (!v8)
    goto LABEL_14;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_14;
  if (*(_BYTE *)(v9 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v10 = *(_QWORD *)(v9 + 240);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && (v12 = *(_QWORD *)(v11 + 296)) != 0)
  {
    WTF::URL::protocolHostAndPort((WTF::URL *)(v12 + 736));
    MEMORY[0x19AEA52D4](v20, &v21, 0);
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
LABEL_14:
    v20[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v20);
  }
  v15 = *a2;
  *a2 = 0;
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v16 = &off_1E34003F8;
  *((_QWORD *)v16 + 1) = v15;
  v21 = v16;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v5 + 40))(v5, v20, &v21);
  v18 = v21;
  v21 = 0;
  if (v18)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
  result = (uint64_t)v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Navigator::getPushPermissionState(uint64_t a1, uint64_t *a2)
{
  return WebCore::Navigator::getPushPermissionState(a1 - 80, a2);
}

uint64_t WebCore::NavigatorBase::vendor(WebCore::NavigatorBase *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::NavigatorBase::serviceWorker(WebCore::NavigatorBase *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  WebCore::ServiceWorkerContainer *v8;
  bmalloc::api *v9;
  void *v10;
  int v11;
  uint64_t v12;

  result = *((_QWORD *)this + 6);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    {
      v5 = v4 - 96;
      v6 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v6 == 1 || v6 == 2)
          ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        *(_DWORD *)(v4 - 264) += 2;
      }
    }
    else
    {
      v5 = 0;
    }
    WebCore::ServiceWorkerContainer::create((WebCore::ServiceWorkerContainer *)v5, this, &v12);
    v8 = (WebCore::ServiceWorkerContainer *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v12;
    if (v8)
    {
      WebCore::ServiceWorkerContainer::~ServiceWorkerContainer(v8, v7);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    if (v5)
    {
      v11 = *(unsigned __int8 *)(v5 + 274);
      if (*(_BYTE *)(v5 + 274))
      {
        if (v11 == 1)
        {
          if (*(_DWORD *)(v5 + 312) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
          else
            --*(_DWORD *)(v5 + 312);
        }
        else if (v11 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
        }
      }
      else if (*(_DWORD *)(v5 - 168) == 2)
      {
        if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), v7);
      }
      else
      {
        *(_DWORD *)(v5 - 168) -= 2;
      }
    }
    return *((_QWORD *)this + 6);
  }
  return result;
}

uint64_t WebCore::NavigatorBase::hardwareConcurrency(WebCore::NavigatorBase *this)
{
  char v2;

  std::call_once[abi:sn180100]<WebCore::NavigatorBase::hardwareConcurrency(void)::$_0>((uint64_t)&v2);
  return WebCore::NavigatorBase::hardwareConcurrency(void)::numberOfCores;
}

void std::call_once[abi:sn180100]<WebCore::NavigatorBase::hardwareConcurrency(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::NavigatorBase::hardwareConcurrency(void)::once);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::NavigatorBase::hardwareConcurrency(void)::once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::NavigatorBase::hardwareConcurrency(void)::$_0 &&>>);
  }
}

_QWORD *WebCore::NavigatorLoginStatus::setLoggedIn(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE v13[8];

  result = WebCore::Navigator::cookieEnabled(*(WebCore::Navigator **)(a1 + 8));
  v4 = *a2;
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 && *(_QWORD *)v5 && (*(_BYTE *)(v5 + 8) & 3) == 0)
    {
      v6 = *(_QWORD *)(v4 + 32);
      if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
        v7 = 0;
      else
        v7 = *(uint64_t **)v6;
      JSC::JSLockHolder::JSLockHolder();
      v8 = v4;
      v9 = v7;
      v10 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v11 = *(_QWORD *)(v4 + 24);
    if (v11 && *(_QWORD *)v11 && (*(_BYTE *)(v11 + 8) & 3) == 0)
    {
      v12 = **(uint64_t ***)(v4 + 32);
      JSC::JSLockHolder::JSLockHolder();
      v8 = v4;
      v9 = v12;
      v10 = 1;
LABEL_13:
      WebCore::DeferredPromise::callFunction(v8, v9, v10, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](v13);
    }
  }
  return result;
}

const char **WebCore::NavigatorLoginStatus::setLoggedOut(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  const char **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 *v11[2];

  v4 = (uint64_t *)(a1 + 72);
  v11[0] = "NavigatorLoginStatus";
  v11[1] = (unsigned __int8 *)21;
  result = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 72), v11);
  if (!result || !result[2])
  {
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E3400250;
    *(_QWORD *)(v6 + 8) = a1;
    v11[0] = (unsigned __int8 *)v6;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v4, "NavigatorLoginStatus", (unsigned __int8 *)0x15, (const char **)v11);
    result = (const char **)v11[0];
    v11[0] = 0;
    if (result)
      result = (const char **)(*((uint64_t (**)(const char **))*result + 1))(result);
  }
  v7 = *a2;
  v8 = *(_QWORD *)(v7 + 24);
  if (v8 && *(_QWORD *)v8 && (*(_BYTE *)(v8 + 8) & 3) == 0)
  {
    v9 = *(_QWORD *)(v7 + 32);
    if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
      v10 = 0;
    else
      v10 = *(uint64_t **)v9;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v7, v10, 0, (objc_class *)0xA);
    return (const char **)MEMORY[0x19AEA32A0](v11);
  }
  return result;
}

uint64_t WebCore::NavigatorLoginStatus::isLoggedIn(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  const char **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v10[2];

  v4 = (uint64_t *)(a1 + 72);
  v10[0] = "NavigatorLoginStatus";
  v10[1] = (unsigned __int8 *)21;
  v5 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 72), v10);
  if (!v5 || (v6 = (uint64_t)v5[2]) == 0)
  {
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E3400250;
    *(_QWORD *)(v6 + 8) = a1;
    v10[0] = (unsigned __int8 *)v6;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v4, "NavigatorLoginStatus", (unsigned __int8 *)0x15, (const char **)v10);
    v7 = v10[0];
    v10[0] = 0;
    if (v7)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = WebCore::Navigator::cookieEnabled(*(WebCore::Navigator **)(v6 + 8));
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*a2, v8);
}

void WebCore::OpportunisticTaskScheduler::~OpportunisticTaskScheduler(WebCore::OpportunisticTaskScheduler *this, void *a2)
{
  WTF *v3;
  __CFRunLoopObserver *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = (__CFRunLoopObserver *)*((_QWORD *)v3 + 2);
    if (v4 && (CFRunLoopObserverInvalidate(v4), v5 = (const void *)*((_QWORD *)v3 + 2), *((_QWORD *)v3 + 2) = 0, v5))
    {
      CFRelease(v5);
      v6 = (const void *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v6)
        CFRelease(v6);
    }
    else
    {
      *((_QWORD *)v3 + 2) = 0;
    }
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    WTF::fastFree(v3, a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::ImminentlyScheduledWorkScope::~ImminentlyScheduledWorkScope(WebCore::ImminentlyScheduledWorkScope *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      --*(_QWORD *)(v4 + 24);
    *((_QWORD *)this + 1) = 0;
    do
    {
      v5 = __ldaxr((unsigned int *)v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v3));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::NavigationHistoryEntry::~NavigationHistoryEntry(WebCore::NavigationHistoryEntry *this, WTF::StringImpl *a2)
{
  WebCore::HistoryItem *v3;
  void *v4;
  WTF *v5;
  void *v6;

  v3 = (WebCore::HistoryItem *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::NavigationHistoryEntry *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v4);
}

{
  WebCore::HistoryItem *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;
  WTF *v7;
  void *v8;

  v3 = (WebCore::HistoryItem *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::NavigationHistoryEntry *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v4);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebCore::NavigationHistoryEntry::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::NavigationHistoryEntry::derefEventTarget(uint64_t this, WTF::StringImpl *a2)
{
  _QWORD *v2;
  WebCore::HistoryItem *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;
  WTF *v7;
  void *v8;

  v2 = (_QWORD *)this;
  if (*(_DWORD *)(this + 24) == 1)
  {
    v3 = *(WebCore::HistoryItem **)(this + 64);
    v2[8] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v3, a2);
        WTF::fastFree(v7, v8);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v2 + 4), a2);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v2, v4);
    return bmalloc::api::isoDeallocate(v5, v6);
  }
  else
  {
    --*(_DWORD *)(this + 24);
  }
  return this;
}

void `non-virtual thunk to'WebCore::NavigationHistoryEntry::~NavigationHistoryEntry(WebCore::NavigationHistoryEntry *this, WTF::StringImpl *a2)
{
  WebCore::HistoryItem *v3;
  void *v4;
  WTF *v5;
  void *v6;

  v3 = (WebCore::HistoryItem *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WebCore::EventTarget::~EventTarget((WebCore::NavigationHistoryEntry *)((char *)this - 32), v4);
}

{
  WebCore::HistoryItem *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;
  WTF *v7;
  void *v8;

  v3 = (WebCore::HistoryItem *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v3, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WebCore::EventTarget::~EventTarget((WebCore::NavigationHistoryEntry *)((char *)this - 32), v4);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebCore::Navigator::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

_DWORD *WebCore::Navigator::deref(_DWORD *this)
{
  if (this[4] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[4];
  return this;
}

uint64_t WebCore::Navigator::isActive(WebCore::Navigator *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::Navigator::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 64);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Navigator::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 64) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 80) + 16))(this - 80);
  --*(_DWORD *)(this - 64);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Navigator::isActive(WebCore::Navigator *this)
{
  return 1;
}

void WebCore::NavigationCurrentEntryChangeEvent::~NavigationCurrentEntryChangeEvent(WebCore::NavigationCurrentEntryChangeEvent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::HistoryItem *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;
  WTF *v8;
  void *v9;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 1)
    {
      v4 = *(WebCore::HistoryItem **)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v4, a2);
          WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
      WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v3 + 32), a2);
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v3, v5);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*(_DWORD *)(v3 + 24);
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;
  WebCore::HistoryItem *v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;
  WTF *v10;
  void *v11;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 1)
    {
      v6 = *(WebCore::HistoryItem **)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v6, a2);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)(v3 + 32), a2);
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v3, v7);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)(v3 + 24);
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore22ShareDataWithParsedURLENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::RawFile::~RawFile(WebCore::RawFile *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v3 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v9;
              v17 = v8;
              v18 = (WTF *)v10;
              v19 = v3;
              atomic_store(1u, v10);
              v13 = v10[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))off_1E3400210[v13])(&v21, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v3 = v19;
              v9 = v16;
              v8 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v14 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v14 && v14 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v20 = v3;
        WTF::fastFree(v14, a2);
        v3 = v20;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

_QWORD *std::make_unique[abi:sn180100]<WebCore::RunLoopObserver,WebCore::RunLoopObserver::WellKnownOrder,WebCore::OpportunisticTaskScheduler::OpportunisticTaskScheduler(WebCore::Page &)::$_0,WebCore::RunLoopObserver::Type>(uint64_t *a1, _BYTE *a2, uint64_t *a3, char *a4)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  char v11;

  v8 = WTF::fastMalloc((WTF *)0x18);
  LOBYTE(a2) = *a2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v10 = *a3;
  *a3 = 0;
  *result = &off_1E3400270;
  result[1] = v10;
  v11 = *a4;
  *(_QWORD *)v8 = result;
  *(_BYTE *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 9) = (_BYTE)a2;
  *(_QWORD *)(v8 + 16) = 0;
  *a1 = v8;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::OpportunisticTaskScheduler::OpportunisticTaskScheduler(WebCore::Page &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3400270;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OpportunisticTaskScheduler::OpportunisticTaskScheduler(WebCore::Page &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3400270;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::OpportunisticTaskScheduler::OpportunisticTaskScheduler(WebCore::Page &)::$_0,void>::call(WTF::ApproximateTime *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  __CFRunLoopObserver *v19;
  const void *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *((_QWORD *)a1 + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(double *)(v2 + 40) != 0.0 && (webThreadStarted & 1) == 0)
      {
        v3 = *(_QWORD *)(v2 + 16);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            ++*(_DWORD *)v4;
            if (*(_BYTE *)(v4 + 1776))
              goto LABEL_30;
            if ((~*(unsigned __int16 *)(v4 + 658) & 5) != 0)
              goto LABEL_30;
            WTF::ApproximateTime::now(a1);
            v6 = *(double *)(v2 + 40) - v5;
            if (v6 < 0.0)
              goto LABEL_30;
            v7 = *(_QWORD *)(v2 + 24);
            v8 = *(_QWORD *)(v2 + 32) + 1;
            *(_QWORD *)(v2 + 32) = v8;
            if (v7)
            {
              if (v6 <= WebCore::preferredFrameInterval(*(_BYTE *)(v4 + 1168), *(_QWORD *)(v4 + 316), (*(_QWORD *)(*(_QWORD *)(v4 + 112) + 688) >> 31) & 1)* 0.72&& v8 <= 4)
              {
                v18 = *(_QWORD *)(v2 + 48);
                v19 = *(__CFRunLoopObserver **)(v18 + 16);
                if (v19)
                {
                  CFRunLoopObserverInvalidate(v19);
                  v20 = *(const void **)(v18 + 16);
                  *(_QWORD *)(v18 + 16) = 0;
                  if (v20)
                    CFRelease(v20);
                }
                WebCore::RunLoopObserver::schedule(*(_QWORD *)(v2 + 48), 0, 5);
                goto LABEL_30;
              }
            }
            kdebug_trace();
            *(_QWORD *)(v2 + 40) = 0;
            v10 = *(unsigned __int8 *)(v2 + 56);
            *(_BYTE *)(v2 + 56) = 0;
            if (!v10)
              goto LABEL_23;
            v11 = *(_QWORD *)(v2 + 16);
            if (v11)
            {
              do
                v12 = __ldaxr((unsigned int *)v11);
              while (__stlxr(v12 + 1, (unsigned int *)v11));
              v13 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v13 = off_1E34014C0;
              v24 = v13;
              WebCore::Page::forEachWindowEventLoop(v4, (WTF::StringImpl *)&v24);
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
              v15 = *(_QWORD *)(v11 + 8);
              do
              {
                v16 = __ldaxr((unsigned int *)v11);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, (unsigned int *)v11));
              if (v17)
              {
                if (v15)
                  goto LABEL_23;
              }
              else
              {
                atomic_store(1u, (unsigned int *)v11);
                WTF::fastFree((WTF *)v11, v14);
                if (v15)
                {
LABEL_23:
                  if ((*(_QWORD *)(*(_QWORD *)(v4 + 112) + 688) & 0x200000) != 0)
                    WebCore::Page::performOpportunisticallyScheduledTasks((WTF::RunLoop *)v4);
                }
              }
            }
            else
            {
              v23 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v23 = off_1E34014C0;
              v24 = v23;
              WebCore::Page::forEachWindowEventLoop(v4, (WTF::StringImpl *)&v24);
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            }
            kdebug_trace();
LABEL_30:
            if (*(_DWORD *)v4 == 1)
            {
              WebCore::Page::~Page(v4);
              WTF::fastFree(v21, v22);
            }
            else
            {
              --*(_DWORD *)v4;
            }
          }
        }
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Navigator::share(WebCore::Document &,WebCore::ShareData const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E34002E8;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::share(WebCore::Document &,WebCore::ShareData const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E34002E8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::share(WebCore::Document &,WebCore::ShareData const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[16];
  int v7;
  char v8[16];
  int v9;
  char v10;

  v6[0] = 0;
  v7 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v8[0] = 0;
    v9 = -1;
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E3400310[v3])(v8, v6, a2);
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    v8[0] = 0;
    v9 = -1;
    ((void (*)(char *, char *, _BYTE *))off_1E3400300[v3])(&v10, v8, v6);
    v9 = v3;
  }
  result = WebCore::Navigator::showShareData(v4, v8, (uint64_t *)(a1 + 16));
  if (v9 != -1)
    result = ((uint64_t (*)(char *, char *))off_1E3400200[v9])(&v10, v8);
  if (v7 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3400200[v7])(v8, v6);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN7WebCore22ShareDataWithParsedURLENS8_9ExceptionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN7WebCore22ShareDataWithParsedURLENS8_9ExceptionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_DWORD **)(a3 + 8);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(a2 + 8) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN7WebCore22ShareDataWithParsedURLENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN7WebCore22ShareDataWithParsedURLENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Navigator::showShareData(WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E3400330;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::showShareData(WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E3400330;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::showShareData(WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _BYTE v7[8];

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      *(_BYTE *)(v2 + 96) = 0;
  }
  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_QWORD *)v4 && (*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)(v3 + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v3, v6, 0, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v7);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Navigator::showShareData(WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E3400358;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::showShareData(WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E3400358;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::showShareData(WebCore::ExceptionOr<WebCore::ShareDataWithParsedURL &>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned __int8 v11[8];
  WTF::StringImpl *v12;
  objc_class *v13;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      *(_BYTE *)(v3 + 96) = 0;
  }
  v4 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 && *(_QWORD *)v5 && (*(_BYTE *)(v5 + 8) & 3) == 0)
    {
      v6 = *(_QWORD *)(v4 + 32);
      if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
        v7 = 0;
      else
        v7 = *(uint64_t **)v6;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v4, v7, 0, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v11);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 0;
    v11[0] = 16;
    if (v10)
      *(_DWORD *)v10 += 2;
    v12 = v10;
    WebCore::DeferredPromise::reject(v4, v11, 0, &v13);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = (uint64_t)v10;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        return WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
        WTF::RefCounted<WebCore::DOMPlugin>::deref((_DWORD *)(v8 + 8));
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::DOMMimeType **v4;
  uint64_t v5;
  WebCore::DOMMimeType *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::DOMMimeType ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebCore::DOMMimeType>::deref(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Navigator::subscribeToPushService(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E3400380;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::subscribeToPushService(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3400380;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Navigator::subscribeToPushService(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::PushSubscription>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&>::call(uint64_t a1, uint64_t *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  bmalloc::api *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25[2];
  objc_class *v26;

  v3 = *((_DWORD *)a2 + 20);
  if (!v3)
  {
    v10 = *a2;
    v11 = a2[1];
    a2[1] = 0;
    *(_OWORD *)v25 = *((_OWORD *)a2 + 1);
    v12 = a2[4];
    a2[4] = 0;
    v13 = a2[5];
    a2[5] = 0;
    v14 = a2[6];
    a2[6] = 0;
    v15 = a2[7];
    a2[7] = 0;
    v16 = a2[8];
    a2[8] = 0;
    v17 = a2[9];
    a2[9] = 0;
    v18 = *(_QWORD *)(a1 + 8);
    v5 = bmalloc::api::isoAllocate();
    if (v18)
      v19 = v18 + 80;
    else
      v19 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 80) + 16))(v18 + 80);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v10;
    *(_QWORD *)(v5 + 16) = v11;
    *(_OWORD *)(v5 + 24) = *(_OWORD *)v25;
    *(_QWORD *)(v5 + 40) = v12;
    *(_QWORD *)(v5 + 48) = v13;
    *(_QWORD *)(v5 + 56) = v14;
    *(_QWORD *)(v5 + 64) = v15;
    *(_QWORD *)(v5 + 72) = v16;
    *(_QWORD *)(v5 + 80) = v17;
    *(_QWORD *)(v5 + 88) = v19;
    *(_QWORD *)(v5 + 96) = 0;
    result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PushSubscription>>(*(_QWORD *)(a1 + 16), v5);
    v9 = *(_DWORD *)v5 - 1;
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::PushSubscription::~PushSubscription((WebCore::PushSubscription *)v5, v20);
      return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v21, v22);
    }
    goto LABEL_17;
  }
  if (v3 != 1)
  {
    v23 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PushSubscription>>(v23, v24);
  }
  v4 = *(_BYTE *)a2;
  v5 = a2[1];
  a2[1] = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v26 = 0;
  LOBYTE(v25[0]) = v4;
  if (v5)
    *(_DWORD *)v5 += 2;
  v25[1] = (WTF::StringImpl *)v5;
  WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)v25, 0, &v26);
  result = v25[1];
  v25[1] = 0;
  if (!result)
    goto LABEL_8;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_8:
    if (!v5)
      return result;
    goto LABEL_9;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (v5)
  {
LABEL_9:
    v9 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v7);
LABEL_17:
    *(_DWORD *)v5 = v9;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::PushSubscription>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::PushSubscription>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Navigator::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34003A8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34003A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Navigator::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,WebCore::ExceptionOr<BOOL> &&>::call(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  _QWORD *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  objc_class *v11;

  v2 = *((_DWORD *)a2 + 4);
  if (!v2)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), *a2);
  if (v2 != 1)
  {
    v8 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::Navigator::getPushSubscription(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&>::~CallableWrapper(v8);
  }
  v3 = *a2;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v11 = 0;
  v9[0] = v3;
  if (v4)
    *(_DWORD *)v4 += 2;
  v10 = v4;
  WebCore::DeferredPromise::reject(v5, v9, 0, &v11);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      if (!v4)
        return result;
      goto LABEL_9;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v4)
    return result;
LABEL_9:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
  *(_DWORD *)v4 -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Navigator::getPushSubscription(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E34003D0;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::getPushSubscription(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34003D0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Navigator::getPushSubscription(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  bmalloc::api *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25[2];
  objc_class *v26;

  v3 = *(_DWORD *)(a2 + 96);
  if (!v3)
  {
    if (!*(_BYTE *)(a2 + 88))
      return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>>(*(_QWORD *)(a1 + 16), 0);
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)v25 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    v13 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    v14 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    v15 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    v16 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    v17 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    v18 = *(_QWORD *)(a1 + 8);
    v5 = bmalloc::api::isoAllocate();
    if (v18)
      v19 = v18 + 80;
    else
      v19 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 80) + 16))(v18 + 80);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v10;
    *(_QWORD *)(v5 + 16) = v11;
    *(_OWORD *)(v5 + 24) = *(_OWORD *)v25;
    *(_QWORD *)(v5 + 40) = v12;
    *(_QWORD *)(v5 + 48) = v13;
    *(_QWORD *)(v5 + 56) = v14;
    *(_QWORD *)(v5 + 64) = v15;
    *(_QWORD *)(v5 + 72) = v16;
    *(_QWORD *)(v5 + 80) = v17;
    *(_QWORD *)(v5 + 88) = v19;
    *(_QWORD *)(v5 + 96) = 0;
    result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>>(*(_QWORD *)(a1 + 16), v5);
    v9 = *(_DWORD *)v5 - 1;
    if (*(_DWORD *)v5 != 1)
    {
LABEL_18:
      *(_DWORD *)v5 = v9;
      return result;
    }
    WebCore::PushSubscription::~PushSubscription((WebCore::PushSubscription *)v5, v20);
    return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v21, v22);
  }
  if (v3 != 1)
  {
    v23 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>>(v23, v24);
  }
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v26 = 0;
  LOBYTE(v25[0]) = v4;
  if (v5)
    *(_DWORD *)v5 += 2;
  v25[1] = (WTF::StringImpl *)v5;
  WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)v25, 0, &v26);
  result = v25[1];
  v25[1] = 0;
  if (!result)
    goto LABEL_8;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_8:
    if (v5)
      goto LABEL_9;
    return result;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (v5)
  {
LABEL_9:
    v9 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v7);
    goto LABEL_18;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::PushSubscription>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  int v17;
  _BYTE v18[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v18, v7);
    v8 = *(_QWORD *)(v4 + 32);
    if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    {
      v9 = 0;
      if (a2)
        goto LABEL_10;
    }
    else
    {
      v9 = *(_QWORD *)v8;
      if (a2)
      {
LABEL_10:
        v10 = WebCore::wrap<WebCore::PushSubscription>((uint64_t)v6, v9, a2);
LABEL_14:
        v11 = *(_QWORD *)(v7 + 16);
        if (!v11)
        {
          WebCore::DeferredPromise::callFunction(v4, v6, 0, (objc_class *)v10);
          v11 = *(_QWORD *)(v7 + 16);
          if (!v11)
            return MEMORY[0x19AEA32A0](v18);
        }
        v12 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
        if (!(*(unsigned int (**)(_QWORD *))(*v12 + 64))(v12))
        {
LABEL_19:
          WebCore::reportException((JSC::JSGlobalObject *)v6, v11, 0, 0, 0);
          return MEMORY[0x19AEA32A0](v18);
        }
        v13 = v12[43];
        if (*(_QWORD *)(v7 + 24) == v11)
        {
LABEL_32:
          *(_BYTE *)(*(_QWORD *)(v13 + 8) + 93442) = 1;
          *(_BYTE *)(v4 + 44) = 1;
          goto LABEL_19;
        }
        if (!v13)
          goto LABEL_19;
        v14 = (unsigned __int8 *)(v13 + 40);
        if (__ldaxr((unsigned __int8 *)(v13 + 40)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v14))
        {
          goto LABEL_26;
        }
        MEMORY[0x19AEA534C](v13 + 40);
LABEL_26:
        v16 = *(unsigned __int8 *)(v13 + 41);
        v17 = __ldxr(v14);
        if (v17 == 1)
        {
          if (!__stlxr(0, v14))
          {
LABEL_31:
            if (!v16)
              goto LABEL_19;
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v13 + 40));
        goto LABEL_31;
      }
    }
    v10 = 2;
    goto LABEL_14;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Navigator::getPushPermissionState(WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::PushPermissionState>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::PushPermissionState> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34003F8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Navigator::getPushPermissionState(WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::PushPermissionState>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::PushPermissionState> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34003F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Navigator::getPushPermissionState(WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::PushPermissionState>> &&)::$_0,void,WebCore::ExceptionOr<WebCore::PushPermissionState> &&>::call(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  objc_class *v11;

  v2 = *((_DWORD *)a2 + 4);
  if (!v2)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::PushPermissionState>>(*(_QWORD *)(a1 + 8), (WTF::StringImpl *)*a2);
  if (v2 != 1)
  {
    v8 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::NavigatorBase::hardwareConcurrency(void)::$_0 &&>>(v8);
  }
  v3 = *a2;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v11 = 0;
  v9[0] = v3;
  if (v4)
    *(_DWORD *)v4 += 2;
  v10 = v4;
  WebCore::DeferredPromise::reject(v5, v9, 0, &v11);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      if (!v4)
        return result;
      goto LABEL_9;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v4)
    return result;
LABEL_9:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
  *(_DWORD *)v4 -= 2;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::NavigatorBase::hardwareConcurrency(void)::$_0 &&>>(WTF *a1)
{
  uint64_t result;
  int v2;

  result = WTF::numberOfProcessorCores(a1);
  if ((int)result >= 8)
    v2 = 8;
  else
    v2 = 4;
  WebCore::NavigatorBase::hardwareConcurrency(void)::numberOfCores = v2;
  return result;
}

uint64_t WebCore::OriginAccessEntry::matchesOrigin(WTF **this, const WebCore::SecurityOrigin *a2)
{
  uint64_t v2;
  char *v5;
  const WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  uint64_t result;
  uint64_t v9;
  const WTF::StringImpl **v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  WTF *v29;
  int v30;
  WTF *v31;
  WebCore::OriginAccessPatternsForWebProcess *v32;
  const WebCore::UserContentURLPattern *v33;
  char v34;
  char *v35;

  v2 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v2 == -1)
    goto LABEL_44;
  v5 = (char *)a2 + 8;
  v35 = &v34;
  v6 = (const WTF::StringImpl **)((uint64_t (*)(char **, char *))off_1E3400578[v2])(&v35, (char *)a2 + 8);
  result = WTF::equal(*this, *v6, v7);
  if (!(_DWORD)result)
    return result;
  if (*((_DWORD *)this + 4) || (v31 = this[1]) != 0 && *((_DWORD *)v31 + 1))
  {
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 == -1)
      goto LABEL_44;
    v35 = &v34;
    v10 = (const WTF::StringImpl **)((uint64_t (*)(char **, char *))off_1E3400588[v9])(&v35, v5);
    if ((WTF::equal(this[1], *v10, v11) & 1) != 0)
      return 1;
    if (*((_DWORD *)this + 4) == 1)
      return 0;
    if (*((_DWORD *)this + 5) == 1)
    {
      if (*((_BYTE *)this + 24))
        return 0;
      v12 = *((unsigned int *)a2 + 8);
      if ((_DWORD)v12 == -1)
        goto LABEL_44;
      v35 = &v34;
      ((void (*)(char **, char *))off_1E3400588[v12])(&v35, v5);
      if ((WTF::URL::hostIsIPAddress() & 1) != 0)
        return 0;
    }
    v13 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v13 != -1)
    {
      v35 = &v34;
      v14 = *(_QWORD *)((uint64_t (*)(char **, char *))off_1E3400588[v13])(&v35, v5);
      if (v14)
        LODWORD(v14) = *(_DWORD *)(v14 + 4);
      v15 = this[1];
      if (v15)
        LODWORD(v15) = *((_DWORD *)v15 + 1);
      if (v14 <= v15)
        return 0;
      v16 = *((unsigned int *)a2 + 8);
      if ((_DWORD)v16 != -1)
      {
        v35 = &v34;
        v17 = ((uint64_t (*)(char **, char *))off_1E3400588[v16])(&v35, v5);
        v18 = *((unsigned int *)a2 + 8);
        if ((_DWORD)v18 != -1)
        {
          v19 = (uint64_t *)v17;
          v35 = &v34;
          v20 = *(_QWORD *)((uint64_t (*)(char **, char *))off_1E3400588[v18])(&v35, v5);
          if (v20)
            LODWORD(v20) = *(_DWORD *)(v20 + 4);
          v21 = this[1];
          if (v21)
            v22 = ~*((_DWORD *)v21 + 1);
          else
            v22 = -1;
          v23 = *v19;
          if (!*v19)
            return 0;
          v24 = (v22 + v20);
          if (*(_DWORD *)(v23 + 4) <= v24)
            return 0;
          v25 = *(_QWORD *)(v23 + 8);
          v26 = (*(_BYTE *)(v23 + 16) & 4) != 0 ? *(unsigned __int8 *)(v25 + v24) : *(unsigned __int16 *)(v25 + 2 * v24);
          if (v26 != 46)
            return 0;
          v27 = *((unsigned int *)a2 + 8);
          if ((_DWORD)v27 != -1)
          {
            v35 = &v34;
            v28 = (_QWORD *)((uint64_t (*)(char **, char *))off_1E3400588[v27])(&v35, v5);
            v29 = this[1];
            if (v29)
              v30 = *((_DWORD *)v29 + 1);
            else
              v30 = 0;
            if (*v28)
            {
              if ((WTF::StringImpl::endsWith() & 1) != 0)
                return 1;
            }
            else if (!v30)
            {
              return 1;
            }
            return 0;
          }
        }
      }
    }
LABEL_44:
    v32 = (WebCore::OriginAccessPatternsForWebProcess *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::OriginAccessPatternsForWebProcess::allowAccessTo(v32, v33);
  }
  return 1;
}

uint64_t WebCore::OriginAccessPatternsForWebProcess::allowAccessTo(WebCore::OriginAccessPatternsForWebProcess *this, const WebCore::UserContentURLPattern *a2)
{
  uint64_t result;
  int v5;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_212))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](&_MergedGlobals_212);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_212))
    goto LABEL_3;
LABEL_4:
  if ((byte_1ECE838B9 & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE838D0 = 0;
    qword_1ECE838C8 = 0;
    byte_1ECE838B9 = 1;
    goto LABEL_6;
  }
  if (dword_1ECE838D4 == dword_1ECE838D0)
  {
LABEL_6:
    result = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::UserContentURLPattern const&>((unint64_t)a2);
    goto LABEL_7;
  }
  result = WebCore::UserContentURLPattern::UserContentURLPattern(qword_1ECE838C8 + 32 * dword_1ECE838D4, (uint64_t)a2);
  ++dword_1ECE838D4;
LABEL_7:
  v5 = __ldxr((unsigned __int8 *)&_MergedGlobals_212);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_212);
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_212))
    return WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_212);
  return result;
}

uint64_t *WebCore::EmptyOriginAccessPatterns::singleton(WebCore::EmptyOriginAccessPatterns *this)
{
  {
    WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
  }
  return &WebCore::EmptyOriginAccessPatterns::singleton(void)::instance;
}

uint64_t WebCore::EmptyOriginAccessPatterns::anyPatternMatches()
{
  return 0;
}

WebCore::ValidatedFormListedElement *WebCore::Page::scheduleValidationMessageUpdate(WebCore::Page *this, WebCore::ValidatedFormListedElement *a2, WebCore::HTMLElement *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  WebCore::ValidatedFormListedElement *v20;
  WebCore::ValidatedFormListedElement **v21;
  WebCore::ValidatedFormListedElement *result;
  WTF *v23;
  WTF *v24;
  WebCore::ValidatedFormListedElement *v25;
  WTF *v26;

  (*(void (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)a2 + 88))(a2);
  v25 = a2;
  v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v26 = (WTF *)v6;
  v8 = *((unsigned int *)this + 63);
  if ((_DWORD)v8 == *((_DWORD *)this + 62))
  {
    v9 = (uint64_t *)WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this + 60, v8 + 1, (unint64_t)&v25);
    v11 = *((unsigned int *)this + 63);
    v12 = (_QWORD *)(*((_QWORD *)this + 30) + 16 * v11);
    v13 = *v9;
    *v9 = 0;
    *v12 = v13;
    v14 = v9[1];
    v9[1] = 0;
    v12[1] = v14;
    v15 = v26;
    *((_DWORD *)this + 63) = v11 + 1;
    v26 = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v15);
        v18 = *((unsigned int *)v15 + 7);
        if ((_DWORD)v18)
        {
          v24 = v15;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v15 + 2), (WTF::StringImpl *)(*((_QWORD *)v15 + 2) + 32 * v18));
          v15 = v24;
        }
        v19 = (WTF *)*((_QWORD *)v15 + 2);
        if (v19)
        {
          *((_QWORD *)v15 + 2) = 0;
          *((_DWORD *)v15 + 6) = 0;
          v23 = v15;
          WTF::fastFree(v19, v10);
          v15 = v23;
        }
        WTF::fastFree(v15, v10);
      }
    }
  }
  else
  {
    v20 = v25;
    v21 = (WebCore::ValidatedFormListedElement **)(*((_QWORD *)this + 30) + 16 * v8);
    v25 = 0;
    *v21 = v20;
    v21[1] = (WebCore::ValidatedFormListedElement *)v6;
    *((_DWORD *)this + 63) = v8 + 1;
    v26 = 0;
  }
  result = v25;
  v25 = 0;
  if (result)
    return (WebCore::ValidatedFormListedElement *)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(WTF **)result;
    v5 = *(_QWORD *)result + 16 * v2;
    do
    {
      v6 = (unsigned int *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v14 = result;
          atomic_store(1u, v6);
          v15 = (WTF *)v6;
          v11 = v6[7];
          if ((_DWORD)v11)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v15 + 2), (WTF::StringImpl *)(*((_QWORD *)v15 + 2) + 32 * v11));
          v12 = (WTF *)*((_QWORD *)v15 + 2);
          if (v12)
          {
            *((_QWORD *)v15 + 2) = 0;
            *((_DWORD *)v15 + 6) = 0;
            WTF::fastFree(v12, a2);
          }
          WTF::fastFree(v15, a2);
          result = v14;
        }
      }
      v9 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v9)
      {
        v10 = result;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
        result = v10;
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != (WTF *)v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v13 = result;
    WTF::fastFree(v3, a2);
    return v13;
  }
  return result;
}

uint64_t WebCore::createMainFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a5;
  v11[1] = a6;
  *(_QWORD *)&v9 = a2;
  *((_QWORD *)&v9 + 1) = v11;
  v10 = a4;
  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = v11;
  v8 = a4;
  return WTF::switchOn<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>,WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>&&,WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>&,WTF::DefaultRefDerefTraits<WTF::RefPtr>,WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1>(a1, a3, &v9, &v7);
}

uint64_t WebCore::Timer::Timer<WebCore::Page,WebCore::Page>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)a1 = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E3400688;
  v11[1] = a3;
  v11[2] = a4;
  v11[3] = a2;
  *(_QWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t WebCore::PageDebuggable::create(WebCore::PageDebuggable *this, WebCore::Page *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  v4 = WTF::fastMalloc((WTF *)0x38);
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_19689B170;
  *(_QWORD *)(v5 + 24) = v4;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = MEMORY[0x1E0CC10E8] + 16;
  *(_QWORD *)(v4 + 8) = v5;
  result = JSRemoteInspectorGetInspectionFollowsInternalPolicies();
  if ((_DWORD)result)
    v7 = 1;
  else
    v7 = 2;
  *(_BYTE *)(v4 + 20) = v7;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 36) = 0;
  *(_QWORD *)v4 = off_1E34004A8;
  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)this = v4;
  return result;
}

uint64_t std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>::optional[abi:sn180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 13) = 0;
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v2;
    LOBYTE(v2) = *((_BYTE *)a2 + 20);
    *((_BYTE *)a2 + 20) = 0;
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

uint64_t WebCore::Page::activeNowPlayingSessionUpdateTimerFired(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = WebCore::PlatformMediaSessionManager::sharedManager(this);
  v3 = *((_QWORD *)this + 216);
  if (!v3)
  {
    if (*((_BYTE *)this + 40))
    {
      v3 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 216) = v3;
    }
    else
    {
      v3 = 0;
    }
  }
  result = WebCore::PlatformMediaSessionManager::hasActiveNowPlayingSessionInGroup(v2, v3);
  if (*((unsigned __int8 *)this + 1864) != (_DWORD)result)
  {
    *((_BYTE *)this + 1864) = result;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 1880))(*(_QWORD *)(*((_QWORD *)this + 6) + 16), result);
  }
  return result;
}

uint64_t WebCore::Page::protectedUserContentProvider@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 936);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

uint64_t WebCore::Page::protectedStorageNamespaceProvider@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 928);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

void WebCore::Page::~Page(uint64_t this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int i;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  JSC::Debugger *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  uint64_t v34;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  void *v51;
  unsigned int **v52;
  unsigned int *v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  WebCore::OpportunisticTaskScheduler *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  unsigned int v81;
  WTF *v82;
  WTF::StringImpl **v83;
  void *v84;
  _DWORD *v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  WTF *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  WebCore::PageOverlayController *v100;
  WTF *v101;
  void *v102;
  uint64_t v103;
  WebCore::ImageAnalysisQueue *v104;
  WTF *v105;
  void *v106;
  WebCore::ImageOverlayController *v107;
  WTF *v108;
  void *v109;
  WTF *v110;
  WTF::StringImpl *v111;
  WTF *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  id v119;
  unsigned int **v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int *v126;
  void *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  WTF *v131;
  uint64_t v133;
  void *v134;
  WebCore::PageOverlay **v135;
  WTF *v136;
  void *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned __int8 **v142;
  _DWORD *v143;
  _DWORD *v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  _DWORD *v152;
  WebCore::ApplicationCacheStorage *v153;
  _DWORD *v154;
  unsigned int *v155;
  WTF *v156;
  uint64_t v157;
  WTF::StringImpl **v158;
  WTF::StringImpl *v159;
  WTF *v160;
  uint64_t v161;
  WTF::StringImpl **v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF *v178;
  WTF *v180;
  uint64_t v182;
  WTF *v183;
  WTF *v185;
  uint64_t v186;
  WTF *v187;
  WTF *v188;
  uint64_t v189;
  uint64_t v190;
  WTF **v191;
  WTF *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  void *v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int v199;
  WebCore::PageGroup *v200;
  WTF *v201;
  void *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WebCore::RTCController *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  WebCore::PluginData *v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t k;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  WTF *v233;
  _DWORD *v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  WebCore::ProgressTracker *v238;
  uint64_t v239;
  uint64_t v240;
  _DWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  BOOL v248;
  int v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  WTF *v253;
  WTF *v255;
  uint64_t v257;
  WTF *v258;
  WTF *v260;
  uint64_t v261;
  WTF *v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  unsigned int v269;
  WTF *v270;
  uint64_t v271;
  uint64_t v272;
  WebCore::PointerCaptureController::CapturingData **v273;
  WebCore::PointerCaptureController::CapturingData *v274;
  WTF *v275;
  void *v276;
  WebCore::InspectorController *v277;
  WTF *v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int v287;
  WebCore::DragController *v288;
  WTF *v289;
  void *v290;
  WTF *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  unsigned int *v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  WTF::StringImpl **v304;
  WTF::StringImpl *v305;
  WTF *v306;
  void *v307;
  WTF *v308;
  void *v309;
  WTF *v310;
  void *v311;
  WTF *v312;
  void *v313;
  unsigned int v314;
  unsigned int *v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t j;
  unsigned int *v320;
  unsigned int v321;
  unsigned int v322;
  WebCore::UserStyleSheet *v323;
  uint64_t v324;
  uint64_t v325;
  WTF *v326;
  uint64_t v327;
  WTF::StringImpl ***v328;
  uint64_t v329;
  WTF::StringImpl ***v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  uint64_t v333;
  uint64_t v334;
  WTF *v335;
  WebCore::IDBClient::IDBConnectionProxy *v336;
  bmalloc::api *v337;
  void *v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  uint64_t v344;
  uint64_t v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  uint64_t v348;
  unsigned int *v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int *v352;
  unsigned int v353;
  unsigned int v354;
  WTF::StringImpl *v355;

  v2 = *(_QWORD *)(this + 232);
  *(_QWORD *)(this + 232) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(this + 256);
  *(_QWORD *)(this + 256) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *(_QWORD *)(this + 264);
  *(_QWORD *)(this + 264) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(_QWORD *)(this + 160);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  if (*(_BYTE *)(v5 + 144))
  {
    do
    {
      v314 = __ldaxr(v6);
      v10 = --v314 == 0;
    }
    while (__stlxr(v314, v6));
  }
  else
  {
    v355 = 0;
    WebCore::LocalFrame::setView(v5, (uint64_t *)&v355);
    v8 = v355;
    v355 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
      else
        --*((_DWORD *)v8 + 2);
    }
    do
    {
      v9 = __ldaxr(v6);
      v10 = --v9 == 0;
    }
    while (__stlxr(v9, v6));
  }
  if (v10)
  {
    atomic_store(1u, v6);
    v331 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v331 = off_1E31FE290;
    *((_QWORD *)v331 + 1) = v6;
    v355 = v331;
    WTF::ensureOnMainThread();
    v332 = v355;
    v355 = 0;
    if (v332)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v332 + 8))(v332);
  }
  v355 = 0;
  WebCore::Page::setGroupName((WebCore::Page *)this, (const WTF::String *)&v355);
  v12 = v355;
  v355 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  {
    v13 = WebCore::allPages(void)::set;
    if (WebCore::allPages(void)::set)
    {
      v14 = *(_DWORD *)(WebCore::allPages(void)::set - 8);
      v15 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
      v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
      v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
      v18 = v14 & ((v17 >> 31) ^ v17);
      for (i = 1; ; ++i)
      {
        v20 = v18;
        v21 = *(_QWORD *)(WebCore::allPages(void)::set + 8 * v18);
        if (v21 != -1)
        {
          if (!v21)
            goto LABEL_42;
          if (*(_QWORD *)(v21 + 8) == this)
            break;
        }
        v18 = (v18 + i) & v14;
      }
      if (v18 != *(_DWORD *)(WebCore::allPages(void)::set - 4))
      {
        *(_QWORD *)(WebCore::allPages(void)::set + 8 * v18) = 0;
        do
        {
          v22 = __ldaxr((unsigned int *)v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)v21));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)v21);
          WTF::fastFree((WTF *)v21, v11);
        }
        *(_QWORD *)(v13 + 8 * v20) = -1;
        ++*(_DWORD *)(WebCore::allPages(void)::set - 16);
        if (WebCore::allPages(void)::set)
          v24 = *(_DWORD *)(WebCore::allPages(void)::set - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(WebCore::allPages(void)::set - 12) = v24;
        if (WebCore::allPages(void)::set)
        {
          v25 = *(_DWORD *)(WebCore::allPages(void)::set - 4);
          if (6 * *(_DWORD *)(WebCore::allPages(void)::set - 12) < v25 && v25 >= 9)
            WTF::HashTable<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>>::rehash(v25 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebCore::allPages(void)::set = 0;
  }
LABEL_42:
  if (!*(_BYTE *)(this + 1093))
    WTF::MemoryPressureHandler::setPageCount((WTF::MemoryPressureHandler *)--WebCore::gNonUtilityPageCount);
  v27 = *(_QWORD *)(this + 80);
  WebCore::InspectorController::disconnectAllFrontends((WebCore::InspectorController *)v27, v11);
  (*(void (**)(_QWORD))(**(_QWORD **)(v27 + 88) + 16))(*(_QWORD *)(v27 + 88));
  v28 = *(_QWORD *)(v27 + 88);
  *(_QWORD *)(v27 + 88) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  Inspector::AgentRegistry::discardValues((Inspector::AgentRegistry *)(v27 + 64));
  v29 = *(JSC::Debugger **)(v27 + 56);
  *(_QWORD *)(v27 + 56) = 0;
  if (v29)
  {
    JSC::Debugger::~Debugger(v29);
    WTF::fastFree(v30, v31);
  }
  *(_QWORD *)(*(_QWORD *)(this + 800) + 40) = 0;
  v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v32 = off_1E34006B0;
  v355 = v32;
  WebCore::Page::forEachLocalFrame(this, &v355);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
  v33 = *(_QWORD **)(this + 104);
  if (v33)
  {
    v34 = v33[1];
    if (__ldaxr((unsigned __int8 *)v34))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v34))
    {
      goto LABEL_53;
    }
    MEMORY[0x19AEA534C](v34);
LABEL_53:
    ++*(_QWORD *)(v34 + 8);
    v36 = __ldxr((unsigned __int8 *)v34);
    if (v36 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v34))
      {
LABEL_58:
        (*(void (**)(_QWORD *))(*v33 + 16))(v33);
        v38 = v33[1];
        if (__ldaxr((unsigned __int8 *)v38))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v38))
        {
          goto LABEL_62;
        }
        MEMORY[0x19AEA534C](v38);
LABEL_62:
        v40 = *(_QWORD *)(v38 + 8);
        v41 = v40 - 1;
        *(_QWORD *)(v38 + 8) = v40 - 1;
        if (v40 == 1)
        {
          v333 = *(_QWORD *)(v38 + 16);
          v42 = *(_QWORD *)(v38 + 24);
          *(_QWORD *)(v38 + 24) = 0;
          v43 = v333 != 0;
        }
        else
        {
          v42 = 0;
          v43 = 1;
        }
        v44 = __ldxr((unsigned __int8 *)v38);
        if (v44 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v38))
          {
            if (v41)
              goto LABEL_74;
LABEL_70:
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
            if (!v43)
              WTF::fastFree((WTF *)v38, v37);
            goto LABEL_74;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v38);
        if (v41)
          goto LABEL_74;
        goto LABEL_70;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
    goto LABEL_58;
  }
LABEL_74:
  v45 = *(_QWORD *)(this + 136);
  ++*(_DWORD *)v45;
  v46 = *(_DWORD **)(v45 + 16);
  ++v46[2];
  (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 64))(v46);
  if (v46[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
  else
    --v46[2];
  if (!*(_DWORD *)v45)
  {
    __break(0xC471u);
    JUMPOUT(0x196016CB0);
  }
  --*(_DWORD *)v45;
  if (!*(_BYTE *)(this + 1093))
  {
    {
      WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
    }
    WebCore::BackForwardCache::removeAllItemsForPage(&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, (WebCore::Page *)this);
  }
  v47 = *(_DWORD **)(this + 920);
  ++v47[2];
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(v47 + 6), (_QWORD *)this);
  if (v47[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
  else
    --v47[2];
  v48 = *(_DWORD **)(this + 936);
  ++v48[2];
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(v48 + 4), (_QWORD *)this);
  if (v48[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
  else
    --v48[2];
  v49 = *(_DWORD **)(this + 952);
  ++v49[2];
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(v49 + 4), (_QWORD *)this);
  if (v49[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
  else
    --v49[2];
  *(_QWORD *)(this + 1872) = off_1E31F7378;
  v50 = *(_QWORD *)(this + 1920);
  *(_QWORD *)(this + 1920) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(this + 1872));
  v52 = *(unsigned int ***)(this + 1856);
  *(_QWORD *)(this + 1856) = 0;
  if (v52)
  {
    v53 = v52[3];
    if (v53)
    {
      v54 = *(v53 - 1);
      if ((_DWORD)v54)
      {
        v55 = v53 + 14;
        do
        {
          if (*((_QWORD *)v55 - 7) ^ 1 | *((_QWORD *)v55 - 6))
          {
            v56 = *v55;
            if ((_DWORD)v56 != -1)
              ((void (*)(WTF::StringImpl **, _DWORD *))off_1E34005F8[v56])(&v355, v55 - 10);
            *v55 = -1;
          }
          v55 += 16;
          --v54;
        }
        while (v54);
      }
      WTF::fastFree((WTF *)(v53 - 4), v51);
    }
    v57 = v52[2];
    v52[2] = 0;
    if (v57)
    {
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        atomic_store(1u, v57);
        WTF::fastFree((WTF *)v57, v51);
      }
    }
    if (*v52)
    {
      *((_QWORD *)*v52 + 1) = 0;
      v60 = *v52;
      *v52 = 0;
      if (v60)
      {
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, v60);
          WTF::fastFree((WTF *)v60, v51);
        }
      }
    }
    else
    {
      *v52 = 0;
    }
    if (*((_DWORD *)v52 + 2))
    {
      *(_OWORD *)v52 = 0u;
      *((_OWORD *)v52 + 1) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v52, v51);
    }
  }
  v63 = *(WTF::StringImpl **)(this + 1840);
  *(_QWORD *)(this + 1840) = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v51);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = *(_QWORD *)(this + 1832);
  if (v64)
  {
    v65 = *(unsigned int *)(v64 - 4);
    if ((_DWORD)v65)
    {
      v66 = *(WTF::StringImpl ***)(this + 1832);
      do
      {
        v67 = *v66;
        if (*v66 != (WTF::StringImpl *)-1)
        {
          *v66 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v51);
            else
              *(_DWORD *)v67 -= 2;
          }
        }
        v66 += 2;
        --v65;
      }
      while (v65);
    }
    WTF::fastFree((WTF *)(v64 - 16), v51);
  }
  v68 = *(_DWORD **)(this + 1824);
  *(_QWORD *)(this + 1824) = 0;
  if (v68)
  {
    if (v68[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
    else
      --v68[2];
  }
  v69 = *(_DWORD **)(this + 1816);
  *(_QWORD *)(this + 1816) = 0;
  if (v69)
  {
    if (v69[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
    else
      --v69[2];
  }
  v70 = *(_QWORD *)(this + 1792);
  if (v70)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v70, (WTF::StringImpl *)v51);
  v71 = *(WebCore::OpportunisticTaskScheduler **)(this + 1784);
  *(_QWORD *)(this + 1784) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
    {
      WebCore::OpportunisticTaskScheduler::~OpportunisticTaskScheduler(v71, v51);
      WTF::fastFree(v306, v307);
    }
    else
    {
      --*(_DWORD *)v71;
    }
  }
  v72 = *(_QWORD *)(this + 1768);
  *(_QWORD *)(this + 1768) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *(unsigned int **)(this + 1760);
  *(_QWORD *)(this + 1760) = 0;
  if (v73)
  {
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      atomic_store(1u, v73);
      WTF::fastFree((WTF *)v73, v51);
    }
  }
  v76 = *(_QWORD *)(this + 1752);
  *(_QWORD *)(this + 1752) = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = *(_QWORD *)(this + 1744);
  *(_QWORD *)(this + 1744) = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  if (*(_BYTE *)(this + 1712))
  {
    v78 = *(_QWORD *)(this + 1704);
    if ((v78 & 0x8000000000000) != 0)
    {
      v352 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFLL);
      do
      {
        v353 = __ldaxr(v352);
        v354 = v353 - 1;
      }
      while (__stlxr(v354, v352));
      if (!v354)
      {
        atomic_store(1u, v352);
        WTF::fastFree((WTF *)v352, v51);
      }
    }
  }
  v79 = *(_QWORD *)(this + 1696);
  if ((v79 & 0x8000000000000) != 0)
  {
    v349 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFLL);
    do
    {
      v350 = __ldaxr(v349);
      v351 = v350 - 1;
    }
    while (__stlxr(v351, v349));
    if (!v351)
    {
      atomic_store(1u, v349);
      WTF::fastFree((WTF *)v349, v51);
    }
  }
  if (*(_BYTE *)(this + 1672))
  {
    v80 = *(WTF **)(this + 1648);
    if (v80)
    {
      v303 = *(unsigned int *)(this + 1656);
      if ((_DWORD)v303)
      {
        v304 = *(WTF::StringImpl ***)(this + 1648);
        do
        {
          v305 = *v304;
          *v304 = 0;
          if (v305)
          {
            if (*(_DWORD *)v305 == 2)
              WTF::StringImpl::destroy(v305, (WTF::StringImpl *)v51);
            else
              *(_DWORD *)v305 -= 2;
          }
          ++v304;
          --v303;
        }
        while (v303);
      }
      WTF::fastFree(v80, v51);
    }
  }
  v81 = *(_DWORD *)(this + 1644);
  if (v81)
  {
    v323 = *(WebCore::UserStyleSheet **)(this + 1632);
    v324 = 104 * v81;
    do
    {
      WebCore::UserStyleSheet::~UserStyleSheet(v323, (WTF::StringImpl *)v51);
      v323 = (WebCore::UserStyleSheet *)(v325 + 104);
      v324 -= 104;
    }
    while (v324);
  }
  v82 = *(WTF **)(this + 1632);
  if (v82)
  {
    *(_QWORD *)(this + 1632) = 0;
    *(_DWORD *)(this + 1640) = 0;
    WTF::fastFree(v82, v51);
  }
  v83 = *(WTF::StringImpl ***)(this + 1624);
  if (v83)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v83, (WTF::StringImpl *)v51);
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(this + 1608, v51);
  v85 = *(_DWORD **)(this + 1600);
  *(_QWORD *)(this + 1600) = 0;
  if (v85)
  {
    if (v85[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 8))(v85);
    else
      --v85[2];
  }
  if (*(_BYTE *)(this + 1528))
    WebCore::ApplicationManifest::~ApplicationManifest((WTF::StringImpl **)(this + 1264), v84);
  v86 = *(WTF **)(this + 1256);
  *(_QWORD *)(this + 1256) = 0;
  if (v86)
  {
    v87 = *((_QWORD *)v86 + 3);
    *((_QWORD *)v86 + 3) = 0;
    if (v87)
      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
    v88 = *((_QWORD *)v86 + 1);
    *((_QWORD *)v86 + 1) = 0;
    if (v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
    if (*(_QWORD *)v86)
    {
      *(_QWORD *)(*(_QWORD *)v86 + 8) = 0;
      v89 = *(unsigned int **)v86;
      *(_QWORD *)v86 = 0;
      if (v89)
      {
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (!v91)
        {
          atomic_store(1u, v89);
          WTF::fastFree((WTF *)v89, v84);
        }
      }
    }
    else
    {
      *(_QWORD *)v86 = 0;
    }
    WTF::fastFree(v86, v84);
  }
  v92 = *(_QWORD *)(this + 1248);
  *(_QWORD *)(this + 1248) = 0;
  if (v92)
  {
    if (*(_DWORD *)(v92 + 104) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v92 + 96) + 8))(v92 + 96);
    else
      --*(_DWORD *)(v92 + 104);
  }
  v93 = *(WTF **)(this + 1240);
  *(_QWORD *)(this + 1240) = 0;
  if (v93)
  {
    v94 = (char *)*((_QWORD *)v93 + 2);
    *((_QWORD *)v93 + 2) = 0;
    if (v94)
    {
      v95 = *(_QWORD *)(*(_QWORD *)v94 - 24);
      if (*(_DWORD *)&v94[v95 + 8] == 1)
        (*(void (**)(char *))(*(_QWORD *)&v94[v95] + 8))(&v94[v95]);
      else
        --*(_DWORD *)&v94[v95 + 8];
    }
    v96 = *((_QWORD *)v93 + 1);
    *((_QWORD *)v93 + 1) = 0;
    if (v96)
      (*(void (**)(uint64_t))(*(_QWORD *)v96 + 152))(v96);
    if (*(_QWORD *)v93)
    {
      *(_QWORD *)(*(_QWORD *)v93 + 8) = 0;
      v97 = *(unsigned int **)v93;
      *(_QWORD *)v93 = 0;
      if (v97)
      {
        do
        {
          v98 = __ldaxr(v97);
          v99 = v98 - 1;
        }
        while (__stlxr(v99, v97));
        if (!v99)
        {
          atomic_store(1u, v97);
          WTF::fastFree((WTF *)v97, v84);
        }
      }
    }
    else
    {
      *(_QWORD *)v93 = 0;
    }
    WTF::fastFree(v93, v84);
  }
  v100 = *(WebCore::PageOverlayController **)(this + 1232);
  *(_QWORD *)(this + 1232) = 0;
  if (v100)
  {
    WebCore::PageOverlayController::~PageOverlayController(v100, v84);
    WTF::fastFree(v101, v102);
  }
  v103 = *(_QWORD *)(this + 1224);
  *(_QWORD *)(this + 1224) = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = *(WebCore::ImageAnalysisQueue **)(this + 1216);
  *(_QWORD *)(this + 1216) = 0;
  if (v104)
  {
    WebCore::ImageAnalysisQueue::~ImageAnalysisQueue(v104, v84);
    WTF::fastFree(v105, v106);
  }
  v107 = *(WebCore::ImageOverlayController **)(this + 1208);
  *(_QWORD *)(this + 1208) = 0;
  if (v107)
  {
    WebCore::ImageOverlayController::~ImageOverlayController(v107, v84);
    WTF::fastFree(v108, v109);
  }
  v110 = *(WTF **)(this + 1200);
  *(_QWORD *)(this + 1200) = 0;
  if (v110)
    WTF::fastFree(v110, v84);
  if (*(_BYTE *)(this + 1192))
  {
    v111 = *(WTF::StringImpl **)(this + 1176);
    *(_QWORD *)(this + 1176) = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v84);
      else
        *(_DWORD *)v111 -= 2;
    }
  }
  v112 = *(WTF **)(this + 1160);
  *(_QWORD *)(this + 1160) = 0;
  if (v112)
  {
    if (*(_QWORD *)v112)
    {
      *(_QWORD *)(*(_QWORD *)v112 + 8) = 0;
      v113 = *(unsigned int **)v112;
      *(_QWORD *)v112 = 0;
      if (v113)
      {
        do
        {
          v114 = __ldaxr(v113);
          v115 = v114 - 1;
        }
        while (__stlxr(v115, v113));
        if (!v115)
        {
          atomic_store(1u, v113);
          WTF::fastFree((WTF *)v113, v84);
        }
      }
    }
    else
    {
      *(_QWORD *)v112 = 0;
    }
    WTF::fastFree(v112, v84);
  }
  v116 = *(_QWORD *)(this + 1152);
  *(_QWORD *)(this + 1152) = 0;
  if (v116)
  {
    objc_msgSend(*(id *)v116, "setNotifier:", 0);
    v118 = *(_QWORD *)(v116 + 8);
    *(_QWORD *)(v116 + 8) = 0;
    if (v118)
      (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
    v119 = *(id *)v116;
    *(_QWORD *)v116 = 0;
    if (v119)
      CFRelease(v119);
    WTF::fastFree((WTF *)v116, v117);
  }
  v120 = *(unsigned int ***)(this + 1144);
  *(_QWORD *)(this + 1144) = 0;
  if (v120)
  {
    v120[48] = (unsigned int *)off_1E31F7378;
    v121 = v120[54];
    v120[54] = 0;
    if (v121)
      (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 8))(v121);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v120 + 48));
    v120[41] = (unsigned int *)off_1E31F7378;
    v122 = v120[47];
    v120[47] = 0;
    if (v122)
      (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 8))(v122);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v120 + 41));
    v120[34] = (unsigned int *)off_1E31F7378;
    v123 = v120[40];
    v120[40] = 0;
    if (v123)
      (*(void (**)(unsigned int *))(*(_QWORD *)v123 + 8))(v123);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v120 + 34));
    v120[23] = (unsigned int *)off_1E31F7378;
    v124 = v120[29];
    v120[29] = 0;
    if (v124)
      (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 8))(v124);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v120 + 23));
    v120[12] = (unsigned int *)off_1E31F7378;
    v125 = v120[18];
    v120[18] = 0;
    if (v125)
      (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 8))(v125);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v120 + 12));
    v120[1] = (unsigned int *)off_1E31F7378;
    v126 = v120[7];
    v120[7] = 0;
    if (v126)
      (*(void (**)(unsigned int *))(*(_QWORD *)v126 + 8))(v126);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v120 + 1));
    v128 = *v120;
    *v120 = 0;
    if (v128)
    {
      do
      {
        v129 = __ldaxr(v128);
        v130 = v129 - 1;
      }
      while (__stlxr(v130, v128));
      if (!v130)
      {
        atomic_store(1u, v128);
        WTF::fastFree((WTF *)v128, v127);
      }
    }
    WTF::fastFree((WTF *)v120, v127);
  }
  v131 = *(WTF **)(this + 1104);
  if ((WTF *)(this + 1120) != v131 && v131 != 0)
  {
    *(_QWORD *)(this + 1104) = 0;
    *(_DWORD *)(this + 1112) = 0;
    WTF::fastFree(v131, v84);
  }
  *(_QWORD *)(this + 1032) = off_1E31F7378;
  v133 = *(_QWORD *)(this + 1080);
  *(_QWORD *)(this + 1080) = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(this + 1032));
  v135 = *(WebCore::PageOverlay ***)(this + 1000);
  *(_QWORD *)(this + 1000) = 0;
  if (v135)
  {
    WebCore::ResourceUsageOverlay::~ResourceUsageOverlay(v135, v134);
    WTF::fastFree(v136, v137);
  }
  v138 = *(_QWORD *)(this + 992);
  *(_QWORD *)(this + 992) = 0;
  if (v138)
  {
    do
    {
      v139 = __ldaxr((unsigned int *)v138);
      v140 = v139 - 1;
    }
    while (__stlxr(v140, (unsigned int *)v138));
    if (!v140)
    {
      atomic_store(1u, (unsigned int *)v138);
      v334 = *(unsigned int *)(v138 + 28);
      if ((_DWORD)v334)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v138 + 16), (WTF::StringImpl *)(*(_QWORD *)(v138 + 16) + 32 * v334));
      v335 = *(WTF **)(v138 + 16);
      if (v335)
      {
        *(_QWORD *)(v138 + 16) = 0;
        *(_DWORD *)(v138 + 24) = 0;
        WTF::fastFree(v335, v134);
      }
      WTF::fastFree((WTF *)v138, v134);
    }
  }
  v141 = *(_QWORD *)(this + 976);
  if (v141)
  {
    v318 = *(unsigned int *)(v141 - 4);
    if ((_DWORD)v318)
    {
      for (j = 0; j != v318; ++j)
      {
        v320 = *(unsigned int **)(v141 + 8 * j);
        if (v320 != (unsigned int *)-1)
        {
          *(_QWORD *)(v141 + 8 * j) = 0;
          if (v320)
          {
            do
            {
              v321 = __ldaxr(v320);
              v322 = v321 - 1;
            }
            while (__stlxr(v322, v320));
            if (!v322)
            {
              atomic_store(1u, v320);
              WTF::fastFree((WTF *)v320, v134);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v141 - 16), v134);
  }
  v142 = *(unsigned __int8 ***)(this + 968);
  *(_QWORD *)(this + 968) = 0;
  if (v142)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v142, v134);
  v143 = *(_DWORD **)(this + 960);
  *(_QWORD *)(this + 960) = 0;
  if (v143)
  {
    if (v143[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v143 + 8))(v143);
    else
      --v143[2];
  }
  v144 = *(_DWORD **)(this + 952);
  *(_QWORD *)(this + 952) = 0;
  if (v144)
  {
    if (v144[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v144 + 8))(v144);
    else
      --v144[2];
  }
  v145 = *(unsigned int **)(this + 944);
  *(_QWORD *)(this + 944) = 0;
  if (v145)
  {
    do
    {
      v146 = __ldaxr(v145);
      v147 = v146 - 1;
    }
    while (__stlxr(v147, v145));
    if (!v147)
    {
      atomic_store(1u, v145);
      WTF::fastFree((WTF *)v145, v134);
    }
  }
  v148 = *(_DWORD **)(this + 936);
  *(_QWORD *)(this + 936) = 0;
  if (v148)
  {
    if (v148[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v148 + 8))(v148);
    else
      --v148[2];
  }
  v149 = *(_DWORD **)(this + 928);
  *(_QWORD *)(this + 928) = 0;
  if (v149)
  {
    if (v149[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v149 + 8))(v149);
    else
      --v149[2];
  }
  v150 = *(_DWORD **)(this + 920);
  *(_QWORD *)(this + 920) = 0;
  if (v150)
  {
    if (v150[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v150 + 8))(v150);
    else
      --v150[2];
  }
  v151 = *(_DWORD **)(this + 912);
  *(_QWORD *)(this + 912) = 0;
  if (v151)
  {
    if (v151[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v151 + 8))(v151);
    else
      --v151[2];
  }
  v152 = *(_DWORD **)(this + 904);
  *(_QWORD *)(this + 904) = 0;
  if (v152)
  {
    if (v152[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v152 + 16))(v152);
    else
      --v152[2];
  }
  v153 = *(WebCore::ApplicationCacheStorage **)(this + 896);
  *(_QWORD *)(this + 896) = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 1)
    {
      WebCore::ApplicationCacheStorage::~ApplicationCacheStorage(v153, (WTF::StringImpl *)v134);
      WTF::fastFree(v308, v309);
    }
    else
    {
      --*(_DWORD *)v153;
    }
  }
  v154 = *(_DWORD **)(this + 888);
  *(_QWORD *)(this + 888) = 0;
  if (v154)
  {
    if (v154[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v154 + 120))(v154);
    else
      --v154[2];
  }
  v155 = *(unsigned int **)(this + 880);
  *(_QWORD *)(this + 880) = 0;
  if (v155)
  {
    v315 = v155 + 2;
    do
    {
      v316 = __ldaxr(v315);
      v317 = v316 - 1;
    }
    while (__stlxr(v317, v315));
    if (!v317)
    {
      atomic_store(1u, v155 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v155 + 24))(v155);
    }
  }
  v156 = *(WTF **)(this + 840);
  if (v156)
  {
    v157 = *(unsigned int *)(this + 848);
    if ((_DWORD)v157)
    {
      v158 = *(WTF::StringImpl ***)(this + 840);
      do
      {
        v159 = *v158;
        *v158 = 0;
        if (v159)
        {
          if (*(_DWORD *)v159 == 2)
            WTF::StringImpl::destroy(v159, (WTF::StringImpl *)v134);
          else
            *(_DWORD *)v159 -= 2;
        }
        ++v158;
        --v157;
      }
      while (v157);
    }
    WTF::fastFree(v156, v134);
  }
  v160 = *(WTF **)(this + 816);
  if (v160)
  {
    v161 = *(unsigned int *)(this + 824);
    if ((_DWORD)v161)
    {
      v162 = *(WTF::StringImpl ***)(this + 816);
      do
      {
        v163 = *v162;
        *v162 = 0;
        if (v163)
        {
          if (*(_DWORD *)v163 == 2)
            WTF::StringImpl::destroy(v163, (WTF::StringImpl *)v134);
          else
            *(_DWORD *)v163 -= 2;
        }
        ++v162;
        --v161;
      }
      while (v161);
    }
    WTF::fastFree(v160, v134);
  }
  v164 = *(_QWORD *)(this + 808);
  *(_QWORD *)(this + 808) = 0;
  if (v164)
  {
    do
    {
      v165 = __ldaxr((unsigned int *)v164);
      v166 = v165 - 1;
    }
    while (__stlxr(v166, (unsigned int *)v164));
    if (!v166)
    {
      atomic_store(1u, (unsigned int *)v164);
      v336 = *(WebCore::IDBClient::IDBConnectionProxy **)(v164 + 24);
      *(_QWORD *)(v164 + 24) = 0;
      if (v336)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v336, v134);
        bmalloc::api::isoDeallocate(v337, v338);
      }
      v339 = *(unsigned int **)(v164 + 8);
      *(_QWORD *)(v164 + 8) = 0;
      if (v339)
      {
        do
        {
          v340 = __ldaxr(v339);
          v341 = v340 - 1;
        }
        while (__stlxr(v341, v339));
        if (!v341)
        {
          atomic_store(1u, v339);
          WTF::fastFree((WTF *)v339, v134);
        }
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v164, v134);
    }
  }
  v167 = *(_QWORD *)(this + 800);
  *(_QWORD *)(this + 800) = 0;
  if (v167)
  {
    v168 = *(_QWORD *)(v167 + 8);
    if (__ldaxr((unsigned __int8 *)v168))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v168))
    {
      goto LABEL_304;
    }
    MEMORY[0x19AEA534C](v168);
LABEL_304:
    v170 = *(_QWORD *)(v168 + 8);
    v171 = v170 - 1;
    *(_QWORD *)(v168 + 8) = v170 - 1;
    if (v170 == 1)
    {
      v348 = *(_QWORD *)(v168 + 16);
      v172 = *(_QWORD *)(v168 + 24);
      *(_QWORD *)(v168 + 24) = 0;
      v173 = v348 != 0;
    }
    else
    {
      v172 = 0;
      v173 = 1;
    }
    v174 = __ldxr((unsigned __int8 *)v168);
    if (v174 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v168))
      {
        if (v171)
          goto LABEL_316;
LABEL_312:
        if (v172)
          (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
        if (!v173)
          WTF::fastFree((WTF *)v168, v134);
        goto LABEL_316;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v168);
    if (v171)
      goto LABEL_316;
    goto LABEL_312;
  }
LABEL_316:
  v175 = *(_QWORD *)(this + 792);
  *(_QWORD *)(this + 792) = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *(_QWORD *)(this + 776);
  *(_QWORD *)(this + 776) = 0;
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v177 = *(_QWORD *)(this + 760);
  *(_QWORD *)(this + 760) = 0;
  if (v177)
  {
    v178 = *(WTF **)(v177 + 144);
    if ((WTF *)(v177 + 160) != v178 && v178 != 0)
    {
      *(_QWORD *)(v177 + 144) = 0;
      *(_DWORD *)(v177 + 152) = 0;
      WTF::fastFree(v178, v134);
    }
    v180 = *(WTF **)v177;
    if (v177 + 16 != *(_QWORD *)v177 && v180 != 0)
    {
      *(_QWORD *)v177 = 0;
      *(_DWORD *)(v177 + 8) = 0;
      WTF::fastFree(v180, v134);
    }
    WTF::fastFree((WTF *)v177, v134);
  }
  v182 = *(_QWORD *)(this + 736);
  *(_QWORD *)(this + 736) = 0;
  if (v182)
  {
    v183 = *(WTF **)(v182 + 144);
    if ((WTF *)(v182 + 160) != v183 && v183 != 0)
    {
      *(_QWORD *)(v182 + 144) = 0;
      *(_DWORD *)(v182 + 152) = 0;
      WTF::fastFree(v183, v134);
    }
    v185 = *(WTF **)v182;
    if (v182 + 16 != *(_QWORD *)v182 && v185)
    {
      *(_QWORD *)v182 = 0;
      *(_DWORD *)(v182 + 8) = 0;
      WTF::fastFree(v185, v134);
    }
    WTF::fastFree((WTF *)v182, v134);
  }
  v186 = *(_QWORD *)(this + 712);
  *(_QWORD *)(this + 712) = 0;
  if (v186)
  {
    v187 = *(WTF **)(v186 + 144);
    if ((WTF *)(v186 + 160) != v187 && v187)
    {
      *(_QWORD *)(v186 + 144) = 0;
      *(_DWORD *)(v186 + 152) = 0;
      WTF::fastFree(v187, v134);
    }
    v188 = *(WTF **)v186;
    if (v186 + 16 != *(_QWORD *)v186 && v188)
    {
      *(_QWORD *)v186 = 0;
      *(_DWORD *)(v186 + 8) = 0;
      WTF::fastFree(v188, v134);
    }
    WTF::fastFree((WTF *)v186, v134);
  }
  v189 = *(_QWORD *)(this + 680);
  if (v189)
  {
    v190 = *(unsigned int *)(v189 - 4);
    if ((_DWORD)v190)
    {
      v191 = *(WTF ***)(this + 680);
      do
      {
        v192 = *v191;
        if (*v191 != (WTF *)-1)
        {
          *v191 = 0;
          if (v192)
          {
            if (*(_DWORD *)v192 == 1)
              WTF::fastFree(v192, v134);
            else
              --*(_DWORD *)v192;
          }
        }
        ++v191;
        --v190;
      }
      while (v190);
    }
    WTF::fastFree((WTF *)(v189 - 16), v134);
  }
  v193 = *(_QWORD *)(this + 672);
  *(_QWORD *)(this + 672) = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  *(_QWORD *)(this + 592) = off_1E31F7378;
  v194 = *(_QWORD *)(this + 640);
  *(_QWORD *)(this + 640) = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(this + 592));
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)(this + 552), v195);
  v197 = *(unsigned int **)(this + 528);
  *(_QWORD *)(this + 528) = 0;
  if (v197)
  {
    do
    {
      v198 = __ldaxr(v197);
      v199 = v198 - 1;
    }
    while (__stlxr(v199, v197));
    if (!v199)
    {
      atomic_store(1u, v197);
      WTF::fastFree((WTF *)v197, v196);
    }
  }
  v200 = *(WebCore::PageGroup **)(this + 520);
  *(_QWORD *)(this + 520) = 0;
  if (v200)
  {
    WebCore::PageGroup::~PageGroup(v200, v196);
    WTF::fastFree(v201, v202);
  }
  v203 = *(WTF::StringImpl **)(this + 512);
  *(_QWORD *)(this + 512) = 0;
  if (v203)
  {
    if (*(_DWORD *)v203 == 2)
      WTF::StringImpl::destroy(v203, (WTF::StringImpl *)v196);
    else
      *(_DWORD *)v203 -= 2;
  }
  v204 = *(WTF::StringImpl **)(this + 488);
  *(_QWORD *)(this + 488) = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
      WTF::StringImpl::destroy(v204, (WTF::StringImpl *)v196);
    else
      *(_DWORD *)v204 -= 2;
  }
  v205 = *(WTF::StringImpl **)(this + 480);
  *(_QWORD *)(this + 480) = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
      WTF::StringImpl::destroy(v205, (WTF::StringImpl *)v196);
    else
      *(_DWORD *)v205 -= 2;
  }
  v206 = *(WTF::StringImpl **)(this + 328);
  *(_QWORD *)(this + 328) = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
      WTF::StringImpl::destroy(v206, (WTF::StringImpl *)v196);
    else
      *(_DWORD *)v206 -= 2;
  }
  v207 = *(WebCore::RTCController **)(this + 304);
  *(_QWORD *)(this + 304) = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 1)
    {
      WebCore::RTCController::~RTCController(v207, (WTF *)v196);
      WTF::fastFree(v312, v313);
    }
    else
    {
      --*(_DWORD *)v207;
    }
  }
  v208 = *(_QWORD *)(this + 296);
  *(_QWORD *)(this + 296) = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  v209 = *(_QWORD *)(this + 288);
  *(_QWORD *)(this + 288) = 0;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  v210 = *(_QWORD *)(this + 280);
  *(_QWORD *)(this + 280) = 0;
  if (v210)
    (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
  v211 = *(_QWORD *)(this + 272);
  *(_QWORD *)(this + 272) = 0;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = *(_QWORD *)(this + 264);
  *(_QWORD *)(this + 264) = 0;
  if (v212)
    (*(void (**)(uint64_t))(*(_QWORD *)v212 + 16))(v212);
  v213 = *(_QWORD *)(this + 256);
  *(_QWORD *)(this + 256) = 0;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 56))(v213);
  WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(this + 240, v196);
  v215 = *(_QWORD *)(this + 232);
  *(_QWORD *)(this + 232) = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = *(WebCore::PluginData **)(this + 224);
  *(_QWORD *)(this + 224) = 0;
  if (v216)
  {
    if (*(_DWORD *)v216 == 1)
    {
      WebCore::PluginData::~PluginData(v216, v214);
      WTF::fastFree(v310, v311);
    }
    else
    {
      --*(_DWORD *)v216;
    }
  }
  v217 = *(WTF::StringImpl **)(this + 216);
  *(_QWORD *)(this + 216) = 0;
  if (v217)
  {
    if (*(_DWORD *)v217 == 2)
      WTF::StringImpl::destroy(v217, v214);
    else
      *(_DWORD *)v217 -= 2;
  }
  v218 = *(_QWORD *)(this + 208);
  *(_QWORD *)(this + 208) = 0;
  if (v218)
  {
    do
    {
      v219 = __ldaxr((unsigned int *)v218);
      v220 = v219 - 1;
    }
    while (__stlxr(v220, (unsigned int *)v218));
    if (!v220)
    {
      atomic_store(1u, (unsigned int *)v218);
      v342 = *(WTF::StringImpl **)(v218 + 48);
      *(_QWORD *)(v218 + 48) = 0;
      if (v342)
      {
        if (*(_DWORD *)v342 == 2)
          WTF::StringImpl::destroy(v342, v214);
        else
          *(_DWORD *)v342 -= 2;
      }
      v343 = *(WTF::StringImpl **)(v218 + 40);
      *(_QWORD *)(v218 + 40) = 0;
      if (v343)
      {
        if (*(_DWORD *)v343 == 2)
          WTF::StringImpl::destroy(v343, v214);
        else
          *(_DWORD *)v343 -= 2;
      }
      v344 = *(unsigned int *)(v218 + 32);
      if ((_DWORD)v344 != -1)
        ((void (*)(WTF::StringImpl **, uint64_t))off_1E3400668[v344])(&v355, v218 + 8);
      *(_DWORD *)(v218 + 32) = -1;
      WTF::fastFree((WTF *)v218, v214);
    }
  }
  v221 = *(WTF::StringImpl **)(this + 168);
  *(_QWORD *)(this + 168) = 0;
  if (v221)
  {
    if (*(_DWORD *)v221 == 2)
      WTF::StringImpl::destroy(v221, v214);
    else
      *(_DWORD *)v221 -= 2;
  }
  v222 = *(_QWORD *)(this + 160);
  *(_QWORD *)(this + 160) = 0;
  if (v222)
  {
    v223 = (unsigned int *)(v222 + 8);
    do
    {
      v224 = __ldaxr(v223);
      v225 = v224 - 1;
    }
    while (__stlxr(v225, v223));
    if (!v225)
    {
      atomic_store(1u, v223);
      v346 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v346 = off_1E31FE290;
      *((_QWORD *)v346 + 1) = v223;
      v355 = v346;
      WTF::ensureOnMainThread();
      v347 = v355;
      v355 = 0;
      if (v347)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v347 + 8))(v347);
    }
  }
  v226 = *(_QWORD *)(this + 152);
  *(_QWORD *)(this + 152) = 0;
  if (v226)
    (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
  v227 = *(_QWORD *)(this + 144);
  if (v227)
  {
    v228 = *(unsigned int *)(v227 - 4);
    if ((_DWORD)v228)
    {
      for (k = 0; k != v228; ++k)
      {
        v230 = *(unsigned int **)(v227 + 8 * k);
        if (v230 != (unsigned int *)-1)
        {
          *(_QWORD *)(v227 + 8 * k) = 0;
          if (v230)
          {
            do
            {
              v231 = __ldaxr(v230);
              v232 = v231 - 1;
            }
            while (__stlxr(v232, v230));
            if (!v232)
            {
              atomic_store(1u, v230);
              WTF::fastFree((WTF *)v230, v214);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v227 - 16), v214);
  }
  v233 = *(WTF **)(this + 136);
  *(_QWORD *)(this + 136) = 0;
  if (v233)
  {
    v234 = (_DWORD *)*((_QWORD *)v233 + 2);
    *((_QWORD *)v233 + 2) = 0;
    if (v234)
    {
      if (v234[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v234 + 8))(v234);
      else
        --v234[2];
    }
    v235 = (unsigned int *)*((_QWORD *)v233 + 1);
    *((_QWORD *)v233 + 1) = 0;
    if (v235)
    {
      do
      {
        v236 = __ldaxr(v235);
        v237 = v236 - 1;
      }
      while (__stlxr(v237, v235));
      if (!v237)
      {
        atomic_store(1u, v235);
        WTF::fastFree((WTF *)v235, v214);
      }
    }
    if (*(_DWORD *)v233)
    {
      *(_QWORD *)v233 = 0;
      *((_QWORD *)v233 + 1) = 0;
      *((_QWORD *)v233 + 2) = 0;
    }
    else
    {
      WTF::fastFree(v233, v214);
    }
  }
  v238 = *(WebCore::ProgressTracker **)(this + 128);
  *(_QWORD *)(this + 128) = 0;
  if (v238)
  {
    WebCore::ProgressTracker::~ProgressTracker(v238);
    if (*(_DWORD *)v239)
    {
      *(_QWORD *)(v239 + 160) = 0;
      *(_OWORD *)(v239 + 128) = 0u;
      *(_OWORD *)(v239 + 144) = 0u;
      *(_OWORD *)(v239 + 96) = 0u;
      *(_OWORD *)(v239 + 112) = 0u;
      *(_OWORD *)(v239 + 64) = 0u;
      *(_OWORD *)(v239 + 80) = 0u;
      *(_OWORD *)(v239 + 32) = 0u;
      *(_OWORD *)(v239 + 48) = 0u;
      *(_OWORD *)v239 = 0u;
      *(_OWORD *)(v239 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v239, v214);
    }
  }
  v240 = *(_QWORD *)(this + 120);
  *(_QWORD *)(this + 120) = 0;
  if (v240)
    (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  v241 = *(_DWORD **)(this + 112);
  *(_QWORD *)(this + 112) = 0;
  if (v241)
  {
    if (v241[57] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v241 + 24))(v241);
    else
      --v241[57];
  }
  v242 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = 0;
  if (v242)
  {
    v243 = *(_QWORD *)(v242 + 8);
    if (__ldaxr((unsigned __int8 *)v243))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v243))
    {
      goto LABEL_451;
    }
    MEMORY[0x19AEA534C](v243);
LABEL_451:
    v245 = *(_QWORD *)(v243 + 8);
    v246 = v245 - 1;
    *(_QWORD *)(v243 + 8) = v245 - 1;
    if (v245 == 1)
    {
      v345 = *(_QWORD *)(v243 + 16);
      v247 = *(_QWORD *)(v243 + 24);
      *(_QWORD *)(v243 + 24) = 0;
      v248 = v345 != 0;
    }
    else
    {
      v247 = 0;
      v248 = 1;
    }
    v249 = __ldxr((unsigned __int8 *)v243);
    if (v249 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v243))
      {
        if (v246)
          goto LABEL_463;
LABEL_459:
        if (v247)
          (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
        if (!v248)
          WTF::fastFree((WTF *)v243, v214);
        goto LABEL_463;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v243);
    if (v246)
      goto LABEL_463;
    goto LABEL_459;
  }
LABEL_463:
  v250 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = 0;
  if (!v250)
    goto LABEL_500;
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)(v250 + 248), v214);
  v252 = *(_QWORD *)(v250 + 240);
  *(_QWORD *)(v250 + 240) = 0;
  if (v252)
  {
    v253 = *(WTF **)(v252 + 144);
    if ((WTF *)(v252 + 160) != v253 && v253 != 0)
    {
      *(_QWORD *)(v252 + 144) = 0;
      *(_DWORD *)(v252 + 152) = 0;
      WTF::fastFree(v253, v251);
    }
    v255 = *(WTF **)v252;
    if (v252 + 16 != *(_QWORD *)v252 && v255 != 0)
    {
      *(_QWORD *)v252 = 0;
      *(_DWORD *)(v252 + 8) = 0;
      WTF::fastFree(v255, v251);
    }
    WTF::fastFree((WTF *)v252, v251);
  }
  v257 = *(_QWORD *)(v250 + 216);
  *(_QWORD *)(v250 + 216) = 0;
  if (v257)
  {
    v258 = *(WTF **)(v257 + 144);
    if ((WTF *)(v257 + 160) != v258 && v258 != 0)
    {
      *(_QWORD *)(v257 + 144) = 0;
      *(_DWORD *)(v257 + 152) = 0;
      WTF::fastFree(v258, v251);
    }
    v260 = *(WTF **)v257;
    if (v257 + 16 != *(_QWORD *)v257 && v260)
    {
      *(_QWORD *)v257 = 0;
      *(_DWORD *)(v257 + 8) = 0;
      WTF::fastFree(v260, v251);
    }
    WTF::fastFree((WTF *)v257, v251);
  }
  v261 = *(unsigned int *)(v250 + 196);
  v262 = *(WTF **)(v250 + 184);
  if ((_DWORD)v261)
  {
    v326 = (WTF *)((char *)v262 + 16 * v261);
    do
    {
      v327 = *((unsigned int *)v262 + 3);
      v328 = *(WTF::StringImpl ****)v262;
      if ((_DWORD)v327)
      {
        v329 = 8 * v327;
        do
        {
          if (*v328)
          {
            v330 = v328;
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v328, (WTF::StringImpl *)v251);
            v328 = v330;
          }
          ++v328;
          v329 -= 8;
        }
        while (v329);
        v328 = *(WTF::StringImpl ****)v262;
      }
      if (v328)
      {
        *(_QWORD *)v262 = 0;
        *((_DWORD *)v262 + 2) = 0;
        WTF::fastFree((WTF *)v328, v251);
      }
      v262 = (WTF *)((char *)v262 + 16);
    }
    while (v262 != v326);
    v262 = *(WTF **)(v250 + 184);
    if (!v262)
      goto LABEL_488;
    goto LABEL_633;
  }
  if (v262)
  {
LABEL_633:
    *(_QWORD *)(v250 + 184) = 0;
    *(_DWORD *)(v250 + 192) = 0;
    WTF::fastFree(v262, v251);
  }
LABEL_488:
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v250 + 168, v251);
  *(_QWORD *)(v250 + 112) = off_1E31F7378;
  v263 = *(_QWORD *)(v250 + 160);
  *(_QWORD *)(v250 + 160) = 0;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v250 + 112));
  v265 = *(_QWORD *)(v250 + 96);
  if (v265)
    WTF::fastFree((WTF *)(v265 - 16), v264);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)(v250 + 80), v264);
  *(_QWORD *)(v250 + 16) = off_1E33DC988;
  v266 = *(_QWORD *)(v250 + 64);
  *(_QWORD *)(v250 + 64) = 0;
  if (v266)
    (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v250 + 16));
  v267 = *(unsigned int **)(v250 + 8);
  *(_QWORD *)(v250 + 8) = 0;
  if (v267)
  {
    do
    {
      v268 = __ldaxr(v267);
      v269 = v268 - 1;
    }
    while (__stlxr(v269, v267));
    if (!v269)
    {
      atomic_store(1u, v267);
      WTF::fastFree((WTF *)v267, v214);
    }
  }
  if (*(_DWORD *)v250)
  {
    *(_QWORD *)(v250 + 272) = 0;
    *(_OWORD *)(v250 + 240) = 0u;
    *(_OWORD *)(v250 + 256) = 0u;
    *(_OWORD *)(v250 + 208) = 0u;
    *(_OWORD *)(v250 + 224) = 0u;
    *(_OWORD *)(v250 + 176) = 0u;
    *(_OWORD *)(v250 + 192) = 0u;
    *(_OWORD *)(v250 + 144) = 0u;
    *(_OWORD *)(v250 + 160) = 0u;
    *(_OWORD *)(v250 + 112) = 0u;
    *(_OWORD *)(v250 + 128) = 0u;
    *(_OWORD *)(v250 + 80) = 0u;
    *(_OWORD *)(v250 + 96) = 0u;
    *(_OWORD *)(v250 + 48) = 0u;
    *(_OWORD *)(v250 + 64) = 0u;
    *(_OWORD *)(v250 + 16) = 0u;
    *(_OWORD *)(v250 + 32) = 0u;
    *(_OWORD *)v250 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v250, v214);
  }
LABEL_500:
  v270 = *(WTF **)(this + 88);
  *(_QWORD *)(this + 88) = 0;
  if (v270)
  {
    v271 = *((_QWORD *)v270 + 1);
    if (v271)
    {
      v272 = *(unsigned int *)(v271 - 4);
      if ((_DWORD)v272)
      {
        v273 = (WebCore::PointerCaptureController::CapturingData **)(v271 + 8);
        do
        {
          if (*(v273 - 1) != (WebCore::PointerCaptureController::CapturingData *)0x7FFFFFFFFFFFFFFFLL)
          {
            v274 = *v273;
            *v273 = 0;
            if (v274)
            {
              if (*(_DWORD *)v274 == 1)
              {
                WebCore::PointerCaptureController::CapturingData::~CapturingData(v274, v214);
                WTF::fastFree(v275, v276);
              }
              else
              {
                --*(_DWORD *)v274;
              }
            }
          }
          v273 += 2;
          --v272;
        }
        while (v272);
      }
      WTF::fastFree((WTF *)(v271 - 16), v214);
    }
    WTF::fastFree(v270, v214);
  }
  v277 = *(WebCore::InspectorController **)(this + 80);
  *(_QWORD *)(this + 80) = 0;
  if (v277)
  {
    WebCore::InspectorController::~InspectorController(v277);
    WTF::fastFree(v278, v279);
  }
  v280 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = 0;
  if (v280)
  {
    *(_QWORD *)(v280 + 32) = off_1E31F7378;
    v281 = *(_QWORD *)(v280 + 80);
    *(_QWORD *)(v280 + 80) = 0;
    if (v281)
      (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v280 + 32));
    v282 = *(unsigned int **)(v280 + 16);
    *(_QWORD *)(v280 + 16) = 0;
    if (v282)
    {
      do
      {
        v283 = __ldaxr(v282);
        v284 = v283 - 1;
      }
      while (__stlxr(v284, v282));
      if (!v284)
      {
        atomic_store(1u, v282);
        WTF::fastFree((WTF *)v282, v214);
      }
    }
    v285 = *(unsigned int **)(v280 + 8);
    *(_QWORD *)(v280 + 8) = 0;
    if (v285)
    {
      do
      {
        v286 = __ldaxr(v285);
        v287 = v286 - 1;
      }
      while (__stlxr(v287, v285));
      if (!v287)
      {
        atomic_store(1u, v285);
        WTF::fastFree((WTF *)v285, v214);
      }
    }
    if (*(_DWORD *)v280)
    {
      *(_OWORD *)(v280 + 64) = 0u;
      *(_OWORD *)(v280 + 80) = 0u;
      *(_OWORD *)(v280 + 32) = 0u;
      *(_OWORD *)(v280 + 48) = 0u;
      *(_OWORD *)v280 = 0u;
      *(_OWORD *)(v280 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v280, v214);
    }
  }
  v288 = *(WebCore::DragController **)(this + 64);
  *(_QWORD *)(this + 64) = 0;
  if (v288)
  {
    WebCore::DragController::~DragController(v288, v214);
    WTF::fastFree(v289, v290);
  }
  v291 = *(WTF **)(this + 56);
  *(_QWORD *)(this + 56) = 0;
  if (v291)
  {
    v292 = *((_QWORD *)v291 + 3);
    *((_QWORD *)v291 + 3) = 0;
    if (v292)
    {
      if (*(_DWORD *)(v292 + 24) == 2)
      {
        if ((*(_WORD *)(v292 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v292, v214);
      }
      else
      {
        *(_DWORD *)(v292 + 24) -= 2;
      }
    }
    WTF::fastFree(v291, v214);
  }
  v293 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = 0;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = *(uint64_t **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v294)
  {
    if (*v294)
      WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable(*v294, v214);
    WTF::fastFree((WTF *)v294, v214);
  }
  v295 = *(_QWORD *)(this + 16);
  if (v295)
  {
    *(_QWORD *)(v295 + 8) = 0;
    v296 = *(unsigned int **)(this + 16);
    *(_QWORD *)(this + 16) = 0;
    if (v296)
    {
      do
      {
        v297 = __ldaxr(v296);
        v298 = v297 - 1;
      }
      while (__stlxr(v298, v296));
      if (!v298)
      {
        atomic_store(1u, v296);
        WTF::fastFree((WTF *)v296, v214);
      }
    }
  }
  else
  {
    *(_QWORD *)(this + 16) = 0;
  }
  v299 = *(_QWORD *)(this + 8);
  if (v299)
  {
    v300 = *(unsigned int *)(v299 - 4);
    if ((_DWORD)v300)
    {
      v301 = (uint64_t *)(v299 + 16);
      do
      {
        if (*(v301 - 2) != -1)
        {
          v302 = *v301;
          *v301 = 0;
          if (v302)
            (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
        }
        v301 += 3;
        --v300;
      }
      while (v300);
    }
    WTF::fastFree((WTF *)(v299 - 16), v214);
  }
}

void sub_196017044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Page::forEachLocalFrame(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;

  v2 = *(_QWORD *)(result + 160);
  if (v2)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    v6 = 0;
    while (1)
    {
      do
      {
LABEL_3:
        v7 = (_QWORD *)v2;
        if (!*(_BYTE *)(v2 + 144))
        {
          v8 = v4;
          if (v4 == (_DWORD)v5)
          {
            v9 = v4 + ((unint64_t)v4 >> 2);
            if (v9 >= 0x10)
              v10 = v9 + 1;
            else
              v10 = 16;
            if (v10 <= (unint64_t)v4 + 1)
              v5 = v4 + 1;
            else
              v5 = v10;
            if (v5 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v11 = (char *)WTF::fastMalloc((WTF *)(8 * v5));
            result = (uint64_t)memcpy(v11, v6, 8 * v4);
            if (v6)
            {
              if (v11 == v6)
              {
                v11 = 0;
                LODWORD(v5) = 0;
              }
              result = WTF::fastFree((WTF *)v6, a2);
            }
            v6 = v11;
            v12 = (unsigned int *)(v7 + 1);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 + 1, v12));
            *(_QWORD *)&v11[8 * v4++] = v7;
          }
          else
          {
            ++v4;
            v14 = (unsigned int *)(v2 + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
            *(_QWORD *)&v6[8 * v8] = v7;
          }
        }
        v2 = v7[11];
      }
      while (v2);
      v16 = *(_QWORD *)(v7[6] + 8);
      if (!v16)
        break;
      v2 = v7[9];
      if (!v2)
      {
        while (1)
        {
          v17 = *(_QWORD *)(v16 + 56);
          if (!v17)
            goto LABEL_29;
          v16 = *(_QWORD *)(v17 + 8);
          if (!v16)
            goto LABEL_29;
          v2 = *(_QWORD *)(v16 + 72);
          if (v2)
            goto LABEL_3;
        }
      }
    }
LABEL_29:
    if (v4)
    {
      v18 = &v6[8 * v4];
      v19 = 8 * v4;
      v20 = (uint64_t *)v6;
      do
      {
        v21 = *v20++;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v21);
        v19 -= 8;
      }
      while (v19);
      v22 = v6;
      do
      {
        v23 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v23)
        {
          v24 = (unsigned int *)(v23 + 8);
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            atomic_store(1u, v24);
            v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v27 = off_1E31FE290;
            v27[1] = v24;
            v28 = v27;
            WTF::ensureOnMainThread();
            result = (uint64_t)v28;
            if (v28)
              result = (*(uint64_t (**)(_QWORD *))(*v28 + 8))(v28);
          }
        }
        v22 += 8;
      }
      while (v22 != v18);
    }
    if (v6)
      return WTF::fastFree((WTF *)v6, a2);
  }
  return result;
}

WebCore::ImageAnalysisQueue **std::unique_ptr<WebCore::ImageAnalysisQueue>::~unique_ptr[abi:sn180100](WebCore::ImageAnalysisQueue **a1, void *a2)
{
  WebCore::ImageAnalysisQueue *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::ImageAnalysisQueue::~ImageAnalysisQueue(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

WebCore::ImageOverlayController **std::unique_ptr<WebCore::ImageOverlayController>::~unique_ptr[abi:sn180100](WebCore::ImageOverlayController **a1, void *a2)
{
  WebCore::ImageOverlayController *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::ImageOverlayController::~ImageOverlayController(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WebCore::networkStateChanged(uint64_t this, void *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  unsigned int **v23;
  unsigned int **v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Inspector::ApplicationCacheFrontendDispatcher *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  WTF *v70;

  v2 = this;
  {
    if (!WebCore::allPages(void)::set || !*(_DWORD *)(WebCore::allPages(void)::set - 12))
      goto LABEL_78;
    v3 = *(unsigned int *)(WebCore::allPages(void)::set - 4);
    if ((_DWORD)v3)
    {
      v4 = 8 * v3;
      v5 = WebCore::allPages(void)::set;
      while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
      {
        v5 += 8;
        v4 -= 8;
        if (!v4)
          goto LABEL_78;
      }
    }
    else
    {
      v5 = WebCore::allPages(void)::set;
    }
    v6 = WebCore::allPages(void)::set + 8 * v3;
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = *(_QWORD *)v5;
      v11 = &dword_1ECE90000;
      do
      {
        v12 = v7;
        v13 = *(_QWORD *)(v10 + 8);
        v14 = *(_QWORD *)(v13 + 160);
        if (v14)
        {
          while (1)
          {
LABEL_13:
            v15 = (_QWORD *)v14;
            if (!*(_BYTE *)(v14 + 144))
            {
              v16 = v9;
              if (v9 == v8)
              {
                v17 = ((unint64_t)v8 >> 2) + v8;
                if (v17 >= 0x10)
                  v18 = v17 + 1;
                else
                  v18 = 16;
                v69 = v9;
                if (v18 <= (unint64_t)v9 + 1)
                  v19 = v9 + 1;
                else
                  v19 = v18;
                if (v19 >> 29)
                {
                  __break(0xC471u);
                  return this;
                }
                v20 = v12;
                v21 = WTF::fastMalloc((WTF *)(8 * v19));
                v22 = (WTF *)v21;
                v68 = v8;
                if (v8)
                {
                  v23 = (unsigned int **)v12;
                  v24 = (unsigned int **)((char *)v12 + 8 * v9);
                  v25 = (_QWORD *)v21;
                  do
                  {
                    v26 = *v23;
                    *v23 = 0;
                    *v25 = v26;
                    v27 = *v23;
                    *v23 = 0;
                    if (v27)
                    {
                      do
                      {
                        v28 = __ldaxr(v27);
                        v29 = v28 - 1;
                      }
                      while (__stlxr(v29, v27));
                      if (!v29)
                      {
                        atomic_store(1u, v27);
                        WTF::fastFree((WTF *)v27, a2);
                      }
                    }
                    ++v25;
                    ++v23;
                  }
                  while (v23 != v24);
                }
                if (v20)
                {
                  if (v22 == v20)
                  {
                    LODWORD(v19) = 0;
                    v12 = 0;
                  }
                  else
                  {
                    v12 = v22;
                  }
                  WTF::fastFree(v20, a2);
                }
                else
                {
                  v12 = v22;
                }
                v11 = &dword_1ECE90000;
                this = v15[2];
                if (this)
                  goto LABEL_120;
                this = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)this = 1;
                *(_QWORD *)(this + 8) = v15;
                v37 = (unsigned int *)v15[2];
                v15[2] = this;
                if (!v37)
                  goto LABEL_120;
                do
                {
                  v38 = __ldaxr(v37);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, v37));
                if (!v39)
                {
                  atomic_store(1u, v37);
                  WTF::fastFree((WTF *)v37, a2);
                }
                this = v15[2];
                if (this)
                {
LABEL_120:
                  do
                    v31 = __ldaxr((unsigned int *)this);
                  while (__stlxr(v31 + 1, (unsigned int *)this));
                }
                *((_QWORD *)v12 + v69) = this;
                v9 = v68 + 1;
                v8 = v19;
              }
              else
              {
                this = *(_QWORD *)(v14 + 16);
                if (this)
                  goto LABEL_121;
                this = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)this = 1;
                *(_QWORD *)(this + 8) = v15;
                v34 = (unsigned int *)v15[2];
                v15[2] = this;
                if (!v34)
                  goto LABEL_121;
                do
                {
                  v35 = __ldaxr(v34);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, v34));
                if (!v36)
                {
                  atomic_store(1u, v34);
                  WTF::fastFree((WTF *)v34, a2);
                }
                this = v15[2];
                if (this)
                {
LABEL_121:
                  do
                    v30 = __ldaxr((unsigned int *)this);
                  while (__stlxr(v30 + 1, (unsigned int *)this));
                }
                ++v9;
                *((_QWORD *)v12 + v16) = this;
              }
            }
            v14 = v15[11];
            if (!v14)
            {
              v32 = *(_QWORD *)(v15[6] + 8);
              if (!v32)
                goto LABEL_63;
              v14 = v15[9];
              if (!v14)
              {
                while (1)
                {
                  v33 = *(_QWORD *)(v32 + 56);
                  if (!v33)
                    break;
                  v32 = *(_QWORD *)(v33 + 8);
                  if (!v32)
                    break;
                  v14 = *(_QWORD *)(v32 + 72);
                  if (v14)
                    goto LABEL_13;
                }
LABEL_63:
                v13 = *(_QWORD *)(*(_QWORD *)v5 + 8);
                break;
              }
            }
          }
        }
        ++*(_DWORD *)v13;
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 80) + 8) + 88);
          if (v43)
          {
            v44 = v6;
            v45 = v5;
            v46 = *(Inspector::ApplicationCacheFrontendDispatcher **)(v43 + 40);
            v47 = (_QWORD *)*((_QWORD *)v11 + 415);
            v48 = v47[1];
            if (!v48)
            {
              v48 = (*(uint64_t (**)(_QWORD))(*v47 + 16))(*((_QWORD *)v11 + 415));
              v47[1] = v48;
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v48 + 128))(v48);
            this = Inspector::ApplicationCacheFrontendDispatcher::networkStateUpdated(v46);
            v5 = v45;
            v6 = v44;
          }
        }
        if (*(_DWORD *)v13 == 1)
        {
          WebCore::Page::~Page(v13);
          this = WTF::fastFree(v41, v42);
        }
        else
        {
          --*(_DWORD *)v13;
        }
        v5 += 8;
        v7 = v12;
        if (v5 == v6)
          break;
        while (1)
        {
          v10 = *(_QWORD *)v5;
          if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
            break;
          v5 += 8;
          if (v5 == v6)
            goto LABEL_79;
        }
      }
      while (v5 != v6);
    }
    else
    {
LABEL_78:
      v9 = 0;
      v7 = 0;
    }
  }
  else
  {
    v9 = 0;
    v7 = 0;
    WebCore::allPages(void)::set = 0;
  }
LABEL_79:
  v49 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if ((v2 & 1) != 0)
  {
    if (!v49 || (v50 = *(_QWORD *)(v49 + 96)) == 0)
    {
      this = WebCore::threadGlobalDataSlow((WebCore *)this);
      v50 = this;
    }
    v51 = *(_QWORD *)(v50 + 40);
    if (!v51)
    {
      this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v50);
      v51 = *(_QWORD *)(v50 + 40);
    }
    v52 = (_QWORD *)(v51 + 1368);
    if (!v9)
      goto LABEL_113;
  }
  else
  {
    if (!v49 || (v53 = *(_QWORD *)(v49 + 96)) == 0)
    {
      this = WebCore::threadGlobalDataSlow((WebCore *)this);
      v53 = this;
    }
    v54 = *(_QWORD *)(v53 + 40);
    if (!v54)
    {
      this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v53);
      v54 = *(_QWORD *)(v53 + 40);
    }
    v52 = (_QWORD *)(v54 + 1360);
    if (!v9)
      goto LABEL_113;
  }
  v55 = (uint64_t *)((char *)v7 + 8 * v9);
  v56 = 8 * v9;
  v70 = v7;
  v57 = v7;
  do
  {
    if (*(_QWORD *)v57)
    {
      v58 = *(_QWORD *)(*(_QWORD *)v57 + 8);
      if (v58)
      {
        v59 = *(_QWORD *)(v58 + 296);
        if (v59)
        {
          *(_DWORD *)(v59 + 24) += 2;
          v60 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v60);
          *(_QWORD *)v60 = off_1E33A4B48;
          *(_QWORD *)(v60 + 8) = 0;
          v62 = *v52 != 0;
          v63 = *(_DWORD *)(v60 + 20) & 0xFFC00000;
          *(_DWORD *)(v60 + 16) = 1;
          *(_DWORD *)(v60 + 20) = v63 | v62 | 0x1E8200;
          v64 = (_DWORD *)*v52;
          if (*v52)
            *v64 += 2;
          *(_QWORD *)(v60 + 24) = v64;
          *(_QWORD *)(v60 + 32) = 0;
          *(_QWORD *)(v60 + 40) = 0;
          *(_QWORD *)(v60 + 48) = 0;
          *(_QWORD *)(v60 + 56) = v61;
          *(_QWORD *)(v60 + 64) = 0;
          WebCore::Document::dispatchWindowEvent((WTF *)v59, (WebCore::Event *)v60, 0);
          if (*(_DWORD *)(v60 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
          else
            --*(_DWORD *)(v60 + 16);
          if (*(_DWORD *)(v59 + 24) == 2)
          {
            if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v59, a2);
          }
          else
          {
            *(_DWORD *)(v59 + 24) -= 2;
          }
        }
      }
    }
    v57 = (WTF *)((char *)v57 + 8);
    v56 -= 8;
  }
  while (v56);
  v7 = v70;
  v65 = (uint64_t *)v70;
  do
  {
    this = *v65;
    *v65 = 0;
    if (this)
    {
      do
      {
        v66 = __ldaxr((unsigned int *)this);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, (unsigned int *)this));
      if (!v67)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    ++v65;
  }
  while (v65 != v55);
LABEL_113:
  if (v7)
    return WTF::fastFree(v7, a2);
  return this;
}

uint64_t WebCore::Page::clearPreviousItemFromAllPages(uint64_t this, WebCore::HistoryItem *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  WebCore::HistoryController *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;

  {
    if (WebCore::allPages(void)::set && *(_DWORD *)(WebCore::allPages(void)::set - 12))
    {
      v2 = this;
      v3 = *(unsigned int *)(WebCore::allPages(void)::set - 4);
      if ((_DWORD)v3)
      {
        v4 = 8 * v3;
        for (i = (uint64_t *)WebCore::allPages(void)::set; (unint64_t)(*i + 1) <= 1; ++i)
        {
          v4 -= 8;
          if (!v4)
            return this;
        }
      }
      else
      {
        i = (uint64_t *)WebCore::allPages(void)::set;
      }
      v6 = WebCore::allPages(void)::set + 8 * v3;
      if (i != (uint64_t *)v6)
      {
        v7 = *i;
LABEL_12:
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 160);
        if (v8 && *(_BYTE *)(v8 + 144) == 0)
        {
          v10 = (unsigned int *)(v8 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          v12 = *(WebCore::HistoryController **)(v8 + 184);
          v13 = *(_DWORD *)v12 + 1;
          *(_DWORD *)v12 = v13;
          v14 = *((_QWORD *)v12 + 3);
          if (v14 == v2)
          {
            this = WebCore::HistoryController::clearPreviousItem(v12, a2);
            v13 = *(_DWORD *)v12;
          }
          if (!v13)
          {
            __break(0xC471u);
            JUMPOUT(0x196017A44);
          }
          *(_DWORD *)v12 = v13 - 1;
          do
          {
            v15 = __ldaxr(v10);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v10));
          if (!v16)
          {
            atomic_store(1u, v10);
            v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v17 = off_1E31FE290;
            v17[1] = v10;
            v18 = (uint64_t)v17;
            WTF::ensureOnMainThread();
            this = v18;
            if (v18)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          }
          if (v14 != v2)
          {
            while (++i != (uint64_t *)v6)
            {
              v7 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                if (i != (uint64_t *)v6)
                  goto LABEL_12;
                return this;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    WebCore::allPages(void)::set = 0;
  }
  return this;
}

uint64_t WebCore::Page::disabledAdaptations(WebCore::Page *this, void *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *((_QWORD *)this + 20);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(v2 + 296);
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 2;
  v4 = *(unsigned __int8 *)(v5 + 3365);
  if (v6)
  {
    *(_DWORD *)(v5 + 24) = v6;
  }
  else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  return v4;
}

uint64_t WebCore::Page::viewportArguments@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::Page *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD *)(this + 160);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (*(_BYTE *)(v3 + 144))
  {
    v11 = 0;
    goto LABEL_16;
  }
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = *(_QWORD *)(v3 + 296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v8 + 2;
    v9 = *(_QWORD *)(v3 + 24);
    if (!v9 || (v10 = *(WebCore::Page **)(v9 + 8)) == 0)
    {
      v11 = 0;
      if (v8)
        goto LABEL_13;
      goto LABEL_28;
    }
    ++*(_DWORD *)v10;
    this = WebCore::Page::outermostFullscreenDocument(v10);
    if (this)
    {
      v11 = this;
      *(_DWORD *)(this + 24) += 2;
    }
    else
    {
      v11 = v7;
      v7 = 0;
    }
    if (*(_DWORD *)v10 != 1)
    {
      --*(_DWORD *)v10;
      if (!v7)
        goto LABEL_14;
LABEL_12:
      v8 = *(_DWORD *)(v7 + 24) - 2;
      if (*(_DWORD *)(v7 + 24) != 2)
      {
LABEL_13:
        *(_DWORD *)(v7 + 24) = v8;
        goto LABEL_14;
      }
LABEL_28:
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v7);
      goto LABEL_14;
    }
    WebCore::Page::~Page(v10);
    this = WTF::fastFree(v21, v22);
    if (v7)
      goto LABEL_12;
  }
  else
  {
    v11 = 0;
  }
  do
  {
LABEL_14:
    v12 = __ldaxr(v4);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v4));
  if (!v13)
  {
    atomic_store(1u, v4);
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v23 = off_1E31FE290;
    v23[1] = v4;
    v25 = (uint64_t)v23;
    WTF::ensureOnMainThread();
    this = v25;
    if (v25)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  do
  {
LABEL_16:
    v14 = __ldaxr(v4);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v4));
  if (!v15)
  {
    atomic_store(1u, v4);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E31FE290;
    v24[1] = v4;
    v26 = (uint64_t)v24;
    WTF::ensureOnMainThread();
    this = v26;
    if (v26)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  if (v11)
  {
    this = WebCore::Document::viewportArguments(v11, a2);
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    __asm { FMOV            V0.4S, #-1.0 }
    *(_OWORD *)(a2 + 4) = _Q0;
    *(_OWORD *)(a2 + 20) = _Q0;
    *(_OWORD *)(a2 + 36) = _Q0;
    *(_WORD *)(a2 + 52) = 0;
  }
  return this;
}

uint64_t WebCore::Page::protectedMainFrame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 160);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *a2 = v2;
  return this;
}

uint64_t *WTF::RefPtr<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::operator=<WebCore::ScrollingCoordinator>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v13;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (!v4)
    return a1;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v13 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v13 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (v8)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v8)
    return a1;
LABEL_14:
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!v10)
    WTF::fastFree((WTF *)v5, a2);
  return a1;
}

uint64_t *WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

unsigned __int8 **WebCore::Page::protectedScrollingCoordinator@<X0>(WebCore::Page *this@<X0>, unsigned __int8 ***a2@<X8>)
{
  unsigned __int8 **result;
  unsigned __int8 **v4;

  result = (unsigned __int8 **)WebCore::Page::scrollingCoordinator(this);
  v4 = result;
  if (result)
    result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref(result + 1);
  *a2 = v4;
  return result;
}

_QWORD *WebCore::Page::scrollingStateTreeAsText@<X0>(WebCore::Page *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  _QWORD *result;
  _QWORD *v12;
  uint64_t v13;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;

  v4 = *((_QWORD *)this + 20);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 296);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      v7 = *(_QWORD *)(v6 + 528);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_DWORD **)(v8 + 288);
          if (v9)
          {
            ++v9[2];
            WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(v9, (void *)8);
            if (v9[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
            else
              --v9[2];
          }
        }
      }
      WebCore::Document::updateTouchEventRegions(v6);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
  }
  result = (_QWORD *)WebCore::Page::scrollingCoordinator(this);
  if (!result)
  {
    *a2 = 0;
    return result;
  }
  v12 = result;
  v13 = result[1];
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_19:
  ++*(_QWORD *)(v13 + 8);
  v15 = __ldxr((unsigned __int8 *)v13);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v12 + 376))(v12, 0);
  v17 = v12[1];
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_28;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v17);
LABEL_28:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v24 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v24 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_35:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return result;
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_35;
  if (v20)
    return result;
LABEL_36:
  if (v21)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v22)
    return (_QWORD *)WTF::fastFree((WTF *)v17, v16);
  return result;
}

_QWORD *WebCore::Page::synchronousScrollingReasonsAsText@<X0>(WebCore::Page *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  _QWORD *result;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;

  v4 = *((_QWORD *)this + 20);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 296);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      WebCore::Document::updateLayout(v6, 0, 0);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
  }
  result = (_QWORD *)WebCore::Page::scrollingCoordinator(this);
  if (!result)
  {
    *a2 = 0;
    return result;
  }
  v10 = result;
  v11 = result[1];
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_14;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v11);
LABEL_14:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_18:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  v14 = *(_QWORD *)(*(_QWORD *)(v10[3] + 8) + 160);
  if (v14)
    v15 = *(_BYTE *)(v14 + 144) == 0;
  else
    v15 = 0;
  if (v15 && (v16 = *(_QWORD *)(v14 + 288)) != 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 328) + 296);
    if (v17 && (v18 = *(_QWORD *)(v17 + 1944)) != 0 && (v19 = *(_QWORD *)(*(_QWORD *)(v18 + 144) + 256)) != 0)
    {
      v20 = *(_QWORD *)(v19 + 224);
      v21 = *(_QWORD *)(v19 + 232);
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v22 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v10 + 360))(v10, v20, v21);
    result = WebCore::ScrollingCoordinator::synchronousScrollingReasonsAsText(v22, a2);
  }
  else
  {
    *a2 = 0;
  }
  v23 = v10[1];
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
    goto LABEL_35;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v23);
LABEL_35:
  v25 = *(_QWORD *)(v23 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v23 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v30 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 24) = 0;
    v28 = v30 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v23);
  if (v29 != 1)
  {
    __clrex();
LABEL_42:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (v26)
      return result;
    goto LABEL_43;
  }
  if (__stlxr(0, (unsigned __int8 *)v23))
    goto LABEL_42;
  if (v26)
    return result;
LABEL_43:
  if (v27)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (!v28)
    return (_QWORD *)WTF::fastFree((WTF *)v23, v9);
  return result;
}

uint64_t WebCore::Page::nonFastScrollableRectsForTesting@<X0>(WebCore::Page *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  float *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  BOOL v15;
  WebCore::Document *v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  WTF *v24;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t result;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::FloatQuad *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  uint64_t v56;
  unint64_t v57;
  WTF *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  _OWORD *v66;
  WTF *v67;
  __int128 v68;
  WTF *v69;
  uint64_t v70;
  __int128 v71;
  WTF *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  WTF *v77;
  WTF *v79;
  WTF *v81;
  WTF *v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  __int128 v86;
  WTF *v87[2];

  v4 = *((_QWORD *)this + 20);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 296);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      WebCore::Document::updateLayout(v6, 0, 0);
      WebCore::Document::updateTouchEventRegions(v6);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
  }
  v8 = WebCore::Page::scrollingCoordinator(this);
  v10 = (float *)v8;
  if (!v8)
  {
    v19 = 0;
    v18 = 0;
    goto LABEL_64;
  }
  v11 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_14:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 3) + 8) + 160);
  if (v14)
    v15 = *(_BYTE *)(v14 + 144) == 0;
  else
    v15 = 0;
  if (v15
    && (v16 = *(WebCore::Document **)(v14 + 296)) != 0
    && (v17 = *((_QWORD *)v16 + 243)) != 0
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 24) + 8) + 40) + 8) + 3405))
  {
    WebCore::Document::eventTrackingRegions(v16, (uint64_t)&v86);
    v20 = v87[1];
    if (v87[1])
    {
      v53 = *((unsigned int *)v87[1] - 1);
      v54 = (WTF *)((char *)v87[1] + 32 * v53);
      v55 = v54;
      if (*((_DWORD *)v87[1] - 3))
      {
        v55 = v87[1];
        if ((_DWORD)v53)
        {
          v56 = 32 * v53;
          v55 = v87[1];
          while (*(unsigned __int8 *)v55 >= 0xFEu)
          {
            v55 = (WTF *)((char *)v55 + 32);
            v56 -= 32;
            if (!v56)
            {
              v55 = v54;
              break;
            }
          }
        }
      }
      v81 = (WTF *)((char *)v87[1] + 32 * *((unsigned int *)v87[1] - 1));
      if (v81 == v55)
      {
        v19 = 0;
        v18 = 0;
      }
      else
      {
        v18 = 0;
        v57 = 0;
        v19 = 0;
        v58 = (WTF *)((char *)v87[1] + 32 * *((unsigned int *)v87[1] - 1));
        do
        {
          WebCore::Region::rects((uint64_t)v55 + 8, (uint64_t)&v82);
          v59 = v84;
          v60 = v84 + (unint64_t)v19;
          if (v60 > v57)
          {
            v61 = v57 + (v57 >> 2);
            if (v61 >= 0x10)
              v62 = v61 + 1;
            else
              v62 = 16;
            if (v62 <= v60)
              v57 = v84 + (unint64_t)v19;
            else
              v57 = v62;
            if (v57 >> 28)
              goto LABEL_138;
            v63 = WTF::fastMalloc((WTF *)(16 * v57));
            v64 = (WTF *)v63;
            if (v19)
            {
              v65 = 16 * v19;
              v66 = (_OWORD *)v63;
              v67 = v18;
              do
              {
                v68 = *(_OWORD *)v67;
                v67 = (WTF *)((char *)v67 + 16);
                *v66++ = v68;
                v65 -= 16;
              }
              while (v65);
            }
            v57 = v57;
            if (v18)
            {
              if ((WTF *)v63 == v18)
              {
                v57 = 0;
                v64 = 0;
              }
              WTF::fastFree(v18, v9);
            }
            v59 = v84;
            v18 = v64;
            v58 = v81;
          }
          v69 = v82;
          if ((_DWORD)v59)
          {
            v70 = 16 * v59;
            do
            {
              v71 = *(_OWORD *)v69;
              v69 = (WTF *)((char *)v69 + 16);
              *((_OWORD *)v18 + v19++) = v71;
              v70 -= 16;
            }
            while (v70);
            v69 = v82;
          }
          if (&v85 != (uint64_t *)v69 && v69 != 0)
          {
            v82 = 0;
            v83 = 0;
            WTF::fastFree(v69, v9);
          }
          v73 = (WTF *)((char *)v55 + 32);
          v55 = v54;
          if (v73 != v54)
          {
            v55 = v73;
            while (*(unsigned __int8 *)v55 >= 0xFEu)
            {
              v55 = (WTF *)((char *)v55 + 32);
              if (v55 == v54)
              {
                v55 = v54;
                break;
              }
            }
          }
        }
        while (v55 != v58);
        v20 = v87[1];
      }
      if (v20)
      {
        v74 = *((unsigned int *)v20 - 1);
        if ((_DWORD)v74)
        {
          v75 = (uint64_t *)((char *)v20 + 24);
          do
          {
            if (*((unsigned __int8 *)v75 - 24) != 254)
            {
              v76 = *v75;
              *v75 = 0;
              if (v76)
              {
                v77 = *(WTF **)(v76 + 144);
                if ((WTF *)(v76 + 160) != v77 && v77 != 0)
                {
                  *(_QWORD *)(v76 + 144) = 0;
                  *(_DWORD *)(v76 + 152) = 0;
                  WTF::fastFree(v77, v9);
                }
                v79 = *(WTF **)v76;
                if (v76 + 16 != *(_QWORD *)v76 && v79 != 0)
                {
                  *(_QWORD *)v76 = 0;
                  *(_DWORD *)(v76 + 8) = 0;
                  WTF::fastFree(v79, v9);
                }
                WTF::fastFree((WTF *)v76, v9);
              }
            }
            v75 += 4;
            --v74;
          }
          while (v74);
        }
        WTF::fastFree((WTF *)((char *)v20 - 16), v9);
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v86 = 0u;
    *(_OWORD *)v87 = 0u;
  }
  v21 = v87[0];
  v87[0] = 0;
  if (v21)
  {
    v22 = (WTF *)*((_QWORD *)v21 + 18);
    if ((WTF *)((char *)v21 + 160) != v22 && v22 != 0)
    {
      *((_QWORD *)v21 + 18) = 0;
      *((_DWORD *)v21 + 38) = 0;
      WTF::fastFree(v22, v9);
    }
    v24 = *(WTF **)v21;
    if ((WTF *)((char *)v21 + 16) != *(WTF **)v21 && v24 != 0)
    {
      *(_QWORD *)v21 = 0;
      *((_DWORD *)v21 + 2) = 0;
      WTF::fastFree(v24, v9);
    }
    WTF::fastFree(v21, v9);
  }
  v26 = *((_QWORD *)v10 + 1);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_46;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_46:
  v28 = *(_QWORD *)(v26 + 8);
  v29 = v28 - 1;
  *(_QWORD *)(v26 + 8) = v28 - 1;
  if (v28 == 1)
  {
    v52 = *(_QWORD *)(v26 + 16);
    v30 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v26 + 24) = 0;
    v31 = v52 != 0;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  v32 = __ldxr((unsigned __int8 *)v26);
  if (v32 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v26))
    {
      if (!v29)
        goto LABEL_54;
      goto LABEL_58;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v26);
  if (!v29)
  {
LABEL_54:
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    if (!v31)
      WTF::fastFree((WTF *)v26, v9);
  }
LABEL_58:
  if (v19)
  {
    if (v19 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x196018968);
    }
    v10 = (float *)WTF::fastMalloc((WTF *)(32 * v19));
    bzero(v10, 32 * v19);
    v33 = 0;
    v34 = v10 + 4;
    do
    {
      v35 = (float)*(int *)((char *)v18 + v33 + 4);
      v36 = (float)*(int *)((char *)v18 + v33);
      v37 = (float)*(int *)((char *)v18 + v33 + 12) + v35;
      v38 = (float)*(int *)((char *)v18 + v33 + 8) + v36;
      *(v34 - 4) = v36;
      *(v34 - 3) = v35;
      *(v34 - 2) = v38;
      *(v34 - 1) = v35;
      *v34 = v38;
      v34[1] = v37;
      v34[2] = v36;
      v34[3] = v37;
      v33 += 16;
      v34 += 8;
    }
    while (16 * v19 != v33);
  }
  else
  {
    v10 = 0;
  }
LABEL_64:
  result = WTF::fastMalloc((WTF *)0x18);
  v41 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (v19)
  {
    if (v19 >> 29)
    {
LABEL_138:
      __break(0xC471u);
      JUMPOUT(0x196018960);
    }
    v42 = WTF::fastMalloc((WTF *)(8 * v19));
    v43 = 0;
    *(_DWORD *)(v41 + 16) = v19;
    *(_QWORD *)(v41 + 8) = v42;
    v44 = (WebCore::FloatQuad *)v10;
    do
    {
      v45 = WebCore::FloatQuad::boundingBox(v44);
      v47 = v46;
      v49 = v48;
      v51 = v50;
      result = bmalloc::api::isoAllocate();
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 1;
      *(double *)(result + 16) = v45;
      *(double *)(result + 24) = v47;
      *(double *)(result + 32) = v49;
      *(double *)(result + 40) = v51;
      *(_QWORD *)(v42 + 8 * v43) = result;
      *(_DWORD *)(v41 + 20) = v43 + 1;
      v44 = (WebCore::FloatQuad *)((char *)v44 + 32);
      ++v43;
    }
    while (v19 != v43);
  }
  *a2 = v41;
  if (v10)
    result = WTF::fastFree((WTF *)v10, v40);
  if (v18)
    return WTF::fastFree(v18, v40);
  return result;
}

uint64_t WebCore::Page::touchEventRectsForEventForTesting@<X0>(WebCore::Page *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  BOOL v16;
  WebCore::Document *v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF *v27;
  WTF *v28;
  WTF *v30;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  WTF *v36;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t result;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::FloatQuad *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  WTF *v74;
  WTF *v76;
  WTF *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  _QWORD v82[2];
  WTF *v83;
  __int128 v84;
  WTF *v85[2];

  v6 = *((_QWORD *)this + 20);
  if (v6)
    v7 = *(_BYTE *)(v6 + 144) == 0;
  else
    v7 = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 296);
    if (v8)
    {
      *(_DWORD *)(v8 + 24) += 2;
      WebCore::Document::updateLayout(v8, 0, 0);
      WebCore::Document::updateTouchEventRegions(v8);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  v10 = WebCore::Page::scrollingCoordinator(this);
  v11 = (float *)v10;
  if (!v10)
  {
    v25 = 0;
    v21 = 0;
    goto LABEL_92;
  }
  v12 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_14:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 3) + 8) + 160);
  if (v15)
    v16 = *(_BYTE *)(v15 + 144) == 0;
  else
    v16 = 0;
  if (!v16
    || (v17 = *(WebCore::Document **)(v15 + 296)) == 0
    || (v18 = *((_QWORD *)v17 + 243)) == 0
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8) + 40) + 8) + 3405))
  {
    v84 = 0u;
    *(_OWORD *)v85 = 0u;
LABEL_28:
    v82[0] = 0;
    v82[1] = 0;
    v83 = 0;
    goto LABEL_29;
  }
  WebCore::Document::eventTrackingRegions(v17, (uint64_t)&v84);
  if (!v85[1])
    goto LABEL_28;
  v64 = *((_DWORD *)v85[1] - 2);
  v65 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v66 = (v65 ^ (v65 >> 6)) + ~((v65 ^ (v65 >> 6)) << 11);
  v67 = v64 & (v66 ^ HIWORD(v66));
  v68 = *((unsigned __int8 *)v85[1] + 32 * v67);
  if (v68 != a2)
  {
    v69 = 1;
    while (v68 != 255)
    {
      v67 = ((_DWORD)v67 + v69) & v64;
      v68 = *((unsigned __int8 *)v85[1] + 32 * v67);
      ++v69;
      if (v68 == a2)
        goto LABEL_106;
    }
    goto LABEL_28;
  }
LABEL_106:
  WebCore::Region::Region((uint64_t)v82, (WTF *)((char *)v85[1] + 32 * v67 + 8));
LABEL_29:
  WebCore::Region::rects((uint64_t)v82, (uint64_t)&v78);
  v20 = v80;
  if (!v80)
  {
    v21 = 0;
    v25 = 0;
LABEL_38:
    v22 = v78;
    goto LABEL_40;
  }
  if (v80 <= 0x10)
    v20 = 16;
  if (v20 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x196018F6CLL);
  }
  v21 = (WTF *)WTF::fastMalloc((WTF *)(16 * v20));
  v22 = v78;
  if (v80)
  {
    v23 = 0;
    v24 = 16 * v80;
    v25 = ((unint64_t)(v24 - 16) >> 4) + 1;
    do
    {
      *(_OWORD *)((char *)v21 + v23) = *(_OWORD *)((char *)v22 + v23);
      v23 += 16;
    }
    while (v24 != v23);
    goto LABEL_38;
  }
  v25 = 0;
LABEL_40:
  if (&v81 != (uint64_t *)v22 && v22 != 0)
  {
    v78 = 0;
    v79 = 0;
    WTF::fastFree(v22, v19);
  }
  v27 = v83;
  v83 = 0;
  if (v27)
  {
    v28 = (WTF *)*((_QWORD *)v27 + 18);
    if ((WTF *)((char *)v27 + 160) != v28 && v28 != 0)
    {
      *((_QWORD *)v27 + 18) = 0;
      *((_DWORD *)v27 + 38) = 0;
      WTF::fastFree(v28, v19);
    }
    v30 = *(WTF **)v27;
    if ((WTF *)((char *)v27 + 16) != *(WTF **)v27 && v30 != 0)
    {
      *(_QWORD *)v27 = 0;
      *((_DWORD *)v27 + 2) = 0;
      WTF::fastFree(v30, v19);
    }
    WTF::fastFree(v27, v19);
  }
  v32 = v85[1];
  if (v85[1])
  {
    v71 = *((unsigned int *)v85[1] - 1);
    if ((_DWORD)v71)
    {
      v72 = (uint64_t *)((char *)v85[1] + 24);
      do
      {
        if (*((unsigned __int8 *)v72 - 24) != 254)
        {
          v73 = *v72;
          *v72 = 0;
          if (v73)
          {
            v74 = *(WTF **)(v73 + 144);
            if ((WTF *)(v73 + 160) != v74 && v74 != 0)
            {
              *(_QWORD *)(v73 + 144) = 0;
              *(_DWORD *)(v73 + 152) = 0;
              WTF::fastFree(v74, v19);
            }
            v76 = *(WTF **)v73;
            if (v73 + 16 != *(_QWORD *)v73 && v76 != 0)
            {
              *(_QWORD *)v73 = 0;
              *(_DWORD *)(v73 + 8) = 0;
              WTF::fastFree(v76, v19);
            }
            WTF::fastFree((WTF *)v73, v19);
          }
        }
        v72 += 4;
        --v71;
      }
      while (v71);
    }
    WTF::fastFree((WTF *)((char *)v32 - 16), v19);
  }
  v33 = v85[0];
  v85[0] = 0;
  if (v33)
  {
    v34 = (WTF *)*((_QWORD *)v33 + 18);
    if ((WTF *)((char *)v33 + 160) != v34 && v34 != 0)
    {
      *((_QWORD *)v33 + 18) = 0;
      *((_DWORD *)v33 + 38) = 0;
      WTF::fastFree(v34, v19);
    }
    v36 = *(WTF **)v33;
    if ((WTF *)((char *)v33 + 16) != *(WTF **)v33 && v36 != 0)
    {
      *(_QWORD *)v33 = 0;
      *((_DWORD *)v33 + 2) = 0;
      WTF::fastFree(v36, v19);
    }
    WTF::fastFree(v33, v19);
  }
  v38 = *((_QWORD *)v11 + 1);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v38))
  {
    goto LABEL_74;
  }
  MEMORY[0x19AEA534C](v38);
LABEL_74:
  v40 = *(_QWORD *)(v38 + 8);
  v41 = v40 - 1;
  *(_QWORD *)(v38 + 8) = v40 - 1;
  if (v40 == 1)
  {
    v70 = *(_QWORD *)(v38 + 16);
    v42 = *(_QWORD *)(v38 + 24);
    *(_QWORD *)(v38 + 24) = 0;
    v43 = v70 != 0;
  }
  else
  {
    v42 = 0;
    v43 = 1;
  }
  v44 = __ldxr((unsigned __int8 *)v38);
  if (v44 != 1)
  {
    __clrex();
LABEL_81:
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
    if (v41)
      goto LABEL_86;
    goto LABEL_82;
  }
  if (__stlxr(0, (unsigned __int8 *)v38))
    goto LABEL_81;
  if (v41)
    goto LABEL_86;
LABEL_82:
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (!v43)
    WTF::fastFree((WTF *)v38, v19);
LABEL_86:
  if (v25)
  {
    if (v25 >> 27)
      goto LABEL_130;
    v11 = (float *)WTF::fastMalloc((WTF *)(32 * v25));
    bzero(v11, 32 * v25);
    v45 = 0;
    v46 = v11 + 4;
    do
    {
      v47 = (float)*(int *)((char *)v21 + v45 + 4);
      v48 = (float)*(int *)((char *)v21 + v45);
      v49 = (float)*(int *)((char *)v21 + v45 + 12) + v47;
      v50 = (float)*(int *)((char *)v21 + v45 + 8) + v48;
      *(v46 - 4) = v48;
      *(v46 - 3) = v47;
      *(v46 - 2) = v50;
      *(v46 - 1) = v47;
      *v46 = v50;
      v46[1] = v49;
      v46[2] = v48;
      v46[3] = v49;
      v45 += 16;
      v46 += 8;
    }
    while (16 * v25 != v45);
  }
  else
  {
    v11 = 0;
  }
LABEL_92:
  result = WTF::fastMalloc((WTF *)0x18);
  v53 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (!v25)
    goto LABEL_96;
  if (v25 >> 29)
  {
LABEL_130:
    __break(0xC471u);
    JUMPOUT(0x196018F64);
  }
  v54 = WTF::fastMalloc((WTF *)(8 * v25));
  v55 = 0;
  *(_DWORD *)(v53 + 16) = v25;
  *(_QWORD *)(v53 + 8) = v54;
  v56 = (WebCore::FloatQuad *)v11;
  do
  {
    v57 = WebCore::FloatQuad::boundingBox(v56);
    v59 = v58;
    v61 = v60;
    v63 = v62;
    result = bmalloc::api::isoAllocate();
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 1;
    *(double *)(result + 16) = v57;
    *(double *)(result + 24) = v59;
    *(double *)(result + 32) = v61;
    *(double *)(result + 40) = v63;
    *(_QWORD *)(v54 + 8 * v55) = result;
    *(_DWORD *)(v53 + 20) = v55 + 1;
    v56 = (WebCore::FloatQuad *)((char *)v56 + 32);
    ++v55;
  }
  while (v25 != v55);
LABEL_96:
  *a3 = v53;
  if (v11)
    result = WTF::fastFree((WTF *)v11, v52);
  if (v21)
    return WTF::fastFree(v21, v52);
  return result;
}

uint64_t WebCore::Page::passiveTouchEventListenerRectsForTesting@<X0>(WebCore::Page *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  BOOL v14;
  WebCore::Document *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v29;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t result;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::FloatQuad *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  WTF *v61;
  WTF *v63;
  __int128 v65;
  WTF *v66[2];
  WTF *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;

  v4 = *((_QWORD *)this + 20);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 296);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      WebCore::Document::updateLayout(v6, 0, 0);
      WebCore::Document::updateTouchEventRegions(v6);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
  }
  v8 = WebCore::Page::scrollingCoordinator(this);
  v9 = (float *)v8;
  if (!v8)
  {
    v23 = 0;
    v19 = 0;
    goto LABEL_80;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_14:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 3) + 8) + 160);
  if (v13)
    v14 = *(_BYTE *)(v13 + 144) == 0;
  else
    v14 = 0;
  if (v14
    && (v15 = *(WebCore::Document **)(v13 + 296)) != 0
    && (v16 = *((_QWORD *)v15 + 243)) != 0
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8) + 40) + 8) + 3405))
  {
    WebCore::Document::eventTrackingRegions(v15, (uint64_t)&v65);
  }
  else
  {
    v65 = 0u;
    *(_OWORD *)v66 = 0u;
  }
  WebCore::Region::rects((uint64_t)&v65, (uint64_t)&v67);
  v18 = v69;
  if (!v69)
  {
    v19 = 0;
    v23 = 0;
LABEL_38:
    v20 = v67;
    goto LABEL_40;
  }
  if (v69 <= 0x10)
    v18 = 16;
  if (v18 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x19601948CLL);
  }
  v19 = (WTF *)WTF::fastMalloc((WTF *)(16 * v18));
  v20 = v67;
  if (v69)
  {
    v21 = 0;
    v22 = 16 * v69;
    v23 = ((unint64_t)(v22 - 16) >> 4) + 1;
    do
    {
      *(_OWORD *)((char *)v19 + v21) = *(_OWORD *)((char *)v20 + v21);
      v21 += 16;
    }
    while (v22 != v21);
    goto LABEL_38;
  }
  v23 = 0;
LABEL_40:
  if (&v70 != (uint64_t *)v20 && v20 != 0)
  {
    v67 = 0;
    v68 = 0;
    WTF::fastFree(v20, v17);
  }
  v25 = v66[1];
  if (v66[1])
  {
    v58 = *((unsigned int *)v66[1] - 1);
    if ((_DWORD)v58)
    {
      v59 = (uint64_t *)((char *)v66[1] + 24);
      do
      {
        if (*((unsigned __int8 *)v59 - 24) != 254)
        {
          v60 = *v59;
          *v59 = 0;
          if (v60)
          {
            v61 = *(WTF **)(v60 + 144);
            if ((WTF *)(v60 + 160) != v61 && v61 != 0)
            {
              *(_QWORD *)(v60 + 144) = 0;
              *(_DWORD *)(v60 + 152) = 0;
              WTF::fastFree(v61, v17);
            }
            v63 = *(WTF **)v60;
            if (v60 + 16 != *(_QWORD *)v60 && v63 != 0)
            {
              *(_QWORD *)v60 = 0;
              *(_DWORD *)(v60 + 8) = 0;
              WTF::fastFree(v63, v17);
            }
            WTF::fastFree((WTF *)v60, v17);
          }
        }
        v59 += 4;
        --v58;
      }
      while (v58);
    }
    WTF::fastFree((WTF *)((char *)v25 - 16), v17);
  }
  v26 = v66[0];
  v66[0] = 0;
  if (v26)
  {
    v27 = (WTF *)*((_QWORD *)v26 + 18);
    if ((WTF *)((char *)v26 + 160) != v27 && v27 != 0)
    {
      *((_QWORD *)v26 + 18) = 0;
      *((_DWORD *)v26 + 38) = 0;
      WTF::fastFree(v27, v17);
    }
    v29 = *(WTF **)v26;
    if ((WTF *)((char *)v26 + 16) != *(WTF **)v26 && v29 != 0)
    {
      *(_QWORD *)v26 = 0;
      *((_DWORD *)v26 + 2) = 0;
      WTF::fastFree(v29, v17);
    }
    WTF::fastFree(v26, v17);
  }
  v31 = *((_QWORD *)v9 + 1);
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v31))
  {
    goto LABEL_62;
  }
  MEMORY[0x19AEA534C](v31);
LABEL_62:
  v33 = *(_QWORD *)(v31 + 8);
  v34 = v33 - 1;
  *(_QWORD *)(v31 + 8) = v33 - 1;
  if (v33 == 1)
  {
    v57 = *(_QWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v31 + 24) = 0;
    v36 = v57 != 0;
  }
  else
  {
    v35 = 0;
    v36 = 1;
  }
  v37 = __ldxr((unsigned __int8 *)v31);
  if (v37 != 1)
  {
    __clrex();
LABEL_69:
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (v34)
      goto LABEL_74;
    goto LABEL_70;
  }
  if (__stlxr(0, (unsigned __int8 *)v31))
    goto LABEL_69;
  if (v34)
    goto LABEL_74;
LABEL_70:
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (!v36)
    WTF::fastFree((WTF *)v31, v17);
LABEL_74:
  if (v23)
  {
    if (v23 >> 27)
      goto LABEL_112;
    v9 = (float *)WTF::fastMalloc((WTF *)(32 * v23));
    bzero(v9, 32 * v23);
    v38 = 0;
    v39 = v9 + 4;
    do
    {
      v40 = (float)*(int *)((char *)v19 + v38 + 4);
      v41 = (float)*(int *)((char *)v19 + v38);
      v42 = (float)*(int *)((char *)v19 + v38 + 12) + v40;
      v43 = (float)*(int *)((char *)v19 + v38 + 8) + v41;
      *(v39 - 4) = v41;
      *(v39 - 3) = v40;
      *(v39 - 2) = v43;
      *(v39 - 1) = v40;
      *v39 = v43;
      v39[1] = v42;
      v39[2] = v41;
      v39[3] = v42;
      v38 += 16;
      v39 += 8;
    }
    while (16 * v23 != v38);
  }
  else
  {
    v9 = 0;
  }
LABEL_80:
  result = WTF::fastMalloc((WTF *)0x18);
  v46 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (!v23)
    goto LABEL_84;
  if (v23 >> 29)
  {
LABEL_112:
    __break(0xC471u);
    JUMPOUT(0x196019484);
  }
  v47 = WTF::fastMalloc((WTF *)(8 * v23));
  v48 = 0;
  *(_DWORD *)(v46 + 16) = v23;
  *(_QWORD *)(v46 + 8) = v47;
  v49 = (WebCore::FloatQuad *)v9;
  do
  {
    v50 = WebCore::FloatQuad::boundingBox(v49);
    v52 = v51;
    v54 = v53;
    v56 = v55;
    result = bmalloc::api::isoAllocate();
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 1;
    *(double *)(result + 16) = v50;
    *(double *)(result + 24) = v52;
    *(double *)(result + 32) = v54;
    *(double *)(result + 40) = v56;
    *(_QWORD *)(v47 + 8 * v48) = result;
    *(_DWORD *)(v46 + 20) = v48 + 1;
    v49 = (WebCore::FloatQuad *)((char *)v49 + 32);
    ++v48;
  }
  while (v23 != v48);
LABEL_84:
  *a2 = v46;
  if (v9)
    result = WTF::fastFree((WTF *)v9, v45);
  if (v19)
    return WTF::fastFree(v19, v45);
  return result;
}

unsigned int *WebCore::Page::accessibilityTreeData@<X0>(unsigned int *this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  unsigned int *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int *v11;
  WebCore::AXObjectCache *v12;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  __int128 v24;

  v3 = *((_QWORD *)this + 20);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (!v4 || (this = *(unsigned int **)(v3 + 296)) == 0)
  {
    *a3 = 0;
    a3[16] = 0;
    return this;
  }
  v5 = this[6];
  this[6] = v5 + 2;
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v23 = this;
    if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
    {
      i = this;
      v16 = *((_QWORD *)this + 66);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        i = this;
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 120);
          i = this;
          if (v18)
          {
            v19 = *(_QWORD *)(v18 + 8);
            for (i = this; v19; v19 = *(_QWORD *)(v22 + 8))
            {
              i = *(unsigned int **)(*(_QWORD *)(v19 + 40) + 8);
              v20 = *((_QWORD *)i + 66);
              if (!v20)
                break;
              v21 = *(_QWORD *)(v20 + 8);
              if (!v21)
                break;
              v22 = *(_QWORD *)(v21 + 120);
              if (!v22)
                break;
            }
          }
        }
      }
    }
    else
    {
      i = this;
      v7 = *((_QWORD *)this + 66);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        i = this;
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
          v10 = v9 && *(_BYTE *)(v9 + 144) == 0;
          i = this;
          if (v10)
          {
            v11 = *(unsigned int **)(v9 + 296);
            i = this;
            if (v11)
              i = v11;
          }
        }
      }
    }
    v12 = (WebCore::AXObjectCache *)*((_QWORD *)i + 186);
    if (v12)
    {
      ++*((_DWORD *)v12 + 2);
      WebCore::AXObjectCache::treeData(v12, (WTF::StringImpl **)&v24);
      *(_OWORD *)a3 = v24;
      a3[16] = 1;
      v14 = *((_DWORD *)v12 + 2);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x196019640);
      }
      *((_DWORD *)v12 + 2) = v14 - 1;
      this = v23;
      v15 = v23[6];
      v5 = v15 - 2;
      if (v15 == 2)
        goto LABEL_26;
LABEL_9:
      this[6] = v5;
      return this;
    }
  }
  *a3 = 0;
  a3[16] = 0;
  if (v5)
    goto LABEL_9;
LABEL_26:
  if ((*((_WORD *)this + 15) & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
  return this;
}

uint64_t WebCore::Page::progressEstimateChanged(WebCore::Page *this, WebCore::LocalFrame *a2)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  result = *((_QWORD *)a2 + 37);
  if (result)
  {
    v3 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v3 + 2;
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v8 = result;
      v4 = v3;
      v5 = WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)result);
      v3 = v4;
      v6 = v5;
      result = v8;
      if (v6)
      {
        ++*(_DWORD *)(v6 + 8);
        JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(v6);
        v7 = *(_DWORD *)(v6 + 8);
        if (!v7)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v6 + 8) = v7 - 1;
        result = v8;
        v3 = *(_DWORD *)(v8 + 24) - 2;
      }
    }
    if (v3)
    {
      *(_DWORD *)(result + 24) = v3;
    }
    else if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
  }
  return result;
}

uint64_t WebCore::Page::setMainFrame(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(result + 160);
  *(_QWORD *)(result + 160) = v2;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v4;
      v8 = v7;
      WTF::ensureOnMainThread();
      result = (uint64_t)v8;
      if (v8)
        return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return result;
}

uint64_t WebCore::Page::setMainFrameURLFragment(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(v2 + 4))
    {
      *(_QWORD *)a2 = 0;
      v3 = *(WTF::StringImpl **)(result + 216);
      *(_QWORD *)(result + 216) = v2;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          return WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
    }
  }
  return result;
}

void WebCore::Page::mainFrameOrigin(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t IdentifierInternal;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;
  char **v7;
  char *v8;

  {
    v1 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v1 = 1;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v3 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v3 != -1)
    {
      v8 = &v6;
      v7 = &v8;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    if ((WebCore::Process::globalIdentifier & 1) != 0)
    {
      v4 = WebCore::Process::globalIdentifier;
      *(_QWORD *)(v1 + 8) = IdentifierInternal;
      *(_QWORD *)(v1 + 16) = v4;
      *(_DWORD *)(v1 + 32) = 1;
      v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v5 += 2;
      *(_QWORD *)(v1 + 40) = v5;
      *(_QWORD *)(v1 + 48) = 0;
      *(_QWORD *)(v1 + 54) = 0;
      *(_WORD *)(v1 + 62) = 1;
      WebCore::SecurityOrigin::opaqueOrigin(void)::origin = v1;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t WebCore::Page::setOpenedByDOM(uint64_t this)
{
  *(_BYTE *)(this + 336) = 1;
  return this;
}

WebCore::HistoryItem *WebCore::Page::goToItem(int a1, uint64_t a2, WebCore::HistoryItem *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  int *v11;
  int v12;
  int v13;
  WebCore::HistoryItem *v14;
  WTF::StringImpl *v15;
  char shouldDoSameDocumentNavigationTo;
  WebCore::FrameLoader *v17;
  unsigned int v18;
  unsigned int v19;
  WebCore::HistoryItem *v20;
  WebCore::HistoryItem *result;
  WTF::StringImpl *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;

  ++*(_DWORD *)a3;
  if (*(_BYTE *)(a2 + 144))
    goto LABEL_13;
  v9 = (unsigned int *)(a2 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *(int **)(a2 + 184);
  v12 = *v11;
  v13 = *v11 + 1;
  *v11 = v13;
  v14 = (WebCore::HistoryItem *)*((_QWORD *)v11 + 2);
  if (v14)
  {
    ++*(_DWORD *)v14;
    shouldDoSameDocumentNavigationTo = WebCore::HistoryItem::shouldDoSameDocumentNavigationTo(v14, a3);
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v14, v15);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v14;
    }
    if (*v11)
    {
      --*v11;
      if ((shouldDoSameDocumentNavigationTo & 1) == 0)
      {
        v17 = *(WebCore::FrameLoader **)(a2 + 280);
        ++*(_DWORD *)v17;
        WebCore::FrameLoader::stopAllLoadersAndCheckCompleteness(v17);
        if (!*(_DWORD *)v17)
        {
LABEL_24:
          __break(0xC471u);
          JUMPOUT(0x196019ADCLL);
        }
        --*(_DWORD *)v17;
      }
      goto LABEL_11;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x196019AFCLL);
  }
  if (!v13)
    goto LABEL_23;
  *v11 = v12;
  do
  {
LABEL_11:
    v18 = __ldaxr(v9);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v9));
  if (!v19)
  {
    atomic_store(1u, v9);
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = off_1E31FE290;
    v27[1] = v9;
    v28 = v27;
    WTF::ensureOnMainThread();
    if (v28)
      (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  }
LABEL_13:
  v20 = *(WebCore::HistoryItem **)(a2 + 184);
  ++*(_DWORD *)v20;
  result = WebCore::HistoryController::goToItem(v20, a3, a4, a5);
  if (!*(_DWORD *)v20)
    goto LABEL_24;
  --*(_DWORD *)v20;
  if (*(_DWORD *)a3 == 1)
  {
    WebCore::HistoryItem::~HistoryItem(a3, v22);
    return (WebCore::HistoryItem *)WTF::fastFree(v25, v26);
  }
  else
  {
    --*(_DWORD *)a3;
  }
  return result;
}

WebCore::PageGroup **std::unique_ptr<WebCore::PageGroup>::operator=[abi:sn180100](WebCore::PageGroup **a1, void *a2)
{
  WebCore::PageGroup *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::PageGroup::~PageGroup(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WebCore::Page::groupName(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *((_QWORD *)this + 66);
  result = MEMORY[0x1E0CBF2F8];
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
      return v3 + 8;
  }
  return result;
}

uint64_t WebCore::Page::protectedBroadcastChannelRegistry@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 960);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

_DWORD *WebCore::Page::setBroadcastChannelRegistry(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *result;

  v3 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(a1 + 960);
  *(_QWORD *)(a1 + 960) = v3;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

unsigned int *WebCore::Page::initGroup(WebCore::Page *this)
{
  uint64_t v2;
  void *v3;
  WebCore::PageGroup *v4;
  WTF *v5;
  void *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[24];

  v2 = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = ++dword_1ECE838BC;
  *(_QWORD *)(v2 + 40) = 0;
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(v2 + 16, this, (uint64_t)v13);
  v4 = (WebCore::PageGroup *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = v2;
  if (!v4 || (WebCore::PageGroup::~PageGroup(v4, v3), WTF::fastFree(v5, v6), (v2 = *((_QWORD *)this + 65)) != 0))
  {
    WTF::WeakPtrFactory<WebCore::PageGroup,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v2, v2);
    v8 = *(unsigned int **)v2;
    if (*(_QWORD *)v2)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v8 = 0;
  }
  result = (unsigned int *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = v8;
  if (result)
  {
    do
    {
      v11 = __ldaxr(result);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, result));
    if (!v12)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

uint64_t WebCore::Page::updateStyleAfterChangeInEnvironment(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3400750;
  v11 = (uint64_t)v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v12 = v9;
    WTF::ensureOnMainThread();
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

unsigned int *WebCore::Page::refreshPlugins(unsigned int *this, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::PluginInfoProvider *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[24];
  _QWORD *v49;
  uint64_t v50;
  WTF *v51;

  v49 = 0;
  v50 = 0;
  {
    WebCore::allPages(void)::set = 0;
    return this;
  }
  if (!WebCore::allPages(void)::set || !*(_DWORD *)(WebCore::allPages(void)::set - 12))
    return this;
  v2 = (int)this;
  v3 = *(unsigned int *)(WebCore::allPages(void)::set - 4);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    for (i = (uint64_t *)WebCore::allPages(void)::set; (unint64_t)(*i + 1) <= 1; ++i)
    {
      v4 -= 8;
      if (!v4)
        return this;
    }
  }
  else
  {
    i = (uint64_t *)WebCore::allPages(void)::set;
  }
  v6 = WebCore::allPages(void)::set + 8 * v3;
  if (i == (uint64_t *)v6)
    return this;
  v7 = *i;
LABEL_12:
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 920);
  LODWORD(v50) = v50 + 1;
  if (v50 > HIDWORD(v50))
  {
    v9 = (uint64_t)v49;
    if (!v49)
    {
LABEL_14:
      v10 = 0;
      LODWORD(v50) = 0;
LABEL_15:
      v11 = v10;
LABEL_16:
      HIDWORD(v50) = 2 * v11;
      goto LABEL_17;
    }
    v23 = *((unsigned int *)v49 - 1);
    if (!(_DWORD)v23)
      goto LABEL_56;
    v24 = 0;
    do
    {
      v25 = --v23;
      v26 = *(_QWORD *)(v9 + 8 * v23);
      if ((unint64_t)(v26 + 1) >= 2 && !*(_QWORD *)(v26 + 8))
      {
        *(_QWORD *)(v9 + 8 * v23) = 0;
        do
        {
          v27 = __ldaxr((unsigned int *)v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v26));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)v26);
          v47 = v24;
          v45 = v23;
          v46 = v23;
          WTF::fastFree((WTF *)v26, a2);
          v23 = v45;
          v25 = v46;
          v24 = v47;
        }
        *(_QWORD *)(v9 + 8 * v25) = -1;
        ++v24;
      }
    }
    while (v25);
    v9 = (uint64_t)v49;
    if (v24)
    {
      *((_DWORD *)v49 - 4) += v24;
      if (v49)
        v29 = *((_DWORD *)v49 - 3);
      else
        v29 = 0;
      *((_DWORD *)v49 - 3) = v29 - v24;
      v9 = (uint64_t)v49;
    }
    if (!v9)
      goto LABEL_14;
    v30 = *(_DWORD *)(v9 - 4);
    if (v30 < 9 || 6 * *(_DWORD *)(v9 - 12) >= v30)
    {
LABEL_56:
      LODWORD(v50) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)&v49);
      v9 = (uint64_t)v49;
      LODWORD(v50) = 0;
      if (!v49)
      {
        v10 = 0;
        goto LABEL_15;
      }
    }
    v10 = *(_DWORD *)(v9 - 12);
    v11 = 0x7FFFFFFF;
    if (v10 >= 0x7FFFFFFF)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_17:
  v12 = *(_QWORD *)(v8 + 16);
  if (!v12)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = v8;
    v14 = *(unsigned int **)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v12;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v13);
      }
      v12 = *(_QWORD *)(v8 + 16);
    }
  }
  do
    v17 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v17 + 1, (unsigned int *)v12));
  do
    v18 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v18 + 1, (unsigned int *)v12));
  v51 = (WTF *)v12;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)&v49, &v51, (uint64_t)v48);
  this = (unsigned int *)v51;
  v51 = 0;
  if (!this)
    goto LABEL_28;
  do
  {
    v19 = __ldaxr(this);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, this));
  if (!v20)
  {
    atomic_store(1u, this);
    this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
    if (!v12)
      goto LABEL_32;
  }
  else
  {
LABEL_28:
    if (!v12)
      goto LABEL_32;
  }
  do
  {
    v21 = __ldaxr((unsigned int *)v12);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v12));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v12);
    this = (unsigned int *)WTF::fastFree((WTF *)v12, a2);
  }
LABEL_32:
  while (++i != (uint64_t *)v6)
  {
    v7 = *i;
    if ((unint64_t)(*i + 1) > 1)
    {
      if (i != (uint64_t *)v6)
        goto LABEL_12;
      break;
    }
  }
  v32 = (uint64_t)v49;
  if (v49)
  {
    v33 = *((unsigned int *)v49 - 1);
    if (*((_DWORD *)v49 - 3))
    {
      v34 = v49;
      if ((_DWORD)v33)
      {
        v35 = 0;
        while ((unint64_t)(v49[v35] + 1) <= 1)
        {
          if (v33 == ++v35)
            goto LABEL_70;
        }
        v34 = &v49[v35];
      }
      v36 = &v49[v33];
      if (v36 != v34)
      {
        v37 = *v34;
LABEL_75:
        if (*(_QWORD *)(v37 + 8))
        {
          v38 = *v34;
LABEL_81:
          v39 = *(WebCore::PluginInfoProvider **)(v38 + 8);
          ++*((_DWORD *)v39 + 2);
          this = (unsigned int *)WebCore::PluginInfoProvider::refresh(v39, v2);
          if (*((_DWORD *)v39 + 2) == 1)
            this = (unsigned int *)(*(uint64_t (**)(WebCore::PluginInfoProvider *))(*(_QWORD *)v39 + 8))(v39);
          else
            --*((_DWORD *)v39 + 2);
          while (++v34 != v36)
          {
            v38 = *v34;
            if ((unint64_t)(*v34 + 1) > 1)
            {
LABEL_88:
              if (v34 == v36)
                break;
              if (*(_QWORD *)(v38 + 8))
              {
                LODWORD(v50) = v50 + 1;
                goto LABEL_81;
              }
              while (1)
              {
                if (++v34 == v36)
                  goto LABEL_92;
                v38 = *v34;
                if ((unint64_t)(*v34 + 1) > 1)
                  goto LABEL_88;
              }
            }
          }
LABEL_92:
          LODWORD(v50) = v50 + 1;
          v32 = (uint64_t)v49;
        }
        else
        {
          while (++v34 != v36)
          {
            v37 = *v34;
            if ((unint64_t)(*v34 + 1) > 1)
            {
              if (v34 != v36)
                goto LABEL_75;
              break;
            }
          }
        }
      }
LABEL_70:
      if (!v32)
        return this;
      LODWORD(v33) = *(_DWORD *)(v32 - 4);
    }
    if ((_DWORD)v33)
    {
      v40 = 0;
      v41 = v33;
      do
      {
        v42 = *(unsigned int **)(v32 + 8 * v40);
        if (v42 != (unsigned int *)-1)
        {
          *(_QWORD *)(v32 + 8 * v40) = 0;
          if (v42)
          {
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v42);
              WTF::fastFree((WTF *)v42, a2);
            }
          }
        }
        ++v40;
      }
      while (v40 != v41);
    }
    return (unsigned int *)WTF::fastFree((WTF *)(v32 - 16), a2);
  }
  return this;
}

WebCore::PluginData **WTF::Ref<WebCore::PluginData,WTF::RawPtrTraits<WebCore::PluginData>,WTF::DefaultRefDerefTraits<WebCore::PluginData>>::~Ref(WebCore::PluginData **a1, WTF::StringImpl *a2)
{
  WebCore::PluginData *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PluginData::~PluginData(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::Page::findString@<X0>(uint64_t result@<X0>, void *a2@<X1>, __int16 a3@<W2>, _BYTE *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 v17;
  WebCore::Frame *v18;
  WebCore::Frame *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  WebCore::Document *v25;
  uint64_t v26;
  char v27;
  WebCore::FrameSelection *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::Frame *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::Frame *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::Frame *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::Frame *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  _QWORD *v64;
  WebCore::Editor *v65;
  void *v66;
  WebCore::Editor *v67;
  uint64_t v68;
  void *v69;
  WebCore::Document *v70;
  _DWORD *v71;
  int v72;
  _DWORD *v73;
  char v74;
  uint64_t v75;
  char v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  WebCore::Editor *v89;
  void *v90;
  WebCore::Editor *v91;
  uint64_t v92;
  void *v93;
  unsigned int v94;
  _QWORD *v95;
  __int16 v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    *a5 = 0;
    a5[16] = 0;
    return result;
  }
  v10 = *(_QWORD *)(result + 72);
  ++*(_DWORD *)v10;
  v98 = v10;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0 || (v12 = *(_QWORD *)(result + 160)) != 0)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 + 1, v13));
    if (*(_BYTE *)(v12 + 144))
    {
      do
        v94 = __ldaxr(v13);
      while (__stlxr(v94 - 1, v13));
      if (v94 == 1)
      {
        atomic_store(1u, v13);
        v95 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v95 = off_1E31FE290;
        v95[1] = v13;
        v106 = v95;
        WTF::ensureOnMainThread();
        result = (uint64_t)v106;
        if (v106)
          result = (*(uint64_t (**)(_QWORD *))(*v106 + 8))(v106);
      }
      v97 = 0;
      v99 = 0;
    }
    else
    {
      v97 = 0;
      v99 = v12;
    }
  }
  else
  {
    v99 = 0;
    v97 = 1;
  }
  v96 = a3 & 0xFFCF;
  v17 = a3 & 0xFFCF | 0x20;
  v18 = (WebCore::Frame *)v12;
  do
  {
    if (!v18 || *((_BYTE *)v18 + 144))
    {
      if ((a3 & 8) == 0)
      {
        v19 = (WebCore::Frame *)*((_QWORD *)v18 + 11);
        if (!v19)
        {
          v20 = *(_QWORD *)(*((_QWORD *)v18 + 6) + 8);
          if (!v20)
          {
LABEL_46:
            if ((a3 & 0x10) == 0)
            {
              v19 = 0;
              goto LABEL_72;
            }
            if (a4)
              *a4 = 1;
            v19 = *(WebCore::Frame **)(*(_QWORD *)(v20 + 128) + 8);
            goto LABEL_69;
          }
          v19 = (WebCore::Frame *)*((_QWORD *)v18 + 9);
          if (!v19)
          {
            v21 = *(_QWORD *)(*((_QWORD *)v18 + 6) + 8);
            do
            {
              v22 = *(_QWORD *)(v21 + 56);
              if (!v22)
                goto LABEL_46;
              v21 = *(_QWORD *)(v22 + 8);
              if (!v21)
                goto LABEL_46;
              v19 = *(WebCore::Frame **)(v21 + 72);
            }
            while (!v19);
          }
        }
LABEL_70:
        v42 = (unsigned int *)((char *)v19 + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
LABEL_72:
        if (v18)
        {
          v44 = (unsigned int *)((char *)v18 + 8);
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, v44);
            v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v47 = off_1E31FE290;
            v47[1] = v44;
            v100 = v47;
            WTF::ensureOnMainThread();
            result = (uint64_t)v100;
            if (v100)
              result = (*(uint64_t (**)(_QWORD *))(*v100 + 8))(v100);
          }
        }
        goto LABEL_110;
      }
      v30 = *((_QWORD *)v18 + 10);
      if (v30 && (v31 = *(_QWORD *)(v30 + 8)) != 0)
      {
        v19 = *(WebCore::Frame **)(*(_QWORD *)(v31 + 48) + 8);
        v32 = *(_QWORD *)(v31 + 96);
        if (v32)
        {
          v33 = *(WebCore::Frame **)(v32 + 8);
          if (v33)
          {
            do
            {
              v19 = v33;
              v34 = *((_QWORD *)v33 + 12);
              if (!v34)
                break;
              v33 = *(WebCore::Frame **)(v34 + 8);
            }
            while (v33);
            goto LABEL_70;
          }
        }
      }
      else
      {
        v35 = *((_QWORD *)v18 + 7);
        if (v35)
        {
          v19 = *(WebCore::Frame **)(v35 + 8);
          if ((a3 & 0x10) == 0)
            goto LABEL_69;
        }
        else
        {
          v19 = 0;
          if ((a3 & 0x10) == 0)
            goto LABEL_69;
        }
        if (!v19)
        {
          if (a4)
            *a4 = 1;
          v19 = *(WebCore::Frame **)(*((_QWORD *)v18 + 6) + 8);
          v39 = *((_QWORD *)v18 + 12);
          if (v39)
          {
            v40 = *(WebCore::Frame **)(v39 + 8);
            if (v40)
            {
              do
              {
                v19 = v40;
                v41 = *((_QWORD *)v40 + 12);
                if (!v41)
                  break;
                v40 = *(WebCore::Frame **)(v41 + 8);
              }
              while (v40);
              goto LABEL_70;
            }
          }
        }
      }
LABEL_69:
      if (!v19)
        goto LABEL_72;
      goto LABEL_70;
    }
    v23 = (unsigned int *)((char *)v18 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    v25 = (WebCore::Document *)*((_QWORD *)v18 + 37);
    v26 = *((_QWORD *)v25 + 382);
    if (!v26)
    {
      v65 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v65, v25);
      v67 = (WebCore::Editor *)*((_QWORD *)v25 + 382);
      *((_QWORD *)v25 + 382) = v65;
      if (v67)
      {
        WebCore::Editor::~Editor(v67, v66);
        if (*(_DWORD *)v68)
        {
          *(_QWORD *)(v68 + 496) = 0;
          *(_OWORD *)(v68 + 464) = 0u;
          *(_OWORD *)(v68 + 480) = 0u;
          *(_OWORD *)(v68 + 432) = 0u;
          *(_OWORD *)(v68 + 448) = 0u;
          *(_OWORD *)(v68 + 400) = 0u;
          *(_OWORD *)(v68 + 416) = 0u;
          *(_OWORD *)(v68 + 368) = 0u;
          *(_OWORD *)(v68 + 384) = 0u;
          *(_OWORD *)(v68 + 336) = 0u;
          *(_OWORD *)(v68 + 352) = 0u;
          *(_OWORD *)(v68 + 304) = 0u;
          *(_OWORD *)(v68 + 320) = 0u;
          *(_OWORD *)(v68 + 272) = 0u;
          *(_OWORD *)(v68 + 288) = 0u;
          *(_OWORD *)(v68 + 240) = 0u;
          *(_OWORD *)(v68 + 256) = 0u;
          *(_OWORD *)(v68 + 208) = 0u;
          *(_OWORD *)(v68 + 224) = 0u;
          *(_OWORD *)(v68 + 176) = 0u;
          *(_OWORD *)(v68 + 192) = 0u;
          *(_OWORD *)(v68 + 144) = 0u;
          *(_OWORD *)(v68 + 160) = 0u;
          *(_OWORD *)(v68 + 112) = 0u;
          *(_OWORD *)(v68 + 128) = 0u;
          *(_OWORD *)(v68 + 80) = 0u;
          *(_OWORD *)(v68 + 96) = 0u;
          *(_OWORD *)(v68 + 48) = 0u;
          *(_OWORD *)(v68 + 64) = 0u;
          *(_OWORD *)(v68 + 16) = 0u;
          *(_OWORD *)(v68 + 32) = 0u;
          *(_OWORD *)v68 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v68, v69);
        }
      }
      v26 = *((_QWORD *)v25 + 382);
    }
    result = WebCore::Editor::findString(v26, a2, v17);
    v27 = result;
    if ((_DWORD)result)
    {
      if ((a3 & 0x200) == 0)
      {
        if (v99 && v18 != (WebCore::Frame *)v99)
        {
          v28 = *(WebCore::FrameSelection **)(*(_QWORD *)(v99 + 296) + 3064);
          ++*((_DWORD *)v28 + 7);
          WebCore::FrameSelection::clear(v28);
          v29 = *((_DWORD *)v28 + 7);
          if (!v29)
          {
            __break(0xC471u);
            JUMPOUT(0x19601A904);
          }
          *((_DWORD *)v28 + 7) = v29 - 1;
        }
        result = WebCore::FocusController::setFocusedFrame(v98, v18, 1);
      }
      *(_OWORD *)a5 = *((_OWORD *)v18 + 2);
      a5[16] = 1;
      v19 = v18;
      goto LABEL_107;
    }
    if ((a3 & 8) != 0)
    {
      v48 = *((_QWORD *)v18 + 10);
      if (v48 && (v49 = *(_QWORD *)(v48 + 8)) != 0)
      {
        v19 = *(WebCore::Frame **)(*(_QWORD *)(v49 + 48) + 8);
        v50 = *(_QWORD *)(v49 + 96);
        if (v50)
        {
          v51 = *(WebCore::Frame **)(v50 + 8);
          if (v51)
          {
            do
            {
              v19 = v51;
              v52 = *((_QWORD *)v51 + 12);
              if (!v52)
                break;
              v51 = *(WebCore::Frame **)(v52 + 8);
            }
            while (v51);
LABEL_103:
            v57 = (unsigned int *)((char *)v19 + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 + 1, v57));
            goto LABEL_105;
          }
        }
      }
      else
      {
        v53 = *((_QWORD *)v18 + 7);
        if (v53)
        {
          v19 = *(WebCore::Frame **)(v53 + 8);
          if ((a3 & 0x10) == 0)
            goto LABEL_102;
        }
        else
        {
          v19 = 0;
          if ((a3 & 0x10) == 0)
            goto LABEL_102;
        }
        if (!v19)
        {
          if (a4)
            *a4 = 1;
          v19 = *(WebCore::Frame **)(*((_QWORD *)v18 + 6) + 8);
          v54 = *((_QWORD *)v18 + 12);
          if (v54)
          {
            v55 = *(WebCore::Frame **)(v54 + 8);
            if (v55)
            {
              do
              {
                v19 = v55;
                v56 = *((_QWORD *)v55 + 12);
                if (!v56)
                  break;
                v55 = *(WebCore::Frame **)(v56 + 8);
              }
              while (v55);
              goto LABEL_103;
            }
          }
        }
      }
    }
    else
    {
      v19 = (WebCore::Frame *)*((_QWORD *)v18 + 11);
      if (v19)
        goto LABEL_103;
      v36 = *(_QWORD *)(*((_QWORD *)v18 + 6) + 8);
      if (v36)
      {
        v19 = (WebCore::Frame *)*((_QWORD *)v18 + 9);
        if (v19)
          goto LABEL_103;
        v37 = *(_QWORD *)(*((_QWORD *)v18 + 6) + 8);
        while (1)
        {
          v38 = *(_QWORD *)(v37 + 56);
          if (!v38)
            break;
          v37 = *(_QWORD *)(v38 + 8);
          if (!v37)
            break;
          v19 = *(WebCore::Frame **)(v37 + 72);
          if (v19)
            goto LABEL_103;
        }
      }
      if ((a3 & 0x10) == 0)
      {
        v19 = 0;
        goto LABEL_105;
      }
      if (a4)
        *a4 = 1;
      v19 = *(WebCore::Frame **)(*(_QWORD *)(v36 + 128) + 8);
    }
LABEL_102:
    if (v19)
      goto LABEL_103;
    do
    {
LABEL_105:
      v59 = __ldaxr(v23);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v23));
    if (!v60)
    {
      atomic_store(1u, v23);
      v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v64 = off_1E31FE290;
      v64[1] = v23;
      v102 = v64;
      WTF::ensureOnMainThread();
      result = (uint64_t)v102;
      if (v102)
        result = (*(uint64_t (**)(_QWORD *))(*v102 + 8))(v102);
    }
    do
    {
LABEL_107:
      v61 = __ldaxr(v23);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v23));
    if (!v62)
    {
      atomic_store(1u, v23);
      v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v63 = off_1E31FE290;
      v63[1] = v23;
      v101 = v63;
      WTF::ensureOnMainThread();
      result = (uint64_t)v101;
      if (v101)
        result = (*(uint64_t (**)(_QWORD *))(*v101 + 8))(v101);
    }
    if ((v27 & 1) != 0)
      goto LABEL_134;
LABEL_110:
    if (!v19)
      break;
    v18 = v19;
  }
  while (v19 != (WebCore::Frame *)v12);
  if ((a3 & 0x10) != 0)
  {
    if (v99)
    {
      v70 = *(WebCore::Document **)(v99 + 296);
      if (*(_BYTE *)(*((_QWORD *)v70 + 383) + 153))
      {
        if (a4)
          *a4 = 1;
        v71 = (_DWORD *)*((_QWORD *)v70 + 382);
        if (!v71)
        {
          v89 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v89, v70);
          v91 = (WebCore::Editor *)*((_QWORD *)v70 + 382);
          *((_QWORD *)v70 + 382) = v89;
          if (v91)
          {
            WebCore::Editor::~Editor(v91, v90);
            if (*(_DWORD *)v92)
            {
              *(_QWORD *)(v92 + 496) = 0;
              *(_OWORD *)(v92 + 464) = 0u;
              *(_OWORD *)(v92 + 480) = 0u;
              *(_OWORD *)(v92 + 432) = 0u;
              *(_OWORD *)(v92 + 448) = 0u;
              *(_OWORD *)(v92 + 400) = 0u;
              *(_OWORD *)(v92 + 416) = 0u;
              *(_OWORD *)(v92 + 368) = 0u;
              *(_OWORD *)(v92 + 384) = 0u;
              *(_OWORD *)(v92 + 336) = 0u;
              *(_OWORD *)(v92 + 352) = 0u;
              *(_OWORD *)(v92 + 304) = 0u;
              *(_OWORD *)(v92 + 320) = 0u;
              *(_OWORD *)(v92 + 272) = 0u;
              *(_OWORD *)(v92 + 288) = 0u;
              *(_OWORD *)(v92 + 240) = 0u;
              *(_OWORD *)(v92 + 256) = 0u;
              *(_OWORD *)(v92 + 208) = 0u;
              *(_OWORD *)(v92 + 224) = 0u;
              *(_OWORD *)(v92 + 176) = 0u;
              *(_OWORD *)(v92 + 192) = 0u;
              *(_OWORD *)(v92 + 144) = 0u;
              *(_OWORD *)(v92 + 160) = 0u;
              *(_OWORD *)(v92 + 112) = 0u;
              *(_OWORD *)(v92 + 128) = 0u;
              *(_OWORD *)(v92 + 80) = 0u;
              *(_OWORD *)(v92 + 96) = 0u;
              *(_OWORD *)(v92 + 48) = 0u;
              *(_OWORD *)(v92 + 64) = 0u;
              *(_OWORD *)(v92 + 16) = 0u;
              *(_OWORD *)(v92 + 32) = 0u;
              *(_OWORD *)v92 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v92, v93);
            }
          }
          v71 = (_DWORD *)*((_QWORD *)v70 + 382);
        }
        ++*v71;
        result = WebCore::Editor::findString((uint64_t)v71, a2, v96 | 0x30);
        if (!*v71)
        {
          __break(0xC471u);
          JUMPOUT(0x19601AA20);
        }
        v72 = result;
        --*v71;
        v73 = (_DWORD *)v98;
        if ((a3 & 0x200) == 0)
          result = WebCore::FocusController::setFocusedFrame(v98, v19, 1);
        if (v72)
        {
          *(_OWORD *)a5 = *(_OWORD *)(v99 + 32);
          v74 = 1;
        }
        else
        {
          v74 = 0;
          *a5 = 0;
        }
        v76 = v97;
        a5[16] = v74;
        v75 = v99;
        goto LABEL_138;
      }
    }
  }
  *a5 = 0;
  a5[16] = 0;
LABEL_134:
  v73 = (_DWORD *)v98;
  v75 = v99;
  v76 = v97;
  if (!v99)
    goto LABEL_141;
LABEL_138:
  v77 = (unsigned int *)(v75 + 8);
  do
  {
    v78 = __ldaxr(v77);
    v79 = v78 - 1;
  }
  while (__stlxr(v79, v77));
  if (!v79)
  {
    atomic_store(1u, v77);
    v86 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v86 = off_1E31FE290;
    v86[1] = v77;
    v103 = v86;
    WTF::ensureOnMainThread();
    result = (uint64_t)v103;
    if (v103)
      result = (*(uint64_t (**)(_QWORD *))(*v103 + 8))(v103);
  }
LABEL_141:
  if ((v76 & 1) == 0)
  {
    v80 = (unsigned int *)(v12 + 8);
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v87 = off_1E31FE290;
      v87[1] = v80;
      v104 = v87;
      WTF::ensureOnMainThread();
      result = (uint64_t)v104;
      if (v104)
        result = (*(uint64_t (**)(_QWORD *))(*v104 + 8))(v104);
    }
  }
  if (v19)
  {
    v83 = (unsigned int *)((char *)v19 + 8);
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v83);
      v88 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v88 = off_1E31FE290;
      v88[1] = v83;
      v105 = v88;
      WTF::ensureOnMainThread();
      result = (uint64_t)v105;
      if (v105)
        result = (*(uint64_t (**)(_QWORD *))(*v105 + 8))(v105);
    }
  }
  if (!*v73)
  {
    __break(0xC471u);
    JUMPOUT(0x19601A934);
  }
  --*v73;
  return result;
}

void WebCore::Page::analyzeImagesForFindInPage(WebCore::Page *a1, uint64_t *a2)
{
  WebCore::ImageAnalysisQueue *v4;
  WebCore::ImageAnalysisQueue *v5;
  void *v6;
  WebCore::ImageAnalysisQueue *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::ImageAnalysisQueue *v12;
  WebCore::ImageAnalysisQueue *v13;
  void *v14;
  WebCore::ImageAnalysisQueue *v15;
  WTF *v16;
  void *v17;
  void *v18;
  WTF *v19;
  WTF *v20;

  if ((*(_QWORD *)(*((_QWORD *)a1 + 14) + 704) & 0x4000000000000000) != 0)
  {
    v4 = (WebCore::ImageAnalysisQueue *)*((_QWORD *)a1 + 152);
    if (!v4)
    {
      v5 = (WebCore::ImageAnalysisQueue *)WTF::fastMalloc((WTF *)0x88);
      v4 = WebCore::ImageAnalysisQueue::ImageAnalysisQueue(v5, a1);
      v7 = (WebCore::ImageAnalysisQueue *)*((_QWORD *)a1 + 152);
      *((_QWORD *)a1 + 152) = v4;
      if (v7)
      {
        WebCore::ImageAnalysisQueue::~ImageAnalysisQueue(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = (WebCore::ImageAnalysisQueue *)*((_QWORD *)a1 + 152);
      }
    }
    WebCore::ImageAnalysisQueue::setDidBecomeEmptyCallback((uint64_t)v4, a2);
    v10 = *((_QWORD *)a1 + 20);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 144))
      {
        v11 = *(_QWORD *)(v10 + 296);
        if (v11)
        {
          *(_DWORD *)(v11 + 24) += 2;
          v12 = (WebCore::ImageAnalysisQueue *)*((_QWORD *)a1 + 152);
          if (!v12)
          {
            v13 = (WebCore::ImageAnalysisQueue *)WTF::fastMalloc((WTF *)0x88);
            v12 = WebCore::ImageAnalysisQueue::ImageAnalysisQueue(v13, a1);
            v15 = (WebCore::ImageAnalysisQueue *)*((_QWORD *)a1 + 152);
            *((_QWORD *)a1 + 152) = v12;
            if (v15)
            {
              WebCore::ImageAnalysisQueue::~ImageAnalysisQueue(v15, v14);
              WTF::fastFree(v16, v17);
              v12 = (WebCore::ImageAnalysisQueue *)*((_QWORD *)a1 + 152);
            }
          }
          v19 = 0;
          v20 = 0;
          WebCore::ImageAnalysisQueue::enqueueAllImagesIfNeeded(v12, (WebCore::Document *)v11, &v20, &v19);
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11, v18);
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
        }
      }
    }
  }
}

WebCore::ImageAnalysisQueue *WebCore::Page::imageAnalysisQueue(WebCore::Page *this)
{
  WebCore::ImageAnalysisQueue *result;
  WebCore::ImageAnalysisQueue *v3;
  void *v4;
  WebCore::ImageAnalysisQueue *v5;
  WTF *v6;
  void *v7;

  result = (WebCore::ImageAnalysisQueue *)*((_QWORD *)this + 152);
  if (!result)
  {
    v3 = (WebCore::ImageAnalysisQueue *)WTF::fastMalloc((WTF *)0x88);
    result = WebCore::ImageAnalysisQueue::ImageAnalysisQueue(v3, this);
    v5 = (WebCore::ImageAnalysisQueue *)*((_QWORD *)this + 152);
    *((_QWORD *)this + 152) = result;
    if (v5)
    {
      WebCore::ImageAnalysisQueue::~ImageAnalysisQueue(v5, v4);
      WTF::fastFree(v6, v7);
      return (WebCore::ImageAnalysisQueue *)*((_QWORD *)this + 152);
    }
  }
  return result;
}

WebCore::Node *WebCore::Page::findTextMatches@<X0>(WebCore::Node *result@<X0>, void *a2@<X1>, __int16 a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WebCore::Node *v23;
  unsigned int *v24;
  unsigned int v25;
  WebCore::Document *v26;
  _DWORD *v27;
  int v28;
  void *v29;
  WebCore::Node *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WebCore::Node *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  WebCore::Editor *v47;
  void *v48;
  WebCore::Editor *v49;
  uint64_t v50;
  void *v51;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  char v58;
  WebCore::Node *v59;
  unsigned int v60;
  unsigned int v61;
  WebCore::Node *v62;
  char v63;
  WebCore::Node *v64;
  int v65;
  WebCore::Node *v66;
  int v67;
  WebCore::Node *v68;
  int v69;
  WebCore::Node *v70;
  int v71;
  char v72;

  v9 = (unsigned int *)a6;
  v63 = a3;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 16) = 0;
  v10 = *((_QWORD *)result + 20);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = 0;
  do
  {
    if (!v10 || *(_BYTE *)(v10 + 144))
    {
      v15 = *(_QWORD *)(v10 + 88);
      if (v15)
        goto LABEL_12;
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8);
      if (!v16)
      {
        v15 = 0;
LABEL_17:
        v20 = (unsigned int *)(v10 + 8);
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v23 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v23 = off_1E31FE290;
          *((_QWORD *)v23 + 1) = v20;
          v68 = v23;
          WTF::ensureOnMainThread();
          result = v68;
          v68 = 0;
          if (result)
            result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
        }
        goto LABEL_61;
      }
      v15 = *(_QWORD *)(v10 + 72);
      if (v15)
      {
LABEL_12:
        v18 = (unsigned int *)(v15 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      else
      {
        while (1)
        {
          v17 = *(_QWORD *)(v16 + 56);
          if (!v17)
            break;
          v16 = *(_QWORD *)(v17 + 8);
          if (!v16)
            break;
          v15 = *(_QWORD *)(v16 + 72);
          if (v15)
            goto LABEL_12;
        }
        v15 = 0;
      }
      if (!v10)
        goto LABEL_61;
      goto LABEL_17;
    }
    v24 = (unsigned int *)(v10 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
    v26 = *(WebCore::Document **)(v10 + 296);
    v27 = (_DWORD *)*((_QWORD *)v26 + 382);
    if (!v27)
    {
      v47 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v47, v26);
      v49 = (WebCore::Editor *)*((_QWORD *)v26 + 382);
      *((_QWORD *)v26 + 382) = v47;
      if (v49)
      {
        WebCore::Editor::~Editor(v49, v48);
        if (*(_DWORD *)v50)
        {
          *(_QWORD *)(v50 + 496) = 0;
          *(_OWORD *)(v50 + 464) = 0u;
          *(_OWORD *)(v50 + 480) = 0u;
          *(_OWORD *)(v50 + 432) = 0u;
          *(_OWORD *)(v50 + 448) = 0u;
          *(_OWORD *)(v50 + 400) = 0u;
          *(_OWORD *)(v50 + 416) = 0u;
          *(_OWORD *)(v50 + 368) = 0u;
          *(_OWORD *)(v50 + 384) = 0u;
          *(_OWORD *)(v50 + 336) = 0u;
          *(_OWORD *)(v50 + 352) = 0u;
          *(_OWORD *)(v50 + 304) = 0u;
          *(_OWORD *)(v50 + 320) = 0u;
          *(_OWORD *)(v50 + 272) = 0u;
          *(_OWORD *)(v50 + 288) = 0u;
          *(_OWORD *)(v50 + 240) = 0u;
          *(_OWORD *)(v50 + 256) = 0u;
          *(_OWORD *)(v50 + 208) = 0u;
          *(_OWORD *)(v50 + 224) = 0u;
          *(_OWORD *)(v50 + 176) = 0u;
          *(_OWORD *)(v50 + 192) = 0u;
          *(_OWORD *)(v50 + 144) = 0u;
          *(_OWORD *)(v50 + 160) = 0u;
          *(_OWORD *)(v50 + 112) = 0u;
          *(_OWORD *)(v50 + 128) = 0u;
          *(_OWORD *)(v50 + 80) = 0u;
          *(_OWORD *)(v50 + 96) = 0u;
          *(_OWORD *)(v50 + 48) = 0u;
          *(_OWORD *)(v50 + 64) = 0u;
          *(_OWORD *)(v50 + 16) = 0u;
          *(_OWORD *)(v50 + 32) = 0u;
          *(_OWORD *)v50 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v50, v51);
        }
      }
      v27 = (_DWORD *)*((_QWORD *)v26 + 382);
    }
    ++*v27;
    LOBYTE(v68) = 0;
    v72 = 0;
    if (a4)
      v28 = a4 - v9[3];
    else
      v28 = 0;
    result = (WebCore::Node *)WebCore::Editor::countMatchesForText((uint64_t)v27, a2, (int *)&v68, a3, v28, a5, (uint64_t)v9);
    if (v72)
    {
      v30 = v70;
      v70 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, v29);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      result = v68;
      v68 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v29);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
    }
    if (!*v27)
    {
      __break(0xC471u);
      goto LABEL_114;
    }
    --*v27;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 296) + 3064) + 153) == 2)
    {
      do
        v31 = __ldaxr(v24);
      while (__stlxr(v31 + 1, v24));
      v32 = v10;
      if (v13)
      {
        v33 = (unsigned int *)(v13 + 8);
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        v32 = v10;
        if (!v35)
        {
          atomic_store(1u, v33);
          v36 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v36 = off_1E31FE290;
          *((_QWORD *)v36 + 1) = v33;
          v68 = v36;
          WTF::ensureOnMainThread();
          result = v68;
          v68 = 0;
          if (result)
            result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
          v32 = v10;
        }
      }
    }
    else
    {
      v32 = v13;
    }
    v15 = *(_QWORD *)(v10 + 88);
    if (!v15)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8);
      if (!v37)
        goto LABEL_55;
      v15 = *(_QWORD *)(v10 + 72);
      if (!v15)
      {
        while (1)
        {
          v38 = *(_QWORD *)(v37 + 56);
          if (!v38)
            break;
          v37 = *(_QWORD *)(v38 + 8);
          if (!v37)
            break;
          v15 = *(_QWORD *)(v37 + 72);
          if (v15)
            goto LABEL_52;
        }
LABEL_55:
        v15 = 0;
        goto LABEL_56;
      }
    }
LABEL_52:
    v39 = (unsigned int *)(v15 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    do
    {
LABEL_56:
      v41 = __ldaxr(v24);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v24));
    if (!v42)
    {
      atomic_store(1u, v24);
      v45 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v45 = off_1E31FE290;
      *((_QWORD *)v45 + 1) = v24;
      v68 = v45;
      WTF::ensureOnMainThread();
      result = v68;
      v68 = 0;
      if (result)
        result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    }
    do
    {
      v43 = __ldaxr(v24);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v24));
    if (!v44)
    {
      atomic_store(1u, v24);
      v46 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v46 = off_1E31FE290;
      *((_QWORD *)v46 + 1) = v24;
      v68 = v46;
      WTF::ensureOnMainThread();
      result = v68;
      v68 = 0;
      if (result)
        result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    }
    v13 = v32;
LABEL_61:
    v10 = v15;
  }
  while (v15);
  v52 = v9[3];
  if (!v52)
    goto LABEL_104;
  if (!v13)
  {
    if ((v63 & 8) != 0)
      v9[4] = v52 - 1;
    else
      v9[4] = 0;
    return result;
  }
  v9[4] = -1;
  WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(*(_QWORD *)(v13 + 296) + 3064) + 56), &v68);
  if (!v72)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  v64 = v68;
  v65 = v69;
  v66 = v70;
  v67 = v71;
  v54 = v9[3];
  if ((v63 & 8) == 0)
  {
    if (!(_DWORD)v54)
      goto LABEL_98;
    v55 = 0;
    while (v55 < v9[3])
    {
      v56 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v66, *(_QWORD *)v9 + 32 * v55);
      if (v56 != 129 && (char)v56 < 0)
      {
        LODWORD(v54) = v55;
        goto LABEL_97;
      }
      if (++v55 == v54)
        goto LABEL_98;
    }
    __break(0xC471u);
LABEL_119:
    JUMPOUT(0x19601B298);
  }
  v57 = 32 * v54 - 16;
  do
  {
    if (!v54)
      goto LABEL_98;
    if (--v54 >= (unint64_t)v9[3])
    {
      __break(0xC471u);
      goto LABEL_119;
    }
    v58 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v64, *(_QWORD *)v9 + v57);
    v57 -= 32;
  }
  while (v58 <= 0);
LABEL_97:
  v9[4] = v54;
LABEL_98:
  v59 = v66;
  v66 = 0;
  if (v59)
  {
    if (*((_DWORD *)v59 + 6) == 2)
    {
      if ((*((_WORD *)v59 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v59, v53);
    }
    else
    {
      *((_DWORD *)v59 + 6) -= 2;
    }
  }
  result = v64;
  v64 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v53);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
LABEL_104:
  if (v13)
  {
    v9 = (unsigned int *)(v13 + 8);
    do
    {
      v60 = __ldaxr(v9);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v9));
    if (!v61)
    {
LABEL_115:
      atomic_store(1u, v9);
      v62 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v62 = off_1E31FE290;
      *((_QWORD *)v62 + 1) = v9;
      v68 = v62;
      WTF::ensureOnMainThread();
      result = v68;
      v68 = 0;
      if (result)
        return (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WebCore::Node *WebCore::Page::rangeOfString@<X0>(WebCore::Node *result@<X0>, void *a2@<X1>, _BYTE *a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  WebCore::Node *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  unsigned __int16 v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  void *v26;
  WebCore::Node *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WebCore::Node *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  WebCore::Node *v62;
  WebCore::Node *v63;
  WebCore::Editor *v64;
  void *v65;
  WebCore::Editor *v66;
  uint64_t v67;
  void *v68;
  WebCore::Document *v69;
  unsigned int *v70;
  WebCore::Node *v71;
  WebCore::Node *v72;
  void *v73;
  WebCore::Node *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  WebCore::Node *v80;
  WebCore::Node *v81;
  WebCore::Editor *v82;
  void *v83;
  WebCore::Editor *v84;
  uint64_t v85;
  void *v86;
  int v87;
  char v89;
  WebCore::Node *v90;
  int v91;
  WebCore::Node *v92;
  int v93;
  char v94;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    goto LABEL_2;
  if (a3[32])
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 8) + 528);
    if (v8)
    {
      v9 = *(unsigned int **)(v8 + 8);
      if (v9)
      {
        v10 = (WebCore::Node *)*((_QWORD *)v9 + 3);
        if (v10)
          v10 = (WebCore::Node *)*((_QWORD *)v10 + 1);
      }
      else
      {
        v10 = 0;
      }
      if (v10 == result)
        goto LABEL_13;
    }
    else if (!result)
    {
      v13 = 0;
      v9 = 0;
      goto LABEL_18;
    }
LABEL_2:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 32) = 0;
    return result;
  }
  v9 = (unsigned int *)*((_QWORD *)result + 20);
LABEL_13:
  if (v9)
  {
    v11 = v9 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    if (!*((_BYTE *)v9 + 144))
    {
      do
        v14 = __ldaxr(v11);
      while (__stlxr(v14 + 1, v11));
      v89 = 0;
      v13 = v9;
      goto LABEL_21;
    }
  }
  v13 = 0;
LABEL_18:
  v89 = 1;
LABEL_21:
  v15 = a4;
  v16 = a4 & 0xFFEF;
  do
  {
    if (!v9 || *((_BYTE *)v9 + 144))
    {
      if ((v15 & 8) == 0)
      {
        v17 = (unsigned int *)*((_QWORD *)v9 + 11);
        if (!v17)
        {
          v18 = *(_QWORD *)(*((_QWORD *)v9 + 6) + 8);
          if (!v18)
          {
LABEL_59:
            if ((v15 & 0x10) == 0)
            {
              v17 = 0;
              goto LABEL_81;
            }
            v17 = *(unsigned int **)(*(_QWORD *)(v18 + 128) + 8);
            goto LABEL_78;
          }
          v17 = (unsigned int *)*((_QWORD *)v9 + 9);
          if (!v17)
          {
            v19 = *(_QWORD *)(*((_QWORD *)v9 + 6) + 8);
            do
            {
              v20 = *(_QWORD *)(v19 + 56);
              if (!v20)
                goto LABEL_59;
              v19 = *(_QWORD *)(v20 + 8);
              if (!v19)
                goto LABEL_59;
              v17 = *(unsigned int **)(v19 + 72);
            }
            while (!v17);
          }
        }
LABEL_79:
        v41 = v17 + 2;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 + 1, v41));
LABEL_81:
        if (v9)
        {
          v43 = v9 + 2;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            atomic_store(1u, v43);
            v46 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v46 = off_1E31FE290;
            *((_QWORD *)v46 + 1) = v43;
            v90 = v46;
            WTF::ensureOnMainThread();
            result = v90;
            v90 = 0;
            if (result)
              result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
          }
        }
        goto LABEL_115;
      }
      v29 = *((_QWORD *)v9 + 10);
      if (v29 && (v30 = *(_QWORD *)(v29 + 8)) != 0)
      {
        v17 = *(unsigned int **)(*(_QWORD *)(v30 + 48) + 8);
        v31 = *(_QWORD *)(v30 + 96);
        if (v31)
        {
          v32 = *(unsigned int **)(v31 + 8);
          if (v32)
          {
            do
            {
              v17 = v32;
              v33 = *((_QWORD *)v32 + 12);
              if (!v33)
                break;
              v32 = *(unsigned int **)(v33 + 8);
            }
            while (v32);
            goto LABEL_79;
          }
        }
      }
      else
      {
        v34 = *((_QWORD *)v9 + 7);
        if (v34)
        {
          v17 = *(unsigned int **)(v34 + 8);
          if ((v15 & 0x10) == 0)
            goto LABEL_78;
        }
        else
        {
          v17 = 0;
          if ((v15 & 0x10) == 0)
            goto LABEL_78;
        }
        if (!v17)
        {
          v17 = *(unsigned int **)(*((_QWORD *)v9 + 6) + 8);
          v38 = *((_QWORD *)v9 + 12);
          if (v38)
          {
            v39 = *(unsigned int **)(v38 + 8);
            if (v39)
            {
              do
              {
                v17 = v39;
                v40 = *((_QWORD *)v39 + 12);
                if (!v40)
                  break;
                v39 = *(unsigned int **)(v40 + 8);
              }
              while (v39);
              goto LABEL_79;
            }
          }
        }
      }
LABEL_78:
      if (!v17)
        goto LABEL_81;
      goto LABEL_79;
    }
    v21 = v9 + 2;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v17 = (unsigned int *)*((_QWORD *)v9 + 37);
    v23 = (unsigned int *)*((_QWORD *)v17 + 382);
    if (!v23)
    {
      v64 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v64, (WebCore::Document *)v17);
      v66 = (WebCore::Editor *)*((_QWORD *)v17 + 382);
      *((_QWORD *)v17 + 382) = v64;
      if (v66)
      {
        WebCore::Editor::~Editor(v66, v65);
        if (*(_DWORD *)v67)
        {
          *(_QWORD *)(v67 + 496) = 0;
          *(_OWORD *)(v67 + 464) = 0u;
          *(_OWORD *)(v67 + 480) = 0u;
          *(_OWORD *)(v67 + 432) = 0u;
          *(_OWORD *)(v67 + 448) = 0u;
          *(_OWORD *)(v67 + 400) = 0u;
          *(_OWORD *)(v67 + 416) = 0u;
          *(_OWORD *)(v67 + 368) = 0u;
          *(_OWORD *)(v67 + 384) = 0u;
          *(_OWORD *)(v67 + 336) = 0u;
          *(_OWORD *)(v67 + 352) = 0u;
          *(_OWORD *)(v67 + 304) = 0u;
          *(_OWORD *)(v67 + 320) = 0u;
          *(_OWORD *)(v67 + 272) = 0u;
          *(_OWORD *)(v67 + 288) = 0u;
          *(_OWORD *)(v67 + 240) = 0u;
          *(_OWORD *)(v67 + 256) = 0u;
          *(_OWORD *)(v67 + 208) = 0u;
          *(_OWORD *)(v67 + 224) = 0u;
          *(_OWORD *)(v67 + 176) = 0u;
          *(_OWORD *)(v67 + 192) = 0u;
          *(_OWORD *)(v67 + 144) = 0u;
          *(_OWORD *)(v67 + 160) = 0u;
          *(_OWORD *)(v67 + 112) = 0u;
          *(_OWORD *)(v67 + 128) = 0u;
          *(_OWORD *)(v67 + 80) = 0u;
          *(_OWORD *)(v67 + 96) = 0u;
          *(_OWORD *)(v67 + 48) = 0u;
          *(_OWORD *)(v67 + 64) = 0u;
          *(_OWORD *)(v67 + 16) = 0u;
          *(_OWORD *)(v67 + 32) = 0u;
          *(_OWORD *)v67 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v67, v68);
        }
      }
      v23 = (unsigned int *)*((_QWORD *)v17 + 382);
    }
    ++*v23;
    LOBYTE(v90) = 0;
    v94 = 0;
    if (v9 == v13 && a3[32])
    {
      v24 = *(WebCore::Node **)a3;
      *((_DWORD *)v24 + 6) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
      v90 = v24;
      v91 = *((_DWORD *)a3 + 2);
      v25 = (WebCore::Node *)*((_QWORD *)a3 + 2);
      *((_DWORD *)v25 + 6) += 2;
      v92 = v25;
      v93 = *((_DWORD *)a3 + 6);
      v94 = 1;
    }
    result = (WebCore::Node *)WebCore::Editor::rangeOfString(v23, a2, (unsigned __int8 *)&v90, v16, a5);
    if (v94)
    {
      v27 = v92;
      v92 = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27, v26);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
      result = v90;
      v90 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v26);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
    }
    if (!*v23)
    {
      __break(0xC471u);
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }
    --*v23;
    v28 = *(unsigned __int8 *)(a5 + 32);
    if (*(_BYTE *)(a5 + 32))
    {
      v17 = v9;
      goto LABEL_112;
    }
    if ((v15 & 8) != 0)
    {
      v47 = *((_QWORD *)v9 + 10);
      if (v47 && (v48 = *(_QWORD *)(v47 + 8)) != 0)
      {
        v17 = *(unsigned int **)(*(_QWORD *)(v48 + 48) + 8);
        v49 = *(_QWORD *)(v48 + 96);
        if (v49)
        {
          v50 = *(unsigned int **)(v49 + 8);
          if (v50)
          {
            do
            {
              v17 = v50;
              v51 = *((_QWORD *)v50 + 12);
              if (!v51)
                break;
              v50 = *(unsigned int **)(v51 + 8);
            }
            while (v50);
LABEL_108:
            v56 = v17 + 2;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 + 1, v56));
            goto LABEL_110;
          }
        }
      }
      else
      {
        v52 = *((_QWORD *)v9 + 7);
        if (v52)
        {
          v17 = *(unsigned int **)(v52 + 8);
          if ((v15 & 0x10) == 0)
            goto LABEL_107;
        }
        else
        {
          v17 = 0;
          if ((v15 & 0x10) == 0)
            goto LABEL_107;
        }
        if (!v17)
        {
          v17 = *(unsigned int **)(*((_QWORD *)v9 + 6) + 8);
          v53 = *((_QWORD *)v9 + 12);
          if (v53)
          {
            v54 = *(unsigned int **)(v53 + 8);
            if (v54)
            {
              do
              {
                v17 = v54;
                v55 = *((_QWORD *)v54 + 12);
                if (!v55)
                  break;
                v54 = *(unsigned int **)(v55 + 8);
              }
              while (v54);
              goto LABEL_108;
            }
          }
        }
      }
    }
    else
    {
      v17 = (unsigned int *)*((_QWORD *)v9 + 11);
      if (v17)
        goto LABEL_108;
      v35 = *(_QWORD *)(*((_QWORD *)v9 + 6) + 8);
      if (v35)
      {
        v17 = (unsigned int *)*((_QWORD *)v9 + 9);
        if (v17)
          goto LABEL_108;
        v36 = *(_QWORD *)(*((_QWORD *)v9 + 6) + 8);
        while (1)
        {
          v37 = *(_QWORD *)(v36 + 56);
          if (!v37)
            break;
          v36 = *(_QWORD *)(v37 + 8);
          if (!v36)
            break;
          v17 = *(unsigned int **)(v36 + 72);
          if (v17)
            goto LABEL_108;
        }
      }
      if ((v15 & 0x10) == 0)
      {
        v17 = 0;
        goto LABEL_110;
      }
      v17 = *(unsigned int **)(*(_QWORD *)(v35 + 128) + 8);
    }
LABEL_107:
    if (v17)
      goto LABEL_108;
    do
    {
LABEL_110:
      v58 = __ldaxr(v21);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v21));
    if (!v59)
    {
      atomic_store(1u, v21);
      v63 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v63 = off_1E31FE290;
      *((_QWORD *)v63 + 1) = v21;
      v90 = v63;
      WTF::ensureOnMainThread();
      result = v90;
      v90 = 0;
      if (result)
        result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    }
    do
    {
LABEL_112:
      v60 = __ldaxr(v21);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v21));
    if (!v61)
    {
      atomic_store(1u, v21);
      v62 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v62 = off_1E31FE290;
      *((_QWORD *)v62 + 1) = v21;
      v90 = v62;
      WTF::ensureOnMainThread();
      result = v90;
      v90 = 0;
      if (result)
        result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    }
    if (v28)
      goto LABEL_145;
LABEL_115:
    if (!v17)
      break;
    v9 = v17;
  }
  while (v17 != v13);
  if ((v15 & 0x10) == 0 || !a3[32])
    goto LABEL_144;
  v69 = (WebCore::Document *)*((_QWORD *)v13 + 37);
  v70 = (unsigned int *)*((_QWORD *)v69 + 382);
  if (v70)
  {
    ++*v70;
  }
  else
  {
    v82 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v82, v69);
    v84 = (WebCore::Editor *)*((_QWORD *)v69 + 382);
    *((_QWORD *)v69 + 382) = v82;
    if (v84)
    {
      WebCore::Editor::~Editor(v84, v83);
      if (*(_DWORD *)v85)
      {
        *(_QWORD *)(v85 + 496) = 0;
        *(_OWORD *)(v85 + 464) = 0u;
        *(_OWORD *)(v85 + 480) = 0u;
        *(_OWORD *)(v85 + 432) = 0u;
        *(_OWORD *)(v85 + 448) = 0u;
        *(_OWORD *)(v85 + 400) = 0u;
        *(_OWORD *)(v85 + 416) = 0u;
        *(_OWORD *)(v85 + 368) = 0u;
        *(_OWORD *)(v85 + 384) = 0u;
        *(_OWORD *)(v85 + 336) = 0u;
        *(_OWORD *)(v85 + 352) = 0u;
        *(_OWORD *)(v85 + 304) = 0u;
        *(_OWORD *)(v85 + 320) = 0u;
        *(_OWORD *)(v85 + 272) = 0u;
        *(_OWORD *)(v85 + 288) = 0u;
        *(_OWORD *)(v85 + 240) = 0u;
        *(_OWORD *)(v85 + 256) = 0u;
        *(_OWORD *)(v85 + 208) = 0u;
        *(_OWORD *)(v85 + 224) = 0u;
        *(_OWORD *)(v85 + 176) = 0u;
        *(_OWORD *)(v85 + 192) = 0u;
        *(_OWORD *)(v85 + 144) = 0u;
        *(_OWORD *)(v85 + 160) = 0u;
        *(_OWORD *)(v85 + 112) = 0u;
        *(_OWORD *)(v85 + 128) = 0u;
        *(_OWORD *)(v85 + 80) = 0u;
        *(_OWORD *)(v85 + 96) = 0u;
        *(_OWORD *)(v85 + 48) = 0u;
        *(_OWORD *)(v85 + 64) = 0u;
        *(_OWORD *)(v85 + 16) = 0u;
        *(_OWORD *)(v85 + 32) = 0u;
        *(_OWORD *)v85 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v85, v86);
      }
    }
    v70 = (unsigned int *)*((_QWORD *)v69 + 382);
    v87 = a3[32];
    ++*v70;
    if (!v87)
      goto LABEL_162;
  }
  v71 = *(WebCore::Node **)a3;
  *((_DWORD *)v71 + 6) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
  v90 = v71;
  v91 = *((_DWORD *)a3 + 2);
  v72 = (WebCore::Node *)*((_QWORD *)a3 + 2);
  *((_DWORD *)v72 + 6) += 2;
  v92 = v72;
  v93 = *((_DWORD *)a3 + 6);
  v94 = 1;
  result = (WebCore::Node *)WebCore::Editor::rangeOfString(v70, a2, (unsigned __int8 *)&v90, a4 | 0x30u, a5);
  if (v94)
  {
    v74 = v92;
    v92 = 0;
    if (v74)
    {
      if (*((_DWORD *)v74 + 6) == 2)
      {
        if ((*((_WORD *)v74 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v74, v73);
      }
      else
      {
        *((_DWORD *)v74 + 6) -= 2;
      }
    }
    result = v90;
    v90 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v73);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  if (!*v70)
  {
    __break(0xC471u);
    JUMPOUT(0x19601BA88);
  }
  --*v70;
  if (!*(_BYTE *)(a5 + 32))
  {
LABEL_144:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 32) = 0;
  }
LABEL_145:
  if ((v89 & 1) != 0)
    goto LABEL_149;
  a5 = (uint64_t)(v13 + 2);
  do
  {
    v75 = __ldaxr((unsigned int *)a5);
    v76 = v75 - 1;
  }
  while (__stlxr(v76, (unsigned int *)a5));
  if (v76)
    goto LABEL_149;
LABEL_163:
  atomic_store(1u, (unsigned int *)a5);
  v81 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v81 = off_1E31FE290;
  *((_QWORD *)v81 + 1) = a5;
  v90 = v81;
  WTF::ensureOnMainThread();
  result = v90;
  v90 = 0;
  if (result)
    result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
LABEL_149:
  if (v17)
  {
    v77 = v17 + 2;
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v77);
      v80 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v80 = off_1E31FE290;
      *((_QWORD *)v80 + 1) = v77;
      v90 = v80;
      WTF::ensureOnMainThread();
      result = v90;
      v90 = 0;
      if (result)
        return (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::Page::findMatchesForText(uint64_t a1, void *a2, __int16 a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WebCore::Node *v24;
  unsigned int *v25;
  unsigned int v26;
  WebCore::Document *v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  WebCore::Document *v31;
  _DWORD *v32;
  int v33;
  void *v34;
  int v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Editor *v49;
  void *v50;
  WebCore::Editor *v51;
  uint64_t v52;
  void *v53;
  WebCore::Editor *v54;
  void *v55;
  WebCore::Editor *v56;
  uint64_t v57;
  void *v58;
  WebCore::Node *v59;
  WebCore::Node *v60;
  char v61;

  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v11 = *(_QWORD *)(a1 + 160);
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v6 = 0;
    v14 = a5 == 1;
    while (1)
    {
      if (v11 && !*(_BYTE *)(v11 + 144))
      {
        v25 = (unsigned int *)(v11 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
        if (a6 == 1)
        {
          v27 = *(WebCore::Document **)(v11 + 296);
          v28 = *((_QWORD *)v27 + 382);
          if (!v28)
          {
            v54 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v54, v27);
            v56 = (WebCore::Editor *)*((_QWORD *)v27 + 382);
            *((_QWORD *)v27 + 382) = v54;
            if (v56)
            {
              WebCore::Editor::~Editor(v56, v55);
              if (*(_DWORD *)v57)
              {
                *(_QWORD *)(v57 + 496) = 0;
                *(_OWORD *)(v57 + 464) = 0u;
                *(_OWORD *)(v57 + 480) = 0u;
                *(_OWORD *)(v57 + 432) = 0u;
                *(_OWORD *)(v57 + 448) = 0u;
                *(_OWORD *)(v57 + 400) = 0u;
                *(_OWORD *)(v57 + 416) = 0u;
                *(_OWORD *)(v57 + 368) = 0u;
                *(_OWORD *)(v57 + 384) = 0u;
                *(_OWORD *)(v57 + 336) = 0u;
                *(_OWORD *)(v57 + 352) = 0u;
                *(_OWORD *)(v57 + 304) = 0u;
                *(_OWORD *)(v57 + 320) = 0u;
                *(_OWORD *)(v57 + 272) = 0u;
                *(_OWORD *)(v57 + 288) = 0u;
                *(_OWORD *)(v57 + 240) = 0u;
                *(_OWORD *)(v57 + 256) = 0u;
                *(_OWORD *)(v57 + 208) = 0u;
                *(_OWORD *)(v57 + 224) = 0u;
                *(_OWORD *)(v57 + 176) = 0u;
                *(_OWORD *)(v57 + 192) = 0u;
                *(_OWORD *)(v57 + 144) = 0u;
                *(_OWORD *)(v57 + 160) = 0u;
                *(_OWORD *)(v57 + 112) = 0u;
                *(_OWORD *)(v57 + 128) = 0u;
                *(_OWORD *)(v57 + 80) = 0u;
                *(_OWORD *)(v57 + 96) = 0u;
                *(_OWORD *)(v57 + 48) = 0u;
                *(_OWORD *)(v57 + 64) = 0u;
                *(_OWORD *)(v57 + 16) = 0u;
                *(_OWORD *)(v57 + 32) = 0u;
                *(_OWORD *)v57 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v57, v58);
              }
            }
            v28 = *((_QWORD *)v27 + 382);
          }
          v29 = *(_DWORD *)v28 + 1;
          *(_DWORD *)v28 = v29;
          if (*(unsigned __int8 *)(v28 + 304) != v14)
          {
            *(_BYTE *)(v28 + 304) = v14;
            v30 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v28 + 16) + 8) + 1496);
            if (v30)
            {
              ++*v30;
              WebCore::DocumentMarkerController::repaintMarkers((uint64_t)v30, 4);
              if (!*v30)
                goto LABEL_86;
              --*v30;
              v29 = *(_DWORD *)v28;
            }
          }
          if (!v29)
          {
            __break(0xC471u);
            JUMPOUT(0x19601BFF8);
          }
          *(_DWORD *)v28 = v29 - 1;
        }
        v31 = *(WebCore::Document **)(v11 + 296);
        v32 = (_DWORD *)*((_QWORD *)v31 + 382);
        if (!v32)
        {
          v49 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v49, v31);
          v51 = (WebCore::Editor *)*((_QWORD *)v31 + 382);
          *((_QWORD *)v31 + 382) = v49;
          if (v51)
          {
            WebCore::Editor::~Editor(v51, v50);
            if (*(_DWORD *)v52)
            {
              *(_QWORD *)(v52 + 496) = 0;
              *(_OWORD *)(v52 + 464) = 0u;
              *(_OWORD *)(v52 + 480) = 0u;
              *(_OWORD *)(v52 + 432) = 0u;
              *(_OWORD *)(v52 + 448) = 0u;
              *(_OWORD *)(v52 + 400) = 0u;
              *(_OWORD *)(v52 + 416) = 0u;
              *(_OWORD *)(v52 + 368) = 0u;
              *(_OWORD *)(v52 + 384) = 0u;
              *(_OWORD *)(v52 + 336) = 0u;
              *(_OWORD *)(v52 + 352) = 0u;
              *(_OWORD *)(v52 + 304) = 0u;
              *(_OWORD *)(v52 + 320) = 0u;
              *(_OWORD *)(v52 + 272) = 0u;
              *(_OWORD *)(v52 + 288) = 0u;
              *(_OWORD *)(v52 + 240) = 0u;
              *(_OWORD *)(v52 + 256) = 0u;
              *(_OWORD *)(v52 + 208) = 0u;
              *(_OWORD *)(v52 + 224) = 0u;
              *(_OWORD *)(v52 + 176) = 0u;
              *(_OWORD *)(v52 + 192) = 0u;
              *(_OWORD *)(v52 + 144) = 0u;
              *(_OWORD *)(v52 + 160) = 0u;
              *(_OWORD *)(v52 + 112) = 0u;
              *(_OWORD *)(v52 + 128) = 0u;
              *(_OWORD *)(v52 + 80) = 0u;
              *(_OWORD *)(v52 + 96) = 0u;
              *(_OWORD *)(v52 + 48) = 0u;
              *(_OWORD *)(v52 + 64) = 0u;
              *(_OWORD *)(v52 + 16) = 0u;
              *(_OWORD *)(v52 + 32) = 0u;
              *(_OWORD *)v52 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v52, v53);
            }
          }
          v32 = (_DWORD *)*((_QWORD *)v31 + 382);
        }
        ++*v32;
        LOBYTE(v59) = 0;
        v61 = 0;
        if (a4)
          v33 = a4 - v6;
        else
          v33 = 0;
        v35 = WebCore::Editor::countMatchesForText((uint64_t)v32, a2, (int *)&v59, a3, v33, a6 == 1, 0);
        if (v61)
        {
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*((_DWORD *)v36 + 6) == 2)
            {
              if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v36, v34);
            }
            else
            {
              *((_DWORD *)v36 + 6) -= 2;
            }
          }
          v37 = v59;
          v59 = 0;
          if (v37)
          {
            if (*((_DWORD *)v37 + 6) == 2)
            {
              if ((*((_WORD *)v37 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v37, v34);
            }
            else
            {
              *((_DWORD *)v37 + 6) -= 2;
            }
          }
        }
        if (!*v32)
        {
LABEL_86:
          __break(0xC471u);
          JUMPOUT(0x19601BFD8);
        }
        --*v32;
        v16 = *(_QWORD *)(v11 + 88);
        if (v16)
          goto LABEL_53;
        v38 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8);
        if (!v38)
          goto LABEL_56;
        v16 = *(_QWORD *)(v11 + 72);
        if (v16)
        {
LABEL_53:
          v40 = (unsigned int *)(v16 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
        }
        else
        {
          while (1)
          {
            v39 = *(_QWORD *)(v38 + 56);
            if (!v39)
              break;
            v38 = *(_QWORD *)(v39 + 8);
            if (!v38)
              break;
            v16 = *(_QWORD *)(v38 + 72);
            if (v16)
              goto LABEL_53;
          }
LABEL_56:
          v16 = 0;
        }
        v6 = (v35 + v6);
        do
        {
          v42 = __ldaxr(v25);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v25));
        if (!v43)
        {
          atomic_store(1u, v25);
          v46 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v46 = off_1E31FE290;
          *((_QWORD *)v46 + 1) = v25;
          v59 = v46;
          WTF::ensureOnMainThread();
          v47 = v59;
          v59 = 0;
          if (v47)
            (*(void (**)(WebCore::Node *))(*(_QWORD *)v47 + 8))(v47);
        }
        do
        {
          v44 = __ldaxr(v25);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v25));
        if (v45)
          goto LABEL_62;
        atomic_store(1u, v25);
        v24 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v24 = off_1E31FE290;
        *((_QWORD *)v24 + 1) = v25;
        goto LABEL_72;
      }
      v16 = *(_QWORD *)(v11 + 88);
      if (v16)
        goto LABEL_16;
      v17 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8);
      if (v17)
        break;
      v16 = 0;
LABEL_21:
      v21 = (unsigned int *)(v11 + 8);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        v24 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v24 = off_1E31FE290;
        *((_QWORD *)v24 + 1) = v21;
LABEL_72:
        v59 = v24;
        WTF::ensureOnMainThread();
        v48 = v59;
        v59 = 0;
        if (v48)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v48 + 8))(v48);
      }
LABEL_62:
      v11 = v16;
      if (!v16)
        return v6;
    }
    v16 = *(_QWORD *)(v11 + 72);
    if (v16)
    {
LABEL_16:
      v19 = (unsigned int *)(v16 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    else
    {
      while (1)
      {
        v18 = *(_QWORD *)(v17 + 56);
        if (!v18)
          break;
        v17 = *(_QWORD *)(v18 + 8);
        if (!v17)
          break;
        v16 = *(_QWORD *)(v17 + 72);
        if (v16)
          goto LABEL_16;
      }
      v16 = 0;
    }
    if (!v11)
      goto LABEL_62;
    goto LABEL_21;
  }
  return 0;
}

uint64_t WebCore::Page::markAllMatchesForText(uint64_t a1, void *a2, __int16 a3, int a4, int a5)
{
  return WebCore::Page::findMatchesForText(a1, a2, a3, a5, a4, 1);
}

uint64_t WebCore::Page::countFindMatches(uint64_t a1, void *a2, __int16 a3, int a4)
{
  return WebCore::Page::findMatchesForText(a1, a2, a3, a4, 0, 0);
}

uint64_t WebCore::Page::replaceRangesWithText(uint64_t a1, uint64_t a2, const WebCore::SimpleRange *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const WebCore::SimpleRange *v6;
  uint64_t v7;
  unsigned int v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  int **v13;
  unsigned int v14;
  int *v15;
  uint64_t v16;
  WebCore::Node *v17;
  int v18;
  char v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  int v22;
  char v23;
  WebCore::Node *v24;
  _BOOL4 v25;
  uint64_t v26;
  WebCore::Node *v27;
  char v28;
  int v29;
  WebCore::Node *v30;
  uint64_t v31;
  WebCore::Node *v32;
  int v33;
  int v34;
  WebCore::Node *v35;
  unint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  WebCore::Node *v41;
  unsigned int v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  WTF **v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  int v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  WebCore::Node *v108;
  WebCore::Node *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  WTF *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unint64_t v130;
  double v131;
  double v132;
  double v133;
  unsigned int v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  unsigned int *v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  WebCore::Node *v158;
  WebCore::Node *v159;
  unint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t i;
  uint64_t *v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  WebCore::Node *v171;
  WebCore::Node *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int v182;
  _QWORD *v183;
  uint64_t v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  WebCore::Node *v193;
  WebCore::Node *v194;
  WebCore::Node *v195;
  int v196;
  int v197;
  uint64_t v198;
  WebCore::Node *v199;
  WebCore::Node *v200;
  int v201;
  WebCore::Document *v202;
  uint64_t v203;
  WebCore::Node *v204;
  uint64_t v205;
  WebCore::Node *v206;
  WebCore::Node *v207;
  WebCore::Editor *v208;
  void *v209;
  WebCore::Editor *v210;
  uint64_t v211;
  void *v212;
  unsigned int v213;
  unsigned int v214;
  WebCore::Node *v215;
  WebCore::Node *v216;
  uint64_t v217;
  WTF *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t j;
  uint64_t *v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  WebCore::Node *v228;
  WebCore::Node *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t k;
  uint64_t *v233;
  uint64_t v234;
  WTF **v235;
  uint64_t v236;
  WTF *v237;
  uint64_t v238;
  uint64_t v239;
  WTF *v240;
  uint64_t v241;
  uint64_t v242;
  WTF *v243;
  uint64_t v244;
  WTF *v245;
  uint64_t v246;
  unint64_t v250;
  WTF *v252;
  WTF *v253;
  uint64_t *v254;
  WTF *v255;
  uint64_t v256;
  WebCore::Node *v257;
  int v258;
  WebCore::Node *v259;
  int v260;
  char v261;
  WebCore::Node *v262;
  int v263;
  WebCore::Node *v264;
  int v265;
  _DWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  WebCore::Node *v269;
  __int128 v270;
  int v271;
  char v272;
  char v273;

  v6 = a3;
  v255 = 0;
  v256 = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v7)
  {
LABEL_87:
    v268 = 0;
    goto LABEL_154;
  }
  if (v7 >= 0xAAAAAAB)
  {
    __break(0xC471u);
    JUMPOUT(0x19601D69CLL);
  }
  v9 = 24 * v7;
  v11 = (WTF *)WTF::fastMalloc((WTF *)(24 * v7));
  LODWORD(v256) = (v9 & 0xFFFFFFF8) / 0x18;
  v255 = v11;
  v12 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v12)
  {
    if (v9 >= 0x18)
    {
      v14 = 0;
      v42 = 0;
      goto LABEL_94;
    }
    goto LABEL_87;
  }
  v13 = (int **)a2;
  v14 = 0;
  v15 = *v13;
  v16 = 32 * v12;
  do
  {
    v17 = *(WebCore::Node **)v15;
    *((_DWORD *)v17 + 6) = *(_DWORD *)(*(_QWORD *)v15 + 24) + 2;
    v18 = v15[2];
    v269 = v17;
    LODWORD(v270) = v18;
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v17 + 208))(v17) & 1) != 0)
    {
      v19 = 8;
    }
    else if (v18)
    {
      v19 = 10;
    }
    else
    {
      v19 = 9;
    }
    BYTE4(v270) = BYTE4(v270) & 0xF0 | v19;
    WebCore::highestEditableRoot((uint64_t)&v269, 0, (uint64_t *)&v257);
    v20 = v269;
    v269 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, v10);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    if (!v257)
      goto LABEL_25;
    v21 = (WebCore::Node *)*((_QWORD *)v15 + 2);
    *((_DWORD *)v21 + 6) += 2;
    v22 = v15[6];
    v269 = v21;
    LODWORD(v270) = v22;
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v21 + 208))(v21) & 1) != 0)
      v23 = 8;
    else
      v23 = v22 ? 10 : 9;
    BYTE4(v270) = BYTE4(v270) & 0xF0 | v23;
    WebCore::highestEditableRoot((uint64_t)&v269, 0, (uint64_t *)&v262);
    v24 = v262;
    if (v257 == v262)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v257 + 5) + 8) + 528);
      if (v26)
        v26 = *(_QWORD *)(v26 + 8);
      v25 = v26 == 0;
    }
    else
    {
      v25 = 1;
    }
    v262 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24, v10);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    v27 = v269;
    v269 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27, v10);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    if (v25)
    {
LABEL_25:
      v5 &= 0xFFFFFFFFFFFFFF00;
      v28 = 1;
      goto LABEL_36;
    }
    v5 = (unint64_t)v257;
    v29 = *((_DWORD *)v257 + 6);
    v257 = 0;
    *(_DWORD *)(v5 + 24) = v29 + 6;
    v269 = (WebCore::Node *)v5;
    LODWORD(v270) = 0;
    v30 = *(WebCore::Node **)v15;
    *((_DWORD *)v30 + 6) = *(_DWORD *)(*(_QWORD *)v15 + 24) + 2;
    *((_QWORD *)&v270 + 1) = v30;
    v271 = v15[2];
    v3 = WebCore::characterCount((int *)&v269, 0);
    v4 = WebCore::characterCount(v15, 0);
    v31 = *((_QWORD *)&v270 + 1);
    *((_QWORD *)&v270 + 1) = 0;
    if (v31)
    {
      if (*(_DWORD *)(v31 + 24) == 2)
      {
        if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v31, v10);
      }
      else
      {
        *(_DWORD *)(v31 + 24) -= 2;
      }
    }
    v32 = v269;
    v269 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v10);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    v33 = *(_DWORD *)(v5 + 24) - 2;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) != 0)
        goto LABEL_61;
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
      v33 = *(_DWORD *)(v5 + 24);
    }
    else
    {
      *(_DWORD *)(v5 + 24) = v33;
    }
    v34 = v33 - 2;
    if (v34)
    {
      v28 = 0;
      *(_DWORD *)(v5 + 24) = v34;
      goto LABEL_36;
    }
LABEL_61:
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
    v28 = 0;
LABEL_36:
    v35 = v257;
    v257 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35, v10);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    if ((v28 & 1) == 0)
    {
      v269 = (WebCore::Node *)v5;
      *(_QWORD *)&v270 = v3;
      *((_QWORD *)&v270 + 1) = v4;
      if (v14 == (_DWORD)v256)
      {
        v36 = WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v255, v14 + 1, (unint64_t)&v269);
        v37 = HIDWORD(v256);
        v11 = v255;
        v38 = (char *)v255 + 24 * HIDWORD(v256);
        v39 = *(_QWORD *)v36;
        *(_QWORD *)v36 = 0;
        *(_QWORD *)v38 = v39;
        *(_OWORD *)(v38 + 8) = *(_OWORD *)(v36 + 8);
      }
      else
      {
        v40 = (unint64_t *)((char *)v11 + 24 * v14);
        v269 = 0;
        *v40 = v5;
        *(_OWORD *)(v40 + 1) = v270;
        v37 = HIDWORD(v256);
      }
      v14 = v37 + 1;
      HIDWORD(v256) = v37 + 1;
      v41 = v269;
      v269 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 6) == 2)
        {
          if ((*((_WORD *)v41 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v41, v10);
        }
        else
        {
          *((_DWORD *)v41 + 6) -= 2;
        }
      }
      v5 = 0;
    }
    v15 += 8;
    v16 -= 32;
  }
  while (v16);
  v11 = v255;
  v42 = v14;
  if (v256 <= v14)
  {
    v6 = a3;
    goto LABEL_97;
  }
  if (!v14)
  {
    v42 = 0;
LABEL_91:
    v44 = v11;
    goto LABEL_92;
  }
  if (v14 >= 0xAAAAAAB)
  {
LABEL_434:
    __break(0xC471u);
    JUMPOUT(0x19601D674);
  }
  v43 = (WTF *)WTF::fastMalloc((WTF *)(24 * v14));
  LODWORD(v256) = 24 * v14 / 0x18;
  v255 = v43;
  if (v43 == v11)
    goto LABEL_91;
  v44 = v43;
  v45 = 0;
  do
  {
    v46 = (char *)v44 + v45;
    v47 = (_QWORD *)((char *)v11 + v45);
    v48 = *(_QWORD *)((char *)v11 + v45);
    *v47 = 0;
    *(_QWORD *)v46 = v48;
    *(_OWORD *)(v46 + 8) = *(_OWORD *)((char *)v11 + v45 + 8);
    v49 = *(_QWORD *)((char *)v11 + v45);
    *v47 = 0;
    if (v49)
    {
      if (*(_DWORD *)(v49 + 24) == 2)
      {
        if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v49, v10);
      }
      else
      {
        *(_DWORD *)(v49 + 24) -= 2;
      }
    }
    v45 += 24;
  }
  while (v47 + 3 != (_QWORD *)((char *)v11 + 24 * v14));
LABEL_92:
  v6 = a3;
  if (v11)
  {
    if (v44 == v11)
    {
LABEL_94:
      v44 = 0;
      v255 = 0;
      LODWORD(v256) = 0;
    }
    WTF::fastFree(v11, v10);
  }
  v11 = v44;
LABEL_97:
  v268 = 0;
  if (v14)
  {
    v253 = (WTF *)((char *)v11 + 24 * v42);
    do
    {
      WTF::HashTable<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashMap<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashTraits<WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>::rehash((uint64_t *)&v268, 8u, 0);
      v51 = (uint64_t)v268;
      if (v268)
        break;
      v52 = 0;
LABEL_101:
      v53 = ~(*(_QWORD *)v11 << 32) + *(_QWORD *)v11;
      v54 = (v53 ^ (v53 >> 22)) + ~((v53 ^ (v53 >> 22)) << 13);
      v55 = (9 * (v54 ^ (v54 >> 8))) ^ ((9 * (v54 ^ (v54 >> 8))) >> 15);
      v56 = v52 & (((v55 + ~(v55 << 27)) >> 31) ^ (v55 + ~((_DWORD)v55 << 27)));
      v57 = (_QWORD *)(v51 + 24 * v56);
      v58 = *v57;
      if (*v57)
      {
        v59 = 0;
        v60 = 1;
        while (v58 != *(_QWORD *)v11)
        {
          if (v58 == -1)
            v59 = v57;
          v56 = (v56 + v60) & v52;
          v57 = (_QWORD *)(v51 + 24 * v56);
          v58 = *v57;
          ++v60;
          if (!*v57)
          {
            if (v59)
            {
              *v59 = 0;
              v59[1] = 0;
              v59[2] = 0;
              --*(_DWORD *)(v51 - 16);
              v57 = v59;
            }
            goto LABEL_109;
          }
        }
      }
      else
      {
LABEL_109:
        WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=(v57, (uint64_t *)v11);
        v61 = (WTF **)(v57 + 1);
        v62 = *((unsigned int *)v57 + 5);
        if ((_DWORD)v62)
        {
          v63 = *v61;
          v64 = 24 * v62;
          do
          {
            v65 = *(_QWORD *)v63;
            *(_QWORD *)v63 = 0;
            if (v65)
            {
              if (*(_DWORD *)(v65 + 24) == 2)
              {
                if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v65, v50);
              }
              else
              {
                *(_DWORD *)(v65 + 24) -= 2;
              }
            }
            v63 = (WTF *)((char *)v63 + 24);
            v64 -= 24;
          }
          while (v64);
        }
        v66 = *v61;
        if (*v61)
        {
          v57[1] = 0;
          *((_DWORD *)v57 + 4) = 0;
          WTF::fastFree(v66, v50);
        }
        *v61 = 0;
        v57[2] = 0;
        v67 = (uint64_t)v268;
        if (v268)
          v68 = *((_DWORD *)v268 - 3) + 1;
        else
          v68 = 1;
        *((_DWORD *)v268 - 3) = v68;
        v69 = (*(_DWORD *)(v67 - 16) + v68);
        v70 = *(unsigned int *)(v67 - 4);
        if (v70 > 0x400)
        {
          if (v70 > 2 * v69)
            goto LABEL_130;
LABEL_126:
          v71 = (_DWORD)v70 << (6 * v68 >= (2 * v70));
LABEL_129:
          v57 = WTF::HashTable<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashMap<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashTraits<WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>::rehash((uint64_t *)&v268, v71, v57);
          goto LABEL_130;
        }
        if (3 * v70 <= 4 * v69)
        {
          if ((_DWORD)v70)
            goto LABEL_126;
          v71 = 8;
          goto LABEL_129;
        }
      }
LABEL_130:
      v72 = v57[1];
      v73 = *((unsigned int *)v57 + 5);
      v74 = v72 + 24 * v73;
      v75 = -24 * v73;
      v76 = v73 + 1;
      while (v75)
      {
        v77 = *(_QWORD *)(v74 - 16);
        v78 = *(_QWORD *)(v74 - 8);
        v74 -= 24;
        v75 += 24;
        --v76;
        if (*((_QWORD *)v11 + 2) + *((_QWORD *)v11 + 1) >= (unint64_t)(v78 + v77))
          goto LABEL_135;
      }
      v76 = 0;
LABEL_135:
      if ((_DWORD)v73 == *((_DWORD *)v57 + 4))
      {
        v79 = WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v57 + 1), v73 + 1, (unint64_t)v11);
        v73 = *((unsigned int *)v57 + 5);
        v72 = v57[1];
      }
      else
      {
        v79 = (unint64_t)v11;
      }
      v80 = (_QWORD *)(v72 + 24 * v76);
      if (v73 != v76)
      {
        v82 = 3 * v73;
        v83 = v72 + 8 * v82;
        v84 = (uint64_t *)(v83 - 24);
        v85 = (_OWORD *)(v72 + 24 * ((v83 - (uint64_t)v80) / 24) + 24 * v76 + 8);
        v86 = 24 * v76 - 8 * v82;
        do
        {
          v87 = *v84;
          *v84 = 0;
          *((_QWORD *)v85 - 1) = v87;
          *v85 = *(_OWORD *)(v84 + 1);
          v88 = *v84;
          *v84 = 0;
          if (v88)
          {
            if (*(_DWORD *)(v88 + 24) == 2)
            {
              if ((*(_WORD *)(v88 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v88, v50);
            }
            else
            {
              *(_DWORD *)(v88 + 24) -= 2;
            }
          }
          v84 -= 3;
          v85 = (_OWORD *)((char *)v85 - 24);
          v86 += 24;
        }
        while (v86);
      }
      v81 = *(_QWORD *)v79;
      if (*(_QWORD *)v79)
        *(_DWORD *)(v81 + 24) += 2;
      *v80 = v81;
      *(_OWORD *)(v72 + 24 * v76 + 8) = *(_OWORD *)(v79 + 8);
      ++*((_DWORD *)v57 + 5);
      v11 = (WTF *)((char *)v11 + 24);
      v6 = a3;
      if (v11 == v253)
        goto LABEL_154;
      v51 = (uint64_t)v268;
    }
    while (!v268);
    v52 = *(_DWORD *)(v51 - 8);
    goto LABEL_101;
  }
LABEL_154:
  v267 = 0;
  v89 = *(_QWORD *)(a1 + 160);
  if (!v89)
    goto LABEL_195;
  v90 = 0;
LABEL_156:
  while (2)
  {
    while (2)
    {
      v91 = (_QWORD *)v89;
      if (*(_BYTE *)(v89 + 144))
        goto LABEL_186;
      v92 = (unsigned int *)(v89 + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 + 1, v92));
      v94 = v267;
      if (v267
        || (WTF::HashTable<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashMap<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>>::rehash(&v267, 8u), (v94 = v267) != 0))
      {
        v95 = *(_DWORD *)(v94 - 8);
      }
      else
      {
        v95 = 0;
      }
      v96 = ((unint64_t)v91 + ~((_QWORD)v91 << 32)) ^ (((unint64_t)v91 + ~((_QWORD)v91 << 32)) >> 22);
      v97 = 9 * ((v96 + ~(v96 << 13)) ^ ((v96 + ~(v96 << 13)) >> 8));
      v98 = (v97 ^ (v97 >> 15)) + ~((v97 ^ (v97 >> 15)) << 27);
      v99 = v95 & ((v98 >> 31) ^ v98);
      v100 = (_QWORD *)(v94 + 16 * v99);
      v101 = (_QWORD *)*v100;
      if (!*v100)
      {
LABEL_170:
        *v100 = v91;
        *((_DWORD *)v100 + 2) = v90;
        v104 = v267;
        if (v267)
          v105 = *(_DWORD *)(v267 - 12) + 1;
        else
          v105 = 1;
        *(_DWORD *)(v267 - 12) = v105;
        v110 = (*(_DWORD *)(v104 - 16) + v105);
        v111 = *(unsigned int *)(v104 - 4);
        if (v111 > 0x400)
        {
          if (v111 > 2 * v110)
            goto LABEL_185;
        }
        else
        {
          if (3 * v111 > 4 * v110)
            goto LABEL_185;
          if (!(_DWORD)v111)
          {
            v112 = 8;
            goto LABEL_184;
          }
        }
        v112 = (_DWORD)v111 << (6 * v105 >= (2 * v111));
LABEL_184:
        WTF::HashTable<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashMap<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>>::rehash(&v267, v112);
        goto LABEL_185;
      }
      v102 = 0;
      v103 = 1;
      while (v101 != v91)
      {
        if (v101 == (_QWORD *)-1)
          v102 = v100;
        v99 = (v99 + v103) & v95;
        v100 = (_QWORD *)(v94 + 16 * v99);
        v101 = (_QWORD *)*v100;
        ++v103;
        if (!*v100)
        {
          if (v102)
          {
            *v102 = 0;
            v102[1] = 0;
            --*(_DWORD *)(v94 - 16);
            v100 = v102;
          }
          goto LABEL_170;
        }
      }
      *((_DWORD *)v100 + 2) = v90;
      do
      {
        v106 = __ldaxr(v92);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v92));
      if (!v107)
      {
        atomic_store(1u, v92);
        v108 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v108 = off_1E31FE290;
        *((_QWORD *)v108 + 1) = v92;
        v269 = v108;
        WTF::ensureOnMainThread();
        v109 = v269;
        v269 = 0;
        if (v109)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v109 + 8))(v109);
      }
LABEL_185:
      ++v90;
LABEL_186:
      v89 = v91[11];
      if (v89)
        continue;
      break;
    }
    v113 = *(_QWORD *)(v91[6] + 8);
    if (!v113)
      goto LABEL_195;
    v89 = v91[9];
    if (v89)
      continue;
    break;
  }
  while (1)
  {
    v114 = *(_QWORD *)(v113 + 56);
    if (!v114)
      break;
    v113 = *(_QWORD *)(v114 + 8);
    if (!v113)
      break;
    v89 = *(_QWORD *)(v113 + 72);
    if (v89)
      goto LABEL_156;
  }
LABEL_195:
  if (!v268)
  {
    v117 = 0;
    LODWORD(v115) = 0;
LABEL_207:
    v116 = &v268[3 * v115];
    if (v268)
      goto LABEL_202;
    v119 = 0;
    goto LABEL_209;
  }
  v115 = *((unsigned int *)v268 - 1);
  v116 = &v268[3 * v115];
  if (!*((_DWORD *)v268 - 3))
  {
    v117 = &v268[3 * v115];
    goto LABEL_207;
  }
  v117 = v268;
  if ((_DWORD)v115)
  {
    v118 = 24 * v115;
    v117 = v268;
    while ((unint64_t)(*v117 + 1) <= 1)
    {
      v117 += 3;
      v118 -= 24;
      if (!v118)
      {
        v117 = v116;
        break;
      }
    }
  }
LABEL_202:
  v119 = &v268[3 * *((unsigned int *)v268 - 1)];
  v120 = *((unsigned int *)v268 - 3);
  if (!(_DWORD)v120)
  {
LABEL_209:
    v121 = 0;
    goto LABEL_210;
  }
  if (v120 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19601D6A4);
  }
  v121 = (WTF *)WTF::fastMalloc((WTF *)(8 * v120));
LABEL_210:
  if (v119 == v117)
  {
    v122 = 0;
  }
  else
  {
    v122 = 0;
    do
    {
      v123 = *v117;
      if (*v117)
        *(_DWORD *)(v123 + 24) += 2;
      *((_QWORD *)v121 + v122) = v123;
      v124 = v117 + 3;
      v117 = v116;
      if (v124 != v116)
      {
        v117 = v124;
        while ((unint64_t)(*v117 + 1) <= 1)
        {
          v117 += 3;
          if (v117 == v116)
          {
            v117 = v116;
            break;
          }
        }
      }
      ++v122;
    }
    while (v117 != v119);
  }
  v125 = v122;
  v266 = 0;
  v126 = v267;
  v254 = (uint64_t *)((char *)v121 + 8 * v122);
  if (v267)
  {
    v127 = *(unsigned int *)(v267 - 12);
    if ((_DWORD)v127)
    {
      v128 = (v127 - 1) | ((v127 - 1) >> 1) | ((((_DWORD)v127 - 1) | ((v127 - 1) >> 1)) >> 2);
      v129 = v128 | (v128 >> 4) | ((v128 | (v128 >> 4)) >> 8);
      v130 = (v129 | HIWORD(v129)) + 1;
      if (v130 > 0x400)
      {
        if (v130 <= 2 * v127)
        {
LABEL_226:
          LODWORD(v130) = 2 * v130;
          if (v130 <= 0x400)
            goto LABEL_227;
        }
        v131 = (double)v127;
        v132 = (double)v130;
        v133 = 0.416666667;
      }
      else
      {
        if (3 * v130 <= 4 * v127)
          goto LABEL_226;
LABEL_227:
        v131 = (double)v127;
        v132 = (double)v130;
        v133 = 0.604166667;
      }
      if (v132 * v133 <= v131)
        LODWORD(v130) = 2 * v130;
      if (v130 <= 8)
        v134 = 8;
      else
        v134 = v130;
      v135 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v134 + 16));
      v266 = v135 + 4;
      v135[2] = v134 - 1;
      v135[3] = v134;
      *v135 = 0;
      v135[1] = v127;
      v6 = a3;
      if (*(_DWORD *)(v126 - 12))
      {
        v136 = *(unsigned int *)(v126 - 4);
        if ((_DWORD)v136)
        {
          v137 = 16 * v136;
          v138 = v126;
          while ((unint64_t)(*(_QWORD *)v138 + 1) <= 1)
          {
            v138 += 16;
            v137 -= 16;
            if (!v137)
              goto LABEL_264;
          }
        }
        else
        {
          v138 = v126;
        }
        v139 = v126 + 16 * v136;
        while (v138 != v139)
        {
          v140 = (uint64_t)v266;
          if (v266)
            v141 = *(v266 - 2);
          else
            v141 = 0;
          v142 = *(_QWORD *)v138;
          v143 = ~(*(_QWORD *)v138 << 32) + *(_QWORD *)v138;
          v144 = (v143 ^ (v143 >> 22)) + ~((v143 ^ (v143 >> 22)) << 13);
          v145 = (9 * (v144 ^ (v144 >> 8))) ^ ((9 * (v144 ^ (v144 >> 8))) >> 15);
          v146 = v141 & (((v145 + ~(v145 << 27)) >> 31) ^ (v145 + ~((_DWORD)v145 << 27)));
          v147 = 1;
          do
          {
            v148 = v146;
            v149 = *(_QWORD *)&v266[4 * v146];
            v146 = (v146 + v147++) & v141;
          }
          while (v149);
          v150 = v148;
          v151 = (uint64_t *)&v266[4 * v148];
          if (v142)
          {
            v152 = (unsigned int *)(v142 + 8);
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 + 1, v152));
            v154 = *v151;
            *v151 = v142;
            if (v154)
            {
              v155 = (unsigned int *)(v154 + 8);
              do
              {
                v156 = __ldaxr(v155);
                v157 = v156 - 1;
              }
              while (__stlxr(v157, v155));
              if (!v157)
              {
                atomic_store(1u, v155);
                v158 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v158 = off_1E31FE290;
                *((_QWORD *)v158 + 1) = v155;
                v269 = v158;
                WTF::ensureOnMainThread();
                v159 = v269;
                v269 = 0;
                if (v159)
                  (*(void (**)(WebCore::Node *))(*(_QWORD *)v159 + 8))(v159);
              }
            }
          }
          else
          {
            *v151 = 0;
          }
          *(_DWORD *)(v140 + 16 * v150 + 8) = *(_DWORD *)(v138 + 8);
          v138 += 16;
          v6 = a3;
          if (v138 == v139)
            break;
          while ((unint64_t)(*(_QWORD *)v138 + 1) <= 1)
          {
            v138 += 16;
            if (v138 == v139)
              goto LABEL_264;
          }
        }
      }
    }
  }
LABEL_264:
  v160 = 126 - 2 * __clz(v125);
  if ((_DWORD)v125)
    v161 = v160;
  else
    v161 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *,false>((uint64_t)v121, v254, (uint64_t *)&v266, v161, 1);
  v163 = (uint64_t)v266;
  if (v266)
  {
    v164 = *(v266 - 1);
    if ((_DWORD)v164)
    {
      for (i = 0; i != v164; ++i)
      {
        v166 = (uint64_t *)(v163 + 16 * i);
        v167 = *v166;
        if (*v166 != -1)
        {
          *v166 = 0;
          if (v167)
          {
            v168 = (unsigned int *)(v167 + 8);
            do
            {
              v169 = __ldaxr(v168);
              v170 = v169 - 1;
            }
            while (__stlxr(v170, v168));
            if (!v170)
            {
              atomic_store(1u, v168);
              v171 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v171 = off_1E31FE290;
              *((_QWORD *)v171 + 1) = v168;
              v269 = v171;
              WTF::ensureOnMainThread();
              v172 = v269;
              v269 = 0;
              if (v172)
                (*(void (**)(WebCore::Node *))(*(_QWORD *)v172 + 8))(v172);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v163 - 16), v162);
    v6 = a3;
  }
  if ((_DWORD)v125)
  {
    v250 = v125;
    v252 = v121;
    v173 = (uint64_t *)v121;
    do
    {
      v174 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v173 + 40) + 8) + 528);
      if (v174)
      {
        v175 = *(_QWORD *)(v174 + 8);
        if (v175)
        {
          v176 = (unsigned int *)(v175 + 8);
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 + 1, v176));
          v178 = *((_DWORD *)v268 - 2);
          v179 = ~(*v173 << 32) + *v173;
          v180 = (v179 ^ (v179 >> 22)) + ~((v179 ^ (v179 >> 22)) << 13);
          v181 = (9 * (v180 ^ (v180 >> 8))) ^ ((9 * (v180 ^ (v180 >> 8))) >> 15);
          v182 = v178 & (((v181 + ~(v181 << 27)) >> 31) ^ (v181 + ~((_DWORD)v181 << 27)));
          v183 = &v268[3 * v182];
          v184 = *v183;
          if (*v183 != *v173)
          {
            v185 = 1;
            while (v184)
            {
              v182 = (v182 + v185) & v178;
              v183 = &v268[3 * v182];
              v184 = *v183;
              ++v185;
              if (*v183 == *v173)
                goto LABEL_292;
            }
            v183 = &v268[3 * *((unsigned int *)v268 - 1)];
          }
LABEL_292:
          v186 = *((_DWORD *)v183 + 5);
          if (v186)
          {
            v187 = v183[1] + 24 * v186;
            while (1)
            {
              v188 = *v173;
              *(_DWORD *)(v188 + 24) = *(_DWORD *)(*v173 + 24) + 4;
              v189 = *(_WORD *)(v188 + 28);
              if ((v189 & 1) != 0)
              {
                v191 = *(_QWORD *)(v188 + 80);
                if (v191)
                  LODWORD(v191) = *(_DWORD *)(v191 + 4);
              }
              else if ((v189 & 4) != 0 && (v190 = *(_QWORD *)(v188 + 80)) != 0)
              {
                LODWORD(v191) = 0;
                do
                {
                  LODWORD(v191) = v191 + 1;
                  v190 = *(_QWORD *)(v190 + 56);
                }
                while (v190);
              }
              else
              {
                LODWORD(v191) = 0;
              }
              v269 = (WebCore::Node *)v188;
              LODWORD(v270) = 0;
              *((_QWORD *)&v270 + 1) = v188;
              v271 = v191;
              WebCore::resolveCharacterRange(&v269, *(_QWORD *)(v187 - 16), *(_QWORD *)(v187 - 8), 0, &v262);
              v192 = *((_QWORD *)&v270 + 1);
              *((_QWORD *)&v270 + 1) = 0;
              if (v192)
              {
                if (*(_DWORD *)(v192 + 24) == 2)
                {
                  if ((*(_WORD *)(v192 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v192, v162);
                }
                else
                {
                  *(_DWORD *)(v192 + 24) -= 2;
                }
              }
              v193 = v269;
              v269 = 0;
              if (v193)
              {
                if (*((_DWORD *)v193 + 6) == 2)
                {
                  if ((*((_WORD *)v193 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v193, v162);
                }
                else
                {
                  *((_DWORD *)v193 + 6) -= 2;
                }
              }
              v194 = v262;
              v195 = v264;
              v196 = v263;
              v197 = v265;
              if (v262 != v264 || v263 != v265)
              {
                v198 = *(_QWORD *)(*(_QWORD *)(v175 + 296) + 3064);
                ++*(_DWORD *)(v198 + 28);
                *((_DWORD *)v194 + 6) += 2;
                v257 = v194;
                v258 = v196;
                *((_DWORD *)v195 + 6) += 2;
                v259 = v195;
                v260 = v197;
                v261 = 1;
                if (*(_QWORD *)(*((_QWORD *)v194 + 5) + 8) != *(_QWORD *)(*((_QWORD *)v195 + 5) + 8))
                  goto LABEL_315;
                WebCore::VisibleSelection::VisibleSelection((uint64_t)&v269, (uint64_t)&v257, 1, 0);
                if (v273)
                  WebCore::FrameSelection::setSelection(v198, (uint64_t)&v269, 6u, 0, 0, 0, 0);
                WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v269);
                if (v261)
                {
LABEL_315:
                  v199 = v259;
                  v259 = 0;
                  if (v199)
                  {
                    if (*((_DWORD *)v199 + 6) == 2)
                    {
                      if ((*((_WORD *)v199 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v199, v162);
                    }
                    else
                    {
                      *((_DWORD *)v199 + 6) -= 2;
                    }
                  }
                  v200 = v257;
                  v257 = 0;
                  if (v200)
                  {
                    if (*((_DWORD *)v200 + 6) == 2)
                    {
                      if ((*((_WORD *)v200 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v200, v162);
                    }
                    else
                    {
                      *((_DWORD *)v200 + 6) -= 2;
                    }
                  }
                }
                v201 = *(_DWORD *)(v198 + 28);
                if (!v201)
                  goto LABEL_434;
                *(_DWORD *)(v198 + 28) = v201 - 1;
                v202 = *(WebCore::Document **)(v175 + 296);
                v203 = *((_QWORD *)v202 + 382);
                if (!v203)
                {
                  v208 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                  WebCore::Editor::Editor(v208, v202);
                  v210 = (WebCore::Editor *)*((_QWORD *)v202 + 382);
                  *((_QWORD *)v202 + 382) = v208;
                  if (v210)
                  {
                    WebCore::Editor::~Editor(v210, v209);
                    if (*(_DWORD *)v211)
                    {
                      *(_QWORD *)(v211 + 496) = 0;
                      *(_OWORD *)(v211 + 464) = 0u;
                      *(_OWORD *)(v211 + 480) = 0u;
                      *(_OWORD *)(v211 + 432) = 0u;
                      *(_OWORD *)(v211 + 448) = 0u;
                      *(_OWORD *)(v211 + 400) = 0u;
                      *(_OWORD *)(v211 + 416) = 0u;
                      *(_OWORD *)(v211 + 368) = 0u;
                      *(_OWORD *)(v211 + 384) = 0u;
                      *(_OWORD *)(v211 + 336) = 0u;
                      *(_OWORD *)(v211 + 352) = 0u;
                      *(_OWORD *)(v211 + 304) = 0u;
                      *(_OWORD *)(v211 + 320) = 0u;
                      *(_OWORD *)(v211 + 272) = 0u;
                      *(_OWORD *)(v211 + 288) = 0u;
                      *(_OWORD *)(v211 + 240) = 0u;
                      *(_OWORD *)(v211 + 256) = 0u;
                      *(_OWORD *)(v211 + 208) = 0u;
                      *(_OWORD *)(v211 + 224) = 0u;
                      *(_OWORD *)(v211 + 176) = 0u;
                      *(_OWORD *)(v211 + 192) = 0u;
                      *(_OWORD *)(v211 + 144) = 0u;
                      *(_OWORD *)(v211 + 160) = 0u;
                      *(_OWORD *)(v211 + 112) = 0u;
                      *(_OWORD *)(v211 + 128) = 0u;
                      *(_OWORD *)(v211 + 80) = 0u;
                      *(_OWORD *)(v211 + 96) = 0u;
                      *(_OWORD *)(v211 + 48) = 0u;
                      *(_OWORD *)(v211 + 64) = 0u;
                      *(_OWORD *)(v211 + 16) = 0u;
                      *(_OWORD *)(v211 + 32) = 0u;
                      *(_OWORD *)v211 = 0u;
                    }
                    else
                    {
                      WTF::fastFree((WTF *)v211, v212);
                    }
                  }
                  v203 = *((_QWORD *)v202 + 382);
                }
                ++*(_DWORD *)v203;
                WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v203 + 16) + 8) + 3064) + 56), &v269);
                if (v272)
                {
                  WebCore::createFragmentFromText(&v269, v6, (uint64_t *)&v257);
                  WebCore::Editor::replaceSelectionWithFragment(v203, (uint64_t)v257, 1, 0, 1, 0x11u, 0);
                  v204 = v257;
                  v257 = 0;
                  if (v204)
                  {
                    if (*((_DWORD *)v204 + 6) == 2)
                    {
                      if ((*((_WORD *)v204 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v204, v162);
                    }
                    else
                    {
                      *((_DWORD *)v204 + 6) -= 2;
                    }
                  }
                  if (v272)
                  {
                    v205 = *((_QWORD *)&v270 + 1);
                    *((_QWORD *)&v270 + 1) = 0;
                    if (v205)
                    {
                      if (*(_DWORD *)(v205 + 24) == 2)
                      {
                        if ((*(_WORD *)(v205 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v205, v162);
                      }
                      else
                      {
                        *(_DWORD *)(v205 + 24) -= 2;
                      }
                    }
                    v206 = v269;
                    v269 = 0;
                    if (v206)
                    {
                      if (*((_DWORD *)v206 + 6) == 2)
                      {
                        if ((*((_WORD *)v206 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v206, v162);
                      }
                      else
                      {
                        *((_DWORD *)v206 + 6) -= 2;
                      }
                    }
                  }
                }
                if (!*(_DWORD *)v203)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19601D694);
                }
                --*(_DWORD *)v203;
                v194 = v264;
              }
              v264 = 0;
              if (v194)
              {
                if (*((_DWORD *)v194 + 6) == 2)
                {
                  if ((*((_WORD *)v194 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v194, v162);
                }
                else
                {
                  *((_DWORD *)v194 + 6) -= 2;
                }
              }
              v207 = v262;
              v262 = 0;
              if (v207)
              {
                if (*((_DWORD *)v207 + 6) == 2)
                {
                  if ((*((_WORD *)v207 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v207, v162);
                }
                else
                {
                  *((_DWORD *)v207 + 6) -= 2;
                }
              }
              v187 -= 24;
              if (v187 == v183[1])
                goto LABEL_367;
            }
          }
          do
          {
LABEL_367:
            v213 = __ldaxr(v176);
            v214 = v213 - 1;
          }
          while (__stlxr(v214, v176));
          if (!v214)
          {
            atomic_store(1u, v176);
            v215 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v215 = off_1E31FE290;
            *((_QWORD *)v215 + 1) = v176;
            v269 = v215;
            WTF::ensureOnMainThread();
            v216 = v269;
            v269 = 0;
            if (v216)
              (*(void (**)(WebCore::Node *))(*(_QWORD *)v216 + 8))(v216);
          }
        }
      }
      ++v173;
    }
    while (v173 != v254);
    v121 = v252;
    v217 = 8 * v250;
    v218 = v252;
    do
    {
      v219 = *(_QWORD *)v218;
      *(_QWORD *)v218 = 0;
      if (v219)
      {
        if (*(_DWORD *)(v219 + 24) == 2)
        {
          if ((*(_WORD *)(v219 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v219, v162);
        }
        else
        {
          *(_DWORD *)(v219 + 24) -= 2;
        }
      }
      v218 = (WTF *)((char *)v218 + 8);
      v217 -= 8;
    }
    while (v217);
  }
  if (v121)
    WTF::fastFree(v121, v162);
  v220 = v267;
  if (v267)
  {
    v221 = *(unsigned int *)(v267 - 4);
    if ((_DWORD)v221)
    {
      for (j = 0; j != v221; ++j)
      {
        v223 = (uint64_t *)(v220 + 16 * j);
        v224 = *v223;
        if (*v223 != -1)
        {
          *v223 = 0;
          if (v224)
          {
            v225 = (unsigned int *)(v224 + 8);
            do
            {
              v226 = __ldaxr(v225);
              v227 = v226 - 1;
            }
            while (__stlxr(v227, v225));
            if (!v227)
            {
              atomic_store(1u, v225);
              v228 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v228 = off_1E31FE290;
              *((_QWORD *)v228 + 1) = v225;
              v269 = v228;
              WTF::ensureOnMainThread();
              v229 = v269;
              v269 = 0;
              if (v229)
                (*(void (**)(WebCore::Node *))(*(_QWORD *)v229 + 8))(v229);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v220 - 16), v162);
  }
  v230 = (uint64_t)v268;
  if (v268)
  {
    v231 = *((unsigned int *)v268 - 1);
    if ((_DWORD)v231)
    {
      for (k = 0; k != v231; ++k)
      {
        v233 = (uint64_t *)(v230 + 24 * k);
        if (*v233 != -1)
        {
          v234 = v230 + 24 * k;
          v235 = (WTF **)(v234 + 8);
          v236 = *(unsigned int *)(v234 + 20);
          if ((_DWORD)v236)
          {
            v237 = *v235;
            v238 = 24 * v236;
            do
            {
              v239 = *(_QWORD *)v237;
              *(_QWORD *)v237 = 0;
              if (v239)
              {
                if (*(_DWORD *)(v239 + 24) == 2)
                {
                  if ((*(_WORD *)(v239 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v239, v162);
                }
                else
                {
                  *(_DWORD *)(v239 + 24) -= 2;
                }
              }
              v237 = (WTF *)((char *)v237 + 24);
              v238 -= 24;
            }
            while (v238);
          }
          v240 = *v235;
          if (*v235)
          {
            *v235 = 0;
            *(_DWORD *)(v230 + 24 * k + 16) = 0;
            WTF::fastFree(v240, v162);
          }
          v241 = *v233;
          *v233 = 0;
          if (v241)
          {
            if (*(_DWORD *)(v241 + 24) == 2)
            {
              if ((*(_WORD *)(v241 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v241, v162);
            }
            else
            {
              *(_DWORD *)(v241 + 24) -= 2;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v230 - 16), v162);
  }
  v242 = *(unsigned int *)(a2 + 12);
  v243 = v255;
  if (HIDWORD(v256))
  {
    v244 = 24 * HIDWORD(v256);
    v245 = v255;
    do
    {
      v246 = *(_QWORD *)v245;
      *(_QWORD *)v245 = 0;
      if (v246)
      {
        if (*(_DWORD *)(v246 + 24) == 2)
        {
          if ((*(_WORD *)(v246 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v246, v162);
        }
        else
        {
          *(_DWORD *)(v246 + 24) -= 2;
        }
      }
      v245 = (WTF *)((char *)v245 + 24);
      v244 -= 24;
    }
    while (v244);
  }
  if (v243)
  {
    LODWORD(v256) = 0;
    WTF::fastFree(v243, v162);
  }
  return v242;
}

uint64_t WebCore::Page::replaceSelectionWithText(WebCore::Page *this, const WTF::String *a2)
{
  int *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  int v19;
  unsigned int v20;
  WebCore::Document *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  WebCore::Editor *v25;
  void *v26;
  WebCore::Editor *v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  __int16 v53;
  char v54;

  v3 = (int *)*((_QWORD *)this + 9);
  v4 = *v3;
  v5 = *v3 + 1;
  *v3 = v5;
  v6 = *((_QWORD *)v3 + 2);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 144))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 160);
    if (*(_BYTE *)(v7 + 144))
    {
      if (v5)
      {
        v23 = 0;
        *v3 = v4;
        return v23;
      }
LABEL_49:
      __break(0xC471u);
      JUMPOUT(0x19601DA10);
    }
  }
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (!*v3)
    goto LABEL_49;
  --*v3;
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
  v11 = *(_QWORD *)(v10 + 56);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v35 = (_QWORD *)v11;
  v36 = *(_DWORD *)(v10 + 64);
  v37 = *(_BYTE *)(v10 + 68);
  v12 = *(_QWORD *)(v10 + 72);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v38 = v12;
  v39 = *(_DWORD *)(v10 + 80);
  v40 = *(_BYTE *)(v10 + 84);
  v13 = *(_QWORD *)(v10 + 88);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v41 = v13;
  v42 = *(_DWORD *)(v10 + 96);
  v43 = *(_BYTE *)(v10 + 100);
  v14 = *(_QWORD *)(v10 + 104);
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  v44 = v14;
  v45 = *(_DWORD *)(v10 + 112);
  v46 = *(_BYTE *)(v10 + 116);
  v15 = *(_QWORD *)(v10 + 120);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  v47 = v15;
  v48 = *(_DWORD *)(v10 + 128);
  v49 = *(_BYTE *)(v10 + 132);
  v16 = *(_QWORD *)(v10 + 136);
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  v50 = v16;
  v51 = *(_DWORD *)(v10 + 144);
  v52 = *(_BYTE *)(v10 + 148);
  v53 = *(_WORD *)(v10 + 152);
  v54 = *(_BYTE *)(v10 + 154);
  if (!v15)
    goto LABEL_40;
  v17 = v49 & 7;
  if (v17 > 4)
    goto LABEL_40;
  if (((1 << v17) & 0x19) == 0)
  {
    v15 = *(_QWORD *)(v15 + 32);
    if (!v15)
      goto LABEL_40;
  }
  *(_DWORD *)(v15 + 24) += 2;
  v19 = WebCore::Node::computeEditability(v15, 0, 0);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v18);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if (v19)
  {
    if (HIBYTE(v53) == 2)
      v20 = 17;
    else
      v20 = 14;
    v21 = *(WebCore::Document **)(v7 + 296);
    v22 = (_DWORD *)*((_QWORD *)v21 + 382);
    if (!v22)
    {
      v24 = v20;
      v25 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v25, v21);
      v27 = (WebCore::Editor *)*((_QWORD *)v21 + 382);
      *((_QWORD *)v21 + 382) = v25;
      if (v27)
      {
        WebCore::Editor::~Editor(v27, v26);
        if (*(_DWORD *)v28)
        {
          *(_QWORD *)(v28 + 496) = 0;
          *(_OWORD *)(v28 + 464) = 0u;
          *(_OWORD *)(v28 + 480) = 0u;
          *(_OWORD *)(v28 + 432) = 0u;
          *(_OWORD *)(v28 + 448) = 0u;
          *(_OWORD *)(v28 + 400) = 0u;
          *(_OWORD *)(v28 + 416) = 0u;
          *(_OWORD *)(v28 + 368) = 0u;
          *(_OWORD *)(v28 + 384) = 0u;
          *(_OWORD *)(v28 + 336) = 0u;
          *(_OWORD *)(v28 + 352) = 0u;
          *(_OWORD *)(v28 + 304) = 0u;
          *(_OWORD *)(v28 + 320) = 0u;
          *(_OWORD *)(v28 + 272) = 0u;
          *(_OWORD *)(v28 + 288) = 0u;
          *(_OWORD *)(v28 + 240) = 0u;
          *(_OWORD *)(v28 + 256) = 0u;
          *(_OWORD *)(v28 + 208) = 0u;
          *(_OWORD *)(v28 + 224) = 0u;
          *(_OWORD *)(v28 + 176) = 0u;
          *(_OWORD *)(v28 + 192) = 0u;
          *(_OWORD *)(v28 + 144) = 0u;
          *(_OWORD *)(v28 + 160) = 0u;
          *(_OWORD *)(v28 + 112) = 0u;
          *(_OWORD *)(v28 + 128) = 0u;
          *(_OWORD *)(v28 + 80) = 0u;
          *(_OWORD *)(v28 + 96) = 0u;
          *(_OWORD *)(v28 + 48) = 0u;
          *(_OWORD *)(v28 + 64) = 0u;
          *(_OWORD *)(v28 + 16) = 0u;
          *(_OWORD *)(v28 + 32) = 0u;
          *(_OWORD *)v28 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v28, v29);
        }
      }
      v22 = (_DWORD *)*((_QWORD *)v21 + 382);
      v20 = v24;
    }
    ++*v22;
    WebCore::Editor::replaceSelectionWithText((uint64_t)v22, a2, 1, 0, v20);
    if (!*v22)
    {
      __break(0xC471u);
      JUMPOUT(0x19601D918);
    }
    --*v22;
    v23 = 1;
  }
  else
  {
LABEL_40:
    v23 = 0;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v35);
  do
  {
    v30 = __ldaxr(v8);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v8));
  if (!v31)
  {
    atomic_store(1u, v8);
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v33 = off_1E31FE290;
    v33[1] = v8;
    v35 = v33;
    WTF::ensureOnMainThread();
    v34 = v35;
    v35 = 0;
    if (v34)
      (*(void (**)(_QWORD *))(*v34 + 8))(v34);
  }
  return v23;
}

uint64_t WebCore::Page::checkedFocusController@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 72);
  *a2 = v2;
  ++*v2;
  return this;
}

uint64_t WebCore::Page::setEditableRegionEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderLayerCompositor *v8;
  int v9;
  WebCore::RenderLayerCompositor *v10;
  WebCore::RenderLayerCompositor *v11;
  WTF *v12;
  void *v13;

  if (*(unsigned __int8 *)(this + 1100) != a2)
  {
    *(_BYTE *)(this + 1100) = a2;
    v2 = *(_QWORD *)(this + 160);
    if (v2 && *(_BYTE *)(v2 + 144) == 0)
    {
      v4 = *(_QWORD *)(v2 + 288);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 8);
        *(_DWORD *)(v4 + 8) = v5 + 1;
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 296);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 1944);
          if (v7)
          {
            ++*(_DWORD *)(v7 + 16);
            v8 = *(WebCore::RenderLayerCompositor **)(v7 + 400);
            if (!v8)
            {
              v10 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
              v8 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v10, (WebCore::RenderView *)v7);
              v11 = *(WebCore::RenderLayerCompositor **)(v7 + 400);
              *(_QWORD *)(v7 + 400) = v8;
              if (v11)
              {
                WebCore::RenderLayerCompositor::~RenderLayerCompositor(v11);
                WTF::fastFree(v12, v13);
                v8 = *(WebCore::RenderLayerCompositor **)(v7 + 400);
              }
            }
            this = WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::invalidateEventRegionForAllLayers(void)::$_0>(*(_QWORD *)(*((_QWORD *)v8 + 1) + 144));
            v9 = *(_DWORD *)(v7 + 16);
            if (!v9)
            {
              __break(0xC471u);
              JUMPOUT(0x19601DB5CLL);
            }
            *(_DWORD *)(v7 + 16) = v9 - 1;
            v5 = *(_DWORD *)(v4 + 8) - 1;
          }
        }
        if (v5)
          *(_DWORD *)(v4 + 8) = v5;
        else
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  return this;
}

void WebCore::Page::editableElementsInRect(WebCore::Page *this@<X0>, const WebCore::FloatRect *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  WebCore::ScrollView *v6;
  uint64_t v7;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WebCore::Node **i;
  WebCore::Node *v29;
  char v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  uint64_t v33;
  uint64_t j;
  int *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  float v45;
  char v46;
  uint64_t v47;
  WTF *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF *v54;
  void *v55;
  float v56;
  float v57;
  float v59;
  BOOL v60;
  char v61;
  WebCore::Node *v62;
  WebCore::Node *v63;
  uint64_t v64;
  uint64_t k;
  _QWORD *v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  _QWORD v72[3];
  WebCore::Node *v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  _QWORD v77[15];
  char v78;
  uint64_t v79;
  int8x16_t v80[2];

  v4 = *((_QWORD *)this + 20);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (!v5 || (v6 = *(WebCore::ScrollView **)(v4 + 288)) == 0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  ++*((_DWORD *)v6 + 2);
  v7 = *(_QWORD *)(v4 + 296);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    v10 = roundf(*(float *)a2);
    v11 = 0x7FFFFFFFLL;
    v12 = 0x80000000;
    if (v10 > -2147500000.0)
      v12 = (int)v10;
    if (v10 < 2147500000.0)
      v11 = v12;
    v13 = roundf(*((float *)a2 + 1));
    if (v13 >= 2147500000.0)
    {
      v14 = 0x7FFFFFFF00000000;
    }
    else if (v13 <= -2147500000.0)
    {
      v14 = 0x8000000000000000;
    }
    else
    {
      v14 = (unint64_t)(int)v13 << 32;
    }
    v15 = roundf(*((float *)a2 + 2));
    if (v15 >= 2147500000.0)
    {
      v16 = 0x7FFFFFFFLL;
    }
    else if (v15 <= -2147500000.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
    v17 = roundf(*((float *)a2 + 3));
    if (v17 >= 2147500000.0)
    {
      v18 = 0x7FFFFFFF00000000;
    }
    else if (v17 <= -2147500000.0)
    {
      v18 = 0x8000000000000000;
    }
    else
    {
      v18 = (unint64_t)(int)v17 << 32;
    }
    v77[0] = v14 | v11;
    v77[1] = v18 | v16;
    v19.i64[0] = WebCore::ScrollView::rootViewToContents(v6, (const WebCore::IntRect *)v77);
    v19.i64[1] = v20;
    v21.i64[0] = 0xFE000000FE000000;
    v21.i64[1] = 0xFE000000FE000000;
    v22 = (int8x16_t)vcgtq_s32(v19, v21);
    v23.i64[0] = 0xFE000000FE000000;
    v23.i64[1] = 0xFE000000FE000000;
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    v71 = vorrq_s8((int8x16_t)(*(_OWORD *)&v22 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v23, v19), v24, (int8x16_t)vshlq_n_s32(v19, 6uLL)), v22));
    v80[0] = v71;
    WebCore::HitTestLocation::HitTestLocation((WebCore::HitTestLocation *)v77, (const WebCore::LayoutRect *)v80);
    v77[9] = 0;
    v77[10] = 0;
    LODWORD(v25) = v71.i32[0] + v71.i32[2] / 2;
    if (__OFADD__(v71.i32[0], v71.i32[2] / 2))
      v25 = ((unsigned __int32)v71.i32[0] >> 31) + 0x7FFFFFFF;
    else
      v25 = v25;
    LODWORD(v26) = v71.i32[1] + v71.i32[3] / 2;
    v79 = 0;
    if (__OFADD__(v71.i32[1], v71.i32[3] / 2))
      v26 = ((unsigned __int32)v71.i32[1] >> 31) + 0x7FFFFFFF;
    else
      v26 = v26;
    v77[11] = v25 | (v26 << 32);
    memset(&v77[12], 0, 24);
    v78 = 0;
    LODWORD(v74) = 37123;
    BYTE4(v74) = 1;
    if (!WebCore::Document::hitTest(v7, &v74, (WebCore::HitTestingTransformState *)v77, (uint64_t)v77))
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
LABEL_86:
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v77, (void *)v27);
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v55);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      goto LABEL_88;
    }
    v74 = 0;
    v75 = 0;
    v76 = 0;
    for (i = (WebCore::Node **)*((_QWORD *)WebCore::HitTestResult::listBasedTestResult((WebCore::HitTestResult *)v77)
                                + 1); i; i = (WebCore::Node **)i[2])
    {
      v29 = *i;
      if ((*((_WORD *)*i + 14) & 8) != 0)
      {
        if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v29 + 872))(*i))
        {
          *((_DWORD *)v29 + 6) += 2;
          v30 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v29 + 1440))(v29);
          if (*((_DWORD *)v29 + 6) == 2)
          {
            if ((*((_WORD *)v29 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v29, (void *)v27);
          }
          else
          {
            *((_DWORD *)v29 + 6) -= 2;
          }
          if ((v30 & 1) == 0)
            continue;
        }
        else
        {
          if ((*((_WORD *)v29 + 14) & 8) == 0 || !WebCore::Node::computeEditability((uint64_t)v29, 0, 1))
            continue;
          v32 = 0;
          v33 = (uint64_t)v29;
          do
          {
            if (!WebCore::Node::hasEditableStyle(v33, 0))
              break;
            if ((*(_WORD *)(v33 + 28) & 8) != 0)
              v32 = (WebCore::Node *)v33;
            j = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v29 + 5) + 8) + 1272);
            if (j)
            {
              if ((*(_WORD *)(j + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              {
                for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
                {
                  if ((*(_WORD *)(j + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                  {
                    break;
                  }
                }
              }
              else
              {
                j = 0;
              }
            }
            if (j == v33)
              break;
            v33 = *(_QWORD *)(v33 + 32);
          }
          while (v33);
          v29 = v32;
          if (!v32)
            continue;
        }
        *((_DWORD *)v29 + 6) += 2;
        v73 = v29;
        WTF::ListHashSet<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add(&v74, (uint64_t *)&v73, (uint64_t)v72);
        v31 = v73;
        v73 = 0;
        if (v31)
        {
          if (*((_DWORD *)v31 + 6) == 2)
          {
            if ((*((_WORD *)v31 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v31, (void *)v27);
          }
          else
          {
            *((_DWORD *)v31 + 6) -= 2;
          }
        }
      }
    }
    v35 = (int *)*((_QWORD *)this + 9);
    v36 = *v35;
    v37 = *v35 + 1;
    *v35 = v37;
    v38 = *((_QWORD *)v35 + 2);
    if (!v38 || (v39 = *(_QWORD *)(v38 + 8)) == 0 || *(_BYTE *)(v39 + 144))
    {
      v39 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v35 + 1) + 8) + 160);
      if (*(_BYTE *)(v39 + 144))
      {
        if (!v37)
          goto LABEL_161;
        v39 = 0;
        *v35 = v36;
        v46 = 1;
        goto LABEL_74;
      }
    }
    v40 = (unsigned int *)(v39 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    if (!*v35)
      goto LABEL_161;
    --*v35;
    v42 = *(_QWORD *)(*(_QWORD *)(v39 + 296) + 1248);
    if (!v42)
      goto LABEL_114;
    *(_DWORD *)(v42 + 24) += 2;
    v43 = WebCore::Element::boundingBoxInRootViewCoordinates((WebCore::Element *)v42);
    v45 = *((float *)a2 + 2);
    if (v45 >= 0.0)
    {
      v56 = *((float *)a2 + 3);
      if (v56 >= 0.0 && (v27 & 0x80000000) == 0 && (v27 & 0x8000000000000000) == 0)
      {
        v57 = v45 + *(float *)a2;
        if (*(float *)a2 <= (float)((float)(int)v27 + (float)(int)v43) && v57 >= (float)(int)v43)
        {
          v59 = *((float *)a2 + 1);
          v44.n128_f32[0] = v56 + v59;
          v60 = v59 > (float)((float)SHIDWORD(v27) + (float)SHIDWORD(v43)) || v44.n128_f32[0] < (float)SHIDWORD(v43);
          if (!v60 && (*(_WORD *)(v42 + 28) & 8) != 0)
          {
            if ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v42 + 872))(v42, v44))
            {
              *(_DWORD *)(v42 + 24) += 2;
              v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 1440))(v42);
              if (*(_DWORD *)(v42 + 24) == 2)
              {
                if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v42, (void *)v27);
              }
              else
              {
                *(_DWORD *)(v42 + 24) -= 2;
              }
              v62 = (WebCore::Node *)v42;
              if ((v61 & 1) == 0)
                goto LABEL_72;
            }
            else
            {
              if ((*(_WORD *)(v42 + 28) & 8) == 0 || !WebCore::Node::computeEditability(v42, 0, 1))
                goto LABEL_72;
              v62 = 0;
              v64 = v42;
              do
              {
                if (!WebCore::Node::hasEditableStyle(v64, 0))
                  break;
                if ((*(_WORD *)(v64 + 28) & 8) != 0)
                  v62 = (WebCore::Node *)v64;
                k = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 40) + 8) + 1272);
                if (k)
                {
                  if ((*(_WORD *)(k + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(k + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
                  {
                    for (k = *(_QWORD *)(k + 80); k; k = *(_QWORD *)(k + 56))
                    {
                      if ((*(_WORD *)(k + 28) & 0x10) != 0
                        && *(_QWORD *)(*(_QWORD *)(k + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                      {
                        break;
                      }
                    }
                  }
                  else
                  {
                    k = 0;
                  }
                }
                if (k == v64)
                  break;
                v64 = *(_QWORD *)(v64 + 32);
              }
              while (v64);
              if (!v62)
                goto LABEL_72;
            }
            *((_DWORD *)v62 + 6) += 2;
            v73 = v62;
            WTF::ListHashSet<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add(&v74, (uint64_t *)&v73, (uint64_t)v72);
            v63 = v73;
            v73 = 0;
            if (v63)
            {
              if (*((_DWORD *)v63 + 6) == 2)
              {
                if ((*((_WORD *)v63 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v63, (void *)v27);
              }
              else
              {
                *((_DWORD *)v63 + 6) -= 2;
              }
            }
          }
        }
      }
    }
LABEL_72:
    if (*(_DWORD *)(v42 + 24) != 2)
    {
      v46 = 0;
      *(_DWORD *)(v42 + 24) -= 2;
LABEL_74:
      v47 = 0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      if (!v74)
      {
LABEL_75:
        v48 = v75;
        if (v75)
        {
          v49 = 0;
          do
          {
            v50 = *(_QWORD *)v48;
            *(_DWORD *)(v50 + 24) = *(_DWORD *)(*(_QWORD *)v48 + 24) + 2;
            *(_QWORD *)(v47 + 8 * v49++) = v50;
            v48 = (WTF *)*((_QWORD *)v48 + 2);
          }
          while (v48);
          *(_DWORD *)(a3 + 12) = v49;
        }
        if ((v46 & 1) == 0)
        {
          v51 = (unsigned int *)(v39 + 8);
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            atomic_store(1u, v51);
            v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v66 = off_1E31FE290;
            v66[1] = v51;
            v72[0] = v66;
            WTF::ensureOnMainThread();
            v67 = v72[0];
            v72[0] = 0;
            if (v67)
              (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
          }
        }
        v54 = v75;
        while (v54)
        {
          v68 = v54;
          v54 = (WTF *)*((_QWORD *)v54 + 2);
          v69 = *(_QWORD *)v68;
          *(_QWORD *)v68 = 0;
          if (v69)
          {
            if (*(_DWORD *)(v69 + 24) == 2)
            {
              if ((*(_WORD *)(v69 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v69, (void *)v27);
            }
            else
            {
              *(_DWORD *)(v69 + 24) -= 2;
            }
          }
          WTF::fastFree(v68, (void *)v27);
        }
        if (v74)
          WTF::fastFree((WTF *)(v74 - 16), (void *)v27);
        goto LABEL_86;
      }
      v70 = *(unsigned int *)(v74 - 12);
      if (!(_DWORD)v70)
      {
        v47 = 0;
        goto LABEL_75;
      }
      if (!(v70 >> 29))
      {
        v47 = WTF::fastMalloc((WTF *)(8 * v70));
        *(_DWORD *)(a3 + 8) = v70;
        *(_QWORD *)a3 = v47;
        goto LABEL_75;
      }
LABEL_161:
      __break(0xC471u);
      JUMPOUT(0x19601E37CLL);
    }
    if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v42, (void *)v27);
LABEL_114:
    v46 = 0;
    goto LABEL_74;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
LABEL_88:
  if (*((_DWORD *)v6 + 2) == 1)
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v6 + 8))(v6);
  else
    --*((_DWORD *)v6 + 2);
}

uint64_t WebCore::Page::selection(WebCore::Page *this)
{
  int *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;

  v1 = (int *)*((_QWORD *)this + 9);
  v2 = *v1;
  v3 = *v1 + 1;
  *v1 = v3;
  v4 = *((_QWORD *)v1 + 2);
  if ((!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || *(_BYTE *)(v5 + 144))
    && (v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 1) + 8) + 160), *(_BYTE *)(v5 + 144)))
  {
    if (v3)
    {
      *v1 = v2;
      v8 = &WebCore::VisibleSelection::emptySelection(void)::selection;
      {
        WebCore::VisibleSelection::emptySelection(void)::selection = 0;
        dword_1EE2F58D0 = 0;
        byte_1EE2F58D4 &= 0xF0u;
        qword_1EE2F58D8 = 0;
        dword_1EE2F58E0 = 0;
        byte_1EE2F58E4 &= 0xF0u;
        qword_1EE2F58E8 = 0;
        dword_1EE2F58F0 = 0;
        byte_1EE2F58F4 &= 0xF0u;
        qword_1EE2F58F8 = 0;
        dword_1EE2F5900 = 0;
        byte_1EE2F5904 &= 0xF0u;
        qword_1EE2F5908 = 0;
        dword_1EE2F5910 = 0;
        byte_1EE2F5914 &= 0xF0u;
        qword_1EE2F5918 = 0;
        dword_1EE2F5920 = 0;
        byte_1EE2F5924 &= 0xF0u;
        word_1EE2F5928 = 1;
        byte_1EE2F592A = byte_1EE2F592A & 0xFC | 1;
      }
      return (uint64_t)v8;
    }
  }
  else
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (*v1)
    {
      --*v1;
      v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064) + 56);
      do
      {
        v9 = __ldaxr(v6);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v6));
      if (!v10)
      {
        atomic_store(1u, v6);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E31FE290;
        v12[1] = v6;
        v13 = v12;
        WTF::ensureOnMainThread();
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      }
      return (uint64_t)v8;
    }
  }
  result = 286;
  __break(0xC471u);
  return result;
}

void WebCore::Page::setDefersLoading(WebCore::Page *this, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::FrameLoader *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = *((_QWORD *)this + 14);
  if ((*(_QWORD *)(v2 + 680) & 0x1000000000000000) != 0)
  {
    if ((*(_QWORD *)(v2 + 704) & 0x2000) != 0)
    {
      v4 = *((_DWORD *)this + 85);
      if ((_DWORD)a2)
      {
        v5 = v4 + 1;
        *((_DWORD *)this + 85) = v5;
        if (v5 > 1)
          return;
      }
      else
      {
        v6 = v4 - 1;
        *((_DWORD *)this + 85) = v6;
        if (v6)
          return;
      }
    }
    else if (*((unsigned __int8 *)this + 339) == (_DWORD)a2)
    {
      return;
    }
    *((_BYTE *)this + 339) = a2;
    v7 = *((_QWORD *)this + 20);
    if (v7)
    {
      while (1)
      {
LABEL_11:
        v8 = (_QWORD *)v7;
        if (!*(_BYTE *)(v7 + 144))
        {
          v9 = (unsigned int *)(v7 + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
          v11 = (WebCore::FrameLoader *)v8[35];
          ++*(_DWORD *)v11;
          WebCore::FrameLoader::setDefersLoading(v11, a2);
          if (!*(_DWORD *)v11)
          {
            __break(0xC471u);
            return;
          }
          --*(_DWORD *)v11;
          do
          {
            v12 = __ldaxr(v9);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v9));
          if (!v13)
          {
            atomic_store(1u, v9);
            v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v16 = off_1E31FE290;
            v16[1] = v9;
            v17 = v16;
            WTF::ensureOnMainThread();
            if (v17)
              (*(void (**)(_QWORD *))(*v17 + 8))(v17);
          }
        }
        v7 = v8[11];
        if (!v7)
        {
          v14 = *(_QWORD *)(v8[6] + 8);
          if (!v14)
            return;
          v7 = v8[9];
          if (!v7)
            break;
        }
      }
      while (1)
      {
        v15 = *(_QWORD *)(v14 + 56);
        if (!v15)
          break;
        v14 = *(_QWORD *)(v15 + 8);
        if (!v14)
          break;
        v7 = *(_QWORD *)(v14 + 72);
        if (v7)
          goto LABEL_11;
      }
    }
  }
}

uint64_t WebCore::Page::clearUndoRedoOperations(WebCore::Page *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 376))(*((_QWORD *)this + 19));
}

uint64_t WebCore::Page::inLowQualityImageInterpolationMode(WebCore::Page *this)
{
  return *((unsigned __int8 *)this + 344);
}

uint64_t WebCore::Page::setInLowQualityImageInterpolationMode(uint64_t this, char a2)
{
  *(_BYTE *)(this + 344) = a2;
  return this;
}

uint64_t *WebCore::Page::diagnosticLoggingClient(uint64_t *this)
{
  if ((*(_QWORD *)(this[14] + 672) & 0x800000000000) == 0)
    return WebCore::emptyDiagnosticLoggingClient((WebCore *)this);
  this = (uint64_t *)this[32];
  if (!this)
    return WebCore::emptyDiagnosticLoggingClient((WebCore *)this);
  return this;
}

_BYTE *WTF::makeString<unsigned int,WTF::ASCIILiteral>(_BYTE *result, unsigned int a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v5;
  _QWORD *v6;
  size_t v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD v17[3];

  v5 = a2;
  v6 = result;
  v17[2] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v7 = a4 - 1;
    if ((unint64_t)(a4 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_25:
      JUMPOUT(0x19601E918);
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = a2;
  do
  {
    ++v8;
    v10 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v10);
  if (v8 < 0)
    goto LABEL_22;
  v11 = (v8 + v7);
  if (__OFADD__(v8, (_DWORD)v7))
    goto LABEL_22;
  if (!(_DWORD)v11)
  {
    v12 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_19;
  }
  if ((v11 & 0x80000000) != 0 || (result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v11 + 20)), (v12 = v17[0]) == 0))
  {
LABEL_22:
    *v6 = 0;
    __break(0xC471u);
    goto LABEL_25;
  }
  v13 = 0;
  v14 = v17[0] + 20;
  *(_DWORD *)v17[0] = 2;
  *(_DWORD *)(v12 + 4) = v11;
  *(_QWORD *)(v12 + 8) = v12 + 20;
  *(_DWORD *)(v12 + 16) = 4;
  v15 = v5;
  do
  {
    *((_BYTE *)&v17[1] + v13-- + 4) = (v15 % 0xA) | 0x30;
    v10 = v15 > 9;
    v15 /= 0xAu;
  }
  while (v10);
  if (v13 + 14 <= 13)
    result = memcpy((void *)(v12 + 20), (char *)&v17[1] + v13 + 5, -v13);
  v16 = 0;
  do
  {
    ++v16;
    v10 = v5 > 9;
    v5 /= 0xAu;
  }
  while (v10);
  if ((_DWORD)v7)
  {
    result = (_BYTE *)(v14 + v16);
    if ((_DWORD)v7 == 1)
      *result = *a3;
    else
      result = memcpy(result, a3, v7);
  }
LABEL_19:
  *v6 = v12;
  return result;
}

float *WebCore::Page::setViewScaleFactor(float *this, float a2)
{
  WebCore::Page *v2;
  uint64_t v3;

  if (this[92] != a2)
  {
    v2 = (WebCore::Page *)this;
    this[92] = a2;
    {
      v3 = (uint64_t)this;
      WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
      v2 = (WebCore::Page *)v3;
    }
    return (float *)WebCore::BackForwardCache::markPagesForDeviceOrPageScaleChanged((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, v2);
  }
  return this;
}

uint64_t WebCore::Page::screenPropertiesDidChange(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20));
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3400818;
  *(_BYTE *)(v2 + 8) = 1;
  v5 = v2;
  WebCore::Page::forEachMediaElement((uint64_t)this, (uint64_t)&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WebCore::Page::setNeedsRecalcStyleInAllFrames(this);
}

uint64_t WebCore::Page::updateMediaElementRateChangeRestrictions(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34008B8;
  v4 = (uint64_t)v2;
  WebCore::Page::forEachMediaElement((uint64_t)this, (uint64_t)&v4);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::Page::didStartProvisionalLoad(WebCore::Page *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 143);
  if (result)
    result = WebCore::PerformanceMonitor::didStartProvisionalLoad(result);
  if ((*(_QWORD *)(*((_QWORD *)this + 14) + 688) & 0x800000000000) != 0)
    return WebCore::Page::setLoadSchedulingMode((uint64_t)this, 1);
  return result;
}

uint64_t WebCore::Page::didFinishLoad(WTF::MonotonicTime **this, void *a2)
{
  WTF::MonotonicTime *v3;
  uint64_t result;

  WebCore::Page::resetRelevantPaintedObjectCounter((WebCore::Page *)this, a2);
  v3 = this[143];
  if (v3)
    WebCore::PerformanceMonitor::didFinishLoad(v3);
  result = WebCore::Page::setLoadSchedulingMode((uint64_t)this, 0);
  *((_BYTE *)this + 1776) = 0;
  return result;
}

uint64_t WebCore::Page::setLowPowerModeEnabledOverrideForTesting(uint64_t result, __int16 a2)
{
  uint64_t v2;
  char v3;
  char v4;
  WebCore::RenderingUpdateScheduler *v5;
  int v6;
  char v7;
  char v8;
  char v9;
  WebCore::RenderingUpdateScheduler *v10;
  int v11;

  v2 = result;
  v3 = *(_BYTE *)(result + 1169) & 0xFB;
  *(_BYTE *)(result + 1169) = v3;
  if ((a2 & 0xFF00) != 0)
  {
    v4 = *(_BYTE *)(result + 1168);
    if ((a2 != 0) == (v4 & 4) >> 2)
    {
LABEL_7:
      *(_BYTE *)(v2 + 1169) = v3 | 4;
      return result;
    }
    *(_BYTE *)(result + 1168) = v4 & 0xFB | (4 * (a2 != 0));
    v5 = *(WebCore::RenderingUpdateScheduler **)(result + 672);
    if (!v5)
    {
LABEL_6:
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1032))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
      result = WebCore::Page::updateDOMTimerAlignmentInterval(v2);
      v3 = *(_BYTE *)(v2 + 1169);
      goto LABEL_7;
    }
    ++*((_DWORD *)v5 + 2);
    WebCore::RenderingUpdateScheduler::adjustRenderingUpdateFrequency(v5);
    v6 = *((_DWORD *)v5 + 2);
    if (v6)
    {
      *((_DWORD *)v5 + 2) = v6 - 1;
      goto LABEL_6;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x19601EC84);
  }
  result = objc_msgSend(**(id **)(result + 1152), "isLowPowerModeEnabled");
  if ((*(_BYTE *)(v2 + 1169) & 4) == 0)
  {
    v7 = *(_BYTE *)(v2 + 1168);
    if ((_DWORD)result != (v7 & 4) >> 2)
    {
      v8 = v7 & 0xFB;
      if ((_DWORD)result)
        v9 = 4;
      else
        v9 = 0;
      *(_BYTE *)(v2 + 1168) = v8 | v9;
      v10 = *(WebCore::RenderingUpdateScheduler **)(v2 + 672);
      if (v10)
      {
        ++*((_DWORD *)v10 + 2);
        WebCore::RenderingUpdateScheduler::adjustRenderingUpdateFrequency(v10);
        v11 = *((_DWORD *)v10 + 2);
        if (!v11)
          goto LABEL_18;
        *((_DWORD *)v10 + 2) = v11 - 1;
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1032))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
      return WebCore::Page::updateDOMTimerAlignmentInterval(v2);
    }
  }
  return result;
}

uint64_t WebCore::Page::setOutsideViewportThrottlingEnabledForTesting(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 0;
  else
    v2 = 2;
  *(_BYTE *)(this + 1169) = *(_BYTE *)(this + 1169) & 0xFD | v2;
  *(_BYTE *)(this + 1168) &= ~2u;
  return this;
}

float *WebCore::Page::setTopContentInset(float *this, float a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (this[93] != a2)
  {
    this[93] = a2;
    v2 = *((_QWORD *)this + 20);
    if (v2)
      v3 = *(_BYTE *)(v2 + 144) == 0;
    else
      v3 = 0;
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 288);
      if (v4)
      {
        ++*(_DWORD *)(v4 + 8);
        this = (float *)WebCore::LocalFrameView::topContentInsetDidChange((_QWORD *)v4, a2);
        if (*(_DWORD *)(v4 + 8) == 1)
          return (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        else
          --*(_DWORD *)(v4 + 8);
      }
    }
  }
  return this;
}

unsigned __int8 *WebCore::Page::setShouldSuppressScrollbarAnimations(unsigned __int8 *this, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;

  if (this[464] != (_DWORD)a2)
  {
    v2 = a2;
    v3 = this;
    this = (unsigned __int8 *)WebCore::Page::lockAllOverlayScrollbarsToHidden((WebCore::Page *)this, a2);
    v3[464] = v2;
  }
  return this;
}

uint64_t WebCore::Page::lockAllOverlayScrollbarsToHidden(WebCore::Page *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)();
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20));
  if (!result)
    return result;
  v5 = result;
  ++*(_DWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 88);
  if (v6)
    goto LABEL_3;
  v36 = (_QWORD *)(v5 + 64);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v5 + 64) + 688))(v5 + 64))
  {
    v37 = 38;
    goto LABEL_80;
  }
  v38 = WTF::fastMalloc((WTF *)0x30);
  v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v39 = off_1E3406CB0;
  v39[1] = v36;
  v37 = 1;
  *(_BYTE *)(v38 + 16) = 1;
  *(_QWORD *)v38 = off_1E341C188;
  *(_QWORD *)(v38 + 8) = v36;
  *(_QWORD *)(v38 + 24) = v39;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)(v38 + 40) = 0;
  v36 = *(_QWORD **)(v5 + 88);
  *(_QWORD *)(v5 + 88) = v38;
  if (v36)
  {
LABEL_80:
    (*(void (**)(_QWORD *))(*v36 + 8 * v37))(v36);
    v6 = *(_QWORD *)(v5 + 88);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19601F20CLL);
    }
    goto LABEL_3;
  }
  v6 = v38;
LABEL_3:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 176))(v6, a2);
  v7 = *((_QWORD *)this + 20);
  if (!v7)
    goto LABEL_74;
  v8 = off_1E3406CB0;
  while (1)
  {
LABEL_5:
    v9 = (_QWORD *)v7;
    if (*(_BYTE *)(v7 + 144))
      goto LABEL_44;
    v10 = *(_QWORD *)(v7 + 288);
    if (!v10)
      goto LABEL_44;
    v11 = *(_DWORD *)(v10 + 8) + 1;
    *(_DWORD *)(v10 + 8) = v11;
    v12 = *(uint64_t **)(v10 + 1288);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v15 = *(unsigned int *)(v13 - 4);
        v14 = v13 + 8 * v15;
        if (*(_DWORD *)(v13 - 12))
        {
          if (!(_DWORD)v15)
          {
            v31 = 0;
            v16 = *v12;
            goto LABEL_62;
          }
          v30 = 8 * v15;
          v16 = *v12;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 8;
            v30 -= 8;
            if (!v30)
            {
              v16 = v14;
              break;
            }
          }
          if (!v13)
            goto LABEL_11;
LABEL_58:
          v31 = *(unsigned int *)(v13 - 4);
LABEL_62:
          v17 = v13 + 8 * v31;
          goto LABEL_12;
        }
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = v14;
      v14 = v13 + 8 * v15;
      if (!v13)
      {
LABEL_11:
        v17 = 0;
LABEL_12:
        if (v17 != v16 && !*(_QWORD *)(*(_QWORD *)v16 + 8))
        {
          while (1)
          {
            v35 = v16 + 8;
            v16 = v14;
            if (v35 != v14)
            {
              v16 = v35;
              while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
              {
                v16 += 8;
                if (v16 == v14)
                {
                  v16 = v14;
                  break;
                }
              }
            }
            if (v16 == v17)
              break;
            if (*(_QWORD *)(*(_QWORD *)v16 + 8))
              goto LABEL_13;
          }
          v16 = v17;
        }
LABEL_13:
        if (v13)
          v18 = v13 + 8 * *(unsigned int *)(v13 - 4);
        else
          v18 = 0;
        if (v16 != v18)
        {
          while (1)
          {
            v19 = *(_QWORD **)(*(_QWORD *)v16 + 8);
            (*(void (**)(_QWORD *))(*v19 + 16))(v19);
            v20 = v19[3];
            if (!v20)
            {
              if (!(*(unsigned int (**)(_QWORD *))(*v19 + 688))(v19))
              {
                v22 = v19;
                v23 = 38;
                goto LABEL_27;
              }
              v40 = v9;
              v25 = WTF::fastMalloc((WTF *)0x30);
              v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v26 = off_1E3406CB0;
              v26[1] = v19;
              *(_BYTE *)(v25 + 16) = 1;
              *(_QWORD *)v25 = off_1E341C188;
              *(_QWORD *)(v25 + 8) = v19;
              *(_QWORD *)(v25 + 24) = v26;
              *(_QWORD *)(v25 + 32) = 0;
              *(_QWORD *)(v25 + 40) = 0;
              v22 = (_QWORD *)v19[3];
              v19[3] = v25;
              if (v22)
              {
                v23 = 1;
                v9 = v40;
LABEL_27:
                (*(void (**)(void))(*v22 + 8 * v23))();
                v20 = v19[3];
                if (!v20)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19601F22CLL);
                }
                goto LABEL_17;
              }
              v20 = v25;
              v9 = v40;
            }
LABEL_17:
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 176))(v20, a2);
            result = (*(uint64_t (**)(_QWORD *))(*v19 + 24))(v19);
            v21 = v14;
            if (v16 + 8 != v14)
            {
              v21 = v16 + 8;
              while ((unint64_t)(*(_QWORD *)v21 + 1) <= 1)
              {
                v21 += 8;
                if (v21 == v14)
                {
                  v21 = v14;
                  break;
                }
              }
            }
            v16 = v17;
            if (v21 != v17)
            {
              v16 = v21;
              if (!*(_QWORD *)(*(_QWORD *)v21 + 8))
              {
                while (1)
                {
                  v24 = v16 + 8;
                  v16 = v14;
                  if (v24 != v14)
                  {
                    v16 = v24;
                    while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
                    {
                      v16 += 8;
                      if (v16 == v14)
                      {
                        v16 = v14;
                        break;
                      }
                    }
                  }
                  if (v16 == v17)
                    break;
                  if (*(_QWORD *)(*(_QWORD *)v16 + 8))
                    goto LABEL_23;
                }
                v16 = v17;
              }
            }
LABEL_23:
            ++*((_DWORD *)v12 + 2);
            if (v16 == v18)
            {
              v11 = *(_DWORD *)(v10 + 8);
              v8 = off_1E3406CB0;
              goto LABEL_42;
            }
          }
        }
        goto LABEL_42;
      }
      goto LABEL_58;
    }
LABEL_42:
    v27 = v11 - 1;
    if (v27)
    {
      *(_DWORD *)(v10 + 8) = v27;
    }
    else
    {
      v32 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8);
      v33 = v10;
      v34 = v8;
      result = v32(v33);
      v8 = v34;
    }
LABEL_44:
    v7 = v9[11];
    if (!v7)
    {
      v28 = *(_QWORD *)(v9[6] + 8);
      if (!v28)
        goto LABEL_74;
      v7 = v9[9];
      if (!v7)
        break;
    }
  }
  while (1)
  {
    v29 = *(_QWORD *)(v28 + 56);
    if (!v29)
      break;
    v28 = *(_QWORD *)(v29 + 8);
    if (!v28)
      break;
    v7 = *(_QWORD *)(v28 + 72);
    if (v7)
      goto LABEL_5;
  }
LABEL_74:
  if (*(_DWORD *)(v5 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 8);
  return result;
}

uint64_t WebCore::Page::group(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *((_QWORD *)this + 66);
  if (!v2 || (result = *(_QWORD *)(v2 + 8)) == 0)
  {
    WebCore::Page::initGroup(this);
    v4 = *((_QWORD *)this + 66);
    if (v4)
      return *(_QWORD *)(v4 + 8);
    else
      return 0;
  }
  return result;
}

uint64_t WebCore::Page::setVerticalScrollElasticity(uint64_t result, int a2)
{
  char v2;
  int v3;

  if (*(unsigned __int8 *)(result + 465) != a2)
  {
    v2 = a2;
    *(_BYTE *)(result + 465) = a2;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 160) + 56))(*(_QWORD *)(result + 160));
    if (result)
    {
      v3 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = v3 + 1;
      *(_BYTE *)(result + 105) = v2;
      if (v3)
        *(_DWORD *)(result + 8) = v3;
      else
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::Page::setHorizontalScrollElasticity(uint64_t result, int a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  if (*(unsigned __int8 *)(result + 466) != a2)
  {
    *(_BYTE *)(result + 466) = a2;
    v2 = *(_QWORD *)(result + 160);
    if (v2)
      v3 = *(_BYTE *)(v2 + 144) == 0;
    else
      v3 = 0;
    if (v3)
    {
      result = *(_QWORD *)(v2 + 288);
      if (result)
      {
        v4 = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = v4 + 1;
        *(_BYTE *)(result + 106) = a2;
        if (v4)
          *(_DWORD *)(result + 8) = v4;
        else
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::Page::pageCount(WebCore::Page *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderView *v9;
  int v10;

  if (!*((_BYTE *)this + 468))
    return 0;
  v2 = *((_QWORD *)this + 20);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 296);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      WebCore::Document::updateLayout(v4, 2u, 0);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  if (!*((_BYTE *)this + 468))
    return 0;
  result = 0;
  v7 = *((_QWORD *)this + 20);
  if (v7 && !*(_BYTE *)(v7 + 144))
  {
    v8 = *(_QWORD *)(v7 + 296);
    if (!v8)
      return 0;
    v9 = *(WebCore::RenderView **)(v8 + 1944);
    if (!v9)
      return 0;
    ++*((_DWORD *)v9 + 4);
    result = WebCore::RenderView::pageCount(v9);
    v10 = *((_DWORD *)v9 + 4);
    if (v10)
    {
      *((_DWORD *)v9 + 4) = v10 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::Page::setIsInWindow(WebCore::Page *this, int a2)
{
  __int16 v2;

  v2 = 16;
  if (!a2)
    v2 = 0;
  return WebCore::Page::setActivityState((uint64_t)this, *((_WORD *)this + 329) & 0xFFEFu | v2);
}

unsigned int *WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ActivityStateChangeObserver>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned int *result;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  char v19;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore27ActivityStateChangeObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v19);
    v8 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a1 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v8;
  }
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v9 = *(unsigned int **)(a2 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  v18 = (WTF *)v9;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v18, a3);
  result = (unsigned int *)v18;
  v18 = 0;
  if (result)
  {
    do
    {
      v16 = __ldaxr(result);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, result));
    if (!v17)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v12);
    }
  }
  if (v9)
  {
    do
    {
      v14 = __ldaxr(v9);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v9));
    if (!v15)
    {
      atomic_store(1u, v9);
      return (unsigned int *)WTF::fastFree((WTF *)v9, v12);
    }
  }
  return result;
}

uint64_t WebCore::Page::removeActivityStateChangeObserver(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  char v9;

  v3 = (uint64_t *)(result + 976);
  v4 = *(_DWORD *)(result + 984) + 1;
  *(_DWORD *)(result + 984) = v4;
  if (v4 > *(_DWORD *)(result + 988))
  {
    v5 = result;
    result = _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore27ActivityStateChangeObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(result + 976), &v9);
    v6 = 0;
    *(_DWORD *)(v5 + 984) = 0;
    v7 = *(_QWORD *)(v5 + 976);
    if (v7)
    {
      v6 = *(_DWORD *)(v7 - 12);
      if (v6 > 0x7FFFFFFE)
        v6 = 0x7FFFFFFF;
    }
    *(_DWORD *)(v5 + 988) = 2 * v6;
  }
  v8 = *(WTF **)(a2 + 8);
  if (v8)
  {
    if (*((_QWORD *)v8 + 1))
      return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(v3, v8);
  }
  return result;
}

WebCore::RenderingUpdateScheduler *WebCore::Page::renderingUpdateScheduler(WebCore::Page *this)
{
  WebCore::RenderingUpdateScheduler *result;
  WebCore::RenderingUpdateScheduler *v3;
  uint64_t v4;

  result = (WebCore::RenderingUpdateScheduler *)*((_QWORD *)this + 84);
  if (!result)
  {
    v3 = (WebCore::RenderingUpdateScheduler *)WTF::fastMalloc((WTF *)0x38);
    result = WebCore::RenderingUpdateScheduler::RenderingUpdateScheduler(v3, this);
    v4 = *((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return (WebCore::RenderingUpdateScheduler *)*((_QWORD *)this + 84);
    }
  }
  return result;
}

_QWORD *WebCore::Page::didScheduleRenderingUpdate(WebCore::Page *this)
{
  _QWORD *result;
  _QWORD *v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;

  result = (_QWORD *)WebCore::Page::scrollingCoordinator(this);
  if (!result)
    return result;
  v2 = result;
  v3 = result[1];
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  ++*(_QWORD *)(v3 + 8);
  v5 = __ldxr((unsigned __int8 *)v3);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 128))(v2);
  v7 = v2[1];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_15;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v7);
LABEL_15:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v14 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
LABEL_22:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return result;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_22;
  if (v10)
    return result;
LABEL_23:
  if (v11)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    return (_QWORD *)WTF::fastFree((WTF *)v7, v6);
  return result;
}

uint64_t WebCore::Page::startTrackingRenderingUpdates(uint64_t this)
{
  *(_BYTE *)(this + 1020) = 1;
  *(_DWORD *)(this + 1016) = 0;
  return this;
}

uint64_t WebCore::Page::renderingUpdateCount(WebCore::Page *this)
{
  return *((unsigned int *)this + 254);
}

BOOL WebCore::Page::isMonitoringWheelEvents(WebCore::Page *this)
{
  return *((_QWORD *)this + 121) != 0;
}

uint64_t WebCore::Page::wheelEventTestMonitor@<X0>(uint64_t this@<X0>, unsigned __int8 ***a2@<X8>)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  int v6;

  v3 = *(unsigned __int8 ***)(this + 968);
  if (!v3)
    goto LABEL_11;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
LABEL_5:
    this = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, v4))
    goto LABEL_5;
LABEL_6:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a2 = v3;
  return this;
}

void WebCore::Page::isolatedUpdateRendering(WebCore::Page *this)
{
  WebCore::Page::updateRendering(this);
  WebCore::Page::renderingUpdateCompleted(this);
}

void WebCore::Page::renderingUpdateCompleted(WebCore::Page *this)
{
  int v1;
  double v3;
  WebCore::OpportunisticTaskScheduler *v4;
  void *v5;
  WTF::MonotonicTime *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int i;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  _DWORD *v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl **v41;
  WebCore::RenderingUpdateScheduler *updated;
  uint64_t v43;
  WTF::StringImpl **v44;

  v1 = *((_DWORD *)this + 279);
  if (!v1)
  {
    __break(0xC471u);
    return;
  }
  *((_DWORD *)this + 279) = v1 - 1;
  if (!*((_DWORD *)this + 282))
    goto LABEL_3;
  v6 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 1024))(*(_QWORD *)(*((_QWORD *)this + 6) + 16));
  if ((v6 & 1) == 0)
  {
    updated = WebCore::Page::renderingUpdateScheduler(this);
    v6 = (WTF::MonotonicTime *)WebCore::RenderingUpdateScheduler::scheduleRenderingUpdate(updated);
  }
  WTF::MonotonicTime::now(v6);
  v43 = v7;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = off_1E34008E0;
  v9[1] = this;
  v9[2] = &v43;
  v44 = 0;
  v10 = *((_QWORD *)this + 20);
  if (!v10)
    goto LABEL_53;
  v11 = 0;
  do
  {
    if (*(_BYTE *)(v10 + 144))
      goto LABEL_29;
    v12 = *(WebCore::Document **)(v10 + 296);
    if (!v12)
      goto LABEL_29;
    v13 = WebCore::Document::windowEventLoop(v12, v8);
    v14 = *(_DWORD *)(v13 + 8) + 1;
    *(_DWORD *)(v13 + 8) = v14;
    if (v11 == v13)
    {
LABEL_27:
      v31 = v14 - 1;
      if (v31)
        *(_DWORD *)(v13 + 8) = v31;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_29:
      v13 = v11;
      goto LABEL_30;
    }
    v15 = (uint64_t)v44;
    if (v44
      || (v16 = WTF::fastZeroedMalloc((WTF *)0x50),
          v44 = (WTF::StringImpl **)(v16 + 16),
          *(_QWORD *)(v16 + 8) = 0x800000007,
          *(_DWORD *)v16 = 0,
          *((_DWORD *)v44 - 3) = 0,
          (v15 = (uint64_t)v44) != 0))
    {
      v17 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = 0;
    v19 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = (v21 >> 31) ^ v21;
    for (i = 1; ; ++i)
    {
      v24 = v22 & v17;
      v25 = (uint64_t *)(v15 + 8 * v24);
      v26 = *v25;
      if (!*v25)
        break;
      if (v26 != -1)
      {
        v25 = v18;
        if (v26 == v13)
        {
          v14 = *(_DWORD *)(v13 + 8);
          v11 = v13;
          goto LABEL_27;
        }
      }
      v22 = i + v24;
      v18 = v25;
    }
    if (v18)
    {
      *v18 = 0;
      --*((_DWORD *)v44 - 4);
      *v18 = v13;
    }
    else
    {
      *v25 = v13;
      v18 = (uint64_t *)(v15 + 8 * v24);
    }
    if (v44)
      v27 = *((_DWORD *)v44 - 3) + 1;
    else
      v27 = 1;
    *((_DWORD *)v44 - 3) = v27;
    if (v44)
      v28 = *((_DWORD *)v44 - 3);
    else
      v28 = 0;
    v29 = (*((_DWORD *)v44 - 4) + v28);
    v30 = *((unsigned int *)v44 - 1);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_30;
    }
    else if (3 * v30 > 4 * v29)
    {
      goto LABEL_30;
    }
    WTF::HashTable<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>>::expand((uint64_t *)&v44, v18);
LABEL_30:
    v10 = WebCore::FrameTree::traverseNext((_QWORD *)(v10 + 48), 0);
    v11 = v13;
  }
  while (v10);
  v32 = (uint64_t)v44;
  if (v44)
  {
    v33 = *((unsigned int *)v44 - 1);
    if (!*((_DWORD *)v44 - 3))
      goto LABEL_44;
    v34 = v44;
    if ((_DWORD)v33)
    {
      v35 = 0;
      while ((unint64_t)v44[v35] + 1 <= 1)
      {
        if (v33 == ++v35)
          goto LABEL_42;
      }
      v34 = &v44[v35];
    }
    v41 = &v44[v33];
    if (v41 != v34)
    {
      v8 = *v34;
LABEL_60:
      (*(void (**)(_QWORD *, WTF::StringImpl *))(*v9 + 16))(v9, v8);
      while (++v34 != v41)
      {
        v8 = *v34;
        if ((unint64_t)*v34 + 1 > 1)
        {
          if (v34 != v41)
            goto LABEL_60;
          break;
        }
      }
      v32 = (uint64_t)v44;
    }
LABEL_42:
    if (v32)
    {
      LODWORD(v33) = *(_DWORD *)(v32 - 4);
LABEL_44:
      if ((_DWORD)v33)
      {
        v36 = v33;
        v37 = (_DWORD **)v32;
        do
        {
          v38 = *v37;
          if (*v37 != (_DWORD *)-1)
          {
            *v37 = 0;
            if (v38)
            {
              if (v38[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
              else
                --v38[2];
            }
          }
          ++v37;
          --v36;
        }
        while (v36);
      }
      WTF::fastFree((WTF *)(v32 - 16), v8);
    }
  }
LABEL_53:
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  *((_DWORD *)this + 282) = 0;
LABEL_3:
  if (!*((_BYTE *)this + 1093))
  {
    v3 = WebCore::preferredFrameInterval(*((_BYTE *)this + 1168), *(_QWORD *)((char *)this + 316), (*(_QWORD *)(*((_QWORD *)this + 14) + 688) >> 31) & 1)+ *((double *)this + 211);
    v4 = (WebCore::OpportunisticTaskScheduler *)*((_QWORD *)this + 223);
    ++*(_DWORD *)v4;
    WebCore::OpportunisticTaskScheduler::rescheduleIfNeeded((uint64_t)v4, v3);
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::OpportunisticTaskScheduler::~OpportunisticTaskScheduler(v4, v5);
      WTF::fastFree(v39, v40);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

unsigned int *WebCore::Page::forEachRenderableDocument(unsigned int *result, _QWORD *a2)
{
  unsigned int v3;
  unint64_t v4;
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int **v18;

  if (!result)
    return result;
  v3 = 0;
  LODWORD(v4) = 0;
  v5 = 0;
  while (1)
  {
LABEL_3:
    v6 = result;
    if (*((_BYTE *)result + 144))
      goto LABEL_19;
    v7 = *((_QWORD *)result + 37);
    if (!v7 || *(_BYTE *)(v7 + 3441))
      goto LABEL_19;
    v8 = v3;
    if (v3 != (_DWORD)v4)
    {
      v11 = v5;
      goto LABEL_18;
    }
    v9 = v3 + ((unint64_t)v3 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= (unint64_t)v3 + 1)
      v4 = v3 + 1;
    else
      v4 = v10;
    if (v4 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19601FEACLL);
    }
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
    memcpy(v11, v5, 8 * v3);
    if (v11 != v5)
    {
      if (!v5)
        goto LABEL_18;
      if (v11 == v5)
      {
        v11 = 0;
        LODWORD(v4) = 0;
      }
      goto LABEL_17;
    }
    if (v5)
    {
      v11 = 0;
      LODWORD(v4) = 0;
LABEL_17:
      WTF::fastFree((WTF *)v5, a2);
    }
LABEL_18:
    ++v3;
    *(_DWORD *)(v7 + 24) += 2;
    *((_QWORD *)v11 + v8) = v7;
    v5 = v11;
LABEL_19:
    result = (unsigned int *)*((_QWORD *)v6 + 11);
    if (!result)
    {
      v12 = *(_QWORD *)(*((_QWORD *)v6 + 6) + 8);
      if (!v12)
        goto LABEL_27;
      result = (unsigned int *)*((_QWORD *)v6 + 9);
      if (!result)
        break;
    }
  }
  while (1)
  {
    v13 = *(_QWORD *)(v12 + 56);
    if (!v13)
      break;
    v12 = *(_QWORD *)(v13 + 8);
    if (!v12)
      break;
    result = *(unsigned int **)(v12 + 72);
    if (result)
      goto LABEL_3;
  }
LABEL_27:
  if (v3)
  {
    v14 = 8 * v3;
    v15 = v14;
    v16 = (uint64_t *)v5;
    do
    {
      v17 = *v16++;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v17);
      v15 -= 8;
    }
    while (v15);
    v18 = (unsigned int **)v5;
    do
    {
      result = *v18;
      *v18 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      ++v18;
      v14 -= 8;
    }
    while (v14);
  }
  if (v5)
    return (unsigned int *)WTF::fastFree((WTF *)v5, a2);
  return result;
}

uint64_t WebCore::Page::updatePlayStateForAllAnimations(uint64_t this)
{
  WebCore::LocalFrameView *v1;

  if (this)
  {
    if (!*(_BYTE *)(this + 144))
    {
      v1 = *(WebCore::LocalFrameView **)(this + 288);
      if (v1)
      {
        ++*((_DWORD *)v1 + 2);
        this = WebCore::LocalFrameView::updatePlayStateForAllAnimationsIncludingSubframes(v1);
        if (*((_DWORD *)v1 + 2) == 1)
          return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v1 + 8))(v1);
        else
          --*((_DWORD *)v1 + 2);
      }
    }
  }
  return this;
}

uint64_t WebCore::Page::setPrefersNonBlinkingCursor(uint64_t this, char a2)
{
  *(_BYTE *)(this + 568) = a2;
  return this;
}

WTF::StringImpl *WebCore::Page::userStyleSheetLocationChanged(WebCore::Page *this)
{
  int *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  __int128 v6;
  unsigned __int8 *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v17;
  __n128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  __int16 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *result;
  uint64_t v41;
  unsigned __int8 *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;
  unsigned __int8 *v48;
  WTF::StringImpl *v49;

  v4 = *((_QWORD *)this + 14);
  v5 = *(WTF::StringImpl **)(v4 + 568);
  if (v5)
    *(_DWORD *)v5 += 2;
  v45 = v5;
  v6 = *(_OWORD *)(v4 + 592);
  v46 = *(_OWORD *)(v4 + 576);
  v47 = v6;
  v7 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)&v45);
  v48 = v7;
  v49 = v8;
  if (!v7)
    goto LABEL_12;
  v2 = WebCore::schemeRegistryLock;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_8;
  }
  v7 = (unsigned __int8 *)MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_8:
  v1 = &dword_1ECE90000;
    goto LABEL_40;
  while (1)
  {
    v12 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::localURLSchemes(void)::localSchemes, &v48, v9, v10);
    v1 = (int *)v12;
    v13 = __ldxr(v2);
    if (v13 == 1)
    {
      if (!__stlxr(0, v2))
      {
        if (!(_DWORD)v12)
          goto LABEL_12;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    if ((v1 & 1) == 0)
    {
LABEL_12:
      v14 = (WTF::StringImpl *)*((_QWORD *)this + 60);
      *((_QWORD *)this + 60) = 0;
      if (!v14)
        goto LABEL_20;
LABEL_13:
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v8);
        goto LABEL_20;
      }
LABEL_19:
      *(_DWORD *)v14 = v15;
      goto LABEL_20;
    }
LABEL_17:
    WTF::URL::fileSystemPath((WTF::URL *)&v45);
    v16 = v48;
    v48 = 0;
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 60);
    *((_QWORD *)this + 60) = v16;
    if (!v14)
      goto LABEL_20;
    v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 != 2)
      goto LABEL_19;
    WTF::StringImpl::destroy(v14, v8);
    v14 = (WTF::StringImpl *)v48;
    v48 = 0;
    if (v14)
      goto LABEL_13;
LABEL_20:
    *((_BYTE *)this + 496) = 0;
    v17 = (WTF::StringImpl *)*((_QWORD *)this + 61);
    *((_QWORD *)this + 61) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v8);
      else
        *(_DWORD *)v17 -= 2;
    }
    *((_QWORD *)this + 63) = 0x7FF8000000000000;
    if (!WTF::URL::protocolIs())
      goto LABEL_62;
    if (!v45)
      goto LABEL_62;
    v7 = (unsigned __int8 *)WTF::StringImpl::startsWith();
    if (!(_DWORD)v7)
      goto LABEL_62;
    v19 = v45;
    *((_BYTE *)this + 496) = 1;
    if (!v19)
      break;
    v20 = *((unsigned int *)v19 + 1);
    if (v20 < 0x24)
      break;
    v21 = *((_QWORD *)v19 + 1);
    v22 = (v20 - 35);
    v23 = v20 - 35;
    if ((*((_BYTE *)v19 + 16) & 4) != 0)
    {
      if (v23 >= v22)
      {
        v24 = (WTF::StringImpl *)(v21 + 35);
        v22 |= 0x100000000uLL;
        goto LABEL_33;
      }
    }
    else if (v23 >= v22)
    {
      v24 = (WTF::StringImpl *)(v21 + 70);
      goto LABEL_33;
    }
    __break(1u);
LABEL_40:
    v25 = WebCore::builtinLocalURLSchemes((WebCore *)v7);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&WebCore::localURLSchemes(void)::localSchemes, (WTF::ASCIICaseInsensitiveHash **)v25);
    *((_BYTE *)v1 + 3088) = 1;
  }
  v22 = 0x100000000;
  v24 = (WTF::StringImpl *)"";
LABEL_33:
  {
    if ((_DWORD)v22)
      goto LABEL_35;
LABEL_49:
    if ((v22 & 0x100000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
  }
  else
  {
    v43 = v24;
    v26 = v22;
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", (const char *)v22);
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v27;
    v48 = (unsigned __int8 *)xmmword_1ECE86C80;
    v49 = v27;
    if (v27 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v48))
      {
        v28 = 165;
      }
      else
      {
        v28 = 92;
      }
    }
    else
    {
      v28 = 92;
    }
    word_1ECE86C90 = v28;
    v22 = v26;
    v24 = v43;
    if (!(_DWORD)v26)
      goto LABEL_49;
LABEL_35:
    PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v24, v22, (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, &v44, v18);
  }
  WTF::base64DecodeToString();
  v30 = v44;
  v44 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (WTF::StringImpl *)v48;
  if (v48)
  {
    *(_DWORD *)v48 += 2;
    v32 = (WTF::StringImpl *)*((_QWORD *)this + 61);
    *((_QWORD *)this + 61) = v31;
    if (!v32)
      goto LABEL_59;
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::destroy(v32, v29);
      v31 = (WTF::StringImpl *)v48;
      v48 = 0;
      if (v31)
        goto LABEL_60;
    }
    else
    {
      *(_DWORD *)v32 -= 2;
LABEL_59:
      v48 = 0;
LABEL_60:
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v29);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
LABEL_62:
  v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = off_1E3400E30;
  v44 = v33;
  v34 = *((_QWORD *)this + 20);
  v35 = (unsigned int *)(v34 + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 + 1, v35));
  WebCore::Page::forEachDocumentFromMainFrame(v34, &v44);
  do
  {
    v38 = __ldaxr(v35);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v35));
  if (!v39)
  {
    atomic_store(1u, v35);
    v41 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v41 = off_1E31FE290;
    *(_QWORD *)(v41 + 8) = v35;
    v48 = (unsigned __int8 *)v41;
    WTF::ensureOnMainThread();
    v42 = v48;
    v48 = 0;
    if (v42)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v42 + 8))(v42);
  }
  if (v44)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v44 + 8))(v44);
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Page::invalidateStylesForLink(WebCore::Page *this, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;

  v13 = a2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3400EA8;
  v3[1] = &v13;
  v12 = (uint64_t)v3;
  v4 = *((_QWORD *)this + 20);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::Page::forEachDocumentFromMainFrame(v4, &v12);
  do
  {
    v7 = __ldaxr(v5);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v5));
  if (!v8)
  {
    atomic_store(1u, v5);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v5;
    v14 = v10;
    WTF::ensureOnMainThread();
    v11 = v14;
    v14 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t WebCore::Page::setDebugger(uint64_t this, JSC::Debugger *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WTF *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;

  if (*(JSC::Debugger **)(this + 536) != a2)
  {
    v2 = this;
    *(_QWORD *)(this + 536) = a2;
    v3 = *(_QWORD *)(this + 160);
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if (v3)
    {
      do
      {
        v6 = *(WTF **)(v3 + 112);
        ++*(_DWORD *)v6;
        WebCore::WindowProxy::attachDebugger((uint64_t)v6, *(JSC::Debugger **)(v2 + 536));
        if (*(_DWORD *)v6 == 1)
        {
          v14 = (uint64_t *)*((_QWORD *)v6 + 2);
          *((_QWORD *)v6 + 2) = 0;
          if (v14)
          {
            if (*v14)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v14, v7);
            WTF::fastFree((WTF *)v14, v7);
          }
          v15 = (unsigned int *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v7);
            }
          }
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*(_DWORD *)v6;
        }
        this = WebCore::FrameTree::traverseNext((_QWORD *)(v3 + 48), 0);
        v8 = this;
        if (this)
        {
          v9 = (unsigned int *)(this + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
        v11 = (unsigned int *)(v3 + 8);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v18 = off_1E31FE290;
          v18[1] = v11;
          v19 = (uint64_t)v18;
          WTF::ensureOnMainThread();
          this = v19;
          if (v19)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        v3 = v8;
      }
      while (v8);
    }
  }
  return this;
}

unsigned int *WebCore::Page::setCORSDisablingPatterns(uint64_t a1, WTF::StringImpl *a2)
{
  return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 1608), a2);
}

_QWORD *WebCore::Page::addCORSDisablingPatternForTesting(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2;
  result = (_QWORD *)(a1 + 1608);
  v5 = *(unsigned int *)(a1 + 1620);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 1616))
  {
    result = (_QWORD *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, (unint64_t)a2);
    v2 = result;
    v6 = *(_QWORD *)(a1 + 1608) + 32 * *(unsigned int *)(a1 + 1620);
    v7 = *result;
    *result = 0;
    *(_QWORD *)v6 = v7;
    v8 = result[1];
    result[1] = 0;
    *(_QWORD *)(v6 + 8) = v8;
    v9 = result[2];
    result[2] = 0;
  }
  else
  {
    v6 = *result + 32 * v5;
    v10 = *a2;
    *a2 = 0;
    *(_QWORD *)v6 = v10;
    v11 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(v6 + 8) = v11;
    v9 = a2[2];
    a2[2] = 0;
  }
  *(_QWORD *)(v6 + 16) = v9;
  *(_WORD *)(v6 + 24) = *((_WORD *)v2 + 12);
  ++*(_DWORD *)(a1 + 1620);
  return result;
}

uint64_t WebCore::Page::setDOMTimerAlignmentIntervalIncreaseLimit(uint64_t this, double a2)
{
  *(double *)(this + 648) = a2;
  if (*(_DWORD *)(this + 572) == 2)
    return WebCore::Page::updateDOMTimerAlignmentInterval(this);
  return this;
}

uint64_t WebCore::Page::dnsPrefetchingStateChanged(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3400F20;
  v4 = v2;
  WebCore::Page::forEachDocument((uint64_t)this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::Page::updateIsPlayingMedia(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;

  v12 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3400F70;
  v2[1] = &v12;
  v11 = (uint64_t)v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v13 = v9;
    WTF::ensureOnMainThread();
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  result = v11;
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v12 != *((_DWORD *)this + 256))
  {
    *((_DWORD *)this + 256) = v12;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 1456))(*(_QWORD *)(*((_QWORD *)this + 6) + 16));
  }
  return result;
}

uint64_t WebCore::Page::stopMediaCapture(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E3400FC0;
  *(_BYTE *)(v4 + 8) = a2;
  v13 = v4;
  v5 = *(_QWORD *)(a1 + 160);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebCore::Page::forEachDocumentFromMainFrame(v5, &v13);
  do
  {
    v8 = __ldaxr(v6);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v6));
  if (!v9)
  {
    atomic_store(1u, v6);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v6;
    v14 = v11;
    WTF::ensureOnMainThread();
    v12 = v14;
    v14 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

uint64_t WebCore::Page::mediaPlaybackExists(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  {
    if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager
      && (v1 = *(unsigned int *)(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager + 44),
          (_DWORD)v1))
    {
      v2 = *(_QWORD *)(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager + 32);
      v3 = 8 * v1;
      while (!*(_QWORD *)v2 || !*(_QWORD *)(*(_QWORD *)v2 + 8))
      {
        v2 += 8;
        v3 -= 8;
        if (!v3)
          return 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  }
  return result;
}

uint64_t WebCore::Page::mediaPlaybackIsPaused(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v3;

  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    return 0;
  }
  v2 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  if (!WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
    return 0;
  v3 = *((_QWORD *)this + 216);
  if (!v3)
  {
    if (*((_BYTE *)this + 40))
    {
      v3 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 216) = v3;
    }
    else
    {
      v3 = 0;
    }
  }
  return WebCore::PlatformMediaSessionManager::mediaPlaybackIsPaused(v2, v3);
}

uint64_t (***WebCore::Page::pauseAllMediaPlayback(uint64_t (***this)()))()
{
  uint64_t (***v1)();
  uint64_t v2;

  {
    v1 = this;
    this = (uint64_t (***)())WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
    if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
    {
      v2 = (uint64_t)v1[216];
      if (!v2)
      {
        if (*((_BYTE *)v1 + 40))
        {
          v2 = (uint64_t)v1[4];
          v1[216] = (uint64_t (**)())v2;
        }
        else
        {
          v2 = 0;
        }
      }
      return WebCore::PlatformMediaSessionManager::pauseAllMediaPlaybackForGroup((uint64_t)this, v2);
    }
  }
  else
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  }
  return this;
}

uint64_t (***WebCore::Page::suspendAllMediaPlayback(uint64_t (***this)()))()
{
  uint64_t (***v1)();
  uint64_t v2;

  if (!*((_BYTE *)this + 1095))
  {
    v1 = this;
    {
      this = (uint64_t (***)())WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      {
        v2 = (uint64_t)v1[216];
        if (!v2)
        {
          if (*((_BYTE *)v1 + 40))
          {
            v2 = (uint64_t)v1[4];
            v1[216] = (uint64_t (**)())v2;
          }
          else
          {
            v2 = 0;
          }
        }
        this = WebCore::PlatformMediaSessionManager::suspendAllMediaPlaybackForGroup((uint64_t)this, v2);
      }
    }
    else
    {
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    }
    *((_BYTE *)v1 + 1095) = 1;
  }
  return this;
}

uint64_t (***WebCore::Page::resumeAllMediaPlayback(uint64_t (***this)()))()
{
  uint64_t v1;
  uint64_t v2;

  if (*((_BYTE *)this + 1095))
  {
    *((_BYTE *)this + 1095) = 0;
    {
      v1 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      {
        v2 = (uint64_t)this[216];
        if (!v2)
        {
          if (*((_BYTE *)this + 40))
          {
            v2 = (uint64_t)this[4];
            this[216] = (uint64_t (**)())v2;
          }
          else
          {
            v2 = 0;
          }
        }
        return WebCore::PlatformMediaSessionManager::resumeAllMediaPlaybackForGroup(v1, v2);
      }
    }
    else
    {
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    }
  }
  return this;
}

uint64_t (***WebCore::Page::resumeAllMediaBuffering(uint64_t (***this)()))()
{
  uint64_t v1;
  uint64_t v2;

  if (*((_BYTE *)this + 1096))
  {
    *((_BYTE *)this + 1096) = 0;
    {
      v1 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      {
        v2 = (uint64_t)this[216];
        if (!v2)
        {
          if (*((_BYTE *)this + 40))
          {
            v2 = (uint64_t)this[4];
            this[216] = (uint64_t (**)())v2;
          }
          else
          {
            v2 = 0;
          }
        }
        return WebCore::PlatformMediaSessionManager::resumeAllMediaBufferingForGroup(v1, v2);
      }
    }
    else
    {
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    }
  }
  return this;
}

uint64_t WebCore::Page::subframeCount(WebCore::Page *this)
{
  return WebCore::FrameTree::descendantCount((WebCore::FrameTree *)(*((_QWORD *)this + 20) + 48));
}

BOOL WebCore::Page::isVisibleAndActive(WebCore::Page *this)
{
  return (~*((unsigned __int16 *)this + 329) & 5) == 0;
}

uint64_t WebCore::Page::setIsVisible(WebCore::Page *this, int a2)
{
  __int16 v2;

  v2 = 32;
  if (a2)
    v2 = 12;
  return WebCore::Page::setActivityState((uint64_t)this, *((_WORD *)this + 329) & 0xFFD3u | v2);
}

uint64_t std::optional<WebCore::Page::Navigation>::operator=[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    *(_BYTE *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::Page::visibilityState(WebCore::Page *this)
{
  return (*((unsigned __int16 *)this + 329) >> 2) & 1;
}

void WebCore::Page::setHeaderHeight(WebCore::Page *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_DWORD *)this + 166) != a2)
  {
    *((_DWORD *)this + 166) = a2;
    v2 = *((_QWORD *)this + 20);
    if (v2 && *(_BYTE *)(v2 + 144) == 0)
    {
      v4 = *(_QWORD *)(v2 + 288);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 8);
        *(_DWORD *)(v4 + 8) = v5 + 1;
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 296);
        if (v6 && *(_QWORD *)(v6 + 1944))
        {
          v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 + 64) + 832))(v4 + 64, 0, 1);
          WebCore::ScrollView::updateScrollbars(v4, (const WebCore::IntPoint *)&v7);
          WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameViewLayoutContext *)(v4 + 336));
          WebCore::LocalFrameView::setNeedsCompositingGeometryUpdate((WebCore::LocalFrameView *)v4);
          v5 = *(_DWORD *)(v4 + 8) - 1;
        }
        if (v5)
          *(_DWORD *)(v4 + 8) = v5;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
}

void WebCore::Page::setFooterHeight(WebCore::Page *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_DWORD *)this + 167) != a2)
  {
    *((_DWORD *)this + 167) = a2;
    v2 = *((_QWORD *)this + 20);
    if (v2 && *(_BYTE *)(v2 + 144) == 0)
    {
      v4 = *(_QWORD *)(v2 + 288);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 8);
        *(_DWORD *)(v4 + 8) = v5 + 1;
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 296);
        if (v6 && *(_QWORD *)(v6 + 1944))
        {
          v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 + 64) + 832))(v4 + 64, 0, 1);
          WebCore::ScrollView::updateScrollbars(v4, (const WebCore::IntPoint *)&v7);
          WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameViewLayoutContext *)(v4 + 336));
          WebCore::LocalFrameView::setNeedsCompositingGeometryUpdate((WebCore::LocalFrameView *)v4);
          v5 = *(_DWORD *)(v4 + 8) - 1;
        }
        if (v5)
          *(_DWORD *)(v4 + 8) = v5;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
}

uint64_t WebCore::Page::inspectable(Inspector::RemoteInspectionTarget **this)
{
  return Inspector::RemoteInspectionTarget::inspectable(this[100]);
}

uint64_t WebCore::Page::setInspectable(Inspector::RemoteInspectionTarget **this)
{
  return Inspector::RemoteInspectionTarget::setInspectable(this[100]);
}

uint64_t WebCore::Page::remoteInspectionNameOverride@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(this + 800) + 48);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::PageDebuggable::nameOverride(WebCore::PageDebuggable *this)
{
  return (uint64_t)this + 48;
}

uint64_t WebCore::Page::setRemoteInspectionNameOverride(WebCore::Page *this, const WTF::String *a2)
{
  Inspector::RemoteControllableTarget *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;

  v2 = (Inspector::RemoteControllableTarget *)*((_QWORD *)this + 100);
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 6);
  *((_QWORD *)v2 + 6) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return Inspector::RemoteControllableTarget::update(v2);
}

uint64_t WebCore::Page::removeLayoutMilestones(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 660) &= ~a2;
  return result;
}

float WebCore::Page::setUnderPageBackgroundColorOverride(uint64_t a1, unint64_t *a2, float result)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  float v21[4];
  float v22[4];

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 1696);
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_10;
    result = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    v10 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8);
    v11 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC);
    v12 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
    v13 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8);
    v14 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC);
    v15 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (result != *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4)
      || v10 != v13
      || v11 != v14
      || v12 != v15
      || HIBYTE(v3) != HIBYTE(v4)
      || BYTE6(v3) != BYTE6(v4))
    {
      v20 = a2;
      v22[0] = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v22[1] = v13;
      v22[2] = v14;
      v22[3] = v15;
      v21[0] = result;
      v21[1] = v10;
      v21[2] = v11;
      v21[3] = v12;
      v16 = a1;
      v17 = WebCore::operator==<float,4ul>(v22, v21);
      v4 = *(_QWORD *)(v16 + 1696);
      if (!v17 || HIBYTE(v4) != HIBYTE(*v20))
      {
        a1 = v16;
        a2 = v20;
        goto LABEL_10;
      }
      a1 = v16;
      a2 = v20;
      if (BYTE6(v4) != BYTE6(*v20))
      {
LABEL_10:
        if ((v4 & 0x8000000000000) != 0)
        {
          v18 = a1;
          v19 = a2;
          v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
            a1 = v18;
            a2 = v19;
          }
        }
        *(_QWORD *)(a1 + 1696) = *a2;
        *a2 = 0;
      }
LABEL_12:
      WebCore::Page::scheduleRenderingUpdate(a1, 0);
    }
  }
  else if (v3 != v4 || (v4 & 0x8000000000000) != 0)
  {
    if (v3 != v4 || ((v4 | v3) & 0x8000000000000) != 0)
      goto LABEL_10;
    goto LABEL_12;
  }
  return result;
}

uint64_t WebCore::Page::isCountingRelevantRepaintedObjects(WebCore::Page *this)
{
  if (*((_BYTE *)this + 768))
    return (*((unsigned __int16 *)this + 330) >> 2) & 1;
  else
    return 0;
}

void WebCore::Page::addRelevantRepaintedObject(WebCore::Page *this, const WebCore::RenderObject *a2, const WebCore::LayoutRect *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  int v52;
  _BOOL4 v53;
  int v54;
  int v55;
  _BOOL4 v56;
  int v57;
  int v58;
  signed int v59;
  signed int v60;
  int v61;
  int v62;
  signed int v63;
  signed int v64;
  void *v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  int v69;
  int v70;
  WTF *v71;
  int v72;
  int v73;
  void *v74;
  WTF *v75;
  WTF *v76;
  WTF *v77;
  float v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  _DWORD *v87;
  void *v88;
  int v89;
  int v90;
  BOOL v91;
  int v92;
  _BOOL4 v93;
  int v94;
  int v95;
  _BOOL4 v96;
  int v97;
  int v98;
  _BOOL4 v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  WTF *v106;

  if (*((_BYTE *)this + 768) && (*((_WORD *)this + 330) & 4) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
      v7 = *(_QWORD *)(v7 + 8);
    if (v7 == *((_QWORD *)this + 20))
    {
      v8 = *(_QWORD *)(v6 + 1944);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 3382)
        && WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*(_QWORD *)(v8 + 248) + 328)))
      {
        v12 = 0;
        v11 = *(_DWORD *)(v8 + 160);
      }
      else
      {
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 248) + 64) + 832))(*(_QWORD *)(v8 + 248) + 64, 0, 1);
        v11 = 0x80000000;
        if (v9 >= -33554432)
          v11 = v9 << 6;
        if (v9 > 0x1FFFFFF)
          v11 = 0x7FFFFFFF;
        v12 = 0x7FFFFFFF00000000;
        if (v10 <= 0x1FFFFFF)
          v12 = (unint64_t)(v10 < -33554432) << 63;
      }
      v13 = v12 | v11;
      v14 = (int)v13 <= 62720 ? 0 : (((v13 << 6) + 0x3FFFC2C000) >> 7) & 0x7FFFFFFF;
      v15 = (((v14 & 0x20u) + 32) >> 6) + (v14 >> 6);
      v16 = v15 >> 25 ? 0x7FFFFFFF : v15 << 6;
      v17 = *((_DWORD *)a3 + 2);
      if (v17 >= 1)
      {
        v18 = *((_DWORD *)a3 + 3);
        if (v18 >= 1)
        {
          v19 = *(_DWORD *)a3;
          v20 = v16 + 62720;
          if (__OFADD__(v16, 62720))
            v20 = 0x7FFFFFFF;
          if ((int)v19 < v20)
          {
            v48 = __OFADD__(v19, v17);
            v21 = v19 + v17;
            if (v48)
              v21 = (v19 >> 31) + 0x7FFFFFFF;
            if (v16 < v21)
            {
              v22 = *((_DWORD *)a3 + 1);
              if (v22 <= 83199)
              {
                v48 = __OFADD__(v22, v18);
                v23 = v22 + v18;
                if (v48)
                  v23 = (v22 >> 31) + 0x7FFFFFFF;
                if (v23 >= 1)
                {
                  v24 = HIDWORD(*(_QWORD *)a3);
                  if ((int)*(_QWORD *)a3 >= 0)
                    v25 = *(_QWORD *)a3;
                  else
                    v25 = *(_QWORD *)a3 + 63;
                  v26 = *(_QWORD *)a3 - (v25 & 0xFFFFFFC0);
                  if ((int)v24 >= 0)
                    v27 = HIDWORD(*(_QWORD *)a3);
                  else
                    v27 = v24 + 63;
                  v28 = v24 - (v27 & 0xFFFFFFC0);
                  v29 = *((_DWORD *)a3 + 2);
                  v30 = *((_DWORD *)a3 + 3);
                  v48 = __OFADD__(v26, v29);
                  v31 = v26 + v29;
                  if (v48)
                    v31 = (v26 >> 31) + 0x7FFFFFFF;
                  v32 = v25 >> 6;
                  v33 = v27 >> 6;
                  v34 = v28 + v30;
                  if (__OFADD__(v28, v30))
                    v34 = (v28 >> 31) + 0x7FFFFFFF;
                  v35 = v28 + 32;
                  v36 = (v33 + (v35 >> 6));
                  v37 = v36 << 32;
                  v38 = v26 + 32;
                  v39 = (v32 + (v38 >> 6));
                  v40 = (v31 / 64 - (v38 >> 6) + ((int)(v31 - (v32 & 0xFFFFFFC0) + 32) >> 6));
                  v41 = (v34 / 64 - (v35 >> 6) + ((int)(v34 - (v38 & 0xFFFFFFC0) + 32) >> 6));
                  if ((WTF::WeakHashSet<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderObject>((uint64_t)this + 680, a2) & 1) != 0)
                  {
                    v42 = v37 | v39;
                    v104 = v37 | v39;
                    v105 = v40 | (v41 << 32);
                    v106 = 0;
                    WebCore::Region::subtract((WebCore::Page *)((char *)this + 744), (const WebCore::Region *)&v104);
                    WebCore::Region::~Region((WebCore::Region *)&v104, v88);
                  }
                  else
                  {
                    v42 = v37 | v39;
                  }
                  v43 = (_DWORD)v39 << 6;
                  if ((int)v39 < -33554432)
                    v43 = 0x80000000;
                  v44 = (_DWORD)v40 << 6;
                  v45 = (_DWORD)v41 << 6;
                  if ((int)v36 > 0x1FFFFFF || (int)v40 > 0x1FFFFFF || (int)v41 > 0x1FFFFFF || (int)v39 > 0x1FFFFFF)
                  {
                    if ((int)v39 >= 0x2000000)
                      v89 = 0x7FFFFFFF;
                    else
                      v89 = v43;
                    if ((int)v36 >= -33554432)
                      v90 = (_DWORD)v36 << 6;
                    else
                      v90 = 0x80000000;
                    if ((int)v36 > 0x1FFFFFF)
                      v90 = 0x7FFFFFFF;
                    if ((int)v40 < -33554432)
                      v44 = 0x80000000;
                    if ((int)v40 > 0x1FFFFFF)
                      v44 = 0x7FFFFFFF;
                    if ((int)v41 < -33554432)
                      v45 = 0x80000000;
                    if ((int)v41 > 0x1FFFFFF)
                      v45 = 0x7FFFFFFF;
                    if (v44 < 1 || v45 <= 0)
                      goto LABEL_127;
                    v91 = __OFADD__(v89, v44);
                    v92 = v89 + v44;
                    v93 = __OFADD__(v89, v44);
                    v94 = v89 + v44;
                    if (v91)
                      v94 = (v89 >> 31) + 0x7FFFFFFF;
                    if (v14 < v94)
                    {
                      v95 = v14 + 62720;
                      v96 = __OFADD__(v14, 62720);
                      v97 = v14 + 62720;
                      if (__OFADD__(v14, 62720))
                        v97 = 0x7FFFFFFF;
                      if (v89 < v97)
                      {
                        v98 = v90 + v45;
                        v99 = __OFADD__(v90, v45);
                        v100 = v90 + v45;
                        if (__OFADD__(v90, v45))
                          v100 = (v90 >> 31) + 0x7FFFFFFF;
                        if (v100 >= 1 && v90 < 41600)
                        {
                          v101 = v92;
                          if (v93)
                            v101 = (v89 >> 31) + 0x7FFFFFFF;
                          if (v14 < v101)
                          {
                            if (v96)
                              v95 = 0x7FFFFFFF;
                            if (v89 < v95)
                            {
                              if (v99)
                                v98 = (v90 >> 31) + 0x7FFFFFFF;
                              if (v98 >= 41601)
                                goto LABEL_88;
                            }
                          }
                        }
                      }
                    }
                    if (v93)
                      v92 = (v89 >> 31) + 0x7FFFFFFF;
                    if (v14 >= v92)
                      goto LABEL_127;
                    v102 = v14 + 62720;
                    if (__OFADD__(v14, 62720))
                      v102 = 0x7FFFFFFF;
                    if (v89 >= v102)
                      goto LABEL_127;
                    v103 = v90 + v45;
                    if (__OFADD__(v90, v45))
                      v103 = (v90 >> 31) + 0x7FFFFFFF;
                    if (v103 < 1 || v90 > 41599)
                    {
LABEL_127:
                      v71 = (WebCore::Page *)((char *)this + 720);
LABEL_128:
                      v104 = v42;
                      v105 = v40 | (v41 << 32);
LABEL_129:
                      v106 = 0;
                      WebCore::Region::unite(v71, (const WebCore::Region *)&v104);
                      v75 = v106;
                      v106 = 0;
                      if (v75)
                      {
                        v76 = (WTF *)*((_QWORD *)v75 + 18);
                        if ((WTF *)((char *)v75 + 160) != v76 && v76)
                        {
                          *((_QWORD *)v75 + 18) = 0;
                          *((_DWORD *)v75 + 38) = 0;
                          WTF::fastFree(v76, v74);
                        }
                        v77 = *(WTF **)v75;
                        if ((WTF *)((char *)v75 + 16) != *(WTF **)v75 && v77)
                        {
                          *(_QWORD *)v75 = 0;
                          *((_DWORD *)v75 + 2) = 0;
                          WTF::fastFree(v77, v74);
                        }
                        WTF::fastFree(v75, v74);
                      }
                      v78 = (float)(unint64_t)WebCore::Region::totalArea((WebCore::Page *)((char *)this + 696), v74);
                      v80 = WebCore::Region::totalArea((WebCore::Page *)((char *)this + 720), v79);
                      v82 = WebCore::Region::totalArea((WebCore::Page *)((char *)this + 744), v81);
                      if ((float)(v78 / 1274000.0) > 0.05
                        && (float)((float)(unint64_t)v80 / 1274000.0) > 0.05
                        && (float)((float)(unint64_t)v82 / 1274000.0) < 0.04)
                      {
                        *((_BYTE *)this + 768) = 0;
                        WebCore::Page::resetRelevantPaintedObjectCounter(this, v83);
                        v84 = *((_QWORD *)this + 20);
                        if (v84)
                        {
                          if (!*(_BYTE *)(v84 + 144))
                          {
                            v85 = (unsigned int *)(v84 + 8);
                            do
                              v86 = __ldaxr(v85);
                            while (__stlxr(v86 + 1, v85));
                            v87 = *(_DWORD **)(v84 + 280);
                            ++*v87;
                            WebCore::FrameLoader::didReachLayoutMilestone((uint64_t)v87, 4u);
                            if (!*v87)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1960216F0);
                            }
                            --*v87;
                            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v85);
                          }
                        }
                      }
                      return;
                    }
                  }
                  else
                  {
                    if ((int)v36 >= -33554432)
                      v46 = (_DWORD)v36 << 6;
                    else
                      v46 = 0x80000000;
                    if ((int)v40 >= -33554432)
                      v47 = (_DWORD)v40 << 6;
                    else
                      v47 = 0x80000000;
                    if ((int)v41 < -33554432)
                      v45 = 0x80000000;
                    if (v47 < 1 || v45 < 1)
                      goto LABEL_127;
                    v48 = __OFADD__(v43, v47);
                    v49 = v43 + v47;
                    v50 = v48;
                    v51 = v49;
                    if (v48)
                      v51 = (v43 >> 31) + 0x7FFFFFFF;
                    if (v14 < v51)
                    {
                      v52 = v14 + 62720;
                      v53 = __OFADD__(v14, 62720);
                      v54 = v14 + 62720;
                      if (__OFADD__(v14, 62720))
                        v54 = 0x7FFFFFFF;
                      if ((int)v43 < v54)
                      {
                        v55 = v46 + v45;
                        v56 = __OFADD__(v46, v45);
                        v57 = v46 + v45;
                        if (__OFADD__(v46, v45))
                          v57 = (v46 >> 31) + 0x7FFFFFFF;
                        if (v57 >= 1 && v46 <= 41599)
                        {
                          v58 = v49;
                          if (v50)
                            v58 = (v43 >> 31) + 0x7FFFFFFF;
                          if (v14 < v58)
                          {
                            if (v53)
                              v52 = 0x7FFFFFFF;
                            if ((int)v43 < v52)
                            {
                              if (v56)
                                v55 = (v46 >> 31) + 0x7FFFFFFF;
                              if (v55 >= 41601)
                              {
LABEL_88:
                                if ((int)v39 <= (int)v15)
                                  v59 = (((v14 & 0x20u) + 32) >> 6) + (v14 >> 6);
                                else
                                  v59 = v39;
                                if ((int)(v15 + 980) >= (int)v40 + (int)v39)
                                  v60 = v40 + v39;
                                else
                                  v60 = v15 + 980;
                                if ((int)v41 + (int)v36 >= 650)
                                  v61 = 650;
                                else
                                  v61 = v41 + v36;
                                if (v59 >= v60 || (v62 = v36 & ~((int)v36 >> 31), v62 >= v61))
                                {
                                  v63 = 0;
                                  v62 = 0;
                                  v64 = 0;
                                  v61 = 0;
                                }
                                else
                                {
                                  v63 = v59;
                                  v64 = v60;
                                }
                                v104 = __PAIR64__(v62, v63);
                                LODWORD(v105) = v64 - v63;
                                HIDWORD(v105) = v61 - v62;
                                v106 = 0;
                                WebCore::Region::unite((WebCore::Page *)((char *)this + 696), (const WebCore::Region *)&v104);
                                v66 = v106;
                                v106 = 0;
                                if (v66)
                                {
                                  v67 = (WTF *)*((_QWORD *)v66 + 18);
                                  if ((WTF *)((char *)v66 + 160) != v67 && v67)
                                  {
                                    *((_QWORD *)v66 + 18) = 0;
                                    *((_DWORD *)v66 + 38) = 0;
                                    WTF::fastFree(v67, v65);
                                  }
                                  v68 = *(WTF **)v66;
                                  if ((WTF *)((char *)v66 + 16) != *(WTF **)v66 && v68)
                                  {
                                    *(_QWORD *)v66 = 0;
                                    *((_DWORD *)v66 + 2) = 0;
                                    WTF::fastFree(v68, v65);
                                  }
                                  WTF::fastFree(v66, v65);
                                }
                                if ((int)v36 <= 650)
                                  v69 = 650;
                                else
                                  v69 = v36;
                                if ((int)v41 + (int)v36 >= 1300)
                                  v70 = 1300;
                                else
                                  v70 = v41 + v36;
                                if (v59 >= v60 || v69 >= v70)
                                {
                                  v59 = 0;
                                  v69 = 0;
                                  v60 = 0;
                                  v70 = 0;
                                }
                                v71 = (WebCore::Page *)((char *)this + 720);
                                v104 = __PAIR64__(v69, v59);
                                LODWORD(v105) = v60 - v59;
                                HIDWORD(v105) = v70 - v69;
                                goto LABEL_129;
                              }
                            }
                          }
                        }
                      }
                    }
                    if (v50)
                      v49 = (v43 >> 31) + 0x7FFFFFFF;
                    if (v14 >= v49)
                      goto LABEL_127;
                    v72 = v14 + 62720;
                    if (__OFADD__(v14, 62720))
                      v72 = 0x7FFFFFFF;
                    if ((int)v43 >= v72)
                      goto LABEL_127;
                    v73 = v46 + v45;
                    if (__OFADD__(v46, v45))
                      v73 = (v46 >> 31) + 0x7FFFFFFF;
                    if (v73 < 1 || v46 > 41599)
                      goto LABEL_127;
                  }
                  v71 = (WebCore::Page *)((char *)this + 696);
                  goto LABEL_128;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WTF::WeakHashSet<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderObject>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  WTF *v9;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v18;
  int v19;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v8 = v7;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v8;
      goto LABEL_6;
    }
    v11 = *(_DWORD *)(v6 - 4);
    if (!v11)
      goto LABEL_25;
    v12 = 0;
    v13 = v11 - 1;
    do
    {
      v14 = v13;
      v15 = *(WTF **)(v6 + 8 * v13);
      if ((unint64_t)v15 + 1 >= 2 && !*((_QWORD *)v15 + 1))
      {
        *(_QWORD *)(v6 + 8 * v13) = 0;
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, a2);
        else
          --*(_DWORD *)v15;
        *(_QWORD *)(v6 + 8 * v13) = -1;
        ++v12;
      }
      --v13;
    }
    while (v14);
    v6 = *(_QWORD *)a1;
    if (v12)
    {
      *(_DWORD *)(v6 - 16) += v12;
      v18 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v19 = *(_DWORD *)(v18 - 12);
      else
        v19 = 0;
      *(_DWORD *)(v18 - 12) = v19 - v12;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v16 = *(_DWORD *)(v6 - 4);
    if (v16 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v16)
    {
LABEL_25:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_4;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v9 = (WTF *)a2[1];
  if (v9 && *((_QWORD *)v9 + 1))
    return WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((uint64_t *)a1, v9);
  else
    return 0;
}

WTF *WTF::WeakHashSet<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderObject>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WTF *v11;
  void *v12;
  WTF *result;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  void *v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  WTF *v25;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_3:
      v9 = 0;
      a2[2] = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      a2[3] = 2 * v10;
      goto LABEL_6;
    }
    v14 = *(_DWORD *)(v8 - 4);
    if (!v14)
      goto LABEL_26;
    v15 = 0;
    v16 = v14 - 1;
    do
    {
      v17 = v16;
      v18 = *(WTF **)(v8 + 8 * v16);
      if ((unint64_t)v18 + 1 >= 2 && !*((_QWORD *)v18 + 1))
      {
        *(_QWORD *)(v8 + 8 * v16) = 0;
        if (*(_DWORD *)v18 == 1)
          WTF::fastFree(v18, a2);
        else
          --*(_DWORD *)v18;
        *(_QWORD *)(v8 + 8 * v16) = -1;
        ++v15;
      }
      --v16;
    }
    while (v17);
    v8 = *(_QWORD *)a2;
    if (v15)
    {
      *(_DWORD *)(v8 - 16) += v15;
      v23 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v24 = *(_DWORD *)(v23 - 12);
      else
        v24 = 0;
      *(_DWORD *)(v23 - 12) = v24 - v15;
      v8 = *(_QWORD *)a2;
    }
    if (!v8)
      goto LABEL_3;
    v19 = *(_DWORD *)(v8 - 4);
    if (v19 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v19)
    {
LABEL_26:
      a2[2] = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      v8 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = *(WTF **)(a3 + 8);
  if (!v11)
  {
    v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *((_QWORD *)v11 + 1) = a3;
    v22 = *(WTF **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v11;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, v21);
        v11 = *(WTF **)(a3 + 8);
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  *(_DWORD *)v11 += 2;
  v25 = v11;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a2, &v25, a1);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v11 == 1)
    return (WTF *)WTF::fastFree(v11, v12);
  --*(_DWORD *)v11;
  return result;
}

uint64_t WebCore::Page::suspendActiveDOMObjectsAndAnimations(uint64_t this, uint64_t a2, WebCore::Document *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(this + 160);
  if (v3)
  {
    do
    {
      if (!*(_BYTE *)(v3 + 144))
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        WebCore::LocalFrame::suspendActiveDOMObjectsAndAnimations((unsigned int *)v3, a2, a3);
        do
        {
          v6 = __ldaxr(v4);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v4));
        if (!v7)
        {
          atomic_store(1u, v4);
          v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v8 = off_1E31FE290;
          v8[1] = v4;
          v9 = v8;
          WTF::ensureOnMainThread();
          if (v9)
            (*(void (**)(_QWORD *))(*v9 + 8))(v9);
        }
      }
      this = WebCore::FrameTree::traverseNext((_QWORD *)(v3 + 48), 0);
      v3 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebCore::Page::resumeActiveDOMObjectsAndAnimations(WebCore::Page *this)
{
  uint64_t i;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v9;

  for (i = *((_QWORD *)this + 20); i; i = WebCore::FrameTree::traverseNext((_QWORD *)(i + 48), 0))
  {
    if (!*(_BYTE *)(i + 144))
    {
      v3 = (unsigned int *)(i + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      WebCore::LocalFrame::resumeActiveDOMObjectsAndAnimations((WebCore::LocalFrame *)i);
      do
      {
        v5 = __ldaxr(v3);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v3));
      if (!v6)
      {
        atomic_store(1u, v3);
        v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v7 = off_1E31FE290;
        v7[1] = v3;
        v9 = v7;
        WTF::ensureOnMainThread();
        if (v9)
          (*(void (**)(_QWORD *))(*v9 + 8))(v9);
      }
    }
  }
  return WebCore::Page::resumeAnimatingImages((uint64_t)this);
}

BOOL WebCore::Page::hasSeenAnyPlugin(WebCore::Page *this)
{
  return *((_DWORD *)this + 207) != 0;
}

uint64_t WebCore::Page::captionPreferencesChanged(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3401128;
  v11 = (uint64_t)v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v12 = v9;
    WTF::ensureOnMainThread();
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

BOOL WebCore::Page::areSynchronousLoadsAllowed(WebCore::Page *this)
{
  return *((_DWORD *)this + 218) == 0;
}

uint64_t std::optional<WebCore::Page::Navigation>::operator=[abi:sn180100]<WebCore::Page::Navigation&,void>(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;

  v4 = *(_DWORD **)a2;
  if (*(_BYTE *)(a1 + 16))
  {
    if (v4)
      *v4 += 2;
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  }
  else
  {
    if (v4)
      *v4 += 2;
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WebCore::Page::userContentProvider(WebCore::Page *this)
{
  return *((_QWORD *)this + 117);
}

uint64_t WebCore::Page::notifyToInjectUserScripts(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v4;

  *((_BYTE *)this + 1685) = 1;
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3401150;
  v4 = v2;
  WebCore::Page::forEachLocalFrame((uint64_t)this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::Page::setUserContentProvider(WebCore::Page *a1, _DWORD **a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _BYTE v8[24];

  v4 = (_DWORD *)*((_QWORD *)a1 + 117);
  ++v4[2];
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(v4 + 4), a1);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  v5 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)*((_QWORD *)a1 + 117);
  *((_QWORD *)a1 + 117) = v5;
  if (v6)
  {
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      v5 = (_DWORD *)*((_QWORD *)a1 + 117);
    }
    else
    {
      --v6[2];
    }
  }
  ++v5[2];
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>((uint64_t)(v5 + 4), a1, (uint64_t)v8);
  if (v5[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  else
    --v5[2];
  return WebCore::Page::invalidateInjectedStyleSheetCacheInAllFrames(a1);
}

uint64_t WebCore::Page::setVisitedLinkStore(WebCore::Page *a1, _DWORD **a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _BYTE v8[24];

  v4 = (_DWORD *)*((_QWORD *)a1 + 119);
  ++v4[2];
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(v4 + 4), a1);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  v5 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)*((_QWORD *)a1 + 119);
  *((_QWORD *)a1 + 119) = v5;
  if (v6)
  {
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      v5 = (_DWORD *)*((_QWORD *)a1 + 119);
    }
    else
    {
      --v6[2];
    }
  }
  ++v5[2];
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>((uint64_t)(v5 + 4), a1, (uint64_t)v8);
  if (v5[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  else
    --v5[2];
  return WebCore::Page::invalidateStylesForAllLinks(a1);
}

unint64_t WebCore::Page::noiseInjectionHashSaltForDomain(uint64_t a1, WTF **a2, const WTF::StringImpl *a3)
{
  char v5;
  uint64_t v6;
  const WTF::String *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  _QWORD *v17;
  int v18;
  WTF *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  if (*a2 == (WTF *)-1)
  {
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v5 = WTF::equal(*a2, 0, a3);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    if ((v5 & 1) == 0)
    {
      v9 = (uint64_t *)(a1 + 1832);
      v10 = *(_QWORD *)(a1 + 1832);
      if (v10
        || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned long long>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,unsigned long long,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)(a1 + 1832), 8u, 0), (v10 = *v9) != 0))
      {
        v11 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        v11 = 0;
      }
      v12 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)a2, v7) & v11;
      v13 = v10 + 16 * v12;
      if ((WTF::equal(*(WTF **)v13, 0, v14) & 1) == 0)
      {
        v17 = 0;
        v18 = 1;
        do
        {
          if (*(_QWORD *)v13 == -1)
          {
            v17 = (_QWORD *)v13;
          }
          else if ((WTF::equalIgnoringASCIICase(*(WTF **)v13, *a2, v16) & 1) != 0)
          {
            goto LABEL_34;
          }
          v12 = (v12 + v18) & v11;
          v13 = v10 + 16 * v12;
          ++v18;
        }
        while (!WTF::equal(*(WTF **)v13, 0, v16));
        if (v17)
        {
          *v17 = 0;
          v17[1] = 0;
          --*(_DWORD *)(*v9 - 16);
          v13 = (uint64_t)v17;
        }
      }
      v19 = *a2;
      if (*a2)
        *(_DWORD *)v19 += 2;
      v20 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v15);
        else
          *(_DWORD *)v20 -= 2;
      }
      *(_QWORD *)(v13 + 8) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v21 = *v9;
      if (*v9)
        v22 = *(_DWORD *)(v21 - 12) + 1;
      else
        v22 = 1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v9;
      if (*v9)
        v24 = *(_DWORD *)(v23 - 12);
      else
        v24 = 0;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25)
          goto LABEL_34;
      }
      else
      {
        if (3 * v26 > 4 * v25)
        {
LABEL_34:
          v8 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFF00;
          v6 = *(_QWORD *)(v13 + 8);
          return v8 | v6;
        }
        if (!(_DWORD)v26)
        {
          v27 = 8;
          goto LABEL_33;
        }
      }
      v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_33:
      v13 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,unsigned long long>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,unsigned long long,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v9, v27, (WTF **)v13);
      goto LABEL_34;
    }
  }
  return v8 | v6;
}

uint64_t WebCore::Page::sessionID(WebCore::Page *this)
{
  return *((_QWORD *)this + 126);
}

uint64_t WebCore::Page::setSessionID(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::IDBClient::IDBConnectionProxy *v26;
  bmalloc::api *v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;

  v3 = result;
  if (*(_QWORD *)(result + 1008) != a2)
  {
    v4 = *(_QWORD *)(result + 808);
    *(_QWORD *)(result + 808) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        v26 = *(WebCore::IDBClient::IDBConnectionProxy **)(v4 + 24);
        *(_QWORD *)(v4 + 24) = 0;
        if (v26)
        {
          WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v26, (void *)a2);
          bmalloc::api::isoDeallocate(v27, v28);
        }
        v29 = *(unsigned int **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v29)
        {
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            atomic_store(1u, v29);
            WTF::fastFree((WTF *)v29, (void *)a2);
          }
        }
        result = bmalloc::api::isoDeallocate((bmalloc::api *)v4, (void *)a2);
      }
    }
  }
  if (*(_QWORD *)(v3 + 1008) == a2)
    goto LABEL_20;
  v7 = *(_QWORD *)(v3 + 160);
  if (v7 && *(_BYTE *)(v7 + 144) == 0)
  {
    WebCore::Document::topOrigin(*(WebCore::Document **)(v7 + 296), (WTF::StringImpl *)a2);
    v9 = v10;
  }
  else
  {
    v9 = *(_QWORD *)(v3 + 208);
    if (!v9)
      goto LABEL_20;
  }
  do
    v11 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v11 + 1, (unsigned int *)v9));
  (*(void (**)(_QWORD **__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v3 + 928) + 16))(&v35, *(_QWORD *)(v3 + 928), v9, v3, 0);
  result = (uint64_t)v35;
  if (v35)
  {
    (*(void (**)(_QWORD *, unint64_t))(*v35 + 48))(v35, a2);
    result = (uint64_t)v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  do
  {
    v13 = __ldaxr((unsigned int *)v9);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v9));
  if (v14)
  {
LABEL_20:
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_21;
LABEL_36:
    v19 = *(_QWORD *)(v3 + 1008);
    if (v19 < 0)
    {
      *(_QWORD *)(v3 + 1008) = a2;
      if ((a2 != -1) == (v19 != -1))
        return result;
    }
    else
    {
      *(_QWORD *)(v3 + 1008) = a2;
      if (a2 == -1)
        return result;
    }
    goto LABEL_38;
  }
  atomic_store(1u, (unsigned int *)v9);
  v16 = *(WTF::StringImpl **)(v9 + 48);
  *(_QWORD *)(v9 + 48) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(WTF::StringImpl **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(unsigned int *)(v9 + 32);
  if ((_DWORD)v18 != -1)
    ((void (*)(_QWORD **, uint64_t))off_1E3400668[v18])(&v35, v9 + 8);
  *(_DWORD *)(v9 + 32) = -1;
  result = WTF::fastFree((WTF *)v9, v12);
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_36;
LABEL_21:
  v15 = *(_QWORD *)(v3 + 1008);
  if ((v15 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(v3 + 1008) = a2;
    return result;
  }
  *(_QWORD *)(v3 + 1008) = a2;
  if (v15 != -1)
  {
LABEL_38:
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E3401178;
    v20[1] = v3;
    v34 = v20;
    v21 = *(_QWORD *)(v3 + 160);
    v22 = (unsigned int *)(v21 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    WebCore::Page::forEachDocumentFromMainFrame(v21, &v34);
    do
    {
      v24 = __ldaxr(v22);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v22));
    if (!v25)
    {
      atomic_store(1u, v22);
      v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v32 = off_1E31FE290;
      v32[1] = v22;
      v35 = v32;
      WTF::ensureOnMainThread();
      v33 = v35;
      v35 = 0;
      if (v33)
        (*(void (**)(_QWORD *))(*v33 + 8))(v33);
    }
    result = (uint64_t)v34;
    if (v34)
      return (*(uint64_t (**)(_QWORD *))(*v34 + 8))(v34);
  }
  return result;
}

uint64_t WebCore::Page::setMockMediaPlaybackTargetPickerEnabled(WebCore::Page *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 1560))(*(_QWORD *)(*((_QWORD *)this + 6) + 16));
}

uint64_t WebCore::Page::setMockMediaPlaybackTargetPickerState(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 16) + 1568))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16));
}

uint64_t WebCore::Page::mockMediaPlaybackTargetPickerDismissPopup(WebCore::Page *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 1576))(*(_QWORD *)(*((_QWORD *)this + 6) + 16));
}

uint64_t WebCore::Page::setPlaybackTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v15 = a2;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E34011A0;
  v5[1] = &v15;
  v5[2] = a3;
  v14 = v5;
  v6 = *(_QWORD *)(a1 + 160);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebCore::Page::forEachDocumentFromMainFrame(v6, &v14);
  do
  {
    v9 = __ldaxr(v7);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v7));
  if (!v10)
  {
    atomic_store(1u, v7);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v7;
    v16 = v12;
    WTF::ensureOnMainThread();
    v13 = v16;
    v16 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebCore::Page::playbackTargetAvailabilityDidChange(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;

  v15 = a2;
  v14 = a3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34011C8;
  v4[1] = &v15;
  v4[2] = &v14;
  v13 = v4;
  v5 = *(_QWORD *)(a1 + 160);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebCore::Page::forEachDocumentFromMainFrame(v5, &v13);
  do
  {
    v8 = __ldaxr(v6);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v6));
  if (!v9)
  {
    atomic_store(1u, v6);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v6;
    v16 = v11;
    WTF::ensureOnMainThread();
    v12 = v16;
    v16 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

uint64_t WebCore::Page::setShouldPlayToPlaybackTarget(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;

  v15 = a2;
  v14 = a3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34011F0;
  v4[1] = &v15;
  v4[2] = &v14;
  v13 = v4;
  v5 = *(_QWORD *)(a1 + 160);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebCore::Page::forEachDocumentFromMainFrame(v5, &v13);
  do
  {
    v8 = __ldaxr(v6);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v6));
  if (!v9)
  {
    atomic_store(1u, v6);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v6;
    v16 = v11;
    WTF::ensureOnMainThread();
    v12 = v16;
    v16 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

uint64_t WebCore::Page::playbackTargetPickerWasDismissed(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v13 = a2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3401218;
  v3[1] = &v13;
  v12 = v3;
  v4 = *(_QWORD *)(a1 + 160);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::Page::forEachDocumentFromMainFrame(v4, &v12);
  do
  {
    v7 = __ldaxr(v5);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v5));
  if (!v8)
  {
    atomic_store(1u, v5);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v5;
    v14 = v10;
    WTF::ensureOnMainThread();
    v11 = v14;
    v14 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  result = (uint64_t)v12;
  if (v12)
    return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  return result;
}

unsigned __int8 *WebCore::Page::clearWheelEventTestMonitor(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  void *v4;
  unsigned __int8 **v5;

  v2 = this;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 13);
  if (v3)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref(v3 + 1);
    (*((void (**)(unsigned __int8 **))*v3 + 61))(v3);
    this = (unsigned __int8 *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v3 + 1, v4);
  }
  v5 = (unsigned __int8 **)*((_QWORD *)v2 + 121);
  *((_QWORD *)v2 + 121) = 0;
  if (v5)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v5, a2);
  return this;
}

uint64_t WebCore::Page::startMonitoringWheelEvents(WebCore::Page *this, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned __int8 **v15;
  void *v16;

  v4 = *((_QWORD *)this + 121);
  if (!v4)
  {
    v4 = WTF::fastMalloc((WTF *)0x30);
    v5 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v5 = 0;
    *(_OWORD *)(v5 + 8) = xmmword_19689B170;
    *(_QWORD *)(v5 + 24) = v4;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = this;
    *(_BYTE *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 37) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    v6 = (unsigned __int8 **)*((_QWORD *)this + 121);
    *((_QWORD *)this + 121) = v4;
    if (v6)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v6, a2);
      v4 = *((_QWORD *)this + 121);
    }
  }
  v7 = (unsigned __int8 *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)(v4 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4 + 24);
LABEL_8:
  v9 = *(_QWORD *)(v4 + 32);
  if (v9)
  {
    *(_QWORD *)(v4 + 32) = 0;
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  result = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(v4 + 41) = 0;
  *(_WORD *)(v4 + 43) = 0;
  v11 = __ldxr(v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, v7))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 24));
LABEL_17:
  v12 = *((_QWORD *)this + 20);
  if (v12)
  {
    if (!*(_BYTE *)(v12 + 144))
    {
      v13 = *(_DWORD **)(v12 + 288);
      if (v13)
      {
        v14 = v13[2];
        v13[2] = v14 + 1;
        v15 = (unsigned __int8 **)*((_QWORD *)this + 13);
        if (v15)
        {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref(v15 + 1);
          (*((void (**)(unsigned __int8 **, void *))*v15 + 60))(v15, a2);
          (*((void (**)(unsigned __int8 **, _DWORD *))*v15 + 59))(v15, v13);
          result = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v15 + 1, v16);
          v14 = v13[2] - 1;
        }
        if (v14)
          v13[2] = v14;
        else
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
  }
  return result;
}

_BYTE *WebCore::Page::setAllowsMediaDocumentInlinePlayback(_BYTE *this, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;

  if (this[1088] != a2)
  {
    v2 = (uint64_t)this;
    this[1088] = a2;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3401240;
    v4 = v3;
    WebCore::Page::forEachMediaElement(v2, (uint64_t)&v4);
    this = v4;
    v4 = 0;
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

unsigned int *WebCore::Page::idbConnection(WebCore::Page *this)
{
  unsigned int *result;
  void *v3;
  unsigned int v4;
  WebCore::IDBClient::IDBConnectionProxy **v5;

  result = (unsigned int *)*((_QWORD *)this + 101);
  if (!result)
  {
    result = (unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 114) + 16))(*((_QWORD *)this + 114), *((_QWORD *)this + 126));
    do
      v4 = __ldaxr(result);
    while (__stlxr(v4 + 1, result));
    v5 = (WebCore::IDBClient::IDBConnectionProxy **)*((_QWORD *)this + 101);
    *((_QWORD *)this + 101) = result;
    if (v5)
    {
      WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref(v5, v3);
      return (unsigned int *)*((_QWORD *)this + 101);
    }
  }
  return result;
}

uint64_t WebCore::Page::optionalIDBConnection(WebCore::Page *this)
{
  return *((_QWORD *)this + 101);
}

uint64_t WebCore::Page::clearIDBConnection(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WebCore::IDBClient::IDBConnectionProxy *v5;
  bmalloc::api *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(this + 808);
  *(_QWORD *)(this + 808) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      v5 = *(WebCore::IDBClient::IDBConnectionProxy **)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      v8 = *(unsigned int **)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
  }
  return this;
}

WebCore::PageOverlay **WebCore::Page::setResourceUsageOverlayVisible(WebCore::Page *this, void *a2)
{
  WebCore::PageOverlay **result;
  WebCore::ResourceUsageOverlay *v4;
  WTF *v5;
  void *v6;

  result = (WebCore::PageOverlay **)*((_QWORD *)this + 125);
  if ((a2 & 1) == 0)
  {
    *((_QWORD *)this + 125) = 0;
    if (!result)
      return result;
LABEL_7:
    WebCore::ResourceUsageOverlay::~ResourceUsageOverlay(result, a2);
    return (WebCore::PageOverlay **)WTF::fastFree(v5, v6);
  }
  if (!result && (*(_QWORD *)(*((_QWORD *)this + 14) + 664) & 0x10) != 0)
  {
    v4 = (WebCore::ResourceUsageOverlay *)WTF::fastMalloc((WTF *)0x38);
    WebCore::ResourceUsageOverlay::ResourceUsageOverlay(v4, this);
    result = (WebCore::PageOverlay **)*((_QWORD *)this + 125);
    *((_QWORD *)this + 125) = v4;
    if (result)
      goto LABEL_7;
  }
  return result;
}

WebCore::InspectorPageAgent *WebCore::Page::accessibilitySettingsDidChange(WebCore::Page *this)
{
  WebCore::InspectorPageAgent *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::InspectorPageAgent *result;
  _QWORD *v10;
  _QWORD *v11;
  WebCore::InspectorPageAgent *v12;
  _QWORD *v13;

  v2 = (WebCore::InspectorPageAgent *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3401268;
  v12 = v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v12);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v4;
    v13 = v10;
    WTF::ensureOnMainThread();
    v11 = v13;
    v13 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  result = v12;
  if (v12)
    result = (WebCore::InspectorPageAgent *)(*(uint64_t (**)(WebCore::InspectorPageAgent *))(*(_QWORD *)v12 + 8))(v12);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    result = *(WebCore::InspectorPageAgent **)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 200);
    if (result)
      return (WebCore::InspectorPageAgent *)WebCore::InspectorPageAgent::defaultUserPreferencesDidChange(result);
  }
  return result;
}

uint64_t WebCore::Page::appearanceDidChange(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3401290;
  v11 = (uint64_t)v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v12 = v9;
    WTF::ensureOnMainThread();
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

WebCore::Page *WebCore::Page::setUseSystemAppearance(WebCore::Page *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((unsigned __int8 *)this + 450) != a2)
  {
    v2 = (uint64_t)this;
    *((_BYTE *)this + 450) = a2;
    WebCore::Page::appearanceDidChange(this);
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E34012E0;
    v4 = v3;
    WebCore::Page::forEachDocument(v2, &v4);
    return (WebCore::Page *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return this;
}

BOOL WebCore::Page::useDarkAppearance(WebCore::Page *this)
{
  uint64_t v1;
  BOOL v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v1 = *((_QWORD *)this + 20);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v4 = (unsigned int *)(v1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v1 + 288);
  if (!v6)
  {
    v17 = 0;
    goto LABEL_25;
  }
  ++*(_DWORD *)(v6 + 8);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v6 + 328) + 280)
                                                                       + 16)
                                                         + 896))(&v24);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v6 + 328) + 24);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 80) + 8) + 200);
        if (v20)
        {
          v9 = *(WTF::StringImpl **)(v20 + 136);
          if (v9)
          {
            if (*((_DWORD *)v9 + 1))
            {
              *(_DWORD *)v9 += 2;
              v21 = v24;
              v24 = v9;
              if (!v21)
              {
LABEL_13:
                v10 = WebCore::screenAtomData;
                if (*(_DWORD *)v9 == 2)
                  WTF::StringImpl::destroy(v9, v7);
                else
                  *(_DWORD *)v9 -= 2;
                if (v9 == (WTF::StringImpl *)v10)
                  goto LABEL_16;
LABEL_42:
                v17 = 0;
                goto LABEL_23;
              }
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v7);
              else
                *(_DWORD *)v21 -= 2;
            }
          }
        }
      }
    }
  }
  v9 = v24;
  if (v24)
    goto LABEL_13;
  v9 = *(WTF::StringImpl **)(v6 + 1040);
  if (v9)
  {
    *(_DWORD *)v9 += 2;
    goto LABEL_13;
  }
  if (WebCore::screenAtomData)
    goto LABEL_42;
LABEL_16:
  if (*((_BYTE *)this + 454))
  {
    v13 = *((unsigned __int8 *)this + 453);
  }
  else
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v1 + 280) + 88);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v12 + 1;
      if (*(_BYTE *)(v11 + 3529))
      {
        v17 = *(unsigned __int8 *)(v11 + 3529) == 2;
        if (v12)
          *(_DWORD *)(v11 + 24) = v12;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        goto LABEL_23;
      }
      if (v12)
        *(_DWORD *)(v11 + 24) = v12;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    }
    v13 = *((unsigned __int8 *)this + 452);
  }
  v17 = v13 != 0;
LABEL_23:
  if (*(_DWORD *)(v6 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  else
    --*(_DWORD *)(v6 + 8);
  do
  {
LABEL_25:
    v14 = __ldaxr(v4);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v4));
  if (!v15)
  {
    atomic_store(1u, v4);
    v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v22 = off_1E31FE290;
    *((_QWORD *)v22 + 1) = v4;
    v24 = v22;
    WTF::ensureOnMainThread();
    v23 = v24;
    v24 = 0;
    if (v23)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
  }
  return v17;
}

uint64_t WebCore::Page::setFullscreenInsets(uint64_t result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  float v5;
  float v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = result;
  v3 = 0;
  v4 = (_OWORD *)(result + 424);
  do
  {
    v5 = *(float *)((char *)a2 + v3);
    v6 = *(float *)((char *)v4 + v3);
    v7 = v5 != v6 || v3 == 12;
    v3 += 4;
  }
  while (!v7);
  if (v5 != v6)
  {
    *v4 = *a2;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3401308;
    v16 = v8;
    v9 = *(_QWORD *)(v2 + 160);
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    WebCore::Page::forEachDocumentFromMainFrame(v9, &v16);
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E31FE290;
      v14[1] = v10;
      v17 = v14;
      WTF::ensureOnMainThread();
      v15 = v17;
      v17 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
    result = (uint64_t)v16;
    if (v16)
      return (*(uint64_t (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return result;
}

uint64_t WebCore::Page::setFullscreenAutoHideDuration(uint64_t result, double a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  double v12;
  _QWORD *v13;

  v12 = a2;
  if (a2 != *(double *)(result + 440))
  {
    v2 = result;
    *(double *)(result + 440) = a2;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3401330;
    v3[1] = &v12;
    v11 = v3;
    v4 = *(_QWORD *)(v2 + 160);
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    WebCore::Page::forEachDocumentFromMainFrame(v4, &v11);
    do
    {
      v7 = __ldaxr(v5);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v5));
    if (!v8)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v5;
      v13 = v9;
      WTF::ensureOnMainThread();
      v10 = v13;
      v13 = 0;
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
    result = (uint64_t)v11;
    if (v11)
      return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return result;
}

uint64_t WebCore::Page::disableICECandidateFiltering(WebCore::Page *this)
{
  *((_BYTE *)this + 1094) = 0;
  return WebCore::RTCController::disableICECandidateFilteringForAllOrigins(*((WebCore::RTCController **)this + 38));
}

uint64_t WebCore::Page::enableICECandidateFiltering(WebCore::Page *this, WTF::StringImpl *a2)
{
  *((_BYTE *)this + 1094) = 1;
  return WebCore::RTCController::enableICECandidateFiltering(*((WebCore::RTCController **)this + 38), a2);
}

WebCore::PointerCaptureController::CapturingData *WebCore::Page::didChangeMainDocument(WebCore::RTCController **this, WebCore::Document *a2)
{
  WTF::StringImpl *v4;
  WebCore::PointerCaptureController::CapturingData *result;
  void *v6;
  unint64_t v7;
  WebCore::RTCController *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int i;
  uint64_t v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  WebCore::RTCController::reset(this[38], (WTF *)*((unsigned __int8 *)this + 1094));
  result = WebCore::PointerCaptureController::reset(this[11], v4);
  if (*((_BYTE *)this + 1712))
  {
    v7 = (unint64_t)this[213];
    if ((v7 & 0x8000000000000) != 0)
    {
      v22 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v6);
      }
    }
    *((_BYTE *)this + 1712) = 0;
    result = (WebCore::PointerCaptureController::CapturingData *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this[6] + 2) + 568))(*((_QWORD *)this[6] + 2));
  }
  v8 = this[12];
  v9 = *(_DWORD *)v8;
  v10 = *(_DWORD *)v8 + 1;
  *(_DWORD *)v8 = v10;
  if (a2)
  {
    ++*((_DWORD *)v8 + 22);
    v11 = *((_QWORD *)a2 + 2);
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_17;
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v13 = *((_QWORD *)v8 + 10);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 - 8);
        v15 = (v12 + ~(v11 << 32)) ^ ((unint64_t)(v12 + ~(v11 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        for (i = 1; ; ++i)
        {
          v20 = *(_QWORD *)(v13 + 8 * v18);
          if (!v20)
            break;
          if (v20 != -1 && v20 == v12)
          {
            LOBYTE(v12) = 1;
            goto LABEL_17;
          }
          v18 = (v18 + i) & v14;
        }
      }
    }
  }
  LOBYTE(v12) = 0;
LABEL_17:
  *((_BYTE *)v8 + 277) = v12;
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x196023598);
  }
  *(_DWORD *)v8 = v9;
  return result;
}

uint64_t WebCore::Page::checkedElementTargetingController@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 96);
  *a2 = v2;
  ++*v2;
  return this;
}

uint64_t WebCore::Page::forEachDocumentFromMainFrame(uint64_t result, _QWORD *a2)
{
  unsigned int v3;
  unint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = 0;
  LODWORD(v4) = 0;
  v5 = 0;
  while (1)
  {
    do
    {
LABEL_2:
      v6 = (_QWORD *)result;
      if (!*(_BYTE *)(result + 144))
      {
        v7 = *(_QWORD *)(result + 296);
        if (v7)
        {
          v8 = v3;
          if (v3 == (_DWORD)v4)
          {
            v9 = v3 + ((unint64_t)v3 >> 2);
            if (v9 >= 0x10)
              v10 = v9 + 1;
            else
              v10 = 16;
            if (v10 <= (unint64_t)v3 + 1)
              v4 = v3 + 1;
            else
              v4 = v10;
            if (v4 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v11 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
            memcpy(v11, v5, 8 * v3);
            if (v5)
            {
              if (v11 == v5)
              {
                v11 = 0;
                LODWORD(v4) = 0;
              }
              WTF::fastFree((WTF *)v5, a2);
            }
            v5 = v11;
          }
          ++v3;
          *(_DWORD *)(v7 + 24) += 2;
          *((_QWORD *)v5 + v8) = v7;
        }
      }
      result = v6[11];
    }
    while (result);
    v12 = *(_QWORD *)(v6[6] + 8);
    if (!v12)
      break;
    result = v6[9];
    if (!result)
    {
      while (1)
      {
        v13 = *(_QWORD *)(v12 + 56);
        if (!v13)
          goto LABEL_25;
        v12 = *(_QWORD *)(v13 + 8);
        if (!v12)
          goto LABEL_25;
        result = *(_QWORD *)(v12 + 72);
        if (result)
          goto LABEL_2;
      }
    }
  }
LABEL_25:
  if (v3)
  {
    v14 = 8 * v3;
    v15 = v14;
    v16 = (uint64_t *)v5;
    do
    {
      v17 = *v16++;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v17);
      v15 -= 8;
    }
    while (v15);
    v18 = (uint64_t *)v5;
    do
    {
      result = *v18;
      *v18 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      ++v18;
      v14 -= 8;
    }
    while (v14);
  }
  if (v5)
    return WTF::fastFree((WTF *)v5, a2);
  return result;
}

BOOL WebCore::Page::hasLocalDataForURL(WebCore::Page *this, const WTF::URL *a2)
{
  const WTF::StringImpl *v4;
  _BOOL8 v5;
  uint64_t v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int v9;
  _DWORD *v10;
  __int128 *v11;
  int v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  _DWORD *v27;

  if ((WTF::URL::protocolIs() & 1) != 0)
    return 1;
  v6 = *((_QWORD *)this + 20);
  if (v6)
    v7 = *(_BYTE *)(v6 + 144) == 0;
  else
    v7 = 0;
  if (!v7)
    return 0;
  v8 = (unsigned int *)(v6 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_DWORD **)(*(_QWORD *)(v6 + 280) + 88);
  if (v10)
  {
    ++v10[6];
    v11 = (__int128 *)((char *)a2 + 8);
    v12 = *((_DWORD *)a2 + 2);
    v13 = *(WTF::StringImpl **)a2;
    if ((v12 & 1) != 0)
    {
      if (!v13)
      {
LABEL_15:
        v24 = v13;
        v14 = *(_OWORD *)((char *)a2 + 24);
        v25 = *v11;
        v26 = v14;
LABEL_16:
        WebCore::DocumentLoader::subresource((uint64_t)v10, &v24, v4, (uint64_t *)&v27);
        v16 = v27;
        v5 = v27 != 0;
        v27 = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        v17 = v24;
        v24 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v15);
          else
            *(_DWORD *)v17 -= 2;
        }
        if (v10[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
        else
          --v10[6];
        goto LABEL_24;
      }
      if (*((_DWORD *)v13 + 1) > *((_DWORD *)a2 + 9) && (v12 & 2) != 0)
      {
        *(_DWORD *)v13 += 2;
        v24 = v13;
        v21 = *(_OWORD *)((char *)a2 + 24);
        v25 = *v11;
        v26 = v21;
        WTF::URL::removeFragmentIdentifier((WTF::URL *)&v24);
        goto LABEL_16;
      }
    }
    else if (!v13)
    {
      goto LABEL_15;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_15;
  }
  v5 = 0;
  do
  {
LABEL_24:
    v18 = __ldaxr(v8);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v8));
  if (!v19)
  {
    atomic_store(1u, v8);
    v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v22 = off_1E31FE290;
    *((_QWORD *)v22 + 1) = v8;
    v24 = v22;
    WTF::ensureOnMainThread();
    v23 = v24;
    v24 = 0;
    if (v23)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
  }
  return v5;
}

uint64_t WebCore::Page::applicationWillResignActive(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3401380;
  v4 = (uint64_t)v2;
  WebCore::Page::forEachMediaElement((uint64_t)this, (uint64_t)&v4);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::Page::applicationDidEnterBackground(WebCore::Page *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 37) + 16))(*((_QWORD *)this + 37), 0);
}

uint64_t WebCore::Page::applicationWillEnterForeground(WebCore::Page *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 37) + 16))(*((_QWORD *)this + 37), 1);
}

uint64_t WebCore::Page::dispatchBeforePrintEvent(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 20);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  return WebCore::dispatchPrintEvent(v1, (WTF::StringImpl **)(v4 + 264), 0);
}

uint64_t WebCore::dispatchPrintEvent(uint64_t a1, WTF::StringImpl **a2, char a3)
{
  unsigned int v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  WTF::StringImpl *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  _QWORD *v45;

  v6 = 0;
  LODWORD(v7) = 0;
  v8 = 0;
  do
  {
    if (!*(_BYTE *)(a1 + 144))
    {
      v9 = v6;
      if (v6 == (_DWORD)v7)
      {
        v10 = v6 + ((unint64_t)v6 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= (unint64_t)v6 + 1)
          v7 = v6 + 1;
        else
          v7 = v11;
        if (v7 >> 29)
        {
          __break(0xC471u);
LABEL_86:
          JUMPOUT(0x196023EDCLL);
        }
        v12 = (char *)WTF::fastMalloc((WTF *)(8 * v7));
        memcpy(v12, v8, 8 * v6);
        if (v8)
        {
          if (v12 == v8)
          {
            v12 = 0;
            LODWORD(v7) = 0;
          }
          WTF::fastFree((WTF *)v8, v13);
        }
        v8 = v12;
        v14 = (unsigned int *)(a1 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        *(_QWORD *)&v12[8 * v6++] = a1;
      }
      else
      {
        ++v6;
        v16 = (unsigned int *)(a1 + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        *(_QWORD *)&v8[8 * v9] = a1;
      }
    }
    result = WebCore::FrameTree::traverseNext((_QWORD *)(a1 + 48), 0);
    a1 = result;
  }
  while (result);
  if (!v6)
    goto LABEL_74;
  if ((a3 & 1) != 0)
  {
    v20 = 8 * v6;
    v21 = v8;
    while (1)
    {
      v22 = *(_QWORD *)(*(_QWORD *)v21 + 296);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 696);
        if (v23)
        {
          ++*(_DWORD *)(v23 + 24);
          v24 = *a2;
          if (*a2)
            *(_DWORD *)v24 += 2;
          *(_DWORD *)(v22 + 24) += 2;
          v25 = WebCore::Document::eventLoop((WebCore::Document *)v22, v19);
          ++*(_DWORD *)(v25 + 8);
          v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v26 = &off_1E3400620;
          v26[1] = v23;
          if (v24)
            *(_DWORD *)v24 += 2;
          v26[2] = v24;
          v45 = v26;
          WebCore::EventLoopTaskGroup::queueTask(v25, 0, (uint64_t *)&v45);
          result = (uint64_t)v45;
          v45 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v27 = *(_DWORD *)(v25 + 8);
          if (!v27)
          {
            __break(0xC471u);
            goto LABEL_86;
          }
          *(_DWORD *)(v25 + 8) = v27 - 1;
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v22, v19);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              result = WTF::StringImpl::destroy(v24, v19);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
      }
      v21 += 8;
      v20 -= 8;
      if (!v20)
        goto LABEL_65;
    }
  }
  v28 = 8 * v6;
  v29 = v8;
  while (1)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v29 + 296);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 696);
      if (v31)
        break;
    }
    v29 += 8;
    v28 -= 8;
    if (!v28)
      goto LABEL_65;
  }
  ++*(_DWORD *)(v31 + 24);
  v32 = *a2;
  if (v32)
    *(_DWORD *)v32 += 2;
  v33 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v33);
  *(_QWORD *)v33 = off_1E33A4B48;
  *(_QWORD *)(v33 + 8) = 0;
  v35 = *(_DWORD *)(v33 + 20) & 0xFFC00000 | (v32 != 0) | 0x1E8200;
  *(_DWORD *)(v33 + 16) = 1;
  *(_DWORD *)(v33 + 20) = v35;
  if (v32)
    *(_DWORD *)v32 += 2;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 48) = 0;
  *(_QWORD *)(v33 + 56) = v34;
  *(_QWORD *)(v33 + 64) = 0;
  v36 = *(_QWORD *)(v31 + 72);
  if (v36 && (v37 = *(_QWORD *)(v36 + 8)) != 0)
  {
    if (*(_BYTE *)(v37 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x196023EFCLL);
    }
    *(_DWORD *)(v37 - 264) += 2;
    result = (uint64_t)WebCore::LocalDOMWindow::dispatchEvent((WebCore::LocalDOMWindow *)v31, (WebCore::Event *)v33, (WebCore::EventTarget *)(v37 - 288));
    if (*(_DWORD *)(v37 - 264) == 2)
    {
      if ((*(_WORD *)(v37 - 258) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v37 - 288), v19);
    }
    else
    {
      *(_DWORD *)(v37 - 264) -= 2;
    }
  }
  else
  {
    result = (uint64_t)WebCore::LocalDOMWindow::dispatchEvent((WebCore::LocalDOMWindow *)v31, (WebCore::Event *)v33, 0);
  }
  if (*(_DWORD *)(v33 + 16) == 1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    if (!v32)
      goto LABEL_63;
  }
  else
  {
    --*(_DWORD *)(v33 + 16);
    if (!v32)
      goto LABEL_63;
  }
  if (*(_DWORD *)v32 == 2)
    result = WTF::StringImpl::destroy(v32, v19);
  else
    *(_DWORD *)v32 -= 2;
LABEL_63:
  if (*(_DWORD *)(v31 + 24) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 72))(v31);
  else
    --*(_DWORD *)(v31 + 24);
LABEL_65:
  v38 = &v8[8 * v6];
  v39 = v8;
  do
  {
    v40 = *(_QWORD *)v39;
    *(_QWORD *)v39 = 0;
    if (v40)
    {
      v41 = (unsigned int *)(v40 + 8);
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v41);
        v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v44 = off_1E31FE290;
        v44[1] = v41;
        v45 = v44;
        WTF::ensureOnMainThread();
        result = (uint64_t)v45;
        v45 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    v39 += 8;
  }
  while (v39 != v38);
LABEL_74:
  if (v8)
    return WTF::fastFree((WTF *)v8, v19);
  return result;
}

uint64_t WebCore::Page::dispatchAfterPrintEvent(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 20);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  return WebCore::dispatchPrintEvent(v1, (WTF::StringImpl **)(v4 + 112), 1);
}

uint64_t WebCore::Page::setPaymentCoordinator(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  WTF *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *a2;
  *a2 = 0;
  v3 = *(WTF **)(result + 1240);
  *(_QWORD *)(result + 1240) = v2;
  if (v3)
  {
    v4 = (char *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v4)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v4 - 24);
      if (*(_DWORD *)&v4[v5 + 8] == 1)
        (*(void (**)(char *))(*(_QWORD *)&v4[v5] + 8))(&v4[v5]);
      else
        --*(_DWORD *)&v4[v5 + 8];
    }
    v6 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 152))(v6);
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v7 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    return WTF::fastFree(v3, a2);
  }
  return result;
}

BOOL WebCore::Page::startApplePayAMSUISession(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v20;

  v5 = a1[156];
  if (v5)
    v6 = WTF::RefPtr<WebCore::ApplePayAMSUIPaymentHandler,WTF::RawPtrTraits<WebCore::ApplePayAMSUIPaymentHandler>,WTF::DefaultRefDerefTraits<WebCore::ApplePayAMSUIPaymentHandler>>::unspecifiedBoolTypeInstance;
  else
    v6 = 0;
  if (!v6)
  {
    ++*(_DWORD *)(a3 + 104);
    a1[156] = a3;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 104) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 96) + 8))(v5 + 96);
      else
        --*(_DWORD *)(v5 + 104);
    }
    v10 = *(_QWORD *)(a1[6] + 16);
    v11 = a1[2];
    if (v11)
      goto LABEL_21;
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a1;
    v13 = (unsigned int *)a1[2];
    a1[2] = v11;
    if (!v13)
      goto LABEL_21;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
    v11 = a1[2];
    if (v11)
    {
LABEL_21:
      do
        v16 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v16 + 1, (unsigned int *)v11));
    }
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = &off_1E34013D0;
    v17[1] = v11;
    v17[2] = a3;
    v20 = v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v10 + 1720))(v10, a2, a4, &v20);
    v18 = v20;
    v20 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v6 == 0;
}

uint64_t WebCore::Page::configureLoggingChannel(uint64_t a1, WTF::String *a2, uint64_t a3, uint64_t a4)
{
  char *LogChannel;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v16;
  _QWORD *v17;

  {
    WebCore::LogChannels::LogChannels((WebCore::LogChannels *)&WebCore::logChannels(void)::logChannels);
  }
  LogChannel = (char *)WTF::LogChannels::getLogChannel((WTF::LogChannels *)&WebCore::logChannels(void)::logChannels, a2);
  if (LogChannel)
  {
    *LogChannel = a3;
    LogChannel[16] = a4;
    v9 = *(_QWORD *)(a1 + 160);
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 144))
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        if (LogChannel == &WebCore::LogWebRTC)
        {
          if (*(_QWORD *)(v9 + 296))
          {
            v12 = *(_QWORD *)(a1 + 1008);
            if ((v12 & 0x8000000000000000) == 0 || v12 == -1)
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 296) + 48))(*(_QWORD *)(a1 + 296), byte_1ECE7CD50);
          }
        }
        do
        {
          v13 = __ldaxr(v10);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v10));
        if (!v14)
        {
          atomic_store(1u, v10);
          v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v16 = off_1E31FE290;
          v16[1] = v10;
          v17 = v16;
          WTF::ensureOnMainThread();
          if (v17)
            (*(void (**)(_QWORD *))(*v17 + 8))(v17);
        }
      }
    }
  }
  return (*(uint64_t (**)(_QWORD, WTF::String *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 16)
                                                                            + 1648))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), a2, a3, a4);
}

uint64_t WebCore::Page::didFinishLoadingImageForElement(WebCore::Page *this, WebCore::HTMLImageElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t result;
  int v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = WebCore::Document::eventLoop((WebCore::Document *)v3, a2);
  ++*(_DWORD *)(v4 + 8);
  *((_DWORD *)a2 + 6) += 2;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34013F8;
  v5[1] = a2;
  v9 = v5;
  WebCore::EventLoopTaskGroup::queueTask(v4, 11, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v8 = *(_DWORD *)(v4 + 8);
  if (v8)
  {
    *(_DWORD *)(v4 + 8) = v8 - 1;
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::Page::recomputeTextAutoSizingInAllFrames(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3401420;
  v11 = (uint64_t)v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v12 = v9;
    WTF::ensureOnMainThread();
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

unint64_t WebCore::Page::preferredFilterRenderingModes(WebCore::Page *this)
{
  unint64_t v1;
  int v2;

  v1 = *(unsigned int *)(*((_QWORD *)this + 14) + 720) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)this + 14)
                                                                                                 + 724) << 32);
  if ((v1 & 0x2000000000) != 0)
    v2 = 3;
  else
    v2 = 1;
  return v2 | (v1 >> 36) & 4;
}

uint64_t WebCore::Page::fragmentDirectiveURLForSelectedText@<X0>(WebCore::Page *this@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WebCore::Node *v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::Node *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WebCore::Node *v19[2];
  WebCore::Node *v20;
  char v21;

  v3 = (int *)*((_QWORD *)this + 9);
  v4 = *v3;
  v5 = *v3 + 1;
  *v3 = v5;
  v6 = *((_QWORD *)v3 + 2);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 144))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 160);
    if (*(_BYTE *)(v7 + 144))
    {
      if (v5)
      {
        *v3 = v4;
        *(_QWORD *)a2 = 0;
        return WTF::URL::invalidate((WTF::URL *)a2);
      }
      goto LABEL_33;
    }
  }
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (!*v3)
  {
LABEL_33:
    result = 286;
    __break(0xC471u);
    return result;
  }
  --*v3;
  WebCore::VisibleSelection::range((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064) + 56), (uint64_t)v19);
  if (v21)
  {
    v16 = 0;
    WTF::URL::invalidate((WTF::URL *)&v16);
    WebCore::FragmentDirectiveGenerator::generateFragmentDirective((WebCore::FragmentDirectiveGenerator *)&v16, (const WebCore::SimpleRange *)v19);
    result = (uint64_t)v16;
    if (v16)
    {
      *(_DWORD *)v16 += 2;
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 24) = v18;
      *(_OWORD *)(a2 + 8) = v17;
      v16 = 0;
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_OWORD *)(a2 + 8) = v17;
      *(_OWORD *)(a2 + 24) = v18;
    }
    if (v21)
    {
      v12 = v20;
      v20 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v10);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      result = (uint64_t)v19[0];
      v19[0] = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    result = WTF::URL::invalidate((WTF::URL *)a2);
  }
  do
  {
    v13 = __ldaxr(v8);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v8));
  if (!v14)
  {
    atomic_store(1u, v8);
    v15 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v15 = off_1E31FE290;
    *((_QWORD *)v15 + 1) = v8;
    v19[0] = v15;
    WTF::ensureOnMainThread();
    result = (uint64_t)v19[0];
    v19[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::Page::revealCurrentSelection(WebCore::Page *this)
{
  int *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;

  v1 = (int *)*((_QWORD *)this + 9);
  v2 = *v1;
  v3 = *v1 + 1;
  *v1 = v3;
  v4 = *((_QWORD *)v1 + 2);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || *(_BYTE *)(v5 + 144))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 1) + 8) + 160);
    if (*(_BYTE *)(v5 + 144))
    {
      if (v3)
      {
        *v1 = v2;
        return;
      }
LABEL_18:
      __break(0xC471u);
      JUMPOUT(0x1960247E8);
    }
  }
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  if (!*v1)
    goto LABEL_18;
  --*v1;
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064);
  ++*(_DWORD *)(v8 + 28);
  WebCore::FrameSelection::revealSelection(v8, 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
  v9 = *(_DWORD *)(v8 + 28);
  if (!v9)
    goto LABEL_18;
  *(_DWORD *)(v8 + 28) = v9 - 1;
  do
  {
    v10 = __ldaxr(v6);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v6));
  if (!v11)
  {
    atomic_store(1u, v6);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v6;
    v13 = v12;
    WTF::ensureOnMainThread();
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
}

void WebCore::Page::injectUserStyleSheet(WebCore::Page *this, WebCore::UserStyleSheet *a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  const WebCore::UserStyleSheet *v21;
  WebCore::UserStyleSheet *v22;
  uint64_t v23;
  WebCore::ExtensionStyleSheets *v24;
  uint64_t v25;
  unsigned int *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  WebCore::ExtensionStyleSheets *v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;

  v4 = *((_QWORD *)this + 20);
  v5 = *(unsigned __int8 *)(v4 + 144);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v4 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_QWORD *)(v4 + 280);
    ++*(_DWORD *)v9;
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 1176))(*(_QWORD *)(v9 + 16));
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x196024B5CLL);
    }
    v11 = v10;
    --*(_DWORD *)v9;
    if (v10)
    {
      v12 = *(_QWORD *)(v4 + 296);
      if (v12)
      {
        *(_DWORD *)(v12 + 24) += 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v47 = v48;
        WebCore::Document::addConsoleMessage((_QWORD *)v12, 8, 1, &v47, 0);
        v14 = v47;
        v47 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(v4 + 280);
      ++*(_DWORD *)v15;
      (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 1184))(*(_QWORD *)(v15 + 16));
      if (!*(_DWORD *)v15)
      {
        __break(0xC471u);
        JUMPOUT(0x196024C5CLL);
      }
      --*(_DWORD *)v15;
    }
    do
    {
      v16 = __ldaxr(v7);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v7));
    if (!v17)
    {
      atomic_store(1u, v7);
      v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = off_1E31FE290;
      *((_QWORD *)v32 + 1) = v7;
      v48 = v32;
      WTF::ensureOnMainThread();
      v33 = v48;
      v48 = 0;
      if (v33)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
    }
    if ((v11 & 1) != 0)
      return;
    v4 = *((_QWORD *)this + 20);
    v5 = *(unsigned __int8 *)(v4 + 144);
  }
  if (v5)
    v4 = 0;
  if (v4)
  {
    v18 = (unsigned int *)(v4 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    if ((*(_DWORD *)(*(_QWORD *)(v4 + 280) + 64) - 1) <= 1)
    {
      v20 = *((unsigned int *)this + 411);
      if ((_DWORD)v20 == *((_DWORD *)this + 410))
      {
        v21 = (const WebCore::UserStyleSheet *)WTF::Vector<WebCore::UserStyleSheet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 1632, v20 + 1, (unint64_t)a2);
        v22 = (WebCore::UserStyleSheet *)(*((_QWORD *)this + 204) + 104 * *((unsigned int *)this + 411));
      }
      else
      {
        v22 = (WebCore::UserStyleSheet *)(*((_QWORD *)this + 204) + 104 * v20);
        v21 = a2;
      }
      WebCore::UserStyleSheet::UserStyleSheet(v22, v21);
      ++*((_DWORD *)this + 411);
LABEL_61:
      v40 = (unsigned int *)(v4 + 8);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        v43 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v43 = off_1E31FE290;
        *((_QWORD *)v43 + 1) = v40;
        v48 = v43;
        WTF::ensureOnMainThread();
        v44 = v48;
        v48 = 0;
        if (v44)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v44 + 8))(v44);
      }
      return;
    }
    if (*((_BYTE *)a2 + 80))
    {
      v23 = *(_QWORD *)(v4 + 296);
      if (v23)
      {
        *(_DWORD *)(v23 + 24) += 2;
        v24 = *(WebCore::ExtensionStyleSheets **)(v23 + 1336);
        if (!v24)
        {
          v25 = WTF::fastMalloc((WTF *)0xA8);
          *(_DWORD *)v25 = 0;
          v26 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v23);
          do
            v28 = __ldaxr(v26);
          while (__stlxr(v28 + 1, v26));
          *(_QWORD *)(v25 + 8) = v26;
          *(_QWORD *)(v25 + 144) = 0;
          *(_QWORD *)(v25 + 152) = 0;
          *(_QWORD *)(v25 + 157) = 0;
          *(_OWORD *)(v25 + 16) = 0u;
          *(_OWORD *)(v25 + 32) = 0u;
          *(_OWORD *)(v25 + 48) = 0u;
          *(_BYTE *)(v25 + 64) = 0;
          *(_OWORD *)(v25 + 72) = 0u;
          *(_OWORD *)(v25 + 88) = 0u;
          *(_OWORD *)(v25 + 104) = 0u;
          *(_OWORD *)(v25 + 120) = 0u;
          *(_QWORD *)(v25 + 133) = 0;
          v29 = *(WebCore::ExtensionStyleSheets **)(v23 + 1336);
          *(_QWORD *)(v23 + 1336) = v25;
          if (v29)
          {
            WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v29, v27);
            if (*(_DWORD *)v30)
            {
              *(_QWORD *)(v30 + 160) = 0;
              *(_OWORD *)(v30 + 128) = 0u;
              *(_OWORD *)(v30 + 144) = 0u;
              *(_OWORD *)(v30 + 96) = 0u;
              *(_OWORD *)(v30 + 112) = 0u;
              *(_OWORD *)(v30 + 64) = 0u;
              *(_OWORD *)(v30 + 80) = 0u;
              *(_OWORD *)(v30 + 32) = 0u;
              *(_OWORD *)(v30 + 48) = 0u;
              *(_OWORD *)v30 = 0u;
              *(_OWORD *)(v30 + 16) = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v30, v31);
            }
          }
          v24 = *(WebCore::ExtensionStyleSheets **)(v23 + 1336);
        }
        ++*(_DWORD *)v24;
        WebCore::ExtensionStyleSheets::injectPageSpecificUserStyleSheet(v24, a2);
        if (!*(_DWORD *)v24)
        {
          __break(0xC471u);
          JUMPOUT(0x196024CC0);
        }
        --*(_DWORD *)v24;
        if (*(_DWORD *)(v23 + 24) == 2)
        {
          if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v23);
        }
        else
        {
          *(_DWORD *)(v23 + 24) -= 2;
        }
      }
      goto LABEL_61;
    }
  }
  else if (*((_BYTE *)a2 + 80))
  {
    return;
  }
  v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v34 = off_1E3401448;
  *((_QWORD *)v34 + 1) = a2;
  v47 = v34;
  v35 = *((_QWORD *)this + 20);
  v36 = (unsigned int *)(v35 + 8);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 + 1, v36));
  WebCore::Page::forEachDocumentFromMainFrame(v35, &v47);
  do
  {
    v38 = __ldaxr(v36);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v36));
  if (!v39)
  {
    atomic_store(1u, v36);
    v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v45 = off_1E31FE290;
    *((_QWORD *)v45 + 1) = v36;
    v48 = v45;
    WTF::ensureOnMainThread();
    v46 = v48;
    v48 = 0;
    if (v46)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
  }
  if (v47)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v47 + 8))(v47);
  if (v4)
    goto LABEL_61;
}

void WebCore::Page::removeInjectedUserStyleSheet(WebCore::Page *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WebCore::ExtensionStyleSheets *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  WebCore::ExtensionStyleSheets *v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  const WTF::StringImpl *v39;
  uint64_t v40;
  _DWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  _DWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD v50[2];
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  int v54;
  int v55;
  _QWORD *v56;
  int v57;
  int v58;
  __int128 v59;
  char v60;

  if (!*((_DWORD *)this + 411))
  {
    if (*((_BYTE *)a2 + 80))
    {
      v12 = *((_QWORD *)this + 20);
      if (v12)
        v13 = *(_BYTE *)(v12 + 144) == 0;
      else
        v13 = 0;
      if (!v13)
        return;
      v14 = (unsigned int *)(v12 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v16 = *(_QWORD *)(v12 + 296);
      if (v16)
      {
        *(_DWORD *)(v16 + 24) += 2;
        v17 = *(WebCore::ExtensionStyleSheets **)(v16 + 1336);
        if (!v17)
        {
          v30 = WTF::fastMalloc((WTF *)0xA8);
          *(_DWORD *)v30 = 0;
          v31 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v16);
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 + 1, v31));
          *(_QWORD *)(v30 + 8) = v31;
          *(_QWORD *)(v30 + 144) = 0;
          *(_QWORD *)(v30 + 152) = 0;
          *(_QWORD *)(v30 + 157) = 0;
          *(_OWORD *)(v30 + 16) = 0u;
          *(_OWORD *)(v30 + 32) = 0u;
          *(_OWORD *)(v30 + 48) = 0u;
          *(_BYTE *)(v30 + 64) = 0;
          *(_OWORD *)(v30 + 72) = 0u;
          *(_OWORD *)(v30 + 88) = 0u;
          *(_OWORD *)(v30 + 104) = 0u;
          *(_OWORD *)(v30 + 120) = 0u;
          *(_QWORD *)(v30 + 133) = 0;
          v34 = *(WebCore::ExtensionStyleSheets **)(v16 + 1336);
          *(_QWORD *)(v16 + 1336) = v30;
          if (v34)
          {
            WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v34, v32);
            if (*(_DWORD *)v35)
            {
              *(_QWORD *)(v35 + 160) = 0;
              *(_OWORD *)(v35 + 128) = 0u;
              *(_OWORD *)(v35 + 144) = 0u;
              *(_OWORD *)(v35 + 96) = 0u;
              *(_OWORD *)(v35 + 112) = 0u;
              *(_OWORD *)(v35 + 64) = 0u;
              *(_OWORD *)(v35 + 80) = 0u;
              *(_OWORD *)(v35 + 32) = 0u;
              *(_OWORD *)(v35 + 48) = 0u;
              *(_OWORD *)v35 = 0u;
              *(_OWORD *)(v35 + 16) = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v35, v36);
            }
          }
          v17 = *(WebCore::ExtensionStyleSheets **)(v16 + 1336);
        }
        ++*(_DWORD *)v17;
        WebCore::ExtensionStyleSheets::removePageSpecificUserStyleSheet(v17, a2, a3);
        if (!*(_DWORD *)v17)
          goto LABEL_67;
        --*(_DWORD *)v17;
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v16, v18);
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
      }
      do
      {
        v19 = __ldaxr(v14);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v14));
      if (v20)
        return;
      atomic_store(1u, v14);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = off_1E31FE290;
      v21[1] = v14;
      v50[0] = v21;
      WTF::ensureOnMainThread();
      v22 = (_QWORD *)v50[0];
      v50[0] = 0;
      if (!v22)
        return;
    }
    else
    {
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = off_1E3401470;
      v24[1] = a2;
      v49 = v24;
      v25 = *((_QWORD *)this + 20);
      v26 = (unsigned int *)(v25 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      WebCore::Page::forEachDocumentFromMainFrame(v25, &v49);
      do
      {
        v28 = __ldaxr(v26);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v26));
      if (!v29)
      {
        atomic_store(1u, v26);
        v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v47 = off_1E31FE290;
        v47[1] = v26;
        v50[0] = v47;
        WTF::ensureOnMainThread();
        v48 = v50[0];
        v50[0] = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      }
      v22 = v49;
      if (!v49)
        return;
    }
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
    return;
  }
  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v50[0] = v5;
  v6 = a2[1];
  if (v6)
    *(_DWORD *)v6 += 2;
  v50[1] = v6;
  v7 = *((_OWORD *)a2 + 2);
  v51 = *((_OWORD *)a2 + 1);
  v52 = v7;
  v8 = *((unsigned int *)a2 + 15);
  v53 = 0;
  v54 = 0;
  v55 = v8;
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x196025138);
    }
    v37 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
    v54 = v8;
    v53 = v37;
    v38 = *((unsigned int *)a2 + 15);
    if ((_DWORD)v38)
    {
      v39 = a2[6];
      v40 = 8 * v38;
      do
      {
        v41 = *(_DWORD **)v39;
        if (*(_QWORD *)v39)
          *v41 += 2;
        *v37++ = v41;
        v39 = (const WTF::StringImpl *)((char *)v39 + 8);
        v40 -= 8;
      }
      while (v40);
    }
  }
  v9 = *((unsigned int *)a2 + 19);
  v56 = 0;
  v57 = 0;
  v58 = v9;
  if (!(_DWORD)v9)
    goto LABEL_8;
  if (v9 >> 29)
  {
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x1960250CCLL);
  }
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
  v57 = v9;
  v56 = v42;
  v43 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v43)
  {
    v44 = a2[8];
    v45 = 8 * v43;
    do
    {
      v46 = *(_DWORD **)v44;
      if (*(_QWORD *)v44)
        *v46 += 2;
      *v42++ = v46;
      v44 = (const WTF::StringImpl *)((char *)v44 + 8);
      v45 -= 8;
    }
    while (v45);
  }
LABEL_8:
  v59 = *((_OWORD *)a2 + 5);
  v60 = *((_BYTE *)a2 + 96);
  if (*((_DWORD *)this + 411))
  {
    v10 = 0;
    v11 = 0;
    while (!WTF::equal(*(WTF **)(*((_QWORD *)this + 204) + v10 + 8), v6, a3))
    {
      ++v11;
      v10 += 104;
      if (v11 >= *((unsigned int *)this + 411))
        goto LABEL_31;
    }
    v23 = *((_QWORD *)this + 204) + v10;
    WebCore::UserStyleSheet::~UserStyleSheet((WebCore::UserStyleSheet *)v23, (WTF::StringImpl *)a2);
    WTF::VectorMover<false,WebCore::UserStyleSheet>::moveOverlapping((WTF::StringImpl *)(v23 + 104), (WTF::StringImpl *)(*((_QWORD *)this + 204) + 104 * *((unsigned int *)this + 411)), v23);
    --*((_DWORD *)this + 411);
  }
LABEL_31:
  WebCore::UserStyleSheet::~UserStyleSheet((WebCore::UserStyleSheet *)v50, (WTF::StringImpl *)a2);
}

uint64_t WebCore::Page::speechRecognitionConnection(WebCore::Page *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 16))(*((_QWORD *)this + 35));
}

WebCore::ImageOverlayController **std::unique_ptr<WebCore::ImageOverlayController>::operator=[abi:sn180100](WebCore::ImageOverlayController **a1, WebCore::ImageOverlayController **a2)
{
  WebCore::ImageOverlayController *v3;
  WebCore::ImageOverlayController *v4;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::ImageOverlayController::~ImageOverlayController(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

uint64_t *WebCore::Page::serviceWorkerPage(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::Document::allDocumentsMap(void)::documents, a1);
  if (result)
  {
    v2 = result[4];
    if (v2
      && (v3 = *(_QWORD *)(v2 + 8)) != 0
      && (v4 = *(_QWORD *)(v3 + 528)) != 0
      && (v5 = *(_QWORD *)(v4 + 8)) != 0
      && (v6 = *(_QWORD *)(v5 + 24)) != 0)
    {
      return *(uint64_t **)(v6 + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WebCore::ImageAnalysisQueue *std::exchange[abi:sn180100]<std::unique_ptr<WebCore::ImageAnalysisQueue>,std::unique_ptr<WebCore::ImageAnalysisQueue>>(WebCore::ImageAnalysisQueue **a1, WebCore::ImageAnalysisQueue **a2, WebCore::ImageAnalysisQueue **a3)
{
  WebCore::ImageAnalysisQueue *v3;
  WebCore::ImageAnalysisQueue *v4;
  WebCore::ImageAnalysisQueue *result;
  WTF *v6;
  void *v7;

  v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  v4 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v4;
  if (result)
  {
    WebCore::ImageAnalysisQueue::~ImageAnalysisQueue(result, a2);
    return (WebCore::ImageAnalysisQueue *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_31;
    v5 = 0;
    do
    {
      while (1)
      {
        v6 = (uint64_t *)(v3 + 80 * --v4);
        v7 = *v6;
        if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
          break;
        if (!v4)
          goto LABEL_18;
      }
      *v6 = 0;
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v10 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v10)
        {
          v27 = v7;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
          v7 = v27;
        }
        v11 = *(WTF **)(v7 + 16);
        if (v11)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          v26 = v7;
          WTF::fastFree(v11, a2);
          v7 = v26;
        }
        WTF::fastFree((WTF *)v7, a2);
      }
      *v6 = -1;
      WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)(v3 + 80 * v4 + 8), (WTF::StringImpl *)a2);
      ++v5;
    }
    while (v4);
LABEL_18:
    v3 = *(_QWORD *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v12 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (!v3)
      goto LABEL_23;
    v16 = *(_DWORD *)(v3 - 4);
    v17 = *(unsigned int *)(v3 - 12);
    if (v16 < 9 || 6 * (int)v17 >= v16)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_32;
    }
    v19 = (v17 - 1) | ((v17 - 1) >> 1) | ((((_DWORD)v17 - 1) | ((v17 - 1) >> 1)) >> 2);
    v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
    v21 = (v20 | HIWORD(v20)) + 1;
    if (v21 > 0x400)
    {
      if (v21 > 2 * v17)
        goto LABEL_40;
    }
    else if (3 * v21 > 4 * v17)
    {
LABEL_37:
      v22 = (double)v17;
      v23 = (double)v21;
      v24 = 0.604166667;
      goto LABEL_41;
    }
    LODWORD(v21) = 2 * v21;
    if (v21 <= 0x400)
      goto LABEL_37;
LABEL_40:
    v22 = (double)v17;
    v23 = (double)v21;
    v24 = 0.416666667;
LABEL_41:
    if (v23 * v24 <= v22)
      LODWORD(v21) = 2 * v21;
    if (v21 <= 8)
      v25 = 8;
    else
      v25 = v21;
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v25, 0);
    v14 = 0;
    v3 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (!v3)
      goto LABEL_24;
LABEL_32:
    v14 = *(_DWORD *)(v3 - 12);
    v15 = 0x7FFFFFFF;
    if (v14 >= 0x7FFFFFFF)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_23:
  v14 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_24:
  v15 = v14;
LABEL_25:
  *(_DWORD *)(a1 + 12) = 2 * v15;
}

uint64_t WebCore::Page::hasCachedTextRecognitionResult(WebCore::Page *this, const WebCore::HTMLElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;

  ++*((_DWORD *)this + 450);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    return 0;
  v4 = *((_QWORD *)this + 224);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = *(_QWORD *)(v4 + 80 * v9);
    if (v11 != -1)
    {
      if (!v11)
        return 0;
      if (v11 == v3)
        break;
    }
    v9 = (v9 + i) & v5;
  }
  return 1;
}

uint64_t *WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::find@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t **v20;
  uint64_t *v21;

  ++*((_DWORD *)result + 2);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 8))
  {
    v5 = *result;
    if (*result)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = (v4 + ~(v3 << 32)) ^ ((unint64_t)(v4 + ~(v3 << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; ++i)
      {
        v12 = (uint64_t *)(v5 + 80 * v10);
        v13 = *v12;
        if (*v12 != -1)
        {
          if (!v13)
          {
            v19 = *(_DWORD *)(v5 - 4);
            v12 = (uint64_t *)(v5 + 80 * v19);
            v17 = v12;
            goto LABEL_17;
          }
          if (v13 == v4)
            break;
        }
        v10 = (v10 + i) & v6;
      }
      v19 = *(_DWORD *)(v5 - 4);
      v17 = (uint64_t *)(v5 + 80 * v19);
LABEL_17:
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v12;
      v20 = (uint64_t **)(a3 + 8);
      *(_QWORD *)(a3 + 16) = v17;
      v18 = (uint64_t *)(v5 + 80 * v19);
    }
    else
    {
      v12 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = 0;
      v20 = (uint64_t **)(a3 + 8);
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)(a3 + 24) = v18;
    *(_QWORD *)(a3 + 32) = v5 + 80 * v19;
    *(_DWORD *)(a3 + 40) = 0;
LABEL_19:
    while (v12 != v18 && !*(_QWORD *)(*v12 + 8))
    {
      v21 = v12 + 10;
      *v20 = v12 + 10;
      v12 = v17;
      if (v21 != v17)
      {
        v12 = v21;
        while ((unint64_t)(*v12 + 1) <= 1)
        {
          v12 += 10;
          *v20 = v12;
          if (v12 == v17)
          {
            v12 = v17;
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
    v14 = *result;
    if (*result)
    {
      v15 = *(_DWORD *)(v14 - 4);
      v16 = v14 + 80 * v15;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v16;
    }
    else
    {
      v16 = 0;
      v15 = 0;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = 0;
    }
    *(_QWORD *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v14 + 80 * v15;
    *(_DWORD *)(a3 + 40) = 0;
  }
  return result;
}

void WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::set<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[7];

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1, a2);
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a2;
    *(_BYTE *)(v8 + 32) = 0;
    v9 = a2[2];
    a2[2] = v9 & 0xFFFF000000000000 | v8;
    v10 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v9 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v10);
        v47 = *(unsigned int *)(v10 + 28);
        if ((_DWORD)v47)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v47));
        v48 = *(WTF **)(v10 + 16);
        if (v48)
        {
          *(_QWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 24) = 0;
          WTF::fastFree(v48, a2);
        }
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  v13 = a2[2];
  v14 = v13 & 0xFFFFFFFFFFFFLL;
  do
    v15 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v15 + 1, (unsigned int *)v14));
  do
    v16 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v16 + 1, (unsigned int *)v14));
  if (v14)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v14);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v14));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v14);
      v45 = *(unsigned int *)((v13 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v45)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v13 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v45));
      v46 = *(WTF **)((v13 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v46)
      {
        *(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v46, a2);
      }
      WTF::fastFree((WTF *)(v13 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v19 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, 8u, 0), (v19 = *(_QWORD *)a1) != 0))
  {
    v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = 0;
  v22 = (v14 + ~(v13 << 32)) ^ ((unint64_t)(v14 + ~(v13 << 32)) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = (v24 >> 31) ^ v24;
  for (i = 1; ; ++i)
  {
    v27 = v25 & v20;
    v28 = (uint64_t *)(v19 + 80 * v27);
    v29 = *v28;
    if (*v28 != -1)
      break;
    v21 = (uint64_t *)(v19 + 80 * v27);
LABEL_22:
    v25 = i + v27;
  }
  if (!v29)
  {
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      v53[0] = 0;
      v53[1] = 0;
      v21[2] = 0;
      v53[2] = 0;
      v21[3] = 0;
      v53[3] = 0;
      v21[4] = 0;
      v53[4] = 0;
      v21[5] = 0;
      v53[5] = 0;
      v21[6] = 0;
      v53[6] = 0;
      v21[8] = 0;
      v21[9] = 0;
      v21[7] = 0;
      WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)v53, (WTF::StringImpl *)a2);
      --*(_DWORD *)(*(_QWORD *)a1 - 16);
      v29 = *v21;
      v28 = v21;
    }
    *v28 = v14;
    if (v29)
    {
      do
      {
        v30 = __ldaxr((unsigned int *)v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, (unsigned int *)v29));
      if (!v31)
      {
        atomic_store(1u, (unsigned int *)v29);
        v49 = *(unsigned int *)(v29 + 28);
        if ((_DWORD)v49)
        {
          v52 = v29;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v29 + 16), (WTF::StringImpl *)(*(_QWORD *)(v29 + 16) + 32 * v49));
          v29 = v52;
        }
        v50 = *(WTF **)(v29 + 16);
        if (v50)
        {
          *(_QWORD *)(v29 + 16) = 0;
          *(_DWORD *)(v29 + 24) = 0;
          v51 = v29;
          WTF::fastFree(v50, a2);
          v29 = v51;
        }
        WTF::fastFree((WTF *)v29, a2);
      }
    }
    WebCore::TextRecognitionResult::operator=(v28 + 1, (WTF::StringImpl *)a3);
    *((_OWORD *)v28 + 4) = *(_OWORD *)(a3 + 56);
    v32 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36)
        return;
    }
    else
    {
      if (3 * v37 > 4 * v36)
        return;
      if (!(_DWORD)v37)
      {
        v38 = 8;
        goto LABEL_46;
      }
    }
    v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
LABEL_46:
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v38, v28);
    return;
  }
  if (v29 != v14)
    goto LABEL_22;
  v39 = v19 + 80 * v27;
  WebCore::TextRecognitionResult::operator=((uint64_t *)(v39 + 8), (WTF::StringImpl *)a3);
  *(_OWORD *)(v39 + 64) = *(_OWORD *)(a3 + 56);
  if (v14)
  {
    do
    {
      v41 = __ldaxr((unsigned int *)v14);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)v14));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)v14);
      v43 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v43)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v43));
      v44 = *(WTF **)(v14 + 16);
      if (v44)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        WTF::fastFree(v44, v40);
      }
      WTF::fastFree((WTF *)v14, v40);
    }
  }
}

uint64_t WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int **v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v31;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1, a2);
  v6 = a2[2];
  v7 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8))
    return 0;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = (v7 + ~(v6 << 32)) ^ ((unint64_t)(v7 + ~(v6 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  for (i = 1; ; v13 = (v13 + i++) & v9)
  {
    v15 = (unsigned int **)(v8 + 80 * v13);
    v16 = *v15;
    if (*v15 != (unsigned int *)-1)
    {
      if (!v16)
      {
        v17 = *(_DWORD *)(v8 - 4);
        v15 = (unsigned int **)(v8 + 80 * v17);
        goto LABEL_13;
      }
      if (v16 == (unsigned int *)v7)
        break;
    }
  }
  v17 = *(_DWORD *)(v8 - 4);
LABEL_13:
  if ((unsigned int **)(v8 + 80 * v17) == v15)
    return 0;
  v18 = *v15;
  *v15 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      v25 = v15;
      atomic_store(1u, v18);
      v31 = (WTF *)v18;
      v26 = v18[7];
      if ((_DWORD)v26)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v31 + 2), (WTF::StringImpl *)(*((_QWORD *)v31 + 2) + 32 * v26));
      v27 = (WTF *)*((_QWORD *)v31 + 2);
      if (v27)
      {
        *((_QWORD *)v31 + 2) = 0;
        *((_DWORD *)v31 + 6) = 0;
        WTF::fastFree(v27, a2);
      }
      WTF::fastFree(v31, a2);
      v15 = v25;
    }
  }
  *v15 = (unsigned int *)-1;
  WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)(v15 + 1), (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*(_QWORD *)a1 - 16);
  v21 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v22 = *(_DWORD *)(v21 - 12) - 1;
  else
    v22 = -1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v28 = 6 * *(_DWORD *)(v23 - 12);
    v29 = *(_DWORD *)(v23 - 4);
    if (v28 < v29 && v29 >= 9)
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v29 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::Page::serviceWorkerGlobalObject(WebCore::Page *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *((_QWORD *)this + 124);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v4 + 1;
  v5 = *(_QWORD *)(v3 + 24);
  if (v5)
  {
    ++*(_DWORD *)v5;
    if (*(WebCore::DOMWrapperWorld **)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 41456) + 16) != a2)
    {
      __break(0xC471u);
      JUMPOUT(0x196025E1CLL);
    }
    v6 = *(uint64_t **)(v5 + 24);
    if (!v6 || (v7 = *v6) == 0)
    {
      WebCore::WorkerOrWorkletScriptController::initScript(v5);
      v8 = *(uint64_t **)(v5 + 24);
      if (v8)
        v7 = *v8;
      else
        v7 = 0;
    }
    if (!*(_DWORD *)v5)
    {
      __break(0xC471u);
      JUMPOUT(0x196025E3CLL);
    }
    --*(_DWORD *)v5;
    v4 = *(_DWORD *)(v3 - 8) - 1;
    if (*(_DWORD *)(v3 - 8) != 1)
      goto LABEL_11;
LABEL_15:
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 320) + 40))(v3 - 320);
    return v7;
  }
  v7 = 0;
  if (!v4)
    goto LABEL_15;
LABEL_11:
  *(_DWORD *)(v3 - 8) = v4;
  return v7;
}

uint64_t WebCore::Page::storageConnection(WebCore::Page *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 218) + 16))(*((_QWORD *)this + 218));
}

WTF::StringImpl *WebCore::Page::setupForRemoteWorker(WTF::StringImpl *result, uint64_t a2, WebCore::SecurityOriginData *a3, uint64_t *a4, __int16 a5)
{
  uint64_t v5;
  BOOL v6;
  unsigned int *v11;
  unsigned int v12;
  WebCore::FrameLoader *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v20;
  WebCore::LocalDOMWindow *v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  const WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unint64_t v43;
  unsigned __int16 v44;
  const WTF::StringImpl *v45;
  void *v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56[3];
  unint64_t v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)result + 20);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (!v6)
    return result;
  v11 = (unsigned int *)(v5 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(WebCore::FrameLoader **)(v5 + 280);
  ++*(_DWORD *)v13;
  v58 = 0;
  WTF::URL::invalidate((WTF::URL *)&v58);
  WebCore::FrameLoader::initForSynthesizedDocument(v13, (const WTF::URL *)&v58);
  v15 = v58;
  v58 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (!*(_DWORD *)v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1960262F8);
  }
  --*(_DWORD *)v13;
  v16 = bmalloc::api::isoAllocate();
  v17 = *(_QWORD *)(v5 + 136);
  v59 = 0uLL;
  v58 = 0;
  v18 = WebCore::Document::Document(v16, v5, v17, a2, 0, 2, (uint64_t *)&v58) + 192;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_16:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v57 = v18;
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v16 + 416), (uint64_t *)&v57, (uint64_t)v56);
  v20 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v21 = (WebCore::LocalDOMWindow *)bmalloc::api::isoAllocate();
  WebCore::LocalDOMWindow::LocalDOMWindow(v21, (WebCore::Document *)v16);
  v22 = *(_DWORD **)(v16 + 696);
  *(_QWORD *)(v16 + 696) = v21;
  if (v22)
  {
    if (v22[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 72))(v22);
    else
      --v22[6];
  }
  *(_BYTE *)(v16 + 464) = *(_BYTE *)(*(_QWORD *)(v16 + 680) + 548);
  WebCore::SecurityOriginData::securityOrigin(a3, &v57);
  v23 = v57;
  v24 = v57 + 8;
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v57 + 8), v56);
  MEMORY[0x19AEA52D4](&v58, v56, 0);
  v27 = v56[0];
  v56[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v58;
  if (v58)
    *(_DWORD *)v58 += 2;
  v29 = *(WTF::StringImpl **)(v16 + 1048);
  *(_QWORD *)(v16 + 1048) = v28;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, v28);
      v28 = v58;
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  *(_OWORD *)(v16 + 1056) = v59;
  *(_OWORD *)(v16 + 1072) = v60;
  if ((WTF::equal(*(WTF **)(v16 + 1008), v28, v26) & 1) == 0)
  {
    v31 = v58;
    if (v58)
      *(_DWORD *)v58 += 2;
    v32 = *(WTF::StringImpl **)(v16 + 1008);
    *(_QWORD *)(v16 + 1008) = v31;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v30);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v60;
    *(_OWORD *)(v16 + 1016) = v59;
    *(_OWORD *)(v16 + 1032) = v33;
    WebCore::Document::updateCachedCookiesEnabled((WebCore::Document *)v16, v30);
  }
  v34 = *(int **)(v5 + 280);
  v35 = *v34;
  v36 = *v34 + 1;
  *v34 = v36;
  v37 = *((_QWORD *)v34 + 11);
  if (v37)
  {
    v38 = *(_DWORD *)(v37 + 24);
    *(_DWORD *)(v37 + 24) = v38 + 1;
    if (v36)
    {
      *v34 = v35;
      *(_WORD *)(v37 + 3514) = a5;
      if (v38)
        *(_DWORD *)(v37 + 24) = v38;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
      goto LABEL_45;
    }
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x196026324);
  }
  if (!v36)
    goto LABEL_83;
  *v34 = v35;
LABEL_45:
  if (*(_BYTE *)(*(_QWORD *)(v16 + 680) + 548) == 1)
  {
    WebCore::SecurityOrigin::domainForCachePartition((WebCore::SecurityOrigin *)v23, v56);
    v39 = v56[0];
  }
  else
  {
    v39 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v39 += 2;
  }
  v40 = *(WTF::StringImpl **)(v16 + 408);
  *(_QWORD *)(v16 + 408) = v39;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v30);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = *a4;
  if (*a4)
  {
    v42 = *(unsigned __int16 **)(v41 + 8);
    v43 = *(unsigned int *)(v41 + 4) | ((unint64_t)((*(_DWORD *)(v41 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v42 = 0;
    v43 = 0x100000000;
  }
  v44 = WebCore::parseReferrerPolicy(v42, v43, 1);
  if (v44 >= 0x100u && (_BYTE)v44)
    *(_BYTE *)(v16 + 272) = v44;
  v56[0] = (WTF::StringImpl *)v16;
  WebCore::LocalFrame::setDocument(v5, v56, v45);
  v47 = v56[0];
  v56[0] = 0;
  if (v47)
  {
    if (*((_DWORD *)v47 + 6) == 2)
    {
      if ((*((_WORD *)v47 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v47, v46);
    }
    else
    {
      *((_DWORD *)v47 + 6) -= 2;
    }
  }
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v46);
    else
      *(_DWORD *)result -= 2;
  }
  v57 = 0;
  if (v23)
  {
    do
    {
      v48 = __ldaxr((unsigned int *)v23);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unsigned int *)v23));
    if (!v49)
    {
      atomic_store(1u, (unsigned int *)v23);
      v53 = *(WTF::StringImpl **)(v23 + 48);
      *(_QWORD *)(v23 + 48) = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v46);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = *(WTF::StringImpl **)(v23 + 40);
      *(_QWORD *)(v23 + 40) = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v46);
        else
          *(_DWORD *)v54 -= 2;
      }
      v55 = *(unsigned int *)(v23 + 32);
      if ((_DWORD)v55 != -1)
        ((void (*)(WTF::StringImpl **, unint64_t))off_1E3400668[v55])(&v58, v24);
      *(_DWORD *)(v23 + 32) = -1;
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v23, v46);
    }
  }
  do
  {
    v50 = __ldaxr(v11);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, v11));
  if (!v51)
  {
    atomic_store(1u, v11);
    v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v52 = off_1E31FE290;
    *((_QWORD *)v52 + 1) = v11;
    v58 = v52;
    WTF::ensureOnMainThread();
    result = v58;
    v58 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::Page::forceRepaintAllFrames(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::RenderView *v5;
  int v6;
  int v7;

  v1 = *(_QWORD *)(this + 160);
  if (v1)
  {
    do
    {
      if (!*(_BYTE *)(v1 + 144))
      {
        v2 = *(_QWORD *)(v1 + 288);
        if (v2)
        {
          v3 = *(_DWORD *)(v2 + 8) + 1;
          *(_DWORD *)(v2 + 8) = v3;
          v4 = *(_QWORD *)(*(_QWORD *)(v2 + 328) + 296);
          if (v4)
          {
            v5 = *(WebCore::RenderView **)(v4 + 1944);
            if (v5)
            {
              ++*((_DWORD *)v5 + 4);
              WebCore::RenderView::repaintViewAndCompositedLayers(v5);
              v6 = *((_DWORD *)v5 + 4);
              if (!v6)
              {
                this = 286;
                __break(0xC471u);
                return this;
              }
              *((_DWORD *)v5 + 4) = v6 - 1;
              v3 = *(_DWORD *)(v2 + 8);
            }
          }
          v7 = v3 - 1;
          if (v7)
            *(_DWORD *)(v2 + 8) = v7;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
        }
      }
      this = WebCore::FrameTree::traverseNext((_QWORD *)(v1 + 48), 0);
      v1 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebCore::Page::removeIndividuallyPlayingAnimationElement(WebCore::Page *this, WebCore::HTMLImageElement *a2)
{
  char *v3;
  void *v4;
  uint64_t result;

  v3 = (char *)this + 552;
  WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLImageElement>((uint64_t)this + 552, a2);
  result = WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v3, v4);
  if (!(_DWORD)result && !*((_BYTE *)this + 545))
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 1448))(*(_QWORD *)(*((_QWORD *)this + 6) + 16), 0);
  return result;
}

WTF::StringImpl *WebCore::Page::applyLinkDecorationFiltering@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[5];
  WTF::StringImpl *v17;
  char v18;

  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v16[0] = v6;
  MEMORY[0x19AEA52D4](&v17, v16, 0);
  v8 = v16[0];
  v16[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if ((v18 & 1) == 0)
    goto LABEL_11;
  WebCore::ChromeClient::applyLinkDecorationFiltering(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), (uint64_t)v16);
  v10 = WTF::equal(v16[0], v17, v9);
  v11 = v16[0];
  if ((v10 & 1) != 0)
  {
    v16[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
LABEL_11:
    v12 = 1;
    goto LABEL_16;
  }
  if (v16[0])
  {
    v13 = *(_DWORD *)v16[0];
    *(_DWORD *)v16[0] += 2;
    *a3 = v11;
    v16[0] = 0;
    if (v13)
      *(_DWORD *)v11 = v13;
    else
      WTF::StringImpl::destroy(v11, v7);
  }
  else
  {
    *a3 = 0;
  }
  v12 = 0;
LABEL_16:
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      if (!v12)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v12)
    return result;
LABEL_20:
  v15 = *a2;
  if (*a2)
    *(_DWORD *)v15 += 2;
  *a3 = v15;
  return result;
}

uint64_t WebCore::Page::removeRootFrame(WebCore::Page *this, WebCore::LocalFrame *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v6 = *((_QWORD *)this + 18);
  v4 = (uint64_t *)((char *)this + 144);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = v11;
      v14 = *(_QWORD *)(v5 + 8 * v11);
      if (v14 != -1)
      {
        if (!v14)
          return (*(uint64_t (**)(_QWORD, WebCore::LocalFrame *))(**(_QWORD **)(*((_QWORD *)this + 6) + 16)
                                                                          + 232))(*(_QWORD *)(*((_QWORD *)this + 6) + 16), a2);
        if (*(WebCore::LocalFrame **)(v14 + 8) == a2)
          break;
      }
      v11 = (v13 + i) & v7;
    }
    if ((_DWORD)v13 != *(_DWORD *)(v5 - 4))
    {
      *(_QWORD *)(v5 + 8 * v13) = 0;
      do
      {
        v15 = __ldaxr((unsigned int *)v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v14));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)v14);
        v25 = v5;
        v26 = v4;
        v24 = v13;
        WTF::fastFree((WTF *)v14, a2);
        v13 = v24;
        v5 = v25;
        v4 = v26;
      }
      *(_QWORD *)(v5 + 8 * v13) = -1;
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl>>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  return (*(uint64_t (**)(_QWORD, WebCore::LocalFrame *))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 232))(*(_QWORD *)(*((_QWORD *)this + 6) + 16), a2);
}

uint64_t WebCore::Page::setMediaKeysStorageDirectory(WebCore::Page *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(_QWORD, const WTF::String *))(**((_QWORD **)this + 218) + 32))(*((_QWORD *)this + 218), a2);
}

void WebCore::Page::reloadExecutionContextsForOrigin(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  _BOOL4 v17;
  _BOOL4 v18;
  char v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BOOL4 v29;
  _BOOL4 v31;
  _BOOL4 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  char *v45;
  char v46;
  char *v47;

  v3 = *(_QWORD *)(a1 + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (!v4)
    return;
  v8 = (unsigned int *)(v3 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  WebCore::Document::topOrigin(*(WebCore::Document **)(v3 + 296), a2);
  v11 = (WTF::StringImpl *)(v10 + 8);
  if ((WTF::StringImpl *)(v10 + 8) != a2)
  {
    v12 = *(unsigned int *)(v10 + 32);
    v13 = *((_DWORD *)a2 + 6);
    v15 = v13 == (_DWORD)v12 && v13 != -1;
    if ((_DWORD)v12 == -1 || !v15)
    {
      v17 = v13 == -1;
      if ((_DWORD)v12 == -1)
        v18 = v17;
      else
        v18 = v15;
      if (!v18)
        goto LABEL_76;
    }
    else
    {
      v47 = &v46;
      v19 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v12])(&v47);
      if ((v19 & 1) == 0)
        goto LABEL_76;
    }
  }
  v20 = *(_QWORD *)(a1 + 160);
  if (v20)
  {
    while (*(_BYTE *)(v20 + 144))
    {
      v34 = WebCore::FrameTree::traverseNext((_QWORD *)(v20 + 48), 0);
LABEL_69:
      v20 = v34;
      if (!v34)
        goto LABEL_76;
    }
    v21 = (unsigned int *)(v20 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    if (*(_BYTE *)(a3 + 16)
      && (*(_QWORD *)(v20 + 32) == *(_QWORD *)a3 ? (v23 = *(_QWORD *)(v20 + 40) == *(_QWORD *)(a3 + 8)) : (v23 = 0), v23)
      || (v24 = *(_QWORD *)(v20 + 296)) == 0)
    {
      v34 = WebCore::FrameTree::traverseNext((_QWORD *)(v20 + 48), 0);
      do
      {
LABEL_67:
        v38 = __ldaxr(v21);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v21));
      if (!v39)
      {
        atomic_store(1u, v21);
        v40 = (char *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v40 = off_1E31FE290;
        *((_QWORD *)v40 + 1) = v21;
        v47 = v40;
        WTF::ensureOnMainThread();
        v41 = v47;
        v47 = 0;
        if (v41)
          (*(void (**)(char *))(*(_QWORD *)v41 + 8))(v41);
      }
      goto LABEL_69;
    }
    *(_DWORD *)(v24 + 24) += 2;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v24 + 192), v11);
    if ((WTF::StringImpl *)(v25 + 8) != (WTF::StringImpl *)((char *)a2 + 32))
    {
      v26 = *(unsigned int *)(v25 + 32);
      v27 = *((_DWORD *)a2 + 14);
      v29 = v27 == (_DWORD)v26 && v27 != -1;
      if ((_DWORD)v26 == -1 || !v29)
      {
        v31 = v27 == -1;
        if ((_DWORD)v26 == -1)
          v32 = v31;
        else
          v32 = v29;
        if (!v32)
          goto LABEL_62;
      }
      else
      {
        v47 = &v46;
        if ((((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v26])(&v47) & 1) == 0)
        {
LABEL_62:
          v34 = WebCore::FrameTree::traverseNext((_QWORD *)(v20 + 48), 0);
          goto LABEL_65;
        }
      }
    }
    v33 = *(_QWORD **)(v20 + 152);
    ++*(_DWORD *)v33;
    WebCore::NavigationScheduler::scheduleRefresh(v33, (WebCore::Document *)v24);
    if (!*(_DWORD *)v33)
    {
      __break(0xC471u);
      JUMPOUT(0x196026B24);
    }
    --*(_DWORD *)v33;
    if (*(_QWORD *)(*(_QWORD *)(v20 + 48) + 8))
    {
      v34 = *(_QWORD *)(v20 + 72);
      if (v34)
        goto LABEL_65;
      v35 = *(_QWORD *)(v20 + 56);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 8);
        if (v36)
        {
          do
          {
            v34 = *(_QWORD *)(v36 + 72);
            if (v34)
              break;
            v37 = *(_QWORD *)(v36 + 56);
            if (!v37)
              goto LABEL_64;
            v34 = 0;
            v36 = *(_QWORD *)(v37 + 8);
          }
          while (v36);
          goto LABEL_65;
        }
      }
    }
LABEL_64:
    v34 = 0;
LABEL_65:
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24, v11);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
    goto LABEL_67;
  }
  do
  {
LABEL_76:
    v42 = __ldaxr(v8);
    v43 = v42 - 1;
  }
  while (__stlxr(v43, v8));
  if (!v43)
  {
    atomic_store(1u, v8);
    v44 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v44 = off_1E31FE290;
    *((_QWORD *)v44 + 1) = v8;
    v47 = v44;
    WTF::ensureOnMainThread();
    v45 = v47;
    v47 = 0;
    if (v45)
      (*(void (**)(char *))(*(_QWORD *)v45 + 8))(v45);
  }
}

uint64_t WebCore::Page::willChangeLocationInCompletelyLoadedSubframe(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t v4;

  v1 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    return JSC::Heap::scheduleOpportunisticFullCollection((JSC::Heap *)(v1 + 192));
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = v4;
  WebCore::g_commonVMOrNull = v4;
  if (__ldaxr((unsigned int *)(v4 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v4 + 1096)))
  {
    goto LABEL_6;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
  return JSC::Heap::scheduleOpportunisticFullCollection((JSC::Heap *)(v1 + 192));
}

uint64_t WebCore::Page::performOpportunisticallyScheduledTasks(WTF::RunLoop *a1)
{
  uint64_t v3;

  if (WebCore::g_commonVMOrNull)
    return JSC::VM::performOpportunisticallyScheduledTasks();
  WTF::RunLoop::webIfExists(a1);
  JSC::VM::create();
  WebCore::g_commonVMOrNull = v3;
  if (__ldaxr((unsigned int *)(v3 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v3 + 1096)))
  {
    goto LABEL_6;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v3 + 192));
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v3 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v3 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v3, 0);
  return JSC::VM::performOpportunisticallyScheduledTasks();
}

uint64_t WebCore::Page::sceneIdentifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 1840);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

WTF::StringImpl *WebCore::Page::setSceneIdentifier(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 1840);
  *(_QWORD *)(a1 + 1840) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Page::setPortsForUpgradingInsecureSchemeForTesting(uint64_t this, int a2, int a3)
{
  if (*(_BYTE *)(this + 1740))
  {
    *(_WORD *)(this + 1736) = a2;
    *(_WORD *)(this + 1738) = a3;
  }
  else
  {
    *(_DWORD *)(this + 1736) = a2 | (a3 << 16);
    *(_BYTE *)(this + 1740) = 1;
  }
  return this;
}

unint64_t WebCore::Page::portsForUpgradingInsecureSchemeForTesting(WebCore::Page *this)
{
  return *((unsigned int *)this + 434) | ((unint64_t)*((unsigned __int16 *)this + 870) << 32);
}

unsigned int *WebCore::Page::willBeginWritingToolsSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::WritingToolsController::willBeginWritingToolsSession(*(_QWORD *)(a1 + 1856), a2, a3);
}

uint64_t WebCore::Page::didBeginWritingToolsSession(uint64_t a1, WTF::UUID *a2, uint64_t a3)
{
  return WebCore::WritingToolsController::didBeginWritingToolsSession(*(_QWORD *)(a1 + 1856), a2, a3);
}

void WebCore::Page::proofreadingSessionDidReceiveSuggestions(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5)
{
  WebCore::WritingToolsController::proofreadingSessionDidReceiveSuggestions(*(_QWORD *)(a1 + 1856), a2, a3, a4, a5);
}

unsigned int *WebCore::Page::proofreadingSessionDidUpdateStateForSuggestion(uint64_t a1, uint64_t a2, int a3, WTF::UUID *a4)
{
  return WebCore::WritingToolsController::proofreadingSessionDidUpdateStateForSuggestion(*(_QWORD *)(a1 + 1856), a2, a3, a4);
}

unsigned int *WebCore::Page::didEndWritingToolsSession(uint64_t a1, uint64_t a2, int a3)
{
  return WebCore::WritingToolsController::didEndWritingToolsSession(*(_QWORD *)(a1 + 1856), a2, a3);
}

uint64_t WebCore::Page::compositionSessionDidReceiveTextWithReplacementRange(uint64_t a1, unint64_t *a2, const WebCore::AttributedString *a3, unint64_t *a4, uint64_t a5, int a6)
{
  return WebCore::WritingToolsController::compositionSessionDidReceiveTextWithReplacementRange(*(uint64_t **)(a1 + 1856), a2, a3, a4, a5, a6);
}

unsigned int *WebCore::Page::updateStateForSelectedSuggestionIfNeeded(unsigned int **this)
{
  return WebCore::WritingToolsController::updateStateForSelectedSuggestionIfNeeded(this[232]);
}

_QWORD *WebCore::Page::contextRangeForSessionWithID@<X0>(WebCore::Page *this@<X0>, UUID *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;

  v4 = *((_QWORD *)this + 232);
  result = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::variant<std::monostate,WebCore::WritingToolsController::ProofreadingState,WebCore::WritingToolsController::CompositionState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(v4 + 24), (uint64_t *)a2);
  v6 = *(_QWORD **)(v4 + 24);
  if (v6)
    v6 += 8 * (unint64_t)*((unsigned int *)v6 - 1);
  if (v6 == result)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  else
  {
    v7 = *((unsigned int *)result + 14);
    if ((_DWORD)v7 == -1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return (_QWORD *)WebCore::Page::writingToolsSessionDidReceiveAction(v8);
    }
    else
    {
      v14 = &v13;
      result = ((_QWORD *(*)(uint64_t *__return_ptr, char **, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22WritingToolsController28contextRangeForSessionWithIDERKNS6_4UUIDEE3__0JZNKS9_28contextRangeForSessionWithIDESC_E3__1ZNKS9_28contextRangeForSessionWithIDESC_E3__2EEEEEJRKNS0_6__implIJNS_9monostateENS9_17ProofreadingStateENS9_16CompositionStateEEEEEEEDcOT_DpOT0____fmatrix
                                                                                  + v7))(&v9, &v14, result + 2);
      *(_QWORD *)a3 = v9;
      *(_DWORD *)(a3 + 8) = v10;
      *(_QWORD *)(a3 + 16) = v11;
      *(_DWORD *)(a3 + 24) = v12;
      *(_BYTE *)(a3 + 32) = 1;
    }
  }
  return result;
}

uint64_t WebCore::Page::writingToolsSessionDidReceiveAction(uint64_t a1, uint64_t a2, int a3)
{
  return WebCore::WritingToolsController::writingToolsSessionDidReceiveAction(*(_QWORD *)(a1 + 1856), a2, a3);
}

void WebCore::sampleColor(uint64_t a1, WebCore *a2, unsigned int *a3)
{
  WebCore::DestinationColorSpace *isValidSampleLocation;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  CFTypeRef v13;
  unsigned __int8 **v14;
  void *v15;
  uint8x8_t v16;
  CFTypeRef v17;
  _DWORD *v18;
  int16x8_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  CFTypeRef cf;
  int32x4_t v26;
  uint64_t *v27;
  unsigned __int8 **v28;
  uint64_t v29;
  CFTypeRef v30;

  isValidSampleLocation = (WebCore::DestinationColorSpace *)WebCore::isValidSampleLocation(a2, (WebCore::Document *)*a3, (const WebCore::IntPoint *)a3[1]);
  if ((isValidSampleLocation & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v7 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(isValidSampleLocation);
  v8 = *v7;
  if (*v7)
    CFRetain(*v7);
  v9 = *((_QWORD *)a2 + 66);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    v11 = *(_QWORD *)(v10 + 288);
  else
    v11 = 0;
  WebCore::LocalFrameView::protectedFrame(v11, &v27);
  v12 = v27;
  v26.i64[0] = *(_QWORD *)a3;
  v26.i64[1] = 0x100000001;
  LOWORD(v24) = 33;
  BYTE2(v24) = 1;
  cf = v8;
  if (v8)
    CFRetain(v8);
  v29 = 0;
  v30 = 0;
  WebCore::snapshotFrameRectWithClip(v12, &v26, (uint64_t)&v29, (unsigned __int16 *)&v24, (uint64_t *)&v28);
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v27);
  v14 = v28;
  if (v28)
  {
    LOWORD(v29) = 513;
    v30 = v8;
    if (v8)
      CFRetain(v8);
    WebCore::IntSize::IntSize(&v26.i32[2], (const WebCore::FloatSize *)(v14 + 2));
    v26.i64[0] = 0;
    WebCore::ImageBufferAllocator::ImageBufferAllocator(&v27);
    (*((void (**)(uint64_t *__return_ptr, unsigned __int8 **, uint64_t *, int32x4_t *, uint64_t **))*v14 + 11))(&v24, v14, &v29, &v26, &v27);
    v17 = v30;
    v30 = 0;
    if (v17)
      CFRelease(v17);
    v18 = (_DWORD *)v24;
    if (v24)
    {
      if (*(_QWORD *)(v24 + 48) <= 3uLL)
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 16) = 0;
        v24 = 0;
LABEL_19:
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        else
          --v18[2];
        goto LABEL_21;
      }
      v16.i32[0] = **(_DWORD **)(v24 + 40);
      v19 = (int16x8_t)vmovl_u8(v16);
      *(int16x4_t *)v19.i8 = vrev32_s16(*(int16x4_t *)v19.i8);
      *(int8x8_t *)v19.i8 = vext_s8(*(int8x8_t *)v19.i8, *(int8x8_t *)v19.i8, 6uLL);
      LODWORD(v29) = vmovn_s16(v19).u32[0];
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v29);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 4) = v21;
      *(_DWORD *)(a1 + 8) = v22;
      *(_DWORD *)(a1 + 12) = v23;
      *(_BYTE *)(a1 + 16) = 1;
      v18 = (_DWORD *)v24;
      v24 = 0;
      if (v18)
        goto LABEL_19;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
    }
LABEL_21:
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v14 + 1, v15);
    goto LABEL_22;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
LABEL_22:
  if (v8)
    CFRelease(v8);
}

double WebCore::colorDifference(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v3 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v5 = v4;
  v7 = v6;
  v8 = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a2);
  return sqrt((float)(v10 - v7) * (float)(v10 - v7)+ (float)(v8 - v3) * (float)(v8 - v3)+ (float)(v9 - v5) * (float)(v9 - v5));
}

float32x2_t WebCore::averageColor(uint64_t a1, unint64_t a2, double a3, double a4, double a5)
{
  float *v5;
  uint64_t v6;
  float32x2_t v7;
  float v8;

  if (a2)
  {
    v5 = (float *)(a1 + 8);
    v6 = 16 * a2;
    v7 = 0;
    v8 = 0.0;
    do
    {
      v7 = vadd_f32(v7, (float32x2_t)vand_s8(*(int8x8_t *)(v5 - 2), vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)(v5 - 2)), (int8x8_t)vcgez_f32(*(float32x2_t *)(v5 - 2)))));
      v8 = v8 + *v5;
      v5 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }
  *(float *)&a5 = (float)a2;
  return vdiv_f32(v7, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0));
}

uint64_t WebCore::PageConfiguration::PageConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26)
{
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v61[9];

  v29 = a21;
  v28 = a22;
  v31 = a19;
  v30 = a20;
  v33 = a17;
  v32 = a18;
  v35 = a15;
  v34 = a16;
  v36 = a14;
  v37 = a9;
  v38 = a23;
  v39 = a26;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  v40 = *a25;
  *a25 = 0;
  *(_QWORD *)(a1 + 32) = v40;
  v41 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 40) = v41;
  v42 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v42;
  v43 = *a24;
  *a24 = 0;
  *(_QWORD *)(a1 + 72) = v43;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  v44 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 360) = v44;
  v45 = *a12;
  *a12 = 0;
  *(_QWORD *)(a1 + 368) = v45;
  v46 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 376) = v46;
  v47 = *a11;
  *a11 = 0;
  *(_QWORD *)(a1 + 384) = v47;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = -1;
  v48 = *(unsigned int *)(a13 + 8);
  if ((_DWORD)v48 != -1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E3400648[v48])(v61, a1 + 400);
    v39 = a26;
    v35 = a15;
    v36 = a14;
    v30 = a20;
    v32 = a18;
    v33 = a17;
    v38 = a23;
    v29 = a21;
    v34 = a16;
    v28 = a22;
    v37 = a9;
    v31 = a19;
    *(_DWORD *)(a1 + 408) = v48;
  }
  *(_QWORD *)(a1 + 416) = v36;
  *(_QWORD *)(a1 + 424) = v35;
  v49 = *v34;
  *v34 = 0;
  *(_QWORD *)(a1 + 432) = v49;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = 0;
  v50 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = v50;
  v51 = *v37;
  *v37 = 0;
  *(_QWORD *)(a1 + 504) = v51;
  *(_QWORD *)(a1 + 512) = 0;
  v52 = *v31;
  *v31 = 0;
  *(_QWORD *)(a1 + 520) = v52;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  v53 = *v33;
  *v33 = 0;
  *(_QWORD *)(a1 + 568) = v53;
  v54 = *v32;
  *v32 = 0;
  *(_QWORD *)(a1 + 576) = v54;
  *(_BYTE *)(a1 + 584) = 1;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_WORD *)(a1 + 624) = 1;
  *(_BYTE *)(a1 + 626) = 1;
  *(_BYTE *)(a1 + 628) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 634) = 0;
  v55 = *v30;
  *v30 = 0;
  *(_QWORD *)(a1 + 640) = v55;
  v56 = *v29;
  *v29 = 0;
  *(_QWORD *)(a1 + 648) = v56;
  *(_QWORD *)(a1 + 656) = 0;
  v57 = *v28;
  *v28 = 0;
  *(_QWORD *)(a1 + 664) = v57;
  v58 = *v38;
  *v38 = 0;
  *(_QWORD *)(a1 + 672) = v58;
  *(_BYTE *)(a1 + 680) = 0;
  v59 = *v39;
  *v39 = 0;
  *(_QWORD *)(a1 + 688) = v59;
  return a1;
}

{
  return WebCore::PageConfiguration::PageConfiguration(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

WebCore::PageConsoleClient *WebCore::PageConsoleClient::PageConsoleClient(WebCore::PageConsoleClient *this, WebCore::Page *a2)
{
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E3400420;
  *((_QWORD *)this + 1) = 0;
  WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>::WeakRef<void>((unsigned int **)this + 3, (uint64_t)a2);
  return this;
}

{
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;

  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E3400420;
  *((_QWORD *)this + 1) = 0;
  if (!*((_QWORD *)a2 + 2))
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    v6 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v5;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  v9 = (unsigned int *)*((_QWORD *)a2 + 2);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *((_QWORD *)this + 3) = v9;
  return this;
}

void WebCore::PageConsoleClient::~PageConsoleClient(WebCore::PageConsoleClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_DWORD *)this + 4))
  {
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WebCore::PageConsoleClient::shouldPrintExceptions(WebCore::PageConsoleClient *this)
{
  return WebCore::printExceptions;
}

uint64_t WebCore::PageConsoleClient::setShouldPrintExceptions(uint64_t this)
{
  WebCore::printExceptions = this;
  return this;
}

void WebCore::PageConsoleClient::mute(WebCore::PageConsoleClient *this)
{
  ++WebCore::muteCount;
}

void WebCore::PageConsoleClient::unmute(WebCore::PageConsoleClient *this)
{
  --WebCore::muteCount;
}

_DWORD *WebCore::PageConsoleClient::logMessageToSystemConsole(Inspector::ScriptArguments **this, const Inspector::ConsoleMessage *a2)
{
  WTF::StringImpl *v3;
  _DWORD *result;
  int v5;
  WTF *v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (*((_BYTE *)this + 1) == 13)
  {
    Inspector::ScriptArguments::globalObject(this[2]);
    v3 = this[2];
    ++*(_DWORD *)v3;
    v10 = v3;
    JSC::ConsoleClient::printConsoleMessageWithArguments();
    result = v10;
    if (!v10)
      return result;
    v5 = *(_DWORD *)v10 - 1;
    if (*(_DWORD *)v10 == 1)
    {
      Inspector::ScriptArguments::~ScriptArguments(v10);
      return (_DWORD *)WTF::fastFree(v6, v7);
    }
  }
  else
  {
    Inspector::ConsoleMessage::toString((Inspector::ConsoleMessage *)this);
    JSC::ConsoleClient::printConsoleMessage();
    result = v9;
    if (!v9)
      return result;
    v5 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 == 2)
      return (_DWORD *)WTF::StringImpl::destroy(v9, v8);
  }
  *result = v5;
  return result;
}

Inspector::ScriptArguments **WTF::Ref<Inspector::ScriptArguments,WTF::RawPtrTraits<Inspector::ScriptArguments>,WTF::DefaultRefDerefTraits<Inspector::ScriptArguments>>::~Ref(Inspector::ScriptArguments **a1)
{
  Inspector::ScriptArguments *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      Inspector::ScriptArguments::~ScriptArguments(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v8 = *(WTF::StringImpl ***)a1;
    v9 = 8 * v4;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  return a1;
}

WTF::StringImpl *WebCore::PageConsoleClient::addMessage(uint64_t *ParserLocation, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::Document *this)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _DWORD *v16;
  unsigned int v17[2];
  WTF::StringImpl *v18;

  v10 = ParserLocation;
  *(_QWORD *)v17 = 0;
  v18 = 0;
  if (this)
  {
    ParserLocation = WebCore::Document::getParserLocation(this, (WTF::String *)&v18, &v17[1], v17);
    v12 = v17[0];
    v11 = v17[1];
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v16 = 0;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (ParserLocation = *(uint64_t **)(v13 + 96)) == 0)
    ParserLocation = (uint64_t *)WebCore::threadGlobalDataSlow((WebCore *)ParserLocation);
  WebCore::PageConsoleClient::addMessage(v10, a2, a3, a4, (uint64_t)&v18, v11, v12, &v16, ParserLocation[8], a5);
  if (v16)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v16);
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::PageConsoleClient::addMessage(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;

  v11 = 0;
  v5 = *a5;
  *a5 = 0;
  v10 = v5;
  WebCore::PageConsoleClient::addMessage(a1, a2, a3, a4, (uint64_t)&v11, 0, 0, &v10, 0, 0);
  if (v10)
  {
    if (*v10 == 1)
    {
      v8 = (WTF *)MEMORY[0x19AEA6024]();
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*v10;
    }
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD **WTF::Ref<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>::~Ref(_DWORD **a1)
{
  _DWORD *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 == 1)
    {
      v4 = (WTF *)MEMORY[0x19AEA6024]();
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*v2;
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::PageConsoleClient::messageWithTypeAndLevel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, Inspector::ScriptArguments **a5)
{
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Page *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  WebCore::Page *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;

  v31 = a2;
  v30 = a3;
  v28 = 0;
  v29 = a4;
  Inspector::ScriptArguments::getArgumentsAsStrings(*a5);
  if (v27)
  {
    WTF::String::operator=((uint64_t *)&v28, v26);
    v8 = v27 - 1;
    v9 = v26 + 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  LOBYTE(v23) = 3;
  v10 = *a5;
  *(_DWORD *)v10 = *(_DWORD *)*a5 + 1;
  v24 = v10;
  std::make_unique[abi:sn180100]<Inspector::ConsoleMessage,JSC::MessageSource,JSC::MessageType &,JSC::MessageLevel &,WTF::String &,WTF::Ref<Inspector::ScriptArguments,WTF::RawPtrTraits<Inspector::ScriptArguments>,WTF::DefaultRefDerefTraits<Inspector::ScriptArguments>>,JSC::JSGlobalObject *&>(&v25, (unsigned __int8 *)&v23, &v31, &v30, (uint64_t)&v28, (uint64_t)&v24, &v29);
  WTF::Ref<Inspector::ScriptArguments,WTF::RawPtrTraits<Inspector::ScriptArguments>,WTF::DefaultRefDerefTraits<Inspector::ScriptArguments>>::~Ref(&v24);
  v11 = v25;
  v12 = *(WTF::StringImpl **)(v25 + 48);
  if (v12)
    *(_DWORD *)v12 += 2;
  v24 = v12;
  v13 = *(unsigned int *)(v11 + 64);
  v14 = *(unsigned int *)(v11 + 68);
  v15 = *(WebCore::Page **)(*(_QWORD *)(a1 + 24) + 8);
  ++*(_DWORD *)v15;
  v22 = v11;
  v23 = v15;
  v25 = 0;
  WebCore::InspectorInstrumentation::addMessageToConsole(*(_QWORD *)(*((_QWORD *)v15 + 10) + 8), &v22);
  std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100](&v22);
  v16 = *((_QWORD *)v15 + 126);
  if ((v16 & 0x8000000000000000) == 0 || v16 == -1)
  {
    if (v27)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, uint64_t, uint64_t, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)v15 + 6) + 16) + 184))(*(_QWORD *)(*((_QWORD *)v15 + 6) + 16), 3, a3, &v28, v13, v14, &v24);
      (*(void (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)v15 + 6) + 16) + 192))(*(_QWORD *)(*((_QWORD *)v15 + 6) + 16), 3, a3, &v28, v9, v8, v13, v14, &v24);
    }
    if ((*(_QWORD *)(*((_QWORD *)v15 + 14) + 688) & 4) != 0 || WebCore::printExceptions)
      JSC::ConsoleClient::printConsoleMessageWithArguments();
  }
  WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v23);
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100](&v25);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v19);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

Inspector::InspectorConsoleAgent *WebCore::PageConsoleClient::count(WebCore::PageConsoleClient *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t v6;
  Inspector::InspectorConsoleAgent *result;
  WTF *v8;
  void *v9;

  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  ++*(_DWORD *)v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
  result = (Inspector::InspectorConsoleAgent *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8));
  if ((_DWORD)result)
  {
    result = *(Inspector::InspectorConsoleAgent **)(v6 + 16);
    if (result)
      result = (Inspector::InspectorConsoleAgent *)Inspector::InspectorConsoleAgent::count(result, a2, a3);
  }
  if (*(_DWORD *)v5 == 1)
  {
    WebCore::Page::~Page(v5);
    return (Inspector::InspectorConsoleAgent *)WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return result;
}

uint64_t WebCore::PageConsoleClient::protectedPage@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(this + 24) + 8);
  ++*v2;
  *a2 = v2;
  return this;
}

Inspector::InspectorConsoleAgent *WebCore::PageConsoleClient::countReset(WebCore::PageConsoleClient *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t v6;
  Inspector::InspectorConsoleAgent *result;
  WTF *v8;
  void *v9;

  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  ++*(_DWORD *)v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
  result = (Inspector::InspectorConsoleAgent *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8));
  if ((_DWORD)result)
  {
    result = *(Inspector::InspectorConsoleAgent **)(v6 + 16);
    if (result)
      result = (Inspector::InspectorConsoleAgent *)Inspector::InspectorConsoleAgent::countReset(result, a2, a3);
  }
  if (*(_DWORD *)v5 == 1)
  {
    WebCore::Page::~Page(v5);
    return (Inspector::InspectorConsoleAgent *)WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return result;
}

WTF::StringImpl *WebCore::PageConsoleClient::profile(WTF::StringImpl *this, JSC::JSGlobalObject *a2, const WTF::StringImpl **a3)
{
  uint64_t v3;
  WTF *v5;
  void *v6;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  ++*(_DWORD *)v3;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    this = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + 8) + 216);
    if (this)
      this = WebCore::InspectorTimelineAgent::startFromConsole(this, a2, a3);
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    return (WTF::StringImpl *)WTF::fastFree(v5, v6);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return this;
}

WTF::StringImpl *WebCore::PageConsoleClient::profileEnd(WTF::StringImpl *this, JSC::JSGlobalObject *a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  WTF *v5;
  void *v6;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  ++*(_DWORD *)v3;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    this = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + 8) + 216);
    if (this)
      this = WebCore::InspectorTimelineAgent::stopFromConsole(this, a2, a3);
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    return (WTF::StringImpl *)WTF::fastFree(v5, v6);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return this;
}

Inspector::InspectorConsoleAgent *WebCore::PageConsoleClient::takeHeapSnapshot(Inspector::InspectorConsoleAgent *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 160) + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        this = *(Inspector::InspectorConsoleAgent **)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 8) + 16);
        if (this)
          return (Inspector::InspectorConsoleAgent *)Inspector::InspectorConsoleAgent::takeHeapSnapshot(this, a3);
      }
    }
  }
  return this;
}

Inspector::InspectorConsoleAgent *WebCore::PageConsoleClient::time(Inspector::InspectorConsoleAgent *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  WebCore::Frame *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  v3 = *(WebCore::Frame **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 160);
  v4 = *((_QWORD *)v3 + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
      this = (Inspector::InspectorConsoleAgent *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8));
      if ((_DWORD)this)
      {
        v9 = *(_QWORD *)(v8 + 232);
        if (v9)
        {
          WebCore::TimelineRecordFactory::createTimeStampData(a3, (uint64_t *)&v11);
          WebCore::InspectorTimelineAgent::appendRecord(v9, &v11, 0xDu, 1, v3, 0, 0);
          v10 = v11;
          v11 = 0;
          if (v10)
          {
            if (*v10 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v10;
          }
        }
        this = *(Inspector::InspectorConsoleAgent **)(v8 + 16);
        if (this)
          return (Inspector::InspectorConsoleAgent *)Inspector::InspectorConsoleAgent::startTiming(this, a2, a3);
      }
    }
  }
  return this;
}

uint64_t WebCore::PageConsoleClient::timeLog(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 160) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + 8);
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 16))(*(_QWORD *)(v3 + 8));
      if ((_DWORD)result)
      {
        result = *(_QWORD *)(v3 + 16);
        if (result)
          return Inspector::InspectorConsoleAgent::logTiming();
      }
    }
  }
  return result;
}

Inspector::InspectorConsoleAgent *WebCore::PageConsoleClient::timeEnd(Inspector::InspectorConsoleAgent *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  WebCore::Frame *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  Inspector::InspectorConsoleAgent *v10;

  v3 = *(WebCore::Frame **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 160);
  v4 = *((_QWORD *)v3 + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
      this = (Inspector::InspectorConsoleAgent *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8));
      if ((_DWORD)this)
      {
        this = *(Inspector::InspectorConsoleAgent **)(v8 + 16);
        if (this)
          this = (Inspector::InspectorConsoleAgent *)Inspector::InspectorConsoleAgent::stopTiming(this, a2, a3);
        v9 = *(_QWORD *)(v8 + 232);
        if (v9)
        {
          WebCore::TimelineRecordFactory::createTimeStampData(a3, (uint64_t *)&v10);
          WebCore::InspectorTimelineAgent::appendRecord(v9, &v10, 0xEu, 1, v3, 0, 0);
          this = v10;
          v10 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 1)
              return (Inspector::InspectorConsoleAgent *)WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)this;
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::PageConsoleClient::timeStamp(WTF::StringImpl *result, uint64_t a2, Inspector::ScriptArguments **a3)
{
  WebCore::Frame *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(WebCore::Frame **)(*(_QWORD *)(*((_QWORD *)result + 3) + 8) + 160);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v5 = *((_QWORD *)v3 + 3);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        return WebCore::InspectorInstrumentation::consoleTimeStampImpl(*(WTF::StringImpl **)(*(_QWORD *)(v6 + 80) + 8), v3, a3);
    }
  }
  return result;
}

void WebCore::PageConsoleClient::record(uint64_t a1, JSC::JSGlobalObject *a2, Inspector::ScriptArguments **a3)
{
  uint64_t v6;
  unint64_t Object;
  uint64_t v8;
  WebCore::CanvasRenderingContext *v9;
  uint64_t v10;
  JSC::JSObject *v11;
  WebCore::InspectorInstrumentation *v12;
  WebCore::ScriptExecutionContext *v13;
  uint64_t v14;
  uint64_t v15;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    if (*((_DWORD *)*a3 + 7))
    {
      v6 = Inspector::ScriptArguments::argumentAt(*a3);
      if ((v6 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject((JSC::JSCell *)v6);
        if (Object)
        {
          v8 = WebCore::canvasRenderingContext(Object);
          if (v8)
          {
            v9 = (WebCore::CanvasRenderingContext *)v8;
            if (*((_DWORD *)*a3 + 7) < 2u
              || (v10 = Inspector::ScriptArguments::argumentAt(*a3), (v10 & 0xFFFE000000000002) != 0))
            {
              v11 = 0;
            }
            else
            {
              v11 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v10);
            }
            v12 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v9 + 4)
                                                                                           + 144))(*((_QWORD **)v9 + 4));
            if (v12)
            {
              v14 = WebCore::InspectorInstrumentation::instrumentingAgents(v12, v13);
              if (v14)
              {
                v15 = *(_QWORD *)(v14 + 96);
                if (v15)
                  WebCore::InspectorCanvasAgent::consoleStartRecordingCanvas(v15, v9, a2, v11);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::canvasRenderingContext(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v25;

  v2 = JSC::jsDynamicCast<WebCore::JSHTMLCanvasElement *>(a1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
      return *(_QWORD *)(v3 + 248);
  }
  if ((a1 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSOffscreenCanvas::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      v21 = 16 * v5;
      do
        v21 = *(_QWORD *)(v21 + 16);
      while ((char **)v21 != &WebCore::JSOffscreenCanvas::s_info && v21 != 0);
      if (!v21)
      {
        if ((_DWORD)v5 && v7 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSOffscreenCanvasRenderingContext2D::s_info && v7 != 0);
        }
        if (v6)
        {
          result = *(_QWORD *)(a1 + 24);
          if (result)
            return result;
        }
        goto LABEL_11;
      }
      return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    }
    if ((_DWORD)v5)
      return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  }
LABEL_11:
  v9 = JSC::jsDynamicCast<WebCore::JSCanvasRenderingContext2D *>(a1);
  if (!v9 || (result = *(_QWORD *)(v9 + 24)) == 0)
  {
    if ((a1 & 0xFFFE000000000002) != 0)
      goto LABEL_63;
    v10 = *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSImageBitmapRenderingContext::s_info;
    else
      v13 = 1;
    v14 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
    if (!v13)
    {
      v15 = 16 * v10;
      do
      {
        v15 = *(_QWORD *)(v15 + 16);
        v14 = v15 != 0;
      }
      while ((char **)v15 != &WebCore::JSImageBitmapRenderingContext::s_info && v15 != 0);
    }
    if (!v14 || (result = *(_QWORD *)(a1 + 24)) == 0)
    {
      v17 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v10)
      {
        v17 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
        if (v12 != &WebCore::JSWebGLRenderingContext::s_info)
        {
          v18 = 16 * v10;
          do
          {
            v18 = *(_QWORD *)(v18 + 16);
            v17 = v18 != 0;
          }
          while ((char **)v18 != &WebCore::JSWebGLRenderingContext::s_info && v18 != 0);
        }
      }
      if (v17)
      {
        v20 = *(_QWORD *)(a1 + 24);
        if (v20)
          return v20 + 8;
      }
      if ((_DWORD)v10 && v12 != &WebCore::JSWebGL2RenderingContext::s_info)
      {
        do
        {
          v12 = (char **)v12[2];
          v11 = v12 != 0;
        }
        while (v12 != &WebCore::JSWebGL2RenderingContext::s_info && v12 != 0);
      }
      if (v11)
      {
        v25 = *(_QWORD *)(a1 + 24);
LABEL_65:
        if (v25)
          return v25 + 8;
        else
          return 0;
      }
LABEL_63:
      v25 = 0;
      goto LABEL_65;
    }
  }
  return result;
}

void WebCore::PageConsoleClient::recordEnd(uint64_t a1, uint64_t a2, Inspector::ScriptArguments **a3)
{
  uint64_t v4;
  unint64_t Object;
  uint64_t v6;
  WebCore::CanvasRenderingContext *v7;
  WebCore::InspectorInstrumentation *v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  uint64_t v11;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    if (*((_DWORD *)*a3 + 7))
    {
      v4 = Inspector::ScriptArguments::argumentAt(*a3);
      if ((v4 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject((JSC::JSCell *)v4);
        if (Object)
        {
          v6 = WebCore::canvasRenderingContext(Object);
          if (v6)
          {
            v7 = (WebCore::CanvasRenderingContext *)v6;
            v8 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 32) + 144))(*(_QWORD *)(v6 + 32));
            if (v8)
            {
              v10 = WebCore::InspectorInstrumentation::instrumentingAgents(v8, v9);
              if (v10)
              {
                v11 = *(_QWORD *)(v10 + 96);
                if (v11)
                  WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame(v11, v7, 1);
              }
            }
          }
        }
      }
    }
  }
}

WTF *WebCore::PageConsoleClient::screenshot(WTF::WallTime *a1, JSC::JSGlobalObject *a2, Inspector::ScriptArguments **a3)
{
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v23;
  const void *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v35;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WebCore::InspectorCanvas *v42;
  WebCore::CanvasRenderingContext *v43;
  WTF::StringImpl *v45;
  int v46;
  int String;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t **v61;
  uint64_t **v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  Inspector::ScriptArguments *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  uint64_t **v77;
  uint64_t **v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  Inspector::ScriptArguments *v90;
  uint64_t v91;
  void *v92;
  WTF *v93;
  void *v94;
  WTF *result;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  int v103;
  WTF *v104;
  void *v105;
  WTF *v106;
  void *v107;
  uint64_t v108;
  BOOL v109;
  unsigned int *v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  CFTypeRef v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF *v132;
  void *v133;
  uint64_t v134;
  float v135;
  unsigned int v136;
  float v137;
  int v138;
  WebCore::InspectorCanvas *v139;
  int v140;
  WTF::StringImpl *v141;
  float v142;
  float v143;
  unint64_t v144;
  void *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  BOOL v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned __int8 *v166;
  int v168;
  int v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  BOOL v173;
  unsigned int *v174;
  unsigned int v175;
  unint64_t v176;
  void *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  int v194;
  CFTypeRef v195;
  unsigned int v196;
  unsigned int v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  BOOL v205;
  int v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  uint64_t v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  JSC::JSGlobalObject *v224;
  WTF::StringImpl *v226;
  CFTypeRef cf;
  int32x4_t v228;
  float v229[2];
  WTF::StringImpl *v230;
  char v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  CFTypeRef v234;

  v5 = *((_QWORD *)a2 + 7);
  v230 = 0;
  WTF::WallTime::now(a1);
  v7 = v6;
  v224 = a2;
  if (!*((_DWORD *)*a3 + 7))
  {
    if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v233 = 0;
      v234 = 0;
      goto LABEL_79;
    }
    goto LABEL_153;
  }
  v8 = Inspector::ScriptArguments::argumentAt(*a3);
  v10 = v8;
  if ((v8 & 0xFFFE000000000002) != 0)
  {
    v42 = (WebCore::InspectorCanvas *)WebCore::canvasRenderingContext(v8);
    if (v42)
      goto LABEL_54;
    goto LABEL_151;
  }
  if (*(unsigned __int8 *)(v8 + 5) >= 0xF0u)
  {
    v11 = *(_QWORD *)(v8 + 24);
    if (v11)
    {
      if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        goto LABEL_76;
      v232 = 0;
      if (*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 96 == *(_QWORD *)(v11 + 40) && (*(_BYTE *)(v11 + 22) & 8) != 0
        || (v226 = (WTF::StringImpl *)&v232, (*(_WORD *)(v11 + 28) & 0x10) == 0))
      {
LABEL_289:
        v170 = v230;
        if (v230 && *((_DWORD *)v230 + 1))
          goto LABEL_350;
        v171 = v232;
        if (v232)
        {
LABEL_344:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v228.i64[0] = (uint64_t)v233;
          WebCore::ImageBuffer::toDataURL((uint64_t)v171, (WebCore *)&v228, 0, 0, 1, &v233);
          v198 = v233;
          v233 = 0;
          v230 = v198;
          if (v170)
          {
            if (*(_DWORD *)v170 == 2)
            {
              WTF::StringImpl::destroy(v170, v9);
              v207 = v233;
              v233 = 0;
              if (v207)
              {
                if (*(_DWORD *)v207 == 2)
                  WTF::StringImpl::destroy(v207, v9);
                else
                  *(_DWORD *)v207 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v170 -= 2;
              v233 = 0;
            }
          }
          v199 = (WTF::StringImpl *)v228.i64[0];
          v228.i64[0] = 0;
          if (v199)
          {
            if (*(_DWORD *)v199 == 2)
              WTF::StringImpl::destroy(v199, v9);
            else
              *(_DWORD *)v199 -= 2;
          }
LABEL_350:
          v33 = v232;
          v232 = 0;
          if (!v33)
            goto LABEL_76;
LABEL_351:
          v200 = *((_QWORD *)v33 + 1);
          if (__ldaxr((unsigned __int8 *)v200))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v200))
          {
            goto LABEL_355;
          }
          MEMORY[0x19AEA534C](v200);
LABEL_355:
          v202 = *(_QWORD *)(v200 + 8);
          v203 = v202 - 1;
          *(_QWORD *)(v200 + 8) = v202 - 1;
          if (v202 == 1)
          {
            v216 = *(_QWORD *)(v200 + 16);
            v204 = *(_QWORD *)(v200 + 24);
            *(_QWORD *)(v200 + 24) = 0;
            v205 = v216 != 0;
          }
          else
          {
            v204 = 0;
            v205 = 1;
          }
          v206 = __ldxr((unsigned __int8 *)v200);
          if (v206 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v200))
            {
LABEL_362:
              if (!v203)
              {
                if (v204)
                  (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
                if (!v205)
                  WTF::fastFree((WTF *)v200, v9);
              }
              goto LABEL_76;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v200);
          goto LABEL_362;
        }
        v172 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 160);
        if (v172)
          v173 = *(_BYTE *)(v172 + 144) == 0;
        else
          v173 = 0;
        if (!v173)
        {
LABEL_342:
          v171 = v232;
          if (!v232)
            goto LABEL_76;
          v170 = v230;
          goto LABEL_344;
        }
        v174 = (unsigned int *)(v172 + 8);
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 + 1, v174));
        LOWORD(v233) = 0;
        BYTE2(v233) = 1;
        v176 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v176 != -1)
        {
          v228.i64[0] = (uint64_t)v229;
          v226 = (WTF::StringImpl *)&v228;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v226, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        v234 = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
        if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
          CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
        WebCore::snapshotNode((WebCore::LocalFrameView **)v172, (WebCore::Node *)v11, (unsigned __int16 *)&v233, v228.i64);
        v178 = (WTF::StringImpl *)v228.i64[0];
        v228.i64[0] = 0;
        v179 = v232;
        v232 = v178;
        if (!v179)
        {
LABEL_338:
          v195 = v234;
          v234 = 0;
          if (v195)
            CFRelease(v195);
          do
          {
            v196 = __ldaxr(v174);
            v197 = v196 - 1;
          }
          while (__stlxr(v197, v174));
          if (!v197)
          {
            atomic_store(1u, v174);
            v218 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v218 = off_1E31FE290;
            *((_QWORD *)v218 + 1) = v174;
            v233 = v218;
            WTF::ensureOnMainThread();
            v219 = v233;
            v233 = 0;
            if (v219)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v219 + 8))(v219);
          }
          goto LABEL_342;
        }
        v180 = *((_QWORD *)v179 + 1);
        if (__ldaxr((unsigned __int8 *)v180))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v180))
        {
          goto LABEL_309;
        }
        MEMORY[0x19AEA534C](v180);
LABEL_309:
        v182 = *(_QWORD *)(v180 + 8);
        v183 = v182 - 1;
        *(_QWORD *)(v180 + 8) = v182 - 1;
        if (v182 == 1)
        {
          v220 = *(_QWORD *)(v180 + 16);
          v184 = *(_QWORD *)(v180 + 24);
          *(_QWORD *)(v180 + 24) = 0;
          v185 = v220 != 0;
        }
        else
        {
          v184 = 0;
          v185 = 1;
        }
        v186 = __ldxr((unsigned __int8 *)v180);
        if (v186 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v180))
          {
LABEL_316:
            if (!v183)
            {
              if (v184)
                (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
              if (!v185)
                WTF::fastFree((WTF *)v180, v177);
            }
            v187 = v228.i64[0];
            v228.i64[0] = 0;
            if (!v187)
              goto LABEL_338;
            v188 = *(_QWORD *)(v187 + 8);
            if (__ldaxr((unsigned __int8 *)v188))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v188))
            {
              goto LABEL_326;
            }
            MEMORY[0x19AEA534C](v188);
LABEL_326:
            v190 = *(_QWORD *)(v188 + 8);
            v191 = v190 - 1;
            *(_QWORD *)(v188 + 8) = v190 - 1;
            if (v190 == 1)
            {
              v221 = *(_QWORD *)(v188 + 16);
              v192 = *(_QWORD *)(v188 + 24);
              *(_QWORD *)(v188 + 24) = 0;
              v193 = v221 != 0;
            }
            else
            {
              v192 = 0;
              v193 = 1;
            }
            v194 = __ldxr((unsigned __int8 *)v188);
            if (v194 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v188))
              {
LABEL_333:
                if (!v191)
                {
                  if (v192)
                    (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
                  if (!v193)
                    WTF::fastFree((WTF *)v188, v177);
                }
                goto LABEL_338;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v188);
            goto LABEL_333;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v180);
        goto LABEL_316;
      }
      v13 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24);
      v14 = *(_QWORD *)(WebCore::HTMLNames::imgTag + 24);
      if (v13 == v14)
      {
        *(_DWORD *)(v11 + 24) += 2;
        WebCore::PageConsoleClient::screenshot(JSC::JSGlobalObject *,WTF::Ref<Inspector::ScriptArguments,WTF::RawPtrTraits<Inspector::ScriptArguments>,WTF::DefaultRefDerefTraits<Inspector::ScriptArguments>> &&)::$_0::operator()((unsigned int *)&v226, *(_QWORD *)(*(_QWORD *)(v11 + 176) + 24));
LABEL_286:
        v138 = *(_DWORD *)(v11 + 24);
LABEL_287:
        v169 = v138 - 2;
        if (v169)
        {
          *(_DWORD *)(v11 + 24) = v169;
        }
        else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
        }
        goto LABEL_289;
      }
      if (v13 == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
      {
        *(_DWORD *)(v11 + 24) += 2;
        v122 = *(_QWORD *)(v11 + 80);
        if (v122)
        {
          while ((*(_WORD *)(v122 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v122 + 96) + 24) != v14)
          {
            v122 = *(_QWORD *)(v122 + 56);
            if (!v122)
              goto LABEL_286;
          }
          *(_DWORD *)(v122 + 24) += 2;
          WebCore::PageConsoleClient::screenshot(JSC::JSGlobalObject *,WTF::Ref<Inspector::ScriptArguments,WTF::RawPtrTraits<Inspector::ScriptArguments>,WTF::DefaultRefDerefTraits<Inspector::ScriptArguments>> &&)::$_0::operator()((unsigned int *)&v226, *(_QWORD *)(*(_QWORD *)(v122 + 176) + 24));
          if (*(_DWORD *)(v122 + 24) == 2)
          {
            if ((*(_WORD *)(v122 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v122, v9);
          }
          else
          {
            *(_DWORD *)(v122 + 24) -= 2;
          }
        }
        goto LABEL_286;
      }
      if (v13 == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
      {
        *(_DWORD *)(v11 + 24) += 2;
        v134 = *(_QWORD *)(v11 + 1136);
        if (v134)
        {
          v135 = (*(float (**)(_QWORD))(**(_QWORD **)(v134 + 72) + 288))(*(_QWORD *)(v134 + 72));
          if (v135 >= 4294967300.0)
          {
            v136 = -1;
          }
          else if (v135 <= 0.0)
          {
            v136 = 0;
          }
          else
          {
            v136 = v135;
          }
          v134 = *(_QWORD *)(v11 + 1136);
          if (v134)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v134 + 72) + 288))(*(_QWORD *)(v134 + 72));
            if (v137 >= 4294967300.0)
            {
              LODWORD(v134) = -1;
            }
            else if (v137 <= 0.0)
            {
              LODWORD(v134) = 0;
            }
            else
            {
              LODWORD(v134) = v137;
            }
          }
        }
        else
        {
          v136 = 0;
        }
        v142 = (float)v136;
        v143 = (float)v134;
        v229[0] = (float)v136;
        v229[1] = (float)v134;
        v144 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v144 != -1)
        {
          v233 = (WTF::StringImpl *)&v231;
          v228.i64[0] = (uint64_t)&v233;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v228, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        v233 = 0;
        v234 = 0;
        WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v229, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, v228.i64, 1.0);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v234 + 4));
        v146 = (WTF::StringImpl *)v228.i64[0];
        v228.i64[0] = 0;
        v147 = v232;
        v232 = v146;
        if (!v147)
          goto LABEL_273;
        v148 = *((_QWORD *)v147 + 1);
        if (__ldaxr((unsigned __int8 *)v148))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v148))
        {
          goto LABEL_244;
        }
        MEMORY[0x19AEA534C](v148);
LABEL_244:
        v150 = *(_QWORD *)(v148 + 8);
        v151 = v150 - 1;
        *(_QWORD *)(v148 + 8) = v150 - 1;
        if (v150 == 1)
        {
          v222 = *(_QWORD *)(v148 + 16);
          v152 = *(_QWORD *)(v148 + 24);
          *(_QWORD *)(v148 + 24) = 0;
          v153 = v222 != 0;
        }
        else
        {
          v152 = 0;
          v153 = 1;
        }
        v154 = __ldxr((unsigned __int8 *)v148);
        if (v154 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v148))
          {
LABEL_251:
            if (!v151)
            {
              if (v152)
                (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
              if (!v153)
                WTF::fastFree((WTF *)v148, v145);
            }
            v155 = v228.i64[0];
            v228.i64[0] = 0;
            if (v155)
            {
              v156 = *(_QWORD *)(v155 + 8);
              if (__ldaxr((unsigned __int8 *)v156))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v156))
              {
                goto LABEL_261;
              }
              MEMORY[0x19AEA534C](v156);
LABEL_261:
              v158 = *(_QWORD *)(v156 + 8);
              v159 = v158 - 1;
              *(_QWORD *)(v156 + 8) = v158 - 1;
              if (v158 == 1)
              {
                v223 = *(_QWORD *)(v156 + 16);
                v160 = *(_QWORD *)(v156 + 24);
                *(_QWORD *)(v156 + 24) = 0;
                v161 = v223 != 0;
              }
              else
              {
                v160 = 0;
                v161 = 1;
              }
              v162 = __ldxr((unsigned __int8 *)v156);
              if (v162 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v156))
                {
LABEL_268:
                  if (!v159)
                  {
                    if (v160)
                      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
                    if (!v161)
                      WTF::fastFree((WTF *)v156, v145);
                  }
                  goto LABEL_273;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v156);
              goto LABEL_268;
            }
LABEL_273:
            v163 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v232 + 16))(v232);
            v233 = 0;
            v234 = (CFTypeRef)__PAIR64__(LODWORD(v143), LODWORD(v142));
            v164 = *(_QWORD *)(v11 + 1136);
            if (!v164)
              goto LABEL_286;
            v165 = v163;
            v166 = *(unsigned __int8 **)v164;
            if (__ldaxr(*(unsigned __int8 **)v164))
            {
              __clrex();
            }
            else if (!__stxr(1u, v166))
            {
              goto LABEL_278;
            }
            MEMORY[0x19AEA534C](v166);
LABEL_278:
            ++*((_QWORD *)v166 + 1);
            v168 = __ldxr(v166);
            if (v168 == 1)
            {
              if (!__stlxr(0, v166))
                goto LABEL_283;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v166);
LABEL_283:
            if (!*(_BYTE *)(v164 + 225))
            {
              *(_BYTE *)(v164 + 225) = 1;
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v164 + 72) + 320))(*(_QWORD *)(v164 + 72), 1);
              WebCore::HTMLMediaElement::visibilityStateChanged((WebCore::HTMLMediaElement *)v11);
            }
            (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v165 + 432))(v165, v164, &v233);
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v164);
            goto LABEL_286;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v148);
        goto LABEL_251;
      }
      if (v13 != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
        goto LABEL_289;
      v138 = *(_DWORD *)(v11 + 24) + 2;
      *(_DWORD *)(v11 + 24) = v138;
      v139 = *(WebCore::InspectorCanvas **)(v11 + 248);
      if (!v139)
        goto LABEL_287;
      WebCore::InspectorCanvas::getContentAsDataURL(v139, v9, (uint64_t)&v233);
      v140 = (int)v234;
      if ((_DWORD)v234)
        goto LABEL_223;
      v211 = v233;
      if (v233)
        *(_DWORD *)v233 += 2;
      v212 = v230;
      v230 = v211;
      if (v212)
      {
        if (*(_DWORD *)v212 == 2)
        {
          WTF::StringImpl::destroy(v212, v9);
          v140 = (int)v234;
LABEL_223:
          if (v140 == -1)
            goto LABEL_286;
          goto LABEL_388;
        }
        v140 = 0;
        *(_DWORD *)v212 -= 2;
      }
      else
      {
        v140 = 0;
      }
LABEL_388:
      ((void (*)(int32x4_t *, WTF::StringImpl **))off_1E3400658[v140])(&v228, &v233);
      goto LABEL_286;
    }
  }
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSImageData::s_info;
  else
    v19 = 1;
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v19)
  {
    v21 = 16 * v16;
    do
    {
      v21 = *(_QWORD *)(v21 + 16);
      v20 = v21 != 0;
    }
    while ((char **)v21 != &WebCore::JSImageData::s_info && v21 != 0);
  }
  if (!v20 || (v23 = *(_QWORD *)(v8 + 24)) == 0)
  {
    if ((_DWORD)v16 && v18 != &WebCore::JSImageBitmap::s_info)
    {
      do
      {
        v18 = (char **)v18[2];
        v17 = v18 != 0;
      }
      while (v18 != &WebCore::JSImageBitmap::s_info && v18 != 0);
    }
    if (v17)
    {
      v35 = *(_QWORD *)(v8 + 24);
      if (v35)
      {
        if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          goto LABEL_76;
        v37 = *(_QWORD *)(v35 + 16);
        if (!v37)
          goto LABEL_76;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v228.i64[0] = (uint64_t)v233;
        WebCore::ImageBuffer::toDataURL(v37, (WebCore *)&v228, 0, 0, 1, &v233);
        v39 = v233;
        v233 = 0;
        v40 = v230;
        v230 = v39;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::destroy(v40, v38);
            v213 = v233;
            v233 = 0;
            if (v213)
            {
              if (*(_DWORD *)v213 == 2)
                WTF::StringImpl::destroy(v213, v38);
              else
                *(_DWORD *)v213 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v40 -= 2;
            v233 = 0;
          }
        }
        v41 = (WTF::StringImpl *)v228.i64[0];
        v228.i64[0] = 0;
        if (!v41)
          goto LABEL_76;
LABEL_74:
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v38);
        else
          *(_DWORD *)v41 -= 2;
        goto LABEL_76;
      }
    }
    v42 = (WebCore::InspectorCanvas *)WebCore::canvasRenderingContext(v8);
    if (v42)
    {
LABEL_54:
      if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        goto LABEL_76;
      WebCore::InspectorCanvas::getContentAsDataURL(v42, v43, (uint64_t)&v233);
      v46 = (int)v234;
      if (!(_DWORD)v234)
      {
        v208 = v233;
        if (v233)
          *(_DWORD *)v233 += 2;
        v209 = v230;
        v230 = v208;
        if (!v209)
        {
          v46 = 0;
          goto LABEL_376;
        }
        if (*(_DWORD *)v209 != 2)
        {
          v46 = 0;
          *(_DWORD *)v209 -= 2;
          goto LABEL_376;
        }
        WTF::StringImpl::destroy(v209, v45);
        v46 = (int)v234;
      }
      if (v46 == -1)
        goto LABEL_76;
LABEL_376:
      ((void (*)(int32x4_t *, WTF::StringImpl **))off_1E3400658[v46])(&v228, &v233);
      goto LABEL_76;
    }
    v233 = 0;
    String = JSC::JSCell::getString((JSC::JSCell *)v10, a2, (WTF::String *)&v233);
    v41 = v233;
    if (!String)
    {
      v10 = 0;
      v233 = 0;
      if (!v41)
        goto LABEL_76;
      goto LABEL_74;
    }
    if (v233)
    {
      v48 = *((_DWORD *)v233 + 1);
      if (v48 > 4)
      {
        v49 = *((_QWORD *)v233 + 1);
        if ((*((_BYTE *)v233 + 16) & 4) != 0)
        {
          if (v48 == 5
            || (*(_BYTE *)v49 & 0xDF) != 0x44
            || (*(_BYTE *)(v49 + 1) & 0xDF) != 0x41
            || (*(_BYTE *)(v49 + 2) & 0xDF) != 0x54
            || (*(_BYTE *)(v49 + 3) & 0xDF) != 0x41)
          {
            goto LABEL_63;
          }
          v50 = *(unsigned __int8 *)(v49 + 4);
        }
        else
        {
          if (v48 == 5
            || (*(_WORD *)v49 & 0xFFDF) != 0x44
            || (*(_WORD *)(v49 + 2) & 0xFFDF) != 0x41
            || (*(_WORD *)(v49 + 4) & 0xFFDF) != 0x54
            || (*(_WORD *)(v49 + 6) & 0xFFDF) != 0x41)
          {
            goto LABEL_63;
          }
          v50 = *(unsigned __int16 *)(v49 + 8);
        }
        if ((v50 & 0xFFFFFFDF) == 0x1A)
        {
          *(_DWORD *)v233 += 2;
          v230 = v41;
          goto LABEL_73;
        }
      }
LABEL_63:
      v10 = 0;
LABEL_73:
      v233 = 0;
      goto LABEL_74;
    }
LABEL_151:
    v10 = 0;
    goto LABEL_76;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v25 = *(const void **)(v23 + 4);
    *(float *)&v232 = (float)(int)v25;
    *((float *)&v232 + 1) = (float)SHIDWORD(v25);
    v26 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v26 != -1)
    {
      v233 = (WTF::StringImpl *)&v226;
      v228.i64[0] = (uint64_t)&v233;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v228, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v233 = 0;
    v234 = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v232, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v226, 1.0);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v234 + 4));
    v27 = v226;
    if (v226)
    {
      v233 = 0;
      v234 = v25;
      WebCore::ImageData::pixelBuffer((WebCore::ImageData *)v23, &v228);
      v232 = 0;
      (*(void (**)(WTF::StringImpl *, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD))(*(_QWORD *)v27 + 96))(v27, v228.i64[0], &v233, &v232, 0);
      v28 = (_DWORD *)v228.i64[0];
      v228.i64[0] = 0;
      if (v28)
      {
        if (v28[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
        else
          --v28[2];
      }
      v29 = v226;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v232 = (WTF::StringImpl *)v228.i64[0];
      WebCore::ImageBuffer::toDataURL((uint64_t)v29, (WebCore *)&v232, 0, 0, 1, &v228);
      v30 = (WTF::StringImpl *)v228.i64[0];
      v228.i64[0] = 0;
      v31 = v230;
      v230 = v30;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::destroy(v31, v9);
          v210 = (WTF::StringImpl *)v228.i64[0];
          v228.i64[0] = 0;
          if (v210)
          {
            if (*(_DWORD *)v210 == 2)
              WTF::StringImpl::destroy(v210, v9);
            else
              *(_DWORD *)v210 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v31 -= 2;
          v228.i64[0] = 0;
        }
      }
      v32 = v232;
      v232 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v9);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = v226;
      v226 = 0;
      if (v33)
        goto LABEL_351;
    }
  }
LABEL_76:
  if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    goto LABEL_77;
  if (v10)
    goto LABEL_198;
LABEL_153:
  v108 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 160);
  if (v108)
    v109 = *(_BYTE *)(v108 + 144) == 0;
  else
    v109 = 0;
  if (v109)
  {
    v110 = (unsigned int *)(v108 + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 + 1, v110));
    v228.i64[0] = WebCore::ScrollView::unobscuredContentRect(*(_QWORD *)(v108 + 288), 0);
    v228.i64[1] = v112;
    LOWORD(v226) = 0;
    BYTE2(v226) = 1;
    v113 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v113 != -1)
    {
      v233 = (WTF::StringImpl *)v229;
      v232 = (WTF::StringImpl *)&v233;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v232, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v233 = 0;
    v234 = 0;
    WebCore::snapshotFrameRectWithClip((uint64_t *)v108, &v228, (uint64_t)&v233, (unsigned __int16 *)&v226, (uint64_t *)&v232);
    v114 = cf;
    cf = 0;
    if (v114)
      CFRelease(v114);
    v115 = v232;
    if (!v232)
      goto LABEL_195;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v226 = v233;
    WebCore::ImageBuffer::toDataURL((uint64_t)v115, (WebCore *)&v226, 0, 0, 1, &v233);
    v117 = v233;
    v233 = 0;
    v118 = v230;
    v230 = v117;
    if (v118)
    {
      if (*(_DWORD *)v118 == 2)
      {
        WTF::StringImpl::destroy(v118, v116);
        v141 = v233;
        v233 = 0;
        if (v141)
        {
          if (*(_DWORD *)v141 == 2)
            WTF::StringImpl::destroy(v141, v116);
          else
            *(_DWORD *)v141 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v118 -= 2;
        v233 = 0;
      }
    }
    v119 = v226;
    v226 = 0;
    if (v119)
    {
      if (*(_DWORD *)v119 == 2)
        WTF::StringImpl::destroy(v119, v116);
      else
        *(_DWORD *)v119 -= 2;
    }
    v232 = 0;
    v120 = *((_QWORD *)v115 + 1);
    if (__ldaxr((unsigned __int8 *)v120))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v120))
    {
      goto LABEL_183;
    }
    MEMORY[0x19AEA534C](v120);
LABEL_183:
    v123 = *(_QWORD *)(v120 + 8);
    v124 = v123 - 1;
    *(_QWORD *)(v120 + 8) = v123 - 1;
    if (v123 == 1)
    {
      v217 = *(_QWORD *)(v120 + 16);
      v125 = *(_QWORD *)(v120 + 24);
      *(_QWORD *)(v120 + 24) = 0;
      v126 = v217 != 0;
    }
    else
    {
      v125 = 0;
      v126 = 1;
    }
    v127 = __ldxr((unsigned __int8 *)v120);
    if (v127 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v120))
      {
LABEL_190:
        if (!v124)
        {
          if (v125)
            (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
          if (!v126)
            WTF::fastFree((WTF *)v120, v116);
        }
        do
LABEL_195:
          v128 = __ldaxr(v110);
        while (__stlxr(v128 - 1, v110));
        if (v128 == 1)
        {
          atomic_store(1u, v110);
          v214 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v214 = off_1E31FE290;
          *((_QWORD *)v214 + 1) = v110;
          v233 = v214;
          WTF::ensureOnMainThread();
          v215 = v233;
          v233 = 0;
          if (v215)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v215 + 8))(v215);
        }
        goto LABEL_197;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v120);
    goto LABEL_190;
  }
LABEL_197:
  v10 = 0;
LABEL_198:
  v102 = v230;
  if (v230 && *((_DWORD *)v230 + 1))
  {
LABEL_77:
    v233 = 0;
    v234 = 0;
    if (v10)
    {
      v52 = 1;
      goto LABEL_81;
    }
LABEL_79:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = JSC::JSString::create(v5, &v228);
    v54 = (WTF::StringImpl *)v228.i64[0];
    v228.i64[0] = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v53);
      else
        *(_DWORD *)v54 -= 2;
    }
    v52 = 0;
LABEL_81:
    v55 = *(_QWORD *)(v5 + 712);
    if (!v55)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v5 + 672));
      v55 = *(_QWORD *)(v5 + 712);
    }
    *(_QWORD *)(v5 + 712) = *(_QWORD *)v55;
    *(_QWORD *)(v55 + 16) = 0;
    *(_QWORD *)v55 = 0;
    *(_QWORD *)(v55 + 8) = 0;
    v226 = (WTF::StringImpl *)(v55 + 16);
    if (v10 && (v10 & 0xFFFE000000000002) == 0)
    {
      v56 = *(unint64_t **)((v55 & 0xFFFFFFFFFFFFF000) + 0x10);
      v57 = v56[3];
      v56 += 3;
      *(_QWORD *)v55 = v57;
      *(_QWORD *)(v55 + 8) = v56;
      *v56 = v55;
      *(_QWORD *)(v57 + 8) = v55;
    }
    *(_QWORD *)(v55 + 16) = v10;
    v58 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v233, 1uLL, (unint64_t)&v226);
    v59 = HIDWORD(v234);
    v60 = v233;
    v61 = (uint64_t **)((char *)v233 + 8 * HIDWORD(v234));
    *v61 = 0;
    if (*(_QWORD *)v58)
    {
      v62 = (uint64_t **)v58;
      v63 = *(_QWORD *)(((*(_QWORD *)v58 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v64 = *(_QWORD **)(v63 + 40);
      if (!v64)
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)(((*(_QWORD *)v58 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
        v64 = *(_QWORD **)(v63 + 40);
      }
      *(_QWORD *)(v63 + 40) = *v64;
      *v64 = 0;
      v64[1] = 0;
      v64[2] = 0;
      *v61 = v64 + 2;
      if (*v62)
        v65 = **v62;
      else
        v65 = 0;
      JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::set(v61, v65);
    }
    v66 = v59 + 1;
    HIDWORD(v234) = v66;
    if (v226)
    {
      v67 = (uint64_t *)((char *)v226 - 16);
      v68 = *(_QWORD *)((((unint64_t)v226 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v69 = (uint64_t *)*((_QWORD *)v226 - 1);
      if (v69)
      {
        v70 = *v67;
        *v69 = *v67;
        *(_QWORD *)(v70 + 8) = v69;
        *v67 = 0;
        v67[1] = 0;
      }
      *v67 = *(_QWORD *)(v68 + 40);
      *(_QWORD *)(v68 + 40) = v67;
    }
    v71 = *a3;
    if (v52 < *((unsigned int *)*a3 + 7))
    {
      while (1)
      {
        v72 = Inspector::ScriptArguments::argumentAt(v71);
        v73 = *(_QWORD *)(v5 + 712);
        if (!v73)
        {
          JSC::HandleSet::grow((JSC::HandleSet *)(v5 + 672));
          v73 = *(_QWORD *)(v5 + 712);
        }
        *(_QWORD *)(v5 + 712) = *(_QWORD *)v73;
        *(_QWORD *)(v73 + 16) = 0;
        *(_QWORD *)v73 = 0;
        *(_QWORD *)(v73 + 8) = 0;
        v228.i64[0] = v73 + 16;
        if (v72 && (v72 & 0xFFFE000000000002) == 0)
        {
          v74 = *(unint64_t **)((v73 & 0xFFFFFFFFFFFFF000) + 0x10);
          v75 = v74[3];
          v74 += 3;
          *(_QWORD *)v73 = v75;
          *(_QWORD *)(v73 + 8) = v74;
          *v74 = v73;
          *(_QWORD *)(v75 + 8) = v73;
        }
        *(_QWORD *)(v73 + 16) = v72;
        if (v66 == (_DWORD)v234)
          break;
        v77 = (uint64_t **)((char *)v60 + 8 * v66);
        *v77 = 0;
        if (v228.i64[0])
        {
          v83 = *(_QWORD *)(((v228.i64[0] - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v84 = *(_QWORD **)(v83 + 40);
          if (!v84)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(((v228.i64[0] - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
            v84 = *(_QWORD **)(v83 + 40);
          }
          *(_QWORD *)(v83 + 40) = *v84;
          *v84 = 0;
          v84[1] = 0;
          v84[2] = 0;
          *v77 = v84 + 2;
          v81 = (uint64_t *)v228.i64[0];
          if (!v228.i64[0])
          {
LABEL_113:
            v82 = 0;
LABEL_114:
            JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::set(v77, v82);
LABEL_115:
            HIDWORD(v234) = ++v66;
            if (v228.i64[0])
            {
              v85 = (uint64_t *)(v228.i64[0] - 16);
              v86 = *(_QWORD *)(((v228.i64[0] - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
              v87 = *(uint64_t **)(v228.i64[0] - 8);
              if (v87)
              {
                v88 = *v85;
                *v87 = *v85;
                *(_QWORD *)(v88 + 8) = v87;
                *v85 = 0;
                v85[1] = 0;
              }
              *v85 = *(_QWORD *)(v86 + 40);
              *(_QWORD *)(v86 + 40) = v85;
            }
            goto LABEL_119;
          }
LABEL_108:
          v82 = *v81;
          goto LABEL_114;
        }
        HIDWORD(v234) = ++v66;
LABEL_119:
        ++v52;
        v71 = *a3;
        if (v52 >= *((unsigned int *)*a3 + 7))
          goto LABEL_122;
      }
      v76 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v233, v66 + 1, (unint64_t)&v228);
      v66 = HIDWORD(v234);
      v60 = v233;
      v77 = (uint64_t **)((char *)v233 + 8 * HIDWORD(v234));
      *v77 = 0;
      if (!*(_QWORD *)v76)
        goto LABEL_115;
      v78 = (uint64_t **)v76;
      v79 = *(_QWORD *)(((*(_QWORD *)v76 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v80 = *(_QWORD **)(v79 + 40);
      if (!v80)
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)(((*(_QWORD *)v76 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
        v80 = *(_QWORD **)(v79 + 40);
      }
      *(_QWORD *)(v79 + 40) = *v80;
      *v80 = 0;
      v80[1] = 0;
      v80[2] = 0;
      *v77 = v80 + 2;
      v81 = *v78;
      if (!*v78)
        goto LABEL_113;
      goto LABEL_108;
    }
LABEL_122:
    Inspector::ScriptArguments::create();
    v89 = v228.i64[0];
    v228.i64[0] = 0;
    v90 = *a3;
    *a3 = (Inspector::ScriptArguments *)v89;
    if (!v90)
      goto LABEL_123;
    v103 = *(_DWORD *)v90 - 1;
    if (*(_DWORD *)v90 == 1)
    {
      Inspector::ScriptArguments::~ScriptArguments(v90);
      WTF::fastFree(v104, v105);
      v90 = (Inspector::ScriptArguments *)v228.i64[0];
      v228.i64[0] = 0;
      if (!v90)
        goto LABEL_123;
      v103 = *(_DWORD *)v90 - 1;
      if (*(_DWORD *)v90 == 1)
      {
        Inspector::ScriptArguments::~ScriptArguments(v90);
        WTF::fastFree(v106, v107);
        goto LABEL_123;
      }
    }
    *(_DWORD *)v90 = v103;
LABEL_123:
    v91 = WTF::fastMalloc((WTF *)0x60);
    v228.i64[0] = MEMORY[0x19AEA5F28](v91, 3, 13, 0, &v230, a3, v224, 0, v7);
    WebCore::PageConsoleClient::addMessage((uint64_t)a1, (Inspector::ScriptArguments ***)&v228);
    if (v228.i64[0])
    {
      v93 = (WTF *)MEMORY[0x19AEA5F58]();
      WTF::fastFree(v93, v94);
    }
    result = v233;
    if (HIDWORD(v234))
    {
      v96 = 8 * HIDWORD(v234);
      do
      {
        v97 = *(_QWORD *)result;
        if (*(_QWORD *)result)
        {
          v98 = (uint64_t *)(v97 - 16);
          v99 = *(_QWORD *)(((v97 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v100 = *(uint64_t **)(v97 - 8);
          if (v100)
          {
            v101 = *v98;
            *v100 = *v98;
            *(_QWORD *)(v101 + 8) = v100;
            *v98 = 0;
            v98[1] = 0;
          }
          *v98 = *(_QWORD *)(v99 + 40);
          *(_QWORD *)(v99 + 40) = v98;
          *(_QWORD *)result = 0;
        }
        result = (WTF *)((char *)result + 8);
        v96 -= 8;
      }
      while (v96);
      result = v233;
    }
    if (result)
    {
      v233 = 0;
      LODWORD(v234) = 0;
      result = (WTF *)WTF::fastFree(result, v92);
    }
    v102 = v230;
    goto LABEL_136;
  }
  v129 = WTF::fastMalloc((WTF *)0x60);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  MEMORY[0x19AEA5F28](v129, 3, 13, 2, &v233, a3, 0, 0, 0.0);
  v228.i64[0] = v129;
  v131 = v233;
  v233 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, v130);
    else
      *(_DWORD *)v131 -= 2;
  }
  WebCore::PageConsoleClient::addMessage((uint64_t)a1, (Inspector::ScriptArguments ***)&v228);
  result = (WTF *)v228.i64[0];
  if (v228.i64[0])
  {
    v132 = (WTF *)MEMORY[0x19AEA5F58]();
    result = (WTF *)WTF::fastFree(v132, v133);
  }
LABEL_136:
  v230 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      return (WTF *)WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v92);
    else
      *(_DWORD *)v102 -= 2;
  }
  return result;
}

unsigned int *WebCore::PageConsoleClient::screenshot(JSC::JSGlobalObject *,WTF::Ref<Inspector::ScriptArguments,WTF::RawPtrTraits<Inspector::ScriptArguments>,WTF::DefaultRefDerefTraits<Inspector::ScriptArguments>> &&)::$_0::operator()(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  WTF *v4;
  WTF *v5;
  float v6;
  unint64_t v7;
  void *v8;
  WTF ***v9;
  WTF **v10;
  WTF **v11;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  WTF **v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  float v37[2];
  char v38;
  WTF **v39;
  float v40;
  int v41;
  WTF *v42;
  unint64_t v43;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
    {
      v3 = result;
      if ((*(_WORD *)(v2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v2 + 720) & 0x10) != 0)
      {
        WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v42);
        result = (unsigned int *)v42;
        if (v42)
        {
          v4 = (WTF *)*((_QWORD *)v42 + 1);
          v42 = 0;
          do
          {
            v35 = __ldaxr(result);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, result));
          if (!v36)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v34);
          }
        }
        else
        {
          v4 = 0;
        }
      }
      else
      {
        v4 = *(WTF **)(v2 + 688);
        if (v4)
        {
          {
LABEL_50:
            result = (unsigned int *)WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v42);
            v5 = v42;
            WebCore::Image::nullImage(void)::nullImage = (uint64_t)v42;
LABEL_7:
            if (v4 == v5)
              return result;
            v37[0] = (*(float (**)(WTF *, _QWORD))(*(_QWORD *)v4 + 168))(v4, 0);
            v37[1] = v6;
            v7 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
            if (v7 != -1)
            {
              v42 = (WTF *)&v38;
              v39 = &v42;
              std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
            }
            v42 = 0;
            v43 = 0;
            WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v37, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v39, 1.0);
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v43 + 4));
            v9 = *(WTF ****)v3;
            v10 = v39;
            v39 = 0;
            v11 = *v9;
            *v9 = v10;
            if (!v11)
            {
LABEL_27:
              v19 = v39;
              v39 = 0;
              if (!v19)
                goto LABEL_44;
              v20 = v19[1];
              if (__ldaxr((unsigned __int8 *)v20))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v20))
              {
                goto LABEL_32;
              }
              MEMORY[0x19AEA534C](v20);
LABEL_32:
              v22 = *((_QWORD *)v20 + 1);
              v23 = v22 - 1;
              *((_QWORD *)v20 + 1) = v22 - 1;
              if (v22 == 1)
              {
                v33 = *((_QWORD *)v20 + 2);
                v24 = *((_QWORD *)v20 + 3);
                *((_QWORD *)v20 + 3) = 0;
                v25 = v33 != 0;
              }
              else
              {
                v24 = 0;
                v25 = 1;
              }
              v26 = __ldxr((unsigned __int8 *)v20);
              if (v26 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v20))
                {
                  if (!v23)
                    goto LABEL_40;
                  goto LABEL_44;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(v20);
              if (!v23)
              {
LABEL_40:
                if (v24)
                  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                if (!v25)
                  WTF::fastFree(v20, v8);
              }
LABEL_44:
              v27 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)v3 + 16))(**(_QWORD **)v3);
              *(float *)&v28 = (*(float (**)(WTF *, _QWORD))(*(_QWORD *)v4 + 168))(v4, 0);
              v42 = 0;
              v43 = __PAIR64__(v29, v28);
              v30 = (*(float (**)(WTF *, _QWORD))(*(_QWORD *)v4 + 168))(v4, 0);
              v39 = 0;
              v40 = v30;
              v41 = v31;
              return (unsigned int *)(*(uint64_t (**)(uint64_t, WTF *, WTF **, WTF ***, uint64_t))(*(_QWORD *)v27 + 360))(v27, v4, &v42, &v39, 545);
            }
            v12 = v11[1];
            if (__ldaxr((unsigned __int8 *)v12))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v12))
            {
              goto LABEL_15;
            }
            MEMORY[0x19AEA534C](v12);
LABEL_15:
            v14 = *((_QWORD *)v12 + 1);
            v15 = v14 - 1;
            *((_QWORD *)v12 + 1) = v14 - 1;
            if (v14 == 1)
            {
              v32 = *((_QWORD *)v12 + 2);
              v16 = *((_QWORD *)v12 + 3);
              *((_QWORD *)v12 + 3) = 0;
              v17 = v32 != 0;
            }
            else
            {
              v16 = 0;
              v17 = 1;
            }
            v18 = __ldxr((unsigned __int8 *)v12);
            if (v18 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v12))
              {
                if (v15)
                  goto LABEL_27;
LABEL_23:
                if (v16)
                  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
                if (!v17)
                  WTF::fastFree(v12, v8);
                goto LABEL_27;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(v12);
            if (v15)
              goto LABEL_27;
            goto LABEL_23;
          }
LABEL_6:
          v5 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
          goto LABEL_7;
        }
        {
          v4 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
        }
        else
        {
          result = (unsigned int *)WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v42);
          v4 = v42;
          WebCore::Image::nullImage(void)::nullImage = (uint64_t)v42;
        }
      }
      if (v4)
      {
          goto LABEL_50;
        goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t WebCore::PageDebuggable::name@<X0>(WebCore::PageDebuggable *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  *a2 = 0;
  v4 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34014E8;
  v7[1] = this;
  v7[2] = this;
  v7[3] = a2;
  v9 = (uint64_t)v7;
  WTF::callOnMainThreadAndWait();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t WebCore::PageDebuggable::url@<X0>(WebCore::PageDebuggable *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  *a2 = 0;
  v4 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E3401510;
  v7[1] = this;
  v7[2] = this;
  v7[3] = a2;
  v9 = (uint64_t)v7;
  WTF::callOnMainThreadAndWait();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t WebCore::PageDebuggable::hasLocalDebugger(WebCore::PageDebuggable *this)
{
  uint64_t v2;
  int v4;
  _QWORD *v5;
  _QWORD *v7;
  unsigned __int8 v8;

  v8 = 0;
  v2 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  ++*(_QWORD *)(v2 + 8);
  v4 = __ldxr((unsigned __int8 *)v2);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E3401538;
  v5[1] = this;
  v5[2] = this;
  v5[3] = &v8;
  v7 = v5;
  WTF::callOnMainThreadAndWait();
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return v8;
}

uint64_t WebCore::PageDebuggable::connect(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v8 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_5:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E3401560;
  *(_QWORD *)(v11 + 8) = a1;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_BYTE *)(v11 + 32) = a3;
  *(_BYTE *)(v11 + 33) = a4;
  v13 = v11;
  WTF::callOnMainThreadAndWait();
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

uint64_t WebCore::PageDebuggable::disconnect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v4 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E3401588;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = a2;
  v9 = v7;
  WTF::callOnMainThreadAndWait();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebCore::PageDebuggable::dispatchMessageFromRemote(uint64_t a1)
{
  uint64_t v2;
  int v4;
  _QWORD *v5;
  WTF::StringImpl *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  ++*(_QWORD *)(v2 + 8);
  v4 = __ldxr((unsigned __int8 *)v2);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  WTF::String::isolatedCopy();
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34015B0;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = v8;
  v9 = v5;
  WTF::callOnMainThreadAndWait();
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  return 0;
}

uint64_t WebCore::PageDebuggable::setIndicating(WebCore::PageDebuggable *this, char a2)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v7 = &off_1E34015D8;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_BYTE *)(v7 + 24) = a2;
  v9 = v7;
  WTF::callOnMainThreadAndWait();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t WebCore::PageGroup::PageGroup(uint64_t this, const WTF::String *a2)
{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = v2;
  *(_DWORD *)(this + 32) = ++dword_1ECE838BC;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

{
  _DWORD *v2;

  *(_QWORD *)this = 0;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = v2;
  *(_DWORD *)(this + 32) = ++dword_1ECE838BC;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

void WebCore::PageGroup::~PageGroup(WebCore::PageGroup *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t i;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v9 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = *(unsigned int **)(v4 + 8 * i);
        if (v11 != (unsigned int *)-1)
        {
          *(_QWORD *)(v4 + 8 * i) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              v15 = i;
              v16 = v4;
              v14 = v9;
              WTF::fastFree((WTF *)v11, a2);
              v9 = v14;
              i = v15;
              v4 = v16;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v6 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::PageGroup::captionPreferencesChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v17 = 0;
    v5 = *(uint64_t **)(this + 16);
    goto LABEL_50;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 16);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v17 = *(unsigned int *)(v2 - 4);
LABEL_50:
  v6 = (uint64_t *)(v2 + 8 * v17);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = WebCore::Page::captionPreferencesChanged(*(WebCore::Page **)(v11 + 8));
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 24);
  }
  {
    this = WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
  }
  v14 = (_QWORD *)qword_1ECE90580;
  if (qword_1ECE90580)
  {
    do
    {
      v15 = *(int **)(*v14 + 200);
      v16 = *v15;
      *((_BYTE *)v15 + 32) = 1;
      *v15 = v16 + 1;
      if (v16 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x19602AA04);
      }
      *v15 = v16;
      v14 = (_QWORD *)v14[2];
    }
    while (v14);
  }
  return this;
}

WebCore::CaptionUserPreferencesMediaAF *WebCore::PageGroup::ensureCaptionPreferences(WebCore::PageGroup *this)
{
  WebCore::CaptionUserPreferencesMediaAF *result;
  WebCore::CaptionUserPreferencesMediaAF *v3;
  _DWORD *v4;

  result = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)this + 5);
  if (!result)
  {
    v3 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
    result = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v3, this);
    v4 = (_DWORD *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = result;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        return (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)this + 5);
      }
      else
      {
        --v4[2];
      }
    }
  }
  return result;
}

void WebCore::OriginAccessPatternsForWebProcess::~OriginAccessPatternsForWebProcess(WebCore::OriginAccessPatternsForWebProcess *this)
{
  JUMPOUT(0x19AEA7644);
}

void WebCore::EmptyOriginAccessPatterns::~EmptyOriginAccessPatterns(WebCore::EmptyOriginAccessPatterns *this)
{
  JUMPOUT(0x19AEA7644);
}

void WebCore::PageDebuggable::~PageDebuggable(WebCore::PageDebuggable *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = MEMORY[0x1E0CC10E8] + 16;
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  Inspector::RemoteControllableTarget::~RemoteControllableTarget(this);
}

{
  WTF::StringImpl *v3;
  const void *v4;
  WTF *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = MEMORY[0x1E0CC10E8] + 16;
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  Inspector::RemoteControllableTarget::~RemoteControllableTarget(this);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::PageDebuggable::type(WebCore::PageDebuggable *this)
{
  return 3;
}

uint64_t Inspector::RemoteInspectionTarget::targetRunLoop(Inspector::RemoteInspectionTarget *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t Inspector::RemoteInspectionTarget::automaticInspectionAllowed(Inspector::RemoteInspectionTarget *this)
{
  return 0;
}

uint64_t WTF::switchOn<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>,WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>&&,WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>&,WTF::DefaultRefDerefTraits<WTF::RefPtr>,WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1>(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;

  v7 = *a3;
  v8 = *((_QWORD *)a3 + 2);
  v9 = *a4;
  v10 = *((_QWORD *)a4 + 2);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &&,WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &,WTF::DefaultRefDerefTraits<WTF::RefPtr>,WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &&>(v6);
  }
  else
  {
    v11 = &v7;
    return ((uint64_t (*)(__int128 **))off_1E3400598[v4])(&v11);
  }
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &&,WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &,WTF::DefaultRefDerefTraits<WTF::RefPtr>,WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &&,WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0::operator()(a3, *a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &&,WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &,WTF::DefaultRefDerefTraits<WTF::RefPtr>,WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  v5 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v7 = *v5;
  v8 = v5[1];
  v9 = **(_QWORD **)(*(_QWORD *)a1 + 40);
  v10 = WTF::fastMalloc((WTF *)0x138);
  result = WebCore::RemoteFrame::RemoteFrame(v10, v6, a2, v7, v8, 0, 0, 0, v9);
  *a3 = result;
  return result;
}

uint64_t *WebCore::createMainFrame(WebCore::Page &,std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> &&,WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;

  WebCore::LocalFrame::createMainFrame(*(WebCore::Page **)a2, a3, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), **(_QWORD **)(a2 + 16), &v6);
  v4 = v6;
  v6 = 0;
  *a1 = v4;
  return WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v6);
}

uint64_t std::make_unique[abi:sn180100]<WebCore::LowPowerModeNotifier,WebCore::Page::Page(WebCore::PageConfiguration &&)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v6 = *a2;
  *v5 = off_1E34005B8;
  v5[1] = v6;
  v8 = v5;
  WebCore::LowPowerModeNotifier::LowPowerModeNotifier(v4, (uint64_t *)&v8);
  *a1 = v4;
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::Page(WebCore::PageConfiguration &&)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  WebCore::RenderingUpdateScheduler *v6;
  int v7;

  v2 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(v2 + 1169) & 4) == 0)
  {
    v3 = *(_BYTE *)(v2 + 1168);
    if (a2 != (v3 & 4) >> 2)
    {
      v4 = v3 & 0xFB;
      if (a2)
        v5 = 4;
      else
        v5 = 0;
      *(_BYTE *)(v2 + 1168) = v4 | v5;
      v6 = *(WebCore::RenderingUpdateScheduler **)(v2 + 672);
      if (!v6)
        goto LABEL_9;
      ++*((_DWORD *)v6 + 2);
      WebCore::RenderingUpdateScheduler::adjustRenderingUpdateFrequency(v6);
      v7 = *((_DWORD *)v6 + 2);
      if (v7)
      {
        *((_DWORD *)v6 + 2) = v7 - 1;
LABEL_9:
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1032))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
        return WebCore::Page::updateDOMTimerAlignmentInterval(v2);
      }
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::ThermalMitigationNotifier,WebCore::Page::Page(WebCore::PageConfiguration &&)::$_1>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  WTF *v5;
  uint64_t v6;
  void *v7;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v6 = *a2;
  *(_QWORD *)v5 = off_1E34005E0;
  *((_QWORD *)v5 + 1) = v6;
  *v4 = 0;
  *a1 = v4;
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::Page(WebCore::PageConfiguration &&)::$_1,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t result;
  char v3;
  char v4;
  char v5;

  result = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(result + 1169) & 0x10) == 0)
  {
    v3 = *(_BYTE *)(result + 1168);
    if (a2 != (v3 & 0x10) >> 4)
    {
      v4 = v3 & 0xEF;
      if (a2)
        v5 = 16;
      else
        v5 = 0;
      *(_BYTE *)(result + 1168) = v4 | v5;
      return WebCore::Page::updateDOMTimerAlignmentInterval(result);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 80 * i);
      if (*v5 != -1)
      {
        WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)(a1 + 80 * i + 8), a2);
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr((unsigned int *)v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, (unsigned int *)v6));
          if (!v8)
          {
            atomic_store(1u, (unsigned int *)v6);
            v9 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v9)
            {
              v12 = v6;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
              v6 = v12;
            }
            v10 = *(WTF **)(v6 + 16);
            if (v10)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              v11 = v6;
              WTF::fastFree(v10, a2);
              v6 = v11;
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::PointerCaptureController::CapturingData::~CapturingData(WebCore::PointerCaptureController::CapturingData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
}

unsigned int **std::pair<WTF::WeakRef<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>::pair[abi:sn180100]<WebCore::MediaCanStartListener&,WebCore::Document&,0>(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  if (!*(_QWORD *)(a2 + 8))
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a2;
    v8 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v7;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  v11 = *(unsigned int **)(a2 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *a1 = v11;
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  a1[1] = v13;
  return a1;
}

uint64_t std::pair<WTF::WeakRef<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>::~pair(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::pair<WTF::WeakRef<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(result + 16))
  {
    v2 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    if (v2)
    {
      do
      {
        v3 = __ldaxr((unsigned int *)v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, (unsigned int *)v2));
      if (!v4)
      {
        v12 = result;
        atomic_store(1u, (unsigned int *)v2);
        v8 = *(unsigned int *)(v2 + 28);
        if ((_DWORD)v8)
        {
          v11 = v2;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v2 + 16), (WTF::StringImpl *)(*(_QWORD *)(v2 + 16) + 32 * v8));
          v2 = v11;
        }
        v9 = *(WTF **)(v2 + 16);
        if (v9)
        {
          *(_QWORD *)(v2 + 16) = 0;
          *(_DWORD *)(v2 + 24) = 0;
          v10 = v2;
          WTF::fastFree(v9, a2);
          v2 = v10;
        }
        WTF::fastFree((WTF *)v2, a2);
        result = v12;
      }
    }
    v5 = *(unsigned int **)result;
    *(_QWORD *)result = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        v13 = result;
        WTF::fastFree((WTF *)v5, a2);
        return v13;
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashMap<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>,WTF::HashTraits<WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  WTF **v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  _QWORD *result;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v57;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v53 = v5;
    v54 = v4;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v57 = v10;
          v24 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v21 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = (_QWORD *)(v20 + 24 * v27);
            v27 = (v27 + v28++) & v21;
          }
          while (*v30);
          v31 = v29;
          v32 = v20 + 24 * v29;
          v35 = *(_DWORD *)(v32 + 20);
          v34 = (_DWORD *)(v32 + 20);
          v33 = v35;
          v36 = (WTF **)(v34 - 3);
          if (v35)
          {
            v37 = *v36;
            v38 = 24 * v33;
            do
            {
              v39 = *(_QWORD *)v37;
              *(_QWORD *)v37 = 0;
              if (v39)
              {
                if (*(_DWORD *)(v39 + 24) == 2)
                {
                  if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v39, v8);
                }
                else
                {
                  *(_DWORD *)(v39 + 24) -= 2;
                }
              }
              v37 = (WTF *)((char *)v37 + 24);
              v38 -= 24;
            }
            while (v38);
          }
          v40 = *v36;
          if (*v36)
          {
            *v36 = 0;
            *(_DWORD *)(v20 + 24 * v31 + 16) = 0;
            WTF::fastFree(v40, v8);
          }
          v41 = *v30;
          *v30 = 0;
          v4 = v54;
          if (v41)
          {
            if (*(_DWORD *)(v41 + 24) == 2)
            {
              if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v41, v8);
            }
            else
            {
              *(_DWORD *)(v41 + 24) -= 2;
            }
          }
          v42 = *v12;
          *v12 = 0;
          *v30 = v42;
          v43 = v54 + 24 * v9;
          *v36 = 0;
          *(_QWORD *)(v34 - 1) = 0;
          v45 = *(WTF **)(v43 + 8);
          v44 = v43 + 8;
          *(_QWORD *)v44 = 0;
          *v36 = v45;
          LODWORD(v42) = *(_DWORD *)(v44 + 8);
          *(_DWORD *)(v44 + 8) = 0;
          *(_DWORD *)(v20 + 24 * v31 + 16) = v42;
          LODWORD(v42) = *(_DWORD *)(v44 + 12);
          *(_DWORD *)(v44 + 12) = 0;
          *v34 = v42;
          v46 = *(unsigned int *)(v44 + 12);
          v10 = v57;
          if ((_DWORD)v46)
          {
            v47 = *(uint64_t **)v44;
            v48 = 24 * v46;
            do
            {
              v49 = *v47;
              *v47 = 0;
              if (v49)
              {
                if (*(_DWORD *)(v49 + 24) == 2)
                {
                  if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v49, v8);
                }
                else
                {
                  *(_DWORD *)(v49 + 24) -= 2;
                }
              }
              v47 += 3;
              v48 -= 24;
            }
            while (v48);
          }
          v50 = *(WTF **)v44;
          if (*(_QWORD *)v44)
          {
            *(_QWORD *)v44 = 0;
            *(_DWORD *)(v44 + 8) = 0;
            WTF::fastFree(v50, v8);
          }
          v51 = *v12;
          *v12 = 0;
          v11 = v53;
          if (v51)
          {
            if (*(_DWORD *)(v51 + 24) == 2)
            {
              if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v51, v8);
            }
            else
            {
              *(_DWORD *)(v51 + 24) -= 2;
            }
          }
          if (v12 == a3)
            v10 = v30;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = (WTF **)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16)
          {
            v17 = *v15;
            v18 = 24 * v16;
            do
            {
              v19 = *(_QWORD *)v17;
              *(_QWORD *)v17 = 0;
              if (v19)
              {
                if (*(_DWORD *)(v19 + 24) == 2)
                {
                  if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v19, v8);
                }
                else
                {
                  *(_DWORD *)(v19 + 24) -= 2;
                }
              }
              v17 = (WTF *)((char *)v17 + 24);
              v18 -= 24;
            }
            while (v18);
          }
          v22 = *v15;
          if (*v15)
          {
            *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v22, v8);
          }
          v23 = *v12;
          *v12 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v8);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

unint64_t WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *(_OWORD *)(v7 + 8) = *(_OWORD *)((char *)v9 + 8);
          result = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 24;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashMap<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          *(_QWORD *)v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *(_QWORD *)v21 = v22;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v4 + 16 * i + 8);
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            v24 = (unsigned int *)(v23 + 8);
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v27 = off_1E31FE290;
              v27[1] = v24;
              v28 = v27;
              WTF::ensureOnMainThread();
              if (v28)
                (*(void (**)(_QWORD *))(*v28 + 8))(v28);
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  uint64_t *v18;
  void *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Node *v28;
  uint64_t v29;
  BOOL v30;
  WebCore::Node *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  WebCore::Node **v35;
  WebCore::Node *v36;
  uint64_t v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  void *v49;
  uint64_t v50;
  WebCore::Node *v51;
  uint64_t i;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  WebCore::Node *v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  WebCore::Node *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::Node *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  WebCore::Node *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  void *v94;
  WebCore::Node *v95;
  uint64_t v96;
  uint64_t *j;
  uint64_t v98;
  int64_t v99;
  int64_t v100;
  uint64_t v101;
  WebCore::Node *v102;

  v8 = a2;
  v9 = result;
LABEL_2:
  v10 = v8 - 1;
  v11 = (uint64_t *)v9;
  while (2)
  {
    v9 = (uint64_t)v11;
    v12 = (char *)v8 - (char *)v11;
    v13 = v12 >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v8 - 1, (uint64_t *)v9);
        if ((_DWORD)result)
        {
          v40 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *v10;
          *v10 = v40;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)v9, (uint64_t *)(v9 + 8), v8 - 1, a3);
      case 4uLL:
        v41 = (uint64_t *)(v9 + 16);
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)v9, (uint64_t *)(v9 + 8), (uint64_t *)(v9 + 16), a3);
        result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v8 - 1, (uint64_t *)(v9 + 16));
        if ((_DWORD)result)
        {
          v42 = *v41;
          *v41 = *v10;
          *v10 = v42;
          result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)(v9 + 16), (uint64_t *)(v9 + 8));
          if ((_DWORD)result)
          {
            *(int8x16_t *)(v9 + 8) = vextq_s8(*(int8x16_t *)(v9 + 8), *(int8x16_t *)(v9 + 8), 8uLL);
            result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)(v9 + 8), (uint64_t *)v9);
            if ((_DWORD)result)
              *(int8x16_t *)v9 = vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *,0>((uint64_t *)v9, (uint64_t *)(v9 + 8), (uint64_t *)(v9 + 16), (uint64_t *)(v9 + 24), v8 - 1, a3);
      default:
        if (v12 <= 191)
        {
          v43 = (uint64_t *)(v9 + 8);
          v45 = (uint64_t *)v9 == v8 || v43 == v8;
          if ((a5 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = (uint64_t *)v9;
              do
              {
                v48 = v47;
                v47 = v43;
                result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v43, v48);
                if ((_DWORD)result)
                {
                  v50 = 0;
                  v51 = (WebCore::Node *)*v43;
                  *v43 = 0;
                  v102 = v51;
                  for (i = v46; ; i -= 8)
                  {
                    v53 = (uint64_t *)(v9 + i);
                    v54 = *(_QWORD *)(v9 + i);
                    *v53 = 0;
                    v53[1] = v54;
                    if (v50)
                    {
                      if (*(_DWORD *)(v50 + 24) == 2)
                      {
                        if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v50, v49);
                      }
                      else
                      {
                        *(_DWORD *)(v50 + 24) -= 2;
                      }
                    }
                    if (!i)
                      break;
                    v55 = (uint64_t *)(v9 + i);
                    if ((WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v102, (uint64_t *)(v9 + i - 8)) & 1) == 0)goto LABEL_118;
                    v50 = *v53;
                  }
                  v55 = (uint64_t *)v9;
LABEL_118:
                  v56 = v102;
                  v102 = 0;
                  result = *v55;
                  *v55 = (uint64_t)v56;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 24) == 2)
                    {
                      if ((*(_WORD *)(result + 30) & 0x400) == 0)
                        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v49);
                    }
                    else
                    {
                      *(_DWORD *)(result + 24) -= 2;
                    }
                  }
                }
                v43 = v47 + 1;
                v46 += 8;
              }
              while (v47 + 1 != v8);
            }
            return result;
          }
          if (v45)
            return result;
          v89 = 0;
          v90 = (uint64_t *)(v9 - 8);
          v91 = -1;
          v92 = 1;
          while (1)
          {
            v93 = (uint64_t *)(v9 + 8 * v89);
            v89 = v92;
            result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v43, v93);
            if ((_DWORD)result)
              break;
LABEL_215:
            v92 = v89 + 1;
            v43 = (uint64_t *)(v9 + 8 * (v89 + 1));
            ++v90;
            --v91;
            if (v43 == v8)
              return result;
          }
          result = 0;
          v95 = (WebCore::Node *)*v43;
          *v43 = 0;
          v102 = v95;
          v96 = v91;
          for (j = v90; ; --j)
          {
            v98 = j[1];
            j[1] = 0;
            j[2] = v98;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v94);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
            if (!v96)
              break;
            if ((WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v102, j) & 1) == 0)
            {
              result = j[1];
              j[1] = (uint64_t)v102;
              if (result)
              {
                if (*(_DWORD *)(result + 24) == 2)
                {
                  if ((*(_WORD *)(result + 30) & 0x400) == 0)
                    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v94);
                }
                else
                {
                  *(_DWORD *)(result + 24) -= 2;
                }
              }
              goto LABEL_215;
            }
            result = j[1];
            ++v96;
          }
LABEL_219:
          __break(1u);
          return result;
        }
        if (!a4)
        {
          if ((uint64_t *)v9 == v8)
            return result;
          v57 = (v13 - 2) >> 1;
          v100 = v57;
          do
          {
            v58 = v57;
            if (v100 >= v57)
            {
              v99 = v57;
              v59 = (2 * v57) | 1;
              v60 = (uint64_t *)(v9 + 8 * v59);
              v61 = 2 * v57 + 2;
              if (v61 < (uint64_t)v13
                && WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)(v9 + 8 * v59), v60 + 1))
              {
                ++v60;
                v59 = v61;
              }
              v58 = v99;
              v62 = (uint64_t *)(v9 + 8 * v99);
              if ((WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v60, v62) & 1) == 0)
              {
                v63 = (WebCore::Node *)*v62;
                *v62 = 0;
                v102 = v63;
                do
                {
                  v64 = v60;
                  v65 = *v60;
                  *v60 = 0;
                  v66 = *v62;
                  *v62 = v65;
                  if (v66)
                  {
                    if (*(_DWORD *)(v66 + 24) == 2)
                    {
                      if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v66, a2);
                    }
                    else
                    {
                      *(_DWORD *)(v66 + 24) -= 2;
                    }
                  }
                  if (v100 < v59)
                    break;
                  v67 = (2 * v59) | 1;
                  v60 = (uint64_t *)(v9 + 8 * v67);
                  v68 = 2 * v59 + 2;
                  if (v68 < (uint64_t)v13
                    && WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)(v9 + 8 * v67), v60 + 1))
                  {
                    ++v60;
                    v67 = v68;
                  }
                  v62 = v64;
                  v59 = v67;
                }
                while (!WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v60, (uint64_t *)&v102));
                v69 = v102;
                v102 = 0;
                v70 = *v64;
                *v64 = (uint64_t)v69;
                if (v70)
                {
                  if (*(_DWORD *)(v70 + 24) == 2)
                  {
                    if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v70, a2);
                  }
                  else
                  {
                    *(_DWORD *)(v70 + 24) -= 2;
                  }
                }
                v58 = v99;
                if (v102)
                {
                  if (*((_DWORD *)v102 + 6) == 2)
                  {
                    if ((*((_WORD *)v102 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v102, a2);
                  }
                  else
                  {
                    *((_DWORD *)v102 + 6) -= 2;
                  }
                }
              }
            }
            v57 = v58 - 1;
          }
          while (v58);
          v71 = (unint64_t)v12 >> 3;
          while (2)
          {
            v72 = 0;
            v101 = *(_QWORD *)v9;
            *(_QWORD *)v9 = 0;
            v73 = (uint64_t *)v9;
            do
            {
              v74 = v73;
              v73 += v72 + 1;
              v75 = 2 * v72;
              v72 = (2 * v72) | 1;
              v76 = v75 + 2;
              if (v75 + 2 < v71
                && WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v73, v73 + 1))
              {
                ++v73;
                v72 = v76;
              }
              v77 = *v73;
              *v73 = 0;
              v78 = *v74;
              *v74 = v77;
              if (v78)
              {
                if (*(_DWORD *)(v78 + 24) == 2)
                {
                  if ((*(_WORD *)(v78 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v78, a2);
                }
                else
                {
                  *(_DWORD *)(v78 + 24) -= 2;
                }
              }
            }
            while (v72 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
            if (v73 == --v8)
            {
              result = *v73;
              *v73 = v101;
              if (result)
                goto LABEL_188;
            }
            else
            {
              v79 = *v8;
              *v8 = 0;
              v80 = *v73;
              *v73 = v79;
              if (v80)
              {
                if (*(_DWORD *)(v80 + 24) == 2)
                {
                  if ((*(_WORD *)(v80 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v80, a2);
                }
                else
                {
                  *(_DWORD *)(v80 + 24) -= 2;
                }
              }
              result = *v8;
              *v8 = v101;
              if (result)
              {
                if (*(_DWORD *)(result + 24) == 2)
                {
                  if ((*(_WORD *)(result + 30) & 0x400) == 0)
                    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                }
                else
                {
                  *(_DWORD *)(result + 24) -= 2;
                }
              }
              v81 = (uint64_t)v73 - v9 + 8;
              if (v81 >= 9)
              {
                v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                v83 = (uint64_t *)(v9 + 8 * v82);
                result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v83, v73);
                if ((_DWORD)result)
                {
                  v84 = (WebCore::Node *)*v73;
                  *v73 = 0;
                  v102 = v84;
                  do
                  {
                    v85 = v83;
                    v86 = *v83;
                    *v83 = 0;
                    v87 = *v73;
                    *v73 = v86;
                    if (v87)
                    {
                      if (*(_DWORD *)(v87 + 24) == 2)
                      {
                        if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v87, a2);
                      }
                      else
                      {
                        *(_DWORD *)(v87 + 24) -= 2;
                      }
                    }
                    if (!v82)
                      break;
                    v82 = (v82 - 1) >> 1;
                    v83 = (uint64_t *)(v9 + 8 * v82);
                    v73 = v85;
                  }
                  while ((WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v83, (uint64_t *)&v102) & 1) != 0);
                  result = *v85;
                  *v85 = (uint64_t)v102;
                  if (result)
                  {
LABEL_188:
                    if (*(_DWORD *)(result + 24) == 2)
                    {
                      if ((*(_WORD *)(result + 30) & 0x400) == 0)
                        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                    }
                    else
                    {
                      *(_DWORD *)(result + 24) -= 2;
                    }
                  }
                }
              }
            }
            if (v71-- <= 2)
              return result;
            continue;
          }
        }
        v14 = (_QWORD *)(v9 + 8 * (v13 >> 1));
        if ((unint64_t)v12 < 0x401)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)(v9 + 8 * (v13 >> 1)), (uint64_t *)v9, v8 - 1, a3);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)v9, (uint64_t *)(v9 + 8 * (v13 >> 1)), v8 - 1, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)(v9 + 8), v14 - 1, v8 - 2, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)(v9 + 16), (uint64_t *)(v9 + 8 + 8 * (v13 >> 1)), v8 - 3, a3);
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>(v14 - 1, (uint64_t *)(v9 + 8 * (v13 >> 1)), (uint64_t *)(v9 + 8 + 8 * (v13 >> 1)), a3);
          v15 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)(v9 - 8), (uint64_t *)v9);
          if ((result & 1) == 0)
          {
            v31 = *(WebCore::Node **)v9;
            *(_QWORD *)v9 = 0;
            v102 = v31;
            result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v102, v8 - 1);
            if ((result & 1) != 0)
            {
              v11 = (uint64_t *)v9;
              while (1)
              {
                if (++v11 == v8)
                  goto LABEL_219;
                result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v102, v11);
                if ((result & 1) != 0)
                  goto LABEL_59;
              }
            }
            v32 = (uint64_t *)(v9 + 8);
            do
            {
              v11 = v32;
              if (v32 >= v8)
                break;
              result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v102, v32);
              v32 = v11 + 1;
            }
            while (!(_DWORD)result);
LABEL_59:
            v33 = v8;
            if (v11 < v8)
            {
              v33 = v8;
              while (v33 != (uint64_t *)v9)
              {
                result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v102, --v33);
                if ((result & 1) == 0)
                  goto LABEL_69;
              }
              goto LABEL_219;
            }
LABEL_69:
            if (v11 < v33)
            {
              v34 = *v11;
              *v11 = *v33;
              *v33 = v34;
              while (1)
              {
                if (++v11 == v8)
                  goto LABEL_219;
                result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v102, v11);
                if ((_DWORD)result)
                {
                  while (v33 != (uint64_t *)v9)
                  {
                    result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v102, --v33);
                    if ((result & 1) == 0)
                      goto LABEL_69;
                  }
                  goto LABEL_219;
                }
              }
            }
            v35 = (WebCore::Node **)(v11 - 1);
            if (v11 - 1 != (uint64_t *)v9)
            {
              v36 = *v35;
              *v35 = 0;
              v37 = *(_QWORD *)v9;
              *(_QWORD *)v9 = v36;
              if (v37)
              {
                if (*(_DWORD *)(v37 + 24) == 2)
                {
                  if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v37, a2);
                }
                else
                {
                  *(_DWORD *)(v37 + 24) -= 2;
                }
              }
            }
            v38 = v102;
            v102 = 0;
            v39 = *v35;
            *v35 = v38;
            if (v39)
            {
              if (*((_DWORD *)v39 + 6) == 2)
              {
                if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v39, a2);
              }
              else
              {
                *((_DWORD *)v39 + 6) -= 2;
              }
            }
            result = (uint64_t)v102;
            if (v102)
            {
              if (*((_DWORD *)v102 + 6) == 2)
              {
                if ((*((_WORD *)v102 + 15) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef(v102, a2);
              }
              else
              {
                *((_DWORD *)v102 + 6) -= 2;
              }
            }
            a5 = 0;
            continue;
          }
        }
        v16 = 0;
        v17 = *(WebCore::Node **)v9;
        *(_QWORD *)v9 = 0;
        v102 = v17;
        do
        {
          v18 = (uint64_t *)(v9 + v16 + 8);
          if (v18 == v8)
            goto LABEL_219;
          result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v18, (uint64_t *)&v102);
          v16 += 8;
        }
        while ((result & 1) != 0);
        v20 = v9 + v16;
        v21 = v8;
        if (v16 != 8)
        {
          while (v21 != (uint64_t *)v9)
          {
            result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, --v21, (uint64_t *)&v102);
            if ((_DWORD)result)
              goto LABEL_21;
          }
          goto LABEL_219;
        }
        v21 = v8;
        do
        {
          if (v20 >= (unint64_t)v21)
            break;
          result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, --v21, (uint64_t *)&v102);
        }
        while ((result & 1) == 0);
LABEL_21:
        if (v20 >= (unint64_t)v21)
        {
          v25 = (uint64_t *)(v20 - 8);
        }
        else
        {
          v22 = (uint64_t *)(v9 + v16);
          v23 = v21;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              if (++v22 == v8)
                goto LABEL_219;
              result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v22, (uint64_t *)&v102);
            }
            while ((result & 1) != 0);
            do
            {
              if (v23 == (uint64_t *)v9)
                goto LABEL_219;
              result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, --v23, (uint64_t *)&v102);
            }
            while (!(_DWORD)result);
          }
          while (v22 < v23);
          v25 = v22 - 1;
        }
        if (v25 != (uint64_t *)v9)
        {
          v26 = *v25;
          *v25 = 0;
          v27 = *(_QWORD *)v9;
          *(_QWORD *)v9 = v26;
          if (v27)
          {
            if (*(_DWORD *)(v27 + 24) == 2)
            {
              if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v27, v19);
            }
            else
            {
              *(_DWORD *)(v27 + 24) -= 2;
            }
          }
        }
        v28 = v102;
        v102 = 0;
        v29 = *v25;
        *v25 = (uint64_t)v28;
        if (v29)
        {
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v29, v19);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
        if (v102)
        {
          if (*((_DWORD *)v102 + 6) == 2)
          {
            if ((*((_WORD *)v102 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v102, v19);
          }
          else
          {
            *((_DWORD *)v102 + 6) -= 2;
          }
        }
        if (v20 < (unint64_t)v21)
        {
LABEL_44:
          result = std::__introsort<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *,false>(v9, v25, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v25 + 1;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>(v9, v25, a3);
        v11 = v25 + 1;
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t)(v25 + 1), v8, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_44;
        }
        v8 = v25;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  if (*a2 == *a3)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 + 40) + 8) + 528);
  if (!v3)
    return 1;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 1;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 40) + 8) + 528);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      if (v4 != v8)
      {
        v11 = *a1;
        if (*a1)
        {
          v12 = *(_DWORD *)(v11 - 8);
          v13 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = *(_QWORD *)(v11 + 16 * v16);
          if (v17 == v4)
          {
LABEL_16:
            v19 = *(_DWORD *)(v11 + 16 * v16 + 8);
          }
          else
          {
            v18 = 1;
            while (v17)
            {
              v16 = ((_DWORD)v16 + v18) & v12;
              v17 = *(_QWORD *)(v11 + 16 * v16);
              ++v18;
              if (v17 == v4)
                goto LABEL_16;
            }
            v19 = 0;
          }
          v27 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          v30 = v12 & ((v29 >> 31) ^ v29);
          v31 = *(_QWORD *)(v11 + 16 * v30);
          if (v31 == v8)
          {
LABEL_35:
            v33 = *(_DWORD *)(v11 + 16 * v30 + 8);
          }
          else
          {
            v32 = 1;
            while (v31)
            {
              v30 = ((_DWORD)v30 + v32) & v12;
              v31 = *(_QWORD *)(v11 + 16 * v30);
              ++v32;
              if (v31 == v8)
                goto LABEL_35;
            }
            v33 = 0;
          }
          v20 = v19 > v33;
        }
        else
        {
          v20 = 0;
        }
        goto LABEL_49;
      }
      v21 = *a2;
      v22 = *a3;
      if (v21 == *a3)
      {
        v26 = 0;
      }
      else
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v21, v22, &v44);
        if (v44)
        {
          v23 = v45;
          if (!v45)
            goto LABEL_46;
          if (!v46)
            goto LABEL_47;
          v24 = *(unsigned __int16 *)(v45 + 28);
          v25 = *(unsigned __int16 *)(v46 + 28);
          if (((v24 | v25) & 0x80) != 0)
          {
            if ((v24 & 0x80) != 0)
              v26 = -127;
            else
              v26 = 1;
            if ((v25 & 0x80) == 0)
              v26 = -1;
            goto LABEL_48;
          }
          if (v45 == v46)
            goto LABEL_46;
          do
            v23 = *(_QWORD *)(v23 + 56);
          while (v23 != v46 && v23 != 0);
          if (v23)
LABEL_46:
            v26 = -1;
          else
LABEL_47:
            v26 = 1;
        }
        else
        {
          v26 = -127;
        }
      }
LABEL_48:
      v20 = v26 > 0;
      do
      {
LABEL_49:
        v35 = __ldaxr(v9);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v9));
      if (!v36)
      {
        atomic_store(1u, v9);
        v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v40 = off_1E31FE290;
        v40[1] = v9;
        v44 = v40;
        WTF::ensureOnMainThread();
        v41 = v44;
        v44 = 0;
        if (v41)
          (*(void (**)(_QWORD *))(*v41 + 8))(v41);
      }
      goto LABEL_51;
    }
  }
  v20 = 0;
  do
  {
LABEL_51:
    v37 = __ldaxr(v5);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, v5));
  if (!v38)
  {
    atomic_store(1u, v5);
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v42 = off_1E31FE290;
    v42[1] = v5;
    v44 = v42;
    WTF::ensureOnMainThread();
    v43 = v44;
    v44 = 0;
    if (v43)
      (*(void (**)(_QWORD *))(*v43 + 8))(v43);
  }
  return v20;
}

uint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>(a1, a2, a3, a6);
  if (WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a6, a4, a3))
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a6, a3, a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a6, a2, a1))
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a6, a5, a4);
  if ((_DWORD)result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a6, a4, a3);
    if ((_DWORD)result)
    {
      v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a6, a3, a2);
      if ((_DWORD)result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a6, a2, a1);
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a4, a2, a1);
  result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a4, a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a4, a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a4, a2, a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  WebCore::Node *v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node **v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  WebCore::Node *v26;

  v6 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, a2 - 1, (uint64_t *)a1))
      {
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)a1, (uint64_t *)(a1 + 8), a2 - 1, a3);
      return 1;
    case 4:
      v23 = (uint64_t *)(a1 + 16);
      v24 = a2 - 1;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), a3);
      if (WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v24, (uint64_t *)(a1 + 16)))
      {
        v25 = *v23;
        *v23 = *v24;
        *v24 = v25;
        if (WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 8)))
        {
          *(int8x16_t *)(a1 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
          if (WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)(a1 + 8), (uint64_t *)a1))*(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *,0>((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 24), a2 - 1, a3);
      return 1;
    default:
      v10 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0 &,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>> *>((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), a3);
      v11 = (uint64_t *)(a1 + 24);
      if ((uint64_t *)(a1 + 24) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, v11, v10))
    {
      v15 = 0;
      v16 = (WebCore::Node *)*v11;
      *v11 = 0;
      v26 = v16;
      for (i = v12; ; i -= 8)
      {
        v18 = a1 + i;
        v19 = *(_QWORD *)(a1 + i + 16);
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)(v18 + 24) = v19;
        if (v15)
        {
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
        if (i == -16)
        {
          v20 = (WebCore::Node **)a1;
          goto LABEL_18;
        }
        if ((WebCore::replaceRanges(WebCore::Page &,WTF::Vector<WebCore::FindReplacementRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0::operator()<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>,WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>(a3, (uint64_t *)&v26, (uint64_t *)(a1 + i + 8)) & 1) == 0)break;
        v15 = *(_QWORD *)(v18 + 16);
      }
      v20 = (WebCore::Node **)(a1 + i + 16);
LABEL_18:
      v21 = v26;
      v26 = 0;
      v22 = *v20;
      *v20 = v21;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22, v14);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26, v14);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::dispatchPrintEvent(WebCore::Frame &,WTF::AtomString const&,WebCore::DispatchedOnDocumentEventLoop)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *a1 = &off_1E3400620;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
    else
      --v4[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::dispatchPrintEvent(WebCore::Frame &,WTF::AtomString const&,WebCore::DispatchedOnDocumentEventLoop)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3400620;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::dispatchPrintEvent(WebCore::Frame &,WTF::AtomString const&,WebCore::DispatchedOnDocumentEventLoop)::$_0,void>::call(uint64_t a1)
{
  WebCore::LocalDOMWindow *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;

  v2 = *(WebCore::LocalDOMWindow **)(a1 + 8);
  v3 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
  *(_QWORD *)v3 = off_1E33A4B48;
  *(_QWORD *)(v3 + 8) = 0;
  v5 = *(_DWORD *)(v3 + 20) & 0xFFC00000 | (*(_QWORD *)(a1 + 16) != 0) | 0x1E8200;
  *(_DWORD *)(v3 + 16) = 1;
  *(_DWORD *)(v3 + 20) = v5;
  v6 = *(_DWORD **)(a1 + 16);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(v3 + 24) = v6;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = v4;
  *(_QWORD *)(v3 + 64) = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    if (*(_BYTE *)(v8 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v8 - 264) += 2;
    result = (uint64_t)WebCore::LocalDOMWindow::dispatchEvent(v2, (WebCore::Event *)v3, (WebCore::EventTarget *)(v8 - 288));
    if (*(_DWORD *)(v8 - 264) == 2)
    {
      if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288), v10);
    }
    else
    {
      *(_DWORD *)(v8 - 264) -= 2;
    }
  }
  else
  {
    result = (uint64_t)WebCore::LocalDOMWindow::dispatchEvent(v2, (WebCore::Event *)v3, 0);
  }
  if (*(_DWORD *)(v3 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  --*(_DWORD *)(v3 + 16);
  return result;
}

uint64_t WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  __int128 v19;
  __int128 v20;

  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0x4924925)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x19602D140);
    }
    v5 = 56 * v3;
    v6 = WTF::fastMalloc((WTF *)(56 * v3));
    *(_DWORD *)(a1 + 8) = v5 / 0x38;
    *(_QWORD *)a1 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = v6;
      v9 = *a2;
      v10 = *a2 + 56 * v7;
      do
      {
        v11 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v11;
        v12 = *(unsigned int *)(v9 + 44);
        *(_QWORD *)(v8 + 32) = 0;
        *(_QWORD *)(v8 + 40) = 0;
        *(_DWORD *)(v8 + 44) = v12;
        if ((_DWORD)v12)
        {
          if (v12 >= 0x5555556)
            goto LABEL_14;
          v13 = 48 * v12;
          v14 = WTF::fastMalloc((WTF *)(48 * v12));
          *(_DWORD *)(v8 + 40) = (v13 & 0xFFFFFFF0) / 0x30;
          *(_QWORD *)(v8 + 32) = v14;
          v15 = *(_DWORD *)(v9 + 44);
          if (v15)
          {
            v16 = *(_QWORD *)(v9 + 32);
            v17 = v16 + 48 * v15;
            do
            {
              v18 = *(_DWORD **)v16;
              if (*(_QWORD *)v16)
                *v18 += 2;
              *(_QWORD *)v14 = v18;
              v19 = *(_OWORD *)(v16 + 8);
              v20 = *(_OWORD *)(v16 + 24);
              *(_BYTE *)(v14 + 40) = *(_BYTE *)(v16 + 40);
              *(_OWORD *)(v14 + 24) = v20;
              *(_OWORD *)(v14 + 8) = v19;
              v16 += 48;
              v14 += 48;
            }
            while (v16 != v17);
          }
        }
        *(_WORD *)(v8 + 48) = *(_WORD *)(v9 + 48);
        v8 += 56;
        v9 += 56;
      }
      while (v9 != v10);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0xAAAAAAB)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x19602D250);
    }
    v5 = 24 * v3;
    v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = v6;
      v9 = *a2;
      v10 = v9 + 24 * v7;
      do
      {
        v11 = *(const void **)v9;
        *(_QWORD *)v8 = *(_QWORD *)v9;
        if (v11)
          CFRetain(v11);
        v12 = *(unsigned int *)(v9 + 20);
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 20) = v12;
        if ((_DWORD)v12)
        {
          if (v12 >> 27)
            goto LABEL_14;
          v13 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v12));
          *(_DWORD *)(v8 + 16) = v12;
          *(_QWORD *)(v8 + 8) = v13;
          v14 = *(unsigned int *)(v9 + 20);
          if ((_DWORD)v14)
          {
            v15 = *(__int128 **)(v9 + 8);
            v16 = 32 * v14;
            do
            {
              v17 = *v15;
              v18 = v15[1];
              v15 += 2;
              *v13 = v17;
              v13[1] = v18;
              v13 += 2;
              v16 -= 32;
            }
            while (v16);
          }
        }
        v8 += 24;
        v9 += 24;
      }
      while (v9 != v10);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::__optional_destruct_base[abi:sn180100]<WebCore::TextRecognitionResult&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;
  const void *v14;

  v4 = WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, (uint64_t *)a2);
  result = WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 16, (uint64_t *)(a2 + 16));
  v6 = *(unsigned int *)(a2 + 44);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    v7 = 40 * v6;
    v8 = WTF::fastMalloc((WTF *)(40 * v6));
    *(_DWORD *)(a1 + 40) = (v7 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)(a1 + 32) = v8;
    v9 = *(_DWORD *)(a2 + 44);
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = v10 + 40 * v9;
      do
      {
        v12 = *(_DWORD **)v10;
        if (*(_QWORD *)v10)
          *v12 += 2;
        *(_QWORD *)v8 = v12;
        v13 = *(_OWORD *)(v10 + 8);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v10 + 24);
        *(_OWORD *)(v8 + 8) = v13;
        v10 += 40;
        v8 += 40;
      }
      while (v10 != v11);
    }
  }
  v14 = *(const void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  if (v14)
    CFRetain(v14);
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

uint64_t std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>::pair[abi:sn180100]<true,0>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;
  const void *v16;

  v6 = WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, (uint64_t *)a2);
  result = WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v6 + 16, (uint64_t *)(a2 + 16));
  v8 = *(unsigned int *)(a2 + 44);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    v9 = 40 * v8;
    v10 = WTF::fastMalloc((WTF *)(40 * v8));
    *(_DWORD *)(a1 + 40) = (v9 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = *(_DWORD *)(a2 + 44);
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 32);
      v13 = v12 + 40 * v11;
      do
      {
        v14 = *(_DWORD **)v12;
        if (*(_QWORD *)v12)
          *v14 += 2;
        *(_QWORD *)v10 = v14;
        v15 = *(_OWORD *)(v12 + 8);
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v12 + 24);
        *(_OWORD *)(v10 + 8) = v15;
        v12 += 40;
        v10 += 40;
      }
      while (v12 != v13);
    }
  }
  v16 = *(const void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v16;
  if (v16)
    CFRetain(v16);
  *(_OWORD *)(a1 + 56) = *a3;
  return a1;
}

uint64_t WebCore::isValidSampleLocation(WebCore *this, WebCore::Document *a2, const WebCore::IntPoint *a3)
{
  int8x8_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int8x8_t v18;
  _BYTE v19[24];
  float32x2_t v20[17];

  v4 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(a3, a2), (int32x2_t)0xFE000000FE000000);
  v18 = vorr_s8((int8x8_t)(*(_QWORD *)&v4 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(a3, a2), 6uLL)), v4));
  WebCore::HitTestResult::HitTestResult(v20, (int32x2_t *)&v18);
  v18.i32[0] = 98577;
  v5 = 1;
  v18.i8[4] = 1;
  WebCore::Document::hitTest((uint64_t)this, &v18, (WebCore::HitTestingTransformState *)v20, (uint64_t)v20);
  v7 = (_QWORD *)*((_QWORD *)WebCore::HitTestResult::listBasedTestResult((WebCore::HitTestResult *)v20) + 1);
  if (v7)
  {
    while (1)
    {
      v8 = *v7;
      v9 = *(_QWORD *)(*v7 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v9)
        goto LABEL_30;
      if ((*(_BYTE *)((*(_QWORD *)(*v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
        && (*(_BYTE *)((*(_QWORD *)(*v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
      {
        goto LABEL_30;
      }
      if ((*(_BYTE *)((*(_QWORD *)(*v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v9 = *(_QWORD *)((*(_QWORD *)(*v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v9)
          v9 = *(_QWORD *)(v9 + 8);
      }
      if (WebCore::RenderStyle::hasBackgroundImage((WebCore::RenderStyle *)(v9 + 80)))
      {
LABEL_30:
        v5 = 0;
        goto LABEL_31;
      }
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        break;
LABEL_21:
      v7 = (_QWORD *)v7[2];
      v5 = 1;
      if (!v7)
        goto LABEL_31;
    }
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::Styleable::fromElement((WTF::StringImpl *)&v18, (WebCore::Element *)v8);
    if (WebCore::Element::hasRunningTransitions(*(_QWORD *)&v18, (uint64_t)v19))
      goto LABEL_16;
    v12 = WebCore::Element::animations(*(_QWORD *)&v18, (uint64_t)v19);
    if (v12)
    {
      v16 = *(_QWORD *)(v12 + 8);
      if (v16)
      {
        while (WebCore::WebAnimation::playState(*(WebCore::WebAnimation **)v16) != 1)
        {
          v16 = *(_QWORD *)(v16 + 16);
          if (!v16)
            goto LABEL_13;
        }
        WebCore::Styleable::~Styleable((WebCore::Styleable *)&v18, v11);
        v15 = 1;
LABEL_18:
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        if (v15)
          goto LABEL_30;
        goto LABEL_21;
      }
    }
LABEL_13:
    if ((*(_WORD *)(v8 + 28) & 0x10) != 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
      if (v13 != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
      {
LABEL_25:
        v15 = v13 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24);
        goto LABEL_17;
      }
      *(_DWORD *)(v8 + 24) += 2;
      v14 = *(_QWORD *)(v8 + 248);
      WebCore::HTMLCanvasElement::deref((unsigned int *)v8, v11);
      if (v14)
      {
LABEL_16:
        v15 = 1;
LABEL_17:
        WebCore::Styleable::~Styleable((WebCore::Styleable *)&v18, v11);
        goto LABEL_18;
      }
      if ((*(_WORD *)(v8 + 28) & 0x10) != 0)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
        goto LABEL_25;
      }
    }
    v15 = 0;
    goto LABEL_17;
  }
LABEL_31:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v20, v6);
  return v5;
}

WTF::StringImpl *WebCore::Styleable::fromElement(WTF::StringImpl *this, WebCore::Element *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v3 = this;
  if ((~*((unsigned __int16 *)a2 + 14) & 0x408) != 0
    || (this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 368))(a2),
        !(_DWORD)this))
  {
    *(_QWORD *)v3 = a2;
    *((_BYTE *)v3 + 8) = 0;
    *((_BYTE *)v3 + 24) = 0;
    return this;
  }
  v5 = *((_QWORD *)a2 + 14);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if ((~*((unsigned __int16 *)a2 + 14) & 0x408) != 0)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    if ((~*((unsigned __int16 *)a2 + 14) & 0x408) != 0)
    {
LABEL_6:
      v7 = 0;
      goto LABEL_7;
    }
  }
  v7 = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 368))(a2);
LABEL_7:
  this = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
    v8 = *(_DWORD *)this;
    *(_QWORD *)v3 = v6;
    *((_DWORD *)v3 + 2) = v7;
    *(_DWORD *)this = v8 + 4;
    *((_QWORD *)v3 + 2) = this;
    *((_BYTE *)v3 + 24) = 1;
    if (v8 == -2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v4);
    else
      *(_DWORD *)this = v8 + 2;
  }
  else
  {
    *(_QWORD *)v3 = v6;
    *((_DWORD *)v3 + 2) = v7;
    *((_QWORD *)v3 + 2) = 0;
    *((_BYTE *)v3 + 24) = 1;
  }
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJSH_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JRNS0_6__baseILSS_1EJSH_SN_EEEOS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::make_unique[abi:sn180100]<Inspector::ConsoleMessage,JSC::MessageSource,JSC::MessageType &,JSC::MessageLevel &,WTF::String &,WTF::Ref<Inspector::ScriptArguments,WTF::RawPtrTraits<Inspector::ScriptArguments>,WTF::DefaultRefDerefTraits<Inspector::ScriptArguments>>,JSC::JSGlobalObject *&>(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x60);
  result = MEMORY[0x19AEA5F28](v14, *a2, *a3, *a4, a5, a6, *a7, 0, 0.0);
  *a1 = result;
  return result;
}

uint64_t WebCore::UserContentURLPattern::UserContentURLPattern(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)result = v2;
  v3 = *(_DWORD **)(a2 + 8);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(result + 8) = v3;
  v4 = *(_DWORD **)(a2 + 16);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(result + 16) = v4;
  *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
  return result;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::UserContentURLPattern const&>(unint64_t a1)
{
  unint64_t v1;
  uint64_t result;

  v1 = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&qword_1ECE838C8, dword_1ECE838D4 + 1, a1);
  result = WebCore::UserContentURLPattern::UserContentURLPattern(qword_1ECE838C8 + 32 * dword_1ECE838D4, v1);
  ++dword_1ECE838D4;
  return result;
}

WebCore::PluginData *WTF::RefCounted<WebCore::PluginData>::deref(WebCore::PluginData *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::PluginData::~PluginData(result, a2);
    return (WebCore::PluginData *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::PluginData::~PluginData(WebCore::PluginData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;

  if (*((_BYTE *)this + 176))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  if (*((_BYTE *)this + 112))
    WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*((_BYTE *)this + 48))
  {
    v8 = *((unsigned int *)this + 11);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = (WTF::StringImpl **)(*((_QWORD *)this + 4) + 8);
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = *(v10 - 1);
        *(v10 - 1) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v10 += 2;
        v9 -= 16;
      }
      while (v9);
    }
    v13 = (WTF *)*((_QWORD *)this + 4);
    if (v13)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v13, a2);
    }
  }
  WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::PluginInfo>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[6];
      v3[6] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 3), a2);
      v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = v3[1];
      v3[1] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 7;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = v9[1];
          v9[1] = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v12);
              v15 = v12[7];
              if ((_DWORD)v15)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v12 + 2), (WTF::StringImpl *)(*((_QWORD *)v12 + 2) + 32 * v15));
              v16 = (WTF *)*((_QWORD *)v12 + 2);
              if (v16)
              {
                *((_QWORD *)v12 + 2) = 0;
                v12[6] = 0;
                WTF::fastFree(v16, v6);
              }
              WTF::fastFree((WTF *)v12, v6);
            }
          }
          result = *v9;
          *v9 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
          v7 += 4;
          v9 += 2;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WebCore::IDBClient::IDBConnectionProxy **WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref(WebCore::IDBClient::IDBConnectionProxy **this, void *a2)
{
  bmalloc::api *v2;
  unsigned int v3;
  unsigned int v4;
  WebCore::IDBClient::IDBConnectionProxy *v5;
  bmalloc::api *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (bmalloc::api *)this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = this[3];
    *((_QWORD *)v2 + 3) = 0;
    if (v5)
    {
      WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v5, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    v8 = (unsigned int *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
    return (WebCore::IDBClient::IDBConnectionProxy **)bmalloc::api::isoDeallocate(v2, a2);
  }
  return this;
}

unsigned int *WTF::HashTable<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>>::add(unsigned int *result, unsigned int **a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int **v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int **v29;

  v3 = result;
  v4 = WebCore::allPages(void)::set;
  if (WebCore::allPages(void)::set
    || (result = (unsigned int *)WTF::HashTable<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>>::rehash(8u, 0), (v4 = WebCore::allPages(void)::set) != 0))
  {
    v5 = 0;
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  v7 = 0;
  v8 = *a2;
  v9 = *((_QWORD *)*a2 + 1);
  v10 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v6;
    v16 = (unsigned int **)(v4 + 8 * v15);
    v17 = *v16;
    if (*v16 != (unsigned int *)-1)
      break;
    v7 = (unsigned int **)(v4 + 8 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!v17)
  {
    if (v7)
    {
      *v7 = 0;
      --*(_DWORD *)(WebCore::allPages(void)::set - 16);
      v8 = *a2;
      v16 = v7;
    }
    *a2 = 0;
    result = *v16;
    *v16 = v8;
    if (result)
    {
      do
      {
        v18 = __ldaxr(result);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, result));
      if (!v19)
      {
        atomic_store(1u, result);
        v29 = v16;
        result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
        v16 = v29;
      }
    }
    if (WebCore::allPages(void)::set)
      v20 = *(_DWORD *)(WebCore::allPages(void)::set - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(WebCore::allPages(void)::set - 12) = v20;
    v24 = WebCore::allPages(void)::set;
    if (WebCore::allPages(void)::set)
      v25 = *(_DWORD *)(WebCore::allPages(void)::set - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(WebCore::allPages(void)::set - 16) + v25);
    v27 = *(unsigned int *)(WebCore::allPages(void)::set - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_30;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_33:
        result = (unsigned int *)WTF::HashTable<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>>::rehash(v28, v16);
        v16 = (unsigned int **)result;
        v24 = WebCore::allPages(void)::set;
        if (WebCore::allPages(void)::set)
          v27 = *(unsigned int *)(WebCore::allPages(void)::set - 4);
        else
          v27 = 0;
        goto LABEL_37;
      }
LABEL_30:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(WebCore::allPages(void)::set - 12) >= (2 * v27));
      goto LABEL_33;
    }
LABEL_37:
    v23 = v24 + 8 * v27;
    v22 = 1;
    goto LABEL_38;
  }
  if (*((_QWORD *)v17 + 1) != v9)
    goto LABEL_10;
  if ((v5 & 1) != 0)
    v21 = 0;
  else
    v21 = *(unsigned int *)(v4 - 4);
  v22 = 0;
  v23 = v4 + 8 * v21;
LABEL_38:
  *(_QWORD *)v3 = v16;
  *((_QWORD *)v3 + 1) = v23;
  *((_BYTE *)v3 + 16) = v22;
  return result;
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1, unsigned int **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int **result;

  v4 = WebCore::allPages(void)::set;
  if (WebCore::allPages(void)::set)
  {
    v5 = *(_DWORD *)(WebCore::allPages(void)::set - 4);
    v6 = *(_DWORD *)(WebCore::allPages(void)::set - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  WebCore::allPages(void)::set = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(WebCore::allPages(void)::set - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (unsigned int **)(v4 + 8 * v9);
      v12 = *v11;
      if (*v11 != (unsigned int *)-1)
      {
        if (v12)
        {
          if (WebCore::allPages(void)::set)
            v13 = *(_DWORD *)(WebCore::allPages(void)::set - 8);
          else
            v13 = 0;
          v14 = ~(*((_QWORD *)v12 + 1) << 32) + *((_QWORD *)v12 + 1);
          v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(WebCore::allPages(void)::set + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (unsigned int **)(WebCore::allPages(void)::set + 8 * v19);
          *v21 = 0;
          v22 = *v11;
          *v11 = 0;
          *v21 = v22;
          v23 = *v11;
          *v11 = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, v8);
            }
          }
          if (v11 == a2)
            v10 = v21;
        }
        else
        {
          *v11 = 0;
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::~Page()::$_0,void,WebCore::LocalFrame &>::call(int a1, WebCore::LocalFrame *this)
{
  WebCore::LocalFrame::willDetachPage(this);
  return WebCore::Frame::detachFromPage(this);
}

uint64_t WTF::Detail::CallableWrapper<void (*)(BOOL),void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::renderTreeSize(void)::$_0,void,WebCore::Document &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 + 1944);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16);
    **(_QWORD **)(result + 8) += *(_QWORD *)(v2 + 256);
    *(_DWORD *)(v2 + 16) = v3 + 1;
    if (v3 == -1)
    {
      result = 286;
      __break(0xC471u);
    }
    else
    {
      *(_DWORD *)(v2 + 16) = v3;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::updateStyleAfterChangeInEnvironment(void)::$_0,void,WebCore::Document &>::call(WTF::MonotonicTime *a1, uint64_t a2)
{
  WebCore::Style::Resolver *v3;
  int v4;
  double v5;
  WebCore::Style::Scope *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  bmalloc::api *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;

  v3 = *(WebCore::Style::Resolver **)(*(_QWORD *)(a2 + 1328) + 32);
  if (v3)
  {
    v4 = (*(_DWORD *)v3)++;
    a1 = (WTF::MonotonicTime *)*((_QWORD *)v3 + 53);
    if (a1)
    {
      *((_QWORD *)v3 + 53) = 0;
      a1 = (WTF::MonotonicTime *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable((uint64_t)a1, (void *)a2);
      v4 = *(_DWORD *)v3 - 1;
    }
    if (v4)
    {
      *(_DWORD *)v3 = v4;
    }
    else
    {
      WebCore::Style::Resolver::~Resolver(v3);
      a1 = (WTF::MonotonicTime *)bmalloc::api::isoDeallocate(v22, v23);
    }
  }
  *(_BYTE *)(a2 + 3390) = 1;
  if (((*(_QWORD *)(a2 + 1536) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*(_QWORD *)(a2 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    && !*(_BYTE *)(a2 + 3362))
  {
    *(_QWORD *)(a2 + 1528) = 0;
    WTF::MonotonicTime::now(a1);
    WebCore::TimerBase::setNextFireTime(a2 + 1504, v5 + 0.0);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v26 = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)a2, (WebCore::Document *)a2);
      if (v26)
        WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(v26, (WebCore::Document *)a2);
    }
  }
  v7 = *(WebCore::Style::Scope **)(a2 + 1328);
  ++*((_DWORD *)v7 + 2);
  v9 = WebCore::Style::Scope::didChangeStyleSheetEnvironment(v7, (void *)a2);
  v15 = *((_DWORD *)v7 + 2);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19602E3A8);
  }
  *((_DWORD *)v7 + 2) = v15 - 1;
  result = (uint64_t)WebCore::Document::updateElementsAffectedByMediaQueries((WebCore::Document *)a2, v8, v9, v10, v11, v12, v13, v14);
  if ((*(_QWORD *)(a2 + 2064) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(a2 + 2064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v17 = 4;
  }
  else
  {
    result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a2 + 2032));
    v17 = 260;
  }
  v18 = *(_QWORD *)(a2 + 528);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
      {
        v21 = *(_DWORD **)(v20 + 8);
        if (v21)
        {
          ++*v21;
          result = WebCore::Page::scheduleRenderingUpdate((uint64_t)v21, v17);
          if (*v21 == 1)
          {
            WebCore::Page::~Page((uint64_t)v21);
            return WTF::fastFree(v24, v25);
          }
          else
          {
            --*v21;
          }
        }
      }
    }
  }
  return result;
}

