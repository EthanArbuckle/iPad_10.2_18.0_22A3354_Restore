uint64_t WebCore::HTMLOutputElement::canContainRangeEndPoint(WebCore::HTMLOutputElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLOutputElement::isLabelable(WebCore::HTMLOutputElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLOutputElement::computeWillValidate(WebCore::HTMLOutputElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLOutputElement::isEnumeratable(WebCore::HTMLOutputElement *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::HTMLOutputElement::~HTMLOutputElement(WebCore::HTMLOutputElement *this, WTF::StringImpl *a2)
{
  WebCore::HTMLOutputElement::~HTMLOutputElement((WebCore::HTMLOutputElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLOutputElement::~HTMLOutputElement((WebCore::HTMLOutputElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLOutputElement::isEnumeratable(WebCore::HTMLOutputElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLOutputElement::computeWillValidate(WebCore::HTMLOutputElement *this)
{
  return 0;
}

void WebCore::HTMLParagraphElement::~HTMLParagraphElement(WebCore::HTMLParagraphElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLPreElement::~HTMLPreElement(WebCore::HTMLPreElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLProgressElement::canContainRangeEndPoint(WebCore::HTMLProgressElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLProgressElement::isLabelable(WebCore::HTMLProgressElement *this)
{
  return 1;
}

void WebCore::HTMLParamElement::~HTMLParamElement(WebCore::HTMLParamElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::registrar(uint64_t a1)
{
  uint64_t result;
  __int128 v3;
  int v4;
  int v5;
  _QWORD v6[5];

  if ((byte_1ECE83591 & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE835A8 = 0;
    qword_1ECE835A0 = 0;
    byte_1ECE83591 = 1;
  }
  if ((byte_1ECE83592 & 1) == 0)
  {
    byte_1ECE83592 = 1;
    v6[0] = WebCore::YouTubePluginReplacement::create;
    v6[1] = WebCore::YouTubePluginReplacement::supportsMIMEType;
    v6[2] = WebCore::YouTubePluginReplacement::supportsFileExtension;
    v6[3] = WebCore::YouTubePluginReplacement::supportsURL;
    v6[4] = WebCore::YouTubePluginReplacement::isEnabledBySettings;
    WebCore::registrar(v6);
  }
  result = operator new();
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)result = *(_OWORD *)a1;
  *(_OWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a1 + 32);
  v6[0] = result;
  v4 = dword_1ECE835AC;
  if (dword_1ECE835AC == dword_1ECE835A8)
  {
    result = (uint64_t)WTF::Vector<WebCore::ReplacementPlugin *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1ECE835AC + 1, (unint64_t)v6);
    v5 = dword_1ECE835AC;
    *(_QWORD *)(qword_1ECE835A0 + 8 * dword_1ECE835AC) = *(_QWORD *)result;
    v4 = v5;
  }
  else
  {
    *(_QWORD *)(qword_1ECE835A0 + 8 * dword_1ECE835AC) = result;
  }
  dword_1ECE835AC = v4 + 1;
  return result;
}

char *WTF::Vector<WebCore::ReplacementPlugin *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v2 = a2;
  v3 = (char *)qword_1ECE835A0;
  if (qword_1ECE835A0 <= a2)
  {
    v4 = dword_1ECE835AC;
    if (qword_1ECE835A0 + 8 * (unint64_t)dword_1ECE835AC > a2)
    {
      v5 = dword_1ECE835A8 + ((unint64_t)dword_1ECE835A8 >> 2);
      if (v5 >= 0x10)
        v6 = v5 + 1;
      else
        v6 = 16;
      if (v6 <= a1)
        v7 = a1;
      else
        v7 = v6;
      if (v7 <= dword_1ECE835A8)
      {
        v8 = (char *)qword_1ECE835A0;
        return &v8[8 * ((uint64_t)(v2 - (_QWORD)v3) >> 3)];
      }
      if (!(v7 >> 29))
      {
        v8 = (char *)WTF::fastMalloc((WTF *)(8 * v7));
        dword_1ECE835A8 = v7;
        qword_1ECE835A0 = (uint64_t)v8;
        memcpy(v8, v3, 8 * v4);
        if (v3)
        {
          if (v8 == v3)
          {
            qword_1ECE835A0 = 0;
            dword_1ECE835A8 = 0;
          }
          WTF::fastFree((WTF *)v3, v9);
          v8 = (char *)qword_1ECE835A0;
        }
        return &v8[8 * ((uint64_t)(v2 - (_QWORD)v3) >> 3)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x195C605E4);
    }
  }
  v10 = dword_1ECE835A8 + ((unint64_t)dword_1ECE835A8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= a1)
    v12 = a1;
  else
    v12 = v11;
  if (v12 > dword_1ECE835A8)
  {
    if (v12 >> 29)
      goto LABEL_30;
    v13 = dword_1ECE835AC;
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    dword_1ECE835A8 = v12;
    qword_1ECE835A0 = (uint64_t)v14;
    memcpy(v14, v3, 8 * v13);
    if (v3)
    {
      if ((char *)qword_1ECE835A0 == v3)
      {
        qword_1ECE835A0 = 0;
        dword_1ECE835A8 = 0;
      }
      WTF::fastFree((WTF *)v3, v15);
    }
  }
  return (char *)v2;
}

uint64_t WTF::reverseFind<char16_t>(uint64_t result, unint64_t a2, int a3, unint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  if (!a2)
    return -1;
  v4 = a2 - 1;
  if (a2 > a4)
    v4 = a4;
  if (a2 > v4)
  {
    v5 = *(unsigned __int16 *)(result + 2 * v4);
    if (v4 - 1 < a2)
    {
      if (v5 == a3)
        return v4;
      v6 = result - 2;
      while (v4)
      {
        result = v4 - 1;
        v7 = *(unsigned __int16 *)(v6 + 2 * v4--);
        if (v7 == a3)
          return result;
      }
      return -1;
    }
    if (v5 == a3)
      return v4;
    if (!v4)
      return -1;
  }
  __break(1u);
  return result;
}

unint64_t WTF::reverseFind<unsigned char>(uint64_t a1, unint64_t a2, int a3, unint64_t a4)
{
  unint64_t result;
  unint64_t v6;

  if (!a2)
    return -1;
  if (a2 <= a4)
    result = a2 - 1;
  else
    result = a4;
  if (a2 <= result)
  {
LABEL_10:
    __break(1u);
    return -1;
  }
  v6 = result - 1;
  while (*(unsigned __int8 *)(a1 + result) != a3)
  {
    if (!result)
      return -1;
    --result;
    if (v6 >= a2)
      goto LABEL_10;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::HTMLPlugInElement::*&)(void),WebCore::HTMLPlugInElement*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __int16 v6;
  __int16 v7;
  uint64_t v8;

  *a1 = off_1E33CAD48;
  v2 = a1[1];
  if (v2)
  {
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v8 = v2;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v8))*(_QWORD *)(v2 + 16) &= ~0x4000000000000uLL;
    v4 = a1[1];
    a1[1] = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        v6 = *(_WORD *)(v4 + 30);
        if ((v6 & 0x400) == 0)
        {
          v7 = *(_WORD *)(v4 + 28);
          if ((v7 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v4, v3);
          }
          else
          {
            if ((v7 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
              v6 = *(_WORD *)(v4 + 30);
            }
            *(_WORD *)(v4 + 30) = v6 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
          }
        }
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(void)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  __int16 v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33CAD48;
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v8 = v3;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v8))*(_QWORD *)(v3 + 16) &= ~0x4000000000000uLL;
    v4 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        v6 = *(_WORD *)(v4 + 30);
        if ((v6 & 0x400) == 0)
        {
          v7 = *(_WORD *)(v4 + 28);
          if ((v7 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
          }
          else
          {
            if ((v7 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
              v6 = *(_WORD *)(v4 + 30);
            }
            *(_WORD *)(v4 + 30) = v6 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
          }
        }
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  return WTF::fastFree(a1, a2);
}

double WTF::Detail::CallableWrapper<WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(void)::$_0,void>::call(uint64_t isImageType)
{
  uint64_t v1;
  double result;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t StatusReg;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  WebCore::ImageLoader *v11;
  WTF *v12;
  void *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  double v21;

  v1 = *(_QWORD *)(isImageType + 8);
  *(_BYTE *)(v1 + 241) = 0;
  if ((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C60CD0);
    }
    isImageType = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1296))(v1);
    if ((isImageType & 1) == 0)
    {
      isImageType = WebCore::HTMLPlugInImageElement::isImageType((WebCore::HTMLPlugInImageElement *)v1);
      if ((_DWORD)isImageType)
      {
        v4 = *(_QWORD *)(v1 + 232);
        if (!v4)
        {
          v4 = WTF::fastMalloc((WTF *)0x88);
          *(_QWORD *)v4 = off_1E33F60F0;
          *(_QWORD *)(v4 + 8) = 0;
          v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v1);
          do
            v6 = __ldaxr(v5);
          while (__stlxr(v6 + 1, v5));
          *(_QWORD *)(v4 + 16) = v5;
          *(_QWORD *)(v4 + 24) = 0;
          *(_QWORD *)(v4 + 32) = off_1E3407128;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          *(_OWORD *)(v4 + 40) = 0u;
          *(_OWORD *)(v4 + 56) = 0u;
          v8 = *(unsigned int **)(StatusReg + 736);
          if (!v8)
            v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
          *(_QWORD *)(v4 + 72) = v8;
          *(_QWORD *)(v4 + 32) = off_1E31F7378;
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v10 = off_1E33F6510;
          v10[1] = WebCore::ImageLoader::timerFired;
          v10[2] = 0;
          v10[3] = v4;
          *(_QWORD *)(v4 + 80) = v10;
          *(_QWORD *)(v4 + 120) = 0;
          *(_OWORD *)(v4 + 104) = 0u;
          *(_OWORD *)(v4 + 88) = 0u;
          *(_BYTE *)(v4 + 128) = *(_BYTE *)(v4 + 128) & 0xC0 | 8;
          *(_BYTE *)(v4 + 129) = 0;
          *(_QWORD *)v4 = off_1E33BFBF0;
          v11 = *(WebCore::ImageLoader **)(v1 + 232);
          *(_QWORD *)(v1 + 232) = v4;
          if (v11)
          {
            WebCore::ImageLoader::~ImageLoader(v11, v3);
            WTF::fastFree(v12, v13);
            v4 = *(_QWORD *)(v1 + 232);
          }
        }
        if (*(_BYTE *)(v1 + 240))
        {
          v14 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
          if (*MEMORY[0x1E0CBF2F8])
            *v14 += 2;
          v15 = *(WTF::StringImpl **)(v4 + 96);
          *(_QWORD *)(v4 + 96) = v14;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        isImageType = (uint64_t)WebCore::ImageLoader::updateFromElement(v4, 0);
      }
      else if (*(_BYTE *)(v1 + 224) && (*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195C60CF0);
        }
        if (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 7
          && !*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x100))
        {
          isImageType = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 1320))(v1, 0);
        }
      }
    }
  }
  *(_BYTE *)(v1 + 240) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  v17 = *(_DWORD *)(v16 + 3328) - 1;
  *(_DWORD *)(v16 + 3328) = v17;
  v18 = *(_QWORD *)(v16 + 528);
  if (v18)
  {
    if (*(_QWORD *)(v18 + 8))
      v19 = v17 == 0;
    else
      v19 = 0;
    if (v19)
    {
      if ((*(_QWORD *)(v16 + 2152) & 0xFFFFFFFFFFFFLL) == 0
        || (result = *(double *)((*(_QWORD *)(v16 + 2152) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
      {
        v20 = v16 + 2120;
        *(_QWORD *)(v16 + 2144) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)isImageType);
        WebCore::TimerBase::setNextFireTime(v20, v21 + 0.0);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLPlugInImageElement::requestObject(WTF::String const&,WTF::String const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E33CAD70;
  WebCore::HTMLPlugInImageElement::requestObject(WTF::String const&,WTF::String const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLPlugInImageElement::requestObject(WTF::String const&,WTF::String const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33CAD70;
  WebCore::HTMLPlugInImageElement::requestObject(WTF::String const&,WTF::String const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLPlugInImageElement::requestObject(WTF::String const&,WTF::String const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(v1 + 22) & 8) != 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
    if (v2 == *(_QWORD *)(result + 80))
    {
      v3 = *(_QWORD *)(v2 + 528);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = (unsigned int *)(v4 + 8);
          do
            v6 = __ldaxr(v5);
          while (__stlxr(v6 + 1, v5));
          v7 = *(_QWORD *)(v4 + 280);
          ++*(_DWORD *)v7;
          result = WebCore::FrameLoader::SubframeLoader::requestObject(*(_QWORD *)(v7 + 56), (WebCore::HTMLObjectElement *)v1, (_QWORD *)(result + 24), result + 32, (WTF::StringImpl **)(result + 40), result + 48, result + 64);
          if (!*(_DWORD *)v7)
          {
            __break(0xC471u);
            JUMPOUT(0x195C60E40);
          }
          --*(_DWORD *)v7;
          do
          {
            v8 = __ldaxr(v5);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v5));
          if (!v9)
          {
            atomic_store(1u, v5);
            v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v10 = off_1E31FE290;
            v10[1] = v5;
            v11 = v10;
            WTF::ensureOnMainThread();
            result = (uint64_t)v11;
            if (v11)
              return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WebCore::HTMLQuoteElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WebCore::Element::Element(v6, a1, a2, 16);
  *result = off_1E33CC410;
  *a3 = result;
  return result;
}

BOOL WebCore::HTMLQuoteElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::citeAttr;
}

WTF::StringImpl *WebCore::HTMLScriptElement::finishParsingChildren(WebCore::HTMLScriptElement *this)
{
  const WebCore::ContainerNode *v2;

  WebCore::Element::finishParsingChildren(this);
  return WebCore::ScriptElement::finishParsingChildren((WebCore::HTMLScriptElement *)((char *)this + 112), v2);
}

uint64_t WebCore::HTMLScriptElement::didFinishInsertingNode(WebCore::HTMLScriptElement *this)
{
  return WebCore::ScriptElement::didFinishInsertingNode((uint64_t)this + 112);
}

WTF::StringImpl *WebCore::HTMLScriptElement::setText(WTF::StringImpl *result, uint64_t a2)
{
  unsigned int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v2 = *((unsigned __int16 *)result + 14) >> 12;
  if (v2 == 1)
    return WebCore::ContainerNode::stringReplaceAll(result, a2);
  if (v2 <= 0xB)
  {
    if (v2 == 11)
      return WebCore::ContainerNode::stringReplaceAll(result, a2);
    if (((1 << v2) & 0x19C) != 0)
    {
      result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)result + 120))(&v4);
      if (v6)
      {
        result = v5;
        v5 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLScriptElement::setText@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  char v13[16];
  int v14;
  char v15;

  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = v6 + 192;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::switchOn<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>&&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>&,WTF::String const)::$_1>((uint64_t)v13, a2, v9, (uint64_t)&v12);
  WebCore::HTMLScriptElement::setTextContent(a1, v13, a3);
  if (v14 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v14])(&v15, v13);
  v14 = -1;
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::HTMLScriptElement::setTextContent@<X0>(uint64_t *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned __int16 *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12[3];
  WTF::StringImpl *v13;

  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    if (v4 == 1)
    {
      v9 = *a2;
      v10 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(_BYTE *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      v11 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebCore::HTMLScriptElement::setTextContent(v11);
    }
  }
  else
  {
    v5 = (unsigned __int16 *)result;
    v6 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v13 = v6;
    WTF::String::operator=(result + 26, &v13);
    WebCore::Node::setTextContent(v5, (uint64_t)&v13, v12);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v12, v7);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = (uint64_t *)v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLScriptElement::setTextContent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  int v15;
  char v16[16];
  int v17;
  char v18;

  v5 = *(_QWORD *)(a1[5] + 8);
  v6 = *(_QWORD *)(v5 + 704);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v5 = v7;
  }
  v8 = v5 + 192;
  if (*(_BYTE *)(a2 + 16))
  {
    LOBYTE(v14) = 0;
    v15 = -1;
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(WTF::StringImpl **, _DWORD **, uint64_t))off_1E33CD9C8[v12])(&v13, &v14, a2);
      v15 = v12;
    }
  }
  else
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v9 += 2;
    v14 = v9;
    v15 = 1;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::switchOn<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>&&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>&,WTF::String const)::$_1>((uint64_t)v16, (uint64_t)&v14, v8, (uint64_t)&v13);
  WebCore::HTMLScriptElement::setTextContent(a1, v16, a3);
  if (v17 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v17])(&v18, v16);
  v17 = -1;
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _DWORD **))off_1E33CD9B8[v15])(&v13, &v14);
  return result;
}

WTF::StringImpl *WebCore::HTMLScriptElement::setInnerText@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WebCore::HTMLScriptElement *v17;
  BOOL v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;

  v6 = *(_QWORD *)(a1[5] + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = v6 + 192;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::switchOn<std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>&&,WTF::String const&)::$_0,WebCore::trustedTypeCompliantString(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::TrustedScript,WTF::RawPtrTraits<WebCore::TrustedScript>,WTF::DefaultRefDerefTraits<WebCore::TrustedScript>>,WTF::String>&,WTF::String const)::$_1>((uint64_t)&v23, a2, v9, (uint64_t)&v22);
  v11 = v22;
  v22 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v25)
  {
    if (v25 != 1)
    {
      v17 = (WebCore::HTMLScriptElement *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::HTMLScriptElement::setAsync(v17, v18);
    }
    v12 = v24;
    v24 = 0;
    *(_BYTE *)a3 = (_BYTE)v23;
    *(_QWORD *)(a3 + 8) = v12;
    v13 = 1;
    *(_BYTE *)(a3 + 16) = 1;
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v13])(&v22, &v23);
  }
  v22 = v23;
  v23 = 0;
  WTF::String::operator=(a1 + 26, &v22);
  WebCore::HTMLElement::setInnerText((WebCore::ContainerNode *)a1, (WTF *)&v22, &v19);
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  v13 = v25;
  if (v25 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v13])(&v22, &v23);
  return result;
}

WTF::StringImpl **WebCore::HTMLScriptElement::setAsync(WebCore::HTMLScriptElement *this, int a2, __n128 a3)
{
  WTF::StringImpl **result;

  result = WebCore::Element::setBooleanAttribute((WTF::StringImpl **)this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::asyncAttr, a2, a3);
  *(_WORD *)((char *)this + 133) &= ~0x100u;
  return result;
}

uint64_t WebCore::HTMLScriptElement::async(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return HIBYTE(*(unsigned __int16 *)((char *)this + 133)) & 1;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return HIBYTE(*(unsigned __int16 *)((char *)this + 133)) & 1;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return HIBYTE(*(unsigned __int16 *)((char *)this + 133)) & 1;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::asyncAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::asyncAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::asyncAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return HIBYTE(*(unsigned __int16 *)((char *)this + 133)) & 1;
  }
  return 1;
}

WTF::StringImpl *WebCore::HTMLScriptElement::setCrossOrigin(WebCore::HTMLScriptElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t *WebCore::HTMLScriptElement::crossOrigin@<X0>(WebCore::HTMLScriptElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    result = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  result = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(result - 1);
    if (v8 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      break;
    }
    result += 2;
    if (!--v6)
    {
      result = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (*result)
  {
    WTF::equalLettersIgnoringASCIICase(result, "use-credentials", 0x10uLL);
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLScriptElement::src@<X0>(WebCore::HTMLScriptElement *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v6;
  _QWORD *Attribute;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  int v12;
  _BOOL8 shouldMaskURLForBindingsInternal;
  WTF::StringImpl *v14;
  char v15;

  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  Attribute = (_QWORD *)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a2, a3, a5);
  v8 = &v14;
  WebCore::Document::completeURL((WebCore::Document *)v6, Attribute, v6 + 848, 0, (WTF::URL *)&v14);
  if ((v15 & 2) == 0)
  {
    v8 = &v14;
    shouldMaskURLForBindingsInternal = WebCore::Document::shouldMaskURLForBindingsInternal((WebCore::Document *)v6, (const WTF::URL *)&v14);
    if (shouldMaskURLForBindingsInternal)
      v8 = (WTF::StringImpl **)WebCore::Document::maskedURLForBindings((WebCore::Document *)shouldMaskURLForBindingsInternal);
  }
  v10 = *v8;
  if (v10)
    *(_DWORD *)v10 += 2;
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (v10)
  {
    v12 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    *a4 = v10;
    if (v12)
      *(_DWORD *)v10 = v12;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v9);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLScriptElement::setSrc@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31[2];
  WTF::StringImpl *v32;

  v6 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = (WTF::StringImpl *)(v6 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v31[0] = v9;
  v31[1] = (WTF::StringImpl *)&v27;
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_38;
  v32 = (WTF::StringImpl *)v31;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_16TrustedScriptURLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v28, &v32, a2);
  v12 = v27;
  v27 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v30)
  {
    if (v30 == 1)
    {
      v13 = v29;
      v29 = 0;
      *(_BYTE *)a3 = (_BYTE)v28;
      *(_QWORD *)(a3 + 8) = v13;
      v14 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v14])(v31, &v28);
    }
LABEL_38:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::HTMLScriptElement::addSubresourceAttributeURLs(v26);
  }
  v15 = v28;
  v28 = 0;
  if (v15)
  {
    v32 = v15;
    if ((*((_BYTE *)v15 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v17 = v32;
      v15 = v31[0];
      v31[0] = 0;
      v32 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  v31[0] = v15;
  v18 = *((_QWORD *)a1 + 13);
  if (!v18)
    goto LABEL_27;
  v19 = *(_DWORD *)(v18 + 4);
  if ((v19 & 1) != 0)
  {
    v20 = *(uint64_t **)(v18 + 40);
    v21 = *(_DWORD *)(v18 + 52);
    if (!v21)
    {
LABEL_27:
      v22 = 0xFFFFFFFFLL;
      goto LABEL_28;
    }
  }
  else
  {
    v20 = (uint64_t *)(v18 + 32);
    v21 = v19 >> 5;
    if (!v21)
      goto LABEL_27;
  }
  v22 = 0;
  while (1)
  {
    v23 = *v20;
    if (*v20 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    ++v22;
    v20 += 2;
    if (v21 == v22)
      goto LABEL_27;
  }
LABEL_28:
  WebCore::Element::setAttributeInternal(a1, v22, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, v31, 0);
  result = v31[0];
  v31[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = v30;
  if (v30 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v14])(v31, &v28);
  return result;
}

WTF::StringImpl *WebCore::HTMLScriptElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  WebCore::Document *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];
  _BYTE v18[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = *(WebCore::Document **)(a1[5] + 8);
  v5 = a1[13];
  if (!v5)
    goto LABEL_12;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if ((_DWORD)v8)
      goto LABEL_4;
LABEL_12:
    v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_12;
LABEL_4:
  v8 = v8;
  v9 = (WTF::StringImpl **)(v7 + 8);
  while (1)
  {
    v10 = (uint64_t)*(v9 - 1);
    if (v10 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v9 += 2;
    if (!--v8)
    {
      v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v11 = *v9;
  if (v11)
    *(_DWORD *)v11 += 2;
  v16 = v11;
  WebCore::Document::completeURL(v4, &v16, (uint64_t)v4 + 848, 0, (WTF::URL *)v17);
  if (v17[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v17, v13, (uint64_t)v18);
    v14 = v17[0];
    v17[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v17[0] = 0;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLScriptElement::sourceAttributeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
      : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
        (_DWORD)v5))
  {
    v5 = v5;
    v6 = (_DWORD **)(v4 + 8);
    while (1)
    {
      v7 = (uint64_t)*(v6 - 1);
      if (v7 == WebCore::HTMLNames::srcAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v5)
      {
        v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLScriptElement::charsetAttributeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
      : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
        (_DWORD)v5))
  {
    v5 = v5;
    v6 = (_DWORD **)(v4 + 8);
    while (1)
    {
      v7 = (uint64_t)*(v6 - 1);
      if (v7 == WebCore::HTMLNames::charsetAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v5)
      {
        v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLScriptElement::typeAttributeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
      : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
        (_DWORD)v5))
  {
    v5 = v5;
    v6 = (_DWORD **)(v4 + 8);
    while (1)
    {
      v7 = (uint64_t)*(v6 - 1);
      if (v7 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v5)
      {
        v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLScriptElement::languageAttributeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
      : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
        (_DWORD)v5))
  {
    v5 = v5;
    v6 = (_DWORD **)(v4 + 8);
    while (1)
    {
      v7 = (uint64_t)*(v6 - 1);
      if (v7 == WebCore::HTMLNames::languageAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::languageAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::languageAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v5)
      {
        v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WebCore::HTMLScriptElement::hasAsyncAttribute(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
  }
  if (!(_DWORD)v4)
    return 0;
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::asyncAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::asyncAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::asyncAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t WebCore::HTMLScriptElement::hasDeferAttribute(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
  }
  if (!(_DWORD)v4)
    return 0;
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::deferAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::deferAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::deferAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t WebCore::HTMLScriptElement::hasNoModuleAttribute(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
  }
  if (!(_DWORD)v4)
    return 0;
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::nomoduleAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::nomoduleAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::nomoduleAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t WebCore::HTMLScriptElement::hasSourceAttribute(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
  }
  if (!(_DWORD)v4)
    return 0;
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

WebCore::ScriptElement *WebCore::HTMLScriptElement::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::HTMLScriptElement *this@<X0>, WebCore::Document *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  _DWORD *v9;
  WebCore::ScriptElement *result;

  v6 = bmalloc::api::isoAllocate();
  v7 = (_QWORD *)v6;
  v8 = *(unsigned __int16 *)((char *)this + 133);
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x101C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v9 = (_DWORD *)*((_QWORD *)this + 12);
  if (v9)
    ++*v9;
  *(_QWORD *)(v6 + 96) = v9;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33CC900;
  *(_QWORD *)(v6 + 112) = &unk_1E33CCE50;
  result = WebCore::ScriptElement::ScriptElement((WebCore::ScriptElement *)(v6 + 112), (WebCore::Element *)v6, 0, (v8 >> 2) & 1);
  *v7 = off_1E33CC900;
  *(_QWORD *)result = &unk_1E33CCE50;
  *a3 = v7;
  return result;
}

uint64_t WebCore::HTMLScriptElement::referrerPolicy(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned int v10;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::referrerpolicyAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (v7)
  {
    v8 = *(unsigned __int16 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v10 = (unsigned __int16)WebCore::parseReferrerPolicy(v8, v9, 2);
  if (v10 <= 0x100)
    LOBYTE(v10) = 0;
  return v10;
}

uint64_t WebCore::HTMLScriptElement::fetchPriorityHint(WebCore::HTMLScriptElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int16 v7;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 672) & 0x8000000000000000) != 0)
  {
    v1 = *((_QWORD *)this + 13);
    if (v1
      && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
        ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
        : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
          (_DWORD)v4))
    {
      v4 = v4;
      v5 = (uint64_t *)(v3 + 8);
      while (1)
      {
        v6 = *(v5 - 1);
        if (v6 == WebCore::HTMLNames::fetchpriorityAttr
          || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 24)
          && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::fetchpriorityAttr + 32))
        {
          break;
        }
        v5 += 2;
        if (!--v4)
        {
          v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v7 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>(v5);
    if ((v7 & 0xFF00) != 0)
      return v7;
    else
      return 2;
  }
  else
  {
    return 2;
  }
}

double WebCore::HTMLSelectElement::create@<D0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;
  double result;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v8 + 24) = 0x1C1C00000002;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = a2 + 96;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  v9 = *a1;
  if (*a1)
    ++*v9;
  v10 = 0;
  *(_QWORD *)(v8 + 96) = v9;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)v8 = off_1E33BC680;
  *(_QWORD *)(v8 + 112) = off_1E33B3CE0;
  *(_QWORD *)(v8 + 120) = 0;
  if (a3)
  {
    v12 = v8;
    v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
    v10 = v13;
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    v8 = v12;
  }
  *(_QWORD *)(v8 + 128) = v10;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_WORD *)(v8 + 160) = 3;
  *(_BYTE *)(v8 + 162) = *(_BYTE *)(v8 + 162) & 0xFC | 2;
  *(_DWORD *)(v8 + 164) = 0;
  *(_BYTE *)(v8 + 168) &= 0xF8u;
  *(_QWORD *)v8 = off_1E33CADB8;
  *(_QWORD *)(v8 + 112) = &unk_1E33CB380;
  *(_QWORD *)(v8 + 176) = &unk_1E33CB508;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_QWORD *)(v8 + 232) = v8 + 176;
  *(_QWORD *)(v8 + 240) = 0;
  *(_WORD *)(v8 + 248) = 0;
  *(_QWORD *)(v8 + 256) = 0;
  *(_QWORD *)(v8 + 264) = 0;
  *(_DWORD *)(v8 + 272) = 0;
  *(_BYTE *)(v8 + 276) = 1;
  result = NAN;
  *(_OWORD *)(v8 + 280) = xmmword_1969F11B0;
  *(_DWORD *)(v8 + 296) = 0;
  *(_BYTE *)(v8 + 300) = 0;
  *a4 = v8;
  return result;
}

unsigned int *WebCore::HTMLSelectElement::didRecalcStyle(uint64_t a1)
{
  WebCore::HTMLSelectElement::setOptionsChangedOnRenderer(*(_QWORD *)(a1 + 64));
  return WebCore::HTMLFormControlElement::didRecalcStyle((unsigned int *)a1);
}

uint64_t WebCore::HTMLSelectElement::setOptionsChangedOnRenderer(uint64_t this)
{
  int v1;

  if ((this & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_9;
    v1 = *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10) = v1 + 1;
    if (*(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x2E) != 22)
    {
      __break(0xC471u);
      JUMPOUT(0x195C62498);
    }
    *(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x1B0) = 1;
    if (v1 == -1)
    {
LABEL_9:
      __break(0xC471u);
      JUMPOUT(0x195C62478);
    }
    *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10) = v1;
  }
  return this;
}

uint64_t *WebCore::HTMLSelectElement::formControlType(WebCore::HTMLSelectElement *this)
{
  WebCore::HTMLSelectElement *v2;
  WebCore::HTMLSelectElement *v3;
  uint64_t v4;

  if ((_MergedGlobals_190 & 1) == 0)
  {
    v2 = this;
    WTF::AtomStringImpl::add();
    this = v2;
    qword_1ECE835B8 = v4;
    _MergedGlobals_190 = 1;
  }
  if ((byte_1ECE835B1 & 1) == 0)
  {
    v3 = this;
    WTF::AtomStringImpl::add();
    this = v3;
    qword_1ECE835C0 = v4;
    byte_1ECE835B1 = 1;
  }
  if (*((_BYTE *)this + 297))
    return &qword_1ECE835B8;
  else
    return &qword_1ECE835C0;
}

uint64_t *`non-virtual thunk to'WebCore::HTMLSelectElement::formControlType(WebCore::HTMLSelectElement *this)
{
  WebCore::HTMLSelectElement *v2;
  WebCore::HTMLSelectElement *v3;
  uint64_t v4;

  if ((_MergedGlobals_190 & 1) == 0)
  {
    v2 = this;
    WTF::AtomStringImpl::add();
    this = v2;
    qword_1ECE835B8 = v4;
    _MergedGlobals_190 = 1;
  }
  if ((byte_1ECE835B1 & 1) == 0)
  {
    v3 = this;
    WTF::AtomStringImpl::add();
    this = v3;
    qword_1ECE835C0 = v4;
    byte_1ECE835B1 = 1;
  }
  if (*((_BYTE *)this + 185))
    return &qword_1ECE835B8;
  else
    return &qword_1ECE835C0;
}

void WebCore::HTMLSelectElement::optionSelectedByUser(WebCore::HTMLSelectElement *this, void *a2, int a3, int a4)
{
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  char v12;

  if (*((_BYTE *)this + 297))
  {
    v8 = (void *)WebCore::HTMLSelectElement::optionToListIndex(this, (int)a2);
    WebCore::HTMLSelectElement::updateSelectedState((unsigned int *)this, v8, a4, 0);
    WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
    v9 = *((_QWORD *)this + 8);
    v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFLL);
    if ((v9 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v9 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
        || (++*(_DWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10),
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 312))(v10),
            (v11 = v10[4]) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x195C62738);
      }
      v10[4] = v11 - 1;
    }
    if (a3)
      WebCore::HTMLSelectElement::listBoxOnChange((uint64_t)this);
  }
  else if (WebCore::HTMLSelectElement::selectedIndex(this) != (_DWORD)a2)
  {
    if (a3)
      v12 = 7;
    else
      v12 = 5;
    WebCore::HTMLSelectElement::selectOption(this, a2, v12);
  }
}

unsigned int *WebCore::HTMLSelectElement::updateSelectedState(unsigned int *this, void *a2, int a3, int a4)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  int v12;
  int v13;
  int v14;
  char v15;
  void *v16;
  int v17;
  char v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v7 = this;
  if (*((_BYTE *)this + 300))
  {
    this = (unsigned int *)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
    if ((a2 & 0x80000000) != 0)
      return this;
  }
  else if ((a2 & 0x80000000) != 0)
  {
    return this;
  }
  if ((int)v7[49] <= (int)a2)
    return this;
  v8 = *(_QWORD *)(*((_QWORD *)v7 + 23) + 8 * a2);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 2;
  if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
  {
    WebCore::HTMLSelectElement::saveLastSelection((WebCore::HTMLSelectElement *)v7, a2);
    *((_BYTE *)v7 + 298) = 1;
    if (*((_BYTE *)v7 + 297))
      v12 = a4;
    else
      v12 = 0;
    if (*((_BYTE *)v7 + 297))
      v13 = a3 & ~a4;
    else
      v13 = 0;
    v14 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v14 + 2;
    if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      if (v14)
      {
LABEL_15:
        *(_DWORD *)(v9 + 24) = v14;
        goto LABEL_16;
      }
LABEL_51:
      v22 = *(_WORD *)(v9 + 30);
      if ((v22 & 0x400) == 0)
      {
        v23 = *(_WORD *)(v9 + 28);
        if ((v23 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v9, v11);
        }
        else
        {
          if ((v23 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
            v22 = *(_WORD *)(v9 + 30);
          }
          *(_WORD *)(v9 + 30) = v22 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
        }
      }
LABEL_16:
      if (((v12 | v13) & 1) == 0)
        WebCore::HTMLSelectElement::deselectItemsWithoutValidation((uint64_t)v7, (WebCore::HTMLElement *)v9);
      if ((v7[72] & 0x80000000) == 0)
        v15 = 1;
      else
        v15 = v13;
      if ((v15 & 1) == 0)
      {
        v16 = (void *)WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)v7);
        WebCore::HTMLSelectElement::setActiveSelectionAnchorIndex((WebCore::HTMLSelectElement *)v7, v16);
      }
      v17 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v17 + 2;
      if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        if (!*(_BYTE *)(v9 + 112))
        {
          v19 = *(_QWORD *)(v9 + 32);
          if (!v19
            || (*(_WORD *)(v19 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
            || !*(_BYTE *)(v19 + 112))
          {
            WebCore::HTMLOptionElement::setSelectedState(v9, (void *)1, 1);
            v17 = *(_DWORD *)(v9 + 24) - 2;
          }
        }
        if (v17)
          goto LABEL_25;
      }
      else if (v17)
      {
LABEL_25:
        *(_DWORD *)(v9 + 24) = v17;
LABEL_26:
        if ((v7[72] & 0x80000000) == 0)
          v18 = v12;
        else
          v18 = 0;
        if ((v18 & 1) == 0)
          WebCore::HTMLSelectElement::setActiveSelectionAnchorIndex((WebCore::HTMLSelectElement *)v7, a2);
        WebCore::HTMLSelectElement::invalidateSelectedItems(*((_QWORD *)v7 + 9));
        v7[73] = a2;
        this = (unsigned int *)WebCore::HTMLSelectElement::updateListBoxSelection((WebCore::HTMLSelectElement *)v7, (void *)(v13 ^ 1u));
        v10 = *(_DWORD *)(v9 + 24) - 2;
        goto LABEL_32;
      }
      v20 = *(_WORD *)(v9 + 30);
      if ((v20 & 0x400) == 0)
      {
        v21 = *(_WORD *)(v9 + 28);
        if ((v21 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v9, v11);
        }
        else
        {
          if ((v21 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
            v20 = *(_WORD *)(v9 + 30);
          }
          *(_WORD *)(v9 + 30) = v20 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
        }
      }
      goto LABEL_26;
    }
    if ((v13 & WebCore::HTMLOptionElement::selected(v9, 1u)) == 1)
    {
      *((_BYTE *)v7 + 298) = 0;
    }
    else if (*((_BYTE *)v7 + 298))
    {
      goto LABEL_50;
    }
    WebCore::HTMLOptionElement::setSelectedState(v9, 0, 1);
LABEL_50:
    v14 = *(_DWORD *)(v9 + 24) - 2;
    if (*(_DWORD *)(v9 + 24) != 2)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_32:
  if (v10)
  {
    *(_DWORD *)(v9 + 24) = v10;
  }
  else
  {
    v24 = *(_WORD *)(v9 + 30);
    if ((v24 & 0x400) == 0)
    {
      v25 = *(_WORD *)(v9 + 28);
      if ((v25 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
      }
      else
      {
        if ((v25 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
          v24 = *(_WORD *)(v9 + 30);
        }
        *(_WORD *)(v9 + 30) = v24 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLSelectElement::optionToListIndex(WebCore::HTMLSelectElement *this, int a2)
{
  uint64_t result;
  uint64_t v5;
  int v7;

  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  result = 0xFFFFFFFFLL;
  if ((a2 & 0x80000000) == 0)
  {
    v5 = *((unsigned int *)this + 49);
    if ((int)v5 > a2 && (int)v5 >= 1)
    {
      result = 0;
      v7 = -1;
      while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * result) + 8) + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)
           || ++v7 != a2)
      {
        if (v5 == ++result)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLSelectElement::listBoxOnChange(uint64_t this)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;

  v1 = this;
  if (*(_BYTE *)(this + 300))
    this = (uint64_t)WebCore::HTMLSelectElement::recalcListItems(this, (void *)1, 1u);
  v2 = *(_DWORD *)(v1 + 212);
  if (v2 && v2 == *(_DWORD *)(v1 + 196))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 184) + 8 * v3);
      if (v5)
        v6 = *(_QWORD *)(v5 + 8);
      else
        v6 = 0;
      v7 = 0;
      if (v6 && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        *(_DWORD *)(v6 + 24) += 2;
        this = WebCore::HTMLOptionElement::selected(v6, 1u);
        v7 = this;
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          v10 = *(_WORD *)(v6 + 30);
          if ((v10 & 0x400) == 0)
          {
            v11 = *(_WORD *)(v6 + 28);
            if ((v11 & 0xF000) == 0x9000)
            {
              this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v6, v8);
            }
            else
            {
              if ((v11 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
                v10 = *(_WORD *)(v6 + 30);
              }
              *(_WORD *)(v6 + 30) = v10 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
            }
          }
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      if (v3 >= *(unsigned int *)(v1 + 212))
      {
        __break(0xC471u);
        return this;
      }
      v9 = *(_QWORD *)(v1 + 200);
      v4 |= *(unsigned __int8 *)(v9 + v3) != v7;
      *(_BYTE *)(v9 + v3++) = v7;
    }
    while (v3 < *(unsigned int *)(v1 + 196));
    if ((v4 & 1) == 0)
      return this;
    WebCore::Node::dispatchInputEvent((WebCore::Node *)v1);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1248))(v1);
}

uint64_t WebCore::HTMLSelectElement::selectedIndex(WebCore::HTMLSelectElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v2 = *((unsigned int *)this + 49);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  v3 = 0;
  v4 = *((_QWORD *)this + 23);
  v5 = 8 * v2;
  while (1)
  {
    v6 = *(_QWORD *)v4 ? *(_QWORD *)(*(_QWORD *)v4 + 8) : 0;
    if (v6 && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      break;
LABEL_17:
    v4 += 8;
    v5 -= 8;
    if (!v5)
      return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(v6 + 24) += 2;
  if ((WebCore::HTMLOptionElement::selected(v6, 1u) & 1) == 0)
  {
    v3 = (v3 + 1);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v3;
}

void WebCore::HTMLSelectElement::selectOption(WebCore::HTMLSelectElement *this, void *a2, char a3)
{
  int v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  void *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _BYTE v26[20];
  __int128 v27;
  char v28;

  v4 = (int)a2;
  if (*((_BYTE *)this + 297))
    v6 = a3 & 1;
  else
    v6 = 1;
  if (*((_BYTE *)this + 300))
  {
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
    if (*((_BYTE *)this + 300))
      WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  }
  v7 = 0;
  v8 = 0xFFFFFFFFLL;
  if ((v4 & 0x80000000) == 0)
  {
    v9 = *((unsigned int *)this + 49);
    if ((int)v9 > v4 && (int)v9 >= 1)
    {
      v8 = 0;
      v11 = *((_QWORD *)this + 23);
      v12 = -1;
      while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8 * v8) + 8) + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)
           || ++v12 != v4)
      {
        if (v9 == ++v8)
        {
          v7 = 0;
          v8 = 0xFFFFFFFFLL;
          goto LABEL_20;
        }
      }
      if ((v8 & 0x80000000) != 0)
        goto LABEL_74;
      if (v8 >= v9)
      {
        __break(0xC471u);
        goto LABEL_76;
      }
      v13 = *(_QWORD *)(v11 + 8 * v8);
      if (!v13)
      {
LABEL_74:
        v7 = 0;
      }
      else
      {
        v7 = *(_QWORD *)(v13 + 8);
        if (v7)
          *(_DWORD *)(v7 + 24) += 2;
      }
    }
  }
LABEL_20:
  if (v6)
    WebCore::HTMLSelectElement::deselectItemsWithoutValidation((uint64_t)this, (WebCore::HTMLElement *)v7);
  if (v7)
  {
    v14 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v14 + 2;
    if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      if (((*((_DWORD *)this + 72) >= 0) & ~v6) == 0)
        WebCore::HTMLSelectElement::setActiveSelectionAnchorIndex(this, (void *)v8);
      if (((*((_DWORD *)this + 73) >= 0) & ~v6) == 0)
        *((_DWORD *)this + 73) = v8;
      WebCore::HTMLOptionElement::setSelectedState(v7, (void *)1, 1);
      v14 = *(_DWORD *)(v7 + 24) - 2;
      if (*(_DWORD *)(v7 + 24) != 2)
        goto LABEL_29;
    }
    else if (v14)
    {
LABEL_29:
      *(_DWORD *)(v7 + 24) = v14;
      goto LABEL_30;
    }
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
LABEL_30:
  v15 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (v15)
  {
    if (*v15)
    {
      v24 = WebCore::NodeListsNodeData::cachedCollection<WebCore::HTMLCollection>(*v15, 0x11u);
      if (v24)
      {
        v25 = (_DWORD *)v24;
        ++*(_DWORD *)(v24 + 16);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 72))(v24, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 24) + 40) + 8));
        if (v25[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
        else
          --v25[4];
      }
    }
  }
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  v17 = (_DWORD *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (v17)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C63228);
    }
    ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 312))(v17);
    v18 = v17[4];
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x195C63248);
    }
    v17[4] = v18 - 1;
    v19 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v19)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C63268);
      }
      v20 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v20;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v27) = 0;
        v28 = 0;
        v26[0] = 0;
        v26[16] = 0;
        WebCore::RenderObject::issueRepaint(v19, &v27, 0, 0, (uint64_t)v26);
        v20 = *(_DWORD *)(v19 + 16);
      }
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x195C63288);
      }
      *(_DWORD *)(v19 + 16) = v20 - 1;
    }
  }
  if (!*((_BYTE *)this + 297))
  {
    *((_BYTE *)this + 296) = (a3 & 4) != 0;
    if ((a3 & 2) != 0)
      WebCore::HTMLSelectElement::dispatchChangeEventForMenuList(this);
    v21 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v21)
    {
      if ((*(_BYTE *)(v21 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C632A8);
      }
      ++*(_DWORD *)(v21 + 16);
      v22 = *(unsigned __int8 *)(v21 + 46);
      if (v22 == 18)
      {
        WebCore::RenderListBox::selectionChanged((WebCore::RenderListBox *)v21);
LABEL_47:
        v23 = *(_DWORD *)(v21 + 16);
        if (!v23)
        {
          __break(0xC471u);
          JUMPOUT(0x195C632C8);
        }
        *(_DWORD *)(v21 + 16) = v23 - 1;
        goto LABEL_49;
      }
      if (v22 == 22)
      {
        WebCore::RenderMenuList::didSetSelectedIndex((WebCore::RenderMenuList *)v21, v8);
        goto LABEL_47;
      }
      __break(0xC471u);
LABEL_76:
      JUMPOUT(0x195C63208);
    }
  }
LABEL_49:
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v16);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

BOOL WebCore::HTMLSelectElement::hasPlaceholderLabelOption(WebCore::HTMLSelectElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  __int16 v14;
  __int16 v15;
  WTF::StringImpl *v16;

  if (*((_BYTE *)this + 297) || *((_DWORD *)this + 70) > 1u)
    return 0;
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v3 = *((unsigned int *)this + 49);
  if ((int)v3 < 1)
    return 0;
  v4 = 0;
  v5 = (uint64_t *)*((_QWORD *)this + 23);
  v6 = 8 * v3;
  while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[v4 / 8] + 8) + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag
                                                                                           + 24))
  {
    v7 = 0;
    v4 += 8;
    if (v6 == v4)
      return v7;
  }
  if (v4)
    return 0;
  if (*((_BYTE *)this + 300))
  {
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
    if (!*((_DWORD *)this + 49))
      goto LABEL_34;
    v5 = (uint64_t *)*((_QWORD *)this + 23);
  }
  v9 = *v5;
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x195C634CCLL);
  }
  *(_DWORD *)(v10 + 24) += 2;
  WebCore::HTMLOptionElement::value((WTF::StringImpl *)v10, a2, &v16);
  v12 = v16;
  if (v16)
  {
    v13 = *(_DWORD *)v16;
    v7 = *((_DWORD *)v16 + 1) == 0;
    v16 = 0;
    if (v13 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 = v13 - 2;
  }
  else
  {
    v7 = 1;
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    v14 = *(_WORD *)(v10 + 30);
    if ((v14 & 0x400) == 0)
    {
      v15 = *(_WORD *)(v10 + 28);
      if ((v15 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v10, v11);
      }
      else
      {
        if ((v15 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
          v14 = *(_WORD *)(v10 + 30);
        }
        *(_WORD *)(v10 + 30) = v14 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
      }
    }
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return v7;
}

uint64_t WebCore::HTMLSelectElement::listItems(WebCore::HTMLSelectElement *this)
{
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  return (uint64_t)this + 184;
}

void WebCore::HTMLSelectElement::validationMessage(WebCore::HTMLSelectElement *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  int v5;
  WTF::StringImpl *v6;

  if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 272))((char *)this + 112) & 1) == 0)
    goto LABEL_4;
  v4 = (_DWORD *)*((_QWORD *)this + 18);
  if (v4 && v4[1])
  {
    *v4 += 2;
    *a2 = v4;
    return;
  }
  if ((*((_BYTE *)this + 168) & 1) == 0
    || (v5 = WebCore::HTMLSelectElement::selectedIndex(this), (v5 & 0x80000000) == 0)
    && (v5 || !WebCore::HTMLSelectElement::hasPlaceholderLabelOption(this, v6)))
  {
LABEL_4:
    *a2 = 0;
    return;
  }
  WebCore::validationMessageValueMissingForSelectText((uint64_t)a2);
}

BOOL WebCore::HTMLSelectElement::valueMissing(WebCore::HTMLSelectElement *this)
{
  int v3;
  WTF::StringImpl *v4;

  if ((*((_BYTE *)this + 168) & 1) == 0)
    return 0;
  v3 = WebCore::HTMLSelectElement::selectedIndex(this);
  if (v3 < 0)
    return 1;
  if (v3)
    return 0;
  return WebCore::HTMLSelectElement::hasPlaceholderLabelOption(this, v4);
}

void `non-virtual thunk to'WebCore::HTMLSelectElement::validationMessage(WebCore::HTMLSelectElement *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::HTMLSelectElement *v4;
  _DWORD *v5;
  int v6;
  WTF::StringImpl *v7;

  v4 = (WebCore::HTMLSelectElement *)((char *)this - 112);
  if (((*(uint64_t (**)(WebCore::HTMLSelectElement *))(*(_QWORD *)this + 272))(this) & 1) == 0)
    goto LABEL_4;
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  if (v5 && v5[1])
  {
    *v5 += 2;
    *a2 = v5;
    return;
  }
  if ((*((_BYTE *)this + 56) & 1) == 0
    || (v6 = WebCore::HTMLSelectElement::selectedIndex(v4), (v6 & 0x80000000) == 0)
    && (v6 || !WebCore::HTMLSelectElement::hasPlaceholderLabelOption(v4, v7)))
  {
LABEL_4:
    *a2 = 0;
    return;
  }
  WebCore::validationMessageValueMissingForSelectText((uint64_t)a2);
}

BOOL `non-virtual thunk to'WebCore::HTMLSelectElement::valueMissing(WebCore::HTMLSelectElement *this)
{
  WebCore::HTMLSelectElement *v2;
  int v3;
  WTF::StringImpl *v4;

  if ((*((_BYTE *)this + 56) & 1) == 0)
    return 0;
  v2 = (WebCore::HTMLSelectElement *)((char *)this - 112);
  v3 = WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)((char *)this - 112));
  if (v3 < 0)
    return 1;
  if (v3)
    return 0;
  return WebCore::HTMLSelectElement::hasPlaceholderLabelOption(v2, v4);
}

void WebCore::HTMLSelectElement::listBoxSelectItem(WebCore::HTMLSelectElement *this, void *a2, int a3, int a4, int a5)
{
  unsigned int v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2;
  if (!*((_BYTE *)this + 297))
  {
    if (*((_BYTE *)this + 300))
    {
      WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
      if ((v6 & 0x80000000) != 0)
        goto LABEL_8;
    }
    else if ((a2 & 0x80000000) != 0)
    {
      goto LABEL_8;
    }
    if (*((_DWORD *)this + 49) > (signed int)v6)
    {
      v8 = (uint64_t *)*((_QWORD *)this + 23);
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8[v6] + 8) + 96) + 24);
      if (v9 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        v10 = 0;
        if (v6)
        {
          v11 = v6;
          do
          {
            v12 = *v8++;
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 96) + 24) == v9)
              v10 = (v10 + 1);
            else
              v10 = v10;
            --v11;
          }
          while (v11);
        }
        goto LABEL_9;
      }
    }
LABEL_8:
    v10 = 0xFFFFFFFFLL;
LABEL_9:
    WebCore::HTMLSelectElement::optionSelectedByUser(this, (void *)v10, a5, 0);
    return;
  }
  WebCore::HTMLSelectElement::updateSelectedState((unsigned int *)this, a2, a3, a4);
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  if (a5)
    WebCore::HTMLSelectElement::listBoxOnChange((uint64_t)this);
}

uint64_t WebCore::HTMLSelectElement::lastSelectedListIndex(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  __int16 v9;
  __int16 v10;

  v1 = this;
  if (*(_BYTE *)(this + 300))
    this = (uint64_t)WebCore::HTMLSelectElement::recalcListItems(this, (void *)1, 1u);
  v2 = *(unsigned int *)(v1 + 196);
LABEL_4:
  v3 = v2 - 1;
  LODWORD(v4) = v2;
  while (1)
  {
    if (v3 == -1)
      return 0xFFFFFFFFLL;
    if (v3 >= *(unsigned int *)(v1 + 196))
      break;
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 184) + 8 * v3);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    --v3;
    v4 = (v4 - 1);
    if (v6 && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      *(_DWORD *)(v6 + 24) += 2;
      this = WebCore::HTMLOptionElement::selected(v6, 1u);
      v8 = this;
      v2 = v3 + 1;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        v9 = *(_WORD *)(v6 + 30);
        if ((v9 & 0x400) == 0)
        {
          v10 = *(_WORD *)(v6 + 28);
          if ((v10 & 0xF000) == 0x9000)
          {
            this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v6, v7);
          }
          else
          {
            if ((v10 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
              v9 = *(_WORD *)(v6 + 30);
            }
            *(_WORD *)(v6 + 30) = v9 | 0x400;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
          }
          goto LABEL_15;
        }
        if (!(_DWORD)this)
          goto LABEL_4;
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
LABEL_15:
        if ((v8 & 1) == 0)
          goto LABEL_4;
      }
      return v4;
    }
  }
  __break(0xC471u);
  return this;
}

unsigned int *WebCore::HTMLSelectElement::add@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *result;
  void *v13;
  WebCore::Document *v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  WebCore::HTMLSelectElement *v19;
  int v20;
  uint64_t v21;
  WebCore::Document *v22;

  if (*(_BYTE *)(a3 + 16))
  {
    v21 = a1;
    v7 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v7 == -1)
    {
LABEL_25:
      v19 = (WebCore::HTMLSelectElement *)std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebCore::HTMLSelectElement::remove(v19, v20);
    }
    v22 = (WebCore::Document *)&v21;
    v8 = ((uint64_t (*)(WebCore::Document **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore17HTMLSelectElement3addERKNS_7variantIJNS6_6RefPtrINS8_17HTMLOptionElementENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_INS8_19HTMLOptGroupElementENSD_ISI_EENSF_ISI_EEEEEEERKNS_8optionalINSA_IJNSB_INS8_11HTMLElementENSD_ISQ_EENSF_ISQ_EEEEiEEEEEE3__0JZNS9_3addESO_SX_E3__1EEEEEJRKNS0_6__implIJST_iEEEEEEDcOT_DpOT0____fmatrix[v7])(&v22, a3);
    v9 = (WebCore::Document *)v8;
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_25;
  v22 = (WebCore::Document *)&v21;
  v11 = ((uint64_t (*)(WebCore::Document **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore17HTMLSelectElement3addERKNS_7variantIJNS6_6RefPtrINS8_17HTMLOptionElementENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_INS8_19HTMLOptGroupElementENSD_ISI_EENSF_ISI_EEEEEEERKNS_8optionalINSA_IJNSB_INS8_11HTMLElementENSD_ISQ_EENSF_ISQ_EEEEiEEEEEE3__2JEEEEEJRKNS0_6__implIJSH_SL_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v22, a2);
  *(_DWORD *)(v11 + 24) += 2;
  v22 = v9;
  result = (unsigned int *)WebCore::ContainerNode::insertBefore(a1, (uint64_t *)v11, &v22, a4);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      v17 = *((_WORD *)v14 + 15);
      if ((v17 & 0x400) == 0)
      {
        v18 = *((_WORD *)v14 + 14);
        if ((v18 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef(v14, v13);
        }
        else
        {
          if ((v18 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v14 + 20) + 16))(*((_QWORD *)v14 + 20));
            v17 = *((_WORD *)v14 + 15);
          }
          *((_WORD *)v14 + 15) = v17 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v14 + 72))(v14);
        }
      }
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    v15 = *(_WORD *)(v11 + 30);
    if ((v15 & 0x400) == 0)
    {
      v16 = *(_WORD *)(v11 + 28);
      if ((v16 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v11, v13);
      }
      else
      {
        if ((v16 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
          v15 = *(_WORD *)(v11 + 30);
        }
        *(_WORD *)(v11 + 30) = v15 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
      }
    }
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLSelectElement::remove(WebCore::HTMLSelectElement *this, int a2)
{
  uint64_t result;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  result = WebCore::HTMLSelectElement::optionToListIndex(this, a2);
  if ((result & 0x80000000) == 0)
  {
    v5 = result;
    if (*((_BYTE *)this + 300))
      result = (uint64_t)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
    if (*((_DWORD *)this + 49) <= v5)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v5);
      if (v6)
        v7 = *(_QWORD *)(v6 + 8);
      else
        v7 = 0;
      *(_DWORD *)(v7 + 24) += 2;
      v8 = *(_QWORD *)(v7 + 32);
      if (v8)
      {
        *(_DWORD *)(v8 + 24) += 2;
        result = (uint64_t)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v8, (WebCore::Node *)v7, &v13);
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          v11 = *(_WORD *)(v8 + 30);
          if ((v11 & 0x400) == 0)
          {
            v12 = *(_WORD *)(v8 + 28);
            if ((v12 & 0xF000) == 0x9000)
            {
              result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v8, v4);
            }
            else
            {
              if ((v12 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                v11 = *(_WORD *)(v8 + 30);
              }
              *(_WORD *)(v8 + 30) = v11 | 0x400;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
            }
          }
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
      }
      if ((_BYTE)v15)
      {
        result = (uint64_t)v14;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            result = WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        v9 = *(_WORD *)(v7 + 30);
        if ((v9 & 0x400) == 0)
        {
          v10 = *(_WORD *)(v7 + 28);
          if ((v10 & 0xF000) == 0x9000)
          {
            return (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v7, v4);
          }
          else
          {
            if ((v10 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v9 = *(_WORD *)(v7 + 30);
            }
            *(_WORD *)(v7 + 30) = v9 | 0x400;
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::HTMLSelectElement::value@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int16 v9;
  __int16 v10;
  _DWORD *v11;
  void *v12;
  __int16 v13;
  __int16 v14;

  v2 = this;
  if (*((_BYTE *)this + 300))
    this = (unsigned int *)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v4 = v2[49];
  if (!(_DWORD)v4)
  {
LABEL_19:
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v11 += 2;
    *a2 = v11;
    return this;
  }
  v5 = *((_QWORD *)v2 + 23);
  v6 = 8 * v4;
  while (1)
  {
    if (*(_QWORD *)v5)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (v7)
      {
        if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          break;
      }
    }
LABEL_11:
    v5 += 8;
    v6 -= 8;
    if (!v6)
      goto LABEL_19;
  }
  *(_DWORD *)(v7 + 24) += 2;
  this = (unsigned int *)WebCore::HTMLOptionElement::selected(v7, 1u);
  if (!(_DWORD)this)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v9 = *(_WORD *)(v7 + 30);
      if ((v9 & 0x400) == 0)
      {
        v10 = *(_WORD *)(v7 + 28);
        if ((v10 & 0xF000) == 0x9000)
        {
          this = WebCore::Document::removedLastRef((WebCore::Document *)v7, v8);
        }
        else
        {
          if ((v10 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v9 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v9 | 0x400;
          this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    goto LABEL_11;
  }
  this = (unsigned int *)WebCore::HTMLOptionElement::value((WTF::StringImpl *)v7, (WTF::StringImpl *)v8, a2);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    v13 = *(_WORD *)(v7 + 30);
    if ((v13 & 0x400) == 0)
    {
      v14 = *(_WORD *)(v7 + 28);
      if ((v14 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v7, v12);
      }
      else
      {
        if ((v14 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
          v13 = *(_WORD *)(v7 + 30);
        }
        *(_WORD *)(v7 + 30) = v13 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return this;
}

void WebCore::HTMLSelectElement::setValue(WebCore::HTMLSelectElement *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v4 = *((unsigned int *)this + 49);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 23);
    for (i = 8 * v4; i; i -= 8)
    {
      if (*(_QWORD *)v6)
      {
        v8 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 8);
        if (v8)
        {
          if (*(_QWORD *)(*((_QWORD *)v8 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            WebCore::HTMLOptionElement::value(v8, a2, &v12);
            v10 = WTF::equal(v12, *(const WTF::StringImpl **)a2, v9);
            v11 = v12;
            v12 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, a2);
              else
                *(_DWORD *)v11 -= 2;
            }
            if ((v10 & 1) != 0)
              goto LABEL_15;
            v5 = (v5 + 1);
          }
        }
      }
      v6 += 8;
    }
  }
  v5 = 0xFFFFFFFFLL;
LABEL_15:
  WebCore::HTMLSelectElement::selectOption(this, (void *)v5, 1);
}

void WebCore::HTMLSelectElement::setSelectedIndex(WebCore::HTMLSelectElement *this, void *a2)
{
  WebCore::HTMLSelectElement::selectOption(this, a2, 1);
}

uint64_t WebCore::HTMLSelectElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::alignAttr)
    return 0;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F8)
  {
    if (v2 == 949 || v2 == 505 || v2 == 947)
      return result;
    return 0;
  }
  v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
  if (v4 && v2 != 286)
    return 0;
  return result;
}

void WebCore::HTMLSelectElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, const WTF::AtomString *a4, int a5, __n128 a6)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  int v12;
  _DWORD v13[2];

  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 == 834)
  {
    v8 = *(_DWORD *)(a1 + 280);
    v9 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v10 = *(uint64_t **)(v9 + 8);
      v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v10 = 0;
      v11 = 0x100000000;
    }
    WebCore::parseHTMLNonNegativeInteger(v10, v11, v13);
    if (v13[1])
      v12 = 0;
    else
      v12 = v13[0];
    if (v8 != v12 && *(_BYTE *)(a1 + 300))
      WebCore::HTMLSelectElement::recalcListItems(a1, (void *)1, 1u);
    *(_DWORD *)(a1 + 280) = v12;
    WebCore::ValidatedFormListedElement::updateValidity(a1 + 112);
    if (*(_DWORD *)(a1 + 280) != v8)
    {
      WebCore::Node::invalidateStyle(a1, 4u, 2);
      WebCore::HTMLSelectElement::setRecalcListItems((WebCore::HTMLSelectElement *)a1);
      WebCore::ValidatedFormListedElement::updateValidity(a1 + 112);
    }
  }
  else if (v7 == 590)
  {
    WebCore::HTMLSelectElement::parseMultipleAttribute((WebCore::HTMLSelectElement *)a1, a4);
  }
  else
  {
    WebCore::HTMLFormControlElement::attributeChanged(a1, a2, a3, (WTF::StringImpl **)a4, a5, a6);
  }
}

void WebCore::HTMLSelectElement::setRecalcListItems(WebCore::HTMLSelectElement *this)
{
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Page *v19;
  uint64_t v20;
  WebCore::Node *ElementSibling;
  WebCore::Element *v22;
  WebCore::AXObjectCache *v23;
  WebCore::AXObjectCache *v24;
  int v25;

  *((_BYTE *)this + 300) = 1;
  *((_DWORD *)this + 72) = -1;
  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_47;
    v3 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v3 + 1;
    if (*(_BYTE *)(v2 + 46) != 22)
    {
      __break(0xC471u);
      JUMPOUT(0x195C643F4);
    }
    *(_BYTE *)(v2 + 432) = 1;
    if (v3 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x195C64414);
    }
    *(_DWORD *)(v2 + 16) = v3;
  }
  WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v20 = *((_QWORD *)this + 4);
    if (!v20 || (*(_WORD *)(v20 + 28) & 8) == 0 || (*(_BYTE *)(v20 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v22);
    }
  }
  if ((*((_BYTE *)this + 22) & 8) == 0)
  {
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
    if (v5)
    {
      if (*v5)
      {
        v12 = WebCore::NodeListsNodeData::cachedCollection<WebCore::HTMLCollection>(*v5, 0x10u);
        if (v12)
        {
          v13 = (_DWORD *)v12;
          ++*(_DWORD *)(v12 + 16);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 72))(v12, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 40) + 8));
          if (v13[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[4];
        }
      }
    }
  }
  if ((*((_BYTE *)this + 22) & 8) == 0)
  {
    v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
    if (v6)
    {
      if (*v6)
      {
        v14 = WebCore::NodeListsNodeData::cachedCollection<WebCore::HTMLCollection>(*v6, 0x11u);
        if (v14)
        {
          v15 = (_DWORD *)v14;
          ++*(_DWORD *)(v14 + 16);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 72))(v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 40) + 8));
          if (v15[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          else
            --v15[4];
        }
      }
    }
  }
  v7 = *((_QWORD *)this + 5);
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v23 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(v7 + 8));
    if (v23)
    {
      v24 = v23;
      ++*((_DWORD *)v23 + 2);
      WebCore::AXObjectCache::childrenChanged(v23, this, 0);
      v25 = *((_DWORD *)v24 + 2);
      if (v25)
      {
        *((_DWORD *)v24 + 2) = v25 - 1;
        v7 = *((_QWORD *)this + 5);
        goto LABEL_12;
      }
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x195C643D4);
    }
  }
LABEL_12:
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 2;
  if (*(WebCore::HTMLSelectElement **)(v8 + 1248) == this)
  {
    v16 = *(_QWORD *)(v8 + 528);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 24);
        if (v18)
        {
          v19 = *(WebCore::Page **)(v18 + 8);
          if (v19)
          {
            ++*(_DWORD *)v19;
            (*(void (**)(_QWORD, WebCore::HTMLSelectElement *))(**(_QWORD **)(*((_QWORD *)v19 + 6) + 16)
                                                                         + 880))(*(_QWORD *)(*((_QWORD *)v19 + 6) + 16), this);
            WTF::RefCounted<WebCore::Page>::deref(v19);
            v9 = *(_DWORD *)(v8 + 24) - 2;
          }
        }
      }
    }
  }
  if (v9)
  {
    *(_DWORD *)(v8 + 24) = v9;
  }
  else
  {
    v10 = *(_WORD *)(v8 + 30);
    if ((v10 & 0x400) == 0)
    {
      v11 = *(_WORD *)(v8 + 28);
      if ((v11 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v8, v4);
      }
      else
      {
        if ((v11 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
          v10 = *(_WORD *)(v8 + 30);
        }
        *(_WORD *)(v8 + 30) = v10 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
      }
    }
  }
}

void WebCore::HTMLSelectElement::parseMultipleAttribute(WebCore::HTMLSelectElement *this, const WTF::AtomString *a2)
{
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;

  v4 = *((unsigned __int8 *)this + 297);
  v5 = *((_BYTE *)this + 297) == 0;
  v6 = WebCore::HTMLSelectElement::selectedIndex(this);
  *((_BYTE *)this + 297) = *(_QWORD *)a2 != 0;
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  v7 = *((unsigned __int8 *)this + 297);
  if (v5 != (*((_BYTE *)this + 297) == 0))
  {
    WebCore::Node::invalidateStyle((uint64_t)this, 4u, 2);
    v7 = *((unsigned __int8 *)this + 297);
  }
  if (v4 != v7)
  {
    if ((v6 & 0x80000000) != 0)
      WebCore::HTMLSelectElement::reset(this);
    else
      WebCore::HTMLSelectElement::selectOption(this, (void *)v6, 1);
  }
}

uint64_t WebCore::HTMLSelectElement::defaultTabIndex(WebCore::HTMLSelectElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLSelectElement::isKeyboardFocusable(WebCore::HTMLSelectElement *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      return (*(uint64_t (**)(WebCore::HTMLSelectElement *))(*(_QWORD *)this + 552))(this);
    }
  }
  else if ((WebCore::Element::tabIndexSetExplicitly(this) & 0xFF00000000) != 0)
  {
    return WebCore::Element::isKeyboardFocusable(this, a2);
  }
  else if ((*(unsigned int (**)(WebCore::HTMLSelectElement *))(*(_QWORD *)this + 552))(this)
         && (v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528)) != 0
         && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    return WebCore::EventHandler::tabsToAllFormControls(*(WebCore::EventHandler **)(v6 + 640), a2);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t WebCore::HTMLSelectElement::isMouseFocusable(WebCore::HTMLSelectElement *this)
{
  WebCore::Document *v3;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C646C8);
    }
    return (*(uint64_t (**)(WebCore::HTMLSelectElement *))(*(_QWORD *)this + 552))(this);
  }
  if ((WebCore::Element::tabIndexSetExplicitly(this) & 0xFF00000000) != 0)
    return (*(uint64_t (**)(WebCore::HTMLSelectElement *))(*(_QWORD *)this + 552))(this);
  v3 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  if (!*((_QWORD *)v3 + 86))
    WebCore::Document::ensureQuirks(v3);
  return 0;
}

void WebCore::HTMLSelectElement::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = bmalloc::api::isoAllocate();
  WebCore::RenderMenuList::RenderMenuList(v6, a1, a2);
  *a3 = v7;
}

BOOL WebCore::HTMLSelectElement::childShouldCreateRenderer(WebCore::HTMLSelectElement *this, const WebCore::Node *a2)
{
  WebCore::ValidationMessage *v4;

  return ((*((_WORD *)a2 + 14) & 0x20) == 0
       || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24)
       && (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2))
      && (v4 = (WebCore::ValidationMessage *)*((_QWORD *)this + 19)) != 0
      && WebCore::ValidationMessage::shadowTreeContains(v4, a2);
}

uint64_t WebCore::HTMLSelectElement::selectedOptions@<X0>(WebCore::HTMLSelectElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 17) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 17;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0xF1;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 17 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

void WebCore::HTMLSelectElement::options(WebCore::HTMLSelectElement *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::NodeListsNodeData **v4;
  WebCore::NodeListsNodeData *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  WTF::StringImpl *v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28[8];
  WTF::StringImpl *v29;

  v4 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v4)
  {
    WebCore::Node::materializeRareData(this);
    v4 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v5 = WebCore::NodeRareData::ensureNodeLists(v4);
  v7 = (uint64_t *)((char *)v5 + 32);
  v28[0] = 16;
  v8 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v29 = v8;
  v9 = *v7;
  if (*v7
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand((uint64_t *)v5 + 4, 0), (v9 = *v7) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = ((*((_DWORD *)v8 + 4) >> 8) + 16) & v10;
  v12 = (unsigned __int8 *)(v9 + 24 * v11);
  v13 = *v12;
  v14 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
  if (*v12)
    v15 = 0;
  else
    v15 = v14 == 0;
  if (!v15)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v13 == 255)
      {
        v16 = v12;
      }
      else if (v13 == 16 && v14 == v8)
      {
        v18 = 1;
        goto LABEL_16;
      }
      v11 = (v11 + v17) & v10;
      v12 = (unsigned __int8 *)(v9 + 24 * v11);
      v13 = *v12;
      v14 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
      ++v17;
      if (*v12)
        v20 = 0;
      else
        v20 = v14 == 0;
    }
    while (!v20);
    if (v16)
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      --*(_DWORD *)(*v7 - 16);
      v12 = v16;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>::translate<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,std::pair<unsigned char,WTF::AtomString>,decltype(nullptr)>((uint64_t)v12, (WTF::StringImpl *)v28);
  v21 = *v7;
  if (*v7)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v7;
  if (*v7)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_39;
LABEL_43:
    v12 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v7, (uint64_t)v12);
    goto LABEL_39;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_43;
LABEL_39:
  v18 = 0;
LABEL_16:
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v6);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v18)
  {
    v27 = *((_QWORD *)v12 + 2);
    ++*(_DWORD *)(v27 + 16);
    *a2 = v27;
  }
  else
  {
    WebCore::HTMLOptionsCollection::create((uint64_t)this, a2);
    *((_QWORD *)v12 + 2) = *a2;
  }
}

unsigned int *WebCore::HTMLSelectElement::optionToSelectFromChildChangeScope@<X0>(unsigned int *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  void *v12;
  WebCore::Document *v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  WebCore::Document *v18;

  if (*((_BYTE *)result + 297))
  {
    *a4 = 0;
    return result;
  }
  v6 = result;
  v18 = 0;
  v7 = *a2;
  if (!*a2)
  {
    v8 = *((_QWORD *)a2 + 1);
    if ((*(_WORD *)(v8 + 28) & 0x10) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
      v10 = *(_QWORD *)(WebCore::HTMLNames::optionTag + 24);
      if (v9 == v10)
      {
        if (!*(_BYTE *)(v8 + 113))
          goto LABEL_6;
      }
      else
      {
        if (v9 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
          v14 = *((_QWORD *)a2 + 1);
        else
          v14 = 0;
        v8 = 0;
        if (a3)
          goto LABEL_7;
        if (!v14)
          goto LABEL_7;
        v8 = *(_QWORD *)(v14 + 88);
        if (!v8)
          goto LABEL_7;
        while ((*(_WORD *)(v8 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != v10)
        {
          v8 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v8)
            goto LABEL_7;
        }
        while (!*(_BYTE *)(v8 + 113))
        {
          do
            v8 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
          while (v8 && ((*(_WORD *)(v8 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != v10));
          if (!v8)
            goto LABEL_7;
        }
      }
      *(_DWORD *)(v8 + 24) += 2;
      goto LABEL_7;
    }
LABEL_6:
    v8 = 0;
LABEL_7:
    v18 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  if (a3 && v7 == 8)
  {
    v17 = WebCore::HTMLSelectElement::optionToSelectFromChildChangeScope(WebCore::ContainerNode::ChildChange const&,WebCore::HTMLOptGroupElement *)::$_0::operator()(*(_QWORD *)(a3 + 88));
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v18, v17);
    v7 = *a2;
    v8 = (uint64_t)v18;
  }
  else
  {
    v8 = 0;
  }
  v18 = 0;
  v11 = v7 <= 8 && ((1 << v7) & 0x185) != 0;
LABEL_8:
  v6[6] += 2;
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)result = &off_1E33CDB10;
  *((_QWORD *)result + 1) = v8;
  *((_BYTE *)result + 16) = v11;
  *((_QWORD *)result + 3) = v6;
  *a4 = result;
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      v15 = *((_WORD *)v13 + 15);
      if ((v15 & 0x400) == 0)
      {
        v16 = *((_WORD *)v13 + 14);
        if ((v16 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef(v13, v12);
        }
        else
        {
          if ((v16 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v13 + 20) + 16))(*((_QWORD *)v13 + 20));
            v15 = *((_WORD *)v13 + 15);
          }
          *((_WORD *)v13 + 15) = v15 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v13 + 72))(v13);
        }
      }
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLSelectElement::optionToSelectFromChildChangeScope(WebCore::ContainerNode::ChildChange const&,WebCore::HTMLOptGroupElement *)::$_0::operator()(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    while (1)
    {
      if ((*(_WORD *)(result + 28) & 0x10) != 0)
      {
        v1 = *(_QWORD *)(WebCore::HTMLNames::optionTag + 24);
        if (*(_QWORD *)(*(_QWORD *)(result + 96) + 24) == v1)
          break;
      }
      result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
      if (!result)
        return result;
    }
    do
    {
      if (*(_BYTE *)(result + 113))
        break;
      do
        result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
      while (result && ((*(_WORD *)(result + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != v1));
    }
    while (result);
  }
  return result;
}

unsigned int *WebCore::HTMLSelectElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  unsigned int *result;
  unsigned int *v6;
  WTF *v7;
  unsigned int *v8;

  if (a2[33] == 1)
    return WebCore::HTMLElement::childrenChanged(a1, a2);
  WebCore::HTMLSelectElement::optionToSelectFromChildChangeScope((unsigned int *)a1, a2, 0, &v8);
  WebCore::HTMLSelectElement::setRecalcListItems((WebCore::HTMLSelectElement *)a1);
  WebCore::ValidatedFormListedElement::updateValidity(a1 + 112);
  if (*(_DWORD *)(a1 + 208))
  {
    if (*(_DWORD *)(a1 + 212))
      *(_DWORD *)(a1 + 212) = 0;
    v7 = *(WTF **)(a1 + 200);
    if (v7)
    {
      *(_QWORD *)(a1 + 200) = 0;
      *(_DWORD *)(a1 + 208) = 0;
      WTF::fastFree(v7, v4);
    }
  }
  result = WebCore::HTMLElement::childrenChanged(a1, a2);
  v6 = v8;
  if (v8)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void WebCore::HTMLSelectElement::optionElementChildrenChanged(WebCore::HTMLSelectElement *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::Node *ElementSibling;
  WebCore::Element *v6;
  WebCore::AXObjectCache *v7;
  WebCore::AXObjectCache *v8;
  int v9;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_19;
    v3 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v3 + 1;
    if (*(_BYTE *)(v2 + 46) != 22)
    {
      __break(0xC471u);
      JUMPOUT(0x195C65098);
    }
    *(_BYTE *)(v2 + 432) = 1;
    if (v3 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x195C650B8);
    }
    *(_DWORD *)(v2 + 16) = v3;
  }
  WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v4 = *((_QWORD *)this + 4);
    if (!v4 || (*(_WORD *)(v4 + 28) & 8) == 0 || (*(_BYTE *)(v4 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v6);
    }
  }
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v7 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
    if (v7)
    {
      v8 = v7;
      ++*((_DWORD *)v7 + 2);
      WebCore::AXObjectCache::childrenChanged(v7, this, 0);
      v9 = *((_DWORD *)v8 + 2);
      if (v9)
      {
        *((_DWORD *)v8 + 2) = v9 - 1;
        return;
      }
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x195C65078);
    }
  }
}

WTF::StringImpl *WebCore::HTMLSelectElement::setSize(WebCore::HTMLSelectElement *this, int a2)
{
  __n128 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;

  WTF::AtomString::number((WTF::AtomString *)(a2 & ~(a2 >> 31)));
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::sizeAttr, &v6, 0, &v7, v3);
  if (v9 && v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLSelectElement::namedItem(WebCore::HTMLSelectElement *this, const WTF::AtomString *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v7;

  WebCore::HTMLSelectElement::options(this, (uint64_t *)&v7);
  v3 = WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::namedItem((uint64_t)v7, (uint64_t *)a2);
  v4 = WTF::downcast<WebCore::HTMLOptionElement,WebCore::Element>(v3);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  return v4;
}

uint64_t WebCore::HTMLSelectElement::item(WebCore::HTMLSelectElement *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::HTMLOptionsCollection *v5;
  WebCore::HTMLOptionsCollection *v7;

  WebCore::HTMLSelectElement::options(this, (uint64_t *)&v7);
  v3 = WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt((uint64_t)v7 + 40, v7, a2);
  v4 = v3;
  if (v3
    && ((*(_WORD *)(v3 + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)))
  {
    __break(0xC471u);
    JUMPOUT(0x195C652F4);
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 4) == 1)
      (*(void (**)(WebCore::HTMLOptionsCollection *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 4);
  }
  return v4;
}

void WebCore::HTMLSelectElement::setItem(uint64_t **this@<X0>, WebCore::HTMLOptionElement *a2@<X2>, void *a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  void *v25;
  int v26;
  WTF::StringImpl *v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  int v33;
  char v34;
  WebCore::HTMLOptionElement *v35;
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned __int8 v39;
  char v40;

  if (!a2)
  {
    WebCore::HTMLSelectElement::remove((WebCore::HTMLSelectElement *)this, (int)a3);
LABEL_20:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  LODWORD(v8) = *((_DWORD *)this + 49);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = this[23];
    v11 = *((unsigned int *)this + 49);
    do
    {
      v12 = *v10++;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        ++v9;
      --v11;
    }
    while (v11);
  }
  else
  {
    v9 = 0;
  }
  if (a3 >> 5 >= 0xC35 && v9 < a3)
  {
    v13 = this[5][1];
    *(_DWORD *)(v13 + 24) += 2;
    WTF::tryFastCompactMalloc((WTF *)0x73);
    v14 = v37;
    if (v37)
    {
      *(_QWORD *)v37 = 0x5F00000002;
      qmemcpy((char *)v14 + 20, "Unable to expand the option list and set an option at index. The maximum list length is 100000.", 95);
      *((_QWORD *)v14 + 1) = (char *)v14 + 20;
      *((_DWORD *)v14 + 4) = 4;
      v37 = v14;
      WebCore::Document::addConsoleMessage((_QWORD *)v13, 16, 1, &v37, 0);
      v16 = v37;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        v28 = *(_WORD *)(v13 + 30);
        if ((v28 & 0x400) == 0)
        {
          v29 = *(_WORD *)(v13 + 28);
          if ((v29 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v13, v15);
          }
          else
          {
            if ((v29 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
              v28 = *(_WORD *)(v13 + 30);
            }
            *(_WORD *)(v13 + 30) = v28 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
          }
        }
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      goto LABEL_20;
    }
    __break(0xC471u);
LABEL_80:
    JUMPOUT(0x195C657B4);
  }
  if (*((_BYTE *)this + 300))
  {
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
    LODWORD(v8) = *((_DWORD *)this + 49);
  }
  v17 = 0;
  if ((_DWORD)v8)
  {
    v18 = this[23];
    v8 = v8;
    do
    {
      v19 = *v18++;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        ++v17;
      --v8;
    }
    while (v8);
  }
  v20 = (_DWORD)a3 - v17;
  if ((int)a3 - v17 >= 1)
  {
    WebCore::HTMLSelectElement::setLength(this, a3, a4);
    if (*((_BYTE *)a4 + 16))
      return;
    goto LABEL_32;
  }
  if (v20 < 0)
  {
    WebCore::HTMLSelectElement::options((WebCore::HTMLSelectElement *)this, (uint64_t *)&v37);
    v22 = WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt((uint64_t)v37 + 40, v37, (int)a3 + 1);
    v21 = v22;
    if (v22
      && ((*(_WORD *)(v22 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)))
    {
      __break(0xC471u);
      goto LABEL_80;
    }
    v23 = v37;
    v37 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 4) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
        if (!v21)
        {
LABEL_41:
          WebCore::HTMLSelectElement::remove((WebCore::HTMLSelectElement *)this, (int)a3);
          *((_DWORD *)a2 + 6) += 2;
          v35 = a2;
          v36 = 0;
          if (v21)
            *(_DWORD *)(v21 + 24) += 2;
          goto LABEL_43;
        }
LABEL_40:
        *(_DWORD *)(v21 + 24) += 2;
        goto LABEL_41;
      }
      --*((_DWORD *)v23 + 4);
    }
    if (!v21)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_32:
  v21 = 0;
  *((_DWORD *)a2 + 6) += 2;
  v35 = a2;
  v36 = 0;
LABEL_43:
  v32 = v21;
  v33 = 0;
  v34 = 1;
  WebCore::HTMLSelectElement::add((uint64_t)this, (uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v37);
  if (v34 && v33 != -1)
    ((void (*)(char *, uint64_t *))off_1E33CD9D8[v33])(&v40, &v32);
  if (v36 != -1)
    ((void (*)(uint64_t *, WebCore::HTMLOptionElement **))off_1E33CD9E8[v36])(&v32, &v35);
  if (v39)
  {
    *(_BYTE *)a4 = (_BYTE)v37;
    a4[1] = v38;
    *((_BYTE *)a4 + 16) = 1;
  }
  else if (v20 < 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (WebCore::HTMLOptionElement::selected((uint64_t)a2, 1u))
    {
      v25 = (void *)WebCore::HTMLOptionElement::index(a2);
      WebCore::HTMLSelectElement::selectOption((WebCore::HTMLSelectElement *)this, v25, 0);
    }
    v26 = v39;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    if (v26)
    {
      v27 = v38;
      v38 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v24);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (v21)
  {
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      v30 = *(_WORD *)(v21 + 30);
      if ((v30 & 0x400) == 0)
      {
        v31 = *(_WORD *)(v21 + 28);
        if ((v31 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v21, v24);
        }
        else
        {
          if ((v31 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
            v30 = *(_WORD *)(v21 + 30);
          }
          *(_WORD *)(v21 + 30) = v30 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
        }
      }
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
  }
}

uint64_t WebCore::HTMLSelectElement::length(WebCore::HTMLSelectElement *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v2 = *((unsigned int *)this + 49);
  if (!(_DWORD)v2)
    return 0;
  LODWORD(result) = 0;
  v4 = (uint64_t *)*((_QWORD *)this + 23);
  do
  {
    v5 = *v4++;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      result = (result + 1);
    else
      result = result;
    --v2;
  }
  while (v2);
  return result;
}

_BYTE *WebCore::HTMLSelectElement::setLength@<X0>(_BYTE *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  WTF *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  WTF *v40;
  uint64_t *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  __int16 v47;
  __int16 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  WTF *v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  WTF::StringImpl *v73;
  int v74;
  _BYTE v75[4];
  char v76;
  uint64_t v77;

  v3 = a2;
  v4 = this;
  v77 = *MEMORY[0x1E0C80C00];
  if (this[300])
    this = WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v6 = *((_DWORD *)v4 + 49);
  if (v6)
  {
    v7 = 0;
    v8 = (uint64_t *)*((_QWORD *)v4 + 23);
    v9 = *((unsigned int *)v4 + 49);
    do
    {
      v10 = *v8++;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        ++v7;
      --v9;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
  }
  if (v3 >= 0x186A1 && v7 < v3)
  {
    v11 = 0;
    v12 = *(_QWORD *)(*((_QWORD *)v4 + 5) + 8);
    *(_DWORD *)(v12 + 24) += 2;
    v13 = v3;
    do
    {
      ++v11;
      v14 = v13 > 9;
      v13 /= 0xAu;
    }
    while (v14);
    if (v11 < 0
      || (v15 = __OFADD__(v11, 54), v16 = v11 + 54, v15)
      || (v17 = (v16 + 43), __OFADD__(v16, 43))
      || (WTF::tryFastCompactMalloc((WTF *)(v17 + 20)), (v18 = v73) == 0))
    {
LABEL_130:
      __break(0xC471u);
      JUMPOUT(0x195C660E8);
    }
    v19 = 0;
    *(_OWORD *)((char *)v73 + 20) = *(_OWORD *)"Unable to expand the option list to length ";
    *(_DWORD *)v18 = 2;
    *((_DWORD *)v18 + 1) = v17;
    *((_QWORD *)v18 + 1) = (char *)v18 + 20;
    *((_DWORD *)v18 + 4) = 4;
    qmemcpy((char *)v18 + 36, " the option list to length ", 27);
    v20 = v3;
    do
    {
      v75[v19--] = (v20 % 0xA) | 0x30;
      v14 = v20 > 9;
      v20 /= 0xAu;
    }
    while (v14);
    if (v19 + 14 <= 13)
      memcpy((char *)v18 + 63, &v75[v19 + 1], -v19);
    v21 = 0;
    do
    {
      ++v21;
      v14 = v3 > 9;
      v3 /= 0xAu;
    }
    while (v14);
    qmemcpy((char *)v18 + v21 + 63, " items. The maximum number of items allowed is 100000.", 54);
    v73 = v18;
    WebCore::Document::addConsoleMessage((_QWORD *)v12, 16, 1, &v73, 0);
    this = v73;
    v73 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v22);
      else
        *(_DWORD *)this -= 2;
    }
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      v63 = *(_WORD *)(v12 + 30);
      if ((v63 & 0x400) == 0)
      {
        v64 = *(_WORD *)(v12 + 28);
        if ((v64 & 0xF000) == 0x9000)
        {
          this = WebCore::Document::removedLastRef((WebCore::Document *)v12, v22);
        }
        else
        {
          if ((v64 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
            v63 = *(_WORD *)(v12 + 30);
          }
          *(_WORD *)(v12 + 30) = v63 | 0x400;
          this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
        }
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    goto LABEL_119;
  }
  if (v4[300])
  {
    this = WebCore::HTMLSelectElement::recalcListItems((uint64_t)v4, (void *)1, 1u);
    v6 = *((_DWORD *)v4 + 49);
  }
  v23 = 0;
  if (v6)
  {
    v24 = (uint64_t *)*((_QWORD *)v4 + 23);
    v25 = v6;
    do
    {
      v26 = *v24++;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        ++v23;
      --v25;
    }
    while (v25);
  }
  if ((int)(v23 - v3) >= 0)
  {
    if (v4[300])
    {
      this = WebCore::HTMLSelectElement::recalcListItems((uint64_t)v4, (void *)1, 1u);
      v6 = *((_DWORD *)v4 + 49);
      if (v6)
      {
LABEL_39:
        v65 = a3;
        v27 = 0;
        v28 = 0;
        LODWORD(v29) = 0;
        v30 = 0;
        v31 = *((_QWORD *)v4 + 23);
        v32 = v3;
        v33 = 8 * v6;
        v34 = &WebCore::HTMLNames::optionTag;
        do
        {
          if (*(_QWORD *)v31
            && (v35 = *(_QWORD *)(*(_QWORD *)v31 + 8)) != 0
            && *(_QWORD *)(*(_QWORD *)(v35 + 96) + 24) == *(_QWORD *)(*v34 + 24))
          {
            v36 = v27 + 1;
            if (v27 >= v32)
            {
              v37 = v28;
              if (v28 == (_DWORD)v29)
              {
                v66 = v28;
                v38 = v28 + ((unint64_t)v28 >> 2);
                if (v38 >= 0x10)
                  v39 = v38 + 1;
                else
                  v39 = 16;
                if (v39 <= (unint64_t)v28 + 1)
                  v29 = v28 + 1;
                else
                  v29 = v39;
                if (v29 >> 29)
                  goto LABEL_130;
                v40 = v30;
                v41 = v34;
                v42 = (WTF *)WTF::fastMalloc((WTF *)(8 * v29));
                this = memcpy(v42, v40, 8 * v37);
                if (v40)
                {
                  if (v42 == v40)
                  {
                    v42 = 0;
                    LODWORD(v29) = 0;
                  }
                  this = (_BYTE *)WTF::fastFree(v40, a2);
                }
                v34 = v41;
                v30 = v42;
                v28 = v66;
              }
              ++v28;
              *(_DWORD *)(v35 + 24) += 2;
              *((_QWORD *)v30 + v37) = v35;
            }
          }
          else
          {
            v36 = v27;
          }
          v31 += 8;
          v27 = v36;
          v33 -= 8;
        }
        while (v33);
        if (v28)
        {
          v43 = 8 * v28;
          v44 = v43;
          v45 = v30;
          do
          {
            a2 = *(void **)v45;
            v46 = *(_QWORD *)(*(_QWORD *)v45 + 32);
            if (v46)
            {
              *(_DWORD *)(v46 + 24) += 2;
              this = WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v46, (WebCore::Node *)a2, &v67);
              if (*(_DWORD *)(v46 + 24) == 2)
              {
                v47 = *(_WORD *)(v46 + 30);
                if ((v47 & 0x400) == 0)
                {
                  v48 = *(_WORD *)(v46 + 28);
                  if ((v48 & 0xF000) == 0x9000)
                  {
                    this = WebCore::Document::removedLastRef((WebCore::Document *)v46, a2);
                  }
                  else
                  {
                    if ((v48 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v46 + 160) + 16))(*(_QWORD *)(v46 + 160));
                      v47 = *(_WORD *)(v46 + 30);
                    }
                    *(_WORD *)(v46 + 30) = v47 | 0x400;
                    this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 72))(v46);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v46 + 24) -= 2;
              }
            }
            else
            {
              v67 = 0;
              v68 = 0;
              v69 = 0;
            }
            if ((_BYTE)v69)
            {
              this = v68;
              v68 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)this -= 2;
              }
            }
            v45 = (WTF *)((char *)v45 + 8);
            v44 -= 8;
          }
          while (v44);
          v59 = v30;
          do
          {
            v60 = *(_QWORD *)v59;
            *(_QWORD *)v59 = 0;
            if (v60)
            {
              if (*(_DWORD *)(v60 + 24) == 2)
              {
                v61 = *(_WORD *)(v60 + 30);
                if ((v61 & 0x400) == 0)
                {
                  v62 = *(_WORD *)(v60 + 28);
                  if ((v62 & 0xF000) == 0x9000)
                  {
                    this = WebCore::Document::removedLastRef((WebCore::Document *)v60, a2);
                  }
                  else
                  {
                    if ((v62 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v60 + 160) + 16))(*(_QWORD *)(v60 + 160));
                      v61 = *(_WORD *)(v60 + 30);
                    }
                    *(_WORD *)(v60 + 30) = v61 | 0x400;
                    this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 72))(v60);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v60 + 24) -= 2;
              }
            }
            v59 = (WTF *)((char *)v59 + 8);
            v43 -= 8;
          }
          while (v43);
        }
        a3 = v65;
        if (v30)
          this = (_BYTE *)WTF::fastFree(v30, a2);
      }
    }
    else if (v6)
    {
      goto LABEL_39;
    }
LABEL_119:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return this;
  }
  v49 = v3 - v23;
  while (1)
  {
    v50 = *(_QWORD *)(*((_QWORD *)v4 + 5) + 8);
    *(_DWORD *)(v50 + 24) += 2;
    v51 = bmalloc::api::isoAllocate();
    v52 = v51;
    *(_OWORD *)(v51 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v51 + 28) = 5148;
    *(_QWORD *)(v51 + 32) = 0;
    *(_QWORD *)(v51 + 40) = v50 + 96;
    *(_OWORD *)(v51 + 48) = 0u;
    *(_OWORD *)(v51 + 64) = 0u;
    ++*(_DWORD *)(v50 + 3324);
    *(_QWORD *)(v51 + 80) = 0;
    *(_QWORD *)(v51 + 88) = 0;
    v53 = WebCore::HTMLNames::optionTag;
    if (WebCore::HTMLNames::optionTag)
      ++*(_DWORD *)WebCore::HTMLNames::optionTag;
    *(_QWORD *)(v51 + 96) = v53;
    *(_QWORD *)(v51 + 104) = 0;
    *(_QWORD *)v51 = off_1E33C6620;
    *(_WORD *)(v51 + 112) = 0;
    *(_BYTE *)(v51 + 114) = 0;
    *(_DWORD *)(v51 + 24) = 4;
    v70 = v51;
    v71 = 0;
    LOBYTE(v73) = 0;
    v76 = 0;
    this = WebCore::HTMLSelectElement::add((uint64_t)v4, (uint64_t)&v70, (uint64_t)&v73, (uint64_t)a3);
    if (v76 && v74 != -1)
      this = (_BYTE *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E33CD9D8[v74])(&v72, &v73);
    if (v71 != -1)
      this = (_BYTE *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E33CD9E8[v71])(&v73, &v70);
    v71 = -1;
    if (*(_DWORD *)(v52 + 24) == 2)
    {
      v55 = *(_WORD *)(v52 + 30);
      if ((v55 & 0x400) == 0)
      {
        v56 = *(_WORD *)(v52 + 28);
        if ((v56 & 0xF000) == 0x9000)
        {
          this = WebCore::Document::removedLastRef((WebCore::Document *)v52, v54);
        }
        else
        {
          if ((v56 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v52 + 160) + 16))(*(_QWORD *)(v52 + 160));
            v55 = *(_WORD *)(v52 + 30);
          }
          *(_WORD *)(v52 + 30) = v55 | 0x400;
          this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 72))(v52);
        }
      }
    }
    else
    {
      *(_DWORD *)(v52 + 24) -= 2;
    }
    if (*(_DWORD *)(v50 + 24) == 2)
    {
      v57 = *(_WORD *)(v50 + 30);
      if ((v57 & 0x400) == 0)
      {
        v58 = *(_WORD *)(v50 + 28);
        if ((v58 & 0xF000) == 0x9000)
        {
          this = WebCore::Document::removedLastRef((WebCore::Document *)v50, v54);
        }
        else
        {
          if ((v58 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v50 + 160) + 16))(*(_QWORD *)(v50 + 160));
            v57 = *(_WORD *)(v50 + 30);
          }
          *(_WORD *)(v50 + 30) = v57 | 0x400;
          this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 72))(v50);
        }
      }
    }
    else
    {
      *(_DWORD *)(v50 + 24) -= 2;
    }
    if (*((_BYTE *)a3 + 16))
      return this;
    if (!--v49)
      goto LABEL_119;
  }
}

void WebCore::HTMLSelectElement::optionSelectionStateChanged(WebCore::HTMLSelectElement *this, WebCore::HTMLOptionElement *a2, int a3)
{
  WebCore::HTMLSelectElement *v3;
  unint64_t SelectableListIndex;
  uint64_t v5;

  v3 = this;
  if (a3)
  {
    SelectableListIndex = WebCore::HTMLOptionElement::index(a2);
  }
  else
  {
    if (*((_BYTE *)this + 297))
    {
      v5 = 0xFFFFFFFFLL;
      goto LABEL_4;
    }
    SelectableListIndex = WebCore::HTMLSelectElement::nextSelectableListIndex(this);
  }
  v5 = SelectableListIndex;
  this = v3;
LABEL_4:
  WebCore::HTMLSelectElement::selectOption(this, (void *)v5, 0);
}

uint64_t WebCore::HTMLSelectElement::isRequiredFormControl(WebCore::HTMLSelectElement *this)
{
  return *((_BYTE *)this + 168) & 1;
}

uint64_t WebCore::HTMLSelectElement::willRespondToMouseClickEventsWithEditability(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) ^ 1;
}

unint64_t WebCore::HTMLSelectElement::nextSelectableListIndex(WebCore::HTMLSelectElement *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v2 = *((unsigned int *)this + 49);
  if ((int)v2 < 1)
    return 0xFFFFFFFFLL;
  v3 = 0;
  while (1)
  {
    if (v3 >= *((unsigned int *)this + 49))
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x195C6623CLL);
    }
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v3) + 8);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 960))(v4) & 1) == 0)
    {
      if (v3 >= *((unsigned int *)this + 49))
        goto LABEL_12;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v3) + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        return v3;
    }
    if (v2 == ++v3)
      return 0xFFFFFFFFLL;
  }
}

uint64_t WebCore::HTMLSelectElement::previousSelectableListIndex(WebCore::HTMLSelectElement *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  if ((_DWORD)a2 == -1)
  {
    if (*((_BYTE *)this + 300))
      WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
    v2 = *((unsigned int *)this + 49);
  }
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  if ((int)v2 >= 1 && (int)v2 <= *((_DWORD *)this + 49))
  {
    for (i = v2; ; --i)
    {
      v5 = i - 1;
      if (*((_DWORD *)this + 49) <= (i - 1))
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x195C6635CLL);
      }
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * (i - 1)) + 8);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 960))(v6) & 1) == 0)
      {
        if (*((_DWORD *)this + 49) <= v5)
          goto LABEL_18;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * (i - 1)) + 8)
                                   + 96)
                       + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          break;
      }
      if ((unint64_t)(v5 + 1) <= 1)
        return v2;
    }
    return (i - 1);
  }
  return v2;
}

uint64_t WebCore::HTMLSelectElement::selectAll(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x195C664BCLL);
    }
    v2 = this;
    if (*(_BYTE *)(this + 297))
    {
      WebCore::HTMLSelectElement::saveLastSelection((WebCore::HTMLSelectElement *)this, a2);
      *(_BYTE *)(v2 + 298) = 1;
      if (*(_BYTE *)(v2 + 300))
        WebCore::HTMLSelectElement::recalcListItems(v2, (void *)1, 1u);
      v3 = *(unsigned int *)(v2 + 196);
      if ((int)v3 < 1)
      {
LABEL_13:
        v4 = 0xFFFFFFFFLL;
      }
      else
      {
        v4 = 0;
        while (1)
        {
          if (v4 >= *(unsigned int *)(v2 + 196))
          {
            __break(0xC471u);
            JUMPOUT(0x195C664C4);
          }
          v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * v4) + 8);
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 960))(v5) & 1) == 0)
          {
            if (v4 >= *(unsigned int *)(v2 + 196))
              goto LABEL_19;
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * v4) + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
              break;
          }
          if (v3 == ++v4)
            goto LABEL_13;
        }
      }
      WebCore::HTMLSelectElement::setActiveSelectionAnchorIndex((WebCore::HTMLSelectElement *)v2, (void *)v4);
      this = WebCore::HTMLSelectElement::previousSelectableListIndex((WebCore::HTMLSelectElement *)v2, 0xFFFFFFFFLL);
      *(_DWORD *)(v2 + 292) = this;
      if ((*(_DWORD *)(v2 + 288) & 0x80000000) == 0)
      {
        WebCore::HTMLSelectElement::updateListBoxSelection((WebCore::HTMLSelectElement *)v2, 0);
        WebCore::HTMLSelectElement::listBoxOnChange(v2);
        return WebCore::ValidatedFormListedElement::updateValidity(v2 + 112);
      }
    }
  }
  return this;
}

WTF *WebCore::HTMLSelectElement::saveLastSelection(WebCore::HTMLSelectElement *this, void *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  __int16 v11;
  WTF *result;

  if (*((_BYTE *)this + 297))
  {
    if (*((_BYTE *)this + 300))
      WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
    v3 = *((_DWORD *)this + 49);
    if (v3)
    {
      v4 = WTF::fastMalloc((WTF *)*((unsigned int *)this + 49));
      if (*((_DWORD *)this + 49))
      {
        v5 = 0;
        do
        {
          v6 = v5;
          v7 = *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v5);
          if (v7)
            v8 = *(_QWORD *)(v7 + 8);
          else
            v8 = 0;
          v9 = 0;
          if (v8 && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            *(_DWORD *)(v8 + 24) += 2;
            v9 = WebCore::HTMLOptionElement::selected(v8, 1u);
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              v10 = *(_WORD *)(v8 + 30);
              if ((v10 & 0x400) == 0)
              {
                v11 = *(_WORD *)(v8 + 28);
                if ((v11 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
                }
                else
                {
                  if ((v11 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                    v10 = *(_WORD *)(v8 + 30);
                  }
                  *(_WORD *)(v8 + 30) = v10 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
                }
              }
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
          }
          v5 = v6 + 1;
          *(_BYTE *)(v4 + v6) = v9;
        }
        while (v6 + 1 < (unint64_t)*((unsigned int *)this + 49));
      }
      else
      {
        LODWORD(v5) = 0;
      }
    }
    else
    {
      LODWORD(v5) = 0;
      v4 = 0;
    }
    result = (WTF *)*((_QWORD *)this + 25);
    if (result)
    {
      *((_QWORD *)this + 25) = 0;
      *((_DWORD *)this + 52) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    *((_QWORD *)this + 25) = v4;
    *((_DWORD *)this + 52) = v3;
    *((_DWORD *)this + 53) = v5;
  }
  else
  {
    result = (WTF *)WebCore::HTMLSelectElement::selectedIndex(this);
    *((_DWORD *)this + 71) = (_DWORD)result;
  }
  return result;
}

WTF *WebCore::HTMLSelectElement::setActiveSelectionAnchorIndex(WebCore::HTMLSelectElement *this, void *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  __int16 v11;
  WTF *result;

  *((_DWORD *)this + 72) = (_DWORD)a2;
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v3 = *((_DWORD *)this + 49);
  if (v3)
  {
    v4 = WTF::fastMalloc((WTF *)*((unsigned int *)this + 49));
    if (*((_DWORD *)this + 49))
    {
      v5 = 0;
      do
      {
        v6 = v5;
        v7 = *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v5);
        if (v7)
          v8 = *(_QWORD *)(v7 + 8);
        else
          v8 = 0;
        v9 = 0;
        if (v8 && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        {
          *(_DWORD *)(v8 + 24) += 2;
          v9 = WebCore::HTMLOptionElement::selected(v8, 1u);
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            v10 = *(_WORD *)(v8 + 30);
            if ((v10 & 0x400) == 0)
            {
              v11 = *(_WORD *)(v8 + 28);
              if ((v11 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
              }
              else
              {
                if ((v11 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                  v10 = *(_WORD *)(v8 + 30);
                }
                *(_WORD *)(v8 + 30) = v10 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
              }
            }
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        v5 = v6 + 1;
        *(_BYTE *)(v4 + v6) = v9;
      }
      while (v6 + 1 < (unint64_t)*((unsigned int *)this + 49));
    }
    else
    {
      LODWORD(v5) = 0;
    }
  }
  else
  {
    LODWORD(v5) = 0;
    v4 = 0;
  }
  result = (WTF *)*((_QWORD *)this + 27);
  if (result)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *((_QWORD *)this + 27) = v4;
  *((_DWORD *)this + 56) = v3;
  *((_DWORD *)this + 57) = v5;
  return result;
}

uint64_t WebCore::HTMLSelectElement::updateListBoxSelection(WebCore::HTMLSelectElement *this, void *a2)
{
  char v2;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  _BOOL8 v14;
  int v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE v22[20];
  __int128 v23;
  char v24;

  v2 = (char)a2;
  v4 = *((_DWORD *)this + 73);
  v5 = *((_DWORD *)this + 72);
  if ((int)v4 >= (int)v5)
    v6 = v5;
  else
    v6 = v4;
  if ((int)v5 <= (int)v4)
    v7 = v4;
  else
    v7 = v5;
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  if (*((_DWORD *)this + 49))
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
            break;
        }
      }
LABEL_29:
      if (++v8 >= *((unsigned int *)this + 49))
        goto LABEL_40;
    }
    v11 = *(_DWORD *)(v10 + 24) + 2;
    *(_DWORD *)(v10 + 24) = v11;
    if (*(_BYTE *)(v10 + 112)
      || (v12 = *(_QWORD *)(v10 + 32)) != 0
      && (*(_WORD *)(v12 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
      && *(_BYTE *)(v12 + 112))
    {
LABEL_27:
      v15 = v11 - 2;
      if (v15)
      {
        *(_DWORD *)(v10 + 24) = v15;
      }
      else
      {
        v16 = *(_WORD *)(v10 + 30);
        if ((v16 & 0x400) == 0)
        {
          v17 = *(_WORD *)(v10 + 28);
          if ((v17 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v10, a2);
          }
          else
          {
            if ((v17 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
              v16 = *(_WORD *)(v10 + 30);
            }
            *(_WORD *)(v10 + 30) = v16 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
          }
        }
      }
      goto LABEL_29;
    }
    if (v8 < v6 || v8 > v7)
    {
      if ((v2 & 1) != 0 || v8 >= *((unsigned int *)this + 57))
      {
        v14 = 0;
        goto LABEL_26;
      }
      v13 = *(unsigned __int8 *)(*((_QWORD *)this + 27) + v8);
    }
    else
    {
      v13 = *((unsigned __int8 *)this + 298);
    }
    v14 = v13 != 0;
LABEL_26:
    WebCore::HTMLOptionElement::setSelectedState(v10, (void *)v14, 1);
    v11 = *(_DWORD *)(v10 + 24);
    goto LABEL_27;
  }
LABEL_40:
  WebCore::HTMLSelectElement::invalidateSelectedItems(*((_QWORD *)this + 9));
  v18 = *((_QWORD *)this + 8);
  v19 = v18 & 0xFFFFFFFFFFFFLL;
  if ((v18 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v18 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      v20 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)(v19 + 16) = v20;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v23) = 0;
        v24 = 0;
        v22[0] = 0;
        v22[16] = 0;
        WebCore::RenderObject::issueRepaint(v19, &v23, 0, 0, (uint64_t)v22);
        v20 = *(_DWORD *)(v19 + 16);
      }
      if (v20)
      {
        *(_DWORD *)(v19 + 16) = v20 - 1;
        return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
      }
      __break(0xC471u);
    }
    JUMPOUT(0x195C66A7CLL);
  }
  return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
}

uint64_t WebCore::HTMLSelectElement::invalidateSelectedItems(uint64_t this)
{
  uint64_t *v1;
  _DWORD *v2;

  v1 = (uint64_t *)(this & 0xFFFFFFFFFFFFLL);
  if ((this & 0xFFFFFFFFFFFFLL) != 0)
  {
    this = *v1;
    if (*v1)
    {
      this = WebCore::NodeListsNodeData::cachedCollection<WebCore::HTMLCollection>(this, 0x11u);
      if (this)
      {
        v2 = (_DWORD *)this;
        ++*(_DWORD *)(this + 16);
        this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 72))(this, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 40) + 8));
        if (v2[4] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
        else
          --v2[4];
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLSelectElement::dispatchChangeEventForMenuList(WebCore::HTMLSelectElement *this)
{
  uint64_t result;

  result = WebCore::HTMLSelectElement::selectedIndex(this);
  if (*((_DWORD *)this + 71) != (_DWORD)result)
  {
    if (*((_BYTE *)this + 296))
    {
      *((_DWORD *)this + 71) = result;
      *((_BYTE *)this + 296) = 0;
      WebCore::Node::dispatchInputEvent(this);
      return (*(uint64_t (**)(WebCore::HTMLSelectElement *))(*(_QWORD *)this + 1248))(this);
    }
  }
  return result;
}

uint64_t WebCore::ElementChildRange<WebCore::HTMLOptionElement>::begin(uint64_t result)
{
  uint64_t i;

  for (i = *(_QWORD *)(result + 80); i; i = *(_QWORD *)(i + 56))
  {
    if ((*(_WORD *)(i + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      break;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLSelectElement::recalcListItems(BOOL,WebCore::AllowStyleInvalidation)const::$_0::operator()(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 196);
  if ((_DWORD)v5 == *(_DWORD *)(*(_QWORD *)result + 192))
  {
    v8 = v5 + (v5 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v5 + 1)
      v10 = v5 + 1;
    else
      v10 = v9;
    if (v10 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v11 = *(WTF **)(v4 + 184);
    v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    *(_DWORD *)(v4 + 192) = v10;
    *(_QWORD *)(v4 + 184) = v13;
    if ((_DWORD)v5)
    {
      v29 = (WTF *)((char *)v11 + 8 * v5);
      v30 = v11;
      do
      {
        v31 = *(_QWORD *)v30;
        *(_QWORD *)v30 = 0;
        *(_QWORD *)v13 = v31;
        v32 = *(_QWORD *)v30;
        *(_QWORD *)v30 = 0;
        if (v32)
        {
          do
          {
            v33 = __ldaxr((unsigned int *)v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, (unsigned int *)v32));
          if (!v34)
          {
            v37 = v30;
            v38 = (WTF *)v32;
            atomic_store(1u, (unsigned int *)v32);
            v35 = *(unsigned int *)(v32 + 28);
            if ((_DWORD)v35)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v35));
            v36 = (WTF *)*((_QWORD *)v38 + 2);
            if (v36)
            {
              *((_QWORD *)v38 + 2) = 0;
              *((_DWORD *)v38 + 6) = 0;
              WTF::fastFree(v36, v12);
            }
            WTF::fastFree(v38, v12);
            v30 = v37;
          }
        }
        v13 = (WTF *)((char *)v13 + 8);
        v30 = (WTF *)((char *)v30 + 8);
      }
      while (v30 != v29);
      v13 = *(WTF **)(v4 + 184);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v14 = *(unsigned int *)(v4 + 196);
      result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
      if (result)
      {
        do
          v15 = __ldaxr(result);
        while (__stlxr(v15 + 1, result));
      }
      *((_QWORD *)v13 + v14) = result;
      goto LABEL_20;
    }
    if (v13 == v11)
    {
      *(_QWORD *)(v4 + 184) = 0;
      *(_DWORD *)(v4 + 192) = 0;
    }
    WTF::fastFree(v11, v12);
    v13 = *(WTF **)(v4 + 184);
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(v4 + 184);
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  if (result)
  {
    do
      v7 = __ldaxr(result);
    while (__stlxr(v7 + 1, result));
  }
  *(_QWORD *)(v6 + 8 * v5) = result;
LABEL_20:
  ++*(_DWORD *)(v4 + 196);
  if (**((_BYTE **)v3 + 1) && !*(_BYTE *)(v4 + 297))
  {
    v16 = (uint64_t *)*((_QWORD *)v3 + 2);
    if (!*v16)
    {
      *(_DWORD *)(a2 + 24) += 2;
      *v16 = a2;
    }
    v17 = *(_QWORD *)(a2 + 32);
    if (v17)
    {
      if ((~*(unsigned __int16 *)(v17 + 28) & 0x18) == 0)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24);
        v19 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
        if (v18 == v19
          || v18 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
          && (v17 = *(_QWORD *)(v17 + 32)) != 0
          && (*(_WORD *)(v17 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == v19)
        {
          *(_DWORD *)(v17 + 24) += 2;
          result = (unsigned int *)WebCore::HTMLSelectElement::updateListItemSelectedStates(v17);
          if (*(_DWORD *)(v17 + 24) == 2)
          {
            v27 = *(_WORD *)(v17 + 30);
            if ((v27 & 0x400) == 0)
            {
              v28 = *(_WORD *)(v17 + 28);
              if ((v28 & 0xF000) == 0x9000)
              {
                result = (unsigned int *)WebCore::Document::removedLastRef((WebCore::Document *)v17);
              }
              else
              {
                if ((v28 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 16))(*(_QWORD *)(v17 + 160));
                  v27 = *(_WORD *)(v17 + 30);
                }
                *(_WORD *)(v17 + 30) = v27 | 0x400;
                result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
              }
            }
          }
          else
          {
            *(_DWORD *)(v17 + 24) -= 2;
          }
        }
      }
    }
    if (*(_BYTE *)(a2 + 113))
    {
      v20 = (unsigned int **)*((_QWORD *)v3 + 3);
      result = *v20;
      if (*v20)
      {
        result = (unsigned int *)WebCore::HTMLOptionElement::setSelectedState((uint64_t)result, 0, **((unsigned __int8 **)v3 + 4));
        v21 = (uint64_t *)*((_QWORD *)v3 + 3);
        v22 = *v21;
        *(_DWORD *)(a2 + 24) += 2;
        *v21 = a2;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            v25 = *(_WORD *)(v22 + 30);
            if ((v25 & 0x400) == 0)
            {
              v26 = *(_WORD *)(v22 + 28);
              if ((v26 & 0xF000) == 0x9000)
              {
                return (unsigned int *)WebCore::Document::removedLastRef((WebCore::Document *)v22);
              }
              else
              {
                if ((v26 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 160) + 16))(*(_QWORD *)(v22 + 160));
                  v25 = *(_WORD *)(v22 + 30);
                }
                *(_WORD *)(v22 + 30) = v25 | 0x400;
                return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
              }
            }
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)(a2 + 24) += 2;
        *v20 = (unsigned int *)a2;
      }
    }
    else if (*(_DWORD *)(v4 + 280) <= 1u)
    {
      v23 = (uint64_t *)*((_QWORD *)v3 + 3);
      if (!*v23 && !*(_BYTE *)(a2 + 112))
      {
        v24 = *(_QWORD *)(a2 + 32);
        if (!v24
          || (*(_WORD *)(v24 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
          || !*(_BYTE *)(v24 + 112))
        {
          *(_DWORD *)(a2 + 24) += 2;
          *v23 = a2;
          return (unsigned int *)WebCore::HTMLOptionElement::setSelectedState(**((_QWORD **)v3 + 3), (void *)1, **((unsigned __int8 **)v3 + 4));
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ElementChildIterator<WebCore::HTMLOptionElement>::operator++(uint64_t result)
{
  uint64_t i;

  for (i = *(_QWORD *)(*(_QWORD *)(result + 8) + 56); i; i = *(_QWORD *)(i + 56))
  {
    if ((*(_WORD *)(i + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      break;
    }
  }
  *(_QWORD *)(result + 8) = i;
  return result;
}

uint64_t WebCore::HTMLSelectElement::deselectItemsWithoutValidation(uint64_t this, WebCore::HTMLElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  _DWORD *v15;

  v3 = this;
  if (*(_BYTE *)(this + 300))
    this = (uint64_t)WebCore::HTMLSelectElement::recalcListItems(this, (void *)1, 1u);
  v4 = *(unsigned int *)(v3 + 196);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(v3 + 184);
    if (a2)
    {
      v6 = 8 * v4;
      while (*(_QWORD *)v5)
      {
        v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if ((WebCore::HTMLElement *)v7 != a2)
          goto LABEL_8;
LABEL_12:
        v5 += 8;
        v6 -= 8;
        if (!v6)
          goto LABEL_29;
      }
      v7 = 0;
LABEL_8:
      if (v7 && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        *(_DWORD *)(v7 + 24) += 2;
        this = WebCore::HTMLOptionElement::setSelectedState(v7, 0, 1);
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          v9 = *(_WORD *)(v7 + 30);
          if ((v9 & 0x400) == 0)
          {
            v10 = *(_WORD *)(v7 + 28);
            if ((v10 & 0xF000) == 0x9000)
            {
              this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v7, v8);
            }
            else
            {
              if ((v10 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
                v9 = *(_WORD *)(v7 + 30);
              }
              *(_WORD *)(v7 + 30) = v9 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
            }
          }
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      goto LABEL_12;
    }
    v11 = 8 * v4;
    do
    {
      if (*(_QWORD *)v5)
      {
        v12 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if (v12)
        {
          if (*(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            *(_DWORD *)(v12 + 24) += 2;
            this = WebCore::HTMLOptionElement::setSelectedState(v12, 0, 1);
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
          }
        }
      }
      v5 += 8;
      v11 -= 8;
    }
    while (v11);
  }
LABEL_29:
  v14 = (uint64_t *)(*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL);
  if (v14)
  {
    this = *v14;
    if (*v14)
    {
      this = WebCore::NodeListsNodeData::cachedCollection<WebCore::HTMLCollection>(this, 0x11u);
      if (this)
      {
        v15 = (_DWORD *)this;
        ++*(_DWORD *)(this + 16);
        this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 72))(this, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 40) + 8));
        if (v15[4] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[4];
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLSelectElement::dispatchFocusEvent(WebCore::HTMLSelectElement *this, void *a2)
{
  if (!*((_BYTE *)this + 297))
    WebCore::HTMLSelectElement::saveLastSelection(this, a2);
  return WebCore::Element::dispatchFocusEvent(this, (uint64_t *)a2);
}

WebCore::ValidationMessage *WebCore::HTMLSelectElement::dispatchBlurEvent(WebCore::ValidationMessage **this, uint64_t *a2)
{
  int v4;
  WebCore::ValidationMessage *result;

  if (!*((_BYTE *)this + 297))
  {
    v4 = WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)this);
    if (*((_DWORD *)this + 71) != v4)
    {
      if (*((_BYTE *)this + 296))
      {
        *((_DWORD *)this + 71) = v4;
        *((_BYTE *)this + 296) = 0;
        WebCore::Node::dispatchInputEvent((WebCore::Node *)this);
        (*((void (**)(WebCore::ValidationMessage **))*this + 156))(this);
      }
    }
  }
  WebCore::Element::dispatchBlurEvent(this, a2);
  result = this[19];
  if (result)
    return (WebCore::ValidationMessage *)WebCore::ValidationMessage::requestToHideMessage(result);
  return result;
}

_BYTE *WebCore::HTMLSelectElement::saveFormControlState@<X0>(_BYTE *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  __int16 v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v2 = this;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (this[300])
    this = WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v4 = *((unsigned int *)v2 + 49);
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      this = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a2 + 8) = v4;
      *(_QWORD *)a2 = this;
      v5 = *((unsigned int *)v2 + 49);
      if ((_DWORD)v5)
      {
        v6 = *((_QWORD *)v2 + 23);
        v7 = 8 * v5;
        do
        {
          if (*(_QWORD *)v6)
          {
            v8 = *(_QWORD *)(*(_QWORD *)v6 + 8);
            if (v8)
            {
              if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
              {
                *(_DWORD *)(v8 + 24) += 2;
                this = (_BYTE *)WebCore::HTMLOptionElement::selected(v8, 1u);
                if ((_DWORD)this)
                {
                  WebCore::HTMLOptionElement::value((WTF::StringImpl *)v8, v9, &v19);
                  v10 = *(unsigned int *)(a2 + 12);
                  if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
                  {
                    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(a2, &v19);
                  }
                  else
                  {
                    v14 = *(_QWORD *)a2;
                    v15 = v19;
                    v19 = 0;
                    if (v15)
                    {
                      v20 = v15;
                      if ((*((_BYTE *)v15 + 16) & 0x10) == 0)
                      {
                        WTF::AtomStringImpl::addSlowCase();
                        v16 = v20;
                        v15 = v21;
                        v20 = 0;
                        v21 = 0;
                        if (v16)
                        {
                          if (*(_DWORD *)v16 == 2)
                          {
                            v18 = v15;
                            WTF::StringImpl::destroy(v16, v9);
                            v15 = v18;
                          }
                          else
                          {
                            *(_DWORD *)v16 -= 2;
                          }
                        }
                      }
                      v17 = *(_DWORD *)(a2 + 12);
                    }
                    else
                    {
                      v17 = v10;
                    }
                    *(_QWORD *)(v14 + 8 * v10) = v15;
                    *(_DWORD *)(a2 + 12) = v17 + 1;
                  }
                  this = v19;
                  v19 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2)
                      this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
                    else
                      *(_DWORD *)this -= 2;
                  }
                  v11 = 2 * (v2[297] == 0);
                }
                else
                {
                  v11 = 3;
                }
                if (*(_DWORD *)(v8 + 24) == 2)
                {
                  v12 = *(_WORD *)(v8 + 30);
                  if ((v12 & 0x400) == 0)
                  {
                    v13 = *(_WORD *)(v8 + 28);
                    if ((v13 & 0xF000) == 0x9000)
                    {
                      this = WebCore::Document::removedLastRef((WebCore::Document *)v8, v9);
                    }
                    else
                    {
                      if ((v13 & 0x20) != 0)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                        v12 = *(_WORD *)(v8 + 30);
                      }
                      *(_WORD *)(v8 + 30) = v12 | 0x400;
                      this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(v8 + 24) -= 2;
                }
                if (v11 != 3 && v11)
                  break;
              }
            }
          }
          v6 += 8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return this;
}

_BYTE *`non-virtual thunk to'WebCore::HTMLSelectElement::saveFormControlState@<X0>(WebCore::HTMLSelectElement *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::HTMLSelectElement::saveFormControlState((_BYTE *)this - 112, a2);
}

uint64_t WebCore::HTMLSelectElement::searchOptionsForValue(uint64_t this, const WTF::String *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  char v11;
  WTF::StringImpl *v12;

  v7 = this;
  if (*(_BYTE *)(this + 300))
    this = (uint64_t)WebCore::HTMLSelectElement::recalcListItems(this, (void *)1, 1u);
  if (*(unsigned int *)(v7 + 196) >= a4)
    v8 = a4;
  else
    v8 = *(unsigned int *)(v7 + 196);
  if (v8 > a3)
  {
    do
    {
      if (a3 >= *(unsigned int *)(v7 + 196))
      {
        __break(0xC471u);
        return this;
      }
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 184) + 8 * a3);
      if (v9)
      {
        this = *(_QWORD *)(v9 + 8);
        if (this && *(_QWORD *)(*(_QWORD *)(this + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        {
          WebCore::HTMLOptionElement::value((WTF::StringImpl *)this, a2, &v12);
          v11 = WTF::equal(v12, *(const WTF::StringImpl **)a2, v10);
          this = (uint64_t)v12;
          v12 = 0;
          if (!this)
            goto LABEL_14;
          if (*(_DWORD *)this != 2)
          {
            *(_DWORD *)this -= 2;
LABEL_14:
            if ((v11 & 1) != 0)
              return a3;
            goto LABEL_15;
          }
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          if ((v11 & 1) != 0)
            return a3;
        }
      }
      else
      {
        this = 0;
      }
LABEL_15:
      ++a3;
    }
    while (v8 != a3);
  }
  return -1;
}

WebCore::Node *WebCore::HTMLSelectElement::restoreFormControlState(uint64_t a1, uint64_t a2)
{
  WebCore::Node *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  unint64_t v13;
  const WTF::String *v14;
  uint64_t i;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int16 v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  __int16 v31;
  __int16 v32;

  result = WebCore::HTMLSelectElement::recalcListItems(a1, (void *)1, 1u);
  if (*(_BYTE *)(a1 + 300))
    result = WebCore::HTMLSelectElement::recalcListItems(a1, (void *)1, 1u);
  v5 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 184);
    v7 = 8 * v5;
    do
    {
      if (*(_QWORD *)v6)
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        if (v8)
        {
          if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            *(_DWORD *)(v8 + 24) += 2;
            WebCore::HTMLOptionElement::setSelectedState(v8, 0, 1);
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              v10 = *(_WORD *)(v8 + 30);
              if ((v10 & 0x400) == 0)
              {
                v11 = *(_WORD *)(v8 + 28);
                if ((v11 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v8, v9);
                }
                else
                {
                  if ((v11 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                    v10 = *(_WORD *)(v8 + 30);
                  }
                  *(_WORD *)(v8 + 30) = v10 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
                }
              }
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
          }
        }
      }
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
    if (*(_BYTE *)(a1 + 297))
    {
      v12 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = *(const WTF::String **)a2;
        for (i = 8 * v12; i; i -= 8)
        {
          v16 = WebCore::HTMLSelectElement::searchOptionsForValue(a1, v14, v13, v5);
          if (v16 != -1 || (v16 = WebCore::HTMLSelectElement::searchOptionsForValue(a1, v14, 0, v13), v16 != -1))
          {
            if (v16 >= *(unsigned int *)(a1 + 196))
            {
              __break(0xC471u);
              JUMPOUT(0x195C67BB4);
            }
            v17 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v16);
            if (v17)
              v18 = *(_QWORD *)(v17 + 8);
            else
              v18 = 0;
            if (*(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
              goto LABEL_75;
            *(_DWORD *)(v18 + 24) += 2;
            WebCore::HTMLOptionElement::setSelectedState(v18, (void *)1, 1);
            if (*(_DWORD *)(v18 + 24) == 2)
            {
              v20 = *(_WORD *)(v18 + 30);
              if ((v20 & 0x400) == 0)
              {
                v21 = *(_WORD *)(v18 + 28);
                if ((v21 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v18, v19);
                }
                else
                {
                  if ((v21 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 160) + 16))(*(_QWORD *)(v18 + 160));
                    v20 = *(_WORD *)(v18 + 30);
                  }
                  *(_WORD *)(v18 + 30) = v20 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
                }
              }
            }
            else
            {
              *(_DWORD *)(v18 + 24) -= 2;
            }
            v13 = v16 + 1;
          }
          v14 = (const WTF::String *)((char *)v14 + 8);
        }
      }
    }
    else
    {
      if (!*(_DWORD *)(a2 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x195C67BBCLL);
      }
      v22 = WebCore::HTMLSelectElement::searchOptionsForValue(a1, *(const WTF::String **)a2, 0, v5);
      if (v22 != -1)
      {
        if (v22 >= *(unsigned int *)(a1 + 196))
        {
LABEL_75:
          __break(0xC471u);
          JUMPOUT(0x195C67AECLL);
        }
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v22);
        if (v23)
          v24 = *(_QWORD *)(v23 + 8);
        else
          v24 = 0;
        if (*(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x195C67BA4);
        }
        *(_DWORD *)(v24 + 24) += 2;
        WebCore::HTMLOptionElement::setSelectedState(v24, (void *)1, 1);
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          v31 = *(_WORD *)(v24 + 30);
          if ((v31 & 0x400) == 0)
          {
            v32 = *(_WORD *)(v24 + 28);
            if ((v32 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v24, v25);
            }
            else
            {
              if ((v32 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 160) + 16))(*(_QWORD *)(v24 + 160));
                v31 = *(_WORD *)(v24 + 30);
              }
              *(_WORD *)(v24 + 30) = v31 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
            }
          }
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
      }
    }
    v26 = (uint64_t *)(*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL);
    if (v26)
    {
      if (*v26)
      {
        v29 = WebCore::NodeListsNodeData::cachedCollection<WebCore::HTMLCollection>(*v26, 0x11u);
        if (v29)
        {
          v30 = (_DWORD *)v29;
          ++*(_DWORD *)(v29 + 16);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 72))(v29, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 24) + 40) + 8));
          if (v30[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
          else
            --v30[4];
        }
      }
    }
    v27 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (v27)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C67B2CLL);
      }
      v28 = *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v28 + 1;
      if (*(_BYTE *)(v27 + 46) != 22)
      {
        __break(0xC471u);
        JUMPOUT(0x195C67B4CLL);
      }
      *(_BYTE *)(v27 + 432) = 1;
      if (v28 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x195C67B6CLL);
      }
      *(_DWORD *)(v27 + 16) = v28;
    }
    return (WebCore::Node *)WebCore::ValidatedFormListedElement::updateValidity(a1 + 112);
  }
  return result;
}

WebCore::Node *`non-virtual thunk to'WebCore::HTMLSelectElement::restoreFormControlState(uint64_t a1, uint64_t a2)
{
  return WebCore::HTMLSelectElement::restoreFormControlState(a1 - 112, a2);
}

unsigned int *WebCore::HTMLSelectElement::reset(WebCore::HTMLSelectElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  unsigned int *result;
  void *v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  WebCore::Node *ElementSibling;
  WebCore::Element *v34;

  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v2 = *((unsigned int *)this + 49);
  if (!(_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_59;
  }
  v3 = 0;
  v4 = 0;
  v5 = *((_QWORD *)this + 23);
  v6 = v5 + 8 * v2;
  do
  {
    if (!*(_QWORD *)v5)
      goto LABEL_33;
    v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if (!v7 || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      goto LABEL_33;
    *(_DWORD *)(v7 + 24) += 2;
    v8 = *(_QWORD *)(v7 + 104);
    if (!v8)
      goto LABEL_23;
    v9 = *(unsigned int *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(uint64_t **)(v8 + 40);
      v11 = *(unsigned int *)(v8 + 52);
      if (v11)
        goto LABEL_13;
LABEL_23:
      WebCore::HTMLOptionElement::setSelectedState(v7, 0, 1);
      v14 = v3;
      goto LABEL_24;
    }
    v10 = (uint64_t *)(v8 + 32);
    v11 = v9 >> 5;
    if (!(v9 >> 5))
      goto LABEL_23;
LABEL_13:
    while (1)
    {
      v12 = *v10;
      if (*v10 == WebCore::HTMLNames::selectedAttr
        || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::selectedAttr + 24)
        && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::selectedAttr + 32))
      {
        break;
      }
      v10 += 2;
      if (!--v11)
        goto LABEL_23;
    }
    if (v3)
    {
      if (!*((_BYTE *)this + 297))
        WebCore::HTMLOptionElement::setSelectedState(v3, 0, 1);
      WebCore::HTMLOptionElement::setSelectedState(v7, (void *)1, 1);
      *(_DWORD *)(v7 + 24) += 2;
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        v18 = *(_WORD *)(v3 + 30);
        v14 = v7;
        if ((v18 & 0x400) != 0)
          goto LABEL_24;
        v19 = *(_WORD *)(v3 + 28);
        if ((v19 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, v13);
        }
        else
        {
          if ((v19 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v18 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v18 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      WebCore::HTMLOptionElement::setSelectedState(v7, (void *)1, 1);
      *(_DWORD *)(v7 + 24) += 2;
    }
    v14 = v7;
LABEL_24:
    if (v4
      || *(_BYTE *)(v7 + 112)
      || (v15 = *(_QWORD *)(v7 + 32)) != 0
      && (*(_WORD *)(v15 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
      && *(_BYTE *)(v15 + 112))
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        v16 = *(_WORD *)(v7 + 30);
        if ((v16 & 0x400) == 0)
        {
          v17 = *(_WORD *)(v7 + 28);
          if ((v17 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, v13);
          }
          else
          {
            if ((v17 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v16 = *(_WORD *)(v7 + 30);
            }
            *(_WORD *)(v7 + 30) = v16 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      v3 = v14;
    }
    else
    {
      v3 = v14;
      v4 = v7;
    }
LABEL_33:
    v5 += 8;
  }
  while (v5 != v6);
  v20 = v3 == 0;
  if (!v3 && v4)
  {
    if (!*((_BYTE *)this + 297) && *((_DWORD *)this + 70) <= 1u)
    {
      v20 = 1;
      WebCore::HTMLOptionElement::setSelectedState(v4, (void *)1, 1);
      v3 = 0;
      goto LABEL_60;
    }
    v3 = 0;
LABEL_59:
    v20 = 1;
  }
LABEL_60:
  WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)this + 112, 0);
  v21 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (v21)
  {
    if (*v21)
    {
      v30 = WebCore::NodeListsNodeData::cachedCollection<WebCore::HTMLCollection>(*v21, 0x11u);
      if (v30)
      {
        v31 = (_DWORD *)v30;
        ++*(_DWORD *)(v30 + 16);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 72))(v30, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 24) + 40) + 8));
        if (v31[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
        else
          --v31[4];
      }
    }
  }
  v22 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C68108);
    }
    v23 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v23 + 1;
    if (*(_BYTE *)(v22 + 46) != 22)
    {
      __break(0xC471u);
      JUMPOUT(0x195C68128);
    }
    *(_BYTE *)(v22 + 432) = 1;
    if (v23 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x195C68148);
    }
    *(_DWORD *)(v22 + 16) = v23;
  }
  WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v32 = *((_QWORD *)this + 4);
    if (!v32 || (*(_WORD *)(v32 + 28) & 8) == 0 || (*(_BYTE *)(v32 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v34);
    }
  }
  result = (unsigned int *)WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  if (!v20)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v26 = *(_WORD *)(v3 + 30);
      if ((v26 & 0x400) == 0)
      {
        v27 = *(_WORD *)(v3 + 28);
        if ((v27 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef((WebCore::Document *)v3, v25);
        }
        else
        {
          if ((v27 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v26 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v26 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v28 = *(_WORD *)(v4 + 30);
      if ((v28 & 0x400) == 0)
      {
        v29 = *(_WORD *)(v4 + 28);
        if ((v29 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v4, v25);
        }
        else
        {
          if ((v29 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v28 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v28 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLSelectElement::appendFormData(WebCore::HTMLSelectElement *this, WebCore::DOMFormData *a2)
{
  uint64_t v4;
  char v5;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int16 v15;
  __int16 v16;
  WTF::StringImpl *v17;

  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 128))((char *)this + 112);
  if (!*(_QWORD *)v4 || !*(_DWORD *)(*(_QWORD *)v4 + 4))
    goto LABEL_2;
  v7 = (WTF::StringImpl **)v4;
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v8 = *((unsigned int *)this + 49);
  if ((_DWORD)v8)
  {
    v5 = 0;
    v9 = *((_QWORD *)this + 23);
    v10 = 8 * v8;
    do
    {
      if (*(_QWORD *)v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v9 + 8);
        if (v11)
        {
          if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            *(_DWORD *)(v11 + 24) += 2;
            if (WebCore::HTMLOptionElement::selected(v11, 1u))
            {
              if (!*(_BYTE *)(v11 + 112))
              {
                v13 = *(_QWORD *)(v11 + 32);
                if (!v13
                  || (*(_WORD *)(v13 + 28) & 0x10) == 0
                  || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
                  || !*(_BYTE *)(v13 + 112))
                {
                  WebCore::HTMLOptionElement::value((WTF::StringImpl *)v11, v12, &v17);
                  WebCore::DOMFormData::append(a2, v7, &v17);
                  v14 = v17;
                  v17 = 0;
                  if (v14)
                  {
                    if (*(_DWORD *)v14 == 2)
                      WTF::StringImpl::destroy(v14, v12);
                    else
                      *(_DWORD *)v14 -= 2;
                  }
                  v5 = 1;
                }
              }
            }
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              v15 = *(_WORD *)(v11 + 30);
              if ((v15 & 0x400) == 0)
              {
                v16 = *(_WORD *)(v11 + 28);
                if ((v16 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v11, v12);
                }
                else
                {
                  if ((v16 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
                    v15 = *(_WORD *)(v11 + 30);
                  }
                  *(_WORD *)(v11 + 30) = v15 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
                }
              }
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
          }
        }
      }
      v9 += 8;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
LABEL_2:
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLSelectElement::appendFormData(WebCore::HTMLSelectElement *this, WebCore::DOMFormData *a2)
{
  return WebCore::HTMLSelectElement::appendFormData((WebCore::HTMLSelectElement *)((char *)this - 112), a2);
}

unsigned int *`non-virtual thunk to'WebCore::HTMLSelectElement::reset(WebCore::HTMLSelectElement *this)
{
  return WebCore::HTMLSelectElement::reset((WebCore::HTMLSelectElement *)((char *)this - 112));
}

void WebCore::HTMLSelectElement::defaultEventHandler(WebCore::HTMLSelectElement *this, WebCore::Event *a2)
{
  uint64_t v2;
  int v3;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t updated;
  WebCore::Event *v12;
  void (**v13)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void (**v44)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void (**v48)(WebCore::RenderThemeIOS *__hidden);
  void *v49;
  uint64_t v50;
  WTF *v51;
  int v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  __int16 v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  UChar32 v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t i;
  WebCore *v96;
  int v97;
  __int16 v98;
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  __int16 v103;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C693F4);
  }
  v3 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v3 + 1;
  if (v3 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195C69414);
  }
  *(_DWORD *)(v2 + 16) = v3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(this);
  v9 = *(_QWORD **)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD **)(v8 + 40);
  }
  v10 = *((_QWORD *)a2 + 3);
  if (v10 != v9[131])
    goto LABEL_111;
  updated = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
  if ((_DWORD)updated)
    v12 = a2;
  else
    v12 = 0;
  if (!(_DWORD)updated)
    goto LABEL_249;
  ++*((_DWORD *)a2 + 4);
  {
    v13 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v100 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v100 + 40) = 0u;
    *(_OWORD *)(v100 + 24) = 0u;
    v13 = &off_1E335BC30;
    *(_QWORD *)v100 = &off_1E335BC30;
  }
  updated = ((uint64_t (*)(uint64_t *))v13[53])(&WebCore::RenderTheme::singleton(void)::theme);
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!(_DWORD)updated)
  {
    if (!v14)
      goto LABEL_36;
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      goto LABEL_36;
    goto LABEL_34;
  }
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v15 + 136) + 696) & 0x8000000000) != 0)
      {
LABEL_34:
        if ((*(_QWORD *)(*(_QWORD *)(v15 + 136) + 696) & 0x8000000000) != 0 && !*((_BYTE *)this + 298))
          goto LABEL_54;
LABEL_36:
        if (*((_BYTE *)this + 300))
          WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
        v21 = WebCore::HTMLSelectElement::selectedIndex(this);
        LODWORD(v22) = WebCore::HTMLSelectElement::optionToListIndex(this, v21);
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 664) & 0x4000000000000) != 0)
        {
          updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Left", 4);
          if ((updated & 1) != 0)
            goto LABEL_54;
          updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Right", 5);
          if ((updated & 1) != 0)
            goto LABEL_54;
        }
        updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Down", 4);
        if ((updated & 1) != 0 || (updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Right", 5), (_DWORD)updated))
        {
          if (*((_BYTE *)this + 300))
            updated = (uint64_t)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
          if ((int)v22 >= -1)
          {
            v23 = *((_DWORD *)this + 49);
            v24 = (v22 + 1);
            if ((int)v24 < v23)
            {
              if ((int)v24 >= -1)
              {
                while (v24 < *((unsigned int *)this + 49))
                {
                  v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v24) + 8);
                  updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 960))(v25);
                  if ((updated & 1) == 0)
                  {
                    if (v24 >= *((unsigned int *)this + 49))
                      goto LABEL_332;
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v24) + 8) + 96)
                                   + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                      goto LABEL_73;
                  }
                  if (v23 <= (int)++v24)
                    goto LABEL_99;
                }
LABEL_331:
                __break(0xC471u);
                JUMPOUT(0x195C69794);
              }
              if (v24 >= v23)
                goto LABEL_331;
              v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v24) + 8);
              updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 960))(v29);
              if ((updated & 1) != 0)
                goto LABEL_72;
              if (v24 >= *((_DWORD *)this + 49))
              {
LABEL_332:
                __break(0xC471u);
                JUMPOUT(0x195C6979CLL);
              }
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v24) + 8) + 96)
                             + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
LABEL_73:
                LODWORD(v22) = v24;
              else
LABEL_72:
                LODWORD(v22) = 0x7FFFFFFF;
            }
          }
          goto LABEL_99;
        }
        updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Up", 2);
        if ((updated & 1) != 0 || (updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Left", 4), (_DWORD)updated))
        {
          if (*((_BYTE *)this + 300))
            updated = (uint64_t)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
          if ((int)v22 >= 1 && (int)v22 <= *((_DWORD *)this + 49))
          {
            v26 = v22;
            while (1)
            {
              v27 = v26 - 1;
              if (*((_DWORD *)this + 49) <= (v26 - 1))
              {
                __break(0xC471u);
                JUMPOUT(0x195C697A4);
              }
              v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * (v26 - 1)) + 8);
              updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 960))(v28);
              if ((updated & 1) == 0)
              {
                if (*((_DWORD *)this + 49) <= v27)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195C697ACLL);
                }
                if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23)
                                                                   + 8 * (v26 - 1))
                                                       + 8)
                                           + 96)
                               + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                  break;
              }
              --v26;
              if ((unint64_t)(v27 + 1) <= 1)
                goto LABEL_99;
            }
            LODWORD(v22) = v26 - 1;
          }
          goto LABEL_99;
        }
        updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "PageDown", 8);
        if ((_DWORD)updated)
        {
          if (*((_BYTE *)this + 300))
            updated = (uint64_t)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
          if ((int)v22 < -1)
            goto LABEL_99;
          v30 = *((_DWORD *)this + 49);
          v31 = (v22 + 1);
          if ((int)v31 >= v30)
            goto LABEL_99;
          if (v30 > v31)
          {
            v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v31) + 8);
            updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 960))(v32);
            if ((updated & 1) == 0)
            {
              if (*((_DWORD *)this + 49) <= v31)
                goto LABEL_337;
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v31) + 8) + 96)
                             + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                LODWORD(v22) = v22 + 1;
            }
            if ((int)v31 < -1)
              goto LABEL_99;
            v33 = v31 + 1;
            if (v30 <= (int)v31 + 1)
              goto LABEL_99;
            if (v33 < *((unsigned int *)this + 49))
            {
              v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v33) + 8);
              updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 960))(v34);
              if ((updated & 1) != 0)
              {
LABEL_91:
                v35 = v31 + 2;
                if (v30 <= (int)v35)
                  goto LABEL_99;
                while (v35 < *((unsigned int *)this + 49))
                {
                  v36 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v35) + 8);
                  updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 960))(v36);
                  if ((updated & 1) == 0)
                  {
                    if (v35 >= *((unsigned int *)this + 49))
                      goto LABEL_337;
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v35) + 8) + 96)
                                   + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                      goto LABEL_286;
                  }
                  if (v30 <= (int)++v35)
                    goto LABEL_99;
                }
                goto LABEL_335;
              }
              if (v33 < *((unsigned int *)this + 49))
              {
                if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v33) + 8) + 96)
                               + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                  LODWORD(v22) = v31 + 1;
                goto LABEL_91;
              }
LABEL_337:
              __break(0xC471u);
              JUMPOUT(0x195C697C4);
            }
          }
LABEL_335:
          __break(0xC471u);
          JUMPOUT(0x195C697B4);
        }
        updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "PageUp", 6);
        if (!(_DWORD)updated)
        {
          updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Home", 4);
          if ((_DWORD)updated)
          {
            if (*((_BYTE *)this + 300))
              updated = (uint64_t)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
            v69 = *((unsigned int *)this + 49);
            if ((int)v69 < 1)
            {
              LODWORD(v22) = -1;
            }
            else
            {
              v35 = 0;
              while (1)
              {
                if (v35 >= *((unsigned int *)this + 49))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195C697BCLL);
                }
                v70 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v35) + 8);
                updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 960))(v70);
                if ((updated & 1) == 0)
                {
                  if (v35 >= *((unsigned int *)this + 49))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195C697D4);
                  }
                  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v35) + 8) + 96)
                                 + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                    break;
                }
                ++v35;
                LODWORD(v22) = -1;
                if (v69 == v35)
                  goto LABEL_99;
              }
LABEL_286:
              LODWORD(v22) = v35;
            }
          }
          else
          {
            updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "End", 3);
            if (!(_DWORD)updated)
              goto LABEL_107;
            v22 = *((unsigned int *)this + 49);
            v73 = *((_DWORD *)this + 49);
            if (*((_BYTE *)this + 300))
            {
              updated = (uint64_t)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
              v73 = *((_DWORD *)this + 49);
            }
            if ((int)v22 >= 1 && (int)v22 <= v73)
            {
              v74 = v22;
              do
              {
                v75 = v74 - 1;
                if (*((_DWORD *)this + 49) <= (v74 - 1))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195C697DCLL);
                }
                v76 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * (v74 - 1)) + 8);
                updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 960))(v76);
                if ((updated & 1) == 0)
                {
                  if (*((_DWORD *)this + 49) <= v75)
                  {
                    __break(0xC471u);
LABEL_343:
                    JUMPOUT(0x195C68B30);
                  }
                  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23)
                                                                     + 8 * (v74 - 1))
                                                         + 8)
                                             + 96)
                                 + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                  {
                    LODWORD(v22) = v74 - 1;
                    break;
                  }
                }
                --v74;
              }
              while ((unint64_t)(v75 + 1) > 1);
            }
          }
LABEL_99:
          if (*((unsigned int *)this + 49) <= (unint64_t)(int)v22)
          {
LABEL_106:
            *((_DWORD *)v12 + 5) |= 0x80u;
LABEL_107:
            LODWORD(v18) = 1;
            goto LABEL_108;
          }
          if (*((_BYTE *)this + 300))
          {
            WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
            if ((v22 & 0x80000000) != 0)
              goto LABEL_104;
          }
          else if ((v22 & 0x80000000) != 0)
          {
            goto LABEL_104;
          }
          if (*((_DWORD *)this + 49) > (int)v22)
          {
            v37 = (uint64_t *)*((_QWORD *)this + 23);
            v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37[v22] + 8) + 96) + 24);
            if (v38 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
            {
              v39 = 0;
              if ((_DWORD)v22)
              {
                v55 = v22;
                do
                {
                  v56 = *v37++;
                  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 96) + 24) == v38)
                    v39 = (v39 + 1);
                  else
                    v39 = v39;
                  --v55;
                }
                while (v55);
              }
              goto LABEL_105;
            }
          }
LABEL_104:
          v39 = 0xFFFFFFFFLL;
LABEL_105:
          WebCore::HTMLSelectElement::selectOption(this, (void *)v39, 7);
          goto LABEL_106;
        }
        if (*((_BYTE *)this + 300))
          updated = (uint64_t)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
        if ((int)v22 < 1)
          goto LABEL_99;
        v57 = *((_DWORD *)this + 49);
        if ((int)v22 > v57)
          goto LABEL_99;
        v58 = v22;
        v59 = v22 - 1;
        if (v57 > v59)
        {
          v60 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v59) + 8);
          updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 960))(v60);
          v61 = v22;
          if ((updated & 1) == 0)
          {
            if (*((_DWORD *)this + 49) <= v59)
              goto LABEL_341;
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * v59) + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
              v61 = v22 - 1;
            else
              v61 = v22;
          }
          if (v22 < 2)
            goto LABEL_184;
          if (*((_DWORD *)this + 49) > (v22 - 2))
          {
            v62 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * (v22 - 2)) + 8);
            updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 960))(v62);
            if ((updated & 1) != 0)
              goto LABEL_178;
            if (*((_DWORD *)this + 49) > (v22 - 2))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8
                                                                                          * (v22 - 2))
                                                     + 8)
                                         + 96)
                             + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                v61 = v22 - 2;
LABEL_178:
              if (v22 >= 3)
              {
                while (1)
                {
                  if (*((_DWORD *)this + 49) <= (v58 - 3))
                    goto LABEL_338;
                  v63 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * (v58 - 3)) + 8);
                  updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 960))(v63);
                  if ((updated & 1) == 0)
                  {
                    if (*((_DWORD *)this + 49) <= (v58 - 3))
                      goto LABEL_341;
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23)
                                                                       + 8 * (v58 - 3))
                                                           + 8)
                                               + 96)
                                   + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
                      break;
                  }
                  v64 = v58 - 2;
                  --v58;
                  if (v64 <= 1)
                    goto LABEL_184;
                }
                LODWORD(v22) = v58 - 3;
                goto LABEL_99;
              }
LABEL_184:
              LODWORD(v22) = v61;
              goto LABEL_99;
            }
LABEL_341:
            __break(0xC471u);
            JUMPOUT(0x195C697E4);
          }
        }
LABEL_338:
        __break(0xC471u);
        JUMPOUT(0x195C697CCLL);
      }
    }
  }
  if ((MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Down", 4) & 1) == 0)
  {
    updated = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Up", 2);
    if (!(_DWORD)updated)
      goto LABEL_54;
  }
  v103 = 0;
  v102 = 0;
  (*(void (**)(WebCore::HTMLSelectElement *, int *))(*(_QWORD *)this + 656))(this, &v102);
  v16 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v16 + 24) += 2;
  updated = WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v16);
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    v65 = *(_WORD *)(v16 + 30);
    if ((v65 & 0x400) == 0)
    {
      v66 = *(_WORD *)(v16 + 28);
      if ((v66 & 0xF000) == 0x9000)
      {
        updated = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v16, v17);
      }
      else
      {
        if ((v66 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 160) + 16))(*(_QWORD *)(v16 + 160));
          v65 = *(_WORD *)(v16 + 30);
        }
        *(_WORD *)(v16 + 30) = v65 | 0x400;
        updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
      }
    }
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  v18 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v18)
    goto LABEL_108;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C69524);
  }
  if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 22)
    goto LABEL_54;
  v19 = *(WTF **)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 8);
  if (!v19)
  {
    v19 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *((_QWORD *)v19 + 1) = v18;
    updated = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v18 + 8) = v19;
    if (updated)
    {
      if (*(_DWORD *)updated == 1)
      {
        updated = WTF::fastFree((WTF *)updated, v17);
        v19 = *(WTF **)(v18 + 8);
        if (!v19)
          goto LABEL_54;
      }
      else
      {
        --*(_DWORD *)updated;
      }
    }
  }
  v20 = (*(_DWORD *)v19)++;
  if (*((_QWORD *)v19 + 1))
  {
    updated = (uint64_t)WebCore::HTMLSelectElement::saveLastSelection(this, v17);
    *((_DWORD *)a2 + 5) |= 0x80u;
    v20 = *(_DWORD *)v19 - 1;
  }
  if (!v20)
  {
    updated = WTF::fastFree(v19, v17);
LABEL_54:
    LODWORD(v18) = 0;
    goto LABEL_108;
  }
  LODWORD(v18) = 0;
  *(_DWORD *)v19 = v20;
LABEL_108:
  if (*((_DWORD *)a2 + 4) == 1)
  {
    updated = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v12 + 8))(v12);
    if (!(_DWORD)v18)
      goto LABEL_249;
  }
  else
  {
    --*((_DWORD *)a2 + 4);
    if (!(_DWORD)v18)
      goto LABEL_249;
  }
  v10 = *((_QWORD *)a2 + 3);
LABEL_111:
  if (v10 == v9[132])
  {
    updated = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
    if (!(_DWORD)updated)
      goto LABEL_249;
    ++*((_DWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 140))
    {
      v40 = *((_DWORD *)a2 + 34);
    }
    else
    {
      if (!*((_QWORD *)a2 + 11))
      {
        v43 = 0;
        v40 = 0;
        goto LABEL_121;
      }
      updated = WebCore::eventNames((WebCore *)updated);
      if (*((_QWORD *)a2 + 3) == *(_QWORD *)(updated + 1048)
        || (updated = WebCore::eventNames((WebCore *)updated), *((_QWORD *)a2 + 3) == *(_QWORD *)(updated + 1072)))
      {
        v40 = *(_DWORD *)(*((_QWORD *)a2 + 11) + 96);
        if ((v40 - 160) <= 5)
        {
          v97 = 1 << (v40 + 96);
          if ((v97 & 3) != 0)
          {
            v43 = 0;
            v40 = 16;
          }
          else
          {
            v43 = 0;
            if ((v97 & 0xC) != 0)
              v40 = 17;
            else
              v40 = 18;
          }
          goto LABEL_121;
        }
      }
      else
      {
        updated = WebCore::KeyboardEvent::charCode(a2);
        v40 = updated;
      }
    }
    if (v40 == 32)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
      if (v41)
      {
        v42 = *(_QWORD *)(v41 + 8);
        if (v42)
        {
          if ((*(_QWORD *)(*(_QWORD *)(v42 + 136) + 696) & 0x8000000000) != 0)
          {
            LODWORD(v47) = 0;
            *((_BYTE *)this + 298) ^= 1u;
            *((_DWORD *)a2 + 5) |= 0x80u;
            goto LABEL_239;
          }
        }
      }
      v40 = 32;
      v43 = 1;
    }
    else
    {
      v43 = 0;
    }
LABEL_121:
    {
      v44 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v101 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v101 + 40) = 0u;
      *(_OWORD *)(v101 + 24) = 0u;
      v44 = &off_1E335BC30;
      *(_QWORD *)v101 = &off_1E335BC30;
    }
    updated = ((uint64_t (*)(uint64_t *))v44[54])(&WebCore::RenderTheme::singleton(void)::theme);
    if ((_DWORD)updated)
    {
      if (v40 != 32 && v40 != 13)
        goto LABEL_217;
      v103 = 0;
      v102 = 0;
      (*(void (**)(WebCore::HTMLSelectElement *, int *))(*(_QWORD *)this + 656))(this, &v102);
      v45 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      *(_DWORD *)(v45 + 24) += 2;
      updated = WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v45);
      if (*(_DWORD *)(v45 + 24) == 2)
      {
        v67 = *(_WORD *)(v45 + 30);
        if ((v67 & 0x400) == 0)
        {
          v68 = *(_WORD *)(v45 + 28);
          if ((v68 & 0xF000) == 0x9000)
          {
            updated = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v45, v46);
          }
          else
          {
            if ((v68 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v45 + 160) + 16))(*(_QWORD *)(v45 + 160));
              v67 = *(_WORD *)(v45 + 30);
            }
            *(_WORD *)(v45 + 30) = v67 | 0x400;
            updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 72))(v45);
          }
        }
      }
      else
      {
        *(_DWORD *)(v45 + 24) -= 2;
      }
      v47 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
      if (v47)
      {
        if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          goto LABEL_343;
        }
LABEL_139:
        if (*(_BYTE *)(v47 + 46) == 22)
        {
          v51 = *(WTF **)(v47 + 8);
          if (v51)
            goto LABEL_141;
          v51 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v51 = 1;
          *((_QWORD *)v51 + 1) = v47;
          updated = *(_QWORD *)(v47 + 8);
          *(_QWORD *)(v47 + 8) = v51;
          if (!updated)
            goto LABEL_141;
          if (*(_DWORD *)updated != 1)
          {
            --*(_DWORD *)updated;
LABEL_141:
            v52 = (*(_DWORD *)v51)++;
            if (*((_QWORD *)v51 + 1))
            {
              updated = (uint64_t)WebCore::HTMLSelectElement::saveLastSelection(this, v46);
              if (*(_DWORD *)v51 == 1)
                updated = WTF::fastFree(v51, v53);
              else
                --*(_DWORD *)v51;
              goto LABEL_216;
            }
            if (v52)
            {
              LODWORD(v47) = 0;
              *(_DWORD *)v51 = v52;
              goto LABEL_239;
            }
            updated = WTF::fastFree(v51, v46);
            goto LABEL_238;
          }
          updated = WTF::fastFree((WTF *)updated, v46);
          v51 = *(WTF **)(v47 + 8);
          if (v51)
            goto LABEL_141;
        }
LABEL_238:
        LODWORD(v47) = 0;
      }
    }
    else
    {
      {
        v48 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
      }
      else
      {
        WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        unk_1ECE88AD0 = 0u;
        unk_1ECE88AC0 = 0u;
        v48 = &off_1E335BC30;
        WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
      }
      updated = ((uint64_t (*)(uint64_t *))v48[53])(&WebCore::RenderTheme::singleton(void)::theme);
      if (!(_DWORD)updated)
        goto LABEL_217;
      if (!v43)
      {
        if (v40 != 13)
        {
LABEL_217:
          LODWORD(v47) = 1;
          goto LABEL_239;
        }
        v54 = *((_QWORD *)this + 15);
        if (v54)
        {
          v92 = *(_QWORD *)(v54 + 8);
          if (v92)
          {
            *(_DWORD *)(v92 + 24) += 2;
            v93 = *(unsigned int *)(v92 + 188);
            if ((_DWORD)v93)
            {
              v94 = *(_QWORD *)(v92 + 176);
              for (i = 8 * v93; i; i -= 8)
              {
                if (*(_QWORD *)v94)
                  v96 = *(WebCore **)(*(_QWORD *)v94 + 8);
                else
                  v96 = 0;
                if ((*(unsigned int (**)(WebCore *))(*(_QWORD *)v96 + 848))(v96))
                {
                  if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)v96 + 1264))(v96) & 1) != 0)
                  {
                    WebCore::simulateClick(v96, (uint64_t)a2, 0, 1, 1);
                    break;
                  }
                  (*(void (**)(WebCore *))(*(_QWORD *)v96 + 1256))(v96);
                }
                v94 += 8;
              }
            }
            if (*(_DWORD *)(v92 + 24) == 2)
            {
              v98 = *(_WORD *)(v92 + 30);
              if ((v98 & 0x400) == 0)
              {
                v99 = *(_WORD *)(v92 + 28);
                if ((v99 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v92, v49);
                }
                else
                {
                  if ((v99 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v92 + 160) + 16))(*(_QWORD *)(v92 + 160));
                    v98 = *(_WORD *)(v92 + 30);
                  }
                  *(_WORD *)(v92 + 30) = v98 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v92 + 72))(v92);
                }
              }
            }
            else
            {
              *(_DWORD *)(v92 + 24) -= 2;
            }
          }
        }
        updated = WebCore::HTMLSelectElement::selectedIndex(this);
        if (*((_DWORD *)this + 71) != (_DWORD)updated && *((_BYTE *)this + 296))
        {
          *((_DWORD *)this + 71) = updated;
          *((_BYTE *)this + 296) = 0;
          WebCore::Node::dispatchInputEvent(this);
          updated = (*(uint64_t (**)(WebCore::HTMLSelectElement *))(*(_QWORD *)this + 1248))(this);
        }
LABEL_216:
        *((_DWORD *)a2 + 5) |= 0x80u;
        goto LABEL_217;
      }
      v103 = 0;
      v102 = 0;
      (*(void (**)(WebCore::HTMLSelectElement *, int *))(*(_QWORD *)this + 656))(this, &v102);
      v50 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      *(_DWORD *)(v50 + 24) += 2;
      updated = WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v50);
      if (*(_DWORD *)(v50 + 24) == 2)
      {
        v71 = *(_WORD *)(v50 + 30);
        if ((v71 & 0x400) == 0)
        {
          v72 = *(_WORD *)(v50 + 28);
          if ((v72 & 0xF000) == 0x9000)
          {
            updated = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v50, v46);
          }
          else
          {
            if ((v72 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v50 + 160) + 16))(*(_QWORD *)(v50 + 160));
              v71 = *(_WORD *)(v50 + 30);
            }
            *(_WORD *)(v50 + 30) = v71 | 0x400;
            updated = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 72))(v50);
          }
        }
      }
      else
      {
        *(_DWORD *)(v50 + 24) -= 2;
      }
      v47 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
      if (v47)
      {
        if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195C6959CLL);
        }
        goto LABEL_139;
      }
    }
LABEL_239:
    if (*((_DWORD *)a2 + 4) == 1)
    {
      updated = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 8))(a2);
      if (!(_DWORD)v47)
        goto LABEL_249;
    }
    else
    {
      --*((_DWORD *)a2 + 4);
      if (!(_DWORD)v47)
        goto LABEL_249;
    }
  }
  updated = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
  if ((_DWORD)updated)
  {
    v77 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v77 + 1;
    if (*((_QWORD *)a2 + 3) == v9[151])
    {
      v78 = *((unsigned __int16 *)a2 + 77);
      if ((v78 < 3 || v78 - 65534 <= 1) && !*((_WORD *)a2 + 77))
      {
        v103 = 0;
        v102 = 0;
        updated = (*(uint64_t (**)(WebCore::HTMLSelectElement *, int *))(*(_QWORD *)this + 656))(this, &v102);
        v79 = *((_DWORD *)a2 + 4);
        *((_DWORD *)a2 + 5) |= 0x80u;
        v77 = v79 - 1;
      }
    }
    if (v77)
      *((_DWORD *)a2 + 4) = v77;
    else
      updated = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 8))(a2);
  }
LABEL_249:
  if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
  {
    v80 = *(_QWORD *)(StatusReg + 736);
    if (!v80 || (v81 = *(_QWORD *)(v80 + 96)) == 0)
      v81 = WebCore::threadGlobalDataSlow((WebCore *)updated);
    v82 = *(_QWORD *)(v81 + 40);
    if (!v82)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v81);
      v82 = *(_QWORD *)(v81 + 40);
    }
    if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v82 + 1056)
      || !(*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2))
    {
      goto LABEL_271;
    }
    ++*((_DWORD *)a2 + 4);
    if ((*((_BYTE *)a2 + 84) & 7) != 0 || (v84 = WebCore::KeyboardEvent::charCode(a2), !u_isprint(v84)))
    {
      v83 = 1;
    }
    else
    {
      v85 = WebCore::TypeAhead::handleEvent((WebCore::HTMLSelectElement *)((char *)this + 232), a2, 3);
      if ((v85 & 0x80000000) == 0)
      {
        v86 = v85;
        if (*((_BYTE *)this + 300))
          WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
        if (*((_DWORD *)this + 49) > (signed int)v86
          && (v87 = (uint64_t *)*((_QWORD *)this + 23),
              v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87[v86] + 8) + 96) + 24),
              v88 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)))
        {
          v89 = 0;
          if (v86)
          {
            v90 = v86;
            do
            {
              v91 = *v87++;
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v91 + 8) + 96) + 24) == v88)
                v89 = (v89 + 1);
              else
                v89 = v89;
              --v90;
            }
            while (v90);
          }
        }
        else
        {
          v89 = 0xFFFFFFFFLL;
        }
        WebCore::HTMLSelectElement::selectOption(this, (void *)v89, 7);
        if (*((_BYTE *)this + 297))
          WebCore::HTMLSelectElement::listBoxOnChange((uint64_t)this);
      }
      v83 = 0;
      *((_DWORD *)a2 + 5) |= 0x80u;
    }
    if (*((_DWORD *)a2 + 4) == 1)
    {
      (*(void (**)(WebCore::Event *))(*(_QWORD *)a2 + 8))(a2);
      if (v83)
        goto LABEL_271;
    }
    else
    {
      --*((_DWORD *)a2 + 4);
      if (v83)
LABEL_271:
        WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
    }
  }
}

uint64_t WebCore::HTMLSelectElement::indexOfSelectedOption(WebCore::HTMLSelectElement *this)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  int v6;

  v2 = WebCore::HTMLSelectElement::selectedIndex(this);
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  result = 0xFFFFFFFFLL;
  if ((v2 & 0x80000000) == 0)
  {
    v4 = *((unsigned int *)this + 49);
    if ((int)v4 > v2 && (int)v4 >= 1)
    {
      result = 0;
      v6 = -1;
      while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8 * result) + 8) + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)
           || ++v6 != v2)
      {
        if (v4 == ++result)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLSelectElement::indexOfSelectedOption(WebCore::HTMLSelectElement *this)
{
  char *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  int v7;

  v2 = (char *)this - 176;
  v3 = WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)((char *)this - 176));
  if (*((_BYTE *)this + 124))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)v2, (void *)1, 1u);
  result = 0xFFFFFFFFLL;
  if ((v3 & 0x80000000) == 0)
  {
    v5 = *((unsigned int *)this + 5);
    if ((int)v5 > v3 && (int)v5 >= 1)
    {
      result = 0;
      v7 = -1;
      while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * result) + 8) + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)
           || ++v7 != v3)
      {
        if (v5 == ++result)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLSelectElement::optionCount(WebCore::HTMLSelectElement *this)
{
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  return *((unsigned int *)this + 49);
}

uint64_t `non-virtual thunk to'WebCore::HTMLSelectElement::optionCount(WebCore::HTMLSelectElement *this)
{
  if (*((_BYTE *)this + 124))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this - 176, (void *)1, 1u);
  return *((unsigned int *)this + 5);
}

unsigned int *WebCore::HTMLSelectElement::optionAtIndex@<X0>(unsigned int *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;

  v3 = (int)a2;
  v4 = this;
  if (*((_BYTE *)this + 300))
    this = (unsigned int *)WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  if (v4[49] <= (unint64_t)v3)
  {
    __break(0xC471u);
    return this;
  }
  v6 = *(_QWORD *)(*((_QWORD *)v4 + 23) + 8 * v3);
  if (!v6
    || (v7 = *(_QWORD *)(v6 + 8)) == 0
    || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    *a3 = 0;
    return this;
  }
  v8 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 2;
  if (!*(_BYTE *)(v7 + 112))
  {
    v9 = *(_QWORD *)(v7 + 32);
    if (!v9
      || (*(_WORD *)(v9 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
      || !*(_BYTE *)(v9 + 112))
    {
      this = (unsigned int *)WebCore::HTMLOptionElement::textIndentedToRespectGroupLabel((WebCore::HTMLOptionElement *)v7, a2, a3);
      v8 = *(_DWORD *)(v7 + 24) - 2;
      if (*(_DWORD *)(v7 + 24) == 2)
        goto LABEL_16;
LABEL_12:
      *(_DWORD *)(v7 + 24) = v8;
      return this;
    }
  }
  *a3 = 0;
  if (v8)
    goto LABEL_12;
LABEL_16:
  v10 = *(_WORD *)(v7 + 30);
  if ((v10 & 0x400) == 0)
  {
    v11 = *(_WORD *)(v7 + 28);
    if ((v11 & 0xF000) == 0x9000)
    {
      return WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
    }
    else
    {
      if ((v11 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
        v10 = *(_WORD *)(v7 + 30);
      }
      *(_WORD *)(v7 + 30) = v10 | 0x400;
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLSelectElement::optionAtIndex@<X0>(WebCore::HTMLSelectElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  return WebCore::HTMLSelectElement::optionAtIndex((unsigned int *)this - 44, a2, a3);
}

uint64_t WebCore::HTMLSelectElement::accessKeySetSelectedIndex(WebCore::HTMLSelectElement *this, void *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  __int16 v11;
  __int16 v12;
  _BYTE v13[20];
  __int128 v14;
  char v15;

  if ((*((_BYTE *)this + 54) & 2) == 0 || !WebCore::Element::isUserActionElementFocused(this))
    (*(void (**)(WebCore::HTMLSelectElement *, _QWORD))(*(_QWORD *)this + 592))(this, 0);
  if (*((_BYTE *)this + 300))
    WebCore::HTMLSelectElement::recalcListItems((uint64_t)this, (void *)1, 1u);
  v4 = WebCore::HTMLSelectElement::optionToListIndex(this, (int)a2);
  if ((v4 & 0x80000000) == 0)
  {
    if (*((_DWORD *)this + 49) <= v4)
      goto LABEL_38;
    v5 = *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        {
          *(_DWORD *)(v6 + 24) += 2;
          if (WebCore::HTMLOptionElement::selected(v6, 1u))
            WebCore::HTMLOptionElement::setSelectedState(v6, 0, 1);
          else
            WebCore::HTMLSelectElement::selectOption(this, a2, 6);
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            v11 = *(_WORD *)(v6 + 30);
            if ((v11 & 0x400) == 0)
            {
              v12 = *(_WORD *)(v6 + 28);
              if ((v12 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v6, v7);
              }
              else
              {
                if ((v12 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
                  v11 = *(_WORD *)(v6 + 30);
                }
                *(_WORD *)(v6 + 30) = v11 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
              }
            }
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 297))
  {
    result = WebCore::HTMLSelectElement::listBoxOnChange((uint64_t)this);
  }
  else
  {
    result = WebCore::HTMLSelectElement::selectedIndex(this);
    if (*((_DWORD *)this + 71) != (_DWORD)result && *((_BYTE *)this + 296))
    {
      *((_DWORD *)this + 71) = result;
      *((_BYTE *)this + 296) = 0;
      WebCore::Node::dispatchInputEvent(this);
      result = (*(uint64_t (**)(WebCore::HTMLSelectElement *))(*(_QWORD *)this + 1248))(this);
    }
  }
  v9 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 45) & 2) == 0)
    {
      v10 = *(_DWORD *)(v9 + 16) + 1;
      *(_DWORD *)(v9 + 16) = v10;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v14) = 0;
        v15 = 0;
        v13[0] = 0;
        v13[16] = 0;
        result = WebCore::RenderObject::issueRepaint(v9, &v14, 0, 0, (uint64_t)v13);
        v10 = *(_DWORD *)(v9 + 16);
      }
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x195C69DD4);
      }
      *(_DWORD *)(v9 + 16) = v10 - 1;
      return result;
    }
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x195C69DB4);
  }
  return result;
}

uint64_t WebCore::HTMLSelectElement::showPicker@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::SecurityOrigin *v12;
  WebCore::SecurityOrigin *v13;
  WTF::StringImpl *v14;
  const WebCore::SecurityOrigin *v15;
  uint64_t v16;
  WebCore::LocalDOMWindow *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return this;
  }
  v5 = this;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  if ((*(_BYTE *)(this + 160) & 0x18) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(this + 112) + 288))(this + 112)
    && (*(_BYTE *)(v5 + 160) & 0x20) != 0)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 8;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8) + 128) + 8);
    if (!*(_BYTE *)(v9 + 144))
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v4 + 296) + 192), v8);
      v13 = v12;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v9 + 296) + 192), v14);
      if (WebCore::SecurityOrigin::isSameOriginAs(v13, v15))
      {
        v16 = *(_QWORD *)(v4 + 296);
        if (v16)
        {
          v17 = *(WebCore::LocalDOMWindow **)(v16 + 696);
          if (v17)
          {
            ++*((_DWORD *)v17 + 6);
            this = WebCore::LocalDOMWindow::hasTransientActivation(v17);
            if ((this & 1) != 0)
            {
              *a2 = 0;
              a2[1] = 0;
              a2[2] = 0;
            }
            else
            {
              this = WTF::StringImpl::createWithoutCopyingNonEmpty();
              *(_BYTE *)a2 = 31;
              a2[1] = v26;
              *((_BYTE *)a2 + 16) = 1;
            }
            if (*((_DWORD *)v17 + 6) == 1)
              this = (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v17 + 72))(v17);
            else
              --*((_DWORD *)v17 + 6);
            do
            {
LABEL_23:
              v20 = __ldaxr(v10);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v10));
            if (!v21)
            {
              atomic_store(1u, v10);
              v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v25 = off_1E31FE290;
              v25[1] = v10;
              v28 = (uint64_t)v25;
              WTF::ensureOnMainThread();
              this = v28;
              if (v28)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            }
            goto LABEL_25;
          }
        }
        this = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = v26;
        v19 = 31;
      }
      else
      {
        this = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = v26;
        v19 = 14;
      }
      *(_BYTE *)a2 = v19;
      a2[1] = v18;
      *((_BYTE *)a2 + 16) = 1;
      goto LABEL_23;
    }
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 14;
    a2[1] = v26;
  }
  *((_BYTE *)a2 + 16) = 1;
  do
  {
LABEL_25:
    v22 = __ldaxr(v6);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v6));
  if (!v23)
  {
    atomic_store(1u, v6);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E31FE290;
    v24[1] = v6;
    v27 = (uint64_t)v24;
    WTF::ensureOnMainThread();
    this = v27;
    if (v27)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  return this;
}

uint64_t WebCore::HTMLSlotElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CB540;
  *(_WORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLSlotElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_BYTE *)(a1 + 113);
  *(_BYTE *)(a1 + 113) = 1;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((a2 & 0x100) == 0 || (*(_BYTE *)(a1 + 22) & 0x10) == 0)
    goto LABEL_26;
  v6 = **(_QWORD **)(a1 + 40);
  if (!v6 || (*(_WORD *)(v6 + 28) & 0x80) == 0)
    goto LABEL_26;
  v8 = *(_QWORD *)(a1 + 104);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 40);
      LODWORD(v11) = *(_DWORD *)(v8 + 52);
      if ((_DWORD)v11)
      {
LABEL_10:
        v11 = v11;
        v12 = v10 + 8;
        while (1)
        {
          v13 = *(_QWORD *)(v12 - 8);
          if (v13 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            goto LABEL_19;
          }
          v12 += 16;
          if (!--v11)
          {
            v12 = MEMORY[0x1E0CBF2F8];
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      v10 = v8 + 32;
      LODWORD(v11) = v9 >> 5;
      if ((_DWORD)v11)
        goto LABEL_10;
    }
  }
  v12 = MEMORY[0x1E0CBF2F8];
LABEL_19:
  v14 = *(_QWORD *)(v6 + 224);
  if (!v14)
  {
    if (*(_BYTE *)(v6 + 194) == 1)
    {
      v14 = WTF::fastMalloc((WTF *)0x20);
      *(_WORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 12) = 0;
      *(_QWORD *)v14 = off_1E33A7C10;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
    }
    else
    {
      v14 = WTF::fastMalloc((WTF *)0x30);
      *(_OWORD *)(v14 + 8) = 0u;
      *(_OWORD *)(v14 + 24) = 0u;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      *(_QWORD *)v14 = off_1E33A7CA0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_DWORD *)(v14 + 40) = 0;
    }
    v15 = *(_QWORD *)(v6 + 224);
    *(_QWORD *)(v6 + 224) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v14 = *(_QWORD *)(v6 + 224);
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v12, a1, v6);
LABEL_26:
  *(_BYTE *)(a1 + 113) = v5;
  return 0;
}

uint64_t *WebCore::HTMLSlotElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a2 & 0x100) != 0 && (*(_BYTE *)(a3 + 22) & 0x10) != 0)
  {
    if ((*(_WORD *)(**(_QWORD **)(a3 + 40) + 28) & 0x80) != 0)
      v8 = **(_QWORD **)(a3 + 40);
    else
      v8 = 0;
    v9 = *(_QWORD *)(a1 + 104);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if ((v10 & 1) != 0)
      {
        v11 = *(_QWORD *)(v9 + 40);
        LODWORD(v12) = *(_DWORD *)(v9 + 52);
        if ((_DWORD)v12)
        {
LABEL_9:
          v12 = v12;
          v13 = v11 + 8;
          while (1)
          {
            v14 = *(_QWORD *)(v13 - 8);
            if (v14 == WebCore::HTMLNames::nameAttr
              || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
              && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
            {
              goto LABEL_18;
            }
            v13 += 16;
            if (!--v12)
            {
              v13 = MEMORY[0x1E0CBF2F8];
              goto LABEL_18;
            }
          }
        }
      }
      else
      {
        v11 = v9 + 32;
        LODWORD(v12) = v10 >> 5;
        if ((_DWORD)v12)
          goto LABEL_9;
      }
    }
    v13 = MEMORY[0x1E0CBF2F8];
LABEL_18:
    a5.n128_f64[0] = (*(double (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v8 + 224) + 48))(*(_QWORD *)(v8 + 224), v13, a1, a3);
  }
  return WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
}

unsigned int *WebCore::HTMLSlotElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int *result;
  uint64_t v4;
  BOOL v5;

  result = WebCore::HTMLElement::childrenChanged(a1, a2);
  if ((*(_BYTE *)(a1 + 22) & 0x10) != 0)
  {
    v4 = **(_QWORD **)(a1 + 40);
    if (v4)
      v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
    else
      v5 = 1;
    if (!v5)
      return (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 224) + 72))(*(_QWORD *)(v4 + 224), a1);
  }
  return result;
}

void WebCore::HTMLSlotElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  uint64_t v10;
  void *v12;
  __int16 v13;
  __int16 v14;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  if ((*(_BYTE *)(a1 + 22) & 0x10) != 0 && *(_QWORD *)a2 == WebCore::HTMLNames::nameAttr)
  {
    v10 = **(_QWORD **)(a1 + 40);
    if (v10 && (*(_WORD *)(v10 + 28) & 0x80) != 0)
    {
      *(_DWORD *)(v10 + 24) += 2;
      (*(void (**)(_QWORD, uint64_t, WTF::AtomString *, WTF::StringImpl **, uint64_t))(**(_QWORD **)(v10 + 224)
                                                                                              + 32))(*(_QWORD *)(v10 + 224), a1, a3, a4, v10);
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        v13 = *(_WORD *)(v10 + 30);
        if ((v13 & 0x400) == 0)
        {
          v14 = *(_WORD *)(v10 + 28);
          if ((v14 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v10, v12);
          }
          else
          {
            if ((v14 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
              v13 = *(_WORD *)(v10 + 30);
            }
            *(_WORD *)(v10 + 30) = v13 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
          }
        }
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
  }
}

uint64_t WebCore::HTMLSlotElement::assignedNodes(WebCore::HTMLSlotElement *this)
{
  uint64_t v1;
  BOOL v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v8;
  __int16 v9;

  v1 = **((_QWORD **)this + 5);
  if (v1)
    v2 = (*(_WORD *)(v1 + 28) & 0x80) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v4 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v4 + 2;
  v5 = *(_QWORD *)(v1 + 224);
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t, WebCore::HTMLSlotElement *, uint64_t))(*(_QWORD *)v5 + 24))(v5, this, v1);
    v4 = *(_DWORD *)(v1 + 24) - 2;
    if (*(_DWORD *)(v1 + 24) != 2)
    {
LABEL_7:
      *(_DWORD *)(v1 + 24) = v4;
      return v6;
    }
  }
  else
  {
    v6 = 0;
    if (v4)
      goto LABEL_7;
  }
  v8 = *(_WORD *)(v1 + 30);
  if ((v8 & 0x400) == 0)
  {
    v9 = *(_WORD *)(v1 + 28);
    if ((v9 & 0xF000) == 0x9000)
    {
      WebCore::Document::removedLastRef((WebCore::Document *)v1);
    }
    else
    {
      if ((v9 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
        v8 = *(_WORD *)(v1 + 30);
      }
      *(_WORD *)(v1 + 30) = v8 | 0x400;
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
    }
  }
  return v6;
}

unsigned int *WebCore::HTMLSlotElement::assignedNodes@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Document *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Document *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  WebCore::Document *v27;

  v3 = result;
  if (*a2)
  {
    v5 = *((_QWORD *)result + 2);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if ((v5 & 0x10000000000000) != 0)
      return (unsigned int *)WebCore::flattenAssignedNodes(a3, (uint64_t)result);
    return result;
  }
  v6 = **((_QWORD **)result + 5);
  if (v6)
    v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (v7)
  {
LABEL_33:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  v8 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v8 + 2;
  result = *(unsigned int **)(v6 + 224);
  if (result)
  {
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *, uint64_t))(*(_QWORD *)result
                                                                                                + 24))(result, v3, v6);
    v9 = result;
    v8 = *(_DWORD *)(v6 + 24) - 2;
    if (*(_DWORD *)(v6 + 24) != 2)
    {
LABEL_10:
      *(_DWORD *)(v6 + 24) = v8;
      goto LABEL_11;
    }
  }
  else
  {
    v9 = 0;
    if (v8)
      goto LABEL_10;
  }
  v25 = *(_WORD *)(v6 + 30);
  if ((v25 & 0x400) == 0)
  {
    v26 = *(_WORD *)(v6 + 28);
    if ((v26 & 0xF000) == 0x9000)
    {
      result = WebCore::Document::removedLastRef((WebCore::Document *)v6, a2);
    }
    else
    {
      if ((v26 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
        v25 = *(_WORD *)(v6 + 30);
      }
      *(_WORD *)(v6 + 30) = v25 | 0x400;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
    }
  }
LABEL_11:
  if (!v9)
    goto LABEL_33;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v10 = v9[3];
  if (!(_DWORD)v10)
    return WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3, 0);
  if (v10 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v11 = WTF::fastMalloc((WTF *)(8 * v10));
  *(_DWORD *)(a3 + 8) = v10;
  *(_QWORD *)a3 = v11;
  v13 = v9[3];
  if (!(_DWORD)v13)
    return WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3, 0);
  v14 = *(_QWORD *)v9;
  v15 = 8 * v13;
  do
  {
    if (*(_QWORD *)v14)
    {
      v16 = *(WebCore::Document **)(*(_QWORD *)v14 + 8);
      if (v16)
      {
        *((_DWORD *)v16 + 6) += 2;
        v27 = v16;
        v17 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v17 == *(_DWORD *)(a3 + 8))
        {
          v18 = WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v17 + 1, (unint64_t)&v27);
          v17 = *(unsigned int *)(a3 + 12);
          v19 = *(_QWORD *)a3;
          v20 = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v19 + 8 * v17) = v20;
        }
        else
        {
          v21 = *(_QWORD *)a3;
          v27 = 0;
          *(_QWORD *)(v21 + 8 * v17) = v16;
        }
        *(_DWORD *)(a3 + 12) = v17 + 1;
        v22 = v27;
        v27 = 0;
        if (v22)
        {
          if (*((_DWORD *)v22 + 6) == 2)
          {
            v23 = *((_WORD *)v22 + 15);
            if ((v23 & 0x400) == 0)
            {
              v24 = *((_WORD *)v22 + 14);
              if ((v24 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef(v22, v12);
              }
              else
              {
                if ((v24 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v22 + 20) + 16))(*((_QWORD *)v22 + 20));
                  v23 = *((_WORD *)v22 + 15);
                }
                *((_WORD *)v22 + 15) = v23 | 0x400;
                (*(void (**)(WebCore::Document *))(*(_QWORD *)v22 + 72))(v22);
              }
            }
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
        }
      }
    }
    v14 += 8;
    v15 -= 8;
  }
  while (v15);
  return WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3, *(unsigned int *)(a3 + 12));
}

uint64_t WebCore::flattenAssignedNodes(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  WebCore::Document *v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  BOOL v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int16 v40;
  __int16 v41;
  WebCore::Document *v42;

  v2 = **(_QWORD **)(a2 + 40);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
    return result;
  v5 = result;
  v6 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v6 + 2;
  result = *(_QWORD *)(v2 + 224);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2, v2);
    v7 = result;
    v6 = *(_DWORD *)(v2 + 24) - 2;
    if (*(_DWORD *)(v2 + 24) != 2)
    {
LABEL_9:
      *(_DWORD *)(v2 + 24) = v6;
      goto LABEL_10;
    }
  }
  else
  {
    v7 = 0;
    if (v6)
      goto LABEL_9;
  }
  v26 = *(_WORD *)(v2 + 30);
  if ((v26 & 0x400) == 0)
  {
    v27 = *(_WORD *)(v2 + 28);
    if ((v27 & 0xF000) == 0x9000)
    {
      result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v2, (void *)a2);
    }
    else
    {
      if ((v27 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
        v26 = *(_WORD *)(v2 + 30);
      }
      *(_WORD *)(v2 + 30) = v26 | 0x400;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
  }
LABEL_10:
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v7;
      v10 = 8 * v8;
      while (1)
      {
        if (*(_QWORD *)v9)
        {
          v11 = *(_QWORD *)(*(_QWORD *)v9 + 8);
          if (v11)
            break;
        }
LABEL_14:
        v9 += 8;
        v10 -= 8;
        if (!v10)
          return result;
      }
      if ((*(_WORD *)(v11 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        v13 = *(_DWORD *)(v11 + 24) + 2;
        *(_DWORD *)(v11 + 24) = v13;
        v24 = **(_QWORD **)(v11 + 40);
        if (v24)
          v25 = (*(_WORD *)(v24 + 28) & 0x80) == 0;
        else
          v25 = 1;
        if (!v25)
        {
          result = WebCore::flattenAssignedNodes(v5, v11);
          v12 = v11;
LABEL_27:
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            v20 = *(_WORD *)(v12 + 30);
            if ((v20 & 0x400) == 0)
            {
              v21 = *(_WORD *)(v12 + 28);
              if ((v21 & 0xF000) == 0x9000)
              {
                result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v12, (void *)a2);
              }
              else
              {
                if ((v21 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
                  v20 = *(_WORD *)(v12 + 30);
                }
                *(_WORD *)(v12 + 30) = v20 | 0x400;
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
              }
            }
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
          goto LABEL_14;
        }
        v14 = 0;
        v12 = v11;
      }
      else
      {
        v12 = 0;
        v13 = *(_DWORD *)(v11 + 24);
        v14 = 1;
      }
      *(_DWORD *)(v11 + 24) = v13 + 2;
      v42 = (WebCore::Document *)v11;
      v15 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v15 == *(_DWORD *)(v5 + 8))
      {
        result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, v15 + 1, (unint64_t)&v42);
        v15 = *(unsigned int *)(v5 + 12);
        v16 = *(char **)v5;
        v17 = *(_QWORD *)result;
        *(_QWORD *)result = 0;
        *(_QWORD *)&v16[8 * v15] = v17;
      }
      else
      {
        v18 = *(char **)v5;
        v42 = 0;
        *(_QWORD *)&v18[8 * v15] = v11;
      }
      *(_DWORD *)(v5 + 12) = v15 + 1;
      v19 = v42;
      v42 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          v22 = *((_WORD *)v19 + 15);
          if ((v22 & 0x400) == 0)
          {
            v23 = *((_WORD *)v19 + 14);
            if ((v23 & 0xF000) == 0x9000)
            {
              result = (uint64_t)WebCore::Document::removedLastRef(v19, (void *)a2);
            }
            else
            {
              if ((v23 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v19 + 20) + 16))(*((_QWORD *)v19 + 20));
                v22 = *((_WORD *)v19 + 15);
              }
              *((_WORD *)v19 + 15) = v22 | 0x400;
              result = (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v19 + 72))(v19);
            }
          }
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      if ((v14 & 1) != 0)
        goto LABEL_14;
      goto LABEL_27;
    }
  }
  else
  {
    v28 = *(_QWORD *)(a2 + 80);
    if (v28)
    {
      *(_DWORD *)(v28 + 24) += 2;
      do
      {
        v29 = v28;
        v30 = *(_WORD *)(v28 + 28);
        if ((v30 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
        {
          result = WebCore::flattenAssignedNodes(v5, v28);
        }
        else if ((v30 & 0xA) != 0)
        {
          v31 = *(unsigned int *)(v5 + 12);
          if ((_DWORD)v31 == *(_DWORD *)(v5 + 8))
          {
            v32 = v31 + (v31 >> 2);
            if (v32 >= 0x10)
              v33 = v32 + 1;
            else
              v33 = 16;
            if (v33 <= v31 + 1)
              v34 = v31 + 1;
            else
              v34 = v33;
            if (v34 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v35 = *(char **)v5;
            v36 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
            *(_DWORD *)(v5 + 8) = v34;
            *(_QWORD *)v5 = v36;
            result = (uint64_t)memcpy(v36, v35, 8 * v31);
            if (v35)
            {
              if (*(char **)v5 == v35)
              {
                *(_QWORD *)v5 = 0;
                *(_DWORD *)(v5 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v35, (void *)a2);
            }
            v37 = *(unsigned int *)(v5 + 12);
            v38 = *(char **)v5;
            *(_DWORD *)(v29 + 24) += 2;
            *(_QWORD *)&v38[8 * v37] = v29;
            *(_DWORD *)(v5 + 12) = v37 + 1;
          }
          else
          {
            v39 = *(char **)v5;
            *(_DWORD *)(v28 + 24) += 2;
            *(_QWORD *)&v39[8 * v31] = v28;
            *(_DWORD *)(v5 + 12) = v31 + 1;
          }
        }
        v28 = *(_QWORD *)(v29 + 56);
        if (v28)
          *(_DWORD *)(v28 + 24) += 2;
        if (*(_DWORD *)(v29 + 24) == 2)
        {
          v40 = *(_WORD *)(v29 + 30);
          if ((v40 & 0x400) == 0)
          {
            v41 = *(_WORD *)(v29 + 28);
            if ((v41 & 0xF000) == 0x9000)
            {
              result = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v29, (void *)a2);
            }
            else
            {
              if ((v41 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v29 + 160) + 16))(*(_QWORD *)(v29 + 160));
                v40 = *(_WORD *)(v29 + 30);
              }
              *(_WORD *)(v29 + 30) = v40 | 0x400;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 72))(v29);
            }
          }
        }
        else
        {
          *(_DWORD *)(v29 + 24) -= 2;
        }
      }
      while (v28);
    }
  }
  return result;
}

WTF *WebCore::HTMLSlotElement::assignedElements@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  WTF *v21;
  int v22;
  unsigned int v23;

  result = (WTF *)WebCore::HTMLSlotElement::assignedNodes(a1, a2, (uint64_t)&v21);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = v23;
  if (!v23)
    goto LABEL_2;
  if (v23 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v8 = WTF::fastMalloc((WTF *)(8 * v23));
  *(_DWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v8;
  if (v23)
  {
    v10 = v8;
    v6 = 0;
    v11 = v21;
    v12 = 8 * v23;
    do
    {
      v13 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      v14 = *(_WORD *)(v13 + 28);
      if ((v14 & 8) != 0)
      {
        *(_QWORD *)(v10 + 8 * v6++) = v13;
        *(_DWORD *)(a3 + 12) = v6;
      }
      else if (*(_DWORD *)(v13 + 24) == 2)
      {
        v15 = *(_WORD *)(v13 + 30);
        if ((v15 & 0x400) == 0)
        {
          if ((v14 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v13, v9);
          }
          else
          {
            if ((v14 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
              v15 = *(_WORD *)(v13 + 30);
            }
            *(_WORD *)(v13 + 30) = v15 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
          }
        }
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
LABEL_2:
    v6 = 0;
  }
  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3, v6);
  if (v23)
  {
    v16 = v21;
    v17 = 8 * v23;
    do
    {
      v18 = *(_QWORD *)v16;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          v19 = *(_WORD *)(v18 + 30);
          if ((v19 & 0x400) == 0)
          {
            v20 = *(_WORD *)(v18 + 28);
            if ((v20 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v18, v7);
            }
            else
            {
              if ((v20 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 160) + 16))(*(_QWORD *)(v18 + 160));
                v19 = *(_WORD *)(v18 + 30);
              }
              *(_WORD *)(v18 + 30) = v19 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
            }
          }
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
      }
      v16 = (WTF *)((char *)v16 + 8);
      v17 -= 8;
    }
    while (v17);
  }
  result = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

unsigned int *WebCore::HTMLSlotElement::assign(unsigned int *result, unsigned int **a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  WTF *v8;
  WTF **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  WTF *v77;
  unint64_t v78;
  __int16 v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  WTF *v88;
  unsigned int v89;
  unsigned int v90;
  WTF *v91;
  char v92;
  _QWORD *v93;
  WTF *v94[2];
  WTF **v95;

  v3 = result;
  if ((*(_WORD *)(**((_QWORD **)result + 5) + 28) & 0x80) != 0)
    v4 = **((_QWORD **)result + 5);
  else
    v4 = 0;
  if (!v4 || (*(_DWORD *)(v4 + 24) += 2, (v5 = *(_QWORD *)(v4 + 200)) == 0))
  {
    v6 = 0;
LABEL_7:
    v7 = 1;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_7;
  v7 = 0;
  *(_DWORD *)(v6 + 24) += 2;
LABEL_10:
  v9 = (WTF **)(result + 30);
  v8 = (WTF *)*((_QWORD *)result + 15);
  v10 = result[33];
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      if (*(_QWORD *)v8)
      {
        v12 = *(_QWORD *)(*(_QWORD *)v8 + 8);
        if (v12)
        {
          *(_DWORD *)(v12 + 24) += 2;
          result = WebCore::Node::setManuallyAssignedSlot(v12, 0);
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            v14 = *(_WORD *)(v12 + 30);
            if ((v14 & 0x400) == 0)
            {
              v15 = *(_WORD *)(v12 + 28);
              if ((v15 & 0xF000) == 0x9000)
              {
                result = WebCore::Document::removedLastRef((WebCore::Document *)v12, v13);
              }
              else
              {
                if ((v15 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 160) + 16))(*(_QWORD *)(v12 + 160));
                  v14 = *(_WORD *)(v12 + 30);
                }
                *(_WORD *)(v12 + 30) = v14 | 0x400;
                result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
              }
            }
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
        }
      }
      v8 = (WTF *)((char *)v8 + 8);
      v11 -= 8;
    }
    while (v11);
    v8 = (WTF *)*((_QWORD *)v3 + 15);
    LODWORD(v10) = v3[33];
  }
  v87 = 0;
  v88 = v8;
  v89 = v3[32];
  v90 = v10;
  *v9 = 0;
  *((_QWORD *)v3 + 16) = 0;
  v85 = 0;
  v86 = 0;
  if (*a2)
  {
    v16 = **a2;
    if ((_DWORD)v16)
    {
      if (v16 >> 29)
      {
LABEL_161:
        __break(0xC471u);
        return result;
      }
      LODWORD(v86) = **a2;
      v85 = WTF::fastMalloc((WTF *)(8 * v16));
      v17 = *a2;
      if (v17)
      {
        v20 = *v17;
        v19 = v17 + 2;
        v18 = v20;
        if (v20)
        {
          v21 = &v19[4 * v18];
          while (1)
          {
            v93 = &v87;
            v94[0] = (WTF *)&v93;
            v94[1] = (WTF *)&v93;
            v22 = v19[2];
            if ((_DWORD)v22 == -1)
              break;
            v95 = v94;
            ((void (*)(WTF **__return_ptr, WTF ***, _DWORD *))off_1E33CDB38[v22])(&v91, &v95, v19);
            if (v92)
            {
              v24 = v91;
              v91 = 0;
              v94[0] = v24;
              LODWORD(v25) = HIDWORD(v86);
              if (HIDWORD(v86) == (_DWORD)v86)
              {
                v26 = (uint64_t *)WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v85, HIDWORD(v86) + 1, (unint64_t)v94);
                v25 = HIDWORD(v86);
                v27 = v85;
                v28 = *v26;
                *v26 = 0;
                *(_QWORD *)(v27 + 8 * v25) = v28;
              }
              else
              {
                v94[0] = 0;
                *(_QWORD *)(v85 + 8 * HIDWORD(v86)) = v24;
              }
              HIDWORD(v86) = v25 + 1;
              v29 = v94[0];
              v94[0] = 0;
              if (v29)
              {
                do
                {
                  v30 = __ldaxr((unsigned int *)v29);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, (unsigned int *)v29));
                if (!v31)
                {
                  atomic_store(1u, (unsigned int *)v29);
                  v35 = *((unsigned int *)v29 + 7);
                  if ((_DWORD)v35)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v29 + 2), (WTF::StringImpl *)(*((_QWORD *)v29 + 2) + 32 * v35));
                  v36 = (WTF *)*((_QWORD *)v29 + 2);
                  if (v36)
                  {
                    *((_QWORD *)v29 + 2) = 0;
                    *((_DWORD *)v29 + 6) = 0;
                    WTF::fastFree(v36, v23);
                  }
                  WTF::fastFree(v29, v23);
                }
              }
              if (v92)
              {
                v32 = v91;
                v91 = 0;
                if (v32)
                {
                  do
                  {
                    v33 = __ldaxr((unsigned int *)v32);
                    v34 = v33 - 1;
                  }
                  while (__stlxr(v34, (unsigned int *)v32));
                  if (!v34)
                  {
                    atomic_store(1u, (unsigned int *)v32);
                    v37 = *((unsigned int *)v32 + 7);
                    if ((_DWORD)v37)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v32 + 2), (WTF::StringImpl *)(*((_QWORD *)v32 + 2) + 32 * v37));
                    v38 = (WTF *)*((_QWORD *)v32 + 2);
                    if (v38)
                    {
                      *((_QWORD *)v32 + 2) = 0;
                      *((_DWORD *)v32 + 6) = 0;
                      WTF::fastFree(v38, v23);
                    }
                    WTF::fastFree(v32, v23);
                  }
                }
              }
            }
            v19 += 4;
            if (v19 == v21)
            {
              v78 = HIDWORD(v86);
              goto LABEL_55;
            }
          }
          result = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_161;
        }
      }
    }
  }
  v78 = 0;
LABEL_55:
  WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v85, v78);
  v40 = v3[33];
  if ((_DWORD)v40)
  {
    v41 = *v9;
    v42 = (uint64_t)*v9 + 8 * v40;
    do
    {
      v43 = *(_QWORD *)v41;
      *(_QWORD *)v41 = 0;
      if (v43)
      {
        do
        {
          v44 = __ldaxr((unsigned int *)v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, (unsigned int *)v43));
        if (!v45)
        {
          atomic_store(1u, (unsigned int *)v43);
          v46 = *(unsigned int *)(v43 + 28);
          if ((_DWORD)v46)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v43 + 16), (WTF::StringImpl *)(*(_QWORD *)(v43 + 16) + 32 * v46));
          v47 = *(WTF **)(v43 + 16);
          if (v47)
          {
            *(_QWORD *)(v43 + 16) = 0;
            *(_DWORD *)(v43 + 24) = 0;
            WTF::fastFree(v47, v39);
          }
          WTF::fastFree((WTF *)v43, v39);
        }
      }
      v41 = (WTF *)((char *)v41 + 8);
    }
    while (v41 != (WTF *)v42);
  }
  v48 = *v9;
  if (*v9)
  {
    *((_QWORD *)v3 + 15) = 0;
    v3[32] = 0;
    WTF::fastFree(v48, v39);
  }
  v49 = v85;
  *((_QWORD *)v3 + 15) = v85;
  v50 = HIDWORD(v86);
  v3[32] = v86;
  v3[33] = v50;
  if ((*(_WORD *)(**((_QWORD **)v3 + 5) + 28) & 0x80) != 0)
    v51 = **((_QWORD **)v3 + 5);
  else
    v51 = 0;
  if (v51 && (*(_DWORD *)(v51 + 24) += 2, !*(_BYTE *)(v51 + 194)))
  {
    (*(void (**)(_QWORD, unsigned int *, WTF **, unsigned int *, uint64_t))(**(_QWORD **)(v51 + 224) + 56))(*(_QWORD *)(v51 + 224), v3, &v88, v3 + 30, v51);
  }
  else
  {
    if ((_DWORD)v50)
    {
      v52 = 8 * v50;
      do
      {
        v53 = *(_QWORD *)(*(_QWORD *)v49 + 8);
        if ((*(_QWORD *)(v53 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v54 = *(_QWORD *)((*(_QWORD *)(v53 + 72) & 0xFFFFFFFFFFFFLL) + 0x10);
          if (v54)
          {
            v55 = *(_QWORD *)(v54 + 8);
            if (v55)
            {
              v91 = *(WTF **)(*(_QWORD *)v49 + 8);
              v94[0] = (WTF *)&v91;
              WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::Node*>(WebCore::Node* const&)::{lambda(WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>((uint64_t *)(v55 + 120), (uint64_t **)v94, 0);
              v57 = **(_QWORD **)(v55 + 40);
              if (v57 && (*(_WORD *)(v57 + 28) & 0x80) != 0)
              {
                v59 = *(_DWORD *)(v57 + 24) + 2;
                *(_DWORD *)(v57 + 24) = v59;
                v60 = *(_QWORD *)(v57 + 200);
                if (v60)
                  v60 = *(_QWORD *)(v60 + 8);
                if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v49 + 8) + 32) == v60)
                {
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v57 + 224) + 64))(*(_QWORD *)(v57 + 224), v55);
                  v59 = *(_DWORD *)(v57 + 24);
                }
                v61 = v59 - 2;
                if (v61)
                {
                  *(_DWORD *)(v57 + 24) = v61;
                }
                else
                {
                  v63 = *(_WORD *)(v57 + 30);
                  if ((v63 & 0x400) == 0)
                  {
                    v64 = *(_WORD *)(v57 + 28);
                    if ((v64 & 0xF000) == 0x9000)
                    {
                      WebCore::Document::removedLastRef((WebCore::Document *)v57, v56);
                    }
                    else
                    {
                      if ((v64 & 0x20) != 0)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)(v57 + 160) + 16))(*(_QWORD *)(v57 + 160));
                        v63 = *(_WORD *)(v57 + 30);
                      }
                      *(_WORD *)(v57 + 30) = v63 | 0x400;
                      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 72))(v57);
                    }
                  }
                }
              }
            }
          }
        }
        if (*(_QWORD *)v49)
          v62 = *(_QWORD *)(*(_QWORD *)v49 + 8);
        else
          v62 = 0;
        WebCore::Node::setManuallyAssignedSlot(v62, (WebCore::Text *)v3);
        v49 += 8;
        v52 -= 8;
      }
      while (v52);
    }
    if (!v51)
      goto LABEL_105;
  }
  if (*(_DWORD *)(v51 + 24) == 2)
  {
    v79 = *(_WORD *)(v51 + 30);
    if ((v79 & 0x400) == 0)
    {
      v80 = *(_WORD *)(v51 + 28);
      if ((v80 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v51, v39);
      }
      else
      {
        if ((v80 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v51 + 160) + 16))(*(_QWORD *)(v51 + 160));
          v79 = *(_WORD *)(v51 + 30);
        }
        *(_WORD *)(v51 + 30) = v79 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 72))(v51);
      }
    }
  }
  else
  {
    *(_DWORD *)(v51 + 24) -= 2;
  }
LABEL_105:
  v65 = v87;
  if (v87)
  {
    v66 = *((unsigned int *)v87 - 1);
    if ((_DWORD)v66)
    {
      v67 = v87;
      do
      {
        v68 = *v67;
        if (*v67 != -1)
        {
          *v67 = 0;
          if (v68)
          {
            if (*(_DWORD *)(v68 + 24) == 2)
            {
              v69 = *(_WORD *)(v68 + 30);
              if ((v69 & 0x400) == 0)
              {
                v70 = *(_WORD *)(v68 + 28);
                if ((v70 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v68, v39);
                }
                else
                {
                  if ((v70 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v68 + 160) + 16))(*(_QWORD *)(v68 + 160));
                    v69 = *(_WORD *)(v68 + 30);
                  }
                  *(_WORD *)(v68 + 30) = v69 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 72))(v68);
                }
              }
            }
            else
            {
              *(_DWORD *)(v68 + 24) -= 2;
            }
          }
        }
        ++v67;
        --v66;
      }
      while (v66);
    }
    WTF::fastFree((WTF *)(v65 - 2), v39);
  }
  if (v90)
  {
    v71 = v88;
    v72 = (WTF *)((char *)v88 + 8 * v90);
    do
    {
      v73 = *(_QWORD *)v71;
      *(_QWORD *)v71 = 0;
      if (v73)
      {
        do
        {
          v74 = __ldaxr((unsigned int *)v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, (unsigned int *)v73));
        if (!v75)
        {
          atomic_store(1u, (unsigned int *)v73);
          v76 = *(unsigned int *)(v73 + 28);
          if ((_DWORD)v76)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v73 + 16), (WTF::StringImpl *)(*(_QWORD *)(v73 + 16) + 32 * v76));
          v77 = *(WTF **)(v73 + 16);
          if (v77)
          {
            *(_QWORD *)(v73 + 16) = 0;
            *(_DWORD *)(v73 + 24) = 0;
            WTF::fastFree(v77, v39);
          }
          WTF::fastFree((WTF *)v73, v39);
        }
      }
      v71 = (WTF *)((char *)v71 + 8);
    }
    while (v71 != v72);
  }
  result = (unsigned int *)v88;
  if (v88)
  {
    v88 = 0;
    v89 = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, v39);
  }
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v81 = *(_WORD *)(v6 + 30);
      if ((v81 & 0x400) == 0)
      {
        v82 = *(_WORD *)(v6 + 28);
        if ((v82 & 0xF000) == 0x9000)
        {
          result = WebCore::Document::removedLastRef((WebCore::Document *)v6, v39);
        }
        else
        {
          if ((v82 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v81 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v81 | 0x400;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v83 = *(_WORD *)(v4 + 30);
      if ((v83 & 0x400) == 0)
      {
        v84 = *(_WORD *)(v4 + 28);
        if ((v84 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v4, v39);
        }
        else
        {
          if ((v84 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v83 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v83 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLSlotElement::dispatchSlotChangeEvent(WebCore::HTMLSlotElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  WebCore::Event *v10;
  uint64_t result;

  *((_BYTE *)this + 112) = 0;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8202;
  v8 = *(_QWORD *)(v4 + 1864) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 1864);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  *((_DWORD *)this + 6) += 2;
  *(_QWORD *)(v5 + 48) = this;
  WebCore::Event::receivedTarget((WebCore::Event *)v5);
  result = WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)this, (WebCore::Node *)v5, v10);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

unsigned int *WebCore::HTMLSourceElement::create@<X0>(WebCore::HTMLSourceElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::QualifiedName *v12;
  unsigned int *result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x181C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v9;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  *(_QWORD *)(v7 + 112) = off_1E33AF7B0;
  *(_QWORD *)(v7 + 120) = 0;
  v10 = v7 + 128;
  v11 = *((_QWORD *)a2 + 88);
  if (v11)
  {
    v12 = *(const WebCore::QualifiedName **)(v11 + 8);
    if (v12)
      a2 = v12;
  }
  *(_QWORD *)(v7 + 128) = &off_1E33A18C0;
  *(_QWORD *)(v7 + 136) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v7 + 128), (const WebCore::QualifiedName *)((char *)a2 + 192));
  *(_QWORD *)(v8 + 128) = &off_1E33A0540;
  *(_QWORD *)(v8 + 144) = 0;
  if (*((_BYTE *)a2 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195C6BA24);
  }
  v19 = v8 + 128;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)a2 + 40, &v19, (uint64_t)&v18);
  *(_QWORD *)v8 = off_1E33CCED8;
  *(_QWORD *)(v8 + 112) = &unk_1E33CD408;
  *(_QWORD *)(v8 + 128) = &unk_1E33CD470;
  *(_QWORD *)(v8 + 152) = 0;
  result = (unsigned int *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)result = 0;
  *(_QWORD *)(v8 + 160) = result;
  *(_BYTE *)(v8 + 168) = 0;
  *(_BYTE *)(v8 + 176) = 0;
  *(_BYTE *)(v8 + 192) = 0;
  *a3 = v8;
  v15 = *(_QWORD *)(v8 + 136);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(unsigned __int8 *)(v16 + 178);
      if (*(_BYTE *)(v16 + 178))
      {
        if (v17 == 1 || v17 == 2)
          ++*(_DWORD *)(v16 + 216);
      }
      else
      {
        *(_DWORD *)(v16 - 264) += 2;
      }
      if (*(_BYTE *)(v16 + 179))
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, *(unsigned __int8 *)(v16 + 177));
      if (*(_BYTE *)(v16 + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      return WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v16 - 96), v14);
    }
  }
  return result;
}

unsigned int *WebCore::HTMLSourceElement::create@<X0>(WebCore::HTMLSourceElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::HTMLSourceElement *v10;
  unsigned int *result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x181C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::sourceTag;
  if (WebCore::HTMLNames::sourceTag)
    ++*(_DWORD *)WebCore::HTMLNames::sourceTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33BC680;
  *(_QWORD *)(v5 + 112) = off_1E33AF7B0;
  *(_QWORD *)(v5 + 120) = 0;
  v8 = v5 + 128;
  v9 = *((_QWORD *)this + 88);
  if (v9)
  {
    v10 = *(WebCore::HTMLSourceElement **)(v9 + 8);
    if (v10)
      this = v10;
  }
  *(_QWORD *)(v5 + 128) = &off_1E33A18C0;
  *(_QWORD *)(v5 + 136) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 128), (WebCore::HTMLSourceElement *)((char *)this + 192));
  *(_QWORD *)(v6 + 128) = &off_1E33A0540;
  *(_QWORD *)(v6 + 144) = 0;
  if (*((_BYTE *)this + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195C6BC34);
  }
  v17 = v6 + 128;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 40, &v17, (uint64_t)&v16);
  *(_QWORD *)v6 = off_1E33CCED8;
  *(_QWORD *)(v6 + 112) = &unk_1E33CD408;
  *(_QWORD *)(v6 + 128) = &unk_1E33CD470;
  *(_QWORD *)(v6 + 152) = 0;
  result = (unsigned int *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)result = 0;
  *(_QWORD *)(v6 + 160) = result;
  *(_BYTE *)(v6 + 168) = 0;
  *(_BYTE *)(v6 + 176) = 0;
  *(_BYTE *)(v6 + 192) = 0;
  *a2 = v6;
  v13 = *(_QWORD *)(v6 + 136);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = *(unsigned __int8 *)(v14 + 178);
      if (*(_BYTE *)(v14 + 178))
      {
        if (v15 == 1 || v15 == 2)
          ++*(_DWORD *)(v14 + 216);
      }
      else
      {
        *(_DWORD *)(v14 - 264) += 2;
      }
      if (*(_BYTE *)(v14 + 179))
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, *(unsigned __int8 *)(v14 + 177));
      if (*(_BYTE *)(v14 + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
      return WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v14 - 96), v12);
    }
  }
  return result;
}

uint64_t WebCore::HTMLSourceElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, _QWORD *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  __int16 v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v19;
  __int16 v20;
  WTF::StringImpl *v21[5];

  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, (uint64_t)a3);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6 || (*(_WORD *)(v6 + 28) & 8) == 0)
    return 0;
  *(_DWORD *)(v6 + 24) += 2;
  if ((_QWORD *)v6 == a3)
  {
    if ((*(unsigned int (**)(_QWORD *))(*a3 + 824))(a3))
    {
      WebCore::HTMLMediaElement::sourceWasAdded((uint64_t)a3, (WebCore::HTMLSourceElement *)a1, v7, v8, v9);
      goto LABEL_36;
    }
    v10 = *((_WORD *)a3 + 14);
    if ((v10 & 0x10) != 0 && (v10 & 0x110) != 0x110)
    {
      v11 = *(_QWORD *)(a3[12] + 24);
      if (v11 == *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
      {
        WebCore::HTMLModelElement::selectModelSource((WebCore::HTMLModelElement *)a3, v7, v8, (WTF::URL *)v21, v9);
        WebCore::HTMLModelElement::setSourceURL((WebCore::HTMLModelElement *)a3, (const WTF::URL *)v21, v12);
        v13 = v21[0];
        v21[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v5);
          else
            *(_DWORD *)v13 -= 2;
        }
        goto LABEL_36;
      }
LABEL_14:
      if (v11 == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
      {
        *(_BYTE *)(a1 + 168) = 1;
        v14 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v14)
          goto LABEL_24;
        v15 = 0;
        v16 = WebCore::HTMLNames::imgTag;
        do
        {
          while ((*(_WORD *)(v14 + 28) & 0x10) != 0
               && *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) == *(_QWORD *)(v16 + 24))
          {
            *(_BYTE *)(a1 + 168) = 0;
            v15 = 1;
            v14 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
            if (!v14)
              goto LABEL_36;
          }
          v14 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
        }
        while (v14);
        if ((v15 & 1) == 0)
        {
LABEL_24:
          v17 = a3[10];
          if (v17)
          {
            while ((*(_WORD *)(v17 + 28) & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
            {
              v17 = *(_QWORD *)(v17 + 56);
              if (!v17)
                goto LABEL_36;
            }
            while (1)
            {
              WebCore::HTMLImageElement::selectImageSource(v17, (void *)1);
              v17 = *(_QWORD *)(v17 + 56);
              if (!v17)
                break;
              while ((*(_WORD *)(v17 + 28) & 0x10) == 0
                   || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
              {
                v17 = *(_QWORD *)(v17 + 56);
                if (!v17)
                  goto LABEL_36;
              }
            }
          }
        }
      }
      goto LABEL_36;
    }
    if ((v10 & 0x10) != 0)
    {
      v11 = *(_QWORD *)(a3[12] + 24);
      goto LABEL_14;
    }
  }
LABEL_36:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    v19 = *(_WORD *)(v6 + 30);
    if ((v19 & 0x400) == 0)
    {
      v20 = *(_WORD *)(v6 + 28);
      if ((v20 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v6, v5);
      }
      else
      {
        if ((v20 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
          v19 = *(_WORD *)(v6 + 30);
        }
        *(_WORD *)(v6 + 30) = v19 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
      }
    }
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return 0;
}

WTF::StringImpl *WebCore::HTMLSourceElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::String *v9;
  __n128 v10;
  __int16 v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15[5];

  result = (WTF::StringImpl *)WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
  if (!*(_QWORD *)(a1 + 32) && (*(_WORD *)(a3 + 28) & 8) != 0)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 824))(a3);
    if ((_DWORD)result)
    {
      return (WTF::StringImpl *)WebCore::HTMLMediaElement::sourceWasRemoved((_QWORD *)a3, (WebCore::HTMLSourceElement *)a1, v8, v9, v10);
    }
    else
    {
      v11 = *(_WORD *)(a3 + 28);
      if ((v11 & 0x10) != 0
        && (v11 & 0x110) != 0x110
        && *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
      {
        WebCore::HTMLModelElement::selectModelSource((WebCore::HTMLModelElement *)a3, v8, v9, (WTF::URL *)v15, v10);
        WebCore::HTMLModelElement::setSourceURL((WebCore::HTMLModelElement *)a3, (const WTF::URL *)v15, v12);
        result = v15[0];
        v15[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else if (*(_BYTE *)(a1 + 168))
      {
        if ((v11 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x195C6C0A4);
        }
        v14 = *(_QWORD *)(a3 + 80);
        if (v14)
        {
          while ((*(_WORD *)(v14 + 28) & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            v14 = *(_QWORD *)(v14 + 56);
            if (!v14)
              goto LABEL_25;
          }
          while (1)
          {
            result = (WTF::StringImpl *)WebCore::HTMLImageElement::selectImageSource(v14, (void *)1);
            v14 = *(_QWORD *)(v14 + 56);
            if (!v14)
              break;
            while ((*(_WORD *)(v14 + 28) & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
            {
              v14 = *(_QWORD *)(v14 + 56);
              if (!v14)
                goto LABEL_25;
            }
          }
        }
LABEL_25:
        *(_BYTE *)(a1 + 168) = 0;
      }
    }
  }
  return result;
}

unsigned int *WebCore::HTMLSourceElement::didMoveToNewDocument(WebCore::HTMLSourceElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  return WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::HTMLSourceElement *)((char *)this + 128), a3);
}

uint64_t WebCore::HTMLSourceElement::scheduleErrorEvent(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  _DWORD *v11;
  uint64_t v12;

  v1 = this;
  v2 = **(unsigned int ***)(this + 160);
  if (!v2 || (v3 = atomic_load(v2), v3 == 1))
  {
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
      v5 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *(_QWORD *)(v5 + 40);
    }
    v7 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
    *(_QWORD *)v7 = off_1E33A4B48;
    *(_QWORD *)(v7 + 8) = 0;
    v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8204;
    v10 = *(_QWORD *)(v6 + 784) != 0;
    *(_DWORD *)(v7 + 16) = 1;
    *(_DWORD *)(v7 + 20) = v9 | v10;
    v11 = *(_DWORD **)(v6 + 784);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(v7 + 24) = v11;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = v8;
    *(_QWORD *)(v7 + 64) = 0;
    v12 = v7;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v1 + 128), v1, 9, v1 + 152, &v12);
    this = v12;
    v12 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 16);
    }
  }
  return this;
}

BOOL WebCore::HTMLSourceElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcAttr;
}

uint64_t WebCore::HTMLSourceElement::attributeContainsURL(uint64_t a1, _QWORD *a2)
{
  if (*a2 == WebCore::HTMLNames::srcsetAttr)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 600))(a1);
}

uint64_t WebCore::HTMLSourceElement::stop(WebCore::HTMLSourceElement *this, void *a2)
{
  uint64_t *v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;

  v2 = (uint64_t *)*((_QWORD *)this + 20);
  result = *v2;
  *v2 = 0;
  if (result)
  {
    *(_QWORD *)(result + 8) = 0;
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLSourceElement::stop(WebCore::HTMLSourceElement *this, void *a2)
{
  uint64_t *v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;

  v2 = (uint64_t *)*((_QWORD *)this + 4);
  result = *v2;
  *v2 = 0;
  if (result)
  {
    *(_QWORD *)(result + 8) = 0;
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::HTMLSourceElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  unsigned int v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int16 v22;
  __int16 v23;
  WTF::StringImpl *v24[5];

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  v12 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v12 > 0x34B)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x399u)
    {
      if (v12 != 844)
      {
        if (v12 != 847)
          return;
        goto LABEL_9;
      }
      v13 = *(_QWORD *)(a1 + 32);
      if (!v13)
        return;
      v19 = *(_WORD *)(v13 + 28);
      if ((v19 & 8) == 0
        || (v19 & 0x10) == 0
        || (v19 & 0x110) == 0x110
        || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
      {
        return;
      }
      *(_DWORD *)(v13 + 24) += 2;
      goto LABEL_44;
    }
    if (v12 != 922)
    {
      if (v12 != 952)
        return;
      v13 = *(_QWORD *)(a1 + 32);
      if (!v13)
        return;
      v17 = *(_WORD *)(v13 + 28);
      if ((v17 & 8) == 0)
        return;
      *(_DWORD *)(v13 + 24) += 2;
      if (*(_BYTE *)(a1 + 168))
      {
        if ((v17 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x195C6C6B8);
        }
        v18 = *(_QWORD *)(v13 + 80);
        if (v18)
        {
          while ((*(_WORD *)(v18 + 28) & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            v18 = *(_QWORD *)(v18 + 56);
            if (!v18)
              goto LABEL_68;
          }
          while (1)
          {
            WebCore::HTMLImageElement::selectImageSource(v18, (void *)1);
            v18 = *(_QWORD *)(v18 + 56);
            if (!v18)
              break;
            while ((*(_WORD *)(v18 + 28) & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
            {
              v18 = *(_QWORD *)(v18 + 56);
              if (!v18)
                goto LABEL_68;
            }
          }
        }
LABEL_68:
        v17 = *(_WORD *)(v13 + 28);
      }
      if ((v17 & 0x10) != 0
        && (v17 & 0x110) != 0x110
        && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
      {
LABEL_44:
        WebCore::HTMLModelElement::selectModelSource((WebCore::HTMLModelElement *)v13, v9, v10, (WTF::URL *)v24, v11);
        WebCore::HTMLModelElement::setSourceURL((WebCore::HTMLModelElement *)v13, (const WTF::URL *)v24, v20);
        v21 = v24[0];
        v24[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v8);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
LABEL_47:
      v15 = *(_DWORD *)(v13 + 24) - 2;
      if (*(_DWORD *)(v13 + 24) == 2)
      {
LABEL_57:
        v22 = *(_WORD *)(v13 + 30);
        if ((v22 & 0x400) == 0)
        {
          v23 = *(_WORD *)(v13 + 28);
          if ((v23 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v13, v8);
          }
          else
          {
            if ((v23 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
              v22 = *(_WORD *)(v13 + 30);
            }
            *(_WORD *)(v13 + 30) = v22 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
          }
        }
        return;
      }
LABEL_48:
      *(_DWORD *)(v13 + 24) = v15;
      return;
    }
LABEL_34:
    v13 = *(_QWORD *)(a1 + 32);
    if (!v13
      || (~*(unsigned __int16 *)(v13 + 28) & 0x18) != 0
      || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
    {
      return;
    }
    *(_DWORD *)(v13 + 24) += 2;
    WebCore::HTMLPictureElement::sourceDimensionAttributesChanged((WebCore::Node *)v13, (const WebCore::HTMLSourceElement *)a1);
    goto LABEL_47;
  }
  if (v12 == 504)
    goto LABEL_34;
  if (v12 != 582 && v12 != 835)
    return;
LABEL_9:
  if (*(_QWORD *)a2 == WebCore::HTMLNames::mediaAttr && *(_BYTE *)(a1 + 192))
  {
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 176, v8);
    *(_BYTE *)(a1 + 192) = 0;
  }
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
  {
    v14 = *(_WORD *)(v13 + 28);
    if ((v14 & 8) != 0)
    {
      v15 = *(_DWORD *)(v13 + 24);
      *(_DWORD *)(v13 + 24) = v15 + 2;
      if (*(_BYTE *)(a1 + 168))
      {
        if ((v14 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x195C6C614);
        }
        v16 = *(_QWORD *)(v13 + 80);
        if (v16)
        {
          while ((*(_WORD *)(v16 + 28) & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            v16 = *(_QWORD *)(v16 + 56);
            if (!v16)
              goto LABEL_55;
          }
          while (1)
          {
            WebCore::HTMLImageElement::selectImageSource(v16, (void *)1);
            v16 = *(_QWORD *)(v16 + 56);
            if (!v16)
              break;
            while ((*(_WORD *)(v16 + 28) & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
            {
              v16 = *(_QWORD *)(v16 + 56);
              if (!v16)
                goto LABEL_55;
            }
          }
        }
LABEL_55:
        v15 = *(_DWORD *)(v13 + 24) - 2;
      }
      if (!v15)
        goto LABEL_57;
      goto LABEL_48;
    }
  }
}

WTF::StringImpl **WebCore::HTMLSourceElement::parsedMediaAttribute(WebCore::HTMLSourceElement *this, WebCore::Document *a2)
{
  WTF::StringImpl **v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  const WebCore::CSSParserToken *v12;
  WebCore::CSSTokenizer *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE v22[3];
  uint64_t v23;
  uint64_t v24;
  WebCore::CSSTokenizer *v25;
  const WebCore::CSSParserToken *v26[2];

  v2 = (WTF::StringImpl **)((char *)this + 176);
  if (*((_BYTE *)this + 192))
    return v2;
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_13;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_5;
LABEL_13:
    v8 = (unsigned int **)MEMORY[0x1E0CBF2F8];
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_13;
LABEL_5:
  v7 = v7;
  v8 = (unsigned int **)(v6 + 8);
  while (1)
  {
    v9 = (uint64_t)*(v8 - 1);
    if (v9 == WebCore::HTMLNames::mediaAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::mediaAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::mediaAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (unsigned int **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_14:
  v10 = *((_QWORD *)a2 + 66);
  if (v10)
  {
    v10 = *(_QWORD *)(v10 + 8);
    if (v10)
    {
      v10 = *(_QWORD *)(v10 + 24);
      if (v10)
      {
        v10 = *(_QWORD *)(v10 + 8);
        if (v10)
          LOBYTE(v10) = *(_BYTE *)(v10 + 450) != 0;
      }
    }
  }
  v22[0] = v10;
  v22[1] = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) & 0x8000000) != 0;
  v22[2] = 0;
  WebCore::CSSTokenizer::tryCreate(v8, (uint64_t *)&v25);
  if (v25)
  {
    v12 = (const WebCore::CSSParserToken *)(*((_QWORD *)v25 + 6) + 24 * *((unsigned int *)v25 + 15));
    v26[0] = *((const WebCore::CSSParserToken **)v25 + 6);
    v26[1] = v12;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(v26, (WebCore::CSSParserTokenRange *)v22, (uint64_t)&v23);
    v13 = v25;
    v25 = 0;
    if (v13)
    {
      WebCore::CSSTokenizer::~CSSTokenizer(v13, v11);
      WTF::fastFree(v14, v15);
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  if (*((_BYTE *)this + 192))
  {
    v16 = *((_DWORD *)this + 47);
    if (v16)
      WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*v2, (WTF::StringImpl *)((char *)*v2 + 56 * v16));
    v17 = *v2;
    if (*v2)
    {
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = 0;
      WTF::fastFree(v17, v11);
    }
    *((_QWORD *)this + 22) = v23;
    v18 = v24;
    v23 = 0;
    v24 = 0;
    *((_QWORD *)this + 23) = v18;
  }
  else
  {
    *((_QWORD *)this + 22) = v23;
    v19 = v24;
    v23 = 0;
    v24 = 0;
    *((_QWORD *)this + 23) = v19;
    *((_BYTE *)this + 192) = 1;
  }
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v11);
  if (*((_BYTE *)this + 192))
    return v2;
  v21 = std::__throw_bad_optional_access[abi:sn180100]();
  return (WTF::StringImpl **)WebCore::HTMLSourceElement::replaceURLsInAttributeValue(v21);
}

WTF::StringImpl *WebCore::HTMLSourceElement::replaceURLsInAttributeValue@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::srcsetAttr && *a3 && *(_DWORD *)(*a3 - 12))
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v9 = *(unsigned __int8 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::replaceURLsInSrcsetAttribute((uint64_t)result, v9, v10, a3, &v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v18 = v12;
      if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v13 = v18;
        v12 = v19;
        v18 = 0;
        v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            v16 = v12;
            WTF::StringImpl::destroy(v13, v11);
            v12 = v16;
          }
          else
          {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
    v14 = WebCore::HTMLNames::srcsetAttr;
    if (WebCore::HTMLNames::srcsetAttr)
      ++*(_DWORD *)WebCore::HTMLNames::srcsetAttr;
    *a4 = v14;
    if (v12)
    {
      v15 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      a4[1] = (uint64_t)v12;
      if (v15)
        *(_DWORD *)v12 = v15;
      else
        WTF::StringImpl::destroy(v12, v11);
    }
    else
    {
      a4[1] = 0;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    if (v5)
      ++*v5;
    *a4 = (uint64_t)v5;
    v7 = *(_DWORD **)(a2 + 8);
    if (v7)
      *v7 += 2;
    a4[1] = (uint64_t)v7;
  }
  return result;
}

uint64_t WebCore::HTMLSourceElement::addCandidateSubresourceURLs(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::srcsetAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (v9)
  {
    v10 = *(unsigned __int8 **)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  return WebCore::getURLsFromSrcsetAttribute(a1, v10, v11, a2);
}

uint64_t WebCore::HTMLSourceElement::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::HTMLSourceElement *this@<X0>, WebCore::Document *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Document *v11;
  WebCore::Document *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  uint64_t result;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  char v23[24];
  uint64_t v24;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x181C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::sourceTag;
  if (WebCore::HTMLNames::sourceTag)
    ++*(_DWORD *)WebCore::HTMLNames::sourceTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33BC680;
  *(_QWORD *)(v6 + 112) = off_1E33AF7B0;
  *(_QWORD *)(v6 + 120) = 0;
  v9 = v6 + 128;
  v10 = *((_QWORD *)a2 + 88);
  v11 = a2;
  if (v10)
  {
    v12 = *(WebCore::Document **)(v10 + 8);
    if (v12)
      v11 = v12;
    else
      v11 = a2;
  }
  *(_QWORD *)(v6 + 128) = &off_1E33A18C0;
  *(_QWORD *)(v6 + 136) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v6 + 128), (WebCore::Document *)((char *)v11 + 192));
  *(_QWORD *)(v7 + 128) = &off_1E33A0540;
  *(_QWORD *)(v7 + 144) = 0;
  if (*((_BYTE *)v11 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195C6CCE0);
  }
  v24 = v7 + 128;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v11 + 40, &v24, (uint64_t)v23);
  *(_QWORD *)v7 = off_1E33CCED8;
  *(_QWORD *)(v7 + 112) = &unk_1E33CD408;
  *(_QWORD *)(v7 + 128) = &unk_1E33CD470;
  *(_QWORD *)(v7 + 152) = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v13 = 0;
  *(_QWORD *)(v7 + 160) = v13;
  *(_BYTE *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 176) = 0;
  *(_BYTE *)(v7 + 192) = 0;
  v15 = *(_QWORD *)(v7 + 136);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(unsigned __int8 *)(v16 + 178);
      if (*(_BYTE *)(v16 + 178))
      {
        if (v17 == 1 || v17 == 2)
          ++*(_DWORD *)(v16 + 216);
      }
      else
      {
        *(_DWORD *)(v16 - 264) += 2;
      }
      v18 = (unsigned int *)(v16 - 96);
      if (*(_BYTE *)(v16 + 179))
      {
        v22 = (unsigned int *)(v16 - 96);
        v20 = v16;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 24))(v7 + 128, *(unsigned __int8 *)(v16 + 177));
        v16 = v20;
        v18 = v22;
      }
      if (*(_BYTE *)(v16 + 180))
      {
        v21 = v18;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 56))(v7 + 128);
        v18 = v21;
      }
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(v18, v14);
    }
  }
  result = WebCore::AttachmentAssociatedElement::cloneAttachmentAssociatedElementWithoutAttributesAndChildren((WebCore::HTMLSourceElement *)((char *)this + 112), (WebCore::AttachmentAssociatedElement *)(v7 + 112), a2);
  *a3 = v7;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLSourceElement::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::HTMLSourceElement *this@<X0>, WebCore::Document *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Document *v11;
  WebCore::Document *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  uint64_t result;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  char v23[24];
  uint64_t v24;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x181C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::sourceTag;
  if (WebCore::HTMLNames::sourceTag)
    ++*(_DWORD *)WebCore::HTMLNames::sourceTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33BC680;
  *(_QWORD *)(v6 + 112) = off_1E33AF7B0;
  *(_QWORD *)(v6 + 120) = 0;
  v9 = v6 + 128;
  v10 = *((_QWORD *)a2 + 88);
  v11 = a2;
  if (v10)
  {
    v12 = *(WebCore::Document **)(v10 + 8);
    if (v12)
      v11 = v12;
    else
      v11 = a2;
  }
  *(_QWORD *)(v6 + 128) = &off_1E33A18C0;
  *(_QWORD *)(v6 + 136) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v6 + 128), (WebCore::Document *)((char *)v11 + 192));
  *(_QWORD *)(v7 + 128) = &off_1E33A0540;
  *(_QWORD *)(v7 + 144) = 0;
  if (*((_BYTE *)v11 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195C6CF24);
  }
  v24 = v7 + 128;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v11 + 40, &v24, (uint64_t)v23);
  *(_QWORD *)v7 = off_1E33CCED8;
  *(_QWORD *)(v7 + 112) = &unk_1E33CD408;
  *(_QWORD *)(v7 + 128) = &unk_1E33CD470;
  *(_QWORD *)(v7 + 152) = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v13 = 0;
  *(_QWORD *)(v7 + 160) = v13;
  *(_BYTE *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 176) = 0;
  *(_BYTE *)(v7 + 192) = 0;
  v15 = *(_QWORD *)(v7 + 136);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(unsigned __int8 *)(v16 + 178);
      if (*(_BYTE *)(v16 + 178))
      {
        if (v17 == 1 || v17 == 2)
          ++*(_DWORD *)(v16 + 216);
      }
      else
      {
        *(_DWORD *)(v16 - 264) += 2;
      }
      v18 = (unsigned int *)(v16 - 96);
      if (*(_BYTE *)(v16 + 179))
      {
        v22 = (unsigned int *)(v16 - 96);
        v20 = v16;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 24))(v7 + 128, *(unsigned __int8 *)(v16 + 177));
        v16 = v20;
        v18 = v22;
      }
      if (*(_BYTE *)(v16 + 180))
      {
        v21 = v18;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 56))(v7 + 128);
        v18 = v21;
      }
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(v18, v14);
    }
  }
  result = WebCore::AttachmentAssociatedElement::cloneAttachmentAssociatedElementWithoutAttributesAndChildren(this, (WebCore::AttachmentAssociatedElement *)(v7 + 112), a2);
  *a3 = v7;
  return result;
}

WTF::StringImpl *WebCore::HTMLSourceElement::copyNonAttributePropertiesFromElement(WebCore::HTMLSourceElement *this, const WebCore::Element *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *result;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195C6D040);
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 15);
  if (v3 && *((_DWORD *)v3 + 1))
  {
    v4 = (WTF::StringImpl **)((char *)this + 120);
  }
  else
  {
    v3 = *(WTF::StringImpl **)WebCore::AttachmentAssociatedElement::attachmentIdentifier((const WebCore::Element *)((char *)a2 + 112));
    v4 = (WTF::StringImpl **)((char *)this + 120);
    if (!v3)
      goto LABEL_6;
  }
  *(_DWORD *)v3 += 2;
LABEL_6:
  result = *v4;
  *v4 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLSourceElement::copyNonAttributePropertiesFromElement(WebCore::HTMLSourceElement *this, const WebCore::Element *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *result;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195C6D104);
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 15);
  if (v3 && *((_DWORD *)v3 + 1))
  {
    v4 = (WTF::StringImpl **)((char *)this + 8);
  }
  else
  {
    v3 = *(WTF::StringImpl **)WebCore::AttachmentAssociatedElement::attachmentIdentifier((const WebCore::Element *)((char *)a2 + 112));
    v4 = (WTF::StringImpl **)((char *)this + 8);
    if (!v3)
      goto LABEL_6;
  }
  *(_DWORD *)v3 += 2;
LABEL_6:
  result = *v4;
  *v4 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLSpanElement::create@<X0>(WebCore::HTMLSpanElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = (char *)this + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v6 = WebCore::HTMLNames::spanTag;
  if (WebCore::HTMLNames::spanTag)
    ++*(_DWORD *)WebCore::HTMLNames::spanTag;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CBA30;
  *a2 = result;
  return result;
}

double WebCore::HTMLStyleElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::AtomString *a4, int a5, __n128 a6)
{
  int v8;
  WTF::StringBuilder *v9;
  uint64_t v10;
  WebCore::Style::Scope *v11;
  WTF::StringBuilder *v12;
  uint64_t v13;
  WebCore::CSSStyleSheet *v14;
  void *v15;
  uint64_t v16;
  WebCore::Style::Scope *v17;
  _BYTE v19[3];
  _QWORD v20[2];

  v8 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  switch(v8)
  {
    case 952:
      WebCore::InlineStyleSheetOwner::setContentType((WebCore::InlineStyleSheetOwner *)(a1 + 112), a4);
      if (!*(_BYTE *)(a1 + 112) && (*(_BYTE *)(a1 + 22) & 8) != 0)
        WebCore::InlineStyleSheetOwner::createSheetFromTextContents((WebCore::InlineStyleSheetOwner *)(a1 + 112), (WebCore::Element *)a1, v9);
      v10 = *(_QWORD *)(a1 + 152);
      if (v10)
      {
        v11 = *(WebCore::Style::Scope **)(v10 + 8);
        if (v11)
          a6.n128_f64[0] = WebCore::Style::Scope::didChangeStyleSheetContents(v11);
      }
      break;
    case 582:
      WTF::AtomString::operator=((WTF::StringImpl **)(a1 + 136), a4);
      v13 = *(_QWORD *)(a1 + 144);
      if (v13)
      {
        WebCore::MediaQueryParserContext::MediaQueryParserContext(v19, *(const WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
        WebCore::MQ::MediaQueryParser::parse((unsigned int **)a4, (const WTF::String *)v19, v20);
        WebCore::CSSStyleSheet::setMediaQueries(v13, v20);
        WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v15);
        v16 = *(_QWORD *)(a1 + 152);
        if (v16)
        {
          v17 = *(WebCore::Style::Scope **)(v16 + 8);
          if (v17)
            a6.n128_f64[0] = WebCore::Style::Scope::didChangeStyleSheetContents(v17);
        }
      }
      else if (!*(_BYTE *)(a1 + 112) && (*(_BYTE *)(a1 + 22) & 8) != 0)
      {
        WebCore::InlineStyleSheetOwner::createSheetFromTextContents((WebCore::InlineStyleSheetOwner *)(a1 + 112), (WebCore::Element *)a1, v12);
      }
      break;
    case 951:
      v14 = *(WebCore::CSSStyleSheet **)(a1 + 144);
      if (v14 && (*(_BYTE *)(a1 + 22) & 0x10) == 0)
        WebCore::CSSStyleSheet::setTitle(v14, a4);
      break;
    default:
      WebCore::HTMLElement::attributeChanged(a1, a2, a3, (WTF::StringImpl **)a4, a5, a6);
      break;
  }
  return a6.n128_f64[0];
}

WTF::StringImpl *WebCore::InlineStyleSheetOwner::setContentType(WebCore::InlineStyleSheetOwner *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::HTMLStyleElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  result = WebCore::StyledElement::addSubresourceAttributeURLs(a1, a2);
  v5 = a1[18];
  if (v5)
  {
    ++*(_DWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 24);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E33CDB88;
    v7[1] = a2;
    v8 = v7;
    WebCore::StyleSheetContents::traverseSubresources(v6, (uint64_t)&v8);
    result = v8;
    v8 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    if (*(_DWORD *)(v5 + 8) == 1)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    else
      --*(_DWORD *)(v5 + 8);
  }
  return result;
}

BOOL WebCore::HTMLStyleElement::disabled(WebCore::HTMLStyleElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 18);
  return v1 && *(_BYTE *)(v1 + 33) != 0;
}

uint64_t WebCore::HTMLStyleElement::setDisabled(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(this + 144);
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 33) != a2)
    {
      *(_BYTE *)(v2 + 33) = a2;
      v3 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v3 = off_1E3398D48;
      v4 = v3;
      WebCore::CSSStyleSheet::forEachStyleScope(v2, &v4);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return this;
}

void WebCore::HTMLSummaryElement::create(WebCore::HTMLSummaryElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  WebCore *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  WebCore::Style::Scope *v12;
  void *v13;
  WebCore::Document *v14;
  __int16 v15;
  __int16 v16;
  WebCore::Document *v17;

  v7 = bmalloc::api::isoAllocate();
  v8 = (WebCore *)v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v9;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33CBF20;
  *a3 = v7;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v10[2] = 0;
  v10[3] = 0;
  *v10 = off_1E33CDA30;
  v10[1] = 0;
  v11 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v11 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(v11 + 24) = 2;
  *(_WORD *)(v11 + 28) = -20348;
  *(_OWORD *)(v11 + 30) = 0u;
  *(_OWORD *)(v11 + 46) = 0u;
  *(_OWORD *)(v11 + 62) = 0u;
  *(_WORD *)(v11 + 78) = 0;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = v11;
  *(_QWORD *)(v11 + 104) = a2;
  *(_QWORD *)(v11 + 112) = (char *)a2 + 96;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 96;
  *(_QWORD *)v11 = off_1E33A7A70;
  *(_BYTE *)(v11 + 192) &= 0x80u;
  *(_WORD *)(v11 + 193) = 256;
  *(_QWORD *)(v11 + 200) = 0;
  *(_QWORD *)(v11 + 208) = 0;
  v12 = (WebCore::Style::Scope *)WTF::fastMalloc((WTF *)0x140);
  *(_QWORD *)(v11 + 216) = WebCore::Style::Scope::Scope(v12, (WebCore::ShadowRoot *)v11);
  *(_QWORD *)(v11 + 224) = v10;
  *(_BYTE *)(v11 + 232) = 0;
  *(_BYTE *)(v11 + 240) = 0;
  *(_QWORD *)(v11 + 16) |= 0x30000000000000uLL;
  v17 = (WebCore::Document *)v11;
  WebCore::Element::addShadowRoot(v8, (uint64_t *)&v17);
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      v15 = *((_WORD *)v14 + 15);
      if ((v15 & 0x400) == 0)
      {
        v16 = *((_WORD *)v14 + 14);
        if ((v16 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v14, v13);
        }
        else
        {
          if ((v16 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v14 + 20) + 16))(*((_QWORD *)v14 + 20));
            v15 = *((_WORD *)v14 + 15);
          }
          *((_WORD *)v14 + 15) = v15 | 0x400;
          (*(void (**)(WebCore::Document *))(*(_QWORD *)v14 + 72))(v14);
        }
      }
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
}

void WebCore::HTMLSummaryElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *a2@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  WebCore::RenderElement::createFor(a1, a2, 7, a3, a4);
}

unsigned int *WebCore::HTMLSummaryElement::didAddUserAgentShadowRoot(WebCore::HTMLSummaryElement *this, WebCore::ShadowRoot *a2)
{
  WebCore::Node *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *result;
  WTF::StringImpl *v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  _BYTE v18[8];
  WTF::StringImpl *v19;
  char v20;
  WebCore::Node *v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  char v24;

  WebCore::DetailsMarkerControl::create(*(WebCore::DetailsMarkerControl **)(*((_QWORD *)this + 5) + 8), (uint64_t *)&v21);
  v4 = v21;
  WebCore::ContainerNode::appendChild((uint64_t)a2, v21, (uint64_t)v22);
  if (v24)
  {
    v6 = v23;
    v23 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  if (*((_DWORD *)v4 + 6) == 2)
  {
    v14 = *((_WORD *)v4 + 15);
    if ((v14 & 0x400) == 0)
    {
      v15 = *((_WORD *)v4 + 14);
      if ((v15 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef(v4, v5);
      }
      else
      {
        if ((v15 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v4 + 20) + 16))(*((_QWORD *)v4 + 20));
          v14 = *((_WORD *)v4 + 15);
        }
        *((_WORD *)v4 + 15) = v14 | 0x400;
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v8 = bmalloc::api::isoAllocate();
  v9 = v8;
  *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v8 + 24) = 0x101C00000002;
  *(_QWORD *)(v8 + 32) = 0;
  v10 = v7 + 96;
  if (!v7)
    v10 = 0;
  *(_QWORD *)(v8 + 40) = v10;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  ++*(_DWORD *)(v7 + 3324);
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  v11 = WebCore::HTMLNames::slotTag;
  if (WebCore::HTMLNames::slotTag)
    ++*(_DWORD *)WebCore::HTMLNames::slotTag;
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)v8 = off_1E33CB540;
  *(_WORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v8, (uint64_t)v18);
  if (v20)
  {
    result = (unsigned int *)v19;
    v19 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    v16 = *(_WORD *)(v9 + 30);
    if ((v16 & 0x400) == 0)
    {
      v17 = *(_WORD *)(v9 + 28);
      if ((v17 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v9, v13);
      }
      else
      {
        if ((v17 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
          v16 = *(_WORD *)(v9 + 30);
        }
        *(_WORD *)(v9 + 30) = v16 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      }
    }
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  return result;
}

BOOL WebCore::HTMLSummaryElement::isActiveSummary(WebCore::HTMLSummaryElement *this)
{
  uint64_t v1;
  void *v2;
  _BOOL8 isActiveSummary;
  uint64_t v4;
  uint64_t v6;
  __int16 v8;
  __int16 v9;

  v1 = *((_QWORD *)this + 4);
  if (!v1
    || (~*(unsigned __int16 *)(v1 + 28) & 0x18) != 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
  {
    v4 = **((_QWORD **)this + 5);
    if (!v4 || (*(_WORD *)(v4 + 28) & 0x80) == 0)
      return 0;
    v6 = *(_QWORD *)(v4 + 200);
    if (!v6)
      return 0;
    v1 = *(_QWORD *)(v6 + 8);
    if (!v1
      || (*(_WORD *)(v1 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
    {
      return 0;
    }
  }
  *(_DWORD *)(v1 + 24) += 2;
  isActiveSummary = WebCore::HTMLDetailsElement::isActiveSummary((WebCore::HTMLDetailsElement *)v1, (WebCore::HTMLDetailsElement **)this);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    v8 = *(_WORD *)(v1 + 30);
    if ((v8 & 0x400) == 0)
    {
      v9 = *(_WORD *)(v1 + 28);
      if ((v9 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v1, v2);
      }
      else
      {
        if ((v9 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
          v8 = *(_WORD *)(v1 + 30);
        }
        *(_WORD *)(v1 + 30) = v8 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return isActiveSummary;
}

uint64_t WebCore::HTMLSummaryElement::defaultTabIndex(WebCore::HTMLSummaryElement *this)
{
  return (WebCore::HTMLSummaryElement::isActiveSummary(this) - 1);
}

uint64_t WebCore::HTMLSummaryElement::supportsFocus(WebCore::HTMLSummaryElement *this)
{
  uint64_t result;
  int v3;

  if (WebCore::HTMLSummaryElement::isActiveSummary(this) || ((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3)
    return 1;
  v3 = WebCore::Node::computeEditability((uint64_t)this, 0, 1);
  result = 0;
  if (v3)
  {
    result = *((_QWORD *)this + 4);
    if (result)
      return WebCore::Node::computeEditability(result, 0, 1) == 0;
  }
  return result;
}

void WebCore::HTMLSummaryElement::defaultEventHandler(WebCore::HTMLSummaryElement *this, WebCore::Event *a2)
{
  _BOOL8 isActiveSummary;
  void *v5;
  uint64_t v6;
  WTF::String *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;
  __int16 v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  void *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;

  isActiveSummary = WebCore::HTMLSummaryElement::isActiveSummary(this);
  if (!isActiveSummary)
    goto LABEL_53;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow((WebCore *)isActiveSummary);
  v11 = *(_QWORD **)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD **)(v10 + 40);
  }
  if (*((_QWORD *)a2 + 3) != *v11)
  {
LABEL_8:
    if ((*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2))
    {
      v12 = *((_QWORD *)a2 + 3);
      if (v12 == v11[131])
      {
        if ((MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6) & 1) != 0)
        {
          WebCore::Element::setActive((uint64_t)this, (void *)1, 0);
          return;
        }
        v12 = *((_QWORD *)a2 + 3);
      }
      if (v12 == v11[132])
      {
        v23 = WebCore::KeyboardEvent::charCode(a2);
        if (v23 == 13)
          goto LABEL_73;
        if (v23 == 32)
          goto LABEL_74;
        v12 = *((_QWORD *)a2 + 3);
      }
      if (v12 == v11[134] && MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6))
      {
        if ((*((_BYTE *)this + 54) & 2) == 0 || !WebCore::Element::isUserActionElementActive(this))
          goto LABEL_74;
LABEL_73:
        WebCore::simulateClick(this, (uint64_t)a2, 0, 1, 1);
        goto LABEL_74;
      }
    }
LABEL_53:
    WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
    return;
  }
  v13 = *((_QWORD *)a2 + 6);
  if (!v13 || (*(_BYTE *)(v13 + 22) & 2) == 0 || (*(_WORD *)(v13 + 28) & 8) == 0)
    goto LABEL_61;
  *(_DWORD *)(v13 + 24) += 2;
  while (1)
  {
    v14 = v13;
    v15 = *(_WORD *)(v13 + 28);
    if ((v15 & 0x10) != 0)
      break;
LABEL_20:
    if ((v15 & 0x20) != 0 && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::aTag + 24))
    {
LABEL_45:
      v22 = 0;
      goto LABEL_58;
    }
    if ((v15 & 0x80) != 0)
    {
      v20 = *(_QWORD *)(v13 + 200);
      if (!v20)
        goto LABEL_41;
      v16 = (uint64_t *)(v20 + 8);
    }
    else
    {
      v16 = (uint64_t *)(v13 + 32);
    }
    v13 = *v16;
    if (!*v16)
      goto LABEL_42;
    v17 = *(_WORD *)(v13 + 28);
    if ((v17 & 0x80) != 0)
    {
      v21 = *(_QWORD *)(v13 + 200);
      if (!v21)
      {
LABEL_41:
        v13 = 0;
LABEL_42:
        v18 = 1;
        goto LABEL_28;
      }
      v13 = *(_QWORD *)(v21 + 8);
      if (!v13)
        goto LABEL_42;
    }
    else if ((v17 & 8) == 0)
    {
      goto LABEL_41;
    }
    v18 = 0;
    *(_DWORD *)(v13 + 24) += 2;
LABEL_28:
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      v19 = *(_WORD *)(v14 + 30);
      if ((v19 & 0x400) == 0)
      {
        if ((v15 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v14, v5);
        }
        else
        {
          if ((v15 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 160) + 16))(*(_QWORD *)(v14 + 160));
            v19 = *(_WORD *)(v14 + 30);
          }
          *(_WORD *)(v14 + 30) = v19 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
        }
      }
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    if ((v18 & 1) != 0)
      goto LABEL_61;
  }
  if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::summaryTag + 24))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1208))(v13) & 1) != 0)
      goto LABEL_45;
    v15 = *(_WORD *)(v13 + 28);
    goto LABEL_20;
  }
  v22 = 1;
LABEL_58:
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    v29 = *(_WORD *)(v13 + 30);
    if ((v29 & 0x400) == 0)
    {
      v30 = *(_WORD *)(v13 + 28);
      if ((v30 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v13, v5);
      }
      else
      {
        if ((v30 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
          v29 = *(_WORD *)(v13 + 30);
        }
        *(_WORD *)(v13 + 30) = v29 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
      }
    }
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  if (!v22)
    goto LABEL_8;
LABEL_61:
  v24 = *((_QWORD *)this + 4);
  if (v24
    && (~*(unsigned __int16 *)(v24 + 28) & 0x18) == 0
    && *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24)
    || (v27 = **((_QWORD **)this + 5)) != 0
    && (*(_WORD *)(v27 + 28) & 0x80) != 0
    && (v28 = *(_QWORD *)(v27 + 200)) != 0
    && (v24 = *(_QWORD *)(v28 + 8)) != 0
    && (*(_WORD *)(v24 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
  {
    *(_DWORD *)(v24 + 24) += 2;
    v26.n128_f64[0] = WebCore::HTMLDetailsElement::toggleOpen((WebCore::HTMLDetailsElement *)v24, v8, (uint64_t)v5, v6, v7);
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      v31 = *(_WORD *)(v24 + 30);
      if ((v31 & 0x400) == 0)
      {
        v32 = *(_WORD *)(v24 + 28);
        if ((v32 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v24, v25);
        }
        else
        {
          if ((v32 & 0x20) != 0)
          {
            (*(void (**)(_QWORD, double))(**(_QWORD **)(v24 + 160) + 16))(*(_QWORD *)(v24 + 160), v26.n128_f64[0]);
            v31 = *(_WORD *)(v24 + 30);
          }
          *(_WORD *)(v24 + 30) = v31 | 0x400;
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v24 + 72))(v24, v26);
        }
      }
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
LABEL_74:
  *((_DWORD *)a2 + 5) |= 0x80u;
}

uint64_t WebCore::HTMLSummaryElement::willRespondToMouseClickEventsWithEditability(WebCore::HTMLSummaryElement *a1, int a2)
{
  if (WebCore::HTMLSummaryElement::isActiveSummary(a1))
    return 1;
  if (((*(uint64_t (**)(WebCore::HTMLSummaryElement *))(*(_QWORD *)a1 + 960))(a1) & 1) != 0)
    return 0;
  return WebCore::Node::willRespondToMouseClickEventsWithEditability((uint64_t)a1, a2);
}

void WebCore::HTMLQuoteElement::~HTMLQuoteElement(WebCore::HTMLQuoteElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::HTMLScriptElement::~HTMLScriptElement(WebCore::HTMLScriptElement *this, WTF::StringImpl *a2)
{
  char *v2;

  v2 = (char *)this - 112;
  WebCore::ScriptElement::~ScriptElement(this, a2);
  WebCore::Element::~Element((uint64_t)v2);
}

{
  char *v2;
  bmalloc::api *v3;
  void *v4;

  v2 = (char *)this - 112;
  WebCore::ScriptElement::~ScriptElement(this, a2);
  WebCore::Element::~Element((uint64_t)v2);
  bmalloc::api::isoDeallocate(v3, v4);
}

uint64_t WebCore::HTMLSelectElement::canContainRangeEndPoint(WebCore::HTMLSelectElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLSelectElement::canStartSelection(WebCore::HTMLSelectElement *this)
{
  return 0;
}

BOOL WebCore::HTMLSelectElement::isOptionalFormControl(WebCore::HTMLSelectElement *this)
{
  return (*((_BYTE *)this + 168) & 1) == 0;
}

uint64_t WebCore::HTMLSelectElement::isLabelable(WebCore::HTMLSelectElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLSelectElement::isInteractiveContent(WebCore::HTMLSelectElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLSelectElement::shouldSaveAndRestoreFormControlState(WebCore::HTMLSelectElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLSelectElement::isEnumeratable(WebCore::HTMLSelectElement *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::HTMLSelectElement::~HTMLSelectElement(WebCore::HTMLSelectElement *this, WTF::StringImpl *a2)
{
  WebCore::HTMLSelectElement::~HTMLSelectElement((WebCore::HTMLSelectElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLSelectElement::~HTMLSelectElement((WebCore::HTMLSelectElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLSelectElement::~HTMLSelectElement((WebCore::HTMLSelectElement *)((char *)this - 176), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLSelectElement::~HTMLSelectElement((WebCore::HTMLSelectElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLSelectElement::isEnumeratable(WebCore::HTMLSelectElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLSelectElement::shouldSaveAndRestoreFormControlState(WebCore::HTMLSelectElement *this)
{
  return 1;
}

void WebCore::HTMLSlotElement::~HTMLSlotElement(WebCore::HTMLSlotElement *this, void *a2)
{
  WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v3;
  void *v4;

  WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v3, v4);
}

void WebCore::HTMLSourceElement::~HTMLSourceElement(WebCore::HTMLSourceElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLSourceElement::~HTMLSourceElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  int v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (*((_BYTE *)this + 192))
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  v3 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v15 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 19);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 19) = 0;
  }
  *((_QWORD *)this + 16) = &off_1E33A0540;
  v5 = *((_QWORD *)this + 17);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = (WebCore::ScriptExecutionContext *)(v6 - 96);
      v8 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v8 == 1 || v8 == 2)
          ++*(_DWORD *)(v6 + 216);
      }
      else
      {
        *(_DWORD *)(v6 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject(v7, (WebCore::HTMLSourceElement *)((char *)this + 128));
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)v7, v9);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::HTMLSourceElement *)((char *)this + 128), a2);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = off_1E33AF7B0;
  *((_QWORD *)this + 15) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
}

uint64_t WebCore::HTMLSourceElement::asAttachmentAssociatedElement(WebCore::HTMLSourceElement *this)
{
  return (uint64_t)this + 112;
}

uint64_t WebCore::HTMLSourceElement::ref(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLSourceElement::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (this[6] == 2)
  {
    v3 = *((_WORD *)this + 15);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this + 14);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this, a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v3 = *((_WORD *)v2 + 15);
        }
        *((_WORD *)v2 + 15) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLSourceElement::refAttachmentAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLSourceElement::derefAttachmentAssociatedElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (this[6] == 2)
  {
    v3 = *((_WORD *)this + 15);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this + 14);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this, a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v3 = *((_WORD *)v2 + 15);
        }
        *((_WORD *)v2 + 15) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLSourceElement::attachmentAssociatedElementType(WebCore::HTMLSourceElement *this)
{
  return 2;
}

void `non-virtual thunk to'WebCore::HTMLSourceElement::~HTMLSourceElement(WebCore::HTMLSourceElement *this, void *a2)
{
  WebCore::HTMLSourceElement::~HTMLSourceElement((WebCore::HTMLSourceElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLSourceElement::~HTMLSourceElement((WebCore::HTMLSourceElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLSourceElement::~HTMLSourceElement((WebCore::HTMLSourceElement *)((char *)this - 128), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLSourceElement::~HTMLSourceElement((WebCore::HTMLSourceElement *)((char *)this - 128), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLSourceElement::asHTMLElement(WebCore::HTMLSourceElement *this)
{
  return (uint64_t)this - 112;
}

{
  return (uint64_t)this - 112;
}

uint64_t `non-virtual thunk to'WebCore::HTMLSourceElement::attachmentAssociatedElementType(WebCore::HTMLSourceElement *this)
{
  return 2;
}

uint64_t `non-virtual thunk to'WebCore::HTMLSourceElement::refAttachmentAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this - 88) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLSourceElement::derefAttachmentAssociatedElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 22) == 2)
  {
    v3 = *((_WORD *)this - 41);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 42);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 28), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
          v3 = *((_WORD *)v2 - 41);
        }
        *((_WORD *)v2 - 41) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 14) + 72))(v2 - 28);
      }
    }
  }
  else
  {
    *(this - 22) -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLSourceElement::ref(uint64_t this)
{
  *(_DWORD *)(this - 104) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLSourceElement::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 26) == 2)
  {
    v3 = *((_WORD *)this - 49);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 50);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 32), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
          v3 = *((_WORD *)v2 - 49);
        }
        *((_WORD *)v2 - 49) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 16) + 72))(v2 - 32);
      }
    }
  }
  else
  {
    *(this - 26) -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLStyleElement::startLoadingDynamicSheet(WebCore::HTMLStyleElement *this)
{
  return WebCore::InlineStyleSheetOwner::startLoadingDynamicSheet((uint64_t)this + 112, this);
}

void WebCore::HTMLSummaryElement::~HTMLSummaryElement(WebCore::HTMLSummaryElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLSummaryElement::hasCustomFocusLogic(WebCore::HTMLSummaryElement *this)
{
  return 1;
}

void WebCore::SummarySlotAssignment::~SummarySlotAssignment(WebCore::SummarySlotAssignment *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebCore::NamedSlotAssignment::Slot *v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E33A7C10;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          v6 = v4[1];
          v4[1] = 0;
          if (v6)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v6, a2);
            WTF::fastFree(v7, v8);
            v5 = *v4;
          }
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::NamedSlotAssignment::Slot *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = off_1E33A7C10;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            WebCore::NamedSlotAssignment::Slot::~Slot(v7, a2);
            WTF::fastFree(v8, v9);
            v6 = *v5;
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

unsigned int *WebCore::SummarySlotAssignment::hostChildElementDidChange(WebCore::SummarySlotAssignment *this, const WebCore::Element *a2, WebCore::ShadowRoot *a3)
{
  return WebCore::NamedSlotAssignment::didChangeSlot((unsigned int *)this, MEMORY[0x1E0CBF3B8], a3);
}

uint64_t WebCore::SummarySlotAssignment::slotNameForHostChild(WebCore::SummarySlotAssignment *this, const WebCore::Node *a2)
{
  return MEMORY[0x1E0CBF3B8];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLSelectElement::add(std::variant<WTF::RefPtr<WebCore::HTMLOptionElement,WTF::RawPtrTraits<WebCore::HTMLOptionElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptionElement>>,WTF::RefPtr<WebCore::HTMLOptGroupElement,WTF::RawPtrTraits<WebCore::HTMLOptGroupElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptGroupElement>>> const&,std::optional<std::variant<WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,int>> const&)::$_0,WebCore::HTMLSelectElement::add(std::variant<WTF::RefPtr<WebCore::HTMLOptionElement,WTF::RawPtrTraits<WebCore::HTMLOptionElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptionElement>>,WTF::RefPtr<WebCore::HTMLOptGroupElement,WTF::RawPtrTraits<WebCore::HTMLOptGroupElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptGroupElement>>> const&,std::optional<std::variant<WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,int>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,int> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLSelectElement::add(std::variant<WTF::RefPtr<WebCore::HTMLOptionElement,WTF::RawPtrTraits<WebCore::HTMLOptionElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptionElement>>,WTF::RefPtr<WebCore::HTMLOptGroupElement,WTF::RawPtrTraits<WebCore::HTMLOptGroupElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptGroupElement>>> const&,std::optional<std::variant<WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,int>> const&)::$_0,WebCore::HTMLSelectElement::add(std::variant<WTF::RefPtr<WebCore::HTMLOptionElement,WTF::RawPtrTraits<WebCore::HTMLOptionElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptionElement>>,WTF::RefPtr<WebCore::HTMLOptGroupElement,WTF::RawPtrTraits<WebCore::HTMLOptGroupElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptGroupElement>>> const&,std::optional<std::variant<WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,int>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,int> const&>(WebCore::HTMLSelectElement ***a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::HTMLOptionsCollection *v5;
  WebCore::HTMLOptionsCollection *v7;

  v2 = *a2;
  WebCore::HTMLSelectElement::options(**a1, (uint64_t *)&v7);
  v3 = WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt((uint64_t)v7 + 40, v7, v2);
  v4 = v3;
  if (v3
    && ((*(_WORD *)(v3 + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)))
  {
    __break(0xC471u);
    JUMPOUT(0x195C6E7D0);
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 4) == 1)
      (*(void (**)(WebCore::HTMLOptionsCollection *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 4);
  }
  return v4;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLSelectElement::add(std::variant<WTF::RefPtr<WebCore::HTMLOptionElement,WTF::RawPtrTraits<WebCore::HTMLOptionElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptionElement>>,WTF::RefPtr<WebCore::HTMLOptGroupElement,WTF::RawPtrTraits<WebCore::HTMLOptGroupElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptGroupElement>>> const&,std::optional<std::variant<WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,int>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLOptionElement,WTF::RawPtrTraits<WebCore::HTMLOptionElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptionElement>>,WTF::RefPtr<WebCore::HTMLOptGroupElement,WTF::RawPtrTraits<WebCore::HTMLOptGroupElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptGroupElement>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLSelectElement::add(std::variant<WTF::RefPtr<WebCore::HTMLOptionElement,WTF::RawPtrTraits<WebCore::HTMLOptionElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptionElement>>,WTF::RefPtr<WebCore::HTMLOptGroupElement,WTF::RawPtrTraits<WebCore::HTMLOptGroupElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptGroupElement>>> const&,std::optional<std::variant<WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,int>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLOptionElement,WTF::RawPtrTraits<WebCore::HTMLOptionElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptionElement>>,WTF::RefPtr<WebCore::HTMLOptGroupElement,WTF::RawPtrTraits<WebCore::HTMLOptGroupElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLOptGroupElement>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLSelectElement::optionToSelectFromChildChangeScope(WebCore::ContainerNode::ChildChange const&,WebCore::HTMLOptGroupElement *)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  *a1 = &off_1E33CDB10;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v8 = *(_WORD *)(v3 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v3 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v8 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v8 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v6 = *(_WORD *)(v4 + 30);
      if ((v6 & 0x400) == 0)
      {
        v7 = *(_WORD *)(v4 + 28);
        if ((v7 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
        }
        else
        {
          if ((v7 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v6 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v6 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLSelectElement::optionToSelectFromChildChangeScope(WebCore::ContainerNode::ChildChange const&,WebCore::HTMLOptGroupElement *)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  *(_QWORD *)this = &off_1E33CDB10;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v8 = *(_WORD *)(v3 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v3 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v8 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v8 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v6 = *(_WORD *)(v4 + 30);
      if ((v6 & 0x400) == 0)
      {
        v7 = *(_WORD *)(v4 + 28);
        if ((v7 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
        }
        else
        {
          if ((v7 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v6 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v6 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::HTMLSelectElement::optionToSelectFromChildChangeScope(WebCore::ContainerNode::ChildChange const&,WebCore::HTMLOptGroupElement *)::$_1,void>::call(uint64_t a1)
{
  WebCore::HTMLSelectElement *v1;
  void *v2;
  uint64_t v3;
  int v4;
  _BYTE v5[20];
  __int128 v6;
  char v7;

  if (*(_QWORD *)(a1 + 8))
  {
    v1 = *(WebCore::HTMLSelectElement **)(a1 + 24);
    v2 = (void *)WebCore::HTMLOptionElement::index(*(WebCore::HTMLOptionElement **)(a1 + 8));
    WebCore::HTMLSelectElement::selectOption(v1, v2, 0);
    return;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) & 0xFFFFFFFFFFFFLL;
    if (v3)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
        *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v4;
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40)
                                                                                               + 8)
                                                                                   + 1944)
                                                                       + 24)
                                                           + 8)
                                               + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v6) = 0;
          v7 = 0;
          v5[0] = 0;
          v5[16] = 0;
          WebCore::RenderObject::issueRepaint(v3, &v6, 0, 0, (uint64_t)v5);
          v4 = *(_DWORD *)(v3 + 16);
        }
        if (v4)
        {
          *(_DWORD *)(v3 + 16) = v4 - 1;
          return;
        }
        __break(0xC471u);
      }
      JUMPOUT(0x195C6EB28);
    }
  }
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result;
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)result;
    v5 = *(_QWORD *)result + 8 * v3;
    do
    {
      result = *v4;
      *v4 = 0;
      if (result)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)result);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)result));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)result);
          v8 = *(unsigned int *)(result + 28);
          if ((_DWORD)v8)
          {
            v11 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v8));
            result = v11;
          }
          v9 = *(WTF **)(result + 16);
          if (v9)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v10 = result;
            WTF::fastFree(v9, a2);
            result = v10;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v4;
    }
    while (v4 != (uint64_t *)v5);
  }
  *(_DWORD *)(v2 + 12) = 0;
  return result;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLElement*>(unsigned int *result, unsigned int **a2)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  unsigned int v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 <= v4)
    goto LABEL_27;
  if (v8 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
  v3[2] = v8;
  *(_QWORD *)v3 = v10;
  if ((_DWORD)v5)
  {
    v12 = (WTF *)((char *)v9 + 8 * v5);
    v13 = v9;
    do
    {
      v14 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)v10 = v14;
      v15 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr((unsigned int *)v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, (unsigned int *)v15));
        if (!v17)
        {
          v23 = v12;
          v24 = v13;
          v18 = v10;
          atomic_store(1u, (unsigned int *)v15);
          v25 = (WTF *)v15;
          v19 = *(unsigned int *)(v15 + 28);
          if ((_DWORD)v19)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v19));
          v20 = (WTF *)*((_QWORD *)v25 + 2);
          if (v20)
          {
            *((_QWORD *)v25 + 2) = 0;
            *((_DWORD *)v25 + 6) = 0;
            WTF::fastFree(v20, v11);
          }
          WTF::fastFree(v25, v11);
          v10 = v18;
          v12 = v23;
          v13 = v24;
        }
      }
      v10 = (WTF *)((char *)v10 + 8);
      v13 = (WTF *)((char *)v13 + 8);
    }
    while (v13 != v12);
    v10 = *(WTF **)v3;
    if (!v9)
      goto LABEL_11;
LABEL_24:
    if (v10 == v9)
    {
      *(_QWORD *)v3 = 0;
      v3[2] = 0;
    }
    WTF::fastFree(v9, v11);
    v9 = *(WTF **)v3;
    goto LABEL_27;
  }
  if (v9)
    goto LABEL_24;
LABEL_11:
  v9 = v10;
LABEL_27:
  v21 = v3[3];
  result = *a2;
  if (*a2)
  {
    result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)result);
    if (result)
    {
      do
        v22 = __ldaxr(result);
      while (__stlxr(v22 + 1, result));
    }
  }
  *((_QWORD *)v9 + v21) = result;
  ++v3[3];
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  WTF *v10;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
      v6 = 8 * v4 - 8 * a2;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            v8 = *(_WORD *)(v7 + 30);
            if ((v8 & 0x400) == 0)
            {
              v9 = *(_WORD *)(v7 + 28);
              if ((v9 & 0xF000) == 0x9000)
              {
                result = WebCore::Document::removedLastRef((WebCore::Document *)v7, (void *)a2);
              }
              else
              {
                if ((v9 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
                  v8 = *(_WORD *)(v7 + 30);
                }
                *(_WORD *)(v7 + 30) = v8 | 0x400;
                result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
              }
            }
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v10 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v10, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v10)
        result = (unsigned int *)memcpy(result, v10, 8 * v4);
    }
    if (v10)
    {
      if (*(WTF **)v3 == v10)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v10, (void *)a2);
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLSlotElement::assign(WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>> &&)::$_0::operator() const(std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>&)::{lambda(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>&)#1},WebCore::HTMLSlotElement::assign(WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>> &)::WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>> &&::operator() const($_0)::{lambda(WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>> &>@<X0>(unsigned int *result@<X0>, WebCore::Document **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t **v5;
  uint64_t *v6;
  WebCore::Document *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WebCore::Document *v14;
  int v15;
  _BOOL4 v16;
  char v17;
  uint64_t *v18;
  WebCore::Document *v19;
  void *v20;
  WebCore::Document *v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;
  WebCore::Document *v28;

  v5 = **(uint64_t ****)result;
  v6 = *v5;
  v7 = *a2;
  if (*a2)
    *((_DWORD *)v7 + 6) += 2;
  v8 = *v6;
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(WebCore::Document **)(v8 + 8 * v13);
    if (v14 == v7)
    {
      v16 = 1;
      if (!v7)
        goto LABEL_13;
      goto LABEL_11;
    }
    v15 = 1;
    do
    {
      v16 = v14 != 0;
      if (!v14)
        break;
      v13 = (v13 + v15) & v9;
      v14 = *(WebCore::Document **)(v8 + 8 * v13);
      ++v15;
    }
    while (v14 != v7);
  }
  else
  {
    v16 = 0;
  }
  if (!v7)
    goto LABEL_13;
LABEL_11:
  if (*((_DWORD *)v7 + 6) == 2)
  {
    v22 = *((_WORD *)v7 + 15);
    if ((v22 & 0x400) == 0)
    {
      v23 = *((_WORD *)v7 + 14);
      if ((v23 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef(v7, a2);
      }
      else
      {
        if ((v23 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v7 + 20) + 16))(*((_QWORD *)v7 + 20));
          v22 = *((_WORD *)v7 + 15);
        }
        *((_WORD *)v7 + 15) = v22 | 0x400;
        result = (unsigned int *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
LABEL_13:
  if (v16)
  {
    v17 = 0;
    *a3 = 0;
  }
  else
  {
    v18 = *v5;
    v19 = *a2;
    if (*a2)
      *((_DWORD *)v19 + 6) += 2;
    v28 = v19;
    WTF::HashTable<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(v18, (uint64_t *)&v28, (uint64_t)&v27);
    v21 = v28;
    v28 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        v24 = *((_WORD *)v21 + 15);
        if ((v24 & 0x400) == 0)
        {
          v25 = *((_WORD *)v21 + 14);
          if ((v25 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef(v21, v20);
          }
          else
          {
            if ((v25 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v21 + 20) + 16))(*((_QWORD *)v21 + 20));
              v24 = *((_WORD *)v21 + 15);
            }
            *((_WORD *)v21 + 15) = v24 | 0x400;
            (*(void (**)(WebCore::Document *))(*(_QWORD *)v21 + 72))(v21);
          }
        }
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    result = (unsigned int *)*a2;
    if (*a2)
    {
      result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)result);
      if (result)
      {
        do
          v26 = __ldaxr(result);
        while (__stlxr(v26 + 1, result));
      }
    }
    *(_QWORD *)a3 = result;
    v17 = 1;
  }
  a3[8] = v17;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLSlotElement::assign(WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>> &&)::$_0::operator() const(std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>&)::{lambda(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>&)#1},WebCore::HTMLSlotElement::assign(WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>> &)::WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>>> &&::operator() const($_0)::{lambda(WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>> &>@<X0>(uint64_t result@<X0>, WebCore::Document **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t **v5;
  uint64_t *v6;
  WebCore::Document *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WebCore::Document *v14;
  int v15;
  _BOOL4 v16;
  char v17;
  uint64_t *v18;
  WebCore::Document *v19;
  void *v20;
  WebCore::Document *v21;
  WebCore::Document *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WebCore::Document *v37;

  v5 = *(uint64_t ***)(*(_QWORD *)result + 8);
  v6 = *v5;
  v7 = *a2;
  if (*a2)
    *((_DWORD *)v7 + 6) += 2;
  v8 = *v6;
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(WebCore::Document **)(v8 + 8 * v13);
    if (v14 == v7)
    {
      v16 = 1;
      if (!v7)
        goto LABEL_13;
      goto LABEL_11;
    }
    v15 = 1;
    do
    {
      v16 = v14 != 0;
      if (!v14)
        break;
      v13 = (v13 + v15) & v9;
      v14 = *(WebCore::Document **)(v8 + 8 * v13);
      ++v15;
    }
    while (v14 != v7);
  }
  else
  {
    v16 = 0;
  }
  if (!v7)
    goto LABEL_13;
LABEL_11:
  if (*((_DWORD *)v7 + 6) == 2)
  {
    v30 = *((_WORD *)v7 + 15);
    if ((v30 & 0x400) == 0)
    {
      v31 = *((_WORD *)v7 + 14);
      if ((v31 & 0xF000) == 0x9000)
      {
        result = (uint64_t)WebCore::Document::removedLastRef(v7, a2);
      }
      else
      {
        if ((v31 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v7 + 20) + 16))(*((_QWORD *)v7 + 20));
          v30 = *((_WORD *)v7 + 15);
        }
        *((_WORD *)v7 + 15) = v30 | 0x400;
        result = (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
LABEL_13:
  if (v16)
  {
    v17 = 0;
    *a3 = 0;
  }
  else
  {
    v18 = *v5;
    v19 = *a2;
    if (*a2)
      *((_DWORD *)v19 + 6) += 2;
    v37 = v19;
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(v18, (uint64_t *)&v37, (uint64_t)&v36);
    v21 = v37;
    v37 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        v32 = *((_WORD *)v21 + 15);
        if ((v32 & 0x400) == 0)
        {
          v33 = *((_WORD *)v21 + 14);
          if ((v33 & 0xF000) == 0x9000)
          {
            result = (uint64_t)WebCore::Document::removedLastRef(v21, v20);
          }
          else
          {
            if ((v33 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v21 + 20) + 16))(*((_QWORD *)v21 + 20));
              v32 = *((_WORD *)v21 + 15);
            }
            *((_WORD *)v21 + 15) = v32 | 0x400;
            result = (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v21 + 72))(v21);
          }
        }
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    v22 = *a2;
    if (*a2)
    {
      if ((*((_QWORD *)v22 + 2) & 0xFFFFFFFFFFFFLL) == 0)
      {
        result = WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)result = 1;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 8) = v22;
        *(_BYTE *)(result + 32) = 0;
        v24 = *((_QWORD *)v22 + 2);
        *((_QWORD *)v22 + 2) = v24 & 0xFFFF000000000000 | result;
        v25 = v24 & 0xFFFFFFFFFFFFLL;
        if ((v24 & 0xFFFFFFFFFFFFLL) != 0)
        {
          do
          {
            v26 = __ldaxr((unsigned int *)v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, (unsigned int *)v25));
          if (!v27)
          {
            atomic_store(1u, (unsigned int *)v25);
            v34 = *(unsigned int *)(v25 + 28);
            if ((_DWORD)v34)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v34));
            v35 = *(WTF **)(v25 + 16);
            if (v35)
            {
              *(_QWORD *)(v25 + 16) = 0;
              *(_DWORD *)(v25 + 24) = 0;
              WTF::fastFree(v35, v23);
            }
            result = WTF::fastFree((WTF *)v25, v23);
          }
        }
      }
      v28 = (unsigned int *)(*((_QWORD *)v22 + 2) & 0xFFFFFFFFFFFFLL);
      if (v28)
      {
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
      }
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)a3 = v28;
    v17 = 1;
  }
  a3[8] = v17;
  return result;
}

BOOL WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::Node*>(WebCore::Node* const&)::{lambda(WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>(uint64_t *a1, uint64_t **a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *i;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *((unsigned int *)a1 + 3);
  if (v3 <= a3)
  {
    return 0;
  }
  else
  {
    v5 = *a1;
    v6 = **a2;
    if (v6)
    {
      v7 = 1;
      while (1)
      {
        v8 = *(_QWORD *)(v5 + 8 * a3);
        if (v8)
        {
          if (*(_QWORD *)(v8 + 8) == v6)
            break;
        }
        v7 = ++a3 < v3;
        if (v3 == a3)
          return 0;
      }
LABEL_14:
      i = (_QWORD *)(v5 + 8 * a3);
      *i = 0;
      do
      {
        v11 = __ldaxr((unsigned int *)v8);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v8));
      if (!v12)
      {
        v18 = i;
        atomic_store(1u, (unsigned int *)v8);
        v14 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v14)
        {
          v17 = v8;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v14));
          v8 = v17;
        }
        v15 = *(WTF **)(v8 + 16);
        if (v15)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          v16 = v8;
          WTF::fastFree(v15, a2);
          v8 = v16;
        }
        WTF::fastFree((WTF *)v8, a2);
        i = v18;
      }
    }
    else
    {
      v9 = a3 + 1;
      v7 = 1;
      for (i = (_QWORD *)(v5 + 8 * a3); ; ++i)
      {
        v8 = *i;
        if (!*i)
          break;
        if (!*(_QWORD *)(v8 + 8))
        {
          a3 = v9 - 1;
          goto LABEL_14;
        }
        v7 = v9++ < v3;
        if (v9 - v3 == 1)
          return 0;
      }
      *i = 0;
    }
    WTF::VectorMover<false,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::move((uint64_t)(i + 1), (uint64_t *)(*a1 + 8 * *((unsigned int *)a1 + 3)), i);
    --*((_DWORD *)a1 + 3);
  }
  return v7;
}

uint64_t WTF::VectorMover<false,WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask>::move(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  if ((WTF::StringImpl *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      v8 = (WTF::StringImpl *)v5[1];
      v5[1] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      result = *v5;
      *v5 = 0;
      if (result)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)result));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)result);
          v11 = *(unsigned int *)(result + 28);
          if ((_DWORD)v11)
          {
            v14 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v11));
            result = v14;
          }
          v12 = *(WTF **)(result + 16);
          if (v12)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v13 = result;
            WTF::fastFree(v12, a2);
            result = v13;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != (uint64_t *)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * *(unsigned int *)(result + 12));
      v9 = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = v9;
      result = WTF::VectorMover<false,WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask>::move((uint64_t)v7, v8, v9);
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v10);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLStyleElement::addSubresourceAttributeURLs(WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>> &)::$_0,BOOL,WebCore::CachedResource const&>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v7[24];

  v3 = *(uint64_t **)(a1 + 8);
  v4 = a2 + 160;
  if ((*(_BYTE *)(a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 160));
    *(_BYTE *)(a2 + 344) |= 1u;
  }
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(v3, v4, a3, (uint64_t)v7);
  return 0;
}

uint64_t WebCore::HTMLTableCaptionElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CE608;
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::HTMLTableCaptionElement::collectPresentationalHintsForAttribute(WTF::StringImpl *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  if (*(_QWORD *)a2 != WebCore::HTMLNames::alignAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  if (*(_QWORD *)a3)
  {
    if (*(_DWORD *)(*(_QWORD *)a3 + 4))
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 82, (uint64_t)a3);
  }
  return this;
}

uint64_t WebCore::HTMLTableCellElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CDBC0;
  *a3 = result;
  return result;
}

uint64_t WebCore::clampHTMLNonNegativeIntegerToRange(uint64_t *a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  WebCore::parseHTMLNonNegativeInteger(a1, a2, &v4);
  if (v5 == 1)
    goto LABEL_4;
  if (v5)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_4:
    if (v4 == 1)
      return 1000;
    else
      return 1;
  }
  v3 = v4;
  if (v4 <= 1)
    v3 = 1;
  if (v3 >= 0x3E8)
    return 1000;
  else
    return v3;
}

uint64_t WebCore::HTMLTableCellElement::rowSpanForBindings(WebCore::HTMLTableCellElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::rowspanAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::rowspanAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::rowspanAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (v7)
  {
    v8 = *(uint64_t **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v8, v9, &v12);
  if (HIDWORD(v12) == 1)
    goto LABEL_15;
  if (HIDWORD(v12))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
    if ((_DWORD)v12 == 1)
      return 65534;
    else
      return 1;
  }
  if (v12 >= 0xFFFE)
    v11 = 65534;
  else
    v11 = v12;
  if ((int)v12 < 0)
    return 1;
  else
    return v11;
}

uint64_t WebCore::HTMLTableCellElement::cellIndex(WebCore::HTMLTableCellElement *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v1 = *((_QWORD *)this + 4);
  if (!v1
    || (~*(unsigned __int16 *)(v1 + 28) & 0x18) != 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
  {
    return 0xFFFFFFFFLL;
  }
  v3 = *((_QWORD *)this + 6);
  result = 0;
  for (i = v3 & 0xFFFFFFFFFFFFLL; i; i = *(_QWORD *)(i + 48) & 0xFFFFFFFFFFFFLL)
  {
    if ((*(_WORD *)(i + 28) & 0x10) != 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(i + 96) + 24);
      if (v5 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v5 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
        result = (result + 1);
    }
  }
  return result;
}

uint64_t WebCore::HTMLTableCellElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  BOOL v6;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 <= 0x1BA)
  {
    v4 = v2 - 373 > 0x3B || ((1 << (v2 - 117)) & 0x800004000000001) == 0;
    if (!v4 || v2 == 367 || v2 == 286)
      return result;
    return 0;
  }
  if (v2 - 898 > 0x33 || ((1 << (v2 + 126)) & 0xA000001000001) == 0)
  {
    v6 = v2 - 443 > 0x3E || ((1 << (v2 + 69)) & 0x6000000000000001) == 0;
    if (v6 && v2 != 600)
      return 0;
  }
  return result;
}

uint64_t WebCore::HTMLTablePartElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 <= 0x1BA)
  {
    v4 = v2 - 373 > 0x3B || ((1 << (v2 - 117)) & 0x800004000000001) == 0;
    if (!v4 || v2 == 367 || v2 == 286)
      return result;
    return 0;
  }
  if (v2 - 898 > 0x33 || ((1 << (v2 + 126)) & 0xA000000000001) == 0)
  {
    v6 = v2 - 443;
    v7 = v6 > 0x3E;
    v8 = (1 << v6) & 0x6000000000000001;
    if (v7 || v8 == 0)
      return 0;
  }
  return result;
}

int *WebCore::HTMLTableCellElement::collectPresentationalHintsForAttribute(WebCore::HTMLTableCellElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  int *result;
  int *v14;
  int v15;
  WebCore::HTMLTableCellElement *v16;
  WebCore::MutableStyleProperties *v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int *v24;
  char v25;
  char v26;

  v6 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v6 == 504)
  {
    v10 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v11 = *(unsigned __int16 **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v11 = 0;
      v12 = 0x100000000;
    }
    result = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v24, v11, v12, 0);
    if (!v26)
      return result;
    v14 = v24;
    if (*(double *)&v24 == 0.0)
      return result;
    if (v25)
      v15 = 6;
    else
      v15 = 3;
    v16 = this;
    v17 = a4;
    v18 = 393;
    return WebCore::StyledElement::addPropertyToPresentationalHintStyle(*(double *)&v14, (uint64_t)v16, v17, v18, v15);
  }
  if (v6 == 922)
  {
    v19 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v20 = *(unsigned __int16 **)(v19 + 8);
      v21 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v20 = 0;
      v21 = 0x100000000;
    }
    result = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v24, v20, v21, 0);
    if (!v26)
      return result;
    v14 = v24;
    if (*(double *)&v24 == 0.0)
      return result;
    if (v25)
      v15 = 6;
    else
      v15 = 3;
    v16 = this;
    v17 = a4;
    v18 = 450;
    return WebCore::StyledElement::addPropertyToPresentationalHintStyle(*(double *)&v14, (uint64_t)v16, v17, v18, v15);
  }
  if (v6 != 600)
    return (int *)WebCore::HTMLTablePartElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  v7 = 0x12F0u;
  WebCore::staticCSSValuePool[v7] += 2;
  v24 = &WebCore::staticCSSValuePool[v7];
  WebCore::MutableStyleProperties::setProperty(a4, 294, &v24, 0);
  v9 = v24;
  *(double *)&v24 = 0.0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
    else
      *v9 -= 2;
  }
  v22 = 0x1394u;
  WebCore::staticCSSValuePool[v22] += 2;
  v24 = &WebCore::staticCSSValuePool[v22];
  WebCore::MutableStyleProperties::setProperty(a4, 270, &v24, 0);
  result = v24;
  *(double *)&v24 = 0.0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v23);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLTablePartElement::collectPresentationalHintsForAttribute(WTF::StringImpl *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  WebCore::MutableStyleProperties *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  WebCore::MutableStyleProperties *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  WTF::StringImpl *v52;
  uint64_t v53;
  char v54;
  WTF::StringImpl *v55;
  _DWORD *v56;
  int v57;
  int v58;
  __int128 v59;
  __int128 v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  int *v64;
  _DWORD *v65;
  char v66;

  v6 = this;
  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 > 0x174)
  {
    if (v7 != 898)
    {
      if (v7 != 504)
      {
        if (v7 == 373)
          return (WTF::StringImpl *)WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)this, a4, 61, (uint64_t *)a3);
        return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
      }
      v18 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v20 = *(unsigned int *)(v18 + 4);
        if ((_DWORD)v20)
        {
          this = (WTF::StringImpl *)WebCore::parseHTMLDimensionInternal((uint64_t)&v64, *(unsigned __int16 **)(v18 + 8), v20 | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32), 0);
          if (v66)
          {
            if ((_BYTE)v65)
              v21 = 6;
            else
              v21 = 3;
            return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle(*(double *)&v64, (uint64_t)v6, a4, 393, v21);
          }
        }
      }
      return this;
    }
    v15 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_18;
    v22 = *(_DWORD *)(v15 + 4);
    if (v22 == 3)
    {
      v30 = *(_QWORD *)(v15 + 8);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v30 & 0xDF) != 0x54 || (*(_BYTE *)(v30 + 1) & 0xDF) != 0x4F)
          goto LABEL_18;
        v31 = *(unsigned __int8 *)(v30 + 2);
      }
      else
      {
        if ((*(_WORD *)v30 & 0xFFDF) != 0x54 || (*(_WORD *)(v30 + 2) & 0xFFDF) != 0x4F)
          goto LABEL_18;
        v31 = *(unsigned __int16 *)(v30 + 4);
      }
      if ((v31 & 0xFFFFFFDF) != 0x50)
        goto LABEL_18;
      v32 = 0x1008u;
    }
    else
    {
      if (v22 != 6)
      {
        if (v22 == 8)
        {
          v23 = *(_QWORD *)(v15 + 8);
          if ((*(_BYTE *)(v15 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v23 & 0xDF) != 0x42
              || (*(_BYTE *)(v23 + 1) & 0xDF) != 0x41
              || (*(_BYTE *)(v23 + 2) & 0xDF) != 0x53
              || (*(_BYTE *)(v23 + 3) & 0xDF) != 0x45
              || (*(_BYTE *)(v23 + 4) & 0xDF) != 0x4C
              || (*(_BYTE *)(v23 + 5) & 0xDF) != 0x49
              || (*(_BYTE *)(v23 + 6) & 0xDF) != 0x4E)
            {
              goto LABEL_18;
            }
            v24 = *(unsigned __int8 *)(v23 + 7);
          }
          else
          {
            if ((*(_WORD *)v23 & 0xFFDF) != 0x42
              || (*(_WORD *)(v23 + 2) & 0xFFDF) != 0x41
              || (*(_WORD *)(v23 + 4) & 0xFFDF) != 0x53
              || (*(_WORD *)(v23 + 6) & 0xFFDF) != 0x45
              || (*(_WORD *)(v23 + 8) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v23 + 10) & 0xFFDF) != 0x49
              || (*(_WORD *)(v23 + 12) & 0xFFDF) != 0x4E)
            {
              goto LABEL_18;
            }
            v24 = *(unsigned __int16 *)(v23 + 14);
          }
          if ((v24 & 0xFFFFFFDF) == 0x45)
          {
            v25 = &WebCore::staticCSSValuePool[4080];
            dword_1ECE8CB68 += 2;
LABEL_83:
            v64 = v25;
LABEL_84:
            v38 = a4;
            v39 = 288;
LABEL_101:
            WebCore::MutableStyleProperties::setProperty(v38, v39, &v64, 0);
            this = (WTF::StringImpl *)v64;
            v64 = 0;
            if (!this)
              return this;
            v45 = *(_DWORD *)this - 2;
            if (*(_DWORD *)this == 2)
              return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v44);
LABEL_136:
            *(_DWORD *)this = v45;
            return this;
          }
        }
LABEL_18:
        v16 = a4;
        v17 = 288;
        return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v16, v17, (uint64_t)a3);
      }
      v35 = *(_QWORD *)(v15 + 8);
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        v36 = *(_BYTE *)v35 & 0xDF;
        if (v36 == 77)
        {
          if ((*(_BYTE *)(v35 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v35 + 2) & 0xDF) != 0x44
            || (*(_BYTE *)(v35 + 3) & 0xDF) != 0x44
            || (*(_BYTE *)(v35 + 4) & 0xDF) != 0x4C)
          {
            goto LABEL_18;
          }
          v37 = *(unsigned __int8 *)(v35 + 5);
          goto LABEL_81;
        }
        if (v36 != 66
          || (*(_BYTE *)(v35 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v35 + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(v35 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v35 + 4) & 0xDF) != 0x4F)
        {
          goto LABEL_18;
        }
        v47 = *(unsigned __int8 *)(v35 + 5);
      }
      else
      {
        v58 = *(_WORD *)v35 & 0xFFDF;
        if (v58 == 77)
        {
          if ((*(_WORD *)(v35 + 2) & 0xFFDF) != 0x49
            || (*(_WORD *)(v35 + 4) & 0xFFDF) != 0x44
            || (*(_WORD *)(v35 + 6) & 0xFFDF) != 0x44
            || (*(_WORD *)(v35 + 8) & 0xFFDF) != 0x4C)
          {
            goto LABEL_18;
          }
          v37 = *(unsigned __int16 *)(v35 + 10);
LABEL_81:
          if ((v37 & 0xFFFFFFDF) == 0x45)
          {
            v25 = &WebCore::staticCSSValuePool[4084];
            dword_1ECE8CB78 += 2;
            goto LABEL_83;
          }
          goto LABEL_18;
        }
        if (v58 != 66
          || (*(_WORD *)(v35 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v35 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(v35 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v35 + 8) & 0xFFDF) != 0x4F)
        {
          goto LABEL_18;
        }
        v47 = *(unsigned __int16 *)(v35 + 10);
      }
      if ((v47 & 0xFFFFFFDF) != 0x4D)
        goto LABEL_18;
      v32 = 0x100Cu;
    }
    WebCore::staticCSSValuePool[v32] += 2;
    v64 = &WebCore::staticCSSValuePool[v32];
    goto LABEL_84;
  }
  if (v7 == 286)
  {
    v19 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
    {
LABEL_22:
      v16 = a4;
      v17 = 249;
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v16, v17, (uint64_t)a3);
    }
    switch(*(_DWORD *)(v19 + 4))
    {
      case 4:
        v40 = *(_QWORD *)(v19 + 8);
        if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v40 & 0xDF) != 0x4C
            || (*(_BYTE *)(v40 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v40 + 2) & 0xDF) != 0x46)
          {
            goto LABEL_22;
          }
          v41 = *(unsigned __int8 *)(v40 + 3);
        }
        else
        {
          if ((*(_WORD *)v40 & 0xFFDF) != 0x4C
            || (*(_WORD *)(v40 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v40 + 4) & 0xFFDF) != 0x46)
          {
            goto LABEL_22;
          }
          v41 = *(unsigned __int16 *)(v40 + 6);
        }
        if ((v41 & 0xFFFFFFDF) != 0x54)
          goto LABEL_22;
        v29 = 0x1028u;
        goto LABEL_100;
      case 5:
        v42 = *(_QWORD *)(v19 + 8);
        if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v42 & 0xDF) != 0x52
            || (*(_BYTE *)(v42 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v42 + 2) & 0xDF) != 0x47
            || (*(_BYTE *)(v42 + 3) & 0xDF) != 0x48)
          {
            goto LABEL_22;
          }
          v43 = *(unsigned __int8 *)(v42 + 4);
        }
        else
        {
          if ((*(_WORD *)v42 & 0xFFDF) != 0x52
            || (*(_WORD *)(v42 + 2) & 0xFFDF) != 0x49
            || (*(_WORD *)(v42 + 4) & 0xFFDF) != 0x47
            || (*(_WORD *)(v42 + 6) & 0xFFDF) != 0x48)
          {
            goto LABEL_22;
          }
          v43 = *(unsigned __int16 *)(v42 + 8);
        }
        if ((v43 & 0xFFFFFFDF) != 0x54)
          goto LABEL_22;
        v29 = 0x102Cu;
        goto LABEL_100;
      case 6:
        v26 = *(_QWORD *)(v19 + 8);
        if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        {
          v27 = *(_BYTE *)v26 & 0xDF;
          if (v27 == 77)
          {
            if ((*(_BYTE *)(v26 + 1) & 0xDF) != 0x49
              || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x44
              || (*(_BYTE *)(v26 + 3) & 0xDF) != 0x44
              || (*(_BYTE *)(v26 + 4) & 0xDF) != 0x4C)
            {
              goto LABEL_22;
            }
            v28 = *(unsigned __int8 *)(v26 + 5);
            goto LABEL_53;
          }
          if (v27 != 67
            || (*(_BYTE *)(v26 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x4E
            || (*(_BYTE *)(v26 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(v26 + 4) & 0xDF) != 0x45)
          {
            goto LABEL_22;
          }
          v46 = *(unsigned __int8 *)(v26 + 5);
        }
        else
        {
          v57 = *(_WORD *)v26 & 0xFFDF;
          if (v57 == 77)
          {
            if ((*(_WORD *)(v26 + 2) & 0xFFDF) != 0x49
              || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x44
              || (*(_WORD *)(v26 + 6) & 0xFFDF) != 0x44
              || (*(_WORD *)(v26 + 8) & 0xFFDF) != 0x4C)
            {
              goto LABEL_22;
            }
            v28 = *(unsigned __int16 *)(v26 + 10);
LABEL_53:
            if ((v28 & 0xFFFFFFDF) != 0x45)
              goto LABEL_22;
            goto LABEL_54;
          }
          if (v57 != 67
            || (*(_WORD *)(v26 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v26 + 6) & 0xFFDF) != 0x54
            || (*(_WORD *)(v26 + 8) & 0xFFDF) != 0x45)
          {
            goto LABEL_22;
          }
          v46 = *(unsigned __int16 *)(v26 + 10);
        }
        if ((v46 & 0xFFFFFFDF) != 0x52)
          goto LABEL_22;
LABEL_54:
        v29 = 0x1030u;
        goto LABEL_100;
      case 9:
        v33 = *(_QWORD *)(v19 + 8);
        if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v33 & 0xDF) != 0x41
            || (*(_BYTE *)(v33 + 1) & 0xDF) != 0x42
            || (*(_BYTE *)(v33 + 2) & 0xDF) != 0x53
            || (*(_BYTE *)(v33 + 3) & 0xDF) != 0x4D
            || (*(_BYTE *)(v33 + 4) & 0xDF) != 0x49
            || (*(_BYTE *)(v33 + 5) & 0xDF) != 0x44
            || (*(_BYTE *)(v33 + 6) & 0xDF) != 0x44
            || (*(_BYTE *)(v33 + 7) & 0xDF) != 0x4C)
          {
            goto LABEL_22;
          }
          v34 = *(unsigned __int8 *)(v33 + 8);
        }
        else
        {
          if ((*(_WORD *)v33 & 0xFFDF) != 0x41
            || (*(_WORD *)(v33 + 2) & 0xFFDF) != 0x42
            || (*(_WORD *)(v33 + 4) & 0xFFDF) != 0x53
            || (*(_WORD *)(v33 + 6) & 0xFFDF) != 0x4D
            || (*(_WORD *)(v33 + 8) & 0xFFDF) != 0x49
            || (*(_WORD *)(v33 + 10) & 0xFFDF) != 0x44
            || (*(_WORD *)(v33 + 12) & 0xFFDF) != 0x44
            || (*(_WORD *)(v33 + 14) & 0xFFDF) != 0x4C)
          {
            goto LABEL_22;
          }
          v34 = *(unsigned __int16 *)(v33 + 16);
        }
        if ((v34 & 0xFFFFFFDF) != 0x45)
          goto LABEL_22;
        v29 = 0x1020u;
LABEL_100:
        WebCore::staticCSSValuePool[v29] += 2;
        v64 = &WebCore::staticCSSValuePool[v29];
        v38 = a4;
        v39 = 249;
        goto LABEL_101;
      default:
        goto LABEL_22;
    }
  }
  if (v7 != 367)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  v8 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v9 = *(unsigned __int8 **)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if (!(_DWORD)v10)
        return this;
      while (1)
      {
        v11 = *v9;
        v12 = v11 > 0x20;
        v13 = (1 << v11) & 0x100003600;
        if (v12 || v13 == 0)
          break;
        ++v9;
        if (!--v10)
          return this;
      }
    }
    else
    {
      if (!(_DWORD)v10)
        return this;
      v48 = 2 * v10;
      while (1)
      {
        v49 = *(unsigned __int16 *)v9;
        v12 = v49 > 0x20;
        v50 = (1 << v49) & 0x100003600;
        if (v12 || v50 == 0)
          break;
        v9 += 2;
        v48 -= 2;
        if (!v48)
          return this;
      }
    }
    WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), a3, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)&v61);
    v52 = v61;
    if (v61)
      *(_DWORD *)v61 += 2;
    v61 = 0;
    v60 = v62;
    LODWORD(v62) = v62 & 0xFFFFFFFE;
    v59 = v63;
    v53 = WTF::fastCompactMalloc((WTF *)0x78);
    *(_DWORD *)v53 = 2;
    v54 = *(_BYTE *)(v53 + 6);
    *(_WORD *)(v53 + 4) = 2048;
    *(_BYTE *)(v53 + 6) = v54 & 0xFC;
    *(_QWORD *)(v53 + 8) = v52;
    *(_QWORD *)(v53 + 16) = v52;
    *(_OWORD *)(v53 + 24) = v60;
    *(_OWORD *)(v53 + 40) = v59;
    *(_BYTE *)(v53 + 56) = 0;
    *(_BYTE *)(v53 + 64) = 0;
    *(_QWORD *)(v53 + 72) = 0;
    *(_BYTE *)(v53 + 80) = 0;
    *(_QWORD *)(v53 + 88) = 0;
    *(_BYTE *)(v53 + 96) = 0;
    *(_QWORD *)(v53 + 104) = 0;
    *(_BYTE *)(v53 + 112) = 0;
    LOWORD(v64) = 62;
    v65 = (_DWORD *)v53;
    WebCore::MutableStyleProperties::setProperty(a4, (unsigned __int16 *)&v64, 0);
    v56 = v65;
    v65 = 0;
    if (v56)
    {
      if (*v56 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v55);
      else
        *v56 -= 2;
    }
    this = v61;
    v61 = 0;
    if (this)
    {
      v45 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v55);
      goto LABEL_136;
    }
  }
  return this;
}

WebCore::MutableStyleProperties *WebCore::HTMLTableCellElement::additionalPresentationalHintStyle(WebCore::HTMLTableCellElement *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  __int16 v3;
  WebCore::MutableStyleProperties *v4;
  WebCore::MutableStyleProperties *v6;
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  int *v12;
  WebCore::MutableStyleProperties *v13;
  int *v14;
  int v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  int *v19;
  int *v20;
  WTF::StringImpl *v21;
  int *v22;
  WTF::StringImpl *v23;
  int *v24;
  WebCore::MutableStyleProperties *v25;
  int v26;
  int *v27;
  int *v28;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 8) == 0)
    return 0;
  while ((v3 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (v2)
    {
      v3 = *(_WORD *)(v2 + 28);
      if ((v3 & 8) != 0)
        continue;
    }
    return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *(WebCore::MutableStyleProperties **)(v2 + 128);
  if (!v4)
  {
    v6 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    v4 = v6;
    *(_QWORD *)v6 = 0x900000001;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = (char *)v6 + 32;
    *((_QWORD *)v6 + 3) = 4;
    v7 = *(_DWORD *)(v2 + 116);
    switch(v7)
    {
      case 0:
        if (!*(_BYTE *)(v2 + 112))
          goto LABEL_17;
        dword_1ECE88BF8 += 2;
        v28 = &dword_1ECE88BF8;
        WebCore::MutableStyleProperties::setProperty(v6, 485, &v28, 0);
        v22 = v28;
        v28 = 0;
        if (v22)
        {
          if (*v22 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v21);
          else
            *v22 -= 2;
        }
        v20 = &WebCore::staticCSSValuePool[3120];
        dword_1ECE8BC68 += 2;
LABEL_40:
        v28 = v20;
        WebCore::MutableStyleProperties::setProperty(v4, 483, &v28, 0);
        v24 = v28;
        v28 = 0;
        if (v24)
        {
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v23);
          else
            *v24 -= 2;
        }
        dword_1ECE8BBF8 += 2;
        v28 = &WebCore::staticCSSValuePool[3092];
        goto LABEL_47;
      case 3:
        WebCore::MutableStyleProperties::setProperty(v6, 386, 0x1EEu, 0);
        WebCore::MutableStyleProperties::setProperty(v4, 365, 0x1EEu, 0);
        WebCore::MutableStyleProperties::setProperty(v4, 385, 0xEu, 0);
        v25 = v4;
        v26 = 364;
        break;
      case 4:
        WebCore::MutableStyleProperties::setProperty(v6, 376, 0x1EEu, 0);
        WebCore::MutableStyleProperties::setProperty(v4, 379, 0x1EEu, 0);
        WebCore::MutableStyleProperties::setProperty(v4, 375, 0xEu, 0);
        v25 = v4;
        v26 = 378;
        break;
      case 5:
        dword_1ECE88BF8 += 2;
        v28 = &dword_1ECE88BF8;
        WebCore::MutableStyleProperties::setProperty(v6, 485, &v28, 0);
        v19 = v28;
        v28 = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v18);
          else
            *v19 -= 2;
        }
        v20 = &WebCore::staticCSSValuePool[3144];
        dword_1ECE8BCC8 += 2;
        goto LABEL_40;
      default:
LABEL_17:
        v8 = *(unsigned __int16 *)(v2 + 120);
        if (*(_WORD *)(v2 + 120))
        {
          if (v8 <= 0xFF)
          {
            v14 = &WebCore::staticCSSValuePool[4 * v8];
            v15 = v14[16];
            v10 = (uint64_t)(v14 + 16);
            *(_DWORD *)v10 = v15 + 2;
          }
          else
          {
            v9 = (double)v8;
            v10 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v10 = 2;
            v11 = *(_BYTE *)(v10 + 6);
            *(_WORD *)(v10 + 4) = 6;
            *(_BYTE *)(v10 + 6) = v11 & 0xFC;
            *(double *)(v10 + 8) = v9;
          }
          v28 = (int *)v10;
          WebCore::MutableStyleProperties::setProperty(v4, 516, &v28, 0);
          v12 = v28;
          v28 = 0;
          if (v12)
          {
            if (*v12 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
            else
              *v12 -= 2;
          }
        }
        v13 = *(WebCore::MutableStyleProperties **)(v2 + 128);
        *(_QWORD *)(v2 + 128) = v4;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
          {
            WebCore::MutableStyleProperties::~MutableStyleProperties(v13, a2);
            WTF::fastFree(v16, v17);
            v4 = *(WebCore::MutableStyleProperties **)(v2 + 128);
          }
          else
          {
            --*(_DWORD *)v13;
          }
        }
        goto LABEL_11;
    }
    WebCore::MutableStyleProperties::setProperty(v25, v26, 0xEu, 0);
    dword_1ECE8BBF8 += 2;
    v28 = &WebCore::staticCSSValuePool[3092];
LABEL_47:
    WebCore::MutableStyleProperties::setProperty(v4, 471, &v28, 0);
    v27 = v28;
    v28 = 0;
    if (v27)
    {
      if (*v27 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, a2);
      else
        *v27 -= 2;
    }
    goto LABEL_17;
  }
LABEL_11:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v4;
}

uint64_t WebCore::HTMLTablePartElement::findParentTable@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(this + 32);
  if (v2)
  {
    v3 = *(_WORD *)(v2 + 28);
    if ((v3 & 8) != 0)
    {
      while ((v3 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      {
        v2 = *(_QWORD *)(v2 + 32);
        if (!v2)
          goto LABEL_4;
        v3 = *(_WORD *)(v2 + 28);
        if ((v3 & 8) == 0)
          goto LABEL_3;
      }
      *(_DWORD *)(v2 + 24) += 2;
    }
    else
    {
LABEL_3:
      v2 = 0;
    }
  }
LABEL_4:
  *a2 = v2;
  return this;
}

BOOL WebCore::HTMLTableCellElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::backgroundAttr;
}

WTF::StringImpl *WebCore::HTMLTableCellElement::setColSpan(WebCore::HTMLTableCellElement *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  if (a2 < 0)
    v3 = 1;
  else
    v3 = a2;
  WTF::AtomString::number((WTF::AtomString *)v3);
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_16;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = *(uint64_t **)(v4 + 40);
    v7 = *(_DWORD *)(v4 + 52);
    if (!v7)
    {
LABEL_16:
      v8 = 0xFFFFFFFFLL;
      goto LABEL_17;
    }
  }
  else
  {
    v6 = (uint64_t *)(v4 + 32);
    v7 = v5 >> 5;
    if (!v7)
      goto LABEL_16;
  }
  v8 = 0;
  while (1)
  {
    v9 = *v6;
    if (*v6 == WebCore::HTMLNames::colspanAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::colspanAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::colspanAttr + 32))
    {
      break;
    }
    ++v8;
    v6 += 2;
    if (v7 == v8)
      goto LABEL_16;
  }
LABEL_17:
  WebCore::Element::setAttributeInternal(this, v8, (WebCore::TreeScope *)&WebCore::HTMLNames::colspanAttr, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLTableCellElement::setRowSpanForBindings(WebCore::HTMLTableCellElement *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  if (a2 < 0)
    v3 = 1;
  else
    v3 = a2;
  WTF::AtomString::number((WTF::AtomString *)v3);
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_16;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = *(uint64_t **)(v4 + 40);
    v7 = *(_DWORD *)(v4 + 52);
    if (!v7)
    {
LABEL_16:
      v8 = 0xFFFFFFFFLL;
      goto LABEL_17;
    }
  }
  else
  {
    v6 = (uint64_t *)(v4 + 32);
    v7 = v5 >> 5;
    if (!v7)
      goto LABEL_16;
  }
  v8 = 0;
  while (1)
  {
    v9 = *v6;
    if (*v6 == WebCore::HTMLNames::rowspanAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::rowspanAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::rowspanAttr + 32))
    {
      break;
    }
    ++v8;
    v6 += 2;
    if (v7 == v8)
      goto LABEL_16;
  }
LABEL_17:
  WebCore::Element::setAttributeInternal(this, v8, (WebCore::TreeScope *)&WebCore::HTMLNames::rowspanAttr, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::HTMLTableCellElement::scope(WebCore::HTMLTableCellElement *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  uint64_t *v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WebCore::HTMLTableCellElement *v14;
  WebCore::HTMLTableCellElement *v15;
  WebCore::HTMLTableCellElement *v16;
  WebCore::HTMLTableCellElement *v17;
  uint64_t v18;

  if ((_MergedGlobals_191 & 1) == 0)
  {
    v14 = this;
    WTF::AtomStringImpl::add();
    this = v14;
    qword_1ECE835D0 = v18;
    _MergedGlobals_191 = 1;
  }
  if ((byte_1ECE835C9 & 1) == 0)
  {
    v15 = this;
    WTF::AtomStringImpl::add();
    this = v15;
    qword_1ECE835D8 = v18;
    byte_1ECE835C9 = 1;
  }
  if ((byte_1ECE835CA & 1) == 0)
  {
    v16 = this;
    WTF::AtomStringImpl::add();
    this = v16;
    qword_1ECE835E0 = v18;
    byte_1ECE835CA = 1;
  }
  if ((byte_1ECE835CB & 1) == 0)
  {
    v17 = this;
    WTF::AtomStringImpl::add();
    this = v17;
    qword_1ECE835E8 = v18;
    byte_1ECE835CB = 1;
  }
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_20;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_12;
LABEL_20:
    v7 = (WTF **)MEMORY[0x1E0CBF2F8];
    goto LABEL_21;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_20;
LABEL_12:
  v6 = v6;
  v7 = (WTF **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::scopeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::scopeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::scopeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (WTF **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_21:
  v9 = &qword_1ECE835D0;
  if ((WTF::equalIgnoringASCIICase(*v7, (const WTF::StringImpl *)qword_1ECE835D0, a3) & 1) == 0)
  {
    v9 = &qword_1ECE835D8;
    if ((WTF::equalIgnoringASCIICase(*v7, (const WTF::StringImpl *)qword_1ECE835D8, v10) & 1) == 0)
    {
      v9 = &qword_1ECE835E0;
      if ((WTF::equalIgnoringASCIICase(*v7, (const WTF::StringImpl *)qword_1ECE835E0, v11) & 1) == 0)
      {
        v9 = &qword_1ECE835E8;
        if (!WTF::equalIgnoringASCIICase(*v7, (const WTF::StringImpl *)qword_1ECE835E8, v12))
          return (uint64_t *)MEMORY[0x1E0CBF3B8];
      }
    }
  }
  return v9;
}

WTF::StringImpl *WebCore::HTMLTableCellElement::setScope(WebCore::HTMLTableCellElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::scopeAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::scopeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::scopeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::scopeAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::scopeAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

WTF::StringImpl *WebCore::HTMLTableCellElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];
  _BYTE v14[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = a1[13];
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (_QWORD *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::backgroundAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::backgroundAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::backgroundAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  result = WebCore::Document::completeURL(*(WebCore::Document **)(a1[5] + 8), v8, *(_QWORD *)(a1[5] + 8) + 848, 0, (WTF::URL *)v13);
  if (v13[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v13, v11, (uint64_t)v14);
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLTableCellElement::cellAbove(WebCore::HTMLTableCellElement *this)
{
  const WebCore::RenderTableCell *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t result;
  __int16 v10;
  uint64_t v11;

  v1 = (const WebCore::RenderTableCell *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (!v1)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C714BCLL);
  }
  if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 37)
    return 0;
  v2 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
  if (!v2)
    goto LABEL_24;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_24;
  if (*(_BYTE *)(v3 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x195C714DCLL);
  }
  v4 = *(_QWORD *)(v3 + 32);
  if (!v4)
    goto LABEL_24;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_24;
  if (*(_BYTE *)(v5 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x195C714FCLL);
  }
  v6 = *(_QWORD *)(v5 + 32);
  if (v6)
  {
    v7 = *(unsigned __int8 **)(v6 + 8);
    if (v7)
    {
      v8 = v7[46];
      if (v8 != 35 && v8 != 63)
        goto LABEL_29;
    }
  }
  else
  {
LABEL_24:
    v7 = 0;
  }
  result = WebCore::RenderTable::cellAbove((WebCore::RenderTable *)v7, v1);
  if (result)
  {
    if ((*(_BYTE *)(result + 45) & 1) == 0)
    {
      result = *(_QWORD *)(*(_QWORD *)(result + 24) + 8);
      if (result)
      {
        v10 = *(_WORD *)(result + 28);
        if ((v10 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195C7151CLL);
        }
        if ((v10 & 0x10) == 0
          || (v11 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24), v11 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
          && v11 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
        {
LABEL_29:
          __break(0xC471u);
          JUMPOUT(0x195C71488);
        }
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::HTMLTableColElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CEAF8;
  *(_DWORD *)(result + 112) = 1;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLTableColElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::widthAttr)
    return 1;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 <= 0x1BA)
  {
    v4 = v2 - 373 > 0x3B || ((1 << (v2 - 117)) & 0x800004000000001) == 0;
    if (!v4 || v2 == 367 || v2 == 286)
      return result;
    return 0;
  }
  if (v2 - 898 > 0x33 || ((1 << (v2 + 126)) & 0xA000000000001) == 0)
  {
    v6 = v2 - 443;
    v7 = v6 > 0x3E;
    v8 = (1 << v6) & 0x6000000000000001;
    if (v7 || v8 == 0)
      return 0;
  }
  return result;
}

int *WebCore::HTMLTableColElement::collectPresentationalHintsForAttribute(WebCore::HTMLTableColElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  int *result;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  double v10;
  int v11;
  WebCore::HTMLTableColElement *v12;
  WebCore::MutableStyleProperties *v13;
  int v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  double v18;
  char v19;
  char v20;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::widthAttr)
  {
    v7 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v8 = *(unsigned __int16 **)(v7 + 8);
      v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v8 = 0;
      v9 = 0x100000000;
    }
    result = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v18, v8, v9, 1);
    if (v20)
    {
      v10 = v18;
      if (v19)
        v11 = 6;
      else
        v11 = 3;
      v12 = this;
      v13 = a4;
      v14 = 450;
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle(v10, (uint64_t)v12, v13, v14, v11);
    }
  }
  else
  {
    if (*(_QWORD *)a2 != WebCore::HTMLNames::heightAttr)
      return (int *)WebCore::HTMLTablePartElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
    v15 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v16 = *(unsigned __int16 **)(v15 + 8);
      v17 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v16 = 0;
      v17 = 0x100000000;
    }
    result = (int *)WebCore::parseHTMLDimensionInternal((uint64_t)&v18, v16, v17, 1);
    if (v20)
    {
      v10 = v18;
      if (v19)
        v11 = 6;
      else
        v11 = 3;
      v12 = this;
      v13 = a4;
      v14 = 393;
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle(v10, (uint64_t)v12, v13, v14, v11);
    }
  }
  return result;
}

void WebCore::HTMLTableColElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  WebCore::RenderElement *v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(_QWORD *)a2 == WebCore::HTMLNames::spanAttr)
  {
    v21 = *a4;
    if (*a4)
    {
      v22 = (uint64_t *)*((_QWORD *)v21 + 1);
      v23 = *((unsigned int *)v21 + 1) | ((unint64_t)((*((_DWORD *)v21 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v22 = 0;
      v23 = 0x100000000;
    }
    *(_DWORD *)(a1 + 112) = WebCore::clampHTMLNonNegativeIntegerToRange(v22, v23);
    v24 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (v24)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C719F4);
      }
      if (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 38)
      {
        v12 = (int *)(v24 + 16);
        ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        WebCore::RenderTableCol::updateFromElement(v24);
        v13 = *v12;
        if (!*v12)
        {
          __break(0xC471u);
          JUMPOUT(0x195C71A14);
        }
LABEL_33:
        *v12 = v13 - 1;
      }
    }
  }
  else if (*(_QWORD *)a2 == WebCore::HTMLNames::widthAttr)
  {
    v9 = *a4;
    if (*a4)
    {
      v10 = *((unsigned int *)v9 + 1);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 45) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195C71A34);
          }
          if (*(_BYTE *)(v11 + 46) == 38)
          {
            v12 = (int *)(v11 + 16);
            v13 = *(_DWORD *)(v11 + 16) + 1;
            *(_DWORD *)(v11 + 16) = v13;
            WebCore::parseHTMLInteger(*((uint64_t **)v9 + 1), v10 | ((unint64_t)((*((_DWORD *)v9 + 4) >> 2) & 1) << 32), &v25);
            if (HIDWORD(v25))
              v14 = 0;
            else
              v14 = v25;
            v15 = v14 << 6;
            if (v14 < -33554432)
              v15 = 0x80000000;
            if (v14 <= 0x1FFFFFF)
              v16 = v15;
            else
              v16 = 0x7FFFFFFF;
            if (v16 != *(_DWORD *)(v11 + 160))
            {
              v17 = *(_DWORD *)(v11 + 20);
              if ((v17 & 8) == 0)
              {
                *(_DWORD *)(v11 + 20) = v17 | 8;
                v18 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v11, 0);
                WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v11, v18);
                if ((*(_BYTE *)(v11 + 21) & 0x80) != 0)
                {
                  if ((*(_BYTE *)(v11 + 45) & 0x10) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195C71A54);
                  }
                  v19 = *(_QWORD *)(v11 + 144);
                  if (v19)
                  {
                    v20 = *(_DWORD *)(v19 + 8) + 1;
                    *(_DWORD *)(v19 + 8) = v20;
                  }
                  else
                  {
                    v20 = MEMORY[8];
                  }
                  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v19 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                  if (!v20)
                  {
LABEL_41:
                    __break(0xC471u);
                    JUMPOUT(0x195C7194CLL);
                  }
                  *(_DWORD *)(v19 + 8) = v20 - 1;
                }
              }
              WebCore::RenderObject::setPreferredLogicalWidthsDirty(v11, 1, 1);
              v13 = *(_DWORD *)(v11 + 16);
            }
            if (!v13)
              goto LABEL_41;
            goto LABEL_33;
          }
        }
      }
    }
  }
}

WebCore::MutableStyleProperties *WebCore::HTMLTableColElement::additionalPresentationalHintStyle(WebCore::HTMLTableColElement *this, void *a2)
{
  uint64_t v2;
  __int16 v3;
  WebCore::MutableStyleProperties *v4;
  int v6;
  uint64_t v7;

  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::colgroupTag + 24))
    return 0;
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 8) == 0)
    return 0;
  while ((v3 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (v2)
    {
      v3 = *(_WORD *)(v2 + 28);
      if ((v3 & 8) != 0)
        continue;
    }
    return 0;
  }
  v6 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v6 + 2;
  if (*(_DWORD *)(v2 + 116) == 2)
  {
    if (byte_1ECE835CF == 1)
    {
      v4 = (WebCore::MutableStyleProperties *)qword_1ECE83608;
    }
    else
    {
      v7 = v2;
      v4 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)v4 = 0x900000001;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = (char *)v4 + 32;
      *((_QWORD *)v4 + 3) = 4;
      WebCore::MutableStyleProperties::setProperty(v4, 376, 0x1EEu, 0);
      WebCore::MutableStyleProperties::setProperty(v4, 379, 0x1EEu, 0);
      WebCore::MutableStyleProperties::setProperty(v4, 375, 0xEu, 0);
      WebCore::MutableStyleProperties::setProperty(v4, 378, 0xEu, 0);
      v2 = v7;
      qword_1ECE83608 = (uint64_t)v4;
      byte_1ECE835CF = 1;
      v6 = *(_DWORD *)(v7 + 24) - 2;
    }
  }
  else
  {
    v4 = 0;
  }
  if (v6)
  {
    *(_DWORD *)(v2 + 24) = v6;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  return v4;
}

WTF::StringImpl *WebCore::HTMLTableColElement::setSpan(WebCore::HTMLTableColElement *this, int a2)
{
  uint64_t v3;
  __n128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  if (a2 < 0)
    v3 = 1;
  else
    v3 = a2;
  WTF::AtomString::number((WTF::AtomString *)v3);
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::spanAttr, &v7, 0, &v8, v4);
  if (v10 && v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLTableElement::caption@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 80);
  if (v2)
  {
    while ((*(_WORD *)(v2 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::captionTag + 24))
    {
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        goto LABEL_7;
    }
    *(_DWORD *)(v2 + 24) += 2;
  }
LABEL_7:
  *a2 = v2;
  return this;
}

unsigned int *WebCore::HTMLTableElement::setCaption@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *result;
  uint64_t *v7;
  WebCore::Node *v8;
  void *v9;
  WebCore::Node *v10;

  result = WebCore::HTMLTableElement::deleteCaption((unsigned int *)a1);
  v7 = *a2;
  if (*a2)
  {
    v8 = *(WebCore::Node **)(a1 + 80);
    if (v8)
      *((_DWORD *)v8 + 6) += 2;
    v10 = v8;
    WebCore::ContainerNode::insertBefore(a1, v7, &v10, (uint64_t)a3);
    result = (unsigned int *)v10;
    v10 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

unsigned int *WebCore::HTMLTableElement::deleteCaption(unsigned int *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;

  v1 = *((_QWORD *)this + 10);
  if (v1)
  {
    while ((*(_WORD *)(v1 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::captionTag + 24))
    {
      v1 = *(_QWORD *)(v1 + 56);
      if (!v1)
        return this;
    }
    *(_DWORD *)(v1 + 24) += 2;
    this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)this, (WebCore::Node *)v1, &v3);
    if (v5)
    {
      this = (unsigned int *)v4;
      v4 = 0;
      if (this)
      {
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v2);
        else
          *this -= 2;
      }
    }
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::HTMLTableElement::tHead@<X0>(unsigned int *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v5 = WebCore::HTMLNames::theadTag;
    while (1)
    {
      if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
        if (v6 == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
        {
LABEL_21:
          *(_DWORD *)(v4 + 24) += 2;
          goto LABEL_22;
        }
        if (v6 == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24)
          || v6 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
        {
          break;
        }
      }
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        goto LABEL_22;
    }
    while (1)
    {
      v8 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v4 + 24) = v8 + 2;
      if (v8)
      {
        *(_DWORD *)(v4 + 24) = v8;
      }
      else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        v5 = WebCore::HTMLNames::theadTag;
      }
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        break;
      while (1)
      {
        if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
          if (v7 == *(_QWORD *)(v5 + 24))
            goto LABEL_21;
          if (v7 == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24)
            || v7 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
          {
            break;
          }
        }
        v4 = *(_QWORD *)(v4 + 56);
        if (!v4)
          goto LABEL_22;
      }
    }
  }
LABEL_22:
  *a3 = v4;
  return this;
}

unsigned int *WebCore::HTMLTableElement::setTHead@<X0>(unsigned int *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  void *v11;
  WebCore::Node *v12;

  v4 = (uint64_t)result;
  if (*(_QWORD *)a2
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    result = WebCore::HTMLTableElement::deleteTHead((WebCore::HTMLTableElement *)result, a2);
    v6 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = *(_QWORD *)(v4 + 80);
      if (v7)
      {
        *(_DWORD *)(v7 + 24) += 2;
        while (1)
        {
          v8 = v7;
          v9 = *(_WORD *)(v7 + 28);
          if ((v9 & 8) != 0)
          {
            if ((v9 & 0x10) == 0)
              break;
            v10 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
            if (v10 != *(_QWORD *)(WebCore::HTMLNames::captionTag + 24)
              && v10 != *(_QWORD *)(WebCore::HTMLNames::colgroupTag + 24))
            {
              break;
            }
          }
          v7 = *(_QWORD *)(v7 + 56);
          if (v7)
            *(_DWORD *)(v7 + 24) += 2;
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
          if (!v7)
          {
            v8 = 0;
            break;
          }
        }
        v6 = *(void **)a2;
      }
      else
      {
        v8 = 0;
      }
      v12 = (WebCore::Node *)v8;
      WebCore::ContainerNode::insertBefore(v4, (uint64_t *)v6, &v12, a3);
      result = (unsigned int *)v12;
      v12 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLTableElement::deleteTHead(WebCore::HTMLTableElement *this, void *a2)
{
  unsigned int *result;
  WebCore::Node *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  WebCore::Node *v9;

  result = WebCore::HTMLTableElement::tHead((unsigned int *)this, a2, &v9);
  v4 = v9;
  if (v9)
  {
    result = (unsigned int *)WebCore::ContainerNode::removeChild(this, v9, &v6);
    if (v8)
    {
      result = (unsigned int *)v7;
      v7 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
        else
          *result -= 2;
      }
    }
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v4, v5);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLTableElement::tFoot@<X0>(unsigned int *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;

  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v5 = WebCore::HTMLNames::tfootTag;
    while (1)
    {
      if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
        v7 = *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24);
        v8 = v6 == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24) || v6 == v7;
        if (v8 || v6 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
          break;
      }
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        goto LABEL_25;
    }
    while (1)
    {
      v10 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v4 + 24) = v10 + 2;
      if (v6 == v7)
        break;
      if (v10)
      {
        *(_DWORD *)(v4 + 24) = v10;
      }
      else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
        v5 = WebCore::HTMLNames::tfootTag;
      }
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        break;
      while (1)
      {
        if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
          v7 = *(_QWORD *)(v5 + 24);
          v9 = v6 == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24) || v6 == v7;
          if (v9 || v6 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
            break;
        }
        v4 = *(_QWORD *)(v4 + 56);
        if (!v4)
          goto LABEL_25;
      }
    }
  }
LABEL_25:
  *a3 = v4;
  return this;
}

unsigned int *WebCore::HTMLTableElement::setTFoot@<X0>(unsigned int *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = (uint64_t)result;
  if (*(_QWORD *)a2
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24))
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    result = WebCore::HTMLTableElement::deleteTFoot((WebCore::HTMLTableElement *)result, a2);
    if (*(_QWORD *)a2)
    {
      return (unsigned int *)WebCore::ContainerNode::appendChild(v4, *(WebCore::Node **)a2, a3);
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLTableElement::deleteTFoot(WebCore::HTMLTableElement *this, void *a2)
{
  unsigned int *result;
  WebCore::Node *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  WebCore::Node *v9;

  result = WebCore::HTMLTableElement::tFoot((unsigned int *)this, a2, &v9);
  v4 = v9;
  if (v9)
  {
    result = (unsigned int *)WebCore::ContainerNode::removeChild(this, v9, &v6);
    if (v8)
    {
      result = (unsigned int *)v7;
      v7 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
        else
          *result -= 2;
      }
    }
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v4, v5);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLTableElement::createTHead@<X0>(WebCore::HTMLTableElement *this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;

  result = WebCore::HTMLTableElement::tHead((unsigned int *)this, a2, &v15);
  if (v15)
  {
    *a3 = v15;
  }
  else
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v7 = bmalloc::api::isoAllocate();
    v8 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v7 + 28) = 4124;
    v9 = v6 + 96;
    if (!v6)
      v9 = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v9;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    ++*(_DWORD *)(v6 + 3324);
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = 0;
    v10 = WebCore::HTMLNames::theadTag;
    if (WebCore::HTMLNames::theadTag)
      ++*(_DWORD *)WebCore::HTMLNames::theadTag;
    *(_QWORD *)(v7 + 96) = v10;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)v7 = off_1E33CEFE8;
    *a3 = v7;
    *(_DWORD *)(v7 + 24) = 4;
    v15 = v7;
    result = WebCore::HTMLTableElement::setTHead((unsigned int *)this, &v15, (uint64_t)&v12);
    if (v14)
    {
      result = (unsigned int *)v13;
      v13 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
        else
          *result -= 2;
      }
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8, v11);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLTableSectionElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CEFE8;
  *a3 = result;
  return result;
}

unsigned int *WebCore::HTMLTableElement::createTFoot@<X0>(WebCore::HTMLTableElement *this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;
  uint64_t v16;

  result = WebCore::HTMLTableElement::tFoot((unsigned int *)this, a2, &v16);
  if (v16)
  {
    *a3 = v16;
  }
  else
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v7 = bmalloc::api::isoAllocate();
    v9 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v7 + 28) = 4124;
    v10 = v6 + 96;
    if (!v6)
      v10 = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v10;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    ++*(_DWORD *)(v6 + 3324);
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = 0;
    v11 = WebCore::HTMLNames::tfootTag;
    if (WebCore::HTMLNames::tfootTag)
      ++*(_DWORD *)WebCore::HTMLNames::tfootTag;
    *(_QWORD *)(v7 + 96) = v11;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)v7 = off_1E33CEFE8;
    *a3 = v7;
    *(_DWORD *)(v7 + 24) = 4;
    WebCore::HTMLTableElement::deleteTFoot(this, v8);
    result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)this, (WebCore::Node *)v9, (uint64_t)&v13);
    if (v15)
    {
      result = (unsigned int *)v14;
      v14 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
        else
          *result -= 2;
      }
    }
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v9, v12);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLTableElement::createTBody@<X0>(WebCore::HTMLTableElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int *result;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WebCore::Node *v21;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v5 = bmalloc::api::isoAllocate();
  v7 = (uint64_t *)v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  v8 = v4 + 96;
  if (!v4)
    v8 = 0;
  *(_QWORD *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v9 = WebCore::HTMLNames::tbodyTag;
  if (WebCore::HTMLNames::tbodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::tbodyTag;
  *(_QWORD *)(v5 + 96) = v9;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33CEFE8;
  *a2 = v5;
  v10 = *((_QWORD *)this + 11);
  if (v10)
  {
    *(_DWORD *)(v10 + 24) += 2;
    while ((*(_WORD *)(v10 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
    {
      v11 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL;
      if (v11)
        *(_DWORD *)((*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v6);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      v10 = v11;
      if (!v11)
        goto LABEL_17;
    }
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v6);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    v13 = *((_QWORD *)this + 11);
    *(_DWORD *)(v13 + 24) += 2;
    while ((*(_WORD *)(v13 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
    {
      v14 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
      if (v14)
        *(_DWORD *)((*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v6);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      v13 = v14;
      if (!v14)
        goto LABEL_34;
    }
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v6);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    v14 = v13;
LABEL_34:
    v12 = *(WebCore::Node **)(v14 + 56);
    if (v12)
      *((_DWORD *)v12 + 6) += 2;
  }
  else
  {
LABEL_17:
    v12 = 0;
  }
  v21 = v12;
  WebCore::ContainerNode::insertBefore((uint64_t)this, v7, &v21, (uint64_t)&v18);
  if (v20)
  {
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  result = (unsigned int *)v21;
  v21 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v15);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLTableElement::createCaption@<X0>(unsigned int *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  WebCore::Node *v15;

  v2 = (uint64_t)this;
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    while ((*(_WORD *)(v4 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::captionTag + 24))
    {
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        goto LABEL_5;
    }
    *(_DWORD *)(v4 + 24) += 2;
    *a2 = v4;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v6 = bmalloc::api::isoAllocate();
    v7 = v6;
    *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v6 + 28) = 4124;
    v8 = v5 + 96;
    if (!v5)
      v8 = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v8;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    ++*(_DWORD *)(v5 + 3324);
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    v9 = WebCore::HTMLNames::captionTag;
    if (WebCore::HTMLNames::captionTag)
      ++*(_DWORD *)WebCore::HTMLNames::captionTag;
    *(_QWORD *)(v6 + 96) = v9;
    *(_QWORD *)(v6 + 104) = 0;
    *(_QWORD *)v6 = off_1E33CE608;
    *a2 = v6;
    *(_DWORD *)(v6 + 24) = 4;
    WebCore::HTMLTableElement::deleteCaption((unsigned int *)v2);
    v10 = *(WebCore::Node **)(v2 + 80);
    if (v10)
      *((_DWORD *)v10 + 6) += 2;
    v15 = v10;
    WebCore::ContainerNode::insertBefore(v2, (uint64_t *)v7, &v15, (uint64_t)&v12);
    this = (unsigned int *)v15;
    v15 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, v11);
      }
      else
      {
        this[6] -= 2;
      }
    }
    if (v14)
    {
      this = (unsigned int *)v13;
      v13 = 0;
      if (this)
      {
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v11);
        else
          *this -= 2;
      }
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::HTMLTableElement::insertRow@<X0>(unsigned int *this@<X0>, WebCore::HTMLTableElement *a2@<X1>, WebCore::HTMLTableRowElement *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t Row;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WebCore::Node *v34;
  _BYTE v35[8];
  uint64_t v36;
  char v37;
  _BYTE v38[8];
  WTF::StringImpl *v39;
  char v40;

  if ((int)a2 <= -2)
  {
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    return this;
  }
  v5 = (uint64_t)this;
  this[6] += 2;
  if ((_DWORD)a2 != -1)
  {
    v6 = 0;
    v7 = -(int)a2;
    while (1)
    {
      v8 = v6;
      this = (unsigned int *)WebCore::HTMLTableRowsCollection::rowAfter((WebCore::HTMLTableRowsCollection *)v5, (WebCore::HTMLTableElement **)v6, a3);
      v6 = (uint64_t)this;
      if (this)
      {
        v10 = this[6];
        this[6] = v10 + 2;
        if (!v8)
        {
          this[6] = v10 + 4;
          goto LABEL_12;
        }
      }
      else if (!v8)
      {
        if (v7)
          goto LABEL_24;
        goto LABEL_57;
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      if (!v6)
      {
        if (v7)
        {
LABEL_24:
          *(_BYTE *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 1;
          goto LABEL_43;
        }
        v6 = 0;
LABEL_26:
        v12 = *(_QWORD *)(v8 + 32);
        if (v12)
        {
LABEL_27:
          v13 = *(_DWORD *)(v12 + 24);
          goto LABEL_28;
        }
        goto LABEL_29;
      }
      *(_DWORD *)(v6 + 24) += 2;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
LABEL_12:
      ++v7;
      v8 = v6;
      if (v7 == 1)
        goto LABEL_26;
    }
  }
  Row = WebCore::HTMLTableRowsCollection::lastRow((WebCore::HTMLTableRowsCollection *)this, a2);
  if (Row)
  {
    v8 = Row;
    v6 = 0;
    *(_DWORD *)(Row + 24) += 2;
    goto LABEL_26;
  }
LABEL_57:
  v12 = *(_QWORD *)(v5 + 88);
  if (!v12)
  {
LABEL_69:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    v22 = bmalloc::api::isoAllocate();
    v23 = v22;
    *(_OWORD *)(v22 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v22 + 24) = 0x101C00000002;
    *(_QWORD *)(v22 + 32) = 0;
    v24 = v21 + 96;
    if (!v21)
      v24 = 0;
    *(_QWORD *)(v22 + 40) = v24;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_OWORD *)(v22 + 64) = 0u;
    ++*(_DWORD *)(v21 + 3324);
    *(_QWORD *)(v22 + 80) = 0;
    *(_QWORD *)(v22 + 88) = 0;
    v25 = WebCore::HTMLNames::tbodyTag;
    if (WebCore::HTMLNames::tbodyTag)
      ++*(_DWORD *)WebCore::HTMLNames::tbodyTag;
    *(_QWORD *)(v22 + 96) = v25;
    *(_QWORD *)(v22 + 104) = 0;
    *(_QWORD *)v22 = off_1E33CEFE8;
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    v27 = bmalloc::api::isoAllocate();
    v28 = v27;
    *(_OWORD *)(v27 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v27 + 24) = 0x101C00000002;
    *(_QWORD *)(v27 + 32) = 0;
    v29 = v26 + 96;
    if (!v26)
      v29 = 0;
    *(_QWORD *)(v27 + 40) = v29;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    ++*(_DWORD *)(v26 + 3324);
    *(_QWORD *)(v27 + 80) = 0;
    *(_QWORD *)(v27 + 88) = 0;
    v30 = WebCore::HTMLNames::trTag;
    if (WebCore::HTMLNames::trTag)
      ++*(_DWORD *)WebCore::HTMLNames::trTag;
    *(_QWORD *)(v27 + 96) = v30;
    *(_QWORD *)(v27 + 104) = 0;
    *(_QWORD *)v27 = off_1E33CF4D8;
    WebCore::ContainerNode::appendChild(v23, (WebCore::Node *)v27, (uint64_t)v38);
    if (v40)
    {
      v32 = v39;
      v39 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    this = (unsigned int *)WebCore::ContainerNode::appendChild(v5, (WebCore::Node *)v23, (uint64_t)v35);
    if (v37)
    {
      v33 = v36;
      *(_BYTE *)a4 = v35[0];
      *(_QWORD *)(a4 + 8) = v33;
      *(_DWORD *)(a4 + 16) = 1;
      if (*(_DWORD *)(v28 + 24) == 2)
      {
        if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v28, v9);
      }
      else
      {
        *(_DWORD *)(v28 + 24) -= 2;
      }
    }
    else
    {
      *(_QWORD *)a4 = v28;
      *(_DWORD *)(a4 + 16) = 0;
    }
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v23, v9);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
LABEL_89:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    return this;
  }
  *(_DWORD *)(v12 + 24) += 2;
  while ((*(_WORD *)(v12 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
  {
    v20 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL;
    if (v20)
      *(_DWORD *)((*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    v12 = v20;
    if (!v20)
      goto LABEL_69;
  }
  v13 = *(_DWORD *)(v12 + 24) - 2;
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
      v8 = 0;
      v6 = 0;
      goto LABEL_27;
    }
    v8 = 0;
    v6 = 0;
    v13 = 2;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    *(_DWORD *)(v12 + 24) = v13;
  }
LABEL_28:
  *(_DWORD *)(v12 + 24) = v13 + 2;
LABEL_29:
  v14 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  v15 = bmalloc::api::isoAllocate();
  v16 = v15;
  *(_OWORD *)(v15 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v15 + 24) = 0x101C00000002;
  *(_QWORD *)(v15 + 32) = 0;
  v17 = v14 + 96;
  if (!v14)
    v17 = 0;
  *(_QWORD *)(v15 + 40) = v17;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  ++*(_DWORD *)(v14 + 3324);
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  v18 = WebCore::HTMLNames::trTag;
  if (WebCore::HTMLNames::trTag)
    ++*(_DWORD *)WebCore::HTMLNames::trTag;
  *(_QWORD *)(v15 + 96) = v18;
  *(_QWORD *)(v15 + 104) = 0;
  *(_QWORD *)v15 = off_1E33CF4D8;
  v34 = (WebCore::Node *)v6;
  WebCore::ContainerNode::insertBefore(v12, (uint64_t *)v15, &v34, (uint64_t)v35);
  this = (unsigned int *)v34;
  v34 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, v9);
    }
    else
    {
      this[6] -= 2;
    }
  }
  if (v37)
  {
    v19 = v36;
    *(_BYTE *)a4 = v35[0];
    *(_QWORD *)(a4 + 8) = v19;
    *(_DWORD *)(a4 + 16) = 1;
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v16, v9);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)a4 = v16;
    *(_DWORD *)(a4 + 16) = 0;
  }
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
LABEL_43:
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if (v5)
    goto LABEL_89;
  return this;
}

uint64_t WebCore::HTMLTableRowsCollection::lastRow(WebCore::HTMLTableRowsCollection *this, WebCore::HTMLTableElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t result;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *((_QWORD *)this + 11);
    while (1)
    {
      v4 = *(_WORD *)(v3 + 28);
      if ((v4 & 8) != 0)
        break;
      v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v3)
        goto LABEL_5;
    }
LABEL_12:
    if ((v4 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24))
    {
      result = *(_QWORD *)(v3 + 88);
      if (result)
      {
        while ((*(_WORD *)(result + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
        {
          result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          if (!result)
            goto LABEL_14;
        }
        return result;
      }
    }
LABEL_14:
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v3)
        break;
      v4 = *(_WORD *)(v3 + 28);
      if ((v4 & 8) != 0)
        goto LABEL_12;
    }
LABEL_5:
    result = v2;
    while (1)
    {
      v6 = *(_WORD *)(result + 28);
      if ((v6 & 8) != 0)
        break;
      result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
      if (!result)
        goto LABEL_8;
    }
LABEL_22:
    if ((v6 & 0x10) == 0)
      goto LABEL_25;
    v8 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24);
    v9 = *(_QWORD *)(WebCore::HTMLNames::trTag + 24);
    if (v8 == v9)
      return result;
    if (v8 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
    {
      v10 = *(_QWORD *)(result + 88);
      if (v10)
      {
        while ((*(_WORD *)(v10 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != v9)
        {
          v10 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v10)
            goto LABEL_25;
        }
        return v10;
      }
    }
LABEL_25:
    while (1)
    {
      result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
      if (!result)
        break;
      v6 = *(_WORD *)(result + 28);
      if ((v6 & 8) != 0)
        goto LABEL_22;
    }
LABEL_8:
    while (1)
    {
      v7 = *(_WORD *)(v2 + 28);
      if ((v7 & 8) != 0)
        break;
      v2 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v2)
        return 0;
    }
LABEL_33:
    if ((v7 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
    {
      result = *(_QWORD *)(v2 + 88);
      if (result)
      {
        while ((*(_WORD *)(result + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
        {
          result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          if (!result)
            goto LABEL_35;
        }
        return result;
      }
    }
LABEL_35:
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v2)
        break;
      v7 = *(_WORD *)(v2 + 28);
      if ((v7 & 8) != 0)
        goto LABEL_33;
    }
  }
  return 0;
}

WebCore::HTMLTableElement *WebCore::HTMLTableRowsCollection::rowAfter(WebCore::HTMLTableRowsCollection *this, WebCore::HTMLTableElement **a2, WebCore::HTMLTableRowElement *a3)
{
  WebCore::HTMLTableElement *v5;
  WebCore::HTMLTableElement *v6;
  WebCore::HTMLTableElement *v7;
  __int16 v8;
  uint64_t v9;
  WebCore::HTMLTableElement *v11;
  uint64_t v12;
  uint64_t v13;

  if (!a2)
  {
    v5 = (WebCore::HTMLTableElement *)*((_QWORD *)this + 10);
    if (v5)
    {
      while ((*((_WORD *)v5 + 14) & 8) == 0)
      {
        v5 = (WebCore::HTMLTableElement *)*((_QWORD *)v5 + 7);
        if (!v5)
          goto LABEL_16;
      }
LABEL_79:
      *((_DWORD *)v5 + 6) += 2;
      while (1)
      {
        v11 = v5;
        if ((*((_WORD *)v5 + 14) & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
        {
          v6 = (WebCore::HTMLTableElement *)*((_QWORD *)v5 + 10);
          if (v6)
            break;
        }
LABEL_82:
        while (1)
        {
          v5 = (WebCore::HTMLTableElement *)*((_QWORD *)v5 + 7);
          if (!v5)
            break;
          if ((*((_WORD *)v5 + 14) & 8) != 0)
          {
            *((_DWORD *)v5 + 6) += 2;
            break;
          }
        }
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11, a2);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
        if (!v5)
          goto LABEL_16;
      }
      while ((*((_WORD *)v6 + 14) & 0x10) == 0
           || *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
      {
        v6 = (WebCore::HTMLTableElement *)*((_QWORD *)v6 + 7);
        if (!v6)
          goto LABEL_82;
      }
      goto LABEL_97;
    }
    goto LABEL_22;
  }
  v5 = a2[4];
  if (v5 == this || (v6 = a2[7]) == 0)
  {
LABEL_7:
    if ((*((_WORD *)v5 + 14) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C736F4);
    }
    if (*(_QWORD *)(*((_QWORD *)v5 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
    {
      while (1)
      {
        v5 = (WebCore::HTMLTableElement *)*((_QWORD *)v5 + 7);
        if (!v5)
          break;
        if ((*((_WORD *)v5 + 14) & 8) != 0)
          goto LABEL_79;
      }
    }
LABEL_16:
    if (a2)
    {
      v7 = a2[4];
      v8 = *((_WORD *)v7 + 14);
      if ((v8 & 0x10) == 0)
        goto LABEL_103;
      v9 = *(_QWORD *)(*((_QWORD *)v7 + 12) + 24);
      if (v9 != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24))
      {
        if (v7 == this)
        {
          v7 = (WebCore::HTMLTableElement *)a2;
          while (1)
          {
            v7 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 7);
            if (!v7)
              break;
            if ((*((_WORD *)v7 + 14) & 8) != 0)
              goto LABEL_44;
          }
        }
        else
        {
          if (v9 != *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
            goto LABEL_30;
          while (1)
          {
            v7 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 7);
            if (!v7)
              break;
            if ((*((_WORD *)v7 + 14) & 8) != 0)
              goto LABEL_44;
          }
        }
LABEL_28:
        if (!a2)
          goto LABEL_32;
        v7 = a2[4];
        v8 = *((_WORD *)v7 + 14);
LABEL_30:
        if ((v8 & 0x10) != 0)
        {
          if (*(_QWORD *)(*((_QWORD *)v7 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24))
          {
            while (1)
            {
              v7 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 7);
              if (!v7)
                return 0;
              if ((*((_WORD *)v7 + 14) & 8) != 0)
                goto LABEL_62;
            }
          }
LABEL_32:
          v7 = (WebCore::HTMLTableElement *)*((_QWORD *)this + 10);
          if (v7)
          {
            v6 = 0;
            while ((*((_WORD *)v7 + 14) & 8) == 0)
            {
              v7 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 7);
              if (!v7)
                return v6;
            }
LABEL_62:
            *((_DWORD *)v7 + 6) += 2;
            while (1)
            {
              v11 = v7;
              if ((*((_WORD *)v7 + 14) & 0x10) != 0
                && *(_QWORD *)(*((_QWORD *)v7 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24))
              {
                v6 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 10);
                if (v6)
                  break;
              }
LABEL_65:
              while (1)
              {
                v7 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 7);
                if (!v7)
                  break;
                if ((*((_WORD *)v7 + 14) & 8) != 0)
                {
                  *((_DWORD *)v7 + 6) += 2;
                  break;
                }
              }
              if (*((_DWORD *)v11 + 6) == 2)
              {
                if ((*((_WORD *)v11 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v11, a2);
              }
              else
              {
                *((_DWORD *)v11 + 6) -= 2;
              }
              v6 = 0;
              if (!v7)
                return v6;
            }
            while ((*((_WORD *)v6 + 14) & 0x10) == 0
                 || *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
            {
              v6 = (WebCore::HTMLTableElement *)*((_QWORD *)v6 + 7);
              if (!v6)
                goto LABEL_65;
            }
LABEL_97:
            if (*((_DWORD *)v11 + 6) == 2)
            {
              if ((*((_WORD *)v11 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v11, a2);
            }
            else
            {
              *((_DWORD *)v11 + 6) -= 2;
            }
            return v6;
          }
          return 0;
        }
LABEL_103:
        __break(0xC471u);
        JUMPOUT(0x195C736D4);
      }
    }
LABEL_22:
    v7 = (WebCore::HTMLTableElement *)*((_QWORD *)this + 10);
    if (v7)
    {
      while ((*((_WORD *)v7 + 14) & 8) == 0)
      {
        v7 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 7);
        if (!v7)
          goto LABEL_28;
      }
LABEL_44:
      *((_DWORD *)v7 + 6) += 2;
      while (1)
      {
        v11 = v7;
        if ((*((_WORD *)v7 + 14) & 0x10) == 0)
          goto LABEL_48;
        v12 = *(_QWORD *)(*((_QWORD *)v7 + 12) + 24);
        v13 = *(_QWORD *)(WebCore::HTMLNames::trTag + 24);
        if (v12 == v13)
        {
          v6 = v7;
          goto LABEL_97;
        }
        if (v12 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
        {
          v6 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 10);
          if (v6)
            break;
        }
LABEL_48:
        while (1)
        {
          v7 = (WebCore::HTMLTableElement *)*((_QWORD *)v7 + 7);
          if (!v7)
            break;
          if ((*((_WORD *)v7 + 14) & 8) != 0)
          {
            *((_DWORD *)v7 + 6) += 2;
            break;
          }
        }
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11, a2);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
        if (!v7)
          goto LABEL_28;
      }
      while ((*((_WORD *)v6 + 14) & 0x10) == 0 || *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) != v13)
      {
        v6 = (WebCore::HTMLTableElement *)*((_QWORD *)v6 + 7);
        if (!v6)
          goto LABEL_48;
      }
      goto LABEL_97;
    }
    goto LABEL_28;
  }
  while ((*((_WORD *)v6 + 14) & 0x10) == 0
       || *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
  {
    v6 = (WebCore::HTMLTableElement *)*((_QWORD *)v6 + 7);
    if (!v6)
      goto LABEL_7;
  }
  return v6;
}

unsigned int *WebCore::HTMLTableElement::deleteRow@<X0>(unsigned int *this@<X0>, WebCore::HTMLTableElement *a2@<X1>, WebCore::HTMLTableRowElement *a3@<X2>, _QWORD *a4@<X8>)
{
  WebCore::HTMLTableRowsCollection *v4;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;

  v4 = (WebCore::HTMLTableRowsCollection *)this;
  if ((_DWORD)a2 == -1)
  {
    this = (unsigned int *)WebCore::HTMLTableRowsCollection::lastRow((WebCore::HTMLTableRowsCollection *)this, a2);
    if (this)
    {
      v9 = (uint64_t)this;
      this[6] += 2;
LABEL_17:
      v10 = *(_QWORD *)(v9 + 32);
      if (v10)
      {
        *(_DWORD *)(v10 + 24) += 2;
        this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v10, (WebCore::Node *)v9, a4);
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          v11 = *(_WORD *)(v10 + 30);
          if ((v11 & 0x400) == 0)
          {
            v12 = *(_WORD *)(v10 + 28);
            if ((v12 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v10, v8);
            }
            else
            {
              if ((v12 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
                v11 = *(_WORD *)(v10 + 30);
              }
              *(_WORD *)(v10 + 30) = v11 | 0x400;
              this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
            }
          }
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      else
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
      }
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
  }
  else
  {
    if ((a2 & 0x80000000) == 0)
    {
      v6 = 0;
      v7 = (_DWORD)a2 + 1;
      while (1)
      {
        this = (unsigned int *)WebCore::HTMLTableRowsCollection::rowAfter(v4, (WebCore::HTMLTableElement **)v6, a3);
        v9 = (uint64_t)this;
        if (this)
          this[6] += 2;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        if (!v9)
          break;
        v6 = v9;
        if (!--v7)
          goto LABEL_17;
      }
    }
    *(_BYTE *)a4 = 0;
    a4[1] = 0;
    *((_BYTE *)a4 + 16) = 1;
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLTableElement::collectPresentationalHintsForAttribute(WTF::StringImpl *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  uint64_t *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  WebCore::MutableStyleProperties *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unint64_t v25;
  WebCore::MutableStyleProperties *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  WebCore::MutableStyleProperties *v31;
  int v32;
  WebCore::MutableStyleProperties *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  double v41;
  uint64_t v42;
  char v43;
  int *v45;
  int v46;
  uint64_t v47;
  int *v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  uint64_t v51;
  int *v52;
  WTF::StringImpl *v53;
  _DWORD *v54;
  uint64_t v55;
  int *v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  _DWORD *v67;
  __int128 v68;
  __int128 v69;
  char v70;
  __int16 v71;
  WTF::StringImpl *v72;
  __int128 v73;
  __int128 v74;
  WTF::StringImpl *v75;
  int *v76;
  _DWORD *v77;
  char v78;

  v5 = (uint64_t *)a3;
  v6 = this;
  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 <= 0x1E9)
  {
    switch(*(_WORD *)(*(_QWORD *)a2 + 10))
    {
      case 0x16F:
        WTF::String::trim();
        this = v75;
        if (!v75)
          return this;
        if (*((_DWORD *)v75 + 1))
        {
          WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)v6 + 5) + 8), &v75, *(_QWORD *)(*((_QWORD *)v6 + 5) + 8) + 848, 0, (WTF::URL *)&v72);
          v9 = v72;
          if (v72)
            *(_DWORD *)v72 += 2;
          v72 = 0;
          v69 = v73;
          LODWORD(v73) = v73 & 0xFFFFFFFE;
          v68 = v74;
          v10 = WTF::fastCompactMalloc((WTF *)0x78);
          *(_DWORD *)v10 = 2;
          v11 = *(_BYTE *)(v10 + 6);
          *(_WORD *)(v10 + 4) = 2048;
          *(_BYTE *)(v10 + 6) = v11 & 0xFC;
          *(_QWORD *)(v10 + 8) = v9;
          *(_QWORD *)(v10 + 16) = v9;
          *(_OWORD *)(v10 + 24) = v69;
          *(_OWORD *)(v10 + 40) = v68;
          *(_BYTE *)(v10 + 56) = 0;
          *(_BYTE *)(v10 + 64) = 0;
          *(_QWORD *)(v10 + 72) = 0;
          *(_BYTE *)(v10 + 80) = 0;
          *(_QWORD *)(v10 + 88) = 0;
          *(_BYTE *)(v10 + 96) = 0;
          *(_QWORD *)(v10 + 104) = 0;
          *(_BYTE *)(v10 + 112) = 0;
          LOWORD(v76) = 62;
          v77 = (_DWORD *)v10;
          WebCore::MutableStyleProperties::setProperty(a4, (unsigned __int16 *)&v76, 0);
          v12 = v77;
          v77 = 0;
          if (v12)
          {
            if (*v12 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v8);
            else
              *v12 -= 2;
          }
          v62 = v72;
          v72 = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
              WTF::StringImpl::destroy(v62, v8);
            else
              *(_DWORD *)v62 -= 2;
          }
          this = v75;
          v75 = 0;
          if (!this)
            return this;
        }
        else
        {
          v75 = 0;
        }
        v61 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this != 2)
          goto LABEL_97;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
      case 0x170:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x176:
        return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
      case 0x175:
        v26 = a4;
        v27 = 61;
        return (WTF::StringImpl *)WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)this, v26, v27, v5);
      case 0x177:
        v28 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v29 = *(uint64_t **)(v28 + 8);
          v30 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v29 = 0;
          v30 = 0x100000000;
        }
        WebCore::parseHTMLInteger(v29, v30, (uint64_t *)&v76);
        if (HIDWORD(v76) == 1)
          goto LABEL_65;
        if (HIDWORD(v76))
        {
          this = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_45:
          if (*v5 && *(_DWORD *)(*v5 + 4))
          {
            this = v6;
            v26 = a4;
            v27 = 471;
            return (WTF::StringImpl *)WebCore::HTMLElement::addHTMLColorToStyle((uint64_t)this, v26, v27, v5);
          }
          return this;
        }
        v40 = (int)v76;
        if ((v76 & 0x80000000) != 0)
        {
LABEL_65:
          v40 = *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24) && v28 != 0;
        }
        else if (v76 > 0xFF)
        {
          v41 = (double)v76;
          v42 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v42 = 2;
          v43 = *(_BYTE *)(v42 + 6);
          *(_WORD *)(v42 + 4) = 6;
          *(_BYTE *)(v42 + 6) = v43 & 0xFC;
          *(double *)(v42 + 8) = v41;
LABEL_72:
          v76 = (int *)v42;
          v31 = a4;
          v32 = 485;
          goto LABEL_95;
        }
        v45 = &WebCore::staticCSSValuePool[4 * v40];
        v46 = v45[16];
        v42 = (uint64_t)(v45 + 16);
        *(_DWORD *)v42 = v46 + 2;
        goto LABEL_72;
      case 0x178:
        goto LABEL_45;
      default:
        if (v7 != 286)
        {
          if (v7 != 384)
            return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
          v21 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            v22 = *(unsigned int *)(v21 + 4);
            if ((_DWORD)v22)
              return (WTF::StringImpl *)WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 482, *(unsigned __int16 **)(v21 + 8), v22 | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32), 0, 1, 0, 1);
          }
          return this;
        }
        v38 = *(_QWORD *)a3;
        if (!*(_QWORD *)a3)
          return this;
        v39 = *(_DWORD *)(v38 + 4);
        if (!v39)
          return this;
        if (v39 != 6)
          goto LABEL_60;
        v63 = *(_QWORD *)(v38 + 8);
        if ((*(_BYTE *)(v38 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v63 & 0xDF) != 0x43
            || (*(_BYTE *)(v63 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v63 + 2) & 0xDF) != 0x4E
            || (*(_BYTE *)(v63 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(v63 + 4) & 0xDF) != 0x45)
          {
            goto LABEL_60;
          }
          v64 = *(unsigned __int8 *)(v63 + 5);
        }
        else
        {
          if ((*(_WORD *)v63 & 0xFFDF) != 0x43
            || (*(_WORD *)(v63 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v63 + 4) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v63 + 6) & 0xFFDF) != 0x54
            || (*(_WORD *)(v63 + 8) & 0xFFDF) != 0x45)
          {
            goto LABEL_60;
          }
          v64 = *(unsigned __int16 *)(v63 + 10);
        }
        if ((v64 & 0xFFFFFFDF) == 0x52)
        {
          v65 = 0x1238u;
          WebCore::staticCSSValuePool[v65] += 2;
          v76 = &WebCore::staticCSSValuePool[v65];
          WebCore::MutableStyleProperties::setProperty(a4, 404, &v76, 0);
          v67 = v76;
          *(double *)&v76 = 0.0;
          if (v67)
          {
            if (*v67 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v67, v66);
            else
              *v67 -= 2;
          }
          WebCore::staticCSSValuePool[4664] += 2;
          v76 = &WebCore::staticCSSValuePool[4664];
          v31 = a4;
          v32 = 403;
LABEL_95:
          WebCore::MutableStyleProperties::setProperty(v31, v32, &v76, 0);
          this = (WTF::StringImpl *)v76;
          *(double *)&v76 = 0.0;
          if (this)
          {
            v61 = *(_DWORD *)this - 2;
            if (*(_DWORD *)this == 2)
              return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v60);
            else
LABEL_97:
              *(_DWORD *)this = v61;
          }
          return this;
        }
LABEL_60:
        v33 = a4;
        v34 = 123;
        return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v33, v34, (uint64_t)v5);
    }
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x32Au)
  {
    if (v7 == 490)
    {
      LOBYTE(v75) = 0;
      v71 = 0;
      v70 = 0;
      this = (WTF::StringImpl *)WebCore::getBordersFromFrameAttributeValue(*(_QWORD *)a3, &v75, (_BYTE *)&v71 + 1, &v71, &v70);
      if (!(_DWORD)this)
        return this;
      v35 = 0x13C8u;
      WebCore::staticCSSValuePool[v35] += 2;
      v76 = &WebCore::staticCSSValuePool[v35];
      WebCore::MutableStyleProperties::setProperty(a4, 485, &v76, 0);
      v37 = v76;
      *(double *)&v76 = 0.0;
      if (v37)
      {
        if (*v37 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, v36);
        else
          *v37 -= 2;
      }
      v47 = 56;
      if (!(_BYTE)v75)
        v47 = 28;
      v48 = &WebCore::staticCSSValuePool[v47];
      v48[3088] += 2;
      v76 = v48 + 3088;
      WebCore::MutableStyleProperties::setProperty(a4, 385, &v76, 0);
      v50 = v76;
      *(double *)&v76 = 0.0;
      if (v50)
      {
        if (*v50 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, v49);
        else
          *v50 -= 2;
      }
      v51 = 56;
      if (!(_BYTE)v71)
        v51 = 28;
      v52 = &WebCore::staticCSSValuePool[v51];
      v52[3088] += 2;
      v76 = v52 + 3088;
      WebCore::MutableStyleProperties::setProperty(a4, 364, &v76, 0);
      v54 = v76;
      *(double *)&v76 = 0.0;
      if (v54)
      {
        if (*v54 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, v53);
        else
          *v54 -= 2;
      }
      v55 = 56;
      if (!v70)
        v55 = 28;
      v56 = &WebCore::staticCSSValuePool[v55];
      v56[3088] += 2;
      v76 = v56 + 3088;
      WebCore::MutableStyleProperties::setProperty(a4, 375, &v76, 0);
      v58 = v76;
      *(double *)&v76 = 0.0;
      if (v58)
      {
        if (*v58 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v58, v57);
        else
          *v58 -= 2;
      }
      v59 = 56;
      if (!HIBYTE(v71))
        v59 = 28;
      WebCore::staticCSSValuePool[v59 + 3088] += 2;
      v76 = &WebCore::staticCSSValuePool[v59 + 3088];
      v31 = a4;
      v32 = 378;
      goto LABEL_95;
    }
    if (v7 == 504)
    {
      v23 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v24 = *(unsigned __int16 **)(v23 + 8);
        v25 = *(unsigned int *)(v23 + 4) | ((unint64_t)((*(_DWORD *)(v23 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v24 = 0;
        v25 = 0x100000000;
      }
      this = (WTF::StringImpl *)WebCore::parseHTMLDimensionInternal((uint64_t)&v76, v24, v25, 0);
      if (!v78)
        return this;
      v16 = v76;
      if ((_BYTE)v77)
        v17 = 6;
      else
        v17 = 3;
      v18 = (uint64_t)v6;
      v19 = a4;
      v20 = 393;
      return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle(*(double *)&v16, v18, v19, v20, v17);
    }
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  }
  if (v7 == 811)
  {
    if (!*((_DWORD *)this + 29))
      return this;
    WebCore::staticCSSValuePool[4848] += 2;
    v76 = &WebCore::staticCSSValuePool[4848];
    v31 = a4;
    v32 = 71;
    goto LABEL_95;
  }
  if (v7 != 898)
  {
    if (v7 == 922)
    {
      v13 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v14 = *(unsigned __int16 **)(v13 + 8);
        v15 = *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v14 = 0;
        v15 = 0x100000000;
      }
      this = (WTF::StringImpl *)WebCore::parseHTMLDimensionInternal((uint64_t)&v76, v14, v15, 0);
      if (!v78)
        return this;
      v16 = v76;
      if (*(double *)&v76 == 0.0)
        return this;
      if ((_BYTE)v77)
        v17 = 6;
      else
        v17 = 3;
      v18 = (uint64_t)v6;
      v19 = a4;
      v20 = 450;
      return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle(*(double *)&v16, v18, v19, v20, v17);
    }
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  }
  if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v33 = a4;
    v34 = 288;
    return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v33, v34, (uint64_t)v5);
  }
  return this;
}

uint64_t WebCore::getBordersFromFrameAttributeValue(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;

  result = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  if (a1)
  {
    switch(*(_DWORD *)(a1 + 4))
    {
      case 3:
        v14 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(a1 + 16) & 4) != 0)
        {
          v15 = *(_BYTE *)v14 & 0xDF;
          if (v15 == 76)
          {
            if ((*(_BYTE *)(v14 + 1) & 0xDF) != 0x48)
              goto LABEL_107;
            v16 = *(unsigned __int8 *)(v14 + 2);
LABEL_25:
            v17 = v16 & 0xFFFFFFDF;
            a2 = a5;
            goto LABEL_26;
          }
          if (v15 == 82)
          {
            if ((*(_BYTE *)(v14 + 1) & 0xDF) != 0x48)
              goto LABEL_107;
            v22 = *(unsigned __int8 *)(v14 + 2);
LABEL_52:
            v17 = v22 & 0xFFFFFFDF;
            a2 = a3;
LABEL_26:
            if (v17 != 83)
              goto LABEL_107;
            goto LABEL_27;
          }
          if (v15 != 66 || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x4F)
            goto LABEL_107;
          v27 = *(unsigned __int8 *)(v14 + 2);
        }
        else
        {
          v25 = *(_WORD *)v14 & 0xFFDF;
          if (v25 == 76)
          {
            if ((*(_WORD *)(v14 + 2) & 0xFFDF) != 0x48)
              goto LABEL_107;
            v16 = *(unsigned __int16 *)(v14 + 4);
            goto LABEL_25;
          }
          if (v25 == 82)
          {
            if ((*(_WORD *)(v14 + 2) & 0xFFDF) != 0x48)
              goto LABEL_107;
            v22 = *(unsigned __int16 *)(v14 + 4);
            goto LABEL_52;
          }
          if (v25 != 66 || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x4F)
            goto LABEL_107;
          v27 = *(unsigned __int16 *)(v14 + 4);
        }
        if ((v27 & 0xFFFFFFDF) != 0x58)
          goto LABEL_107;
LABEL_97:
        *a3 = 1;
        *a5 = 1;
LABEL_20:
        *a4 = 1;
LABEL_27:
        *a2 = 1;
        return 1;
      case 4:
        v18 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(a1 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v18 & 0xDF) != 0x56
            || (*(_BYTE *)(v18 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(v18 + 2) & 0xDF) != 0x49)
          {
            goto LABEL_107;
          }
          v19 = *(unsigned __int8 *)(v18 + 3);
        }
        else
        {
          if ((*(_WORD *)v18 & 0xFFDF) != 0x56
            || (*(_WORD *)(v18 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v18 + 4) & 0xFFDF) != 0x49)
          {
            goto LABEL_107;
          }
          v19 = *(unsigned __int16 *)(v18 + 6);
        }
        if ((v19 & 0xFFFFFFDF) != 0x44)
          goto LABEL_107;
        return 1;
      case 5:
        v7 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(a1 + 16) & 4) != 0)
        {
          v8 = *(_BYTE *)v7 & 0xDF;
          if (v8 == 65)
          {
            if ((*(_BYTE *)(v7 + 1) & 0xDF) != 0x42
              || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x4F
              || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x56)
            {
              goto LABEL_107;
            }
            v9 = *(unsigned __int8 *)(v7 + 4);
LABEL_9:
            if ((v9 & 0xFFFFFFDF) == 0x45)
              goto LABEL_27;
            goto LABEL_107;
          }
          if (v8 != 66
            || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x4C
            || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x4F)
          {
            goto LABEL_107;
          }
          v20 = *(unsigned __int8 *)(v7 + 4);
        }
        else
        {
          v23 = *(_WORD *)v7 & 0xFFDF;
          if (v23 == 65)
          {
            if ((*(_WORD *)(v7 + 2) & 0xFFDF) != 0x42
              || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x56)
            {
              goto LABEL_107;
            }
            v9 = *(unsigned __int16 *)(v7 + 8);
            goto LABEL_9;
          }
          if (v23 != 66
            || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x4F)
          {
            goto LABEL_107;
          }
          v20 = *(unsigned __int16 *)(v7 + 8);
        }
        a2 = a4;
        if ((v20 & 0xFFFFFFDF) == 0x57)
          goto LABEL_27;
        goto LABEL_107;
      case 6:
        v10 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(a1 + 16) & 4) != 0)
        {
          v11 = *(_BYTE *)v10 & 0xDF;
          if (v11 == 72)
          {
            if ((*(_BYTE *)(v10 + 1) & 0xDF) != 0x53
              || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x49
              || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x44
              || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x45)
            {
              goto LABEL_107;
            }
            v12 = *(unsigned __int8 *)(v10 + 5);
LABEL_18:
            v13 = v12 & 0xFFFFFFDF;
            goto LABEL_19;
          }
          if (v11 == 86)
          {
            if ((*(_BYTE *)(v10 + 1) & 0xDF) != 0x53
              || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x49
              || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x44
              || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x45)
            {
              goto LABEL_107;
            }
            v21 = *(unsigned __int8 *)(v10 + 5);
LABEL_48:
            v13 = v21 & 0xFFFFFFDF;
            a4 = a3;
            a2 = a5;
LABEL_19:
            if (v13 != 83)
              goto LABEL_107;
            goto LABEL_20;
          }
          if (v11 != 66
            || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x44
            || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x45)
          {
            goto LABEL_107;
          }
          v26 = *(unsigned __int8 *)(v10 + 5);
        }
        else
        {
          v24 = *(_WORD *)v10 & 0xFFDF;
          if (v24 == 72)
          {
            if ((*(_WORD *)(v10 + 2) & 0xFFDF) != 0x53
              || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x49
              || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x44
              || (*(_WORD *)(v10 + 8) & 0xFFDF) != 0x45)
            {
              goto LABEL_107;
            }
            v12 = *(unsigned __int16 *)(v10 + 10);
            goto LABEL_18;
          }
          if (v24 == 86)
          {
            if ((*(_WORD *)(v10 + 2) & 0xFFDF) != 0x53
              || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x49
              || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x44
              || (*(_WORD *)(v10 + 8) & 0xFFDF) != 0x45)
            {
              goto LABEL_107;
            }
            v21 = *(unsigned __int16 *)(v10 + 10);
            goto LABEL_48;
          }
          if (v24 != 66
            || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x44
            || (*(_WORD *)(v10 + 8) & 0xFFDF) != 0x45)
          {
            goto LABEL_107;
          }
          v26 = *(unsigned __int16 *)(v10 + 10);
        }
        if ((v26 & 0xFFFFFFDF) == 0x52)
          goto LABEL_97;
LABEL_107:
        result = 0;
        break;
      default:
        goto LABEL_107;
    }
  }
  return result;
}

uint64_t WebCore::HTMLTableElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v5;
  BOOL v7;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 <= 0x1F7)
  {
    if (v2 - 367 <= 0x2C && ((1 << (v2 - 111)) & 0x100000020341) != 0)
      return result;
    v5 = v2 - 432 > 0x3A || ((1 << (v2 + 80)) & 0x400000000000801) == 0;
    if (!v5 || v2 == 286)
      return result;
    return 0;
  }
  if (v2 - 898 > 0x33 || ((1 << (v2 + 126)) & 0xA000001004001) == 0)
  {
    v7 = v2 - 504 > 7 || ((1 << (v2 + 8)) & 0x83) == 0;
    if (v7 && v2 != 811)
      return 0;
  }
  return result;
}

void WebCore::HTMLTableElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WTF::StringImpl *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  __int16 v15;
  int v16;
  int v17;
  WebCore::Element *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  v10 = *(_DWORD *)(a1 + 116);
  if (v10)
  {
    if (v10 == 3)
    {
      v11 = 4;
    }
    else if (v10 == 4)
    {
      v11 = 3;
    }
    else
    {
      v11 = v10 == 5;
    }
  }
  else
  {
    v11 = 2 * *(unsigned __int8 *)(a1 + 112);
  }
  v12 = *(unsigned __int16 *)(a1 + 120);
  v13 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v13 <= 0x1E9)
  {
    if (v13 == 375)
    {
      *(_BYTE *)(a1 + 112) = WebCore::HTMLElement::parseBorderWidthAttribute((WebCore::HTMLElement *)a1, (const WTF::AtomString *)a4) != 0;
    }
    else if (v13 == 383)
    {
      v14 = *a4;
      if (*a4 && (v21 = *((unsigned int *)v14 + 1), (_DWORD)v21))
      {
        WebCore::parseHTMLInteger(*((uint64_t **)v14 + 1), v21 | ((unint64_t)((*((_DWORD *)v14 + 4) >> 2) & 1) << 32), &v23);
        if (HIDWORD(v23))
          v15 = 0;
        else
          v15 = v23 & ~(unsigned __int16)((int)v23 >> 31);
      }
      else
      {
        v15 = 1;
      }
      *(_WORD *)(a1 + 120) = v15;
    }
    goto LABEL_11;
  }
  if (v13 == 490)
  {
    *(_BYTE *)(a1 + 113) = WebCore::getBordersFromFrameAttributeValue((uint64_t)*a4, &v27, &v26, &v25, &v24);
    goto LABEL_11;
  }
  if (v13 != 811)
    goto LABEL_11;
  *(_DWORD *)(a1 + 116) = 0;
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a4, "none", 5uLL))
  {
    v17 = 0;
    v20 = 1;
LABEL_31:
    *(_DWORD *)(a1 + 116) = v20;
    goto LABEL_13;
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a4, "groups", 7uLL))
  {
    v17 = 0;
    v20 = 2;
    goto LABEL_31;
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a4, "rows", 5uLL))
  {
    *(_DWORD *)(a1 + 116) = 3;
LABEL_42:
    v17 = 4;
    goto LABEL_13;
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a4, "cols", 5uLL))
  {
    *(_DWORD *)(a1 + 116) = 4;
LABEL_45:
    v17 = 3;
    goto LABEL_13;
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a4, "all", 4uLL))
  {
    *(_DWORD *)(a1 + 116) = 5;
    goto LABEL_48;
  }
LABEL_11:
  v16 = *(_DWORD *)(a1 + 116);
  if (!v16)
  {
    v17 = 2 * *(unsigned __int8 *)(a1 + 112);
    goto LABEL_13;
  }
  if (v16 != 5)
  {
    if (v16 != 4)
    {
      if (v16 != 3)
      {
        v17 = 0;
        goto LABEL_13;
      }
      goto LABEL_42;
    }
    goto LABEL_45;
  }
LABEL_48:
  v17 = 1;
LABEL_13:
  if (v11 != v17 || v12 != *(unsigned __int16 *)(a1 + 120))
  {
    WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref((uint64_t *)(a1 + 128), v9);
    v19 = *(_QWORD *)(a1 + 80);
    if (v19)
    {
      while ((*(_WORD *)(v19 + 28) & 8) == 0)
      {
        v19 = *(_QWORD *)(v19 + 56);
        if (!v19)
          return;
      }
      v22 = 0;
LABEL_50:
      v22 |= WebCore::setTableCellsChanged((WebCore *)v19, v18);
      while (1)
      {
        v19 = *(_QWORD *)(v19 + 56);
        if (!v19)
          break;
        if ((*(_WORD *)(v19 + 28) & 8) != 0)
          goto LABEL_50;
      }
      if ((v22 & 1) != 0)
        WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)a1);
    }
  }
}

uint64_t WebCore::setTableCellsChanged(WebCore *this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  WebCore::Node *ElementSibling;
  WebCore::Element *v10;

  if ((*((_WORD *)this + 14) & 0x10) == 0)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v3 != *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
  {
    if (v3 == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24)
      || v3 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24)
      || v3 == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24)
      || v3 == *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
    {
      v4 = *((_QWORD *)this + 10);
      if (!v4)
        return 0;
    }
    else
    {
      v4 = *((_QWORD *)this + 10);
      if (v3 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24) || v4 == 0)
        return 0;
    }
    result = 0;
    while ((*(_WORD *)(v4 + 28) & 8) == 0)
    {
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        return result;
    }
    v7 = 0;
LABEL_19:
    v7 |= WebCore::setTableCellsChanged((WebCore *)v4, a2);
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        break;
      if ((*(_WORD *)(v4 + 28) & 8) != 0)
        goto LABEL_19;
    }
    if ((v7 & 1) != 0)
      goto LABEL_24;
    return 0;
  }
LABEL_24:
  WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v8 = *((_QWORD *)this + 4);
    if (!v8 || (*(_WORD *)(v8 + 28) & 8) == 0 || (*(_BYTE *)(v8 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v10);
    }
  }
  return 1;
}

uint64_t WebCore::HTMLTableElement::additionalPresentationalHintStyle(WebCore::HTMLTableElement *this)
{
  WebCore::MutableStyleProperties *v2;
  WTF::StringImpl *v3;
  WebCore::MutableStyleProperties *v4;
  WTF::StringImpl *v5;
  WebCore::MutableStyleProperties *v6;

  if (*((_BYTE *)this + 113))
    return 0;
  if (*((_BYTE *)this + 112))
  {
    if ((byte_1ECE835CD & 1) == 0)
    {
      WebCore::createBorderStyle(&v6, 0xAu);
      v2 = v6;
      v6 = 0;
      qword_1ECE835F8 = (uint64_t)v2;
      WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref((uint64_t *)&v6, v3);
      byte_1ECE835CD = 1;
    }
    return qword_1ECE835F8;
  }
  else
  {
    if (!*((_DWORD *)this + 29))
      return 0;
    if ((byte_1ECE835CC & 1) == 0)
    {
      WebCore::createBorderStyle(&v6, 7u);
      v4 = v6;
      v6 = 0;
      qword_1ECE835F0 = (uint64_t)v4;
      WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref((uint64_t *)&v6, v5);
      byte_1ECE835CC = 1;
    }
    return qword_1ECE835F0;
  }
}

uint64_t WebCore::createBorderStyle(WebCore::MutableStyleProperties **a1, unsigned int a2)
{
  WebCore::MutableStyleProperties *v4;

  v4 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v4 = 0x900000001;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = (char *)v4 + 32;
  *((_QWORD *)v4 + 3) = 4;
  *a1 = v4;
  WebCore::MutableStyleProperties::setProperty(v4, 385, a2, 0);
  WebCore::MutableStyleProperties::setProperty(v4, 364, a2, 0);
  WebCore::MutableStyleProperties::setProperty(v4, 375, a2, 0);
  return WebCore::MutableStyleProperties::setProperty(v4, 378, a2, 0);
}

WebCore::MutableStyleProperties *WebCore::leakGroupBorderStyle(WebCore *this)
{
  WebCore::MutableStyleProperties *v1;

  v1 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v1 = 0x900000001;
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = (char *)v1 + 32;
  *((_QWORD *)v1 + 3) = 4;
  WebCore::MutableStyleProperties::setProperty(v1, 386, 0x1EEu, 0);
  WebCore::MutableStyleProperties::setProperty(v1, 365, 0x1EEu, 0);
  WebCore::MutableStyleProperties::setProperty(v1, 385, 0xEu, 0);
  WebCore::MutableStyleProperties::setProperty(v1, 364, 0xEu, 0);
  return v1;
}

BOOL WebCore::HTMLTableElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::backgroundAttr;
}

uint64_t WebCore::HTMLTableElement::rows@<X0>(WebCore::HTMLTableElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 14) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 14;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0xE;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_QWORD *)(result + 64) = 0;
        *(_BYTE *)(result + 72) &= 0xFCu;
        *(_QWORD *)result = off_1E33CE5A0;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 14 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLTableElement::tBodies@<X0>(WebCore::HTMLTableElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 12) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 12;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0xC;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3388;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 12 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::HTMLTableElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];
  _BYTE v14[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = a1[13];
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (_QWORD *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::backgroundAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::backgroundAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::backgroundAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  result = WebCore::Document::completeURL(*(WebCore::Document **)(a1[5] + 8), v8, *(_QWORD *)(a1[5] + 8) + 848, 0, (WTF::URL *)v13);
  if (v13[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v13, v11, (uint64_t)v14);
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLTableRowElement::rowIndex(WebCore::HTMLTableRowElement *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  void *v8;
  int v9;
  uint64_t v10;
  _DWORD *v12;

  v2 = *((_QWORD *)this + 4);
  if (!v2 || (*(_WORD *)(v2 + 28) & 0x10) == 0)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
  v5 = *(_QWORD *)(WebCore::HTMLNames::tableTag + 24);
  if (v4 != v5)
  {
    if (v4 != *(_QWORD *)(WebCore::HTMLNames::theadTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
    {
      return 0xFFFFFFFFLL;
    }
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2 || (*(_WORD *)(v2 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != v5)
      return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::HTMLTableElement::rows((WebCore::HTMLTableElement *)v2, a2, &v12);
  v6 = v12;
  v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
  if (v7)
  {
    v9 = v7;
    v10 = 0;
    while ((WebCore::HTMLTableRowElement *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 24))(v6, v10) != this)
    {
      v10 = (v10 + 1);
      if (v9 == (_DWORD)v10)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v10 = 0xFFFFFFFFLL;
  }
  if (v6[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  else
    --v6[4];
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v8);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::HTMLTableRowElement::sectionRowIndex(WebCore::HTMLTableRowElement *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(v2 + 24) += 2;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    goto LABEL_3;
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
  if (v5 == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24)
    || v5 == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24)
    || v5 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
  {
    WebCore::HTMLTableSectionElement::rows((WebCore::HTMLTableSectionElement *)v2, a2, &v10);
  }
  else
  {
    if (v5 != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
    {
LABEL_3:
      v4 = 0;
      goto LABEL_9;
    }
    WebCore::HTMLTableElement::rows((WebCore::HTMLTableElement *)v2, a2, &v10);
  }
  v4 = v10;
LABEL_9:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  if (!v4)
    return 0xFFFFFFFFLL;
  v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    while ((WebCore::HTMLTableRowElement *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 24))(v4, v8) != this)
    {
      v8 = (v8 + 1);
      if (v7 == (_DWORD)v8)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    v8 = 0xFFFFFFFFLL;
  }
  if (v4[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[4];
  return v8;
}

uint64_t WebCore::HTMLTableRowElement::insertCell@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WebCore::Node *v20;
  _BYTE v21[8];
  WTF::StringImpl *v22;
  char v23;
  _BYTE v24[8];
  uint64_t v25;
  char v26;
  _DWORD *v27;
  _BYTE v28[8];
  WTF::StringImpl *v29;
  char v30;

  if ((int)a2 > -2)
  {
    v5 = this;
    WebCore::HTMLTableRowElement::cells((WebCore::HTMLTableRowElement *)this, a2, &v27);
    v6 = v27;
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
    if ((int)this >= (int)a2)
    {
      v7 = this;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
      v9 = bmalloc::api::isoAllocate();
      v10 = v9;
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      v11 = v8 + 96;
      if (!v8)
        v11 = 0;
      *(_QWORD *)(v9 + 40) = v11;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(v8 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v12 = WebCore::HTMLNames::tdTag;
      if (WebCore::HTMLNames::tdTag)
        ++*(_DWORD *)WebCore::HTMLNames::tdTag;
      *(_QWORD *)(v9 + 96) = v12;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)v9 = off_1E33CDBC0;
      v24[0] = 0;
      v26 = 0;
      if ((_DWORD)a2 == -1 || v7 == (_DWORD)a2)
      {
        WebCore::ContainerNode::appendChild(v5, (WebCore::Node *)v9, (uint64_t)v21);
        v28[0] = 0;
        v30 = 0;
        if (v23)
        {
          v28[0] = v21[0];
          v18 = v22;
          v22 = 0;
          v29 = v18;
          v30 = 1;
        }
        this = std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)v28, (uint64_t)v24);
        if (v30)
        {
          this = (uint64_t)v29;
          v29 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
            else
              *(_DWORD *)this -= 2;
          }
        }
        if (v23)
        {
          this = (uint64_t)v22;
          v22 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      else
      {
        v13 = (WebCore::Node *)(*(uint64_t (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v6 + 24))(v6, a2);
        if (v13)
          *((_DWORD *)v13 + 6) += 2;
        v20 = v13;
        WebCore::ContainerNode::insertBefore(v5, (uint64_t *)v10, &v20, (uint64_t)v21);
        v28[0] = 0;
        v30 = 0;
        if (v23)
        {
          v28[0] = v21[0];
          v14 = v22;
          v22 = 0;
          v29 = v14;
          v30 = 1;
        }
        std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)v28, (uint64_t)v24);
        if (v30)
        {
          v16 = v29;
          v29 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v15);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        if (v23)
        {
          v17 = v22;
          v22 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v15);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        this = (uint64_t)v20;
        v20 = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v15);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
        }
      }
      if (v26)
      {
        v19 = v25;
        *(_BYTE *)a3 = v24[0];
        *(_QWORD *)(a3 + 8) = v19;
        *(_DWORD *)(a3 + 16) = 1;
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v15);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      else
      {
        *(_QWORD *)a3 = v10;
        *(_DWORD *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
    }
    if (v6[4] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::HTMLTableRowElement::cells@<X0>(WebCore::HTMLTableRowElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 15) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 15;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0xF;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3388;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 15 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

WebCore::ContainerNode *WebCore::HTMLTableRowElement::deleteCell@<X0>(WebCore::HTMLTableRowElement *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  _DWORD *v6;
  WebCore::ContainerNode *result;
  WebCore::Node *v8;
  _DWORD *v9;

  v3 = a2;
  WebCore::HTMLTableRowElement::cells(this, a2, &v9);
  v6 = v9;
  result = (WebCore::ContainerNode *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
  if ((_DWORD)v3 != -1)
  {
    if ((v3 & 0x80000000) == 0)
      goto LABEL_3;
    goto LABEL_7;
  }
  if ((_DWORD)result)
  {
    v3 = (WTF::StringImpl *)((_DWORD)result - 1);
    if ((v3 & 0x80000000) == 0)
    {
LABEL_3:
      if ((int)v3 < (int)result)
      {
        v8 = (WebCore::Node *)(*(uint64_t (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v6 + 24))(v6, v3);
        result = WebCore::ContainerNode::removeChild(this, v8, (_QWORD *)a3);
        goto LABEL_9;
      }
    }
LABEL_7:
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_9;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
LABEL_9:
  if (v6[4] == 1)
    return (WebCore::ContainerNode *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  --v6[4];
  return result;
}

WebCore::MutableStyleProperties *WebCore::HTMLTableSectionElement::additionalPresentationalHintStyle(WebCore::HTMLTableSectionElement *this, void *a2)
{
  uint64_t v2;
  __int16 v3;
  WebCore::MutableStyleProperties *v4;
  int v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 8) == 0)
    return 0;
  while ((v3 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (v2)
    {
      v3 = *(_WORD *)(v2 + 28);
      if ((v3 & 8) != 0)
        continue;
    }
    return 0;
  }
  v6 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v6 + 2;
  if (*(_DWORD *)(v2 + 116) == 2)
  {
    if (byte_1ECE835CE == 1)
    {
      v4 = (WebCore::MutableStyleProperties *)qword_1ECE83600;
    }
    else
    {
      v7 = v2;
      v4 = WebCore::leakGroupBorderStyle((WebCore *)v2);
      v2 = v7;
      qword_1ECE83600 = (uint64_t)v4;
      byte_1ECE835CE = 1;
      v6 = *(_DWORD *)(v7 + 24) - 2;
    }
  }
  else
  {
    v4 = 0;
  }
  if (v6)
  {
    *(_DWORD *)(v2 + 24) = v6;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  return v4;
}

uint64_t WebCore::HTMLTableSectionElement::insertRow@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WebCore::Node *v20;
  _BYTE v21[8];
  WTF::StringImpl *v22;
  char v23;
  _BYTE v24[8];
  uint64_t v25;
  char v26;
  _DWORD *v27;
  _BYTE v28[8];
  WTF::StringImpl *v29;
  char v30;

  if ((int)a2 > -2)
  {
    v5 = this;
    WebCore::HTMLTableSectionElement::rows((WebCore::HTMLTableSectionElement *)this, a2, &v27);
    v6 = v27;
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
    if ((int)this >= (int)a2)
    {
      v7 = this;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
      v9 = bmalloc::api::isoAllocate();
      v10 = v9;
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      v11 = v8 + 96;
      if (!v8)
        v11 = 0;
      *(_QWORD *)(v9 + 40) = v11;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(v8 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v12 = WebCore::HTMLNames::trTag;
      if (WebCore::HTMLNames::trTag)
        ++*(_DWORD *)WebCore::HTMLNames::trTag;
      *(_QWORD *)(v9 + 96) = v12;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)v9 = off_1E33CF4D8;
      v24[0] = 0;
      v26 = 0;
      if ((_DWORD)a2 == -1 || v7 == (_DWORD)a2)
      {
        WebCore::ContainerNode::appendChild(v5, (WebCore::Node *)v9, (uint64_t)v21);
        v28[0] = 0;
        v30 = 0;
        if (v23)
        {
          v28[0] = v21[0];
          v18 = v22;
          v22 = 0;
          v29 = v18;
          v30 = 1;
        }
        this = std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)v28, (uint64_t)v24);
        if (v30)
        {
          this = (uint64_t)v29;
          v29 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
            else
              *(_DWORD *)this -= 2;
          }
        }
        if (v23)
        {
          this = (uint64_t)v22;
          v22 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      else
      {
        v13 = (WebCore::Node *)(*(uint64_t (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v6 + 24))(v6, a2);
        if (v13)
          *((_DWORD *)v13 + 6) += 2;
        v20 = v13;
        WebCore::ContainerNode::insertBefore(v5, (uint64_t *)v10, &v20, (uint64_t)v21);
        v28[0] = 0;
        v30 = 0;
        if (v23)
        {
          v28[0] = v21[0];
          v14 = v22;
          v22 = 0;
          v29 = v14;
          v30 = 1;
        }
        std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)v28, (uint64_t)v24);
        if (v30)
        {
          v16 = v29;
          v29 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v15);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        if (v23)
        {
          v17 = v22;
          v22 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v15);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        this = (uint64_t)v20;
        v20 = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v15);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
        }
      }
      if (v26)
      {
        v19 = v25;
        *(_BYTE *)a3 = v24[0];
        *(_QWORD *)(a3 + 8) = v19;
        *(_DWORD *)(a3 + 16) = 1;
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v15);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      else
      {
        *(_QWORD *)a3 = v10;
        *(_DWORD *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
    }
    if (v6[4] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::HTMLTableSectionElement::rows@<X0>(WebCore::HTMLTableSectionElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 13) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 13;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0xD;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3388;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 13 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

WebCore::ContainerNode *WebCore::HTMLTableSectionElement::deleteRow@<X0>(WebCore::HTMLTableSectionElement *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  _DWORD *v6;
  WebCore::ContainerNode *result;
  WebCore::Node *v8;
  _DWORD *v9;

  v3 = a2;
  WebCore::HTMLTableSectionElement::rows(this, a2, &v9);
  v6 = v9;
  result = (WebCore::ContainerNode *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
  if ((_DWORD)v3 != -1)
  {
    if ((v3 & 0x80000000) == 0)
      goto LABEL_3;
    goto LABEL_7;
  }
  if ((_DWORD)result)
  {
    v3 = (WTF::StringImpl *)((_DWORD)result - 1);
    if ((v3 & 0x80000000) == 0)
    {
LABEL_3:
      if ((int)v3 < (int)result)
      {
        v8 = (WebCore::Node *)(*(uint64_t (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v6 + 24))(v6, v3);
        result = WebCore::ContainerNode::removeChild(this, v8, (_QWORD *)a3);
        goto LABEL_9;
      }
    }
LABEL_7:
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_9;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
LABEL_9:
  if (v6[4] == 1)
    return (WebCore::ContainerNode *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  --v6[4];
  return result;
}

void WebCore::HTMLTableCaptionElement::~HTMLTableCaptionElement(WebCore::HTMLTableCaptionElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLTablePartElement::isHTMLTablePartElement(WebCore::HTMLTablePartElement *this)
{
  return 1;
}

void WebCore::HTMLTableColElement::~HTMLTableColElement(WebCore::HTMLTableColElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLTableRowsCollection::~HTMLTableRowsCollection(WebCore::HTMLTableRowsCollection *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  WebCore::HTMLTableRowsCollection *v8;

  *(_QWORD *)this = off_1E33CFA28;
  if (*((_QWORD *)this + 5) || (*((_BYTE *)this + 72) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = this;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), (uint64_t *)&v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WebCore::HTMLCollection::~HTMLCollection(this, v5);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  _QWORD *v9;
  WebCore::HTMLTableRowsCollection *v10;

  *(_QWORD *)this = off_1E33CFA28;
  if (*((_QWORD *)this + 5) || (*((_BYTE *)this + 72) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v8 = (uint64_t *)(v3 + 1760);
      v10 = this;
      v9 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), (uint64_t *)&v10);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v8, v9);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WebCore::HTMLCollection::~HTMLCollection(this, v5);
  bmalloc::api::isoDeallocate(v6, v7);
}

WebCore::HTMLTableElement *WebCore::CachedHTMLCollection<WebCore::HTMLTableRowsCollection,(WebCore::CollectionTraversalType)2>::length(uint64_t a1, uint64_t a2, WebCore::HTMLTableRowElement *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::HTMLTableElement *result;
  WebCore::HTMLTableElement *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  WebCore::HTMLTableRowElement *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
    return (WebCore::HTMLTableElement *)*(unsigned int *)(a1 + 52);
  if ((*(_BYTE *)(a1 + 72) & 2) == 0 && !*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v5 = v4 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v5 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v21 = a1;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v4 + 1760), &v21, (uint64_t)&v20);
    }
  }
  v6 = *(_QWORD *)(a1 + 24);
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195C76A20);
  }
  result = WebCore::HTMLTableRowsCollection::rowAfter((WebCore::HTMLTableRowsCollection *)v6, 0, a3);
  if (result)
  {
    v8 = result;
    v9 = *(_DWORD *)(a1 + 64);
    do
    {
      v10 = *(unsigned int *)(a1 + 68);
      if ((_DWORD)v10 == *(_DWORD *)(a1 + 64))
      {
        v15 = v10 + (v10 >> 2);
        if (v15 >= 0x10)
          v16 = v15 + 1;
        else
          v16 = 16;
        if (v16 <= v10 + 1)
          v17 = v10 + 1;
        else
          v17 = v16;
        WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 56, v17);
        v10 = *(unsigned int *)(a1 + 68);
        v11 = *(_QWORD *)(a1 + 56);
        v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v8);
        if (v12)
        {
          do
            v18 = __ldaxr(v12);
          while (__stlxr(v18 + 1, v12));
        }
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 56);
        v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v8);
        if (v12)
        {
          do
            v14 = __ldaxr(v12);
          while (__stlxr(v14 + 1, v12));
        }
      }
      *(_QWORD *)(v11 + 8 * v10) = v12;
      ++*(_DWORD *)(a1 + 68);
      v19 = *(_QWORD *)(a1 + 24);
      if ((*(_WORD *)(v19 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x195C769E0);
      }
      if ((*((_WORD *)v8 + 14) & 0x10) == 0
        || *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x195C76A00);
      }
      v8 = WebCore::HTMLTableRowsCollection::rowAfter((WebCore::HTMLTableRowsCollection *)v19, (WebCore::HTMLTableElement **)v8, v13);
    }
    while (v8);
    *(_BYTE *)(a1 + 72) |= 2u;
    if (*(_DWORD *)(a1 + 64) != v9)
      WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                           * (*(_DWORD *)(a1 + 64) - v9)));
    result = (WebCore::HTMLTableElement *)*(unsigned int *)(a1 + 68);
  }
  *(_DWORD *)(a1 + 52) = (_DWORD)result;
  *(_BYTE *)(a1 + 72) |= 1u;
  return result;
}

WebCore::HTMLTableElement *WebCore::CachedHTMLCollection<WebCore::HTMLTableRowsCollection,(WebCore::CollectionTraversalType)2>::item(uint64_t a1, unsigned int a2, WebCore::HTMLTableRowElement *a3)
{
  WebCore::HTMLTableElement *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  WebCore::HTMLTableElement *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::HTMLTableElement *v16;
  WebCore::HTMLTableRowElement *v17;
  WebCore::HTMLTableElement *v18;
  uint64_t v19;
  WebCore::HTMLTableElement *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WebCore::HTMLTableRowElement *v24;
  uint64_t v25;
  WebCore::HTMLTableElement *v26;
  unsigned int v27;
  int v28;
  uint64_t v30;
  uint64_t v31;

  if ((*(_BYTE *)(a1 + 72) & 1) != 0 && *(_DWORD *)(a1 + 52) <= a2)
    return 0;
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if (*(_DWORD *)(a1 + 68) <= a2)
    {
LABEL_62:
      __break(0xC471u);
      JUMPOUT(0x195C76D24);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * a2);
    if (v12)
      return *(WebCore::HTMLTableElement **)(v12 + 8);
    return 0;
  }
  v5 = *(WebCore::HTMLTableElement **)(a1 + 40);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 48);
    v7 = v6 - a2;
    if (v6 < a2)
    {
      v8 = 0;
      v9 = a2 - v6;
      while (1)
      {
        v10 = *(_QWORD *)(a1 + 24);
        if ((*(_WORD *)(v10 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
        {
          goto LABEL_62;
        }
        if ((*((_WORD *)v5 + 14) & 0x10) == 0
          || *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x195C76D44);
        }
        v11 = WebCore::HTMLTableRowsCollection::rowAfter((WebCore::HTMLTableRowsCollection *)v10, (WebCore::HTMLTableElement **)v5, a3);
        v5 = v11;
        if (!v11)
          break;
        if (v7 == --v8)
        {
          *(_QWORD *)(a1 + 40) = v11;
          *(_DWORD *)(a1 + 48) += v9;
          return v5;
        }
      }
      *(_QWORD *)(a1 + 40) = 0;
      v28 = *(_DWORD *)(a1 + 48) - v8;
      *(_DWORD *)(a1 + 48) = v28;
      *(_DWORD *)(a1 + 52) = v28 + 1;
      goto LABEL_58;
    }
    if (v6 > a2)
    {
      v23 = *(_QWORD *)(a1 + 24);
      if ((*(_WORD *)(v23 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x195C76E50);
      }
      v5 = WebCore::HTMLTableRowsCollection::rowAfter((WebCore::HTMLTableRowsCollection *)v23, 0, a3);
      *(_QWORD *)(a1 + 40) = v5;
      *(_DWORD *)(a1 + 48) = 0;
      if (a2)
      {
        *(_DWORD *)(a1 + 48) = 0;
        do
        {
          v25 = *(_QWORD *)(a1 + 24);
          if ((*(_WORD *)(v25 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x195C76DC4);
          }
          if (v5
            && ((*((_WORD *)v5 + 14) & 0x10) == 0
             || *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24)))
          {
            __break(0xC471u);
            JUMPOUT(0x195C76E30);
          }
          v26 = WebCore::HTMLTableRowsCollection::rowAfter((WebCore::HTMLTableRowsCollection *)v25, (WebCore::HTMLTableElement **)v5, v24);
          v5 = v26;
          if (!v26)
            break;
          v27 = *(_DWORD *)(a1 + 48) + 1;
          *(_DWORD *)(a1 + 48) = v27;
        }
        while (v27 < a2);
        *(_QWORD *)(a1 + 40) = v26;
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(a1 + 72) & 1) == 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
      v14 = v13 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v14 + 1768);
      if ((*(_BYTE *)(a1 + 22) & 2) != 0)
      {
        v31 = a1;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v13 + 1760), &v31, (uint64_t)&v30);
      }
    }
    v15 = *(_QWORD *)(a1 + 24);
    if ((*(_WORD *)(v15 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195C76DA4);
    }
    v16 = WebCore::HTMLTableRowsCollection::rowAfter((WebCore::HTMLTableRowsCollection *)v15, 0, a3);
    v18 = v16;
    *(_QWORD *)(a1 + 40) = v16;
    *(_DWORD *)(a1 + 48) = 0;
    v5 = v16;
    if (a2)
    {
      v5 = v16;
      if (v16)
      {
        *(_DWORD *)(a1 + 48) = 0;
        v5 = v16;
        do
        {
          v19 = *(_QWORD *)(a1 + 24);
          if ((*(_WORD *)(v19 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x195C76D64);
          }
          if ((*((_WORD *)v5 + 14) & 0x10) == 0
            || *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x195C76D84);
          }
          v20 = WebCore::HTMLTableRowsCollection::rowAfter((WebCore::HTMLTableRowsCollection *)v19, (WebCore::HTMLTableElement **)v5, v17);
          v5 = v20;
          if (!v20)
            break;
          v21 = *(_DWORD *)(a1 + 48) + 1;
          *(_DWORD *)(a1 + 48) = v21;
        }
        while (v21 < a2);
        *(_QWORD *)(a1 + 40) = v20;
      }
    }
    if (!v5)
    {
      if (v18)
        v22 = *(_DWORD *)(a1 + 48) + 1;
      else
        v22 = 0;
      v5 = 0;
      *(_DWORD *)(a1 + 52) = v22;
LABEL_58:
      *(_BYTE *)(a1 + 72) |= 1u;
    }
  }
  return v5;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTableRowsCollection,(WebCore::CollectionTraversalType)2>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 64);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 20);
LABEL_5:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTableRowsCollection,(WebCore::CollectionTraversalType)2>::namedItem(_QWORD *a1, uint64_t *a2)
{
  if (*a2 && *(_DWORD *)(*a2 + 4))
    return WebCore::HTMLCollection::namedItemSlow(a1, a2);
  else
    return 0;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTableRowsCollection,(WebCore::CollectionTraversalType)2>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_24;
  }
  if (__stxr(1u, v13))
    goto LABEL_23;
LABEL_24:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 40) || (*(_BYTE *)(v3 + 72) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v20 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v20);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 72) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 56);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 68) = 0;
  }
  return result;
}

void WebCore::CachedHTMLCollection<WebCore::HTMLTableRowsCollection,(WebCore::CollectionTraversalType)2>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33CFA28;
  if (*(_QWORD *)(a1 + 40) || (*(_BYTE *)(a1 + 72) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTableRowsCollection,(WebCore::CollectionTraversalType)2>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33CFA28;
  if (*(_QWORD *)(a1 + 40) || (*(_BYTE *)(a1 + 72) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::HTMLTemplateElement::~HTMLTemplateElement(WebCore::HTMLTemplateElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 14);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 96);
    *(_QWORD *)(v3 + 96) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        v13 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v13)
        {
          v18 = v4;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v13));
          v4 = v18;
        }
        v14 = *(WTF **)(v4 + 16);
        if (v14)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          v16 = v4;
          WTF::fastFree(v14, a2);
          v4 = v16;
        }
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  v7 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v11 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v11)
      {
        v17 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v11));
        v7 = v17;
      }
      v12 = *(WTF **)(v7 + 16);
      if (v12)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v15 = v7;
        WTF::fastFree(v12, a2);
        v7 = v15;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLTemplateElement::~HTMLTemplateElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::HTMLTemplateElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x181C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33D0ED0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLTemplateElement::content(WebCore::HTMLTemplateElement *this)
{
  uint64_t v1;
  WebCore::Document *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 14);
  if (!v1)
  {
    v4 = WebCore::Document::ensureTemplateDocument(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
    v1 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v1 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v1 + 24) = 0xB00400000002;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = (char *)v4 + 96;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    ++*((_DWORD *)v4 + 831);
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 88) = 0;
    *(_QWORD *)v1 = off_1E33D1E88;
    v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    *(_QWORD *)(v1 + 96) = v5;
    v7 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v1;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
          return *((_QWORD *)this + 14);
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
  return v1;
}

uint64_t *WebCore::HTMLTemplateElement::shadowRootMode(WebCore::HTMLTemplateElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int **v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if ((_MergedGlobals_192 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83618 = v18;
    _MergedGlobals_192 = 1;
  }
  if ((byte_1ECE83611 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83620 = v18;
    byte_1ECE83611 = 1;
  }
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_16;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_8;
LABEL_16:
    v7 = (int **)MEMORY[0x1E0CBF2F8];
    goto LABEL_17;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_16;
LABEL_8:
  v6 = v6;
  v7 = (int **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::shadowrootmodeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::shadowrootmodeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::shadowrootmodeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (int **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_17:
  v9 = *v7;
  if (!*v7)
    return (uint64_t *)MEMORY[0x1E0CBF3B8];
  v10 = *v9;
  v11 = v9[1];
  *v9 += 2;
  if (v11 == 6)
  {
    v14 = *((_QWORD *)v9 + 1);
    if ((v9[4] & 4) != 0)
    {
      if ((*(_BYTE *)v14 & 0xDF) != 0x43
        || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x4C
        || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x4F
        || (*(_BYTE *)(v14 + 3) & 0xDF) != 0x53
        || (*(_BYTE *)(v14 + 4) & 0xDF) != 0x45)
      {
        goto LABEL_20;
      }
      v15 = *(unsigned __int8 *)(v14 + 5);
    }
    else
    {
      if ((*(_WORD *)v14 & 0xFFDF) != 0x43
        || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v14 + 6) & 0xFFDF) != 0x53
        || (*(_WORD *)(v14 + 8) & 0xFFDF) != 0x45)
      {
        goto LABEL_20;
      }
      v15 = *(unsigned __int16 *)(v14 + 10);
    }
    if ((v15 & 0xFFFFFFDF) != 0x44)
    {
LABEL_20:
      v12 = (uint64_t *)MEMORY[0x1E0CBF3B8];
      goto LABEL_21;
    }
    v12 = &qword_1ECE83620;
  }
  else
  {
    if (v11 != 4)
      goto LABEL_20;
    v16 = *((_QWORD *)v9 + 1);
    if ((v9[4] & 4) != 0)
    {
      if ((*(_BYTE *)v16 & 0xDF) != 0x4F || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x50)
        goto LABEL_20;
      v12 = (uint64_t *)MEMORY[0x1E0CBF3B8];
      if ((*(_BYTE *)(v16 + 2) & 0xDF) == 0x45)
      {
        v17 = *(unsigned __int8 *)(v16 + 3);
        goto LABEL_38;
      }
    }
    else
    {
      if ((*(_WORD *)v16 & 0xFFDF) != 0x4F || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x50)
        goto LABEL_20;
      v12 = (uint64_t *)MEMORY[0x1E0CBF3B8];
      if ((*(_WORD *)(v16 + 4) & 0xFFDF) == 0x45)
      {
        v17 = *(unsigned __int16 *)(v16 + 6);
LABEL_38:
        if ((v17 & 0xFFFFFFDF) == 0x4E)
          v12 = &qword_1ECE83618;
      }
    }
  }
LABEL_21:
  if (v10)
    *v9 = v10;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v9, a2);
  return v12;
}

uint64_t WebCore::HTMLTemplateElement::setDeclarativeShadowRoot(uint64_t this, WebCore::ShadowRoot *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = this;
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = a2;
    *(_BYTE *)(v4 + 32) = 0;
    v5 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v5 & 0xFFFF000000000000 | v4;
    this = v5 & 0xFFFFFFFFFFFFLL;
    if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)this);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)this));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)this);
        v15 = *(unsigned int *)(this + 28);
        if ((_DWORD)v15)
        {
          v18 = this;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(this + 16), (WTF::StringImpl *)(*(_QWORD *)(this + 16) + 32 * v15));
          this = v18;
        }
        v16 = *(WTF **)(this + 16);
        if (v16)
        {
          *(_QWORD *)(this + 16) = 0;
          *(_DWORD *)(this + 24) = 0;
          v17 = this;
          WTF::fastFree(v16, a2);
          this = v17;
        }
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  v8 = (unsigned int *)(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = v8;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v13)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
      v14 = *(WTF **)(v10 + 16);
      if (v14)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v14, a2);
      }
      return WTF::fastFree((WTF *)v10, a2);
    }
  }
  return this;
}

uint64_t WebCore::HTMLTemplateElement::cloneNodeInternal@<X0>(uint64_t this@<X0>, int a2@<W2>, WebCore::Element **a3@<X8>)
{
  const WebCore::Element *v3;
  WebCore::Element *v5;
  uint64_t v6;
  WebCore::TreeScope *v7;
  __n128 v8;
  WebCore::Element *v9;
  WebCore::ContainerNode *v10;
  WebCore::ContainerNode *v11;
  WebCore::Element *v12;

  v3 = (const WebCore::Element *)this;
  switch(a2)
  {
    case 2:
      (*(void (**)(WebCore::Element **__return_ptr, uint64_t))(*(_QWORD *)this + 1112))(&v12, this);
      v5 = v12;
      WebCore::Element::cloneAttributesFromElement(v12, v3, v6, v7, v8);
      (*(void (**)(WebCore::Element *, const WebCore::Element *))(*(_QWORD *)v5 + 496))(v5, v3);
      WebCore::Element::cloneShadowTreeIfPossible((uint64_t)v3, v12);
      this = (uint64_t)WebCore::ContainerNode::cloneChildNodes(v3, v12);
LABEL_7:
      v9 = v12;
      goto LABEL_9;
    case 1:
      this = WebCore::Element::cloneElementWithoutChildren((WebCore::Element *)this, &v12);
      goto LABEL_7;
    case 0:
      return WebCore::Element::cloneElementWithoutChildren((WebCore::Element *)this, a3);
  }
  v9 = 0;
LABEL_9:
  if (!*((_QWORD *)v3 + 14))
  {
LABEL_14:
    *a3 = v9;
    return this;
  }
  v10 = (WebCore::ContainerNode *)WebCore::HTMLTemplateElement::content(v3);
  if (!v9
    || (*((_WORD *)v9 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v9 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    v11 = (WebCore::ContainerNode *)WebCore::HTMLTemplateElement::content(v9);
    this = (uint64_t)WebCore::ContainerNode::cloneChildNodes(v10, v11);
    goto LABEL_14;
  }
  this = 105;
  __break(0xC471u);
  return this;
}

char *WebCore::HTMLTemplateElement::didMoveToNewDocument(WebCore::HTMLTemplateElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  char *result;
  uint64_t v7;
  WebCore::TreeScope *v8;
  WebCore::Node *v9;

  result = (char *)WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  v7 = *((_QWORD *)this + 14);
  if (v7)
  {
    result = (char *)WebCore::Document::ensureTemplateDocument(a3);
    v9 = *(WebCore::Node **)(v7 + 40);
    if (v9 != (WebCore::Node *)(result + 96))
      return (char *)WebCore::Node::moveTreeToNewScope(v7, v9, (WebCore::TreeScope *)(result + 96), v8);
  }
  return result;
}

double WebCore::HTMLTextAreaElement::HTMLTextAreaElement(WebCore::HTMLTextAreaElement *this, WebCore::Document *a2, WebCore::HTMLFormElement *a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int *v6;
  int v7;
  double result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::Document *v12;
  WebCore::HTMLTextAreaElement *v13;
  WebCore::HTMLTextAreaElement *v14;

  *(_OWORD *)((char *)this + 8) = xmmword_1968BC9D0;
  *((_QWORD *)this + 3) = 0x1C1C00000002;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)a2 + 96;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  ++*((_DWORD *)a2 + 831);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v3 = WebCore::HTMLNames::textareaTag;
  if (WebCore::HTMLNames::textareaTag)
    ++*(_DWORD *)WebCore::HTMLNames::textareaTag;
  v4 = 0;
  *((_QWORD *)this + 12) = v3;
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E33BC680;
  *((_QWORD *)this + 14) = off_1E33B3CE0;
  *((_QWORD *)this + 15) = 0;
  if (a3)
  {
    v12 = a2;
    v14 = this;
    v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
    v4 = v10;
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    a2 = v12;
    this = v14;
  }
  *((_QWORD *)this + 16) = v4;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_WORD *)this + 80) = 3;
  *((_BYTE *)this + 162) = *((_BYTE *)this + 162) & 0xFC | 2;
  *((_DWORD *)this + 41) = 0;
  *((_BYTE *)this + 168) &= 0xF8u;
  *(_QWORD *)this = off_1E33D0270;
  *((_QWORD *)this + 14) = &unk_1E33D0858;
  v5 = *((_QWORD *)a2 + 66);
  if (v5)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5)
    {
      v13 = this;
      v9 = WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
      LODWORD(v5) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 680) + 370);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 680) + 370))
        LOBYTE(v5) = (_DWORD)v5 != 3;
      this = v13;
    }
  }
  *((_BYTE *)this + 169) = *((_BYTE *)this + 169) & 0xE0 | v5 | 0x10;
  *(_QWORD *)((char *)this + 172) = -1;
  *(_QWORD *)((char *)this + 180) = 0;
  *((_WORD *)this + 94) = 0;
  {
    v6 = &WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v7 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    goto LABEL_9;
  }
  v6 = (int *)WebCore::mousePointerEventType(void)::mouseType;
  if (WebCore::mousePointerEventType(void)::mouseType)
  {
    v7 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
LABEL_9:
    *v6 = v7 + 2;
  }
  *((_QWORD *)this + 24) = v6;
  *((_QWORD *)this + 25) = 0;
  *(_QWORD *)this = off_1E33CFAA0;
  *((_QWORD *)this + 14) = &unk_1E33D00E8;
  *(_QWORD *)&result = 0x1400000002;
  *((_QWORD *)this + 26) = 0x1400000002;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_WORD *)this + 116) = 1;
  *((_BYTE *)this + 234) = 0;
  *((_BYTE *)this + 168) |= 2u;
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::HTMLTextFormControlElement(uint64_t this, const WebCore::QualifiedName *a2, WebCore::Document *a3, WebCore::HTMLFormElement *a4)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::Document *v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)(this + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(this + 24) = 0x1C1C00000002;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = (char *)a3 + 96;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  ++*((_DWORD *)a3 + 831);
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++*v4;
  v5 = 0;
  *(_QWORD *)(this + 96) = v4;
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)this = off_1E33BC680;
  *(_QWORD *)(this + 112) = off_1E33B3CE0;
  *(_QWORD *)(this + 120) = 0;
  if (a4)
  {
    v12 = a3;
    v14 = this;
    v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a4);
    v5 = v10;
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    a3 = v12;
    this = v14;
  }
  *(_QWORD *)(this + 128) = v5;
  *(_QWORD *)(this + 136) = 0;
  *(_QWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 152) = 0;
  *(_WORD *)(this + 160) = 3;
  *(_BYTE *)(this + 162) = *(_BYTE *)(this + 162) & 0xFC | 2;
  *(_DWORD *)(this + 164) = 0;
  *(_BYTE *)(this + 168) &= 0xF8u;
  *(_QWORD *)this = off_1E33D0270;
  *(_QWORD *)(this + 112) = &unk_1E33D0858;
  v6 = *((_QWORD *)a3 + 66);
  if (v6)
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (v6)
    {
      v13 = this;
      v9 = WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
      LODWORD(v6) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 680) + 370);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 680) + 370))
        LOBYTE(v6) = (_DWORD)v6 != 3;
      this = v13;
    }
  }
  *(_BYTE *)(this + 169) = *(_BYTE *)(this + 169) & 0xE0 | v6 | 0x10;
  *(_QWORD *)(this + 172) = -1;
  *(_QWORD *)(this + 180) = 0;
  *(_WORD *)(this + 188) = 0;
  {
    v7 = &WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v8 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    goto LABEL_9;
  }
  v7 = (int *)WebCore::mousePointerEventType(void)::mouseType;
  if (WebCore::mousePointerEventType(void)::mouseType)
  {
    v8 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
LABEL_9:
    *v7 = v8 + 2;
  }
  *(_QWORD *)(this + 192) = v7;
  *(_QWORD *)(this + 200) = 0;
  return this;
}

uint64_t WebCore::HTMLTextAreaElement::create@<X0>(const WebCore::QualifiedName *a1@<X1>, WebCore::Document *a2@<X2>, WebCore::Element **a3@<X8>)
{
  WebCore::HTMLTextAreaElement *v8;
  WebCore::Element *v9;

  v8 = (WebCore::HTMLTextAreaElement *)bmalloc::api::isoAllocate();
  WebCore::HTMLTextAreaElement::HTMLTextAreaElement(v8, a1, a2);
  *a3 = v9;
  return WebCore::Element::ensureUserAgentShadowRoot(v9);
}

uint64_t WebCore::HTMLTextAreaElement::create@<X0>(WebCore::HTMLTextAreaElement *this@<X0>, WebCore::Element **a2@<X8>)
{
  WebCore::HTMLTextAreaElement *v5;
  WebCore::Element *v6;

  v5 = (WebCore::HTMLTextAreaElement *)bmalloc::api::isoAllocate();
  WebCore::HTMLTextAreaElement::HTMLTextAreaElement(v5, this, 0);
  *a2 = v6;
  return WebCore::Element::ensureUserAgentShadowRoot(v6);
}

BOOL WebCore::HTMLTextFormControlElement::isInnerTextElementEditable(WebCore::HTMLTextFormControlElement *this)
{
  if ((*((_BYTE *)this + 160) & 0x18) != 0)
    return 0;
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 14) + 288))((char *)this + 112))
    return (*((_BYTE *)this + 160) & 0x20) == 0;
  return 1;
}

uint64_t WebCore::HTMLTextAreaElement::formControlType(WebCore::HTMLTextAreaElement *this)
{
  return WebCore::HTMLNames::textareaTag + 24;
}

uint64_t `non-virtual thunk to'WebCore::HTMLTextAreaElement::formControlType(WebCore::HTMLTextAreaElement *this)
{
  return WebCore::HTMLNames::textareaTag + 24;
}

_BYTE *WebCore::HTMLTextAreaElement::saveFormControlState@<X0>(_BYTE *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (this[233])
  {
    v3 = (uint64_t)this;
    if ((this[168] & 2) == 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, _BYTE *))(*(_QWORD *)this + 1408))(&v14, this);
      v9 = v14;
      if (v14)
      {
        WebCore::innerTextValueFrom((WebCore *)&v13, (unint64_t)v14);
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*((_DWORD *)v12 + 6) == 2)
          {
            if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v12, v9);
          }
          else
          {
            *((_DWORD *)v12 + 6) -= 2;
          }
        }
      }
      else
      {
        v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v10 += 2;
        v13 = v10;
      }
      v11 = *(WTF::StringImpl **)(v3 + 224);
      *(_QWORD *)(v3 + 224) = v13;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      *(_BYTE *)(v3 + 168) |= 2u;
      *(_WORD *)(v3 + 233) = 257;
      WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)v3);
    }
    v4 = *(WTF::StringImpl **)(v3 + 224);
    if (v4)
    {
      *(_DWORD *)v4 += 2;
      v13 = v4;
      if ((*((_BYTE *)v4 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v6 = v13;
        v4 = v14;
        v13 = 0;
        v14 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v5);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
    *(_QWORD *)(a2 + 8) = 1;
    this = (_BYTE *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)a2 = this;
    if (v4)
    {
      v8 = *(_DWORD *)v4;
      *(_DWORD *)v4 += 2;
      *(_QWORD *)this = v4;
      *(_DWORD *)(a2 + 12) = 1;
      if (v8)
        *(_DWORD *)v4 = v8;
      else
        return (_BYTE *)WTF::StringImpl::destroy(v4, v7);
    }
    else
    {
      *(_QWORD *)this = 0;
      *(_DWORD *)(a2 + 12) = 1;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return this;
}

_BYTE *WebCore::HTMLTextAreaElement::value@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v2 = this;
  if ((this[168] & 2) == 0)
  {
    WebCore::HTMLTextFormControlElement::innerTextValue((WebCore::HTMLTextFormControlElement *)this, (WebCore *)&v7);
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 28);
    *((_QWORD *)v2 + 28) = v7;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v2[168] |= 2u;
    *(_WORD *)(v2 + 233) = 257;
    this = (_BYTE *)WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)v2);
  }
  v4 = (_DWORD *)*((_QWORD *)v2 + 28);
  if (v4)
    *v4 += 2;
  *a2 = v4;
  return this;
}

_BYTE *`non-virtual thunk to'WebCore::HTMLTextAreaElement::saveFormControlState@<X0>(WebCore::HTMLTextAreaElement *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::HTMLTextAreaElement::saveFormControlState((_BYTE *)this - 112, a2);
}

WebCore::HTMLTextFormControlElement *WebCore::HTMLTextAreaElement::restoreFormControlState(WebCore::HTMLTextFormControlElement *result, uint64_t a2, const WTF::StringImpl *a3, double a4, double a5, float a6)
{
  WebCore::HTMLTextFormControlElement *v6;

  if (*(_DWORD *)(a2 + 12))
  {
    v6 = result;
    WebCore::HTMLTextAreaElement::setValueCommon(result, *(WTF **)a2, a3, 0, a4, a5, a6);
    *((_BYTE *)v6 + 233) = 1;
    return (WebCore::HTMLTextFormControlElement *)WebCore::ValidatedFormListedElement::updateValidity((uint64_t)v6 + 112);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::HTMLTextAreaElement::setValue@<X0>(WebCore::HTMLTextFormControlElement *a1@<X0>, WTF *a2@<X1>, const WTF::StringImpl *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, float a8@<S2>)
{
  uint64_t result;

  WebCore::HTMLTextAreaElement::setValueCommon(a1, a2, a3, a4, a6, a7, a8);
  *((_BYTE *)a1 + 233) = 1;
  result = WebCore::ValidatedFormListedElement::updateValidity((uint64_t)a1 + 112);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLTextAreaElement::restoreFormControlState(uint64_t result, uint64_t a2, const WTF::StringImpl *a3, double a4, double a5, float a6)
{
  uint64_t v6;

  if (*(_DWORD *)(a2 + 12))
  {
    v6 = result;
    WebCore::HTMLTextAreaElement::setValueCommon((WebCore::HTMLTextFormControlElement *)(result - 112), *(WTF **)a2, a3, 0, a4, a5, a6);
    *(_BYTE *)(v6 + 121) = 1;
    return WebCore::ValidatedFormListedElement::updateValidity(v6);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLTextAreaElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  const WTF::StringImpl *v5;
  double v6;
  double v7;
  float v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v11 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v11)
    goto LABEL_2;
  v12 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 2;
  v13 = *a2;
  if ((v13 - 2) < 3)
  {
    v14 = *(_QWORD **)(v11 + 224);
    if (!v14)
      goto LABEL_17;
    v15 = 14;
    goto LABEL_25;
  }
  if (v13 == 8 || v13 == 5)
  {
    v14 = *(_QWORD **)(v11 + 224);
    if (v14)
    {
      v15 = 13;
LABEL_25:
      v16 = v11;
      (*(void (**)(void))(*v14 + 8 * v15))();
      v11 = v16;
      v12 = *(_DWORD *)(v16 + 24) - 2;
    }
  }
LABEL_17:
  if (v12)
  {
    *(_DWORD *)(v11 + 24) = v12;
  }
  else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v11, v4);
  }
LABEL_2:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3446))
    WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged((unsigned int *)a1, *((_QWORD *)a2 + 2), *a2);
  *(_BYTE *)(a1 + 169) &= ~4u;
  if (*(_BYTE *)(a1 + 233))
  {
    WebCore::HTMLTextAreaElement::value((_BYTE *)a1, &v17);
    WebCore::HTMLTextFormControlElement::setInnerTextValue((WebCore::HTMLTextFormControlElement *)a1, &v17);
  }
  else
  {
    WebCore::TextNodeTraversal::childTextContent((WebCore::TextNodeTraversal *)a1, (const WebCore::ContainerNode *)v4, &v17);
    WebCore::HTMLTextAreaElement::setValueCommon((WebCore::HTMLTextFormControlElement *)a1, (WTF *)&v17, v5, 1, v6, v7, v8);
    *(_BYTE *)(a1 + 233) = 0;
    WebCore::ValidatedFormListedElement::updateValidity(a1 + 112);
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLTextAreaElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  BOOL v5;

  v2 = *a2;
  if (*a2 == WebCore::HTMLNames::alignAttr)
    return 0;
  if (v2 == WebCore::HTMLNames::wrapAttr)
    return 1;
  v3 = *(unsigned __int16 *)(v2 + 10);
  result = 1;
  if (v3 > 504)
  {
    if (v3 == 949 || v3 == 505 || v3 == 947)
      return result;
    return 0;
  }
  v5 = (v3 - 411) > 0x20 || ((1 << (v3 + 101)) & 0x100200001) == 0;
  if (v5 && v3 != 286)
    return 0;
  return result;
}

WTF::StringImpl *WebCore::HTMLTextAreaElement::collectPresentationalHintsForAttribute(WebCore::HTMLTextAreaElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *result;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int *v15;
  WTF::StringImpl *v16;
  int *v17;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::wrapAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  v6 = *((unsigned __int8 *)this + 232);
  v7 = 0x14F8u;
  WebCore::staticCSSValuePool[v7] += 2;
  v17 = &WebCore::staticCSSValuePool[v7];
  WebCore::MutableStyleProperties::setProperty(a4, 294, &v17, 0);
  v9 = v17;
  v17 = 0;
  if (v9)
  {
    if (*v9 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
      if (v6)
        goto LABEL_7;
LABEL_11:
      v13 = 0x1394u;
      WebCore::staticCSSValuePool[v13] += 2;
      v17 = &WebCore::staticCSSValuePool[v13];
      WebCore::MutableStyleProperties::setProperty(a4, 270, &v17, 0);
      v15 = v17;
      v17 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v14);
        else
          *v15 -= 2;
      }
      dword_1ECE8C188 += 2;
      v17 = &WebCore::staticCSSValuePool[3448];
      goto LABEL_18;
    }
    *v9 -= 2;
  }
  if (!v6)
    goto LABEL_11;
LABEL_7:
  v10 = 0x1768u;
  WebCore::staticCSSValuePool[v10] += 2;
  v17 = &WebCore::staticCSSValuePool[v10];
  WebCore::MutableStyleProperties::setProperty(a4, 270, &v17, 0);
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
    else
      *v12 -= 2;
  }
  WebCore::staticCSSValuePool[5360] += 2;
  v17 = &WebCore::staticCSSValuePool[5360];
LABEL_18:
  WebCore::MutableStyleProperties::setProperty(a4, 191, &v17, 0);
  result = (WTF::StringImpl *)v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLTextAreaElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  int v27;
  WebCore::RenderElement *v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  unint64_t v33;
  int v34;
  WebCore::RenderElement *v35;
  int v36;
  int v37;
  int v38;
  WebCore::RenderElement *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::placeholderAttr)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1448))(a1);
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)a1);
  }
  else
  {
    WebCore::HTMLFormControlElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  }
  v9 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v9 > 0x249)
  {
    if (v9 != 586)
    {
      if (v9 == 924)
      {
        v24 = *a4;
        if (*a4)
        {
          v25 = 1;
          switch(*((_DWORD *)v24 + 1))
          {
            case 2:
              v44 = *((_QWORD *)v24 + 1);
              if ((*((_BYTE *)v24 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v44 & 0xDF) != 0x4F)
                  goto LABEL_31;
                v45 = *(unsigned __int8 *)(v44 + 1);
              }
              else
              {
                if ((*(_WORD *)v44 & 0xFFDF) != 0x4F)
                  goto LABEL_31;
                v45 = *(unsigned __int16 *)(v44 + 2);
              }
              if ((v45 & 0xFFFFFFDF) != 0x4E)
                goto LABEL_31;
              goto LABEL_112;
            case 3:
              v46 = *((_QWORD *)v24 + 1);
              if ((*((_BYTE *)v24 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v46 & 0xDF) != 0x4F || (*(_BYTE *)(v46 + 1) & 0xDF) != 0x46)
                  goto LABEL_31;
                v47 = *(unsigned __int8 *)(v46 + 2);
              }
              else
              {
                if ((*(_WORD *)v46 & 0xFFDF) != 0x4F || (*(_WORD *)(v46 + 2) & 0xFFDF) != 0x46)
                  goto LABEL_31;
                v47 = *(unsigned __int16 *)(v46 + 4);
              }
              if ((v47 & 0xFFFFFFDF) != 0x46)
                goto LABEL_31;
              v25 = 0;
              break;
            case 4:
              v42 = *((_QWORD *)v24 + 1);
              if ((*((_BYTE *)v24 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v42 & 0xDF) != 0x48
                  || (*(_BYTE *)(v42 + 1) & 0xDF) != 0x41
                  || (*(_BYTE *)(v42 + 2) & 0xDF) != 0x52)
                {
                  goto LABEL_31;
                }
                v43 = *(unsigned __int8 *)(v42 + 3);
              }
              else
              {
                if ((*(_WORD *)v42 & 0xFFDF) != 0x48
                  || (*(_WORD *)(v42 + 2) & 0xFFDF) != 0x41
                  || (*(_WORD *)(v42 + 4) & 0xFFDF) != 0x52)
                {
                  goto LABEL_31;
                }
                v43 = *(unsigned __int16 *)(v42 + 6);
              }
              if ((v43 & 0xFFFFFFDF) == 0x44)
                goto LABEL_112;
              goto LABEL_31;
            case 8:
              v40 = *((_QWORD *)v24 + 1);
              if ((*((_BYTE *)v24 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v40 & 0xDF) != 0x50
                  || (*(_BYTE *)(v40 + 1) & 0xDF) != 0x48
                  || (*(_BYTE *)(v40 + 2) & 0xDF) != 0x59
                  || (*(_BYTE *)(v40 + 3) & 0xDF) != 0x53
                  || (*(_BYTE *)(v40 + 4) & 0xDF) != 0x49
                  || (*(_BYTE *)(v40 + 5) & 0xDF) != 0x43
                  || (*(_BYTE *)(v40 + 6) & 0xDF) != 0x41)
                {
                  goto LABEL_31;
                }
                v41 = *(unsigned __int8 *)(v40 + 7);
              }
              else
              {
                if ((*(_WORD *)v40 & 0xFFDF) != 0x50
                  || (*(_WORD *)(v40 + 2) & 0xFFDF) != 0x48
                  || (*(_WORD *)(v40 + 4) & 0xFFDF) != 0x59
                  || (*(_WORD *)(v40 + 6) & 0xFFDF) != 0x53
                  || (*(_WORD *)(v40 + 8) & 0xFFDF) != 0x49
                  || (*(_WORD *)(v40 + 10) & 0xFFDF) != 0x43
                  || (*(_WORD *)(v40 + 12) & 0xFFDF) != 0x41)
                {
                  goto LABEL_31;
                }
                v41 = *(unsigned __int16 *)(v40 + 14);
              }
              if ((v41 & 0xFFFFFFDF) != 0x4C)
                goto LABEL_31;
LABEL_112:
              v25 = 2;
              break;
            default:
              break;
          }
        }
        else
        {
LABEL_31:
          v25 = 1;
        }
        if (v25 != *(unsigned __int8 *)(a1 + 232))
        {
          *(_BYTE *)(a1 + 232) = v25;
          v26 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 45) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195C78C98);
            }
            if (*(_BYTE *)(v26 + 46) != 44)
            {
              __break(0xC471u);
              JUMPOUT(0x195C78CB8);
            }
            v27 = *(_DWORD *)(v26 + 20);
            if ((v27 & 8) != 0)
              goto LABEL_84;
            *(_DWORD *)(v26 + 20) = v27 | 8;
            v28 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v26, 0);
            WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v26, v28);
            if ((*(_BYTE *)(v26 + 21) & 0x80) == 0)
              goto LABEL_84;
            if ((*(_BYTE *)(v26 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195C78E08);
            }
            v29 = *(_QWORD *)(v26 + 144);
            if (v29)
            {
              v30 = *(_DWORD *)(v29 + 8) + 1;
              *(_DWORD *)(v29 + 8) = v30;
            }
            else
            {
              v30 = MEMORY[8];
            }
            *(_QWORD *)(v29 + 24) = *(_QWORD *)(v29 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v30)
            {
              __break(0xC471u);
              JUMPOUT(0x195C788B8);
            }
            goto LABEL_83;
          }
        }
        return;
      }
      if (v9 != 808)
        return;
      v10 = *a4;
      if (*a4)
      {
        v11 = (uint64_t *)*((_QWORD *)v10 + 1);
        v12 = *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v11 = 0;
        v12 = 0x100000000;
      }
      WebCore::parseHTMLInteger(v11, v12, &v48);
      v13 = HIDWORD(v48);
      if (HIDWORD(v48) == 1)
        goto LABEL_48;
      if (!HIDWORD(v48))
      {
        v14 = v48;
        if ((v48 & 0x80000000) != 0)
        {
          v15 = 2;
          goto LABEL_54;
        }
LABEL_49:
        if (!v14)
          v14 = 2;
        if (v13)
          v15 = 2;
        else
          v15 = v14;
LABEL_54:
        if (*(_DWORD *)(a1 + 208) != v15)
        {
          *(_DWORD *)(a1 + 208) = v15;
          v26 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 45) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195C78CD8);
            }
            if (*(_BYTE *)(v26 + 46) != 44)
            {
              __break(0xC471u);
              JUMPOUT(0x195C78D18);
            }
            v34 = *(_DWORD *)(v26 + 20);
            if ((v34 & 8) != 0)
              goto LABEL_84;
            *(_DWORD *)(v26 + 20) = v34 | 8;
            v35 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v26, 0);
            WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v26, v35);
            if ((*(_BYTE *)(v26 + 21) & 0x80) == 0)
              goto LABEL_84;
            if ((*(_BYTE *)(v26 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195C78E7CLL);
            }
            v29 = *(_QWORD *)(v26 + 144);
            if (v29)
            {
              v30 = *(_DWORD *)(v29 + 8) + 1;
              *(_DWORD *)(v29 + 8) = v30;
            }
            else
            {
              v30 = MEMORY[8];
            }
            *(_QWORD *)(v29 + 24) = *(_QWORD *)(v29 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v30)
            {
              __break(0xC471u);
              JUMPOUT(0x195C789B8);
            }
LABEL_83:
            *(_DWORD *)(v29 + 8) = v30 - 1;
LABEL_84:
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v26, 1, 1);
            return;
          }
        }
        return;
      }
LABEL_47:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_48:
      v14 = v48;
      goto LABEL_49;
    }
    v20 = *a4;
    if (*a4)
    {
      v21 = (uint64_t *)*((_QWORD *)v20 + 1);
      v22 = *((unsigned int *)v20 + 1) | ((unint64_t)((*((_DWORD *)v20 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v21 = 0;
      v22 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v21, v22, &v48);
    if (HIDWORD(v48) == 1)
      goto LABEL_27;
    if (HIDWORD(v48))
      goto LABEL_47;
    v23 = v48;
    if ((v48 & 0x80000000) != 0)
LABEL_27:
      v23 = -1;
    *(_DWORD *)(a1 + 176) = v23;
    goto LABEL_29;
  }
  if (v9 != 405)
  {
    if (v9 != 579)
      return;
    v16 = *a4;
    if (*a4)
    {
      v17 = (uint64_t *)*((_QWORD *)v16 + 1);
      v18 = *((unsigned int *)v16 + 1) | ((unint64_t)((*((_DWORD *)v16 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v17 = 0;
      v18 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v17, v18, &v48);
    if (HIDWORD(v48) == 1)
      goto LABEL_20;
    if (HIDWORD(v48))
      goto LABEL_47;
    v19 = v48;
    if ((v48 & 0x80000000) != 0)
LABEL_20:
      v19 = -1;
    *(_DWORD *)(a1 + 172) = v19;
LABEL_29:
    WebCore::ValidatedFormListedElement::updateValidity(a1 + 112);
    return;
  }
  v31 = *a4;
  if (*a4)
  {
    v32 = (uint64_t *)*((_QWORD *)v31 + 1);
    v33 = *((unsigned int *)v31 + 1) | ((unint64_t)((*((_DWORD *)v31 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v32 = 0;
    v33 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v32, v33, &v48);
  if (HIDWORD(v48) == 1)
  {
    v36 = v48;
  }
  else
  {
    if (HIDWORD(v48))
      goto LABEL_47;
    v36 = v48;
    if ((v48 & 0x80000000) != 0)
    {
      v37 = 20;
      goto LABEL_72;
    }
  }
  if (!v36)
    v36 = 20;
  if (HIDWORD(v48))
    v37 = 20;
  else
    v37 = v36;
LABEL_72:
  if (*(_DWORD *)(a1 + 212) != v37)
  {
    *(_DWORD *)(a1 + 212) = v37;
    v26 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (v26)
    {
      if ((*(_BYTE *)(v26 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C78CF8);
      }
      if (*(_BYTE *)(v26 + 46) != 44)
      {
        __break(0xC471u);
        JUMPOUT(0x195C78D38);
      }
      v38 = *(_DWORD *)(v26 + 20);
      if ((v38 & 8) != 0)
        goto LABEL_84;
      *(_DWORD *)(v26 + 20) = v38 | 8;
      v39 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v26, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v26, v39);
      if ((*(_BYTE *)(v26 + 21) & 0x80) == 0)
        goto LABEL_84;
      if ((*(_BYTE *)(v26 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C78EA8);
      }
      v29 = *(_QWORD *)(v26 + 144);
      if (v29)
      {
        v30 = *(_DWORD *)(v29 + 8) + 1;
        *(_DWORD *)(v29 + 8) = v30;
      }
      else
      {
        v30 = MEMORY[8];
      }
      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v29 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v30)
      {
        __break(0xC471u);
        JUMPOUT(0x195C78ED4);
      }
      goto LABEL_83;
    }
  }
}

void WebCore::HTMLTextFormControlElement::attributeChanged(WebCore::HTMLTextFormControlElement *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  if (*(_QWORD *)a2 == WebCore::HTMLNames::placeholderAttr)
  {
    (*(void (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)a1 + 1448))(a1);
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(a1);
  }
  else
  {
    WebCore::HTMLFormControlElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5, a6);
  }
}

_QWORD *WebCore::HTMLTextAreaElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WebCore::RenderBlockFlow::RenderBlockFlow(v6, 44, a1, a2, 4);
  *result = off_1E3435810;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLTextAreaElement::appendFormData(WebCore::HTMLTextAreaElement *this, WebCore::DOMFormData *a2)
{
  char *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v11;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF::StringBuilder *v14;
  __n128 v15;
  WTF::StringImpl *v16;
  void *v17;
  WebCore::Node *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  WTF::StringBuilder *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  WebCore::Node *v68;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  _DWORD *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unsigned int v86;
  char v87;
  _QWORD *v88;
  uint64_t *v89;
  unsigned int *v90;
  _QWORD v91[2];
  int v92;
  unsigned int v93;
  uint64_t v94;
  WebCore::Node *v95;
  WTF::StringImpl *v96[2];
  int v97;
  char v98;
  char *v99;

  v4 = (char *)this + 112;
  v5 = *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 24))((char *)this + 112) + 104);
  if (v5 && (v6 = *(_DWORD *)(v5 + 4), (v6 & 2) != 0))
  {
    if ((v6 & 1) != 0)
    {
      v73 = *(uint64_t **)(v5 + 40);
      LODWORD(v74) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v73 = (uint64_t *)(v5 + 32);
      LODWORD(v74) = v6 >> 5;
    }
    if ((_DWORD)v74)
    {
      v74 = v74;
      while (1)
      {
        v78 = *v73;
        if (*v73 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v78 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v78 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v73 += 2;
        if (!--v74)
          goto LABEL_212;
      }
    }
    else
    {
LABEL_212:
      v73 = 0;
    }
    v7 = v73 + 1;
  }
  else
  {
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v7;
  v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  if (!v8)
    v8 = *MEMORY[0x1E0CBF3B8];
  if (!v8 || !*(_DWORD *)(v8 + 4))
    return 0;
  *((_DWORD *)this + 6) += 2;
  WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)this + 5) + 8), 0, 0);
  v11 = *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 24))(v4) + 104);
  if (v11 && (v12 = *(_DWORD *)(v11 + 4), (v12 & 2) != 0))
  {
    if ((v12 & 1) != 0)
    {
      v79 = *(_QWORD **)(v11 + 40);
      LODWORD(v80) = *(_DWORD *)(v11 + 52);
    }
    else
    {
      v79 = (_QWORD *)(v11 + 32);
      LODWORD(v80) = v12 >> 5;
    }
    if ((_DWORD)v80)
    {
      v80 = v80;
      while (1)
      {
        v81 = *v79;
        if (*v79 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v81 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v81 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v79 += 2;
        if (!--v80)
          goto LABEL_230;
      }
    }
    else
    {
LABEL_230:
      v79 = 0;
    }
    v13 = (WTF::StringImpl **)(v79 + 1);
  }
  else
  {
    v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  if (*v13)
    v9 = v13;
  if (*((_BYTE *)this + 232) != 2)
  {
    if ((*((_BYTE *)this + 168) & 2) == 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1408))(v96, this);
      v75 = v96[0];
      if (v96[0])
      {
        WebCore::innerTextValueFrom((WebCore *)v91, (unint64_t)v96[0]);
        v82 = v96[0];
        v96[0] = 0;
        if (v82)
        {
          if (*((_DWORD *)v82 + 6) == 2)
          {
            if ((*((_WORD *)v82 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v82, v75);
          }
          else
          {
            *((_DWORD *)v82 + 6) -= 2;
          }
        }
      }
      else
      {
        v76 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v76 += 2;
        v91[0] = v76;
      }
      v77 = (WTF::StringImpl *)*((_QWORD *)this + 28);
      *((_QWORD *)this + 28) = v91[0];
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v75);
        else
          *(_DWORD *)v77 -= 2;
      }
      *((_BYTE *)this + 168) |= 2u;
      *(_WORD *)((char *)this + 233) = 257;
      WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    if (v19)
      *(_DWORD *)v19 += 2;
    v96[0] = v19;
LABEL_27:
    WebCore::DOMFormData::append(a2, v9, v96);
    v21 = v96[0];
    v96[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = *((_QWORD *)this + 13);
    if (v22)
    {
      v23 = *(_DWORD *)(v22 + 4);
      if ((v23 & 1) != 0)
      {
        v24 = *(_QWORD *)(v22 + 40);
        LODWORD(v25) = *(_DWORD *)(v22 + 52);
        if ((_DWORD)v25)
        {
LABEL_33:
          v25 = v25;
          v26 = (WTF::StringImpl **)(v24 + 8);
          while (1)
          {
            v27 = (uint64_t)*(v26 - 1);
            if (v27 == WebCore::HTMLNames::dirnameAttr
              || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 24)
              && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 32))
            {
              break;
            }
            v26 += 2;
            if (!--v25)
            {
              v26 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_42:
          if (*v26)
          {
            WebCore::HTMLTextFormControlElement::directionForFormData((WebCore::HTMLTextFormControlElement **)this, v96);
            WebCore::DOMFormData::append(a2, v26, v96);
            v28 = v96[0];
            v96[0] = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
              {
                WTF::StringImpl::destroy(v28, v20);
                if (!this)
                  return 1;
                goto LABEL_50;
              }
              *(_DWORD *)v28 -= 2;
            }
          }
          if (!this)
            return 1;
LABEL_50:
          if (*((_DWORD *)this + 6) == 2)
            goto LABEL_219;
          *((_DWORD *)this + 6) -= 2;
          return 1;
        }
      }
      else
      {
        v24 = v22 + 32;
        LODWORD(v25) = v23 >> 5;
        if ((_DWORD)v25)
          goto LABEL_33;
      }
    }
    v26 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_42;
  }
  if (((*(uint64_t (**)(WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 880))(this) & 1) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1392))(v96, this);
    goto LABEL_27;
  }
  (*(void (**)(WebCore::Node **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1408))(&v95, this);
  if (!v95)
    goto LABEL_18;
  WebCore::Node::textContent(v95, 0, v14, v96, v15);
  if (!v96[0])
    goto LABEL_18;
  v29 = *((_DWORD *)v96[0] + 1);
  if (*(_DWORD *)v96[0] == 2)
  {
    WTF::StringImpl::destroy(v96[0], v16);
    if (!v29)
      goto LABEL_18;
  }
  else
  {
    *(_DWORD *)v96[0] -= 2;
    if (!v29)
    {
LABEL_18:
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1392))(v96, this);
LABEL_19:
      v18 = v95;
      v95 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18, v17);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      goto LABEL_27;
    }
  }
  v30 = *((_QWORD *)v95 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v30)
    goto LABEL_18;
  if ((*(_BYTE *)((*((_QWORD *)v95 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
LABEL_234:
    __break(0xC471u);
    JUMPOUT(0x195C79AC8);
  }
  if (*(_BYTE *)((*((_QWORD *)v95 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
  {
    __break(0xC471u);
    JUMPOUT(0x195C79AE8);
  }
  v94 = 0;
  v93 = 0;
  WebCore::InlineIterator::firstLineBoxFor(v30, v16, (uint64_t)v91);
  if (v92 == -1)
  {
LABEL_233:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_234;
  }
  v96[0] = (WTF::StringImpl *)&v88;
  if (((unsigned int (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v92])(v96, v91))
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1392))(v96, this);
LABEL_189:
    if (v92 != -1)
      ((void (*)(_QWORD **, _QWORD *))off_1E33D2058[v92])(&v88, v91);
    goto LABEL_19;
  }
  v83 = v9;
  v88 = v91;
  v89 = &v94;
  v90 = &v93;
  WebCore::HTMLTextFormControlElement::valueWithHardLineBreaks(void)const::$_0::operator()((uint64_t)&v88);
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 1;
  v32 = *((_QWORD *)v95 + 10);
  if (!v32)
  {
LABEL_176:
    WebCore::stripTrailingNewline((uint64_t)&v84, v31);
    v70 = v84;
    if (v84)
    {
      v9 = v83;
    }
    else
    {
      WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v84);
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v84);
      v9 = v83;
      v70 = v84;
      if (!v84)
        goto LABEL_183;
    }
    *(_DWORD *)v70 += 2;
LABEL_183:
    v96[0] = v70;
    v71 = v85;
    v85 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v71 -= 2;
    }
    v72 = v84;
    v84 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v72 -= 2;
    }
    goto LABEL_189;
  }
  *(_DWORD *)(v32 + 24) += 2;
  while (1)
  {
    v33 = v32;
    v34 = *(_WORD *)(v32 + 28);
    if ((v34 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
      break;
    LOWORD(v96[0]) = 10;
    if (v85 && ((v53 = v86, v86 < *((_DWORD *)v85 + 1)) ? (v54 = v84 == 0) : (v54 = 0), v54))
    {
      v55 = *((_DWORD *)v85 + 4);
      v56 = *((_QWORD *)v85 + 1);
      ++v86;
      if ((v55 & 4) != 0)
        *(_BYTE *)(v56 + v53) = 10;
      else
        *(_WORD *)(v56 + 2 * v53) = 10;
    }
    else
    {
      WTF::StringBuilder::append();
    }
LABEL_124:
    if (v33 == v94)
    {
      v57 = v88;
      v58 = v89;
      v59 = v90;
      while (1)
      {
        v60 = *((unsigned int *)v57 + 4);
        if ((_DWORD)v60 == -1)
          goto LABEL_233;
        v96[0] = (WTF::StringImpl *)&v99;
        if ((((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v60])(v96, v57) & 1) != 0)
        {
          *v58 = 0;
          *v59 = 0;
          if (v33 != v94)
            break;
        }
        else
        {
          v61 = *((unsigned int *)v57 + 4);
          if ((_DWORD)v61 == -1)
            goto LABEL_233;
          v99 = &v98;
          ((void (*)(WTF::StringImpl **__return_ptr, char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox11lastLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v61])(v96, &v99, v57);
          v62 = *((unsigned int *)v57 + 4);
          if ((_DWORD)v62 == -1)
            goto LABEL_233;
          v99 = &v98;
          ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v62])(&v99, v57);
          v63 = *((unsigned int *)v57 + 4);
          if ((_DWORD)v63 == -1)
            goto LABEL_233;
          v99 = &v98;
          if ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v63])(&v99, v57) & 1) != 0)goto LABEL_140;
          if (v97 == -1)
            goto LABEL_233;
          v99 = &v98;
          if ((((uint64_t (*)(char **, WTF::StringImpl **))off_1E33D2018[v97])(&v99, v96) & 1) != 0)
          {
LABEL_140:
            v64 = 1;
          }
          else
          {
            if (v97 == -1)
              goto LABEL_233;
            v99 = &v98;
            v65 = ((uint64_t (*)(char **, WTF::StringImpl **))off_1E33D2028[v97])(&v99, v96);
            v66 = (*(_BYTE *)(v65 + 45) & 1) != 0 ? 0 : *(_QWORD *)(*(_QWORD *)(v65 + 24) + 8);
            *v58 = v66;
            if (v97 == -1)
              goto LABEL_233;
            v99 = &v98;
            v64 = 0;
            *v59 = ((uint64_t (*)(char **, WTF::StringImpl **))off_1E33D2038[v97])(&v99, v96);
          }
          if (v97 != -1)
            ((void (*)(char **, WTF::StringImpl **))off_1E33D2048[v97])(&v99, v96);
          if (v33 == v94)
            v67 = 1;
          else
            v67 = v64;
          if ((v67 & 1) == 0)
            break;
        }
      }
    }
    if ((*(_WORD *)(v33 + 28) & 4) != 0)
    {
      v32 = *(_QWORD *)(v33 + 80);
      if (v32)
      {
LABEL_161:
        *(_DWORD *)(v32 + 24) += 2;
        goto LABEL_162;
      }
    }
    if ((WebCore::Node *)v33 != v95)
    {
      v32 = *(_QWORD *)(v33 + 56);
      if (v32)
        goto LABEL_161;
      v68 = (WebCore::Node *)v33;
      while (1)
      {
        v68 = (WebCore::Node *)*((_QWORD *)v68 + 4);
        if (!v68 || v68 == v95)
          break;
        v32 = *((_QWORD *)v68 + 7);
        if (v32)
          goto LABEL_161;
      }
    }
    v32 = 0;
LABEL_162:
    if (*(_DWORD *)(v33 + 24) == 2)
    {
      if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v33, v31);
    }
    else
    {
      *(_DWORD *)(v33 + 24) -= 2;
    }
    if (!v32)
      goto LABEL_176;
  }
  if ((v34 & 2) == 0)
    goto LABEL_124;
  v35 = *(_QWORD *)(v32 + 80);
  if (v35)
  {
    v36 = *(_DWORD *)(v35 + 4);
    *(_DWORD *)v35 += 2;
  }
  else
  {
    v36 = 0;
  }
  v37 = v93;
  v38 = v33 == v94;
  v39 = 0;
  while (v38 && v37 <= v36)
  {
    v41 = v37 >= v39;
    LODWORD(v42) = v37 - v39;
    if ((_DWORD)v42 == 0 || !v41)
      goto LABEL_93;
    if (v35)
    {
      v20 = *(WTF::StringImpl **)(v35 + 8);
      v43 = *(unsigned int *)(v35 + 4) | ((unint64_t)((*(_DWORD *)(v35 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v20 = 0;
      v43 = 0x100000000;
    }
    if (v43 <= v39)
      goto LABEL_86;
    if (v43 - v39 <= v42)
    {
      if (!v39)
      {
        v42 = v43;
        goto LABEL_85;
      }
      LODWORD(v42) = v43 - v39;
    }
    v42 = v42;
    v44 = v43 - (unint64_t)v39;
    if ((v43 & 0x100000000) != 0)
    {
      if (v44 < v42)
        goto LABEL_218;
      v42 = v42 | 0x100000000;
    }
    else if (v44 < v42)
    {
      goto LABEL_218;
    }
LABEL_85:
    if ((v42 & 0x100000000) == 0)
    {
      WTF::StringBuilder::append();
      goto LABEL_87;
    }
LABEL_86:
    WTF::StringBuilder::append();
LABEL_87:
    v39 = v93;
    LOWORD(v96[0]) = 10;
    if (v85 && ((v45 = v86, v86 < *((_DWORD *)v85 + 1)) ? (v46 = v84 == 0) : (v46 = 0), v46))
    {
      v47 = *((_DWORD *)v85 + 4);
      v48 = *((_QWORD *)v85 + 1);
      ++v86;
      if ((v47 & 4) != 0)
        *(_BYTE *)(v48 + v45) = 10;
      else
        *(_WORD *)(v48 + 2 * v45) = 10;
    }
    else
    {
      WTF::StringBuilder::append();
    }
LABEL_93:
    WebCore::HTMLTextFormControlElement::valueWithHardLineBreaks(void)const::$_0::operator()((uint64_t)&v88);
    v37 = v93;
    v38 = v33 == v94;
  }
  if (v35)
  {
    v20 = *(WTF::StringImpl **)(v35 + 8);
    v49 = *(unsigned int *)(v35 + 4) | ((unint64_t)((*(_DWORD *)(v35 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v20 = 0;
    v49 = 0x100000000;
  }
  if (v49 <= v39)
    goto LABEL_121;
  v50 = v36 - v39;
  if (v49 - v39 > v36 - v39)
    goto LABEL_105;
  if (!v39)
  {
    v51 = v49;
    goto LABEL_120;
  }
  v50 = v49 - v39;
LABEL_105:
  v51 = v50;
  v52 = v49 - (unint64_t)v39;
  if ((v49 & 0x100000000) == 0)
  {
    if (v52 < v51)
      goto LABEL_218;
LABEL_120:
    if ((v51 & 0x100000000) == 0)
    {
      WTF::StringBuilder::append();
      if (!v35)
        goto LABEL_124;
      goto LABEL_122;
    }
LABEL_121:
    WTF::StringBuilder::append();
    if (!v35)
      goto LABEL_124;
LABEL_122:
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v35, v31);
    else
      *(_DWORD *)v35 -= 2;
    goto LABEL_124;
  }
  if (v52 >= v51)
  {
    v51 |= 0x100000000uLL;
    goto LABEL_120;
  }
LABEL_218:
  __break(1u);
LABEL_219:
  if ((*((_WORD *)this + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(this, v20);
  return 1;
}

uint64_t WebCore::HTMLTextFormControlElement::directionForFormData@<X0>(WebCore::HTMLTextFormControlElement **this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::HTMLTextFormControlElement *v2;
  __int16 v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  WTF::StringBuilder *v22;
  __n128 v23;
  WebCore::HTMLElement *v24;
  _QWORD v25[2];

  v2 = (WebCore::HTMLTextFormControlElement *)this;
  if ((*((_WORD *)this + 14) & 0x10) == 0)
  {
    v2 = this[4];
    if (!v2)
      goto LABEL_8;
    v4 = *((_WORD *)v2 + 14);
    if ((v4 & 8) == 0)
      goto LABEL_8;
    while ((v4 & 0x10) == 0)
    {
      v2 = (WebCore::HTMLTextFormControlElement *)*((_QWORD *)v2 + 4);
      if (v2)
      {
        v4 = *((_WORD *)v2 + 14);
        if ((v4 & 8) != 0)
          continue;
      }
      goto LABEL_8;
    }
  }
LABEL_9:
  v6 = *((_QWORD *)v2 + 13);
  if (!v6)
    goto LABEL_21;
  v7 = *(unsigned int *)(v6 + 4);
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(v6 + 40);
    v9 = *(unsigned int *)(v6 + 52);
    if (!v9)
    {
LABEL_21:
      v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      goto LABEL_22;
    }
  }
  else
  {
    v8 = v6 + 32;
    v9 = v7 >> 5;
    if (!(v7 >> 5))
      goto LABEL_21;
  }
  v10 = (uint64_t *)(v8 + 8);
  while (1)
  {
    v11 = *(v10 - 1);
    if (v11 == WebCore::HTMLNames::dirAttr
      || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
      && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
    {
      break;
    }
    v10 += 2;
    if (!--v9)
      goto LABEL_21;
  }
LABEL_22:
  v12 = *v10;
  if (!v12)
    goto LABEL_23;
  v14 = *(_DWORD *)(v12 + 4);
  if (v14 != 3)
  {
    if (v14 != 4)
      goto LABEL_23;
    v15 = *(_QWORD *)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v15 & 0xDF) != 0x41
        || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x55
        || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x54)
      {
        goto LABEL_23;
      }
      v16 = *(unsigned __int8 *)(v15 + 3);
    }
    else
    {
      if ((*(_WORD *)v15 & 0xFFDF) != 0x41
        || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x55
        || (*(_WORD *)(v15 + 4) & 0xFFDF) != 0x54)
      {
        goto LABEL_23;
      }
      v16 = *(unsigned __int16 *)(v15 + 6);
    }
    if ((v16 & 0xFFFFFFDF) != 0x4F)
      goto LABEL_23;
    if ((*((_WORD *)v2 + 15) & 4) != 0)
    {
      v24 = v2;
      if (WebCore::HTMLElement::hasDirectionAuto(v2))
      {
        WebCore::HTMLElement::computeDirectionalityFromText((uint64_t)v24, v22, (uint64_t)v25, v23);
        WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode::~TextDirectionWithStrongDirectionalityNode((WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode *)v25);
      }
    }
    goto LABEL_8;
  }
  v17 = *(_QWORD *)(v12 + 8);
  if ((*(_BYTE *)(v12 + 16) & 4) != 0)
  {
    v18 = *(_BYTE *)v17 & 0xDF;
    if (v18 == 82)
    {
      if ((*(_BYTE *)(v17 + 1) & 0xDF) != 0x54)
        goto LABEL_23;
      v19 = *(unsigned __int8 *)(v17 + 2);
      goto LABEL_40;
    }
    if (v18 != 76 || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x54)
      goto LABEL_23;
    v20 = *(unsigned __int8 *)(v17 + 2);
LABEL_45:
    if ((v20 & 0xFFFFFFDF) != 0x52)
      goto LABEL_23;
    goto LABEL_8;
  }
  v21 = *(_WORD *)v17 & 0xFFDF;
  if (v21 == 82)
  {
    if ((*(_WORD *)(v17 + 2) & 0xFFDF) != 0x54)
      goto LABEL_23;
    v19 = *(unsigned __int16 *)(v17 + 4);
LABEL_40:
    if ((v19 & 0xFFFFFFDF) != 0x4C)
      goto LABEL_23;
    goto LABEL_8;
  }
  if (v21 == 76 && (*(_WORD *)(v17 + 2) & 0xFFDF) == 0x54)
  {
    v20 = *(unsigned __int16 *)(v17 + 4);
    goto LABEL_45;
  }
LABEL_23:
  while (1)
  {
    v2 = (WebCore::HTMLTextFormControlElement *)*((_QWORD *)v2 + 4);
    if (!v2)
      break;
    v13 = *((_WORD *)v2 + 14);
    if ((v13 & 8) == 0)
      break;
    if ((v13 & 0x10) != 0)
      goto LABEL_9;
  }
LABEL_8:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a2 = v25[0];
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLTextAreaElement::appendFormData(WebCore::HTMLTextAreaElement *this, WebCore::DOMFormData *a2)
{
  return WebCore::HTMLTextAreaElement::appendFormData((WebCore::HTMLTextAreaElement *)((char *)this - 112), a2);
}

WTF::StringImpl *WebCore::HTMLTextAreaElement::reset(WebCore::HTMLTextAreaElement *this)
{
  char *v2;
  const WebCore::ContainerNode *v3;
  const WTF::StringImpl *v4;
  double v5;
  double v6;
  float v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v2 = (char *)this + 112;
  WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)this + 112, 0);
  WebCore::TextNodeTraversal::childTextContent(this, v3, &v10);
  WebCore::HTMLTextAreaElement::setValueCommon(this, (WTF *)&v10, v4, 0, v5, v6, v7);
  *((_BYTE *)this + 233) = 0;
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)v2);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLTextAreaElement::reset(WebCore::HTMLTextAreaElement *this)
{
  WebCore::TextNodeTraversal *v2;
  const WebCore::ContainerNode *v3;
  const WTF::StringImpl *v4;
  double v5;
  double v6;
  float v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v2 = (WebCore::HTMLTextAreaElement *)((char *)this - 112);
  WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)this, 0);
  WebCore::TextNodeTraversal::childTextContent(v2, v3, &v10);
  WebCore::HTMLTextAreaElement::setValueCommon(v2, (WTF *)&v10, v4, 0, v5, v6, v7);
  *((_BYTE *)this + 121) = 0;
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLTextAreaElement::updateFocusAppearance(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  __int128 v5;

  if (a2 || !*(_BYTE *)(a1 + 188))
  {
    v5 = xmmword_1969F1100;
    return WebCore::HTMLTextFormControlElement::setSelectionRange(a1, 0, 0, 0, a3, (uint64_t *)&v5, 0);
  }
  else
  {
    v5 = xmmword_1969F1100;
    result = WebCore::HTMLTextFormControlElement::setSelectionRange(a1, *(_DWORD *)(a1 + 180), *(_DWORD *)(a1 + 184), *(_BYTE *)(a1 + 169) & 3, a3, (uint64_t *)&v5, 0);
    if ((_DWORD)result)
      return WebCore::HTMLTextFormControlElement::scheduleSelectEvent((WebCore::HTMLTextFormControlElement *)a1);
  }
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionRange(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, uint64_t *a6, int a7)
{
  WTF::StringImpl *v14;
  WebCore::Node *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  WebCore::Document *v24;
  uint64_t v25;
  int v26;
  char v27;
  BOOL v28;
  WebCore::Node *v29;
  int v30;
  unsigned __int8 v31;
  WebCore::Node *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  __int16 v37;
  unsigned __int16 v38;
  __int16 v39;
  unsigned __int16 v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL8 v43;
  WebCore::Node *v44;
  WTF::StringImpl *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WebCore::Node *v49;
  uint64_t result;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  WebCore::Editor *v56;
  void *v57;
  WebCore::Editor *v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  uint64_t *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t v70[2];
  WebCore::Node *v71;
  int v72;
  char v73;
  WTF::StringImpl *v74;
  int v75;
  char v76;
  WebCore::Node *v77;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 880))(a1))
    return 0;
  (*(void (**)(WebCore::Node **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1416))(&v77, a1);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1408))(&v74, a1);
  v14 = v74;
  v69 = a6;
  v68 = a7;
  if (v74)
  {
    WebCore::innerTextValueFrom((WebCore *)&v71, (unint64_t)v74);
    v65 = v74;
    v74 = 0;
    if (v65)
    {
      if (*((_DWORD *)v65 + 6) == 2)
      {
        if ((*((_WORD *)v65 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v65);
      }
      else
      {
        *((_DWORD *)v65 + 6) -= 2;
      }
    }
    v15 = v71;
    if (v71)
      goto LABEL_5;
LABEL_112:
    v16 = 0;
    goto LABEL_7;
  }
  v15 = (WebCore::Node *)*MEMORY[0x1E0CBF738];
  if (!*MEMORY[0x1E0CBF738])
    goto LABEL_112;
  *(_DWORD *)v15 += 2;
LABEL_5:
  v16 = *((_DWORD *)v15 + 1);
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(v15, v14);
  else
    *(_DWORD *)v15 -= 2;
LABEL_7:
  if (v16 < a3)
    a3 = v16;
  if (a3 >= a2)
    v17 = a2;
  else
    v17 = a3;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v19 = *(_QWORD *)(v18 + 1248);
  v20 = *(_QWORD *)(v18 + 528);
  if (!v20)
  {
    v21 = 0;
    goto LABEL_74;
  }
  v21 = *(_QWORD *)(v20 + 8);
  if (!v21)
  {
LABEL_74:
    v27 = 1;
    goto LABEL_24;
  }
  v22 = (unsigned int *)(v21 + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  if (a4)
  {
    v27 = 0;
  }
  else
  {
    v24 = *(WebCore::Document **)(v21 + 296);
    v25 = *((_QWORD *)v24 + 382);
    if (!v25)
    {
      v55 = v17;
      v56 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v56, v24);
      v58 = (WebCore::Editor *)*((_QWORD *)v24 + 382);
      *((_QWORD *)v24 + 382) = v56;
      if (v58)
      {
        WebCore::Editor::~Editor(v58, v57);
        if (*(_DWORD *)v59)
        {
          *(_QWORD *)(v59 + 496) = 0;
          *(_OWORD *)(v59 + 464) = 0u;
          *(_OWORD *)(v59 + 480) = 0u;
          *(_OWORD *)(v59 + 432) = 0u;
          *(_OWORD *)(v59 + 448) = 0u;
          *(_OWORD *)(v59 + 400) = 0u;
          *(_OWORD *)(v59 + 416) = 0u;
          *(_OWORD *)(v59 + 368) = 0u;
          *(_OWORD *)(v59 + 384) = 0u;
          *(_OWORD *)(v59 + 336) = 0u;
          *(_OWORD *)(v59 + 352) = 0u;
          *(_OWORD *)(v59 + 304) = 0u;
          *(_OWORD *)(v59 + 320) = 0u;
          *(_OWORD *)(v59 + 272) = 0u;
          *(_OWORD *)(v59 + 288) = 0u;
          *(_OWORD *)(v59 + 240) = 0u;
          *(_OWORD *)(v59 + 256) = 0u;
          *(_OWORD *)(v59 + 208) = 0u;
          *(_OWORD *)(v59 + 224) = 0u;
          *(_OWORD *)(v59 + 176) = 0u;
          *(_OWORD *)(v59 + 192) = 0u;
          *(_OWORD *)(v59 + 144) = 0u;
          *(_OWORD *)(v59 + 160) = 0u;
          *(_OWORD *)(v59 + 112) = 0u;
          *(_OWORD *)(v59 + 128) = 0u;
          *(_OWORD *)(v59 + 80) = 0u;
          *(_OWORD *)(v59 + 96) = 0u;
          *(_OWORD *)(v59 + 48) = 0u;
          *(_OWORD *)(v59 + 64) = 0u;
          *(_OWORD *)(v59 + 16) = 0u;
          *(_OWORD *)(v59 + 32) = 0u;
          *(_OWORD *)v59 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v59, v60);
        }
      }
      v25 = *((_QWORD *)v24 + 382);
      v17 = v55;
    }
    v26 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 16) + 8) + 680) + 370);
    v27 = 0;
    if (v26)
      v28 = v26 == 3;
    else
      v28 = 1;
    a4 = !v28;
  }
LABEL_24:
  v29 = v77;
  if (v19 == a1)
  {
LABEL_25:
    v30 = *(_DWORD *)(a1 + 180);
    v66 = *(_DWORD *)(a1 + 184);
    v31 = *(_BYTE *)(a1 + 169);
    *(_DWORD *)(a1 + 180) = v17;
    *(_DWORD *)(a1 + 184) = a3;
    *(_BYTE *)(a1 + 169) = v31 & 0xFC | a4 & 3;
    *(_BYTE *)(a1 + 188) = 1;
    WebCore::positionForIndex((WebCore *)&v74, v29, v17);
    v71 = 0;
    v72 = 0;
    v73 &= 0xF0u;
    if (a3 > a2)
    {
      if (a4 == 2)
      {
        WebCore::Position::operator=((uint64_t *)&v71, (uint64_t *)&v74);
        WebCore::positionForIndex((WebCore *)v70, v77, a3);
        v62 = (uint64_t *)&v74;
      }
      else
      {
        WebCore::positionForIndex((WebCore *)v70, v77, a3);
        v62 = (uint64_t *)&v71;
      }
      WebCore::Position::operator=(v62, v70);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v70);
    }
    else
    {
      v32 = v74;
      if (v74)
        *((_DWORD *)v74 + 6) += 2;
      v71 = v32;
      v72 = v75;
      v73 = v76;
    }
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
      {
        v35 = (unsigned int *)(v34 + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
        if (v68)
          v37 = 8198;
        else
          v37 = 6;
        if (v19 == a1)
          v37 |= 0x10u;
        v38 = v37 | 0x80;
        v39 = v37 | 0x100;
        if (a5 == 2)
          v37 |= 0x400u;
        if (a5 == 1)
          v37 = v39;
        if (a5)
          v40 = v37;
        else
          v40 = v38;
        WebCore::FrameSelection::moveWithoutValidationTo(*(_QWORD *)(*(_QWORD *)(v34 + 296) + 3064), (const WebCore::Position *)&v74, (const WebCore::Position *)&v71, a4 != 0, v40, v69);
        do
        {
          v41 = __ldaxr(v35);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v35));
        if (!v42)
        {
          atomic_store(1u, v35);
          v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v53 = off_1E31FE290;
          v53[1] = v35;
          v70[0] = (uint64_t)v53;
          WTF::ensureOnMainThread();
          v54 = v70[0];
          v70[0] = 0;
          if (v54)
            (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
        }
      }
    }
    v43 = *(_DWORD *)(a1 + 180) != v30 || *(_DWORD *)(a1 + 184) != v66 || ((*(_BYTE *)(a1 + 169) ^ v31) & 3) != 0;
    v44 = v71;
    v71 = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 6) == 2)
      {
        if ((*((_WORD *)v44 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v44);
      }
      else
      {
        *((_DWORD *)v44 + 6) -= 2;
      }
    }
    v45 = v74;
    v74 = 0;
    if (v45)
    {
      if (*((_DWORD *)v45 + 6) == 2)
      {
        if ((*((_WORD *)v45 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v45);
      }
      else
      {
        *((_DWORD *)v45 + 6) -= 2;
      }
    }
    goto LABEL_56;
  }
  v67 = v21;
  v61 = v17;
  if (!v77)
  {
LABEL_115:
    v17 = v61;
    v21 = v67;
    goto LABEL_25;
  }
  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
    goto LABEL_86;
  v63 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 40) + 8);
  *((_DWORD *)v63 + 6) += 2;
  v74 = v63;
  WebCore::Document::updateLayoutIgnorePendingStylesheets((uint64_t)v63, 0, 0);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v74);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 880))(a1))
  {
    v43 = 0;
LABEL_90:
    v21 = v67;
LABEL_56:
    if ((v27 & 1) == 0)
    {
      v46 = (unsigned int *)(v21 + 8);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        atomic_store(1u, v46);
        v51 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v51 = off_1E31FE290;
        *((_QWORD *)v51 + 1) = v46;
        v74 = v51;
        WTF::ensureOnMainThread();
        v52 = v74;
        v74 = 0;
        if (v52)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v52 + 8))(v52);
      }
    }
    v49 = v77;
    v77 = 0;
    if (v49)
    {
      if (*((_DWORD *)v49 + 6) == 2)
      {
        if ((*((_WORD *)v49 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v49);
      }
      else
      {
        *((_DWORD *)v49 + 6) -= 2;
      }
    }
    return v43;
  }
  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
    goto LABEL_86;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1408))(&v74, a1);
  WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v77, (uint64_t *)&v74);
  v64 = v74;
  v74 = 0;
  if (v64)
  {
    if (*((_DWORD *)v64 + 6) == 2)
    {
      if ((*((_WORD *)v64 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v64);
    }
    else
    {
      *((_DWORD *)v64 + 6) -= 2;
    }
  }
  if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_107:
    v29 = v77;
    goto LABEL_115;
  }
  if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if (!v77)
    {
      v29 = 0;
      goto LABEL_115;
    }
    if ((*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x78) & 0x30) != 0x10
      && WebCore::Node::renderBox(v77)
      && *(_DWORD *)(WebCore::Node::renderBox(v77) + 164))
    {
      goto LABEL_107;
    }
LABEL_86:
    v43 = 1;
    if (*(_DWORD *)(a1 + 180) == v61 && *(_DWORD *)(a1 + 184) == a3)
      v43 = a4 != (*(_BYTE *)(a1 + 169) & 3);
    *(_DWORD *)(a1 + 180) = v61;
    *(_DWORD *)(a1 + 184) = a3;
    *(_BYTE *)(a1 + 169) = *(_BYTE *)(a1 + 169) & 0xFC | a4 & 3;
    *(_BYTE *)(a1 + 188) = 1;
    goto LABEL_90;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::HTMLTextAreaElement::defaultEventHandler(WebCore::HTMLTextAreaElement *this, WebCore::Event *a2)
{
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  int v43;
  int v44;
  WTF::StringImpl *v45;
  WebCore::Node *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60[2];
  WebCore::Node *v61;
  char v62;
  uint64_t v63;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C7A7DCLL);
    }
    if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 44)
    {
      __break(0xC471u);
      JUMPOUT(0x195C7A7FCLL);
    }
    v4 = (WebCore *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
    if ((v4 & 1) != 0)
      goto LABEL_27;
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
      v6 = WebCore::threadGlobalDataSlow(v4);
    v7 = *(_QWORD *)(v6 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v7 = *(_QWORD *)(v6 + 40);
    }
    if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v7 + 304))
    {
LABEL_27:
      WebCore::HTMLTextFormControlElement::forwardEvent((unsigned int *)this, a2);
      goto LABEL_28;
    }
    if ((*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 16))(a2))
    {
      v8 = *((_DWORD *)this + 43);
      if ((v8 & 0x80000000) == 0)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1408))(v60, this);
        v9 = v60[0];
        if (v60[0])
        {
          WebCore::innerTextValueFrom((WebCore *)&v63, (unint64_t)v60[0]);
          v58 = v60[0];
          v60[0] = 0;
          if (v58)
          {
            if (*((_DWORD *)v58 + 6) == 2)
            {
              if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v58, v9);
            }
            else
            {
              *((_DWORD *)v58 + 6) -= 2;
            }
          }
          v10 = v63;
          if (v63)
            goto LABEL_16;
        }
        else
        {
          v10 = *MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
          {
            *(_DWORD *)v10 += 2;
LABEL_16:
            v11 = *(unsigned int *)(v10 + 4);
            if ((_DWORD)v11)
            {
              v12 = *(_QWORD *)(v10 + 8);
              if ((*(_BYTE *)(v10 + 16) & 4) != 0)
              {
                v18 = 0;
                v14 = 0;
                do
                {
                  v19 = v18 + 1;
                  v20 = *(_BYTE *)(v12 + v18) != 13 || v19 >= v11;
                  if (!v20 && *(_BYTE *)(v12 + v18 + 1) == 10)
                    ++v14;
                  ++v18;
                }
                while (v11 != v19);
              }
              else
              {
                v13 = 0;
                v14 = 0;
                do
                {
                  v15 = v13 + 1;
                  v16 = *(_WORD *)(v12 + 2 * v13) != 13 || v15 >= v11;
                  if (!v16 && *(_WORD *)(v12 + 2 * v13 + 2) == 10)
                    ++v14;
                  ++v13;
                }
                while (v11 != v15);
              }
              v17 = 0;
            }
            else
            {
              v17 = 0;
              v14 = 0;
            }
            goto LABEL_41;
          }
        }
        LODWORD(v11) = 0;
        v14 = 0;
        v17 = 1;
LABEL_41:
        v21 = v11 - v14;
        v22 = *((_QWORD *)a2 + 9);
        if (v22)
        {
          v23 = *(unsigned int *)(v22 + 4);
          if ((_DWORD)v23)
          {
            v24 = *(_QWORD *)(v22 + 8);
            if ((*(_BYTE *)(v22 + 16) & 4) != 0)
            {
              v28 = 0;
              LODWORD(v22) = 0;
              do
              {
                v29 = v28 + 1;
                v30 = *(_BYTE *)(v24 + v28) != 13 || v29 >= v23;
                if (!v30 && *(_BYTE *)(v24 + v28 + 1) == 10)
                  LODWORD(v22) = v22 + 1;
                ++v28;
              }
              while (v23 != v29);
            }
            else
            {
              v25 = 0;
              LODWORD(v22) = 0;
              do
              {
                v26 = v25 + 1;
                v27 = *(_WORD *)(v24 + 2 * v25) != 13 || v26 >= v23;
                if (!v27 && *(_WORD *)(v24 + 2 * v25 + 2) == 10)
                  LODWORD(v22) = v22 + 1;
                ++v25;
              }
              while (v23 != v26);
            }
          }
          else
          {
            LODWORD(v22) = 0;
          }
        }
        else
        {
          LODWORD(v23) = 0;
        }
        if ((int)v23 + v21 - (int)v22 < v8)
          goto LABEL_112;
        if ((*((_BYTE *)this + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(this))
        {
          WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8)+ 528)+ 8)+ 296)+ 3064)+ 56), v60);
          if (v62 && (WebCore::plainText(v60, 0, 0, (const WTF::String *)&v59), (v48 = v59) != 0))
          {
            v49 = *((unsigned int *)v59 + 1);
            if ((_DWORD)v49)
            {
              v50 = *((_QWORD *)v59 + 1);
              if ((*((_BYTE *)v59 + 16) & 4) != 0)
              {
                v55 = 0;
                v52 = 0;
                do
                {
                  v56 = v55 + 1;
                  v57 = *(_BYTE *)(v50 + v55) != 13 || v56 >= v49;
                  if (!v57 && *(_BYTE *)(v50 + v55 + 1) == 10)
                    ++v52;
                  ++v55;
                }
                while (v49 != v56);
              }
              else
              {
                v51 = 0;
                v52 = 0;
                do
                {
                  v53 = v51 + 1;
                  v54 = *(_WORD *)(v50 + 2 * v51) != 13 || v53 >= v49;
                  if (!v54 && *(_WORD *)(v50 + 2 * v51 + 2) == 10)
                    ++v52;
                  ++v51;
                }
                while (v49 != v53);
              }
              v31 = v52 - v49;
            }
            else
            {
              v31 = 0;
            }
            v59 = 0;
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v9);
            else
              *(_DWORD *)v48 -= 2;
          }
          else
          {
            v31 = 0;
          }
        }
        else
        {
          v31 = 0;
          LOBYTE(v60[0]) = 0;
          v62 = 0;
        }
        if (v8 >= v31 + v21)
          v32 = v8 - (v31 + v21);
        else
          v32 = 0;
        v33 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
        if (!v33)
        {
          *((_QWORD *)a2 + 9) = 0;
          goto LABEL_105;
        }
        v34 = *((unsigned int *)v33 + 1);
        if (!(_DWORD)v34)
          goto LABEL_97;
        v35 = 0;
        v36 = 0;
        while (1)
        {
          if (v35 >= v34
            || ((v37 = *((_DWORD *)v33 + 4), v38 = *((_QWORD *)v33 + 1), (v37 & 4) == 0)
              ? (v39 = *(unsigned __int16 *)(v38 + 2 * v35))
              : (v39 = *(unsigned __int8 *)(v38 + v35)),
                (v40 = v39 == 13, v41 = v35 + 1, v40) ? (v42 = v41 >= v34) : (v42 = 1),
                v42
             || ((v37 & 4) == 0 ? (v43 = *(unsigned __int16 *)(v38 + 2 * v41)) : (v43 = *(unsigned __int8 *)(v38 + v41)),
                 v43 != 10)))
          {
            if (++v36 == v32)
            {
              LODWORD(v35) = v35 + 1;
LABEL_93:
              if (!(_DWORD)v35)
                goto LABEL_96;
LABEL_94:
              if (v34 > (int)v35 - 1
                && (*((_BYTE *)v33 + 16) & 4) == 0
                && (*(_WORD *)(*((_QWORD *)v33 + 1) + 2 * (v35 - 1)) & 0xFC00) == 0xD800)
              {
                LODWORD(v35) = v35 - 1;
              }
LABEL_96:
              if (v34 <= v35)
              {
LABEL_97:
                v44 = *(_DWORD *)v33 + 2;
                *(_DWORD *)v33 = v44;
                v59 = v33;
                goto LABEL_98;
              }
              WTF::StringImpl::substring(v33);
              v33 = v59;
              if (v59)
              {
                v44 = *(_DWORD *)v59;
LABEL_98:
                *(_DWORD *)v33 = v44 + 2;
              }
              v45 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
              *((_QWORD *)a2 + 9) = v33;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                {
                  WTF::StringImpl::destroy(v45, v9);
                  v33 = v59;
                }
                else
                {
                  *(_DWORD *)v45 -= 2;
                }
              }
              v59 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v9);
                else
                  *(_DWORD *)v33 -= 2;
              }
LABEL_105:
              if (v62)
              {
                v46 = v61;
                v61 = 0;
                if (v46)
                {
                  if (*((_DWORD *)v46 + 6) == 2)
                  {
                    if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v46, v9);
                  }
                  else
                  {
                    *((_DWORD *)v46 + 6) -= 2;
                  }
                }
                v47 = v60[0];
                v60[0] = 0;
                if (v47)
                {
                  if (*((_DWORD *)v47 + 6) == 2)
                  {
                    if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v47, v9);
                  }
                  else
                  {
                    *((_DWORD *)v47 + 6) -= 2;
                  }
                }
              }
LABEL_112:
              if ((v17 & 1) == 0)
              {
                if (*(_DWORD *)v10 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v10, v9);
                else
                  *(_DWORD *)v10 -= 2;
              }
              break;
            }
            if (v36 > v32)
              goto LABEL_93;
            v41 = v35 + 1;
          }
          v35 = v41;
          if (v41 == v34)
          {
            LODWORD(v35) = *((_DWORD *)v33 + 1);
            goto LABEL_94;
          }
        }
      }
    }
  }
LABEL_28:
  WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
}

unsigned int *WebCore::HTMLTextFormControlElement::forwardEvent(unsigned int *this, WebCore::Event *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;

  v3 = this;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
  {
    this = (unsigned int *)WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = (uint64_t)this;
  }
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    this = (unsigned int *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = *((_QWORD *)a2 + 3);
  if (v7 != *(_QWORD *)(v6 + 304) && v7 != *(_QWORD *)(v6 + 816))
  {
    (*(void (**)(WebCore::Node **__return_ptr, unsigned int *))(*(_QWORD *)v3 + 1408))(&v9, v3);
    this = (unsigned int *)v9;
    if (v9)
    {
      WebCore::TextControlInnerTextElement::defaultEventHandler(v9, (WebCore::Node **)a2);
      this = (unsigned int *)v9;
      v9 = 0;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)this, v8);
        }
        else
        {
          this[6] -= 2;
        }
      }
    }
  }
  return this;
}

void WebCore::HTMLTextAreaElement::subtreeHasChanged(WebCore::HTMLTextAreaElement *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringBuilder *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::Document *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  WebCore::Document *v18;
  WebCore::Editor *v19;
  WebCore::Editor *v20;
  uint64_t v21;
  WebCore::Document *v22;
  unsigned int *v23;
  _QWORD *v24;

  *((_BYTE *)this + 168) &= ~2u;
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
  if ((*((_BYTE *)this + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(this))
  {
    *((_BYTE *)this + 168) |= 4u;
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = *(WebCore::Document **)(v8 + 296);
        v12 = *((_QWORD *)v11 + 382);
        if (!v12)
        {
          v23 = v9;
          v18 = v11;
          v19 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v19, v18);
          v20 = (WebCore::Editor *)*((_QWORD *)v18 + 382);
          v22 = v18;
          *((_QWORD *)v18 + 382) = v19;
          if (v20)
          {
            WebCore::Editor::~Editor(v20, v2);
            if (*(_DWORD *)v21)
            {
              *(_QWORD *)(v21 + 496) = 0;
              v6 = 0uLL;
              *(_OWORD *)(v21 + 464) = 0u;
              *(_OWORD *)(v21 + 480) = 0u;
              *(_OWORD *)(v21 + 432) = 0u;
              *(_OWORD *)(v21 + 448) = 0u;
              *(_OWORD *)(v21 + 400) = 0u;
              *(_OWORD *)(v21 + 416) = 0u;
              *(_OWORD *)(v21 + 368) = 0u;
              *(_OWORD *)(v21 + 384) = 0u;
              *(_OWORD *)(v21 + 336) = 0u;
              *(_OWORD *)(v21 + 352) = 0u;
              *(_OWORD *)(v21 + 304) = 0u;
              *(_OWORD *)(v21 + 320) = 0u;
              *(_OWORD *)(v21 + 272) = 0u;
              *(_OWORD *)(v21 + 288) = 0u;
              *(_OWORD *)(v21 + 240) = 0u;
              *(_OWORD *)(v21 + 256) = 0u;
              *(_OWORD *)(v21 + 208) = 0u;
              *(_OWORD *)(v21 + 224) = 0u;
              *(_OWORD *)(v21 + 176) = 0u;
              *(_OWORD *)(v21 + 192) = 0u;
              *(_OWORD *)(v21 + 144) = 0u;
              *(_OWORD *)(v21 + 160) = 0u;
              *(_OWORD *)(v21 + 112) = 0u;
              *(_OWORD *)(v21 + 128) = 0u;
              *(_OWORD *)(v21 + 80) = 0u;
              *(_OWORD *)(v21 + 96) = 0u;
              *(_OWORD *)(v21 + 48) = 0u;
              *(_OWORD *)(v21 + 64) = 0u;
              *(_OWORD *)(v21 + 16) = 0u;
              *(_OWORD *)(v21 + 32) = 0u;
              *(_OWORD *)v21 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v21, v2);
            }
          }
          v9 = v23;
          v12 = *((_QWORD *)v22 + 382);
        }
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
            (*(void (**)(uint64_t, WebCore::HTMLTextAreaElement *))(*(_QWORD *)v14 + 496))(v14, this);
        }
        do
        {
          v15 = __ldaxr(v9);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v9));
        if (!v16)
        {
          atomic_store(1u, v9);
          v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v17 = off_1E31FE290;
          v17[1] = v9;
          v24 = v17;
          WTF::ensureOnMainThread();
          if (v24)
            (*(void (**)(_QWORD *))(*v24 + 8))(v24);
        }
      }
    }
    if ((*((_WORD *)this + 15) & 4) != 0)
      WebCore::HTMLElement::updateEffectiveDirectionalityOfDirAuto(this, v6, (uint64_t)v2, v3, v4, v5);
  }
}

unsigned int *WebCore::HTMLTextFormControlElement::innerTextValue@<X0>(WebCore::HTMLTextFormControlElement *this@<X0>, WebCore *a2@<X8>)
{
  unsigned int *result;
  _DWORD *v4;
  void *v5;
  WebCore::Node *v6;

  result = (unsigned int *)(*(_QWORD *(**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 1408))(&v6);
  if (v6)
  {
    WebCore::innerTextValueFrom(a2, (unint64_t)v6);
    result = (unsigned int *)v6;
    v6 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  else
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v4 += 2;
    *(_QWORD *)a2 = v4;
  }
  return result;
}

uint64_t WebCore::computeLengthForAPIValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;

  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v6 = 0;
      v3 = 0;
      do
      {
        v7 = v6 + 1;
        v8 = *(_BYTE *)(a1 + v6) != 13 || v7 >= a2;
        if (!v8 && *(_BYTE *)(a1 + v6 + 1) == 10)
          ++v3;
        ++v6;
      }
      while (a2 != v7);
    }
    else
    {
      v2 = 0;
      v3 = 0;
      do
      {
        v4 = v2 + 1;
        v5 = *(_WORD *)(a1 + 2 * v2) != 13 || v4 >= a2;
        if (!v5 && *(_WORD *)(a1 + 2 * v2 + 2) == 10)
          ++v3;
        ++v2;
      }
      while (a2 != v4);
    }
  }
  else
  {
    v3 = 0;
  }
  return (a2 - v3);
}

uint64_t WebCore::HTMLTextAreaElement::innerTextElement@<X0>(uint64_t this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v4 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
  {
    v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 2;
    v6 = *(_QWORD *)(v4 + 80);
    if (v6)
    {
      while (1)
      {
        if ((*(_WORD *)(v6 + 28) & 0x10) != 0)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1176))(v6);
          if ((this & 1) != 0)
            break;
        }
        v6 = *(_QWORD *)(v6 + 56);
        if (!v6)
          goto LABEL_11;
      }
      *(_DWORD *)(v6 + 24) += 2;
LABEL_11:
      v5 = *(_DWORD *)(v4 + 24) - 2;
    }
    *a3 = v6;
    if (v5)
    {
      *(_DWORD *)(v4 + 24) = v5;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::HTMLTextAreaElement::innerTextElementCreatingShadowSubtreeIfNeeded@<X0>(uint64_t this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v4 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
  {
    v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 2;
    v6 = *(_QWORD *)(v4 + 80);
    if (v6)
    {
      while (1)
      {
        if ((*(_WORD *)(v6 + 28) & 0x10) != 0)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1176))(v6);
          if ((this & 1) != 0)
            break;
        }
        v6 = *(_QWORD *)(v6 + 56);
        if (!v6)
          goto LABEL_11;
      }
      *(_DWORD *)(v6 + 24) += 2;
LABEL_11:
      v5 = *(_DWORD *)(v4 + 24) - 2;
    }
    *a3 = v6;
    if (v5)
    {
      *(_DWORD *)(v4 + 24) = v5;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::HTMLTextAreaElement::setValueCommon(WebCore::HTMLTextFormControlElement *this, WTF *a2, const WTF::StringImpl *a3, int a4, double a5, double a6, float a7)
{
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  const WTF::String *v16;
  const WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringBuilder *v30;
  __n128 v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t result;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WebCore::Node *ElementSibling;
  WebCore::Element *v43;
  WebCore::AXObjectCache *v44;
  WebCore::AXObjectCache *v45;
  int v46;
  WTF::StringImpl *v47[2];
  WTF::StringImpl *v48;

  *((_BYTE *)this + 234) = 0;
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(unsigned int *)(v9 + 4);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if (!(_DWORD)v12)
        goto LABEL_15;
      v13 = 16;
      if (v12 < 0x10)
        v13 = *(unsigned int *)(v9 + 4);
      v14 = v13;
      v15 = *(_BYTE **)(v9 + 8);
      do
      {
        if (*v15 == 13)
          goto LABEL_11;
        ++v15;
        --v14;
      }
      while (v14);
      if (v12 >= 0x11)
      {
        v15 = memchr((void *)(v11 + v13), 13, v12 - v13);
        if (v15)
        {
LABEL_11:
          v16 = (const WTF::String *)&v15[-v11];
          goto LABEL_12;
        }
      }
LABEL_14:
      if (!v9)
      {
LABEL_16:
        v48 = (WTF::StringImpl *)v9;
        goto LABEL_17;
      }
LABEL_15:
      *(_DWORD *)v9 += 2;
      goto LABEL_16;
    }
    v16 = (const WTF::String *)WTF::find<char16_t,(void *)0>(*(_QWORD *)(v9 + 8), v12, 0xDu, 0, a5, a6, a7);
LABEL_12:
    if (v16 == (const WTF::String *)-1)
    {
      v9 = *(_QWORD *)a2;
      goto LABEL_14;
    }
    WTF::makeStringBySimplifyingNewLinesSlowCase(a2, v16);
  }
  else
  {
    v38 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v38 += 2;
    v48 = v38;
  }
LABEL_17:
  if ((*((_BYTE *)this + 168) & 2) == 0)
  {
    WebCore::HTMLTextFormControlElement::innerTextValue(this, (WebCore *)v47);
    v40 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    *((WTF::StringImpl **)this + 28) = v47[0];
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
    *((_BYTE *)this + 168) |= 2u;
    *(_WORD *)((char *)this + 233) = 257;
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
  }
  v17 = (const WTF::StringImpl *)*((_QWORD *)this + 28);
  if (v17)
  {
    *(_DWORD *)v17 += 2;
    v18 = WTF::equal(v48, v17, a3);
    v20 = v18;
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v19);
      if ((v20 & 1) != 0)
        goto LABEL_56;
    }
    else
    {
      *(_DWORD *)v17 -= 2;
      if ((v18 & 1) != 0)
        goto LABEL_56;
    }
  }
  else if ((WTF::equal(v48, 0, a3) & 1) != 0)
  {
    goto LABEL_56;
  }
  if (a4 == 1)
  {
    v21 = WebCore::HTMLTextFormControlElement::computeSelectionStart(this);
    v22 = WebCore::HTMLTextFormControlElement::computeSelectionEnd(this);
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v23 = v48;
  if (v48)
    *(_DWORD *)v48 += 2;
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v19);
    else
      *(_DWORD *)v24 -= 2;
    v23 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  }
  if (v23)
    *(_DWORD *)v23 += 2;
  v47[0] = v23;
  WebCore::HTMLTextFormControlElement::setInnerTextValue(this, v47);
  v26 = v47[0];
  v47[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  *((_BYTE *)this + 169) &= ~4u;
  WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
  WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v41 = *((_QWORD *)this + 4);
    if (!v41 || (*(_WORD *)(v41 + 28) & 8) == 0 || (*(_BYTE *)(v41 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v43);
    }
  }
  if ((*((_WORD *)this + 15) & 4) != 0)
    WebCore::HTMLElement::updateEffectiveDirectionalityOfDirAuto(this, v31, v27, v28, v29, v30);
  *((_BYTE *)this + 168) |= 2u;
  v32 = *((_QWORD *)this + 28);
  if (v32)
    v19 = (WTF::StringImpl *)*(unsigned int *)(v32 + 4);
  else
    v19 = 0;
  if (a4)
  {
    if (a4 != 1)
      goto LABEL_50;
    if (v21 >= v19)
      v33 = v19;
    else
      v33 = v21;
    if (v22 >= v19)
      v34 = v19;
    else
      v34 = v22;
    *((_DWORD *)this + 45) = v33;
    *((_DWORD *)this + 46) = v34;
    goto LABEL_49;
  }
  if (*(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1248) != this)
  {
    *((_DWORD *)this + 45) = (_DWORD)v19;
    *((_DWORD *)this + 46) = (_DWORD)v19;
LABEL_49:
    *((_BYTE *)this + 169) &= 0xFCu;
    *((_BYTE *)this + 188) = 1;
    goto LABEL_50;
  }
  v47[0] = 0;
  v47[1] = 0;
  WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)this, v19, v19, 0, 3, (uint64_t *)v47, 0);
LABEL_50:
  v35 = v48;
  if (v48)
    *(_DWORD *)v48 += 2;
  v36 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v35;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v19);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v44 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
    if (v44)
    {
      v45 = v44;
      ++*((_DWORD *)v44 + 2);
      WebCore::AXObjectCache::valueChanged(v44, this);
      v46 = *((_DWORD *)v45 + 2);
      if (!v46)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *((_DWORD *)v45 + 2) = v46 - 1;
    }
  }
LABEL_56:
  result = (uint64_t)v48;
  v48 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::computeSelectionStart(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = WebCore::HTMLTextFormControlElement::indexForPosition(this, (const WebCore::Position *)(*(_QWORD *)(*(_QWORD *)(v2 + 296) + 3064) + 120));
  do
  {
    v6 = __ldaxr(v3);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v3));
  if (!v7)
  {
    atomic_store(1u, v3);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v3;
    v10 = v9;
    WTF::ensureOnMainThread();
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return v5;
}

uint64_t WebCore::HTMLTextFormControlElement::computeSelectionEnd(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = WebCore::HTMLTextFormControlElement::indexForPosition(this, (const WebCore::Position *)(*(_QWORD *)(*(_QWORD *)(v2 + 296) + 3064) + 136));
  do
  {
    v6 = __ldaxr(v3);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v3));
  if (!v7)
  {
    atomic_store(1u, v3);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v3;
    v10 = v9;
    WTF::ensureOnMainThread();
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return v5;
}

BOOL WebCore::HTMLTextFormControlElement::cacheSelection(uint64_t a1, int a2, int a3, int a4)
{
  _BOOL8 v4;

  v4 = 1;
  if (*(_DWORD *)(a1 + 180) == a2)
    v4 = *(_DWORD *)(a1 + 184) != a3 || (*(_BYTE *)(a1 + 169) & 3) != a4;
  *(_DWORD *)(a1 + 180) = a2;
  *(_DWORD *)(a1 + 184) = a3;
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a1 + 169) & 0xFC | a4 & 3;
  *(_BYTE *)(a1 + 188) = 1;
  return v4;
}

WTF::StringImpl *WebCore::HTMLTextAreaElement::setDefaultValue(WTF::StringImpl *result, uint64_t a2)
{
  unsigned int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v2 = *((unsigned __int16 *)result + 14) >> 12;
  if (v2 == 1)
    return WebCore::ContainerNode::stringReplaceAll(result, a2);
  if (v2 <= 0xB)
  {
    if (v2 == 11)
      return WebCore::ContainerNode::stringReplaceAll(result, a2);
    if (((1 << v2) & 0x19C) != 0)
    {
      result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)result + 120))(&v4);
      if (v6)
      {
        result = v5;
        v5 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void WebCore::HTMLTextAreaElement::validationMessage(WebCore::HTMLTextAreaElement *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  int v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  int v21;
  char v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  _DWORD *v37;
  WTF::StringImpl *v38;

  v4 = (char *)this + 112;
  v5 = *((_BYTE *)this + 160);
  if ((v5 & 4) == 0 || (*((_BYTE *)this + 162) & 3) == 2)
  {
    *((_BYTE *)this + 160) = v5 | 4;
    v21 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 336))((char *)this + 112);
    v5 = *((_BYTE *)this + 160);
    if (((v21 ^ ((v5 & 2) == 0)) & 1) == 0)
    {
      if (v21)
        v22 = 2;
      else
        v22 = 0;
      v5 = v5 & 0xFD | v22;
      *((_BYTE *)this + 160) = v5;
    }
  }
  if ((v5 & 2) == 0)
    goto LABEL_13;
  v6 = (_DWORD *)*((_QWORD *)this + 18);
  if (v6 && v6[1])
  {
    *v6 += 2;
    *a2 = v6;
    return;
  }
  if ((*((_BYTE *)this + 168) & 1) != 0
    && (v5 & 0x18) == 0
    && (!(*(unsigned int (**)(char *))(*(_QWORD *)v4 + 288))(v4) || (*((_BYTE *)this + 160) & 0x20) == 0))
  {
    if ((*((_BYTE *)this + 168) & 2) == 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1408))(&v38, this);
      v23 = v38;
      if (v38)
      {
        WebCore::innerTextValueFrom((WebCore *)&v37, (unint64_t)v38);
        v33 = v38;
        v38 = 0;
        if (v33)
        {
          if (*((_DWORD *)v33 + 6) == 2)
          {
            if ((*((_WORD *)v33 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v33, v23);
          }
          else
          {
            *((_DWORD *)v33 + 6) -= 2;
          }
        }
      }
      else
      {
        v24 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v24 += 2;
        v37 = v24;
      }
      v25 = (WTF::StringImpl *)*((_QWORD *)this + 28);
      *((_QWORD *)this + 28) = v37;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v23);
        else
          *(_DWORD *)v25 -= 2;
      }
      *((_BYTE *)this + 168) |= 2u;
      *(_WORD *)((char *)this + 233) = 257;
      WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
    }
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    if (!v11)
      goto LABEL_24;
    v12 = *(_DWORD *)v11;
    v13 = *((_DWORD *)v11 + 1);
    *(_DWORD *)v11 += 2;
    if (v12)
    {
      *(_DWORD *)v11 = v12;
      if (!v13)
      {
LABEL_24:
        WebCore::validationMessageValueMissingText((uint64_t)a2);
        return;
      }
    }
    else
    {
      WTF::StringImpl::destroy(v11, v10);
      if (!v13)
        goto LABEL_24;
    }
  }
  if (WebCore::HTMLTextAreaElement::tooShort(this))
  {
    if ((*((_BYTE *)this + 168) & 2) == 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1408))(&v38, this);
      v18 = v38;
      if (v38)
      {
        WebCore::innerTextValueFrom((WebCore *)&v37, (unint64_t)v38);
        v32 = v38;
        v38 = 0;
        if (v32)
        {
          if (*((_DWORD *)v32 + 6) == 2)
          {
            if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v32, v18);
          }
          else
          {
            *((_DWORD *)v32 + 6) -= 2;
          }
        }
      }
      else
      {
        v19 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v19 += 2;
        v37 = v19;
      }
      v20 = (WTF::StringImpl *)*((_QWORD *)this + 28);
      *((_QWORD *)this + 28) = v37;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      *((_BYTE *)this + 168) |= 2u;
      *(_WORD *)((char *)this + 233) = 257;
      WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
    }
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    if (!v8)
    {
      WebCore::validationMessageTooShortText(*((unsigned int *)this + 44), (uint64_t)a2);
      return;
    }
    *(_DWORD *)v8 += 2;
    WebCore::validationMessageTooShortText(*((unsigned int *)this + 44), (uint64_t)a2);
    goto LABEL_10;
  }
  if (!*((_BYTE *)this + 234))
    goto LABEL_13;
  v14 = *((_DWORD *)this + 43);
  if ((v14 & 0x80000000) != 0)
    goto LABEL_13;
  if ((*((_BYTE *)this + 168) & 2) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1408))(&v38, this);
    v26 = v38;
    if (v38)
    {
      WebCore::innerTextValueFrom((WebCore *)&v37, (unint64_t)v38);
      v34 = v38;
      v38 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34, v26);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
    }
    else
    {
      v27 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v27 += 2;
      v37 = v27;
    }
    v28 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v37;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v26);
      else
        *(_DWORD *)v28 -= 2;
    }
    *((_BYTE *)this + 168) |= 2u;
    *(_WORD *)((char *)this + 233) = 257;
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  if (!v15
    || ((v17 = *(_DWORD *)v15, v16 = *((_DWORD *)v15 + 1), *(_DWORD *)v15 += 2, !v17)
      ? (v36 = v16, WTF::StringImpl::destroy(v15, v7), v16 = v36)
      : (*(_DWORD *)v15 = v17),
        v16 <= v14))
  {
LABEL_13:
    *a2 = 0;
    return;
  }
  if ((*((_BYTE *)this + 168) & 2) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 1408))(&v38, this);
    v29 = v38;
    if (v38)
    {
      WebCore::innerTextValueFrom((WebCore *)&v37, (unint64_t)v38);
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 2)
        {
          if ((*((_WORD *)v35 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v35, v29);
        }
        else
        {
          *((_DWORD *)v35 + 6) -= 2;
        }
      }
    }
    else
    {
      v30 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v30 += 2;
      v37 = v30;
    }
    v31 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v37;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v29);
      else
        *(_DWORD *)v31 -= 2;
    }
    *((_BYTE *)this + 168) |= 2u;
    *(_WORD *)((char *)this + 233) = 257;
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  if (!v8)
  {
    WebCore::validationMessageTooLongText(*((unsigned int *)this + 43), (uint64_t)a2);
    return;
  }
  *(_DWORD *)v8 += 2;
  WebCore::validationMessageTooLongText(*((unsigned int *)this + 43), (uint64_t)a2);
LABEL_10:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v9);
  else
    *(_DWORD *)v8 -= 2;
}

BOOL WebCore::HTMLTextAreaElement::valueMissing(WebCore::HTMLTextAreaElement *this)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;

  if ((*((_BYTE *)this + 168) & 1) == 0
    || (*((_BYTE *)this + 160) & 0x18) != 0
    || (*(unsigned int (**)(char *))(*((_QWORD *)this + 14) + 288))((char *)this + 112)
    && (*((_BYTE *)this + 160) & 0x20) != 0)
  {
    return 0;
  }
  WebCore::HTMLTextAreaElement::value(this, &v5);
  if (v5)
  {
    v4 = *((_DWORD *)v5 + 1);
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    v4 = 0;
  }
  return v4 == 0;
}

BOOL WebCore::HTMLTextAreaElement::tooLong(WebCore::HTMLTextAreaElement *this)
{
  unsigned int v2;
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF::StringImpl *v5;

  if (!*((_BYTE *)this + 234))
    return 0;
  v2 = *((_DWORD *)this + 43);
  if ((v2 & 0x80000000) != 0)
    return 0;
  WebCore::HTMLTextAreaElement::value(this, &v5);
  if (v5)
  {
    v4 = *((_DWORD *)v5 + 1);
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    v4 = 0;
  }
  return v4 > v2;
}

void `non-virtual thunk to'WebCore::HTMLTextAreaElement::validationMessage(WebCore::HTMLTextAreaElement *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::HTMLTextAreaElement::validationMessage((WebCore::HTMLTextAreaElement *)((char *)this - 112), a2);
}

BOOL `non-virtual thunk to'WebCore::HTMLTextAreaElement::valueMissing(WebCore::HTMLTextAreaElement *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  if ((*((_BYTE *)this + 56) & 1) == 0
    || (*((_BYTE *)this + 48) & 0x18) != 0
    || (*(unsigned int (**)(WebCore::HTMLTextAreaElement *))(*(_QWORD *)this + 288))(this)
    && (*((_BYTE *)this + 48) & 0x20) != 0)
  {
    return 0;
  }
  if ((*((_BYTE *)this + 56) & 2) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, char *))(*((_QWORD *)this - 14) + 1408))(&v12, (char *)this - 112);
    v7 = v12;
    if (v12)
    {
      WebCore::innerTextValueFrom((WebCore *)&v11, (unint64_t)v12);
      v10 = v12;
      v12 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v7);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
    }
    else
    {
      v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v8 += 2;
      v11 = v8;
    }
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v11;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    *((_BYTE *)this + 56) |= 2u;
    *(_WORD *)((char *)this + 121) = 257;
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextAreaElement *)((char *)this - 112));
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  if (v4)
  {
    v5 = *(_DWORD *)v4;
    v6 = *((_DWORD *)v4 + 1);
    *(_DWORD *)v4 += 2;
    if (v5)
      *(_DWORD *)v4 = v5;
    else
      WTF::StringImpl::destroy(v4, v3);
  }
  else
  {
    v6 = 0;
  }
  return v6 == 0;
}

BOOL WebCore::HTMLTextAreaElement::tooShort(WebCore::HTMLTextAreaElement *this)
{
  int v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (!*((_BYTE *)this + 234))
    return 0;
  v3 = *((_DWORD *)this + 44);
  if (v3 < 1)
    return 0;
  WebCore::HTMLTextAreaElement::value(this, &v11);
  if (!v11)
    goto LABEL_16;
  v5 = *((unsigned int *)v11 + 4);
  v6 = *((_QWORD *)v11 + 1);
  v7 = *((unsigned int *)v11 + 1);
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v4);
  else
    *(_DWORD *)v11 -= 2;
  if (v6)
  {
    v8 = WebCore::computeLengthForAPIValue(v6, v7 | (((v5 >> 2) & 1) << 32));
  }
  else
  {
LABEL_16:
    WebCore::HTMLTextAreaElement::value(this, &v11);
    if (v11)
    {
      v8 = *((_DWORD *)v11 + 1);
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    else
    {
      v8 = 0;
    }
  }
  if (v8)
    v9 = v8 >= v3;
  else
    v9 = 1;
  return !v9;
}

BOOL `non-virtual thunk to'WebCore::HTMLTextAreaElement::tooShort(WebCore::HTMLTextAreaElement *this)
{
  return WebCore::HTMLTextAreaElement::tooShort((WebCore::HTMLTextAreaElement *)((char *)this - 112));
}

BOOL `non-virtual thunk to'WebCore::HTMLTextAreaElement::tooLong(WebCore::HTMLTextAreaElement *this, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF::StringImpl *v4;
  int v5;
  unsigned int v6;
  WebCore::HTMLTextFormControlElement *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WebCore::HTMLTextAreaElement *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;

  if (!*((_BYTE *)this + 122))
    return 0;
  v3 = *((_DWORD *)this + 15);
  if ((v3 & 0x80000000) != 0)
    return 0;
  if ((*((_BYTE *)this + 56) & 2) == 0)
  {
    v12 = *((_DWORD *)this + 15);
    v13 = this;
    v7 = (WebCore::HTMLTextAreaElement *)((char *)this - 112);
    (*(void (**)(WTF::StringImpl **__return_ptr, char *))(*((_QWORD *)this - 14) + 1408))(&v15, (char *)this - 112);
    v8 = v15;
    if (v15)
    {
      WebCore::innerTextValueFrom((WebCore *)&v14, (unint64_t)v15);
      v11 = v15;
      v15 = 0;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11, v8);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
    }
    else
    {
      v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v9 += 2;
      v14 = v9;
    }
    v10 = (WTF::StringImpl *)*((_QWORD *)v13 + 14);
    *((_QWORD *)v13 + 14) = v14;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    *((_BYTE *)v13 + 56) |= 2u;
    *(_WORD *)((char *)v13 + 121) = 257;
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v7);
    this = v13;
    v3 = v12;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  if (v4)
  {
    v5 = *(_DWORD *)v4;
    v6 = *((_DWORD *)v4 + 1);
    *(_DWORD *)v4 += 2;
    if (v5)
      *(_DWORD *)v4 = v5;
    else
      WTF::StringImpl::destroy(v4, a2);
  }
  else
  {
    v6 = 0;
  }
  return v6 > v3;
}

uint64_t WebCore::HTMLTextAreaElement::accessKeyAction(WebCore::HTMLTextAreaElement *this)
{
  int v2;
  __int16 v3;

  v3 = 0;
  v2 = 0;
  WebCore::Element::focus((unsigned int *)this, &v2);
  return 0;
}

WTF::StringImpl *WebCore::HTMLTextAreaElement::setCols(WebCore::HTMLTextAreaElement *this, int a2)
{
  uint64_t v3;
  __n128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  if (a2 <= 0)
    v3 = 20;
  else
    v3 = a2;
  WTF::AtomString::number((WTF::AtomString *)v3);
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::colsAttr, &v7, 0, &v8, v4);
  if (v10 && v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLTextAreaElement::setRows(WebCore::HTMLTextAreaElement *this, int a2)
{
  uint64_t v3;
  __n128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;

  if (a2 <= 0)
    v3 = 2;
  else
    v3 = a2;
  WTF::AtomString::number((WTF::AtomString *)v3);
  WebCore::Element::setAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::rowsAttr, &v7, 0, &v8, v4);
  if (v10 && v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::HTMLTextAreaElement::updatePlaceholderText(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;
  _BYTE v31[8];
  WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;

  v1 = this;
  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (WTF::StringImpl **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::HTMLNames::placeholderAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::placeholderAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (!*v6 || !*((_DWORD *)*v6 + 1))
  {
    v8 = *((_QWORD *)this + 27);
    if (!v8)
      return this;
    *(_DWORD *)(v8 + 24) += 2;
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v9 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v9)
        *(_DWORD *)(v9 + 24) += 2;
    }
    else
    {
      v9 = 0;
    }
    WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v9, (WebCore::Node *)v8, &v35);
    if (v37 && v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, v10);
        if (!v9)
          goto LABEL_24;
        goto LABEL_22;
      }
      *(_DWORD *)v36 -= 2;
    }
    if (!v9)
      goto LABEL_24;
LABEL_22:
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
LABEL_24:
    this = (unsigned int *)*((_QWORD *)v1 + 27);
    *((_QWORD *)v1 + 27) = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, v10);
      }
      else
      {
        this[6] -= 2;
      }
    }
    v11 = *(_DWORD *)(v8 + 24) - 2;
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
      return this;
    }
LABEL_28:
    *(_DWORD *)(v8 + 24) = v11;
    return this;
  }
  v8 = *((_QWORD *)this + 27);
  if (v8)
    goto LABEL_58;
  WebCore::TextControlPlaceholderElement::create(*(WebCore::TextControlPlaceholderElement **)(*((_QWORD *)this + 5) + 8), (uint64_t *)&v34);
  v13 = *((_QWORD *)v1 + 27);
  *((_QWORD *)v1 + 27) = v34;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v12);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  v14 = *((_QWORD *)v1 + 9) & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    v15 = *(_QWORD *)((*((_QWORD *)v1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v15)
      *(_DWORD *)(v15 + 24) += 2;
  }
  else
  {
    v15 = 0;
  }
  v16 = *((_QWORD *)v1 + 27);
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  if (v14 && (v26 = *(_QWORD *)(v14 + 88)) != 0)
  {
    v27 = *(_DWORD *)(v26 + 24);
    *(_DWORD *)(v26 + 24) = v27 + 2;
    v17 = *(_QWORD *)(v26 + 80);
    if (v17)
    {
      while ((*(_WORD *)(v17 + 28) & 0x10) == 0
           || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1176))(v17) & 1) == 0)
      {
        v17 = *(_QWORD *)(v17 + 56);
        if (!v17)
          goto LABEL_94;
      }
      *(_DWORD *)(v17 + 24) += 2;
LABEL_94:
      v27 = *(_DWORD *)(v26 + 24) - 2;
    }
    if (v27)
    {
      *(_DWORD *)(v26 + 24) = v27;
    }
    else if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v26, v12);
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = *(WTF::StringImpl **)(v17 + 56);
  if (v18)
    *((_DWORD *)v18 + 6) += 2;
  v34 = v18;
  WebCore::ContainerNode::insertBefore(v15, (uint64_t *)v16, &v34, (uint64_t)v31);
  if (v33)
  {
    v20 = v32;
    v32 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v19);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17, v19);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16, v19);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  if (v15)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v19);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)v1 + 27);
  if (v8)
  {
LABEL_58:
    v22 = 0;
    *(_DWORD *)(v8 + 24) += 2;
  }
  else
  {
    v22 = 1;
  }
  v23 = *v6;
  if (*v6)
    *(_DWORD *)v23 += 2;
  v34 = v23;
  WebCore::HTMLElement::setInnerText((WebCore::ContainerNode *)v8, (WTF *)&v34, &v28);
  if (v30)
  {
    v25 = v29;
    v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  this = (unsigned int *)v34;
  v34 = 0;
  if (!this)
  {
LABEL_68:
    if ((v22 & 1) != 0)
      return this;
    goto LABEL_69;
  }
  if (*this != 2)
  {
    *this -= 2;
    goto LABEL_68;
  }
  this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v24);
  if ((v22 & 1) != 0)
    return this;
LABEL_69:
  v11 = *(_DWORD *)(v8 + 24) - 2;
  if (*(_DWORD *)(v8 + 24) != 2)
    goto LABEL_28;
  if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v8, v24);
  return this;
}

WebCore::Node *WebCore::HTMLTextAreaElement::createInnerTextStyle@<X0>(WebCore::HTMLTextAreaElement *this@<X0>, const WebCore::RenderStyle *a2@<X1>, const WTF::StringImpl *a3@<X2>, WebCore::RenderStyle *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *result;

  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  v7 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  v8 = qword_1ECE913C8;
  v9 = (_DWORD *)qword_1ECE913D0;
  *((_QWORD *)a4 + 1) = v7;
  *((_QWORD *)a4 + 2) = v8;
  ++*v9;
  v10 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  *(_DWORD *)a4 = 0;
  *((_QWORD *)a4 + 3) = v9;
  *((_QWORD *)a4 + 4) = v10;
  *((_QWORD *)a4 + 5) = qword_1ECE913E0;
  *((_QWORD *)a4 + 6) = 0;
  v11 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *((_QWORD *)a4 + 7) = v11;
  WebCore::RenderStyle::inheritFrom(a4, a2, a3);
  result = WebCore::HTMLTextFormControlElement::adjustInnerTextStyle(this, a2, a4);
  *((_QWORD *)a4 + 2) = *((_QWORD *)a4 + 2) & 0xFFFFFFFFFFFFFC00 | 0x21;
  return result;
}

WebCore::Node *WebCore::HTMLTextFormControlElement::adjustInnerTextStyle(WebCore::HTMLTextFormControlElement *this, const WebCore::RenderStyle *a2, WebCore::RenderStyle *a3)
{
  WebCore::Node *result;
  void *v6;
  WebCore::Node *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  WebCore::StyleRareInheritedData *v19;
  WTF *v20;
  void *v21;
  WebCore::Node *v22;

  *((_DWORD *)a3 + 10) = *((_DWORD *)a3 + 10) & 0xFBFFFFFF | (((*((_DWORD *)a2 + 10) >> 26) & 1) << 26);
  *((_QWORD *)a3 + 2) = *((_QWORD *)a3 + 2) & 0xFFFFFFFFFE3FFFFFLL | (((*((_QWORD *)a2 + 2) >> 22) & 7) << 22);
  result = (WebCore::Node *)(*(_QWORD *(**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 1408))(&v22);
  v7 = v22;
  if (!v22)
    goto LABEL_18;
  v8 = *((_QWORD *)v22 + 13);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 4) != 0)
    {
      WebCore::StyledElement::rebuildPresentationalHintStyle(v22);
      v8 = *((_QWORD *)v7 + 13);
      if ((*(_DWORD *)(v8 + 4) & 1) == 0)
        goto LABEL_15;
    }
    else if ((v9 & 1) == 0)
    {
      goto LABEL_15;
    }
    v10 = *(_QWORD *)(v8 + 32);
    if (v10)
    {
      v11 = WebCore::StyleProperties::propertyAsValueID(v10, (WTF::StringImpl *)0x15C);
      if ((v11 & 0xFF0000) != 0)
      {
        v12 = (_DWORD *)*((_QWORD *)a3 + 3);
        v13 = v12[57];
        v14 = (unsigned __int16)v11 == 544 ? 2 : (unsigned __int16)v11 == 543;
        if (((v13 >> 4) & 3) != v14)
        {
          if (*v12 != 1)
          {
            v17 = WTF::fastMalloc((WTF *)0x1A0);
            WebCore::StyleRareInheritedData::StyleRareInheritedData(v17, (uint64_t)v12);
            v19 = (WebCore::StyleRareInheritedData *)*((_QWORD *)a3 + 3);
            *((_QWORD *)a3 + 3) = v18;
            if (v19)
            {
              if (*(_DWORD *)v19 == 1)
              {
                WebCore::StyleRareInheritedData::~StyleRareInheritedData(v19);
                WTF::fastFree(v20, v21);
                v18 = (_DWORD *)*((_QWORD *)a3 + 3);
              }
              else
              {
                --*(_DWORD *)v19;
              }
            }
            v13 = v18[57];
            v12 = v18;
          }
          v12[57] = v13 & 0xFFFFFFCF | (16 * (v14 & 3));
        }
      }
    }
  }
LABEL_15:
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v6);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
LABEL_18:
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 643))
  {
    LODWORD(v22) = 2;
    WORD2(v22) = 4;
    BYTE6(v22) = 0;
    result = (WebCore::Node *)(((*((_DWORD *)a3 + 11) >> 13) & 6u) - 2 < 4
                             ? WebCore::RenderStyle::setMinHeight((uint64_t)a3, (WebCore::Length *)&v22)
                             : WebCore::RenderStyle::setMinWidth((uint64_t)a3, (WebCore::Length *)&v22));
    if (BYTE4(v22) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (WebCore::Node *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
    }
  }
  if ((*(_BYTE *)(*((_QWORD *)a3 + 3) + 228) & 0xC) != 0)
  {
    v15 = *((_DWORD *)a3 + 10);
    if ((v15 & 0x4000000) != 0)
    {
      v16 = (v15 >> 6) & 0xF;
      switch(v16)
      {
        case 3:
          goto LABEL_27;
        case 8:
          v15 &= 0xFFFFFC3F;
          break;
        case 7:
LABEL_27:
          v15 = v15 & 0xFFFFFC3F | 0x40;
          break;
      }
      *((_DWORD *)a3 + 10) = v15 & 0xFBFFFFFF;
    }
  }
  return result;
}

uint64_t WebCore::HTMLTextAreaElement::copyNonAttributePropertiesFromElement(WebCore::HTMLTextAreaElement *this, const WebCore::Element *a2)
{
  const WTF::StringImpl *v4;
  double v5;
  double v6;
  float v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;

  WTF::downcast<WebCore::HTMLTextAreaElement,WebCore::Element const>((uint64_t)a2);
  WebCore::HTMLTextAreaElement::value(a2, &v11);
  WebCore::HTMLTextAreaElement::setValueCommon(this, (WTF *)&v11, v4, 2, v5, v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  *((_BYTE *)this + 233) = *((_BYTE *)a2 + 233);
  return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
}

uint64_t WTF::downcast<WebCore::HTMLTextAreaElement,WebCore::Element const>(uint64_t result)
{
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::HTMLTextFormControlElement::~HTMLTextFormControlElement(WebCore::HTMLTextFormControlElement *this, WTF::StringImpl *a2)
{
  WebCore::FormListedElement *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WebCore::HTMLFormElement *v7;

  *(_QWORD *)this = off_1E33D0270;
  *((_QWORD *)this + 14) = &unk_1E33D0858;
  v3 = (WebCore::HTMLTextFormControlElement *)((char *)this + 112);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = off_1E33BAC98;
  *((_QWORD *)this + 14) = &unk_1E33BB200;
  v7 = 0;
  v6 = *((_QWORD *)this + 15);
  if (v6 && *(_QWORD *)(v6 + 8))
    WebCore::FormListedElement::setFormInternal(v3, &v7);
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(v3, a2);
  WebCore::Element::~Element((uint64_t)this);
}

uint64_t WebCore::HTMLTextFormControlElement::childShouldCreateRenderer(WebCore::HTMLTextFormControlElement *this, const WebCore::Node *a2)
{
  uint64_t v3;

  if ((~*((unsigned __int16 *)a2 + 14) & 0x408) != 0
    || !(*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)a2 + 368))(a2))
  {
    v3 = *((_QWORD *)a2 + 4);
    if (!v3 || (*(_WORD *)(v3 + 28) & 0x80) == 0)
      return 0;
  }
  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 1;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
  else
    return 0;
}

uint64_t WebCore::HTMLTextFormControlElement::setHovered(uint64_t this, WTF::StringImpl *a2, int a3, int a4)
{
  uint64_t v7;
  int *v8;
  WTF::StringImpl *v9;
  char *v10;

  v7 = this;
  if ((*(_BYTE *)(this + 54) & 2) != 0)
  {
    this = WebCore::Element::isUserActionElementHovered((WebCore::Element *)this);
    if ((_DWORD)this == (_DWORD)a2)
      return this;
  }
  else if ((a2 & 1) == 0)
  {
    return this;
  }
  if ((a4 & 0x20000) != 0)
  {
    {
      v8 = (int *)WebCore::penPointerEventType(void)::penType;
      if (!WebCore::penPointerEventType(void)::penType)
        goto LABEL_14;
      goto LABEL_13;
    }
    v8 = &WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
    WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::penPointerEventType(void)::penType = (uint64_t)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
    goto LABEL_24;
  }
  if ((a4 & 0x80) == 0)
  {
    {
      v8 = (int *)WebCore::mousePointerEventType(void)::mouseType;
      if (!WebCore::mousePointerEventType(void)::mouseType)
        goto LABEL_14;
      goto LABEL_13;
    }
    v8 = &WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    goto LABEL_24;
  }
  {
    v8 = &WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl;
    WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::touchPointerEventType(void)::touchType = (uint64_t)&WebCore::touchPointerEventType(void)::$_0::operator() const(void)::impl;
LABEL_24:
    *v10 = 1;
    goto LABEL_13;
  }
  v8 = (int *)WebCore::touchPointerEventType(void)::touchType;
  if (WebCore::touchPointerEventType(void)::touchType)
LABEL_13:
    *v8 += 2;
LABEL_14:
  v9 = *(WTF::StringImpl **)(v7 + 192);
  *(_QWORD *)(v7 + 192) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::Element::setHovered((unsigned __int8 *)v7, a2, a3);
  return WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)v7);
}

uint64_t WebCore::HTMLTextFormControlElement::dispatchFocusEvent(WebCore::HTMLTextFormControlElement *a1, uint64_t *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)a1 + 1368))(a1))
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(a1);
  (*(void (**)(WebCore::HTMLTextFormControlElement *, uint64_t, _QWORD))(*(_QWORD *)a1 + 1480))(a1, *a2, *(unsigned __int8 *)(a3 + 1));
  return WebCore::Element::dispatchFocusEvent(a1, a2);
}

WebCore::ValidationMessage *WebCore::HTMLTextFormControlElement::dispatchBlurEvent(WebCore::HTMLTextFormControlElement *a1, uint64_t *a2)
{
  WebCore::ValidationMessage *result;

  if ((*(unsigned int (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)a1 + 1368))(a1))
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(a1);
  (*(void (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)a1 + 1488))(a1);
  WebCore::Element::dispatchBlurEvent(a1, a2);
  result = (WebCore::ValidationMessage *)*((_QWORD *)a1 + 19);
  if (result)
    return (WebCore::ValidationMessage *)WebCore::ValidationMessage::requestToHideMessage(result);
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::setCanShowPlaceholder(WebCore::HTMLTextFormControlElement *this, int a2)
{
  char v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *((_BYTE *)this + 169) = *((_BYTE *)this + 169) & 0xEF | v2;
  return WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionStart(WebCore::HTMLTextFormControlElement *this, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  int v7;
  uint64_t result;
  uint64_t v9[2];

  v4 = WebCore::HTMLTextFormControlElement::selectionEnd(this);
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  v6 = WebCore::HTMLTextFormControlElement::selectionDirection(this);
  v9[0] = 0;
  v9[1] = 0;
  if ((MEMORY[0x19AEA53F4](*v6, "forward", 7) & 1) != 0)
  {
    v7 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*v6, "backward", 8))
  {
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  result = WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)this, a2, v5, v7, 3, v9, 0);
  if ((_DWORD)result)
    return WebCore::HTMLTextFormControlElement::scheduleSelectEvent(this);
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::selectionEnd(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  if (!(*(unsigned int (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 880))(this))
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(WebCore::HTMLTextFormControlElement **)(v2 + 1248) != this && *((_BYTE *)this + 188))
    return *((unsigned int *)this + 46);
  v3 = *(_QWORD *)(v2 + 528);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WebCore::HTMLTextFormControlElement::indexForPosition(this, (const WebCore::Position *)(*(_QWORD *)(*(_QWORD *)(v4 + 296) + 3064) + 136));
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v5;
    v12 = v11;
    WTF::ensureOnMainThread();
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  return v7;
}

uint64_t *WebCore::HTMLTextFormControlElement::selectionDirection(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  if (((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 880))(this) & 1) != 0)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (*(WebCore::HTMLTextFormControlElement **)(v2 + 1248) == this || !*((_BYTE *)this + 188))
    {
      v6 = *(_QWORD *)(v2 + 528);
      if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064) + 154);
        if ((v10 & 2) != 0)
        {
          if ((v10 & 1) != 0)
            v4 = 1;
          else
            v4 = 2;
        }
        else
        {
          v4 = 0;
        }
        do
        {
          v11 = __ldaxr(v8);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v8));
        if (!v12)
        {
          atomic_store(1u, v8);
          v14 = v8;
          v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v15 = off_1E31FE290;
          v15[1] = v14;
          v18 = v15;
          WTF::ensureOnMainThread();
          v16 = v18;
          v17 = 0;
          if (v16)
            (*(void (**)(_QWORD *))(*v16 + 8))(v16);
        }
      }
      else
      {
        v4 = 0;
      }
      if ((byte_1ECE83612 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        qword_1ECE83628[0] = v17;
        byte_1ECE83612 = 1;
      }
    }
    else
    {
      v3 = *((_BYTE *)this + 169);
      if ((byte_1ECE83612 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        qword_1ECE83628[0] = v17;
        byte_1ECE83612 = 1;
      }
      v4 = v3 & 3;
    }
    if ((byte_1ECE83613 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE83628[1] = v17;
      byte_1ECE83613 = 1;
    }
    v13 = &WebCore::noneAtomData;
    if (v4 == 1)
      v13 = qword_1ECE83628;
    if (v4 == 2)
      return &qword_1ECE83628[1];
    else
      return v13;
  }
  else
  {
    if ((byte_1ECE83612 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE83628[0] = v17;
      byte_1ECE83612 = 1;
    }
    if ((byte_1ECE83613 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE83628[1] = v17;
      byte_1ECE83613 = 1;
    }
    return &WebCore::noneAtomData;
  }
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionEnd(WebCore::HTMLTextFormControlElement *this, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  int v7;
  uint64_t result;
  uint64_t v9[2];

  v4 = WebCore::HTMLTextFormControlElement::selectionStart(this);
  if (v4 >= a2)
    v5 = a2;
  else
    v5 = v4;
  v6 = WebCore::HTMLTextFormControlElement::selectionDirection(this);
  v9[0] = 0;
  v9[1] = 0;
  if ((MEMORY[0x19AEA53F4](*v6, "forward", 7) & 1) != 0)
  {
    v7 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*v6, "backward", 8))
  {
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  result = WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)this, v5, a2, v7, 3, v9, 0);
  if ((_DWORD)result)
    return WebCore::HTMLTextFormControlElement::scheduleSelectEvent(this);
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::selectionStart(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  if (!(*(unsigned int (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 880))(this))
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(WebCore::HTMLTextFormControlElement **)(v2 + 1248) != this && *((_BYTE *)this + 188))
    return *((unsigned int *)this + 45);
  v3 = *(_QWORD *)(v2 + 528);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WebCore::HTMLTextFormControlElement::indexForPosition(this, (const WebCore::Position *)(*(_QWORD *)(*(_QWORD *)(v4 + 296) + 3064) + 120));
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v5;
    v12 = v11;
    WTF::ensureOnMainThread();
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  return v7;
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionDirection(WebCore::HTMLTextFormControlElement *this, const WTF::String *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  uint64_t v8[2];

  v4 = WebCore::HTMLTextFormControlElement::selectionStart(this);
  v5 = WebCore::HTMLTextFormControlElement::selectionEnd(this);
  v8[0] = 0;
  v8[1] = 0;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "forward", 7) & 1) != 0)
  {
    v6 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*(_QWORD *)a2, "backward", 8))
  {
    v6 = 2;
  }
  else
  {
    v6 = 0;
  }
  result = WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)this, v4, v5, v6, 3, v8, 0);
  if ((_DWORD)result)
    return WebCore::HTMLTextFormControlElement::scheduleSelectEvent(this);
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::select(WebCore::HTMLTextFormControlElement *a1, int a2, uint64_t *a3)
{
  uint64_t result;

  result = WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)a1, 0, 0xFFFFFFFF, 0, a2, a3, 0);
  if ((_DWORD)result)
    return WebCore::HTMLTextFormControlElement::scheduleSelectEvent(a1);
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::scheduleSelectEvent(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v13;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8202;
  v8 = *(_QWORD *)(v4 + 1776) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 1776);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  *((_DWORD *)this + 6) += 2;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E33A6578;
  v10[1] = this;
  v10[2] = v5;
  v13 = v10;
  WebCore::Node::queueTaskKeepingThisNodeAlive((uint64_t)this, (WTF::StringImpl *)0x14, (uint64_t *)&v13);
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return WebCore::HTMLTextFormControlElement::scheduleSelectionChangeEvent((uint64_t)this, v11);
}

uint64_t WebCore::HTMLTextFormControlElement::selectedText@<X0>(WebCore::HTMLTextFormControlElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;

  result = (*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 880))(this);
  if ((result & 1) == 0
    || ((*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 1392))(&v9, this), v5 = WebCore::HTMLTextFormControlElement::selectionStart(this), v6 = WebCore::HTMLTextFormControlElement::selectionEnd(this), v8 = WebCore::HTMLTextFormControlElement::selectionStart(this), (result = (uint64_t)v9) == 0))
  {
    *a2 = 0;
    return result;
  }
  if (v5 || *((_DWORD *)v9 + 1) > (v6 - v8))
  {
    WTF::StringImpl::substring(v9);
    result = (uint64_t)v9;
    v9 = 0;
    if (!result)
      return result;
  }
  else
  {
    *(_DWORD *)v9 += 2;
    *a2 = result;
    v9 = 0;
  }
  if (*(_DWORD *)result == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
  *(_DWORD *)result -= 2;
  return result;
}

unsigned __int8 *WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent(WTF **this)
{
  const WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  (*((void (**)(WTF::StringImpl **__return_ptr))*this + 174))(&v10);
  v4 = WTF::equal(this[25], v10, v2);
  v5 = v10;
  v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  if ((v4 & 1) == 0)
  {
    (*((void (**)(WTF::StringImpl **__return_ptr, WTF **))*this + 174))(&v10, this);
    v7 = v10;
    if (v10)
      *(_DWORD *)v10 += 2;
    v8 = this[25];
    this[25] = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        v7 = v10;
      }
      else
      {
        *(_DWORD *)v8 -= 2;
      }
    }
    v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    WebCore::HTMLFormControlElement::dispatchChangeEvent((WebCore::HTMLFormControlElement *)this);
  }
  *((_BYTE *)this + 168) &= ~4u;
  return WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)this + 112, 1);
}

WTF::StringImpl *WebCore::HTMLTextFormControlElement::setRangeText(WebCore::HTMLTextFormControlElement *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v6 = WebCore::HTMLTextFormControlElement::selectionStart(a1);
  v7 = WebCore::HTMLTextFormControlElement::selectionEnd(a1);
  v10 = 0;
  (*(void (**)(WebCore::HTMLTextFormControlElement *, uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 1384))(a1, a2, a3, v6, v7, &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLTextFormControlElement::setRangeText@<X0>(WTF::StringImpl *result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  WebCore::HTMLTextFormControlElement *v13;
  WebCore::Node *v14;
  WTF::StringImpl *v15;
  unsigned int i;
  unsigned int v17;
  unsigned int v18;
  int v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  int v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  char v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  void *v47;
  WebCore::Node *v48;
  char *v49;
  WebCore::Node *v50[2];
  uint64_t v51;
  WTF::StringImpl *v52;
  char v53;
  WTF::StringImpl *v54;

  if (a4 > a5)
  {
    *(_BYTE *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_BYTE *)(a7 + 16) = 1;
    return result;
  }
  v9 = a5;
  LODWORD(v10) = a4;
  v13 = result;
  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)result + 1408))(v50);
  v14 = v50[0];
  if (v50[0])
    goto LABEL_119;
  v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v15 += 2;
  v54 = v15;
  if (!v15)
    goto LABEL_123;
LABEL_7:
  for (i = *((_DWORD *)v15 + 1); ; i = 0)
  {
    v17 = WebCore::HTMLTextFormControlElement::selectionStart(v13);
    v18 = WebCore::HTMLTextFormControlElement::selectionEnd(v13);
    if (i >= v10)
      v10 = v10;
    else
      v10 = i;
    if (i < v9)
      v9 = i;
    v19 = v10 - v9;
    if (v10 < v9)
    {
      if (!v54)
      {
        v54 = 0;
        goto LABEL_44;
      }
      WTF::StringImpl::replace();
      v21 = v54;
      v54 = v50[0];
      if (v21)
        goto LABEL_16;
      goto LABEL_44;
    }
    if (!v54)
      break;
    v23 = *((unsigned int *)v54 + 1);
    if (!(_DWORD)v23)
      break;
    v24 = (char *)*((_QWORD *)v54 + 1);
    v25 = v23 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((*((_DWORD *)v54 + 4) & 4) != 0) << 32);
    if ((*((_DWORD *)v54 + 4) & 4) != 0)
      v26 = v10 | 0x100000000;
    else
      v26 = v10;
    if (v23 <= v10)
      v27 = v23 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((*((_DWORD *)v54 + 4) & 4) != 0) << 32);
    else
      v27 = v26;
    if (v23 <= v10)
    {
      v49 = "";
      v26 = v23 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((*((_DWORD *)v54 + 4) & 4) != 0) << 32);
      goto LABEL_79;
    }
    if (!(_DWORD)v10)
    {
      v49 = (char *)*((_QWORD *)v54 + 1);
      goto LABEL_30;
    }
    v25 = (v23 - v10);
    if ((*((_DWORD *)v54 + 4) & 4) != 0)
    {
      if (v23 - v10 >= v25)
      {
        v49 = &v24[v10];
        v25 |= 0x100000000uLL;
        v26 = v10 | 0x100000000;
        goto LABEL_30;
      }
    }
    else if (v23 - v10 >= v25)
    {
      v49 = &v24[2 * v10];
      v26 = v10;
      goto LABEL_30;
    }
    __break(1u);
LABEL_119:
    WebCore::innerTextValueFrom((WebCore *)&v54, (unint64_t)v14);
    v48 = v50[0];
    v50[0] = 0;
    if (v48)
    {
      if (*((_DWORD *)v48 + 6) == 2)
      {
        if ((*((_WORD *)v48 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v48, v47);
      }
      else
      {
        *((_DWORD *)v48 + 6) -= 2;
      }
    }
    v15 = v54;
    if (v54)
      goto LABEL_7;
LABEL_123:
    ;
  }
  v27 = 0x100000000;
  v24 = "";
  v26 = 0x100000000;
  v49 = "";
LABEL_79:
  v25 = 0x100000000;
LABEL_30:
  if (((v25 | a3) & 0x80000000) != 0
    || ((v28 = a3 + v25, !__OFADD__((_DWORD)a3, (_DWORD)v25)) ? (v29 = 0) : (v29 = 1),
        (v26 & 0x80000000) != 0 || (v29 & 1) != 0 || __OFADD__((_DWORD)v26, v28)))
  {
    v50[0] = 0;
    goto LABEL_127;
  }
  LODWORD(v30) = 0;
  if ((a3 & 0xFF00000000) != 0 && (v26 & 0x100000000) != 0)
    v30 = HIDWORD(v25);
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((v26 + v28), v30, v24, v27, a2, a3, v49, v25, v50);
  v32 = v50[0];
  if (!v50[0])
  {
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x195C7DFD0);
  }
  v50[0] = 0;
  v21 = v54;
  v54 = v32;
  if (v21)
  {
    v22 = *(_DWORD *)v21 - 2;
    if (*(_DWORD *)v21 != 2)
    {
LABEL_43:
      *(_DWORD *)v21 = v22;
      goto LABEL_44;
    }
    WTF::StringImpl::destroy(v21, v31);
    v21 = v50[0];
    v50[0] = 0;
    if (!v21)
      goto LABEL_44;
LABEL_16:
    v22 = *(_DWORD *)v21 - 2;
    if (*(_DWORD *)v21 != 2)
      goto LABEL_43;
    WTF::StringImpl::destroy(v21, v20);
  }
LABEL_44:
  (*(void (**)(uint64_t *__return_ptr, WebCore::HTMLTextFormControlElement *, WTF::StringImpl **, _QWORD, uint64_t))(*(_QWORD *)v13 + 1400))(&v51, v13, &v54, 0, 2);
  if (v53)
  {
    v34 = v52;
    v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  v35 = *a6;
  if (!*a6)
    goto LABEL_49;
  v40 = *(_DWORD *)(v35 + 4);
  if (v40 == 6)
  {
    v43 = *(_QWORD *)(v35 + 8);
    if ((*(_BYTE *)(v35 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v43 & 0xDF) != 0x53
        || (*(_BYTE *)(v43 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v43 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v43 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(v43 + 4) & 0xDF) != 0x43)
      {
        goto LABEL_49;
      }
      v44 = *(unsigned __int8 *)(v43 + 5);
    }
    else
    {
      if ((*(_WORD *)v43 & 0xFFDF) != 0x53
        || (*(_WORD *)(v43 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v43 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v43 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(v43 + 8) & 0xFFDF) != 0x43)
      {
        goto LABEL_49;
      }
      v44 = *(unsigned __int16 *)(v43 + 10);
    }
    if ((v44 & 0xFFFFFFDF) == 0x54)
    {
      v38 = v10 + a3;
      goto LABEL_60;
    }
LABEL_49:
    v36 = v19 + a3 + v17;
    if (v17 >= v10)
      v37 = v10;
    else
      v37 = v17;
    if (v17 <= v9)
      v36 = v37;
    if (v18 <= v9)
    {
      if (v18 <= v10)
        v38 = v18;
      else
        v38 = v10 + a3;
    }
    else
    {
      v38 = v19 + a3 + v18;
    }
    LODWORD(v10) = v36;
    goto LABEL_60;
  }
  if (v40 == 5)
  {
    v45 = *(_QWORD *)(v35 + 8);
    if ((*(_BYTE *)(v35 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v45 & 0xDF) != 0x53
        || (*(_BYTE *)(v45 + 1) & 0xDF) != 0x54
        || (*(_BYTE *)(v45 + 2) & 0xDF) != 0x41
        || (*(_BYTE *)(v45 + 3) & 0xDF) != 0x52)
      {
        goto LABEL_49;
      }
      v46 = *(unsigned __int8 *)(v45 + 4);
    }
    else
    {
      if ((*(_WORD *)v45 & 0xFFDF) != 0x53
        || (*(_WORD *)(v45 + 2) & 0xFFDF) != 0x54
        || (*(_WORD *)(v45 + 4) & 0xFFDF) != 0x41
        || (*(_WORD *)(v45 + 6) & 0xFFDF) != 0x52)
      {
        goto LABEL_49;
      }
      v46 = *(unsigned __int16 *)(v45 + 8);
    }
    v38 = v10;
    if ((v46 & 0xFFFFFFDF) == 0x54)
      goto LABEL_60;
    goto LABEL_49;
  }
  if (v40 != 3)
    goto LABEL_49;
  v41 = *(_QWORD *)(v35 + 8);
  if ((*(_BYTE *)(v35 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v41 & 0xDF) == 0x45 && (*(_BYTE *)(v41 + 1) & 0xDF) == 0x4E)
    {
      v42 = *(unsigned __int8 *)(v41 + 2);
      goto LABEL_74;
    }
    goto LABEL_49;
  }
  if ((*(_WORD *)v41 & 0xFFDF) != 0x45 || (*(_WORD *)(v41 + 2) & 0xFFDF) != 0x4E)
    goto LABEL_49;
  v42 = *(unsigned __int16 *)(v41 + 4);
LABEL_74:
  if ((v42 & 0xFFFFFFDF) != 0x44)
    goto LABEL_49;
  v38 = v10 + a3;
  LODWORD(v10) = v10 + a3;
LABEL_60:
  v50[0] = 0;
  v50[1] = 0;
  if (WebCore::HTMLTextFormControlElement::setSelectionRange((uint64_t)v13, v10, v38, 0, 3, (uint64_t *)v50, 0))WebCore::HTMLTextFormControlElement::scheduleSelectEvent(v13);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  result = v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::Node *WebCore::positionForIndex(WebCore *this, WebCore::TextControlInnerTextElement *a2, unsigned int a3)
{
  WebCore::TextControlInnerTextElement *v6;
  __int16 v7;
  WebCore::TextControlInnerTextElement *v8;
  uint64_t v9;
  WebCore::Node *v10;
  WebCore::TextControlInnerTextElement *v11;
  WebCore::Node *v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  WebCore::Node *result;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;

  if (a2)
  {
    *((_DWORD *)a2 + 6) += 4;
    v20 = a2;
    v6 = a2;
    while (1)
    {
      v7 = *((_WORD *)v6 + 14);
      if ((v7 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v6 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
      {
        if (!a3)
        {
          *((_DWORD *)v6 + 6) += 2;
          *(_QWORD *)this = v6;
          *((_DWORD *)this + 2) = 0;
          *((_BYTE *)this + 12) = *((_BYTE *)this + 12) & 0xF0 | 1;
LABEL_56:
          if (*((_DWORD *)v6 + 6) == 2)
          {
            if ((*((_WORD *)v6 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v6);
          }
          else
          {
            *((_DWORD *)v6 + 6) -= 2;
          }
          goto LABEL_38;
        }
        --a3;
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v20, (uint64_t)v6);
      }
      else if ((v7 & 2) != 0)
      {
        v9 = *((_QWORD *)v6 + 10);
        if (v9)
        {
          LODWORD(v9) = *(_DWORD *)(v9 + 4);
          if (a3 < v9)
          {
            *((_DWORD *)v6 + 6) += 2;
            v19 = v6;
            WebCore::Position::Position((uint64_t)this, (uint64_t *)&v19, a3);
            v18 = v19;
            v19 = 0;
            if (v18)
            {
              if (*((_DWORD *)v18 + 6) == 2)
              {
                if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v18);
              }
              else
              {
                *((_DWORD *)v18 + 6) -= 2;
              }
            }
            goto LABEL_56;
          }
        }
        a3 -= v9;
        *((_DWORD *)v6 + 6) += 2;
        v10 = v20;
        v20 = v6;
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
      }
      if ((*((_WORD *)v6 + 14) & 4) != 0)
      {
        v8 = (WebCore::TextControlInnerTextElement *)*((_QWORD *)v6 + 10);
        if (v8)
          goto LABEL_11;
      }
      if (v6 == a2)
      {
        v8 = 0;
LABEL_13:
        if (*((_DWORD *)v6 + 6) == 2)
        {
          if ((*((_WORD *)v6 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v6);
        }
        else
        {
          *((_DWORD *)v6 + 6) -= 2;
        }
        goto LABEL_15;
      }
      v8 = (WebCore::TextControlInnerTextElement *)*((_QWORD *)v6 + 7);
      if (v8)
      {
LABEL_11:
        *((_DWORD *)v8 + 6) += 2;
      }
      else
      {
        v11 = v6;
        while (1)
        {
          v11 = (WebCore::TextControlInnerTextElement *)*((_QWORD *)v11 + 4);
          if (!v11 || v11 == a2)
            break;
          v8 = (WebCore::TextControlInnerTextElement *)*((_QWORD *)v11 + 7);
          if (v8)
            goto LABEL_11;
        }
        v8 = 0;
      }
      if (v6)
        goto LABEL_13;
LABEL_15:
      v6 = v8;
      if (!v8)
      {
        v13 = v20;
        if (!v20)
          goto LABEL_50;
        if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v20 + 208))(v20) & 1) == 0)
        {
          *((_DWORD *)v13 + 6) += 2;
          *(_QWORD *)this = v13;
          *((_DWORD *)this + 2) = 0;
          v15 = *((_BYTE *)this + 12) & 0xF0 | 2;
          goto LABEL_37;
        }
        v14 = *((_WORD *)v13 + 14);
        *((_DWORD *)v13 + 6) += 2;
        if ((v14 & 1) == 0)
        {
          *(_QWORD *)this = v13;
          *((_DWORD *)this + 2) = 0;
          v15 = *((_BYTE *)this + 12) & 0xF0 | 4;
          goto LABEL_37;
        }
        v16 = *((_QWORD *)v13 + 10);
        if (v16)
          LODWORD(v16) = *(_DWORD *)(v16 + 4);
        *(_QWORD *)this = v13;
        *((_DWORD *)this + 2) = v16;
        goto LABEL_36;
      }
    }
  }
  v20 = 0;
LABEL_50:
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
LABEL_36:
  v15 = *((_BYTE *)this + 12) & 0xF0;
LABEL_37:
  *((_BYTE *)this + 12) = v15;
LABEL_38:
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::indexForVisiblePosition(WebCore::HTMLTextFormControlElement *this, const WebCore::VisiblePosition *a2)
{
  void *v4;
  WebCore::Node *v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  WebCore::Node *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;
  WebCore::Node *v18;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 1408))(&v18);
  v5 = v18;
  if (!v18)
    return 0;
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v7 + 2;
    if (v5 == (WebCore::Node *)v6)
    {
      if (v7)
      {
        *(_DWORD *)(v6 + 24) = v7;
      }
      else if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v5, v4);
      }
      goto LABEL_26;
    }
    v8 = *((_WORD *)v5 + 14);
    if ((v8 & 0xF000) == 0x9000)
    {
      if (**(WebCore::Node ***)(v6 + 40) == v5 && (*(_WORD *)(v6 + 28) & 0xF000) != 0x9000)
      {
        v10 = (*(unsigned __int8 *)(v6 + 22) >> 3) & 1;
        if (v7)
        {
LABEL_25:
          *(_DWORD *)(v6 + 24) = v7;
          if ((v10 & 1) != 0)
          {
LABEL_26:
            v13 = *(_QWORD *)a2;
            if (*(_QWORD *)a2)
              *(_DWORD *)(v13 + 24) += 2;
            v15 = v13;
            v16 = *((_DWORD *)a2 + 2);
            v17 = *((_BYTE *)a2 + 12);
            v12 = WebCore::HTMLTextFormControlElement::indexForPosition(this, (const WebCore::Position *)&v15);
            if (v13)
            {
              if (*(_DWORD *)(v13 + 24) == 2)
              {
                if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v13, v4);
              }
              else
              {
                *(_DWORD *)(v13 + 24) -= 2;
              }
            }
LABEL_37:
            v5 = v18;
            v18 = 0;
            if (!v5)
              return v12;
            goto LABEL_38;
          }
LABEL_36:
          v12 = 0;
          goto LABEL_37;
        }
LABEL_34:
        if ((*(_WORD *)(v6 + 30) & 0x400) != 0)
        {
          if (v10)
            goto LABEL_26;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
          if ((v10 & 1) != 0)
            goto LABEL_26;
        }
        goto LABEL_36;
      }
    }
    else if ((v8 & 4) != 0
           && *((_QWORD *)v5 + 10)
           && ((*(unsigned __int8 *)(v6 + 22) ^ *((unsigned __int8 *)v5 + 22)) & 8) == 0)
    {
      v9 = (WebCore::Node *)v6;
      do
      {
        v9 = (WebCore::Node *)*((_QWORD *)v9 + 4);
        v10 = v9 != 0;
      }
      while (v9 != v5 && v9 != 0);
LABEL_24:
      if (v7)
        goto LABEL_25;
      goto LABEL_34;
    }
    v10 = 0;
    goto LABEL_24;
  }
  v12 = 0;
  v18 = 0;
LABEL_38:
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v5, v4);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  return v12;
}

uint64_t WebCore::HTMLTextFormControlElement::indexForPosition(WebCore::HTMLTextFormControlElement *this, const WebCore::Position *a2)
{
  WebCore::Node *v4;
  uint64_t v5;
  __int16 v6;
  BOOL v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v30;
  int v31;
  BOOL v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WebCore::Node *v36;
  WTF::StringImpl *v37;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 1408))(&v36);
  v4 = v36;
  if (!v36)
    return 0;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (v36 == (WebCore::Node *)v5)
    {
      v9 = (_DWORD *)((char *)v36 + 24);
      *((_DWORD *)v36 + 6) += 2;
      if ((*((_BYTE *)a2 + 12) & 8) == 0 && ((v10 = *((_BYTE *)a2 + 12) & 7, v10 == 4) || v10 == 2))
        v11 = WebCore::Position::offsetForPositionAfterAnchor(a2);
      else
        v11 = *((_DWORD *)a2 + 2);
      if (v11)
        v8 = 0;
      else
        v8 = (*((_BYTE *)a2 + 12) & 7) == 1;
    }
    else
    {
      v6 = *((_WORD *)v36 + 14);
      if ((v6 & 0xF000) == 0x9000)
      {
        if (**(WebCore::Node ***)(v5 + 40) != v36
          || (*(_WORD *)(v5 + 28) & 0xF000) == 0x9000
          || (*(_BYTE *)(v5 + 22) & 8) == 0)
        {
          goto LABEL_110;
        }
      }
      else
      {
        if ((v6 & 4) == 0
          || !*((_QWORD *)v36 + 10)
          || ((*(unsigned __int8 *)(v5 + 22) ^ *((unsigned __int8 *)v36 + 22)) & 8) != 0)
        {
          goto LABEL_110;
        }
        do
          v5 = *(_QWORD *)(v5 + 32);
        while ((WebCore::Node *)v5 != v36 && v5 != 0);
        if (!v5)
          goto LABEL_110;
      }
      v8 = 0;
      v9 = (_DWORD *)((char *)v36 + 24);
      *((_DWORD *)v36 + 6) += 2;
    }
    if (*v9 == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v4);
    }
    else
    {
      *v9 -= 2;
    }
    if (!v8)
    {
      v12 = *(_QWORD *)a2;
      if (!*(_QWORD *)a2)
      {
LABEL_115:
        v16 = 0;
        v25 = 1;
        goto LABEL_59;
      }
      v13 = *((_BYTE *)a2 + 12) & 7;
      if (v13 == 4)
      {
        if ((*(_WORD *)(v12 + 28) & 4) == 0)
          goto LABEL_79;
        v14 = *(_QWORD *)(v12 + 88);
      }
      else
      {
        v14 = *(_QWORD *)a2;
        switch(*((_BYTE *)a2 + 12) & 7)
        {
          case 0:
            v30 = *((_DWORD *)a2 + 2);
            if (!v30 || (*(_WORD *)(v12 + 28) & 4) == 0)
              goto LABEL_79;
            v14 = *(_QWORD *)(v12 + 80);
            if (v30 != 1 && v14)
            {
              v31 = v30 - 2;
              do
              {
                v14 = *(_QWORD *)(v14 + 56);
                v33 = v31-- != 0;
              }
              while (v14 && v33);
            }
            break;
          case 1:
            v14 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL;
            break;
          case 2:
            goto LABEL_28;
          case 3:
            goto LABEL_79;
          default:
            v12 = 0;
            goto LABEL_115;
        }
      }
      if (v14)
      {
LABEL_28:
        v15 = *(_DWORD *)(v14 + 24) + 2;
        *(_DWORD *)(v14 + 24) = v15;
        v12 = v14;
LABEL_29:
        v16 = 0;
        *(_DWORD *)(v12 + 24) = v15 + 2;
        v17 = v12;
        while (1)
        {
          v18 = v17;
          v19 = *(_WORD *)(v17 + 28);
          if ((v19 & 2) != 0)
          {
            v21 = *(_QWORD *)(v17 + 80);
            if (v21)
              LODWORD(v21) = *(_DWORD *)(v21 + 4);
            v22 = *(_QWORD *)a2;
            if (*(_QWORD *)a2)
            {
              v23 = *((_BYTE *)a2 + 12) & 7;
              if (v23 > 4)
              {
                v22 = 0;
              }
              else if (((1 << v23) & 0x19) == 0)
              {
                v22 = *(_QWORD *)(v22 + 32);
              }
            }
            if (v17 == v22 && *((_DWORD *)a2 + 2) < v21)
              LODWORD(v21) = *((_DWORD *)a2 + 2);
            v16 += v21;
          }
          else if ((v19 & 0x10) != 0
                 && *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
          {
            ++v16;
          }
          v17 = *(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL;
          if (v17)
          {
            if ((*(_WORD *)((*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              do
              {
                v24 = *(_QWORD *)(v17 + 88);
                if (!v24)
                  break;
                v17 = *(_QWORD *)(v17 + 88);
              }
              while ((*(_WORD *)(v24 + 28) & 4) != 0);
            }
          }
          else
          {
            v17 = *(_QWORD *)(v18 + 32);
            if ((WebCore::Node *)v17 == v36 || v17 == 0)
            {
              v17 = 0;
              goto LABEL_40;
            }
          }
          *(_DWORD *)(v17 + 24) += 2;
LABEL_40:
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v18);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
          if (!v17)
          {
            v25 = 0;
            goto LABEL_59;
          }
        }
      }
      v25 = 1;
      if (v13 > 4)
      {
        v12 = 0;
LABEL_121:
        v16 = 0;
LABEL_59:
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 1408))(&v37, this);
        v26 = v37;
        if (v37)
        {
          WebCore::innerTextValueFrom((WebCore *)&v35, (unint64_t)v37);
          v34 = v37;
          v37 = 0;
          if (v34)
          {
            if (*((_DWORD *)v34 + 6) == 2)
            {
              if ((*((_WORD *)v34 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v34);
            }
            else
            {
              *((_DWORD *)v34 + 6) -= 2;
            }
          }
          v27 = v35;
          if (v35)
            goto LABEL_62;
        }
        else
        {
          v27 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
          {
            *(_DWORD *)v27 += 2;
LABEL_62:
            LODWORD(v28) = *((_DWORD *)v27 + 1);
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v26);
            else
              *(_DWORD *)v27 -= 2;
            goto LABEL_64;
          }
        }
        LODWORD(v28) = 0;
LABEL_64:
        if (v28 >= v16)
          v28 = v16;
        else
          v28 = v28;
        if ((v25 & 1) == 0)
        {
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v12);
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
        }
LABEL_70:
        v4 = v36;
        v36 = 0;
        if (!v4)
          return v28;
        goto LABEL_71;
      }
      if (((1 << v13) & 0x19) == 0)
      {
        v12 = *(_QWORD *)(v12 + 32);
        if (!v12)
          goto LABEL_121;
      }
LABEL_79:
      v15 = *(_DWORD *)(v12 + 24) + 2;
      *(_DWORD *)(v12 + 24) = v15;
      goto LABEL_29;
    }
LABEL_110:
    v28 = 0;
    goto LABEL_70;
  }
  v28 = 0;
  v36 = 0;
LABEL_71:
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return v28;
}

unsigned int *WebCore::HTMLTextFormControlElement::visiblePositionForIndex@<X0>(WebCore::HTMLTextFormControlElement *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  void *v5;
  WebCore::Node *v6;
  unsigned int *result;
  WebCore::Node *v8;
  WebCore::Node *v9[2];

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 1408))(&v8);
  WebCore::positionForIndex((WebCore *)v9, v8, a2);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v9, a3);
  *(_BYTE *)(a3 + 16) = 1;
  v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v5);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  result = (unsigned int *)v8;
  v8 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::computeSelectionDirection(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 296) + 3064) + 154);
  if ((v5 & 2) != 0)
  {
    if ((v5 & 1) != 0)
      v6 = 1;
    else
      v6 = 2;
  }
  else
  {
    v6 = 0;
  }
  do
  {
    v7 = __ldaxr(v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v3));
  if (!v8)
  {
    atomic_store(1u, v3);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v3;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v6;
}

uint64_t WebCore::HTMLTextFormControlElement::selection@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  WebCore::Node *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  BOOL v19;
  unsigned int v20;
  WebCore::Node *v21;
  uint64_t v23;
  uint64_t v24;
  int j;
  uint64_t v26;
  int v27;
  WebCore::Node *v28;
  WebCore::Node *v29;

  if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_53;
  if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    this = 105;
    __break(0xC471u);
    return this;
  }
  v3 = this;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 880))(this);
  if (!(_DWORD)this || !*(_BYTE *)(v3 + 188))
  {
LABEL_53:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return this;
  }
  v5 = *(_DWORD *)(v3 + 180);
  v4 = *(_DWORD *)(v3 + 184);
  (*(void (**)(WebCore::Node **__return_ptr, uint64_t))(*(_QWORD *)v3 + 1408))(&v29, v3);
  v7 = v29;
  if (!v29)
  {
LABEL_62:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    goto LABEL_76;
  }
  v8 = *((_QWORD *)v29 + 10);
  if (!v8)
  {
    *((_DWORD *)v29 + 6) += 4;
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 24) = 0;
LABEL_70:
    *(_BYTE *)(a2 + 32) = 1;
    goto LABEL_76;
  }
  v9 = 0;
  v10 = 0;
  *(_DWORD *)(v8 + 24) += 2;
  while (1)
  {
    v11 = v8;
    v12 = v9;
    if ((*(_WORD *)(v11 + 28) & 2) != 0)
    {
      v17 = *(_QWORD *)(v11 + 80);
      if (v17)
        LODWORD(v17) = *(_DWORD *)(v17 + 4);
      v9 += v17;
      if (v5 >= v12 && v5 <= v9)
      {
        *(_DWORD *)(v11 + 24) += 2;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v6);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        v10 = v11;
        v5 -= v12;
      }
    }
    else
    {
      ++v9;
      if (v5 >= v12 && v5 <= v9)
      {
        v13 = *(_QWORD *)(v11 + 32);
        if (v13)
          *(_DWORD *)(v13 + 24) += 2;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v6);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        v14 = *(_QWORD *)(v11 + 48);
        for (i = 0; ; ++i)
        {
          v16 = v14 & 0xFFFFFFFFFFFFLL;
          if (!v16)
            break;
          v14 = *(_QWORD *)(v16 + 48);
        }
        v5 = v5 - v12 + i;
        v10 = v13;
      }
    }
    v18 = *(_WORD *)(v11 + 28);
    v19 = v4 >= v12;
    v20 = v4 - v12;
    if (v19 && v4 <= v9)
      break;
    if ((v18 & 4) != 0)
    {
      v8 = *(_QWORD *)(v11 + 80);
      if (v8)
      {
LABEL_42:
        *(_DWORD *)(v8 + 24) += 2;
        goto LABEL_43;
      }
    }
    if ((WebCore::Node *)v11 != v29)
    {
      v8 = *(_QWORD *)(v11 + 56);
      if (v8)
        goto LABEL_42;
      v21 = (WebCore::Node *)v11;
      while (1)
      {
        v21 = (WebCore::Node *)*((_QWORD *)v21 + 4);
        if (!v21 || v21 == v29)
          break;
        v8 = *((_QWORD *)v21 + 7);
        if (v8)
          goto LABEL_42;
      }
    }
    v8 = 0;
LABEL_43:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v6);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    if (!v8)
    {
      if (!v10)
        goto LABEL_62;
      goto LABEL_71;
    }
  }
  if ((v18 & 2) != 0)
  {
    v27 = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v27 + 2;
    v23 = v11;
  }
  else
  {
    v23 = *(_QWORD *)(v11 + 32);
    if (v23)
      *(_DWORD *)(v23 + 24) += 2;
    v24 = *(_QWORD *)(v11 + 48);
    for (j = 0; ; ++j)
    {
      v26 = v24 & 0xFFFFFFFFFFFFLL;
      if (!v26)
        break;
      v24 = *(_QWORD *)(v26 + 48);
    }
    v20 += j;
    v27 = *(_DWORD *)(v11 + 24) - 2;
  }
  if (v27)
  {
    *(_DWORD *)(v11 + 24) = v27;
  }
  else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v11, v6);
  }
  if (v10)
  {
    if (v23)
    {
      *(_QWORD *)a2 = v10;
      *(_DWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = v23;
      *(_DWORD *)(a2 + 24) = v20;
      goto LABEL_70;
    }
LABEL_71:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (*(_DWORD *)(v10 + 24) != 2)
    {
      *(_DWORD *)(v10 + 24) -= 2;
      goto LABEL_76;
    }
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    {
      v28 = (WebCore::Node *)v10;
LABEL_88:
      WebCore::Node::removedLastRef(v28, v6);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (!v23)
      goto LABEL_76;
    if (*(_DWORD *)(v23 + 24) != 2)
    {
      *(_DWORD *)(v23 + 24) -= 2;
      goto LABEL_76;
    }
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
    {
      v28 = (WebCore::Node *)v23;
      goto LABEL_88;
    }
  }
LABEL_76:
  this = (uint64_t)v29;
  v29 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v6);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  return this;
}

WebCore *WebCore::HTMLTextFormControlElement::selectionChanged(WebCore::HTMLTextFormControlElement *this, int a2)
{
  WebCore *result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  WebCore *v29;
  WebCore *v30;
  WebCore *v31;
  uint64_t v32;
  WebCore *v33;
  WebCore *v34;

  result = (WebCore *)(*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 880))(this);
  if ((_DWORD)result)
  {
    v6 = *((_DWORD *)this + 45);
    v5 = *((_DWORD *)this + 46);
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      result = (WebCore *)WebCore::HTMLTextFormControlElement::indexForPosition(this, (const WebCore::Position *)(*(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064) + 120));
      v11 = (int)result;
      do
      {
        v12 = __ldaxr(v9);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v9));
      if (!v13)
      {
        atomic_store(1u, v9);
        v29 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v29 = off_1E31FE290;
        *((_QWORD *)v29 + 1) = v9;
        v34 = v29;
        WTF::ensureOnMainThread();
        result = v34;
        v34 = 0;
        if (result)
          result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
      }
    }
    else
    {
      v11 = 0;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
    {
      v16 = (unsigned int *)(v15 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      result = (WebCore *)WebCore::HTMLTextFormControlElement::indexForPosition(this, (const WebCore::Position *)(*(_QWORD *)(*(_QWORD *)(v15 + 296) + 3064) + 136));
      v18 = (int)result;
      do
      {
        v19 = __ldaxr(v16);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v16));
      if (!v20)
      {
        atomic_store(1u, v16);
        v30 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v30 = off_1E31FE290;
        *((_QWORD *)v30 + 1) = v16;
        v34 = v30;
        WTF::ensureOnMainThread();
        result = v34;
        v34 = 0;
        if (result)
          result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
      }
    }
    else
    {
      v18 = 0;
    }
    v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v21 && (v22 = *(_QWORD *)(v21 + 8)) != 0)
    {
      v23 = (unsigned int *)(v22 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v25 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 296) + 3064) + 154);
      if ((v25 & 2) != 0)
      {
        if ((v25 & 1) != 0)
          v26 = 1;
        else
          v26 = 2;
      }
      else
      {
        v26 = 0;
      }
      do
      {
        v27 = __ldaxr(v23);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v23));
      if (!v28)
      {
        atomic_store(1u, v23);
        v31 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v31 = off_1E31FE290;
        *((_QWORD *)v31 + 1) = v23;
        v34 = v31;
        WTF::ensureOnMainThread();
        result = v34;
        v34 = 0;
        if (result)
          result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
      }
    }
    else
    {
      v26 = 0;
    }
    *((_DWORD *)this + 45) = v11;
    *((_DWORD *)this + 46) = v18;
    *((_BYTE *)this + 169) = *((_BYTE *)this + 169) & 0xFC | v26;
    *((_BYTE *)this + 188) = 1;
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3421) = 1;
    if (a2 && v11 != v18)
    {
      v32 = WebCore::eventNames(result);
      WebCore::Event::create((_QWORD *)(v32 + 1776), 1, 0, 0, (uint64_t *)&v34);
      v33 = v34;
      (*(void (**)(WebCore::HTMLTextFormControlElement *, WebCore *))(*(_QWORD *)this + 48))(this, v34);
      if (v33)
      {
        if (*((_DWORD *)v33 + 4) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v33 + 8))(v33);
        else
          --*((_DWORD *)v33 + 4);
      }
      v11 = *((_DWORD *)this + 45);
    }
    if (v6 == v11)
      return (WebCore *)(v5 != *((_DWORD *)this + 46));
    else
      return (WebCore *)1;
  }
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::scheduleSelectionChangeEvent(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6[2];
  char v7;
  int v8;

  if (!*(_BYTE *)(this + 189))
  {
    v2 = this;
    *(_BYTE *)(this + 189) = 1;
    v3 = WebCore::Document::eventLoop(*(WebCore::Document **)(*(_QWORD *)(this + 40) + 8), a2);
    *(_DWORD *)(v2 + 24) += 2;
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v5 = v2;
    v8 = 0;
    WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v5, &v8, (uint64_t)v6);
    ++*(_DWORD *)(v6[0] + 8);
    if (v7)
      *(_QWORD *)(v2 + 16) |= 0x4000000000000uLL;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E33D2588;
    v4[1] = v2;
    v6[0] = (uint64_t)v4;
    WebCore::EventLoopTaskGroup::queueTask(v3, 20, v6);
    this = v6[0];
    v6[0] = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

unsigned int *WebCore::HTMLTextFormControlElement::effectiveSpellcheckAttributeChanged(unsigned int *this, int a2)
{
  unsigned int *v3;
  WebCore::Document *v4;
  WebCore::Editor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::Document *v11;
  WebCore::Editor *v12;
  void *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _BYTE v18[104];
  WebCore::VisibleSelection *v19;

  if (!*((_BYTE *)this + 188))
    return this;
  v3 = this;
  (*(void (**)(WebCore::VisibleSelection **__return_ptr))(*(_QWORD *)this + 1408))(&v19);
  this = (unsigned int *)v19;
  if (!v19)
    return this;
  WebCore::VisibleSelection::selectionFromContentsOfNode(v19, (WebCore::VisibleSelection *)v18);
  v4 = *(WebCore::Document **)(*((_QWORD *)v3 + 5) + 8);
  v5 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
  if (v5)
  {
    if (a2)
    {
LABEL_5:
      v6 = *((_QWORD *)v5 + 1);
      if (v6
        && (v7 = *(_QWORD *)(v6 + 8)) != 0
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7)
        && (v8 = *((_QWORD *)v5 + 1)) != 0
        && (v9 = *(_QWORD *)(v8 + 8)) != 0)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
      }
      else
      {
        v10 = 0;
      }
      WebCore::Editor::markMisspellingsAndBadGrammar(v5, (const WebCore::VisibleSelection *)v18, v10, (const WebCore::VisibleSelection *)v18);
      goto LABEL_18;
    }
  }
  else
  {
    v11 = v4;
    v12 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v12, v11);
    v14 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
    *((_QWORD *)v11 + 382) = v12;
    if (v14)
    {
      WebCore::Editor::~Editor(v14, v13);
      if (*(_DWORD *)v15)
      {
        *(_QWORD *)(v15 + 496) = 0;
        *(_OWORD *)(v15 + 464) = 0u;
        *(_OWORD *)(v15 + 480) = 0u;
        *(_OWORD *)(v15 + 432) = 0u;
        *(_OWORD *)(v15 + 448) = 0u;
        *(_OWORD *)(v15 + 400) = 0u;
        *(_OWORD *)(v15 + 416) = 0u;
        *(_OWORD *)(v15 + 368) = 0u;
        *(_OWORD *)(v15 + 384) = 0u;
        *(_OWORD *)(v15 + 336) = 0u;
        *(_OWORD *)(v15 + 352) = 0u;
        *(_OWORD *)(v15 + 304) = 0u;
        *(_OWORD *)(v15 + 320) = 0u;
        *(_OWORD *)(v15 + 272) = 0u;
        *(_OWORD *)(v15 + 288) = 0u;
        *(_OWORD *)(v15 + 240) = 0u;
        *(_OWORD *)(v15 + 256) = 0u;
        *(_OWORD *)(v15 + 208) = 0u;
        *(_OWORD *)(v15 + 224) = 0u;
        *(_OWORD *)(v15 + 176) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        *(_OWORD *)(v15 + 160) = 0u;
        *(_OWORD *)(v15 + 112) = 0u;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 80) = 0u;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)v15 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v15, v16);
      }
    }
    v5 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
    if (a2)
      goto LABEL_5;
  }
  WebCore::Editor::clearMisspellingsAndBadGrammar(v5, (const WebCore::VisibleSelection *)v18);
LABEL_18:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v18);
  this = (unsigned int *)v19;
  v19 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v17);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::HTMLTextFormControlElement::disabledStateChanged(WebCore::HTMLTextFormControlElement *this)
{
  WebCore::HTMLFormControlElement::disabledStateChanged(this);
  return WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(this);
}

unsigned int *WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(WebCore::HTMLTextFormControlElement *this)
{
  unsigned int *result;
  WebCore::Node *v3;
  uint64_t *v4;
  void *v5;
  WebCore::Node *v6;

  result = (unsigned int *)(*(_QWORD *(**)(WebCore::Node **__return_ptr))(*(_QWORD *)this + 1408))(&v6);
  v3 = v6;
  if (v6)
  {
    if ((*(unsigned int (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 1440))(this))
      v4 = &WebCore::plaintextOnlyAtomData;
    else
      v4 = &WebCore::falseAtomData;
    WebCore::Element::setAttributeWithoutSynchronization(v3, (const WebCore::QualifiedName *)&WebCore::HTMLNames::contenteditableAttr, (WTF::StringImpl **)v4);
    result = (unsigned int *)v6;
    v6 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLTextFormControlElement::disabledStateChanged(WebCore::HTMLTextFormControlElement *this)
{
  WebCore::HTMLTextFormControlElement *v1;

  v1 = (WebCore::HTMLTextFormControlElement *)((char *)this - 112);
  WebCore::HTMLFormControlElement::disabledStateChanged((WebCore::HTMLTextFormControlElement *)((char *)this - 112));
  return WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(v1);
}

unsigned int *WebCore::HTMLTextFormControlElement::readOnlyStateChanged(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t v3;
  WebCore::Node *ElementSibling;
  WebCore::Element *v5;

  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity((WebCore::HTMLTextFormControlElement *)((char *)this + 112));
  WebCore::Node::invalidateStyle((uint64_t)this, 4u, 0);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (!v3 || (*(_WORD *)(v3 + 28) & 8) == 0 || (*(_BYTE *)(v3 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v5);
    }
  }
  return WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(this);
}

unsigned int *`non-virtual thunk to'WebCore::HTMLTextFormControlElement::readOnlyStateChanged(WebCore::HTMLTextFormControlElement *this)
{
  WebCore::HTMLTextFormControlElement *v2;
  uint64_t v4;
  WebCore::Node *ElementSibling;
  WebCore::Element *v6;

  v2 = (WebCore::HTMLTextFormControlElement *)((char *)this - 112);
  WebCore::ValidatedFormListedElement::updateWillValidateAndValidity(this);
  WebCore::Node::invalidateStyle((uint64_t)v2, 4u, 0);
  if ((*((_BYTE *)this - 41) & 1) != 0)
  {
    v4 = *((_QWORD *)this - 10);
    if (!v4 || (*(_WORD *)(v4 + 28) & 8) == 0 || (*(_BYTE *)(v4 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)v2);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v6);
    }
  }
  return WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability(v2);
}

uint64_t WebCore::HTMLTextFormControlElement::lastChangeWasUserEdit(WebCore::HTMLTextFormControlElement *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)this + 880))(this);
  if ((_DWORD)result)
    return (*((unsigned __int8 *)this + 169) >> 2) & 1;
  return result;
}

WTF::StringImpl *WebCore::innerTextValueFrom(WebCore *this, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  BOOL v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  char v21;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
  {
LABEL_42:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v18);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v18);
    result = v18;
    if (v18)
      goto LABEL_43;
    goto LABEL_44;
  }
  v4 = a2;
  *(_DWORD *)(v3 + 24) += 2;
  do
  {
    v5 = v3;
    v6 = *(_WORD *)(v3 + 28);
    if ((v6 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
    {
      WTF::StringBuilder::append((uint64_t)&v18, 0xAu);
    }
    else if ((v6 & 2) != 0)
    {
      v7 = *(_QWORD *)(v3 + 80);
      if (v20)
        v8 = 0;
      else
        v8 = v19 == 0;
      if (v8)
      {
        if (v7)
          *(_DWORD *)v7 += 2;
        v9 = v18;
        v18 = (WTF::StringImpl *)v7;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
          {
            WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
            v7 = *(_QWORD *)(v3 + 80);
          }
          else
          {
            *(_DWORD *)v9 -= 2;
          }
        }
        if (v7)
          LODWORD(v7) = *(_DWORD *)(v7 + 4);
        v20 = v7;
      }
      else if (v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        WTF::StringBuilder::append();
      }
    }
    if ((*(_WORD *)(v3 + 28) & 4) == 0 || (v3 = *(_QWORD *)(v3 + 80)) == 0)
    {
      if (v5 == v4)
        goto LABEL_22;
      v3 = *(_QWORD *)(v5 + 56);
      if (!v3)
      {
        v10 = v5;
        while (1)
        {
          v10 = *(_QWORD *)(v10 + 32);
          if (!v10 || v10 == v4)
            break;
          v3 = *(_QWORD *)(v10 + 56);
          if (v3)
            goto LABEL_24;
        }
LABEL_22:
        v3 = 0;
        goto LABEL_25;
      }
    }
LABEL_24:
    *(_DWORD *)(v3 + 24) += 2;
LABEL_25:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  while (v3);
  if (v20 < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C7F884);
  }
  result = v18;
  if (v20)
  {
    a2 = (v20 - 1);
    v14 = v19;
    v15 = v19;
    if (!v19)
    {
      v15 = v18;
      if (!v18)
        goto LABEL_61;
    }
    if ((*((_BYTE *)v15 + 16) & 4) == 0)
    {
      if (v18)
        v14 = v18;
      v17 = *(unsigned __int16 *)(*((_QWORD *)v14 + 1) + 2 * a2);
      goto LABEL_56;
    }
    v16 = v18;
    if (!v18)
    {
LABEL_61:
      result = 0;
      v16 = v19;
    }
    v17 = *(unsigned __int8 *)(*((_QWORD *)v16 + 1) + a2);
LABEL_56:
    if (v17 == 10)
    {
      WTF::StringBuilder::shrink((WTF::StringBuilder *)&v18);
      result = v18;
    }
  }
  if (!result)
    goto LABEL_42;
LABEL_43:
  *(_DWORD *)result += 2;
LABEL_44:
  *(_QWORD *)this = result;
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      result = v18;
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLTextFormControlElement::valueWithHardLineBreaks(void)const::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  WebCore *v9;
  WTF::StringBuilder *v10;
  uint64_t v11[2];
  int v12;
  char v13;
  char *v14;

  while (1)
  {
    v2 = *(unsigned int *)(*(_QWORD *)a1 + 16);
    if ((_DWORD)v2 == -1)
      break;
    v11[0] = (uint64_t)&v14;
    result = ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(v11);
    if ((result & 1) != 0)
    {
      **(_QWORD **)(a1 + 8) = 0;
      **(_DWORD **)(a1 + 16) = 0;
      return result;
    }
    WebCore::InlineIterator::LineBox::lastLeafBox(v11, *(WebCore::InlineIterator::LineBox **)a1);
    v4 = *(unsigned int *)(*(_QWORD *)a1 + 16);
    if ((_DWORD)v4 == -1)
      break;
    v14 = &v13;
    ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v14);
    v5 = *(unsigned int *)(*(_QWORD *)a1 + 16);
    if ((_DWORD)v5 == -1)
      break;
    v14 = &v13;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v14);
    if ((result & 1) != 0)
      goto LABEL_8;
    if (v12 == -1)
      break;
    v14 = &v13;
    result = ((uint64_t (*)(char **, uint64_t *))off_1E33D2018[v12])(&v14, v11);
    if ((result & 1) != 0)
    {
LABEL_8:
      v6 = 1;
    }
    else
    {
      if (v12 == -1)
        break;
      v14 = &v13;
      v7 = ((uint64_t (*)(char **, uint64_t *))off_1E33D2028[v12])(&v14, v11);
      v8 = (*(_BYTE *)(v7 + 45) & 1) != 0 ? 0 : *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
      **(_QWORD **)(a1 + 8) = v8;
      if (v12 == -1)
        break;
      v14 = &v13;
      result = ((uint64_t (*)(char **, uint64_t *))off_1E33D2038[v12])(&v14, v11);
      v6 = 0;
      **(_DWORD **)(a1 + 16) = result;
    }
    if (v12 != -1)
      result = ((uint64_t (*)(char **, uint64_t *))off_1E33D2048[v12])(&v14, v11);
    if ((v6 & 1) == 0)
      return result;
  }
  v9 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::stripTrailingNewline(v9, v10);
}

uint64_t WebCore::stripTrailingNewline(uint64_t this, WTF::StringBuilder *a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *(_DWORD *)(this + 16);
  if (v2 < 0)
  {
    this = 268;
    __break(0xC471u);
    return this;
  }
  if (v2)
  {
    v3 = v2 - 1;
    v5 = *(_QWORD *)this;
    v4 = *(_QWORD *)(this + 8);
    v6 = v4;
    if (!v4)
    {
      v6 = *(_QWORD *)this;
      if (!v5)
        goto LABEL_11;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v4 = *(_QWORD *)this;
      v7 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 8) + 2 * v3);
      goto LABEL_9;
    }
    if (!v5)
LABEL_11:
      v5 = *(_QWORD *)(this + 8);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 8) + v3);
LABEL_9:
    if (v7 == 10)
      return WTF::StringBuilder::shrink((WTF::StringBuilder *)this);
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLTextFormControlElement::setMaxLength@<X0>(WTF::StringImpl *this@<X0>, WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;

  if ((a2 & 0x80000000) == 0 && ((v4 = *((_DWORD *)this + 44), v4 < 0) || v4 <= (int)a2))
  {
    this = WebCore::Element::setIntegralAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::maxlengthAttr, a2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::HTMLTimeElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33D2078;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLTitleElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)result = off_1E33D13C0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = v7;
  *(_BYTE *)(result + 120) = 0;
  *a3 = result;
  return result;
}

void WebCore::HTMLTitleElement::removedFromAncestor(WebCore::Element *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::Document *v6;

  WebCore::HTMLElement::removedFromAncestor((uint64_t)a1, a2, a3, a4, a5);
  v6 = *(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8);
  if (*((WebCore::Element **)v6 + 185) == a1)
    WebCore::Document::updateTitleElement(v6, a1);
}

void WebCore::HTMLTitleElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringBuilder *v12;
  __n128 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::Document *v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35[2];
  __int128 v36;
  char v37;
  WebCore::Node *v38[3];

  WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v17 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v17)
    goto LABEL_2;
  v18 = *(_DWORD *)(v17 + 24);
  *(_DWORD *)(v17 + 24) = v18 + 2;
  v19 = *a2;
  if ((v19 - 2) < 3)
  {
    v20 = *(_QWORD **)(v17 + 224);
    if (!v20)
      goto LABEL_26;
    v21 = 14;
    goto LABEL_63;
  }
  if (v19 == 8 || v19 == 5)
  {
    v20 = *(_QWORD **)(v17 + 224);
    if (v20)
    {
      v21 = 13;
LABEL_63:
      v32 = v17;
      (*(void (**)(void))(*v20 + 8 * v21))();
      v17 = v32;
      v18 = *(_DWORD *)(v32 + 24) - 2;
    }
  }
LABEL_26:
  if (v18)
  {
    *(_DWORD *)(v17 + 24) = v18;
  }
  else if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v17, v4);
  }
LABEL_2:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3446))
    WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged((unsigned int *)a1, *((_QWORD *)a2 + 2), *a2);
  LOBYTE(v34) = 0;
  LOBYTE(v35[1]) = 0;
  v6 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 264))(a1, &v34);
  if (LOBYTE(v35[1]))
  {
    v7 = v35[0];
    v35[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  if (v6)
  {
    v8 = *(_DWORD *)(v6 + 40);
  }
  else
  {
    v23 = *(_QWORD **)(a1 + 40);
    if (*v23)
      v24 = (*(_WORD *)(*v23 + 28) & 0x80) == 0;
    else
      v24 = 1;
    if (v24)
      v29 = v23[1] + 1328;
    else
      v29 = *v23 + 216;
    v25 = *(_QWORD *)v29;
    if (!*(_QWORD *)(*(_QWORD *)v29 + 32))
    {
      if (*(_QWORD *)(v25 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v25);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v25);
      v31 = *(_QWORD *)(v25 + 32);
      if (*(_DWORD *)(v31 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      {
        v33 = *(_QWORD *)(v25 + 32);
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v31 + 32), v30);
        v31 = v33;
      }
      if (*(_BYTE *)(v31 + 242)
        || *(_BYTE *)(v31 + 243)
        || *(_BYTE *)(v31 + 244)
        || *(_BYTE *)(v31 + 245)
        || *(_BYTE *)(v31 + 246)
        || *(_BYTE *)(v31 + 247)
        || *(_BYTE *)(v31 + 248))
      {
        *(_BYTE *)(v25 + 236) = 1;
      }
    }
    v26 = *(_QWORD *)(v25 + 32);
    v27 = *(_QWORD *)(a1 + 32);
    if (v27)
    {
      if ((*(_WORD *)(v27 + 28) & 8) != 0)
      {
        v27 = *(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL;
        if (v27)
        {
          if ((*(_BYTE *)(v27 + 45) & 2) != 0)
          {
            v27 = *(_QWORD *)(v27 + 32);
            if (v27)
              v27 = *(_QWORD *)(v27 + 8);
          }
          v27 += 80;
        }
      }
      else
      {
        v27 = 0;
      }
    }
    v34 = (WTF::StringImpl *)v27;
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v37 = 0;
    WebCore::Style::Resolver::styleForElement(v26, a1, (uint64_t)&v34, 0, v38);
    v8 = *((_DWORD *)v38[0] + 10);
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v38, v28);
  }
  WebCore::TextNodeTraversal::childTextContent((WebCore::TextNodeTraversal *)a1, v5, &v34);
  LOBYTE(v35[0]) = (v8 & 0x4000000) != 0;
  v14 = v34;
  v34 = 0;
  v15 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v14;
  if (!v15)
    goto LABEL_13;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_13:
    *(_BYTE *)(a1 + 120) = (v8 & 0x4000000) != 0;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v15, v9);
  v22 = v34;
  *(_BYTE *)(a1 + 120) = v35[0];
  v34 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v9);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_14:
  v16 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
  if (*((_QWORD *)v16 + 185) == a1)
    WebCore::Document::updateTitleFromTitleElement(v16, v13, (uint64_t)v9, v10, v11, v12);
}

WTF::StringImpl *WebCore::HTMLTitleElement::setText(WTF::StringImpl *result, uint64_t a2)
{
  unsigned int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v2 = *((unsigned __int16 *)result + 14) >> 12;
  if (v2 == 1)
    return WebCore::ContainerNode::stringReplaceAll(result, a2);
  if (v2 <= 0xB)
  {
    if (v2 == 11)
      return WebCore::ContainerNode::stringReplaceAll(result, a2);
    if (((1 << v2) & 0x19C) != 0)
    {
      result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)result + 120))(&v4);
      if (v6)
      {
        result = v5;
        v5 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void WebCore::HTMLTrackElement::~HTMLTrackElement(WebCore::HTMLTrackElement *this)
{
  void *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)(*((_QWORD *)this + 19) + 280) = 0;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 19) + 200, (_QWORD *)this + 17);
  v3 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 18);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 18) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::HTMLTrackElement *)((char *)this + 112), v2);
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLTrackElement::~HTMLTrackElement(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::HTMLTrackElement::~HTMLTrackElement(WebCore::HTMLTrackElement *this)
{
  WebCore::HTMLTrackElement::~HTMLTrackElement((WebCore::HTMLTrackElement *)((char *)this - 112));
}

{
  WebCore::HTMLTrackElement::~HTMLTrackElement((WebCore::HTMLTrackElement *)((char *)this - 136));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLTrackElement::~HTMLTrackElement((WebCore::HTMLTrackElement *)((char *)this - 112));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLTrackElement::~HTMLTrackElement((WebCore::HTMLTrackElement *)((char *)this - 136));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLTrackElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, (uint64_t)a3);
  if (*(_WORD **)(a1 + 32) == a3
    && (a3[14] & 8) != 0
    && (*(unsigned int (**)(_WORD *))(*(_QWORD *)a3 + 824))(a3))
  {
    (*(void (**)(_WORD *, uint64_t))(*(_QWORD *)a3 + 1528))(a3, a1);
    WebCore::HTMLTrackElement::scheduleLoad(a1);
  }
  return 0;
}

uint64_t WebCore::HTMLTrackElement::scheduleLoad(uint64_t this)
{
  uint64_t v1;
  _WORD *v2;
  void *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;

  if (!*(_BYTE *)(this + 160))
  {
    v1 = this;
    if ((*(_DWORD *)(*(_QWORD *)(this + 152) + 224) - 1) <= 1)
    {
      v2 = *(_WORD **)(this + 32);
      if (v2)
      {
        if ((v2[14] & 8) != 0)
        {
          this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 824))(*(_QWORD *)(this + 32));
          if ((_DWORD)this)
          {
            v4 = *((_DWORD *)v2 + 6);
            *((_DWORD *)v2 + 6) = v4 + 2;
            if (v4)
            {
              *((_DWORD *)v2 + 6) = v4;
            }
            else if ((v2[15] & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
            }
            *(_BYTE *)(v1 + 160) = 1;
            v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v5 = off_1E33D25E0;
            v5[1] = v1;
            v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v6 = &off_1E33D2630;
            v6[1] = v5;
            v7 = WTF::fastMalloc((WTF *)0x10);
            *(_DWORD *)v7 = 1;
            v8 = *(_DWORD *)(v1 + 24);
            *(_QWORD *)(v7 + 8) = v1;
            ++*(_QWORD *)(v1 + 128);
            *(_DWORD *)(v1 + 24) = v8 + 4;
            this = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)this = &off_1E33D2608;
            *(_QWORD *)(this + 8) = v1;
            *(_QWORD *)(this + 16) = v7;
            *(_QWORD *)(this + 24) = v6;
            v13 = this;
            v9 = *(_QWORD *)(v1 + 120);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 8);
              if (v10)
              {
                v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
                WebCore::EventLoopTaskGroup::queueTask(v11, 9, &v13);
                this = v13;
                v13 = 0;
                if (!this)
                  return this;
              }
              else
              {
                v13 = 0;
              }
              v12 = *(uint64_t (***)())this;
            }
            else
            {
              v13 = 0;
              v12 = &off_1E33D2608;
            }
            return v12[1]();
          }
        }
      }
    }
  }
  return this;
}

uint64_t *WebCore::HTMLTrackElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, _WORD *a3, WTF::String *a4, __n128 a5)
{
  uint64_t *result;

  result = WebCore::HTMLElement::removedFromAncestor(a1, a2, (uint64_t)a3, a4, a5);
  if (!*(_QWORD *)(a1 + 32) && (a3[14] & 8) != 0)
  {
    result = (uint64_t *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)a3 + 824))(a3);
    if ((_DWORD)result)
      return (uint64_t *)(*(uint64_t (**)(_WORD *, uint64_t))(*(_QWORD *)a3 + 1536))(a3, a1);
  }
  return result;
}

unsigned int *WebCore::HTMLTrackElement::didMoveToNewDocument(WebCore::HTMLTrackElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  return WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::HTMLTrackElement *)((char *)this + 112), a3);
}

void WebCore::HTMLTrackElement::attributeChanged(WebCore::HTMLTrackElement *this, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::AtomString *a4, int a5, __n128 a6)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t **v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v11 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v11 > 0x34B)
  {
    if (v11 == 846)
    {
      v16 = (uint64_t **)*((_QWORD *)this + 19);
      WebCore::TrackBase::setLanguage((WebCore::TrackBase *)v16, a4);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E33EBE48;
      v17[1] = v16;
      v19 = v17;
      WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v16 + 25, &v19);
      v18 = v19;
      v19 = 0;
      if (v18)
        a6.n128_f64[0] = (*(double (**)(_QWORD *))(*v18 + 8))(v18);
    }
    else if (v11 == 844)
    {
      WebCore::HTMLTrackElement::scheduleLoad((uint64_t)this);
    }
  }
  else if (v11 == 541)
  {
    v12 = *((_QWORD *)this + 19);
    v13 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v14 = *(_QWORD *)(v13 + 8);
      v15 = *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v14 = 0;
      v15 = 0x100000000;
    }
    WebCore::TextTrack::setKindKeywordIgnoringASCIICase(v12, v14, v15);
  }
  else if (v11 == 542)
  {
    (*(void (**)(_QWORD, WTF::AtomString *))(**((_QWORD **)this + 19) + 96))(*((_QWORD *)this + 19), a4);
  }
  WebCore::HTMLElement::attributeChanged((uint64_t)this, a2, a3, (WTF::StringImpl **)a4, a5, a6);
}

BOOL WebCore::HTMLTrackElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcAttr;
}

uint64_t (***WebCore::HTMLTrackElement::scheduleTask(uint64_t a1, uint64_t (**a2)()))()
{
  uint64_t (*v3)();
  uint64_t (**v4)();
  uint64_t v5;
  int v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (***v12)();

  v3 = *a2;
  *a2 = 0;
  v4 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
  *v4 = (uint64_t (*)())&off_1E33D2630;
  v4[1] = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = a1;
  ++*(_QWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 24) = v6 + 4;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E33D2608;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v5;
  result[3] = v4;
  v12 = result;
  v8 = *(_QWORD *)(a1 + 120);
  if (!v8)
  {
    v12 = 0;
    v11 = &off_1E33D2608;
    return (uint64_t (***)())v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 9, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = *result;
    return (uint64_t (***)())v11[1]();
  }
  return result;
}

uint64_t WebCore::HTMLTrackElement::didCompleteLoad(uint64_t a1, int a2)
{
  WTF *Ref;
  WTF *v5;
  uint64_t v6;
  WebCore::HTMLMediaElement *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::HTMLMediaElement *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Event *v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v27;
  _DWORD *v28;
  uint64_t result;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _BOOL4 v37;

  Ref = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v5 = Ref;
  *(_DWORD *)Ref = 1;
  *(_DWORD *)(a1 + 24) += 2;
  *((_QWORD *)Ref + 1) = a1;
  ++*(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 152);
  if (a2)
  {
    *(_DWORD *)(v6 + 236) = 2;
    v7 = *(WebCore::HTMLMediaElement **)(a1 + 32);
    if (v7)
    {
      if ((*((_WORD *)v7 + 14) & 8) != 0)
      {
        Ref = (WTF *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 824))(*(_QWORD *)(a1 + 32));
        if ((_DWORD)Ref)
        {
          *((_DWORD *)v7 + 6) += 2;
          v9 = *(_QWORD *)(a1 + 152);
          if (*(_DWORD *)(v9 + 236) != 1)
          {
            if (*(_DWORD *)(v9 + 224))
            {
              Ref = (WTF *)WebCore::HTMLMediaElement::ensureMediaControls(v7);
              if ((_DWORD)Ref)
              {
                Ref = *(WTF **)(*((_QWORD *)v7 + 202) + 24);
                if (Ref)
                  WebCore::MediaControlTextTrackContainerElement::updateDisplay(Ref);
              }
            }
          }
          v10 = *((_QWORD *)v7 + 142);
          if (v10)
          {
            v11 = *((unsigned int *)v7 + 345);
            if ((_DWORD)v11)
            {
              v12 = (_QWORD *)*((_QWORD *)v7 + 171);
              while (*v12 != v9)
              {
                ++v12;
                if (!--v11)
                  goto LABEL_32;
              }
              if (*(_DWORD *)(v9 + 236) != 1)
              {
                v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 72) + 560))(*(_QWORD *)(v10 + 72));
                WebCore::HTMLMediaElement::setReadyState((uint64_t)v7, v19);
              }
            }
          }
LABEL_32:
          if (*((_DWORD *)v7 + 6) == 2)
          {
            if ((*((_WORD *)v7 + 15) & 0x400) == 0)
              Ref = (WTF *)WebCore::Node::removedLastRef(v7, v8);
          }
          else
          {
            *((_DWORD *)v7 + 6) -= 2;
          }
        }
      }
    }
    v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
      v21 = WebCore::threadGlobalDataSlow(Ref);
    v22 = *(_QWORD *)(v21 + 40);
    if (!v22)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v21);
      v22 = *(_QWORD *)(v21 + 40);
    }
    v23 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
    *(_QWORD *)v23 = off_1E33A4B48;
    *(_QWORD *)(v23 + 8) = 0;
    v26 = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0x1E8200;
    v27 = *(_QWORD *)(v22 + 1104) != 0;
    *(_DWORD *)(v23 + 16) = 1;
    *(_DWORD *)(v23 + 20) = v26 | v27;
    v28 = *(_DWORD **)(v22 + 1104);
    if (v28)
LABEL_40:
      *v28 += 2;
  }
  else
  {
    *(_DWORD *)(v6 + 236) = 3;
    v13 = *(WebCore::HTMLMediaElement **)(a1 + 32);
    if (v13)
    {
      if ((*((_WORD *)v13 + 14) & 8) != 0)
      {
        Ref = (WTF *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 824))(*(_QWORD *)(a1 + 32));
        if ((_DWORD)Ref)
        {
          *((_DWORD *)v13 + 6) += 2;
          v15 = *(_QWORD *)(a1 + 152);
          if (*(_DWORD *)(v15 + 236) != 1)
          {
            if (*(_DWORD *)(v15 + 224))
            {
              Ref = (WTF *)WebCore::HTMLMediaElement::ensureMediaControls(v13);
              if ((_DWORD)Ref)
              {
                Ref = *(WTF **)(*((_QWORD *)v13 + 202) + 24);
                if (Ref)
                  WebCore::MediaControlTextTrackContainerElement::updateDisplay(Ref);
              }
            }
          }
          v16 = *((_QWORD *)v13 + 142);
          if (v16)
          {
            v17 = *((unsigned int *)v13 + 345);
            if ((_DWORD)v17)
            {
              v18 = (_QWORD *)*((_QWORD *)v13 + 171);
              while (*v18 != v15)
              {
                ++v18;
                if (!--v17)
                  goto LABEL_51;
              }
              if (*(_DWORD *)(v15 + 236) != 1)
              {
                v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 72) + 560))(*(_QWORD *)(v16 + 72));
                WebCore::HTMLMediaElement::setReadyState((uint64_t)v13, v32);
              }
            }
          }
LABEL_51:
          if (*((_DWORD *)v13 + 6) == 2)
          {
            if ((*((_WORD *)v13 + 15) & 0x400) == 0)
              Ref = (WTF *)WebCore::Node::removedLastRef(v13, v14);
          }
          else
          {
            *((_DWORD *)v13 + 6) -= 2;
          }
        }
      }
    }
    v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v33 || (v34 = *(_QWORD *)(v33 + 96)) == 0)
      v34 = WebCore::threadGlobalDataSlow(Ref);
    v35 = *(_QWORD *)(v34 + 40);
    if (!v35)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v34);
      v35 = *(_QWORD *)(v34 + 40);
    }
    v23 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
    *(_QWORD *)v23 = off_1E33A4B48;
    *(_QWORD *)(v23 + 8) = 0;
    v36 = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0x1E8200;
    v37 = *(_QWORD *)(v35 + 784) != 0;
    *(_DWORD *)(v23 + 16) = 1;
    *(_DWORD *)(v23 + 20) = v36 | v37;
    v28 = *(_DWORD **)(v35 + 784);
    if (v28)
      goto LABEL_40;
  }
  *(_QWORD *)(v23 + 24) = v28;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = 0;
  result = WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)a1, (WebCore::Node *)v23, v24);
  if (*(_DWORD *)(v23 + 16) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  else
    --*(_DWORD *)(v23 + 16);
  if (*(_DWORD *)v5 == 1)
  {
    v31 = *((_QWORD *)v5 + 1);
    --*(_QWORD *)(v31 + 128);
    *((_QWORD *)v5 + 1) = 0;
    if (*(_DWORD *)(v31 + 24) == 2)
    {
      if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31, v30);
    }
    else
    {
      *(_DWORD *)(v31 + 24) -= 2;
    }
    return WTF::fastFree(v5, v30);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return result;
}

uint64_t WebCore::HTMLTrackElement::mediaElementCrossOriginAttribute(WebCore::HTMLTrackElement *this)
{
  _WORD *v1;
  void *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (_WORD *)*((_QWORD *)this + 4);
  if (!v1
    || (v1[14] & 8) == 0
    || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 824))(*((_QWORD *)this + 4)))
  {
    return MEMORY[0x1E0CBF2F8];
  }
  v3 = *((_DWORD *)v1 + 6);
  *((_DWORD *)v1 + 6) = v3 + 2;
  v4 = *((_QWORD *)v1 + 13);
  if (!v4)
    goto LABEL_19;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 + 40);
    LODWORD(v7) = *(_DWORD *)(v4 + 52);
    if ((_DWORD)v7)
      goto LABEL_7;
LABEL_19:
    v8 = MEMORY[0x1E0CBF2F8];
    if (v3)
    {
LABEL_16:
      *((_DWORD *)v1 + 6) = v3;
      return v8;
    }
    goto LABEL_20;
  }
  v6 = v4 + 32;
  LODWORD(v7) = v5 >> 5;
  if (!(_DWORD)v7)
    goto LABEL_19;
LABEL_7:
  v7 = v7;
  v8 = v6 + 8;
  while (1)
  {
    v9 = *(_QWORD *)(v8 - 8);
    if (v9 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      break;
    }
    v8 += 16;
    if (!--v7)
    {
      v8 = MEMORY[0x1E0CBF2F8];
      break;
    }
  }
  if (v3)
    goto LABEL_16;
LABEL_20:
  if ((v1[15] & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  return v8;
}

uint64_t WebCore::HTMLTrackElement::textTrackModeChanged(uint64_t this, WebCore::TextTrack *a2)
{
  if (!*(_DWORD *)(*(_QWORD *)(this + 152) + 236))
    return WebCore::HTMLTrackElement::scheduleLoad(this);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLTrackElement::textTrackModeChanged(uint64_t this, WebCore::TextTrack *a2)
{
  if (!*(_DWORD *)(*(_QWORD *)(this + 16) + 236))
    return WebCore::HTMLTrackElement::scheduleLoad(this - 136);
  return this;
}

WebCore::EventNames **WebCore::HTMLTrackElement::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;

  v1 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v4 = (uint64_t)this;
  }
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v5 = *(_QWORD *)(v4 + 40);
  }
  v6 = (unint64_t)v1[2];
  if ((v6 & 0x1000000000000) != 0 && (v12 = v6 & 0xFFFFFFFFFFFFLL, v13 = *(unsigned int *)(v12 + 28), (_DWORD)v13))
  {
    v14 = *(_QWORD **)(v12 + 16);
    v15 = *(_QWORD *)(v5 + 784);
    v16 = 32 * v13;
    while (*v14 != v15)
    {
      v14 += 4;
      v16 -= 32;
      if (!v16)
        goto LABEL_7;
    }
    v11 = 1;
  }
  else
  {
LABEL_7:
    v7 = *(_QWORD *)(StatusReg + 736);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    {
      this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
      v8 = (uint64_t)this;
    }
    v9 = *(_QWORD *)(v8 + 40);
    if (!v9)
    {
      this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *(_QWORD *)(v8 + 40);
    }
    v10 = (unint64_t)v1[2];
    if ((v10 & 0x1000000000000) != 0
      && (v17 = v10 & 0xFFFFFFFFFFFFLL, v18 = *(unsigned int *)(v17 + 28), (_DWORD)v18))
    {
      v19 = *(uint64_t **)(v17 + 16);
      v20 = *(_QWORD *)(v9 + 1104);
      v21 = 32 * v18 - 32;
      do
      {
        v22 = *v19;
        v19 += 4;
        v11 = v22 == v20;
        v23 = v22 == v20 || v21 == 0;
        v21 -= 32;
      }
      while (!v23);
    }
    else
    {
      v11 = 0;
    }
  }
  *((_BYTE *)v1 + 161) = v11;
  return this;
}

BOOL WebCore::HTMLTrackElement::virtualHasPendingActivity(WebCore::HTMLTrackElement *this)
{
  return *((_BYTE *)this + 161) && *(_DWORD *)(*((_QWORD *)this + 19) + 236) == 1;
}

BOOL `non-virtual thunk to'WebCore::HTMLTrackElement::virtualHasPendingActivity(WebCore::HTMLTrackElement *this)
{
  return *((_BYTE *)this + 49) && *(_DWORD *)(*((_QWORD *)this + 5) + 236) == 1;
}

WTF::StringImpl *WebCore::HTMLUListElement::collectPresentationalHintsForAttribute(WebCore::HTMLUListElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  int *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::typeAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  WTF::AtomString::convertToASCIILowercase(a3);
  if ((MEMORY[0x19AEA53F4](v10, "disc", 4) & 1) != 0)
  {
    v6 = 272;
    goto LABEL_13;
  }
  if ((MEMORY[0x19AEA53F4](v10, "circle", 6) & 1) != 0)
  {
    v6 = 273;
    goto LABEL_13;
  }
  if ((MEMORY[0x19AEA53F4](v10, "round", 5) & 1) != 0)
  {
    v6 = 596;
    goto LABEL_13;
  }
  if ((MEMORY[0x19AEA53F4](v10, "square", 6) & 1) != 0)
  {
    v6 = 274;
    goto LABEL_13;
  }
  if (MEMORY[0x19AEA53F4](v10, "none", 4))
  {
    v6 = 6;
LABEL_13:
    v8 = &WebCore::staticCSSValuePool[4 * v6];
    v8[3088] += 2;
    v11 = v8 + 3088;
    WebCore::MutableStyleProperties::setProperty(a4, 157, &v11, 0);
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*v9 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v7);
      else
        *v9 -= 2;
    }
  }
  result = v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

BOOL WebCore::HTMLTextAreaElement::willRespondToMouseClickEventsWithEditability(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 160) & 0x18) == 0;
}

uint64_t WebCore::HTMLTextAreaElement::shouldUseInputMethod(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

BOOL WebCore::HTMLTextAreaElement::matchesReadWritePseudoClass(WebCore::HTMLTextAreaElement *this)
{
  if ((*((_BYTE *)this + 160) & 0x18) != 0)
    return 0;
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 14) + 288))((char *)this + 112))
    return (*((_BYTE *)this + 160) & 0x20) == 0;
  return 1;
}

uint64_t WebCore::HTMLTextAreaElement::isTextField(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

BOOL WebCore::HTMLTextAreaElement::isOptionalFormControl(WebCore::HTMLTextAreaElement *this)
{
  return (*((_BYTE *)this + 168) & 1) == 0;
}

uint64_t WebCore::HTMLTextAreaElement::isRequiredFormControl(WebCore::HTMLTextAreaElement *this)
{
  return *((_BYTE *)this + 168) & 1;
}

uint64_t WebCore::HTMLTextAreaElement::defaultTabIndex(WebCore::HTMLTextAreaElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLTextAreaElement::hasCustomFocusLogic(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLTextAreaElement::isLabelable(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLTextAreaElement::isInteractiveContent(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLTextAreaElement::supportsPlaceholder(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLTextAreaElement::placeholderElement(WebCore::HTMLTextAreaElement *this)
{
  return *((_QWORD *)this + 27);
}

uint64_t WebCore::HTMLTextAreaElement::dirAutoUsesValue(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

BOOL WebCore::HTMLTextAreaElement::isEmptyValue(WebCore::HTMLTextAreaElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  int v4;
  int v5;
  _BOOL8 v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 168) & 2) == 0)
  {
    WebCore::HTMLTextFormControlElement::innerTextValue(this, (WebCore *)&v10);
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v10;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    *((_BYTE *)this + 168) |= 2u;
    *(_WORD *)((char *)this + 233) = 257;
    WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(this);
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  if (!v3)
    return 1;
  v4 = *(_DWORD *)v3;
  v5 = *((_DWORD *)v3 + 1);
  *(_DWORD *)v3 += 2;
  v6 = v5 == 0;
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy(v3, a2);
  return v6;
}

uint64_t WebCore::HTMLTextAreaElement::shouldSaveAndRestoreFormControlState(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLTextAreaElement::supportsReadOnly(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLTextAreaElement::isEnumeratable(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::HTMLTextAreaElement::~HTMLTextAreaElement(WebCore::HTMLTextAreaElement *this, WTF::StringImpl *a2)
{
  WebCore::HTMLTextAreaElement::~HTMLTextAreaElement((WebCore::HTMLTextAreaElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLTextAreaElement::~HTMLTextAreaElement((WebCore::HTMLTextAreaElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLTextAreaElement::isEnumeratable(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLTextAreaElement::shouldSaveAndRestoreFormControlState(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

void WebCore::HTMLTitleElement::~HTMLTitleElement(WebCore::HTMLTitleElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::HTMLTrackElement::ref(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLTrackElement::deref(unsigned int *this, void *a2)
{
  if (this[6] == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLTrackElement::ref(uint64_t this)
{
  *(_DWORD *)(this - 88) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLTrackElement::deref(unsigned int *this, void *a2)
{
  if (*(this - 22) == 2)
  {
    if ((*((_WORD *)this - 41) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(this - 28), a2);
  }
  else
  {
    *(this - 22) -= 2;
  }
  return this;
}

void WebCore::HTMLUListElement::~HTMLUListElement(WebCore::HTMLUListElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::TemplateContentDocumentFragment::~TemplateContentDocumentFragment(WebCore::TemplateContentDocumentFragment *this, void *a2, uint64_t a3, WebCore::TreeScope *a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v8)
      {
        v11 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
        v5 = v11;
      }
      v9 = *(WTF **)(v5 + 16);
      if (v9)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v10 = v5;
        WTF::fastFree(v9, a2);
        v5 = v10;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::ContainerNode::~ContainerNode((uint64_t)this, a2, a3, a4);
}

{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v10 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v10)
      {
        v13 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v10));
        v5 = v13;
      }
      v11 = *(WTF **)(v5 + 16);
      if (v11)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v12 = v5;
        WTF::fastFree(v11, a2);
        v5 = v12;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::ContainerNode::~ContainerNode((uint64_t)this, a2, a3, a4);
  bmalloc::api::isoDeallocate(v8, v9);
}

uint64_t WebCore::TemplateContentDocumentFragment::isTemplateContent(WebCore::TemplateContentDocumentFragment *this)
{
  return 1;
}

void WebCore::HTMLTimeElement::~HTMLTimeElement(WebCore::HTMLTimeElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLTrackElement::HTMLTrackElement(WebCore::HTMLTrackElement *this, const WebCore::QualifiedName *a2, WebCore::Document *a3)
{
  WebCore::Document *v3;
  _DWORD *v5;
  uint64_t v6;
  WebCore::Document *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomString *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t result;
  uint64_t v32;
  WTF::StringImpl *v33[3];

  v3 = a3;
  *(_OWORD *)((char *)this + 8) = xmmword_1968BC9D0;
  *((_QWORD *)this + 3) = 0x181C00000002;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)a3 + 96;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  ++*((_DWORD *)a3 + 831);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++*v5;
  *((_QWORD *)this + 12) = v5;
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E33BC680;
  v6 = *((_QWORD *)a3 + 88);
  if (v6)
  {
    v7 = *(WebCore::Document **)(v6 + 8);
    if (v7)
      v3 = v7;
  }
  *((_QWORD *)this + 14) = &off_1E33A18C0;
  *((_QWORD *)this + 15) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::HTMLTrackElement *)((char *)this + 112), (WebCore::Document *)((char *)v3 + 192));
  *((_QWORD *)this + 14) = &off_1E33A0540;
  *((_QWORD *)this + 16) = 0;
  if (*((_BYTE *)v3 + 470))
  {
    result = 422;
    __break(0xC471u);
    return result;
  }
  v32 = (uint64_t)this + 112;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v3 + 40, &v32, (uint64_t)v33);
  *((_QWORD *)this + 17) = &unk_1E33D1E18;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)this = off_1E33D18B0;
  *((_QWORD *)this + 14) = &unk_1E33D1DC0;
  v8 = *((_QWORD *)this + 13);
  if (!v8)
    goto LABEL_18;
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) == 0)
  {
    v10 = v8 + 32;
    LODWORD(v11) = v9 >> 5;
    if ((_DWORD)v11)
      goto LABEL_10;
LABEL_18:
    v12 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_19;
  }
  v10 = *(_QWORD *)(v8 + 40);
  LODWORD(v11) = *(_DWORD *)(v8 + 52);
  if (!(_DWORD)v11)
    goto LABEL_18;
LABEL_10:
  v11 = v11;
  v12 = (WTF::AtomString *)(v10 + 8);
  while (1)
  {
    v13 = *((_QWORD *)v12 - 1);
    if (v13 == WebCore::HTMLNames::kindAttr
      || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::kindAttr + 24)
      && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::kindAttr + 32))
    {
      break;
    }
    v12 = (WTF::AtomString *)((char *)v12 + 16);
    if (!--v11)
    {
      v12 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_19:
  WTF::AtomString::convertToASCIILowercase(v12);
  v14 = *((_QWORD *)this + 13);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 4);
    LODWORD(v16) = v15 >> 5;
    if ((v15 & 1) != 0)
    {
      v17 = *(_QWORD *)(v14 + 40);
      LODWORD(v18) = *(_DWORD *)(v14 + 52);
      if ((_DWORD)v18)
        goto LABEL_22;
    }
    else
    {
      v17 = v14 + 32;
      LODWORD(v18) = v15 >> 5;
      if ((_DWORD)v16)
      {
LABEL_22:
        v18 = v18;
        v19 = (_DWORD **)(v17 + 8);
        while (1)
        {
          v20 = (uint64_t)*(v19 - 1);
          if (v20 == WebCore::HTMLNames::labelAttr
            || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 24)
            && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 32))
          {
            break;
          }
          v19 += 2;
          if (!--v18)
          {
            v19 = (_DWORD **)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
        if ((v15 & 1) == 0)
        {
LABEL_29:
          v21 = v14 + 32;
          if ((_DWORD)v16)
            goto LABEL_30;
LABEL_40:
          v22 = (_DWORD **)MEMORY[0x1E0CBF2F8];
          goto LABEL_41;
        }
LABEL_39:
        v21 = *(_QWORD *)(v14 + 40);
        LODWORD(v16) = *(_DWORD *)(v14 + 52);
        if ((_DWORD)v16)
        {
LABEL_30:
          v16 = v16;
          v22 = (_DWORD **)(v21 + 8);
          while (1)
          {
            v23 = (uint64_t)*(v22 - 1);
            if (v23 == WebCore::HTMLNames::srclangAttr
              || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::srclangAttr + 24)
              && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::srclangAttr + 32))
            {
              goto LABEL_41;
            }
            v22 += 2;
            if (!--v16)
            {
              v22 = (_DWORD **)MEMORY[0x1E0CBF2F8];
              goto LABEL_41;
            }
          }
        }
        goto LABEL_40;
      }
    }
    v19 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    if ((v15 & 1) == 0)
      goto LABEL_29;
    goto LABEL_39;
  }
  v19 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  v22 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_41:
  v24 = bmalloc::api::isoAllocate();
  v25 = v24;
  v26 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v27 = *(_QWORD *)(v26 + 704);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
      v26 = v28;
  }
  WebCore::TextTrack::TextTrack(v24, (WebCore::ScriptExecutionContext *)(v26 + 192), (const WTF::AtomString *)v33, MEMORY[0x1E0CBF3B8], v19, v22, 0);
  *(_QWORD *)v25 = &off_1E33EA600;
  *(_QWORD *)(v25 + 24) = &unk_1E33EA740;
  *(_QWORD *)(v25 + 120) = &unk_1E33EA780;
  *(_QWORD *)(v25 + 144) = &unk_1E33EA7F8;
  *(_QWORD *)(v25 + 264) = &unk_1E33EA850;
  *(_QWORD *)(v25 + 272) = 0;
  *(_QWORD *)(v25 + 288) = 0;
  *(_QWORD *)(v25 + 296) = 0;
  *(_QWORD *)(v25 + 280) = this;
  WTF::URL::invalidate((WTF::URL *)(v25 + 296));
  *(_BYTE *)(v25 + 336) = 0;
  *((_QWORD *)this + 19) = v25;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v25 + 144));
  v30 = v33[0];
  v33[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  *((_WORD *)this + 80) = 0;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*((_QWORD *)this + 19) + 200, (_QWORD *)this + 17, (uint64_t)v33);
  return (uint64_t)this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLTextFormControlElement::scheduleSelectionChangeEvent(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  *a1 = off_1E33D2588;
  v2 = a1[1];
  if (v2)
  {
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v6 = v2;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v6))*(_QWORD *)(v2 + 16) &= ~0x4000000000000uLL;
    v4 = a1[1];
    a1[1] = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLTextFormControlElement::scheduleSelectionChangeEvent(void)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E33D2588;
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v6 = v3;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v6))*(_QWORD *)(v3 + 16) &= ~0x4000000000000uLL;
    v4 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  return WTF::fastFree(a1, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLTextFormControlElement::scheduleSelectionChangeEvent(void)::$_0,void>::call(WebCore *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  uint64_t result;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v1[189] = 0;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8202;
  v8 = *(_QWORD *)(v4 + 1800) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 1800);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v1 + 48))(v1, v5);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLTrackElement::scheduleLoad(void)::$_0,void>::call(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WebCore::MediaControlTextTrackContainerElement *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  char v23;
  const WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  unsigned int v34;
  WTF::StringImpl *v35[5];
  WTF::StringImpl *v36[5];

  v5 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v5 + 160) = 1;
  v6 = *(_QWORD *)(v5 + 104);
  if (!v6)
    goto LABEL_26;
  v7 = *(_DWORD *)(v6 + 4);
  if ((v7 & 1) != 0)
  {
    v8 = *(uint64_t **)(v6 + 40);
    LODWORD(v9) = *(_DWORD *)(v6 + 52);
    if (!(_DWORD)v9)
    {
LABEL_26:
      result = (uint64_t)WebCore::TextTrack::removeAllCues(*(WTF **)(v5 + 152));
LABEL_27:
      *(_BYTE *)(v5 + 160) = 0;
      return result;
    }
  }
  else
  {
    v8 = (uint64_t *)(v6 + 32);
    LODWORD(v9) = v7 >> 5;
    if (!(_DWORD)v9)
      goto LABEL_26;
  }
  v9 = v9;
  while (1)
  {
    v10 = *v8;
    if (*v8 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v9)
      goto LABEL_26;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + 152) + 236) = 1;
  v11 = *(_QWORD *)(v5 + 32);
  if (v11
    && (*(_WORD *)(v11 + 28) & 8) != 0
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v11 + 824))(*(_QWORD *)(v5 + 32)))
  {
    *(_DWORD *)(v11 + 24) += 2;
    v13 = *(_QWORD *)(v5 + 152);
    if (*(_DWORD *)(v13 + 236) != 1)
    {
      if (*(_DWORD *)(v13 + 224))
      {
        if (WebCore::HTMLMediaElement::ensureMediaControls((WebCore::HTMLMediaElement *)v11))
        {
          v14 = *(WebCore::MediaControlTextTrackContainerElement **)(*(_QWORD *)(v11 + 1616) + 24);
          if (v14)
            WebCore::MediaControlTextTrackContainerElement::updateDisplay(v14);
        }
      }
    }
    v15 = *(_QWORD *)(v11 + 1136);
    if (v15)
    {
      v16 = *(unsigned int *)(v11 + 1380);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD **)(v11 + 1368);
        while (*v17 != v13)
        {
          ++v17;
          if (!--v16)
            goto LABEL_30;
        }
        if (*(_DWORD *)(v13 + 236) != 1)
        {
          v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 72) + 560))(*(_QWORD *)(v15 + 72));
          WebCore::HTMLMediaElement::setReadyState(v11, v19);
        }
      }
    }
LABEL_30:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  WebCore::Element::getNonEmptyURLAttribute((WebCore::Element *)v5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a4, a5, (WTF::URL *)v35, a2);
  v20 = *(_QWORD *)(v5 + 32);
  if (!v20
    || (*(_WORD *)(v20 + 28) & 8) == 0
    || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v20 + 824))(*(_QWORD *)(v5 + 32)))
  {
    v24 = *(const WTF::StringImpl ***)(v5 + 152);
    goto LABEL_42;
  }
  *(_DWORD *)(v20 + 24) += 2;
  if (!v35[0] || !*((_DWORD *)v35[0] + 1))
  {
    v23 = 0;
    goto LABEL_37;
  }
  v26 = *(uint64_t **)(v5 + 40);
  v27 = v26[1];
  *(_DWORD *)(v27 + 24) += 2;
  v28 = *v26;
  if (v28 && (*(_WORD *)(v28 + 28) & 0x80) != 0 && !*(_BYTE *)(v28 + 193))
  {
    v23 = 1;
    goto LABEL_58;
  }
  v29 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v27 + 192));
  v30 = v29;
  if (v29)
  {
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 + 1, v29));
  }
  v36[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v36);
  v23 = WebCore::ContentSecurityPolicy::allowResourceFromSource((uint64_t)v30, (WTF::URL *)v35, 0, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForMedia, 0, (WTF::URL *)v36);
  v32 = v36[0];
  v36[0] = 0;
  if (!v32)
    goto LABEL_55;
  if (*(_DWORD *)v32 != 2)
  {
    *(_DWORD *)v32 -= 2;
LABEL_55:
    if (!v30)
      goto LABEL_58;
    goto LABEL_56;
  }
  WTF::StringImpl::destroy(v32, v21);
  if (!v30)
    goto LABEL_58;
LABEL_56:
  if (atomic_load(v30))
  {
    do
      v34 = __ldaxr(v30);
    while (__stlxr(v34 - 1, v30));
LABEL_58:
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27, v21);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
LABEL_37:
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20, v21);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
    v24 = *(const WTF::StringImpl ***)(v5 + 152);
    if ((v23 & 1) != 0)
    {
      WebCore::LoadableTextTrack::scheduleLoad(v24, (const WTF::URL *)v35, v22);
      goto LABEL_43;
    }
LABEL_42:
    WebCore::TextTrack::removeAllCues((WTF *)v24);
    WebCore::HTMLTrackElement::didCompleteLoad(v5, 0);
LABEL_43:
    result = (uint64_t)v35[0];
    v35[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_27;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLTrackElement>(WebCore::HTMLTrackElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;

  *a1 = &off_1E33D2608;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 128);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLTrackElement>(WebCore::HTMLTrackElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E33D2608;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 128);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLTrackElement>(WebCore::HTMLTrackElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLTrackElement::scheduleTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33D2630;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLTrackElement::scheduleTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D2630;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLTrackElement::scheduleTask(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WebCore::HTMLVideoElement::create@<X0>(WebCore::HTMLVideoElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::Document *a3@<X2>, WebCore::HTMLMediaElement **a4@<X8>)
{
  int v4;
  WebCore::HTMLMediaElement *v8;
  WebCore::HTMLMediaElement *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  _QWORD *v12;
  WTF::AtomStringImpl *v13;
  WebCore::HTMLVideoElementPictureInPicture *v14;
  unsigned __int8 *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::HTMLVideoElementPictureInPicture *v19;
  uint64_t v20[3];
  const char *v21[2];

  v4 = (int)a3;
  v8 = (WebCore::HTMLMediaElement *)bmalloc::api::isoAllocate();
  v9 = WebCore::HTMLMediaElement::HTMLMediaElement(v8, this, a2, v4);
  v11 = (uint64_t *)((char *)v9 + 1856);
  *((_OWORD *)v9 + 116) = 0u;
  *(_QWORD *)v9 = off_1E33D3518;
  *((_QWORD *)v9 + 14) = &unk_1E33D3FF0;
  v12 = (_QWORD *)((char *)v9 + 112);
  *((_QWORD *)v9 + 17) = &unk_1E33D4048;
  *((_QWORD *)v9 + 18) = &unk_1E33D4180;
  *((_QWORD *)v9 + 20) = &unk_1E33D42A8;
  *((_QWORD *)v9 + 22) = &unk_1E33D42D0;
  *((_QWORD *)v9 + 24) = &off_1E33D3518[527];
  *((_QWORD *)v9 + 26) = &off_1E33D3518[534];
  *((_QWORD *)v9 + 28) = &off_1E33D3518[539];
  *((_QWORD *)v9 + 30) = &off_1E33D3518[549];
  *((_QWORD *)v9 + 32) = &off_1E33D3518[563];
  *((_QWORD *)v9 + 34) = &off_1E33D3518[573];
  *((_QWORD *)v9 + 36) = &off_1E33D3518[579];
  *((_QWORD *)v9 + 235) = 0;
  *((_QWORD *)v9 + 234) = 0;
  *(_DWORD *)((char *)v9 + 1887) = 0;
  *(_OWORD *)((char *)v9 + 1896) = 0u;
  *(_OWORD *)((char *)v9 + 1912) = 0u;
  *(_OWORD *)((char *)v9 + 1924) = 0u;
  v13 = *(WTF::AtomStringImpl **)(*((_QWORD *)a2 + 85) + 352);
  if (v13)
  {
    if ((*((_BYTE *)v13 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v13 += 2;
      *((_QWORD *)v8 + 234) = v13;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v13, v10);
      v18 = (WTF::StringImpl *)*((_QWORD *)v8 + 234);
      *((_QWORD *)v8 + 234) = v20[0];
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
  }
  *a4 = v8;
  v14 = (WebCore::HTMLVideoElementPictureInPicture *)bmalloc::api::isoAllocate();
  v19 = WebCore::HTMLVideoElementPictureInPicture::HTMLVideoElementPictureInPicture(v14, v8);
  v21[0] = "HTMLVideoElementPictureInPicture";
  v21[1] = (const char *)33;
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v11, v21, (unsigned __int8 **)&v19, (uint64_t)v20);
  v15 = (unsigned __int8 *)v19;
  v19 = 0;
  if (v15)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v15 + 8))(v15);
  return WebCore::ActiveDOMObject::suspendIfNeeded(v12);
}

_QWORD *WebCore::HTMLVideoElement::create@<X0>(WebCore::HTMLVideoElement *this@<X0>, WebCore::HTMLMediaElement **a2@<X8>)
{
  return WebCore::HTMLVideoElement::create((WebCore::HTMLVideoElement *)&WebCore::HTMLNames::videoTag, this, 0, a2);
}

BOOL WebCore::HTMLVideoElement::rendererIsNeeded(WebCore::HTMLVideoElement *this, const WebCore::RenderStyle *a2)
{
  return (*((_QWORD *)a2 + 2) & 0x17) != 18;
}

unint64_t WebCore::HTMLVideoElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6;
  unint64_t result;

  v6 = bmalloc::api::isoAllocate();
  result = WebCore::RenderVideo::RenderVideo(v6, a1, a2);
  *a3 = result;
  return result;
}

void WebCore::HTMLVideoElement::didAttachRenderers(WebCore::HTMLVideoElement *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  void *v9;
  WebCore::ImageLoader *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  int v21;
  unsigned int *v22;
  _BYTE v23[24];
  unsigned int **v24;

  WebCore::HTMLMediaElement::didAttachRenderers(this);
  if (WebCore::HTMLVideoElement::shouldDisplayPosterImage(this))
  {
    v2 = *((_QWORD *)this + 233);
    if (!v2)
    {
      v2 = WTF::fastMalloc((WTF *)0x88);
      *(_QWORD *)v2 = off_1E33F60F0;
      *(_QWORD *)(v2 + 8) = 0;
      v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      *(_QWORD *)(v2 + 16) = v3;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 32) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v2 + 40) = 0u;
      *(_OWORD *)(v2 + 56) = 0u;
      v6 = *(unsigned int **)(StatusReg + 736);
      if (!v6)
        v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      *(_QWORD *)(v2 + 72) = v6;
      *(_QWORD *)(v2 + 32) = off_1E31F7378;
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v8 = off_1E33F6510;
      v8[1] = WebCore::ImageLoader::timerFired;
      v8[2] = 0;
      v8[3] = v2;
      *(_QWORD *)(v2 + 80) = v8;
      *(_QWORD *)(v2 + 120) = 0;
      *(_OWORD *)(v2 + 104) = 0u;
      *(_OWORD *)(v2 + 88) = 0u;
      *(_BYTE *)(v2 + 128) = *(_BYTE *)(v2 + 128) & 0xC0 | 8;
      *(_BYTE *)(v2 + 129) = 0;
      *(_QWORD *)v2 = off_1E33BFBF0;
      v10 = (WebCore::ImageLoader *)*((_QWORD *)this + 233);
      *((_QWORD *)this + 233) = v2;
      if (v10)
      {
        WebCore::ImageLoader::~ImageLoader(v10, v9);
        WTF::fastFree(v11, v12);
        v2 = *((_QWORD *)this + 233);
      }
    }
    WebCore::ImageLoader::updateFromElement(v2, 0);
    v13 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
      }
      else
      {
        if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
          || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195C82318);
        }
        if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
        {
          __break(0xC471u);
          JUMPOUT(0x195C82338);
        }
        ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
        v14 = *(_QWORD *)(v13 + 224);
        ++*(_DWORD *)(v14 + 8);
        v15 = *(_QWORD *)(*((_QWORD *)this + 233) + 24);
        if (v15)
        {
          do
            v16 = __ldaxr((unsigned int *)v15);
          while (__stlxr(v16 + 1, (unsigned int *)v15));
          v22 = (unsigned int *)v15;
          v17 = *(_QWORD *)(v15 + 8);
          if (v17)
          {
            v24 = &v22;
            ++*(_DWORD *)(v17 + 548);
            v18 = *(_QWORD *)(v17 + 488);
            if (v18)
            {
              if (*(_QWORD *)(v18 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v17 + 464), (uint64_t *)&v24, (uint64_t)v23);
            }
          }
        }
        else
        {
          v22 = 0;
        }
        WebCore::RenderImageResource::setCachedImage((_QWORD *)v14, (uint64_t *)&v22);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v22, v19);
        v20 = *(_DWORD *)(v14 + 8);
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x195C82360);
        }
        *(_DWORD *)(v14 + 8) = v20 - 1;
        v21 = *(_DWORD *)(v13 + 16);
        if (v21)
        {
          *(_DWORD *)(v13 + 16) = v21 - 1;
          return;
        }
        __break(0xC471u);
      }
      JUMPOUT(0x195C822F8);
    }
  }
}

uint64_t WebCore::HTMLVideoElement::shouldDisplayPosterImage(WebCore::HTMLVideoElement *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v6;
  WTF::StringImpl *v7;

  if (((*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0x400000000) == 0)
    return 0;
  WebCore::HTMLVideoElement::posterImageURL(this, (WTF::URL *)&v7);
  result = (uint64_t)v7;
  if (v7)
  {
    v4 = *((_DWORD *)v7 + 1);
    v7 = 0;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
      if (v4)
      {
LABEL_6:
        if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            goto LABEL_19;
          if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
            || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195C82490);
          }
          if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
          {
LABEL_19:
            __break(0xC471u);
            JUMPOUT(0x195C82470);
          }
          v6 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0xE0);
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) & 1) != 0)
            return 0;
        }
        return 1;
      }
    }
    else
    {
      *(_DWORD *)result -= 2;
      if (v4)
        goto LABEL_6;
    }
    return 0;
  }
  return result;
}

unsigned __int8 *WebCore::HTMLVideoElement::computeAcceleratedRenderingStateAndUpdateMediaPlayer(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  uint64_t v7;
  int v9;
  WebCore::RenderView *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderLayerCompositor *v13;
  WebCore::RenderLayerCompositor *v14;
  WTF *v15;
  void *v16;

  v1 = *((_QWORD *)this + 142);
  if (!v1)
    return this;
  v2 = (uint64_t)this;
  v3 = *(unsigned __int8 **)v1;
  if (__ldaxr(*(unsigned __int8 **)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  ++*((_QWORD *)v3 + 1);
  v5 = __ldxr(v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_11:
  v6 = *(_DWORD *)(v2 + 1080);
  v7 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C8261CLL);
    }
    if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C8263CLL);
    }
    if (*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
    {
      __break(0xC471u);
      JUMPOUT(0x195C8265CLL);
    }
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 784))(*(_QWORD *)(v1 + 72)))
  {
    v9 = v6 != 0;
    if (!v6 && v7)
    {
      v10 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8)
                                    + 1944);
      v11 = *((_QWORD *)v10 + 50);
      if (!v11)
      {
        v12 = v1;
        v13 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v11 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v13, v10);
        v14 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v10 + 50);
        *((_QWORD *)v10 + 50) = v11;
        if (v14)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v14);
          WTF::fastFree(v15, v16);
          v11 = *((_QWORD *)v10 + 50);
        }
        v1 = v12;
      }
      v9 = *(_BYTE *)(v11 + 132) != 0;
    }
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int8 *)(v2 + 1888) != v9)
  {
    *(_BYTE *)(v2 + 1888) = v9;
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 792))(*(_QWORD *)(v1 + 72));
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v1);
}

WebCore::Node *WebCore::HTMLVideoElement::mediaPlayerRenderingModeChanged(WebCore::HTMLVideoElement *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Node *result;
  uint64_t v5;
  WebCore::Node *ElementSibling;
  WebCore::Element *v7;
  _QWORD v8[4];

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v8[0] = "HTMLMediaElement";
  v8[1] = 17;
  v8[2] = "mediaPlayerRenderingModeChanged";
  v8[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  WebCore::HTMLVideoElement::computeAcceleratedRenderingStateAndUpdateMediaPlayer((unsigned __int8 *)this);
  result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v5 = *((_QWORD *)this + 4);
    if (!v5 || (*(_WORD *)(v5 + 28) & 8) == 0 || (*(_BYTE *)(v5 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v7);
    }
  }
  return result;
}

WebCore::Node *`non-virtual thunk to'WebCore::HTMLVideoElement::mediaPlayerRenderingModeChanged(WebCore::HTMLVideoElement *this)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *result;
  uint64_t v6;
  WebCore::Node *ElementSibling;
  WebCore::Element *v8;
  _QWORD v9[4];

  v2 = (unsigned __int8 *)this - 176;
  v3 = *((_QWORD *)this + 206);
  v4 = *((_QWORD *)this + 207);
  v9[0] = "HTMLMediaElement";
  v9[1] = 17;
  v9[2] = "mediaPlayerRenderingModeChanged";
  v9[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  WebCore::HTMLVideoElement::computeAcceleratedRenderingStateAndUpdateMediaPlayer(v2);
  result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)v2, 3u, 1);
  if ((*((_BYTE *)this - 105) & 1) != 0)
  {
    v6 = *((_QWORD *)this - 18);
    if (!v6 || (*(_WORD *)(v6 + 28) & 8) == 0 || (*(_BYTE *)(v6 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)v2);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v8);
    }
  }
  return result;
}

BOOL WebCore::HTMLVideoElement::canShowWhileLocked(WebCore::HTMLVideoElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  WTF *v8;
  void *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (*(_DWORD *)v4)++;
  v6 = *(_BYTE *)(v4 + 449) != 0;
  if (v5)
  {
    *(_DWORD *)v4 = v5;
  }
  else
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

BOOL `non-virtual thunk to'WebCore::HTMLVideoElement::canShowWhileLocked(WebCore::HTMLVideoElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  WTF *v8;
  void *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (*(_DWORD *)v4)++;
  v6 = *(_BYTE *)(v4 + 449) != 0;
  if (v5)
  {
    *(_DWORD *)v4 = v5;
  }
  else
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

WTF::StringImpl *WebCore::HTMLVideoElement::collectPresentationalHintsForAttribute(WebCore::HTMLVideoElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *result;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unint64_t v34;
  unsigned int v35;
  double v36;
  char v37;
  char v38;
  double v39;
  char v40;
  char v41;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::widthAttr)
  {
    if (*(_QWORD *)a2 != WebCore::HTMLNames::heightAttr)
      return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
    v22 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v23 = *(unsigned __int16 **)(v22 + 8);
      v24 = *(unsigned int *)(v22 + 4) | ((unint64_t)((*(_DWORD *)(v22 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v23 = 0;
      v24 = 0x100000000;
    }
    WebCore::parseHTMLDimensionInternal((uint64_t)&v39, v23, v24, 0);
    if (v41)
    {
      if (v40)
        v25 = 6;
      else
        v25 = 3;
      WebCore::StyledElement::addPropertyToPresentationalHintStyle(v39, (uint64_t)this, a4, 393, v25);
    }
    v26 = *((_QWORD *)this + 13);
    if (v26)
    {
      v27 = *(_DWORD *)(v26 + 4);
      if ((v27 & 1) != 0)
      {
        v28 = *(_QWORD *)(v26 + 40);
        LODWORD(v29) = *(_DWORD *)(v26 + 52);
        if ((_DWORD)v29)
        {
LABEL_33:
          v29 = v29;
          v30 = (uint64_t *)(v28 + 8);
          while (1)
          {
            v31 = *(v30 - 1);
            if (v31 == WebCore::HTMLNames::widthAttr
              || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
              && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
            {
              break;
            }
            v30 += 2;
            if (!--v29)
            {
              v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_52:
          v12 = *v30;
          if (v12)
          {
            v35 = *(_DWORD *)(v12 + 16);
            v14 = *(unsigned __int16 **)(v12 + 8);
            v12 = *(unsigned int *)(v12 + 4);
            v15 = (unint64_t)((v35 >> 2) & 1) << 32;
          }
          else
          {
            v14 = 0;
            v15 = 0x100000000;
          }
          v32 = *(_QWORD *)a3;
          if (!*(_QWORD *)a3)
            goto LABEL_55;
          goto LABEL_43;
        }
      }
      else
      {
        v28 = v26 + 32;
        LODWORD(v29) = v27 >> 5;
        if ((_DWORD)v29)
          goto LABEL_33;
      }
    }
    v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_52;
  }
  v8 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v9 = *(unsigned __int16 **)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  WebCore::parseHTMLDimensionInternal((uint64_t)&v39, v9, v10, 0);
  if (v41)
  {
    if (v40)
      v11 = 6;
    else
      v11 = 3;
    WebCore::StyledElement::addPropertyToPresentationalHintStyle(v39, (uint64_t)this, a4, 450, v11);
  }
  v12 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v13 = *(_DWORD *)(v12 + 16);
    v14 = *(unsigned __int16 **)(v12 + 8);
    v12 = *(unsigned int *)(v12 + 4);
    v15 = (unint64_t)((v13 >> 2) & 1) << 32;
  }
  else
  {
    v14 = 0;
    v15 = 0x100000000;
  }
  v16 = *((_QWORD *)this + 13);
  if (!v16)
    goto LABEL_41;
  v17 = *(_DWORD *)(v16 + 4);
  if ((v17 & 1) == 0)
  {
    v18 = v16 + 32;
    LODWORD(v19) = v17 >> 5;
    if ((_DWORD)v19)
      goto LABEL_16;
LABEL_41:
    v20 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_42;
  }
  v18 = *(_QWORD *)(v16 + 40);
  LODWORD(v19) = *(_DWORD *)(v16 + 52);
  if (!(_DWORD)v19)
    goto LABEL_41;
LABEL_16:
  v19 = v19;
  v20 = (uint64_t *)(v18 + 8);
  while (1)
  {
    v21 = *(v20 - 1);
    if (v21 == WebCore::HTMLNames::heightAttr
      || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
      && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
    {
      break;
    }
    v20 += 2;
    if (!--v19)
    {
      v20 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_42:
  v32 = *v20;
  if (!v32)
  {
LABEL_55:
    v33 = 0;
    v34 = 0x100000000;
    goto LABEL_44;
  }
LABEL_43:
  v33 = *(unsigned __int16 **)(v32 + 8);
  v34 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
LABEL_44:
  result = (WTF::StringImpl *)WebCore::parseHTMLDimensionInternal((uint64_t)&v39, v14, v15 | v12, 0);
  if (v41)
  {
    if (v40)
    {
      result = (WTF::StringImpl *)WebCore::parseHTMLDimensionInternal((uint64_t)&v36, v33, v34, 0);
      if (v38)
      {
        if (v37)
          return (WTF::StringImpl *)WebCore::HTMLElement::addParsedWidthAndHeightToAspectRatioList(result, v39, v36, a4);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLVideoElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  BOOL v6;

  v2 = *a2;
  if (*a2 == WebCore::HTMLNames::widthAttr || v2 == WebCore::HTMLNames::heightAttr)
    return 1;
  v5 = *(unsigned __int16 *)(v2 + 10);
  result = 1;
  if (v5 > 504)
  {
    if (v5 == 949 || v5 == 505 || v5 == 947)
      return result;
    return 0;
  }
  v6 = (v5 - 411) > 0x20 || ((1 << (v5 + 101)) & 0x100200001) == 0;
  if (v6 && v5 != 286)
    return 0;
  return result;
}

void WebCore::HTMLVideoElement::attributeChanged(WebCore::HTMLVideoElement *this, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WebCore::MediaElementSession *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t StatusReg;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  WebCore::ImageLoader *v17;
  WTF *v18;
  void *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  int v26;
  int v27;
  unsigned int *v28;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::posterAttr)
  {
    if (!WebCore::HTMLVideoElement::shouldDisplayPosterImage(this))
    {
      v22 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
      if (!v22)
        return;
      if ((*(_BYTE *)(v22 + 45) & 2) != 0)
      {
        __break(0xC471u);
      }
      else
      {
        if ((*(_BYTE *)(v22 + 52) & 7) != 3 || (*(_BYTE *)(v22 + 53) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195C82F60);
        }
        if (*(_BYTE *)(v22 + 46) != 48)
        {
          __break(0xC471u);
          JUMPOUT(0x195C82F80);
        }
        ++*(_DWORD *)(v22 + 16);
        v24 = *(_QWORD *)(v22 + 224);
        ++*(_DWORD *)(v24 + 8);
        v28 = 0;
        WebCore::RenderImageResource::setCachedImage((_QWORD *)v24, (uint64_t *)&v28);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v28, v25);
        v26 = *(_DWORD *)(v24 + 8);
        if (!v26)
        {
          __break(0xC471u);
          JUMPOUT(0x195C82FA0);
        }
        *(_DWORD *)(v24 + 8) = v26 - 1;
        WebCore::RenderVideo::updatePlayer(v22);
        v27 = *(_DWORD *)(v22 + 16);
        if (v27)
        {
          *(_DWORD *)(v22 + 16) = v27 - 1;
          return;
        }
        __break(0xC471u);
      }
      JUMPOUT(0x195C82F40);
    }
    v10 = *((_QWORD *)this + 233);
    if (!v10)
    {
      v10 = WTF::fastMalloc((WTF *)0x88);
      *(_QWORD *)v10 = off_1E33F60F0;
      *(_QWORD *)(v10 + 8) = 0;
      v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      *(_QWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      v14 = *(unsigned int **)(StatusReg + 736);
      if (!v14)
        v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      *(_QWORD *)(v10 + 72) = v14;
      *(_QWORD *)(v10 + 32) = off_1E31F7378;
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v16 = off_1E33F6510;
      v16[1] = WebCore::ImageLoader::timerFired;
      v16[2] = 0;
      v16[3] = v10;
      *(_QWORD *)(v10 + 80) = v16;
      *(_QWORD *)(v10 + 120) = 0;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_BYTE *)(v10 + 128) = *(_BYTE *)(v10 + 128) & 0xC0 | 8;
      *(_BYTE *)(v10 + 129) = 0;
      *(_QWORD *)v10 = off_1E33BFBF0;
      v17 = (WebCore::ImageLoader *)*((_QWORD *)this + 233);
      *((_QWORD *)this + 233) = v10;
      if (v17)
      {
        WebCore::ImageLoader::~ImageLoader(v17, v9);
        WTF::fastFree(v18, v19);
        v10 = *((_QWORD *)this + 233);
      }
    }
    v20 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v20 += 2;
    v21 = *(WTF::StringImpl **)(v10 + 96);
    *(_QWORD *)(v10 + 96) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v21 -= 2;
    }
    WebCore::ImageLoader::updateFromElement(v10, 0);
  }
  else
  {
    WebCore::HTMLMediaElement::attributeChanged(this, a2, a3, a4, a5, a6);
    if (*(_QWORD *)a2 == WebCore::HTMLNames::webkitairplayAttr)
    {
      v8 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
      if (!v8)
      {
        WebCore::HTMLMediaElement::initializeMediaSession(this);
        v8 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
      }
      WebCore::MediaElementSession::setWirelessVideoPlaybackDisabled(v8, *((unsigned __int8 *)this + 1696));
    }
  }
}

uint64_t WebCore::HTMLVideoElement::supportsFullscreen(WebCore::HTMLVideoElement *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v12;
  void *v13;

  if (!*((_QWORD *)this + 142))
    return 0;
  if ((_DWORD)a2 == 2)
  {
    v4 = *((_QWORD *)this + 200);
    if (!v4)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v4 = *((_QWORD *)this + 200);
    }
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 40) + 8) + 680) + 664) & 0x1000000) == 0
      || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 240))(*(_QWORD *)(*((_QWORD *)this + 142) + 72)))
    {
      return 0;
    }
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return 0;
  ++*(_DWORD *)v8;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 248))(*(_QWORD *)(*((_QWORD *)this + 142) + 72)))
    goto LABEL_20;
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680);
  if (((*(unsigned int *)(v9 + 720) | ((unint64_t)*(unsigned __int8 *)(v9 + 724) << 32)) & 0x1000000000) == 0)
  {
LABEL_13:
    v10 = 1;
    goto LABEL_21;
  }
  if ((_DWORD)a2 == 1)
  {
    if ((*(_QWORD *)(v9 + 704) & 0x80000000000000) == 0)
      goto LABEL_20;
    if (((*(uint64_t (**)(_QWORD, WebCore::HTMLVideoElement *, _QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48)
                                                                                               + 16)
                                                                                 + 1176))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16), this, 0) & 1) != 0)goto LABEL_13;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 296))(*(_QWORD *)(*((_QWORD *)this + 142) + 72)))
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 1096))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16), a2);
    goto LABEL_21;
  }
LABEL_20:
  v10 = 0;
LABEL_21:
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::Page::~Page(v8);
    WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return v10;
}

uint64_t `non-virtual thunk to'WebCore::HTMLVideoElement::supportsFullscreen(WebCore::HTMLVideoElement *this, uint64_t a2)
{
  return WebCore::HTMLVideoElement::supportsFullscreen((WebCore::HTMLVideoElement *)((char *)this - 136), a2);
}

void WebCore::HTMLVideoElement::requestFullscreen(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD v12[4];
  unsigned int v13;

  v13 = 1;
  v5 = *(_QWORD *)(a1 + 1824);
  v6 = *(_QWORD *)(a1 + 1832);
  v12[0] = "HTMLMediaElement";
  v12[1] = 17;
  v12[2] = "webkitSetPresentationMode";
  v12[3] = v6;
  if (*(_BYTE *)(v5 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WebCore::HTMLVideoElement::VideoPresentationMode>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v12, ", mode = ", &v13);
  }
  if (((*(unsigned int *)(a1 + 1265) | ((unint64_t)*(unsigned __int16 *)(a1 + 1269) << 32)) & 0x200000000) == 0)
    WebCore::HTMLVideoElement::setPresentationMode((WebCore::HTMLVideoElement *)a1, (void *)v13);
  v8 = *a3;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 24);
    if (v9)
    {
      if (*(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
      {
        v10 = *(_QWORD *)(v8 + 32);
        if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
          v11 = 0;
        else
          v11 = *(uint64_t **)v10;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v8, v11, 0, (objc_class *)0xA);
        MEMORY[0x19AEA32A0](v12);
      }
    }
  }
}

uint64_t WebCore::HTMLVideoElement::videoWidth(WebCore::HTMLVideoElement *this)
{
  uint64_t v1;
  float v2;

  v1 = *((_QWORD *)this + 142);
  if (v1)
  {
    v2 = (*(float (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 288))(*(_QWORD *)(v1 + 72));
    if (v2 >= 4294967300.0)
      return 0xFFFFFFFFLL;
    if (v2 > 0.0)
      return v2;
  }
  return 0;
}

uint64_t WebCore::HTMLVideoElement::videoHeight(WebCore::HTMLVideoElement *this)
{
  uint64_t v1;
  float v2;

  v1 = *((_QWORD *)this + 142);
  if (v1)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 288))(*(_QWORD *)(v1 + 72));
    if (v2 >= 4294967300.0)
      return 0xFFFFFFFFLL;
    if (v2 > 0.0)
      return v2;
  }
  return 0;
}

_DWORD *WebCore::HTMLVideoElement::scheduleResizeEvent(WebCore::HTMLVideoElement *this, const WebCore::FloatSize *a2)
{
  WebCore::HTMLMediaElement *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v2 = this;
  *((_QWORD *)this + 235) = *(_QWORD *)a2;
  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v9[0] = "HTMLMediaElement";
  v9[1] = 17;
  v9[2] = "scheduleResizeEvent";
  v9[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    this = (WebCore::HTMLVideoElement *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9, a2);
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(this);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  return WebCore::HTMLMediaElement::scheduleEvent(v2, (const WTF::AtomString *)(v7 + 1696));
}

WebCore::HTMLMediaElement *WebCore::HTMLVideoElement::scheduleResizeEventIfSizeChanged(WebCore::HTMLMediaElement *this, const WebCore::FloatSize *a2)
{
  WebCore::HTMLMediaElement *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::HTMLMediaElement *v8;
  _QWORD v9[4];

  if (*((float *)this + 470) != *(float *)a2 || *((float *)this + 471) != *((float *)a2 + 1))
  {
    v3 = this;
    *((_QWORD *)this + 235) = *(_QWORD *)a2;
    v4 = *((_QWORD *)this + 228);
    v5 = *((_QWORD *)this + 229);
    v9[0] = "HTMLMediaElement";
    v9[1] = 17;
    v9[2] = "scheduleResizeEvent";
    v9[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      this = (WebCore::HTMLMediaElement *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9, a2);
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (this = *(WebCore::HTMLMediaElement **)(v6 + 96)) == 0)
      this = (WebCore::HTMLMediaElement *)WebCore::threadGlobalDataSlow(this);
    v7 = *((_QWORD *)this + 5);
    if (!v7)
    {
      v8 = this;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
      v7 = *((_QWORD *)v8 + 5);
    }
    return (WebCore::HTMLMediaElement *)WebCore::HTMLMediaElement::scheduleEvent(v3, (const WTF::AtomString *)(v7 + 1696));
  }
  return this;
}

BOOL WebCore::HTMLVideoElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::posterAttr || *a2 == WebCore::HTMLNames::srcAttr;
}

uint64_t *WebCore::HTMLVideoElement::imageSourceURL(WebCore::HTMLVideoElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::posterAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::posterAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::posterAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  if (!*v5)
    return (uint64_t *)((char *)this + 1872);
  v8 = *(unsigned __int8 **)(v7 + 8);
  v9 = *(unsigned int *)(v7 + 4);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((_DWORD)v9)
    {
      while (1)
      {
        v10 = *v8;
        v11 = v10 > 0x20;
        v12 = (1 << v10) & 0x100003600;
        if (v11 || v12 == 0)
          break;
        ++v8;
        if (!--v9)
          return (uint64_t *)((char *)this + 1872);
      }
      return v5;
    }
    return (uint64_t *)((char *)this + 1872);
  }
  if (!(_DWORD)v9)
    return (uint64_t *)((char *)this + 1872);
  v15 = 2 * v9;
  while (1)
  {
    v16 = *(unsigned __int16 *)v8;
    v11 = v16 > 0x20;
    v17 = (1 << v16) & 0x100003600;
    if (v11 || v17 == 0)
      break;
    v8 += 2;
    v15 -= 2;
    if (!v15)
      return (uint64_t *)((char *)this + 1872);
  }
  return v5;
}

WTF::StringImpl *WebCore::HTMLVideoElement::posterImageURL@<X0>(WebCore::HTMLVideoElement *this@<X0>, WTF::URL *a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)this + 13);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (uint64_t *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::posterAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::posterAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::posterAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v10 = *v8;
  if (*v8)
  {
    v11 = *(unsigned __int8 **)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4);
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
    {
      if ((_DWORD)v12)
      {
        do
        {
          v13 = *v11;
          v14 = v13 > 0x20;
          v15 = (1 << v13) & 0x100003600;
          if (v14 || v15 == 0)
            break;
          ++v11;
          --v12;
        }
        while (v12);
      }
    }
    else if ((_DWORD)v12)
    {
      v20 = 2 * v12;
      do
      {
        v21 = *(unsigned __int16 *)v11;
        v14 = v21 > 0x20;
        v22 = (1 << v21) & 0x100003600;
        if (v14 || v22 == 0)
          break;
        v11 += 2;
        v20 -= 2;
      }
      while (v20);
    }
  }
  WTF::String::trim();
  if (v24 && *((_DWORD *)v24 + 1))
  {
    v19 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v19 + 24) += 2;
    WebCore::Document::completeURL((WebCore::Document *)v19, &v24, v19 + 848, 0, a2);
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    WTF::URL::invalidate(a2);
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLVideoElement::mediaPlayerFirstVideoFrameAvailable(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v53;
  uint64_t v54;
  int v56;
  uint64_t v57;
  _BYTE *v58;
  size_t v59;
  uint64_t v60;
  WebCore::Node *ElementSibling;
  WebCore::Element *v62;
  _BYTE *v63;
  _BYTE *v64;
  unsigned __int128 v65;
  char v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[4];
  WTF::Logger *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  __int128 buf;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;

  v1 = this;
  v81 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 1824);
  v3 = *(_QWORD *)(this + 1832);
  v70[0] = "HTMLMediaElement";
  v70[1] = 17;
  v70[2] = "mediaPlayerFirstVideoFrameAvailable";
  v70[3] = v3;
  v4 = (unsigned int *)(this + 1265);
  v5 = *(unsigned int *)(this + 1265) | ((unint64_t)*(unsigned __int16 *)(this + 1269) << 32);
  if (!*(_BYTE *)(v2 + 12))
    goto LABEL_92;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v70);
  WTF::String::String((WTF::String *)&v73, "m_showPoster = ");
  if ((v5 & 0x400000000) != 0)
    v6 = 5;
  else
    v6 = 6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = (WTF::StringImpl *)buf;
  v9 = v74;
  if (!v74)
  {
    v10 = 0;
    if (v73)
      goto LABEL_7;
LABEL_121:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)v74 + 1);
  if (!v73)
    goto LABEL_121;
LABEL_7:
  v11 = *((_DWORD *)v73 + 1);
LABEL_8:
  v69 = v6;
  if ((_QWORD)buf)
    v12 = *(_DWORD *)(buf + 4);
  else
    v12 = 0;
  if ((v12 | v11) < 0)
    goto LABEL_150;
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  v15 = v13;
  if (v10 < 0)
    goto LABEL_150;
  if (v15)
    goto LABEL_150;
  v16 = (v10 + v14);
  if (__OFADD__(v10, v14))
    goto LABEL_150;
  if (v74 && (*((_BYTE *)v74 + 16) & 4) == 0)
  {
    v17 = 0;
LABEL_24:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v17, v74, (uint64_t)v73, buf, &v75);
    if (!v75)
      goto LABEL_151;
    v19 = v6;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    goto LABEL_28;
  }
  if (v73)
  {
    v18 = *((_DWORD *)v73 + 4);
    v17 = (v18 >> 2) & 1;
    if (!(_QWORD)buf || (v18 & 4) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  if ((_QWORD)buf)
  {
LABEL_23:
    v17 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
    goto LABEL_24;
  }
  if (!(_DWORD)v16)
  {
    v57 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_149;
  }
  if ((v16 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v16 + 20)), (v57 = buf) == 0))
  {
LABEL_150:
    v75 = 0;
    goto LABEL_151;
  }
  v58 = (_BYTE *)(buf + 20);
  *(_DWORD *)buf = 2;
  *(_DWORD *)(v57 + 4) = v16;
  *(_QWORD *)(v57 + 8) = v57 + 20;
  *(_DWORD *)(v57 + 16) = 4;
  if (v9)
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
    v59 = *((unsigned int *)v9 + 1);
    v19 = v69;
    if ((*((_BYTE *)v9 + 16) & 4) != 0)
    {
      if ((_DWORD)v59)
      {
        if ((_DWORD)v59 == 1)
          *v58 = *(_BYTE *)v7;
        else
          memcpy(v58, v7, v59);
      }
      v75 = (WTF::StringImpl *)v57;
      goto LABEL_28;
    }
    v63 = &v58[v59];
    if (v59 >= 0x10)
    {
      v64 = &v58[v59 & 0xFFFFFFF0];
      do
      {
        v65 = (unsigned __int128)vld2q_s8((const char *)v7);
        v7 = (WTF::StringImpl *)((char *)v7 + 32);
        *(_OWORD *)v58 = v65;
        v58 += 16;
      }
      while (v58 != v64);
      v58 = v64;
    }
    while (v58 != v63)
    {
      v66 = *(_BYTE *)v7;
      v7 = (WTF::StringImpl *)((char *)v7 + 2);
      *v58++ = v66;
    }
  }
LABEL_149:
  v75 = (WTF::StringImpl *)v57;
  v19 = v69;
LABEL_28:
  v20 = v73;
  v73 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v7);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v74;
  v74 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v7);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = qword_1ECE7C4A0;
  v23 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v71 ? (char *)v71 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v23 = (uint64_t)v71;
    v71 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (WebCore::LogMedia)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v67 = v4;
          v68 = v1;
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v32 = *(_QWORD *)v29 + 8 * v30;
            v33 = v19 - 1;
            do
            {
              v34 = *v31;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v70);
              v77 = 0;
              WTF::String::String((WTF::String *)&v78, "m_showPoster = ");
              v79 = 0;
              if (v33)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v35 = v71;
              }
              else
              {
                v48 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
                v35 = v48;
              }
              v80 = v35;
              v71 = 0;
              v72 = 0;
              v36 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v72) = 3;
              v71 = v36;
              v37 = HIDWORD(v72);
              *((_DWORD *)v36 + 4 * HIDWORD(v72)) = buf;
              v38 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v36 + 2 * v37 + 1) = v38;
              *((_DWORD *)v36 + 4 * (v37 + 1)) = v77;
              v39 = v78;
              if (v78)
                *(_DWORD *)v78 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 1) + 1) = v39;
              *((_DWORD *)v36 + 4 * (v37 + 2)) = v79;
              v40 = v80;
              if (v80)
                *(_DWORD *)v80 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 2) + 1) = v40;
              HIDWORD(v72) = v37 + 3;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, &WebCore::LogMedia, 0, &v71);
              v41 = v71;
              if (HIDWORD(v72))
              {
                v42 = 16 * HIDWORD(v72);
                v43 = (WTF::StringImpl **)((char *)v71 + 8);
                do
                {
                  v44 = *v43;
                  *v43 = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v44 -= 2;
                  }
                  v43 += 2;
                  v42 -= 16;
                }
                while (v42);
                v41 = v71;
              }
              if (v41)
              {
                v71 = 0;
                LODWORD(v72) = 0;
                WTF::fastFree(v41, v24);
              }
              v45 = v80;
              v80 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = v78;
              v78 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v47 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v32);
          }
          v49 = __ldxr(v26);
          if (v49 == 1)
          {
            v4 = v67;
            v1 = v68;
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
            v4 = v67;
            v1 = v68;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  this = (uint64_t)v75;
  v75 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)this -= 2;
  }
  v5 = *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
LABEL_92:
  if ((v5 & 0x400000000) != 0)
    return this;
  this = WebCore::Node::invalidateStyle(v1, 3u, 1);
  if ((*(_BYTE *)(v1 + 71) & 1) != 0)
  {
    v60 = *(_QWORD *)(v1 + 32);
    if (!v60 || (*(_WORD *)(v60 + 28) & 8) == 0 || (*(_BYTE *)(v60 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v1);
      this = (uint64_t)WebCore::invalidateForSiblingCombinators(ElementSibling, v62);
    }
  }
  v50 = *(_QWORD *)(v1 + 1136);
  if (v50)
  {
    v51 = *(unsigned __int8 **)v50;
    if (__ldaxr(*(unsigned __int8 **)v50))
    {
      __clrex();
    }
    else if (!__stxr(1u, v51))
    {
      goto LABEL_99;
    }
    MEMORY[0x19AEA534C](v51);
LABEL_99:
    ++*((_QWORD *)v51 + 1);
    v53 = __ldxr(v51);
    if (v53 == 1)
    {
      if (!__stlxr(0, v51))
        goto LABEL_104;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v51);
LABEL_104:
    *(_BYTE *)(v50 + 231) = 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v50 + 72) + 832))(*(_QWORD *)(v50 + 72));
    this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v50);
  }
  v54 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v54)
    return this;
  if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
LABEL_151:
    __break(0xC471u);
    JUMPOUT(0x195C83ED8);
  }
  if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C83EF8);
  }
  if (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
  {
    __break(0xC471u);
    JUMPOUT(0x195C83F18);
  }
  ++*(_DWORD *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  this = WebCore::RenderVideo::updatePlayer(v54);
  v56 = *(_DWORD *)(v54 + 16);
  if (!v56)
  {
    __break(0xC471u);
    JUMPOUT(0x195C83F38);
  }
  *(_DWORD *)(v54 + 16) = v56 - 1;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLVideoElement::mediaPlayerFirstVideoFrameAvailable(WebCore::HTMLVideoElement *this)
{
  return WebCore::HTMLVideoElement::mediaPlayerFirstVideoFrameAvailable((uint64_t)this - 176);
}

void WebCore::HTMLVideoElement::createBufferForPainting(uint64_t a1@<X0>, float *a2@<X1>, unsigned __int8 a3@<W2>, CFTypeRef *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, __n128 a7@<Q0>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t i;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t j;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (!v12)
    goto LABEL_21;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_21;
  v14 = *(_QWORD **)(v13 + 288);
  if (!v14)
    goto LABEL_21;
  for (i = v14[4]; i; i = v17[4])
  {
    v17 = *(_QWORD **)(i + 8);
    if (!v17)
      break;
    v14 = v17;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v14 + 72))(v14) & 1) == 0
    && !(*(unsigned int (**)(_QWORD *))(*v14 + 80))(v14))
  {
    goto LABEL_21;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
    v20 = *(_QWORD **)(v19 + 288);
  else
    v20 = 0;
  for (j = v20[4]; j; j = v22[4])
  {
    v22 = *(_QWORD **)(j + 8);
    if (!v22)
      break;
    v20 = v22;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v20 + 72))(v20) & 1) == 0)
    (*(void (**)(_QWORD *))(*v20 + 80))(v20);
  v23 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v20 + 720))(v20) + 24);
  if (v23 && (v24 = *(_QWORD *)(v23 + 8)) != 0)
    v25 = *(_QWORD *)(v24 + 48);
  else
LABEL_21:
    v25 = 0;
  a7.n128_u32[0] = 1.0;
  WebCore::ImageBuffer::create(a2, 8, a4, a5, a3, v25, a6, a7);
}

unsigned __int8 *WebCore::HTMLVideoElement::nativeImageForCurrentTime@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;

  v2 = *((_QWORD *)this + 142);
  if (v2)
  {
    v3 = *(unsigned __int8 **)v2;
    if (__ldaxr(*(unsigned __int8 **)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    ++*((_QWORD *)v3 + 1);
    v5 = __ldxr(v3);
    if (v5 == 1)
    {
      if (!__stlxr(0, v3))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_11:
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 672))(*(_QWORD *)(v2 + 72));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  *a2 = 0;
  return this;
}

uint64_t WebCore::HTMLVideoElement::webkitEnterFullscreen@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  v2 = this;
  v4 = *(_QWORD *)(this + 1824);
  v5 = *(_QWORD *)(this + 1832);
  v13 = "HTMLMediaElement";
  v14 = 17;
  v15 = "webkitEnterFullscreen";
  v16 = v5;
  if (*(_BYTE *)(v4 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v13);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1992);
  if (!v6)
  {
    if (*(_DWORD *)(v2 + 1080))
      goto LABEL_19;
LABEL_10:
    v11 = *(_QWORD *)(v2 + 1600);
    if (!v11)
    {
      WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v2);
      v11 = *(_QWORD *)(v2 + 1600);
    }
    if ((*(_BYTE *)(v11 + 88) & 4) != 0
      && !WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v11 + 80)
                                                                                             + 40)
                                                                                 + 8)))
    {
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 32) + 248))(*(_QWORD *)(v11 + 32));
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 32) + 256))(*(_QWORD *)(v11 + 32));
      v13 = "MediaElementSession";
      v14 = 20;
      v15 = "fullscreenPermitted";
      v16 = this;
      if (*(_BYTE *)(v12 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v13, "returning FALSE");
    }
    else
    {
      this = WebCore::HTMLVideoElement::supportsFullscreen((WebCore::HTMLVideoElement *)v2, 1);
      if ((_DWORD)this
        && ((*(unsigned int *)(v2 + 1265) | ((unint64_t)*(unsigned __int16 *)(v2 + 1269) << 32)) & 0x200000000) == 0)
      {
        this = (uint64_t)WebCore::HTMLMediaElement::enterFullscreen((WTF::StringImpl *)v2, 1u);
        goto LABEL_19;
      }
    }
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    return this;
  }
  v7 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v6 + 8) = v7 + 1;
  v8 = *(_QWORD *)(v6 + 56);
  if (v8)
    v9 = v8 == v2;
  else
    v9 = 0;
  if (v9)
  {
    if (v7 != -1)
    {
      *(_DWORD *)(v6 + 8) = v7;
      goto LABEL_19;
    }
LABEL_28:
    this = 286;
    __break(0xC471u);
    return this;
  }
  if (v7 == -1)
    goto LABEL_28;
  v10 = *(_DWORD *)(v2 + 1080);
  *(_DWORD *)(v6 + 8) = v7;
  if (!v10)
    goto LABEL_10;
LABEL_19:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return this;
}

void WebCore::HTMLVideoElement::webkitExitFullscreen(WebCore::HTMLVideoElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::HTMLVideoElement *v7;
  BOOL v8;
  int v9;
  _QWORD v10[4];

  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v10[0] = "HTMLMediaElement";
  v10[1] = 17;
  v10[2] = "webkitExitFullscreen";
  v10[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1992);
  if (!v5)
  {
    if (!*((_DWORD *)this + 270))
      return;
    goto LABEL_13;
  }
  v6 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v5 + 8) = v6 + 1;
  v7 = *(WebCore::HTMLVideoElement **)(v5 + 56);
  if (v7)
    v8 = v7 == this;
  else
    v8 = 0;
  if (!v8)
  {
    if (v6 != -1)
    {
      v9 = *((_DWORD *)this + 270);
      *(_DWORD *)(v5 + 8) = v6;
      if (!v9)
        return;
      goto LABEL_13;
    }
LABEL_18:
    __break(0xC471u);
    return;
  }
  if (v6 == -1)
    goto LABEL_18;
  *(_DWORD *)(v5 + 8) = v6;
LABEL_13:
  if (((*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0x200000000) == 0)
    WebCore::HTMLMediaElement::exitFullscreen(this, a2);
}

uint64_t WebCore::HTMLVideoElement::webkitSupportsFullscreen(WebCore::HTMLVideoElement *this)
{
  return WebCore::HTMLVideoElement::supportsFullscreen(this, 1);
}

uint64_t WebCore::HTMLVideoElement::webkitDisplayingFullscreen(WebCore::HTMLVideoElement *this)
{
  uint64_t v1;
  int v2;
  WebCore::HTMLVideoElement *v3;
  BOOL v4;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1992);
  if (!v1)
    return *((_DWORD *)this + 270) != 0;
  v2 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v2 + 1;
  v3 = *(WebCore::HTMLVideoElement **)(v1 + 56);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 0;
  result = v4 || *((_DWORD *)this + 270) != 0;
  if (v2 == -1)
  {
    result = 286;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(v1 + 8) = v2;
  }
  return result;
}

void WebCore::HTMLVideoElement::didMoveToNewDocument(WebCore::HTMLVideoElement *this, WebCore::Document *a2, WebCore::Document *a3)
{
  WebCore::ImageLoader *v6;

  v6 = (WebCore::ImageLoader *)*((_QWORD *)this + 233);
  if (v6)
    WebCore::ImageLoader::elementDidMoveToNewDocument(v6, a2);
  WebCore::HTMLMediaElement::didMoveToNewDocument(this, a2, a3);
}

uint64_t WebCore::HTMLVideoElement::webkitSupportsPresentationMode(WebCore::MediaElementSession **this, uint64_t a2)
{
  WebCore::HTMLVideoElement *v2;
  WebCore::MediaElementSession *v3;
  uint64_t result;

  v2 = (WebCore::HTMLVideoElement *)this;
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 != 2)
    {
      if ((_DWORD)a2 == 1)
        return WebCore::HTMLVideoElement::supportsFullscreen((WebCore::HTMLVideoElement *)this, a2);
      return 0;
    }
    if (HIBYTE(WebCore::isPictureInPictureSupported))
    {
      if (!(_BYTE)WebCore::isPictureInPictureSupported)
        return 0;
LABEL_13:
      this = (WebCore::MediaElementSession **)v2;
      a2 = 2;
      return WebCore::HTMLVideoElement::supportsFullscreen((WebCore::HTMLVideoElement *)this, a2);
    }
    result = -[objc_class isPictureInPictureSupported](getAVPictureInPictureControllerClass(), "isPictureInPictureSupported");
    if ((_DWORD)result)
      goto LABEL_13;
  }
  else
  {
    v3 = this[200];
    if (!v3)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(v2);
      v3 = (WebCore::MediaElementSession *)*((_QWORD *)v2 + 200);
    }
    return WebCore::MediaElementSession::requiresFullscreenForVideoPlayback(v3) ^ 1;
  }
  return result;
}

void WebCore::HTMLVideoElement::setPresentationMode(WebCore::HTMLVideoElement *this, void *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  WebCore::HTMLVideoElement *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  v2 = *((_DWORD *)this + 270);
  if (v2 == 4)
    v3 = 3;
  else
    v3 = 0;
  if ((v2 & 2) != 0)
    v4 = 2;
  else
    v4 = v3;
  if (v2 == 1)
    v5 = 1;
  else
    v5 = v4;
  if (v5 == (_DWORD)a2)
    return;
  if (a2 > 3)
    v7 = 0;
  else
    v7 = dword_1969F1200[(int)a2];
  v20 = v7;
  v8 = *((_QWORD *)this + 228);
  v9 = *((_QWORD *)this + 229);
  v21 = "HTMLMediaElement";
  v22 = 17;
  v23 = "setPresentationMode";
  v24 = v9;
  if (*(_BYTE *)(v8 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],unsigned int>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v21, ", videoFullscreenMode = ", &v20);
      v7 = v20;
    }
  }
  if (!v7)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1992);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = v14 + 1;
      v15 = *(WebCore::HTMLVideoElement **)(v13 + 56);
      if (v15)
        v16 = v15 == this;
      else
        v16 = 0;
      if (v16)
      {
        if (v14 != -1)
        {
          *(_DWORD *)(v13 + 8) = v14;
          if ((*((_DWORD *)this + 270) & 2) == 0)
            goto LABEL_38;
          goto LABEL_37;
        }
      }
      else if (v14 != -1)
      {
        v17 = *((_DWORD *)this + 270);
        *(_DWORD *)(v13 + 8) = v14;
        if (!v17)
          return;
        goto LABEL_36;
      }
      __break(0xC471u);
      return;
    }
    v17 = *((_DWORD *)this + 270);
    if (!v17)
      return;
LABEL_36:
    if ((v17 & 2) == 0)
    {
LABEL_38:
      WebCore::HTMLMediaElement::exitFullscreen(this, a2);
      return;
    }
LABEL_37:
    *((_BYTE *)this + 1890) = 1;
    goto LABEL_38;
  }
  v11 = *((_QWORD *)this + 200);
  if (!v11)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v11 = *((_QWORD *)this + 200);
  }
  if ((*(_BYTE *)(v11 + 88) & 4) != 0
    && !WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v11 + 80) + 40)
                                                                               + 8)))
  {
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 32) + 248))(*(_QWORD *)(v11 + 32));
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 32) + 256))(*(_QWORD *)(v11 + 32));
    v21 = "MediaElementSession";
    v22 = 20;
    v23 = "fullscreenPermitted";
    v24 = v19;
    if (*(_BYTE *)(v18 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v21, "returning FALSE");
  }
  else if (WebCore::HTMLVideoElement::supportsFullscreen(this, v20))
  {
    v12 = v20;
    if (v20 == 2)
    {
      *((_BYTE *)this + 1889) = 1;
    }
    else if (*((_DWORD *)this + 270) == 2)
    {
      *((_BYTE *)this + 1890) = 1;
    }
    WebCore::HTMLMediaElement::enterFullscreen(this, v12);
  }
}

unsigned __int8 *WebCore::HTMLVideoElement::didEnterFullscreenOrPictureInPicture(unsigned __int8 *this, const WebCore::FloatSize *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD v24[4];

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)this + 142);
  if (!v4)
    goto LABEL_14;
  v5 = *(unsigned __int8 **)v4;
  if (__ldaxr(*(unsigned __int8 **)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, v5))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
  if (!*(_BYTE *)(v4 + 267))
  {
    *(_BYTE *)(v4 + 267) = 1;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 72) + 1280))(*(_QWORD *)(v4 + 72), 1);
  }
  this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
LABEL_14:
  if (*(_BYTE *)(v3 + 1889))
  {
    *(_BYTE *)(v3 + 1889) = 0;
    v8 = *(unsigned int *)(v3 + 1265);
    v9 = (v8 | ((unint64_t)*(unsigned __int16 *)(v3 + 1269) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
    *(_DWORD *)(v3 + 1265) = v8;
    *(_WORD *)(v3 + 1269) = WORD2(v9);
    v10 = *(_QWORD *)(v3 + 1896);
    if (v10)
    {
      this = *(unsigned __int8 **)(v10 + 8);
      if (this)
      {
        v11 = floorf(*(float *)a2);
        v12 = 0x7FFFFFFFLL;
        v13 = 0x80000000;
        if (v11 > -2147500000.0)
          v13 = (int)v11;
        if (v11 < 2147500000.0)
          v12 = v13;
        v14 = floorf(*((float *)a2 + 1));
        v15 = 0x7FFFFFFF00000000;
        v16 = 0x8000000000000000;
        if (v14 > -2147500000.0)
          v16 = (unint64_t)(int)v14 << 32;
        if (v14 < 2147500000.0)
          v15 = v16;
        v24[0] = v15 | v12;
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _QWORD *))(*(_QWORD *)this + 16))(this, v24);
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v3 + 1890))
    {
      *(_BYTE *)(v3 + 1890) = 0;
      v17 = *(_QWORD *)(v3 + 1896);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    v19 = *(_QWORD *)(v3 + 1824);
    v20 = *(_QWORD *)(v3 + 1832);
    v24[0] = "HTMLMediaElement";
    v24[1] = 17;
    v24[2] = "didBecomeFullscreenElement";
    v24[3] = v20;
    v23 = *(_DWORD *)(v3 + 1080);
    if (*(_BYTE *)(v19 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],unsigned int>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v24, ", fullscreen mode = ", &v23);
    v21 = *(unsigned int *)(v3 + 1265);
    v22 = (v21 | ((unint64_t)*(unsigned __int16 *)(v3 + 1269) << 32)) & 0xFFFFFFFCFFFFFFFFLL;
    *(_DWORD *)(v3 + 1265) = v21;
    *(_WORD *)(v3 + 1269) = WORD2(v22);
    return (unsigned __int8 *)WebCore::HTMLMediaElement::scheduleUpdatePlayState((uint64_t (**)())v3);
  }
  return this;
}

unsigned __int8 *WebCore::HTMLVideoElement::didExitFullscreenOrPictureInPicture(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = this;
  v2 = *((_QWORD *)this + 142);
  if (!v2)
    goto LABEL_14;
  v3 = *(unsigned __int8 **)v2;
  if (__ldaxr(*(unsigned __int8 **)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  ++*((_QWORD *)v3 + 1);
  v5 = __ldxr(v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_11:
  if (*(_BYTE *)(v2 + 267))
  {
    *(_BYTE *)(v2 + 267) = 0;
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 72) + 1280))(*(_QWORD *)(v2 + 72), 0);
  }
  this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
LABEL_14:
  if (v1[1890])
  {
    v1[1890] = 0;
    v6 = *(unsigned int *)(v1 + 1265);
    v7 = (v6 | ((unint64_t)*(unsigned __int16 *)(v1 + 1269) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
    *(_DWORD *)(v1 + 1265) = v6;
    *(_WORD *)(v1 + 1269) = WORD2(v7);
    v8 = *((_QWORD *)v1 + 237);
    if (v8)
    {
      this = *(unsigned __int8 **)(v8 + 8);
      if (this)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 24))(this);
    }
  }
  else
  {
    v9 = *(unsigned int *)(v1 + 1265);
    v10 = (v9 | ((unint64_t)*(unsigned __int16 *)(v1 + 1269) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
    *(_DWORD *)(v1 + 1265) = v9;
    *(_WORD *)(v1 + 1269) = WORD2(v10);
  }
  return this;
}

uint64_t WebCore::HTMLVideoElement::isChangingPresentationMode(WebCore::HTMLVideoElement *this)
{
  return (*(unsigned __int16 *)((char *)this + 1269) >> 1) & 1;
}

unsigned __int8 *WebCore::HTMLVideoElement::setVideoFullscreenFrame(unsigned __int8 *this, const WebCore::FloatRect *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  float v9;
  float v10;
  int v11;
  int v12;
  int v13;
  _DWORD v14[2];

  v3 = this;
  *(_OWORD *)(this + 1112) = *(_OWORD *)a2;
  v4 = *((_QWORD *)this + 142);
  if (v4)
  {
    v5 = *(unsigned __int8 **)v4;
    if (__ldaxr(*(unsigned __int8 **)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_6:
    ++*((_QWORD *)v5 + 1);
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
    (*(void (**)(_QWORD, float, float, float, float))(**(_QWORD **)(v4 + 72) + 120))(*(_QWORD *)(v4 + 72), *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), *((float *)a2 + 3));
    this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  }
  if ((v3[1080] & 2) != 0 && !v3[1889] && !v3[1890])
  {
    v8 = *((_QWORD *)v3 + 237);
    if (v8)
    {
      this = *(unsigned __int8 **)(v8 + 8);
      if (this)
      {
        v9 = *((float *)a2 + 2);
        v10 = *((float *)a2 + 3);
        if (v9 > -2147500000.0)
          v11 = (int)v9;
        else
          v11 = 0x80000000;
        if (v9 < 2147500000.0)
          v12 = v11;
        else
          v12 = 0x7FFFFFFF;
        if (v10 > -2147500000.0)
          v13 = (int)v10;
        else
          v13 = 0x80000000;
        if (v10 >= 2147500000.0)
          v13 = 0x7FFFFFFF;
        v14[0] = v12;
        v14[1] = v13;
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _DWORD *))(*(_QWORD *)this + 32))(this, v14);
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLVideoElement::requestVideoFrameCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *v24;
  void *v25;
  WTF *v26;

  if (!*(_DWORD *)(a1 + 1916))
  {
    v4 = *(_QWORD *)(a1 + 1136);
    if (v4)
    {
      v5 = *(unsigned __int8 **)v4;
      if (__ldaxr(*(unsigned __int8 **)v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, v5))
      {
        goto LABEL_7;
      }
      MEMORY[0x19AEA534C](v5);
LABEL_7:
      ++*((_QWORD *)v5 + 1);
      v7 = __ldxr(v5);
      if (v7 == 1)
      {
        if (!__stlxr(0, v5))
          goto LABEL_12;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_12:
      *(_BYTE *)(v4 + 265) = 1;
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 1200))(*(_QWORD *)(v4 + 72));
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
    }
  }
  v8 = (*(_DWORD *)(a1 + 1936) + 1);
  *(_DWORD *)(a1 + 1936) = v8;
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = v8;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 8) = v10;
  *(_BYTE *)(v9 + 16) = 0;
  v26 = (WTF *)v9;
  v11 = *(unsigned int *)(a1 + 1916);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 1912))
  {
    v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 1904), v11 + 1, (unint64_t)&v26);
    v14 = *(unsigned int *)(a1 + 1916);
    v15 = *(_QWORD *)(a1 + 1904);
    v16 = *(_QWORD *)v12;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v15 + 8 * v14) = v16;
    v17 = v26;
    *(_DWORD *)(a1 + 1916) = v14 + 1;
    v26 = 0;
    if (v17)
    {
      v18 = (_DWORD *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v18)
      {
        if (v18[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        else
          --v18[4];
      }
      WTF::fastFree(v17, v13);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 1904) + 8 * v11) = v9;
    *(_DWORD *)(a1 + 1916) = v11 + 1;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 24);
      if (v21)
      {
        v22 = *(_DWORD **)(v21 + 8);
        if (v22)
        {
          ++*v22;
          WebCore::Page::scheduleRenderingUpdate((uint64_t)v22, 0x20000);
          if (*v22 == 1)
          {
            WebCore::Page::~Page((uint64_t)v22);
            WTF::fastFree(v24, v25);
          }
          else
          {
            --*v22;
          }
        }
      }
    }
  }
  return v8;
}

unsigned __int8 *WebCore::HTMLVideoElement::cancelVideoFrameCallback(unsigned __int8 *this, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  WTF *v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;

  v2 = (uint64_t)this;
  v3 = *((unsigned int *)this + 483);
  if (!(_DWORD)v3)
  {
LABEL_5:
    v6 = *((unsigned int *)this + 479);
    if (!(_DWORD)v6)
      return this;
    v7 = (_QWORD *)*((_QWORD *)this + 238);
    for (i = v7 + 1; ; ++i)
    {
      v9 = (WTF *)*v7;
      if (*(_DWORD *)*v7 == (_DWORD)a2)
        break;
      ++v7;
      if (!--v6)
        return this;
    }
    *v7 = 0;
    v10 = (_DWORD *)*((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = 0;
    if (v10)
    {
      if (v10[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[4];
    }
    WTF::fastFree(v9, a2);
    this = (unsigned __int8 *)memmove(v7, v7 + 1, *(_QWORD *)(v2 + 1904) + 8 * *(unsigned int *)(v2 + 1916) - (_QWORD)i);
    v11 = *(_DWORD *)(v2 + 1916) - 1;
    *(_DWORD *)(v2 + 1916) = v11;
    if (v11)
      return this;
    v12 = *(_QWORD *)(v2 + 1136);
    if (!v12)
      return this;
    v13 = *(unsigned __int8 **)v12;
    if (__ldaxr(*(unsigned __int8 **)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_22;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_22:
    ++*((_QWORD *)v13 + 1);
    v15 = __ldxr(v13);
    if (v15 == 1)
    {
      if (!__stlxr(0, v13))
        goto LABEL_27;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_27:
    *(_BYTE *)(v12 + 265) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 72) + 1208))(*(_QWORD *)(v12 + 72));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v12);
  }
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 240) + 8 * v4);
    if (*(_DWORD *)v5 == (_DWORD)a2)
      break;
    if (v3 == ++v4)
      goto LABEL_5;
  }
  if (v4 >= v3)
    __break(0xC471u);
  else
    *(_BYTE *)(v5 + 16) = 1;
  return this;
}

unsigned int *WebCore::HTMLVideoElement::stop(WebCore::HTMLVideoElement *this, void *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  _DWORD *v13;
  WTF *v14;

  if (*((_DWORD *)this + 478))
  {
    v3 = *((unsigned int *)this + 479);
    if ((_DWORD)v3)
    {
      v4 = (WTF **)*((_QWORD *)this + 238);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          v7 = (_DWORD *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          if (v7)
          {
            if (v7[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
            else
              --v7[4];
          }
          WTF::fastFree(v6, a2);
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)this + 479) = 0;
    }
    v8 = (WTF *)*((_QWORD *)this + 238);
    if (v8)
    {
      *((_QWORD *)this + 238) = 0;
      *((_DWORD *)this + 478) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  if (*((_DWORD *)this + 482))
  {
    v9 = *((unsigned int *)this + 483);
    if ((_DWORD)v9)
    {
      v10 = (WTF **)*((_QWORD *)this + 240);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          v13 = (_DWORD *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v13)
          {
            if (v13[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
            else
              --v13[4];
          }
          WTF::fastFree(v12, a2);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
      *((_DWORD *)this + 483) = 0;
    }
    v14 = (WTF *)*((_QWORD *)this + 240);
    if (v14)
    {
      *((_QWORD *)this + 240) = 0;
      *((_DWORD *)this + 482) = 0;
      WTF::fastFree(v14, a2);
    }
  }
  return WebCore::HTMLMediaElement::stop(this, a2);
}

unsigned int *`non-virtual thunk to'WebCore::HTMLVideoElement::stop(WebCore::HTMLVideoElement *this, void *a2)
{
  return WebCore::HTMLVideoElement::stop((WebCore::HTMLVideoElement *)((char *)this - 112), a2);
}

unsigned int *WebCore::HTMLVideoElement::serviceRequestVideoFrameCallbacks(unsigned int *result, double a2)
{
  uint64_t v2;
  unsigned int *v3;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  bmalloc::api *v24;
  void *v25;
  float64x2_t v26[3];
  double v27;
  char v28;
  double v29;
  char v30;
  char v31;

  v2 = *((_QWORD *)result + 142);
  if (v2)
  {
    v3 = result;
    if ((int)result[226] >= 2)
    {
      result = (unsigned int *)(*(_QWORD *(**)(float64x2_t *__return_ptr))(**(_QWORD **)(v2 + 72) + 1192))(v26);
      if (v31)
      {
        result = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 696);
        if (result)
        {
          result = (unsigned int *)WebCore::LocalDOMWindow::performance((WebCore::LocalDOMWindow *)result);
          v6 = result[4];
          result[4] = v6 + 1;
          v7 = *((uint64_t *)result + 21);
          v26[0] = vmulq_f64(vmulq_n_f64(vrndmq_f64(vdivq_f64(vsubq_f64(v26[0], (float64x2_t)vdupq_lane_s64(v7, 0)), (float64x2_t)vdupq_lane_s64(WebCore::timePrecision, 0))), *(double *)&WebCore::timePrecision), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
          if (v28)
          {
            v27 = *(double *)&WebCore::timePrecision
                * floor((v27 - *(double *)&v7) / *(double *)&WebCore::timePrecision)
                * 1000.0;
            v28 = 1;
          }
          if (v30)
          {
            v29 = *(double *)&WebCore::timePrecision
                * floor((v29 - *(double *)&v7) / *(double *)&WebCore::timePrecision)
                * 1000.0;
            v30 = 1;
          }
          if (v6)
          {
            result[4] = v6;
          }
          else
          {
            WebCore::Performance::~Performance((WebCore::Performance *)result, v5);
            result = (unsigned int *)bmalloc::api::isoDeallocate(v24, v25);
          }
          v3[6] += 2;
          v8 = *((_QWORD *)v3 + 238);
          *((_QWORD *)v3 + 238) = *((_QWORD *)v3 + 240);
          *((_QWORD *)v3 + 240) = v8;
          v9 = v3[478];
          v10 = v3[479];
          v11 = *((_QWORD *)v3 + 241);
          v3[482] = v9;
          *((_QWORD *)v3 + 239) = v11;
          v3[483] = v10;
          if ((_DWORD)v10)
          {
            v12 = round(a2 * 1000.0);
            v13 = 8 * v10;
            while (1)
            {
              if (!*(_BYTE *)(*(_QWORD *)v8 + 16))
              {
                v14 = *(_DWORD **)(*(_QWORD *)v8 + 8);
                ++v14[4];
                if (!v31)
                {
                  __break(1u);
                  return result;
                }
                result = (unsigned int *)(*(uint64_t (**)(_DWORD *, float64x2_t *, double))(*(_QWORD *)v14 + 40))(v14, v26, v12);
                if (v14[4] == 1)
                  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
                else
                  --v14[4];
                *(_BYTE *)(*(_QWORD *)v8 + 16) = 1;
              }
              v8 += 8;
              v13 -= 8;
              if (!v13)
              {
                v9 = v3[482];
                break;
              }
            }
          }
          if (v9)
          {
            v15 = v3[483];
            v16 = (WTF *)*((_QWORD *)v3 + 240);
            if ((_DWORD)v15)
            {
              v17 = 8 * v15;
              do
              {
                v18 = *(WTF **)v16;
                *(_QWORD *)v16 = 0;
                if (v18)
                {
                  v19 = (_DWORD *)*((_QWORD *)v18 + 1);
                  *((_QWORD *)v18 + 1) = 0;
                  if (v19)
                  {
                    if (v19[4] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
                    else
                      --v19[4];
                  }
                  result = (unsigned int *)WTF::fastFree(v18, v5);
                }
                v16 = (WTF *)((char *)v16 + 8);
                v17 -= 8;
              }
              while (v17);
              v3[483] = 0;
              v16 = (WTF *)*((_QWORD *)v3 + 240);
            }
            if (v16)
            {
              *((_QWORD *)v3 + 240) = 0;
              v3[482] = 0;
              result = (unsigned int *)WTF::fastFree(v16, v5);
            }
          }
          if (v3[479])
            goto LABEL_46;
          v20 = *((_QWORD *)v3 + 142);
          if (!v20)
            goto LABEL_46;
          v21 = *(unsigned __int8 **)v20;
          if (__ldaxr(*(unsigned __int8 **)v20))
          {
            __clrex();
          }
          else if (!__stxr(1u, v21))
          {
            goto LABEL_40;
          }
          MEMORY[0x19AEA534C](v21);
LABEL_40:
          ++*((_QWORD *)v21 + 1);
          v23 = __ldxr(v21);
          if (v23 == 1)
          {
            if (!__stlxr(0, v21))
              goto LABEL_45;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_45:
          *(_BYTE *)(v20 + 265) = 0;
          (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 72) + 1208))(*(_QWORD *)(v20 + 72));
          result = (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v20);
LABEL_46:
          if (v3[6] == 2)
          {
            if ((*((_WORD *)v3 + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
          }
          else
          {
            v3[6] -= 2;
          }
        }
      }
    }
  }
  return result;
}

WebCore::Node *WebCore::HTMLVideoElement::mediaPlayerEngineUpdated(WebCore::HTMLVideoElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *result;
  uint64_t v10;
  WebCore::Node *ElementSibling;
  WebCore::Element *v12;
  _QWORD v13[4];

  WebCore::HTMLMediaElement::mediaPlayerEngineUpdated(this, a2);
  if (*((_DWORD *)this + 479))
  {
    v3 = *((_QWORD *)this + 142);
    if (v3)
    {
      v4 = *(unsigned __int8 **)v3;
      if (__ldaxr(*(unsigned __int8 **)v3))
      {
        __clrex();
      }
      else if (!__stxr(1u, v4))
      {
        goto LABEL_7;
      }
      MEMORY[0x19AEA534C](v4);
LABEL_7:
      ++*((_QWORD *)v4 + 1);
      v6 = __ldxr(v4);
      if (v6 == 1)
      {
        if (!__stlxr(0, v4))
          goto LABEL_12;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_12:
      *(_BYTE *)(v3 + 265) = 1;
      (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 1200))(*(_QWORD *)(v3 + 72));
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
    }
  }
  v7 = *((_QWORD *)this + 228);
  v8 = *((_QWORD *)this + 229);
  v13[0] = "HTMLMediaElement";
  v13[1] = 17;
  v13[2] = "mediaPlayerRenderingModeChanged";
  v13[3] = v8;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  WebCore::HTMLVideoElement::computeAcceleratedRenderingStateAndUpdateMediaPlayer((unsigned __int8 *)this);
  result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
  if ((*((_BYTE *)this + 71) & 1) != 0)
  {
    v10 = *((_QWORD *)this + 4);
    if (!v10 || (*(_WORD *)(v10 + 28) & 8) == 0 || (*(_BYTE *)(v10 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
      return WebCore::invalidateForSiblingCombinators(ElementSibling, v12);
    }
  }
  return result;
}

WebCore::Node *`non-virtual thunk to'WebCore::HTMLVideoElement::mediaPlayerEngineUpdated(WebCore::HTMLVideoElement *this, WTF::StringImpl *a2)
{
  return WebCore::HTMLVideoElement::mediaPlayerEngineUpdated((WebCore::HTMLVideoElement *)((char *)this - 176), a2);
}

unsigned __int8 *WebCore::HTMLVideoElement::setVideoFullscreenStandby(unsigned __int8 *this, int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  WTF *v21;
  void *v22;
  unsigned __int8 *v23;

  if ((this[1084] != 0) == a2)
    return this;
  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return this;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    return this;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return this;
  v7 = a2;
  this = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 16) + 1104))(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16));
  if (!(_DWORD)this)
    return this;
  v2[1084] = v7;
  v8 = *((_QWORD *)v2 + 142);
  if (v8)
  {
    v9 = *(unsigned __int8 **)v8;
    if (__ldaxr(*(unsigned __int8 **)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_12:
    ++*((_QWORD *)v9 + 1);
    v11 = __ldxr(v9);
    if (v11 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_17:
    (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 144))(*(_QWORD *)(v8 + 72));
    this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
  }
  if (!*((_DWORD *)v2 + 270))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 5) + 8) + 528);
    if (v2[1084])
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 24) + 8);
      ++*(_DWORD *)v13;
      this = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, unsigned __int8 *, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v13 + 48) + 16) + 1120))(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 16), v2, 0, 1);
      v14 = *(_DWORD *)v13 - 1;
      if (*(_DWORD *)v13 == 1)
      {
        WebCore::Page::~Page(v13);
        return (unsigned __int8 *)WTF::fastFree(v15, v16);
      }
    }
    else
    {
      if (v12 && (v17 = *(_QWORD *)(v12 + 8)) != 0 && (v18 = *(_QWORD *)(v17 + 24)) != 0)
      {
        v13 = *(_QWORD *)(v18 + 8);
        if (v13)
          ++*(_DWORD *)v13;
      }
      else
      {
        v13 = 0;
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16);
      *((_DWORD *)v2 + 6) += 2;
      v20 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v20 = &off_1E33D5078;
      *((_QWORD *)v20 + 1) = v2;
      *((_QWORD *)v20 + 2) = v2;
      v23 = v20;
      (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 **))(*(_QWORD *)v19 + 1152))(v19, v2, &v23);
      this = v23;
      v23 = 0;
      if (this)
        this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
      v14 = *(_DWORD *)v13 - 1;
      if (*(_DWORD *)v13 == 1)
      {
        WebCore::Page::~Page(v13);
        return (unsigned __int8 *)WTF::fastFree(v21, v22);
      }
    }
    *(_DWORD *)v13 = v14;
  }
  return this;
}

uint64_t WebCore::HTMLWBRElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33D2678;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLWBRElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  __int16 v7;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::wbrTag + 24))
    v7 = 258;
  else
    v7 = 2;
  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 17, a1, a2, 8, v7);
  *(_QWORD *)result = off_1E34299B8;
  *(_BYTE *)(result + 152) = 0;
  *(_BYTE *)(result + 156) = 0;
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::HiddenInputType::saveFormControlState@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if ((*(_WORD *)(v4 + 232) & 0x80) == 0)
    {
LABEL_3:
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      return this;
    }
  }
  else
  {
    if ((MEMORY[0xE8] & 0x80) == 0)
      goto LABEL_3;
    v4 = 0;
  }
  v5 = *(_DWORD **)(v4 + 240);
  if (v5[3] != 64)
  {
    v6 = *(WTF::StringImpl **)(v4 + 216);
    if (v6)
    {
      *(_DWORD *)v6 += 2;
      goto LABEL_27;
    }
    v7 = *(_QWORD *)(v4 + 104);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v7 + 40);
        LODWORD(v10) = *(_DWORD *)(v7 + 52);
        if ((_DWORD)v10)
        {
LABEL_11:
          v10 = v10;
          v11 = (_QWORD *)(v9 + 8);
          while (1)
          {
            v12 = *(v11 - 1);
            if (v12 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              goto LABEL_20;
            }
            v11 += 2;
            if (!--v10)
            {
              v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              goto LABEL_20;
            }
          }
        }
      }
      else
      {
        v9 = v7 + 32;
        LODWORD(v10) = v8 >> 5;
        if ((_DWORD)v10)
          goto LABEL_11;
      }
    }
    v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_20:
    if (!*v11)
    {
LABEL_21:
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 64))(&v18);
      goto LABEL_22;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 296))(&v18);
    v6 = v18;
    if (!v18)
    {
      v18 = 0;
      v5 = *(_DWORD **)(v4 + 240);
      goto LABEL_21;
    }
LABEL_27:
    v18 = 0;
    goto LABEL_28;
  }
  WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v5, &v18);
LABEL_22:
  v6 = v18;
  v18 = 0;
  if (v6)
  {
LABEL_28:
    v19 = v6;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v14 = v19;
      v6 = v20;
      v19 = 0;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = v15;
  if (v6)
  {
    v17 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *v15 = v6;
    *(_DWORD *)(a2 + 12) = 1;
    if (v17)
      *(_DWORD *)v6 = v17;
    else
      WTF::StringImpl::destroy(v6, v16);
  }
  else
  {
    *v15 = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  this = v18;
  v18 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::HiddenInputType::restoreFormControlState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    result = *(WTF::StringImpl **)(v2 + 8);
  else
    result = 0;
  if (!*(_DWORD *)(a2 + 12))
  {
    __break(0xC471u);
    return result;
  }
  v4 = **(WTF::StringImpl ***)a2;
  if (v4)
    *(_DWORD *)v4 += 2;
  v12 = v4;
  v5 = *((_QWORD *)result + 13);
  if (!v5)
    goto LABEL_18;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = (uint64_t *)(v5 + 32);
    v8 = v6 >> 5;
    if (!v8)
      goto LABEL_18;
LABEL_11:
    v9 = 0;
    while (1)
    {
      v10 = *v7;
      if (*v7 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        goto LABEL_19;
      }
      ++v9;
      v7 += 2;
      if (v8 == v9)
        goto LABEL_18;
    }
  }
  v7 = *(uint64_t **)(v5 + 40);
  v8 = *(_DWORD *)(v5 + 52);
  if (v8)
    goto LABEL_11;
LABEL_18:
  v9 = 0xFFFFFFFFLL;
LABEL_19:
  WebCore::Element::setAttributeInternal(result, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HiddenInputType::createInputRenderer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::HiddenInputType::accessKeyAction(WebCore::HiddenInputType *this)
{
  return 0;
}

uint64_t WebCore::HiddenInputType::storesValueSeparateFromAttribute(WebCore::HiddenInputType *this)
{
  return 0;
}

WTF::StringImpl *WebCore::HiddenInputType::setValue(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    v3 = *(WTF::StringImpl **)(v2 + 8);
  else
    v3 = 0;
  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
  {
    if ((*((_BYTE *)v4 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v4 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v4, a2);
      v4 = v13;
    }
  }
  v13 = v4;
  v5 = *((_QWORD *)v3 + 13);
  if (!v5)
    goto LABEL_18;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = *(uint64_t **)(v5 + 40);
    v8 = *(_DWORD *)(v5 + 52);
    if (!v8)
    {
LABEL_18:
      v9 = 0xFFFFFFFFLL;
      goto LABEL_19;
    }
  }
  else
  {
    v7 = (uint64_t *)(v5 + 32);
    v8 = v6 >> 5;
    if (!v8)
      goto LABEL_18;
  }
  v9 = 0;
  while (1)
  {
    v10 = *v7;
    if (*v7 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    ++v9;
    v7 += 2;
    if (v8 == v9)
      goto LABEL_18;
  }
LABEL_19:
  WebCore::Element::setAttributeInternal(v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HiddenInputType::appendFormData(WebCore::HiddenInputType *this, const char **a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WebCore::DOMFormData *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned __int8 *v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 208);
  if (!v4)
  {
    v4 = *MEMORY[0x1E0CBF3B8];
    if (!*MEMORY[0x1E0CBF3B8])
    {
      v22 = 0;
      goto LABEL_3;
    }
  }
  *(_DWORD *)v4 += 2;
  v22 = (WTF::StringImpl *)v4;
  if (*(_DWORD *)(v4 + 4) != 9)
    goto LABEL_3;
  v18 = *(unsigned __int8 **)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v18);
    if (v19 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[5]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[8]) == v19)
    {
LABEL_36:
      WTF::String::String((WTF::String *)&v21, a2[4]);
      v14 = &v22;
      v13 = (WebCore::DOMFormData *)a2;
      goto LABEL_17;
    }
  }
  else
  {
    v20 = *(unsigned __int16 *)v18 | (32 * (*(unsigned __int16 *)v18 - 65 < 0x1A));
    if (v20 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
      && (*((unsigned __int16 *)v18 + 1) | (32 * (*((unsigned __int16 *)v18 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
      && (*((unsigned __int16 *)v18 + 2) | (32 * (*((unsigned __int16 *)v18 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
      && (*((unsigned __int16 *)v18 + 3) | (32 * (*((unsigned __int16 *)v18 + 3) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
      && (*((unsigned __int16 *)v18 + 4) | (32 * (*((unsigned __int16 *)v18 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
      && (*((unsigned __int16 *)v18 + 5) | (32 * (*((unsigned __int16 *)v18 + 5) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
      && (*((unsigned __int16 *)v18 + 6) | (32 * (*((unsigned __int16 *)v18 + 6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
      && (*((unsigned __int16 *)v18 + 7) | (32 * (*((unsigned __int16 *)v18 + 7) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
      && (*((unsigned __int16 *)v18 + 8) | (32 * (*((unsigned __int16 *)v18 + 8) - 65 < 0x1A))) == v20)
    {
      goto LABEL_36;
    }
  }
LABEL_3:
  WebCore::InputType::appendFormData(this, (WebCore::DOMFormData *)a2);
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v7 = *(_QWORD *)(v6 + 104);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if ((_DWORD)v10)
      {
LABEL_6:
        v10 = v10;
        v11 = (WTF::StringImpl **)(v9 + 8);
        while (1)
        {
          v12 = (uint64_t)*(v11 - 1);
          if (v12 == WebCore::HTMLNames::dirnameAttr
            || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 24)
            && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 32))
          {
            goto LABEL_15;
          }
          v11 += 2;
          if (!--v10)
          {
            v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v9 = v7 + 32;
      LODWORD(v10) = v8 >> 5;
      if ((_DWORD)v10)
        goto LABEL_6;
    }
  }
  v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_15:
  if (!*v11)
    goto LABEL_20;
  WebCore::HTMLTextFormControlElement::directionForFormData((WebCore::HTMLTextFormControlElement **)v6, &v21);
  v13 = (WebCore::DOMFormData *)a2;
  v14 = v11;
LABEL_17:
  WebCore::DOMFormData::append(v13, v14, &v21);
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v5);
    else
      *(_DWORD *)v15 -= 2;
  }
LABEL_20:
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v5);
    else
      *(_DWORD *)v16 -= 2;
  }
  return 1;
}

uint64_t WebCore::HiddenInputType::shouldRespectHeightAndWidthAttributes(WebCore::HiddenInputType *this)
{
  return 1;
}

uint64_t WebCore::HiddenInputType::dirAutoUsesValue(WebCore::HiddenInputType *this)
{
  return 1;
}

void WebCore::DetachedImageBitmap::~DetachedImageBitmap(WebCore::DetachedImageBitmap *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::ImageBitmap::createImageBuffer(CGColorSpaceRef *this@<X3>, uint64_t a2@<X0>, float *a3@<X1>, unsigned __int8 a4@<W2>, uint64_t *a5@<X8>, float a6@<S0>)
{
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  CFTypeRef v14;
  CFTypeRef cf;
  char v16;
  char v17;
  char **v18;
  char *v19;

  WebCore::DestinationColorSpace::asRGB(this, &cf);
  if (!v16)
  {
    v11 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
    if (v11 != -1)
    {
      v19 = &v17;
      v18 = &v19;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    if (v16)
    {
      WTF::RetainPtr<CGColorSpace *>::operator=(&cf, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace);
      if (v16)
        goto LABEL_10;
      __break(1u);
    }
    cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace);
    v16 = 1;
  }
LABEL_10:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v13.n128_f32[0] = a6;
  WebCore::ImageBuffer::create(a3, 1, &cf, 1, a4, v12, a5, v13);
  if (v16)
  {
    v14 = cf;
    cf = 0;
    if (v14)
      CFRelease(v14);
  }
}

uint64_t WebCore::ImageBitmap::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *a2;
  *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  if (v6)
  {
    v22 = v5;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(&v21, v6, &v22);
    v7 = v22;
    v22 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 32))(&v21, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v8 = v21;
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x195C864E0);
  }
  v21 = 0;
  v9 = *((_BYTE *)a2 + 8);
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = v8;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 0xF8 | v9 & 7;
  *a3 = result;
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_11;
    }
    result = MEMORY[0x19AEA534C](v13);
LABEL_11:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v20 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v20 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return result;
LABEL_19:
        if (v17)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        if (!v18)
          return WTF::fastFree((WTF *)v13, v11);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return result;
    goto LABEL_19;
  }
  return result;
}

_QWORD *WebCore::ImageBitmap::createPromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;

  v8 = *(_QWORD *)(a1 + 104);
  if (v8)
    goto LABEL_16;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = a1 + 96;
  v15 = *(unsigned int **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v8;
  if (!v15)
    goto LABEL_16;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v14);
  }
  v8 = *(_QWORD *)(a1 + 104);
  if (v8)
  {
LABEL_16:
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
  }
  v10 = *a4;
  *a4 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E33D5110;
  v11[1] = v8;
  v11[2] = v10;
  v20 = v11;
  v21[0] = a1;
  v21[1] = a3;
  v21[2] = &v20;
  v12 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v12 == -1)
  {
    v18 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ImageBitmap::detach(v18, v19);
  }
  else
  {
    v22 = v21;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11ImageBitmap23createCompletionHandlerERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEENSD_INS8_16HTMLVideoElementENSF_ISK_EENSH_ISK_EEEENSD_INS8_17HTMLCanvasElementENSF_ISO_EENSH_ISO_EEEENSD_INS8_15SVGImageElementENSF_ISS_EENSH_ISS_EEEENSD_IS9_NSF_IS9_EENSH_IS9_EEEENSD_INS8_15OffscreenCanvasENSF_ISZ_EENSH_ISZ_EEEENSD_INS8_18CSSStyleImageValueENSF_IS13_EENSH_IS13_EEEENSD_INS8_19WebCodecsVideoFrameENSF_IS17_EENSH_IS17_EEEENSD_INS8_4BlobENSF_IS1B_EENSH_IS1B_EEEENSD_INS8_9ImageDataENSF_IS1F_EENSH_IS1F_EEEEEEEONS8_18ImageBitmapOptionsEONS6_17CompletionHandlerIFvONS8_11ExceptionOrINS6_3RefIS9_SW_SX_EEEEEEEE3__0JEEEEEJRNS0_6__implIJSJ_SN_SR_SV_SY_S12_S16_S1A_S1E_S1I_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v22, a2);
    result = v20;
    v20 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *WebCore::ImageBitmap::detach@<X0>(_QWORD *this@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ImageBuffer *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = (WebCore::ImageBuffer *)this[2];
  if (!v3)
  {
    *a2 = 0;
    a2[16] = 0;
    return this;
  }
  v4 = this;
  this[2] = 0;
  v5 = *((_QWORD *)v3 + 1);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_7:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v7 == 1)
    goto LABEL_47;
  WebCore::ImageBuffer::clone(v3, &v39);
  v10 = v39;
  v39 = 0;
  v11 = *((_QWORD *)v3 + 1);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_17:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v37 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v37 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 != 1)
  {
    __clrex();
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      goto LABEL_29;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
    goto LABEL_24;
  if (v14)
    goto LABEL_29;
LABEL_25:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    WTF::fastFree((WTF *)v11, v9);
LABEL_29:
  v18 = v39;
  v39 = 0;
  if (!v18)
    goto LABEL_46;
  v19 = *(_QWORD *)(v18 + 8);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_34:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v38 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v38 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v19))
    {
      if (!v22)
        goto LABEL_42;
      goto LABEL_46;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  if (!v22)
  {
LABEL_42:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if (!v24)
      WTF::fastFree((WTF *)v19, v9);
  }
LABEL_46:
  v3 = (WebCore::ImageBuffer *)v10;
LABEL_47:
  this = (*(_QWORD *(**)(uint64_t *__return_ptr, WebCore::ImageBuffer *))(*(_QWORD *)v3 + 152))(&v39, v3);
  v27 = *((_QWORD *)v3 + 1);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_51;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C](v27);
LABEL_51:
  v29 = *(_QWORD *)(v27 + 8);
  v30 = v29 - 1;
  *(_QWORD *)(v27 + 8) = v29 - 1;
  if (v29 == 1)
  {
    v36 = *(_QWORD *)(v27 + 16);
    v31 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v27 + 24) = 0;
    v32 = v36 != 0;
  }
  else
  {
    v31 = 0;
    v32 = 1;
  }
  v33 = __ldxr((unsigned __int8 *)v27);
  if (v33 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v27))
    {
      if (!v30)
        goto LABEL_59;
      goto LABEL_63;
    }
  }
  else
  {
    __clrex();
  }
  this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v27);
  if (!v30)
  {
LABEL_59:
    if (v31)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    if (!v32)
      this = (_QWORD *)WTF::fastFree((WTF *)v27, v26);
  }
LABEL_63:
  v34 = v39;
  if (v39)
  {
    v35 = v4[4] & 7;
    *(_QWORD *)a2 = v39;
    a2[8] = v35;
    v34 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v34;
  return this;
}

WTF::StringImpl *WebCore::ImageBitmap::createPromise(WTF::StringImpl *a1, uint64_t a2, WTF::StringImpl *a3, int a4, int a5, int a6, int a7, WTF::StringImpl *a8)
{
  int v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::ImageBitmap *v14;
  WebCore::ScriptExecutionContext *v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  WTF::StringImpl *v21[7];
  WTF::StringImpl **v22;

  if (a6 && a7)
  {
    v20 = (a6 & (a6 >> 31)) + a4;
    v19 = (a7 & (a7 >> 31)) + a5;
    if (a6 >= 0)
      v8 = a6;
    else
      v8 = -a6;
    if (a7 >= 0)
      v9 = a7;
    else
      v9 = -a7;
    v17 = v9;
    v18 = v8;
    v21[0] = a1;
    v21[1] = a3;
    v21[2] = (WTF::StringImpl *)&v20;
    v21[3] = (WTF::StringImpl *)&v19;
    v21[4] = (WTF::StringImpl *)&v18;
    v21[5] = (WTF::StringImpl *)&v17;
    v21[6] = a8;
    v10 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v10 == -1)
    {
      v14 = (WebCore::ImageBitmap *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::ImageBitmap::createBlankImageBuffer(v14, v15, v16);
    }
    else
    {
      v22 = v21;
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11ImageBitmap13createPromiseERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEENSD_INS8_16HTMLVideoElementENSF_ISK_EENSH_ISK_EEEENSD_INS8_17HTMLCanvasElementENSF_ISO_EENSH_ISO_EEEENSD_INS8_15SVGImageElementENSF_ISS_EENSH_ISS_EEEENSD_IS9_NSF_IS9_EENSH_IS9_EEEENSD_INS8_15OffscreenCanvasENSF_ISZ_EENSH_ISZ_EEEENSD_INS8_18CSSStyleImageValueENSF_IS13_EENSH_IS13_EEEENSD_INS8_19WebCodecsVideoFrameENSF_IS17_EENSH_IS17_EEEENSD_INS8_4BlobENSF_IS1B_EENSH_IS1B_EEEENSD_INS8_9ImageDataENSF_IS1F_EENSH_IS1F_EEEEEEEONS8_18ImageBitmapOptionsEiiiiONS8_18DOMPromiseDeferredINS8_12IDLInterfaceIS9_EEEEE3__0JEEEEEJRNS0_6__implIJSJ_SN_SR_SV_SY_S12_S16_S1A_S1E_S1I_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v22);
    }
  }
  else
  {
    v12 = *(_QWORD *)a8;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::DeferredPromise::reject(v12, (JSC::JSGlobalObject *)0x20, (JSC::JSGlobalObject *)v21, 0);
    result = v21[0];
    v21[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ImageBitmap::createBlankImageBuffer(WebCore::ImageBitmap *this, WebCore::ScriptExecutionContext *a2, char a3)
{
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  float v26[3];
  char v27;
  char **v28;
  char *v29;

  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)v26 = _D0;
  v11 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v11 != -1)
  {
    v29 = &v27;
    v28 = &v29;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v12 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v25 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&v25, (uint64_t)a2, v26, 1u, (uint64_t *)&v29, 1.0);
    CFRelease(v12);
  }
  else
  {
    WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&v25, (uint64_t)a2, v26, 1u, (uint64_t *)&v29, 1.0);
  }
  v25 = 0;
  v13 = (uint64_t)v29;
  if (!v29)
  {
    __break(0xC471u);
    JUMPOUT(0x195C86BB8);
  }
  v29 = 0;
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 0xF8 | a3;
  *(_QWORD *)this = result;
  v16 = (uint64_t)v29;
  v29 = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_11;
    }
    result = MEMORY[0x19AEA534C](v17);
LABEL_11:
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v17 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v24 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v22 = v24 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (v20)
          return result;
LABEL_19:
        if (v21)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        if (!v22)
          return WTF::fastFree((WTF *)v17, v15);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return result;
    goto LABEL_19;
  }
  return result;
}

uint64_t WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const WebCore::RenderObject *v13;
  __int128 v14;
  int v15;
  _BYTE v16[16];
  int v17;
  char v18;

  v6 = *(_QWORD *)(a2 + 176);
  if ((*(_BYTE *)(v6 + 128) & 8) != 0)
  {
    v11 = *(_QWORD *)(v6 + 24);
    if (v11)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = 0;
    v13 = (const WebCore::RenderObject *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL);
    if (v13 && (*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      v14 = *a4;
      v15 = *((_DWORD *)a4 + 4);
      return WebCore::ImageBitmap::createCompletionHandler(a1, v12, v13, a3, (unint64_t *)&v14, a5);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16[0] = 8;
    v17 = 1;
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v16);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v17 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E33D4E98[v17])(&v18, v16);
  }
  return result;
}

uint64_t WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext *a1, uint64_t a2, const WebCore::RenderObject *a3, uint64_t a4, unint64_t *a5, uint64_t *a6)
{
  float v12;
  double v13;
  int v14;
  int v15;
  double v16;
  int v17;
  int v18;
  double v19;
  int v20;
  double v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  float v45;
  float v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  WTF::StringImpl *v53;
  char v54;
  WTF::StringImpl *v55;
  char v56;
  unsigned __int8 v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  void *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  float v86;
  float v87;
  CFTypeRef cf;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  int v95;
  char v96;

  if (a2)
  {
    v13 = WebCore::CachedImage::imageSizeForRenderer(a2, (uint64_t)a3, 0) * 64.0;
    if (v13 > -2147483650.0)
      v14 = (int)v13;
    else
      v14 = 0x80000000;
    if (v13 < 2147483650.0)
      v15 = v14;
    else
      v15 = 0x7FFFFFFF;
    v16 = v12 * 64.0;
    if (v16 > -2147483650.0)
      v17 = (int)v16;
    else
      v17 = 0x80000000;
    if (v16 < 2147483650.0)
      v18 = v17;
    else
      v18 = 0x7FFFFFFF;
    if (!v15 || !v18)
    {
      if (!*(_BYTE *)(a4 + 16) || !*(_BYTE *)(a4 + 24))
        goto LABEL_73;
      if (!v15)
      {
        if (v18)
        {
          v15 = 0;
        }
        else
        {
          v19 = (float)*(unsigned int *)(a4 + 12) * 64.0;
          if (v19 > -2147483650.0)
            v20 = (int)v19;
          else
            v20 = 0x80000000;
          if (v19 < 2147483650.0)
            v15 = v20;
          else
            v15 = 0x7FFFFFFF;
          v21 = (float)*(unsigned int *)(a4 + 20) * 64.0;
          if (v21 >= 2147483650.0)
          {
            v18 = 0x7FFFFFFF;
          }
          else if (v21 > -2147483650.0)
          {
            v18 = (int)v21;
          }
          else
          {
            v18 = 0x80000000;
          }
        }
      }
    }
    if (*((_BYTE *)a5 + 16) || v15 && v18)
    {
      if (v15 >= 0)
        v22 = v15;
      else
        v22 = v15 + 63;
      if (v18 >= 0)
        v23 = v18;
      else
        v23 = v18 + 63;
      v24 = *a5;
      if (*(_BYTE *)(a4 + 16) && !*(_DWORD *)(a4 + 12) || *(_BYTE *)(a4 + 24) && !*(_DWORD *)(a4 + 20))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v90) = 8;
        v92 = 1;
        v25 = v91;
        v91 = 0;
        LOBYTE(v93) = 8;
        v94 = v25;
        v95 = 1;
        goto LABEL_47;
      }
      v28 = (((int)(v15 - (v22 & 0xFFFFFFC0) + 32) >> 6) + (v22 >> 6));
      v29 = (((int)(v18 - (v23 & 0xFFFFFFC0) + 32) >> 6) + (v23 >> 6));
      if (*((_BYTE *)a5 + 16))
        v30 = a5[1];
      else
        v30 = v28 | (v29 << 32);
      if (!*((_BYTE *)a5 + 16))
        v24 = 0;
      v31 = HIDWORD(v24);
      v32 = v24 & ~((int)v24 >> 31);
      v33 = HIDWORD(v24) & ~(SHIDWORD(v24) >> 31);
      v34 = v30 + v24;
      if ((int)v28 >= v34)
        LODWORD(v28) = v34;
      if ((int)v29 >= HIDWORD(v30) + (int)v31)
        LODWORD(v29) = HIDWORD(v30) + v31;
      v35 = v32 < (int)v28 && v33 < (int)v29;
      if (v35)
        v36 = v32;
      else
        v36 = 0;
      if (v35)
        v37 = v33;
      else
        v37 = 0;
      if (!v35)
      {
        LODWORD(v28) = 0;
        LODWORD(v29) = 0;
      }
      v90 = v36 | (v37 << 32);
      v91 = (v28 - v36) | ((unint64_t)(v29 - v37) << 32);
      v92 = 0;
      v38 = WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)a2, a3);
      if (!v38)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v93) = 8;
        v95 = 1;
LABEL_47:
        v26 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v26 + 16))(v26, &v93);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        if (v95 != -1)
          result = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E33D4E98[v95])(&v85, &v93);
        goto LABEL_135;
      }
      v39 = v38;
      ++*((_DWORD *)v38 + 2);
      v41 = v91;
      v40 = HIDWORD(v91);
      if (*(_BYTE *)(a4 + 16))
      {
        v42 = *(_DWORD *)(a4 + 12);
        if (*(_BYTE *)(a4 + 24))
          v43 = *(_DWORD *)(a4 + 20);
        else
          v43 = vcvtpd_s64_f64((double)SHIDWORD(v91) * (double)v42 / (double)(int)v91);
      }
      else if (*(_BYTE *)(a4 + 24))
      {
        v43 = *(_DWORD *)(a4 + 20);
        v42 = vcvtpd_s64_f64((double)(int)v91 * (double)v43 / (double)SHIDWORD(v91));
      }
      else
      {
        v42 = v91;
        v43 = HIDWORD(v91);
      }
      v45 = (float)v42;
      v46 = (float)v43;
      *(float *)&v93 = (float)v42;
      *((float *)&v93 + 1) = (float)v43;
      (*(void (**)(CFTypeRef *__return_ptr, WTF *))(*(_QWORD *)v38 + 248))(&cf, v38);
      WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&cf, (uint64_t)a1, (float *)&v93, 1u, &v89, 1.0);
      v47 = (void *)cf;
      cf = 0;
      if (v47)
        CFRelease(v47);
      if ((*(_WORD *)(a2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(a2 + 720) & 0x10) != 0)
      {
        WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v93);
        v82 = (unsigned int *)v93;
        if (!v93)
          goto LABEL_94;
        v48 = (_QWORD *)*((_QWORD *)v93 + 1);
        v93 = 0;
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          atomic_store(1u, v82);
          WTF::fastFree((WTF *)v82, v81);
        }
        if (!v48)
          goto LABEL_94;
      }
      else
      {
        v48 = *(_QWORD **)(a2 + 688);
        if (!v48)
          v48 = (_QWORD *)WebCore::Image::nullImage((WebCore::Image *)v47);
      }
      v49 = v48[4];
      if (v49 && (v50 = *(_DWORD **)(v49 + 8)) != 0)
      {
        v50[2] += 2;
        (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v50 + 16))(&v93, v50);
        v51 = v50[2] - 1;
        if (v50[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
          v51 = v50[2];
        }
        else
        {
          v50[2] = v51;
        }
        v52 = v51 - 1;
        if (v52)
          v50[2] = v52;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
      }
      else
      {
        v93 = 0;
        WTF::URL::invalidate((WTF::URL *)&v93);
      }
      v54 = WTF::URL::protocolIs();
      v55 = v93;
      v93 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::destroy(v55, v53);
          if ((v54 & 1) != 0)
            goto LABEL_94;
          goto LABEL_98;
        }
        *(_DWORD *)v55 -= 2;
      }
      if ((v54 & 1) != 0)
      {
LABEL_94:
        v56 = 1;
        goto LABEL_101;
      }
LABEL_98:
      v56 = ((*(uint64_t (**)(_QWORD *))(*v48 + 120))(v48) & 1) == 0
         && WebCore::CachedResource::isCORSSameOrigin((WebCore::CachedResource *)a2);
LABEL_101:
      if (v89)
      {
        v57 = (*(uint64_t (**)(WTF *))(*(_QWORD *)v39 + 200))(v39);
        if ((v57 & 0xFE) != 0)
          v58 = v57;
        else
          v58 = 1;
        v85 = 0;
        v86 = v45;
        v87 = v46;
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 16))(v89);
        *(float *)&v93 = (float)(int)v90;
        *((float *)&v93 + 1) = (float)SHIDWORD(v90);
        *(float *)&v94 = (float)v41;
        *((float *)&v94 + 1) = (float)v40;
        v60 = *(unsigned int *)(a4 + 28);
        v61 = (v60 << 16) + 0x10000;
        v62 = v60 >= 4;
        v63 = 0x20000;
        if (!v62)
          v63 = v61;
        v64 = 0x506070801020304uLL >> (8 * (v58 - 1));
        if (v58 > 8)
          LOBYTE(v64) = 1;
        if (*(_DWORD *)a4 == 1)
          v65 = v64;
        else
          v65 = v58;
        (*(void (**)(uint64_t, WTF *, uint64_t *, WTF::StringImpl **, unint64_t))(*(_QWORD *)v59 + 360))(v59, v39, &v85, &v93, v63 | ((unint64_t)(v65 & 0xF) << 12) | 0x221);
        v66 = *(_DWORD *)(a4 + 4) != 0;
        v67 = v89;
        v89 = 0;
        v68 = bmalloc::api::isoAllocate();
        *(_QWORD *)v68 = 0;
        *(_DWORD *)(v68 + 8) = 1;
        *(_QWORD *)(v68 + 16) = v67;
        *(_QWORD *)(v68 + 24) = 0;
        *(_BYTE *)(v68 + 32) = v56 | (2 * v66) | *(_BYTE *)(v68 + 32) & 0xF8;
        v93 = (WTF::StringImpl *)v68;
        v95 = 0;
        v69 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v69 + 16))(v69, &v93);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
        if (v95 != -1)
          result = ((uint64_t (*)(char *, WTF::StringImpl **))off_1E33D4E98[v95])(&v96, &v93);
      }
      else
      {
        WebCore::ImageBitmap::createBlankImageBuffer((WebCore::ImageBitmap *)&v93, a1, v56);
        v95 = 0;
        v71 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v71 + 16))(v71, &v93);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
        if (v95 != -1)
          result = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E33D4E98[v95])(&v85, &v93);
      }
      v72 = v89;
      v89 = 0;
      if (!v72)
        goto LABEL_133;
      v73 = *(_QWORD *)(v72 + 8);
      if (__ldaxr((unsigned __int8 *)v73))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v73))
      {
        goto LABEL_121;
      }
      result = MEMORY[0x19AEA534C](v73);
LABEL_121:
      v75 = *(_QWORD *)(v73 + 8);
      v76 = v75 - 1;
      *(_QWORD *)(v73 + 8) = v75 - 1;
      if (v75 == 1)
      {
        v80 = *(_QWORD *)(v73 + 16);
        v77 = *(_QWORD *)(v73 + 24);
        *(_QWORD *)(v73 + 24) = 0;
        v78 = v80 != 0;
      }
      else
      {
        v77 = 0;
        v78 = 1;
      }
      v79 = __ldxr((unsigned __int8 *)v73);
      if (v79 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v73))
        {
LABEL_128:
          if (!v76)
          {
            if (v77)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
            if (!v78)
              result = WTF::fastFree((WTF *)v73, v70);
          }
LABEL_133:
          if (*((_DWORD *)v39 + 2) == 1)
            result = (*(uint64_t (**)(WTF *))(*(_QWORD *)v39 + 8))(v39);
          else
            --*((_DWORD *)v39 + 2);
LABEL_135:
          if (v92 != -1)
            return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E33D4EA8[v92])(&v93, &v90);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v73);
      goto LABEL_128;
    }
  }
LABEL_73:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v93) = 8;
  v95 = 1;
  v44 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v44 + 16))(v44, &v93);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (v95 != -1)
    return ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E33D4E98[v95])(&v90, &v93);
  return result;
}

uint64_t WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t (**v12)();
  BOOL v14;
  BOOL v15;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  CFTypeRef v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  CFTypeRef cf;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  char v69;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = HIDWORD(v6);
  if (HIDWORD(v6))
    v8 = *(_QWORD *)(a2 + 8) == 0;
  else
    v8 = 1;
  if (v8)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v66) = 8;
    v68 = 1;
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v66);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = v68;
    if (v68 == -1)
      return result;
    v12 = off_1E33D4E98;
    return ((uint64_t (*)(uint64_t *, uint64_t *))v12[v11])(&v63, &v66);
  }
  if (*(_BYTE *)(a3 + 16))
    v14 = *(_DWORD *)(a3 + 12) == 0;
  else
    v14 = 0;
  if (v14 || (*(_BYTE *)(a3 + 24) ? (v15 = *(_DWORD *)(a3 + 20) == 0) : (v15 = 0), v15))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v66) = 8;
    v68 = 1;
    v33 = v67;
    v67 = 0;
    LOBYTE(v63) = 8;
    v64 = v33;
    v65 = 1;
    goto LABEL_38;
  }
  v18 = *a4;
  v19 = a4[1];
  if (!*((_BYTE *)a4 + 16))
  {
    v19 = *(_QWORD *)(a2 + 8);
    v18 = 0;
  }
  v20 = HIDWORD(v18);
  v21 = v18 & ~((int)v18 >> 31);
  v22 = HIDWORD(v18) & ~(SHIDWORD(v18) >> 31);
  v23 = v19 + v18;
  if ((int)v6 >= v23)
    LODWORD(v6) = v23;
  if ((int)v7 >= HIDWORD(v19) + (int)v20)
    LODWORD(v7) = HIDWORD(v19) + v20;
  v24 = v21 < (int)v6 && v22 < (int)v7;
  if (v24)
    v25 = v21;
  else
    v25 = 0;
  if (v24)
    v26 = v22;
  else
    v26 = 0;
  if (!v24)
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
  }
  v66 = v25 | (v26 << 32);
  v67 = (v6 - v25) | ((unint64_t)(v7 - v26) << 32);
  v68 = 0;
  v27 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (!v27)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v63) = 8;
    v65 = 1;
LABEL_38:
    v34 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 16))(v34, &v63);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    if (v65 != -1)
      result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33D4E98[v65])(&v58, &v63);
    goto LABEL_75;
  }
  v28 = v27;
  ++v27[2];
  v30 = v67;
  v29 = HIDWORD(v67);
  if (*(_BYTE *)(a3 + 16))
  {
    v31 = *(_DWORD *)(a3 + 12);
    if (*(_BYTE *)(a3 + 24))
      v32 = *(_DWORD *)(a3 + 20);
    else
      v32 = vcvtpd_s64_f64((double)SHIDWORD(v67) * (double)v31 / (double)(int)v67);
  }
  else if (*(_BYTE *)(a3 + 24))
  {
    v32 = *(_DWORD *)(a3 + 20);
    v31 = vcvtpd_s64_f64((double)(int)v67 * (double)v32 / (double)SHIDWORD(v67));
  }
  else
  {
    v31 = v67;
    v32 = HIDWORD(v67);
  }
  v35 = (float)v31;
  v36 = (float)v32;
  *(float *)&v63 = (float)v31;
  *((float *)&v63 + 1) = (float)v32;
  (*(void (**)(CFTypeRef *__return_ptr, _DWORD *))(*(_QWORD *)v27 + 248))(&cf, v27);
  WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&cf, (uint64_t)a1, (float *)&v63, 1u, &v62, 1.0);
  v37 = cf;
  cf = 0;
  if (v37)
    CFRelease(v37);
  v38 = *(unsigned __int8 *)(a2 + 72);
  if (v62)
  {
    v58 = 0;
    v59 = v35;
    v60 = v36;
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
    *(float *)&v63 = (float)(int)v66;
    *((float *)&v63 + 1) = (float)SHIDWORD(v66);
    *(float *)&v64 = (float)v30;
    *((float *)&v64 + 1) = (float)v29;
    v40 = *(unsigned int *)(a3 + 28);
    if (v40 >= 4)
      v41 = 131617;
    else
      v41 = (v40 << 16) + 66081;
    v42 = 4096;
    if (*(_DWORD *)a3 == 1)
      v42 = 0x4000;
    (*(void (**)(uint64_t, _DWORD *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v39 + 360))(v39, v28, &v58, &v63, v42 | v41);
    v43 = *(_DWORD *)(a3 + 4) != 0;
    v44 = v62;
    v62 = 0;
    v45 = bmalloc::api::isoAllocate();
    *(_QWORD *)v45 = 0;
    *(_DWORD *)(v45 + 8) = 1;
    *(_QWORD *)(v45 + 16) = v44;
    *(_QWORD *)(v45 + 24) = 0;
    *(_BYTE *)(v45 + 32) = *(_BYTE *)(v45 + 32) & 0xF8 | (2 * v43) | v38;
    v63 = v45;
    v65 = 0;
    v46 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v46 + 16))(v46, &v63);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    if (v65 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E33D4E98[v65])(&v69, &v63);
  }
  else
  {
    WebCore::ImageBitmap::createBlankImageBuffer((WebCore::ImageBitmap *)&v63, a1, v38 != 0);
    v65 = 0;
    v48 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v48 + 16))(v48, &v63);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    if (v65 != -1)
      result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33D4E98[v65])(&v58, &v63);
  }
  v49 = v62;
  v62 = 0;
  if (!v49)
    goto LABEL_73;
  v50 = *(_QWORD *)(v49 + 8);
  if (__ldaxr((unsigned __int8 *)v50))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v50))
  {
    goto LABEL_61;
  }
  result = MEMORY[0x19AEA534C](v50);
LABEL_61:
  v52 = *(_QWORD *)(v50 + 8);
  v53 = v52 - 1;
  *(_QWORD *)(v50 + 8) = v52 - 1;
  if (v52 == 1)
  {
    v57 = *(_QWORD *)(v50 + 16);
    v54 = *(_QWORD *)(v50 + 24);
    *(_QWORD *)(v50 + 24) = 0;
    v55 = v57 != 0;
  }
  else
  {
    v54 = 0;
    v55 = 1;
  }
  v56 = __ldxr((unsigned __int8 *)v50);
  if (v56 != 1)
  {
    __clrex();
    goto LABEL_67;
  }
  if (__stlxr(0, (unsigned __int8 *)v50))
LABEL_67:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v50);
  if (!v53)
  {
    if (v54)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    if (!v55)
      result = WTF::fastFree((WTF *)v50, v47);
  }
LABEL_73:
  if (v28[2] == 1)
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
  else
    --v28[2];
LABEL_75:
  v11 = v68;
  if (v68 == -1)
    return result;
  v12 = off_1E33D4EA8;
  return ((uint64_t (*)(uint64_t *, uint64_t *))v12[v11])(&v63, &v66);
}

{
  uint64_t v6;
  float v10;
  int v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  CGColorSpace *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  _DWORD *v71;
  CGColorSpaceRef v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char v80;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (!v6)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v77) = 8;
    v79 = 1;
    v24 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 16))(v24, &v77);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (v79 != -1)
      return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33D4E98[v79])(&v74, &v77);
    return result;
  }
  v10 = *(float *)(v6 + 16);
  if (v10 >= 2147500000.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v10 > -2147500000.0)
  {
    v11 = (int)v10;
  }
  else
  {
    v11 = 0x80000000;
  }
  v12 = *(float *)(v6 + 20);
  if (v12 >= 2147500000.0)
  {
    v13 = 0x7FFFFFFFLL;
  }
  else if (v12 > -2147500000.0)
  {
    v13 = (int)v12;
  }
  else
  {
    v13 = 0x80000000;
  }
  v14 = *a4;
  v15 = a4[1];
  v16 = *(unsigned __int8 *)(a3 + 16);
  v17 = *(_DWORD *)(a3 + 12);
  if (*(_BYTE *)(a3 + 16) && !v17
    || (v18 = *(unsigned __int8 *)(a3 + 24), v19 = *(_DWORD *)(a3 + 20), *(_BYTE *)(a3 + 24)) && !v19)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v77) = 8;
    v79 = 1;
    v20 = v78;
    v78 = 0;
    LOBYTE(v74) = 8;
    v75 = v20;
    v76 = 1;
    v21 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 16))(v21, &v74);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (v76 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E33D4E98[v76])(&v68, &v74);
    v22 = 1;
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33D4EA8[v22])(&v74, &v77);
  }
  if (!*((_BYTE *)a4 + 16))
  {
    v15 = v11 | (unint64_t)(v13 << 32);
    v14 = 0;
  }
  v25 = HIDWORD(v14);
  v26 = v14 & ~((int)v14 >> 31);
  v27 = HIDWORD(v14) & ~(SHIDWORD(v14) >> 31);
  v28 = v15 + v14;
  if (v11 >= v28)
    v11 = v28;
  if ((int)v13 >= HIDWORD(v15) + (int)v25)
    LODWORD(v13) = HIDWORD(v15) + v25;
  v29 = v26 < v11 && v27 < (int)v13;
  if (v29)
    v30 = v26;
  else
    v30 = 0;
  if (v29)
    v31 = v27;
  else
    v31 = 0;
  if (!v29)
  {
    v11 = 0;
    LODWORD(v13) = 0;
  }
  v32 = (v11 - v30);
  v33 = (v13 - v31);
  v77 = v30 | (v31 << 32);
  v78 = v32 | (v33 << 32);
  v79 = 0;
  if (v16)
  {
    if (!v18)
      v19 = vcvtpd_s64_f64((double)v17 * (double)(int)v33 / (double)(int)v32);
  }
  else if (v18)
  {
    v17 = vcvtpd_s64_f64((double)v19 * (double)(int)v32 / (double)(int)v33);
  }
  else
  {
    v17 = v32;
    v19 = v33;
  }
  v34 = (float)v17;
  v35 = (float)v19;
  *(float *)&v74 = (float)v17;
  *((float *)&v74 + 1) = (float)v19;
  v36 = *(CGColorSpace **)(v6 + 32);
  v72 = v36;
  if (!v36)
    goto LABEL_100;
  CFRetain(v36);
  WebCore::ImageBitmap::createImageBuffer(&v72, (uint64_t)a1, (float *)&v74, 1u, &v73, 1.0);
  CFRelease(v36);
  while (1)
  {
    v72 = 0;
    if (!v73)
      break;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 48))(&v74);
    WebCore::BitmapImage::create(&v74, (uint64_t *)&v71);
    v38 = v74;
    v74 = 0;
    if (!v38)
      goto LABEL_64;
    v39 = *(_QWORD *)(v38 + 8);
    if (__ldaxr((unsigned __int8 *)v39))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v39))
    {
      goto LABEL_52;
    }
    MEMORY[0x19AEA534C](v39);
LABEL_52:
    v41 = *(_QWORD *)(v39 + 8);
    v42 = v41 - 1;
    *(_QWORD *)(v39 + 8) = v41 - 1;
    if (v41 == 1)
    {
      v67 = *(_QWORD *)(v39 + 16);
      v43 = *(_QWORD *)(v39 + 24);
      *(_QWORD *)(v39 + 24) = 0;
      v44 = v67 != 0;
    }
    else
    {
      v43 = 0;
      v44 = 1;
    }
    v45 = __ldxr((unsigned __int8 *)v39);
    if (v45 != 1)
    {
      __clrex();
LABEL_58:
      WTF::Lock::unlockSlow((WTF::Lock *)v39);
      goto LABEL_59;
    }
    if (__stlxr(0, (unsigned __int8 *)v39))
      goto LABEL_58;
LABEL_59:
    if (!v42)
    {
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      if (!v44)
        WTF::fastFree((WTF *)v39, v37);
    }
LABEL_64:
    v46 = v71;
    if (!v71)
      break;
    v68 = 0;
    v69 = v34;
    v70 = v35;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73);
    if (!v79)
    {
      *(float *)&v74 = (float)(int)v77;
      *((float *)&v74 + 1) = (float)SHIDWORD(v77);
      *(float *)&v75 = (float)(int)v78;
      *((float *)&v75 + 1) = (float)SHIDWORD(v78);
      v48 = *(unsigned int *)(a3 + 28);
      if (v48 >= 4)
        v49 = 131617;
      else
        v49 = (v48 << 16) + 66081;
      v50 = 4096;
      if (*(_DWORD *)a3 == 1)
        v50 = 0x4000;
      (*(void (**)(uint64_t, _DWORD *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v47 + 360))(v47, v46, &v68, &v74, v50 | v49);
      v51 = *(_BYTE *)(*(_QWORD *)a2 + 32) & 1;
      v52 = *(_DWORD *)(a3 + 4) != 0;
      v53 = v73;
      v73 = 0;
      v54 = bmalloc::api::isoAllocate();
      *(_QWORD *)v54 = 0;
      *(_DWORD *)(v54 + 8) = 1;
      *(_QWORD *)(v54 + 16) = v53;
      *(_QWORD *)(v54 + 24) = 0;
      *(_BYTE *)(v54 + 32) = v51 | (2 * v52) | (4 * v52) | *(_BYTE *)(v54 + 32) & 0xF8;
      v74 = v54;
      v76 = 0;
      v55 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v55 + 16))(v55, &v74);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      if (v76 != -1)
        result = ((uint64_t (*)(char *, uint64_t *))off_1E33D4E98[v76])(&v80, &v74);
      if (v46[2] == 1)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
      else
        --v46[2];
      goto LABEL_77;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_100:
    WebCore::ImageBitmap::createImageBuffer(&v72, (uint64_t)a1, (float *)&v74, 1u, &v73, 1.0);
  }
  WebCore::ImageBitmap::createBlankImageBuffer((WebCore::ImageBitmap *)&v74, a1, *(_BYTE *)(*(_QWORD *)a2 + 32) & 1);
  v76 = 0;
  v57 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v57 + 16))(v57, &v74);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  if (v76 != -1)
    result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33D4E98[v76])(&v68, &v74);
LABEL_77:
  v58 = v73;
  v73 = 0;
  if (v58)
  {
    v59 = *(_QWORD *)(v58 + 8);
    if (__ldaxr((unsigned __int8 *)v59))
    {
      __clrex();
      goto LABEL_81;
    }
    if (__stxr(1u, (unsigned __int8 *)v59))
LABEL_81:
      result = MEMORY[0x19AEA534C](v59);
    v61 = *(_QWORD *)(v59 + 8);
    v62 = v61 - 1;
    *(_QWORD *)(v59 + 8) = v61 - 1;
    if (v61 == 1)
    {
      v66 = *(_QWORD *)(v59 + 16);
      v63 = *(_QWORD *)(v59 + 24);
      *(_QWORD *)(v59 + 24) = 0;
      v64 = v66 != 0;
    }
    else
    {
      v63 = 0;
      v64 = 1;
    }
    v65 = __ldxr((unsigned __int8 *)v59);
    if (v65 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v59))
        goto LABEL_89;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v59);
LABEL_89:
    if (!v62)
    {
      if (v63)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      if (!v64)
        result = WTF::fastFree((WTF *)v59, v56);
    }
  }
  v22 = v79;
  if (v79 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33D4EA8[v22])(&v74, &v77);
  return result;
}

uint64_t WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  unint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57[2];
  uint64_t v58;
  _QWORD v59[2];
  int v60;
  unint64_t v61;
  uint64_t v62;
  int v63;

  if (*(_BYTE *)(*(_QWORD *)a2 + 152) || (v8 = *(unsigned int **)(*(_QWORD *)a2 + 24)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v61) = 8;
    v63 = 1;
    v6 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v6 + 16))(v6, &v61);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v63 != -1)
      return ((uint64_t (*)(_QWORD *, unint64_t *))off_1E33D4E98[v63])(v59, &v61);
    return result;
  }
  v10 = v8 + 2;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD **)a2;
  if (!*(_QWORD *)(*(_QWORD *)a2 + 40) || !v12[6])
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v61) = 8;
    v63 = 1;
    v22 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v22 + 16))(v22, &v61);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (v63 != -1)
      result = ((uint64_t (*)(_QWORD *, unint64_t *))off_1E33D4E98[v63])(v59, &v61);
    goto LABEL_19;
  }
  v14 = v12[7];
  v13 = v12[8];
  v15 = *(unsigned __int8 *)(a3 + 16);
  v16 = *(_DWORD *)(a3 + 12);
  if (!*(_BYTE *)(a3 + 16) || v16)
  {
    v17 = *(unsigned __int8 *)(a3 + 24);
    v18 = *(_DWORD *)(a3 + 20);
    if (!*(_BYTE *)(a3 + 24) || v18)
    {
      if (*((_BYTE *)a4 + 16))
        v25 = a4[1];
      else
        v25 = v14 | (unint64_t)(v13 << 32);
      if (*((_BYTE *)a4 + 16))
        v26 = *a4;
      else
        v26 = 0;
      v27 = HIDWORD(v26);
      v28 = v26 & ~((int)v26 >> 31);
      v29 = HIDWORD(v26) & ~(SHIDWORD(v26) >> 31);
      v30 = v25 + v26;
      if ((int)v14 >= v30)
        LODWORD(v14) = v30;
      LODWORD(v25) = HIDWORD(v25) + v27;
      if ((int)v13 < HIDWORD(v25) + (int)v27)
        LODWORD(v25) = v13;
      if (v28 >= (int)v14 || (int)v29 >= (int)v25)
      {
        v28 = 0;
        v29 = 0;
        LODWORD(v14) = 0;
        LODWORD(v25) = 0;
      }
      v32 = (v14 - v28);
      v33 = (v25 - v29);
      v61 = v28 | (unint64_t)(v29 << 32);
      v62 = v32 | (v33 << 32);
      v63 = 0;
      if (v15)
      {
        if (!v17)
          v18 = vcvtpd_s64_f64((double)v16 * (double)(int)v33 / (double)(int)v32);
      }
      else if (v17)
      {
        v16 = vcvtpd_s64_f64((double)v18 * (double)(int)v32 / (double)(int)v33);
      }
      else
      {
        v16 = v32;
        v18 = v25 - v29;
      }
      v34 = (float)v16;
      v35 = (float)v18;
      v57[0] = (float)v16;
      v57[1] = (float)v18;
      v36 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v36 != -1)
      {
        v59[0] = &v58;
        v53 = v59;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v53, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      v37 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      v56 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      {
        CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
        WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&v56, (uint64_t)a1, v57, 1u, &v58, 1.0);
        CFRelease(v37);
      }
      else
      {
        WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&v56, (uint64_t)a1, v57, 1u, &v58, 1.0);
      }
      v56 = 0;
      if (v58)
      {
        v53 = 0;
        v54 = v34;
        v55 = v35;
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
        (*(void (**)(uint64_t, unsigned int *, _QWORD **, uint64_t))(*(_QWORD *)v38 + 440))(v38, v8, &v53, 1);
        v39 = v58;
        v58 = 0;
        v40 = bmalloc::api::isoAllocate();
        *(_QWORD *)v40 = 0;
        *(_DWORD *)(v40 + 8) = 1;
        *(_QWORD *)(v40 + 16) = v39;
        *(_QWORD *)(v40 + 24) = 0;
        *(_BYTE *)(v40 + 32) = *(_BYTE *)(v40 + 32) & 0xF8 | 1;
        v59[0] = v40;
        v60 = 0;
        v41 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v41 + 16))(v41, v59);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        if (v60 != -1)
          result = ((uint64_t (*)(float *, _QWORD *))off_1E33D4E98[v60])(v57, v59);
      }
      else
      {
        WebCore::ImageBitmap::createBlankImageBuffer((WebCore::ImageBitmap *)v59, a1, 1);
        v60 = 0;
        v43 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v43 + 16))(v43, v59);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        if (v60 != -1)
          result = ((uint64_t (*)(_QWORD **, _QWORD *))off_1E33D4E98[v60])(&v53, v59);
      }
      v44 = v58;
      v58 = 0;
      if (!v44)
      {
LABEL_70:
        v21 = v63;
        if (v63 == -1)
          goto LABEL_19;
        goto LABEL_16;
      }
      v45 = *(_QWORD *)(v44 + 8);
      if (__ldaxr((unsigned __int8 *)v45))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v45))
      {
        goto LABEL_58;
      }
      result = MEMORY[0x19AEA534C](v45);
LABEL_58:
      v47 = *(_QWORD *)(v45 + 8);
      v48 = v47 - 1;
      *(_QWORD *)(v45 + 8) = v47 - 1;
      if (v47 == 1)
      {
        v52 = *(_QWORD *)(v45 + 16);
        v49 = *(_QWORD *)(v45 + 24);
        *(_QWORD *)(v45 + 24) = 0;
        v50 = v52 != 0;
      }
      else
      {
        v49 = 0;
        v50 = 1;
      }
      v51 = __ldxr((unsigned __int8 *)v45);
      if (v51 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v45))
        {
LABEL_65:
          if (!v48)
          {
            if (v49)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
            if (!v50)
              result = WTF::fastFree((WTF *)v45, v42);
          }
          goto LABEL_70;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v45);
      goto LABEL_65;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v61) = 8;
  v63 = 1;
  v19 = v62;
  v62 = 0;
  LOBYTE(v59[0]) = 8;
  v59[1] = v19;
  v60 = 1;
  v20 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v20 + 16))(v20, v59);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v60 != -1)
    ((void (*)(_QWORD **, _QWORD *))off_1E33D4E98[v60])(&v53, v59);
  v21 = 1;
LABEL_16:
  result = ((uint64_t (*)(_QWORD *, unint64_t *))off_1E33D4EA8[v21])(v59, &v61);
  do
  {
LABEL_19:
    v23 = __ldaxr(v10);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v10));
  if (!v24)
  {
    atomic_store(1u, v8 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

void WebCore::ImageBitmap::createCompletionHandler(WebCore::SecurityContext *a1, WTF::StringImpl *a2, uint64_t a3, unint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v6;
  WTF::StringImpl *v9;
  uint64_t v11;
  float v12;
  float v13;
  int v14;
  int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::ThreadableBlobRegistry *v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t i;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t j;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  char v65;
  uint64_t v66;
  int v67;
  WebCore::HTMLMediaElement *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  int v82;
  CFTypeRef v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  CFTypeRef cf;
  char v90;
  char *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  char **v98;

  v6 = *(_QWORD *)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 904) <= 1u || !*(_DWORD *)(v6 + 900))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v94) = 8;
    v96 = 1;
    v18 = *(_QWORD *)a5;
    *(_QWORD *)a5 = 0;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v18 + 16))(v18, &v94);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v96 != -1)
      ((void (*)(char **, unint64_t *))off_1E33D4E98[v96])(&v91, &v94);
    return;
  }
  v9 = a2;
  v11 = *(_QWORD *)(v6 + 1136);
  if (v11)
  {
    v12 = roundf((*(float (**)(_QWORD))(**(_QWORD **)(v11 + 72) + 288))(*(_QWORD *)(v11 + 72)));
    if (v12 > -2147500000.0)
      v14 = (int)v12;
    else
      v14 = 0x80000000;
    if (v12 < 2147500000.0)
      v15 = v14;
    else
      v15 = 0x7FFFFFFF;
    v16 = roundf(v13);
    if (v16 >= 2147500000.0)
    {
      v17 = 0x7FFFFFFFLL;
    }
    else if (v16 <= -2147500000.0)
    {
      v17 = 0x80000000;
    }
    else
    {
      v17 = (int)v16;
    }
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v19 = *a4;
  v20 = a4[1];
  v21 = *(unsigned __int8 *)(a3 + 16);
  v22 = *(_DWORD *)(a3 + 12);
  if (*(_BYTE *)(a3 + 16) && !v22
    || (v23 = *(unsigned __int8 *)(a3 + 24), v24 = *(_DWORD *)(a3 + 20), *(_BYTE *)(a3 + 24)) && !v24)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v94) = 8;
    v96 = 1;
    v25 = v95;
    v95 = 0;
    LOBYTE(v91) = 8;
    v92 = v25;
    v93 = 1;
    v26 = *(_QWORD *)a5;
    *(_QWORD *)a5 = 0;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v26 + 16))(v26, &v91);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (v93 != -1)
      ((void (*)(CFTypeRef *, char **))off_1E33D4E98[v93])(&cf, &v91);
    v27 = 1;
LABEL_23:
    ((void (*)(char **, unint64_t *))off_1E33D4EA8[v27])(&v91, &v94);
    return;
  }
  if (!*((_BYTE *)a4 + 16))
  {
    v20 = v15 | (unint64_t)(v17 << 32);
    v19 = 0;
  }
  v28 = HIDWORD(v19);
  v29 = v19 & ~((int)v19 >> 31);
  v30 = v20 + v19;
  if (v15 < v30)
    v30 = v15;
  LODWORD(v20) = HIDWORD(v20) + v28;
  if ((int)v17 < HIDWORD(v20) + (int)v28)
    LODWORD(v20) = v17;
  v31 = v29 < v30 && (HIDWORD(v19) & ~(SHIDWORD(v19) >> 31)) < (int)v20;
  if (v31)
    v32 = v29;
  else
    v32 = 0;
  if (v31)
    v33 = HIDWORD(v19) & ~(SHIDWORD(v19) >> 31);
  else
    v33 = 0;
  if (!v31)
  {
    v30 = 0;
    LODWORD(v20) = 0;
  }
  v34 = v30 - v32;
  v35 = v20 - v33;
  v94 = v32 | ((unint64_t)v33 << 32);
  v95 = v34 | (v35 << 32);
  v96 = 0;
  v87 = v33;
  v88 = v32;
  v85 = v20 - v33;
  v86 = v30 - v32;
  if (v21)
  {
    if (!v23)
      v24 = vcvtpd_s64_f64((double)v22 * (double)(int)v35 / (double)(int)v34);
  }
  else if (v23)
  {
    v22 = vcvtpd_s64_f64((double)v24 * (double)(int)v34 / (double)(int)v35);
  }
  else
  {
    v22 = v30 - v32;
    v24 = v20 - v33;
  }
  v36 = *(_QWORD *)(*(_QWORD *)v9 + 1136);
  if (v36)
  {
    v37 = *(unsigned __int8 **)v36;
    if (__ldaxr(*(unsigned __int8 **)v36))
    {
      __clrex();
    }
    else if (!__stxr(1u, v37))
    {
      goto LABEL_53;
    }
    MEMORY[0x19AEA534C](v37);
LABEL_53:
    ++*((_QWORD *)v37 + 1);
    v39 = __ldxr(v37);
    if (v39 == 1)
    {
      if (!__stlxr(0, v37))
        goto LABEL_58;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
LABEL_58:
    (*(void (**)(char **__return_ptr))(**(_QWORD **)(v36 + 72) + 680))(&v91);
    cf = v91;
    v90 = 1;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v36);
    goto LABEL_64;
  }
  LOBYTE(cf) = 0;
  v90 = 0;
  v40 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v40 != -1)
  {
    v91 = &v97;
    v98 = &v91;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v98, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v90 = 1;
LABEL_64:
  WebCore::SecurityContext::securityOrigin(a1, a2);
  v44 = *(_QWORD *)v9;
  v45 = *(_QWORD *)(*(_QWORD *)v9 + 1136);
  if (!v45)
    goto LABEL_66;
  v46 = v41;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 72) + 808))(*(_QWORD *)(v45 + 72)) & 1) != 0)
    goto LABEL_66;
  v47 = *(WebCore::ThreadableBlobRegistry **)(v44 + 1136);
  if (v47)
  {
    v64 = (*(uint64_t (**)(_QWORD *, uint64_t))(**((_QWORD **)v47 + 9) + 816))(*((_QWORD **)v47 + 9), v46);
    if (v64 >= 0x100u)
    {
      LOBYTE(v47) = v64 != 0;
    }
    else
    {
      v47 = (WebCore::ThreadableBlobRegistry *)((char *)v47 + 104);
      if ((WTF::URL::protocolIs() & 1) != 0)
      {
LABEL_66:
        LOBYTE(v47) = 0;
        goto LABEL_67;
      }
      {
        WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
      }
      LODWORD(v47) = WebCore::SecurityOrigin::canRequest(v46, v47, (uint64_t (***)(_QWORD, uint64_t))&WebCore::EmptyOriginAccessPatterns::singleton(void)::instance) ^ 1;
    }
  }
LABEL_67:
  v48 = (float)v22;
  v49 = *(_QWORD *)v9;
  v50 = (float)v24;
  *(float *)&v91 = v48;
  *((float *)&v91 + 1) = (float)v24;
  if (!v90)
  {
    __break(1u);
    goto LABEL_141;
  }
  v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 8) + 528);
  if (!v51)
    goto LABEL_95;
  v52 = *(_QWORD *)(v51 + 8);
  if (!v52)
    goto LABEL_95;
  v53 = *(_QWORD **)(v52 + 288);
  if (!v53)
    goto LABEL_95;
  for (i = v53[4]; i; i = v55[4])
  {
    v55 = *(_QWORD **)(i + 8);
    if (!v55)
      break;
    v53 = v55;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v53 + 72))(v53) & 1) == 0
    && !(*(unsigned int (**)(_QWORD *))(*v53 + 80))(v53))
  {
    goto LABEL_95;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 8) + 528);
  if (v56 && (v57 = *(_QWORD *)(v56 + 8)) != 0)
    v58 = *(_QWORD **)(v57 + 288);
  else
    v58 = 0;
  for (j = v58[4]; j; j = v60[4])
  {
    v60 = *(_QWORD **)(j + 8);
    if (!v60)
      break;
    v58 = v60;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v58 + 72))(v58) & 1) == 0)
    (*(void (**)(_QWORD *))(*v58 + 80))(v58);
  v61 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v58 + 720))(v58) + 24);
  if (v61 && (v62 = *(_QWORD *)(v61 + 8)) != 0)
    v63 = *(_QWORD *)(v62 + 48);
  else
LABEL_95:
    v63 = 0;
  v65 = v47 ^ 1;
  v43.n128_u32[0] = 1.0;
  WebCore::ImageBuffer::create((float *)&v91, 8, &cf, 1, 1u, v63, (uint64_t *)&v98, v43);
  if (!v98)
  {
    WebCore::ImageBitmap::createBlankImageBuffer((WebCore::ImageBitmap *)&v91, a1, v47 ^ 1);
    goto LABEL_115;
  }
  v66 = (*((uint64_t (**)(char **))*v98 + 2))(v98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 96))(v66, 1);
  v91 = 0;
  *(float *)&v92 = v48;
  *((float *)&v92 + 1) = (float)v24;
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v66 + 456))(v66, &v91);
  if (*(_DWORD *)a3 == 1)
  {
    *(float *)&v91 = v48 / (float)v86;
    *((float *)&v91 + 1) = -(float)(v50 / (float)v85);
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v66 + 632))(v66, &v91);
    v67 = v87 - v24;
  }
  else
  {
    *(float *)&v91 = v48 / (float)v86;
    *((float *)&v91 + 1) = v50 / (float)v85;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v66 + 632))(v66, &v91);
    v67 = -v87;
  }
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)v66 + 648))(v66, (float)-v88, (float)v67);
  v68 = *(WebCore::HTMLMediaElement **)v9;
  v91 = 0;
  *(float *)&v92 = (float)v15;
  *((float *)&v92 + 1) = (float)(int)v17;
  v69 = *((_QWORD *)v68 + 142);
  if (v69)
  {
    v70 = *(unsigned __int8 **)v69;
    if (__ldaxr(*(unsigned __int8 **)v69))
    {
      __clrex();
    }
    else if (!__stxr(1u, v70))
    {
      goto LABEL_106;
    }
    MEMORY[0x19AEA534C](v70);
LABEL_106:
    ++*((_QWORD *)v70 + 1);
    v72 = __ldxr(v70);
    if (v72 == 1)
    {
      if (!__stlxr(0, v70))
        goto LABEL_111;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v70);
LABEL_111:
    if (!*(_BYTE *)(v69 + 225))
    {
      *(_BYTE *)(v69 + 225) = 1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v69 + 72) + 320))(*(_QWORD *)(v69 + 72), 1);
      WebCore::HTMLMediaElement::visibilityStateChanged(v68);
    }
    (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)v66 + 432))(v66, v69, &v91);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v69);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 104))(v66, 1);
  v73 = *(_DWORD *)(a3 + 4) != 0;
  v74 = (uint64_t)v98;
  v98 = 0;
  v75 = bmalloc::api::isoAllocate();
  *(_QWORD *)v75 = 0;
  *(_DWORD *)(v75 + 8) = 1;
  *(_QWORD *)(v75 + 16) = v74;
  *(_QWORD *)(v75 + 24) = 0;
  *(_BYTE *)(v75 + 32) = v65 | (2 * v73) | *(_BYTE *)(v75 + 32) & 0xF8;
  v91 = (char *)v75;
LABEL_115:
  v93 = 0;
  v76 = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v76 + 16))(v76, &v91);
  (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  if (v93 != -1)
    ((void (*)(char *, char **))off_1E33D4E98[v93])(&v97, &v91);
  v77 = (uint64_t)v98;
  v98 = 0;
  if (v77)
  {
    a5 = *(unsigned __int8 **)(v77 + 8);
    if (__ldaxr(a5))
    {
      __clrex();
    }
    else if (!__stxr(1u, a5))
    {
      goto LABEL_122;
    }
    MEMORY[0x19AEA534C](a5);
LABEL_122:
    v79 = *((_QWORD *)a5 + 1);
    v9 = (WTF::StringImpl *)(v79 - 1);
    *((_QWORD *)a5 + 1) = v79 - 1;
    if (v79 != 1)
    {
      v80 = 0;
      v81 = 1;
      goto LABEL_124;
    }
LABEL_141:
    v84 = *((_QWORD *)a5 + 2);
    v80 = *((_QWORD *)a5 + 3);
    *((_QWORD *)a5 + 3) = 0;
    v81 = v84 != 0;
LABEL_124:
    v82 = __ldxr(a5);
    if (v82 == 1)
    {
      if (!__stlxr(0, a5))
      {
LABEL_129:
        if (!v9)
        {
          if (v80)
            (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
          if (!v81)
            WTF::fastFree((WTF *)a5, v42);
        }
        goto LABEL_134;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)a5);
    goto LABEL_129;
  }
LABEL_134:
  if (v90)
  {
    v83 = cf;
    cf = 0;
    if (v83)
      CFRelease(v83);
  }
  v27 = v96;
  if (v96 != -1)
    goto LABEL_23;
}

uint64_t *WebCore::ImageBitmap::createFromBuffer(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t *a8)
{
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  unsigned int *v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _DWORD *v24;
  __int128 v25;
  int v26;
  int v27;
  _QWORD *v28;
  unsigned int v29;
  void *v30;
  int v31;
  WTF *v32;
  unsigned int v33;
  unsigned int v34;
  _DWORD *v35;
  float v36;
  uint64_t v37;
  float v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  uint64_t v51;
  uint64_t *result;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  float v61;
  CFTypeRef v62;
  unsigned __int8 v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  float v101;
  CFTypeRef cf;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _DWORD *v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  int v111;
  char v112;

  if (*(_BYTE *)(a2 + 64) && (v96 = *(_QWORD *)(a2 + 32)) != 0)
  {
    if (!*(_QWORD *)(v96 + 32))
    {
LABEL_130:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v109) = 8;
      v111 = 1;
      v97 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v97 + 16))(v97, &v109);
      result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
      if (v111 != -1)
        return (uint64_t *)((uint64_t (*)(uint64_t *, WTF **))off_1E33D4E98[v111])(&v104, &v109);
      return result;
    }
  }
  else if (!*(_QWORD *)(a2 + 48))
  {
    goto LABEL_130;
  }
  v15 = *(WTF **)(a2 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v16)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v15 = (WTF *)(((unint64_t)v15 & 0x3FFFFFFFFLL) + v16);
    }
  }
  if (*(_BYTE *)(a2 + 64) && (v98 = *(_QWORD *)(a2 + 32)) != 0)
    v17 = *(WTF **)(v98 + 32);
  else
    v17 = *(WTF **)(a2 + 48);
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v18 + 24;
  *(_QWORD *)(v18 + 16) = 1;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v18, v15, v17);
  v109 = (WTF *)v18;
  v19 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  v108 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v19, (uint64_t *)&v109);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v109, v20);
  v21 = *a3;
  if (*a3)
  {
    *(_DWORD *)v21 += 2;
    v23 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v21 += 4;
  }
  else
  {
    v23 = WTF::fastMalloc((WTF *)0x50);
  }
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)v23 = off_1E33D4EC8;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = v21;
  *(_QWORD *)(v23 + 32) = a4;
  v24 = *(_DWORD **)a5;
  if (*(_QWORD *)a5)
    *v24 += 2;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(a5 + 8);
  *(_OWORD *)(v23 + 64) = v25;
  if (v21)
  {
    v26 = *(_DWORD *)v21 - 2;
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v22);
      v26 = *(_DWORD *)v21;
    }
    else
    {
      *(_DWORD *)v21 = v26;
    }
    v27 = v26 - 2;
    if (v27)
      *(_DWORD *)v21 = v27;
    else
      WTF::StringImpl::destroy(v21, v22);
  }
  WebCore::BitmapImage::create(v23, 0, 0, (uint64_t *)&v107);
  v28 = v107;
  do
    v29 = __ldaxr(v19);
  while (__stlxr(v29 + 1, v19));
  v104 = 0;
  v109 = (WTF *)v19;
  v31 = WebCore::Image::setData(v28, (uint64_t *)&v109, 1);
  v32 = v109;
  v109 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr((unsigned int *)v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v32));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v32);
      v86 = *((unsigned int *)v32 + 5);
      if ((_DWORD)v86)
      {
        v87 = *((_QWORD *)v32 + 1);
        v88 = v87 + 16 * v86;
        do
        {
          v89 = *(unsigned int **)(v87 + 8);
          *(_QWORD *)(v87 + 8) = 0;
          if (v89)
          {
            do
            {
              v90 = __ldaxr(v89);
              v91 = v90 - 1;
            }
            while (__stlxr(v91, v89));
            if (!v91)
            {
              atomic_store(1u, v89);
              v92 = v89[6];
              if ((_DWORD)v92 != -1)
                ((void (*)(uint64_t *, unsigned int *))off_1E33D5038[v92])(&v99, v89 + 2);
              v89[6] = -1;
              WTF::fastFree((WTF *)v89, v30);
            }
          }
          v87 += 16;
        }
        while (v87 != v88);
      }
      v93 = (WTF *)*((_QWORD *)v32 + 1);
      if ((WTF *)((char *)v32 + 24) != v93 && v93 != 0)
      {
        *((_QWORD *)v32 + 1) = 0;
        *((_DWORD *)v32 + 4) = 0;
        WTF::fastFree(v93, v30);
      }
      WTF::fastFree(v32, v30);
    }
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v104, v30);
  if (v31 != 4
    || (v35 = v107, (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v107 + 168))(v107, 0) <= 0.0)
    || v36 <= 0.0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v109) = 8;
    v111 = 1;
    v51 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v51 + 16))(v51, &v109);
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    if (v111 != -1)
      ((void (*)(uint64_t *, WTF **))off_1E33D4E98[v111])(&v104, &v109);
    goto LABEL_45;
  }
  v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v35 + 8) + 176))(*((_QWORD *)v35 + 8), 0);
  v38 = (float)SHIDWORD(v37);
  if ((float)(int)v37 > -2147500000.0)
    v39 = (int)(float)(int)v37;
  else
    v39 = 0x80000000;
  if ((float)(int)v37 < 2147500000.0)
    v40 = v39;
  else
    v40 = 0x7FFFFFFFLL;
  if (v38 >= 2147500000.0)
  {
    v41 = 0x7FFFFFFFLL;
  }
  else if (v38 <= -2147500000.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v38;
  }
  v42 = a7[1];
  v43 = *(unsigned __int8 *)(a6 + 16);
  v44 = *(_DWORD *)(a6 + 12);
  if (!*(_BYTE *)(a6 + 16) || v44)
  {
    v45 = *(unsigned __int8 *)(a6 + 24);
    v46 = *(_DWORD *)(a6 + 20);
    if (!*(_BYTE *)(a6 + 24) || v46)
    {
      if (*((_BYTE *)a7 + 16))
      {
        v53 = *a7;
      }
      else
      {
        v42 = v40 | (v41 << 32);
        v53 = 0;
      }
      v54 = HIDWORD(v53);
      v55 = v53 & ~((int)v53 >> 31);
      v56 = v42 + v53;
      if ((int)v40 >= v56)
        LODWORD(v40) = v56;
      LODWORD(v42) = HIDWORD(v42) + v54;
      if ((int)v41 < HIDWORD(v42) + (int)v54)
        LODWORD(v42) = v41;
      if (v55 >= (int)v40 || (v57 = v54 & ~((int)v54 >> 31), (int)v57 >= (int)v42))
      {
        v55 = 0;
        v57 = 0;
        LODWORD(v40) = 0;
        LODWORD(v42) = 0;
      }
      v58 = (v40 - v55);
      v59 = (v42 - v57);
      v109 = (WTF *)(v55 | (unint64_t)(v57 << 32));
      v110 = v58 | (v59 << 32);
      v111 = 0;
      if (v43)
      {
        if (!v45)
          v46 = vcvtpd_s64_f64((double)v44 * (double)(int)v59 / (double)(int)v58);
      }
      else if (v45)
      {
        v44 = vcvtpd_s64_f64((double)v46 * (double)(int)v58 / (double)(int)v59);
      }
      else
      {
        v44 = v40 - v55;
        v46 = v42 - v57;
      }
      v60 = (float)v44;
      v61 = (float)v46;
      *(float *)&v104 = (float)v44;
      *((float *)&v104 + 1) = (float)v46;
      (*(void (**)(CFTypeRef *__return_ptr))(**((_QWORD **)v35 + 8) + 224))(&cf);
      WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&cf, a1, (float *)&v104, 1u, &v103, 1.0);
      v62 = cf;
      cf = 0;
      if (v62)
        CFRelease(v62);
      if (v103)
      {
        v63 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v35 + 8) + 200))(*((_QWORD *)v35 + 8));
        if ((v63 & 0xFE) != 0)
          v64 = v63;
        else
          v64 = 1;
        v99 = 0;
        v100 = v60;
        v101 = v61;
        v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
        *(float *)&v104 = (float)(int)v109;
        *((float *)&v104 + 1) = (float)SHIDWORD(v109);
        *(float *)&v105 = (float)(int)v58;
        *((float *)&v105 + 1) = (float)(int)v59;
        v66 = *(unsigned int *)(a6 + 28);
        v67 = (v66 << 16) + 0x10000;
        v68 = v66 >= 4;
        v69 = 0x20000;
        if (!v68)
          v69 = v67;
        v70 = 0x506070801020304uLL >> (8 * (v64 - 1));
        if (v64 > 8)
          LOBYTE(v70) = 1;
        if (*(_DWORD *)a6 == 1)
          v71 = v70;
        else
          v71 = v64;
        (*(void (**)(uint64_t, _DWORD *, uint64_t *, uint64_t *, unint64_t))(*(_QWORD *)v65 + 360))(v65, v35, &v99, &v104, v69 | ((unint64_t)(v71 & 0xF) << 12) | 0x221);
        v72 = *(_DWORD *)(a6 + 4);
        v73 = v103;
        v103 = 0;
        v74 = bmalloc::api::isoAllocate();
        *(_QWORD *)v74 = 0;
        *(_DWORD *)(v74 + 8) = 1;
        *(_QWORD *)(v74 + 16) = v73;
        *(_QWORD *)(v74 + 24) = 0;
        if (v72)
          v75 = 3;
        else
          v75 = 1;
        *(_BYTE *)(v74 + 32) = *(_BYTE *)(v74 + 32) & 0xF8 | v75;
        v104 = v74;
        v106 = 0;
        v76 = *a8;
        *a8 = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v76 + 16))(v76, &v104);
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        if (v106 != -1)
          ((void (*)(char *, uint64_t *))off_1E33D4E98[v106])(&v112, &v104);
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v104) = 8;
        v106 = 1;
        v77 = *a8;
        *a8 = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v77 + 16))(v77, &v104);
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
        if (v106 != -1)
          ((void (*)(uint64_t *, uint64_t *))off_1E33D4E98[v106])(&v99, &v104);
      }
      v78 = v103;
      v103 = 0;
      if (!v78)
      {
LABEL_104:
        v49 = v111;
        if (v111 == -1)
          goto LABEL_45;
        goto LABEL_42;
      }
      v79 = *(_QWORD *)(v78 + 8);
      if (__ldaxr((unsigned __int8 *)v79))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v79))
      {
        goto LABEL_92;
      }
      MEMORY[0x19AEA534C](v79);
LABEL_92:
      v81 = *(_QWORD *)(v79 + 8);
      v82 = v81 - 1;
      *(_QWORD *)(v79 + 8) = v81 - 1;
      if (v81 == 1)
      {
        v95 = *(_QWORD *)(v79 + 16);
        v83 = *(_QWORD *)(v79 + 24);
        *(_QWORD *)(v79 + 24) = 0;
        v84 = v95 != 0;
      }
      else
      {
        v83 = 0;
        v84 = 1;
      }
      v85 = __ldxr((unsigned __int8 *)v79);
      if (v85 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v79))
        {
LABEL_99:
          if (!v82)
          {
            if (v83)
              (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
            if (!v84)
              WTF::fastFree((WTF *)v79, v50);
          }
          goto LABEL_104;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v79);
      goto LABEL_99;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v109) = 8;
  v111 = 1;
  v47 = v110;
  v110 = 0;
  LOBYTE(v104) = 8;
  v105 = v47;
  v106 = 1;
  v48 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v48 + 16))(v48, &v104);
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  if (v106 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E33D4E98[v106])(&v99, &v104);
  v49 = 1;
LABEL_42:
  ((void (*)(uint64_t *, WTF **))off_1E33D4EA8[v49])(&v104, &v109);
LABEL_45:
  if (v107)
  {
    if (v107[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v107 + 8))();
    else
      --v107[2];
  }
  if (*(_DWORD *)(v23 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  else
    --*(_DWORD *)(v23 + 8);
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v108, v50);
}

WTF::StringImpl *WebCore::PendingImageBitmap::fetch(uint64_t a1, uint64_t *a2, _OWORD *a3, __int128 *a4, uint64_t *a5)
{
  uint64_t v6;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  __int128 v33;
  WTF::StringImpl *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;

  if (*(_BYTE *)(a1 + 276))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v43) = 8;
    DWORD2(v44) = 1;
    v6 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, &v43);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (DWORD2(v44) != -1)
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E33D4E98[DWORD2(v44)])(&v42, &v43);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x158);
    v13 = v12;
    v40 = *a4;
    v41 = *((_DWORD *)a4 + 4);
    *(_DWORD *)(v12 + 24) = 1;
    v14 = a1;
    if (!*(_BYTE *)(a1 + 274))
    {
      v15 = a1 - 192;
      v16 = *(_QWORD *)(a1 + 512);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
          v15 = v17;
      }
      v14 = v15 + 192;
    }
    *(_QWORD *)v12 = &off_1E33A18C0;
    *(_QWORD *)(v12 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v12, (WebCore::ScriptExecutionContext *)v14);
    *(_QWORD *)v13 = &off_1E33A0540;
    *(_QWORD *)(v13 + 16) = 0;
    if (*(_BYTE *)(v14 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195C89E0CLL);
    }
    v42 = v13;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v14 + 128), &v42, (uint64_t)&v43);
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)v13 = &off_1E33D4F50;
    *(_QWORD *)(v13 + 32) = &unk_1E33D4FC8;
    *(_QWORD *)(v13 + 48) = &off_1E33AEE88;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 64) = 0;
    v18 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = v13 + 32;
    v20 = *(unsigned int **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v18;
    if (!v20)
      goto LABEL_39;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v19);
    }
    v18 = *(_QWORD *)(v13 + 40);
    if (v18)
    {
LABEL_39:
      do
        v23 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v23 + 1, (unsigned int *)v18));
    }
    *(_QWORD *)(v13 + 120) = 0;
    *(_QWORD *)(v13 + 72) = v18;
    *(_QWORD *)(v13 + 80) = &off_1E31F4A18;
    *(_QWORD *)(v13 + 88) = 0;
    *(_QWORD *)(v13 + 96) = 0;
    *(_QWORD *)(v13 + 112) = 0;
    WTF::URL::invalidate((WTF::URL *)(v13 + 120));
    *(_BYTE *)(v13 + 208) = 0;
    *(_OWORD *)(v13 + 192) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    v24 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v24 += 2;
    *(_QWORD *)(v13 + 224) = 0;
    *(_QWORD *)(v13 + 232) = 0;
    *(_QWORD *)(v13 + 216) = v24;
    *(_BYTE *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 244) = 0;
    *(_WORD *)(v13 + 252) = 0;
    v25 = *a2;
    *a2 = 0;
    *(_QWORD *)(v13 + 256) = v25;
    v26 = a3[1];
    *(_OWORD *)(v13 + 264) = *a3;
    *(_OWORD *)(v13 + 280) = v26;
    *(_OWORD *)(v13 + 296) = v40;
    *(_DWORD *)(v13 + 312) = v41;
    v27 = *a5;
    *a5 = 0;
    *(_QWORD *)(v13 + 328) = 0;
    *(_QWORD *)(v13 + 336) = 0;
    *(_QWORD *)(v13 + 320) = v27;
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v13);
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v28 = 1;
    ++*(_DWORD *)(v13 + 24);
    *(_QWORD *)(v28 + 8) = v13;
    ++*(_QWORD *)(v13 + 16);
    v30 = *(WTF **)(v13 + 336);
    *(_QWORD *)(v13 + 336) = v28;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        v37 = *((_QWORD *)v30 + 1);
        --*(_QWORD *)(v37 + 16);
        *((_QWORD *)v30 + 1) = 0;
        if (*(_DWORD *)(v37 + 24) == 1)
        {
          WebCore::PendingImageBitmap::~PendingImageBitmap((WebCore::PendingImageBitmap *)v37, v29);
          WTF::fastFree(v38, v39);
        }
        else
        {
          --*(_DWORD *)(v37 + 24);
        }
        WTF::fastFree(v30, v29);
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
    v31 = *(_QWORD *)(v13 + 256);
    v32 = *(WTF::StringImpl **)(v31 + 80);
    if (v32)
      *(_DWORD *)v32 += 2;
    v43 = v32;
    v33 = *(_OWORD *)(v31 + 104);
    v44 = *(_OWORD *)(v31 + 88);
    v45 = v33;
    WebCore::FileReaderLoader::start((WebCore::FileReaderLoader *)(v13 + 48), (WebCore::ScriptExecutionContext *)a1, (const WTF::URL *)&v43);
    result = v43;
    v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v34);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_DWORD *)(v13 + 24) == 1)
    {
      WebCore::PendingImageBitmap::~PendingImageBitmap((WebCore::PendingImageBitmap *)v13, v34);
      return (WTF::StringImpl *)WTF::fastFree(v35, v36);
    }
    else
    {
      --*(_DWORD *)(v13 + 24);
    }
  }
  return result;
}

uint64_t WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  const void *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float v34;
  unint64_t v35;
  CGColorSpace *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  CGColorSpace *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const void *v49;
  CFTypeRef v50;
  const void *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  _BOOL8 v65;
  int v66;
  const void *v67;
  const void *v68;
  CFTypeRef v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  const void *v101;
  int v102;
  uint64_t *v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  CGColorSpaceRef v108;
  uint64_t v109;
  uint64_t *v110;
  CFTypeRef cf;
  int v112;
  unint64_t v113;
  const void *v114;
  int v115;
  char v116;
  float v117[4];

  v6 = *a2;
  v7 = *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      if ((v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v8 & 0x3FFFFFFFFLL) + v12)
      {
        v15 = *(_QWORD *)(v6 + 4);
        v16 = *(unsigned __int8 *)(a3 + 16);
        v17 = *(_DWORD *)(a3 + 12);
        if (*(_BYTE *)(a3 + 16) && !v17
          || (v18 = *(unsigned __int8 *)(a3 + 24), v19 = *(_DWORD *)(a3 + 20), *(_BYTE *)(a3 + 24)) && !v19)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          LOBYTE(v113) = 8;
          v115 = 1;
          v20 = v114;
          v114 = 0;
          LOBYTE(v110) = 8;
          cf = v20;
          v112 = 1;
          v21 = *a5;
          *a5 = 0;
          (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v21 + 16))(v21, &v110);
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (v112 != -1)
            ((void (*)(uint64_t **, uint64_t **))off_1E33D4E98[v112])(&v103, &v110);
          v22 = 1;
          return ((uint64_t (*)(uint64_t **, unint64_t *))off_1E33D4EA8[v22])(&v110, &v113);
        }
        v23 = HIDWORD(v15);
        if (*((_BYTE *)a4 + 16))
          v24 = a4[1];
        else
          v24 = *(_QWORD *)(v6 + 4);
        if (*((_BYTE *)a4 + 16))
          v25 = *a4;
        else
          v25 = 0;
        v26 = HIDWORD(v25);
        v27 = v25 & ~((int)v25 >> 31);
        v28 = HIDWORD(v25) & ~(SHIDWORD(v25) >> 31);
        v29 = v24 + v25;
        if ((int)v15 >= v29)
          LODWORD(v15) = v29;
        LODWORD(v24) = HIDWORD(v24) + v26;
        if ((int)v23 < HIDWORD(v24) + (int)v26)
          LODWORD(v24) = v23;
        if (v27 >= (int)v15 || (int)v28 >= (int)v24)
        {
          v27 = 0;
          v28 = 0;
          LODWORD(v15) = 0;
          LODWORD(v24) = 0;
        }
        v31 = (v15 - v27);
        v32 = (v24 - v28);
        v113 = v27 | (unint64_t)(v28 << 32);
        v114 = (const void *)(v31 | (v32 << 32));
        v101 = v114;
        v115 = 0;
        if (v16)
        {
          if (!v18)
          {
            v33 = vcvtpd_s64_f64((double)v17 * (double)(int)v32 / (double)(int)v31);
            goto LABEL_39;
          }
        }
        else
        {
          v17 = v15 - v27;
          v33 = v24 - v28;
          if (!v18)
            goto LABEL_39;
          v17 = vcvtpd_s64_f64((double)v19 * (double)(int)v31 / (double)(int)v32);
        }
        v33 = v19;
LABEL_39:
        v34 = (float)v17;
        v117[0] = (float)v17;
        v117[1] = (float)v33;
        if (*(_BYTE *)(v6 + 24) == 1)
        {
          v93 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
          if (v93 != -1)
          {
            v110 = &v109;
            v103 = (uint64_t *)&v110;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v36 = (CGColorSpace *)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
        }
        else
        {
          v35 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v35 != -1)
          {
            v110 = &v109;
            v103 = (uint64_t *)&v110;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v36 = (CGColorSpace *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
        }
        v108 = v36;
        if (v36)
        {
          CFRetain(v36);
          WebCore::ImageBitmap::createImageBuffer(&v108, (uint64_t)a1, v117, 1u, &v109, 1.0);
          v108 = 0;
          CFRelease(v36);
        }
        else
        {
          WebCore::ImageBitmap::createImageBuffer(&v108, (uint64_t)a1, v117, 1u, &v109, 1.0);
          v108 = 0;
        }
        v37 = v109;
        if (!v109)
        {
          WebCore::ImageBitmap::createBlankImageBuffer((WebCore::ImageBitmap *)&v110, a1, 1);
LABEL_73:
          v112 = 0;
          v62 = *a5;
          *a5 = 0;
          (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v62 + 16))(v62, &v110);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
          if (v112 != -1)
            result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E33D4E98[v112])(&v103, &v110);
LABEL_111:
          v83 = v109;
          v109 = 0;
          if (!v83)
            goto LABEL_128;
          v84 = *(_QWORD *)(v83 + 8);
          if (__ldaxr((unsigned __int8 *)v84))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v84))
          {
            goto LABEL_116;
          }
          result = MEMORY[0x19AEA534C](v84);
LABEL_116:
          v86 = *(_QWORD *)(v84 + 8);
          v87 = v86 - 1;
          *(_QWORD *)(v84 + 8) = v86 - 1;
          if (v86 == 1)
          {
            v91 = *(_QWORD *)(v84 + 16);
            v88 = *(_QWORD *)(v84 + 24);
            *(_QWORD *)(v84 + 24) = 0;
            v89 = v91 != 0;
          }
          else
          {
            v88 = 0;
            v89 = 1;
          }
          v90 = __ldxr((unsigned __int8 *)v84);
          if (v90 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v84))
            {
LABEL_123:
              if (!v87)
              {
                if (v88)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
                if (!v89)
                  result = WTF::fastFree((WTF *)v84, v61);
              }
LABEL_128:
              v22 = v115;
              if (v115 == -1)
                return result;
              return ((uint64_t (*)(uint64_t **, unint64_t *))off_1E33D4EA8[v22])(&v110, &v113);
            }
          }
          else
          {
            __clrex();
          }
          result = WTF::Lock::unlockSlow((WTF::Lock *)v84);
          goto LABEL_123;
        }
        v102 = v32;
        v100 = *(_DWORD *)(a3 + 4);
        v38 = *a2;
        v40 = (unint64_t *)(*a2 + 4);
        v39 = *(_DWORD *)v40;
        if (v113)
        {
          v41 = *(_DWORD *)(v38 + 8);
          goto LABEL_48;
        }
        v41 = *(_DWORD *)(v38 + 8);
        if (v39 != (_DWORD)v31 || v41 != v102)
          goto LABEL_48;
        if (v17 == (_DWORD)v31)
        {
          v63 = v102;
          if (v33 == v102)
          {
            v41 = v102;
            v39 = v31;
            if (*(_DWORD *)a3 != 1)
            {
              LOWORD(v110) = 1;
              if (*(_BYTE *)(v38 + 24))
              {
                if (*(_BYTE *)(v38 + 24) == 1)
                {
                  v98 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
                  if (v98 != -1)
                  {
                    v103 = &v107;
                    *(_QWORD *)v117 = &v103;
                    std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                  }
                  v68 = (const void *)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
                }
                else
                {
                  v99 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                  if (v99 != -1)
                  {
                    v103 = &v107;
                    *(_QWORD *)v117 = &v103;
                    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                  }
                  v68 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                }
                cf = v68;
                v65 = v100 == 0;
                v66 = v100;
                v67 = v101;
                if (!v68)
                  goto LABEL_85;
              }
              else
              {
                v64 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                v65 = v100 == 0;
                v66 = v100;
                v67 = v101;
                if (v64 != -1)
                {
                  v103 = &v107;
                  *(_QWORD *)v117 = &v103;
                  std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                }
                v68 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                if (!WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
                  goto LABEL_85;
              }
              CFRetain(v68);
LABEL_85:
              WebCore::ByteArrayPixelBuffer::create((uint64_t)&v110, v40, *(_QWORD *)(v38 + 16), &v103);
              v69 = cf;
              cf = 0;
              if (v69)
                CFRelease(v69);
              v110 = 0;
              cf = v67;
              *(_QWORD *)v117 = 0;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **, float *, _BOOL8))(*(_QWORD *)v37 + 96))(v37, v103, &v110, v117, v65);
              v70 = v103;
              v103 = 0;
              if (v70)
              {
                if (*((_DWORD *)v70 + 2) == 1)
                  (*(void (**)(uint64_t *))(*v70 + 8))(v70);
                else
                  --*((_DWORD *)v70 + 2);
              }
              v71 = v109;
              v109 = 0;
              v72 = bmalloc::api::isoAllocate();
              *(_QWORD *)v72 = 0;
              *(_DWORD *)(v72 + 8) = 1;
              *(_QWORD *)(v72 + 16) = v71;
              *(_QWORD *)(v72 + 24) = 0;
              if (v66)
                v73 = 3;
              else
                v73 = 1;
              *(_BYTE *)(v72 + 32) = *(_BYTE *)(v72 + 32) & 0xF8 | v73;
              v110 = (uint64_t *)v72;
              goto LABEL_73;
            }
LABEL_48:
            v42 = v113;
            v117[0] = (float)v39;
            v117[1] = (float)v41;
            if (*(_BYTE *)(v38 + 24))
            {
              if (*(_BYTE *)(v38 + 24) == 1)
              {
                v94 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
                if (v94 != -1)
                {
                  v110 = &v107;
                  v103 = (uint64_t *)&v110;
                  std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                }
                v45 = (CGColorSpace *)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
              }
              else
              {
                v96 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                if (v96 != -1)
                {
                  v110 = &v107;
                  v103 = (uint64_t *)&v110;
                  std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                }
                v45 = (CGColorSpace *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
              }
              v106 = (uint64_t)v45;
              v44 = v102;
              if (v45)
                goto LABEL_52;
            }
            else
            {
              v43 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
              v44 = v102;
              if (v43 != -1)
              {
                v110 = &v107;
                v103 = (uint64_t *)&v110;
                std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
              }
              v45 = (CGColorSpace *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
              v106 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
              if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
              {
LABEL_52:
                CFRetain(v45);
                WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&v106, (uint64_t)a1, v117, 1u, &v107, 1.0);
                v106 = 0;
                CFRelease(v45);
                goto LABEL_53;
              }
            }
            WebCore::ImageBitmap::createImageBuffer((CGColorSpaceRef *)&v106, (uint64_t)a1, v117, 1u, &v107, 1.0);
            v106 = 0;
LABEL_53:
            v46 = v107;
            if (!v107)
            {
              WebCore::ImageBitmap::createBlankImageBuffer((WebCore::ImageBitmap *)&v110, a1, 1);
              v112 = 0;
              v74 = *a5;
              *a5 = 0;
              (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v74 + 16))(v74, &v110);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
              if (v112 != -1)
                result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E33D4E98[v112])(&v103, &v110);
LABEL_94:
              v75 = v107;
              v107 = 0;
              if (!v75)
                goto LABEL_111;
              v76 = *(_QWORD *)(v75 + 8);
              if (__ldaxr((unsigned __int8 *)v76))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v76))
              {
                goto LABEL_99;
              }
              result = MEMORY[0x19AEA534C](v76);
LABEL_99:
              v78 = *(_QWORD *)(v76 + 8);
              v79 = v78 - 1;
              *(_QWORD *)(v76 + 8) = v78 - 1;
              if (v78 == 1)
              {
                v92 = *(_QWORD *)(v76 + 16);
                v80 = *(_QWORD *)(v76 + 24);
                *(_QWORD *)(v76 + 24) = 0;
                v81 = v92 != 0;
              }
              else
              {
                v80 = 0;
                v81 = 1;
              }
              v82 = __ldxr((unsigned __int8 *)v76);
              if (v82 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v76))
                {
LABEL_106:
                  if (!v79)
                  {
                    if (v80)
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
                    if (!v81)
                      result = WTF::fastFree((WTF *)v76, v61);
                  }
                  goto LABEL_111;
                }
              }
              else
              {
                __clrex();
              }
              result = WTF::Lock::unlockSlow((WTF::Lock *)v76);
              goto LABEL_106;
            }
            v47 = *a2;
            LOWORD(v110) = 1;
            if (*(_BYTE *)(v47 + 24))
            {
              if (*(_BYTE *)(v47 + 24) == 1)
              {
                v95 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
                if (v95 != -1)
                {
                  v103 = (uint64_t *)&v116;
                  *(_QWORD *)v117 = &v103;
                  std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                }
                v49 = (const void *)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
              }
              else
              {
                v97 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                if (v97 != -1)
                {
                  v103 = (uint64_t *)&v116;
                  *(_QWORD *)v117 = &v103;
                  std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                }
                v49 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
              }
              cf = v49;
              v44 = v102;
              if (!v49)
                goto LABEL_59;
            }
            else
            {
              v48 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
              if (v48 != -1)
              {
                v103 = (uint64_t *)&v116;
                *(_QWORD *)v117 = &v103;
                std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
              }
              v49 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
              cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
              if (!WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
                goto LABEL_59;
            }
            CFRetain(v49);
LABEL_59:
            WebCore::ByteArrayPixelBuffer::create((uint64_t)&v110, (unint64_t *)(v47 + 4), *(_QWORD *)(v47 + 16), &v103);
            v50 = cf;
            cf = 0;
            if (v50)
              CFRelease(v50);
            v51 = *(const void **)(*a2 + 4);
            v110 = 0;
            cf = v51;
            *(_QWORD *)v117 = 0;
            (*(void (**)(uint64_t, uint64_t *, uint64_t **, float *, BOOL))(*(_QWORD *)v46 + 96))(v46, v103, &v110, v117, v100 == 0);
            v52 = v103;
            v103 = 0;
            if (v52)
            {
              if (*((_DWORD *)v52 + 2) == 1)
                (*(void (**)(uint64_t *))(*v52 + 8))(v52);
              else
                --*((_DWORD *)v52 + 2);
            }
            v103 = 0;
            v104 = v34;
            v105 = (float)v33;
            v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 16))(v109);
            *(float *)&v110 = (float)(int)v42;
            *((float *)&v110 + 1) = (float)SHIDWORD(v42);
            *(float *)&cf = (float)(int)v31;
            *((float *)&cf + 1) = (float)v44;
            v54 = *(unsigned int *)(a3 + 28);
            if (v54 >= 4)
              v55 = 131617;
            else
              v55 = (v54 << 16) + 66081;
            v56 = 4096;
            if (*(_DWORD *)a3 == 1)
              v56 = 0x4000;
            (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **, uint64_t))(*(_QWORD *)v53 + 384))(v53, v107, &v103, &v110, v56 | v55);
            v57 = v109;
            v109 = 0;
            v58 = bmalloc::api::isoAllocate();
            *(_QWORD *)v58 = 0;
            *(_DWORD *)(v58 + 8) = 1;
            *(_QWORD *)(v58 + 16) = v57;
            *(_QWORD *)(v58 + 24) = 0;
            if (v100)
              v59 = 3;
            else
              v59 = 1;
            *(_BYTE *)(v58 + 32) = *(_BYTE *)(v58 + 32) & 0xF8 | v59;
            v110 = (uint64_t *)v58;
            v112 = 0;
            v60 = *a5;
            *a5 = 0;
            (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v60 + 16))(v60, &v110);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
            if (v112 != -1)
              result = ((uint64_t (*)(float *, uint64_t **))off_1E33D4E98[v112])(v117, &v110);
            goto LABEL_94;
          }
        }
        else
        {
          v63 = v102;
        }
        v41 = v63;
        v39 = v31;
        goto LABEL_48;
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v113) = 8;
  v115 = 1;
  v13 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v13 + 16))(v13, &v113);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v115 != -1)
    return ((uint64_t (*)(uint64_t **, unint64_t *))off_1E33D4E98[v115])(&v110, &v113);
  return result;
}

void WebCore::ImageData::pixelBuffer(WebCore::ImageData *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  const void *v5;
  CFTypeRef v6;
  unint64_t v7;
  __int16 v8;
  CFTypeRef cf;
  char v10;
  char **v11;
  char *v12;

  v8 = 1;
  if (*((_BYTE *)this + 24) && *((_BYTE *)this + 24) == 1)
  {
    v7 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
    if (v7 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v5 = (const void *)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
  }
  else
  {
    v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v4 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v5 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  cf = v5;
  if (v5)
    CFRetain(v5);
  WebCore::ByteArrayPixelBuffer::create((uint64_t)&v8, (unint64_t *)((char *)this + 4), *((_QWORD *)this + 2), a2);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void WebCore::ImageBitmap::~ImageBitmap(WebCore::ImageBitmap *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::ImageData::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  WebCore::DestinationColorSpace *v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char **v11;
  char *v12;

  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v5 = (WebCore::DestinationColorSpace *)CGColorSpaceEqualToColorSpace();
  if ((_DWORD)v5)
  {
    result = WTF::fastMalloc((WTF *)0x20);
    v7 = 0;
LABEL_5:
    v8 = *a1;
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 4) = *(_QWORD *)(v8 + 32);
    v9 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(result + 16) = v9;
    *(_BYTE *)(result + 24) = v7;
    *a2 = result;
    return result;
  }
  WebCore::DestinationColorSpace::DisplayP3(v5);
  v7 = CGColorSpaceEqualToColorSpace();
  result = WTF::fastMalloc((WTF *)0x20);
  if ((v7 & 1) != 0)
    goto LABEL_5;
  __break(1u);
  return result;
}

uint64_t WebCore::ImageData::create@<X0>(uint64_t result@<X0>, const WebCore::DestinationColorSpace *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 v5;
  char v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    v5 = WebCore::toPredefinedColorSpace((WebCore *)(v4 + 24), a2);
    v6 = v5;
    v7 = v5;
    result = WTF::fastMalloc((WTF *)0x20);
    if (v7 <= 0xFF)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 4) = *(_QWORD *)(v4 + 32);
      v8 = *(_QWORD *)(v4 + 56);
      *(_QWORD *)(v4 + 56) = 0;
      *(_QWORD *)(result + 16) = v8;
      *(_BYTE *)(result + 24) = v6;
      *a3 = result;
      if (*(_DWORD *)(v4 + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      else
        --*(_DWORD *)(v4 + 8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::ImageData::create@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;

  v4 = *(unsigned int *)result;
  if ((v4 & 0x80000000) != 0
    || ((v5 = (_QWORD *)result, v6 = *(int *)(result + 4) * v4, !HIDWORD(v6))
      ? (v7 = v6 >> 30 == 0)
      : (v7 = 0),
        !v7
     || (result = (4 * v6), (result & 0x80000000) != 0)
     || (result = (uint64_t)JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreateUninitialized((JSC::ArrayBuffer *)result, (uint64_t *)&v11), !v11)))
  {
    *a3 = 0;
  }
  else
  {
    v9 = WTF::fastMalloc((WTF *)0x20);
    v10 = (uint64_t)v11;
    v11 = 0;
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 4) = *v5;
    *(_QWORD *)(v9 + 16) = v10;
    *(_BYTE *)(v9 + 24) = a2;
    *a3 = v9;
    result = (uint64_t)v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

JSC::ArrayBuffer *JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreateUninitialized@<X0>(JSC::ArrayBuffer *a1@<X0>, uint64_t *a2@<X8>)
{
  JSC::ArrayBuffer *result;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  JSC::ArrayBuffer *v11;

  JSC::ArrayBuffer::tryCreateUninitialized(a1);
  result = v11;
  if (v11)
  {
    if (*((_BYTE *)v11 + 64) && (v10 = *((_QWORD *)v11 + 4)) != 0)
      v5 = *(_QWORD *)(v10 + 32);
    else
      v5 = *((_QWORD *)v11 + 6);
    if (v5 < (unint64_t)a1)
    {
      *a2 = 0;
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)0x28);
      JSC::ArrayBufferView::ArrayBufferView();
      result = v11;
      *a2 = v6;
    }
    v7 = *(_DWORD *)result == 2;
    *(_DWORD *)result -= 2;
    if (v7)
    {
      JSC::ArrayBuffer::~ArrayBuffer(result);
      return (JSC::ArrayBuffer *)WTF::fastFree(v8, v9);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::ImageData::create@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *a1;
  if ((v5 & 0x80000000) != 0)
    goto LABEL_30;
  v7 = (int)a1[1] * v5;
  if (HIDWORD(v7))
    goto LABEL_30;
  if (v7 >> 30)
    goto LABEL_30;
  v8 = 4 * v7;
  if (v8 < 0)
    goto LABEL_30;
  v11 = *a2;
  v12 = *(_QWORD *)(*a2 + 32);
  if (!v12)
    goto LABEL_27;
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    goto LABEL_27;
  v14 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v14 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v13 & 0x3FFFFFFFFLL) + v14))
    goto LABEL_27;
  v15 = *(_BYTE *)(v11 + 6);
  if ((v15 & 3) == 0)
  {
    v16 = *(_QWORD *)(v11 + 16);
    goto LABEL_12;
  }
  if (*(_BYTE *)(v12 + 64) && (v25 = *(_QWORD *)(v12 + 32)) != 0)
  {
    v19 = atomic_load((unint64_t *)(v25 + 32));
    v15 = *(_BYTE *)(v11 + 6);
  }
  else
  {
    v19 = *(_QWORD *)(v12 + 48);
  }
  v20 = *(_QWORD *)(v11 + 8);
  if ((v15 & 4) == 0)
  {
    v16 = *(_QWORD *)(v11 + 16);
    v21 = v16 + v20 <= v19 && v19 >= v20;
    if (v21)
      v16 = 0;
    goto LABEL_12;
  }
  v21 = v19 >= v20;
  v22 = v19 - v20;
  if (v21)
  {
LABEL_27:
    v16 = 0;
    goto LABEL_12;
  }
  v23 = *(_BYTE *)(v11 + 4) - 4;
  if (v23 > 7u)
    LOBYTE(v24) = 0;
  else
    v24 = qword_1969F1210[(char)v23];
  v16 = (-1 << v24) & v22;
LABEL_12:
  if (v16 != v8)
  {
LABEL_30:
    result = 0;
    goto LABEL_14;
  }
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 4) = *(_QWORD *)a1;
  v18 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v18;
  *(_BYTE *)(result + 24) = a3;
LABEL_14:
  *a4 = result;
  return result;
}

_DWORD *WebCore::ImageData::createUninitialized@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  JSC::ArrayBuffer *v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *result;
  _DWORD *v17;

  if ((a1 & 0x80000000) != 0
    || ((v7 = a1, v8 = (int)a2 * (unint64_t)a1, !HIDWORD(v8)) ? (v9 = v8 >> 30 == 0) : (v9 = 0),
        !v9 || (v10 = (JSC::ArrayBuffer *)(4 * v8), (v10 & 0x80000000) != 0)))
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 32;
    *(_DWORD *)(a5 + 16) = 1;
  }
  else
  {
    JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreateUninitialized(v10, (uint64_t *)&v17);
    if (v17)
    {
      if ((*(_QWORD *)&a4 & 0xFF0000) != 0 && (a4 & 0xFF00) != 0)
        a3 = a4;
      v13 = WTF::fastMalloc((WTF *)0x20);
      v14 = 0;
      v15 = (uint64_t)v17;
      v17 = 0;
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 4) = v7 | (a2 << 32);
      *(_QWORD *)(v13 + 16) = v15;
      *(_BYTE *)(v13 + 24) = a3;
      *(_QWORD *)a5 = v13;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 32;
      v14 = 1;
    }
    *(_DWORD *)(a5 + 16) = v14;
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*result == 1)
        return (_DWORD *)JSC::ArrayBufferView::operator delete();
      else
        --*result;
    }
  }
  return result;
}

uint64_t WebCore::ImageData::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  JSC::ArrayBuffer *v9;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (!(_DWORD)result || !(_DWORD)a2)
  {
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
LABEL_17:
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if ((result & 0x80000000) != 0
    || ((v6 = result, v7 = (int)a2 * (unint64_t)result, !HIDWORD(v7))
      ? (v8 = v7 >> 30 == 0)
      : (v8 = 0),
        !v8 || (v9 = (JSC::ArrayBuffer *)(4 * v7), (v9 & 0x80000000) != 0)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 32;
    goto LABEL_17;
  }
  JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreateUninitialized(v9, &v15);
  if (v15)
  {
    JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::zeroFill(v15);
    v11 = 0;
    if ((*(_QWORD *)&a3 & 0xFF0000) != 0)
    {
      if ((a3 & 0xFF00) != 0)
        v11 = a3;
      else
        v11 = 0;
    }
    v12 = WTF::fastMalloc((WTF *)0x20);
    v13 = 0;
    v14 = v15;
    v15 = 0;
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 4) = v6 | (a2 << 32);
    *(_QWORD *)(v12 + 16) = v14;
    *(_BYTE *)(v12 + 24) = v11;
    *(_QWORD *)a4 = v12;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 32;
    v13 = 1;
  }
  *(_DWORD *)(a4 + 16) = v13;
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::ImageData::create@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (!v7)
    goto LABEL_12;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    goto LABEL_12;
  v10 = (uint64_t *)result;
  v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v11)
  {
    if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v8 & 0x3FFFFFFFFLL) + v11))
      goto LABEL_12;
  }
  v12 = *(_BYTE *)(v6 + 6);
  if ((v12 & 3) != 0)
  {
    if (*(_BYTE *)(v7 + 64) && (v39 = *(_QWORD *)(v7 + 32)) != 0)
    {
      v28 = atomic_load((unint64_t *)(v39 + 32));
      v12 = *(_BYTE *)(v6 + 6);
    }
    else
    {
      v28 = *(_QWORD *)(v7 + 48);
    }
    v29 = *(_QWORD *)(v6 + 8);
    if ((v12 & 4) != 0)
    {
      v30 = v28 >= v29;
      v31 = v28 - v29;
      if (v30)
      {
LABEL_12:
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_BYTE *)a5 = 8;
LABEL_16:
        v17 = 1;
        goto LABEL_17;
      }
      v32 = *(_BYTE *)(v6 + 4) - 4;
      if (v32 > 7u)
        LOBYTE(v33) = 0;
      else
        v33 = qword_1969F1210[(char)v32];
      v13 = (-1 << v33) & v31;
    }
    else
    {
      v13 = *(_QWORD *)(v6 + 16);
      v30 = v13 + v29 <= v28 && v28 >= v29;
      if (v30)
        LODWORD(v13) = 0;
    }
  }
  else
  {
    v13 = *(_QWORD *)(v6 + 16);
  }
  if ((_DWORD)v13)
    v14 = (v13 & 3) == 0;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_12;
  if (!a2
    || (v15 = v13 >> 2, v16 = v15 / a2, v15 % a2)
    || (a3 & 0xFF00000000) != 0 && (_DWORD)v16 != (_DWORD)a3)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 0;
    goto LABEL_16;
  }
  if ((a2 & 0x80000000) != 0
    || (v18 = v16 * (unint64_t)a2, (v18 & 0xFFFFFFFF00000000) != 0)
    || v18 >> 30
    || (v19 = 4 * v18, v19 < 0))
  {
LABEL_37:
    *(_BYTE *)a5 = 32;
    *(_QWORD *)(a5 + 8) = 0;
    goto LABEL_16;
  }
  v20 = *(_QWORD *)result;
  v21 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (!v21)
    goto LABEL_64;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    goto LABEL_64;
  v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v23 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v22 & 0x3FFFFFFFFLL) + v23))
    goto LABEL_64;
  v24 = *(_BYTE *)(v20 + 6);
  if ((v24 & 3) == 0)
  {
    v25 = *(_QWORD *)(v20 + 16);
    goto LABEL_31;
  }
  if (*(_BYTE *)(v21 + 64) && (v40 = *(_QWORD *)(v21 + 32)) != 0)
  {
    v34 = atomic_load((unint64_t *)(v40 + 32));
    v24 = *(_BYTE *)(v20 + 6);
  }
  else
  {
    v34 = *(_QWORD *)(v21 + 48);
  }
  v35 = *(_QWORD *)(v20 + 8);
  if ((v24 & 4) != 0)
  {
    if (v34 < v35)
    {
      v37 = *(_BYTE *)(v20 + 4) - 4;
      if (v37 > 7u)
        LOBYTE(v38) = 0;
      else
        v38 = qword_1969F1210[(char)v37];
      v25 = (-1 << v38) & (v34 - v35);
      goto LABEL_31;
    }
LABEL_64:
    v25 = 0;
    goto LABEL_31;
  }
  v25 = *(_QWORD *)(v20 + 16);
  if (v25 + v35 <= v34 && v34 >= v35)
    v25 = 0;
LABEL_31:
  if (v25 != v19)
    goto LABEL_37;
  v26 = 0;
  if ((*(_QWORD *)&a4 & 0xFF0000) != 0)
  {
    if ((a4 & 0xFF00) != 0)
      v26 = a4;
    else
      v26 = 0;
  }
  result = WTF::fastMalloc((WTF *)0x20);
  v17 = 0;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 4) = a2 | (unint64_t)(v16 << 32);
  v27 = *v10;
  *v10 = 0;
  *(_QWORD *)(result + 16) = v27;
  *(_BYTE *)(result + 24) = v26;
  *(_QWORD *)a5 = result;
LABEL_17:
  *(_DWORD *)(a5 + 16) = v17;
  return result;
}

void WebCore::ImageData::~ImageData(WebCore::ImageData *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (*v2 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v2;
  }
}

{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (*v2 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v2;
  }
}

uint64_t WebCore::operator<<()
{
  return WTF::TextStream::operator<<();
}

{
  return WTF::TextStream::operator<<();
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

{
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::operator<<();
}

{
  return WTF::TextStream::operator<<();
}

uint64_t WebCore::ImageDocument::imageElement(WebCore::ImageDocument *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 441);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

void WebCore::ImageDocument::imageUpdated(WebCore::ImageDocument *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  if (*((_BYTE *)this + 3536))
    return;
  v2 = *((_QWORD *)this + 441);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
  {
LABEL_7:
    v4 = 1;
    goto LABEL_8;
  }
  v4 = 0;
  *(_DWORD *)(v3 + 24) += 2;
LABEL_8:
  WebCore::Document::updateStyleIfNeeded(this);
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 176) + 24);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    LODWORD(v14) = 0;
    v13 = 0;
    if ((v4 & 1) != 0)
      goto LABEL_20;
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL;
  if (v8 && (*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_44;
  }
  v9 = *((_QWORD *)this + 66);
  v10 = 1.0;
  if (v9)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
      v10 = *(float *)(v11 + 592);
  }
  v12 = WebCore::CachedImage::imageSizeForRenderer(v7, v8, 0, v10);
  v13 = v12;
  v14 = HIDWORD(v12);
  if ((v4 & 1) == 0)
  {
LABEL_18:
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
LABEL_20:
  if ((int)v14 < 1)
    return;
  if (v13 < 1)
    return;
  *((_BYTE *)this + 3536) = 1;
  if (!*((_BYTE *)this + 3537))
    return;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 66) + 8) + 24) + 8) + 48);
  if ((float)((float)v13 * 0.015625) <= (*(float (**)(uint64_t))(*(_QWORD *)v15 + 160))(v15))
    goto LABEL_33;
  v16 = 0;
  v17 = v13 >> 6;
  do
  {
    ++v16;
    v18 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v18);
  if (v16 < 0 || (v19 = __OFADD__(v16, 19), v20 = v16 + 19, v19) || __OFADD__(v20, 6))
  {
    v28 = 0;
    goto LABEL_43;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v20 + 6), 1, (int8x16_t *)"width=", 6u, v13 >> 6, (int8x16_t *)",viewport-fit=cover", 0x13u, &v28);
  if (!v28)
  {
LABEL_43:
    __break(0xC471u);
LABEL_44:
    JUMPOUT(0x195C8B994);
  }
  WebCore::Document::processViewport((uint64_t)this, (uint64_t *)&v28, 2u);
  v22 = v28;
  v28 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_33:
  v23 = *((_QWORD *)this + 66);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 24);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v26 + 48) + 16);
          LODWORD(v28) = v13 >> 6;
          HIDWORD(v28) = v14 >> 6;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v27 + 1584))(v27, &v28);
        }
      }
    }
  }
}

void WebCore::ImageDocumentParser::appendBytes(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  __n128 v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WebCore::CachedResource *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  WebCore::DocumentLoader *v78;
  void *v79;
  const WebCore::FragmentedSharedBuffer *v80;
  uint64_t v81;
  WebCore::CachedImage *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  WTF *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v98;
  WTF *v99;
  uint64_t v100;
  WTF *v101;
  unsigned int *v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  char v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  char v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  char v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  char v115;
  _QWORD *v116;
  WTF::StringImpl *v117;
  char v118;
  const WebCore::FragmentedSharedBuffer *v119;
  WTF::StringImpl *v120;
  char v121;
  uint64_t v122;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  if ((*(_WORD *)(v2 + 3358) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C8C2E0);
  }
  v3 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v3 + 237))
  {
    if (!*(_BYTE *)(v3 + 236))
      return;
  }
  else if ((*(_QWORD *)(v3 + 680) & 0x1000000) == 0)
  {
    return;
  }
  v4 = *(_QWORD *)(v2 + 3528);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    v5 = bmalloc::api::isoAllocate();
    v6 = v5;
    *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v5 + 24) = 0x101C00000002;
    *(_QWORD *)(v5 + 32) = 0;
    v7 = v2 + 96;
    *(_QWORD *)(v5 + 40) = v2 + 96;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    ++*(_DWORD *)(v2 + 3324);
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 88) = 0;
    v8 = WebCore::HTMLNames::htmlTag;
    if (WebCore::HTMLNames::htmlTag)
      ++*(_DWORD *)WebCore::HTMLNames::htmlTag;
    *(_QWORD *)(v5 + 96) = v8;
    *(_QWORD *)(v5 + 104) = 0;
    *(_QWORD *)v5 = off_1E33BF070;
    WebCore::ContainerNode::appendChild(v2, (WebCore::Node *)v5, (uint64_t)&v119);
    if (v121)
    {
      v10 = v120;
      v120 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x189, 3, 0, 100.0);
    v11 = *(_QWORD *)(v2 + 528);
    if (v11)
    {
      v12 = *(unsigned int **)(v11 + 8);
      if (v12)
      {
        v13 = v12 + 2;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        WebCore::LocalFrame::injectUserScripts(v12, 0);
        do
        {
          v15 = __ldaxr(v13);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v13));
        if (!v16)
        {
          atomic_store(1u, v13);
          v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v87 = off_1E31FE290;
          v87[1] = v13;
          v116 = v87;
          WTF::ensureOnMainThread();
          v88 = v116;
          v116 = 0;
          if (v88)
            (*(void (**)(_QWORD *))(*v88 + 8))(v88);
        }
      }
    }
    v17 = bmalloc::api::isoAllocate();
    v18 = v17;
    *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v17 + 24) = 0x101C00000002;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = v7;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    ++*(_DWORD *)(v2 + 3324);
    *(_QWORD *)(v17 + 80) = 0;
    *(_QWORD *)(v17 + 88) = 0;
    v19 = WebCore::HTMLNames::headTag;
    if (WebCore::HTMLNames::headTag)
      ++*(_DWORD *)WebCore::HTMLNames::headTag;
    *(_QWORD *)(v17 + 96) = v19;
    *(_QWORD *)(v17 + 104) = 0;
    *(_QWORD *)v17 = off_1E33BDFC0;
    WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v17, (uint64_t)&v116);
    if (v118)
    {
      v21 = v117;
      v117 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    v22 = *(_QWORD *)(v2 + 528);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v23 + 280) + 88);
        if (!v24)
        {
LABEL_152:
          v25 = 1;
LABEL_32:
          v26 = bmalloc::api::isoAllocate();
          v27 = v26;
          *(_OWORD *)(v26 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v26 + 24) = 0x101C00000002;
          *(_QWORD *)(v26 + 32) = 0;
          *(_QWORD *)(v26 + 40) = v7;
          *(_OWORD *)(v26 + 48) = 0u;
          *(_OWORD *)(v26 + 64) = 0u;
          ++*(_DWORD *)(v2 + 3324);
          *(_QWORD *)(v26 + 80) = 0;
          *(_QWORD *)(v26 + 88) = 0;
          v28 = WebCore::HTMLNames::bodyTag;
          if (WebCore::HTMLNames::bodyTag)
            ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
          *(_QWORD *)(v26 + 96) = v28;
          *(_QWORD *)(v26 + 104) = 0;
          *(_QWORD *)v26 = off_1E33B5118;
          WTF::AtomStringImpl::add();
          v110 = v113;
          WebCore::Element::setAttribute((WebCore::Element *)v27, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, &v110, 0, &v113, v29);
          if (v115)
          {
            v31 = v114;
            v114 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v30);
              else
                *(_DWORD *)v31 -= 2;
            }
          }
          v32 = v110;
          v110 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::destroy(v32, v30);
              if (!v24)
                goto LABEL_46;
LABEL_42:
              WebCore::ResourceResponse::platformLazyInit(v24 + 1272, 1);
              if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [2]>::contains<WTF::String>((unsigned __int8 ***)WebCore::MIMETypeRegistry::isPDFMIMEType(WTF::String const&)::set, (uint64_t *)(v24 + 1312)))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v107 = v110;
                WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v27, (WTF::StringImpl *)0x3D, (uint64_t)&v107, 0, 0);
                v34 = v107;
                v107 = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, v33);
                  else
                    *(_DWORD *)v34 -= 2;
                }
              }
LABEL_46:
              WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v27, (uint64_t)&v110);
              if (v112)
              {
                v36 = v111;
                v111 = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, v35);
                  else
                    *(_DWORD *)v36 -= 2;
                }
              }
              v37 = bmalloc::api::isoAllocate();
              v38 = (_QWORD *)WebCore::HTMLImageElement::HTMLImageElement(v37, (_DWORD **)&WebCore::HTMLNames::imgTag, v2, 0);
              *v38 = off_1E33D4818;
              v38[14] = &unk_1E33D4D70;
              v38[16] = &unk_1E33D4DD8;
              v38[19] = &unk_1E33D4E50;
              v39 = v38 + 19;
              if ((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFLL) == 0)
              {
                v40 = WTF::fastCompactMalloc((WTF *)0x28);
                *(_DWORD *)v40 = 1;
                *(_QWORD *)(v40 + 16) = 0;
                *(_QWORD *)(v40 + 24) = 0;
                *(_QWORD *)(v40 + 8) = v2;
                *(_BYTE *)(v40 + 32) = 0;
                v42 = *(_QWORD *)(v2 + 16);
                *(_QWORD *)(v2 + 16) = v42 & 0xFFFF000000000000 | v40;
                v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
                if (v43)
                {
                  do
                  {
                    v44 = __ldaxr(v43);
                    v45 = v44 - 1;
                  }
                  while (__stlxr(v45, v43));
                  if (!v45)
                  {
                    atomic_store(1u, v43);
                    v102 = v43;
                    v98 = v43[7];
                    if ((_DWORD)v98)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v102 + 2), (WTF::StringImpl *)(*((_QWORD *)v102 + 2) + 32 * v98));
                    v99 = (WTF *)*((_QWORD *)v102 + 2);
                    if (v99)
                    {
                      *((_QWORD *)v102 + 2) = 0;
                      v102[6] = 0;
                      WTF::fastFree(v99, v41);
                    }
                    WTF::fastFree((WTF *)v102, v41);
                  }
                }
              }
              v46 = (unsigned int *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFLL);
              if (v46)
              {
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 + 1, v46));
              }
              *(_QWORD *)(v37 + 304) = v46;
              WebCore::ActiveDOMObject::suspendIfNeeded(v39);
              WTF::AtomStringImpl::add();
              v104 = v107;
              WebCore::Element::setAttribute((WebCore::Element *)v37, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, &v104, 0, &v107, v48);
              if (v109)
              {
                v50 = v108;
                v108 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, v49);
                  else
                    *(_DWORD *)v50 -= 2;
                }
              }
              v51 = v104;
              v104 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v49);
                else
                  *(_DWORD *)v51 -= 2;
              }
              *(_BYTE *)(*(_QWORD *)(v37 + 176) + 128) |= 0x10u;
              v52 = *(WTF::StringImpl **)(v2 + 736);
              if (v52)
              {
                if ((*((_BYTE *)v52 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v52 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(v52, v49);
                  v52 = v104;
                }
              }
              v104 = v52;
              v53 = *(_QWORD *)(v37 + 104);
              if (!v53)
                goto LABEL_78;
              v54 = *(_DWORD *)(v53 + 4);
              if ((v54 & 1) != 0)
              {
                v55 = *(uint64_t **)(v53 + 40);
                v56 = *(_DWORD *)(v53 + 52);
                if (!v56)
                {
LABEL_78:
                  v57 = 0xFFFFFFFFLL;
LABEL_79:
                  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v37, v57, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v104, 0);
                  v60 = v104;
                  v104 = 0;
                  if (v60)
                  {
                    if (*(_DWORD *)v60 == 2)
                      WTF::StringImpl::destroy(v60, v59);
                    else
                      *(_DWORD *)v60 -= 2;
                  }
                  v61 = *(_QWORD *)(*(_QWORD *)(v37 + 176) + 24);
                  if (v61)
                  {
                    if (v24)
                    {
                      v62 = *(WebCore::CachedResource **)(v61 + 8);
                      if (v62)
                        WebCore::CachedResource::setResponse(v62, (const WebCore::ResourceResponse *)(v24 + 1272));
                    }
                  }
                  WebCore::ContainerNode::appendChild(v27, (WebCore::Node *)v37, (uint64_t)&v104);
                  if (v106)
                  {
                    v64 = v105;
                    v105 = 0;
                    if (v64)
                    {
                      if (*(_DWORD *)v64 == 2)
                        WTF::StringImpl::destroy(v64, v63);
                      else
                        *(_DWORD *)v64 -= 2;
                    }
                  }
                  *(_BYTE *)(*(_QWORD *)(v37 + 176) + 128) &= ~0x10u;
                  if (*(_BYTE *)(v2 + 3537))
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v65 = (WTF::StringImpl *)v122;
                    v103 = v122;
                    WebCore::Document::processViewport(v2, &v103, 2u);
                    if (v65)
                    {
                      if (*(_DWORD *)v65 == 2)
                        WTF::StringImpl::destroy(v65, v63);
                      else
                        *(_DWORD *)v65 -= 2;
                    }
                  }
                  if ((*(_QWORD *)(v37 + 16) & 0xFFFFFFFFFFFFLL) == 0)
                  {
                    v66 = WTF::fastCompactMalloc((WTF *)0x28);
                    *(_DWORD *)v66 = 1;
                    *(_QWORD *)(v66 + 16) = 0;
                    *(_QWORD *)(v66 + 24) = 0;
                    *(_QWORD *)(v66 + 8) = v37;
                    *(_BYTE *)(v66 + 32) = 0;
                    v67 = *(_QWORD *)(v37 + 16);
                    *(_QWORD *)(v37 + 16) = v67 & 0xFFFF000000000000 | v66;
                    v68 = v67 & 0xFFFFFFFFFFFFLL;
                    if ((v67 & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      do
                      {
                        v69 = __ldaxr((unsigned int *)v68);
                        v70 = v69 - 1;
                      }
                      while (__stlxr(v70, (unsigned int *)v68));
                      if (!v70)
                      {
                        atomic_store(1u, (unsigned int *)v68);
                        v100 = *(unsigned int *)(v68 + 28);
                        if ((_DWORD)v100)
                          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v68 + 16), (WTF::StringImpl *)(*(_QWORD *)(v68 + 16) + 32 * v100));
                        v101 = *(WTF **)(v68 + 16);
                        if (v101)
                        {
                          *(_QWORD *)(v68 + 16) = 0;
                          *(_DWORD *)(v68 + 24) = 0;
                          WTF::fastFree(v101, v63);
                        }
                        WTF::fastFree((WTF *)v68, v63);
                      }
                    }
                  }
                  v71 = (unsigned int *)(*(_QWORD *)(v37 + 16) & 0xFFFFFFFFFFFFLL);
                  if (v71)
                  {
                    do
                      v72 = __ldaxr(v71);
                    while (__stlxr(v72 + 1, v71));
                  }
                  v73 = *(_QWORD *)(v2 + 3528);
                  *(_QWORD *)(v2 + 3528) = v71;
                  if (v73)
                  {
                    do
                    {
                      v74 = __ldaxr((unsigned int *)v73);
                      v75 = v74 - 1;
                    }
                    while (__stlxr(v75, (unsigned int *)v73));
                    if (!v75)
                    {
                      atomic_store(1u, (unsigned int *)v73);
                      v85 = *(unsigned int *)(v73 + 28);
                      if ((_DWORD)v85)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v73 + 16), (WTF::StringImpl *)(*(_QWORD *)(v73 + 16) + 32 * v85));
                      v86 = *(WTF **)(v73 + 16);
                      if (v86)
                      {
                        *(_QWORD *)(v73 + 16) = 0;
                        *(_DWORD *)(v73 + 24) = 0;
                        WTF::fastFree(v86, v63);
                      }
                      WTF::fastFree((WTF *)v73, v63);
                    }
                  }
                  if (*(_DWORD *)(v37 + 24) == 2)
                  {
                    if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v37, v63);
                  }
                  else
                  {
                    *(_DWORD *)(v37 + 24) -= 2;
                  }
                  if (*(_DWORD *)(v27 + 24) == 2)
                  {
                    if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v27, v63);
                  }
                  else
                  {
                    *(_DWORD *)(v27 + 24) -= 2;
                  }
                  if ((v25 & 1) == 0)
                  {
                    if (*(_DWORD *)(v24 + 24) == 1)
                      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
                    else
                      --*(_DWORD *)(v24 + 24);
                  }
                  if (*(_DWORD *)(v18 + 24) == 2)
                  {
                    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v18, v63);
                  }
                  else
                  {
                    *(_DWORD *)(v18 + 24) -= 2;
                  }
                  if (*(_DWORD *)(v6 + 24) == 2)
                  {
                    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v6, v63);
                  }
                  else
                  {
                    *(_DWORD *)(v6 + 24) -= 2;
                  }
                  goto LABEL_114;
                }
              }
              else
              {
                v55 = (uint64_t *)(v53 + 32);
                v56 = v54 >> 5;
                if (!v56)
                  goto LABEL_78;
              }
              v57 = 0;
              while (1)
              {
                v58 = *v55;
                if (*v55 == WebCore::HTMLNames::srcAttr
                  || *(_QWORD *)(v58 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
                  && *(_QWORD *)(v58 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
                {
                  goto LABEL_79;
                }
                ++v57;
                v55 += 2;
                if (v56 == v57)
                  goto LABEL_78;
              }
            }
            *(_DWORD *)v32 -= 2;
          }
          if (!v24)
            goto LABEL_46;
          goto LABEL_42;
        }
        if (*(_QWORD *)(v23 + 296) == v2)
        {
          v25 = 0;
          ++*(_DWORD *)(v24 + 24);
          goto LABEL_32;
        }
      }
    }
    v24 = 0;
    goto LABEL_152;
  }
LABEL_114:
  v76 = *(_QWORD *)(v2 + 528);
  if (v76)
  {
    v77 = *(_QWORD *)(v76 + 8);
    if (v77)
    {
      if (*(_QWORD *)(*(_QWORD *)(v77 + 280) + 88))
      {
        if (*(_QWORD *)(v77 + 296) == v2)
          v78 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v77 + 280) + 88);
        else
          v78 = 0;
      }
      else
      {
        v78 = 0;
      }
      WebCore::DocumentLoader::mainResourceData(v78, &v119);
      v80 = v119;
      if (v119)
      {
        v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 3528) + 8) + 176) + 24);
        if (v81)
        {
          v82 = *(WebCore::CachedImage **)(v81 + 8);
          if (v82)
            WebCore::CachedImage::updateBufferInternal(v82, v119);
        }
        v119 = 0;
        do
        {
          v83 = __ldaxr((unsigned int *)v80);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, (unsigned int *)v80));
        if (!v84)
        {
          atomic_store(1u, (unsigned int *)v80);
          v89 = *((unsigned int *)v80 + 5);
          if ((_DWORD)v89)
          {
            v90 = *((_QWORD *)v80 + 1);
            v91 = v90 + 16 * v89;
            do
            {
              v92 = *(unsigned int **)(v90 + 8);
              *(_QWORD *)(v90 + 8) = 0;
              if (v92)
              {
                do
                {
                  v93 = __ldaxr(v92);
                  v94 = v93 - 1;
                }
                while (__stlxr(v94, v92));
                if (!v94)
                {
                  atomic_store(1u, v92);
                  v95 = v92[6];
                  if ((_DWORD)v95 != -1)
                    ((void (*)(_QWORD **, unsigned int *))off_1E33D5038[v95])(&v116, v92 + 2);
                  v92[6] = -1;
                  WTF::fastFree((WTF *)v92, v79);
                }
              }
              v90 += 16;
            }
            while (v90 != v91);
          }
          v96 = (WTF *)*((_QWORD *)v80 + 1);
          if ((const WebCore::FragmentedSharedBuffer *)((char *)v80 + 24) != v96 && v96 != 0)
          {
            *((_QWORD *)v80 + 1) = 0;
            *((_DWORD *)v80 + 4) = 0;
            WTF::fastFree(v96, v79);
          }
          WTF::fastFree(v80, v79);
        }
      }
      WebCore::ImageDocument::imageUpdated((WebCore::ImageDocument *)v2);
    }
  }
}

unsigned int *WebCore::ImageDocumentParser::finish(WebCore::ImageDocumentParser *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::DocumentLoader *v10;
  WebCore::FragmentedSharedBuffer *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore::FragmentedSharedBuffer *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  __int16 v21;
  uint64_t v22;
  float v23;
  double v24;
  int v25;
  double v26;
  int v27;
  uint64_t PathComponent;
  unint64_t v29;
  __n128 v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;
  unint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int16 v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringBuilder *v52;
  __n128 v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  WTF *v67;
  WTF::StringImpl *v69;
  unint64_t v70;
  WTF::StringImpl *v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  WTF::StringImpl *v76[2];
  int v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  WebCore::FragmentedSharedBuffer *v81;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  if ((*(_WORD *)(v3 + 3358) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C8C75CLL);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 728) + 12) <= 1u)
  {
    v4 = *(_QWORD *)(v3 + 3528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v5 + 176) + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v3 + 528);
            if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v9 + 280) + 88))
            {
              if (*(_QWORD *)(v9 + 296) == v3)
                v10 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v9 + 280) + 88);
              else
                v10 = 0;
            }
            else
            {
              v10 = 0;
            }
            WebCore::DocumentLoader::mainResourceData(v10, &v81);
            v11 = v81;
            if (v81)
            {
              v12 = *(_QWORD *)(*(_QWORD *)(v3 + 528) + 8);
              v13 = *(_QWORD *)(v12 + 296) == v3 ? *(_QWORD *)(*(_QWORD *)(v12 + 280) + 88) : 0;
              if (*(_BYTE *)(v13 + 3541))
              {
                WebCore::FragmentedSharedBuffer::copy(v81, (uint64_t *)v71);
                v15 = v71[0];
                v71[0] = 0;
                v81 = v15;
                do
                {
                  v16 = __ldaxr((unsigned int *)v11);
                  v17 = v16 - 1;
                }
                while (__stlxr(v17, (unsigned int *)v11));
                if (!v17)
                {
                  atomic_store(1u, (unsigned int *)v11);
                  v32 = *((unsigned int *)v11 + 5);
                  if ((_DWORD)v32)
                  {
                    v33 = *((_QWORD *)v11 + 1);
                    v34 = v33 + 16 * v32;
                    do
                    {
                      v35 = *(unsigned int **)(v33 + 8);
                      *(_QWORD *)(v33 + 8) = 0;
                      if (v35)
                      {
                        v36 = v35;
                        do
                        {
                          v37 = __ldaxr(v35);
                          v38 = v37 - 1;
                        }
                        while (__stlxr(v38, v35));
                        if (!v38)
                        {
                          atomic_store(1u, v35);
                          v39 = v35[6];
                          if ((_DWORD)v39 != -1)
                            ((void (*)(unint64_t *, unsigned int *))off_1E33D5038[v39])(&v70, v36 + 2);
                          v36[6] = -1;
                          WTF::fastFree((WTF *)v36, v14);
                        }
                      }
                      v33 += 16;
                    }
                    while (v33 != v34);
                  }
                  v40 = (WTF *)*((_QWORD *)v11 + 1);
                  if ((WebCore::FragmentedSharedBuffer *)((char *)v11 + 24) != v40 && v40 != 0)
                  {
                    *((_QWORD *)v11 + 1) = 0;
                    *((_DWORD *)v11 + 4) = 0;
                    WTF::fastFree(v40, v14);
                  }
                  WTF::fastFree(v11, v14);
                }
                WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v71, v14);
                v11 = v81;
              }
            }
            v77 = 0;
            v75 = 0u;
            *(_OWORD *)v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            *(_OWORD *)v71 = 0u;
            v72 = 0u;
            v78 = -1;
            v79 = -1;
            v80 = 0;
            WebCore::CachedImage::finishLoading((WebCore::CachedImage *)v7, v11, (const WebCore::NetworkLoadMetrics *)v71);
            v19 = v80;
            v80 = 0;
            if (v19)
              WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v19, v18);
            v20 = v76[1];
            v76[1] = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v18);
              else
                *(_DWORD *)v20 -= 2;
            }
            v21 = *(_WORD *)(v7 + 557);
            if ((v21 >> 5) - 3 >= 2)
              *(_WORD *)(v7 + 557) = v21 & 0xFF1F | 0x40;
            WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v3);
            v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 3528) + 8) + 64);
            if ((v22 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v22 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195C8C77CLL);
            }
            v24 = WebCore::CachedImage::imageSizeForRenderer(v7, v22 & 0xFFFFFFFFFFFFLL, 0) * 64.0;
            if (v24 >= 2147483650.0)
            {
              v25 = 0x7FFFFFFF;
            }
            else if (v24 <= -2147483650.0)
            {
              v25 = 0x80000000;
            }
            else
            {
              v25 = (int)v24;
            }
            v26 = v23 * 64.0;
            if (v26 >= 2147483650.0)
            {
              v27 = 0x7FFFFFFF;
            }
            else if (v26 <= -2147483650.0)
            {
              v27 = 0x80000000;
            }
            else
            {
              v27 = (int)v26;
            }
            v70 = (v25 >> 6) | ((unint64_t)(v27 >> 6) << 32);
            if (v25 < 0x40)
              goto LABEL_90;
            PathComponent = WTF::URL::lastPathComponent((WTF::URL *)(v3 + 736));
            v31 = (WTF::StringImpl *)PathComponent;
            {
              if ((_DWORD)v29)
              {
LABEL_42:
                PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v31, v29, (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, v71, v30);
                goto LABEL_78;
              }
            }
            else
            {
              v42 = v29;
              v43 = (WTF::StringImpl *)PathComponent;
              PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
              *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", (const char *)v29);
              *((_QWORD *)&xmmword_1ECE86C80 + 1) = v44;
              v71[0] = (WTF::StringImpl *)xmmword_1ECE86C80;
              v71[1] = v44;
              if (v44 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
              {
                if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v71))
                {
                  v45 = 165;
                }
                else
                {
                  v45 = 92;
                }
              }
              else
              {
                v45 = 92;
              }
              word_1ECE86C90 = v45;
              v31 = v43;
              v29 = v42;
              if ((_DWORD)v42)
                goto LABEL_42;
            }
            if ((v29 & 0xFF00000000) != 0)
              WTF::String::String();
            else
              WTF::String::String();
LABEL_78:
            if (!v71[0] || !*((_DWORD *)v71[0] + 1))
            {
              WTF::URL::host((WTF::URL *)(v3 + 736));
              if ((v46 & 0xFF00000000) != 0)
                WTF::String::String();
              else
                WTF::String::String();
              v48 = v69;
              v69 = 0;
              v49 = v71[0];
              v71[0] = v48;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                {
                  WTF::StringImpl::destroy(v49, v47);
                  v69 = 0;
                }
                else
                {
                  *(_DWORD *)v49 -= 2;
                }
              }
            }
            WebCore::imageTitle((WebCore *)v71, (const WTF::String *)&v70, (uint64_t)&v69);
            WebCore::Document::setTitle(v3, (WTF::StringImpl *)&v69, v53, v50, v51, v52);
            v55 = v69;
            v69 = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v54);
              else
                *(_DWORD *)v55 -= 2;
            }
            v56 = v71[0];
            v71[0] = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, v54);
              else
                *(_DWORD *)v56 -= 2;
            }
LABEL_90:
            WebCore::ImageDocument::imageUpdated((WebCore::ImageDocument *)v3);
            v81 = 0;
            if (v11)
            {
              do
              {
                v57 = __ldaxr((unsigned int *)v11);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, (unsigned int *)v11));
              if (!v58)
              {
                atomic_store(1u, (unsigned int *)v11);
                v60 = *((unsigned int *)v11 + 5);
                if ((_DWORD)v60)
                {
                  v61 = *((_QWORD *)v11 + 1);
                  v62 = v61 + 16 * v60;
                  do
                  {
                    v63 = *(unsigned int **)(v61 + 8);
                    *(_QWORD *)(v61 + 8) = 0;
                    if (v63)
                    {
                      do
                      {
                        v64 = __ldaxr(v63);
                        v65 = v64 - 1;
                      }
                      while (__stlxr(v65, v63));
                      if (!v65)
                      {
                        atomic_store(1u, v63);
                        v66 = v63[6];
                        if ((_DWORD)v66 != -1)
                          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33D5038[v66])(v71, v63 + 2);
                        v63[6] = -1;
                        WTF::fastFree((WTF *)v63, a2);
                      }
                    }
                    v61 += 16;
                  }
                  while (v61 != v62);
                }
                v67 = (WTF *)*((_QWORD *)v11 + 1);
                if ((WebCore::FragmentedSharedBuffer *)((char *)v11 + 24) != v67 && v67 != 0)
                {
                  *((_QWORD *)v11 + 1) = 0;
                  *((_DWORD *)v11 + 4) = 0;
                  WTF::fastFree(v67, a2);
                }
                WTF::fastFree(v11, a2);
              }
            }
          }
        }
      }
    }
  }
  return WebCore::Document::finishedParsing(v3, (WTF::StringImpl *)a2);
}

WebCore::ImageDocument *WebCore::ImageDocument::ImageDocument(WebCore::ImageDocument *this, WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  BOOL v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 17);
  v13 = 0;
  v12 = 0u;
  v7 = WebCore::Document::Document(this, a2, v6, a3, 5, 0, &v12);
  *(_QWORD *)v7 = off_1E33BA1B0;
  *(_QWORD *)(v7 + 192) = &unk_1E33BA500;
  *(_QWORD *)(v7 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v7 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v7 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v7 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v7 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v7 + 3512) = 0u;
  v9 = *(WTF::StringImpl **)(v7 + 1704);
  *((_QWORD *)this + 213) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = 0;
  *((_QWORD *)this + 24) = &unk_1E33D2EB8;
  *((_QWORD *)this + 36) = &unk_1E33D3078;
  *((_QWORD *)this + 63) = &unk_1E33D30A0;
  *((_QWORD *)this + 64) = &unk_1E33D30C8;
  *((_QWORD *)this + 68) = &unk_1E33D30F8;
  *(_QWORD *)this = off_1E33D2B68;
  *((_QWORD *)this + 69) = &unk_1E33D3120;
  *((_QWORD *)this + 441) = 0;
  *((_BYTE *)this + 3536) = 0;
  if ((*(_QWORD *)(*((_QWORD *)a2 + 17) + 696) & 0x800000000) != 0)
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 16) + 8) == (_QWORD)a2;
  *((_BYTE *)this + 3537) = v10;
  WebCore::Document::setCompatibilityMode((uint64_t)this, (void *)1);
  *((_BYTE *)this + 3385) = 1;
  return this;
}

unsigned int *WebCore::ImageDocument::createParser@<X0>(WebCore::ImageDocument *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A3D50;
  *(_WORD *)(v4 + 12) = 0;
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (result)
  {
    do
      v6 = __ldaxr(result);
    while (__stlxr(v6 + 1, result));
  }
  *(_QWORD *)(v4 + 16) = result;
  *(_QWORD *)v4 = off_1E33D4770;
  *a2 = v4;
  return result;
}

void WebCore::ImageDocumentElement::~ImageDocumentElement(WebCore::ImageDocumentElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 3528);
      *(_QWORD *)(v4 + 3528) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)v5));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)v5);
          v13 = *(unsigned int *)(v5 + 28);
          if ((_DWORD)v13)
          {
            v18 = v5;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v13));
            v5 = v18;
          }
          v14 = *(WTF **)(v5 + 16);
          if (v14)
          {
            *(_QWORD *)(v5 + 16) = 0;
            *(_DWORD *)(v5 + 24) = 0;
            v16 = v5;
            WTF::fastFree(v14, a2);
            v5 = v16;
          }
          WTF::fastFree((WTF *)v5, a2);
        }
      }
    }
    v8 = *((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v11 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v11)
        {
          v17 = v8;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
          v8 = v17;
        }
        v12 = *(WTF **)(v8 + 16);
        if (v12)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          v15 = v8;
          WTF::fastFree(v12, a2);
          v8 = v15;
        }
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 38) = 0;
  }
  WebCore::HTMLImageElement::~HTMLImageElement(this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ImageDocumentElement::~ImageDocumentElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::ImageDocumentElement::~ImageDocumentElement(WebCore::ImageDocumentElement *this, void *a2)
{
  WebCore::ImageDocumentElement::~ImageDocumentElement((WebCore::ImageDocumentElement *)((char *)this - 112), a2);
}

{
  WebCore::ImageDocumentElement::~ImageDocumentElement((WebCore::ImageDocumentElement *)((char *)this - 128), a2);
}

{
  WebCore::ImageDocumentElement::~ImageDocumentElement((WebCore::ImageDocumentElement *)((char *)this - 152), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ImageDocumentElement::~ImageDocumentElement((WebCore::ImageDocumentElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ImageDocumentElement::~ImageDocumentElement((WebCore::ImageDocumentElement *)((char *)this - 128), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ImageDocumentElement::~ImageDocumentElement((WebCore::ImageDocumentElement *)((char *)this - 152), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::ImageDocumentElement::didMoveToNewDocument(WebCore::ImageDocumentElement *this, WebCore::Document *a2, WebCore::Document *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *((_QWORD *)this + 38);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 3528);
      *(_QWORD *)(v7 + 3528) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v15 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v15)
          {
            v21 = v8;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v15));
            v8 = v21;
          }
          v16 = *(WTF **)(v8 + 16);
          if (v16)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            v19 = v8;
            WTF::fastFree(v16, a2);
            v8 = v19;
          }
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *((_QWORD *)this + 38);
      *((_QWORD *)this + 38) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          v17 = *(unsigned int *)(v11 + 28);
          if ((_DWORD)v17)
          {
            v22 = v11;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v17));
            v11 = v22;
          }
          v18 = *(WTF **)(v11 + 16);
          if (v18)
          {
            *(_QWORD *)(v11 + 16) = 0;
            *(_DWORD *)(v11 + 24) = 0;
            v20 = v11;
            WTF::fastFree(v18, a2);
            v11 = v20;
          }
          WTF::fastFree((WTF *)v11, a2);
        }
      }
    }
  }
  return WebCore::HTMLImageElement::didMoveToNewDocument((WebCore::ImageLoader **)this, a2, a3);
}

WTF::StringImpl **WebCore::ImageInputType::formControlType(WebCore::ImageInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "image";
    v2[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::image(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::image(void)::name;
}

uint64_t WebCore::ImageInputType::isFormDataAppendable(WebCore::ImageInputType *this)
{
  return 1;
}

uint64_t WebCore::ImageInputType::appendFormData(WebCore::ImageInputType *this, WebCore::DOMFormData *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if ((*(_WORD *)(v5 + 230) & 0x20) == 0)
      return 0;
  }
  else
  {
    if ((MEMORY[0xE6] & 0x20) == 0)
      return 0;
    v5 = 0;
  }
  v9 = *(WTF::StringImpl **)(v5 + 208);
  v8 = (uint64_t *)(v5 + 208);
  v7 = v9;
  if (!v9 && (v8 = (uint64_t *)MEMORY[0x1E0CBF3B8], (v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8]) == 0)
    || (v10 = *((_DWORD *)v7 + 1)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::number((WTF::String *)*((unsigned int *)this + 8));
    WebCore::DOMFormData::append(a2, &v27, &v26);
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v27;
    v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v22);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::number((WTF::String *)*((unsigned int *)this + 9));
    WebCore::DOMFormData::append(a2, &v27, &v26);
    v25 = v26;
    v26 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v18);
      else
        *(_DWORD *)v25 -= 2;
    }
    v21 = v27;
    v27 = 0;
    if (!v21)
      return 1;
    if (*(_DWORD *)v21 != 2)
    {
      *(_DWORD *)v21 -= 2;
      return 1;
    }
    goto LABEL_57;
  }
  *(_DWORD *)v7 += 2;
  if (v10 < 0 || __OFADD__(v10, 2))
  {
    v27 = 0;
    goto LABEL_62;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v10 + 2), (*((_DWORD *)v7 + 4) >> 2) & 1, (uint64_t)v7, (int8x16_t *)".x", 2u, &v27);
  if (!v27)
  {
LABEL_62:
    __break(0xC471u);
    goto LABEL_65;
  }
  WTF::String::number((WTF::String *)*((unsigned int *)this + 8));
  WebCore::DOMFormData::append(a2, &v27, &v26);
  v12 = v26;
  v26 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v27;
  v27 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v11);
  else
    *(_DWORD *)v7 -= 2;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(_DWORD *)(v14 + 4);
    *(_DWORD *)v14 += 2;
    if (v15 < 0 || (v16 = (v15 + 2), __OFADD__(v15, 2)))
    {
      v27 = 0;
      goto LABEL_64;
    }
    if ((*(_BYTE *)(v14 + 16) & 4) == 0)
    {
      v17 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    v16 = 2;
  }
  v17 = 1;
LABEL_29:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v16, v17, v14, (int8x16_t *)".y", 2u, &v27);
  if (!v27)
  {
LABEL_64:
    __break(0xC471u);
LABEL_65:
    JUMPOUT(0x195C8D338);
  }
  WTF::String::number((WTF::String *)*((unsigned int *)this + 9));
  WebCore::DOMFormData::append(a2, &v27, &v26);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v18);
      if (!v14)
        return 1;
      goto LABEL_37;
    }
    *(_DWORD *)v20 -= 2;
  }
  if (v14)
  {
LABEL_37:
    if (*(_DWORD *)v14 != 2)
    {
      *(_DWORD *)v14 -= 2;
      return 1;
    }
    v21 = (WTF::StringImpl *)v14;
LABEL_57:
    WTF::StringImpl::destroy(v21, v18);
  }
  return 1;
}

unsigned int *WebCore::ImageInputType::handleDOMActivateEvent(unsigned int *this, WebCore::Event *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t *v6;
  int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  double v11;
  double v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  *(_DWORD *)(v3 + 24) += 2;
  if ((*(_BYTE *)(v3 + 160) & 0x18) != 0)
    goto LABEL_5;
  v4 = *(_QWORD *)(v3 + 120);
  if (!v4)
    goto LABEL_5;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_5;
  v19 = this;
  v20 = v5;
  *(_DWORD *)(v5 + 24) += 2;
  *((_QWORD *)this + 4) = 0;
  v6 = (int32x2_t *)*((_QWORD *)a2 + 8);
  if (v6 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v6 + 88))(*((_QWORD *)a2 + 8)) && !v6[19].i8[0])
  {
    if (v6[19].i8[1])
    {
      v18 = v6[17].i32[0];
      v7 = v18 + 63;
      if (v18 >= 0)
        v7 = v6[17].i32[0];
      v9 = ((int)(v18 - (v7 & 0xFFFFFFC0) + 32) >> 6) + (v7 >> 6);
    }
    else
    {
      WebCore::MouseRelatedEvent::computeRelativePosition(v6);
      v7 = v6[17].i32[0];
      v9 = ((int)(v7 - (v8 & 0xFFFFFFC0) + 32) >> 6) + v7 / 64;
      if (v6[19].i8[0])
      {
        v10 = 0;
LABEL_19:
        *((_QWORD *)v19 + 4) = v10 | v9;
        goto LABEL_20;
      }
    }
    if (!v6[19].i8[1])
      WebCore::MouseRelatedEvent::computeRelativePosition(v6);
    v10 = (unint64_t)(((int)(v6[17].i32[1] - (v7 & 0xFFFFFFC0) + 32) >> 6) + v6[17].i32[1] / 64) << 32;
    goto LABEL_19;
  }
LABEL_20:
  WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8), 2u, 0);
  v14 = *(_QWORD *)(v3 + 120);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *((_QWORD *)v19 + 3);
      if (v16)
        v17 = *(WebCore::Node **)(v16 + 8);
      else
        v17 = 0;
      WebCore::HTMLFormElement::submitIfPossible(v15, a2, v17, 1, v11, v12, v13);
    }
  }
  this = (unsigned int *)v20;
  *((_DWORD *)a2 + 5) |= 0x80u;
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
LABEL_5:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::ImageInputType::createInputRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v7 = bmalloc::api::isoAllocate();
  result = WebCore::RenderImage::RenderImage(v7, 15, v6, a2, 1uLL, 0, 1.0);
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::ImageInputType::attributeChanged(WTF::StringImpl *this, const WebCore::QualifiedName *a2)
{
  uint64_t v2;
  WebCore::Element *v3;
  WebCore::ImageLoader *v4;
  WebCore::ImageLoader *v5;
  WTF *v6;
  void *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::altAttr)
  {
    if (*(_QWORD *)a2 != WebCore::HTMLNames::srcAttr)
      return this;
    v2 = *((_QWORD *)this + 3);
    if (!v2)
      return this;
    v3 = *(WebCore::Element **)(v2 + 8);
    if (!v3 || (*((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL) == 0)
      return this;
    if ((*(_BYTE *)((*((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v4 = (WebCore::ImageLoader *)*((_QWORD *)v3 + 31);
      if (!v4)
      {
        v4 = (WebCore::ImageLoader *)WTF::fastMalloc((WTF *)0x88);
        *(_QWORD *)WebCore::ImageLoader::ImageLoader(v4, v3) = off_1E33BFBF0;
        v5 = (WebCore::ImageLoader *)*((_QWORD *)v3 + 31);
        *((_QWORD *)v3 + 31) = v4;
        if (v5)
        {
          WebCore::ImageLoader::~ImageLoader(v5, a2);
          WTF::fastFree(v6, v7);
          v4 = (WebCore::ImageLoader *)*((_QWORD *)v3 + 31);
        }
      }
      v8 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *v8 += 2;
      v9 = (WTF::StringImpl *)*((_QWORD *)v4 + 12);
      *((_QWORD *)v4 + 12) = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      return WebCore::ImageLoader::updateFromElement((uint64_t)v4, 0);
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x195C8D720);
  }
  v10 = *((_QWORD *)this + 3);
  if (!v10)
    return this;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return this;
  this = (WTF::StringImpl *)(*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL);
  if (!this)
    return this;
  if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_24;
  if ((((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                              + 0x35)) == 1)
    return (WTF::StringImpl *)WebCore::RenderImage::updateAltText((uint64_t)this);
  return this;
}

void WebCore::ImageInputType::attach(WebCore::ImageInputType *this)
{
  uint64_t v2;
  WebCore::Element *v3;
  uint64_t v4;
  void *v5;
  WebCore::ImageLoader *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _BYTE v20[24];
  unsigned int **v21;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(WebCore::Element **)(v2 + 8);
  else
    v3 = 0;
  v4 = *((_QWORD *)v3 + 31);
  if (!v4)
  {
    v4 = WTF::fastMalloc((WTF *)0x88);
    *(_QWORD *)WebCore::ImageLoader::ImageLoader((WebCore::ImageLoader *)v4, v3) = off_1E33BFBF0;
    v6 = (WebCore::ImageLoader *)*((_QWORD *)v3 + 31);
    *((_QWORD *)v3 + 31) = v4;
    if (v6)
    {
      WebCore::ImageLoader::~ImageLoader(v6, v5);
      WTF::fastFree(v7, v8);
      v4 = *((_QWORD *)v3 + 31);
    }
  }
  WebCore::ImageLoader::updateFromElement(v4, 0);
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C8D8C4);
    }
    if ((*(_BYTE *)(v9 + 52) & 7) != 3 || (*(_BYTE *)(v9 + 53) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C8D8E4);
    }
    if ((*(_BYTE *)(v4 + 128) & 1) == 0)
    {
      v11 = *(_QWORD **)(v9 + 224);
      v12 = *(_QWORD *)(v4 + 24);
      if (v12)
      {
        do
          v13 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v13 + 1, (unsigned int *)v12));
        v19 = (unsigned int *)v12;
        v14 = *(_QWORD *)(v12 + 8);
        if (v14)
        {
          v21 = &v19;
          ++*(_DWORD *)(v14 + 548);
          v15 = *(_QWORD *)(v14 + 488);
          if (v15)
          {
            if (*(_QWORD *)(v15 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v14 + 464), (uint64_t *)&v21, (uint64_t)v20);
          }
        }
      }
      else
      {
        v19 = 0;
      }
      WebCore::RenderImageResource::setCachedImage(v11, (uint64_t *)&v19);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v19, v16);
      v17 = *(_QWORD *)(v4 + 24);
      if (!v17 || !*(_QWORD *)(v17 + 8))
      {
        v18 = v11[3];
        if (!v18 || !*(_QWORD *)(v18 + 8))
          WebCore::RenderImage::setImageSizeForAltText((WebCore::RenderImage *)v9, 0);
      }
    }
  }
}

uint64_t WebCore::ImageInputType::shouldRespectAlignAttribute(WebCore::ImageInputType *this)
{
  return 1;
}

uint64_t WebCore::ImageInputType::canBeSuccessfulSubmitButton(WebCore::ImageInputType *this)
{
  return 1;
}

uint64_t WebCore::ImageInputType::shouldRespectHeightAndWidthAttributes(WebCore::ImageInputType *this)
{
  return 1;
}

uint64_t WebCore::ImageInputType::height(WebCore::ImageInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  double v40;
  signed int v41;
  double v42;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD **)(*(_QWORD *)(v2 + 40) + 8);
  *((_DWORD *)v3 + 6) += 2;
  WebCore::Document::updateLayout((uint64_t)v3, 4u, v2);
  if (*((_DWORD *)v3 + 6) == 2)
    goto LABEL_52;
  *((_DWORD *)v3 + 6) -= 2;
  while (1)
  {
    v3 = (_QWORD *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
    if (v3)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C8DC5CLL);
      }
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C8DC7CLL);
      }
      v5 = *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0xA4);
      v6 = (*(uint64_t (**)(uint64_t))(*v3 + 1000))(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
      if (__OFSUB__(v5, v6))
        v7 = (v5 >> 31) + 0x7FFFFFFF;
      else
        v7 = v5 - v6;
      v8 = (*(uint64_t (**)(_QWORD *))(*v3 + 1008))(v3);
      if (__OFSUB__(v7, v8))
        v9 = (v7 >> 31) + 0x7FFFFFFF;
      else
        v9 = v7 - v8;
      v10 = (*(uint64_t (**)(_QWORD *))(*v3 + 1360))(v3);
      v11 = v10 << 6;
      if (v10 < -33554432)
        v11 = 0x80000000;
      if (v10 > 0x1FFFFFF)
        v11 = 0x7FFFFFFF;
      v12 = __OFSUB__(v9, v11);
      v13 = v9 - v11;
      if (v12)
        v13 = (v9 >> 31) + 0x7FFFFFFF;
      v14 = v13 & ~(v13 >> 31);
      v15 = (*(uint64_t (**)(_QWORD *))(*v3 + 928))(v3);
      if (__OFSUB__(v14, v15))
        v16 = 0x7FFFFFFF;
      else
        v16 = v14 - v15;
      v17 = (*(uint64_t (**)(_QWORD *))(*v3 + 936))(v3);
      v19 = v16 - v17;
      if (__OFSUB__(v16, v17))
        v19 = (v16 >> 31) + 0x7FFFFFFF;
      if ((*(_WORD *)(*(_QWORD *)(v3[11] + 40) + 584) & 0x100) != 0)
      {
        v46 = v19;
        v44 = (*(uint64_t (**)(_QWORD *))(*v3 + 1360))(v3);
        v19 = v46;
        v45 = v44 << 6;
        if (v44 > 0x1FFFFFF)
          v45 = 0x7FFFFFFF;
        if (v44 >= -33554432)
          v20 = v45;
        else
          v20 = 0x80000000;
      }
      else
      {
        v20 = 0;
      }
      v12 = __OFSUB__(v19, v20);
      v21 = v19 - v20;
      v22 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v22 = v21;
      v23 = (v22 & ~(v22 >> 31)) >> 6;
      v24 = *(float *)(v3[13] + 184);
      if (v24 != 1.0)
      {
        if (v24 <= 1.0)
          v41 = (v22 & ~(v22 >> 31)) >> 6;
        else
          v41 = v23 + 1;
        v42 = (double)v41 / v24 + dbl_1968DE9C0[(double)v41 / v24 < 0.0];
        if (v42 >= -2147483650.0 && v42 <= 2147483650.0)
          v23 = (int)v42;
        else
          v23 = 0;
      }
      goto LABEL_32;
    }
    v26 = *(_QWORD *)(v2 + 104);
    if (!v26)
    {
LABEL_46:
      v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      goto LABEL_47;
    }
    v27 = *(_DWORD *)(v26 + 4);
    if ((v27 & 1) != 0)
    {
      v28 = *(_QWORD *)(v26 + 40);
      LODWORD(v29) = *(_DWORD *)(v26 + 52);
      if (!(_DWORD)v29)
        goto LABEL_46;
    }
    else
    {
      v28 = v26 + 32;
      LODWORD(v29) = v27 >> 5;
      if (!(_DWORD)v29)
        goto LABEL_46;
    }
    v29 = v29;
    v30 = (uint64_t *)(v28 + 8);
    while (1)
    {
      v31 = *(v30 - 1);
      if (v31 == WebCore::HTMLNames::heightAttr
        || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
        && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
      {
        break;
      }
      v30 += 2;
      if (!--v29)
      {
        v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
LABEL_47:
    v32 = *v30;
    if (v32)
    {
      v33 = *(uint64_t **)(v32 + 8);
      v34 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v33 = 0;
      v34 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v33, v34, &v47);
    if (HIDWORD(v47) == 1)
      goto LABEL_57;
    if (!HIDWORD(v47))
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_52:
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  v23 = v47;
  if ((v47 & 0x80000000) != 0)
  {
LABEL_57:
    v35 = *(_QWORD *)(v2 + 248);
    if (v35 && (v36 = *(_QWORD *)(v35 + 24)) != 0 && (v37 = *(_QWORD *)(v36 + 8)) != 0)
    {
      v38 = *(_QWORD *)(v2 + 64);
      if ((v38 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v38 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C8DCE8);
      }
      WebCore::CachedImage::imageSizeForRenderer(v37, v38 & 0xFFFFFFFFFFFFLL, 0);
      v40 = v39 * 64.0;
      if (v40 >= 2147483650.0)
      {
        v23 = 0x1FFFFFFLL;
      }
      else if (v40 <= -2147483650.0)
      {
        v23 = 4261412864;
      }
      else
      {
        v23 = ((int)v40 / 64);
      }
    }
    else
    {
      v23 = 0;
    }
    goto LABEL_32;
  }
  if (!v2)
    return v23;
LABEL_32:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v18);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v23;
}

uint64_t WebCore::ImageInputType::width(WebCore::ImageInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  signed int v40;
  double v41;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD **)(*(_QWORD *)(v2 + 40) + 8);
  *((_DWORD *)v3 + 6) += 2;
  WebCore::Document::updateLayout((uint64_t)v3, 4u, v2);
  if (*((_DWORD *)v3 + 6) == 2)
    goto LABEL_52;
  *((_DWORD *)v3 + 6) -= 2;
  while (1)
  {
    v3 = (_QWORD *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
    if (v3)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C8E084);
      }
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C8E0A4);
      }
      v5 = *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0xA0);
      v6 = (*(uint64_t (**)(uint64_t))(*v3 + 1016))(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
      if (__OFSUB__(v5, v6))
        v7 = (v5 >> 31) + 0x7FFFFFFF;
      else
        v7 = v5 - v6;
      v8 = (*(uint64_t (**)(_QWORD *))(*v3 + 1024))(v3);
      if (__OFSUB__(v7, v8))
        v9 = (v7 >> 31) + 0x7FFFFFFF;
      else
        v9 = v7 - v8;
      v10 = (*(uint64_t (**)(_QWORD *))(*v3 + 1352))(v3);
      v11 = v10 << 6;
      if (v10 < -33554432)
        v11 = 0x80000000;
      if (v10 > 0x1FFFFFF)
        v11 = 0x7FFFFFFF;
      v12 = __OFSUB__(v9, v11);
      v13 = v9 - v11;
      if (v12)
        v13 = (v9 >> 31) + 0x7FFFFFFF;
      v14 = v13 & ~(v13 >> 31);
      v15 = (*(uint64_t (**)(_QWORD *))(*v3 + 944))(v3);
      if (__OFSUB__(v14, v15))
        v16 = 0x7FFFFFFF;
      else
        v16 = v14 - v15;
      v17 = (*(uint64_t (**)(_QWORD *))(*v3 + 952))(v3);
      v19 = v16 - v17;
      if (__OFSUB__(v16, v17))
        v19 = (v16 >> 31) + 0x7FFFFFFF;
      if ((*(_WORD *)(*(_QWORD *)(v3[11] + 40) + 584) & 0x100) != 0)
      {
        v45 = v19;
        v43 = (*(uint64_t (**)(_QWORD *))(*v3 + 1352))(v3);
        v19 = v45;
        v44 = v43 << 6;
        if (v43 > 0x1FFFFFF)
          v44 = 0x7FFFFFFF;
        if (v43 >= -33554432)
          v20 = v44;
        else
          v20 = 0x80000000;
      }
      else
      {
        v20 = 0;
      }
      v12 = __OFSUB__(v19, v20);
      v21 = v19 - v20;
      v22 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v22 = v21;
      v23 = (v22 & ~(v22 >> 31)) >> 6;
      v24 = *(float *)(v3[13] + 184);
      if (v24 != 1.0)
      {
        if (v24 <= 1.0)
          v40 = (v22 & ~(v22 >> 31)) >> 6;
        else
          v40 = v23 + 1;
        v41 = (double)v40 / v24 + dbl_1968DE9C0[(double)v40 / v24 < 0.0];
        if (v41 >= -2147483650.0 && v41 <= 2147483650.0)
          v23 = (int)v41;
        else
          v23 = 0;
      }
      goto LABEL_32;
    }
    v26 = *(_QWORD *)(v2 + 104);
    if (!v26)
    {
LABEL_46:
      v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      goto LABEL_47;
    }
    v27 = *(_DWORD *)(v26 + 4);
    if ((v27 & 1) != 0)
    {
      v28 = *(_QWORD *)(v26 + 40);
      LODWORD(v29) = *(_DWORD *)(v26 + 52);
      if (!(_DWORD)v29)
        goto LABEL_46;
    }
    else
    {
      v28 = v26 + 32;
      LODWORD(v29) = v27 >> 5;
      if (!(_DWORD)v29)
        goto LABEL_46;
    }
    v29 = v29;
    v30 = (uint64_t *)(v28 + 8);
    while (1)
    {
      v31 = *(v30 - 1);
      if (v31 == WebCore::HTMLNames::widthAttr
        || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
        && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
      {
        break;
      }
      v30 += 2;
      if (!--v29)
      {
        v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
LABEL_47:
    v32 = *v30;
    if (v32)
    {
      v33 = *(uint64_t **)(v32 + 8);
      v34 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v33 = 0;
      v34 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v33, v34, &v46);
    if (HIDWORD(v46) == 1)
      goto LABEL_57;
    if (!HIDWORD(v46))
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_52:
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  v23 = v46;
  if ((v46 & 0x80000000) != 0)
  {
LABEL_57:
    v35 = *(_QWORD *)(v2 + 248);
    if (v35 && (v36 = *(_QWORD *)(v35 + 24)) != 0 && (v37 = *(_QWORD *)(v36 + 8)) != 0)
    {
      v38 = *(_QWORD *)(v2 + 64);
      if ((v38 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v38 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C8E110);
      }
      v39 = WebCore::CachedImage::imageSizeForRenderer(v37, v38 & 0xFFFFFFFFFFFFLL, 0) * 64.0;
      if (v39 >= 2147483650.0)
      {
        v23 = 0x1FFFFFFLL;
      }
      else if (v39 <= -2147483650.0)
      {
        v23 = 4261412864;
      }
      else
      {
        v23 = ((int)v39 / 64);
      }
    }
    else
    {
      v23 = 0;
    }
    goto LABEL_32;
  }
  if (!v2)
    return v23;
LABEL_32:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v18);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v23;
}

_DWORD *WebCore::ImageInputType::resultForDialogSubmit@<X0>(_DWORD *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  size_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v4 = this[8];
  v3 = this[9];
  if ((v4 & 0x80000000) != 0)
  {
    v30 = -v4;
    v5 = 1;
    do
    {
      ++v5;
      v27 = v30 >= 0xA;
      v30 /= 0xAu;
    }
    while (v27);
  }
  else
  {
    v5 = 0;
    v6 = this[8];
    do
    {
      ++v5;
      v7 = v6 > 9;
      v6 /= 0xAu;
    }
    while (v7);
  }
  if ((v3 & 0x80000000) != 0)
  {
    v31 = -v3;
    v8 = 1;
    do
    {
      ++v8;
      v27 = v31 >= 0xA;
      v31 /= 0xAu;
    }
    while (v27);
  }
  else
  {
    v8 = 0;
    v9 = this[9];
    do
    {
      ++v8;
      v7 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v7);
  }
  if ((v8 & 0x80000000) == 0)
  {
    v10 = __OFADD__(v8, 1);
    v11 = v8 + 1;
    v12 = v10;
    if ((v5 & 0x80000000) == 0 && !v12)
    {
      v13 = (v5 + v11);
      if (!__OFADD__(v5, v11) && (v13 & 0x80000000) == 0)
      {
        this = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
        v14 = v32[0];
        if (v32[0])
        {
          v15 = v32[0] + 20;
          *(_DWORD *)v32[0] = 2;
          *(_DWORD *)(v14 + 4) = v13;
          *(_QWORD *)(v14 + 8) = v14 + 20;
          *(_DWORD *)(v14 + 16) = 4;
          v16 = 0;
          if ((v4 & 0x80000000) != 0)
          {
            v23 = -v4;
            v24 = v23;
            do
            {
              *((_BYTE *)&v32[1] + v16-- + 4) = (v24 % 0xA) | 0x30;
              v7 = v24 > 9;
              v24 /= 0xAu;
            }
            while (v7);
            v25 = v16 + 12;
            v26 = (char *)&v32[1] + v16 + 4;
            *v26 = 45;
            if (v16 + 14 <= 14)
            {
              if (v25 <= 12)
                v25 = 12;
              memcpy((void *)(v14 + 20), v26, v25 - v16 - 11);
            }
            v18 = 1;
            do
            {
              ++v18;
              v27 = v23 >= 0xA;
              v23 /= 0xAu;
            }
            while (v27);
          }
          else
          {
            v17 = v4;
            do
            {
              *((_BYTE *)&v32[1] + v16-- + 4) = (v17 % 0xA) | 0x30;
              v7 = v17 > 9;
              v17 /= 0xAu;
            }
            while (v7);
            if (v16 + 14 <= 13)
              memcpy((void *)(v14 + 20), (char *)&v32[1] + v16 + 5, -v16);
            v18 = 0;
            do
            {
              ++v18;
              v7 = v4 > 9;
              v4 /= 0xAu;
            }
            while (v7);
          }
          v19 = (_BYTE *)(v15 + v18);
          *v19 = 44;
          this = v19 + 1;
          v20 = 0;
          if ((v3 & 0x80000000) != 0)
          {
            v28 = -v3;
            do
            {
              *((_BYTE *)&v32[1] + v20-- + 4) = (v28 % 0xA) | 0x30;
              v7 = v28 > 9;
              v28 /= 0xAu;
            }
            while (v7);
            v29 = v20 + 12;
            v21 = (char *)&v32[1] + v20 + 4;
            *v21 = 45;
            if (v20 + 14 > 14)
              goto LABEL_28;
            if (v29 <= 12)
              v29 = 12;
            v22 = v29 - v20 - 11;
          }
          else
          {
            do
            {
              *((_BYTE *)&v32[1] + v20-- + 4) = (v3 % 0xA) | 0x30;
              v7 = v3 > 9;
              v3 /= 0xAu;
            }
            while (v7);
            if (v20 + 14 > 13)
              goto LABEL_28;
            v21 = (char *)&v32[1] + v20 + 5;
            v22 = -v20;
          }
          this = memcpy(this, v21, v22);
LABEL_28:
          *a2 = v14;
          return this;
        }
      }
    }
  }
  *a2 = 0;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::ImageInputType::dirAutoUsesValue(WebCore::ImageInputType *this)
{
  return 0;
}

uint64_t WebCore::inputModeForAttributeValue(WTF **this, const WTF::AtomString *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v4;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;

  if ((WTF::equalIgnoringASCIICase(*this, (const WTF::StringImpl *)WebCore::noneAtomData, a3) & 1) != 0)
    return 1;
  if ((WTF::equalIgnoringASCIICase(*this, (const WTF::StringImpl *)WebCore::textAtomData, v4) & 1) != 0)
    return 2;
  if ((WTF::equalIgnoringASCIICase(*this, (const WTF::StringImpl *)WebCore::telAtomData, v6) & 1) != 0)
    return 3;
  if ((WTF::equalIgnoringASCIICase(*this, (const WTF::StringImpl *)WebCore::urlAtomData, v7) & 1) != 0)
    return 4;
  if ((WTF::equalIgnoringASCIICase(*this, (const WTF::StringImpl *)WebCore::emailAtomData, v8) & 1) != 0)
    return 5;
  {
    v10 = (const WTF::StringImpl *)WebCore::InputModeNames::numeric(void)::mode;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v10 = (const WTF::StringImpl *)v14;
    WebCore::InputModeNames::numeric(void)::mode = v14;
  }
  if ((WTF::equalIgnoringASCIICase(*this, v10, v9) & 1) != 0)
    return 6;
  {
    v12 = (const WTF::StringImpl *)WebCore::InputModeNames::decimal(void)::mode;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v12 = (const WTF::StringImpl *)v14;
    WebCore::InputModeNames::decimal(void)::mode = v14;
  }
  if ((WTF::equalIgnoringASCIICase(*this, v12, v11) & 1) != 0)
    return 7;
  if (WTF::equalIgnoringASCIICase(*this, (const WTF::StringImpl *)WebCore::searchAtomData, v13))
    return 8;
  return 0;
}

uint64_t WebCore::HTMLVideoElement::isVideo(WebCore::HTMLVideoElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLVideoElement::hasVideo(WebCore::HTMLVideoElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 142);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 296))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

uint64_t WebCore::HTMLVideoElement::presentationType(WebCore::HTMLVideoElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLVideoElement::mediaPlayerRenderingCanBeAccelerated(WebCore::HTMLVideoElement *this)
{
  return *((unsigned __int8 *)this + 1888);
}

void `non-virtual thunk to'WebCore::HTMLVideoElement::~HTMLVideoElement(WebCore::HTMLVideoElement *this, void *a2)
{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 136), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 136), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 144), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 160), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 160), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 176), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 192), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 208), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 208), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 224), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 224), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 240), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 240), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 256), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 256), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 272), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 272), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 288), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLVideoElement::~HTMLVideoElement((WebCore::HTMLVideoElement *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLVideoElement::hasVideo(WebCore::HTMLVideoElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 125);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 296))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLVideoElement::presentationType(WebCore::HTMLVideoElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLVideoElement::mediaPlayerRenderingCanBeAccelerated(WebCore::HTMLVideoElement *this)
{
  return *((unsigned __int8 *)this + 1712);
}

void WebCore::HTMLWBRElement::~HTMLWBRElement(WebCore::HTMLWBRElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HiddenInputType::~HiddenInputType(WebCore::HiddenInputType *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::ImageDocumentParser::~ImageDocumentParser(WebCore::ImageDocumentParser *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33A3D50;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33A3D50;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::RawDataDocumentParser::flush(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, 0, 0);
}

void WebCore::ImageDocument::~ImageDocument(WebCore::ImageDocument *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 440);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 439);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document(this, a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 440);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 439);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

void `non-virtual thunk to'WebCore::ImageDocument::~ImageDocument(WebCore::ImageDocument *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 24) = off_1E33BA1B0;
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 416);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 415);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 192), a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 24) = off_1E33BA1B0;
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 416);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 415);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 404);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 403);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 288), a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 404);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 403);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 377);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 376);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 504), a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 377);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 376);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 504), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 376);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 375);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 512), a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 376);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 375);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 512), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 372);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 371);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 544), a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 372);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 371);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 544), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 371);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 370);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 552), a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v6 = *((_QWORD *)this + 371);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 370);
  if (v7)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v7, a2);
  WebCore::Document::~Document((WebCore::ImageDocument *)((char *)this - 552), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

void WebCore::ImageInputType::~ImageInputType(WebCore::ImageInputType *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    return WTF::RefCounted<WebCore::ImageBitmap>::deref(v2 + 8, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore7IntRectENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ImageBitmapImageObserver::~ImageBitmapImageObserver(WebCore::ImageBitmapImageObserver *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

__n128 WebCore::ImageBitmapImageObserver::sourceUrl@<Q0>(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  __n128 result;
  __n128 v4;

  v2 = (_DWORD *)this[2].n128_u64[1];
  if (v2)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  result = this[3];
  v4 = this[4];
  *(__n128 *)(a2 + 8) = result;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

uint64_t WebCore::ImageBitmapImageObserver::mimeType@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 24);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::ImageObserver::numberOfClients(WebCore::ImageObserver *this)
{
  return 0;
}

uint64_t WebCore::ImageBitmapImageObserver::expectedContentLength(WebCore::ImageBitmapImageObserver *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::ImageObserver::canDestroyDecodedData(WebCore::ImageObserver *this, const WebCore::Image *a2)
{
  return 1;
}

uint64_t WebCore::ImageObserver::allowsAnimation(WebCore::ImageObserver *this, const WebCore::Image *a2)
{
  return 1;
}

uint64_t WebCore::ImageObserver::layerBasedSVGEngineEnabled(WebCore::ImageObserver *this)
{
  return 0;
}

void WebCore::PendingImageBitmap::~PendingImageBitmap(WebCore::PendingImageBitmap *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::PendingImageBitmap::~PendingImageBitmap(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  WTF *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  WTF **v16;
  WTF *v17;
  WTF *v18;
  _BYTE v19[16];
  int v20;
  char v21;

  if (*((_QWORD *)this + 40))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19[0] = 8;
    v20 = 1;
    v3 = *((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v20 != -1)
      ((void (*)(char *, _BYTE *))off_1E33D4E98[v20])(&v21, v19);
  }
  v4 = (WTF *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v11 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v11 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v11 + 24) == 1)
      {
        WebCore::PendingImageBitmap::~PendingImageBitmap((WebCore::PendingImageBitmap *)v11);
        WTF::fastFree(v12, v13);
      }
      else
      {
        --*(_DWORD *)(v11 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_QWORD *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v5)
  {
    v6 = *(_DWORD *)v5 == 2;
    *(_DWORD *)v5 -= 2;
    if (v6)
    {
      v14 = v5[10];
      if (v14)
      {
        *(_QWORD *)(v14 + 8) = 3;
        v5[10] = 0;
      }
      if ((v5[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
      v16 = (WTF **)v5[1];
      if ((v16 & 1) == 0 && v16)
      {
        v18 = (WTF *)v5[1];
        v17 = *v16;
        if (*v16)
        {
          *(_QWORD *)v18 = 0;
          *((_DWORD *)v18 + 2) = 0;
          WTF::fastFree(v17, v15);
        }
        WTF::fastFree(v18, v15);
      }
      WTF::fastFree((WTF *)v5, v15);
    }
  }
  v7 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  WebCore::FileReaderLoader::~FileReaderLoader((WebCore::PendingImageBitmap *)((char *)this + 48), a2);
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v9);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v10);
}

uint64_t WebCore::PendingImageBitmap::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::PendingImageBitmap *WebCore::PendingImageBitmap::deref(WebCore::PendingImageBitmap *this, void *a2)
{
  WTF *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::PendingImageBitmap::~PendingImageBitmap(this, a2);
    return (WebCore::PendingImageBitmap *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::PendingImageBitmap::stop(uint64_t this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  WTF *v4;
  void *v5;

  v2 = *(WTF **)(this + 336);
  *(_QWORD *)(this + 336) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      --*(_QWORD *)(v3 + 16);
      *((_QWORD *)v2 + 1) = 0;
      if (*(_DWORD *)(v3 + 24) == 1)
      {
        WebCore::PendingImageBitmap::~PendingImageBitmap((WebCore::PendingImageBitmap *)v3, a2);
        WTF::fastFree(v4, v5);
      }
      else
      {
        --*(_DWORD *)(v3 + 24);
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

unsigned int *WebCore::PendingImageBitmap::didFinishLoading(WebCore::PendingImageBitmap *this, JSC::ArrayBuffer *a2)
{
  JSC::ArrayBuffer *v3;
  unsigned int *result;
  JSC::ArrayBuffer *v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  WTF **v9;
  WTF *v10;
  WTF *v11;
  JSC::ArrayBuffer *v12;
  JSC::ArrayBuffer *v13;

  v3 = (JSC::ArrayBuffer *)*((_QWORD *)this + 25);
  if (v3 && !*((_BYTE *)this + 253))
  {
    if (*((_DWORD *)this + 61) == *((_DWORD *)this + 62))
    {
      *(_DWORD *)v3 += 2;
      v12 = v3;
    }
    else
    {
      JSC::ArrayBuffer::create(v3, a2);
      v12 = v13;
      v13 = 0;
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v13);
    }
  }
  else
  {
    v12 = 0;
  }
  result = WebCore::PendingImageBitmap::createImageBitmapAndCallCompletionHandlerSoon(this, (uint64_t *)&v12);
  v5 = v12;
  if (v12)
  {
    v6 = *(_DWORD *)v12 == 2;
    *(_DWORD *)v12 -= 2;
    if (v6)
    {
      v7 = *((_QWORD *)v5 + 10);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        *((_QWORD *)v5 + 10) = 0;
      }
      if ((*((_BYTE *)v5 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::ArrayBuffer *)((char *)v5 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBuffer *)((char *)v5 + 16));
      v9 = (WTF **)*((_QWORD *)v5 + 1);
      if ((v9 & 1) == 0 && v9)
      {
        v11 = (WTF *)*((_QWORD *)v5 + 1);
        v10 = *v9;
        if (*v9)
        {
          *(_QWORD *)v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          WTF::fastFree(v10, v8);
        }
        WTF::fastFree(v11, v8);
      }
      return (unsigned int *)WTF::fastFree(v5, v8);
    }
  }
  return result;
}

unsigned int *WebCore::PendingImageBitmap::didFail(_QWORD *a1)
{
  unsigned int *result;
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;

  v9 = 0;
  result = WebCore::PendingImageBitmap::createImageBitmapAndCallCompletionHandlerSoon(a1, (uint64_t *)&v9);
  v2 = v9;
  if (v9)
  {
    v3 = *v9 == 2;
    *v9 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      return (unsigned int *)WTF::fastFree((WTF *)v2, v5);
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::PendingImageBitmap::~PendingImageBitmap(WebCore::PendingImageBitmap *this, void *a2)
{
  WebCore::PendingImageBitmap::~PendingImageBitmap((WebCore::PendingImageBitmap *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::PendingImageBitmap::~PendingImageBitmap((WebCore::PendingImageBitmap *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

unsigned int *`non-virtual thunk to'WebCore::PendingImageBitmap::didFinishLoading(WebCore::PendingImageBitmap *this, JSC::ArrayBuffer *a2)
{
  return WebCore::PendingImageBitmap::didFinishLoading((WebCore::PendingImageBitmap *)((char *)this - 32), a2);
}

unsigned int *`non-virtual thunk to'WebCore::PendingImageBitmap::didFail(uint64_t a1)
{
  return WebCore::PendingImageBitmap::didFail((_QWORD *)(a1 - 32));
}

unsigned int *WebCore::PendingImageBitmap::createImageBitmapAndCallCompletionHandlerSoon(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  void *v18;
  unsigned int *result;
  int v20;
  int v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  unsigned int *v26;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)a1[41];
  a1[41] = v3;
  if (v4)
  {
    v5 = *(_DWORD *)v4 == 2;
    *(_DWORD *)v4 -= 2;
    if (v5)
    {
      v22 = v4[10];
      if (v22)
      {
        *(_QWORD *)(v22 + 8) = 3;
        v4[10] = 0;
      }
      if ((v4[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v4 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v4 + 2));
      v24 = (WTF *)v4[1];
      if ((v24 & 1) == 0 && v24)
      {
        v25 = *(WTF **)v24;
        if (*(_QWORD *)v24)
        {
          *(_QWORD *)v24 = 0;
          *((_DWORD *)v24 + 2) = 0;
          WTF::fastFree(v25, v23);
        }
        WTF::fastFree(v24, v23);
      }
      WTF::fastFree((WTF *)v4, v23);
    }
  }
  v6 = a1[1];
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = (unsigned __int8 *)(v7 - 96);
    v9 = *(unsigned __int8 *)(v7 + 178);
    if (*(_BYTE *)(v7 + 178))
    {
      if (v9 == 1 || v9 == 2)
        ++*(_DWORD *)(v7 + 216);
    }
    else
    {
      *(_DWORD *)(v7 - 264) += 2;
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v8 + 104))(v8);
  ++*(_DWORD *)(v10 + 8);
  v11 = a1[5];
  if (v11)
    goto LABEL_48;
  v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = a1 + 4;
  v13 = (unsigned int *)a1[5];
  a1[5] = v11;
  if (!v13)
    goto LABEL_48;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  v11 = a1[5];
  if (v11)
  {
LABEL_48:
    do
      v16 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v16 + 1, (unsigned int *)v11));
  }
  v17 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v17 = &off_1E33D5010;
  *((_QWORD *)v17 + 1) = v11;
  v26 = v17;
  WebCore::EventLoopTaskGroup::queueTask(v10, 25, (uint64_t *)&v26);
  result = v26;
  v26 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  v20 = *(_DWORD *)(v10 + 8);
  if (!v20)
  {
    __break(0xC471u);
    JUMPOUT(0x195C90290);
  }
  *(_DWORD *)(v10 + 8) = v20 - 1;
  v21 = v8[274];
  if (v8[274])
  {
    if (v21 == 1)
    {
      if (*((_DWORD *)v8 + 78) == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v8 + 40))(v8);
      else
        --*((_DWORD *)v8 + 78);
    }
    else if (v21 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v8 + 78);
    }
  }
  else if (*((_DWORD *)v8 - 42) == 2)
  {
    if ((*((_WORD *)v8 - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 192), v18);
  }
  else
  {
    *((_DWORD *)v8 - 42) -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PendingImageBitmap::createImageBitmapAndCallCompletionHandlerSoon(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33D5010;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PendingImageBitmap::createImageBitmapAndCallCompletionHandlerSoon(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D5010;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PendingImageBitmap::createImageBitmapAndCallCompletionHandlerSoon(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{lambda(void)#1},void>::call(uint64_t result, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)(v3 - 8);
      v5 = *(_QWORD *)(v3 + 296);
      v4 = *(WTF **)(v3 + 304);
      *(_QWORD *)(v3 + 304) = 0;
      if (v5)
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
            v8 = v7 - 96;
          else
            v8 = 0;
        }
        else
        {
          v8 = 0;
        }
        v24 = v5;
        *(_QWORD *)(v3 + 296) = 0;
        v9 = *(_QWORD *)(v3 + 224);
        v10 = *(WTF::StringImpl **)(v9 + 48);
        if (v10)
        {
          *(_DWORD *)v10 += 2;
          v23 = v10;
          if (*(_BYTE *)(v9 + 64))
          {
            v11 = *(_QWORD *)(v9 + 56);
          }
          else
          {
            v14 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::ThreadableBlobRegistry *)(v9 + 80), a2);
            v11 = v14 & ~(v14 >> 63);
            *(_QWORD *)(v9 + 56) = v11;
            *(_BYTE *)(v9 + 64) = 1;
          }
          v26 = *(_DWORD *)(v3 + 280);
          v25 = *(_OWORD *)(v3 + 264);
          WebCore::ImageBitmap::createFromBuffer(v8, v5, &v23, v11, v3 + 88, v3 + 232, (unint64_t *)&v25, (uint64_t *)(v3 + 288));
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v15);
          else
            *(_DWORD *)v10 -= 2;
        }
        else
        {
          v23 = 0;
          if (*(_BYTE *)(v9 + 64))
          {
            v21 = *(_QWORD *)(v9 + 56);
          }
          else
          {
            v22 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::ThreadableBlobRegistry *)(v9 + 80), a2);
            v21 = v22 & ~(v22 >> 63);
            *(_QWORD *)(v9 + 56) = v21;
            *(_BYTE *)(v9 + 64) = 1;
          }
          v26 = *(_DWORD *)(v3 + 280);
          v25 = *(_OWORD *)(v3 + 264);
          WebCore::ImageBitmap::createFromBuffer(v8, v5, &v23, v21, v3 + 88, v3 + 232, (unint64_t *)&v25, (uint64_t *)(v3 + 288));
        }
        result = (uint64_t)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v24);
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v25) = 8;
        v26 = 1;
        v12 = *(_QWORD *)(v3 + 288);
        *(_QWORD *)(v3 + 288) = 0;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 16))(v12, &v25);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (v26 != -1)
          result = ((uint64_t (*)(uint64_t *, __int128 *))off_1E33D4E98[v26])(&v24, &v25);
      }
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
        {
          v18 = *((_QWORD *)v4 + 1);
          --*(_QWORD *)(v18 + 16);
          *((_QWORD *)v4 + 1) = 0;
          if (*(_DWORD *)(v18 + 24) == 1)
          {
            WebCore::PendingImageBitmap::~PendingImageBitmap((WebCore::PendingImageBitmap *)v18, v13);
            WTF::fastFree(v19, v20);
          }
          else
          {
            --*(_DWORD *)(v18 + 24);
          }
          result = WTF::fastFree(v4, v13);
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
      if (*(_DWORD *)(v3 - 8) == 1)
      {
        WebCore::PendingImageBitmap::~PendingImageBitmap((WebCore::PendingImageBitmap *)(v3 - 32), v13);
        return WTF::fastFree(v16, v17);
      }
      else
      {
        --*(_DWORD *)(v3 - 8);
      }
    }
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WebCore::HTMLVideoElement::VideoPresentationMode>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, unsigned int *a5)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::String *v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  char *v48;
  unsigned int *v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint8_t buf[4];
  _BYTE v58[12];
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v48 = (char *)a4;
  WTF::String::String((WTF::String *)&v54, a4);
  v49 = a5;
  result = WTF::String::number((WTF::String *)*a5);
  if (v55)
  {
    v10 = *((_DWORD *)v55 + 1);
    if (v54)
      goto LABEL_3;
LABEL_91:
    v11 = 0;
    if (v53)
      goto LABEL_4;
LABEL_92:
    v12 = 0;
    goto LABEL_5;
  }
  v10 = 0;
  if (!v54)
    goto LABEL_91;
LABEL_3:
  v11 = *((_DWORD *)v54 + 1);
  if (!v53)
    goto LABEL_92;
LABEL_4:
  v12 = *((_DWORD *)v53 + 1);
LABEL_5:
  if ((v12 | v11) < 0
    || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
        v10 < 0 || (v15 & 1) != 0 || (result = (v10 + v14), __OFADD__(v10, v14))))
  {
    v56 = 0;
    goto LABEL_96;
  }
  if (v55 && (*((_BYTE *)v55 + 16) & 4) == 0)
  {
    v16 = 0;
    goto LABEL_19;
  }
  if (v54)
  {
    v17 = *((_DWORD *)v54 + 4);
    v16 = (v17 >> 2) & 1;
    if (v53 && (v17 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v53)
    {
LABEL_18:
      v16 = (*((unsigned __int8 *)v53 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v16 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v16, v55, (uint64_t)v54, (uint64_t)v53, &v56);
  if (!v56)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v54;
  v54 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v55;
  v55 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(NSObject **)(a1 + 32);
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v51 ? (char *)v51 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v58 = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v23 = (uint64_t)v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v32 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v33 = *v31;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v59 = 0;
              WTF::String::String((WTF::String *)&v60, v48);
              v34 = (WTF::String *)*v49;
              v61 = 0;
              WTF::String::number(v34);
              v51 = 0;
              v52 = 0;
              v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v52) = 3;
              v51 = v35;
              v36 = HIDWORD(v52);
              *((_DWORD *)v35 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
              v37 = *(_QWORD *)&v58[4];
              if (*(_QWORD *)&v58[4])
                **(_DWORD **)&v58[4] += 2;
              *((_QWORD *)v35 + 2 * v36 + 1) = v37;
              *((_DWORD *)v35 + 4 * (v36 + 1)) = v59;
              v38 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
              *((_DWORD *)v35 + 4 * (v36 + 2)) = v61;
              v39 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
              HIDWORD(v52) = v36 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, a1, a2, &v51);
              v40 = v51;
              if (HIDWORD(v52))
              {
                v41 = 16 * HIDWORD(v52);
                v42 = (WTF::StringImpl **)((char *)v51 + 8);
                do
                {
                  v43 = *v42;
                  *v42 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v42 += 2;
                  v41 -= 16;
                }
                while (v41);
                v40 = v51;
              }
              if (v40)
              {
                v51 = 0;
                LODWORD(v52) = 0;
                WTF::fastFree(v40, v24);
              }
              v44 = v62;
              v62 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v60;
              v60 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = *(WTF::StringImpl **)&v58[4];
              *(_QWORD *)&v58[4] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v46 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v32);
          }
          v47 = __ldxr(v26);
          if (v47 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v56;
  v56 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLVideoElement::setVideoFullscreenStandby(BOOL)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E33D5078;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLVideoElement::setVideoFullscreenStandby(BOOL)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33D5078;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLVideoElement::setVideoFullscreenStandby(BOOL)::$_0,void,BOOL>::call(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 1084) = a2 ^ 1;
  return result;
}

uint64_t WTF::RefCounted<WebCore::ImageBitmap>::deref(uint64_t result, void *a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  v2 = (bmalloc::api *)(result - 8);
  v3 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_8:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_15:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_15;
  }
LABEL_20:
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
    *(_QWORD *)v2 = 0;
  }
  return bmalloc::api::isoDeallocate(v2, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t *a2)
{
  WebCore::ScriptExecutionContext **v2;
  WebCore::ScriptExecutionContext *v3;
  uint64_t v4;
  __int128 v6;
  char v7;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)v2[1];
  LOBYTE(v6) = 0;
  v7 = 0;
  return WebCore::ImageBitmap::createCompletionHandler(v3, *a2, v4, &v6, (uint64_t *)v2[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::SecurityContext ***a1, WTF::StringImpl *a2)
{
  WebCore::SecurityContext **v2;
  WebCore::SecurityContext *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)v2[1];
  LOBYTE(v5) = 0;
  v6 = 0;
  WebCore::ImageBitmap::createCompletionHandler(v3, a2, v4, &v5, (unsigned __int8 *)v2[2]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, _QWORD *a2)
{
  WebCore::ScriptExecutionContext **v2;
  WebCore::ScriptExecutionContext *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v8;
  char v9;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)v2[1];
  v5 = (uint64_t *)v2[2];
  v6 = *a2 + 112;
  LOBYTE(v8) = 0;
  v9 = 0;
  return WebCore::ImageBitmap::createCompletionHandler(v3, v6, v4, &v8, v5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  char v12;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 296);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(WebCore::ScriptExecutionContext **)v2;
  v7 = *(_QWORD *)(v2 + 8);
  v8 = *(uint64_t **)(v2 + 16);
  v9 = *(_QWORD *)(v3 + 64);
  if ((v9 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    LOBYTE(v11) = 0;
    v12 = 0;
    return WebCore::ImageBitmap::createCompletionHandler(v6, v5, (const WebCore::RenderObject *)(v9 & 0xFFFFFFFFFFFFLL), v7, &v11, v8);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t a2)
{
  WebCore::ScriptExecutionContext **v2;
  WebCore::ScriptExecutionContext *v3;
  uint64_t v4;
  unint64_t v6;
  char v7;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)v2[1];
  LOBYTE(v6) = 0;
  v7 = 0;
  return WebCore::ImageBitmap::createCompletionHandler(v3, a2, v4, &v6, (uint64_t *)v2[2]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, _QWORD *a2)
{
  WebCore::ScriptExecutionContext **v2;
  WebCore::ScriptExecutionContext *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v8;
  char v9;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)v2[1];
  v5 = (uint64_t *)v2[2];
  v6 = *a2 + 32;
  LOBYTE(v8) = 0;
  v9 = 0;
  return WebCore::ImageBitmap::createCompletionHandler(v3, v6, v4, &v8, v5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  v1 = *(uint64_t **)(*(_QWORD *)a1 + 16);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 8;
  v5 = 1;
  v2 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E33D4E98[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t a2)
{
  WebCore::ScriptExecutionContext **v2;
  WebCore::ScriptExecutionContext *v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)v2[1];
  LOBYTE(v6) = 0;
  v7 = 0;
  return WebCore::ImageBitmap::createCompletionHandler(v3, a2, v4, &v6, (uint64_t *)v2[2]);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t *v5;
  __int128 v7;
  char v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (_OWORD *)v2[1];
  v5 = (uint64_t *)v2[2];
  LOBYTE(v7) = 0;
  v8 = 0;
  return WebCore::PendingImageBitmap::fetch(v3, a2, v4, &v7, v5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createCompletionHandler(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t *a2)
{
  WebCore::ScriptExecutionContext **v2;
  WebCore::ScriptExecutionContext *v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)v2[1];
  LOBYTE(v6) = 0;
  v7 = 0;
  return WebCore::ImageBitmap::createCompletionHandler(v3, a2, v4, &v6, (uint64_t *)v2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33D5110;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33D5110;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned __int8 v16[8];
  WTF::StringImpl *v17;
  objc_class *v18;

  v2 = result;
  LOBYTE(v13) = 0;
  v15 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v3])(v16, &v13, a2);
    v15 = v3;
  }
  v4 = *((_QWORD *)v2 + 1);
  if (!v4)
    goto LABEL_17;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || *(_BYTE *)(v5 + 180))
    goto LABEL_17;
  if (!(_DWORD)v3)
  {
    v9 = v13;
    v13 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*((_QWORD *)v2 + 2), v9);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v9 + 8, v10);
    goto LABEL_17;
  }
  if ((_DWORD)v3 != 1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(v11, v12);
  }
  v6 = v14;
  v14 = 0;
  v7 = *((_QWORD *)v2 + 2);
  v18 = 0;
  v16[0] = v13;
  if (v6)
    *(_DWORD *)v6 += 2;
  v17 = v6;
  WebCore::DeferredPromise::reject(v7, v16, 0, &v18);
  result = v17;
  v17 = 0;
  if (!result)
    goto LABEL_13;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_13:
    if (v6)
      goto LABEL_14;
    goto LABEL_17;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  if (v6)
  {
LABEL_14:
    if (*(_DWORD *)v6 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
LABEL_17:
  if (v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v15])(v16, &v13);
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::ImageBitmap>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t *a2)
{
  WebCore::ScriptExecutionContext **v3;
  WebCore::ScriptExecutionContext *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  __int128 v14;
  char v15;

  v3 = *a1;
  v4 = **a1;
  v5 = (uint64_t)(*a1)[1];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  LODWORD(v14) = *(_DWORD *)(*a1)[2];
  *(_QWORD *)((char *)&v14 + 4) = __PAIR64__(v7, v6);
  HIDWORD(v14) = v8;
  v15 = 1;
  v9 = v3[6];
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D5198;
  v11[1] = v10;
  v13 = v11;
  WebCore::ImageBitmap::createCompletionHandler(v4, *a2, v5, &v14, (uint64_t *)&v13);
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::SecurityContext ***a1, WTF::StringImpl *a2)
{
  WebCore::SecurityContext **v3;
  WebCore::SecurityContext *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  WebCore::SecurityContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  unsigned __int8 v13[12];
  unint64_t v14;
  int v15;
  int v16;
  char v17;

  v3 = *a1;
  v4 = **a1;
  v5 = (uint64_t)(*a1)[1];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  LODWORD(v14) = *(_DWORD *)(*a1)[2];
  HIDWORD(v14) = v6;
  v15 = v7;
  v16 = v8;
  v17 = 1;
  v9 = v3[6];
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D51C0;
  v11[1] = v10;
  *(_QWORD *)v13 = v11;
  WebCore::ImageBitmap::createCompletionHandler(v4, a2, v5, &v14, v13);
  result = *(_QWORD *)v13;
  if (*(_QWORD *)v13)
    return (*(uint64_t (**)(_QWORD *))(**(_QWORD **)v13 + 8))(*(_QWORD **)v13);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, _QWORD *a2)
{
  WebCore::ScriptExecutionContext *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  unint64_t v15;
  int v16;
  int v17;
  char v18;

  v3 = **a1;
  v4 = (uint64_t)(*a1)[1];
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  v9 = (*a1)[6];
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D51E8;
  v11[1] = v10;
  v14 = v11;
  v12 = *a2 + 112;
  v15 = __PAIR64__(v6, v5);
  v16 = v7;
  v17 = v8;
  v18 = 1;
  WebCore::ImageBitmap::createCompletionHandler(v3, v12, v4, &v15, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::ScriptExecutionContext *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::RenderObject *v15;
  uint64_t result;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  int v20;
  char v21;

  v4 = **a1;
  v3 = (uint64_t)(*a1)[1];
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  v9 = (*a1)[6];
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D5210;
  v11[1] = v10;
  v17 = v11;
  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 296);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  v15 = (const WebCore::RenderObject *)(*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL);
  if (v15 && (*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v18 = __PAIR64__(v6, v5);
    v19 = v7;
    v20 = v8;
    v21 = 1;
    WebCore::ImageBitmap::createCompletionHandler(v4, v14, v15, v3, &v18, (uint64_t *)&v17);
    result = (uint64_t)v17;
    if (v17)
      return (*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t a2)
{
  WebCore::ScriptExecutionContext **v3;
  WebCore::ScriptExecutionContext *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  unint64_t v14;
  int v15;
  int v16;
  char v17;

  v3 = *a1;
  v4 = **a1;
  v5 = (uint64_t)(*a1)[1];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  LODWORD(v14) = *(_DWORD *)(*a1)[2];
  HIDWORD(v14) = v6;
  v15 = v7;
  v16 = v8;
  v17 = 1;
  v9 = v3[6];
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D5238;
  v11[1] = v10;
  v13 = v11;
  WebCore::ImageBitmap::createCompletionHandler(v4, a2, v5, &v14, (uint64_t *)&v13);
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, _QWORD *a2)
{
  WebCore::ScriptExecutionContext *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  unint64_t v15;
  int v16;
  int v17;
  char v18;

  v3 = **a1;
  v4 = (uint64_t)(*a1)[1];
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  v9 = (*a1)[6];
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D5260;
  v11[1] = v10;
  v14 = v11;
  v12 = *a2 + 32;
  v15 = __PAIR64__(v6, v5);
  v16 = v7;
  v17 = v8;
  v18 = 1;
  WebCore::ImageBitmap::createCompletionHandler(v3, v12, v4, &v15, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[16];
  int v6;
  char v7;

  v1 = *(uint64_t **)(*(_QWORD *)a1 + 48);
  v2 = *v1;
  *v1 = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E33D5288;
  v3[1] = v2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5[0] = 8;
  v6 = 1;
  (*(void (**)(_QWORD *, _BYTE *))(*v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E33D4E98[v6])(&v7, v5);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t a2)
{
  WebCore::ScriptExecutionContext **v3;
  WebCore::ScriptExecutionContext *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;

  v3 = *a1;
  v4 = **a1;
  v5 = (uint64_t)(*a1)[1];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  LODWORD(v14) = *(_DWORD *)(*a1)[2];
  HIDWORD(v14) = v6;
  v15 = v7;
  v16 = v8;
  v17 = 1;
  v9 = v3[6];
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D52B0;
  v11[1] = v10;
  v13 = v11;
  WebCore::ImageBitmap::createCompletionHandler(v4, a2, v5, &v14, (uint64_t *)&v13);
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  __int128 v14;
  char v15;

  v3 = **a1;
  v4 = (_OWORD *)(*a1)[1];
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  v9 = (uint64_t *)(*a1)[6];
  v10 = *v9;
  *v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D52D8;
  v11[1] = v10;
  v13 = v11;
  *(_QWORD *)&v14 = __PAIR64__(v6, v5);
  *((_QWORD *)&v14 + 1) = __PAIR64__(v8, v7);
  v15 = 1;
  WebCore::PendingImageBitmap::fetch(v3, a2, v4, &v14, (uint64_t *)&v13);
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ImageBitmap::createPromise(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::ImageBitmapOptions &&,int,int,int,int,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::ImageBitmap>> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &>(WebCore::ScriptExecutionContext ***a1, uint64_t *a2)
{
  WebCore::ScriptExecutionContext **v3;
  WebCore::ScriptExecutionContext *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;

  v3 = *a1;
  v4 = **a1;
  v5 = (uint64_t)(*a1)[1];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v8 = *(_DWORD *)(*a1)[5];
  LODWORD(v14) = *(_DWORD *)(*a1)[2];
  HIDWORD(v14) = v6;
  v15 = v7;
  v16 = v8;
  v17 = 1;
  v9 = v3[6];
  v10 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E33D5300;
  v11[1] = v10;
  v13 = v11;
  WebCore::ImageBitmap::createCompletionHandler(v4, a2, v5, &v14, (uint64_t *)&v13);
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISE_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D5198;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISE_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D5198;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISE_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISI_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISI_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D51C0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISI_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D51C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISI_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISM_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISM_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D51E8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISM_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D51E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISM_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISQ_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISQ_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D5210;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISQ_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D5210;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISQ_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIST_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIST_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D5238;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIST_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D5238;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIST_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISX_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISX_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D5260;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISX_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D5260;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clISX_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS11_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS11_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D5288;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS11_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D5288;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS11_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS15_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS15_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D52B0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS15_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D52B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS15_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS19_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS19_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D52D8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS19_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D52D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS19_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS1D_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS1D_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33D5300;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS1D_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D5300;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore11ImageBitmap13createPromiseERNS2_22ScriptExecutionContextEONSt3__17variantIJNS_6RefPtrINS2_16HTMLImageElementENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEENS8_INS2_16HTMLVideoElementENSA_ISF_EENSC_ISF_EEEENS8_INS2_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS8_INS2_15SVGImageElementENSA_ISN_EENSC_ISN_EEEENS8_IS3_NSA_IS3_EENSC_IS3_EEEENS8_INS2_15OffscreenCanvasENSA_ISU_EENSC_ISU_EEEENS8_INS2_18CSSStyleImageValueENSA_ISY_EENSC_ISY_EEEENS8_INS2_19WebCodecsVideoFrameENSA_IS12_EENSC_IS12_EEEENS8_INS2_4BlobENSA_IS16_EENSC_IS16_EEEENS8_INS2_9ImageDataENSA_IS1A_EENSC_IS1A_EEEEEEEONS2_18ImageBitmapOptionsEiiiiONS2_18DOMPromiseDeferredINS2_12IDLInterfaceIS3_EEEEENK3__0clIS1D_EEDaRT_EUlNS2_11ExceptionOrINS_3RefIS3_SR_SS_EEEEE_vJOS1V_EE4callES1X_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  LOBYTE(v11) = 0;
  v13 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_19;
  ((void (*)(unsigned __int8 *, WTF **, uint64_t))off_1E33D5128[v2])(v14, &v11, a2);
  v13 = v2;
  if (!(_DWORD)v2)
  {
    v8 = v11;
    v11 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::ImageBitmap>>(*(_QWORD *)(a1 + 8), v8);
    result = (WTF::StringImpl *)WTF::RefCounted<WebCore::ImageBitmap>::deref((uint64_t)v8 + 8, v9);
    goto LABEL_13;
  }
  if ((_DWORD)v2 != 1)
  {
LABEL_19:
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreate(v10);
  }
  v4 = v12;
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = v11;
  if (v4)
    *(_DWORD *)v4 += 2;
  v15 = v4;
  WebCore::DeferredPromise::reject(v5, v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (!result)
    goto LABEL_9;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_9:
    if (v4)
      goto LABEL_10;
    goto LABEL_13;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  if (v4)
  {
LABEL_10:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
LABEL_13:
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF **))off_1E33D4E98[v13])(v14, &v11);
  return result;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreate@<X0>(const void *a1@<X0>, size_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  JSC::ArrayBuffer::tryCreate();
  result = v14;
  if (!v14)
    goto LABEL_20;
  if (*(_BYTE *)(v14 + 64) && (v13 = *(_QWORD *)(v14 + 32)) != 0)
    v7 = *(_QWORD *)(v13 + 32);
  else
    v7 = *(_QWORD *)(v14 + 48);
  if (v7 < a2)
  {
    result = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v14);
LABEL_20:
    v8 = 0;
    goto LABEL_16;
  }
  v8 = WTF::fastMalloc((WTF *)0x28);
  JSC::ArrayBufferView::ArrayBufferView();
  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v14);
  v9 = *(_QWORD *)(v8 + 32);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (!v11 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
      {
        v12 = *(_QWORD *)(v8 + 24);
        goto LABEL_15;
      }
      if ((v10 & 0x3FFFFFFFFLL) + v11)
      {
        v12 = *(_QWORD *)(v8 + 24);
        if (v12 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
          v12 = (v12 & 0x3FFFFFFFFLL) + v11;
        goto LABEL_15;
      }
    }
  }
  v12 = 0;
LABEL_15:
  result = (uint64_t)memcpy((void *)v12, a1, a2);
LABEL_16:
  *a3 = v8;
  return result;
}

uint64_t WebCore::InputType::isValidValue(WebCore::InputType *this, const WTF::String *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;

  result = 0;
  v5 = *((_DWORD *)this + 3);
  if (v5 > 2047)
  {
    if (v5 < 0x10000)
    {
      if (v5 < 0x2000)
      {
        if (v5 != 2048)
        {
          if (v5 != 4096)
            return result;
          if (WebCore::InputType::rangeUnderflow(this, a2) || WebCore::InputType::rangeOverflow(this, a2))
            return 0;
          v11 = WebCore::RadioInputType::valueMissing(this, a2);
          return v11 ^ 1u;
        }
      }
      else
      {
        if (v5 == 0x2000)
        {
          v15 = *(_QWORD *)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_57;
          v20 = *(unsigned int *)(v15 + 4);
          if (!(_DWORD)v20)
            goto LABEL_57;
          if ((COERCE_UNSIGNED_INT64(WebCore::parseToDoubleForNumberType(*(unsigned __int8 **)(v15 + 8), v20 | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32), NAN)) & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)return 0;
          if ((*((_DWORD *)this + 3) & 0x142618) != 0)
          {
LABEL_57:
            v25 = 0;
            LOWORD(v26) = 0;
            v27 = 2;
            (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, const WTF::String *, WTF::StringImpl **))(*(_QWORD *)this + 856))(&v28, this, a2, &v25);
            if ((v29 & 0xFFFFFFFD) != 0)
            {
              (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v25, this, 0);
              v16 = WebCore::StepRange::stepMismatch((WebCore::StepRange *)&v25, (const WebCore::Decimal *)&v28);
              result = 0;
              if (v16)
                return result;
            }
          }
          goto LABEL_78;
        }
        if (v5 == 0x4000)
          goto LABEL_78;
        if (v5 != 0x8000)
          return result;
      }
    }
    else if (v5 >= 0x80000)
    {
      switch(v5)
      {
        case 0x80000:
          v17 = *(WTF::StringImpl **)a2;
          if (*(_QWORD *)a2 && *((_DWORD *)v17 + 1))
          {
            *(_DWORD *)v17 += 2;
            v28 = v17;
            MEMORY[0x19AEA52D4](&v25, &v28, 0);
            v22 = v28;
            v28 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v21);
              else
                *(_DWORD *)v22 -= 2;
            }
            v23 = v26;
            v24 = v25;
            v25 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v21);
              else
                *(_DWORD *)v24 -= 2;
            }
            if ((v23 & 1) == 0)
              return 0;
LABEL_35:
            if ((*((_DWORD *)this + 3) & 0x142618) != 0)
            {
              v25 = 0;
              LOWORD(v26) = 0;
              v27 = 2;
              (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, const WTF::String *, WTF::StringImpl **))(*(_QWORD *)this + 856))(&v28, this, a2, &v25);
              if ((v29 & 0xFFFFFFFD) != 0)
              {
                (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v25, this, 0);
                v10 = WebCore::StepRange::stepMismatch((WebCore::StepRange *)&v25, (const WebCore::Decimal *)&v28);
                result = 0;
                if (v10)
                  return result;
              }
            }
          }
          break;
        case 0x100000:
          goto LABEL_39;
        case 0x200000:
          break;
        default:
          return result;
      }
    }
    else
    {
      if (v5 == 0x10000)
        goto LABEL_78;
      if (v5 != 0x20000)
      {
        if (v5 != 0x40000)
          return result;
LABEL_39:
        if (!WebCore::BaseDateAndTimeInputType::typeMismatchFor(this, a2))
          goto LABEL_40;
        return 0;
      }
    }
    if (WebCore::InputType::rangeUnderflow(this, a2)
      || WebCore::InputType::rangeOverflow(this, a2)
      || WebCore::BaseTextInputType::patternMismatch(this, a2))
    {
      return 0;
    }
    goto LABEL_64;
  }
  if (v5 <= 63)
  {
    switch(v5)
    {
      case 1:
        goto LABEL_78;
      case 2:
        if (WebCore::InputType::rangeUnderflow(this, a2) || WebCore::InputType::rangeOverflow(this, a2))
          return 0;
        v6 = *((_QWORD *)this + 3);
        if (!v6)
          return 1;
        v7 = *(_QWORD *)(v6 + 8);
        if ((*(_BYTE *)(v7 + 168) & 1) == 0)
          return 1;
        return *(_WORD *)(v7 + 230) & 1;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 4:
        v12 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v13 = *(_QWORD *)(v12 + 8);
          v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v13 = 0;
          v14 = 0x100000000;
        }
        result = WebCore::isValidSimpleColor(v13, v14);
        if ((_DWORD)result)
          goto LABEL_78;
        return result;
      case 8:
        goto LABEL_39;
      default:
        if (v5 == 16)
          goto LABEL_39;
        if (v5 != 32)
          return result;
        if ((WebCore::EmailInputType::typeMismatchFor(this, a2) & 1) == 0)
          goto LABEL_35;
        return 0;
    }
  }
  if (v5 <= 255)
  {
    if (v5 == 64)
    {
      if (WebCore::InputType::rangeUnderflow(this, a2) || WebCore::InputType::rangeOverflow(this, a2))
        return 0;
LABEL_67:
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168) & 1) != 0)
      {
        if (*(_QWORD *)a2)
          return *(_DWORD *)(*(_QWORD *)a2 + 4) != 0;
        return 0;
      }
      return 1;
    }
    if (v5 != 128)
      return result;
    goto LABEL_78;
  }
  if (v5 == 256)
  {
LABEL_78:
    if (WebCore::InputType::rangeUnderflow(this, a2))
      return 0;
    v11 = WebCore::InputType::rangeOverflow(this, a2);
    return v11 ^ 1u;
  }
  if (v5 == 512)
    goto LABEL_39;
  if (v5 != 1024)
    return result;
  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_20;
  v19 = *(unsigned int *)(v8 + 4);
  if (!(_DWORD)v19)
    goto LABEL_20;
  if ((COERCE_UNSIGNED_INT64(WebCore::parseToDoubleForNumberType(*(unsigned __int8 **)(v8 + 8), v19 | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32), NAN)) & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)return 0;
LABEL_40:
  if ((*((_DWORD *)this + 3) & 0x142618) == 0)
    goto LABEL_41;
LABEL_20:
  v25 = 0;
  LOWORD(v26) = 0;
  v27 = 2;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, const WTF::String *, WTF::StringImpl **))(*(_QWORD *)this + 856))(&v28, this, a2, &v25);
  if ((v29 & 0xFFFFFFFD) == 0
    || ((*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v25, this, 0), v9 = WebCore::StepRange::stepMismatch((WebCore::StepRange *)&v25, (const WebCore::Decimal *)&v28), result = 0, !v9))
  {
LABEL_41:
    if (WebCore::InputType::rangeUnderflow(this, a2) || WebCore::InputType::rangeOverflow(this, a2))
      return 0;
LABEL_64:
    v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_BYTE *)(v18 + 160) & 0x18) != 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v18 + 112) + 288))(v18 + 112)
      && (*(_BYTE *)(v18 + 160) & 0x20) != 0)
    {
      return 1;
    }
    goto LABEL_67;
  }
  return result;
}

WTF::StringImpl *WebCore::InputType::saveFormControlState@<X0>(WebCore::InputType *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  const WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23;
  _QWORD *v24;
  int v25;
  WTF::StringImpl *v26[2];

  v5 = *((_QWORD *)this + 3);
  if (v5)
    v6 = *(_QWORD **)(v5 + 8);
  else
    v6 = 0;
  v7 = (_DWORD *)v6[30];
  if (v7[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v7, v26);
    goto LABEL_16;
  }
  v8 = (WTF::StringImpl *)v6[27];
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    v26[0] = v8;
    goto LABEL_16;
  }
  v9 = v6[13];
  if (v9
    && ((v10 = *(_DWORD *)(v9 + 4), (v10 & 1) != 0)
      ? (v11 = *(_QWORD *)(v9 + 40), LODWORD(v12) = *(_DWORD *)(v9 + 52))
      : (v11 = v9 + 32, LODWORD(v12) = v10 >> 5),
        (_DWORD)v12))
  {
    v12 = v12;
    v13 = (_QWORD *)(v11 + 8);
    while (1)
    {
      v14 = *(v13 - 1);
      if (v14 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      v13 += 2;
      if (!--v12)
      {
        v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if (*v13)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v7 + 296))(v26);
    if (v26[0])
      goto LABEL_16;
    v26[0] = 0;
    v7 = (_DWORD *)v6[30];
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v7 + 64))(v26);
LABEL_16:
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (v15
    && ((v16 = *(_DWORD *)(v15 + 4), (v16 & 1) != 0)
      ? (v17 = *(_QWORD *)(v15 + 40), LODWORD(v18) = *(_DWORD *)(v15 + 52))
      : (v17 = v15 + 32, LODWORD(v18) = v16 >> 5),
        (_DWORD)v18))
  {
    v18 = v18;
    v19 = (const WTF::StringImpl **)(v17 + 8);
    while (1)
    {
      v20 = (uint64_t)*(v19 - 1);
      if (v20 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      v19 += 2;
      if (!--v18)
      {
        v19 = (const WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v19 = (const WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  if (WTF::equal(v26[0], *v19, a2))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v23 = v26[0];
    if (v26[0])
    {
      if ((*((_BYTE *)v26[0] + 16) & 0x10) != 0)
      {
        *(_DWORD *)v26[0] += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v26[0], v21);
        v23 = v26[1];
      }
    }
    *(_QWORD *)(a3 + 8) = 1;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)a3 = v24;
    if (v23)
    {
      v25 = *(_DWORD *)v23;
      *(_DWORD *)v23 += 2;
      *v24 = v23;
      *(_DWORD *)(a3 + 12) = 1;
      if (v25)
        *(_DWORD *)v23 = v25;
      else
        WTF::StringImpl::destroy(v23, v21);
    }
    else
    {
      *v24 = 0;
      *(_DWORD *)(a3 + 12) = 1;
    }
  }
  result = v26[0];
  v26[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InputType::restoreFormControlState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  _BYTE v5[8];
  WTF::StringImpl *v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    result = *(WTF::StringImpl **)(v2 + 8);
  else
    result = 0;
  if (*(_DWORD *)(a2 + 12))
  {
    result = (WTF::StringImpl *)WebCore::HTMLInputElement::setValue((uint64_t)result, *(_QWORD *)a2, 0, 0, (uint64_t)v5);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::InputType::isFormDataAppendable(WebCore::InputType *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 208);
  if (v1)
    return *(_DWORD *)(v1 + 4) != 0;
  v1 = *MEMORY[0x1E0CBF3B8];
  return *MEMORY[0x1E0CBF3B8] && *(_DWORD *)(v1 + 4) != 0;
}

uint64_t WebCore::InputType::appendFormData(WebCore::InputType *this, WebCore::DOMFormData *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  _QWORD *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v20;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = *(_QWORD *)(v4 + 208);
  v5 = (WTF::StringImpl **)(v4 + 208);
  if (v6)
    v7 = v5;
  else
    v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  if (v3)
    v8 = *(_QWORD **)(v3 + 8);
  else
    v8 = 0;
  v9 = (_DWORD *)v8[30];
  if (v9[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v9, &v20);
    goto LABEL_27;
  }
  v10 = (WTF::StringImpl *)v8[27];
  if (v10)
  {
    *(_DWORD *)v10 += 2;
    v20 = v10;
    goto LABEL_27;
  }
  v11 = v8[13];
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 4);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(v11 + 40);
      LODWORD(v14) = *(_DWORD *)(v11 + 52);
      if ((_DWORD)v14)
      {
LABEL_13:
        v14 = v14;
        v15 = (_QWORD *)(v13 + 8);
        while (1)
        {
          v16 = *(v15 - 1);
          if (v16 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_22;
          }
          v15 += 2;
          if (!--v14)
          {
            v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_22;
          }
        }
      }
    }
    else
    {
      v13 = v11 + 32;
      LODWORD(v14) = v12 >> 5;
      if ((_DWORD)v14)
        goto LABEL_13;
    }
  }
  v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_22:
  if (!*v15)
  {
LABEL_23:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v9 + 64))(&v20);
    goto LABEL_27;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v9 + 296))(&v20);
  if (!v20)
  {
    v20 = 0;
    v9 = (_DWORD *)v8[30];
    goto LABEL_23;
  }
LABEL_27:
  WebCore::DOMFormData::append(a2, v7, &v20);
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  return 1;
}

double WebCore::InputType::valueAsDate(WebCore::InputType *this)
{
  return NAN;
}

void WebCore::InputType::setValueAsDate(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

double WebCore::InputType::accessibilityValueAsDate(WebCore::InputType *this)
{
  return NAN;
}

double WebCore::InputType::valueAsDouble(WebCore::InputType *this)
{
  return NAN;
}

uint64_t WebCore::InputType::setValueAsDouble(uint64_t a1, uint64_t a2, double a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v9 = 0;
    v10 = 0;
    if (fabs(a3) == INFINITY)
    {
      LODWORD(v11) = 0;
      HIDWORD(v11) = a3 < 0.0;
    }
    else
    {
      v11 = 2;
    }
  }
  else
  {
    v5 = (const char *)WTF::numberToString();
    v6 = (uint64_t)v5;
    v7 = 0x100000000;
    if (v5)
      v7 = strlen(v5) | 0x100000000;
    WebCore::Decimal::fromString(v6, v7, (uint64_t)&v9);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v9, a2);
}

void WebCore::InputType::setValueAsDecimal(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

BOOL WebCore::InputType::supportsRequired(WebCore::InputType *this)
{
  return (*((_WORD *)this + 6) & 0x4181) == 0;
}

double WebCore::InputType::defaultValueForStepUp@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 3;
  *(_QWORD *)(a1 + 12) = 3;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  return result;
}

uint64_t WebCore::InputType::sizeShouldIncludeDecoration(WebCore::InputType *this, int a2, int *a3)
{
  *a3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 224);
  return 0;
}

float WebCore::InputType::decorationWidth(WebCore::InputType *this)
{
  return 0.0;
}

BOOL WebCore::InputType::isInRange(WebCore::InputType *this, const WTF::String *a2)
{
  _BOOL8 result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  _BYTE v14[24];

  if ((*((_DWORD *)this + 3) & 0x142618) == 0)
    return 0;
  (*(void (**)(__int128 *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v9, this, 0);
  if (!v13)
    return 0;
  *(_QWORD *)v14 = 0;
  *(_WORD *)&v14[8] = 0;
  *(_QWORD *)&v14[12] = 2;
  (*(void (**)(uint64_t *__return_ptr, WebCore::InputType *, const WTF::String *, _BYTE *))(*(_QWORD *)this + 856))(&v7, this, a2, v14);
  if ((v8 & 0xFFFFFFFD) == 0)
    return 1;
  *(_OWORD *)v14 = v11;
  *(_QWORD *)&v14[16] = v12;
  result = WebCore::Decimal::operator>=((uint64_t)&v7, (uint64_t)v14);
  if ((_DWORD)result)
  {
    v5 = v9;
    v6 = v10;
    return WebCore::Decimal::operator<=((uint64_t)&v7, (uint64_t)&v5);
  }
  return result;
}

BOOL WebCore::InputType::isOutOfRange(WebCore::InputType *this, const WTF::String *a2)
{
  int v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if ((*((_DWORD *)this + 3) & 0x142618) == 0)
    return 0;
  if (!*(_QWORD *)a2)
    return 0;
  if (!*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  (*(void (**)(__int128 *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v12, this, 0);
  if (!v16)
    return 0;
  v17 = 0;
  v18 = 0;
  v19 = 2;
  (*(void (**)(__int128 *__return_ptr, WebCore::InputType *, const WTF::String *, uint64_t *))(*(_QWORD *)this + 856))(&v11, this, a2, &v17);
  if ((HIDWORD(v11) & 0xFFFFFFFD) == 0)
    return 0;
  v9 = v14;
  v10 = v15;
  WebCore::Decimal::operator-(&v11, &v9, (uint64_t)&v17);
  if ((v19 - 1) >= 2)
  {
    if ((_DWORD)v19)
      goto LABEL_14;
    v5 = HIDWORD(v19) == 1;
  }
  else
  {
    if ((_DWORD)v19 == 2)
      goto LABEL_14;
    v5 = HIDWORD(v19);
  }
  if (v5 == 1)
    return 1;
LABEL_14:
  v7 = v12;
  v8 = v13;
  WebCore::Decimal::operator-(&v11, &v7, (uint64_t)&v17);
  if ((v19 - 1) >= 2)
  {
    if (!(_DWORD)v19)
    {
      v6 = HIDWORD(v19) == 1;
      return v6 == 0;
    }
  }
  else if ((_DWORD)v19 != 2)
  {
    v6 = HIDWORD(v19);
    return v6 == 0;
  }
  return 0;
}

BOOL WebCore::InputType::stepMismatch(WebCore::InputType *this, const WTF::String *a2)
{
  _BOOL8 result;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if ((*((_DWORD *)this + 3) & 0x142618) == 0)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 856))(&v7);
  result = 0;
  if ((v8 & 0xFFFFFFFD) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v4, this, 0);
    return WebCore::StepRange::stepMismatch((WebCore::StepRange *)&v4, (const WebCore::Decimal *)&v7);
  }
  return result;
}

WTF::StringImpl *WebCore::InputType::validationMessage@<X0>(WebCore::InputType *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *result;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::HTMLInputElement *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WebCore::HTMLInputElement *v32;
  unsigned int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _BOOL4 v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51[2];
  uint64_t v52;
  _BYTE v53[24];
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  char v61;
  __int128 v62;
  WTF::StringImpl *v63;
  __int128 v64;
  uint64_t v65;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = *(_QWORD **)(v4 + 8);
  else
    v5 = 0;
  v6 = (_DWORD *)v5[30];
  if (v6[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v6, &v63);
    goto LABEL_22;
  }
  v7 = (WTF::StringImpl *)v5[27];
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    v63 = v7;
    goto LABEL_22;
  }
  v8 = v5[13];
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 40);
      LODWORD(v11) = *(_DWORD *)(v8 + 52);
      if ((_DWORD)v11)
      {
LABEL_8:
        v11 = v11;
        v12 = (_QWORD *)(v10 + 8);
        while (1)
        {
          v13 = *(v12 - 1);
          if (v13 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v12 += 2;
          if (!--v11)
          {
            v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v10 = v8 + 32;
      LODWORD(v11) = v9 >> 5;
      if ((_DWORD)v11)
        goto LABEL_8;
    }
  }
  v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (!*v12)
  {
LABEL_18:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v6 + 64))(&v63);
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v6 + 296))(&v63);
  if (!v63)
  {
    v63 = 0;
    v6 = (_DWORD *)v5[30];
    goto LABEL_18;
  }
LABEL_22:
  v14 = (*(uint64_t (**)(WebCore::InputType *))(*(_QWORD *)this + 160))(this);
  v15 = *(_QWORD *)this;
  if (v14)
  {
    (*(void (**)(WebCore::InputType *))(v15 + 232))(this);
    goto LABEL_28;
  }
  v17 = (*(uint64_t (**)(WebCore::InputType *, WTF::StringImpl **))(v15 + 152))(this, &v63);
  v18 = *(_QWORD *)this;
  if (v17)
  {
    (*(void (**)(WebCore::InputType *))(v18 + 248))(this);
    goto LABEL_28;
  }
  v19 = (*(uint64_t (**)(WebCore::InputType *))(v18 + 288))(this);
  v20 = *(_QWORD *)this;
  if (v19)
  {
    (*(void (**)(WebCore::InputType *))(v20 + 240))(this);
    goto LABEL_28;
  }
  if (!(*(unsigned int (**)(WebCore::InputType *, WTF::StringImpl **))(v20 + 168))(this, &v63))
  {
    v28 = *((_QWORD *)this + 3);
    if (v28)
      v29 = *(WebCore::HTMLInputElement **)(v28 + 8);
    else
      v29 = 0;
    if (WebCore::HTMLInputElement::tooShort(v29))
    {
      WebCore::validationMessageTooShortText(*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 176), (uint64_t)a2);
      goto LABEL_28;
    }
    v31 = *((_QWORD *)this + 3);
    if (v31)
      v32 = *(WebCore::HTMLInputElement **)(v31 + 8);
    else
      v32 = 0;
    if (WebCore::HTMLInputElement::tooLong(v32, v30))
    {
      v33 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 172);
      if (v33 >= 0x80000)
        v34 = 0x80000;
      else
        v34 = v33;
      WebCore::validationMessageTooLongText(v34, (uint64_t)a2);
      goto LABEL_28;
    }
    if ((*((_DWORD *)this + 3) & 0x142618) == 0)
      goto LABEL_88;
    *(_QWORD *)v53 = 0;
    *(_WORD *)&v53[8] = 0;
    *(_QWORD *)&v53[12] = 2;
    (*(void (**)(__int128 *__return_ptr, WebCore::InputType *, WTF::StringImpl **, _BYTE *))(*(_QWORD *)this + 856))(&v62, this, &v63, v53);
    if ((HIDWORD(v62) & 0xFFFFFFFD) == 0)
      goto LABEL_88;
    (*(void (**)(_BYTE *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(v53, this, 0);
    *(_OWORD *)v51 = v54;
    v52 = v55;
    WebCore::Decimal::operator-(&v62, (__int128 *)v51, (uint64_t)&v64);
    if ((HIDWORD(v64) - 1) >= 2)
    {
      if (HIDWORD(v64))
        goto LABEL_76;
      v38 = v65 == 1;
    }
    else
    {
      if (HIDWORD(v64) == 2)
        goto LABEL_76;
      v38 = v65;
    }
    if (v38)
    {
      v64 = v54;
      v65 = v55;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, __int128 *))(*(_QWORD *)this + 864))(v51, this, &v64);
      WebCore::validationMessageRangeUnderflowText((WebCore *)v51, (uint64_t)a2);
      goto LABEL_103;
    }
LABEL_76:
    *(_OWORD *)v51 = *(_OWORD *)v53;
    v52 = *(_QWORD *)&v53[16];
    WebCore::Decimal::operator-(&v62, (__int128 *)v51, (uint64_t)&v64);
    if ((HIDWORD(v64) - 1) >= 2)
    {
      if (HIDWORD(v64) || (_DWORD)v65 == 1)
      {
LABEL_79:
        if (WebCore::StepRange::stepMismatch((WebCore::StepRange *)v53, (const WebCore::Decimal *)&v62))
        {
          if (v61)
          {
            *(_OWORD *)v51 = v56;
            v52 = v57;
            if ((v60 & 0x80000000) != 0)
              v39 = -(uint64_t)(int)v60;
            else
              v39 = v60;
            if (v39)
              v40 = 1;
            else
              v40 = 3;
            v48 = v40;
            v49 = ((unint64_t)(int)v60 >> 31) & 1;
            v46 = v39;
            v47 = 0;
            WebCore::Decimal::operator/((unint64_t)v51, (unint64_t)&v46, (uint64_t)&v64);
            if (HIDWORD(v64) == 3)
            {
              if ((_DWORD)v65 == 1)
                v44 = "-0";
              else
                v44 = "0";
              if ((_DWORD)v65 == 1)
                v45 = 3;
              else
                v45 = 2;
              WTF::String::String(&v50, (uint64_t)v44, v45);
            }
            else
            {
              WebCore::Decimal::toString((WTF::StringImpl *)&v64, &v50);
            }
          }
          else
          {
            v42 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
              *(_DWORD *)v42 += 2;
            v50 = v42;
          }
          v64 = v58;
          v65 = v59;
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, __int128 *))(*(_QWORD *)this + 864))(v51, this, &v64);
          WebCore::validationMessageStepMismatchText((uint64_t)a2);
          v43 = v51[0];
          v51[0] = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v16);
            else
              *(_DWORD *)v43 -= 2;
          }
          v37 = v50;
          v50 = 0;
          if (v37)
            goto LABEL_62;
          goto LABEL_28;
        }
LABEL_88:
        v41 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v41 += 2;
        *a2 = v41;
        goto LABEL_28;
      }
    }
    else if (HIDWORD(v64) == 2 || (_DWORD)v65)
    {
      goto LABEL_79;
    }
    v64 = *(_OWORD *)v53;
    v65 = *(_QWORD *)&v53[16];
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, __int128 *))(*(_QWORD *)this + 864))(v51, this, &v64);
    WebCore::validationMessageRangeOverflowText((WebCore *)v51, (uint64_t)a2);
LABEL_103:
    v37 = v51[0];
    v51[0] = 0;
    if (!v37)
      goto LABEL_28;
    goto LABEL_62;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (!v22)
    goto LABEL_56;
  v23 = *(_DWORD *)(v22 + 4);
  if ((v23 & 1) != 0)
  {
    v24 = *(_QWORD *)(v22 + 40);
    LODWORD(v25) = *(_DWORD *)(v22 + 52);
    if (!(_DWORD)v25)
      goto LABEL_56;
  }
  else
  {
    v24 = v22 + 32;
    LODWORD(v25) = v23 >> 5;
    if (!(_DWORD)v25)
      goto LABEL_56;
  }
  v25 = v25;
  v26 = v24 + 8;
  do
  {
    v27 = *(_QWORD *)(v26 - 8);
    if (v27 == WebCore::HTMLNames::titleAttr
      || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
      && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
    {
      break;
    }
    v26 += 16;
    --v25;
  }
  while (v25);
LABEL_56:
  WTF::String::trim();
  WTF::String::simplifyWhiteSpace();
  v36 = (WTF::StringImpl *)v64;
  *(_QWORD *)&v64 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*(_QWORD *)v53 && *(_DWORD *)(*(_QWORD *)v53 + 4))
    WebCore::validationMessagePatternMismatchText((WebCore *)v53, (uint64_t)a2);
  else
    WebCore::validationMessagePatternMismatchText((uint64_t)a2);
  v37 = *(WTF::StringImpl **)v53;
  *(_QWORD *)v53 = 0;
  if (v37)
  {
LABEL_62:
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v16);
    else
      *(_DWORD *)v37 -= 2;
  }
LABEL_28:
  result = v63;
  v63 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InputType::allowsShowPickerAcrossFrames(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::handleKeydownEvent(WebCore::InputType *this, WebCore::KeyboardEvent *a2)
{
  return 1;
}

WebCore *WebCore::InputType::shouldSubmitImplicitly(WebCore::InputType *this, WebCore::Event *a2)
{
  WebCore *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (WebCore *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
  if ((_DWORD)result)
  {
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
      v5 = WebCore::threadGlobalDataSlow(result);
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *(_QWORD *)(v5 + 40);
    }
    if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v6 + 1056))
      return (WebCore *)(WebCore::KeyboardEvent::charCode(a2) == 13);
    else
      return 0;
  }
  return result;
}

void WebCore::InputType::createInputRenderer(uint64_t a1@<X0>, WebCore::Style *a2@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  WebCore::RenderElement::createFor(*(WebCore::Document **)(*(_QWORD *)(a1 + 24) + 8), a2, 0, a3, a4);
}

unsigned int *WebCore::InputType::blur(WebCore::InputType *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return WebCore::Element::blur(*(WebCore::TreeScope ***)(v1 + 8));
  else
    return WebCore::Element::blur(0);
}

unsigned int *WebCore::InputType::removeShadowSubtree(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v1 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v1)
    {
      v2 = (uint64_t)this;
      *(_DWORD *)(v1 + 24) += 2;
      this = (unsigned int *)WebCore::ContainerNode::removeChildren(v1);
      *(_BYTE *)(v2 + 16) = 0;
      if (*(_DWORD *)(v1 + 24) == 2)
      {
        if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
      }
      else
      {
        *(_DWORD *)(v1 + 24) -= 2;
      }
    }
  }
  return this;
}

__n128 WebCore::InputType::parseToNumber@<Q0>(__n128 *a1@<X2>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

void WebCore::InputType::serialize(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::InputType::dateType(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::dispatchSimulatedClickIfActive(WebCore::InputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    result = *(_QWORD *)(v4 + 8);
  else
    result = 0;
  if ((*(_BYTE *)(result + 54) & 2) != 0)
  {
    result = WebCore::Element::isUserActionElementActive((WebCore::Element *)result);
    if ((_DWORD)result)
    {
      v6 = *((_QWORD *)this + 3);
      if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
      {
        *(_DWORD *)(v7 + 24) += 2;
        result = WebCore::simulateClick((WebCore *)v7, (uint64_t)a2, 0, 1, 1);
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      else
      {
        result = WebCore::simulateClick(0, (uint64_t)a2, 0, 1, 1);
      }
    }
  }
  *((_DWORD *)a2 + 5) |= 0x80u;
  return result;
}

uint64_t WebCore::InputType::canSetStringValue(WebCore::InputType *this)
{
  return 1;
}

uint64_t WebCore::InputType::hasCustomFocusLogic(WebCore::InputType *this)
{
  return 1;
}

uint64_t WebCore::InputType::isKeyboardFocusable(WebCore::InputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Element *v7;
  uint64_t v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v5 + 112) + 288))(v5 + 112)
    && (*(_BYTE *)(v5 + 160) & 0x20) != 0)
  {
    return 0;
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = *(WebCore::Element **)(v6 + 8);
  else
    v7 = 0;
  if ((WebCore::Element::tabIndexSetExplicitly(v7) & 0xFF00000000) != 0)
    return WebCore::Element::isKeyboardFocusable(v7, a2);
  if ((*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)v7 + 552))(v7)
    && (v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 5) + 8) + 528)) != 0
    && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    return WebCore::EventHandler::tabsToAllFormControls(*(WebCore::EventHandler **)(v10 + 640), a2);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::InputType::isMouseFocusable(WebCore::InputType *this)
{
  uint64_t v1;
  WebCore::Element *v2;
  WebCore::Document *v4;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(WebCore::Element **)(v1 + 8);
  else
    v2 = 0;
  if ((WebCore::Element::tabIndexSetExplicitly(v2) & 0xFF00000000) != 0)
    return (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)v2 + 552))(v2);
  v4 = *(WebCore::Document **)(*((_QWORD *)v2 + 5) + 8);
  if (!*((_QWORD *)v4 + 86))
    WebCore::Document::ensureQuirks(v4);
  return 0;
}

uint64_t WebCore::InputType::shouldUseInputMethod(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::accessKeyAction(WebCore::InputType *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v5;
  int v6;
  char v7;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      *(_DWORD *)(v2 + 24) += 2;
  }
  else
  {
    v2 = 0;
  }
  v5 = 1;
  v6 = 0;
  v7 = 0;
  WebCore::Element::focus((unsigned int *)v2, &v5);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return 0;
}

uint64_t WebCore::InputType::shouldRespectAlignAttribute(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::placeholderElement(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::rendererIsNeeded(WebCore::InputType *this)
{
  return 1;
}

void WebCore::InputType::defaultValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::InputType::shouldSendChangeEventAfterCheckedChanged(WebCore::InputType *this)
{
  return 1;
}

void WebCore::InputType::setValue(uint64_t a1, WTF::StringImpl *a2, char a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  void *v25;
  int v26;
  int v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  WTF::StringBuilder *v34;
  __n128 v35;
  WTF::StringBuilder *v36;
  __n128 v37;
  WebCore::AXObjectCache *v38;
  WebCore::AXObjectCache *v39;
  int v40;
  WTF::StringImpl *v41;
  _BYTE v42[24];
  _BYTE v43[24];
  uint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  unsigned __int8 *v52;
  _BYTE v53[12];

  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = 0;
      *(_DWORD *)(v8 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 1;
LABEL_4:
  if ((a3 & 1) == 0)
  {
    v28 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v28 += 2;
    v29 = *(WTF::StringImpl **)(v8 + 216);
    *(_QWORD *)(v8 + 216) = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, a2);
      else
        *(_DWORD *)v29 -= 2;
    }
    *(_WORD *)(v8 + 232) = *(_WORD *)(v8 + 232) & 0xFEFF | ((a4 != 0) << 8);
    WebCore::ValidatedFormListedElement::updateValidity(v8 + 112);
    goto LABEL_48;
  }
  v10 = *(_DWORD **)(v8 + 240);
  if (v10[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v10, &v41);
    goto LABEL_18;
  }
  v11 = *(WTF::StringImpl **)(v8 + 216);
  if (v11)
  {
    *(_DWORD *)v11 += 2;
    v41 = v11;
    goto LABEL_18;
  }
  v12 = *(_QWORD *)(v8 + 104);
  if (v12
    && ((v13 = *(_DWORD *)(v12 + 4), (v13 & 1) != 0)
      ? (v14 = *(_QWORD *)(v12 + 40), LODWORD(v15) = *(_DWORD *)(v12 + 52))
      : (v14 = v12 + 32, LODWORD(v15) = v13 >> 5),
        (_DWORD)v15))
  {
    v15 = v15;
    v16 = (_QWORD *)(v14 + 8);
    while (1)
    {
      v17 = *(v16 - 1);
      if (v17 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      v16 += 2;
      if (!--v15)
      {
        v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if (*v16)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 296))(&v41);
    if (v41)
      goto LABEL_18;
    v41 = 0;
    v10 = *(_DWORD **)(v8 + 240);
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 64))(&v41);
LABEL_18:
  if ((*(_DWORD *)(a1 + 12) & 0x142618) == 0)
    goto LABEL_19;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(&v47, a1, 0);
  if (!v51)
    goto LABEL_19;
  v52 = 0;
  *(_WORD *)v53 = 0;
  *(_QWORD *)&v53[4] = 2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl **, unsigned __int8 **))(*(_QWORD *)a1 + 856))(&v44, a1, &v41, &v52);
  if ((v46 & 0xFFFFFFFD) == 0)
  {
LABEL_63:
    v18 = 1;
    goto LABEL_20;
  }
  *(_OWORD *)v43 = v49;
  *(_QWORD *)&v43[16] = v50;
  if (v44 != (_QWORD)v49 || v45 != *(unsigned __int16 *)&v43[8] || v46 != *(_QWORD *)&v43[12])
  {
    WebCore::Decimal::operator-((__int128 *)&v44, (__int128 *)v43, (uint64_t)&v52);
    if ((*(_DWORD *)&v53[4] - 1) >= 2)
    {
      if (*(_DWORD *)&v53[4] == 3)
        goto LABEL_80;
      if (*(_DWORD *)&v53[4])
        goto LABEL_19;
      v30 = *(_DWORD *)&v53[8] == 1;
    }
    else
    {
      if (*(_DWORD *)&v53[4] == 2)
        goto LABEL_19;
      v30 = *(_DWORD *)&v53[8];
    }
    if (v30 == 1)
      goto LABEL_19;
  }
LABEL_80:
  *(_OWORD *)v42 = v47;
  *(_QWORD *)&v42[16] = v48;
  if (v44 == (_QWORD)v47 && v45 == *(unsigned __int16 *)&v42[8] && v46 == *(_QWORD *)&v42[12])
    goto LABEL_63;
  WebCore::Decimal::operator-((__int128 *)&v44, (__int128 *)v42, (uint64_t)&v52);
  if ((*(_DWORD *)&v53[4] - 1) >= 2)
  {
    if (*(_DWORD *)&v53[4] == 3)
      goto LABEL_63;
    if (!*(_DWORD *)&v53[4])
    {
      v31 = *(_DWORD *)&v53[8] == 1;
      goto LABEL_86;
    }
LABEL_19:
    v18 = 0;
    goto LABEL_20;
  }
  if (*(_DWORD *)&v53[4] == 2)
    goto LABEL_19;
  v31 = *(_DWORD *)&v53[8];
LABEL_86:
  v18 = v31 == 1;
LABEL_20:
  v19 = v41;
  v41 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x142618) == 0)
    goto LABEL_24;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(&v47, a1, 0);
  if (!v51)
    goto LABEL_24;
  v52 = 0;
  *(_WORD *)v53 = 0;
  *(_QWORD *)&v53[4] = 2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl *, unsigned __int8 **))(*(_QWORD *)a1 + 856))(&v44, a1, a2, &v52);
  if ((v46 & 0xFFFFFFFD) == 0)
  {
LABEL_66:
    v20 = 1;
    goto LABEL_25;
  }
  *(_OWORD *)v43 = v49;
  *(_QWORD *)&v43[16] = v50;
  if (v44 != (_QWORD)v49 || v45 != *(unsigned __int16 *)&v43[8] || v46 != *(_QWORD *)&v43[12])
  {
    WebCore::Decimal::operator-((__int128 *)&v44, (__int128 *)v43, (uint64_t)&v52);
    if ((*(_DWORD *)&v53[4] - 1) < 2)
    {
      if (*(_DWORD *)&v53[4] == 2)
        goto LABEL_24;
      v32 = *(_DWORD *)&v53[8];
      goto LABEL_93;
    }
    if (*(_DWORD *)&v53[4] != 3)
    {
      if (*(_DWORD *)&v53[4])
        goto LABEL_24;
      v32 = *(_DWORD *)&v53[8] == 1;
LABEL_93:
      if (v32 == 1)
        goto LABEL_24;
    }
  }
  *(_OWORD *)v42 = v47;
  *(_QWORD *)&v42[16] = v48;
  if (v44 == (_QWORD)v47 && v45 == *(unsigned __int16 *)&v42[8] && v46 == *(_QWORD *)&v42[12])
    goto LABEL_66;
  WebCore::Decimal::operator-((__int128 *)&v44, (__int128 *)v42, (uint64_t)&v52);
  if ((*(_DWORD *)&v53[4] - 1) >= 2)
  {
    if (*(_DWORD *)&v53[4] == 3)
      goto LABEL_66;
    if (!*(_DWORD *)&v53[4])
    {
      v33 = *(_DWORD *)&v53[8] == 1;
      goto LABEL_100;
    }
  }
  else if (*(_DWORD *)&v53[4] != 2)
  {
    v33 = *(_DWORD *)&v53[8];
LABEL_100:
    v20 = v33 == 1;
    goto LABEL_25;
  }
LABEL_24:
  v20 = 0;
LABEL_25:
  if ((*(_WORD *)(v8 + 30) & 4) != 0 && WebCore::HTMLElement::hasDirectionAuto((WebCore::HTMLElement *)v8))
  {
    WebCore::HTMLElement::computeDirectionalityFromText(v8, v34, (uint64_t)&v47, v35);
    v22 = v47;
    WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode::~TextDirectionWithStrongDirectionalityNode((WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode *)&v47);
    v21 = 1;
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  LOBYTE(v47) = 0;
  BYTE8(v49) = 0;
  if (v18 != v20)
  {
    LOBYTE(v44) = 38;
    BYTE1(v44) = v20;
    BYTE2(v44) = 58;
    BYTE3(v44) = v20 ^ 1;
    v52 = (unsigned __int8 *)&v44;
    *(_QWORD *)v53 = 2;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)&v47, (void *)v8, &v52);
  }
  v23 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v23 += 2;
  v24 = *(WTF::StringImpl **)(v8 + 216);
  *(_QWORD *)(v8 + 216) = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  *(_WORD *)(v8 + 232) = *(_WORD *)(v8 + 232) & 0xFEFF | ((a4 != 0) << 8);
  WebCore::ValidatedFormListedElement::updateValidity(v8 + 112);
  if ((*(_WORD *)(v8 + 30) & 4) != 0 && WebCore::HTMLElement::hasDirectionAuto((WebCore::HTMLElement *)v8))
  {
    WebCore::HTMLElement::computeDirectionalityFromText(v8, v36, (uint64_t)&v52, v37);
    v27 = v52;
    WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode::~TextDirectionWithStrongDirectionalityNode((WebCore::HTMLElement::TextDirectionWithStrongDirectionalityNode *)&v52);
    v26 = 1;
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  if (((v22 | (v21 << 8)) == 257) != ((v27 | (v26 << 8)) == 257))
    WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v8);
  if (a4 != 1)
  {
    if (a4 != 2)
      goto LABEL_40;
    WebCore::HTMLFormControlElement::dispatchFormControlInputEvent((WebCore::Node *)v8);
  }
  WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)v8);
LABEL_40:
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v38 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8));
    if (v38)
    {
      v39 = v38;
      ++*((_DWORD *)v38 + 2);
      WebCore::AXObjectCache::postNotification(v38, (WebCore::Node *)v8, 57, 0);
      v40 = *((_DWORD *)v39 + 2);
      if (!v40)
      {
        __break(0xC471u);
        return;
      }
      *((_DWORD *)v39 + 2) = v40 - 1;
    }
  }
  if (BYTE8(v49))
  {
    if ((_BYTE)v47)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v47 + 1), (unsigned __int8 **)&v49);
    if ((_QWORD)v49)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v49, v25);
    if (v48)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v48, v25);
  }
LABEL_48:
  if ((v9 & 1) == 0)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v25);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

void WebCore::InputType::localizeValue(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v3 += 2;
  *a2 = v3;
}

uint64_t WebCore::InputType::isEmptyValue(WebCore::InputType *this)
{
  return 1;
}

uint64_t WebCore::InputType::receiveDroppedFiles()
{
  return 0;
}

uint64_t WebCore::InputType::icon(WebCore::InputType *this)
{
  return 0;
}

void WebCore::InputType::displayString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::InputType::shouldRespectListAttribute(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::supportsPlaceholder(WebCore::InputType *this)
{
  return 0;
}

void WebCore::InputType::defaultToolTip(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::InputType::findClosestTickMarkValue(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t WebCore::InputType::matchesIndeterminatePseudoClass(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::isPresentingAttachedView(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::dirAutoUsesValue(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::height(WebCore::InputType *this)
{
  return 0;
}

uint64_t WebCore::InputType::width(WebCore::InputType *this)
{
  return 0;
}

void WebCore::InputType::applyStep(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, uint64_t a5)
{
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::String *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WebCore::Element *v25;
  uint64_t *Attribute;
  uint64_t v27;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __n128 v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WebCore::Node *v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  BOOL v49;
  int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  WebCore::AXObjectCache *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _BYTE v79[24];
  _BYTE v80[24];
  _BYTE v81[24];
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  WTF::StringImpl *v88[2];
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  _BYTE v103[120];
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  (*(void (**)(__int128 *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)a2 + 208))(&v94, a2, a4);
  if (!v102)
  {
    *(_BYTE *)a1 = 8;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  v92 = v96;
  v93 = v97;
  v90 = v94;
  v91 = v95;
  WebCore::Decimal::operator-(&v92, &v90, (uint64_t)v103);
  if ((*(_DWORD *)&v103[12] - 1) >= 2)
  {
    if (!*(_DWORD *)&v103[12] && *(_DWORD *)&v103[16] != 1)
      goto LABEL_78;
  }
  else if (*(_DWORD *)&v103[12] != 2 && !*(_DWORD *)&v103[16])
  {
    goto LABEL_78;
  }
  v9.n128_f64[0] = WebCore::StepRange::stepSnappedMaximum((WebCore::StepRange *)&v94, (uint64_t)&v92);
  if ((HIDWORD(v92) & 0xFFFFFFFD) == 0)
    goto LABEL_78;
  v10 = *((_QWORD *)a2 + 3);
  if (v10)
    v11 = *(_QWORD **)(v10 + 8);
  else
    v11 = 0;
  v12 = (_DWORD *)v11[30];
  if (v12[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v12, v88);
    goto LABEL_28;
  }
  v13 = (WTF::StringImpl *)v11[27];
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v88[0] = v13;
    goto LABEL_28;
  }
  v14 = v11[13];
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 4);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(v14 + 40);
      LODWORD(v17) = *(_DWORD *)(v14 + 52);
      if ((_DWORD)v17)
      {
LABEL_13:
        v17 = v17;
        v18 = (_QWORD *)(v16 + 8);
        while (1)
        {
          v19 = *(v18 - 1);
          if (v19 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_23;
          }
          v18 += 2;
          if (!--v17)
          {
            v18 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_23;
          }
        }
      }
    }
    else
    {
      v16 = v14 + 32;
      LODWORD(v17) = v15 >> 5;
      if ((_DWORD)v17)
        goto LABEL_13;
    }
  }
  v18 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_23:
  if (!*v18)
  {
LABEL_24:
    (*(void (**)(WTF::StringImpl **__return_ptr, __n128))(*(_QWORD *)v12 + 64))(v88, v9);
    goto LABEL_28;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, __n128))(*(_QWORD *)v12 + 296))(v88, v9);
  if (!v88[0])
  {
    v88[0] = 0;
    v12 = (_DWORD *)v11[30];
    goto LABEL_24;
  }
LABEL_28:
  *(_QWORD *)&v103[12] = 3;
  *(_QWORD *)v103 = 0;
  *(_WORD *)&v103[8] = 0;
  (*(void (**)(__int128 *__return_ptr, _DWORD *, WTF::StringImpl **, _BYTE *))(*(_QWORD *)a2 + 856))(&v90, a2, v88, v103);
  v23 = v88[0];
  v88[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  *(_OWORD *)v88 = v100;
  v89 = v101;
  v86 = v98;
  v87 = v99;
  v84 = v90;
  v85 = v91;
  v24 = *((_QWORD *)a2 + 3);
  if (v24)
    v25 = *(WebCore::Element **)(v24 + 8);
  else
    v25 = 0;
  Attribute = (uint64_t *)WebCore::Element::getAttribute(v25, (const WebCore::QualifiedName *)&WebCore::HTMLNames::stepAttr, v21, v22, (__n128)v90);
  v27 = *Attribute;
  if (*Attribute && *(_DWORD *)(v27 + 4) == 3)
  {
    v37 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v27 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v37 & 0xDF) == 0x41 && (*(_BYTE *)(v37 + 1) & 0xDF) == 0x4E)
      {
        v38 = *(unsigned __int8 *)(v37 + 2);
        goto LABEL_84;
      }
    }
    else if ((*(_WORD *)v37 & 0xFFDF) == 0x41 && (*(_WORD *)(v37 + 2) & 0xFFDF) == 0x4E)
    {
      v38 = *(unsigned __int16 *)(v37 + 4);
LABEL_84:
      if ((v38 & 0xFFFFFFDF) == 0x59)
        goto LABEL_45;
    }
  }
  if (WebCore::StepRange::stepMismatch((WebCore::StepRange *)&v94, (const WebCore::Decimal *)&v90))
  {
    if (a3 < 0)
    {
      WebCore::Decimal::operator-(&v84, (__int128 *)v88, (uint64_t)v79);
      WebCore::Decimal::operator/((unint64_t)v79, (unint64_t)&v86, (uint64_t)v80);
      if ((*(_DWORD *)&v80[12] & 0xFFFFFFFD) != 0 && *(__int16 *)&v80[8] < 0)
      {
        v58 = *(_QWORD *)v80;
        if (!*(_QWORD *)v80)
          goto LABEL_150;
        v59 = 0;
        v60 = 1;
        do
        {
          ++v59;
          if (v60 > 0x1999999999999998)
            break;
          v60 *= 10;
        }
        while (v60 <= *(_QWORD *)v80);
        v61 = -*(__int16 *)&v80[8];
        if (v59 >= v61)
        {
          v62 = -*(__int16 *)&v80[8];
          do
          {
            v63 = v58 / 0xA;
            if (v62 < 2)
              break;
            --v62;
            v49 = v58 > 9;
            v58 /= 0xAuLL;
          }
          while (v49);
          v64 = *(_DWORD *)&v80[16];
          if (*(_DWORD *)&v80[16] == 1)
            v63 += !WebCore::isMultiplePowersOfTen(v63, v61);
          WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>((uint64_t)v81, v64, 0, v63);
        }
        else
        {
LABEL_150:
          if (*(_DWORD *)&v80[16])
          {
            *(_QWORD *)&v81[12] = 0x100000001;
            *(_QWORD *)v81 = 1;
            *(_WORD *)&v81[8] = 0;
          }
          else
          {
            *(_QWORD *)v81 = 0;
            *(_WORD *)&v81[8] = 0;
            *(_QWORD *)&v81[12] = 3;
          }
        }
      }
      else
      {
        *(_OWORD *)v81 = *(_OWORD *)v80;
        *(_QWORD *)&v81[16] = *(_QWORD *)&v80[16];
      }
      WebCore::Decimal::operator*((unint64_t)v81, (unint64_t *)&v86, (uint64_t)&v82);
      WebCore::Decimal::operator+((__int128 *)v88, &v82, (uint64_t)v103);
      v84 = *(_OWORD *)v103;
      v85 = *(_QWORD *)&v103[16];
      ++a3;
    }
    else if (a3)
    {
      WebCore::Decimal::operator-(&v84, (__int128 *)v88, (uint64_t)v79);
      WebCore::Decimal::operator/((unint64_t)v79, (unint64_t)&v86, (uint64_t)v80);
      if ((*(_DWORD *)&v80[12] & 0xFFFFFFFD) != 0 && *(__int16 *)&v80[8] < 0)
      {
        v51 = *(_QWORD *)v80;
        if (!*(_QWORD *)v80)
          goto LABEL_130;
        v52 = -1;
        v53 = 1;
        do
        {
          ++v52;
          if (v53 > 0x1999999999999998)
            break;
          v53 *= 10;
        }
        while (v53 <= *(_QWORD *)v80);
        v54 = -*(__int16 *)&v80[8];
        if (v52 >= v54)
        {
          v55 = -*(__int16 *)&v80[8];
          do
          {
            v56 = v51 / 0xA;
            if (v55 < 2)
              break;
            --v55;
            v49 = v51 > 9;
            v51 /= 0xAuLL;
          }
          while (v49);
          v57 = *(_DWORD *)&v80[16];
          if (!*(_DWORD *)&v80[16])
            v56 += !WebCore::isMultiplePowersOfTen(v56, v54);
          WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>((uint64_t)v81, v57, 0, v56);
        }
        else
        {
LABEL_130:
          if (*(_DWORD *)&v80[16])
          {
            *(_QWORD *)v81 = 0;
            *(_WORD *)&v81[8] = 0;
            *(_QWORD *)&v81[12] = 3;
          }
          else
          {
            *(_QWORD *)&v81[12] = 1;
            *(_QWORD *)v81 = 1;
            *(_WORD *)&v81[8] = 0;
          }
        }
      }
      else
      {
        *(_OWORD *)v81 = *(_OWORD *)v80;
        *(_QWORD *)&v81[16] = *(_QWORD *)&v80[16];
      }
      WebCore::Decimal::operator*((unint64_t)v81, (unint64_t *)&v86, (uint64_t)&v82);
      WebCore::Decimal::operator+((__int128 *)v88, &v82, (uint64_t)v103);
      v84 = *(_OWORD *)v103;
      v85 = *(_QWORD *)&v103[16];
      --a3;
    }
  }
LABEL_45:
  *(_OWORD *)v81 = v98;
  *(_QWORD *)&v81[16] = v99;
  if ((unint64_t)(COERCE__INT64(fabs((double)a3)) - 0x10000000000000) >> 53 <= 0x3FE
    || COERCE__INT64((double)a3) == 0)
  {
    v29 = (const char *)WTF::numberToString();
    v30 = (uint64_t)v29;
    v31 = 0x100000000;
    if (v29)
      v31 = strlen(v29) | 0x100000000;
    WebCore::Decimal::fromString(v30, v31, (uint64_t)v80);
  }
  else
  {
    *(_QWORD *)v80 = 0;
    *(_WORD *)&v80[8] = 0;
    *(_QWORD *)&v80[12] = 2;
  }
  WebCore::Decimal::operator*((unint64_t)v81, (unint64_t *)v80, (uint64_t)&v82);
  WebCore::Decimal::operator+(&v84, &v82, (uint64_t)v103);
  v84 = *(_OWORD *)v103;
  v85 = *(_QWORD *)&v103[16];
  v32 = *Attribute;
  if (!*Attribute || *(_DWORD *)(v32 + 4) != 3)
    goto LABEL_54;
  v39 = *(_QWORD *)(v32 + 8);
  if ((*(_BYTE *)(v32 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v39 & 0xDF) != 0x41 || (*(_BYTE *)(v39 + 1) & 0xDF) != 0x4E)
      goto LABEL_54;
    v40 = *(unsigned __int8 *)(v39 + 2);
  }
  else
  {
    if ((*(_WORD *)v39 & 0xFFDF) != 0x41 || (*(_WORD *)(v39 + 2) & 0xFFDF) != 0x4E)
      goto LABEL_54;
    v40 = *(unsigned __int16 *)(v39 + 4);
  }
  if ((v40 & 0xFFFFFFDF) != 0x59)
  {
LABEL_54:
    WebCore::StepRange::alignValueForStep((WebCore::StepRange *)&v94, (const WebCore::Decimal *)&v90, (const WebCore::Decimal *)&v84, (uint64_t)v103);
    v84 = *(_OWORD *)v103;
    v85 = *(_QWORD *)&v103[16];
  }
  v82 = v96;
  v83 = v97;
  WebCore::Decimal::operator-(&v84, &v82, (uint64_t)v103);
  if ((*(_DWORD *)&v103[12] - 1) >= 2)
  {
    if (*(_DWORD *)&v103[12])
      goto LABEL_63;
    v33 = *(_DWORD *)&v103[16] == 1;
  }
  else
  {
    if (*(_DWORD *)&v103[12] == 2)
      goto LABEL_63;
    v33 = *(_DWORD *)&v103[16];
  }
  if (v33 == 1)
  {
    v77 = v96;
    v78 = v97;
    WebCore::Decimal::operator-(&v77, (__int128 *)v88, (uint64_t)v79);
    WebCore::Decimal::operator/((unint64_t)v79, (unint64_t)&v86, (uint64_t)v80);
    if ((*(_DWORD *)&v80[12] & 0xFFFFFFFD) != 0 && *(__int16 *)&v80[8] < 0)
    {
      v43 = *(_QWORD *)v80;
      if (!*(_QWORD *)v80)
        goto LABEL_117;
      v44 = -1;
      v45 = 1;
      do
      {
        ++v44;
        if (v45 > 0x1999999999999998)
          break;
        v45 *= 10;
      }
      while (v45 <= *(_QWORD *)v80);
      v46 = -*(__int16 *)&v80[8];
      if (v44 >= v46)
      {
        v47 = -*(__int16 *)&v80[8];
        do
        {
          v48 = v43 / 0xA;
          if (v47 < 2)
            break;
          --v47;
          v49 = v43 > 9;
          v43 /= 0xAuLL;
        }
        while (v49);
        v50 = *(_DWORD *)&v80[16];
        if (!*(_DWORD *)&v80[16])
          v48 += !WebCore::isMultiplePowersOfTen(v48, v46);
        WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>((uint64_t)v81, v50, 0, v48);
      }
      else
      {
LABEL_117:
        if (*(_DWORD *)&v80[16])
        {
          *(_QWORD *)v81 = 0;
          *(_WORD *)&v81[8] = 0;
          *(_QWORD *)&v81[12] = 3;
        }
        else
        {
          *(_QWORD *)&v81[12] = 1;
          *(_QWORD *)v81 = 1;
          *(_WORD *)&v81[8] = 0;
        }
      }
    }
    else
    {
      *(_OWORD *)v81 = *(_OWORD *)v80;
      *(_QWORD *)&v81[16] = *(_QWORD *)&v80[16];
    }
    WebCore::Decimal::operator*((unint64_t)v81, (unint64_t *)&v86, (uint64_t)&v82);
    WebCore::Decimal::operator+((__int128 *)v88, &v82, (uint64_t)v103);
    v84 = *(_OWORD *)v103;
    v85 = *(_QWORD *)&v103[16];
  }
LABEL_63:
  v82 = v94;
  v83 = v95;
  v34.n128_f64[0] = WebCore::Decimal::operator-(&v84, &v82, (uint64_t)v103);
  if ((*(_DWORD *)&v103[12] - 1) >= 2)
  {
    if (!*(_DWORD *)&v103[12] && *(_DWORD *)&v103[16] != 1)
      goto LABEL_66;
  }
  else if (*(_DWORD *)&v103[12] != 2 && !*(_DWORD *)&v103[16])
  {
LABEL_66:
    v34 = (__n128)v92;
    v84 = v92;
    v85 = v93;
  }
  if (a3 < 0)
  {
    v34.n128_f64[0] = WebCore::Decimal::operator-(&v90, &v84, (uint64_t)v103);
    if ((*(_DWORD *)&v103[12] - 1) >= 2)
    {
      if (*(_DWORD *)&v103[12])
        goto LABEL_105;
      v36 = *(_DWORD *)&v103[16] == 1;
    }
    else
    {
      if (*(_DWORD *)&v103[12] == 2)
        goto LABEL_105;
      v36 = *(_DWORD *)&v103[16];
    }
    if (v36 != 1)
      goto LABEL_105;
LABEL_78:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    return;
  }
  if (!a3)
    goto LABEL_105;
  v34.n128_f64[0] = WebCore::Decimal::operator-(&v90, &v84, (uint64_t)v103);
  if ((*(_DWORD *)&v103[12] - 1) >= 2)
  {
    if (*(_DWORD *)&v103[12])
      goto LABEL_105;
    v35 = *(_DWORD *)&v103[16] == 1;
  }
  else
  {
    if (*(_DWORD *)&v103[12] == 2)
      goto LABEL_105;
    v35 = *(_DWORD *)&v103[16];
  }
  if (!v35)
    goto LABEL_78;
LABEL_105:
  ++a2[2];
  (*(void (**)(_DWORD *, __int128 *, uint64_t, __n128))(*(_QWORD *)a2 + 120))(a2, &v84, a5, v34);
  if (!*(_BYTE *)(a1 + 16))
  {
    v41 = *((_QWORD *)a2 + 3);
    if (v41)
    {
      v42 = *(WebCore::Node **)(v41 + 8);
      if (v42)
      {
        if (WebCore::Document::hasEverCreatedAnAXObjectCache)
        {
          v65 = *(_QWORD *)(*((_QWORD *)v42 + 5) + 8);
          if (*(_BYTE *)(v65 + 3362) || *(_BYTE *)(v65 + 3405))
          {
            while (1)
            {
              v73 = *(_QWORD *)(v65 + 528);
              if (!v73)
                break;
              v74 = *(_QWORD *)(v73 + 8);
              if (!v74)
                break;
              v75 = *(_QWORD *)(v74 + 120);
              if (!v75)
                break;
              v76 = *(_QWORD *)(v75 + 8);
              if (!v76)
                break;
              v65 = *(_QWORD *)(*(_QWORD *)(v76 + 40) + 8);
            }
          }
          else
          {
            v66 = *(_QWORD *)(v65 + 528);
            if (v66)
            {
              v67 = *(_QWORD *)(v66 + 8);
              if (v67)
              {
                v68 = *(_QWORD *)(*(_QWORD *)(v67 + 128) + 8);
                if (v68 && *(_BYTE *)(v68 + 144) == 0)
                {
                  v70 = *(_QWORD *)(v68 + 296);
                  if (v70)
                    v65 = v70;
                }
              }
            }
          }
          v71 = *(WebCore::AXObjectCache **)(v65 + 1488);
          if (v71)
          {
            ++*((_DWORD *)v71 + 2);
            WebCore::AXObjectCache::postNotification(v71, v42, 57, 0);
            v72 = *((_DWORD *)v71 + 2);
            if (!v72)
            {
              __break(0xC471u);
              JUMPOUT(0x195C95E68);
            }
            *((_DWORD *)v71 + 2) = v72 - 1;
          }
        }
      }
    }
  }
  if (a2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 8))(a2);
  else
    --a2[2];
}

uint64_t WebCore::InputType::getAllowedValueStep(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];
  __int128 v5;
  uint64_t v6;
  unsigned __int8 v7;

  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(v4, a1, 0);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return v7;
}

double WebCore::InputType::createStepRange@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_QWORD *)(a1 + 12) = 1;
  *(_QWORD *)a1 = 100;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 36) = 3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 60) = 1;
  *(_QWORD *)(a1 + 48) = 1;
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 84) = 3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 111) = 0;
  return result;
}

void WebCore::InputType::stepUp(WebCore::InputType *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((*((_DWORD *)this + 3) & 0x142618) != 0)
  {
    WebCore::InputType::applyStep(a3, this, a2, 0, 0);
  }
  else
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
}

WTF::StringImpl *WebCore::InputType::stepUpFromRenderer(WTF::StringImpl *this, int a2)
{
  WTF::StringImpl *v2;
  int v4;
  __n128 v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  __n128 v22;
  WTF::StringImpl *v23;
  int v24;
  __n128 *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _BOOL4 v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  __n128 v47;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  BOOL v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  char v66;
  _BYTE v67[8];
  WTF::StringImpl *v68;
  char v69;
  _BYTE v70[8];
  WTF::StringImpl *v71;
  char v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  char v75;
  _BYTE v76[24];
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  char v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  char v84;
  _BYTE v85[24];
  _BYTE v86[24];
  __int128 v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  __int128 v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  _BYTE v101[120];
  _BYTE v102[24];

  if (!a2)
    return this;
  v2 = this;
  if ((*((_DWORD *)this + 3) & 0x142618) == 0)
    return this;
  this = (WTF::StringImpl *)(*(_QWORD *(**)(__n128 *__return_ptr, WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 208))(&v92, this, 1);
  if (!v100)
    return this;
  {
    v4 = qword_1EE2F5808;
  }
  else
  {
    v4 = 0;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0;
  }
  LODWORD(qword_1EE2F5808) = v4 + 1;
  v90 = v96;
  v91 = v97;
  *(_QWORD *)&v102[12] = 3;
  *(_QWORD *)v102 = 0;
  *(_WORD *)&v102[8] = 0;
  v5.n128_f64[0] = WebCore::Decimal::operator-(&v90, (__int128 *)v102, (uint64_t)v101);
  if ((*(_DWORD *)&v101[12] - 1) >= 2)
  {
    if (!*(_DWORD *)&v101[12])
    {
      v6 = *(_DWORD *)&v101[16] == 1;
LABEL_9:
      v7 = a2;
      if (!v6)
        goto LABEL_16;
    }
  }
  else if (*(_DWORD *)&v101[12] != 2)
  {
    v6 = *(_DWORD *)&v101[16];
    goto LABEL_9;
  }
  *(_QWORD *)&v102[12] = 3;
  *(_QWORD *)v102 = 0;
  *(_WORD *)&v102[8] = 0;
  v5.n128_f64[0] = WebCore::Decimal::operator-(&v90, (__int128 *)v102, (uint64_t)v101);
  if ((*(_DWORD *)&v101[12] - 1) >= 2)
  {
    if (!*(_DWORD *)&v101[12])
    {
      v8 = *(_DWORD *)&v101[16] == 1;
LABEL_13:
      if (v8 == 1)
        v7 = -a2;
      else
        v7 = 0;
      goto LABEL_16;
    }
  }
  else if (*(_DWORD *)&v101[12] != 2)
  {
    v8 = *(_DWORD *)&v101[16];
    goto LABEL_13;
  }
  v7 = 0;
LABEL_16:
  v9 = *((_QWORD *)v2 + 3);
  if (v9)
    v10 = *(_QWORD **)(v9 + 8);
  else
    v10 = 0;
  v11 = (_DWORD *)v10[30];
  if (v11[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v11, &v89);
    goto LABEL_37;
  }
  v12 = (WTF::StringImpl *)v10[27];
  if (v12)
  {
    *(_DWORD *)v12 += 2;
    v89 = v12;
    goto LABEL_37;
  }
  v13 = v10[13];
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 4);
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(v13 + 40);
      LODWORD(v16) = *(_DWORD *)(v13 + 52);
      if ((_DWORD)v16)
      {
LABEL_23:
        v16 = v16;
        v17 = (_QWORD *)(v15 + 8);
        while (1)
        {
          v18 = *(v17 - 1);
          if (v18 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_32;
          }
          v17 += 2;
          if (!--v16)
          {
            v17 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_32;
          }
        }
      }
    }
    else
    {
      v15 = v13 + 32;
      LODWORD(v16) = v14 >> 5;
      if ((_DWORD)v16)
        goto LABEL_23;
    }
  }
  v17 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_32:
  if (!*v17)
  {
LABEL_33:
    (*(void (**)(WTF::StringImpl **__return_ptr, __n128))(*(_QWORD *)v11 + 64))(&v89, v5);
    goto LABEL_37;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, __n128))(*(_QWORD *)v11 + 296))(&v89, v5);
  if (!v89)
  {
    v89 = 0;
    v11 = (_DWORD *)v10[30];
    goto LABEL_33;
  }
LABEL_37:
  *(_QWORD *)v101 = 0;
  *(_WORD *)&v101[8] = 0;
  *(_QWORD *)&v101[12] = 2;
  (*(void (**)(__int128 *__return_ptr, WTF::StringImpl *, WTF::StringImpl **, _BYTE *))(*(_QWORD *)v2 + 856))(&v87, v2, &v89, v101);
  if ((HIDWORD(v87) & 0xFFFFFFFD) != 0)
    goto LABEL_53;
  (*(void (**)(_BYTE *__return_ptr, WTF::StringImpl *))(*(_QWORD *)v2 + 176))(v101, v2);
  v87 = *(_OWORD *)v101;
  v88 = *(_QWORD *)&v101[16];
  if (a2 < 0)
    v20 = -(uint64_t)a2;
  else
    v20 = a2;
  *(_DWORD *)&v101[12] = 1;
  *(_DWORD *)&v101[16] = a2 >> 31;
  *(_QWORD *)v101 = v20;
  *(_WORD *)&v101[8] = 0;
  WebCore::Decimal::operator*((unint64_t)&v90, (unint64_t *)v101, (uint64_t)v102);
  *(_OWORD *)v85 = v94;
  *(_QWORD *)&v85[16] = v95;
  WebCore::Decimal::operator-((__int128 *)v85, (__int128 *)v102, (uint64_t)v86);
  WebCore::Decimal::operator-(&v87, (__int128 *)v86, (uint64_t)v101);
  if ((*(_DWORD *)&v101[12] - 1) >= 2)
  {
    if (*(_DWORD *)&v101[12])
      goto LABEL_45;
    v21 = *(_DWORD *)&v101[16] == 1;
  }
  else
  {
    if (*(_DWORD *)&v101[12] == 2)
      goto LABEL_45;
    v21 = *(_DWORD *)&v101[16];
  }
  if (v21 == 1)
  {
    *(_OWORD *)v86 = v94;
    *(_QWORD *)&v86[16] = v95;
    WebCore::Decimal::operator-((__int128 *)v86, (__int128 *)v102, (uint64_t)v101);
    v87 = *(_OWORD *)v101;
    v88 = *(_QWORD *)&v101[16];
  }
LABEL_45:
  *(__n128 *)v85 = v92;
  *(_QWORD *)&v85[16] = v93;
  WebCore::Decimal::operator-((__int128 *)v85, (__int128 *)v102, (uint64_t)v86);
  v22.n128_f64[0] = WebCore::Decimal::operator-(&v87, (__int128 *)v86, (uint64_t)v101);
  if ((*(_DWORD *)&v101[12] - 1) >= 2)
  {
    if (!*(_DWORD *)&v101[12] && *(_DWORD *)&v101[16] != 1)
      goto LABEL_48;
  }
  else if (*(_DWORD *)&v101[12] != 2 && !*(_DWORD *)&v101[16])
  {
LABEL_48:
    *(__n128 *)v86 = v92;
    *(_QWORD *)&v86[16] = v93;
    WebCore::Decimal::operator-((__int128 *)v86, (__int128 *)v102, (uint64_t)v101);
    v22 = *(__n128 *)v101;
    v87 = *(_OWORD *)v101;
    v88 = *(_QWORD *)&v101[16];
  }
  (*(void (**)(uint64_t *__return_ptr, WTF::StringImpl *, __int128 *, _QWORD, __n128))(*(_QWORD *)v2 + 120))(&v82, v2, &v87, 0, v22);
  if (v84)
  {
    v23 = v83;
    v83 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
LABEL_53:
  if (v7 >= 1)
  {
    *(_OWORD *)v102 = v94;
    *(_QWORD *)&v102[16] = v95;
    WebCore::Decimal::operator-(&v87, (__int128 *)v102, (uint64_t)v101);
    if ((*(_DWORD *)&v101[12] - 1) >= 2)
    {
      if (!*(_DWORD *)&v101[12])
      {
        v24 = *(_DWORD *)&v101[16] == 1;
LABEL_57:
        if (v24 == 1)
        {
          v25 = (__n128 *)&v94;
LABEL_59:
          *(__n128 *)v101 = *v25;
          *(_QWORD *)&v101[16] = v25[1].n128_u64[0];
          (*(void (**)(uint64_t *__return_ptr, WTF::StringImpl *, _BYTE *, uint64_t))(*(_QWORD *)v2 + 120))(&v79, v2, v101, 2);
          if (!v81)
            goto LABEL_143;
          v27 = v80;
          v80 = 0;
          if (!v27)
            goto LABEL_143;
LABEL_141:
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v26);
          else
            *(_DWORD *)v27 -= 2;
          goto LABEL_143;
        }
      }
    }
    else if (*(_DWORD *)&v101[12] != 2)
    {
      v24 = *(_DWORD *)&v101[16];
      goto LABEL_57;
    }
LABEL_63:
    v28 = 0;
    goto LABEL_64;
  }
  if ((v7 & 0x80000000) == 0)
    goto LABEL_63;
  *(__n128 *)v86 = v92;
  *(_QWORD *)&v86[16] = v93;
  WebCore::Decimal::operator-(&v87, (__int128 *)v86, (uint64_t)v101);
  if ((*(_DWORD *)&v101[12] - 1) >= 2)
  {
    if (*(_DWORD *)&v101[12] || *(_DWORD *)&v101[16] == 1)
      goto LABEL_87;
LABEL_175:
    v25 = &v92;
    goto LABEL_59;
  }
  if (*(_DWORD *)&v101[12] != 2 && !*(_DWORD *)&v101[16])
    goto LABEL_175;
LABEL_87:
  v28 = 1;
LABEL_64:
  v29 = *((_QWORD *)v2 + 3);
  if (v29)
    v30 = *(_QWORD **)(v29 + 8);
  else
    v30 = 0;
  v31 = (_DWORD *)v30[30];
  if (v31[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v31, v86);
    goto LABEL_89;
  }
  v32 = (_DWORD *)v30[27];
  if (v32)
  {
    *v32 += 2;
    *(_QWORD *)v86 = v32;
    goto LABEL_89;
  }
  v33 = v30[13];
  if (v33)
  {
    v34 = *(_DWORD *)(v33 + 4);
    if ((v34 & 1) != 0)
    {
      v35 = *(_QWORD *)(v33 + 40);
      LODWORD(v36) = *(_DWORD *)(v33 + 52);
      if ((_DWORD)v36)
      {
LABEL_71:
        v36 = v36;
        v37 = (_QWORD *)(v35 + 8);
        while (1)
        {
          v38 = *(v37 - 1);
          if (v38 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v38 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v38 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_80;
          }
          v37 += 2;
          if (!--v36)
          {
            v37 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_80;
          }
        }
      }
    }
    else
    {
      v35 = v33 + 32;
      LODWORD(v36) = v34 >> 5;
      if ((_DWORD)v36)
        goto LABEL_71;
    }
  }
  v37 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_80:
  if (!*v37)
  {
LABEL_81:
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v31 + 64))(v86);
    goto LABEL_89;
  }
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v31 + 296))(v86);
  if (!*(_QWORD *)v86)
  {
    *(_QWORD *)v86 = 0;
    v31 = (_DWORD *)v30[30];
    goto LABEL_81;
  }
LABEL_89:
  if ((*((_DWORD *)v2 + 3) & 0x142618) != 0)
  {
    *(_QWORD *)v101 = 0;
    *(_WORD *)&v101[8] = 0;
    *(_QWORD *)&v101[12] = 2;
    (*(void (**)(_BYTE *__return_ptr, WTF::StringImpl *, _BYTE *, _BYTE *))(*(_QWORD *)v2 + 856))(v102, v2, v86, v101);
    v39 = 0;
    if ((*(_DWORD *)&v102[12] & 0xFFFFFFFD) != 0)
    {
      (*(void (**)(_BYTE *__return_ptr, WTF::StringImpl *, _QWORD))(*(_QWORD *)v2 + 208))(v101, v2, 0);
      v39 = WebCore::StepRange::stepMismatch((WebCore::StepRange *)v101, (const WebCore::Decimal *)v102);
    }
  }
  else
  {
    v39 = 0;
  }
  v40 = *(WTF::StringImpl **)v86;
  *(_QWORD *)v86 = 0;
  if (!v40)
  {
LABEL_94:
    if (v39)
      goto LABEL_95;
LABEL_139:
    WebCore::InputType::applyStep((uint64_t)&v64, v2, a2, 1, 2);
    if (v66)
    {
      v27 = v65;
      v65 = 0;
      if (v27)
        goto LABEL_141;
    }
    goto LABEL_143;
  }
  if (*(_DWORD *)v40 != 2)
  {
    *(_DWORD *)v40 -= 2;
    goto LABEL_94;
  }
  WTF::StringImpl::destroy(v40, v19);
  if (!v39)
    goto LABEL_139;
LABEL_95:
  *(_OWORD *)v102 = v98;
  *(_QWORD *)&v102[16] = v99;
  *(_QWORD *)&v86[12] = 3;
  *(_QWORD *)v86 = 0;
  *(_WORD *)&v86[8] = 0;
  if (v28)
  {
    WebCore::Decimal::operator-(&v87, (__int128 *)v102, (uint64_t)v76);
    WebCore::Decimal::operator/((unint64_t)v76, (unint64_t)&v90, (uint64_t)&v77);
    if ((HIDWORD(v77) & 0xFFFFFFFD) != 0 && SWORD4(v77) < 0)
    {
      v41 = v77;
      if (!(_QWORD)v77)
        goto LABEL_103;
      v42 = 0;
      v43 = 1;
      do
      {
        ++v42;
        if (v43 > 0x1999999999999998)
          break;
        v43 *= 10;
      }
      while (v43 <= (unint64_t)v77);
      v44 = -SWORD4(v77);
      if (v42 < v44)
      {
LABEL_103:
        if ((_DWORD)v78)
        {
          v45 = 0x100000001;
LABEL_196:
          *(_QWORD *)&v85[12] = v45;
          *(_QWORD *)v85 = 1;
          *(_WORD *)&v85[8] = 0;
          goto LABEL_109;
        }
LABEL_182:
        *(_QWORD *)v85 = 0;
        *(_WORD *)&v85[8] = 0;
        *(_QWORD *)&v85[12] = 3;
        goto LABEL_109;
      }
      v60 = -SWORD4(v77);
      do
      {
        v57 = v41 / 0xA;
        if (v60 < 2)
          break;
        --v60;
        v58 = v41 > 9;
        v41 /= 0xAuLL;
      }
      while (v58);
      v59 = v78;
      if ((_DWORD)v78 != 1)
        goto LABEL_188;
      goto LABEL_187;
    }
    goto LABEL_108;
  }
  if (v7 >= 1)
  {
    WebCore::Decimal::operator-(&v87, (__int128 *)v102, (uint64_t)v76);
    WebCore::Decimal::operator/((unint64_t)v76, (unint64_t)&v90, (uint64_t)&v77);
    if ((HIDWORD(v77) & 0xFFFFFFFD) != 0 && SWORD4(v77) < 0)
    {
      v53 = v77;
      if (!(_QWORD)v77)
        goto LABEL_181;
      v54 = -1;
      v55 = 1;
      do
      {
        ++v54;
        if (v55 > 0x1999999999999998)
          break;
        v55 *= 10;
      }
      while (v55 <= (unint64_t)v77);
      v44 = -SWORD4(v77);
      if (v54 < v44)
      {
LABEL_181:
        if (!(_DWORD)v78)
        {
          v45 = 1;
          goto LABEL_196;
        }
        goto LABEL_182;
      }
      v56 = -SWORD4(v77);
      do
      {
        v57 = v53 / 0xA;
        if (v56 < 2)
          break;
        --v56;
        v58 = v53 > 9;
        v53 /= 0xAuLL;
      }
      while (v58);
      v59 = v78;
      if ((_DWORD)v78)
      {
LABEL_188:
        WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>((uint64_t)v85, v59, 0, v57);
        goto LABEL_109;
      }
LABEL_187:
      v57 += !WebCore::isMultiplePowersOfTen(v57, v44);
      goto LABEL_188;
    }
LABEL_108:
    *(_OWORD *)v85 = v77;
    *(_QWORD *)&v85[16] = v78;
LABEL_109:
    WebCore::Decimal::operator*((unint64_t)v85, (unint64_t *)&v90, (uint64_t)v101);
    WebCore::Decimal::operator+((__int128 *)v102, (__int128 *)v101, (uint64_t)v86);
    goto LABEL_110;
  }
  *(_OWORD *)v86 = v87;
  *(_QWORD *)&v86[16] = v88;
LABEL_110:
  *(_OWORD *)v85 = v94;
  *(_QWORD *)&v85[16] = v95;
  WebCore::Decimal::operator-((__int128 *)v86, (__int128 *)v85, (uint64_t)v101);
  if ((*(_DWORD *)&v101[12] - 1) >= 2)
  {
    if (*(_DWORD *)&v101[12])
      goto LABEL_115;
    v46 = *(_DWORD *)&v101[16] == 1;
  }
  else
  {
    if (*(_DWORD *)&v101[12] == 2)
      goto LABEL_115;
    v46 = *(_DWORD *)&v101[16];
  }
  if (v46 == 1)
  {
    *(_OWORD *)v86 = v94;
    *(_QWORD *)&v86[16] = v95;
  }
LABEL_115:
  *(__n128 *)v85 = v92;
  *(_QWORD *)&v85[16] = v93;
  v47.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)v86, (__int128 *)v85, (uint64_t)v101);
  if ((*(_DWORD *)&v101[12] - 1) >= 2)
  {
    if (*(_DWORD *)&v101[12] || *(_DWORD *)&v101[16] == 1)
      goto LABEL_119;
  }
  else if (*(_DWORD *)&v101[12] == 2 || *(_DWORD *)&v101[16])
  {
    goto LABEL_119;
  }
  v47 = v92;
  *(__n128 *)v86 = v92;
  *(_QWORD *)&v86[16] = v93;
LABEL_119:
  if (a2 == -1 || a2 == 1)
    v49 = 2;
  else
    v49 = 0;
  (*(void (**)(uint64_t *__return_ptr, WTF::StringImpl *, _BYTE *, uint64_t, __n128))(*(_QWORD *)v2 + 120))(&v73, v2, v86, v49, v47);
  if (v75)
  {
    v50 = v74;
    v74 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v26);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (a2 < 2)
  {
    if (a2 <= -2)
    {
      WebCore::InputType::applyStep((uint64_t)v67, v2, a2 + 1, 1, 2);
      if (v69)
      {
        v27 = v68;
        v68 = 0;
        if (v27)
          goto LABEL_141;
      }
    }
  }
  else
  {
    WebCore::InputType::applyStep((uint64_t)v70, v2, a2 - 1, 1, 2);
    if (v72)
    {
      v27 = v71;
      v71 = 0;
      if (v27)
        goto LABEL_141;
    }
  }
LABEL_143:
  this = v89;
  v89 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v26);
    else
      *(_DWORD *)this -= 2;
  }
  {
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0xFFFFFFFFLL;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    return this;
  }
  LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
  if (!(_DWORD)qword_1EE2F5808)
  {
    v51 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
    v52 = dword_1EE2F5804;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    if (!(_DWORD)v52)
    {
      if (!v51)
        return this;
      return (WTF::StringImpl *)WTF::fastFree(v51, v26);
    }
    v61 = 0;
    v62 = 16 * v52;
    v63 = (_DWORD *)((char *)v51 + 16 * v52);
    do
    {
      this = (WTF::StringImpl *)WebCore::ScopedEventQueue::dispatchEvent((uint64_t)this, (WTF *)((char *)v51 + v61));
      v61 += 16;
    }
    while (v62 != v61);
    this = (WTF::StringImpl *)WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v51, v63);
    if (v51)
      return (WTF::StringImpl *)WTF::fastFree(v51, v26);
  }
  return this;
}

void WebCore::InputType::innerTextElement(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::InputType::createShadowSubtreeIfNeeded(uint64_t this)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  if (!*(_BYTE *)(this + 16))
  {
    v1 = (_DWORD *)this;
    v2 = *(_DWORD *)(this + 12);
    if ((v2 & 0x15183) != 0)
    {
      if (v2 != 2)
        return this;
      v3 = *(_QWORD *)(this + 24);
      if (!v3)
        return this;
      this = *(_QWORD *)(v3 + 8);
      if (!this || (*(_WORD *)(this + 232) & 0x2000) == 0)
        return this;
      v4 = v1 + 2;
      ++v1[2];
    }
    else
    {
      v4 = (_DWORD *)(this + 8);
      v5 = *(_QWORD *)(this + 24);
      ++*(_DWORD *)(this + 8);
      if (v5)
        this = *(_QWORD *)(v5 + 8);
      else
        this = 0;
    }
    WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)this);
    *((_BYTE *)v1 + 16) = 1;
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 512))(v1);
    if (v1[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      *v4 = v1[2] - 1;
  }
  return this;
}

_DWORD *WebCore::InputType::resultForDialogSubmit@<X0>(WebCore::InputType *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _DWORD *result;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD **)(v3 + 8);
  else
    v4 = 0;
  result = (_DWORD *)v4[30];
  if (result[3] == 64)
    return (_DWORD *)WebCore::FileInputType::firstElementPathForInputValue((uint64_t)result, a2);
  v6 = (_DWORD *)v4[27];
  if (v6)
  {
    *v6 += 2;
    *a2 = v6;
    return result;
  }
  v7 = v4[13];
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if ((_DWORD)v10)
      {
LABEL_8:
        v10 = v10;
        v11 = (_QWORD *)(v9 + 8);
        while (1)
        {
          v12 = *(v11 - 1);
          if (v12 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v11 += 2;
          if (!--v10)
          {
            v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v9 = v7 + 32;
      LODWORD(v10) = v8 >> 5;
      if ((_DWORD)v10)
        goto LABEL_8;
    }
  }
  v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (!*v11)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 64))(result);
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 296))(result);
  if (!*a2)
  {
    *a2 = 0;
    result = (_DWORD *)v4[30];
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 64))(result);
  }
  return result;
}

double WebCore::InputType::findStepBase@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v6 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v6
    && ((v7 = *(_DWORD *)(v6 + 4), (v7 & 1) != 0)
      ? (v8 = *(_QWORD *)(v6 + 40), LODWORD(v9) = *(_DWORD *)(v6 + 52))
      : (v8 = v6 + 32, LODWORD(v9) = v7 >> 5),
        (_DWORD)v9))
  {
    v9 = v9;
    v10 = v8 + 8;
    while (1)
    {
      v11 = *(_QWORD *)(v10 - 8);
      if (v11 == WebCore::HTMLNames::minAttr
        || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
        && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
      {
        break;
      }
      v10 += 16;
      if (!--v9)
      {
        v10 = MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v10 = MEMORY[0x1E0CBF2F8];
  }
  *(_QWORD *)v19 = 0;
  *(_WORD *)&v19[8] = 0;
  *(_QWORD *)&v19[12] = 2;
  (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a1 + 856))(a1, v10, v19);
  if ((*(_DWORD *)(a3 + 12) & 0xFFFFFFFD) == 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
    if (v13
      && ((v14 = *(_DWORD *)(v13 + 4), (v14 & 1) != 0)
        ? (v15 = *(_QWORD *)(v13 + 40), LODWORD(v16) = *(_DWORD *)(v13 + 52))
        : (v15 = v13 + 32, LODWORD(v16) = v14 >> 5),
          (_DWORD)v16))
    {
      v16 = v16;
      v17 = v15 + 8;
      while (1)
      {
        v18 = *(_QWORD *)(v17 - 8);
        if (v18 == WebCore::HTMLNames::valueAttr
          || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
          && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
        {
          break;
        }
        v17 += 16;
        if (!--v16)
        {
          v17 = MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v17 = MEMORY[0x1E0CBF2F8];
    }
    (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 856))(v19, a1, v17, a2);
    result = *(double *)v19;
    *(_OWORD *)a3 = *(_OWORD *)v19;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v19[16];
  }
  return result;
}

WTF::StringImpl **WebCore::InputTypeNames::range(WebCore::InputTypeNames *this)
{
  _QWORD v2[2];

  if ((_MergedGlobals_193 & 1) == 0)
  {
    v2[0] = "range";
    v2[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE83640, (uint64_t)v2);
    _MergedGlobals_193 = 1;
  }
  return &qword_1ECE83640;
}

uint64_t *WebCore::NodeListsNodeData::removeCacheWithAtomName<WebCore::LabelsNodeList>(uint64_t *result, WebCore::Node *this)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t **v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl *v17;
  unsigned __int8 *v18;
  WTF::StringImpl *v19;
  unsigned __int8 v20[8];
  WTF::StringImpl *v21;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v3 + 2;
  v4 = *result;
  if (*result)
    LODWORD(v4) = *(_QWORD *)(v4 + 8) != 0;
  v5 = result[1];
  if (v5)
    LODWORD(v5) = *(_QWORD *)(v5 + 8) != 0;
  v6 = v5 + v4;
  v8 = result + 2;
  v7 = result[2];
  if (v7)
    LODWORD(v7) = *(_DWORD *)(v7 - 12);
  v9 = v6 + v7;
  v10 = result[3];
  if (v10)
    LODWORD(v10) = *(_DWORD *)(v10 - 12);
  v11 = v9 + v10;
  v12 = result[4];
  if (v12)
    LODWORD(v12) = *(_DWORD *)(v12 - 12);
  v13 = v11 + v12;
  if (v11 + (_DWORD)v12 == 1)
  {
    v14 = (uint64_t **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
    result = *v14;
    *v14 = 0;
    if (result)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData((WebCore::NodeListsNodeData *)result, this);
      result = (uint64_t *)WTF::fastFree(v15, v16);
      v3 = *((_DWORD *)this + 6) - 2;
    }
  }
  if (v3)
  {
    *((_DWORD *)this + 6) = v3;
  }
  else if ((*((_WORD *)this + 15) & 0x400) == 0)
  {
    result = (uint64_t *)WebCore::Node::removedLastRef(this, this);
  }
  if (v13 != 1)
  {
    v20[0] = 2;
    v17 = (WTF::StringImpl *)WebCore::starAtomData;
    if (WebCore::starAtomData)
      *(_DWORD *)WebCore::starAtomData += 2;
    v21 = v17;
    v18 = WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>,std::pair<unsigned char,WTF::AtomString>>(v8, v20);
    WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::remove(v8, (WTF::StringImpl *)v18);
    result = (uint64_t *)v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::LabelsNodeList::~LabelsNodeList(WebCore::LabelsNodeList *this)
{
  WebCore::Node *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;

  v3 = (uint64_t *)((char *)this + 24);
  v2 = (WebCore::Node *)*((_QWORD *)this + 3);
  if ((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    v4 = *(uint64_t **)(*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL);
  else
    v4 = 0;
  WebCore::NodeListsNodeData::removeCacheWithAtomName<WebCore::LabelsNodeList>(v4, v2);
  *(_QWORD *)this = off_1E33D5A20;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
    WebCore::Document::unregisterNodeListForInvalidation(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v5);
  *(_QWORD *)this = off_1E33A53E8;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v3);
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::Node *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = (uint64_t *)((char *)this + 24);
  v2 = (WebCore::Node *)*((_QWORD *)this + 3);
  if ((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    v4 = *(uint64_t **)(*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL);
  else
    v4 = 0;
  WebCore::NodeListsNodeData::removeCacheWithAtomName<WebCore::LabelsNodeList>(v4, v2);
  *(_QWORD *)this = off_1E33D5A20;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
    WebCore::Document::unregisterNodeListForInvalidation(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v5);
  *(_QWORD *)this = off_1E33A53E8;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v3);
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
  bmalloc::api::isoDeallocate(this, v6);
}

BOOL WebCore::LabelsNodeList::elementMatches(WebCore::Node **this, WebCore::Element *a2)
{
  void *v3;
  WebCore::Node *v4;
  _BOOL8 v5;
  WebCore::Node *v7;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
  {
    return 0;
  }
  WebCore::HTMLLabelElement::control((uint64_t)a2, (uint64_t *)&v7);
  v4 = v7;
  v5 = v7 == this[3];
  v7 = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v4, v3);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  return v5;
}

WebCore::LazyLoadFrameObserver *WebCore::LazyLoadFrameObserver::observe(WebCore::LazyLoadFrameObserver *result, WTF::StringImpl *a2, _BYTE *a3)
{
  WebCore::LazyLoadFrameObserver *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  WebCore::IntersectionObserver *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  bmalloc::api *v23;
  void *v24;
  _DWORD *v25;
  _QWORD v26[2];
  int v27;
  _BYTE v28[8];
  int v29;
  char v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;

  v5 = result;
  v6 = *(_QWORD *)(*(_QWORD *)result + 8);
  v7 = *(_QWORD **)(v6 + 160);
  if (!v7)
  {
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v6);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *v7 = v8;
    v7[1] = 0;
    v7[3] = 0;
    result = *(WebCore::LazyLoadFrameObserver **)(v6 + 160);
    *(_QWORD *)(v6 + 160) = v7;
    if (result)
    {
      WebCore::LazyLoadFrameObserver::~LazyLoadFrameObserver(result, a2);
      result = (WebCore::LazyLoadFrameObserver *)WTF::fastFree(v10, v11);
      v7 = *(_QWORD **)(v6 + 160);
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 40) + 8);
  *(_DWORD *)(v12 + 24) += 2;
  v13 = v7[3];
  if (!v13)
  {
    v14 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v14 + 16) = 1;
    *(_QWORD *)v14 = &off_1E33A18C0;
    *(_QWORD *)(v14 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v14, (WebCore::ScriptExecutionContext *)(v12 + 192));
    *(_QWORD *)v14 = &off_1E33D5950;
    v28[0] = 0;
    v30 = 0;
    v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v15 += 2;
    v31 = v15;
    v32 = 0;
    v33 = 0;
    v25 = (_DWORD *)v14;
    WebCore::IntersectionObserver::create(v12, (uint64_t *)&v25, (uint64_t)v28, (uint64_t)v26);
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      if (v16[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
      else
        --v16[4];
    }
    v17 = v27;
    v18 = v27;
    if (v27)
    {
LABEL_11:
      if (v18 == -1)
        goto LABEL_17;
      goto LABEL_16;
    }
    v19 = v26[0];
    v26[0] = 0;
    v20 = (WebCore::IntersectionObserver *)v7[3];
    v7[3] = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WebCore::IntersectionObserver::~IntersectionObserver(v20);
        bmalloc::api::isoDeallocate(v23, v24);
        v18 = v27;
        goto LABEL_11;
      }
      v18 = 0;
      --*(_DWORD *)v20;
    }
    else
    {
      v18 = 0;
    }
LABEL_16:
    ((void (*)(_DWORD **, _QWORD *))off_1E33D5988[v18])(&v25, v26);
LABEL_17:
    if (v33 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E33D5998[v33])(v26, &v32);
    v33 = -1;
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WebCore::LazyLoadFrameObserver *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    if (v30 && v29 != -1)
      result = (WebCore::LazyLoadFrameObserver *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E33D59A8[v29])(v26, v28);
    if (v17)
      v13 = 0;
    else
      v13 = v7[3];
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      result = (WebCore::LazyLoadFrameObserver *)WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if (v13)
  {
    v21 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v21 += 2;
    v22 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, a2);
      else
        *(_DWORD *)v22 -= 2;
    }
    *((_BYTE *)v5 + 16) = *a3;
    return (WebCore::LazyLoadFrameObserver *)WebCore::IntersectionObserver::observe(v13, *(WebCore::Element **)(*(_QWORD *)v5 + 8));
  }
  return result;
}

uint64_t WebCore::LazyLoadFrameObserver::unobserve(WebCore::LazyLoadFrameObserver *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  WebCore::LazyLoadFrameObserver *v7;
  WTF *v8;
  void *v9;

  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = *(_QWORD *)(v2 + 160);
  if (!v3)
  {
    v3 = WTF::fastMalloc((WTF *)0x20);
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v2);
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    v7 = *(WebCore::LazyLoadFrameObserver **)(v2 + 160);
    *(_QWORD *)(v2 + 160) = v3;
    if (v7)
    {
      WebCore::LazyLoadFrameObserver::~LazyLoadFrameObserver(v7, v5);
      WTF::fastFree(v8, v9);
      v3 = *(_QWORD *)(v2 + 160);
    }
  }
  return WebCore::IntersectionObserver::unobserve(*(uint64_t ***)(v3 + 24), *(WebCore::Element **)(*(_QWORD *)this + 8));
}

void WebCore::IntersectionObserver::Init::~Init(WebCore::IntersectionObserver::Init *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E33D5998[v3])(&v6, (char *)this + 32);
  *((_DWORD *)this + 12) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*((_BYTE *)this + 16))
  {
    v5 = *((unsigned int *)this + 2);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, WebCore::IntersectionObserver::Init *))off_1E33D59A8[v5])(&v7, this);
    *((_DWORD *)this + 2) = -1;
  }
}

WebCore::IntersectionObserver *WebCore::LazyLoadImageObserver::observe(WebCore::LazyLoadImageObserver *this, WebCore::Element *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::IntersectionObserver *result;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  void *v9;
  WTF *v10;

  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v4 = *(WTF **)(v3 + 1576);
  if (!v4)
  {
    v7 = (WTF **)(v3 + 1576);
    v8 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v8 = 0;
    v10 = v8;
    std::unique_ptr<WebCore::LazyLoadImageObserver>::operator=[abi:sn180100](v7, &v10);
    std::unique_ptr<WebCore::LazyLoadImageObserver>::~unique_ptr[abi:sn180100](&v10, v9);
    v4 = *v7;
    v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  }
  *(_DWORD *)(v3 + 24) += 2;
  result = WebCore::LazyLoadImageObserver::intersectionObserver((WebCore::IntersectionObserver **)v4, (WebCore::Document *)v3);
  v6 = (uint64_t)result;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      result = (WebCore::IntersectionObserver *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (v6)
    return (WebCore::IntersectionObserver *)WebCore::IntersectionObserver::observe(v6, this);
  return result;
}

WebCore::IntersectionObserver *WebCore::LazyLoadImageObserver::intersectionObserver(WebCore::IntersectionObserver **this, WebCore::Document *a2)
{
  WebCore::IntersectionObserver *result;
  int *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  int v8;
  int v9;
  WebCore::IntersectionObserver *v10;
  WebCore::IntersectionObserver *v11;
  _DWORD *v12;
  _QWORD v13[2];
  int v14;
  WebCore::Document *v15;
  int v16;
  char v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  result = *this;
  if (!result)
  {
    WebCore::LazyImageLoadIntersectionObserverCallback::create((WebCore::LazyImageLoadIntersectionObserverCallback *)&v21, a2);
    if (byte_1ECE83639 == 1)
    {
      v5 = (int *)qword_1ECE83648;
    }
    else
    {
      v5 = &WebCore::LazyLoadImageObserver::intersectionObserver(WebCore::Document &)::$_0::operator() const(void)::impl;
      WebCore::LazyLoadImageObserver::intersectionObserver(WebCore::Document &)::$_0::operator() const(void)::impl += 2;
      qword_1ECE83648 = (uint64_t)&WebCore::LazyLoadImageObserver::intersectionObserver(WebCore::Document &)::$_0::operator() const(void)::impl;
      byte_1ECE83639 = 1;
    }
    *((_DWORD *)a2 + 6) += 2;
    v15 = a2;
    v16 = 1;
    v17 = 1;
    if (v5)
      *v5 += 2;
    v18 = v5;
    v19 = 0;
    v20 = 0;
    v12 = (_DWORD *)v21;
    WebCore::IntersectionObserver::create((uint64_t)a2, (uint64_t *)&v12, (uint64_t)&v15, (uint64_t)v13);
    v7 = v12;
    v12 = 0;
    if (v7)
    {
      if (v7[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
      else
        --v7[4];
    }
    v8 = v14;
    v9 = v14;
    if (!v14)
    {
      v10 = (WebCore::IntersectionObserver *)v13[0];
      if (v13[0])
        ++*(_DWORD *)v13[0];
      v11 = *this;
      *this = v10;
      if (!v11)
      {
        v9 = 0;
LABEL_13:
        ((void (*)(_DWORD **, _QWORD *))off_1E33D5988[v9])(&v12, v13);
LABEL_14:
        WebCore::IntersectionObserver::Init::~Init((WebCore::IntersectionObserver::Init *)&v15, v6);
        if (v8)
          return 0;
        else
          return *this;
      }
      WTF::RefCounted<WebCore::IntersectionObserver>::deref(v11);
      v9 = v14;
    }
    if (v9 == -1)
      goto LABEL_14;
    goto LABEL_13;
  }
  return result;
}

uint64_t **WebCore::LazyLoadImageObserver::unobserve(WebCore::LazyLoadImageObserver *this, WebCore::Element *a2, WebCore::Document *a3)
{
  WTF *v4;
  uint64_t **result;
  WTF **v6;
  WTF *v7;
  void *v8;
  WTF *v9;

  v4 = (WTF *)*((_QWORD *)a2 + 197);
  if (!v4)
  {
    v6 = (WTF **)((char *)a2 + 1576);
    v7 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v7 = 0;
    v9 = v7;
    std::unique_ptr<WebCore::LazyLoadImageObserver>::operator=[abi:sn180100](v6, &v9);
    std::unique_ptr<WebCore::LazyLoadImageObserver>::~unique_ptr[abi:sn180100](&v9, v8);
    v4 = *v6;
  }
  result = *(uint64_t ***)v4;
  if (*(_QWORD *)v4)
    return (uint64_t **)WebCore::IntersectionObserver::unobserve(result, this);
  return result;
}

uint64_t *WebCore::LazyImageLoadIntersectionObserverCallback::create(WebCore::LazyImageLoadIntersectionObserverCallback *this, WebCore::Document *a2)
{
  uint64_t v4;
  uint64_t *result;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 16) = 1;
  *(_QWORD *)v4 = &off_1E33A18C0;
  *(_QWORD *)(v4 + 8) = 0;
  result = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v4, (WebCore::Document *)((char *)a2 + 192));
  *(_QWORD *)v4 = &off_1E33D59C8;
  *(_QWORD *)this = v4;
  return result;
}

void WebCore::LinkIconCollector::iconsOfTypes(WebCore::Document **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::HTMLLinkElement *Sibling;
  unsigned __int8 v9;
  WebCore::Element *v10;
  unsigned __int16 v11;
  char v12;
  WTF::StringImpl *v13;
  WebCore::Element **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  WTF::String *v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebCore::Element **v31;
  WebCore::Element **v32;
  WebCore::Element *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  char v41;
  _DWORD *v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47[4];
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  __int128 v51;
  __int128 v52;

  LODWORD(v3) = a2;
  v5 = WebCore::Document::head(*a1);
  if (!v5)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  v6 = v5;
  *(_DWORD *)(v5 + 24) += 2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = WebCore::Traversal<WebCore::HTMLLinkElement>::firstChildTemplate<WebCore::ContainerNode const>(v5);
  if (v7)
  {
    Sibling = (WebCore::HTMLLinkElement *)v7;
    v9 = v3;
    v10 = (WebCore::Element *)MEMORY[0x1E0CBF2F8];
    do
    {
      if ((unsigned __int16)WebCore::HTMLLinkElement::iconType(Sibling) >= 0x100u)
      {
        v11 = WebCore::HTMLLinkElement::iconType(Sibling);
        if (v11 <= 0xFFu)
        {
          __break(1u);
          return;
        }
        v12 = v11;
        if ((v11 & v9) != 0)
        {
          WebCore::HTMLLinkElement::href(Sibling, (WTF::URL *)&v50);
          if ((v51 & 2) != 0)
          {
            v14 = (WebCore::Element **)WebCore::HTMLLinkElement::sizes(Sibling);
            if (*((_DWORD *)WebCore::DOMTokenList::tokens(v14) + 3))
            {
              v31 = (WebCore::Element **)WebCore::HTMLLinkElement::sizes(Sibling);
              v32 = WebCore::DOMTokenList::tokens(v31);
              if (*((_DWORD *)v32 + 3))
                v33 = *v32;
              else
                v33 = v10;
              v34 = *(_QWORD *)v33;
              if (v34)
              {
                v35 = *(unsigned int *)(v34 + 16);
                v36 = *(_QWORD *)(v34 + 8);
                v34 = *(unsigned int *)(v34 + 4);
                v37 = (v35 >> 2) & 1;
              }
              else
              {
                v36 = 0;
                v37 = 1;
              }
              v3 = WTF::parseIntegerAllowingTrailingJunk<unsigned int>(v36, v34 | (v37 << 32));
            }
            else
            {
              v3 = v3 & 0xFFFFFF00;
            }
            v48 = 0;
            v49 = 0;
            if (WebCore::Element::hasAttributes(Sibling, v15, v16, v17, v18))
            {
              v19 = *((_QWORD *)Sibling + 13);
              v20 = *(unsigned int *)(v19 + 4);
              if ((v20 & 1) != 0)
              {
                v21 = *(_QWORD *)(v19 + 40);
                v22 = *(unsigned int *)(v19 + 52);
              }
              else
              {
                v21 = v19 + 32;
                v22 = v20 >> 5;
              }
              v38 = v21;
              *(_QWORD *)&v39 = v22;
              WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_1,WebCore::AttributeIteratorAccessor>(v47, &v38);
              WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&v48, (WTF::StringImpl *)v47);
              WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v47, v23);
            }
            v24 = v50;
            if (v50)
              *(_DWORD *)v50 += 2;
            v38 = (uint64_t)v24;
            v39 = v51;
            v40 = v52;
            v41 = v12;
            v25 = *(_DWORD **)WebCore::HTMLLinkElement::type(Sibling);
            if (v25)
              *v25 += 2;
            v42 = v25;
            v43 = v3;
            v44 = BYTE4(v3);
            v45 = v48;
            v26 = v49;
            v48 = 0;
            v49 = 0;
            v46 = v26;
            v27 = *(_DWORD *)(a3 + 12);
            if (v27 == *(_DWORD *)(a3 + 8))
            {
              WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkIcon>(a3, (unint64_t)&v38);
            }
            else
            {
              WebCore::LinkIcon::LinkIcon(*(_QWORD *)a3 + 80 * v27, &v38);
              ++*(_DWORD *)(a3 + 12);
            }
            WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v38, v28);
            WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v48, v29);
          }
          v30 = v50;
          v50 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v13);
            else
              *(_DWORD *)v30 -= 2;
          }
        }
      }
      Sibling = (WebCore::HTMLLinkElement *)WebCore::Traversal<WebCore::HTMLLinkElement>::nextSibling((uint64_t)Sibling);
    }
    while (Sibling);
  }
  std::sort[abi:sn180100]<WebCore::LinkIcon *,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0>(*(_QWORD *)a3, (uint64_t *)(*(_QWORD *)a3 + 80 * *(unsigned int *)(a3 + 12)));
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

uint64_t WTF::parseIntegerAllowingTrailingJunk<unsigned int>(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0)
    return WTF::parseInteger<unsigned int,unsigned char>(a1, a2, 10, 1);
  else
    return WTF::parseInteger<unsigned int,char16_t>(a1, a2, 10, 1);
}

_QWORD *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_1,WebCore::AttributeIteratorAccessor>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  int v15;

  *result = 0;
  result[1] = 0;
  v2 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v2)
  {
    if (v2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v2));
      *((_DWORD *)v4 + 2) = v2;
      *v4 = result;
      v5 = *((_DWORD *)a2 + 2);
      if (v5)
      {
        v6 = 0;
        v7 = 0;
        v8 = *a2;
        do
        {
          v9 = (uint64_t *)(v8 + 16 * v7);
          v11 = *v9;
          v10 = (_DWORD *)v9[1];
          v12 = *(_DWORD **)(v11 + 24);
          if (v12)
            *v12 += 2;
          if (v10)
            *v10 += 2;
          v13 = v6 + 1;
          v14 = &result[2 * v6];
          *v14 = v12;
          v14[1] = v10;
          v15 = v7 + 1;
          v7 = (v7 + 1);
          v6 = v13;
        }
        while (v5 != v15);
        *((_DWORD *)v4 + 3) = v13;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl **v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v8 = *(WTF::StringImpl ***)a1;
    v9 = 16 * v4;
    do
    {
      v8 = WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v8, a2) + 2;
      v9 -= 16;
    }
    while (v9);
  }
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  return a1;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v7 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v10 = v7;
          v12 = v6;
          WTF::StringImpl::destroy(v8, a2);
          v7 = v10;
          v6 = v12;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v9 = *(v7 - 1);
      *(v7 - 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          v11 = v7;
          v13 = v6;
          WTF::StringImpl::destroy(v9, a2);
          v7 = v11;
          v6 = v13;
        }
        else
        {
          *(_DWORD *)v9 -= 2;
        }
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void std::sort[abi:sn180100]<WebCore::LinkIcon *,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0>(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 4));
  if (a2 == (uint64_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *,false>(a1, a2, v3, 1);
}

unsigned int *WTF::StringView::SplitResult::Iterator::operator*(unsigned int *result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;

  v1 = *(_BYTE **)result;
  v2 = result[2];
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if (v3 <= v2)
    return (unsigned int *)"";
  v4 = result[3];
  if ((int)v3 - (int)v2 <= v4)
  {
    if (!(_DWORD)v2)
      return *(unsigned int **)v1;
    v4 = v3 - v2;
  }
  v5 = v3 - v2;
  if (v1[12])
  {
    if (v5 >= v4)
      return (unsigned int *)(*(_QWORD *)v1 + v2);
  }
  else if (v5 >= v4)
  {
    return (unsigned int *)(*(_QWORD *)v1 + 2 * v2);
  }
  __break(1u);
  return result;
}

BOOL WebCore::LinkRelAttribute::isSupported(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  __int128 v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  const char *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  v6 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (a3 != 9)
      goto LABEL_13;
    v7 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a2);
    if (v7 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + 1)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
      {
        v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + 2));
        if (v8 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        {
          v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + 3));
          if (v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + 4)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + 5)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + 6)) == v7
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + 7)) == v8
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + 8)) == v9)
          {
            return 1;
          }
        }
      }
LABEL_13:
      *((_QWORD *)&v11 + 1) = a3;
      *(_QWORD *)&v11 = a3 - 4;
      switch((unint64_t)(v11 >> 1))
      {
        case 0uLL:
          v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a2);
          goto LABEL_24;
        case 2uLL:
          v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a2);
          goto LABEL_52;
        case 3uLL:
          v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a2);
          goto LABEL_32;
        case 4uLL:
          v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a2);
          if (v12 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
            goto LABEL_65;
          v13 = 0;
          break;
        case 6uLL:
          v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a2);
          goto LABEL_40;
        case 0xCuLL:
          v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a2);
          goto LABEL_46;
        default:
          goto LABEL_65;
      }
      while (a3 - 1 != v13)
      {
        v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + v13 + 1));
        v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aDnsPrefetch[++v13]);
        if (v14 != v15)
        {
          if (v13 >= a3)
            return 1;
          if ((_DWORD)a3 == 4)
          {
LABEL_24:
            if (v12 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
              goto LABEL_65;
            v16 = 0;
            while (a3 - 1 != v16)
            {
              v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + v16 + 1));
              v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aIcon[++v16]);
              if (v17 != v18)
              {
                if (v16 >= a3)
                  return 1;
                if ((_DWORD)a3 == 10)
                  goto LABEL_32;
LABEL_37:
                if ((_DWORD)a3 == 16)
                  goto LABEL_40;
LABEL_45:
                if ((_DWORD)a3 != 28)
                  goto LABEL_82;
                goto LABEL_46;
              }
            }
          }
          else if ((int)a3 > 15)
          {
            if ((_DWORD)a3 == 16)
            {
LABEL_40:
              if (v12 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                goto LABEL_65;
              v22 = 0;
              while (a3 - 1 != v22)
              {
                v23 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + v22 + 1));
                v24 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aAppleTouchIcon[++v22]);
                if (v23 != v24)
                {
                  if (v22 >= a3)
                    return 1;
                  goto LABEL_45;
                }
              }
            }
            else
            {
              if ((_DWORD)a3 != 28)
                goto LABEL_65;
LABEL_46:
              if (v12 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                goto LABEL_65;
              v25 = 0;
              while (a3 - 1 != v25)
              {
                v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + v25 + 1));
                v27 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aAppleTouchIcon_0[++v25]);
                if (v26 != v27)
                {
                  if (v25 >= a3)
                    return 1;
                  if (a3 != 8)
                    goto LABEL_65;
                  goto LABEL_52;
                }
              }
            }
          }
          else if ((_DWORD)a3 == 10)
          {
LABEL_32:
            if (v12 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
              goto LABEL_65;
            v19 = 0;
            while (a3 - 1 != v19)
            {
              v20 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + v19 + 1));
              v21 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aStylesheet_1[++v19]);
              if (v20 != v21)
              {
                if (v19 >= a3)
                  return 1;
                goto LABEL_37;
              }
            }
          }
          else
          {
LABEL_82:
            if ((_DWORD)a3 != 8)
              goto LABEL_65;
LABEL_52:
            if (v12 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
              goto LABEL_65;
            v28 = 0;
            while (a3 - 1 != v28)
            {
              v29 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a2 + v28 + 1));
              v30 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aManifest[++v28]);
              if (v29 != v30)
              {
                if (v28 >= a3)
                  return 1;
                goto LABEL_65;
              }
            }
          }
          return 1;
        }
      }
      return 1;
    }
  }
  else
  {
    if (a3 == 9)
    {
      v31 = "alternate";
      v32 = (_BOOL8)a2;
      v33 = 9;
      v34 = 9;
    }
    else
    {
      *((_QWORD *)&v37 + 1) = a3;
      *(_QWORD *)&v37 = a3 - 4;
      v36 = v37 >> 1;
      if (v36 == 4)
      {
        v31 = "dns-prefetch";
      }
      else
      {
        switch(v36)
        {
          case 0:
            v31 = "icon";
            break;
          case 1:
          case 4:
          case 5:
            goto LABEL_65;
          case 2:
            v31 = "manifest";
            break;
          case 3:
            v31 = "stylesheet";
            break;
          case 6:
            v31 = "apple-touch-icon";
            break;
          default:
            if (v36 != 12)
              goto LABEL_65;
            v31 = "apple-touch-icon-precomposed";
            break;
        }
      }
      v32 = (_BOOL8)a2;
      v33 = v6;
      v34 = v6;
    }
    if (WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(v32, v6, (uint64_t)v31, v33, v34))
      return 1;
  }
LABEL_65:
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 680);
  if ((v35 & 0x40000000000000) != 0)
  {
    if ((WTF::equalLettersIgnoringASCIICase(a2, a3, "preconnect", 0xBuLL) & 1) != 0)
      return 1;
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 680);
  }
  if ((v35 & 0x10000000000000) != 0)
  {
    if ((WTF::equalLettersIgnoringASCIICase(a2, a3, "modulepreload", 0xEuLL) & 1) != 0)
      return 1;
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 680);
  }
  if ((v35 & 0x100000000000000) != 0)
  {
    if ((WTF::equalLettersIgnoringASCIICase(a2, a3, "preload", 8uLL) & 1) == 0)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 680);
      return (v35 & 0x80000000000000) != 0 && (WTF::equalLettersIgnoringASCIICase(a2, a3, "prefetch", 9uLL) & 1) != 0;
    }
    return 1;
  }
  return (v35 & 0x80000000000000) != 0 && (WTF::equalLettersIgnoringASCIICase(a2, a3, "prefetch", 9uLL) & 1) != 0;
}

WebCore::MediaController *WebCore::MediaController::MediaController(WebCore::MediaController *this, WebCore::ScriptExecutionContext *a2)
{
  _QWORD *v3;
  unint64_t StatusReg;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E33C5F00;
  *((_QWORD *)this + 2) = &off_1E33A18C0;
  v3 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::MediaController *)((char *)this + 16), a2);
  *(_QWORD *)this = off_1E33D5758;
  *v3 = &unk_1E33D58B0;
  *((_QWORD *)this + 4) = &unk_1E33D58D8;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 72) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 5) = _Q0;
  *((_QWORD *)this + 12) = 0xBFF0000000000000;
  *((_BYTE *)this + 104) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  v10 = *(unsigned int **)(StatusReg + 736);
  if (!v10)
    v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 22) = v10;
  *((_QWORD *)this + 17) = off_1E31F7378;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E33D5A98;
  v12[1] = WebCore::MediaController::asyncEventTimerFired;
  v12[2] = 0;
  v12[3] = this;
  *((_QWORD *)this + 23) = v12;
  *((_QWORD *)this + 24) = off_1E3407128;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  v13 = *(unsigned int **)(StatusReg + 736);
  if (!v13)
    v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)this + 29) = v13;
  *((_QWORD *)this + 24) = off_1E31F7378;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = off_1E33D5A98;
  v15[1] = WebCore::MediaController::clearPositionTimerFired;
  v15[2] = 0;
  v15[3] = this;
  *((_QWORD *)this + 30) = v15;
  *((_BYTE *)this + 248) = 0;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E31EF670;
  *(_BYTE *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v17;
  *((_QWORD *)this + 32) = v16;
  *((_QWORD *)this + 33) = off_1E3407128;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  v18 = *(unsigned int **)(StatusReg + 736);
  if (!v18)
    v18 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *((_QWORD *)this + 38) = v18;
  *((_QWORD *)this + 33) = off_1E31F7378;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v20 = off_1E33D5A98;
  v20[1] = WebCore::MediaController::scheduleTimeupdateEvent;
  v20[2] = 0;
  v20[3] = this;
  *((_QWORD *)this + 39) = v20;
  *((_QWORD *)this + 40) = 0;
  *((_BYTE *)this + 328) = 0;
  return this;
}

uint64_t WebCore::MediaController::asyncEventTimerFired(uint64_t this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  WebCore::EventTarget *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Event **v7;
  WebCore::Event *v8;
  uint64_t *v9;

  v2 = *(WTF **)(this + 120);
  v3 = *(unsigned int *)(this + 132);
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = 0;
  if ((_DWORD)v3)
  {
    v4 = (WebCore::EventTarget *)(this + 32);
    v5 = 8 * v3;
    v6 = 8 * v3;
    v7 = (WebCore::Event **)v2;
    do
    {
      v8 = *v7++;
      WebCore::EventTarget::dispatchEvent(v4, v8);
      v6 -= 8;
    }
    while (v6);
    v9 = (uint64_t *)v2;
    do
    {
      this = *v9;
      *v9 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 16) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 16);
      }
      ++v9;
      v5 -= 8;
    }
    while (v5);
  }
  if (v2)
    return WTF::fastFree(v2, a2);
  return this;
}

uint64_t WebCore::MediaController::clearPositionTimerFired(uint64_t this)
{
  *(_QWORD *)(this + 96) = 0xBFF0000000000000;
  return this;
}

void WebCore::MediaController::scheduleTimeupdateEvent(WebCore::MediaController *this)
{
  WebCore *v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  WebCore *v7;

  v2 = (WebCore *)WTF::MonotonicTime::now(this);
  v4 = v3;
  if (v3 - *((double *)this + 40) >= 0.25)
  {
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v2 = *(WebCore **)(v5 + 96)) == 0)
      v2 = (WebCore *)WebCore::threadGlobalDataSlow(v2);
    v6 = *((_QWORD *)v2 + 5);
    if (!v6)
    {
      v7 = v2;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v2);
      v6 = *((_QWORD *)v7 + 5);
    }
    WebCore::MediaController::scheduleEvent((char **)this, (const WTF::AtomString *)(v6 + 2048));
    *((double *)this + 40) = v4;
  }
}

void WebCore::MediaController::~MediaController(WebCore::MediaController *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  WTF *v13;
  void *v14;

  v2 = (WebCore::MediaController *)((char *)this + 264);
  *((_QWORD *)this + 33) = off_1E31F7378;
  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 24) = off_1E31F7378;
  v5 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WebCore::TimerBase::~TimerBase((WebCore::MediaController *)((char *)this + 192));
  *((_QWORD *)this + 17) = off_1E31F7378;
  v6 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::TimerBase::~TimerBase((WebCore::MediaController *)((char *)this + 136));
  v8 = *((unsigned int *)this + 33);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*((_QWORD *)this + 15);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[4];
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 15);
  if (v12)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v12, v7);
  }
  v13 = (WTF *)*((_QWORD *)this + 7);
  if (v13)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v13, v7);
  }
  WebCore::EventTarget::~EventTarget((WebCore::MediaController *)((char *)this + 32), v7);
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::MediaController *)((char *)this + 16), v14);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaController::~MediaController(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::MediaController::~MediaController(WebCore::MediaController *this)
{
  WebCore::MediaController::~MediaController((WebCore::MediaController *)((char *)this - 16));
}

{
  WebCore::MediaController::~MediaController((WebCore::MediaController *)((char *)this - 32));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaController::~MediaController((WebCore::MediaController *)((char *)this - 16));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaController::~MediaController((WebCore::MediaController *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

unsigned int *WebCore::MediaController::addMediaElement(char **this, WebCore::HTMLMediaElement *a2)
{
  char **v3;
  uint64_t **v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  WTF::MonotonicTime *v15;
  double v16;
  double v17;
  WTF::MediaTime *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::MediaTime *v22;
  __int128 *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v3 = this;
  v4 = (uint64_t **)(this + 7);
  *(_QWORD *)&v26 = a2;
  v5 = *((unsigned int *)this + 17);
  if ((_DWORD)v5 == *((_DWORD *)this + 16))
  {
    this = (char **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this + 7, v5 + 1, (unint64_t)&v26);
    v5 = *((unsigned int *)v3 + 17);
    *(_QWORD *)&v3[7][8 * v5] = *this;
  }
  else
  {
    (*v4)[v5] = (uint64_t)a2;
  }
  v6 = 0.0;
  v7 = __CFADD__((_DWORD)v5, 1);
  v8 = v5 + 1;
  *((_DWORD *)v3 + 17) = v8;
  if (!v7)
  {
    v6 = *((double *)v3 + 12);
    if (v6 == -1.0)
    {
      v9 = *v4;
      v10 = 8 * v8;
      v11 = 0.0;
      do
      {
        v12 = *v9++;
        v13 = (*(double (**)(uint64_t))(*(_QWORD *)v12 + 1376))(v12);
        if (v11 >= v13)
          v14 = v11;
        else
          v14 = v13;
        v11 = v14;
        v10 -= 8;
      }
      while (v10);
      v16 = (*(double (**)(char *))(*(_QWORD *)v3[32] + 24))(v3[32]);
      if (v16 >= v11)
        v16 = v11;
      *((double *)v3 + 12) = fmax(v16, 0.0);
      v3[27] = 0;
      WTF::MonotonicTime::now(v15);
      this = (char **)WebCore::TimerBase::setNextFireTime((uint64_t)(v3 + 24), v17 + 0.0);
      v6 = *((double *)v3 + 12);
    }
  }
  v18 = (WTF::MediaTime *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)this, v6);
  *(_QWORD *)&v25 = v18;
  *((_QWORD *)&v25 + 1) = v19;
  v20 = *((_QWORD *)a2 + 228);
  v21 = *((_QWORD *)a2 + 229);
  *(_QWORD *)&v26 = "HTMLMediaElement";
  *((_QWORD *)&v26 + 1) = 17;
  *(_QWORD *)&v27 = "seekInternal";
  *((_QWORD *)&v27 + 1) = v21;
  if (*(_BYTE *)(v20 + 12))
    v18 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v26, (WTF::MediaTime *)&v25);
  v22 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v18);
  v23 = (__int128 *)WTF::MediaTime::zeroTime(v22);
  v26 = v25;
  v27 = *(_OWORD *)v22;
  v28 = *v23;
  return WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)a2, (const WebCore::SeekTarget *)&v26, 0);
}

unsigned int *WebCore::MediaController::bringElementUpToSpeed(WebCore::MediaController *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v3;
  WebCore::MediaController *v4;
  double v5;
  uint64_t *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  WTF::MonotonicTime *v12;
  double v13;
  double v14;
  WTF::MediaTime *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::MediaTime *v19;
  __int128 *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = this;
    v5 = *((double *)this + 12);
    if (v5 == -1.0)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 7);
      v7 = 8 * v3;
      v8 = 0.0;
      do
      {
        v9 = *v6++;
        v10 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 1376))(v9);
        if (v8 >= v10)
          v11 = v8;
        else
          v11 = v10;
        v8 = v11;
        v7 -= 8;
      }
      while (v7);
      v13 = (*(double (**)(_QWORD))(**((_QWORD **)v4 + 32) + 24))(*((_QWORD *)v4 + 32));
      if (v13 >= v8)
        v13 = v8;
      *((double *)v4 + 12) = fmax(v13, 0.0);
      *((_QWORD *)v4 + 27) = 0;
      WTF::MonotonicTime::now(v12);
      this = (WebCore::MediaController *)WebCore::TimerBase::setNextFireTime((uint64_t)v4 + 192, v14 + 0.0);
      v5 = *((double *)v4 + 12);
    }
  }
  else
  {
    v5 = 0.0;
  }
  v15 = (WTF::MediaTime *)WTF::MediaTime::createWithDouble(this, v5);
  *(_QWORD *)&v22 = v15;
  *((_QWORD *)&v22 + 1) = v16;
  v17 = *((_QWORD *)a2 + 228);
  v18 = *((_QWORD *)a2 + 229);
  *(_QWORD *)&v23 = "HTMLMediaElement";
  *((_QWORD *)&v23 + 1) = 17;
  *(_QWORD *)&v24 = "seekInternal";
  *((_QWORD *)&v24 + 1) = v18;
  if (*(_BYTE *)(v17 + 12))
    v15 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v23, (WTF::MediaTime *)&v22);
  v19 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v15);
  v20 = (__int128 *)WTF::MediaTime::zeroTime(v19);
  v23 = v22;
  v24 = *(_OWORD *)v19;
  v25 = *v20;
  return WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)a2, (const WebCore::SeekTarget *)&v23, 0);
}

uint64_t WebCore::MediaController::buffered@<X0>(WebCore::MediaController *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  if (*((_DWORD *)this + 17))
  {
    result = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 7) + 1344))(**((_QWORD **)this + 7));
    if (*((_DWORD *)this + 17) >= 2u)
    {
      v5 = 1;
      do
      {
        v6 = *a2;
        (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 7) + 8 * v5) + 1344))(&v10);
        result = (uint64_t)WebCore::PlatformTimeRanges::intersectWith((WTF *)(v6 + 8), (__int128 **)v10 + 1);
        v8 = v10;
        v10 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
          {
            v9 = (WTF *)*((_QWORD *)v8 + 1);
            if (v9)
            {
              *((_QWORD *)v8 + 1) = 0;
              *((_DWORD *)v8 + 4) = 0;
              WTF::fastFree(v9, v7);
            }
            result = WTF::fastFree(v8, v7);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
        ++v5;
      }
      while (v5 < *((unsigned int *)this + 17));
    }
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *a2 = result;
  }
  return result;
}

uint64_t WebCore::MediaController::seekable@<X0>(WebCore::MediaController *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  if (*((_DWORD *)this + 17))
  {
    result = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 7) + 1432))(**((_QWORD **)this + 7));
    if (*((_DWORD *)this + 17) >= 2u)
    {
      v5 = 1;
      do
      {
        v6 = *a2;
        (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 7) + 8 * v5) + 1432))(&v10);
        result = (uint64_t)WebCore::PlatformTimeRanges::intersectWith((WTF *)(v6 + 8), (__int128 **)v10 + 1);
        v8 = v10;
        v10 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
          {
            v9 = (WTF *)*((_QWORD *)v8 + 1);
            if (v9)
            {
              *((_QWORD *)v8 + 1) = 0;
              *((_DWORD *)v8 + 4) = 0;
              WTF::fastFree(v9, v7);
            }
            result = WTF::fastFree(v8, v7);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
        ++v5;
      }
      while (v5 < *((unsigned int *)this + 17));
    }
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *a2 = result;
  }
  return result;
}

uint64_t WebCore::MediaController::played@<X0>(WebCore::MediaController *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  if (*((_DWORD *)this + 17))
  {
    result = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 7) + 1424))(**((_QWORD **)this + 7));
    if (*((_DWORD *)this + 17) >= 2u)
    {
      v5 = 1;
      do
      {
        v6 = *a2;
        (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 7) + 8 * v5) + 1424))(&v10);
        result = WebCore::PlatformTimeRanges::unionWith(v6 + 8, (WTF *)((char *)v10 + 8));
        v8 = v10;
        v10 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
          {
            v9 = (WTF *)*((_QWORD *)v8 + 1);
            if (v9)
            {
              *((_QWORD *)v8 + 1) = 0;
              *((_DWORD *)v8 + 4) = 0;
              WTF::fastFree(v9, v7);
            }
            result = WTF::fastFree(v8, v7);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
        ++v5;
      }
      while (v5 < *((unsigned int *)this + 17));
    }
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *a2 = result;
  }
  return result;
}

double WebCore::MediaController::duration(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;

  v1 = *((unsigned int *)this + 17);
  if (!(_DWORD)v1)
    return 0.0;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  v3 = 8 * v1;
  v4 = 0.0;
  do
  {
    v5 = *v2++;
    v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 1376))(v5);
    if (v4 >= v6)
      v7 = v4;
    else
      v7 = v6;
    v4 = v7;
    v3 -= 8;
  }
  while (v3);
  return v4;
}

uint64_t WebCore::MediaController::currentTime(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  WTF::MonotonicTime *v9;
  double v10;
  double v11;

  v1 = *(unsigned int *)(this + 68);
  if ((_DWORD)v1)
  {
    v2 = this;
    if (*(double *)(this + 96) == -1.0)
    {
      v3 = *(uint64_t **)(this + 56);
      v4 = 8 * v1;
      v5 = 0.0;
      do
      {
        v6 = *v3++;
        v7 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 1376))(v6);
        if (v5 >= v7)
          v8 = v5;
        else
          v8 = v7;
        v5 = v8;
        v4 -= 8;
      }
      while (v4);
      v10 = (*(double (**)(_QWORD))(**(_QWORD **)(v2 + 256) + 24))(*(_QWORD *)(v2 + 256));
      if (v10 >= v5)
        v10 = v5;
      *(double *)(v2 + 96) = fmax(v10, 0.0);
      *(_QWORD *)(v2 + 216) = 0;
      WTF::MonotonicTime::now(v9);
      return WebCore::TimerBase::setNextFireTime(v2 + 192, v11 + 0.0);
    }
  }
  return this;
}

void WebCore::MediaController::setCurrentTime(WebCore::MediaController *this, double a2)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::MediaTime *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::MediaTime *v20;
  __int128 *v21;
  WebCore *v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::MediaController *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v3 = 0.0;
  v4 = fmax(a2, 0.0);
  v5 = *((unsigned int *)this + 17);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 7);
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      v9 = (*(double (**)(uint64_t))(*(_QWORD *)v8 + 1376))(v8);
      if (v3 >= v9)
        v10 = v3;
      else
        v10 = v9;
      v3 = v10;
      v7 -= 8;
    }
    while (v7);
  }
  if (v3 < v4)
    v4 = v3;
  *((double *)this + 12) = v4;
  v11 = (unsigned int *)(*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 32) + 16))(*((_QWORD *)this + 32), v4);
  v28 = this;
  v12 = *((unsigned int *)this + 17);
  if ((_DWORD)v12)
  {
    v13 = (uint64_t *)*((_QWORD *)this + 7);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      v16 = (WTF::MediaTime *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)v11, v4);
      *(_QWORD *)&v29 = v16;
      *((_QWORD *)&v29 + 1) = v17;
      v18 = *(_QWORD *)(v15 + 1824);
      v19 = *(_QWORD *)(v15 + 1832);
      *(_QWORD *)&v30 = "HTMLMediaElement";
      *((_QWORD *)&v30 + 1) = 17;
      *(_QWORD *)&v31 = "seek";
      *((_QWORD *)&v31 + 1) = v19;
      if (*(_BYTE *)(v18 + 12))
        v16 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v30, (WTF::MediaTime *)&v29);
      v20 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v16);
      v21 = (__int128 *)WTF::MediaTime::zeroTime(v20);
      v30 = v29;
      v31 = *(_OWORD *)v20;
      v32 = *v21;
      v11 = WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)v15, (const WebCore::SeekTarget *)&v30, 1);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v22 = (WebCore *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
  v24 = v23;
  if (v23 - *((double *)v28 + 40) >= 0.25)
  {
    v25 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v25 || (v26 = *(_QWORD *)(v25 + 96)) == 0)
      v26 = WebCore::threadGlobalDataSlow(v22);
    v27 = *(_QWORD *)(v26 + 40);
    if (!v27)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v26);
      v27 = *(_QWORD *)(v26 + 40);
    }
    WebCore::MediaController::scheduleEvent((char **)v28, (const WTF::AtomString *)(v27 + 2048));
    *((double *)v28 + 40) = v24;
  }
  *((_BYTE *)v28 + 328) = 0;
}

double WebCore::MediaController::scheduleEvent(char **this, const WTF::AtomString *a2)
{
  uint64_t v4;
  WTF::MonotonicTime *v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  double result;
  WTF::MonotonicTime *v16;

  v4 = bmalloc::api::isoAllocate();
  v5 = (WTF::MonotonicTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
  *(_QWORD *)v4 = off_1E33A4B48;
  *(_QWORD *)(v4 + 8) = 0;
  v7 = *(_DWORD *)(v4 + 20) & 0xFFC00000 | (*(_QWORD *)a2 != 0) | 0x1E8204;
  *(_DWORD *)(v4 + 16) = 1;
  *(_DWORD *)(v4 + 20) = v7;
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v8 += 2;
  *(_QWORD *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v4 + 64) = 0;
  v16 = (WTF::MonotonicTime *)v4;
  v9 = *((unsigned int *)this + 33);
  if ((_DWORD)v9 == *((_DWORD *)this + 32))
  {
    v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this + 15, v9 + 1, (unint64_t)&v16);
    v11 = *((unsigned int *)this + 33);
    v12 = this[15];
    v13 = *(_QWORD *)v10;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)&v12[8 * v11] = v13;
    v5 = v16;
    *((_DWORD *)this + 33) = v11 + 1;
    v16 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 4) == 1)
        v5 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v5 + 8))(v5);
      else
        --*((_DWORD *)v5 + 4);
    }
  }
  else
  {
    *(_QWORD *)&this[15][8 * v9] = v4;
    *((_DWORD *)this + 33) = v9 + 1;
  }
  if (((unint64_t)this[21] & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)(((unint64_t)this[21] & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    this[20] = 0;
    WTF::MonotonicTime::now(v5);
    WebCore::TimerBase::setNextFireTime((uint64_t)(this + 17), v14 + 0.0);
  }
  return result;
}

void WebCore::MediaController::play(uint64_t **this)
{
  WebCore::MediaController *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (WebCore::MediaController *)this;
  v2 = *((unsigned int *)this + 17);
  if ((_DWORD)v2)
  {
    v3 = this[7];
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      this = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1440))(v5);
      v4 -= 8;
    }
    while (v4);
  }
  if (*((_BYTE *)v1 + 72))
  {
    *((_BYTE *)v1 + 72) = 0;
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
      v7 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v8 = *(_QWORD *)(v7 + 40);
    if (!v8)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
      v8 = *(_QWORD *)(v7 + 40);
    }
    WebCore::MediaController::scheduleEvent((char **)v1, (const WTF::AtomString *)(v8 + 1464));
    WebCore::MediaController::updateReadyState((uint64_t)v1);
    WebCore::MediaController::updatePlaybackState((uint64_t)v1);
  }
}

void WebCore::MediaController::pause(char **this)
{
  char **v1;
  uint64_t v2;
  char *v3;
  WebCore::MediaController *v4;

  if (!*((_BYTE *)this + 72))
  {
    v1 = this;
    *((_BYTE *)this + 72) = 1;
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v2 || (this = *(char ***)(v2 + 96)) == 0)
      this = (char **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = this[5];
    if (!v3)
    {
      v4 = (WebCore::MediaController *)this;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
      v3 = (char *)*((_QWORD *)v4 + 5);
    }
    WebCore::MediaController::scheduleEvent(v1, (const WTF::AtomString *)(v3 + 1424));
    WebCore::MediaController::updateReadyState((uint64_t)v1);
    WebCore::MediaController::updatePlaybackState((uint64_t)v1);
  }
}

double WebCore::MediaController::setDefaultPlaybackRate(char **this, double result)
{
  char **v2;
  uint64_t v3;
  char *v4;
  WebCore::MediaController *v5;

  if (*((double *)this + 10) != result)
  {
    v2 = this;
    *((double *)this + 10) = result;
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3 || (this = *(char ***)(v3 + 96)) == 0)
      this = (char **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v4 = this[5];
    if (!v4)
    {
      v5 = (WebCore::MediaController *)this;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
      v4 = (char *)*((_QWORD *)v5 + 5);
    }
    return WebCore::MediaController::scheduleEvent(v2, (const WTF::AtomString *)(v4 + 1624));
  }
  return result;
}

uint64_t WebCore::MediaController::playbackRate(WebCore::MediaController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 40))(*((_QWORD *)this + 32));
}

double WebCore::MediaController::setPlaybackRate(WebCore::MediaController *this, double a2)
{
  double result;
  WebCore *v5;
  uint64_t v6;
  WebCore::HTMLMediaElement **v7;
  uint64_t v8;
  WebCore::HTMLMediaElement *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore *v12;

  result = (*(double (**)(_QWORD))(**((_QWORD **)this + 32) + 40))(*((_QWORD *)this + 32));
  if (result != a2)
  {
    v5 = (WebCore *)(*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 32) + 32))(*((_QWORD *)this + 32), a2);
    v6 = *((unsigned int *)this + 17);
    if ((_DWORD)v6)
    {
      v7 = (WebCore::HTMLMediaElement **)*((_QWORD *)this + 7);
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        WebCore::HTMLMediaElement::updatePlaybackRate(v9);
        v8 -= 8;
      }
      while (v8);
    }
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v10 || (v5 = *(WebCore **)(v10 + 96)) == 0)
      v5 = (WebCore *)WebCore::threadGlobalDataSlow(v5);
    v11 = *((_QWORD *)v5 + 5);
    if (!v11)
    {
      v12 = v5;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v11 = *((_QWORD *)v12 + 5);
    }
    return WebCore::MediaController::scheduleEvent((char **)this, (const WTF::AtomString *)(v11 + 1624));
  }
  return result;
}

void WebCore::MediaController::setVolume(WebCore::MediaController *this@<X0>, double a2@<D0>, _QWORD *a3@<X8>)
{
  WebCore::MediaController *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::MediaController *v12;

  if (*((double *)this + 11) == a2)
  {
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  if (a2 >= 0.0 && a2 <= 1.0)
  {
    v5 = this;
    *((double *)this + 11) = a2;
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (this = *(WebCore::MediaController **)(v6 + 96)) == 0)
      this = (WebCore::MediaController *)WebCore::threadGlobalDataSlow(this);
    v7 = *((_QWORD *)this + 5);
    if (!v7)
    {
      v12 = this;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
      v7 = *((_QWORD *)v12 + 5);
    }
    WebCore::MediaController::scheduleEvent((char **)v5, (const WTF::AtomString *)(v7 + 2264));
    v8 = *((unsigned int *)v5 + 17);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)*((_QWORD *)v5 + 7);
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        WebCore::HTMLMediaElement::updateVolume(v11);
        v10 -= 8;
      }
      while (v10);
    }
    goto LABEL_2;
  }
  *(_BYTE *)a3 = 0;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void WebCore::MediaController::setMuted(WebCore::MediaController *this, int a2)
{
  WebCore::MediaController *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::MediaController *v9;

  if (*((unsigned __int8 *)this + 104) != a2)
  {
    v2 = this;
    *((_BYTE *)this + 104) = a2;
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3 || (this = *(WebCore::MediaController **)(v3 + 96)) == 0)
      this = (WebCore::MediaController *)WebCore::threadGlobalDataSlow(this);
    v4 = *((_QWORD *)this + 5);
    if (!v4)
    {
      v9 = this;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
      v4 = *((_QWORD *)v9 + 5);
    }
    WebCore::MediaController::scheduleEvent((char **)v2, (const WTF::AtomString *)(v4 + 2264));
    v5 = *((unsigned int *)v2 + 17);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)*((_QWORD *)v2 + 7);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        WebCore::HTMLMediaElement::updateVolume(v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

uint64_t WebCore::MediaController::updateReadyState(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = this;
  v2 = *(_DWORD *)(this + 108);
  if (*(_DWORD *)(this + 68))
  {
    this = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(this + 56) + 1352))(**(_QWORD **)(this + 56));
    v3 = this;
    if (*(_DWORD *)(v1 + 68) >= 2u)
    {
      v4 = 1;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v4);
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1352))(v5);
        if ((int)this < v3)
          v3 = this;
        ++v4;
      }
      while (v4 < *(unsigned int *)(v1 + 68));
    }
  }
  else
  {
    v3 = 0;
  }
  if (v3 != v2)
  {
    if (v2 <= v3)
    {
      do
      {
        WebCore::eventNameForReadyState(&v8, ++v2);
        WebCore::MediaController::scheduleEvent((char **)v1, (const WTF::AtomString *)&v8);
        this = (uint64_t)v8;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            this = WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
      while (v3 != v2);
      *(_DWORD *)(v1 + 108) = v3;
    }
    else
    {
      WebCore::eventNameForReadyState(&v8, v3);
      WebCore::MediaController::scheduleEvent((char **)v1, (const WTF::AtomString *)&v8);
      this = (uint64_t)v8;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          return WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  return this;
}

void WebCore::MediaController::updatePlaybackState(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  WebCore::HTMLMediaElement **v4;
  uint64_t v5;
  char v6;
  WebCore::HTMLMediaElement *v7;
  uint64_t v8;
  __n128 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::HTMLMediaElement **v13;
  uint64_t v14;
  int v15;
  WebCore::HTMLMediaElement *v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::MonotonicTime *v36;
  double v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WebCore::HTMLMediaElement **v40;
  uint64_t v41;
  WebCore::HTMLMediaElement *v42;
  WebCore::HTMLMediaElement **v43;
  uint64_t v44;
  int v45;
  WebCore::HTMLMediaElement *v46;
  uint64_t v47;
  WebCore::HTMLMediaElement *v48;
  WTF::StringImpl *v49;

  v1 = this;
  v2 = *(_DWORD *)(this + 112);
  if (*(_DWORD *)(this + 68))
  {
    if ((*(double (**)(_QWORD))(**(_QWORD **)(this + 256) + 40))(*(_QWORD *)(this + 256)) >= 0.0)
    {
      v3 = *(unsigned int *)(v1 + 68);
      if ((_DWORD)v3)
      {
        v4 = *(WebCore::HTMLMediaElement ***)(v1 + 56);
        v5 = 8 * v3;
        v6 = 1;
        do
        {
          v7 = *v4;
          if (*((_QWORD *)*v4 + 204)
            && (v8 = *((_QWORD *)v7 + 142)) != 0
            && (this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 1048))(*(_QWORD *)(v8 + 72)),
                (this & 1) != 0))
          {
            v10 = 1;
          }
          else
          {
            this = WebCore::HTMLMediaElement::endedPlayback(v7);
            if ((_DWORD)this)
            {
              v11 = *((_QWORD *)v7 + 177);
              if (v11)
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 256) + 40))(*(_QWORD *)(v11 + 256));
              else
                v9.n128_u64[0] = *((_QWORD *)v7 + 109);
              v10 = v9.n128_f64[0] > 0.0;
            }
            else
            {
              v10 = 0;
            }
          }
          v6 &= v10;
          ++v4;
          v5 -= 8;
        }
        while (v5);
        if ((v6 & 1) != 0)
        {
          if (v2 == 2)
            return;
          if (!*(_BYTE *)(v1 + 72))
          {
            v9.n128_f64[0] = (*(double (**)(_QWORD))(**(_QWORD **)(v1 + 256) + 40))(*(_QWORD *)(v1 + 256));
            if (v9.n128_f64[0] >= 0.0)
            {
              v12 = *(unsigned int *)(v1 + 68);
              if ((_DWORD)v12)
              {
                v13 = *(WebCore::HTMLMediaElement ***)(v1 + 56);
                v14 = 8 * v12;
                v15 = 1;
                do
                {
                  v16 = *v13;
                  if (*((_QWORD *)*v13 + 204)
                    && (v17 = *((_QWORD *)v16 + 142)) != 0
                    && (this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 72) + 1048))(*(_QWORD *)(v17 + 72)),
                        (this & 1) != 0))
                  {
                    v18 = 1;
                  }
                  else
                  {
                    this = WebCore::HTMLMediaElement::endedPlayback(v16);
                    if ((_DWORD)this)
                    {
                      v19 = *((_QWORD *)v16 + 177);
                      if (v19)
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 256) + 40))(*(_QWORD *)(v19 + 256));
                      else
                        v9.n128_u64[0] = *((_QWORD *)v16 + 109);
                      v18 = v9.n128_f64[0] > 0.0;
                    }
                    else
                    {
                      v18 = 0;
                    }
                  }
                  v15 &= v18;
                  ++v13;
                  v14 -= 8;
                }
                while (v14);
                if (v15)
                {
                  *(_BYTE *)(v1 + 72) = 1;
                  v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                  if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
                    v21 = WebCore::threadGlobalDataSlow((WebCore *)this);
                  v22 = *(_QWORD *)(v21 + 40);
                  if (!v22)
                  {
                    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v21);
                    v22 = *(_QWORD *)(v21 + 40);
                  }
                  v9.n128_f64[0] = WebCore::MediaController::scheduleEvent((char **)v1, (const WTF::AtomString *)(v22 + 1424));
                }
              }
            }
          }
          v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
            v24 = WebCore::threadGlobalDataSlow((WebCore *)this);
          v25 = *(_QWORD *)(v24 + 40);
          if (!v25)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
            v25 = *(_QWORD *)(v24 + 40);
          }
          v26 = *(WTF::StringImpl **)(v25 + 752);
          if (v26)
            *(_DWORD *)v26 += 2;
          v49 = v26;
          *(_BYTE *)(v1 + 328) = 1;
          (*(void (**)(_QWORD, __n128))(**(_QWORD **)(v1 + 256) + 56))(*(_QWORD *)(v1 + 256), v9);
          if ((*(_QWORD *)(v1 + 296) & 0xFFFFFFFFFFFFLL) != 0)
            WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 264));
          v27 = 2;
          goto LABEL_76;
        }
      }
    }
    if (!*(_BYTE *)(v1 + 72))
    {
      v29 = *(unsigned int *)(v1 + 68);
      if (!(_DWORD)v29)
      {
LABEL_95:
        v28 = 1;
        goto LABEL_52;
      }
      v43 = *(WebCore::HTMLMediaElement ***)(v1 + 56);
      v44 = 8 * v29;
      v45 = 1;
      while (1)
      {
        v46 = *v43;
        if (*((int *)*v43 + 226) < 3)
          break;
        v47 = *((_QWORD *)v46 + 200);
        if (!v47)
        {
          this = (uint64_t)WebCore::HTMLMediaElement::initializeMediaSession(*v43);
          v47 = *((_QWORD *)v46 + 200);
        }
        if (*(_BYTE *)(v47 + 48) == 4)
          break;
        v48 = *v43;
        if ((*(_DWORD *)((_BYTE *)*v43 + 1265) & 0x40) != 0)
        {
          this = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v48 + 1384))(v48);
          if ((this & 1) != 0)
            break;
          v48 = *v43;
        }
        this = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v48 + 1384))(v48);
        v45 &= this;
        ++v43;
        v44 -= 8;
        if (!v44)
        {
          if (v45)
            break;
          LODWORD(v29) = 0;
          goto LABEL_95;
        }
      }
    }
  }
  v28 = 0;
  LODWORD(v29) = 1;
LABEL_52:
  if (v28 == v2)
    return;
  if ((_DWORD)v29)
  {
    v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v30 || (v31 = *(_QWORD *)(v30 + 96)) == 0)
      v31 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v32 = *(_QWORD *)(v31 + 40);
    if (!v32)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v31);
      v32 = *(_QWORD *)(v31 + 40);
    }
    v26 = *(WTF::StringImpl **)(v32 + 2272);
    if (v26)
      *(_DWORD *)v26 += 2;
    v49 = v26;
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 256) + 56))(*(_QWORD *)(v1 + 256));
    if ((*(_QWORD *)(v1 + 296) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 264));
    v27 = 0;
  }
  else
  {
    if (*(_BYTE *)(v1 + 328))
    {
      *(_BYTE *)(v1 + 328) = 0;
      this = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v1 + 256) + 16))(*(_QWORD *)(v1 + 256), 0.0);
    }
    v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v33 || (v34 = *(_QWORD *)(v33 + 96)) == 0)
      v34 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v35 = *(_QWORD *)(v34 + 40);
    if (!v35)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v34);
      v35 = *(_QWORD *)(v34 + 40);
    }
    v26 = *(WTF::StringImpl **)(v35 + 1472);
    if (v26)
      *(_DWORD *)v26 += 2;
    v49 = v26;
    v36 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 256) + 48))(*(_QWORD *)(v1 + 256));
    if ((*(_QWORD *)(v1 + 296) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(v1 + 296) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *(_QWORD *)(v1 + 288) = 0x3FD0000000000000;
      WTF::MonotonicTime::now(v36);
      WebCore::TimerBase::setNextFireTime(v1 + 264, v37 + 0.25);
    }
    v27 = 1;
  }
LABEL_76:
  WebCore::MediaController::scheduleEvent((char **)v1, (const WTF::AtomString *)&v49);
  *(_DWORD *)(v1 + 112) = v27;
  v39 = *(unsigned int *)(v1 + 68);
  if ((_DWORD)v39)
  {
    v40 = *(WebCore::HTMLMediaElement ***)(v1 + 56);
    v41 = 8 * v39;
    do
    {
      v42 = *v40++;
      WebCore::HTMLMediaElement::updatePlayState(v42);
      v41 -= 8;
    }
    while (v41);
  }
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v38);
    else
      *(_DWORD *)v26 -= 2;
  }
}

WebCore::EventNames **WebCore::eventNameForReadyState(WebCore::EventNames **result, int a2)
{
  WebCore::EventNames **v2;
  uint64_t v3;
  WebCore::EventNames *v4;
  WebCore::EventNames *v5;
  uint64_t v6;
  WebCore::EventNames *v7;
  uint64_t v8;
  WebCore::EventNames *v9;
  uint64_t v10;
  WebCore::EventNames *v11;
  uint64_t v12;
  WebCore::EventNames *v13;
  WebCore::EventNames **v14;
  WebCore::EventNames **v15;
  WebCore::EventNames **v16;
  WebCore::EventNames **v17;
  WebCore::EventNames **v18;

  v2 = result;
  switch(a2)
  {
    case 0:
      v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v3 || (result = *(WebCore::EventNames ***)(v3 + 96)) == 0)
        result = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)result);
      v4 = result[5];
      if (!v4)
      {
        v14 = result;
        result = WebCore::ThreadGlobalData::initializeEventNames(result);
        v4 = v14[5];
      }
      v5 = (WebCore::EventNames *)*((_QWORD *)v4 + 90);
      if (v5)
        goto LABEL_38;
      break;
    case 1:
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6 || (result = *(WebCore::EventNames ***)(v6 + 96)) == 0)
        result = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)result);
      v7 = result[5];
      if (!v7)
      {
        v15 = result;
        result = WebCore::ThreadGlobalData::initializeEventNames(result);
        v7 = v15[5];
      }
      v5 = (WebCore::EventNames *)*((_QWORD *)v7 + 140);
      if (v5)
        goto LABEL_38;
      break;
    case 2:
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v8 || (result = *(WebCore::EventNames ***)(v8 + 96)) == 0)
        result = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)result);
      v9 = result[5];
      if (!v9)
      {
        v16 = result;
        result = WebCore::ThreadGlobalData::initializeEventNames(result);
        v9 = v16[5];
      }
      v5 = (WebCore::EventNames *)*((_QWORD *)v9 + 139);
      if (v5)
        goto LABEL_38;
      break;
    case 3:
      v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v10 || (result = *(WebCore::EventNames ***)(v10 + 96)) == 0)
        result = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)result);
      v11 = result[5];
      if (!v11)
      {
        v17 = result;
        result = WebCore::ThreadGlobalData::initializeEventNames(result);
        v11 = v17[5];
      }
      v5 = (WebCore::EventNames *)*((_QWORD *)v11 + 44);
      if (v5)
        goto LABEL_38;
      break;
    case 4:
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (result = *(WebCore::EventNames ***)(v12 + 96)) == 0)
        result = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)result);
      v13 = result[5];
      if (!v13)
      {
        v18 = result;
        result = WebCore::ThreadGlobalData::initializeEventNames(result);
        v13 = v18[5];
      }
      v5 = (WebCore::EventNames *)*((_QWORD *)v13 + 45);
      if (v5)
        goto LABEL_38;
      break;
    default:
      v5 = (WebCore::EventNames *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
LABEL_38:
        *(_DWORD *)v5 += 2;
      break;
  }
  *v2 = v5;
  return result;
}

uint64_t WebCore::MediaController::hasAudio(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((unsigned int *)this + 17);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1280))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t WebCore::MediaController::hasVideo(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((unsigned int *)this + 17);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1272))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t WebCore::MediaController::hasClosedCaptions(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((unsigned int *)this + 17);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1816))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t WebCore::MediaController::setClosedCaptionsVisible(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(this + 248) = a2;
  v2 = *(unsigned int *)(this + 68);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(this + 56);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1832))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t WebCore::MediaController::supportsScanning(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v1 = *((unsigned int *)this + 17);
  if (!(_DWORD)v1)
    return 1;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1304))(v4);
    if ((_DWORD)result)
      v6 = v3 == 0;
    else
      v6 = 1;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t WebCore::MediaController::beginScrubbing(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *(unsigned int *)(this + 68);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(this + 56);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1488))(v5);
      v4 -= 8;
    }
    while (v4);
  }
  if (*(_DWORD *)(v1 + 112) == 1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 256) + 56))(*(_QWORD *)(v1 + 256));
  return this;
}

uint64_t WebCore::MediaController::endScrubbing(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *(unsigned int *)(this + 68);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(this + 56);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1496))(v5);
      v4 -= 8;
    }
    while (v4);
  }
  if (*(_DWORD *)(v1 + 112) == 1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 256) + 48))(*(_QWORD *)(v1 + 256));
  return this;
}

uint64_t WebCore::MediaController::beginScanning(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 68);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 56);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1504))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::MediaController::endScanning(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 68);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 56);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1512))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t WebCore::MediaController::canPlay(WebCore::MediaController *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (*((_BYTE *)this + 72))
    return 1;
  v2 = *((unsigned int *)this + 17);
  if (!(_DWORD)v2)
    return 1;
  v3 = (uint64_t *)*((_QWORD *)this + 7);
  v4 = 8 * v2 - 8;
  do
  {
    v5 = *v3++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1520))(v5);
    if ((_DWORD)result)
      v6 = v4 == 0;
    else
      v6 = 1;
    v4 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t WebCore::MediaController::isLiveStream(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v1 = *((unsigned int *)this + 17);
  if (!(_DWORD)v1)
    return 1;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 2536))(v4);
    if ((_DWORD)result)
      v6 = v3 == 0;
    else
      v6 = 1;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t WebCore::MediaController::hasCurrentSrc(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v1 = *((unsigned int *)this + 17);
  if (!(_DWORD)v1)
    return 1;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 2528))(v4);
    if ((_DWORD)result)
      v6 = v3 == 0;
    else
      v6 = 1;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t WebCore::MediaController::returnToRealtime(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 68);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 56);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1288))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::LabelsNodeList>::length(WebCore::LiveNodeList *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;

  if ((*((_BYTE *)a1 + 80) & 1) != 0)
    return *((unsigned int *)a1 + 15);
  if ((*((_BYTE *)a1 + 80) & 2) == 0 && !*((_QWORD *)a1 + 6))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8);
    *(_DWORD *)(v2 + 24) += 2;
    WebCore::Document::registerNodeListForInvalidation((WebCore::Document *)v2, a1);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  if ((*(unsigned int (**)(WebCore::LiveNodeList *))(*(_QWORD *)a1 + 72))(a1)
    && (v19 = *((_QWORD *)a1 + 3), (*(_BYTE *)(v19 + 22) & 0x18) != 0))
  {
    v4 = *(uint64_t **)(v19 + 40);
  }
  else
  {
    v4 = (uint64_t *)((char *)a1 + 24);
  }
  v21 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::LabelsNodeList>((uint64_t)a1, *v4);
  v22 = v5;
  if (v5)
  {
    v6 = v5;
    v7 = *((_DWORD *)a1 + 18);
    do
    {
      v8 = *((unsigned int *)a1 + 19);
      if ((_DWORD)v8 == *((_DWORD *)a1 + 18))
      {
        v12 = v8 + (v8 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v8 + 1)
          v14 = v8 + 1;
        else
          v14 = v13;
        WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1 + 64, v14);
        v8 = *((unsigned int *)a1 + 19);
        v9 = *((_QWORD *)a1 + 8);
        v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
        if (v10)
        {
          do
            v15 = __ldaxr(v10);
          while (__stlxr(v15 + 1, v10));
        }
      }
      else
      {
        v9 = *((_QWORD *)a1 + 8);
        v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      *(_QWORD *)(v9 + 8 * v8) = v10;
      ++*((_DWORD *)a1 + 19);
      v20 = 0;
      WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::LabelsNodeList>((uint64_t)a1, &v21, 1u, &v20);
      v6 = v22;
    }
    while (v22);
    v16 = *((_DWORD *)a1 + 18);
    *((_BYTE *)a1 + 80) |= 2u;
    v17 = v16 - v7;
    if (v17)
      WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8 * v17));
    result = *((unsigned int *)a1 + 19);
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)a1 + 15) = result;
  *((_BYTE *)a1 + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::LabelsNodeList>::item(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;

  v3 = result;
  v4 = *(_BYTE *)(result + 80);
  if ((v4 & 1) != 0 && *(_DWORD *)(result + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(result + 80) & 2) != 0)
  {
    if (*(_DWORD *)(result + 76) <= a2)
    {
      __break(0xC471u);
      return result;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(result + 64) + 8 * a2);
    if (v11)
      return *(_QWORD *)(v11 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 48);
  if (!result)
  {
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v3 + 60) - a2 < a2)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3)
          && (v26 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v26 + 22) & 0x18) != 0))
        {
          v18 = *(uint64_t **)(v26 + 40);
        }
        else
        {
          v18 = (uint64_t *)(v3 + 24);
        }
        v19 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::LabelsNodeList>(v3, *v18);
        result = v20;
        *(_QWORD *)(v3 + 40) = v19;
        *(_QWORD *)(v3 + 48) = v20;
        v21 = *(_DWORD *)(v3 + 60);
        if (v21 - 1 > a2)
        {
          WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::LabelsNodeList>(v3, (uint64_t *)(v3 + 40), v21 + ~a2);
          result = *(_QWORD *)(v3 + 48);
        }
        *(_DWORD *)(v3 + 56) = a2;
        return result;
      }
    }
    else
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + 8);
      *(_DWORD *)(v12 + 24) += 2;
      WebCore::Document::registerNodeListForInvalidation((WebCore::Document *)v12, (WebCore::LiveNodeList *)v3);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3)
      && (v25 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v25 + 22) & 0x18) != 0))
    {
      v22 = *(uint64_t **)(v25 + 40);
    }
    else
    {
      v22 = (uint64_t *)(v3 + 24);
    }
    v24 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::LabelsNodeList>(v3, *v22);
    result = v23;
    *(_DWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 40) = v24;
    *(_QWORD *)(v3 + 48) = v23;
    if (a2)
    {
      if (v23)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::LabelsNodeList>(v3, (_QWORD *)(v3 + 40), a2, (unsigned int *)(v3 + 56));
        result = *(_QWORD *)(v3 + 48);
        if (result)
          return result;
        v17 = *(_DWORD *)(v3 + 56) + 1;
        goto LABEL_46;
      }
    }
    else if (v23)
    {
      return result;
    }
    v17 = 0;
LABEL_46:
    result = 0;
    goto LABEL_47;
  }
  v5 = *(_DWORD *)(v3 + 56);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    if ((v4 & 1) != 0 && *(_DWORD *)(v3 + 60) - a2 < v6)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3)
        && (v27 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v27 + 22) & 0x18) != 0))
      {
        v7 = *(uint64_t **)(v27 + 40);
      }
      else
      {
        v7 = (uint64_t *)(v3 + 24);
      }
      v8 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::LabelsNodeList>(v3, *v7);
      result = v9;
      *(_QWORD *)(v3 + 40) = v8;
      *(_QWORD *)(v3 + 48) = v9;
      v10 = *(_DWORD *)(v3 + 60);
      if (v10 - 1 > a2)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::LabelsNodeList>(v3, (uint64_t *)(v3 + 40), v10 + ~a2);
        result = *(_QWORD *)(v3 + 48);
      }
      *(_DWORD *)(v3 + 56) = a2;
      return result;
    }
    v29 = 0;
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::LabelsNodeList>(v3, (_QWORD *)(v3 + 40), v6, &v29);
    v16 = v29 + *(_DWORD *)(v3 + 56);
    *(_DWORD *)(v3 + 56) = v16;
    result = *(_QWORD *)(v3 + 48);
    if (result)
      return result;
    v17 = v16 + 1;
LABEL_47:
    *(_DWORD *)(v3 + 60) = v17;
    *(_BYTE *)(v3 + 80) |= 1u;
    return result;
  }
  if (a2 < v5)
  {
    if (v5 - a2 <= a2)
    {
      WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::LabelsNodeList>(v3, (uint64_t *)(v3 + 40), v5 - a2);
      *(_DWORD *)(v3 + 56) = a2;
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3)
        && (v28 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v28 + 22) & 0x18) != 0))
      {
        v14 = *(uint64_t **)(v28 + 40);
      }
      else
      {
        v14 = (uint64_t *)(v3 + 24);
      }
      *(_QWORD *)(v3 + 40) = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::LabelsNodeList>(v3, *v14);
      *(_QWORD *)(v3 + 48) = v15;
      *(_DWORD *)(v3 + 56) = 0;
      if (a2)
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::LabelsNodeList>(v3, (_QWORD *)(v3 + 40), a2, (unsigned int *)(v3 + 56));
    }
    return *(_QWORD *)(v3 + 48);
  }
  return result;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::LabelsNodeList>::memoryCost(uint64_t a1)
{
  return 8 * *(unsigned int *)(a1 + 72);
}

uint64_t WebCore::LabelsNodeList::isRootedAtTreeScope(WebCore::LabelsNodeList *this)
{
  return 1;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::LabelsNodeList>::invalidateCacheForDocument(uint64_t result, WebCore::Document *this)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = result;
  if (*(_QWORD *)(result + 48) || (*(_BYTE *)(result + 80) & 3) != 0)
  {
    v3 = (_QWORD *)(result + 40);
    result = WebCore::Document::unregisterNodeListForInvalidation((uint64_t)this, (WebCore::LiveNodeList *)result);
    *v3 = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v2 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v2 + 64);
      v7 = &v6[v5];
      do
      {
        result = *v6;
        *v6 = 0;
        if (result)
        {
          do
          {
            v8 = __ldaxr((unsigned int *)result);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, (unsigned int *)result));
          if (!v9)
          {
            atomic_store(1u, (unsigned int *)result);
            v10 = *(unsigned int *)(result + 28);
            if ((_DWORD)v10)
            {
              v13 = result;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v10));
              result = v13;
            }
            v11 = *(WTF **)(result + 16);
            if (v11)
            {
              *(_QWORD *)(result + 16) = 0;
              *(_DWORD *)(result + 24) = 0;
              v12 = result;
              WTF::fastFree(v11, v4);
              result = v12;
            }
            result = WTF::fastFree((WTF *)result, v4);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v2 + 76) = 0;
  }
  return result;
}

uint64_t WebCore::MediaController::paused(WebCore::MediaController *this)
{
  return *((unsigned __int8 *)this + 72);
}

double WebCore::MediaController::defaultPlaybackRate(WebCore::MediaController *this)
{
  return *((double *)this + 10);
}

double WebCore::MediaController::volume(WebCore::MediaController *this)
{
  return *((double *)this + 11);
}

uint64_t WebCore::MediaController::muted(WebCore::MediaController *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t WebCore::MediaController::readyState(WebCore::MediaController *this)
{
  return *((unsigned int *)this + 27);
}

uint64_t WebCore::MediaController::supportsFullscreen(WebCore::MediaController *this)
{
  return 0;
}

uint64_t WebCore::MediaController::isFullscreen(WebCore::MediaController *this)
{
  return 0;
}

uint64_t WebCore::MediaController::closedCaptionsVisible(WebCore::MediaController *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t WebCore::MediaController::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

WebCore::MediaController *WebCore::MediaController::derefEventTarget(WebCore::MediaController *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 2) == 1)
  {
    WebCore::MediaController::~MediaController(this);
    return (WebCore::MediaController *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
  return this;
}

uint64_t WebCore::MediaController::eventTargetInterface(WebCore::MediaController *this)
{
  return 23;
}

uint64_t WebCore::MediaController::scriptExecutionContext(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::MediaController::eventTargetInterface(WebCore::MediaController *this)
{
  return 23;
}

uint64_t `non-virtual thunk to'WebCore::MediaController::scriptExecutionContext(WebCore::MediaController *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::MediaController::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 24);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaController::derefEventTarget(uint64_t this)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)(this - 24) == 1)
  {
    WebCore::MediaController::~MediaController((WebCore::MediaController *)(this - 32));
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 24);
  }
  return this;
}

uint64_t WebCore::createInputTypeFactoryMap(WebCore *this)
{
  _BYTE v3[24];
  __n128 v4;
  void *v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::ButtonInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, (WTF::StringImpl **)(WebCore::HTMLNames::buttonTag + 24), &v4);
  {
    v4.n128_u64[0] = (unint64_t)"checkbox";
    v4.n128_u64[1] = 9;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::checkbox(void)::name, (uint64_t)&v4);
  }
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::CheckboxInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::checkbox(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"color";
    v4.n128_u64[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::color(void)::name, (uint64_t)&v4);
  }
  v4.n128_u64[0] = (unint64_t)WebCore::Settings::inputTypeColorEnabled;
  v4.n128_u64[1] = 0;
  v5 = WebCore::createInputType<WebCore::ColorInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::color(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"date";
    v4.n128_u64[1] = 5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::date(void)::name, (uint64_t)&v4);
  }
  v4.n128_u64[0] = (unint64_t)WebCore::Settings::inputTypeDateEnabled;
  v4.n128_u64[1] = 0;
  v5 = WebCore::createInputType<WebCore::DateInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::date(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"datetime-local";
    v4.n128_u64[1] = 15;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::datetimelocal(void)::name, (uint64_t)&v4);
  }
  v4.n128_u64[0] = (unint64_t)WebCore::Settings::inputTypeDateTimeLocalEnabled;
  v4.n128_u64[1] = 0;
  v5 = WebCore::createInputType<WebCore::DateTimeLocalInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::datetimelocal(void)::name, &v4);
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::EmailInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, (WTF::StringImpl **)&WebCore::emailAtomData, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"file";
    v4.n128_u64[1] = 5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::file(void)::name, (uint64_t)&v4);
  }
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::FileInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, (WTF::StringImpl **)&WebCore::InputTypeNames::file(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"hidden";
    v4.n128_u64[1] = 7;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::hidden(void)::name, (uint64_t)&v4);
  }
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::HiddenInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::hidden(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"image";
    v4.n128_u64[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::image(void)::name, (uint64_t)&v4);
  }
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::ImageInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::image(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"month";
    v4.n128_u64[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::month(void)::name, (uint64_t)&v4);
  }
  v4.n128_u64[0] = (unint64_t)WebCore::Settings::inputTypeMonthEnabled;
  v4.n128_u64[1] = 0;
  v5 = WebCore::createInputType<WebCore::MonthInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::month(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"number";
    v4.n128_u64[1] = 7;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::number(void)::name, (uint64_t)&v4);
  }
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::NumberInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::number(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"password";
    v4.n128_u64[1] = 9;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::password(void)::name, (uint64_t)&v4);
  }
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::PasswordInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::password(void)::name, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"radio";
    v4.n128_u64[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::radio(void)::name, (uint64_t)&v4);
  }
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::RadioInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::radio(void)::name, &v4);
  if ((_MergedGlobals_193 & 1) == 0)
  {
    v4.n128_u64[0] = (unint64_t)"range";
    v4.n128_u64[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE83640, (uint64_t)&v4);
    _MergedGlobals_193 = 1;
  }
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::RangeInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &qword_1ECE83640, &v4);
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::ResetInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::resetAtomData, &v4);
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::SearchInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, (WTF::StringImpl **)&WebCore::searchAtomData, &v4);
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::SubmitInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::submitAtomData, &v4);
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::TelephoneInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, (WTF::StringImpl **)&WebCore::telAtomData, &v4);
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::TextInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, (WTF::StringImpl **)&WebCore::textAtomData, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"time";
    v4.n128_u64[1] = 5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::time(void)::name, (uint64_t)&v4);
  }
  v4.n128_u64[0] = (unint64_t)WebCore::Settings::inputTypeTimeEnabled;
  v4.n128_u64[1] = 0;
  v5 = WebCore::createInputType<WebCore::TimeInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::time(void)::name, &v4);
  v4 = 0uLL;
  v5 = WebCore::createInputType<WebCore::URLInputType>;
  WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, (WTF::StringImpl **)&WebCore::urlAtomData, &v4);
  {
    v4.n128_u64[0] = (unint64_t)"week";
    v4.n128_u64[1] = 5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::week(void)::name, (uint64_t)&v4);
  }
  v4.n128_u64[0] = (unint64_t)WebCore::Settings::inputTypeWeekEnabled;
  v4.n128_u64[1] = 0;
  v5 = WebCore::createInputType<WebCore::WeekInputType>;
  return WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>((uint64_t)v3, (uint64_t)this, &WebCore::InputTypeNames::week(void)::name, &v4);
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v3 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)a1;
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v6 += 4;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 32 * v3;
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v7 = (v5 ^ (v6 >> 8)) & ((_DWORD)v3 - 1);
  v8 = *(_QWORD *)(v2 + 32 * v7);
  if (v8)
  {
    v9 = v6 >> 8;
    v10 = -1;
    do
    {
      v11 = *(_DWORD *)(v8 + 16);
      if (++v10 > (((_DWORD)v7 + (_DWORD)v3 - ((v5 ^ (v11 >> 8)) & v4)) & v4))
        break;
      if (v8 == *(_QWORD *)a2 && v11 >> 8 == v9)
        return v2 + 32 * v7;
      v7 = ((_DWORD)v7 + 1) & v4;
      v8 = *(_QWORD *)(v2 + 32 * v7);
    }
    while (v8);
  }
  return v2 + 32 * v3;
}

_QWORD *WebCore::createInputType<WebCore::ButtonInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = (_QWORD *)WebCore::BaseClickableWithKeyInputType::BaseClickableWithKeyInputType(v4, 1, a1);
  *result = off_1E33B0948;
  *a2 = result;
  return result;
}

double WebCore::createInputType<WebCore::CheckboxInputType>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  double result;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v4 = off_1E33D5AC0;
  *(_QWORD *)(v4 + 8) = 0x200000001;
  *(_BYTE *)(v4 + 16) = 0;
  if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a1;
    *(_BYTE *)(v8 + 32) = 0;
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10 & 0xFFFF000000000000 | v8;
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v14 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v14)
        {
          v17 = v11;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
          v11 = v17;
        }
        v15 = *(WTF **)(v11 + 16);
        if (v15)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          v16 = v11;
          WTF::fastFree(v15, v9);
          v11 = v16;
        }
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  v5 = (unsigned int *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)(v4 + 24) = v5;
  *(_QWORD *)v4 = off_1E33B0D00;
  *(_BYTE *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 36) = 0;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_BYTE *)(v4 + 84) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_BYTE *)(v4 + 80) = 0;
  *a2 = v4;
  return result;
}

uint64_t WebCore::Settings::inputTypeColorEnabled(WebCore::Settings *this)
{
  return (*((_QWORD *)this + 89) >> 2) & 1;
}

_QWORD *WebCore::createInputType<WebCore::ColorInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x30);
  result = (_QWORD *)WebCore::BaseClickableWithKeyInputType::BaseClickableWithKeyInputType(v4, 4, a1);
  *result = off_1E33B10B8;
  result[4] = &unk_1E33B1490;
  result[5] = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::Settings::inputTypeDateEnabled(WebCore::Settings *this)
{
  return (*((_QWORD *)this + 89) >> 3) & 1;
}

_QWORD *WebCore::createInputType<WebCore::DateInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x48);
  result = (_QWORD *)WebCore::BaseDateAndTimeInputType::BaseDateAndTimeInputType(v4, 8, a1);
  *result = off_1E33B14D0;
  result[4] = &unk_1E33B18F0;
  result[5] = &unk_1E33B1920;
  *a2 = result;
  return result;
}

uint64_t WebCore::Settings::inputTypeDateTimeLocalEnabled(WebCore::Settings *this)
{
  return (*((_QWORD *)this + 89) >> 4) & 1;
}

_QWORD *WebCore::createInputType<WebCore::DateTimeLocalInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x48);
  result = (_QWORD *)WebCore::BaseDateAndTimeInputType::BaseDateAndTimeInputType(v4, 16, a1);
  *result = off_1E33B2280;
  result[4] = &unk_1E33B26A0;
  result[5] = &unk_1E33B26D0;
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::EmailInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0xB0);
  result = (_QWORD *)WebCore::TextFieldInputType::TextFieldInputType(v4, 32, a1);
  *result = off_1E33B2720;
  result[4] = &unk_1E33B2B48;
  result[6] = &unk_1E33B2B90;
  result[7] = &unk_1E33B2BB8;
  result[8] = &unk_1E33B2BF8;
  *a2 = result;
  return result;
}

uint64_t WebCore::createInputType<WebCore::FileInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x68);
  v5 = (_QWORD *)WebCore::BaseClickableWithKeyInputType::BaseClickableWithKeyInputType((uint64_t)v4, 64, a1);
  v5[6] = 0;
  v5[7] = 0;
  *v5 = off_1E33B2C20;
  v5[4] = &unk_1E33B2FF0;
  v5[5] = &unk_1E33B3020;
  v5[8] = 0;
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v4[9] = result;
  v4[10] = 0;
  v4[11] = 0;
  v4[12] = 0;
  *a2 = v4;
  return result;
}

WebCore::HiddenInputType *WebCore::createInputType<WebCore::HiddenInputType>@<X0>(WebCore::HTMLInputElement *a1@<X0>, WebCore::HiddenInputType **a2@<X8>)
{
  WebCore::HiddenInputType *v4;
  WebCore::HiddenInputType *result;

  v4 = (WebCore::HiddenInputType *)WTF::fastMalloc((WTF *)0x20);
  result = WebCore::HiddenInputType::HiddenInputType(v4, a1);
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::ImageInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x28);
  result = (_QWORD *)WebCore::BaseClickableWithKeyInputType::BaseClickableWithKeyInputType(v4, 256, a1);
  *result = off_1E33D3160;
  result[4] = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::Settings::inputTypeMonthEnabled(WebCore::Settings *this)
{
  return (*((_QWORD *)this + 89) >> 5) & 1;
}

_QWORD *WebCore::createInputType<WebCore::MonthInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x48);
  result = (_QWORD *)WebCore::BaseDateAndTimeInputType::BaseDateAndTimeInputType(v4, 512, a1);
  *result = off_1E33D6FE8;
  result[4] = &unk_1E33D7408;
  result[5] = &unk_1E33D7438;
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::NumberInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0xB0);
  result = (_QWORD *)WebCore::TextFieldInputType::TextFieldInputType(v4, 1024, a1);
  *result = off_1E33D7488;
  result[4] = &unk_1E33D78B0;
  result[6] = &unk_1E33D78F8;
  result[7] = &unk_1E33D7920;
  result[8] = &unk_1E33D7960;
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::PasswordInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0xB0);
  result = (_QWORD *)WebCore::TextFieldInputType::TextFieldInputType(v4, 2048, a1);
  *result = off_1E33D8658;
  result[4] = &unk_1E33D8A80;
  result[6] = &unk_1E33D8AC8;
  result[7] = &unk_1E33D8AF0;
  result[8] = &unk_1E33D8B30;
  *a2 = result;
  return result;
}

uint64_t WebCore::createInputType<WebCore::RadioInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  result = WTF::fastMalloc((WTF *)0x20);
  v5 = (_QWORD *)result;
  *(_QWORD *)result = off_1E33D5AC0;
  *(_QWORD *)(result + 8) = 0x100000000001;
  *(_BYTE *)(result + 16) = 0;
  if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a1;
    *(_BYTE *)(v8 + 32) = 0;
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10 & 0xFFFF000000000000 | v8;
    result = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)result));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)result);
        v13 = *(unsigned int *)(result + 28);
        if ((_DWORD)v13)
        {
          v16 = result;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v13));
          result = v16;
        }
        v14 = *(WTF **)(result + 16);
        if (v14)
        {
          *(_QWORD *)(result + 16) = 0;
          *(_DWORD *)(result + 24) = 0;
          v15 = result;
          WTF::fastFree(v14, v9);
          result = v15;
        }
        result = WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v5[3] = v6;
  *v5 = off_1E33D8B58;
  *a2 = v5;
  return result;
}

WebCore::RangeInputType *WebCore::createInputType<WebCore::RangeInputType>@<X0>(WebCore::HTMLInputElement *a1@<X0>, WebCore::RangeInputType **a2@<X8>)
{
  WebCore::RangeInputType *v4;
  WebCore::RangeInputType *result;

  v4 = (WebCore::RangeInputType *)WTF::fastMalloc((WTF *)0x38);
  result = WebCore::RangeInputType::RangeInputType(v4, a1);
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::ResetInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = (_QWORD *)WebCore::BaseClickableWithKeyInputType::BaseClickableWithKeyInputType(v4, 0x4000, a1);
  *result = off_1E33DA040;
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::SearchInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0xF8);
  v5 = WebCore::BaseTextInputType::BaseTextInputType((uint64_t)v4, 0x8000, a1);
  *(_QWORD *)v5 = off_1E33D8F10;
  *(_QWORD *)(v5 + 32) = &unk_1E33D9338;
  *(_QWORD *)(v5 + 48) = &unk_1E33D9380;
  *(_QWORD *)(v5 + 56) = &unk_1E33D93A8;
  *(_QWORD *)(v5 + 64) = &unk_1E33D93E8;
  *(_QWORD *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  *(_QWORD *)(v5 + 192) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v4[29] = v7;
  v4[24] = off_1E31F7378;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E33D9FD0;
  result[1] = WebCore::SearchInputType::searchEventTimerFired;
  result[2] = 0;
  result[3] = v4;
  v4[30] = result;
  *a2 = v4;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::SubmitInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = (_QWORD *)WebCore::BaseClickableWithKeyInputType::BaseClickableWithKeyInputType(v4, 0x10000, a1);
  *result = off_1E33DA3F8;
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::TelephoneInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0xB0);
  result = (_QWORD *)WebCore::TextFieldInputType::TextFieldInputType(v4, 0x20000, a1);
  *result = off_1E33DA7B0;
  result[4] = &unk_1E33DABD8;
  result[6] = &unk_1E33DAC20;
  result[7] = &unk_1E33DAC48;
  result[8] = &unk_1E33DAC88;
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::TextInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0xB0);
  result = (_QWORD *)WebCore::TextFieldInputType::TextFieldInputType(v4, 0x200000, a1);
  *result = off_1E33DB6B8;
  result[4] = &unk_1E33DBAE0;
  result[6] = &unk_1E33DBB28;
  result[7] = &unk_1E33DBB50;
  result[8] = &unk_1E33DBB90;
  *a2 = result;
  return result;
}

uint64_t WebCore::Settings::inputTypeTimeEnabled(WebCore::Settings *this)
{
  return (*((_QWORD *)this + 89) >> 6) & 1;
}

_QWORD *WebCore::createInputType<WebCore::TimeInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x48);
  result = (_QWORD *)WebCore::BaseDateAndTimeInputType::BaseDateAndTimeInputType(v4, 0x40000, a1);
  *result = off_1E33DACB0;
  result[4] = &unk_1E33DB0D0;
  result[5] = &unk_1E33DB100;
  *a2 = result;
  return result;
}

_QWORD *WebCore::createInputType<WebCore::URLInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0xB0);
  result = (_QWORD *)WebCore::TextFieldInputType::TextFieldInputType(v4, 0x80000, a1);
  *result = off_1E33DB1B8;
  result[4] = &unk_1E33DB5E0;
  result[6] = &unk_1E33DB628;
  result[7] = &unk_1E33DB650;
  result[8] = &unk_1E33DB690;
  *a2 = result;
  return result;
}

uint64_t WebCore::Settings::inputTypeWeekEnabled(WebCore::Settings *this)
{
  return (*((_QWORD *)this + 89) >> 7) & 1;
}

_QWORD *WebCore::createInputType<WebCore::WeekInputType>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x48);
  result = (_QWORD *)WebCore::BaseDateAndTimeInputType::BaseDateAndTimeInputType(v4, 0x100000, a1);
  *result = off_1E33DBDA8;
  result[4] = &unk_1E33DC1C8;
  result[5] = &unk_1E33DC1F8;
  *a2 = result;
  return result;
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::InputTypeFactory>(uint64_t result, uint64_t a2, WTF::StringImpl **a3, __n128 *a4)
{
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  __n128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *i;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v8 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 12);
  if (20 * v7 >= 19 * (unint64_t)v8 || (v8 <= 2 * (int)v7 ? (v9 = *(_BYTE *)(a2 + 20) == 0) : (v9 = 1), !v9))
  {
    if (v8)
      v36 = 2 * v8;
    else
      v36 = 8;
    v37 = result;
    WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a2, v36);
    result = v37;
    v8 = *(_DWORD *)(a2 + 8);
  }
  v10 = v8 - 1;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *a3;
  v13 = *((_DWORD *)*a3 + 4);
  v14 = (v11 ^ (v13 >> 8)) & (v8 - 1);
  v15 = *(_QWORD *)a2;
  v16 = *(_QWORD *)a2 + 32 * v14;
  v17 = *(WTF::StringImpl **)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = v13 >> 8;
    do
    {
      v20 = *((_DWORD *)v17 + 4);
      v21 = (v14 + v8 - ((v11 ^ (v20 >> 8)) & v10)) & v10;
      if (v18 > v21)
      {
        v38 = result;
        v16 = v15 + 32 * v14;
        if (v18 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        *(_QWORD *)v16 = 0;
        v39 = v17;
        v40 = *(_OWORD *)(v16 + 8);
        v41 = *(_QWORD *)(v16 + 24);
        WebCore::ContentType::~ContentType((WTF::StringImpl **)v16, (WTF::StringImpl *)a2);
        *(_OWORD *)v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>,WTF::AtomString const&,WebCore::InputTypeFactory>(v26, *a3, a4);
        v27 = ((_DWORD)v14 + 1) & v10;
        v28 = *(_QWORD *)a2;
        v29 = (WTF::StringImpl **)(*(_QWORD *)a2 + 32 * v27);
        for (i = *v29; *v29; i = *v29)
        {
          ++v21;
          v31 = (v27 + v8 - ((v11 ^ (*((_DWORD *)i + 4) >> 8)) & v10)) & v10;
          if (v21 > v31)
          {
            v42 = v40;
            v43 = v41;
            *v29 = 0;
            v39 = i;
            v32 = v28 + 32 * v27;
            v33 = *(_OWORD *)(v32 + 8);
            v41 = *(_QWORD *)(v32 + 24);
            v40 = v33;
            *v29 = v17;
            v34 = v42;
            *(_QWORD *)(v32 + 24) = v43;
            *(_OWORD *)(v32 + 8) = v34;
            v28 = *(_QWORD *)a2;
            v17 = i;
            v21 = v31;
          }
          v27 = ((_DWORD)v27 + 1) & v10;
          v29 = (WTF::StringImpl **)(v28 + 32 * v27);
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>,WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>>((uint64_t)v29, (uint64_t *)&v39);
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v35);
          else
            *(_DWORD *)v39 -= 2;
        }
        result = v38;
        goto LABEL_20;
      }
      if (v20 >> 8 == v19 && v17 == v12)
      {
        v25 = 0;
        v16 = v15 + 32 * v14;
        goto LABEL_21;
      }
      v14 = ((_DWORD)v14 + 1) & v10;
      ++v18;
      v17 = *(WTF::StringImpl **)(v15 + 32 * v14);
    }
    while (v17);
    v16 = v15 + 32 * v14;
    if (v18 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    if (!v12)
      goto LABEL_19;
  }
  *(_DWORD *)v12 += 2;
LABEL_19:
  *(_QWORD *)v16 = v12;
  v23 = v15 + 32 * v14;
  v24 = *a4;
  *(_QWORD *)(v23 + 24) = a4[1].n128_u64[0];
  *(__n128 *)(v23 + 8) = v24;
LABEL_20:
  v8 = *(_DWORD *)(a2 + 8);
  ++*(_DWORD *)(a2 + 12);
  v15 = *(_QWORD *)a2;
  v25 = 1;
LABEL_21:
  *(_QWORD *)result = v16;
  *(_QWORD *)(result + 8) = v15 + 32 * v8;
  *(_BYTE *)(result + 16) = v25;
  return result;
}

WebCore::HiddenInputType *WebCore::HiddenInputType::HiddenInputType(WebCore::HiddenInputType *this, WebCore::HTMLInputElement *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E33D5AC0;
  *((_QWORD *)this + 1) = 0x8000000001;
  *((_BYTE *)this + 16) = 0;
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = a2;
    *(_BYTE *)(v4 + 32) = 0;
    v6 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v6 & 0xFFFF000000000000 | v4;
    v7 = v6 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v13 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v13)
        {
          v16 = v7;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v13));
          v7 = v16;
        }
        v14 = *(WTF **)(v7 + 16);
        if (v14)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          v15 = v7;
          WTF::fastFree(v14, v5);
          v7 = v15;
        }
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  v10 = (unsigned int *)(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *((_QWORD *)this + 3) = v10;
  *(_QWORD *)this = off_1E33D5338;
  return this;
}

__n128 WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>,WTF::AtomString const&,WebCore::InputTypeFactory>(uint64_t a1, WTF::StringImpl *a2, __n128 *a3)
{
  WTF::StringImpl *v5;
  __n128 result;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *a3;
  *(_QWORD *)(a1 + 24) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::InputTypeFactory,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InputTypeFactory>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  WTF *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char *v22;
  char *v23;
  __int128 v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  char *v32;
  __int128 v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v38 = *(unsigned int *)(a1 + 8);
  v4 = *(WTF **)a1;
  v5 = (WTF *)(32 * a2);
  v6 = (void *)WTF::fastMalloc(v5);
  v7 = (uint64_t)v6;
  if (a2)
    bzero(v6, (size_t)v5);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v7);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  v10 = v38;
  if ((_DWORD)v38)
  {
    v11 = 0;
    do
    {
      v12 = (WTF::StringImpl **)((char *)v4 + 32 * v11);
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_DWORD *)(a1 + 8);
        v15 = v14 - 1;
        v16 = *(_DWORD *)(a1 + 16);
        v17 = (v16 ^ (*((_DWORD *)v13 + 4) >> 8)) & (v14 - 1);
        v18 = *(WTF **)a1;
        v19 = (WTF::StringImpl **)(*(_QWORD *)a1 + 32 * v17);
        v20 = *v19;
        if (*v19)
        {
          v26 = 0;
          do
          {
            v27 = (v17 + v14 - ((v16 ^ (*((_DWORD *)v20 + 4) >> 8)) & v15)) & v15;
            if (v26 > v27)
            {
              v28 = (char *)v4 + 32 * v11;
              v29 = *v12;
              *v12 = 0;
              v39 = *(_OWORD *)(v28 + 8);
              v40 = *((_QWORD *)v28 + 3);
              v30 = *v19;
              *v19 = 0;
              v31 = *v12;
              *v12 = v30;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                {
                  v37 = v27;
                  v36 = v29;
                  WTF::StringImpl::destroy(v31, v9);
                  v28 = (char *)v4 + 32 * v11;
                  v29 = v36;
                  v27 = v37;
                  v10 = v38;
                }
                else
                {
                  *(_DWORD *)v31 -= 2;
                }
              }
              v32 = (char *)v18 + 32 * v17;
              v33 = *(_OWORD *)(v32 + 8);
              *((_QWORD *)v28 + 3) = *((_QWORD *)v32 + 3);
              *(_OWORD *)(v28 + 8) = v33;
              v34 = *v19;
              *v19 = v29;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                {
                  v35 = v27;
                  WTF::StringImpl::destroy(v34, v9);
                  v27 = v35;
                  v10 = v38;
                }
                else
                {
                  *(_DWORD *)v34 -= 2;
                }
              }
              *((_QWORD *)v32 + 3) = v40;
              *(_OWORD *)(v32 + 8) = v39;
              v18 = *(WTF **)a1;
              v26 = v27;
            }
            v17 = ((_DWORD)v17 + 1) & v15;
            ++v26;
            v19 = (WTF::StringImpl **)((char *)v18 + 32 * v17);
            v20 = *v19;
          }
          while (*v19);
          v13 = *v12;
        }
        *v12 = 0;
        v21 = *v19;
        *v19 = v13;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy(v21, v9);
            v10 = v38;
          }
          else
          {
            *(_DWORD *)v21 -= 2;
          }
        }
        v22 = (char *)v18 + 32 * v17;
        v23 = (char *)v4 + 32 * v11;
        v24 = *(_OWORD *)(v23 + 8);
        *((_QWORD *)v22 + 3) = *((_QWORD *)v23 + 3);
        *(_OWORD *)(v22 + 8) = v24;
        v25 = *v12;
        *v12 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::destroy(v25, v9);
            v10 = v38;
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
      }
      else
      {
        *v12 = 0;
      }
      ++v11;
    }
    while (v11 != v10);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree(v4, v9);
}

__n128 WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>,WTF::KeyValuePair<WTF::AtomString,WebCore::InputTypeFactory>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  __n128 result;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(__n128 *)(a2 + 1);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(__n128 *)(a1 + 8) = result;
  return result;
}

void WebCore::LazyFrameLoadIntersectionObserverCallback::~LazyFrameLoadIntersectionObserverCallback(WebCore::LazyFrameLoadIntersectionObserverCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LazyFrameLoadIntersectionObserverCallback::hasCallback(WebCore::LazyFrameLoadIntersectionObserverCallback *this)
{
  return 1;
}

uint64_t WebCore::LazyFrameLoadIntersectionObserverCallback::handleEvent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  WebCore::LazyLoadFrameObserver *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  WebCore::LazyLoadFrameObserver *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  void *v23;

  v3 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a3;
    v5 = *a3 + 8 * v3;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v4 + 56))
      {
        v6 = *(_QWORD *)(*(_QWORD *)v4 + 48);
        if (v6)
        {
          if ((*(_WORD *)(v6 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
          {
            *(_DWORD *)(v6 + 24) += 2;
            v7 = *(_QWORD **)(v6 + 160);
            if (!v7)
            {
              v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              v8 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v6);
              do
                v10 = __ldaxr(v8);
              while (__stlxr(v10 + 1, v8));
              *v7 = v8;
              v7[1] = 0;
              v7[3] = 0;
              v11 = *(WebCore::LazyLoadFrameObserver **)(v6 + 160);
              *(_QWORD *)(v6 + 160) = v7;
              if (v11)
              {
                WebCore::LazyLoadFrameObserver::~LazyLoadFrameObserver(v11, v9);
                WTF::fastFree(v12, v13);
                v7 = *(_QWORD **)(v6 + 160);
              }
            }
            v14 = *(_QWORD *)(*v7 + 8);
            v15 = *(_QWORD *)(v14 + 160);
            if (!v15)
            {
              v15 = WTF::fastMalloc((WTF *)0x20);
              v16 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v14);
              do
                v18 = __ldaxr(v16);
              while (__stlxr(v18 + 1, v16));
              *(_QWORD *)v15 = v16;
              *(_QWORD *)(v15 + 8) = 0;
              *(_QWORD *)(v15 + 24) = 0;
              v19 = *(WebCore::LazyLoadFrameObserver **)(v14 + 160);
              *(_QWORD *)(v14 + 160) = v15;
              if (v19)
              {
                WebCore::LazyLoadFrameObserver::~LazyLoadFrameObserver(v19, v17);
                WTF::fastFree(v20, v21);
                v15 = *(_QWORD *)(v14 + 160);
              }
            }
            WebCore::IntersectionObserver::unobserve(*(uint64_t ***)(v15 + 24), *(WebCore::Element **)(*v7 + 8));
            WebCore::HTMLIFrameElement::loadDeferredFrame((WebCore::HTMLIFrameElement *)v6, v22);
            if (*(_DWORD *)(v6 + 24) == 2)
            {
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v6, v23);
            }
            else
            {
              *(_DWORD *)(v6 + 24) -= 2;
            }
          }
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return 0;
}

void WebCore::LazyImageLoadIntersectionObserverCallback::~LazyImageLoadIntersectionObserverCallback(WebCore::LazyImageLoadIntersectionObserverCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LazyImageLoadIntersectionObserverCallback::hasCallback(WebCore::LazyImageLoadIntersectionObserverCallback *this)
{
  return 1;
}

uint64_t WebCore::LazyImageLoadIntersectionObserverCallback::handleEvent(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF **v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  void *v17;
  WTF *v18;

  v3 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a3;
    v5 = 8 * v3;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v4 + 56))
      {
        v6 = *(_QWORD *)(*(_QWORD *)v4 + 48);
        if (v6)
        {
          if ((*(_WORD *)(v6 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            *(_DWORD *)(v6 + 24) += 2;
            v7 = *(_QWORD *)(v6 + 176);
            if (*(_BYTE *)(v7 + 129) == 1)
            {
              *(_BYTE *)(v7 + 129) = 2;
              WebCore::ImageLoader::updateFromElement(v7, 0);
            }
            v8 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
            v9 = *(WTF **)(v8 + 1576);
            if (!v9)
            {
              v11 = (WTF **)(v8 + 1576);
              v12 = (WTF *)WTF::fastMalloc((WTF *)8);
              *(_QWORD *)v12 = 0;
              v18 = v12;
              std::unique_ptr<WebCore::LazyLoadImageObserver>::operator=[abi:sn180100](v11, &v18);
              std::unique_ptr<WebCore::LazyLoadImageObserver>::~unique_ptr[abi:sn180100](&v18, v13);
              v14 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
              v9 = *(WTF **)(v14 + 1576);
              if (!v9)
              {
                v15 = (WTF **)(v14 + 1576);
                v16 = (WTF *)WTF::fastMalloc((WTF *)8);
                *(_QWORD *)v16 = 0;
                v18 = v16;
                std::unique_ptr<WebCore::LazyLoadImageObserver>::operator=[abi:sn180100](v15, &v18);
                std::unique_ptr<WebCore::LazyLoadImageObserver>::~unique_ptr[abi:sn180100](&v18, v17);
                v9 = *v15;
              }
            }
            if (*(_QWORD *)v9)
              WebCore::IntersectionObserver::unobserve(*(uint64_t ***)v9, (WebCore::Element *)v6);
            if (*(_DWORD *)(v6 + 24) == 2)
            {
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
            }
            else
            {
              *(_DWORD *)(v6 + 24) -= 2;
            }
          }
        }
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

void std::__introsort<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *,false>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t *i;
  int v39;
  unsigned int v41;
  BOOL v42;
  int v43;
  unsigned int v45;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  uint64_t *v60;
  int v61;
  unsigned int v63;
  BOOL v64;
  WTF::StringImpl *v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v78;
  BOOL v79;
  uint64_t *v80;
  int v81;
  uint64_t *v82;
  uint64_t *v83;
  int v84;
  unsigned int v85;
  BOOL v86;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  int v95;
  int v96;
  unsigned int v98;
  BOOL v99;
  uint64_t *v100;
  int v101;
  unsigned int v102;
  BOOL v103;
  WTF::StringImpl *v105;
  unsigned int v106;
  int v107;
  unsigned int v109;
  BOOL v110;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v132;
  unsigned int v133;
  WTF::StringImpl *v134;
  int64_t v135;
  int64_t v136;
  int64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  BOOL v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  BOOL v148;
  BOOL v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  BOOL v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned int v169;
  BOOL v170;
  BOOL v171;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  WTF::StringImpl *v176;
  int64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int64_t v189;
  int v190;
  int v191;
  BOOL v193;
  unsigned int v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  BOOL v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  unsigned int v218;
  BOOL v219;
  BOOL v220;
  unsigned int v221;
  WTF::StringImpl *v222;
  int v223;
  unsigned int v224;
  BOOL v225;
  BOOL v226;
  BOOL v227;
  BOOL v228;
  BOOL v229;
  unint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  BOOL v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  unsigned int v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  WTF::StringImpl *v262;
  uint64_t *v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  unsigned __int8 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _BYTE v273[32];
  char v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  WTF::StringImpl *v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  WTF::StringImpl *v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  __int128 v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, a2, a3, a4);
  v10 = *(unsigned __int8 *)(a5 + 40);
  v11 = *(unsigned __int8 *)(a4 + 40);
  if (v10 != 1 || v11 == 1)
  {
    v13 = v10 != 1 && v11 == 1;
    if (v13
      || (!*(_BYTE *)(a5 + 60) ? (((v10 - 2) & 0xFD) != 0 ? (v14 = 0) : (v14 = 60)) : (v14 = *(_DWORD *)(a5 + 56)),
          !*(_BYTE *)(a4 + 60) ? (((v11 - 2) & 0xFD) != 0 ? (v15 = 0) : (v15 = 60)) : (v15 = *(_DWORD *)(a4 + 56)),
          v15 <= v14 && (v15 < v14 || (v10 == 4 || v11 != 4) && v10 == 4 && v11 != 4)))
    {
      v16 = *(_QWORD *)a4;
      *(_QWORD *)a4 = 0;
      v40 = v16;
      v41 = *(_OWORD *)(a4 + 8);
      v42 = *(_OWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 8) = v41 & 0xFFFFFFFE;
      v43 = v11;
      v17 = *(_OWORD *)(a4 + 48);
      *(_QWORD *)(a4 + 48) = 0;
      v44 = v17;
      v45 = *(_QWORD *)(a4 + 64);
      *(_QWORD *)&v17 = *(_QWORD *)(a4 + 72);
      *(_QWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      v46 = v17;
      WebCore::LinkIcon::operator=(a4, (uint64_t *)a5);
      WebCore::LinkIcon::operator=(a5, &v40);
      WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v40, v18);
      v19 = *(unsigned __int8 *)(a4 + 40);
      v20 = *(unsigned __int8 *)(a3 + 40);
      if (v19 != 1 || v20 == 1)
      {
        if (v19 != 1 && v20 == 1
          || (!*(_BYTE *)(a4 + 60) ? (((v19 - 2) & 0xFD) != 0 ? (v21 = 0) : (v21 = 60)) : (v21 = *(_DWORD *)(a4 + 56)),
              !*(_BYTE *)(a3 + 60) ? (((v20 - 2) & 0xFD) != 0 ? (v22 = 0) : (v22 = 60)) : (v22 = *(_DWORD *)(a3 + 56)),
              v22 <= v21 && (v22 < v21 || (v19 == 4 || v20 != 4) && v19 == 4 && v20 != 4)))
        {
          v23 = *(_QWORD *)a3;
          *(_QWORD *)a3 = 0;
          v40 = v23;
          v41 = *(_OWORD *)(a3 + 8);
          v42 = *(_OWORD *)(a3 + 24);
          *(_DWORD *)(a3 + 8) = v41 & 0xFFFFFFFE;
          v43 = v20;
          v24 = *(_OWORD *)(a3 + 48);
          *(_QWORD *)(a3 + 48) = 0;
          v44 = v24;
          v45 = *(_QWORD *)(a3 + 64);
          *(_QWORD *)&v24 = *(_QWORD *)(a3 + 72);
          *(_QWORD *)(a3 + 64) = 0;
          *(_QWORD *)(a3 + 72) = 0;
          v46 = v24;
          WebCore::LinkIcon::operator=(a3, (uint64_t *)a4);
          WebCore::LinkIcon::operator=(a4, &v40);
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v40, v25);
          v26 = *(unsigned __int8 *)(a3 + 40);
          v27 = *(unsigned __int8 *)(a2 + 40);
          if (v26 != 1 || v27 == 1)
          {
            if (v26 != 1 && v27 == 1
              || (!*(_BYTE *)(a3 + 60)
                ? (((v26 - 2) & 0xFD) != 0
                 ? (v28 = 0)
                 : (v28 = 60))
                : (v28 = *(_DWORD *)(a3 + 56)),
                  !*(_BYTE *)(a2 + 60)
                ? (((v27 - 2) & 0xFD) != 0
                 ? (v29 = 0)
                 : (v29 = 60))
                : (v29 = *(_DWORD *)(a2 + 56)),
                  v29 <= v28 && (v29 < v28 || (v26 == 4 || v27 != 4) && v26 == 4 && v27 != 4)))
            {
              v30 = *(_QWORD *)a2;
              *(_QWORD *)a2 = 0;
              v40 = v30;
              v41 = *(_OWORD *)(a2 + 8);
              v42 = *(_OWORD *)(a2 + 24);
              *(_DWORD *)(a2 + 8) = v41 & 0xFFFFFFFE;
              v43 = v27;
              v31 = *(_OWORD *)(a2 + 48);
              *(_QWORD *)(a2 + 48) = 0;
              v44 = v31;
              v45 = *(_QWORD *)(a2 + 64);
              *(_QWORD *)&v31 = *(_QWORD *)(a2 + 72);
              *(_QWORD *)(a2 + 64) = 0;
              *(_QWORD *)(a2 + 72) = 0;
              v46 = v31;
              WebCore::LinkIcon::operator=(a2, (uint64_t *)a3);
              WebCore::LinkIcon::operator=(a3, &v40);
              WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v40, v32);
              v33 = *(unsigned __int8 *)(a2 + 40);
              v34 = *(unsigned __int8 *)(a1 + 40);
              if (v33 != 1 || v34 == 1)
              {
                if (v33 != 1 && v34 == 1
                  || (!*(_BYTE *)(a2 + 60)
                    ? (((v33 - 2) & 0xFD) != 0
                     ? (v35 = 0)
                     : (v35 = 60))
                    : (v35 = *(_DWORD *)(a2 + 56)),
                      !*(_BYTE *)(a1 + 60)
                    ? (((v34 - 2) & 0xFD) != 0
                     ? (v36 = 0)
                     : (v36 = 60))
                    : (v36 = *(_DWORD *)(a1 + 56)),
                      v36 <= v35 && (v36 < v35 || (v33 == 4 || v34 != 4) && v33 == 4 && v34 != 4)))
                {
                  v37 = *(_QWORD *)a1;
                  *(_QWORD *)a1 = 0;
                  v40 = v37;
                  v41 = *(_OWORD *)(a1 + 8);
                  v42 = *(_OWORD *)(a1 + 24);
                  *(_DWORD *)(a1 + 8) = v41 & 0xFFFFFFFE;
                  v43 = v34;
                  v38 = *(_OWORD *)(a1 + 48);
                  *(_QWORD *)(a1 + 48) = 0;
                  v44 = v38;
                  v45 = *(_QWORD *)(a1 + 64);
                  *(_QWORD *)&v38 = *(_QWORD *)(a1 + 72);
                  *(_QWORD *)(a1 + 64) = 0;
                  *(_QWORD *)(a1 + 72) = 0;
                  v46 = v38;
                  WebCore::LinkIcon::operator=(a1, (uint64_t *)a2);
                  WebCore::LinkIcon::operator=(a2, &v40);
                  WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v40, v39);
                }
              }
            }
          }
        }
      }
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  BOOL v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v5 = a1;
  v6 = *(unsigned __int8 *)(a2 + 40);
  v7 = *(unsigned __int8 *)(a1 + 40);
  if (v6 != 1 || v7 == 1)
  {
    v9 = v6 != 1 && v7 == 1;
    if (v9
      || (!*(_BYTE *)(a2 + 60) ? (((v6 - 2) & 0xFD) != 0 ? (v10 = 0) : (v10 = 60)) : (v10 = *(_DWORD *)(a2 + 56)),
          !*(_BYTE *)(a1 + 60) ? (((v7 - 2) & 0xFD) != 0 ? (v21 = 0) : (v21 = 60)) : (v21 = *(_DWORD *)(a1 + 56)),
          v21 <= v10 && (v21 < v10 || (v6 == 4 || v7 != 4) && v6 == 4 && v7 != 4)))
    {
      v22 = *(unsigned __int8 *)(a3 + 40);
      v23 = v6 != 1 && v22 == 1;
      if (v23
        || (v6 == 1 ? (v24 = v22 == 1) : (v24 = 1),
            v24
         && (!*(_BYTE *)(a3 + 60) ? (((v22 - 2) & 0xFD) != 0 ? (v25 = 0) : (v25 = 60)) : (v25 = *(_DWORD *)(a3 + 56)),
             !*(_BYTE *)(a2 + 60) ? (((v6 - 2) & 0xFD) != 0 ? (v30 = 0) : (v30 = 60)) : (v30 = *(_DWORD *)(a2 + 56)),
             v30 > v25 || v30 >= v25 && (v6 == 4 && v22 != 4 || v6 == 4 || v22 != 4))))
      {
        v31 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        v43 = v31;
        v44 = *(_OWORD *)(a1 + 8);
        v45 = *(_OWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 8) = v44 & 0xFFFFFFFE;
        v46 = v7;
        v32 = *(_OWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        v47 = v32;
        v48 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)&v32 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        v49 = v32;
        WebCore::LinkIcon::operator=(a1, (uint64_t *)a2);
        WebCore::LinkIcon::operator=(a2, &v43);
        WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v43, v33);
        v34 = *(unsigned __int8 *)(a3 + 40);
        v35 = *(unsigned __int8 *)(a2 + 40);
        if (v34 == 1 && v35 != 1)
          return;
        if (v34 == 1 || v35 != 1)
        {
          if (*(_BYTE *)(a3 + 60))
            v36 = *(_DWORD *)(a3 + 56);
          else
            v36 = ((v34 - 2) & 0xFD) != 0 ? 0 : 60;
          if (*(_BYTE *)(a2 + 60))
            v39 = *(_DWORD *)(a2 + 56);
          else
            v39 = ((v35 - 2) & 0xFD) != 0 ? 0 : 60;
          if (v39 > v36 || v39 >= v36 && (v34 != 4 && v35 == 4 || v34 != 4 || v35 == 4))
            return;
        }
        v40 = *(_QWORD *)a2;
        *(_QWORD *)a2 = 0;
        v43 = v40;
        v44 = *(_OWORD *)(a2 + 8);
        v45 = *(_OWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 8) = v44 & 0xFFFFFFFE;
        v46 = v35;
        v41 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 48) = 0;
        v47 = v41;
        v48 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)&v41 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 72) = 0;
        v49 = v41;
        a1 = a2;
      }
      else
      {
        v37 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        v43 = v37;
        v44 = *(_OWORD *)(a1 + 8);
        v45 = *(_OWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 8) = v44 & 0xFFFFFFFE;
        v46 = v7;
        v38 = *(_OWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        v47 = v38;
        v48 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)&v38 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        v49 = v38;
      }
      WebCore::LinkIcon::operator=(a1, (uint64_t *)a3);
      v29 = a3;
LABEL_119:
      WebCore::LinkIcon::operator=(v29, &v43);
      WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v43, v42);
      return;
    }
    v11 = *(unsigned __int8 *)(a3 + 40);
    if (v6 != 1 && v11 == 1)
      return;
  }
  else
  {
    v11 = *(unsigned __int8 *)(a3 + 40);
  }
  v12 = v6 != 1 || v11 == 1;
  if (!v12
    || (!*(_BYTE *)(a3 + 60) ? (((v11 - 2) & 0xFD) != 0 ? (v13 = 0) : (v13 = 60)) : (v13 = *(_DWORD *)(a3 + 56)),
        !*(_BYTE *)(a2 + 60) ? (((v6 - 2) & 0xFD) != 0 ? (v14 = 0) : (v14 = 60)) : (v14 = *(_DWORD *)(a2 + 56)),
        v14 <= v13 && (v14 < v13 || (v6 != 4 || v11 == 4) && v6 != 4 && v11 == 4)))
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v43 = v15;
    v44 = *(_OWORD *)(a2 + 8);
    v45 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 8) = v44 & 0xFFFFFFFE;
    v46 = v6;
    v16 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    v47 = v16;
    v48 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)&v16 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    v49 = v16;
    WebCore::LinkIcon::operator=(a2, (uint64_t *)a3);
    WebCore::LinkIcon::operator=(a3, &v43);
    WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v43, v17);
    v18 = *(unsigned __int8 *)(a2 + 40);
    v19 = *(unsigned __int8 *)(v5 + 40);
    if (v18 != 1 || v19 == 1)
    {
      if (v18 != 1 && v19 == 1
        || (!*(_BYTE *)(a2 + 60) ? (((v18 - 2) & 0xFD) != 0 ? (v20 = 0) : (v20 = 60)) : (v20 = *(_DWORD *)(a2 + 56)),
            !*(_BYTE *)(v5 + 60) ? (((v19 - 2) & 0xFD) != 0 ? (v26 = 0) : (v26 = 60)) : (v26 = *(_DWORD *)(v5 + 56)),
            v26 <= v20 && (v26 < v20 || (v18 == 4 || v19 != 4) && v18 == 4 && v19 != 4)))
      {
        v27 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        v43 = v27;
        v44 = *(_OWORD *)(v5 + 8);
        v45 = *(_OWORD *)(v5 + 24);
        *(_DWORD *)(v5 + 8) = v44 & 0xFFFFFFFE;
        v46 = v19;
        v28 = *(_OWORD *)(v5 + 48);
        *(_QWORD *)(v5 + 48) = 0;
        v47 = v28;
        v48 = *(_QWORD *)(v5 + 64);
        *(_QWORD *)&v28 = *(_QWORD *)(v5 + 72);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        v49 = v28;
        WebCore::LinkIcon::operator=(v5, (uint64_t *)a2);
        v29 = a2;
        goto LABEL_119;
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  int v5;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v4 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = *(unsigned __int8 *)(a2 - 40);
      v6 = *(unsigned __int8 *)(a1 + 40);
      if (v5 != 1 || v6 == 1)
      {
        if (v5 != 1 && v6 == 1
          || (!*(_BYTE *)(a2 - 20) ? (((v5 - 2) & 0xFD) != 0 ? (v8 = 0) : (v8 = 60)) : (v8 = *(_DWORD *)(a2 - 24)),
              !*(_BYTE *)(a1 + 60) ? (((v6 - 2) & 0xFD) != 0 ? (v29 = 0) : (v29 = 60)) : (v29 = *(_DWORD *)(a1 + 56)),
              v29 <= v8 && (v29 < v8 || (v5 == 4 || v6 != 4) && v5 == 4 && v6 != 4)))
        {
          v30 = a2 - 80;
          v31 = *(_QWORD *)a1;
          *(_QWORD *)a1 = 0;
          v34 = v31;
          v35 = *(_OWORD *)(a1 + 8);
          v36 = *(_OWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 8) = v35 & 0xFFFFFFFE;
          v37 = v6;
          v32 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = 0;
          v38 = v32;
          v39 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)&v32 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          v40 = v32;
          WebCore::LinkIcon::operator=(a1, (uint64_t *)(a2 - 80));
          WebCore::LinkIcon::operator=(v30, &v34);
          goto LABEL_89;
        }
      }
      return v4;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, a1 + 80, a2 - 80);
      return v4;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, a1 + 80, a1 + 160, a2 - 80);
      return v4;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *,0>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return v4;
    default:
      v9 = a1 + 160;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, a1 + 80, a1 + 160);
      v10 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(unsigned __int8 *)(v10 + 40);
    v14 = *(unsigned __int8 *)(v9 + 40);
    if (v13 == 1 && v14 != 1)
      goto LABEL_66;
    if (v13 == 1 || v14 != 1)
    {
      if (*(_BYTE *)(v10 + 60))
        v17 = *(_DWORD *)(v10 + 56);
      else
        v17 = (((_BYTE)v13 - 2) & 0xFD) != 0 ? 0 : 60;
      if (*(_BYTE *)(v9 + 60))
        v18 = *(_DWORD *)(v9 + 56);
      else
        v18 = (((_BYTE)v14 - 2) & 0xFD) != 0 ? 0 : 60;
      if (v18 > v17 || v18 >= v17 && (v13 != 4 && v14 == 4 || v13 != 4 || v14 == 4))
        goto LABEL_66;
    }
    v19 = *(_QWORD *)v10;
    *(_QWORD *)v10 = 0;
    v34 = v19;
    v35 = *(_OWORD *)(v10 + 8);
    v36 = *(_OWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 8) = v35 & 0xFFFFFFFE;
    v37 = v13;
    v20 = *(_OWORD *)(v10 + 48);
    *(_QWORD *)(v10 + 48) = 0;
    v38 = v20;
    v39 = *(_QWORD *)(v10 + 64);
    *(_QWORD *)&v20 = *(_QWORD *)(v10 + 72);
    *(_QWORD *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 72) = 0;
    v40 = v20;
    WebCore::LinkIcon::operator=(v10, (uint64_t *)v9);
    v21 = a1;
    if (v9 != a1)
    {
      v22 = v11;
      while (1)
      {
        v21 = a1 + v22 + 160;
        v23 = *(unsigned __int8 *)(a1 + v22 + 120);
        if (v37 == 1 && v23 != 1)
          break;
        if (v37 == 1 || v23 != 1)
        {
          if (BYTE12(v38))
            v26 = DWORD2(v38);
          else
            v26 = ((v37 - 2) & 0xFD) != 0 ? 0 : 60;
          if (*(_BYTE *)(a1 + v22 + 140))
            v27 = *(_DWORD *)(a1 + v22 + 136);
          else
            v27 = (((_BYTE)v23 - 2) & 0xFD) != 0 ? 0 : 60;
          if (v27 > v26 || v27 >= v26 && (v37 != 4 && v23 == 4 || v37 != 4 || v23 == 4))
          {
            v21 = v9;
            break;
          }
        }
        v9 -= 80;
        WebCore::LinkIcon::operator=(v21, (uint64_t *)(a1 + v22 + 80));
        v22 -= 80;
        if (v22 == -160)
        {
          v21 = a1;
          break;
        }
      }
    }
    WebCore::LinkIcon::operator=(v21, &v34);
    if (++v12 == 8)
      break;
    WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v34, v28);
LABEL_66:
    v9 = v10;
    v11 += 80;
    v10 += 80;
    if (v10 == a2)
      return 1;
  }
  v4 = v10 + 80 == a2;
LABEL_89:
  WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v34, v28);
  return v4;
}

double WebCore::LinkIcon::LinkIcon(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v8 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = a2[7];
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = 0;
  *(_DWORD *)(a1 + 72) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_DWORD *)(a1 + 76) = v10;
  return result;
}

uint64_t WebCore::LinkIcon::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
  v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v10 = a2[6];
  a2[6] = 0;
  v11 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *((_DWORD *)a2 + 14);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  *(_DWORD *)(a1 + 56) = v12;
  v13 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v13)
  {
    v17 = 16 * v13;
    v18 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          v21 = v18;
          v23 = v17;
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
          v18 = v21;
          v17 = v23;
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
      v20 = *(v18 - 1);
      *(v18 - 1) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          v22 = v18;
          v24 = v17;
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
          v18 = v22;
          v17 = v24;
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      v18 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  v14 = *(WTF **)(a1 + 64);
  if (v14)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = 0;
  *(_DWORD *)(a1 + 72) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_DWORD *)(a1 + 76) = v15;
  return a1;
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, a2, a3);
  v8 = *(unsigned __int8 *)(a4 + 40);
  v9 = *(unsigned __int8 *)(a3 + 40);
  if (v8 != 1 || v9 == 1)
  {
    v11 = v8 != 1 && v9 == 1;
    if (v11
      || (!*(_BYTE *)(a4 + 60) ? (((v8 - 2) & 0xFD) != 0 ? (v12 = 0) : (v12 = 60)) : (v12 = *(_DWORD *)(a4 + 56)),
          !*(_BYTE *)(a3 + 60) ? (((v9 - 2) & 0xFD) != 0 ? (v13 = 0) : (v13 = 60)) : (v13 = *(_DWORD *)(a3 + 56)),
          v13 <= v12 && (v13 < v12 || (v8 == 4 || v9 != 4) && v8 == 4 && v9 != 4)))
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      v31 = v14;
      v32 = *(_OWORD *)(a3 + 8);
      v33 = *(_OWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 8) = v32 & 0xFFFFFFFE;
      v34 = v9;
      v15 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 48) = 0;
      v35 = v15;
      v36 = *(_QWORD *)(a3 + 64);
      *(_QWORD *)&v15 = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      v37 = v15;
      WebCore::LinkIcon::operator=(a3, (uint64_t *)a4);
      WebCore::LinkIcon::operator=(a4, &v31);
      WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v31, v16);
      v17 = *(unsigned __int8 *)(a3 + 40);
      v18 = *(unsigned __int8 *)(a2 + 40);
      if (v17 != 1 || v18 == 1)
      {
        if (v17 != 1 && v18 == 1
          || (!*(_BYTE *)(a3 + 60) ? (((v17 - 2) & 0xFD) != 0 ? (v19 = 0) : (v19 = 60)) : (v19 = *(_DWORD *)(a3 + 56)),
              !*(_BYTE *)(a2 + 60) ? (((v18 - 2) & 0xFD) != 0 ? (v20 = 0) : (v20 = 60)) : (v20 = *(_DWORD *)(a2 + 56)),
              v20 <= v19 && (v20 < v19 || (v17 == 4 || v18 != 4) && v17 == 4 && v18 != 4)))
        {
          v21 = *(_QWORD *)a2;
          *(_QWORD *)a2 = 0;
          v31 = v21;
          v32 = *(_OWORD *)(a2 + 8);
          v33 = *(_OWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 8) = v32 & 0xFFFFFFFE;
          v34 = v18;
          v22 = *(_OWORD *)(a2 + 48);
          *(_QWORD *)(a2 + 48) = 0;
          v35 = v22;
          v36 = *(_QWORD *)(a2 + 64);
          *(_QWORD *)&v22 = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a2 + 64) = 0;
          *(_QWORD *)(a2 + 72) = 0;
          v37 = v22;
          WebCore::LinkIcon::operator=(a2, (uint64_t *)a3);
          WebCore::LinkIcon::operator=(a3, &v31);
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v31, v23);
          v24 = *(unsigned __int8 *)(a2 + 40);
          v25 = *(unsigned __int8 *)(a1 + 40);
          if (v24 != 1 || v25 == 1)
          {
            if (v24 != 1 && v25 == 1
              || (!*(_BYTE *)(a2 + 60)
                ? (((v24 - 2) & 0xFD) != 0
                 ? (v26 = 0)
                 : (v26 = 60))
                : (v26 = *(_DWORD *)(a2 + 56)),
                  !*(_BYTE *)(a1 + 60)
                ? (((v25 - 2) & 0xFD) != 0
                 ? (v27 = 0)
                 : (v27 = 60))
                : (v27 = *(_DWORD *)(a1 + 56)),
                  v27 <= v26 && (v27 < v26 || (v24 == 4 || v25 != 4) && v24 == 4 && v25 != 4)))
            {
              v28 = *(_QWORD *)a1;
              *(_QWORD *)a1 = 0;
              v31 = v28;
              v32 = *(_OWORD *)(a1 + 8);
              v33 = *(_OWORD *)(a1 + 24);
              *(_DWORD *)(a1 + 8) = v32 & 0xFFFFFFFE;
              v34 = v25;
              v29 = *(_OWORD *)(a1 + 48);
              *(_QWORD *)(a1 + 48) = 0;
              v35 = v29;
              v36 = *(_QWORD *)(a1 + 64);
              *(_QWORD *)&v29 = *(_QWORD *)(a1 + 72);
              *(_QWORD *)(a1 + 64) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              v37 = v29;
              WebCore::LinkIcon::operator=(a1, (uint64_t *)a2);
              WebCore::LinkIcon::operator=(a2, &v31);
              WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v31, v30);
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::Traversal<WebCore::HTMLLinkElement>::firstChildTemplate<WebCore::ContainerNode const>(uint64_t a1)
{
  uint64_t result;

  for (result = *(_QWORD *)(a1 + 80); result; result = *(_QWORD *)(result + 56))
  {
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::linkTag + 24))
    {
      break;
    }
  }
  return result;
}

uint64_t WebCore::Traversal<WebCore::HTMLLinkElement>::nextSibling(uint64_t a1)
{
  uint64_t result;

  for (result = *(_QWORD *)(a1 + 56); result; result = *(_QWORD *)(result + 56))
  {
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::linkTag + 24))
    {
      break;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkIcon>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::LinkIcon::LinkIcon(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x195C9F6E4);
    }
    v3 = *(uint64_t **)a1;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12));
    v5 = 80 * a2;
    v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::LinkIcon>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::LinkIcon>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebCore::LinkIcon::LinkIcon(a3, v5);
      WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)v5, v6);
      a3 += 80;
      v5 += 10;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaController::*&)(void),WebCore::MediaController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::LabelsNodeList>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v5;
  void *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  WebCore::Node *v14;

  v3 = *(_QWORD *)(a2 + 80);
  if (v3)
  {
    while (1)
    {
      v5 = *(_WORD *)(v3 + 28);
      if ((v5 & 8) != 0)
        break;
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        return a2;
    }
LABEL_6:
    while (1)
    {
      if ((v5 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
      {
        WebCore::HTMLLabelElement::control(v3, (uint64_t *)&v14);
        v8 = *(WebCore::Node **)(a1 + 24);
        v9 = v14;
        v14 = 0;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v9, v7);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        if (v9 == v8)
          break;
      }
      v10 = *(_QWORD *)(v3 + 80);
      if (!v10)
      {
        if (v3 == a2)
          return a2;
        while (1)
        {
          v10 = *(_QWORD *)(v3 + 56);
          if (v10)
            break;
          v3 = *(_QWORD *)(v3 + 32);
          if (v3)
            v13 = v3 == a2;
          else
            v13 = 1;
          if (v13)
            return a2;
        }
      }
      v5 = *(_WORD *)(v10 + 28);
      v3 = v10;
      if ((v5 & 8) == 0)
      {
        while (v10 != a2)
        {
          if (!*(_QWORD *)(v10 + 56))
          {
            v11 = v10;
            while (1)
            {
              v11 = *(_QWORD *)(v11 + 32);
              if (!v11 || v11 == a2)
                return a2;
              v10 = *(_QWORD *)(v11 + 56);
              if (v10)
                goto LABEL_24;
            }
          }
          v10 = *(_QWORD *)(v10 + 56);
LABEL_24:
          v5 = *(_WORD *)(v10 + 28);
          if ((v5 & 8) != 0)
          {
            v3 = v10;
            goto LABEL_6;
          }
        }
        return a2;
      }
    }
  }
  return a2;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::LabelsNodeList>(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  __int16 v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  unsigned int v17;
  WebCore::Node *v18;

  *a4 = 0;
  if (a3)
  {
    v7 = result;
    while (2)
    {
      v8 = (_QWORD *)*a2;
      v9 = (_QWORD *)a2[1];
      result = v9[10];
      if (result)
        goto LABEL_22;
      if (v9 == v8)
      {
LABEL_33:
        a2[1] = 0;
      }
      else
      {
        while (1)
        {
          result = v9[7];
          if (result)
            break;
          v9 = (_QWORD *)v9[4];
          if (v9)
            v10 = v9 == v8;
          else
            v10 = 1;
          if (v10)
            goto LABEL_33;
        }
LABEL_22:
        while (1)
        {
          v13 = *(_WORD *)(result + 28);
          if ((v13 & 8) != 0)
            break;
          if ((_QWORD *)result == v8)
            goto LABEL_33;
          if (!*(_QWORD *)(result + 56))
          {
            v11 = result;
            while (1)
            {
              v11 = *(_QWORD *)(v11 + 32);
              if (!v11 || v11 == (_QWORD)v8)
                goto LABEL_33;
              result = *(_QWORD *)(v11 + 56);
              if (result)
                goto LABEL_22;
            }
          }
          result = *(_QWORD *)(result + 56);
        }
        a2[1] = result;
        if ((v13 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
        {
          continue;
        }
        result = WebCore::HTMLLabelElement::control(result, (uint64_t *)&v18);
        v15 = *(WebCore::Node **)(v7 + 24);
        v16 = v18;
        v18 = 0;
        if (v16)
        {
          if (*((_DWORD *)v16 + 6) == 2)
          {
            if ((*((_WORD *)v16 + 15) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef(v16, v14);
          }
          else
          {
            *((_DWORD *)v16 + 6) -= 2;
          }
        }
        if (v16 != v15)
          continue;
        v17 = *a4 + 1;
        *a4 = v17;
        if (v17 < a3)
          continue;
      }
      break;
    }
  }
  return result;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::LabelsNodeList>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;

  v3 = *(_QWORD *)(a2 + 88);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 4) != 0)
    {
      do
      {
        v5 = *(_QWORD *)(v3 + 88);
        if (!v5)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v5 + 28) & 4) != 0);
    }
    while (1)
    {
      v7 = *(_WORD *)(v3 + 28);
      if ((v7 & 8) != 0)
        break;
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v6 = *(_QWORD *)(v3 + 88);
            if (!v6)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v6 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a2)
          return a2;
      }
      if (!v3)
        return a2;
    }
    while (1)
    {
      if ((v7 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
      {
        WebCore::HTMLLabelElement::control(v3, (uint64_t *)&v15);
        v10 = *(WebCore::Node **)(a1 + 24);
        v11 = v15;
        v15 = 0;
        if (v11)
        {
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, v9);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
        }
        if (v11 == v10)
          break;
      }
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 != a2 && v3 != 0)
          goto LABEL_29;
        return a2;
      }
      if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v14 = *(_QWORD *)(v3 + 88);
          if (!v14)
            break;
          v3 = *(_QWORD *)(v3 + 88);
        }
        while ((*(_WORD *)(v14 + 28) & 4) != 0);
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      }
LABEL_29:
      while (1)
      {
        v7 = *(_WORD *)(v3 + 28);
        if ((v7 & 8) != 0)
          break;
        if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v13 = *(_QWORD *)(v3 + 88);
              if (!v13)
                break;
              v3 = *(_QWORD *)(v3 + 88);
            }
            while ((*(_WORD *)(v13 + 28) & 4) != 0);
          }
          else
          {
            v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 32);
          if (v3 == a2)
            return a2;
        }
        if (!v3)
          return a2;
      }
    }
  }
  return a2;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::LabelsNodeList>(uint64_t result, uint64_t *a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    while (1)
    {
      v6 = *a2;
      v7 = a2[1];
      result = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
      if (!result)
        break;
      if ((*(_WORD *)((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v11 = *(_QWORD *)(result + 88);
          if (!v11)
            break;
          result = *(_QWORD *)(result + 88);
        }
        while ((*(_WORD *)(v11 + 28) & 4) != 0);
      }
LABEL_8:
      while (1)
      {
        v9 = *(_WORD *)(result + 28);
        if ((v9 & 8) != 0)
          break;
        if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v10 = *(_QWORD *)(result + 88);
              if (!v10)
                break;
              result = *(_QWORD *)(result + 88);
            }
            while ((*(_WORD *)(v10 + 28) & 4) != 0);
          }
          else
          {
            result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          result = *(_QWORD *)(result + 32);
          if (result == v6)
            goto LABEL_33;
        }
        if (!result)
          goto LABEL_33;
      }
      a2[1] = result;
      if ((v9 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
      {
        result = WebCore::HTMLLabelElement::control(result, (uint64_t *)&v15);
        v13 = *(WebCore::Node **)(v5 + 24);
        v14 = v15;
        v15 = 0;
        if (v14)
        {
          if (*((_DWORD *)v14 + 6) == 2)
          {
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef(v14, v12);
          }
          else
          {
            *((_DWORD *)v14 + 6) -= 2;
          }
        }
        if (v14 == v13 && !--v3)
          return result;
      }
    }
    result = *(_QWORD *)(v7 + 32);
    if (result != v6 && result != 0)
      goto LABEL_8;
LABEL_33:
    a2[1] = 0;
  }
  return result;
}

unsigned int *WebCore::MediaDocumentParser::appendBytes(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  void *v48;
  WebCore::Node *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WebCore::Node *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WebCore::FrameLoader *v105;
  WTF::StringImpl *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116[5];
  _BYTE v117[8];
  WTF::StringImpl *v118;
  char v119;
  WebCore::Node *v120;
  _BYTE v121[8];
  WTF::StringImpl *v122;
  char v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  char v126;
  _BYTE v127[8];
  WTF::StringImpl *v128;
  char v129;
  _BYTE v130[8];
  WTF::StringImpl *v131;
  char v132;

  v1 = result;
  v2 = *((_QWORD *)result + 3);
  if (v2 && *(_QWORD *)(v2 + 8))
    return result;
  v3 = *((_QWORD *)result + 2);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  *(_DWORD *)(v4 + 24) += 2;
  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = v4 + 96;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v8 = WebCore::HTMLNames::htmlTag;
  if (WebCore::HTMLNames::htmlTag)
    ++*(_DWORD *)WebCore::HTMLNames::htmlTag;
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33BF070;
  WebCore::ContainerNode::appendChild(v4, (WebCore::Node *)v5, (uint64_t)v130);
  if (v132)
  {
    v10 = v131;
    v131 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  WebCore::Document::setCSSTarget(v4, (WebCore::Element *)v6);
  v11 = *(_QWORD *)(v4 + 528);
  if (v11)
  {
    v12 = *(unsigned int **)(v11 + 8);
    if (v12)
    {
      v13 = v12 + 2;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      WebCore::LocalFrame::injectUserScripts(v12, 0);
      do
      {
        v15 = __ldaxr(v13);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v13));
      if (!v16)
      {
        atomic_store(1u, v13);
        v112 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v112 = off_1E31FE290;
        *((_QWORD *)v112 + 1) = v13;
        v116[0] = v112;
        WTF::ensureOnMainThread();
        v113 = v116[0];
        v116[0] = 0;
        if (v113)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v113 + 8))(v113);
      }
    }
  }
  v17 = bmalloc::api::isoAllocate();
  v18 = v17;
  *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v17 + 24) = 0x101C00000002;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = v7;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  v19 = WebCore::HTMLNames::headTag;
  if (WebCore::HTMLNames::headTag)
    ++*(_DWORD *)WebCore::HTMLNames::headTag;
  *(_QWORD *)(v17 + 96) = v19;
  *(_QWORD *)(v17 + 104) = 0;
  *(_QWORD *)v17 = off_1E33BDFC0;
  WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v17, (uint64_t)v127);
  if (v129)
  {
    v21 = v128;
    v128 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v22 = bmalloc::api::isoAllocate();
  v23 = v22;
  *(_OWORD *)(v22 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v22 + 24) = 0x101C00000002;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = v7;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v22 + 80) = 0;
  *(_QWORD *)(v22 + 88) = 0;
  v24 = WebCore::HTMLNames::metaTag;
  if (WebCore::HTMLNames::metaTag)
    ++*(_DWORD *)WebCore::HTMLNames::metaTag;
  *(_QWORD *)(v22 + 96) = v24;
  *(_QWORD *)(v22 + 104) = 0;
  *(_QWORD *)v22 = off_1E33C41B0;
  *(_BYTE *)(v22 + 112) = 0;
  *(_BYTE *)(v22 + 128) = 0;
  *(_BYTE *)(v22 + 136) = 0;
  *(_BYTE *)(v22 + 144) = 0;
  WTF::AtomStringImpl::add();
  v124 = v116[0];
  v25 = *(_QWORD *)(v23 + 104);
  if (!v25)
    goto LABEL_38;
  v26 = *(_DWORD *)(v25 + 4);
  if ((v26 & 1) != 0)
  {
    v27 = *(uint64_t **)(v25 + 40);
    v28 = *(_DWORD *)(v25 + 52);
    if (!v28)
    {
LABEL_38:
      v29 = 0xFFFFFFFFLL;
      goto LABEL_39;
    }
  }
  else
  {
    v27 = (uint64_t *)(v25 + 32);
    v28 = v26 >> 5;
    if (!v28)
      goto LABEL_38;
  }
  v29 = 0;
  while (1)
  {
    v30 = *v27;
    if (*v27 == WebCore::HTMLNames::nameAttr
      || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
      && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
    {
      break;
    }
    ++v29;
    v27 += 2;
    if (v28 == v29)
      goto LABEL_38;
  }
LABEL_39:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v23, v29, (WebCore::TreeScope *)&WebCore::HTMLNames::nameAttr, &v124, 0);
  v32 = v124;
  v124 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  WTF::AtomStringImpl::add();
  v124 = v116[0];
  v33 = *(_QWORD *)(v23 + 104);
  if (!v33)
    goto LABEL_54;
  v34 = *(_DWORD *)(v33 + 4);
  if ((v34 & 1) != 0)
  {
    v35 = *(uint64_t **)(v33 + 40);
    v36 = *(_DWORD *)(v33 + 52);
    if (!v36)
    {
LABEL_54:
      v37 = 0xFFFFFFFFLL;
      goto LABEL_55;
    }
  }
  else
  {
    v35 = (uint64_t *)(v33 + 32);
    v36 = v34 >> 5;
    if (!v36)
      goto LABEL_54;
  }
  v37 = 0;
  while (1)
  {
    v38 = *v35;
    if (*v35 == WebCore::HTMLNames::contentAttr
      || *(_QWORD *)(v38 + 24) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 24)
      && *(_QWORD *)(v38 + 32) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 32))
    {
      break;
    }
    ++v37;
    v35 += 2;
    if (v36 == v37)
      goto LABEL_54;
  }
LABEL_55:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v23, v37, (WebCore::TreeScope *)&WebCore::HTMLNames::contentAttr, &v124, 0);
  v40 = v124;
  v124 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  WebCore::ContainerNode::appendChild(v18, (WebCore::Node *)v23, (uint64_t)&v124);
  if (v126)
  {
    v42 = v125;
    v125 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  v43 = bmalloc::api::isoAllocate();
  v44 = v43;
  *(_OWORD *)(v43 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v43 + 24) = 0x101C00000002;
  *(_QWORD *)(v43 + 32) = 0;
  *(_QWORD *)(v43 + 40) = v7;
  *(_OWORD *)(v43 + 48) = 0u;
  *(_OWORD *)(v43 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v43 + 80) = 0;
  *(_QWORD *)(v43 + 88) = 0;
  v45 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(v43 + 96) = v45;
  *(_QWORD *)(v43 + 104) = 0;
  *(_QWORD *)v43 = off_1E33B5118;
  WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v43, (uint64_t)v121);
  if (v123)
  {
    v47 = v122;
    v122 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v46);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
  WebCore::HTMLVideoElement::create((WebCore::HTMLVideoElement *)&WebCore::HTMLNames::videoTag, (const WebCore::QualifiedName *)v4, 0, &v120);
  v49 = v120;
  v50 = *((_QWORD *)v120 + 37);
  if (v50)
    goto LABEL_230;
  v50 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v50 = 1;
  *(_QWORD *)(v50 + 8) = v49;
  v51 = (unsigned int *)*((_QWORD *)v49 + 37);
  *((_QWORD *)v49 + 37) = v50;
  if (!v51)
    goto LABEL_230;
  do
  {
    v52 = __ldaxr(v51);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v51));
  if (!v53)
  {
    atomic_store(1u, v51);
    WTF::fastFree((WTF *)v51, v48);
  }
  v50 = *((_QWORD *)v49 + 37);
  if (v50)
  {
LABEL_230:
    do
      v54 = __ldaxr((unsigned int *)v50);
    while (__stlxr(v54 + 1, (unsigned int *)v50));
  }
  v55 = (unsigned int *)*((_QWORD *)v1 + 3);
  *((_QWORD *)v1 + 3) = v50;
  if (v55)
  {
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, v48);
    }
  }
  v58 = v120;
  v59 = *((_QWORD *)v120 + 13);
  if (!v59)
    goto LABEL_91;
  v60 = *(_DWORD *)(v59 + 4);
  if ((v60 & 1) != 0)
  {
    v61 = *(uint64_t **)(v59 + 40);
    v62 = *(_DWORD *)(v59 + 52);
    if (!v62)
    {
LABEL_91:
      v63 = 0xFFFFFFFFLL;
      goto LABEL_92;
    }
  }
  else
  {
    v61 = (uint64_t *)(v59 + 32);
    v62 = v60 >> 5;
    if (!v62)
      goto LABEL_91;
  }
  v63 = 0;
  while (1)
  {
    v64 = *v61;
    if (*v61 == WebCore::HTMLNames::controlsAttr
      || *(_QWORD *)(v64 + 24) == *(_QWORD *)(WebCore::HTMLNames::controlsAttr + 24)
      && *(_QWORD *)(v64 + 32) == *(_QWORD *)(WebCore::HTMLNames::controlsAttr + 32))
    {
      break;
    }
    ++v63;
    v61 += 2;
    if (v62 == v63)
      goto LABEL_91;
  }
LABEL_92:
  WebCore::Element::setAttributeInternal(v120, v63, (WebCore::TreeScope *)&WebCore::HTMLNames::controlsAttr, MEMORY[0x1E0CBF3B8], 0);
  v65 = *((_QWORD *)v58 + 13);
  if (!v65)
    goto LABEL_104;
  v66 = *(_DWORD *)(v65 + 4);
  if ((v66 & 1) != 0)
  {
    v67 = *(uint64_t **)(v65 + 40);
    v68 = *(_DWORD *)(v65 + 52);
    if (v68)
      goto LABEL_97;
LABEL_104:
    v69 = 0xFFFFFFFFLL;
    goto LABEL_105;
  }
  v67 = (uint64_t *)(v65 + 32);
  v68 = v66 >> 5;
  if (!v68)
    goto LABEL_104;
LABEL_97:
  v69 = 0;
  while (1)
  {
    v70 = *v67;
    if (*v67 == WebCore::HTMLNames::autoplayAttr
      || *(_QWORD *)(v70 + 24) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 24)
      && *(_QWORD *)(v70 + 32) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 32))
    {
      break;
    }
    ++v69;
    v67 += 2;
    if (v68 == v69)
      goto LABEL_104;
  }
LABEL_105:
  WebCore::Element::setAttributeInternal(v58, v69, (WebCore::TreeScope *)&WebCore::HTMLNames::autoplayAttr, MEMORY[0x1E0CBF3B8], 0);
  v72 = *(WTF::StringImpl **)(v4 + 736);
  if (v72)
  {
    if ((*((_BYTE *)v72 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v72 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v72, v71);
      v72 = v116[0];
    }
  }
  v116[0] = v72;
  v73 = *((_QWORD *)v58 + 13);
  if (!v73)
    goto LABEL_120;
  v74 = *(_DWORD *)(v73 + 4);
  if ((v74 & 1) != 0)
  {
    v75 = *(uint64_t **)(v73 + 40);
    v76 = *(_DWORD *)(v73 + 52);
    if (!v76)
    {
LABEL_120:
      v77 = 0xFFFFFFFFLL;
      goto LABEL_121;
    }
  }
  else
  {
    v75 = (uint64_t *)(v73 + 32);
    v76 = v74 >> 5;
    if (!v76)
      goto LABEL_120;
  }
  v77 = 0;
  while (1)
  {
    v78 = *v75;
    if (*v75 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v78 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v78 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    ++v77;
    v75 += 2;
    if (v76 == v77)
      goto LABEL_120;
  }
LABEL_121:
  WebCore::Element::setAttributeInternal(v58, v77, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, v116, 0);
  v80 = v116[0];
  v116[0] = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v79);
    else
      *(_DWORD *)v80 -= 2;
  }
  v81 = *(_QWORD *)(v4 + 528);
  if (!v81)
    goto LABEL_149;
  v82 = *(_QWORD *)(v81 + 8);
  if (!v82)
    goto LABEL_149;
  v83 = *(_QWORD *)(*(_QWORD *)(v82 + 280) + 88);
  if (!v83 || *(_QWORD *)(v82 + 296) != v4)
    goto LABEL_149;
  ++*(_DWORD *)(v83 + 24);
  WebCore::ResourceResponse::platformLazyInit(v83 + 1272, 1);
  v85 = *(WTF::StringImpl **)(v83 + 1312);
  if (v85)
  {
    if ((*((_BYTE *)v85 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v85 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v85, v84);
      v85 = v116[0];
    }
  }
  v116[0] = v85;
  v86 = *((_QWORD *)v58 + 13);
  if (!v86)
    goto LABEL_143;
  v87 = *(_DWORD *)(v86 + 4);
  if ((v87 & 1) == 0)
  {
    v88 = (uint64_t *)(v86 + 32);
    v89 = v87 >> 5;
    if (!v89)
      goto LABEL_143;
LABEL_136:
    v90 = 0;
    while (1)
    {
      v91 = *v88;
      if (*v88 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v91 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v91 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        goto LABEL_144;
      }
      ++v90;
      v88 += 2;
      if (v89 == v90)
        goto LABEL_143;
    }
  }
  v88 = *(uint64_t **)(v86 + 40);
  v89 = *(_DWORD *)(v86 + 52);
  if (v89)
    goto LABEL_136;
LABEL_143:
  v90 = 0xFFFFFFFFLL;
LABEL_144:
  WebCore::Element::setAttributeInternal(v58, v90, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, v116, 0);
  v93 = v116[0];
  v116[0] = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, v92);
    else
      *(_DWORD *)v93 -= 2;
  }
  if (*(_DWORD *)(v83 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
  else
    --*(_DWORD *)(v83 + 24);
LABEL_149:
  WebCore::ContainerNode::appendChild(v44, v58, (uint64_t)v117);
  if (v119)
  {
    v95 = v118;
    v118 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, v94);
      else
        *(_DWORD *)v95 -= 2;
    }
  }
  *(_BYTE *)(v4 + 3436) = 1;
  v96 = *(_QWORD *)(v4 + 528);
  if (v96)
  {
    v97 = *(_QWORD *)(v96 + 8);
    if (v97)
    {
      v98 = (unsigned int *)(v97 + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 + 1, v98));
      v100 = *(_QWORD *)(v97 + 280);
      v101 = 88;
      if (!*(_BYTE *)(v100 + 80))
        v101 = 96;
      v102 = *(_QWORD *)(v100 + v101);
      if (v102)
        ++*(_DWORD *)(v102 + 24);
      v103 = *(_QWORD *)(v102 + 80);
      if (v103)
      {
        v104 = *(_QWORD *)(v103 + 8);
        if (v104)
          *(_DWORD *)(v104 + 130) |= 8u;
      }
      if (*(_DWORD *)(v102 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v102 + 24))(v102);
      else
        --*(_DWORD *)(v102 + 24);
      v105 = *(WebCore::FrameLoader **)(v97 + 280);
      ++*(_DWORD *)v105;
      WebCore::Document::completeURL((WebCore::Document *)v4, (_QWORD *)v1 + 4, v4 + 848, 0, (WTF::URL *)v116);
      WebCore::FrameLoader::setOutgoingReferrer(v105, (const WTF::URL *)v116);
      v106 = v116[0];
      v116[0] = 0;
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
          WTF::StringImpl::destroy(v106, v94);
        else
          *(_DWORD *)v106 -= 2;
      }
      if (!*(_DWORD *)v105)
      {
        __break(0xC471u);
        JUMPOUT(0x195CA097CLL);
      }
      --*(_DWORD *)v105;
      do
      {
        v107 = __ldaxr(v98);
        v108 = v107 - 1;
      }
      while (__stlxr(v108, v98));
      if (!v108)
      {
        atomic_store(1u, v98);
        v114 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v114 = off_1E31FE290;
        *((_QWORD *)v114 + 1) = v98;
        v116[0] = v114;
        WTF::ensureOnMainThread();
        v115 = v116[0];
        v116[0] = 0;
        if (v115)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v115 + 8))(v115);
      }
    }
  }
  result = (unsigned int *)v120;
  if (v120)
  {
    if (*((_DWORD *)v120 + 6) == 2)
    {
      if ((*((_WORD *)v120 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v120, v94);
    }
    else
    {
      *((_DWORD *)v120 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v44 + 24) == 2)
  {
    if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v44, v94);
  }
  else
  {
    *(_DWORD *)(v44 + 24) -= 2;
  }
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v23, v94);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v18, v94);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v6, v94);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v4, v94);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (*((unsigned __int8 *)v1 + 12) <= 1u)
  {
    v109 = *((_QWORD *)v1 + 2);
    if (v109 && (v110 = *(_QWORD *)(v109 + 8)) != 0)
    {
      *(_DWORD *)(v110 + 24) += 2;
      result = WebCore::Document::finishedParsing(v110, v94);
      if (*(_DWORD *)(v110 + 24) == 2)
      {
        if ((*(_WORD *)(v110 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v110, v111);
      }
      else
      {
        *(_DWORD *)(v110 + 24) -= 2;
      }
    }
    else
    {
      return WebCore::Document::finishedParsing(0, v94);
    }
  }
  return result;
}

unsigned int *WebCore::RawDataDocumentParser::finish(unsigned int *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*((unsigned __int8 *)this + 12) <= 1u)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    {
      *(_DWORD *)(v3 + 24) += 2;
      this = WebCore::Document::finishedParsing(v3, a2);
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      return WebCore::Document::finishedParsing(0, a2);
    }
  }
  return this;
}

WebCore::MediaDocument *WebCore::MediaDocument::MediaDocument(WTF::StringImpl **this, uint64_t **a2, const WebCore::Settings *a3, const WTF::URL *a4)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v20 = 0u;
  v6 = WebCore::Document::Document(this, a2, a3, a4, 17, 0, &v20);
  *(_QWORD *)v6 = off_1E33BA1B0;
  *(_QWORD *)(v6 + 192) = &unk_1E33BA500;
  *(_QWORD *)(v6 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v6 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v6 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v6 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v6 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v6 + 3512) = 0u;
  v8 = *(WTF::StringImpl **)(v6 + 1704);
  this[213] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  *this = (WTF::StringImpl *)off_1E33D5E78;
  this[24] = (WTF::StringImpl *)&unk_1E33D61C8;
  this[36] = (WTF::StringImpl *)&unk_1E33D6388;
  this[63] = (WTF::StringImpl *)&unk_1E33D63B0;
  this[64] = (WTF::StringImpl *)&unk_1E33D63D8;
  this[68] = (WTF::StringImpl *)&unk_1E33D6408;
  this[69] = (WTF::StringImpl *)&unk_1E33D6430;
  this[441] = 0;
  WebCore::Document::setCompatibilityMode((uint64_t)this, (void *)1);
  *((_BYTE *)this + 3385) = 1;
  if (a2)
  {
    WebCore::FrameLoader::nonSrcdocFrame(a2[35], &v19);
    v10 = v19;
    if (v19)
    {
      v11 = *(WTF::StringImpl **)(*(_QWORD *)(v19 + 280) + 160);
      if (v11)
        *(_DWORD *)v11 += 2;
      v19 = 0;
      v12 = (unsigned int *)(v10 + 8);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v17 = off_1E31FE290;
        v17[1] = v12;
        *(_QWORD *)&v20 = v17;
        WTF::ensureOnMainThread();
        v18 = v20;
        *(_QWORD *)&v20 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    else
    {
      v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v11 += 2;
    }
    v15 = this[441];
    this[441] = v11;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v9);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return (WebCore::MediaDocument *)this;
}

void WebCore::MediaDocument::~MediaDocument(WebCore::MediaDocument *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 440);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 439);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(this, a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 440);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 439);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::MediaDocument::~MediaDocument(WebCore::MediaDocument *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 24) = off_1E33BA1B0;
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 192), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 288), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 504), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 512), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 544), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 552), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 24) = off_1E33BA1B0;
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 504), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 512), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 544), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::MediaDocument *)((char *)this - 552), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

unsigned int *WebCore::MediaDocument::createParser@<X0>(WebCore::MediaDocument *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int v6;
  _DWORD *v7;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A3D50;
  *(_WORD *)(v4 + 12) = 0;
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (result)
  {
    do
      v6 = __ldaxr(result);
    while (__stlxr(v6 + 1, result));
  }
  *(_QWORD *)v4 = off_1E33D6DB0;
  *(_QWORD *)(v4 + 16) = result;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = (_DWORD *)*((_QWORD *)this + 441);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v4 + 32) = v7;
  *a2 = v4;
  return result;
}

WebCore::MediaElementSession *WebCore::MediaElementSession::MediaElementSession(WebCore::MediaElementSession *this, WebCore::HTMLMediaElement *a2)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;

  WebCore::PlatformMediaSessionManager::sharedManager(this);
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E3407888;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E3407950;
  *((_QWORD *)this + 4) = (char *)a2 + 144;
  *((_QWORD *)this + 5) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)((char *)this + 70) = 0;
  *(_QWORD *)this = off_1E33D6470;
  *((_QWORD *)this + 3) = &unk_1E33D6538;
  *((_QWORD *)this + 10) = a2;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_WORD *)this + 88) = 0;
  *((_QWORD *)this + 23) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 28) = v5;
  *((_QWORD *)this + 23) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33D6F50;
  v7[1] = WebCore::MediaElementSession::targetAvailabilityChangedTimerFired;
  v7[2] = 0;
  v7[3] = this;
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 264) = 0;
  *(_DWORD *)((char *)this + 247) = 0;
  *((_QWORD *)this + 29) = v7;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 34) = off_1E3407128;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  v8 = *(unsigned int **)(StatusReg + 736);
  if (!v8)
    v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 39) = v8;
  *((_QWORD *)this + 34) = off_1E31F7378;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E33D6F50;
  v10[1] = WebCore::MediaElementSession::mainContentCheckTimerFired;
  v10[2] = 0;
  v10[3] = this;
  *((_QWORD *)this + 40) = v10;
  *((_QWORD *)this + 41) = off_1E3407128;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 46) = v11;
  *((_QWORD *)this + 41) = off_1E31F7378;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = off_1E33D6F50;
  v13[1] = WebCore::MediaElementSession::clientDataBufferingTimerFired;
  v13[2] = 0;
  v13[3] = this;
  *((_QWORD *)this + 47) = v13;
  *((_BYTE *)this + 392) = 0;
  *((_QWORD *)this + 50) = 0;
  return this;
}

uint64_t WebCore::MediaElementSession::targetAvailabilityChangedTimerFired(WebCore::MediaElementSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 136))(*((_QWORD *)this + 4));
}

void WebCore::MediaElementSession::mainContentCheckTimerFired(WebCore::MediaElementSession *this)
{
  WebCore *v2;
  uint64_t v3;
  int v4;
  int isElementMainContentForPurposesOfAutoplay;

  if ((*((_BYTE *)this + 89) & 0x10) != 0)
  {
    v2 = (WebCore *)*((_QWORD *)this + 10);
    v3 = *(_QWORD *)(*((_QWORD *)v2 + 5) + 8);
    if (!*(_BYTE *)(v3 + 467) && !*(_BYTE *)(v3 + 468))
    {
      v4 = *((unsigned __int8 *)this + 264);
      isElementMainContentForPurposesOfAutoplay = WebCore::isElementMainContentForPurposesOfAutoplay(v2, (const WebCore::HTMLMediaElement *)1);
      *((_BYTE *)this + 264) = isElementMainContentForPurposesOfAutoplay;
      if (v4 != isElementMainContentForPurposesOfAutoplay)
        WebCore::HTMLMediaElement::updateShouldPlay(*((WebCore::HTMLMediaElement **)this + 10));
    }
  }
}

WebCore::PlatformMediaSessionManager *WebCore::MediaElementSession::clientDataBufferingTimerFired(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WebCore::PlatformMediaSessionManager *v6;
  uint64_t v7;
  WebCore::PlatformMediaSessionManager *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v23 = "MediaElementSession";
  v24 = 20;
  v25 = "clientDataBufferingTimerFired";
  v26 = v3;
  (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 1264))(*((_QWORD *)this + 10));
  if (*(_BYTE *)(v2 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v23, "visible = ");
  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::MediaElementSession *)((char *)this + 328));
  }
  v4 = *((_QWORD *)this + 10);
  v5 = WebCore::MediaElementSession::preferredBufferingPolicy(this);
  v6 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v4, v5);
  v7 = WebCore::PlatformMediaSessionManager::sharedManager(v6);
  result = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 192))(v7);
  if (*((_BYTE *)this + 48) == 2)
  {
    v9 = *((_QWORD *)this + 10);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 1992);
    result = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1264))(v9);
    if ((!(_DWORD)result || !v10 || !*(_QWORD *)(v10 + 56)) && !*(_DWORD *)(v9 + 1080))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
      v12 = *(_QWORD *)(v11 + 528);
      if (!v12
        || (v13 = *(_QWORD *)(v12 + 8)) == 0
        || (v14 = *(_QWORD *)(v13 + 24)) == 0
        || (v15 = *(_QWORD *)(v14 + 8)) == 0
        || *(_BYTE *)(v11 + 3437)
        || (*(_WORD *)(v15 + 658) & 4) == 0)
      {
        v16 = *(_QWORD *)(v9 + 1136);
        if (!v16 || !*(_BYTE *)(v16 + 225))
        {
          v17 = WebCore::PlatformMediaSessionManager::sharedManager(result);
          result = (WebCore::PlatformMediaSessionManager *)(***((uint64_t (****)(_QWORD))this + 4))(*((_QWORD *)this + 4));
          if ((*(_DWORD *)(v17 + 4 * result + 8) & 4) != 0)
          {
            v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
            v19 = (*(uint64_t (**)(WebCore::MediaElementSession *))(*(_QWORD *)this + 144))(this);
            v21 = v20;
            v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
            v23 = (const char *)v19;
            v24 = v21;
            v25 = "pauseSession";
            v26 = v22;
            if (*(_BYTE *)(v18 + 12))
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v23);
            if (*((_BYTE *)this + 48) == 4)
              *((_BYTE *)this + 49) = 3;
            return (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4)
                                                                                             + 40))(*((_QWORD *)this + 4));
          }
        }
      }
    }
  }
  return result;
}

void WebCore::MediaElementSession::~MediaElementSession(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 41) = off_1E31F7378;
  v3 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase((WebCore::MediaElementSession *)((char *)this + 328));
  *((_QWORD *)this + 34) = off_1E31F7378;
  v4 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::MediaElementSession *)((char *)this + 272));
  v5 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *((_QWORD *)this + 23) = off_1E31F7378;
  v6 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::TimerBase::~TimerBase((WebCore::MediaElementSession *)((char *)this + 184));
  if (*((_BYTE *)this + 168))
  {
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  WebCore::PlatformMediaSession::~PlatformMediaSession(this, v7);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaElementSession::~MediaElementSession(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::MediaElementSession::~MediaElementSession(WebCore::MediaElementSession *this)
{
  WebCore::MediaElementSession::~MediaElementSession((WebCore::MediaElementSession *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaElementSession::~MediaElementSession((WebCore::MediaElementSession *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

WebCore::MediaSession *WebCore::MediaElementSession::ensureIsObservingMediaSession(WebCore::MediaElementSession *this)
{
  WebCore::MediaSession *result;
  WebCore::NavigatorMediaSession *v3;
  WebCore::Navigator *v4;
  WebCore::MediaSession *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::NavigatorMediaSession *v13[3];

  result = *(WebCore::MediaSession **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 696);
  if (result)
  {
    WebCore::LocalDOMWindow::protectedNavigator(result, v13);
    v3 = v13[0];
    result = WebCore::NavigatorMediaSession::mediaSession(v13[0], v4);
    v5 = result;
    if (*((_DWORD *)v3 + 4) == 1)
      result = (WebCore::MediaSession *)(*(uint64_t (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v3 + 16))(v3);
    else
      --*((_DWORD *)v3 + 4);
    if (!*((_QWORD *)this + 50))
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      ++*((_DWORD *)v5 + 6);
      *v6 = off_1E33D6F00;
      v6[1] = 0;
      v7 = *((_QWORD *)this + 2);
      if (v7)
        goto LABEL_21;
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = this;
      v9 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v7;
      if (!v9)
        goto LABEL_21;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
      v7 = *((_QWORD *)this + 2);
      if (v7)
      {
LABEL_21:
        do
          v12 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v12 + 1, (unsigned int *)v7));
      }
      v6[2] = v7;
      ++*((_DWORD *)v5 + 6);
      v6[3] = v5;
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v5 + 144, v6, (uint64_t)v13);
      if (*((_DWORD *)v5 + 6) == 1)
        (*(void (**)(WebCore::MediaSession *))(*(_QWORD *)v5 + 16))(v5);
      else
        --*((_DWORD *)v5 + 6);
      result = (WebCore::MediaSession *)*((_QWORD *)this + 50);
      *((_QWORD *)this + 50) = v6;
      if (result)
        return (WebCore::MediaSession *)(*(uint64_t (**)(WebCore::MediaSession *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::MediaElementSession::clientWillBeginAutoplaying(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  int v3;
  WebCore::PlatformMediaSessionManager *v4;
  uint64_t v5;

  WebCore::PlatformMediaSession::clientWillBeginAutoplaying((uint64_t)this);
  *((_BYTE *)this + 177) = 0;
  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::MediaElementSession *)((char *)this + 328));
  }
  v2 = *((_QWORD *)this + 10);
  v3 = WebCore::MediaElementSession::preferredBufferingPolicy(this);
  v4 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v2, v3);
  v5 = WebCore::PlatformMediaSessionManager::sharedManager(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 192))(v5);
}

uint64_t WebCore::MediaElementSession::clientWillBeginPlayback(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  WebCore::PlatformMediaSessionManager *v5;
  uint64_t v6;
  _DWORD *v7;
  WebCore::NavigatorMediaSession *v8;
  WebCore::Navigator *v9;
  WebCore::MediaSession *v10;
  WebCore::NavigatorMediaSession *v12;

  v2 = WebCore::PlatformMediaSession::clientWillBeginPlayback(this);
  if ((_DWORD)v2)
  {
    *((_BYTE *)this + 177) = 0;
    if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::MediaElementSession *)((char *)this + 328));
    }
    v3 = *((_QWORD *)this + 10);
    v4 = WebCore::MediaElementSession::preferredBufferingPolicy(this);
    v5 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v3, v4);
    v6 = WebCore::PlatformMediaSessionManager::sharedManager(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 192))(v6);
    v7 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 696);
    if (v7)
    {
      WebCore::LocalDOMWindow::protectedNavigator(v7, &v12);
      v8 = v12;
      v10 = WebCore::NavigatorMediaSession::mediaSession(v12, v9);
      if (*((_DWORD *)v8 + 4) == 1)
        (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v8 + 16))(v8);
      else
        --*((_DWORD *)v8 + 4);
      WebCore::MediaSession::willBeginPlayback(v10);
    }
  }
  return v2;
}

uint64_t WebCore::MediaElementSession::clientWillPausePlayback(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  WebCore::NavigatorMediaSession *v3;
  WebCore::NavigatorMediaSession *v4;
  WebCore::NavigatorMediaSession *v5;
  WebCore::NavigatorMediaSession *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::PlatformMediaSessionManager *v10;
  uint64_t v11;
  _DWORD *v12;
  WebCore::NavigatorMediaSession *v13;
  WebCore::Navigator *v14;
  WebCore::MediaSession *v15;
  WebCore::NavigatorMediaSession *v17[4];

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v3 = (WebCore::NavigatorMediaSession *)(*(uint64_t (**)(WebCore::MediaElementSession *))(*(_QWORD *)this + 144))(this);
  v5 = v4;
  v6 = (WebCore::NavigatorMediaSession *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v17[0] = v3;
  v17[1] = v5;
  v17[2] = (WebCore::NavigatorMediaSession *)"clientWillPausePlayback";
  v17[3] = v6;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17);
  v7 = WebCore::PlatformMediaSession::processClientWillPausePlayback((uint64_t)this, 0);
  if ((_DWORD)v7)
  {
    if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::MediaElementSession *)((char *)this + 328));
    }
    v8 = *((_QWORD *)this + 10);
    v9 = WebCore::MediaElementSession::preferredBufferingPolicy(this);
    v10 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v8, v9);
    v11 = WebCore::PlatformMediaSessionManager::sharedManager(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 192))(v11);
    v12 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 696);
    if (v12)
    {
      WebCore::LocalDOMWindow::protectedNavigator(v12, v17);
      v13 = v17[0];
      v15 = WebCore::NavigatorMediaSession::mediaSession(v17[0], v14);
      if (*((_DWORD *)v13 + 4) == 1)
        (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v13 + 16))(v13);
      else
        --*((_DWORD *)v13 + 4);
      WebCore::MediaSession::willPausePlayback(v15);
    }
  }
  return v7;
}

void WebCore::MediaElementSession::visibilityChanged(WebCore::MediaElementSession *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)this + 44) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 328, v2 + 0.1);
  }
  v3 = *((_QWORD *)this + 10);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 1992);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 1264))(v3))
    v5 = v4 == 0;
  else
    v5 = 1;
  if ((v5 || !*(_QWORD *)(v4 + 56)) && !*(_DWORD *)(v3 + 1080))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
    v10 = *(_QWORD *)(v9 + 528);
    if (!v10
      || (v11 = *(_QWORD *)(v10 + 8)) == 0
      || (v12 = *(_QWORD *)(v11 + 24)) == 0
      || (v13 = *(_QWORD *)(v12 + 8)) == 0
      || *(_BYTE *)(v9 + 3437)
      || (*(_WORD *)(v13 + 658) & 4) == 0)
    {
      v14 = *(_QWORD *)(v3 + 1136);
      if (!v14 || !*(_BYTE *)(v14 + 225))
      {
        v8 = 1;
LABEL_26:
        *((_BYTE *)this + 176) = v8;
        v6 = *((_QWORD *)this + 10);
        goto LABEL_28;
      }
    }
  }
  v6 = *((_QWORD *)this + 10);
  if ((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = 0;
    goto LABEL_28;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA2364);
  }
  if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA2384);
  }
  v8 = 0;
  if ((*(_WORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x4C) & 6) == 2)
    goto LABEL_26;
LABEL_28:
  if ((*(_DWORD *)(v6 + 1265) & 2) == 0
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 1280))(v6)
    || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 1472))(*((_QWORD *)this + 10)) & 1) != 0
    || (*(double (**)(_QWORD))(**((_QWORD **)this + 10) + 1456))(*((_QWORD *)this + 10)) == 0.0)
  {
    v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
    if (v8)
    {
      v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
      v21 = "MediaElementSession";
      v22 = 20;
      v23 = "visibilityChanged";
      v24 = v18;
      if (*(_BYTE *)(v17 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v21, "Suspending silent playback after page visibility: hidden");
      goto LABEL_39;
    }
    v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
    v21 = "MediaElementSession";
    v22 = 20;
    v23 = "visibilityChanged";
    v24 = v19;
    if (*(_BYTE *)(v17 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [56]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v21, "Resuming silent playback after page visibility: showing");
  }
  else
  {
    if ((*((_BYTE *)this + 90) & 1) == 0)
      return;
    v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
    if (v8)
    {
      v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
      v21 = "MediaElementSession";
      v22 = 20;
      v23 = "visibilityChanged";
      v24 = v16;
      if (*(_BYTE *)(v15 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v21, "Suspending audible playback after page visibility: hidden");
LABEL_39:
      WebCore::PlatformMediaSession::beginInterruption((uint64_t)this, 2);
      return;
    }
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
    v21 = "MediaElementSession";
    v22 = 20;
    v23 = "visibilityChanged";
    v24 = v20;
    if (*(_BYTE *)(v15 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v21, "Resuming audible playback after page visibility: showing");
  }
  WebCore::PlatformMediaSession::endInterruption((uint64_t)this, 1u);
}

const char *WebCore::MediaElementSession::logClassName(WebCore::MediaElementSession *this)
{
  return "MediaElementSession";
}

uint64_t WebCore::MediaElementSession::isVisibleInViewportChanged(WebCore::MediaElementSession *this)
{
  double v2;
  WebCore::PlatformMediaSessionManager *v3;
  uint64_t v5;

  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)this + 44) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 328, v2 + 0.1);
  }
  v3 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 1800))(*((_QWORD *)this + 10));
  if ((v3 & 1) != 0)
    goto LABEL_11;
  if ((*(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA2474);
    }
    if ((*(_BYTE *)((*(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA2494);
    }
    if ((*(_WORD *)((*(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL) + 0x4C) & 6) == 2)
LABEL_11:
      *((_BYTE *)this + 176) = 0;
  }
  v5 = WebCore::PlatformMediaSessionManager::sharedManager(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

uint64_t WebCore::MediaElementSession::preferredBufferingPolicy(WebCore::MediaElementSession *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4)) & 1) != 0)
    return 2;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 528);
  if (!v3)
    return 1;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 1;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    return 1;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 1;
  v7 = (*(_DWORD *)v6)++;
  v8 = *(unsigned __int8 *)(v6 + 1096);
  if (v7)
  {
    *(_DWORD *)v6 = v7;
    if (v8)
      return 1;
  }
  else
  {
    WebCore::Page::~Page(v6);
    WTF::fastFree(v9, v10);
    if (v8)
      return 1;
  }
  if (*((_BYTE *)this + 48) != 2
    && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 128))(*((_QWORD *)this + 4)) & 1) == 0
    && !*((_BYTE *)this + 248))
  {
    if (*((_BYTE *)this + 176) || *((_BYTE *)this + 177))
      return 2;
    v11 = *((_QWORD *)this + 10);
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 1992);
    if ((!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 1264))(v11) || !v12 || !*(_QWORD *)(v12 + 56))
      && !*(_DWORD *)(v11 + 1080))
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
      v14 = *(_QWORD *)(v13 + 528);
      if (!v14
        || (v15 = *(_QWORD *)(v14 + 8)) == 0
        || (v16 = *(_QWORD *)(v15 + 24)) == 0
        || (v17 = *(_QWORD *)(v16 + 8)) == 0
        || *(_BYTE *)(v13 + 3437)
        || (*(_WORD *)(v17 + 658) & 4) == 0)
      {
        v18 = *(_QWORD *)(v11 + 1136);
        if (!v18 || !*(_BYTE *)(v18 + 225))
          return 2;
      }
    }
  }
  return 0;
}

uint64_t WebCore::MediaElementSession::addBehaviorRestriction(uint64_t this, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  double v9;
  WTF::StringImpl *v10;
  _QWORD v11[4];

  v3 = this;
  v4 = *(_DWORD *)(this + 88);
  if ((a2 & ~v4) != 0)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 32) + 248))(*(_QWORD *)(this + 32));
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 256))(*(_QWORD *)(v3 + 32));
    v11[0] = "MediaElementSession";
    v11[1] = 20;
    v11[2] = "addBehaviorRestriction";
    v11[3] = v6;
    WebCore::restrictionNames((WebCore *)&v10, a2 & ~(unsigned __int16)*(_DWORD *)(v3 + 88));
    if (*(_BYTE *)(v5 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v11, "adding ", (uint64_t *)&v10);
    }
    this = (uint64_t)v10;
    v10 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      else
        *(_DWORD *)this -= 2;
    }
    v4 = *(_DWORD *)(v3 + 88);
  }
  *(_DWORD *)(v3 + 88) = v4 | a2;
  if ((a2 & 0x1000) != 0)
  {
    *(_QWORD *)(v3 + 296) = 0x3FD0000000000000;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    return WebCore::TimerBase::setNextFireTime(v3 + 272, v9 + 0.25);
  }
  return this;
}

WTF::StringImpl *WebCore::restrictionNames(WebCore *this, __int16 a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  if ((a2 & 1) != 0)
  {
    WTF::StringBuilder::append();
    if ((a2 & 2) == 0)
    {
LABEL_3:
      if ((a2 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  WTF::StringBuilder::append();
  if ((a2 & 0x20) == 0)
  {
LABEL_4:
    if ((a2 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  WTF::StringBuilder::append();
  if ((a2 & 4) == 0)
  {
LABEL_5:
    if ((a2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  WTF::StringBuilder::append();
  if ((a2 & 8) == 0)
  {
LABEL_6:
    if ((a2 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  WTF::StringBuilder::append();
  if ((a2 & 0x10) == 0)
  {
LABEL_7:
    if ((a2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  WTF::StringBuilder::append();
  if ((a2 & 0x40) == 0)
  {
LABEL_8:
    if ((a2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  WTF::StringBuilder::append();
  if ((a2 & 0x80) == 0)
  {
LABEL_9:
    if ((a2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  WTF::StringBuilder::append();
  if ((a2 & 0x100) == 0)
  {
LABEL_10:
    if ((a2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  WTF::StringBuilder::append();
  if ((a2 & 0x400) == 0)
  {
LABEL_11:
    if ((a2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  WTF::StringBuilder::append();
  if ((a2 & 0x800) == 0)
  {
LABEL_12:
    if ((a2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  WTF::StringBuilder::append();
  if ((a2 & 0x1000) == 0)
  {
LABEL_13:
    if ((a2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  WTF::StringBuilder::append();
  if ((a2 & 0x2000) == 0)
  {
LABEL_14:
    if ((a2 & 0x4000) == 0)
      goto LABEL_15;
LABEL_30:
    WTF::StringBuilder::append();
    if ((a2 & 0x8000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_29:
  WTF::StringBuilder::append();
  if ((a2 & 0x4000) != 0)
    goto LABEL_30;
LABEL_15:
  if (a2 < 0)
LABEL_31:
    WTF::StringBuilder::append();
LABEL_32:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8);
  v5 = v8;
  if (v8)
    *(_DWORD *)v8 += 2;
  *(_QWORD *)this = v5;
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::MonotonicTime *WebCore::MediaElementSession::removeBehaviorRestriction(WTF::MonotonicTime *this, int a2)
{
  WTF::MonotonicTime *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  _QWORD v14[4];

  v3 = this;
  if ((a2 & 0x2000) != 0)
  {
    this = (WTF::MonotonicTime *)WTF::MonotonicTime::now(this);
    *((_QWORD *)v3 + 32) = v4;
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 10) + 40) + 8) + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
            *(_BYTE *)(v8 + 1089) = 1;
        }
      }
    }
  }
  if ((*((_DWORD *)v3 + 22) & a2) != 0)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 4) + 248))(*((_QWORD *)v3 + 4));
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 4) + 256))(*((_QWORD *)v3 + 4));
    v14[0] = "MediaElementSession";
    v14[1] = 20;
    v14[2] = "removeBehaviorRestriction";
    v14[3] = v10;
    WebCore::restrictionNames((WebCore *)&v13, *((_DWORD *)v3 + 22) & a2);
    if (*(_BYTE *)(v9 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v14, "removed ", (uint64_t *)&v13);
    }
    this = v13;
    v13 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::MonotonicTime *)WTF::StringImpl::destroy(this, v11);
      else
        *(_DWORD *)this -= 2;
    }
    *((_DWORD *)v3 + 22) &= ~a2;
  }
  return this;
}

void WebCore::MediaElementSession::playbackStateChangePermitted(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  WebCore::Quirks *v66;
  _BYTE *v67;
  WebCore::Quirks *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  WTF *v73;
  void *v74;
  int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  NSObject *v89;
  uint64_t v90;
  char *v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  int v99;
  int isElementMainContentForPurposesOfAutoplay;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  NSObject *v116;
  uint64_t v117;
  char *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  WTF::Logger *v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::Logger *v134;
  uint64_t v135;
  WTF::StringImpl **v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  WTF::Logger *v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  WTF::Logger *v149;
  uint64_t v150;
  WTF::StringImpl **v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  int v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD v174[3];
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  WTF::Logger *v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  __int128 buf;
  const char *v185;
  WTF::StringImpl *v186;
  int v187;
  WTF::StringImpl *v188;
  uint64_t v189;

  v174[0] = a2;
  v189 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
  *(_QWORD *)&v174[1] = "MediaElementSession";
  v175 = 20;
  v176 = "playbackStateChangePermitted";
  v177 = v6;
  if (!*(_BYTE *)(v5 + 12))
    goto LABEL_90;
  if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
    goto LABEL_90;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v174[1]);
  WTF::String::String((WTF::String *)&v181, "state = ");
  WTF::String::number((WTF::String *)v174[0]);
  if (v182)
  {
    v9 = *((_DWORD *)v182 + 1);
    if (v181)
      goto LABEL_9;
LABEL_169:
    v10 = 0;
    if (v178)
      goto LABEL_10;
LABEL_170:
    v11 = 0;
    goto LABEL_11;
  }
  v9 = 0;
  if (!v181)
    goto LABEL_169;
LABEL_9:
  v10 = *((_DWORD *)v181 + 1);
  if (!v178)
    goto LABEL_170;
LABEL_10:
  v11 = *((_DWORD *)v178 + 1);
LABEL_11:
  if ((v11 | v10) < 0
    || ((v12 = __OFADD__(v10, v11), v13 = v10 + v11, !v12) ? (v14 = 0) : (v14 = 1),
        v9 < 0 || (v14 & 1) != 0 || (v15 = (v9 + v13), __OFADD__(v9, v13))))
  {
    v183 = 0;
    goto LABEL_365;
  }
  if (!v182 || (*((_BYTE *)v182 + 16) & 4) != 0)
  {
    if (v181)
    {
      v17 = *((_DWORD *)v181 + 4);
      v16 = (v17 >> 2) & 1;
      if (!v178 || (v17 & 4) == 0)
        goto LABEL_25;
    }
    else if (!v178)
    {
      v16 = 1;
      goto LABEL_25;
    }
    v16 = (*((unsigned __int8 *)v178 + 16) >> 2) & 1;
  }
  else
  {
    v16 = 0;
  }
LABEL_25:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v15, v16, v182, (uint64_t)v181, (uint64_t)v178, &v183);
  if (!v183)
    goto LABEL_365;
  v19 = v178;
  v178 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v181;
  v181 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v182;
  v182 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = qword_1ECE7C4A0;
  v23 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v24 = v179 ? (char *)v179 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v23 = (uint64_t)v179;
    v179 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v7);
      else
        --*(_DWORD *)v23;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v172 = a3;
          v28 = WTF::Logger::observers((WTF::Logger *)v23);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v174[1]);
              LODWORD(v185) = 0;
              WTF::String::String((WTF::String *)&v186, "state = ");
              v187 = 0;
              WTF::String::number((WTF::String *)v174[0]);
              v179 = 0;
              v180 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v180) = 3;
              v179 = v33;
              v34 = HIDWORD(v180);
              *((_DWORD *)v33 + 4 * HIDWORD(v180)) = buf;
              v35 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = (_DWORD)v185;
              v36 = v186;
              if (v186)
                *(_DWORD *)v186 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v187;
              v37 = v188;
              if (v188)
                *(_DWORD *)v188 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              HIDWORD(v180) = v34 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, &WebCore::LogMedia, 3, &v179);
              v38 = v179;
              if (HIDWORD(v180))
              {
                v39 = 16 * HIDWORD(v180);
                v40 = (WTF::StringImpl **)((char *)v179 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v7);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v179;
              }
              if (v38)
              {
                v179 = 0;
                LODWORD(v180) = 0;
                WTF::fastFree(v38, v7);
              }
              v42 = v188;
              v188 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v7);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v186;
              v186 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v7);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v7);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v45 = __ldxr(v25);
          if (v45 == 1)
          {
            a3 = v172;
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
            a3 = v172;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v46 = v183;
  v183 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v46 -= 2;
  }
LABEL_90:
  v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 8);
  if (*(_BYTE *)(v47 + 467) || *(_BYTE *)(v47 + 468))
  {
    v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v49 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    *(_QWORD *)&buf = "MediaElementSession";
    *((_QWORD *)&buf + 1) = 20;
    v185 = "playbackStateChangePermitted";
    v186 = v49;
    if (*(_BYTE *)(v48 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "Returning FALSE because element is suspended");
    *(_DWORD *)a3 = 3;
    *(_BYTE *)(a3 + 4) = 1;
    return;
  }
  *(_DWORD *)(v47 + 24) += 2;
  v50 = *(_QWORD *)(v47 + 528);
  if (!v50 || (v51 = *(_QWORD *)(v50 + 8)) == 0 || (v52 = *(_QWORD *)(v51 + 24)) == 0)
  {
    v53 = 0;
    goto LABEL_103;
  }
  v53 = *(_QWORD *)(v52 + 8);
  if (!v53)
  {
LABEL_103:
    v54 = 1;
LABEL_104:
    v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v56 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    *(_QWORD *)&buf = "MediaElementSession";
    *((_QWORD *)&buf + 1) = 20;
    v185 = "playbackStateChangePermitted";
    v186 = v56;
    if (*(_BYTE *)(v55 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "Returning FALSE because media playback is suspended");
    *(_DWORD *)a3 = 2;
    *(_BYTE *)(a3 + 4) = 1;
    if ((v54 & 1) != 0)
      goto LABEL_109;
    goto LABEL_107;
  }
  ++*(_DWORD *)v53;
  if (*(_BYTE *)(v53 + 1095))
  {
    v54 = 0;
    goto LABEL_104;
  }
  if ((*(_WORD *)(v47 + 3358) & 0x10) != 0)
  {
    v57 = *(_QWORD *)(v51 + 120);
    if (!v57 || !*(_QWORD *)(v57 + 8))
      goto LABEL_223;
  }
  if (WebCore::MediaElementSession::requiresFullscreenForVideoPlayback((WebCore::MediaElementSession *)a1)
    && (*(_BYTE *)(a1 + 88) & 4) != 0
    && !WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40)
                                                                               + 8)))
  {
    v95 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v96 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    *(_QWORD *)&buf = "MediaElementSession";
    *((_QWORD *)&buf + 1) = 20;
    v185 = "fullscreenPermitted";
    v186 = v96;
    if (*(_BYTE *)(v95 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "returning FALSE");
    v97 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v98 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    *(_QWORD *)&buf = "MediaElementSession";
    *((_QWORD *)&buf + 1) = 20;
    v185 = "playbackStateChangePermitted";
    v186 = v98;
    if (*(_BYTE *)(v97 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [50]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "Returning FALSE because of fullscreen restriction");
    *(_DWORD *)a3 = 1;
    *(_BYTE *)(a3 + 4) = 1;
    goto LABEL_107;
  }
  v58 = *(_QWORD *)(a1 + 80);
  if ((*(_BYTE *)(a1 + 89) & 0x10) != 0)
  {
    v59 = *(_QWORD *)(*(_QWORD *)(v58 + 40) + 8);
    if (!*(_BYTE *)(v59 + 467) && !*(_BYTE *)(v59 + 468))
    {
      v99 = *(unsigned __int8 *)(a1 + 264);
      isElementMainContentForPurposesOfAutoplay = WebCore::isElementMainContentForPurposesOfAutoplay((WebCore *)v58, (const WebCore::HTMLMediaElement *)1);
      *(_BYTE *)(a1 + 264) = isElementMainContentForPurposesOfAutoplay;
      if (v99 != isElementMainContentForPurposesOfAutoplay)
      {
        WebCore::HTMLMediaElement::updateShouldPlay(*(WebCore::HTMLMediaElement **)(a1 + 80));
        v99 = *(unsigned __int8 *)(a1 + 264);
      }
      if (v99)
        goto LABEL_223;
      v58 = *(_QWORD *)(a1 + 80);
    }
  }
  if (!*(_BYTE *)(v58 + 1544)
    || *(_DWORD *)(v58 + 1536)
    || (v75 = *(_DWORD *)(v47 + 3264), (v75 & 0x36C7800) == 0) && (v75 & 1) == 0)
  {
    if (*(_BYTE *)(v47 + 3362) || *(_BYTE *)(v47 + 3405))
    {
      v165 = *(_QWORD *)(v47 + 528);
      i = v47;
      if (v165)
      {
        v166 = *(_QWORD *)(v165 + 8);
        i = v47;
        if (v166)
        {
          v167 = *(_QWORD *)(v166 + 120);
          i = v47;
          if (v167)
          {
            v168 = *(_QWORD *)(v167 + 8);
            for (i = v47; v168; v168 = *(_QWORD *)(v171 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v168 + 40) + 8);
              v169 = *(_QWORD *)(i + 528);
              if (!v169)
                break;
              v170 = *(_QWORD *)(v169 + 8);
              if (!v170)
                break;
              v171 = *(_QWORD *)(v170 + 120);
              if (!v171)
                break;
            }
          }
        }
      }
    }
    else
    {
      v60 = *(_QWORD *)(v47 + 528);
      i = v47;
      if (v60)
      {
        v62 = *(_QWORD *)(v60 + 8);
        i = v47;
        if (v62)
        {
          v63 = *(_QWORD *)(*(_QWORD *)(v62 + 128) + 8);
          v64 = v63 && *(_BYTE *)(v63 + 144) == 0;
          i = v47;
          if (v64)
          {
            v65 = *(_QWORD *)(v63 + 296);
            i = v47;
            if (v65)
              i = v65;
          }
        }
      }
    }
    *(_DWORD *)(i + 24) += 2;
    v66 = *(WebCore::Quirks **)(i + 688);
    if (!v66)
      v66 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)i);
    if (WebCore::Quirks::requiresUserGestureToPauseInPictureInPicture(v66))
    {
      v67 = *(_BYTE **)(a1 + 80);
      if ((v67[1080] & 2) != 0)
      {
        v76 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v67 + 1384))(v67);
        if (v174[0] == 1
          && (v76 & 1) == 0
          && !WebCore::Document::processingUserGestureForMedia((WebCore::Document *)v47))
        {
          v77 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
          v78 = a1;
          v79 = v77;
          v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v78 + 32) + 256))(*(_QWORD *)(v78 + 32));
          *(_QWORD *)&v174[1] = "MediaElementSession";
          v175 = 20;
          v176 = "playbackStateChangePermitted";
          v177 = v80;
          if (*(_BYTE *)(v79 + 12))
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v174[1]);
            WTF::String::String((WTF::String *)&v181, "Returning FALSE because a quirk requires a user gesture to pause while in Picture-in-Picture");
            if (v182)
            {
              v81 = *((_DWORD *)v182 + 1);
              if (v181)
              {
LABEL_185:
                v82 = *((_DWORD *)v181 + 1);
LABEL_186:
                if ((v82 | v81) < 0 || (v83 = (v81 + v82), __OFADD__(v81, v82)))
                {
                  v183 = 0;
                  goto LABEL_365;
                }
                if (v182)
                {
                  v84 = *((_DWORD *)v182 + 4);
                  v85 = (v84 >> 2) & 1;
                  if (v181 && (v84 & 4) != 0)
                    goto LABEL_191;
                }
                else
                {
                  if (v181)
                  {
LABEL_191:
                    v85 = (*((unsigned __int8 *)v181 + 16) >> 2) & 1;
                    goto LABEL_192;
                  }
                  v85 = 1;
                }
LABEL_192:
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v83, v85, (uint64_t)v182, (uint64_t)v181, &v183);
                if (v183)
                {
                  v87 = v181;
                  v181 = 0;
                  if (v87)
                  {
                    if (*(_DWORD *)v87 == 2)
                      WTF::StringImpl::destroy(v87, v86);
                    else
                      *(_DWORD *)v87 -= 2;
                  }
                  v173 = a3;
                  v88 = v182;
                  v182 = 0;
                  if (v88)
                  {
                    if (*(_DWORD *)v88 == 2)
                      WTF::StringImpl::destroy(v88, v86);
                    else
                      *(_DWORD *)v88 -= 2;
                  }
                  v89 = qword_1ECE7C4A0;
                  v90 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v90)
                  {
                    WTF::String::utf8();
                    v91 = v179 ? (char *)v179 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v91;
                    _os_log_impl(&dword_1940B8000, v89, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v90 = (uint64_t)v179;
                    v179 = 0;
                    if (v90)
                    {
                      if (*(_DWORD *)v90 == 1)
                        v90 = WTF::fastFree((WTF *)v90, v7);
                      else
                        --*(_DWORD *)v90;
                    }
                  }
                  a3 = v173;
                  if (WebCore::LogMedia)
                  {
                    v92 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v93 = *v92;
                      if ((v93 & 1) != 0)
                        break;
                      v94 = __ldaxr(v92);
                      if (v94 == v93)
                      {
                        if (!__stxr(v93 | 1, v92))
                        {
                          v140 = WTF::Logger::observers((WTF::Logger *)v90);
                          v141 = *(unsigned int *)(v140 + 12);
                          if ((_DWORD)v141)
                          {
                            v142 = *(uint64_t **)v140;
                            v143 = *(_QWORD *)v140 + 8 * v141;
                            do
                            {
                              v144 = *v142;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v174[1]);
                              LODWORD(v185) = 0;
                              WTF::String::String((WTF::String *)&v186, "Returning FALSE because a quirk requires a user gesture to pause while in Picture-in-Picture");
                              v179 = 0;
                              v180 = 0;
                              v145 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                              LODWORD(v180) = 2;
                              v179 = v145;
                              v146 = HIDWORD(v180);
                              *((_DWORD *)v145 + 4 * HIDWORD(v180)) = buf;
                              v147 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v145 + 2 * v146 + 1) = v147;
                              *((_DWORD *)v145 + 4 * (v146 + 1)) = (_DWORD)v185;
                              v148 = v186;
                              if (v186)
                                *(_DWORD *)v186 += 2;
                              *((_QWORD *)v145 + 2 * (v146 + 1) + 1) = v148;
                              HIDWORD(v180) = v146 + 2;
                              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v144 + 16))(v144, &WebCore::LogMedia, 0, &v179);
                              v149 = v179;
                              if (HIDWORD(v180))
                              {
                                v150 = 16 * HIDWORD(v180);
                                v151 = (WTF::StringImpl **)((char *)v179 + 8);
                                do
                                {
                                  v152 = *v151;
                                  *v151 = 0;
                                  if (v152)
                                  {
                                    if (*(_DWORD *)v152 == 2)
                                      WTF::StringImpl::destroy(v152, (WTF::StringImpl *)v7);
                                    else
                                      *(_DWORD *)v152 -= 2;
                                  }
                                  v151 += 2;
                                  v150 -= 16;
                                }
                                while (v150);
                                v149 = v179;
                              }
                              if (v149)
                              {
                                v179 = 0;
                                LODWORD(v180) = 0;
                                WTF::fastFree(v149, v7);
                              }
                              v153 = v186;
                              v186 = 0;
                              if (v153)
                              {
                                if (*(_DWORD *)v153 == 2)
                                  WTF::StringImpl::destroy(v153, (WTF::StringImpl *)v7);
                                else
                                  *(_DWORD *)v153 -= 2;
                              }
                              v154 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v154)
                              {
                                if (*(_DWORD *)v154 == 2)
                                  WTF::StringImpl::destroy(v154, (WTF::StringImpl *)v7);
                                else
                                  *(_DWORD *)v154 -= 2;
                              }
                              ++v142;
                            }
                            while (v142 != (uint64_t *)v143);
                          }
                          goto LABEL_313;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
LABEL_318:
                  v156 = v183;
                  v183 = 0;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                      WTF::StringImpl::destroy(v156, (WTF::StringImpl *)v7);
                    else
                      *(_DWORD *)v156 -= 2;
                  }
                  goto LABEL_321;
                }
LABEL_365:
                __break(0xC471u);
                JUMPOUT(0x195CA4014);
              }
            }
            else
            {
              v81 = 0;
              if (v181)
                goto LABEL_185;
            }
            v82 = 0;
            goto LABEL_186;
          }
LABEL_321:
          *(_DWORD *)a3 = 0;
          v72 = 1;
LABEL_322:
          *(_BYTE *)(a3 + 4) = v72;
          if (*(_DWORD *)(i + 24) == 2)
          {
            if ((*(_WORD *)(i + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)i, v7);
          }
          else
          {
            *(_DWORD *)(i + 24) -= 2;
          }
          goto LABEL_107;
        }
      }
    }
    if ((*(_BYTE *)(i + 3266) & 2) != 0)
    {
      v68 = *(WebCore::Quirks **)(i + 688);
      if (!v68)
        v68 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)i);
      if (WebCore::Quirks::needsSeekingSupportDisabled(v68))
      {
LABEL_162:
        v72 = 0;
        *(_BYTE *)a3 = 0;
        goto LABEL_322;
      }
    }
    if ((*(_BYTE *)(a1 + 88) & 2) != 0
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1264))(*(_QWORD *)(a1 + 80))
      && !WebCore::Document::processingUserGestureForMedia((WebCore::Document *)v47))
    {
      v101 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v102 = a1;
      v103 = v101;
      v104 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v102 + 32) + 256))(*(_QWORD *)(v102 + 32));
      *(_QWORD *)&buf = "MediaElementSession";
      *((_QWORD *)&buf + 1) = 20;
      v185 = "playbackStateChangePermitted";
      v186 = v104;
      if (!*(_BYTE *)(v103 + 12))
        goto LABEL_321;
      v105 = "Returning FALSE because a user gesture is required for video rate change restriction";
    }
    else
    {
      if ((*(_BYTE *)(a1 + 88) & 0x20) == 0
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1264))(*(_QWORD *)(a1 + 80))
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1280))(*(_QWORD *)(a1 + 80))
        || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1472))(*(_QWORD *)(a1 + 80)) & 1) != 0
        || (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1456))(*(_QWORD *)(a1 + 80)) == 0.0
        || WebCore::Document::processingUserGestureForMedia((WebCore::Document *)v47))
      {
        v69 = a1;
        if ((*(_BYTE *)(a1 + 90) & 1) != 0
          && (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1264))(*(_QWORD *)(a1 + 80))
           || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1280))(*(_QWORD *)(a1 + 80)))
          && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1472))(*(_QWORD *)(a1 + 80)) & 1) == 0
          && (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1456))(*(_QWORD *)(a1 + 80)) != 0.0)
        {
          v70 = *(_QWORD *)(a1 + 80);
          v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v70 + 40) + 8) + 1992);
          if ((!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v70 + 1264))(*(_QWORD *)(v69 + 80))
             || !v71
             || !*(_QWORD *)(v71 + 56))
            && !*(_DWORD *)(v70 + 1080))
          {
            v157 = *(_QWORD *)(*(_QWORD *)(v70 + 40) + 8);
            v158 = *(_QWORD *)(v157 + 528);
            if (!v158
              || (v159 = *(_QWORD *)(v158 + 8)) == 0
              || (v160 = *(_QWORD *)(v159 + 24)) == 0
              || (v161 = *(_QWORD *)(v160 + 8)) == 0
              || *(_BYTE *)(v157 + 3437)
              || (*(_WORD *)(v161 + 658) & 4) == 0)
            {
              v162 = *(_QWORD *)(v70 + 1136);
              if (!v162 || !*(_BYTE *)(v162 + 225))
              {
                v163 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v69 + 32) + 248))(*(_QWORD *)(v69 + 32));
                v164 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v69 + 32) + 256))(*(_QWORD *)(v69 + 32));
                *(_QWORD *)&buf = "MediaElementSession";
                *((_QWORD *)&buf + 1) = 20;
                v185 = "playbackStateChangePermitted";
                v186 = v164;
                if (*(_BYTE *)(v163 + 12))
                  WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "Returning FALSE because page visibility required for audio rate change restriction");
                goto LABEL_321;
              }
            }
          }
        }
        if ((*(_BYTE *)(v69 + 89) & 0x80) == 0
          || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v69 + 80) + 1264))(*(_QWORD *)(v69 + 80))
          || WebCore::Document::processingUserGestureForMedia((WebCore::Document *)v47))
        {
          goto LABEL_162;
        }
        v106 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v69 + 32) + 248))(*(_QWORD *)(v69 + 32));
        v107 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v69 + 32) + 256))(*(_QWORD *)(v69 + 32));
        *(_QWORD *)&v174[1] = "MediaElementSession";
        v175 = 20;
        v176 = "playbackStateChangePermitted";
        v177 = v107;
        if (!*(_BYTE *)(v106 + 12))
          goto LABEL_321;
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v174[1]);
        WTF::String::String((WTF::String *)&v181, "Returning FALSE because of video low power mode restriction");
        if (v182)
        {
          v108 = *((_DWORD *)v182 + 1);
          if (v181)
          {
LABEL_229:
            v109 = *((_DWORD *)v181 + 1);
LABEL_230:
            if ((v109 | v108) < 0 || (v110 = (v108 + v109), __OFADD__(v108, v109)))
            {
              v183 = 0;
              goto LABEL_363;
            }
            if (v182)
            {
              v111 = *((_DWORD *)v182 + 4);
              v112 = (v111 >> 2) & 1;
              if (v181 && (v111 & 4) != 0)
                goto LABEL_235;
            }
            else
            {
              if (v181)
              {
LABEL_235:
                v112 = (*((unsigned __int8 *)v181 + 16) >> 2) & 1;
                goto LABEL_236;
              }
              v112 = 1;
            }
LABEL_236:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v110, v112, (uint64_t)v182, (uint64_t)v181, &v183);
            if (v183)
            {
              v114 = v181;
              v181 = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, v113);
                else
                  *(_DWORD *)v114 -= 2;
              }
              v173 = a3;
              v115 = v182;
              v182 = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                  WTF::StringImpl::destroy(v115, v113);
                else
                  *(_DWORD *)v115 -= 2;
              }
              v116 = qword_1ECE7C4A0;
              v117 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v117)
              {
                WTF::String::utf8();
                v118 = v179 ? (char *)v179 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v118;
                _os_log_impl(&dword_1940B8000, v116, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v117 = (uint64_t)v179;
                v179 = 0;
                if (v117)
                {
                  if (*(_DWORD *)v117 == 1)
                    v117 = WTF::fastFree((WTF *)v117, v7);
                  else
                    --*(_DWORD *)v117;
                }
              }
              a3 = v173;
              if (WebCore::LogMedia)
              {
                v92 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v119 = *v92;
                  if ((v119 & 1) != 0)
                    break;
                  v120 = __ldaxr(v92);
                  if (v120 == v119)
                  {
                    if (!__stxr(v119 | 1, v92))
                    {
                      v125 = WTF::Logger::observers((WTF::Logger *)v117);
                      v126 = *(unsigned int *)(v125 + 12);
                      if ((_DWORD)v126)
                      {
                        v127 = *(uint64_t **)v125;
                        v128 = *(_QWORD *)v125 + 8 * v126;
                        do
                        {
                          v129 = *v127;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v174[1]);
                          LODWORD(v185) = 0;
                          WTF::String::String((WTF::String *)&v186, "Returning FALSE because of video low power mode restriction");
                          v179 = 0;
                          v180 = 0;
                          v130 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                          LODWORD(v180) = 2;
                          v179 = v130;
                          v131 = HIDWORD(v180);
                          *((_DWORD *)v130 + 4 * HIDWORD(v180)) = buf;
                          v132 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v130 + 2 * v131 + 1) = v132;
                          *((_DWORD *)v130 + 4 * (v131 + 1)) = (_DWORD)v185;
                          v133 = v186;
                          if (v186)
                            *(_DWORD *)v186 += 2;
                          *((_QWORD *)v130 + 2 * (v131 + 1) + 1) = v133;
                          HIDWORD(v180) = v131 + 2;
                          (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v129 + 16))(v129, &WebCore::LogMedia, 0, &v179);
                          v134 = v179;
                          if (HIDWORD(v180))
                          {
                            v135 = 16 * HIDWORD(v180);
                            v136 = (WTF::StringImpl **)((char *)v179 + 8);
                            do
                            {
                              v137 = *v136;
                              *v136 = 0;
                              if (v137)
                              {
                                if (*(_DWORD *)v137 == 2)
                                  WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v7);
                                else
                                  *(_DWORD *)v137 -= 2;
                              }
                              v136 += 2;
                              v135 -= 16;
                            }
                            while (v135);
                            v134 = v179;
                          }
                          if (v134)
                          {
                            v179 = 0;
                            LODWORD(v180) = 0;
                            WTF::fastFree(v134, v7);
                          }
                          v138 = v186;
                          v186 = 0;
                          if (v138)
                          {
                            if (*(_DWORD *)v138 == 2)
                              WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v7);
                            else
                              *(_DWORD *)v138 -= 2;
                          }
                          v139 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v139)
                          {
                            if (*(_DWORD *)v139 == 2)
                              WTF::StringImpl::destroy(v139, (WTF::StringImpl *)v7);
                            else
                              *(_DWORD *)v139 -= 2;
                          }
                          ++v127;
                        }
                        while (v127 != (uint64_t *)v128);
                      }
LABEL_313:
                      v155 = __ldxr(v92);
                      if (v155 == 1)
                      {
                        a3 = v173;
                        if (!__stlxr(0, v92))
                          goto LABEL_318;
                      }
                      else
                      {
                        __clrex();
                        a3 = v173;
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      goto LABEL_318;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              goto LABEL_318;
            }
LABEL_363:
            __break(0xC471u);
            JUMPOUT(0x195CA4020);
          }
        }
        else
        {
          v108 = 0;
          if (v181)
            goto LABEL_229;
        }
        v109 = 0;
        goto LABEL_230;
      }
      v121 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v122 = a1;
      v123 = v121;
      v124 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v122 + 32) + 256))(*(_QWORD *)(v122 + 32));
      *(_QWORD *)&buf = "MediaElementSession";
      *((_QWORD *)&buf + 1) = 20;
      v185 = "playbackStateChangePermitted";
      v186 = v124;
      if (!*(_BYTE *)(v123 + 12))
        goto LABEL_321;
      v105 = "Returning FALSE because a user gesture is required for audio rate change restriction";
    }
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [85]>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&buf, v105);
    goto LABEL_321;
  }
LABEL_223:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
LABEL_107:
  if (*(_DWORD *)v53 == 1)
  {
    WebCore::Page::~Page(v53);
    WTF::fastFree(v73, v74);
  }
  else
  {
    --*(_DWORD *)v53;
  }
LABEL_109:
  if (*(_DWORD *)(v47 + 24) == 2)
  {
    if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v47, v7);
  }
  else
  {
    *(_DWORD *)(v47 + 24) -= 2;
  }
}

uint64_t WebCore::MediaElementSession::requiresFullscreenForVideoPlayback(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  WebCore::Quirks *v12;
  _BOOL8 shouldIgnorePlaysInlineRequirementQuirk;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *((_QWORD *)this + 10);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  v4 = *(_QWORD *)(v3 + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
        v6 = *(_QWORD *)(v6 + 8);
      if ((*(_WORD *)(v3 + 3358) & 0x10) != 0)
      {
        v11 = *(_QWORD *)(v5 + 120);
        if (v11)
          v11 = *(_QWORD *)(v11 + 8);
        if (!v11 && v6 && *(_BYTE *)(v6 + 1088))
          return 0;
      }
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
  if (v7 == *(_QWORD *)(WebCore::HTMLNames::audioTag + 24))
    return 0;
  if ((*(_WORD *)(v3 + 3358) & 0x10) != 0)
  {
    if (v7 != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195CA4394);
    }
    if ((*(int (**)(_QWORD))(*(_QWORD *)v2 + 1352))(*((_QWORD *)this + 10)) < 1
      || (*(_DWORD *)(v2 + 1265) & 0x10000000) == 0)
    {
      return 0;
    }
    v2 = *((_QWORD *)this + 10);
  }
  if (!*(_BYTE *)(v2 + 1096))
  {
    v8 = *(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8);
    v9 = *((_QWORD *)v8 + 85);
    if ((*(_QWORD *)(v9 + 664) & 0x400000) == 0)
      return 1;
    if ((*(_QWORD *)(v9 + 680) & 0x10000000) != 0)
    {
      v12 = (WebCore::Quirks *)*((_QWORD *)v8 + 86);
      if (!v12)
        v12 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v8);
      shouldIgnorePlaysInlineRequirementQuirk = WebCore::Quirks::shouldIgnorePlaysInlineRequirementQuirk(v12);
      if (!shouldIgnorePlaysInlineRequirementQuirk)
      {
        if (WebCore::CocoaApplication::isIBooks((WebCore::CocoaApplication *)shouldIgnorePlaysInlineRequirementQuirk))
        {
          v14 = *(_QWORD *)(*((_QWORD *)this + 10) + 104);
          if (!v14)
            return 1;
          v15 = *(_DWORD *)(v14 + 4);
          LODWORD(v16) = v15 >> 5;
          if ((v15 & 1) != 0)
          {
            v17 = *(uint64_t **)(v14 + 40);
            LODWORD(v18) = *(_DWORD *)(v14 + 52);
          }
          else
          {
            v17 = (uint64_t *)(v14 + 32);
            LODWORD(v18) = v15 >> 5;
          }
          if ((_DWORD)v18)
          {
            v18 = v18;
            while (1)
            {
              v33 = *v17;
              if (*v17 == WebCore::HTMLNames::webkit_playsinlineAttr
                || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkit_playsinlineAttr + 24)
                && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkit_playsinlineAttr + 32))
              {
                break;
              }
              v17 += 2;
              if (!--v18)
                goto LABEL_50;
            }
          }
          else
          {
LABEL_50:
            if ((v15 & 1) != 0)
            {
              v34 = *(uint64_t **)(v14 + 40);
              LODWORD(v16) = *(_DWORD *)(v14 + 52);
            }
            else
            {
              v34 = (uint64_t *)(v14 + 32);
            }
            if (!(_DWORD)v16)
              return 1;
            v16 = v16;
            result = 1;
            while (1)
            {
              v35 = *v34;
              if (*v34 == WebCore::HTMLNames::playsinlineAttr
                || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::playsinlineAttr + 24)
                && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::playsinlineAttr + 32))
              {
                break;
              }
              v34 += 2;
              if (!--v16)
                return result;
            }
          }
        }
        else
        {
          v19 = WTF::linkedOnOrAfterSDKWithBehavior();
          v20 = *((_QWORD *)this + 10);
          if ((v19 & 1) != 0)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
            if ((*(_WORD *)(v21 + 3358) & 0x10) == 0
              || (v22 = *(_QWORD *)(v21 + 528)) == 0
              || (v23 = *(_QWORD *)(v22 + 8)) == 0
              || (v24 = *(_QWORD *)(v23 + 120)) == 0
              || !*(_QWORD *)(v24 + 8))
            {
              v25 = *(_QWORD *)(v20 + 104);
              if (!v25)
                return 1;
              v26 = *(_DWORD *)(v25 + 4);
              if ((v26 & 1) != 0)
              {
                v27 = *(uint64_t **)(v25 + 40);
                LODWORD(v28) = *(_DWORD *)(v25 + 52);
              }
              else
              {
                v27 = (uint64_t *)(v25 + 32);
                LODWORD(v28) = v26 >> 5;
              }
              if (!(_DWORD)v28)
                return 1;
              v28 = v28;
              result = 1;
              while (1)
              {
                v37 = *v27;
                if (*v27 == WebCore::HTMLNames::playsinlineAttr
                  || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::HTMLNames::playsinlineAttr + 24)
                  && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::HTMLNames::playsinlineAttr + 32))
                {
                  break;
                }
                v27 += 2;
                if (!--v28)
                  return result;
              }
            }
          }
          else
          {
            v29 = *(_QWORD *)(v20 + 104);
            if (!v29)
              return 1;
            v30 = *(_DWORD *)(v29 + 4);
            if ((v30 & 1) != 0)
            {
              v31 = *(uint64_t **)(v29 + 40);
              LODWORD(v32) = *(_DWORD *)(v29 + 52);
            }
            else
            {
              v31 = (uint64_t *)(v29 + 32);
              LODWORD(v32) = v30 >> 5;
            }
            if (!(_DWORD)v32)
              return 1;
            v32 = v32;
            result = 1;
            while (1)
            {
              v36 = *v31;
              if (*v31 == WebCore::HTMLNames::webkit_playsinlineAttr
                || *(_QWORD *)(v36 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkit_playsinlineAttr + 24)
                && *(_QWORD *)(v36 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkit_playsinlineAttr + 32))
              {
                break;
              }
              v31 += 2;
              if (!--v32)
                return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::MediaElementSession::autoplayPermitted(WebCore::MediaElementSession *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;

  v3 = (_QWORD *)*((_QWORD *)this + 10);
  v4 = *(_QWORD *)(v3[5] + 8);
  *(_DWORD *)(v4 + 24) += 2;
  if (*(_BYTE *)(v4 + 3362) || *(_BYTE *)(v4 + 467))
  {
LABEL_3:
    v5 = 0;
    goto LABEL_4;
  }
  if ((*((_BYTE *)this + 89) & 8) == 0
    || (!(*(unsigned int (**)(_QWORD *))(*v3 + 1264))(v3)
     || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 10) + 1280))(*((_QWORD *)this + 10)))
    && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 1472))(*((_QWORD *)this + 10)) & 1) == 0
    && (*(double (**)(_QWORD))(**((_QWORD **)this + 10) + 1456))(*((_QWORD *)this + 10)) != 0.0)
  {
    v5 = 1;
    goto LABEL_4;
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
    v19 = "MediaElementSession";
    v20 = 20;
    v21 = "autoplayPermitted";
    v22 = v14;
    if (*(_BYTE *)(v13 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [48]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v19, "Returning FALSE because element has no renderer");
    goto LABEL_3;
  }
  if ((*(_BYTE *)((*(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA4680);
  }
  if ((*(_BYTE *)((*(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*(_QWORD *)(*((_QWORD *)this + 10) + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA46A0);
  }
  ++*(_DWORD *)(v7 + 16);
  if ((*(_BYTE *)(v7 + 120) & 0x30) != 0)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
    v19 = "MediaElementSession";
    v20 = 20;
    v21 = "autoplayPermitted";
    v22 = v10;
    if (*(_BYTE *)(v9 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v19, "Returning FALSE because element is not visible");
    goto LABEL_22;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  if (!*(_QWORD *)(v12 + 40))
  {
    if (*(_BYTE *)(v12 + 24) && *(_BYTE *)(v12 + 25))
      goto LABEL_30;
LABEL_40:
    v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
    v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
    v19 = "MediaElementSession";
    v20 = 20;
    v21 = "autoplayPermitted";
    v22 = v18;
    if (*(_BYTE *)(v17 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v19, "Returning FALSE because frame is offscreen");
    goto LABEL_22;
  }
  if (WebCore::ScrollView::platformIsOffscreen((id *)v12))
    goto LABEL_40;
LABEL_30:
  if ((*(_WORD *)(v7 + 76) & 6) == 2)
  {
    v5 = 1;
    goto LABEL_23;
  }
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v19 = "MediaElementSession";
  v20 = 20;
  v21 = "autoplayPermitted";
  v22 = v16;
  if (*(_BYTE *)(v15 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v19, "Returning FALSE because element is not visible in the viewport");
LABEL_22:
  v5 = 0;
LABEL_23:
  v11 = *(_DWORD *)(v7 + 16);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA46C0);
  }
  *(_DWORD *)(v7 + 16) = v11 - 1;
LABEL_4:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v5;
}

uint64_t WebCore::MediaElementSession::dataLoadingPermitted(WebCore::MediaElementSession *this)
{
  int v2;
  WebCore *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int isElementMainContentForPurposesOfAutoplay;
  _QWORD v11[4];

  v2 = *((_DWORD *)this + 22);
  if ((v2 & 0x1000) == 0
    || (v3 = (WebCore *)*((_QWORD *)this + 10), v4 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8), *(_BYTE *)(v4 + 467))
    || *(_BYTE *)(v4 + 468))
  {
    if ((v2 & 1) == 0)
      return 1;
  }
  else
  {
    v9 = *((unsigned __int8 *)this + 264);
    isElementMainContentForPurposesOfAutoplay = WebCore::isElementMainContentForPurposesOfAutoplay(v3, (const WebCore::HTMLMediaElement *)1);
    *((_BYTE *)this + 264) = isElementMainContentForPurposesOfAutoplay;
    if (v9 != isElementMainContentForPurposesOfAutoplay)
    {
      WebCore::HTMLMediaElement::updateShouldPlay(*((WebCore::HTMLMediaElement **)this + 10));
      v9 = *((unsigned __int8 *)this + 264);
    }
    if (v9 || (*((_DWORD *)this + 22) & 1) == 0)
      return 1;
  }
  if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)this + 10) + 40)
                                                                              + 8)))
    return 1;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v11[0] = "MediaElementSession";
  v11[1] = 20;
  v11[2] = "dataLoadingPermitted";
  v11[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebCore::LogMedia)
      v8 = byte_1ECE7C490 >= 3u;
    else
      v8 = 0;
    if (v8)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v11, "returning FALSE");
  }
  return 0;
}

uint64_t WebCore::MediaElementSession::canShowControlsManager(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::PlatformMediaSessionManager *v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  const WebCore::HTMLMediaElement *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  __int16 v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::Node *v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  if (*(_BYTE *)(v4 + 467) || *(_BYTE *)(v4 + 468) || (*(_DWORD *)(v3 + 1265) & 0x20) == 0)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    v92 = "MediaElementSession";
    v93 = 20;
    v94 = "canShowControlsManager";
    v95 = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      if (WebCore::LogMedia)
        v7 = byte_1ECE7C490 >= 3u;
      else
        v7 = 0;
      if (v7)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [31]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: isSuspended()");
    }
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 1800))(v3))
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    v92 = "MediaElementSession";
    v93 = 20;
    v94 = "canShowControlsManager";
    v95 = v11;
    if (*(_BYTE *)(v10 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning TRUE: is fullscreen");
    return 1;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1472))(*(_QWORD *)(a1 + 80)))
  {
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    v92 = "MediaElementSession";
    v93 = 20;
    v94 = "canShowControlsManager";
    v95 = v13;
    if (*(_BYTE *)(v12 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: muted");
    return 0;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 8);
  if ((*(_WORD *)(v14 + 3358) & 0x10) != 0)
  {
    v15 = *(_QWORD *)(v14 + 528);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        if (*(_QWORD *)(*(_QWORD *)(v16 + 128) + 8) == v16)
        {
          v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
          v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
          v92 = "MediaElementSession";
          v93 = 20;
          v94 = "canShowControlsManager";
          v95 = v28;
          if (*(_BYTE *)(v27 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning TRUE: is media document");
          return 1;
        }
      }
    }
  }
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32));
  if (a2 != 1 || v17 != 3)
    goto LABEL_50;
  v18 = *(_BYTE **)(a1 + 80);
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v18 + 2528))(v18) & 1) == 0 && !v18[1544]
    || (v19 = *(_QWORD *)(a1 + 80), *(_QWORD *)(v19 + 960)))
  {
LABEL_32:
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    v92 = "MediaElementSession";
    v93 = 20;
    v94 = "canShowControlsManager";
    v95 = v21;
    if (*(_BYTE *)(v20 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [48]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: audio too short for NowPlaying");
    return 0;
  }
  v22 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 1352))(*(_QWORD *)(a1 + 80));
  if ((int)v22 >= 1)
  {
    v23 = *(_QWORD *)(v19 + 1152);
    if (v23)
    {
      v24 = *(uint64_t (**)(void))(*(_QWORD *)v23 + 40);
    }
    else
    {
      v29 = *(_QWORD *)(v19 + 1136);
      if (!v29 || *(int *)(v19 + 904) < 1)
      {
        v30 = (uint64_t *)WTF::MediaTime::invalidTime(0);
        v25 = *v30;
        v26 = v30[1];
LABEL_48:
        v92 = (const char *)v25;
        v93 = v26;
        v22 = (WebCore::PlatformMediaSessionManager *)WTF::MediaTime::compare((WTF::MediaTime *)&v92, (const WTF::MediaTime *)&WebCore::isElementLongEnoughForMainContent(WebCore::HTMLMediaElement const&)::YouveGotMailDuration);
        if ((_DWORD)v22 == 1)
          goto LABEL_50;
        goto LABEL_49;
      }
      v24 = *(uint64_t (**)(void))(**(_QWORD **)(v29 + 72) + 336);
    }
    v25 = v24();
    goto LABEL_48;
  }
LABEL_49:
  v31 = WebCore::PlatformMediaSessionManager::sharedManager(v22);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 104))(v31) & 1) == 0)
    goto LABEL_32;
LABEL_50:
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32));
  if ((a2 & 0xFFFFFFFD) != 0 || v32 != 3)
  {
    if (!a2 && !WebCore::isElementRectMostlyInMainFrame(*(WebCore **)(a1 + 80), v33))
    {
      v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
      v92 = "MediaElementSession";
      v93 = 20;
      v94 = "canShowControlsManager";
      v95 = v54;
      if (*(_BYTE *)(v53 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: not in main frame");
      return 0;
    }
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1280))(*(_QWORD *)(a1 + 80)) & 1) == 0
      && (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 1265) & 0x8000000) == 0)
    {
      v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
      v92 = "MediaElementSession";
      v93 = 20;
      v94 = "canShowControlsManager";
      v95 = v37;
      if (!*(_BYTE *)(v36 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
        return 0;
      v38 = "returning FALSE: no audio";
      goto LABEL_66;
    }
    WebCore::MediaElementSession::playbackStateChangePermitted(a1, 0, (uint64_t)&v92);
    if (BYTE4(v92))
    {
      v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
      v92 = "MediaElementSession";
      v93 = 20;
      v94 = "canShowControlsManager";
      v95 = v40;
      if (*(_BYTE *)(v39 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: playback not permitted");
      return 0;
    }
    if ((*(_BYTE *)(a1 + 89) & 0x20) == 0
      || WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40)
                                                                                + 8)))
    {
      v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
      v92 = "MediaElementSession";
      v93 = 20;
      v94 = "canShowControlsManager";
      v95 = v50;
      if (*(_BYTE *)(v49 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning TRUE: no user gesture required");
      return 1;
    }
    if (a2)
    {
      v55 = *(_QWORD *)(a1 + 80);
      if (a2 == 2)
        goto LABEL_110;
    }
    else
    {
      v55 = *(_QWORD *)(a1 + 80);
      if ((*(_BYTE *)(a1 + 89) & 0x40) != 0 && (*(_DWORD *)(v55 + 1265) & 2) == 0)
      {
        v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
        v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
        v92 = "MediaElementSession";
        v93 = 20;
        v94 = "canShowControlsManager";
        v95 = v57;
        if (*(_BYTE *)(v56 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: needs to be playing");
        return 0;
      }
    }
    if ((*(_DWORD *)(v55 + 1265) & 0x4000000) == 0)
    {
      v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
      v92 = "MediaElementSession";
      v93 = 20;
      v94 = "canShowControlsManager";
      v95 = v59;
      if (*(_BYTE *)(v58 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: hasn't fired playing notification");
      return 0;
    }
LABEL_110:
    v60 = *(_QWORD **)(v55 + 40);
    v61 = *(_QWORD *)(v60[1] + 1992);
    if (v61)
    {
      v62 = *(_DWORD *)(v61 + 8);
      *(_DWORD *)(v61 + 8) = v62 + 1;
      v63 = *(_QWORD *)(v61 + 56);
      if (v63)
      {
        v64 = *(_DWORD *)(v63 + 24);
        *(_DWORD *)(v63 + 24) = v64 + 2;
        v65 = *(_WORD *)(v63 + 28);
        if ((v65 & 0xF000) == 0x9000)
        {
          if (*v60 == v63 && (*(_WORD *)(v55 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(v55 + 22) & 8) != 0)
            goto LABEL_122;
        }
        else if ((v65 & 4) != 0
               && *(_QWORD *)(v63 + 80)
               && ((*(unsigned __int8 *)(v55 + 22) ^ *(unsigned __int8 *)(v63 + 22)) & 8) == 0)
        {
          do
            v55 = *(_QWORD *)(v55 + 32);
          while (v55 != v63 && v55 != 0);
          if (v55)
          {
LABEL_122:
            if (v64)
            {
              *(_DWORD *)(v63 + 24) = v64;
              v67 = 1;
            }
            else
            {
              v68 = v61;
              if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v63, v48);
              v67 = 1;
              v61 = v68;
            }
LABEL_142:
            v75 = *(_DWORD *)(v61 + 8);
            if (!v75)
              goto LABEL_181;
            *(_DWORD *)(v61 + 8) = v75 - 1;
            if (!v67)
              return 0;
            goto LABEL_144;
          }
        }
        v90 = v61;
        v91 = (WebCore::Node *)v63;
        v69 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
        v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
        v92 = "MediaElementSession";
        v93 = 20;
        v94 = "canShowControlsManager";
        v95 = v70;
        if (*(_BYTE *)(v69 + 12))
        {
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: outside of full screen");
        }
        v73 = *((_DWORD *)v91 + 6);
        v74 = v73 - 2;
        if (v73 == 2)
        {
          if ((*((_WORD *)v91 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v91, v71);
          v67 = 0;
        }
        else
        {
          v67 = 0;
          *((_DWORD *)v91 + 6) = v74;
        }
        v61 = v90;
        goto LABEL_142;
      }
      if (v62 == -1)
        goto LABEL_181;
      *(_DWORD *)(v61 + 8) = v62;
    }
LABEL_144:
    if (a2)
    {
      if (a2 <= 2)
      {
        v76 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
        v77 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
        v92 = "MediaElementSession";
        v93 = 20;
        v94 = "canShowControlsManager";
        v95 = v77;
        if (*(_BYTE *)(v76 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning TRUE: potentially plays audio");
        return 1;
      }
      goto LABEL_168;
    }
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1264))(*(_QWORD *)(a1 + 80)))
      goto LABEL_168;
    v78 = *(_QWORD **)(a1 + 80);
    if ((v78[8] & 0xFFFFFFFFFFFFLL) == 0)
    {
      v88 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
      v92 = "MediaElementSession";
      v93 = 20;
      v94 = "canShowControlsManager";
      v95 = v89;
      if (*(_BYTE *)(v88 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: no renderer");
      return 0;
    }
    if ((*(_BYTE *)((v78[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA5750);
    }
    if ((*(_BYTE *)((v78[8] & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
      && (*(_BYTE *)((v78[8] & 0xFFFFFFFFFFFFLL) + 0x35) & 2) != 0)
    {
      v80 = (*(uint64_t (**)(_QWORD *))(*v78 + 1272))(v78);
      v81 = *(_QWORD *)(a1 + 80);
      if ((v80 & 1) == 0 && (*(_DWORD *)(v81 + 1265) & 0x10000000) == 0)
      {
        v82 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
        v83 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
        v92 = "MediaElementSession";
        v93 = 20;
        v94 = "canShowControlsManager";
        v95 = v83;
        if (!*(_BYTE *)(v82 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
          return 0;
        v38 = "returning FALSE: no video";
LABEL_66:
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, v38);
        return 0;
      }
      if (WebCore::isElementLargeEnoughForMainContent(v81, 0))
      {
        v84 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
        v85 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
        v92 = "MediaElementSession";
        v93 = 20;
        v94 = "canShowControlsManager";
        v95 = v85;
        if (*(_BYTE *)(v84 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning TRUE: is main content");
        return 1;
      }
LABEL_168:
      v86 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v87 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
      v92 = "MediaElementSession";
      v93 = 20;
      v94 = "canShowControlsManager";
      v95 = v87;
      if (*(_BYTE *)(v86 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: no user gesture");
      return 0;
    }
LABEL_181:
    __break(0xC471u);
    JUMPOUT(0x195CA5730);
  }
  if ((*(_BYTE *)(a1 + 89) & 0x20) != 0
    && !WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40)
                                                                               + 8)))
  {
    v41 = *(_QWORD *)(a1 + 80);
    if ((*(_DWORD *)(v41 + 1265) & 2) == 0
      || (v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 40) + 8) + 528)) == 0
      || (v43 = *(_QWORD *)(v42 + 8)) == 0
      || (v44 = *(_QWORD *)(v43 + 24)) == 0
      || (v45 = *(_QWORD *)(v44 + 8)) == 0
      || !*(_BYTE *)(v45 + 1089))
    {
      v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
      v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
      v92 = "MediaElementSession";
      v93 = 20;
      v94 = "canShowControlsManager";
      v95 = v52;
      if (*(_BYTE *)(v51 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning FALSE: audio element is not suitable");
      return 0;
    }
    v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    v92 = "MediaElementSession";
    v93 = 20;
    v94 = "canShowControlsManager";
    v95 = v47;
    if (*(_BYTE *)(v46 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning TRUE: user has played media before");
  }
  else
  {
    v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    v92 = "MediaElementSession";
    v93 = 20;
    v94 = "canShowControlsManager";
    v95 = v35;
    if (*(_BYTE *)(v34 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [48]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v92, "returning TRUE: audio element with user gesture");
  }
  return 1;
}

BOOL WebCore::MediaElementSession::isLongEnoughForMainContent(WebCore::MediaElementSession *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD v9[2];

  v1 = *((_QWORD *)this + 10);
  if ((*(int (**)(uint64_t))(*(_QWORD *)v1 + 1352))(v1) < 1)
    return 0;
  v2 = *(_QWORD *)(v1 + 1152);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 40);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 1136);
    if (!v5 || *(int *)(v1 + 904) < 1)
    {
      v8 = (uint64_t *)WTF::MediaTime::invalidTime(0);
      v6 = *v8;
      v7 = v8[1];
      goto LABEL_10;
    }
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(v5 + 72) + 336);
  }
  v6 = v3();
LABEL_10:
  v9[0] = v6;
  v9[1] = v7;
  return WTF::MediaTime::compare((WTF::MediaTime *)v9, (const WTF::MediaTime *)&WebCore::isElementLongEnoughForMainContent(WebCore::HTMLMediaElement const&)::YouveGotMailDuration) == 1;
}

BOOL WebCore::isElementRectMostlyInMainFrame(WebCore *this, const WebCore::HTMLMediaElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::ScrollView *v8;
  WebCore::ScrollView *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  _BOOL8 v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v35;
  _QWORD *v36;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_62;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA5A1CLL);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (WebCore::ScrollView *)(*(uint64_t (**)(_QWORD, const WebCore::HTMLMediaElement *))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8), a2);
  if (!v8)
  {
    v18 = 0;
    goto LABEL_52;
  }
  v9 = v8;
  ++*((_DWORD *)v8 + 2);
  v10 = WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(v8);
  v11 = *((_QWORD *)v9 + 32);
  v12 = WebCore::Element::boundingBoxInRootViewCoordinates(this);
  if (v13 >= 0)
    v15 = v13;
  else
    v15 = -v13;
  if (v14 >= 0)
    v16 = v14;
  else
    v16 = -v14;
  v17 = v16 * (unint64_t)v15;
  if ((v17 & 0xFFFFFFFF00000000) != 0)
  {
    v18 = 0;
    goto LABEL_50;
  }
  if ((int)v12 <= -(int)v10)
    v19 = -(int)v10;
  else
    v19 = v12;
  v20 = (unint64_t)-(uint64_t)(v10 & 0xFFFFFFFF00000000) >> 32;
  if (SHIDWORD(v12) <= (int)v20)
    v21 = (unint64_t)-(uint64_t)(v10 & 0xFFFFFFFF00000000) >> 32;
  else
    v21 = HIDWORD(v12);
  v22 = v13 + v12;
  if ((int)v11 - (int)v10 < v13 + (int)v12)
    v22 = v11 - v10;
  v23 = v14 + HIDWORD(v12);
  v24 = HIDWORD(v11) + v20;
  if (v24 < v14 + HIDWORD(v12))
    v23 = v24;
  v25 = v19 < v22 && v21 < v23;
  if (v25)
    v26 = v19;
  else
    v26 = 0;
  if (v25)
    v27 = v21;
  else
    v27 = 0;
  if (v25)
    v28 = v22;
  else
    v28 = 0;
  if (!v25)
    v23 = 0;
  v29 = v28 - v26;
  v30 = v23 - v27;
  if (v29 < 0)
    v29 = -v29;
  if (v30 < 0)
    v30 = -v30;
  v31 = v30 * (unint64_t)v29;
  if ((v31 & 0xFFFFFFFF00000000) != 0)
  {
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x195CA59FCLL);
  }
  v18 = v31 > v17 >> 1;
LABEL_50:
  if (*((_DWORD *)v9 + 2) == 1)
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v9 + 8))(v9);
  else
    --*((_DWORD *)v9 + 2);
  do
  {
LABEL_52:
    v32 = __ldaxr(v6);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v6));
  if (!v33)
  {
    atomic_store(1u, v6);
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v35 = off_1E31FE290;
    v35[1] = v6;
    v36 = v35;
    WTF::ensureOnMainThread();
    if (v36)
      (*(void (**)(_QWORD *))(*v36 + 8))(v36);
  }
  return v18;
}

BOOL WebCore::isElementLargeEnoughForMainContent(uint64_t a1, int a2)
{
  WebCore::RenderBox *v3;
  double v5;
  double v6;
  _BOOL8 v7;
  double v8;
  WebCore::RenderBox *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  _QWORD *v32;
  double v33;
  _QWORD *v34;

  if ((byte_1ECE83651 & 1) == 0)
  {
    v33 = 1.8;
    if (!a2)
      v33 = 3.0;
    qword_1ECE83658 = *(_QWORD *)&v33;
    byte_1ECE83651 = 1;
  }
  v3 = (WebCore::RenderBox *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v3)
    return 0;
  if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA5D2CLL);
  }
  if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA5D4CLL);
  }
  ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  v5 = (double)(int)WebCore::RenderBox::clientWidth(v3) * 0.015625;
  v6 = (double)(int)WebCore::RenderBox::clientHeight(v3) * 0.015625;
  if (v5 * v6 >= 120000.0)
  {
    v8 = v5 / v6;
    if (v8 >= 0.5 && v8 <= *(double *)&qword_1ECE83658)
    {
      v7 = 1;
      goto LABEL_36;
    }
    v10 = (WebCore::RenderBox *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
    if (v10)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CA5D94);
      }
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
        || (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CA5DB4);
      }
      v12 = *(_QWORD *)(a1 + 40);
      ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 528);
      if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v14 + 128) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v14 + 128) + 8));
        if (v17)
        {
          v18 = v17;
          ++*(_DWORD *)(v17 + 8);
          v19 = (int)WebCore::RenderBox::clientWidth(v10) / 64;
          v20 = v18 + 64;
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 + 64) + 488))(v18 + 64);
          if (v19 >= v21)
            v19 = v21;
          v22 = (int)WebCore::RenderBox::clientHeight(v10) / 64;
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 488))(v18 + 64);
          v24 = HIDWORD(v23);
          if (v22 < SHIDWORD(v23))
            LODWORD(v24) = v22;
          v25 = (double)((int)v24 * v19);
          v26 = (double)(*(int (**)(uint64_t))(*(_QWORD *)v20 + 488))(v18 + 64) * 0.9;
          v7 = v26
             * (double)(int)((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 488))(v18 + 64) >> 32) < v25;
          if (*(_DWORD *)(v18 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          else
            --*(_DWORD *)(v18 + 8);
        }
        else
        {
          v7 = 0;
        }
        do
        {
          v27 = __ldaxr(v15);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v15));
        if (!v28)
        {
          atomic_store(1u, v15);
          v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v32 = off_1E31FE290;
          v32[1] = v15;
          v34 = v32;
          WTF::ensureOnMainThread();
          if (v34)
            (*(void (**)(_QWORD *))(*v34 + 8))(v34);
        }
      }
      else
      {
        v7 = 0;
      }
      v29 = *((_DWORD *)v10 + 4);
      if (!v29)
      {
        __break(0xC471u);
        JUMPOUT(0x195CA5DD4);
      }
      *((_DWORD *)v10 + 4) = v29 - 1;
      goto LABEL_36;
    }
  }
  v7 = 0;
LABEL_36:
  v30 = *((_DWORD *)v3 + 4);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA5D6CLL);
  }
  *((_DWORD *)v3 + 4) = v30 - 1;
  return v7;
}

BOOL WebCore::isElementMainContentForPurposesOfAutoplay(WebCore *this, const WebCore::HTMLMediaElement *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  BOOL v6;
  int v7;
  _BOOL8 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  WebCore *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int *v47;
  int v48;
  char v49;
  _QWORD v50[3];
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  __int16 v61;
  WebCore *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  if (!*(_QWORD *)(v2 + 1944))
    goto LABEL_23;
  if (*(_BYTE *)(v2 + 3405))
    goto LABEL_23;
  if (*(_BYTE *)(v2 + 468))
    goto LABEL_23;
  if (*(_BYTE *)(v2 + 467))
    goto LABEL_23;
  v3 = (int)a2;
  if (!(*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 1280))(this))
    goto LABEL_23;
  if (!(*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 1272))(this))
    goto LABEL_23;
  v5 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v5)
    goto LABEL_23;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA6228);
  }
  v6 = (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0;
  if (v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA6248);
  }
  ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  if (!WebCore::isElementLargeEnoughForMainContent((uint64_t)this, 1)
    || (*(_BYTE *)(v5 + 120) & 0x30) != 0
    || (*(_WORD *)(v5 + 76) & 6) != 2 && (*(_DWORD *)((_BYTE *)this + 1265) & 2) == 0)
  {
    v7 = *(_DWORD *)(v5 + 16);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA6268);
    }
    v8 = 0;
    *(_DWORD *)(v5 + 16) = v7 - 1;
    goto LABEL_24;
  }
  v9 = *(_DWORD *)(v5 + 16);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195CA629CLL);
  }
  *(_DWORD *)(v5 + 16) = v9 - 1;
  v10 = *(_QWORD *)(v2 + 528);
  if (!v10
    || (v11 = *(_QWORD *)(v10 + 8)) == 0
    || *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8) != v11
    || *(_BYTE *)(v11 + 144))
  {
LABEL_23:
    v8 = 0;
    goto LABEL_24;
  }
  v13 = (unsigned int *)(v11 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = *(_QWORD *)(v11 + 288);
  if (v15 && (v16 = *(_QWORD *)(*(_QWORD *)(v15 + 328) + 296)) != 0)
  {
    v17 = *(_QWORD *)(v16 + 1944);
    v6 = v17 == 0;
    v18 = v17 != 0;
    if (v6 || v3 == 0)
    {
      v8 = v18;
    }
    else
    {
      v47 = (unsigned int *)(v11 + 8);
      v20 = v11;
      if (*(_QWORD *)(v11 + 296))
      {
        v21 = WebCore::Element::boundingBoxInRootViewCoordinates(this);
        v23 = v22;
        v24 = WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(*(WebCore::ScrollView **)(v20 + 288));
        if ((v23 & 0x80000000) == 0)
          v25 = v23;
        else
          v25 = v23 + 1;
        v26 = v24 + v21 + (v25 >> 1);
        v27 = HIDWORD(v23);
        if ((v23 & 0x8000000000000000) != 0)
          LODWORD(v27) = HIDWORD(v23) + 1;
        v28 = HIDWORD(v24) + HIDWORD(v21) + ((int)v27 >> 1);
        LODWORD(v27) = v26 << 6;
        if (v26 < -33554432)
          LODWORD(v27) = 0x80000000;
        if (v26 <= 0x1FFFFFF)
          v27 = v27;
        else
          v27 = 0x7FFFFFFFLL;
        if (v28 >= -33554432)
          v29 = v28 << 6;
        else
          v29 = 0x80000000;
        if (v28 <= 0x1FFFFFF)
          v30 = v29;
        else
          v30 = 0x7FFFFFFFLL;
        v50[0] = v27 | (v30 << 32);
        v50[1] = v27 & 0xFFFFFFC0 | ((unint64_t)((v30 & 0xFFFFFFC0) >> 6) << 38);
        v50[2] = 0x4000000040;
        v51 = (float)(int)v27 * 0.015625;
        v52 = (float)(int)v30 * 0.015625;
        v53 = (float)(v27 & 0xFFFFFFC0) * 0.015625;
        v54 = (float)(v30 & 0xFFFFFFC0) * 0.015625;
        v55 = v53 + 1.0;
        v56 = v54;
        v57 = v53 + 1.0;
        v58 = v54 + 1.0;
        v59 = v53;
        v60 = v54 + 1.0;
        v61 = 256;
        v62 = 0;
        v63 = 0;
        v69 = 0;
        v64 = v50[0];
        v65 = 0;
        v68 = 0;
        v66 = 0;
        v67 = 0;
        v31 = *(_QWORD *)(v20 + 296);
        if (v31)
        {
          *(_DWORD *)(v31 + 24) += 2;
          v48 = 2339;
          v49 = 1;
          WebCore::Document::hitTest(v31, &v48, (WebCore::HitTestingTransformState *)v50, (uint64_t)v50);
          if (*(_DWORD *)(v31 + 24) == 2)
          {
            if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v31, v32);
          }
          else
          {
            *(_DWORD *)(v31 + 24) -= 2;
          }
        }
        else
        {
          v48 = 2339;
          v49 = 1;
          WebCore::Document::hitTest(0, &v48, (WebCore::HitTestingTransformState *)v50, (uint64_t)v50);
        }
        WebCore::HitTestResult::setToNonUserAgentShadowAncestor((uint64_t)v50);
        v34 = v62;
        if (v62)
        {
          do
          {
            v35 = *((_WORD *)v34 + 14);
            if ((v35 & 8) != 0)
              break;
            v37 = (uint64_t *)((char *)v34 + 32);
            v36 = *((_QWORD *)v34 + 4);
            if (v36)
            {
              if ((*(_WORD *)(v36 + 28) & 8) != 0)
              {
                v38 = *(_QWORD *)(v36 + 72) & 0xFFFFFFFFFFFFLL;
                if (v38)
                {
                  v40 = *(_QWORD *)(v38 + 88);
                  if (v40)
                  {
                    v41 = *(_QWORD *)(v40 + 224);
                    if (v41)
                    {
                      v39 = (*(uint64_t (**)(uint64_t, WebCore *))(*(_QWORD *)v41 + 16))(v41, v34);
                      if (v39)
                        goto LABEL_68;
                      v35 = *((_WORD *)v34 + 14);
                    }
                  }
                }
              }
            }
            if ((v35 & 0x80) != 0)
            {
              v42 = *((_QWORD *)v34 + 25);
              if (!v42)
              {
                v34 = 0;
                break;
              }
              v37 = (uint64_t *)(v42 + 8);
            }
            v39 = *v37;
LABEL_68:
            v34 = (WebCore *)v39;
          }
          while (v39);
        }
        v8 = v34 == this;
        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v50, v33);
      }
      else
      {
        v8 = 0;
      }
      v13 = v47;
    }
  }
  else
  {
    v8 = 0;
  }
  do
  {
    v43 = __ldaxr(v13);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v13));
  if (!v44)
  {
    atomic_store(1u, v13);
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v45 = off_1E31FE290;
    v45[1] = v13;
    v50[0] = v45;
    WTF::ensureOnMainThread();
    v46 = v50[0];
    v50[0] = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  }
LABEL_24:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v8;
}

unsigned int *WebCore::MediaElementSession::showPlaybackTargetPicker(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::AudioSessionIOS *v8;
  _BOOL8 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int *result;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  const char *v17;
  unsigned int *v18;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v15 = (WTF::StringImpl *)"MediaElementSession";
  v16 = 20;
  v17 = "showPlaybackTargetPicker";
  v18 = (unsigned int *)v3;
  if (*(_BYTE *)(v2 + 12))
    v3 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  if ((*((_BYTE *)this + 88) & 0x40) != 0
    && (v3 = WebCore::Document::processingUserGestureForMedia((WebCore::Document *)v4), (v3 & 1) == 0))
  {
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
    result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
    v15 = (WTF::StringImpl *)"MediaElementSession";
    v16 = 20;
    v17 = "showPlaybackTargetPicker";
    v18 = result;
    if (*(_BYTE *)(v14 + 12))
      result = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15, "returning early because of permissions");
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 528);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && (v7 = *(_QWORD *)(v6 + 24)) != 0 && *(_QWORD *)(v7 + 8))
    {
      v8 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v3);
      v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag
                                                                                       + 24);
      v10 = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v8 + 56))(v8);
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AudioSessionIOS *))(*(_QWORD *)v8 + 64))(&v15, v8);
      WebCore::Document::showPlaybackTargetPicker(v4, (uint64_t)this, v9, v10, (uint64_t)&v15);
      result = (unsigned int *)v15;
      v15 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
        else
          *result -= 2;
      }
    }
    else
    {
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
      result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
      v15 = (WTF::StringImpl *)"MediaElementSession";
      v16 = 20;
      v17 = "showPlaybackTargetPicker";
      v18 = result;
      if (*(_BYTE *)(v13 + 12))
        result = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15, "returning early because page is NULL");
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v11);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::MediaElementSession::wirelessVideoPlaybackDisabled(WebCore::MediaElementSession *this)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t result;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  char v40;
  int v41;
  char v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  NSObject *v48;
  uint64_t v49;
  void *v50;
  char *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::Logger *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::Logger *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl **v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unsigned int v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  unsigned int v90;
  _QWORD v91[4];
  WTF::Logger *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  __int128 buf;
  const char *v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104[3];

  v104[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 10);
  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2[5] + 8) + 680) + 720);
  if ((v3 & 0x800000) == 0)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
    v5 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
    *(_QWORD *)&buf = "MediaElementSession";
    *((_QWORD *)&buf + 1) = 20;
    v99 = "wirelessVideoPlaybackDisabled";
    v100 = v5;
    if (*(_BYTE *)(v4 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "returning TRUE because of settings");
    return 1;
  }
  v7 = v2[13];
  if (!v7)
    goto LABEL_35;
  v8 = *(_DWORD *)(v7 + 4);
  v9 = v8 >> 5;
  if ((v8 & 1) != 0)
  {
    v10 = *(uint64_t **)(v7 + 40);
    LODWORD(v11) = *(_DWORD *)(v7 + 52);
    if (!(_DWORD)v11)
      goto LABEL_25;
LABEL_12:
    v11 = v11;
    while (1)
    {
      v12 = *v10;
      if (*v10 == WebCore::HTMLNames::webkitwirelessvideoplaybackdisabledAttr
        || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitwirelessvideoplaybackdisabledAttr + 24)
        && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitwirelessvideoplaybackdisabledAttr + 32))
      {
        break;
      }
      v10 += 2;
      if (!--v11)
        goto LABEL_25;
    }
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
    v14 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
    *(_QWORD *)&buf = "MediaElementSession";
    *((_QWORD *)&buf + 1) = 20;
    v99 = "wirelessVideoPlaybackDisabled";
    v100 = v14;
    if (*(_BYTE *)(v13 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "returning TRUE because of attribute");
    }
    return 1;
  }
  v10 = (uint64_t *)(v7 + 32);
  LODWORD(v11) = v8 >> 5;
  if (v9)
    goto LABEL_12;
LABEL_25:
  if ((v8 & 1) == 0)
  {
    v16 = v7 + 32;
    if (v9)
      goto LABEL_27;
LABEL_35:
    v18 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_36;
  }
  v16 = *(_QWORD *)(v7 + 40);
  v9 = *(_DWORD *)(v7 + 52);
  if (!v9)
    goto LABEL_35;
LABEL_27:
  v17 = v9;
  v18 = (uint64_t *)(v16 + 8);
  while (1)
  {
    v19 = *(v18 - 1);
    if (v19 == WebCore::HTMLNames::webkitairplayAttr
      || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitairplayAttr + 24)
      && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitairplayAttr + 32))
    {
      break;
    }
    v18 += 2;
    if (!--v17)
    {
      v18 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_36:
  v20 = *v18;
  if (!*v18)
    goto LABEL_37;
  v79 = *(_DWORD *)(v20 + 4);
  if (v79 == 4)
  {
    v86 = *(_QWORD *)(v20 + 8);
    if ((*(_BYTE *)(v20 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v86 & 0xDF) != 0x44
        || (*(_BYTE *)(v86 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v86 + 2) & 0xDF) != 0x4E)
      {
        goto LABEL_37;
      }
      v87 = *(unsigned __int8 *)(v86 + 3);
    }
    else
    {
      if ((*(_WORD *)v86 & 0xFFDF) != 0x44
        || (*(_WORD *)(v86 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v86 + 4) & 0xFFDF) != 0x4E)
      {
        goto LABEL_37;
      }
      v87 = *(unsigned __int16 *)(v86 + 6);
    }
    if ((v87 & 0xFFFFFFDF) == 0x59)
    {
      v88 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
      v89 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
      *(_QWORD *)&buf = "MediaElementSession";
      *((_QWORD *)&buf + 1) = 20;
      v99 = "wirelessVideoPlaybackDisabled";
      v100 = v89;
      if (*(_BYTE *)(v88 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "returning TRUE because of legacy attribute");
      return 1;
    }
  }
  else
  {
    if (v79 != 5)
      goto LABEL_37;
    v80 = *(_QWORD *)(v20 + 8);
    if ((*(_BYTE *)(v20 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v80 & 0xDF) != 0x41
        || (*(_BYTE *)(v80 + 1) & 0xDF) != 0x4C
        || (*(_BYTE *)(v80 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v80 + 3) & 0xDF) != 0x4F)
      {
        goto LABEL_37;
      }
      v81 = *(unsigned __int8 *)(v80 + 4);
    }
    else
    {
      if ((*(_WORD *)v80 & 0xFFDF) != 0x41
        || (*(_WORD *)(v80 + 2) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v80 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v80 + 6) & 0xFFDF) != 0x4F)
      {
        goto LABEL_37;
      }
      v81 = *(unsigned __int16 *)(v80 + 8);
    }
    if ((v81 & 0xFFFFFFDF) == 0x57)
    {
      v82 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
      v83 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
      *(_QWORD *)&buf = "MediaElementSession";
      *((_QWORD *)&buf + 1) = 20;
      v99 = "wirelessVideoPlaybackDisabled";
      v100 = v83;
      if (*(_BYTE *)(v82 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "returning FALSE because of legacy attribute");
      return 0;
    }
  }
LABEL_37:
  if ((v3 & 0x1000000) != 0 && v7)
  {
    v21 = *(_DWORD *)(v7 + 4);
    if ((v21 & 1) != 0)
    {
      v22 = *(uint64_t **)(v7 + 40);
      LODWORD(v23) = *(_DWORD *)(v7 + 52);
      if (!(_DWORD)v23)
        goto LABEL_50;
    }
    else
    {
      v22 = (uint64_t *)(v7 + 32);
      LODWORD(v23) = v21 >> 5;
      if (!(_DWORD)v23)
        goto LABEL_50;
    }
    v23 = v23;
    do
    {
      v24 = *v22;
      if (*v22 == WebCore::HTMLNames::disableremoteplaybackAttr
        || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::disableremoteplaybackAttr + 24)
        && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::disableremoteplaybackAttr + 32))
      {
        return 1;
      }
      v22 += 2;
    }
    while (--v23);
  }
LABEL_50:
  v25 = v2[142];
  if (!v25)
    return 1;
  v26 = *(unsigned __int8 **)v25;
  if (__ldaxr(*(unsigned __int8 **)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, v26))
  {
    goto LABEL_55;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_55:
  ++*((_QWORD *)v26 + 1);
  v28 = __ldxr(v26);
  if (v28 == 1)
  {
    if (!__stlxr(0, v26))
      goto LABEL_60;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_60:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 72) + 736))(*(_QWORD *)(v25 + 72));
  v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v91[0] = "MediaElementSession";
  v91[1] = 20;
  v91[2] = "wirelessVideoPlaybackDisabled";
  v91[3] = v30;
  if (!*(_BYTE *)(v29 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
  {
LABEL_184:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v25);
    return v6;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v91);
  WTF::String::String((WTF::String *)&v95, "returning ");
  if ((_DWORD)v6)
    v31 = 5;
  else
    v31 = 6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32 = (WTF::StringImpl *)buf;
  result = WTF::String::String((WTF::String *)&v94, " because media engine says so");
  if (v96)
    v34 = *((_DWORD *)v96 + 1);
  else
    v34 = 0;
  if (v95)
  {
    v35 = *((_DWORD *)v95 + 1);
    if (v32)
      goto LABEL_70;
LABEL_205:
    v36 = 0;
    if (v94)
      goto LABEL_71;
LABEL_206:
    v37 = 0;
    goto LABEL_72;
  }
  v35 = 0;
  if (!v32)
    goto LABEL_205;
LABEL_70:
  v36 = *((_DWORD *)v32 + 1);
  if (!v94)
    goto LABEL_206;
LABEL_71:
  v37 = *((_DWORD *)v94 + 1);
LABEL_72:
  if ((v37 | v36) < 0
    || ((v38 = __OFADD__(v36, v37), v39 = v36 + v37, !v38) ? (v40 = 0) : (v40 = 1),
        v35 < 0
     || (v40 & 1) != 0
     || ((v38 = __OFADD__(v35, v39), v41 = v35 + v39, !v38) ? (v42 = 0) : (v42 = 1),
         v34 < 0 || (v42 & 1) != 0 || (result = (v34 + v41), __OFADD__(v34, v41)))))
  {
    v97 = 0;
    goto LABEL_219;
  }
  if (v96 && (*((_BYTE *)v96 + 16) & 4) == 0 || v95 && (*((_BYTE *)v95 + 16) & 4) == 0)
  {
    v43 = 0;
    goto LABEL_89;
  }
  if (v32)
  {
    v84 = *((_DWORD *)v32 + 4);
    v43 = (v84 >> 2) & 1;
    if (v94 && (v84 & 4) != 0)
      goto LABEL_178;
  }
  else
  {
    if (v94)
    {
LABEL_178:
      v43 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
      goto LABEL_89;
    }
    v43 = 1;
  }
LABEL_89:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v43, (uint64_t)v96, v95, (uint64_t)v32, (uint64_t)v94, &v97);
  if (v97)
  {
    v45 = v94;
    v94 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::destroy(v45, v44);
        if (v32)
        {
LABEL_94:
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v44);
          else
            *(_DWORD *)v32 -= 2;
        }
LABEL_96:
        v46 = v95;
        v95 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v44);
          else
            *(_DWORD *)v46 -= 2;
        }
        v47 = v96;
        v96 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v44);
          else
            *(_DWORD *)v47 -= 2;
        }
        v48 = qword_1ECE7C4A0;
        v49 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v49)
        {
          WTF::String::utf8();
          v51 = v92 ? (char *)v92 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v51;
          _os_log_impl(&dword_1940B8000, v48, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v49 = (uint64_t)v92;
          v92 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 1)
              v49 = WTF::fastFree((WTF *)v49, v50);
            else
              --*(_DWORD *)v49;
          }
        }
        if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          v52 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v53 = *v52;
            if ((v53 & 1) != 0)
              break;
            v54 = __ldaxr(v52);
            if (v54 == v53)
            {
              if (!__stxr(v53 | 1, v52))
              {
                v90 = v6;
                v55 = WTF::Logger::observers((WTF::Logger *)v49);
                v56 = *(unsigned int *)(v55 + 12);
                if ((_DWORD)v56)
                {
                  v57 = *(uint64_t **)v55;
                  v58 = *(_QWORD *)v55 + 8 * v56;
                  v59 = v31 - 1;
                  do
                  {
                    v60 = *v57;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v91);
                    LODWORD(v99) = 0;
                    WTF::String::String((WTF::String *)&v100, "returning ");
                    v101 = 0;
                    if (v59)
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v61 = v92;
                    }
                    else
                    {
                      v77 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                      *MEMORY[0x1E0CBEF70] += 2;
                      v61 = v77;
                    }
                    v102 = v61;
                    v103 = 0;
                    WTF::String::String((WTF::String *)v104, " because media engine says so");
                    v92 = 0;
                    v93 = 0;
                    v62 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                    LODWORD(v93) = 4;
                    v92 = v62;
                    v63 = HIDWORD(v93);
                    *((_DWORD *)v62 + 4 * HIDWORD(v93)) = buf;
                    v64 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v62 + 2 * v63 + 1) = v64;
                    *((_DWORD *)v62 + 4 * (v63 + 1)) = (_DWORD)v99;
                    v65 = v100;
                    if (v100)
                      *(_DWORD *)v100 += 2;
                    *((_QWORD *)v62 + 2 * (v63 + 1) + 1) = v65;
                    *((_DWORD *)v62 + 4 * (v63 + 2)) = v101;
                    v66 = v102;
                    if (v102)
                      *(_DWORD *)v102 += 2;
                    *((_QWORD *)v62 + 2 * (v63 + 2) + 1) = v66;
                    *((_DWORD *)v62 + 4 * (v63 + 3)) = v103;
                    v67 = v104[0];
                    if (v104[0])
                      *(_DWORD *)v104[0] += 2;
                    *((_QWORD *)v62 + 2 * (v63 + 3) + 1) = v67;
                    HIDWORD(v93) = v63 + 4;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v60 + 16))(v60, &WebCore::LogMedia, 3, &v92);
                    v68 = v92;
                    if (HIDWORD(v93))
                    {
                      v69 = v31;
                      v70 = 16 * HIDWORD(v93);
                      v71 = (WTF::StringImpl **)((char *)v92 + 8);
                      do
                      {
                        v72 = *v71;
                        *v71 = 0;
                        if (v72)
                        {
                          if (*(_DWORD *)v72 == 2)
                            WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v50);
                          else
                            *(_DWORD *)v72 -= 2;
                        }
                        v71 += 2;
                        v70 -= 16;
                      }
                      while (v70);
                      v68 = v92;
                      v31 = v69;
                    }
                    if (v68)
                    {
                      v92 = 0;
                      LODWORD(v93) = 0;
                      WTF::fastFree(v68, v50);
                    }
                    v73 = v104[0];
                    v104[0] = 0;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 2)
                        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v50);
                      else
                        *(_DWORD *)v73 -= 2;
                    }
                    v74 = v102;
                    v102 = 0;
                    if (v74)
                    {
                      if (*(_DWORD *)v74 == 2)
                        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v50);
                      else
                        *(_DWORD *)v74 -= 2;
                    }
                    v75 = v100;
                    v100 = 0;
                    if (v75)
                    {
                      if (*(_DWORD *)v75 == 2)
                        WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v50);
                      else
                        *(_DWORD *)v75 -= 2;
                    }
                    v76 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v76)
                    {
                      if (*(_DWORD *)v76 == 2)
                        WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v50);
                      else
                        *(_DWORD *)v76 -= 2;
                    }
                    ++v57;
                  }
                  while (v57 != (uint64_t *)v58);
                }
                v78 = __ldxr(v52);
                if (v78 == 1)
                {
                  v6 = v90;
                  if (!__stlxr(0, v52))
                    break;
                }
                else
                {
                  __clrex();
                  v6 = v90;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v85 = v97;
        v97 = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v50);
          else
            *(_DWORD *)v85 -= 2;
        }
        goto LABEL_184;
      }
      *(_DWORD *)v45 -= 2;
    }
    if (v32)
      goto LABEL_94;
    goto LABEL_96;
  }
LABEL_219:
  __break(0xC471u);
  return result;
}

unsigned __int8 *WebCore::MediaElementSession::setWirelessVideoPlaybackDisabled(WebCore::MediaElementSession *this, int a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  unsigned __int8 v11;

  v11 = a2;
  if (a2)
    result = (unsigned __int8 *)WebCore::MediaElementSession::addBehaviorRestriction((uint64_t)this, 128);
  else
    result = (unsigned __int8 *)WebCore::MediaElementSession::removeBehaviorRestriction(this, 128);
  v4 = *(_QWORD *)(*((_QWORD *)this + 10) + 1136);
  if (!v4)
    return result;
  v5 = *(unsigned __int8 **)v4;
  if (__ldaxr(*(unsigned __int8 **)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_9:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v5))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v10[0] = "MediaElementSession";
  v10[1] = 20;
  v10[2] = "setWirelessVideoPlaybackDisabled";
  v10[3] = v9;
  if (*(_BYTE *)(v8 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v10);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 72) + 744))(*(_QWORD *)(v4 + 72), v11);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
}

_DWORD *WebCore::MediaElementSession::setPlaybackTarget(uint64_t a1, _DWORD **a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _DWORD *result;
  _DWORD *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *(_DWORD **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v3;
  if (v4)
  {
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v3 = *(_DWORD **)(a1 + 240);
    }
    else
    {
      --v4[2];
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v3)
    v6 = v3[2] + 1;
  else
    v6 = MEMORY[8];
  v3[2] = v6 + 1;
  v8 = v3;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v5 + 144))(v5, &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  if (v3[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::MediaElementSession::externalOutputDeviceAvailableDidChange(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  WTF::MonotonicTime *v5;
  BOOL v6;
  double v7;
  _QWORD v8[4];
  char v9;

  v9 = a2;
  if (*(unsigned __int8 *)(this + 249) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 32) + 248))(*(_QWORD *)(this + 32));
    v5 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 256))(*(_QWORD *)(v3 + 32));
    v8[0] = "MediaElementSession";
    v8[1] = 20;
    v8[2] = "externalOutputDeviceAvailableDidChange";
    v8[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      if (WebCore::LogMedia)
        v6 = byte_1ECE7C490 >= 3u;
      else
        v6 = 0;
      if (v6)
      {
        v5 = (WTF::MonotonicTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v8);
        v2 = v9;
      }
    }
    *(_BYTE *)(v3 + 249) = v2;
    *(_QWORD *)(v3 + 208) = 0;
    WTF::MonotonicTime::now(v5);
    return WebCore::TimerBase::setNextFireTime(v3 + 184, v7 + 0.0);
  }
  return this;
}

uint64_t WebCore::MediaElementSession::isPlayingToWirelessPlaybackTarget(WebCore::MediaElementSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 152))(*((_QWORD *)this + 4));
}

uint64_t WebCore::MediaElementSession::setShouldPlayToPlaybackTarget(WebCore::MediaElementSession *this, unsigned __int8 a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  WebCore::PlatformMediaSessionManager *v9;
  uint64_t v10;
  _QWORD v12[4];
  unsigned __int8 v13;

  v2 = a2;
  v13 = a2;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v12[0] = "MediaElementSession";
  v12[1] = 20;
  v12[2] = "setShouldPlayToPlaybackTarget";
  v12[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v12);
      v2 = v13;
    }
  }
  *((_BYTE *)this + 248) = v2;
  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::MediaElementSession *)((char *)this + 328));
  }
  v7 = *((_QWORD *)this + 10);
  v8 = WebCore::MediaElementSession::preferredBufferingPolicy(this);
  v9 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v7, v8);
  v10 = WebCore::PlatformMediaSessionManager::sharedManager(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 192))(v10);
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4), v13);
}

uint64_t WebCore::MediaElementSession::playbackTargetPickerWasDismissed(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD v6[4];

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v6[0] = "MediaElementSession";
  v6[1] = 20;
  v6[2] = "playbackTargetPickerWasDismissed";
  v6[3] = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia)
      v4 = byte_1ECE7C490 >= 3u;
    else
      v4 = 0;
    if (v4)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v6);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
}

_DWORD *WebCore::MediaElementSession::mediaEngineUpdated(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  _DWORD *result;
  _DWORD *v5;
  uint64_t v6;
  _QWORD v7[4];

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v7[0] = "MediaElementSession";
  v7[1] = 20;
  v7[2] = "mediaEngineUpdated";
  v7[3] = result;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      result = (_DWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v7);
  }
  if ((*((_BYTE *)this + 88) & 0x80) != 0)
    result = WebCore::MediaElementSession::setWirelessVideoPlaybackDisabled(this, 1);
  v5 = (_DWORD *)*((_QWORD *)this + 30);
  if (v5)
  {
    v6 = *((_QWORD *)this + 4);
    v5[2] += 2;
    v7[0] = v5;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 144))(v6, v7);
    result = (_DWORD *)v7[0];
    v7[0] = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    if (v5[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  if (*((_BYTE *)this + 248))
    return (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4), 1);
  return result;
}

uint64_t WebCore::MediaElementSession::resetPlaybackSessionState(WebCore::MediaElementSession *this)
{
  *((_QWORD *)this + 32) = 0;
  return WebCore::MediaElementSession::addBehaviorRestriction((uint64_t)this, 24576);
}

uint64_t WebCore::MediaElementSession::suspendBuffering(WebCore::MediaElementSession *this)
{
  uint64_t v1;
  int v2;
  WebCore::PlatformMediaSessionManager *v3;
  uint64_t v4;
  WebCore::MediaElementSession *v6;

  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    v6 = this;
    WebCore::TimerBase::stopSlowCase((WebCore::MediaElementSession *)((char *)this + 328));
    this = v6;
  }
  v1 = *((_QWORD *)this + 10);
  v2 = WebCore::MediaElementSession::preferredBufferingPolicy(this);
  v3 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v1, v2);
  v4 = WebCore::PlatformMediaSessionManager::sharedManager(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4);
}

uint64_t WebCore::MediaElementSession::resumeBuffering(WebCore::MediaElementSession *this)
{
  uint64_t v1;
  int v2;
  WebCore::PlatformMediaSessionManager *v3;
  uint64_t v4;
  WebCore::MediaElementSession *v6;

  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    v6 = this;
    WebCore::TimerBase::stopSlowCase((WebCore::MediaElementSession *)((char *)this + 328));
    this = v6;
  }
  v1 = *((_QWORD *)this + 10);
  v2 = WebCore::MediaElementSession::preferredBufferingPolicy(this);
  v3 = (WebCore::PlatformMediaSessionManager *)WebCore::HTMLMediaElement::setBufferingPolicy(v1, v2);
  v4 = WebCore::PlatformMediaSessionManager::sharedManager(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4);
}

uint64_t WebCore::MediaElementSession::allowsPictureInPicture(WebCore::MediaElementSession *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 680) + 664) >> 24) & 1;
}

BOOL WebCore::MediaElementSession::requiresPlaybackTargetRouteMonitoring(WebCore::MediaElementSession *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!*((_BYTE *)this + 250))
    return 0;
  v1 = *((_QWORD *)this + 10);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 1992);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 1264))(v1))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3 && *(_QWORD *)(v2 + 56))
    return 1;
  if (*(_DWORD *)(v1 + 1080))
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  v6 = *(_QWORD *)(v5 + 528);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          if (!*(_BYTE *)(v5 + 3437) && (*(_WORD *)(v9 + 658) & 4) != 0)
            return 1;
        }
      }
    }
  }
  v10 = *(_QWORD *)(v1 + 1136);
  return v10 && *(_BYTE *)(v10 + 225) != 0;
}

uint64_t WebCore::MediaElementSession::didReceiveRemoteControlCommand(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  WebCore::NavigatorMediaSession *v8;
  WebCore::Navigator *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  BOOL v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  WebCore::NavigatorMediaSession *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  WebCore::NavigatorMediaSession *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  char v41;
  __int16 v42;
  unsigned __int8 v43;

  v5 = result;
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 80) + 40) + 8);
  v7 = (_DWORD *)v6[87];
  if (!v7)
  {
    v10 = 0;
LABEL_20:
    v17 = v6[66];
    if (!v17)
      goto LABEL_60;
    v18 = *(_QWORD *)(v17 + 8);
    if (!v18)
      goto LABEL_60;
    v19 = *(_QWORD *)(v18 + 24);
    if (!v19)
      goto LABEL_60;
    v20 = *(_QWORD *)(v19 + 8);
    if (!v20)
      goto LABEL_60;
    v21 = v6[402];
    v22 = *(_DWORD *)v20 + 1;
    *(_DWORD *)v20 += 2;
    if (v21 < 2)
    {
      if (v22)
      {
        LOBYTE(v23) = 0;
        *(_DWORD *)v20 = v22;
        goto LABEL_58;
      }
      WebCore::Page::~Page(v20);
      result = WTF::fastFree(v28, v29);
      goto LABEL_57;
    }
    v23 = *(_DWORD *)(v20 + 1024) & 0x36C7800;
    if (v22)
    {
      *(_DWORD *)v20 = v22;
      if (!v23)
        goto LABEL_58;
    }
    else
    {
      WebCore::Page::~Page(v20);
      result = WTF::fastFree(v26, v27);
      if (!v23)
      {
LABEL_58:
        if (*(_DWORD *)v20 == 1)
        {
          WebCore::Page::~Page(v20);
          result = WTF::fastFree(v35, v36);
          if ((v23 & 1) != 0)
            goto LABEL_63;
        }
        else
        {
          --*(_DWORD *)v20;
          if ((v23 & 1) != 0)
            goto LABEL_63;
        }
LABEL_60:
        v43 = a2;
        v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 248))(*(_QWORD *)(v5 + 32));
        v31 = (WebCore::NavigatorMediaSession *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
        v33 = v32;
        v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 256))(*(_QWORD *)(v5 + 32));
        v37 = v31;
        v38 = v33;
        v39 = "didReceiveRemoteControlCommand";
        v40 = v34;
        if (*(_BYTE *)(v30 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::PlatformMediaSessionRemoteControlCommandType>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v37, &v43);
          a2 = v43;
        }
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 32) + 56))(*(_QWORD *)(v5 + 32), a2, a3);
LABEL_63:
        if (!v7)
          return result;
        goto LABEL_64;
      }
    }
    if ((a2 - 2) >= 2)
    {
      if ((_DWORD)a2 != 4)
      {
        if ((_DWORD)a2 != 1)
        {
LABEL_57:
          LOBYTE(v23) = 0;
          goto LABEL_58;
        }
        goto LABEL_35;
      }
      if ((*(_BYTE *)(v20 + 352) & 0xF) != 0)
      {
LABEL_35:
        v24 = v20;
        v25 = 0;
LABEL_37:
        result = WebCore::Page::setMuted(v24, v25);
        LOBYTE(v23) = 1;
        goto LABEL_58;
      }
    }
    v24 = v20;
    v25 = 15;
    goto LABEL_37;
  }
  WebCore::LocalDOMWindow::protectedNavigator(v7, &v37);
  v8 = v37;
  result = (uint64_t)WebCore::NavigatorMediaSession::mediaSession(v37, v9);
  v10 = result;
  if (*((_DWORD *)v8 + 4) == 1)
    result = (*(uint64_t (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v8 + 16))(v8);
  else
    --*((_DWORD *)v8 + 4);
  ++*(_DWORD *)(v10 + 24);
  v11 = (unsigned __int8 *)(v10 + 160);
  if (__ldaxr((unsigned __int8 *)(v10 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_9;
  }
  result = MEMORY[0x19AEA534C](v10 + 160);
LABEL_9:
  v13 = *(_QWORD *)(v10 + 120);
  if (v13)
    v14 = *(_DWORD *)(v13 - 12) != 0;
  else
    v14 = 0;
  v15 = __ldxr(v11);
  if (v15 == 1)
  {
    if (!__stlxr(0, v11))
    {
      if (v14)
        goto LABEL_15;
      goto LABEL_19;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 160));
  if (!v14)
  {
LABEL_19:
    v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 40) + 8);
    goto LABEL_20;
  }
LABEL_15:
  LOBYTE(v37) = 0;
  LOBYTE(v38) = 0;
  LOBYTE(v39) = 0;
  LOBYTE(v40) = 0;
  v41 = 0;
  v42 = 0;
  switch((int)a2)
  {
    case 0:
    case 5:
    case 6:
    case 7:
    case 8:
      break;
    case 2:
      v16 = 1;
      goto LABEL_50;
    case 3:
      v16 = 7;
      goto LABEL_50;
    case 4:
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 80) + 1384))(*(_QWORD *)(v5 + 80)) ^ 1;
      goto LABEL_50;
    case 9:
      if (!*(_BYTE *)(a3 + 8))
        break;
      LOBYTE(v37) = 8;
      v40 = *(_QWORD *)a3;
      v41 = 1;
      v42 = *(unsigned __int8 *)(v5 + 392) | 0x100;
      goto LABEL_51;
    case 10:
      if (*(_BYTE *)(a3 + 8))
      {
        v38 = *(_QWORD *)a3;
        LOBYTE(v39) = 1;
      }
      v16 = 3;
      goto LABEL_50;
    case 11:
      if (*(_BYTE *)(a3 + 8))
      {
        v38 = *(_QWORD *)a3;
        LOBYTE(v39) = 1;
      }
      v16 = 2;
      goto LABEL_50;
    case 12:
      v16 = 5;
      goto LABEL_50;
    case 13:
      v16 = 4;
LABEL_50:
      LOBYTE(v37) = v16;
      goto LABEL_51;
    case 14:
      *(_BYTE *)(v5 + 392) = 1;
      break;
    case 15:
      *(_BYTE *)(v5 + 392) = 0;
      break;
    default:
LABEL_51:
      result = WebCore::MediaSession::callActionHandler(v10, (unsigned __int8 *)&v37, 1);
      break;
  }
LABEL_64:
  if (*(_DWORD *)(v10 + 24) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  --*(_DWORD *)(v10 + 24);
  return result;
}

BOOL WebCore::MediaElementSession::hasNowPlayingInfo(WebCore::MediaElementSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::NavigatorMediaSession *v5;
  WebCore::Navigator *v6;
  WebCore::MediaSession *v7;
  _BOOL8 v8;
  unsigned __int8 *v9;
  uint64_t v12;
  BOOL v13;
  int v14;
  WebCore::NavigatorMediaSession *v15;

  if (!WebCore::MediaElementSession::canShowControlsManager((uint64_t)this, 1u))
    return 0;
  v2 = *((_QWORD *)this + 10);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  v4 = *(_QWORD *)(v3 + 696);
  if (v4)
  {
    WebCore::LocalDOMWindow::protectedNavigator(*(_DWORD **)(v3 + 696), &v15);
    v5 = v15;
    v7 = WebCore::NavigatorMediaSession::mediaSession(v15, v6);
    if (*((_DWORD *)v5 + 4) == 1)
      (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v5 + 16))(v5);
    else
      --*((_DWORD *)v5 + 4);
    ++*((_DWORD *)v7 + 6);
    v2 = *((_QWORD *)this + 10);
  }
  else
  {
    v7 = 0;
  }
  if (!*(_BYTE *)(v2 + 1544) || *(_DWORD *)(v2 + 1536))
  {
    v8 = 1;
    if (!v4)
      return v8;
    goto LABEL_10;
  }
  if (!v4)
    return 0;
  v9 = (unsigned __int8 *)v7 + 160;
  if (__ldaxr((unsigned __int8 *)v7 + 160))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C]((char *)v7 + 160);
LABEL_20:
  v12 = *((_QWORD *)v7 + 15);
  if (v12)
    v13 = *(_DWORD *)(v12 - 12) != 0;
  else
    v13 = 0;
  v14 = __ldxr(v9);
  if (v14 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_28;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::MediaSession *)((char *)v7 + 160));
LABEL_28:
  v8 = v13 || *((_QWORD *)v7 + 6);
LABEL_10:
  if (*((_DWORD *)v7 + 6) == 1)
    (*(void (**)(WebCore::MediaSession *))(*(_QWORD *)v7 + 16))(v7);
  else
    --*((_DWORD *)v7 + 6);
  return v8;
}

uint64_t WebCore::MediaElementSession::computeNowPlayingInfo@<X0>(WebCore::MediaElementSession *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  double v12;
  double v13;
  WTF::StringImpl *v14;
  double v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  WebCore::NavigatorMediaSession *v34;
  WebCore::Navigator *v35;
  WebCore::MediaSession *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41;
  WTF *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WebCore::NavigatorMediaSession *v47[2];
  __int128 v48;
  char v49;
  char v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  __int128 v56;
  _BYTE v57[26];
  WTF::StringImpl *v58;

  result = WebCore::MediaElementSession::hasNowPlayingInfo(this);
  if ((result & 1) != 0
    && (result = *((_QWORD *)this + 10), (v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 528)) != 0)
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    ++*(_DWORD *)v8;
    v9 = (~*(unsigned __int16 *)(v8 + 658) & 5) != 0;
    v10 = *((_BYTE *)this + 48) == 2;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1856))(result);
    v12 = -1.0;
    v13 = -1.0;
    if (v11)
      v13 = (*(double (**)(_QWORD))(**((_QWORD **)this + 10) + 1376))(*((_QWORD *)this + 10));
    v15 = (*(double (**)(_QWORD))(**((_QWORD **)this + 10) + 1360))(*((_QWORD *)this + 10));
    v16 = v11 ^ 1;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      v16 = 1;
    if (!v16)
      v12 = v15;
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 528);
    v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    if (!v17)
      goto LABEL_21;
    v19 = *(_QWORD *)(v17 + 8);
    if (!v19)
      goto LABEL_21;
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = *(_QWORD *)(*(_QWORD *)(v19 + 280) + 336);
    if (v22)
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v22 + 72))(&v58, v22);
    do
    {
      v23 = __ldaxr(v20);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v20));
    if (!v24)
    {
      atomic_store(1u, v20);
      v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v44 = off_1E31FE290;
      v44[1] = v20;
      *(_QWORD *)&v51 = v44;
      WTF::ensureOnMainThread();
      v45 = v51;
      *(_QWORD *)&v51 = 0;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    }
    if (!v22)
    {
LABEL_21:
      v25 = *v18;
      if (*v18)
        *(_DWORD *)v25 += 2;
      v58 = v25;
    }
    {
      v26 = WebCore::presentingApplicationBundleIdentifierStorage(void)::identifier;
      if (WebCore::presentingApplicationBundleIdentifierStorage(void)::identifier)
      {
        *(_DWORD *)WebCore::presentingApplicationBundleIdentifierStorage(void)::identifier += 2;
        v27 = v58;
        v58 = (WTF::StringImpl *)v26;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v14);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
    }
    else
    {
      WebCore::presentingApplicationBundleIdentifierStorage(void)::identifier = 0;
    }
    WebCore::HTMLMediaElement::mediaSessionTitle(*((_QWORD **)this + 10), (WTF::StringImpl **)&v51);
    v29 = *v18;
    if (*v18)
      *(_DWORD *)v29 += 4;
    *((_QWORD *)&v51 + 1) = v29;
    *(_QWORD *)&v52 = v29;
    v30 = v58;
    if (v58)
      *(_DWORD *)v58 += 2;
    *((_QWORD *)&v52 + 1) = v30;
    LOBYTE(v53) = 0;
    v55 = 0;
    *(double *)&v56 = v13;
    *((double *)&v56 + 1) = v12;
    *(_QWORD *)v57 = 0x3FF0000000000000;
    v57[8] = v11;
    v31 = *((_QWORD *)this + 10);
    *(_QWORD *)&v57[16] = *(_QWORD *)(v31 + 952);
    v57[24] = v10;
    v57[25] = v9;
    v32 = *(_QWORD *)(v8 + 1008);
    if ((v32 & 0x8000000000000000) == 0 || v32 == -1)
    {
      v33 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v31 + 40) + 8) + 696);
      if (v33)
      {
        WebCore::LocalDOMWindow::protectedNavigator(v33, v47);
        v34 = v47[0];
        v36 = WebCore::NavigatorMediaSession::mediaSession(v47[0], v35);
        if (*((_DWORD *)v34 + 4) == 1)
          (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v34 + 16))(v34);
        else
          --*((_DWORD *)v34 + 4);
        ++*((_DWORD *)v36 + 6);
        WebCore::MediaSession::updateNowPlayingInfo((uint64_t)v36, (uint64_t)&v51);
        if (*((_DWORD *)v36 + 6) == 1)
          (*(void (**)(WebCore::MediaSession *))(*(_QWORD *)v36 + 16))(v36);
        else
          --*((_DWORD *)v36 + 6);
      }
      *(_OWORD *)a2 = v51;
      v38 = *((_QWORD *)&v52 + 1);
      v37 = v52;
      v51 = 0u;
      v52 = 0u;
    }
    else
    {
      v50 = 0;
      *(_OWORD *)v47 = 0u;
      v48 = 0u;
      v49 = 0;
      WebCore::NowPlayingMetadata::operator=((WTF::StringImpl **)&v51, v47);
      WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)v47, v46);
      *(_OWORD *)a2 = v51;
      v38 = *((_QWORD *)&v52 + 1);
      v37 = v52;
      v51 = 0u;
      v52 = 0u;
    }
    *(_QWORD *)(a2 + 16) = v37;
    *(_QWORD *)(a2 + 24) = v38;
    *(_BYTE *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 56) = 0;
    if (v55)
    {
      *(_QWORD *)(a2 + 32) = v53;
      v39 = v54;
      v53 = 0;
      v54 = 0uLL;
      *(_OWORD *)(a2 + 40) = v39;
      *(_BYTE *)(a2 + 56) = 1;
    }
    v40 = *(_OWORD *)v57;
    *(_OWORD *)(a2 + 64) = v56;
    *(_OWORD *)(a2 + 80) = v40;
    *(_OWORD *)(a2 + 90) = *(_OWORD *)&v57[10];
    *(_BYTE *)(a2 + 112) = 1;
    WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)&v51, v28);
    result = (uint64_t)v58;
    v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v41);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::Page::~Page(v8);
      return WTF::fastFree(v42, v43);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 112) = 0;
  }
  return result;
}

uint64_t WebCore::MediaElementSession::updateMediaUsageIfChanged(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  _BOOL4 v24;
  int canShowControlsManager;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  const WebCore::HTMLMediaElement *v34;
  int v35;
  _BOOL4 v36;
  WebCore *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _BOOL4 v50;
  unsigned int v51;
  int v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  const WTF::StringImpl *v57;
  char v58;
  _BOOL4 v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  void *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int isElementRectMostlyInMainFrame;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  WTF::StringImpl *v104;
  _BYTE v105[8];
  _QWORD v106[5];

  v2 = *(_QWORD *)(this + 80);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 528);
  if (!v4)
    goto LABEL_148;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_148;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_148;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_148;
  v8 = this;
  ++*(_DWORD *)v7;
  v9 = *(_QWORD *)(v7 + 1008);
  if (v9 < 0 && v9 != -1)
    goto LABEL_146;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2528))(v2);
  if ((this & 1) == 0 && !*(_BYTE *)(v2 + 1544) && (!*(_BYTE *)(v8 + 168) || !*(_BYTE *)(v8 + 136)))
    goto LABEL_146;
  v10 = *(_QWORD *)(v3 + 1992);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 8) + 1;
    *(_DWORD *)(v10 + 8) = v11;
    v12 = *(_QWORD *)(v10 + 56);
    if (!v12)
    {
      v16 = 0;
LABEL_32:
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x195CA8E30);
      }
      *(_DWORD *)(v10 + 8) = v11 - 1;
      goto LABEL_34;
    }
    v13 = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v12 + 24) = v13 + 2;
    v14 = *(_QWORD *)(v8 + 80);
    v15 = *(_WORD *)(v12 + 28);
    if ((v15 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v14 + 40) == v12 && (*(_WORD *)(v14 + 28) & 0xF000) != 0x9000)
      {
        v16 = (*(unsigned __int8 *)(v14 + 22) >> 3) & 1;
        if (v13)
          goto LABEL_31;
        goto LABEL_168;
      }
    }
    else if ((v15 & 4) != 0
           && *(_QWORD *)(v12 + 80)
           && ((*(unsigned __int8 *)(v14 + 22) ^ *(unsigned __int8 *)(v12 + 22)) & 8) == 0)
    {
      do
      {
        v14 = *(_QWORD *)(v14 + 32);
        v16 = v14 != 0;
      }
      while (v14 != v12 && v14 != 0);
LABEL_30:
      if (v13)
      {
LABEL_31:
        *(_DWORD *)(v12 + 24) = v13;
        goto LABEL_32;
      }
LABEL_168:
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
        v11 = *(_DWORD *)(v10 + 8);
      }
      goto LABEL_32;
    }
    v16 = 0;
    goto LABEL_30;
  }
  v16 = 0;
LABEL_34:
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 32) + 8))(*(_QWORD *)(v8 + 32));
  v92 = v18 == 3;
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 32) + 8))(*(_QWORD *)(v8 + 32));
  v91 = v19 == 1;
  v20 = WebCore::Document::processingUserGestureForMedia((WebCore::Document *)v3);
  v21 = *(_QWORD *)(v8 + 80);
  v22 = *(_DWORD *)(v21 + 1265);
  v23 = *(WTF::StringImpl **)(v21 + 912);
  if (v23)
    *(_DWORD *)v23 += 2;
  v104 = v23;
  v83 = *(_DWORD *)(v21 + 920);
  v84 = *(_DWORD *)(v21 + 924);
  v85 = *(_DWORD *)(v21 + 928);
  v86 = *(_DWORD *)(v21 + 932);
  v87 = *(_DWORD *)(v21 + 936);
  v88 = *(_DWORD *)(v21 + 940);
  v89 = *(_DWORD *)(v21 + 944);
  v90 = *(_DWORD *)(v21 + 948);
  v24 = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 2528))(v21) & 1) != 0 || *(_BYTE *)(v21 + 1544) != 0;
  v103 = v24;
  v101 = *(unsigned __int8 *)(v8 + 48) == 2;
  canShowControlsManager = WebCore::MediaElementSession::canShowControlsManager(v8, 0);
  v99 = (~*(unsigned __int16 *)(v7 + 658) & 5) != 0;
  v100 = canShowControlsManager;
  v26 = *(_QWORD *)(v8 + 80);
  v27 = *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8);
  if (*(_BYTE *)(v27 + 467))
    v28 = 1;
  else
    v28 = *(unsigned __int8 *)(v27 + 468) != 0;
  v98 = v28;
  v29 = *(unsigned __int8 *)(v26 + 1265);
  v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 1800))(v26);
  v96 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 80) + 1472))(*(_QWORD *)(v8 + 80));
  v95 = (*(_WORD *)(v3 + 3358) & 0x10) != 0
     && (v30 = *(_QWORD *)(v3 + 528)) != 0
     && (v31 = *(_QWORD *)(v30 + 8)) != 0
     && *(_QWORD *)(*(_QWORD *)(v31 + 128) + 8) == v31;
  v94 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 80) + 1272))(*(_QWORD *)(v8 + 80));
  v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 80) + 1280))(*(_QWORD *)(v8 + 80));
  v32 = *(_QWORD **)(v8 + 80);
  if ((v32[8] & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v32[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA8E50);
    }
    if ((*(_BYTE *)((v32[8] & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((v32[8] & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA8E70);
    }
  }
  v82 = (v32[8] & 0xFFFFFFFFFFFFLL) != 0;
  if (v18 == 3)
    v81 = !v20 & (*(unsigned __int8 *)(v8 + 89) >> 5);
  else
    v81 = 0;
  v33 = v22;
  v35 = (*(uint64_t (**)(_QWORD *))(*v32 + 1280))(v32);
  v36 = 0;
  v37 = *(WebCore **)(v8 + 80);
  if (v35 && (v33 & 2) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 5) + 8) + 528);
    v36 = v38
       && (v39 = *(_QWORD *)(v38 + 8)) != 0
       && (v40 = *(_QWORD *)(v39 + 24)) != 0
       && (v41 = *(_QWORD *)(v40 + 8)) != 0
       && *(unsigned __int8 *)(v41 + 1089) != 0;
  }
  v73 = v29;
  isElementRectMostlyInMainFrame = WebCore::isElementRectMostlyInMainFrame(v37, v34);
  WebCore::MediaElementSession::playbackStateChangePermitted(v8, 0, (uint64_t)v105);
  v42 = 0;
  v68 = v105[4];
  v78 = *(unsigned __int8 *)(v7 + 1095);
  if ((*(_WORD *)(v3 + 3358) & 0x10) != 0)
  {
    v43 = *(_QWORD *)(v3 + 528);
    if (v43)
    {
      v43 = *(_QWORD *)(v43 + 8);
      if (v43)
      {
        v43 = *(_QWORD *)(v43 + 120);
        if (v43)
          v43 = *(_QWORD *)(v43 + 8);
      }
    }
    v42 = v43 == 0;
  }
  v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 40) + 8);
  v45 = *(_QWORD *)(v44 + 528);
  if (!v45)
    goto LABEL_73;
  v46 = *(_QWORD *)(v45 + 8);
  if (!v46)
    goto LABEL_73;
  v47 = *(_QWORD *)(v46 + 24);
  if (v47)
    v47 = *(_QWORD *)(v47 + 8);
  if ((*(_WORD *)(v44 + 3358) & 0x10) != 0)
  {
    v48 = *(_QWORD *)(v46 + 120);
    if (v48)
      v48 = *(_QWORD *)(v48 + 8);
    v102 = 0;
    if (!v48 && v47)
      v102 = *(unsigned __int8 *)(v47 + 1088) != 0;
  }
  else
  {
LABEL_73:
    v102 = 0;
  }
  v77 = v42;
  if (WebCore::MediaElementSession::requiresFullscreenForVideoPlayback((WebCore::MediaElementSession *)v8)
    && (*(_BYTE *)(v8 + 88) & 4) != 0
    && !WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 40)
                                                                               + 8)))
  {
    v64 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 32) + 248))(*(_QWORD *)(v8 + 32));
    v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 32) + 256))(*(_QWORD *)(v8 + 32));
    v106[0] = "MediaElementSession";
    v106[1] = 20;
    v106[2] = "fullscreenPermitted";
    v106[3] = v65;
    if (*(_BYTE *)(v64 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v106, "returning FALSE");
    v76 = 1;
  }
  else
  {
    v76 = 0;
  }
  if (v19 == 1)
    v75 = !v20 & (*(unsigned __int8 *)(v8 + 88) >> 1);
  else
    v75 = 0;
  v80 = v36;
  v50 = v18 == 3
     && ((*(_BYTE *)(v8 + 88) & 0x20) == 0 ? (v49 = 1) : (v49 = v20),
         (v49 & 1) == 0
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 80) + 1472))(*(_QWORD *)(v8 + 80)) & 1) == 0)
     && (*(double (**)(_QWORD))(**(_QWORD **)(v8 + 80) + 1456))(*(_QWORD *)(v8 + 80)) != 0.0;
  v51 = *(_DWORD *)(v8 + 88);
  if (v19 == 1)
    v52 = !v20 & (v51 >> 15);
  else
    v52 = 0;
  v53 = (v33 & 2) == 0;
  v54 = (v51 & 0x2000) == 0 || v20;
  v70 = v54;
  v55 = *(_QWORD *)(v8 + 80);
  v56 = *(_DWORD *)(v55 + 1265);
  this = WebCore::isElementLargeEnoughForMainContent(v55, 0);
  v58 = this;
  v71 = v52;
  v72 = v50;
  if ((*(_QWORD *)(*(_QWORD *)(v8 + 80) + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v8 + 80) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA8E90);
    }
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v8 + 80) + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v8 + 80) + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA8EB0);
    }
    v59 = (*(_WORD *)((*(_QWORD *)(*(_QWORD *)(v8 + 80) + 64) & 0xFFFFFFFFFFFFLL) + 0x4C) & 6) == 2;
  }
  else
  {
    v59 = 0;
  }
  v60 = (v73 >> 5) & 1;
  v61 = v68 ^ 1;
  v62 = (v56 >> 26) & 1;
  v63 = v53 & (v51 >> 14);
  if (*(_BYTE *)(v8 + 168))
  {
    v69 = v59;
    v74 = this;
    this = WTF::equal(*(WTF **)(v8 + 96), v104, v57);
    if ((_DWORD)this
      && *(unsigned __int8 *)(v8 + 136) == v103
      && *(unsigned __int8 *)(v8 + 137) == v101
      && *(unsigned __int8 *)(v8 + 138) == v100
      && *(unsigned __int8 *)(v8 + 139) == v99
      && *(unsigned __int8 *)(v8 + 140) == v98
      && *(unsigned __int8 *)(v8 + 141) == v60
      && *(unsigned __int8 *)(v8 + 142) == v97
      && *(unsigned __int8 *)(v8 + 143) == v96
      && *(unsigned __int8 *)(v8 + 144) == v95
      && *(unsigned __int8 *)(v8 + 145) == v91
      && *(unsigned __int8 *)(v8 + 146) == v92
      && *(unsigned __int8 *)(v8 + 147) == v94
      && *(unsigned __int8 *)(v8 + 148) == v93
      && *(unsigned __int8 *)(v8 + 149) == v82
      && *(unsigned __int8 *)(v8 + 150) == v81
      && *(unsigned __int8 *)(v8 + 151) == v80
      && *(unsigned __int8 *)(v8 + 152) == isElementRectMostlyInMainFrame
      && *(unsigned __int8 *)(v8 + 153) == v61
      && *(unsigned __int8 *)(v8 + 154) == v78
      && *(unsigned __int8 *)(v8 + 155) == v77
      && *(unsigned __int8 *)(v8 + 156) == v102
      && *(unsigned __int8 *)(v8 + 157) == v76
      && *(unsigned __int8 *)(v8 + 158) == v75
      && *(unsigned __int8 *)(v8 + 159) == v72
      && *(unsigned __int8 *)(v8 + 160) == v71
      && *(unsigned __int8 *)(v8 + 161) == v70
      && *(unsigned __int8 *)(v8 + 162) == v63
      && *(unsigned __int8 *)(v8 + 163) == v62
      && *(unsigned __int8 *)(v8 + 164) == v16
      && *(unsigned __int8 *)(v8 + 165) == v74
      && *(unsigned __int8 *)(v8 + 166) == v69)
    {
      if (v104)
      {
        if (*(_DWORD *)v104 == 2)
          this = WTF::StringImpl::destroy(v104, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v104 -= 2;
      }
      goto LABEL_146;
    }
    v58 = v74;
    LOBYTE(v59) = v69;
    if (*(_BYTE *)(v8 + 168))
    {
      this = *(_QWORD *)(v8 + 96);
      *(_QWORD *)(v8 + 96) = v104;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
          LOBYTE(v59) = v69;
          v58 = v74;
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      *(_DWORD *)(v8 + 104) = v83;
      *(_DWORD *)(v8 + 108) = v84;
      *(_DWORD *)(v8 + 112) = v85;
      *(_DWORD *)(v8 + 116) = v86;
      *(_DWORD *)(v8 + 120) = v87;
      *(_DWORD *)(v8 + 124) = v88;
      *(_DWORD *)(v8 + 128) = v89;
      *(_DWORD *)(v8 + 132) = v90;
      *(_BYTE *)(v8 + 136) = v103;
      *(_BYTE *)(v8 + 137) = v101;
      *(_BYTE *)(v8 + 138) = v100;
      *(_BYTE *)(v8 + 139) = v99;
      *(_BYTE *)(v8 + 140) = v98;
      *(_BYTE *)(v8 + 141) = v60;
      *(_BYTE *)(v8 + 142) = v97;
      *(_BYTE *)(v8 + 143) = v96;
      *(_BYTE *)(v8 + 144) = v95;
      *(_BYTE *)(v8 + 145) = v91;
      *(_BYTE *)(v8 + 146) = v92;
      *(_BYTE *)(v8 + 147) = v94;
      *(_BYTE *)(v8 + 148) = v93;
      *(_BYTE *)(v8 + 149) = v82;
      *(_BYTE *)(v8 + 150) = v81;
      *(_BYTE *)(v8 + 151) = v80;
      *(_BYTE *)(v8 + 152) = isElementRectMostlyInMainFrame;
      *(_BYTE *)(v8 + 153) = v61;
      *(_BYTE *)(v8 + 154) = v78;
      *(_BYTE *)(v8 + 155) = v77;
      *(_BYTE *)(v8 + 156) = v102;
      *(_BYTE *)(v8 + 157) = v76;
      *(_BYTE *)(v8 + 158) = v75;
      *(_BYTE *)(v8 + 159) = v72;
      *(_BYTE *)(v8 + 160) = v71;
      *(_BYTE *)(v8 + 161) = v70;
      *(_BYTE *)(v8 + 162) = v63;
      *(_BYTE *)(v8 + 163) = v62;
      *(_BYTE *)(v8 + 164) = v16;
      *(_BYTE *)(v8 + 165) = v58;
      *(_BYTE *)(v8 + 166) = v59;
      goto LABEL_146;
    }
  }
  *(_QWORD *)(v8 + 96) = v104;
  *(_DWORD *)(v8 + 104) = v83;
  *(_DWORD *)(v8 + 108) = v84;
  *(_DWORD *)(v8 + 112) = v85;
  *(_DWORD *)(v8 + 116) = v86;
  *(_DWORD *)(v8 + 120) = v87;
  *(_DWORD *)(v8 + 124) = v88;
  *(_DWORD *)(v8 + 128) = v89;
  *(_DWORD *)(v8 + 132) = v90;
  *(_BYTE *)(v8 + 136) = v103;
  *(_BYTE *)(v8 + 137) = v101;
  *(_BYTE *)(v8 + 138) = v100;
  *(_BYTE *)(v8 + 139) = v99;
  *(_BYTE *)(v8 + 140) = v98;
  *(_BYTE *)(v8 + 141) = v60;
  *(_BYTE *)(v8 + 142) = v97;
  *(_BYTE *)(v8 + 143) = v96;
  *(_BYTE *)(v8 + 144) = v95;
  *(_BYTE *)(v8 + 145) = v91;
  *(_BYTE *)(v8 + 146) = v92;
  *(_BYTE *)(v8 + 147) = v94;
  *(_BYTE *)(v8 + 148) = v93;
  *(_BYTE *)(v8 + 149) = v82;
  *(_BYTE *)(v8 + 150) = v81;
  *(_BYTE *)(v8 + 151) = v80;
  *(_BYTE *)(v8 + 152) = isElementRectMostlyInMainFrame;
  *(_BYTE *)(v8 + 153) = v61;
  *(_BYTE *)(v8 + 154) = v78;
  *(_BYTE *)(v8 + 155) = v77;
  *(_BYTE *)(v8 + 156) = v102;
  *(_BYTE *)(v8 + 157) = v76;
  *(_BYTE *)(v8 + 158) = v75;
  *(_BYTE *)(v8 + 159) = v72;
  *(_BYTE *)(v8 + 160) = v71;
  *(_BYTE *)(v8 + 161) = v70;
  *(_BYTE *)(v8 + 162) = v63;
  *(_BYTE *)(v8 + 163) = v62;
  *(_BYTE *)(v8 + 164) = v16;
  *(_BYTE *)(v8 + 165) = v58;
  *(_BYTE *)(v8 + 166) = v59;
  *(_BYTE *)(v8 + 168) = 1;
LABEL_146:
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::Page::~Page(v7);
    this = WTF::fastFree(v66, v67);
  }
  else
  {
    --*(_DWORD *)v7;
  }
LABEL_148:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::MediaElementSession::clientCharacteristicsChanged(WebCore::MediaElementSession *this, uint64_t a2)
{
  _DWORD *v4;
  WebCore::NavigatorMediaSession *v5;
  WebCore::Navigator *v6;
  WebCore::MediaSession *v7;
  WebCore::NavigatorMediaSession *v8;
  WebCore::NavigatorMediaSession *v9;
  double v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::NavigatorMediaSession *v14[3];
  char v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 696);
  if (v4)
  {
    WebCore::LocalDOMWindow::protectedNavigator(v4, v14);
    v5 = v14[0];
    v7 = WebCore::NavigatorMediaSession::mediaSession(v14[0], v6);
    if (*((_DWORD *)v5 + 4) == 1)
    {
      (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v5 + 16))(v5);
      if (!(_DWORD)a2)
        return WebCore::PlatformMediaSession::clientCharacteristicsChanged(this, a2);
    }
    else
    {
      --*((_DWORD *)v5 + 4);
      if (!(_DWORD)a2)
        return WebCore::PlatformMediaSession::clientCharacteristicsChanged(this, a2);
    }
    if (*((_BYTE *)v7 + 88))
    {
      v9 = (WebCore::NavigatorMediaSession *)*((_QWORD *)v7 + 8);
      v8 = (WebCore::NavigatorMediaSession *)*((_QWORD *)v7 + 9);
      v10 = (*(double (**)(_QWORD))(**((_QWORD **)this + 10) + 1360))(*((_QWORD *)this + 10));
      v14[0] = v9;
      v14[1] = v8;
      v14[2] = *(WebCore::NavigatorMediaSession **)&v10;
      v15 = 1;
      WebCore::MediaSession::setPositionState(v7, (__int128 *)v14, (uint64_t)v16);
      if (v18)
      {
        v12 = v17;
        v17 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
  }
  return WebCore::PlatformMediaSession::clientCharacteristicsChanged(this, a2);
}

WTF::StringImpl *WebCore::MediaElementSession::description@<X0>(WebCore::HTMLMediaElement **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  _WORD *v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  _WORD *v31;
  _WORD *v32;
  uint64_t v33;
  unsigned int v34;
  _WORD *v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE *v38;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  _DWORD *v69;
  _WORD *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  _WORD *v75;
  _WORD *v76;
  _WORD *v77;
  uint64_t v78;
  unsigned int v79;
  size_t v80;
  unsigned int v81;
  _BYTE *v82;
  unsigned __int128 *v83;
  size_t v84;
  unsigned int v85;
  uint64_t v86;
  _WORD *v87;
  unsigned int v88;
  char *v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned __int128 *v96;
  unsigned __int128 *v97;
  unsigned __int128 v98;
  char v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *result;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  int v107;
  char v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  _BYTE v112[12];

  *(_QWORD *)&v112[4] = *MEMORY[0x1E0C80C00];
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 1;
  WebCore::PlatformMediaSession::description((WebCore::PlatformMediaSession *)this, &v110);
  v5 = v110;
  if (v110)
  {
    v6 = *(_DWORD *)v110;
    *(_DWORD *)v110 += 2;
    v105 = v5;
    v107 = *((_DWORD *)v5 + 1);
    v110 = 0;
    if (v6)
      *(_DWORD *)v5 = v6;
    else
      WTF::StringImpl::destroy(v5, v4);
  }
  else
  {
    v105 = 0;
    v107 = 0;
  }
  WebCore::HTMLMediaElement::localizedSourceType(this[10], &v104);
  v111 = 2;
  v109 = v104;
  v110 = (WTF::StringImpl *)", ";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v105, (uint64_t)&v110, (uint64_t *)&v109);
  v8 = v104;
  v104 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this[10] + 170);
  if (v9)
  {
    ++*(_DWORD *)(v9 + 24);
    v10 = *(unsigned int *)(v9 + 68);
    if (!(_DWORD)v10)
      goto LABEL_61;
    v11 = 0;
    v12 = *(_QWORD *)(v9 + 56);
    while (1)
    {
      v13 = *(_QWORD *)(v12 + 8 * v11);
      if (*(_DWORD *)(v13 + 40) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x195CA9BA8);
      }
      if (*(_BYTE *)(v13 + 184))
        break;
      if (v10 == ++v11)
        goto LABEL_61;
    }
    if ((v11 & 0x80000000) != 0)
      goto LABEL_61;
    if (v10 <= v11)
      goto LABEL_61;
    v14 = *(_QWORD *)(v12 + 8 * v11);
    if (!v14)
      goto LABEL_61;
    if (*(_DWORD *)(v14 + 40) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x195CA9C60);
    }
    v15 = 0;
    ++*(_DWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 176);
    v18 = *(_DWORD *)(v16 + 16);
    v17 = *(_DWORD *)(v16 + 20);
    v19 = v18;
    do
    {
      ++v15;
      v20 = v19 > 9;
      v19 /= 0xAu;
    }
    while (v20);
    v21 = 1;
    v22 = *(_DWORD *)(v16 + 20);
    do
    {
      ++v21;
      v20 = v22 > 9;
      v22 /= 0xAu;
    }
    while (v20);
    v23 = v106;
    if ((v106 || (v23 = v105) != 0) && (*((_BYTE *)v23 + 16) & 4) == 0)
    {
      v24 = (_DWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v105);
      if (v24)
      {
        v25 = 0;
        *v24 = 2097196;
        v26 = v18;
        do
        {
          v112[v25--] = (v26 % 0xA) | 0x30;
          v20 = v26 > 9;
          v26 /= 0xAu;
        }
        while (v20);
        if (v25 + 14 <= 13)
        {
          v27 = v24 + 1;
          do
          {
            *v27++ = v112[v25 + 1];
            v28 = __CFADD__(v25++, 1);
          }
          while (!v28);
        }
        v29 = 0;
        do
        {
          ++v29;
          v20 = v18 > 9;
          v18 /= 0xAu;
        }
        while (v20);
        v30 = 0;
        *((_WORD *)v24 + v29 + 2) = 120;
        do
        {
          v112[v30--] = (v17 % 0xA) | 0x30;
          v20 = v17 > 9;
          v17 /= 0xAu;
        }
        while (v20);
        if (v30 + 14 <= 13)
        {
          v31 = (_WORD *)v24 + v29 + 3;
          do
          {
            *v31++ = v112[v30 + 1];
            v28 = __CFADD__(v30++, 1);
          }
          while (!v28);
        }
      }
    }
    else
    {
      v32 = (_WORD *)MEMORY[0x19AEA4824](&v105);
      if (v32)
      {
        v33 = 0;
        *v32 = 8236;
        v34 = v18;
        do
        {
          v112[v33--] = (v34 % 0xA) | 0x30;
          v20 = v34 > 9;
          v34 /= 0xAu;
        }
        while (v20);
        v35 = v32 + 1;
        if (v33 + 14 <= 13)
          memcpy(v32 + 1, &v112[v33 + 1], -v33);
        v36 = 0;
        do
        {
          ++v36;
          v20 = v18 > 9;
          v18 /= 0xAu;
        }
        while (v20);
        v37 = 0;
        v38 = (char *)v35 + v36;
        *v38 = 120;
        do
        {
          v112[v37--] = (v17 % 0xA) | 0x30;
          v20 = v17 > 9;
          v17 /= 0xAu;
        }
        while (v20);
        if (v37 + 14 <= 13)
          memcpy(v38 + 1, &v112[v37 + 1], -v37);
      }
    }
    v39 = *(WTF::StringImpl **)(*(_QWORD *)(v14 + 176) + 8);
    if (v39)
    {
      v40 = *(_DWORD *)v39;
      v41 = *((_DWORD *)v39 + 1);
      v42 = *(_DWORD *)v39 + 2;
      *(_DWORD *)v39 = v42;
      if (v40)
      {
        *(_DWORD *)v39 = v40;
        if (v41)
          goto LABEL_57;
      }
      else
      {
        WTF::StringImpl::destroy(v39, v7);
        if (v41)
        {
          v39 = *(WTF::StringImpl **)(*(_QWORD *)(v14 + 176) + 8);
          if (v39)
          {
            v42 = *(_DWORD *)v39 + 2;
LABEL_57:
            *(_DWORD *)v39 = v42;
            LOBYTE(v109) = 32;
            v110 = v39;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v105, (char *)&v109, (uint64_t *)&v110);
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v7);
            else
              *(_DWORD *)v39 -= 2;
            goto LABEL_59;
          }
          LOBYTE(v109) = 32;
          v110 = 0;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v105, (char *)&v109, (uint64_t *)&v110);
        }
      }
    }
LABEL_59:
    if (*(_DWORD *)(v14 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      --*(_DWORD *)(v14 + 16);
LABEL_61:
    if (*(_DWORD *)(v9 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
    else
      --*(_DWORD *)(v9 + 24);
  }
  v43 = *((_QWORD *)this[10] + 168);
  if (!v43)
    goto LABEL_82;
  ++*(_DWORD *)(v43 + 24);
  v44 = *(unsigned int *)(v43 + 68);
  if ((_DWORD)v44)
  {
    v45 = *(_QWORD **)(v43 + 56);
    v46 = 8 * v44;
    while (!*v45 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v45 + 48))(*v45))
    {
      ++v45;
      v46 -= 8;
      if (!v46)
        goto LABEL_80;
    }
    v47 = *v45;
    if (*v45)
    {
      if (*(_DWORD *)(v47 + 40) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x195CA9C40);
      }
      ++*(_DWORD *)(v47 + 16);
      v48 = *(_QWORD *)(v47 + 184);
      v49 = *(WTF::StringImpl **)(v48 + 8);
      if (!v49)
        goto LABEL_78;
      v50 = *(_DWORD *)v49;
      v51 = *((_DWORD *)v49 + 1);
      *(_DWORD *)v49 += 2;
      if (v50)
      {
        *(_DWORD *)v49 = v50;
        if (v51)
          goto LABEL_75;
      }
      else
      {
        WTF::StringImpl::destroy(v49, v7);
        if (v51)
        {
          v48 = *(_QWORD *)(v47 + 184);
LABEL_75:
          v52 = *(WTF::StringImpl **)(v48 + 8);
          if (v52)
          {
            *(_DWORD *)v52 += 2;
            v109 = v52;
            v110 = (WTF::StringImpl *)", ";
            v111 = 2;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v105, (uint64_t)&v110, (uint64_t *)&v109);
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v7);
            else
              *(_DWORD *)v52 -= 2;
          }
          else
          {
            v109 = 0;
            v110 = (WTF::StringImpl *)", ";
            v111 = 2;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v105, (uint64_t)&v110, (uint64_t *)&v109);
          }
        }
      }
LABEL_78:
      if (*(_DWORD *)(v47 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
      else
        --*(_DWORD *)(v47 + 16);
    }
  }
LABEL_80:
  if (*(_DWORD *)(v43 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 72))(v43);
  else
    --*(_DWORD *)(v43 + 24);
LABEL_82:
  v53 = *((_QWORD *)this[10] + 169);
  if (v53)
  {
    v54 = *(_DWORD *)(v53 + 24);
    *(_DWORD *)(v53 + 24) = v54 + 1;
    v55 = *(_DWORD *)(v53 + 124) + *(_DWORD *)(v53 + 108);
    v56 = *(_DWORD *)(v53 + 68);
    v57 = (v55 + v56);
    if (v55 + v56)
    {
      v103 = (v55 + v56);
      v58 = 0;
      while (1)
      {
        v59 = *(unsigned int *)(v53 + 124);
        if (v58 >= v59)
        {
          v61 = v58 - v59;
          v62 = *(_DWORD *)(v53 + 108);
          v28 = v61 >= v62;
          v63 = v61 - v62;
          if (v28)
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v63);
            if (*(_DWORD *)(v60 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195CA9C14);
            }
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v53 + 96) + 8 * v61);
            if (*(_DWORD *)(v60 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195CA9BF4);
            }
          }
        }
        else
        {
          v60 = *(_QWORD *)(*(_QWORD *)(v53 + 112) + 8 * v58);
          if (*(_DWORD *)(v60 + 40) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195CA9BC8);
          }
        }
        ++*(_DWORD *)(v60 + 16);
        if (*(_DWORD *)(v60 + 224) != 2)
          goto LABEL_139;
        v64 = *(_DWORD *)(v60 + 228);
        v65 = *(_QWORD *)(v60 + 72);
        if (v65)
          *(_DWORD *)v65 += 2;
        if ((v64 & 0x80000000) != 0)
        {
          v90 = -v64;
          v91 = 1;
          do
          {
            ++v91;
            v28 = v90 >= 0xA;
            v90 /= 0xAu;
          }
          while (v28);
        }
        else
        {
          v66 = 0;
          v67 = v64;
          do
          {
            ++v66;
            v20 = v67 > 9;
            v67 /= 0xAu;
          }
          while (v20);
        }
        v68 = v106;
        if ((v106 || (v68 = v105) != 0) && (*((_BYTE *)v68 + 16) & 4) == 0 || v65 && (*(_BYTE *)(v65 + 16) & 4) == 0)
        {
          v69 = (_DWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v105);
          if (v69)
          {
            *v69 = 2097196;
            v70 = v69 + 1;
            if ((v64 & 0x80000000) != 0)
            {
              v85 = -v64;
              v86 = 12;
              do
              {
                *((_BYTE *)&v110 + v86--) = (v85 % 0xA) | 0x30;
                v20 = v85 > 9;
                v85 /= 0xAu;
              }
              while (v20);
              *((_BYTE *)&v110 + v86) = 45;
              if (v86 + 2 <= 14)
              {
                v87 = v70;
                do
                {
                  *v87++ = *((unsigned __int8 *)&v110 + v86);
                  v20 = v86++ < 12;
                }
                while (v20);
              }
            }
            else
            {
              v71 = -1;
              v72 = 12;
              v73 = v64;
              do
              {
                v74 = v71;
                *((_BYTE *)&v110 + v72--) = (v73 % 0xA) | 0x30;
                --v71;
                v20 = v73 > 9;
                v73 /= 0xAu;
              }
              while (v20);
              if (v72 + 2 <= 13)
              {
                v75 = v70;
                do
                {
                  *v75++ = v112[v74 + 1];
                  v28 = __CFADD__(v74++, 1);
                }
                while (!v28);
              }
            }
            if ((v64 & 0x80000000) != 0)
            {
              v92 = -v64;
              v88 = 1;
              do
              {
                ++v88;
                v28 = v92 >= 0xA;
                v92 /= 0xAu;
              }
              while (v28);
            }
            else
            {
              v88 = 0;
              do
              {
                ++v88;
                v20 = v64 > 9;
                v64 /= 0xAu;
              }
              while (v20);
            }
            v89 = (char *)&v70[v88];
            *(_WORD *)v89 = 32;
            v110 = (WTF::StringImpl *)v65;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v110, v89 + 2);
          }
LABEL_136:
          v57 = v103;
          if (!v65)
            goto LABEL_139;
          goto LABEL_137;
        }
        v76 = (_WORD *)MEMORY[0x19AEA4824](&v105);
        if (!v76)
          goto LABEL_136;
        *v76 = 8236;
        v77 = v76 + 1;
        v78 = 0;
        if ((v64 & 0x80000000) != 0)
        {
          v93 = -v64;
          do
          {
            v112[v78--] = (v93 % 0xA) | 0x30;
            v20 = v93 > 9;
            v93 /= 0xAu;
          }
          while (v20);
          v94 = v78 + 12;
          v7 = (WTF::StringImpl *)((char *)&v110 + v78 + 12);
          *(_BYTE *)v7 = 45;
          if (v78 + 14 > 14)
            goto LABEL_119;
          if (v94 <= 12)
            v94 = 12;
          v80 = v94 - v78 - 11;
        }
        else
        {
          v79 = v64;
          do
          {
            v112[v78--] = (v79 % 0xA) | 0x30;
            v20 = v79 > 9;
            v79 /= 0xAu;
          }
          while (v20);
          if (v78 + 14 > 13)
            goto LABEL_119;
          v7 = (WTF::StringImpl *)&v112[v78 + 1];
          v80 = -v78;
        }
        memcpy(v76 + 1, v7, v80);
LABEL_119:
        if ((v64 & 0x80000000) != 0)
        {
          v95 = -v64;
          v81 = 1;
          do
          {
            ++v81;
            v28 = v95 >= 0xA;
            v95 /= 0xAu;
          }
          while (v28);
        }
        else
        {
          v81 = 0;
          do
          {
            ++v81;
            v20 = v64 > 9;
            v64 /= 0xAu;
          }
          while (v20);
        }
        v82 = (char *)v77 + v81;
        *v82 = 32;
        v83 = (unsigned __int128 *)(v82 + 1);
        v57 = v103;
        if (!v65)
          goto LABEL_139;
        v7 = *(WTF::StringImpl **)(v65 + 8);
        v84 = *(unsigned int *)(v65 + 4);
        if ((*(_BYTE *)(v65 + 16) & 4) == 0)
        {
          if (v84 < 0x10)
          {
            v96 = v83;
          }
          else
          {
            v96 = (unsigned __int128 *)((char *)v83 + (v84 & 0xFFFFFFF0));
            v97 = v83;
            do
            {
              v98 = (unsigned __int128)vld2q_s8((const char *)v7);
              v7 = (WTF::StringImpl *)((char *)v7 + 32);
              *v97++ = v98;
            }
            while (v97 != v96);
          }
          while (v96 != (unsigned __int128 *)((char *)v83 + v84))
          {
            v99 = *(_BYTE *)v7;
            v7 = (WTF::StringImpl *)((char *)v7 + 2);
            *(_BYTE *)v96 = v99;
            v96 = (unsigned __int128 *)((char *)v96 + 1);
          }
          goto LABEL_136;
        }
        if ((_DWORD)v84)
        {
          if ((_DWORD)v84 == 1)
            *(_BYTE *)v83 = *(_BYTE *)v7;
          else
            memcpy(v83, v7, v84);
        }
LABEL_137:
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v65, v7);
        else
          *(_DWORD *)v65 -= 2;
LABEL_139:
        if (*(_DWORD *)(v60 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
        else
          --*(_DWORD *)(v60 + 16);
        if (++v58 == v57)
        {
          v54 = *(_DWORD *)(v53 + 24) - 1;
          break;
        }
      }
    }
    if (v54)
      *(_DWORD *)(v53 + 24) = v54;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 72))(v53);
  }
  v100 = v105;
  if (v105
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v105),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v105),
        (v100 = v105) != 0))
  {
    *(_DWORD *)v100 += 2;
  }
  *a2 = v100;
  v101 = v106;
  v106 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v7);
    else
      *(_DWORD *)v101 -= 2;
  }
  result = v105;
  v105 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::MediaFragmentURIParser::parseTimeFragment(WebCore::MediaFragmentURIParser *this)
{
  unsigned int *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  WTF::MediaTime *v7;
  WTF::MediaTime *v8;
  __int128 *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  __int128 v14;
  __int128 v15;

  v2 = (unsigned int *)((char *)this + 80);
  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    *((_DWORD *)this + 10) = 1;
    v4 = (char *)this + 40;
  }
  else
  {
    WebCore::MediaFragmentURIParser::parseFragments(this);
    *((_DWORD *)this + 10) = 1;
    v4 = (char *)this + 40;
    v3 = *((unsigned int *)this + 23);
    if (!(_DWORD)v3)
      return WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, 0);
  }
  v5 = (_QWORD *)*((_QWORD *)v4 + 5);
  v6 = &v5[2 * v3];
  do
  {
    v7 = (WTF::MediaTime *)MEMORY[0x19AEA53F4](*v5, "t", 1);
    if ((_DWORD)v7)
    {
      v8 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v7);
      v15 = *(_OWORD *)v8;
      v9 = (__int128 *)WTF::MediaTime::invalidTime(v8);
      v14 = *v9;
      v10 = v5[1];
      if (v10)
      {
        v11 = *(WTF::StringImpl **)(v10 + 8);
        v12 = *(unsigned int *)(v10 + 4);
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
      if (WebCore::MediaFragmentURIParser::parseNPTFragment((uint64_t)v9, v11, v12, (uint64_t)&v15, (const WTF::MediaTime *)&v14))
      {
        *((_QWORD *)this + 6) = v15;
        *(_QWORD *)((char *)this + 53) = *(_QWORD *)((char *)&v15 + 5);
        *((_QWORD *)this + 8) = v14;
        *(_QWORD *)((char *)this + 69) = *(_QWORD *)((char *)&v14 + 5);
        *(_DWORD *)v4 = 2;
      }
    }
    v5 += 2;
  }
  while (v5 != v6);
  return WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, 0);
}

WTF::StringImpl *WebCore::MediaFragmentURIParser::parseFragments(WebCore::MediaFragmentURIParser *this)
{
  WTF::StringImpl *result;
  unint64_t v2;
  __n128 v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int16x8_t *v23;
  unint64_t v24;
  unint64_t v25;
  int8x16_t v26;
  int16x8_t *v27;
  __int8 *v28;
  int16x8_t *v29;
  unint64_t v30;
  unint64_t v31;
  int8x16_t v32;
  int16x8_t *v33;
  __int8 *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  __int16 v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  __int16 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl **v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int16x8_t *v63;
  unint64_t v64;
  _QWORD *v65;
  WTF *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;

  result = (WTF::StringImpl *)WTF::URL::fragmentIdentifier(this);
  v4 = v2;
  if ((_DWORD)v2)
  {
    v5 = result;
    v6 = 0;
    v7 = v2 & 0xFF00000000;
    v8 = v2;
    v64 = (unint64_t)result + 2 * v2;
    v63 = (int16x8_t *)(v64 - 16);
    v65 = (_QWORD *)((char *)this + 80);
    do
    {
      v9 = v6;
      if (v7)
      {
        v10 = (char *)v5 + v6;
        v11 = v8 - v9;
        if (v8 - v9 >= 0x10)
          v12 = 16;
        else
          v12 = v8 - v9;
        if (v12)
        {
          v13 = v12;
          result = (WTF::StringImpl *)((char *)v5 + v9);
          while (*(_BYTE *)result != 38)
          {
            result = (WTF::StringImpl *)((char *)result + 1);
            if (!--v13)
              goto LABEL_11;
          }
LABEL_13:
          v14 = result - v5;
LABEL_14:
          if (v14 != -1)
            goto LABEL_16;
          goto LABEL_15;
        }
LABEL_11:
        if (v11 >= 0x11)
        {
          result = (WTF::StringImpl *)memchr(&v10[v12], 38, v11 - v12);
          if (result)
            goto LABEL_13;
        }
      }
      else if (v8 > v6)
      {
        v23 = (int16x8_t *)((char *)v5 + 2 * v6);
        v24 = v64 - (_QWORD)v23;
        if ((uint64_t)(v64 - (_QWORD)v23) <= -2)
          goto LABEL_163;
        if (v24 <= 0x3E)
        {
          while (v23->i16[0] != 38)
          {
            v23 = (int16x8_t *)((char *)v23 + 2);
            v24 -= 2;
            if (!v24)
              goto LABEL_15;
          }
        }
        else
        {
          if ((unint64_t)&v23->u64[1] + 6 >= v64)
          {
            v27 = (int16x8_t *)((char *)v5 + 2 * v9);
            v25 = v64;
LABEL_63:
            if ((unint64_t)v27 >= v25)
              goto LABEL_15;
            v23 = (int16x8_t *)(v64 - 16);
            v3.n128_u64[0] = 0x26002600260026;
            v3.n128_u64[1] = 0x26002600260026;
            v26 = (int8x16_t)vceqq_s16(*v63, (int16x8_t)v3);
            v3.n128_u16[0] = vmaxvq_u16((uint16x8_t)v26);
            if (!v3.n128_u32[0])
              goto LABEL_15;
          }
          else
          {
            v25 = v64;
            while (1)
            {
              v3.n128_u64[0] = 0x26002600260026;
              v3.n128_u64[1] = 0x26002600260026;
              v26 = (int8x16_t)vceqq_s16(*v23, (int16x8_t)v3);
              v3.n128_u16[0] = vmaxvq_u16((uint16x8_t)v26);
              if (v3.n128_u32[0])
                break;
              v27 = v23 + 1;
              v28 = &v23[1].i8[14];
              ++v23;
              if ((unint64_t)v28 >= v64)
                goto LABEL_63;
            }
          }
          v3 = (__n128)xmmword_196881010;
          v23 = (int16x8_t *)((char *)v23
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v26)));
        }
        if (v23 != (int16x8_t *)v64)
        {
          v14 = ((char *)v23 - (char *)v5) >> 1;
          goto LABEL_14;
        }
      }
LABEL_15:
      v14 = v4;
LABEL_16:
      if (v7)
      {
        v15 = v8 - v9;
        if (v8 - v9 >= 0x10)
          v16 = 16;
        else
          v16 = v8 - v9;
        if (v16)
        {
          v17 = v16;
          result = (WTF::StringImpl *)((char *)v5 + v9);
          while (*(_BYTE *)result != 61)
          {
            result = (WTF::StringImpl *)((char *)result + 1);
            if (!--v17)
              goto LABEL_24;
          }
        }
        else
        {
LABEL_24:
          if (v15 < 0x11)
            goto LABEL_118;
          result = (WTF::StringImpl *)memchr((char *)v5 + v9 + v16, 61, v15 - v16);
          if (!result)
            goto LABEL_118;
        }
        v18 = result - v5;
      }
      else
      {
        if (v8 <= v9)
          goto LABEL_118;
        v29 = (int16x8_t *)((char *)v5 + 2 * v9);
        v30 = v64 - (_QWORD)v29;
        if ((uint64_t)(v64 - (_QWORD)v29) <= -2)
          goto LABEL_163;
        if (v30 <= 0x3E)
        {
          while (v29->i16[0] != 61)
          {
            v29 = (int16x8_t *)((char *)v29 + 2);
            v30 -= 2;
            if (!v30)
              goto LABEL_118;
          }
        }
        else
        {
          if ((unint64_t)&v29->u64[1] + 6 >= v64)
          {
            v33 = (int16x8_t *)((char *)v5 + 2 * v9);
            v31 = v64;
LABEL_69:
            if ((unint64_t)v33 >= v31)
              goto LABEL_118;
            v29 = (int16x8_t *)(v64 - 16);
            v3.n128_u64[0] = 0x3D003D003D003DLL;
            v3.n128_u64[1] = 0x3D003D003D003DLL;
            v32 = (int8x16_t)vceqq_s16(*v63, (int16x8_t)v3);
            v3.n128_u16[0] = vmaxvq_u16((uint16x8_t)v32);
            if (!v3.n128_u32[0])
              goto LABEL_118;
          }
          else
          {
            v31 = v64;
            while (1)
            {
              v3.n128_u64[0] = 0x3D003D003D003DLL;
              v3.n128_u64[1] = 0x3D003D003D003DLL;
              v32 = (int8x16_t)vceqq_s16(*v29, (int16x8_t)v3);
              v3.n128_u16[0] = vmaxvq_u16((uint16x8_t)v32);
              if (v3.n128_u32[0])
                break;
              v33 = v29 + 1;
              v34 = &v29[1].i8[14];
              ++v29;
              if ((unint64_t)v34 >= v64)
                goto LABEL_69;
            }
          }
          v3 = (__n128)xmmword_196881010;
          v29 = (int16x8_t *)((char *)v29
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v32)));
        }
        if (v29 == (int16x8_t *)v64)
          goto LABEL_118;
        v18 = ((char *)v29 - (char *)v5) >> 1;
      }
      if (v18 != -1 && v18 <= v14)
      {
        v19 = v18 - v9;
        if ((int)v4 - (int)v9 <= (v18 - v9))
        {
          v21 = v5;
          v20 = v4;
          if ((_DWORD)v9)
          {
            v19 = v4 - v9;
            goto LABEL_30;
          }
        }
        else
        {
LABEL_30:
          v20 = v19;
          if (v7)
          {
            if (v8 - v9 < v19)
              goto LABEL_163;
            v21 = (WTF::StringImpl *)((char *)v5 + v9);
            v20 |= 0x100000000uLL;
          }
          else
          {
            if (v8 - v9 < v19)
              goto LABEL_163;
            v21 = (WTF::StringImpl *)((char *)v5 + 2 * v9);
          }
        }
        {
          if ((_DWORD)v20)
            goto LABEL_38;
LABEL_82:
          if ((v20 & 0xFF00000000) != 0)
            result = (WTF::StringImpl *)WTF::String::String();
          else
            result = (WTF::StringImpl *)WTF::String::String();
        }
        else
        {
          v62 = v21;
          v35 = v20;
          PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
          *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", (const char *)v20);
          *((_QWORD *)&xmmword_1ECE86C80 + 1) = v36;
          v70 = (WTF::StringImpl *)xmmword_1ECE86C80;
          v71 = v36;
          if (v36 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
          {
            if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v70))
            {
              v37 = 165;
            }
            else
            {
              v37 = 92;
            }
          }
          else
          {
            v37 = 92;
          }
          word_1ECE86C90 = v37;
          v20 = v35;
          v21 = v62;
          if (!(_DWORD)v35)
            goto LABEL_82;
LABEL_38:
          result = PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v21, v20, (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, &v69, v3);
        }
        v68 = 0;
        if (v18 != v14)
        {
          v38 = (v18 + 1);
          if (v4 <= v38)
          {
            v40 = 0x100000000;
            v42 = (WTF::StringImpl *)"";
          }
          else
          {
            v39 = v14 + ~(_DWORD)v18;
            if ((int)v4 - (int)v38 <= v39)
            {
              v42 = v5;
              v40 = v4;
              if ((_DWORD)v18 != -1)
              {
                v39 = v4 - v38;
                goto LABEL_88;
              }
            }
            else
            {
LABEL_88:
              v40 = v39;
              v41 = v8 - v38;
              if (v7)
              {
                if (v41 < v40)
                  goto LABEL_163;
                v42 = (WTF::StringImpl *)((char *)v5 + v38);
                v40 |= 0x100000000uLL;
              }
              else
              {
                if (v41 < v40)
                {
LABEL_163:
                  __break(1u);
                  return result;
                }
                v42 = (WTF::StringImpl *)((char *)v5 + 2 * v38);
              }
            }
          }
          {
            if ((_DWORD)v40)
              goto LABEL_96;
LABEL_107:
            if ((v40 & 0xFF00000000) != 0)
              WTF::String::String();
            else
              WTF::String::String();
          }
          else
          {
            v43 = v42;
            v44 = v40;
            PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
            *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", (const char *)v40);
            *((_QWORD *)&xmmword_1ECE86C80 + 1) = v45;
            v70 = (WTF::StringImpl *)xmmword_1ECE86C80;
            v71 = v45;
            if (v45 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
            {
              if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v70))
              {
                v46 = 165;
              }
              else
              {
                v46 = 92;
              }
            }
            else
            {
              v46 = 92;
            }
            word_1ECE86C90 = v46;
            v40 = v44;
            v42 = v43;
            if (!(_DWORD)v44)
              goto LABEL_107;
LABEL_96:
            PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v42, v40, (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, &v70, v3);
          }
          v47 = v70;
          v70 = 0;
          v68 = v47;
        }
        if (v69 && *((_DWORD *)v69 + 1))
        {
          if (!v68)
            goto LABEL_115;
          if (*((_DWORD *)v68 + 1))
          {
            WTF::String::utf8();
            if (v67)
              strlen((const char *)v67 + 16);
            WTF::String::fromUTF8();
            v48 = v69;
            v69 = v70;
            v70 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
              {
                WTF::StringImpl::destroy(v48, v22);
                v57 = v70;
                v70 = 0;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, v22);
                  else
                    *(_DWORD *)v57 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v48 -= 2;
                v70 = 0;
              }
            }
            v49 = v67;
            v67 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 1)
                WTF::fastFree(v49, v22);
              else
                --*(_DWORD *)v49;
            }
            if (v69 && *((_DWORD *)v69 + 1))
            {
              WTF::String::utf8();
              WTF::String::fromUTF8();
              v50 = v70;
              v70 = 0;
              v51 = v68;
              v68 = v50;
              if (*(_DWORD *)v51 == 2)
              {
                WTF::StringImpl::destroy(v51, v22);
                v61 = v70;
                v70 = 0;
                if (v61)
                {
                  if (*(_DWORD *)v61 == 2)
                    WTF::StringImpl::destroy(v61, v22);
                  else
                    *(_DWORD *)v61 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v51 -= 2;
                v70 = 0;
              }
              v67 = 0;
              if (v68)
              {
                if (*((_DWORD *)v68 + 1))
                {
                  v52 = v69;
                  if (v69)
                    *(_DWORD *)v69 += 2;
                  v70 = v52;
                  *(_DWORD *)v68 += 2;
                  v71 = v68;
                  v53 = *((unsigned int *)this + 23);
                  if ((_DWORD)v53 == *((_DWORD *)this + 22))
                  {
                    v54 = (WTF::StringImpl **)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v53 + 1, (unint64_t)&v70);
                    v53 = *((unsigned int *)this + 23);
                    v55 = (WTF::StringImpl **)(*((_QWORD *)this + 10) + 16 * v53);
                    v52 = *v54;
                    *v54 = 0;
                    v56 = v54 + 1;
                  }
                  else
                  {
                    v56 = &v71;
                    v55 = (WTF::StringImpl **)(*v65 + 16 * v53);
                    v70 = 0;
                  }
                  *v55 = v52;
                  v58 = *v56;
                  *v56 = 0;
                  v55[1] = v58;
                  *((_DWORD *)this + 23) = v53 + 1;
                  v59 = v71;
                  v71 = 0;
                  if (v59)
                  {
                    if (*(_DWORD *)v59 == 2)
                      WTF::StringImpl::destroy(v59, v22);
                    else
                      *(_DWORD *)v59 -= 2;
                  }
                  v60 = v70;
                  v70 = 0;
                  if (v60)
                  {
                    if (*(_DWORD *)v60 == 2)
                      WTF::StringImpl::destroy(v60, v22);
                    else
                      *(_DWORD *)v60 -= 2;
                  }
                }
                goto LABEL_112;
              }
LABEL_115:
              result = v69;
              v69 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
                else
                  *(_DWORD *)result -= 2;
              }
              goto LABEL_118;
            }
          }
        }
LABEL_112:
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, v22);
          else
            *(_DWORD *)v68 -= 2;
        }
        goto LABEL_115;
      }
LABEL_118:
      v6 = v14 + 1;
    }
    while ((int)v14 + 1 < v4);
  }
  return result;
}

uint64_t WebCore::MediaFragmentURIParser::parseNPTFragment(uint64_t result, WTF::StringImpl *a2, unint64_t a3, uint64_t a4, const WTF::MediaTime *a5)
{
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v9 = 0;
  v13 = 0;
  if (a3 >= 4)
  {
    if (*(_BYTE *)a2 == 110 && *((_BYTE *)a2 + 1) == 112 && *((_BYTE *)a2 + 2) == 116 && *((_BYTE *)a2 + 3) == 58)
    {
      v9 = 4;
      v13 = 4;
    }
    else
    {
      v9 = 0;
    }
  }
  if (a3 == v9)
    return 0;
  v10 = v9;
  if (a3 <= v9)
    goto LABEL_24;
  if (*((_BYTE *)a2 + v9) == 44)
  {
    result = WTF::MediaTime::zeroTime((WTF::MediaTime *)result);
    v11 = *(_QWORD *)(result + 5);
    *(_QWORD *)a4 = *(_QWORD *)result;
    *(_QWORD *)(a4 + 5) = v11;
  }
  else
  {
    result = (uint64_t)WebCore::MediaFragmentURIParser::parseNPTTime(a2, a3, &v13, a4);
    if (!(_DWORD)result)
      return result;
    v10 = v13;
    v9 = v13;
  }
  if (a3 == v10)
    return 1;
  if (a3 <= v10)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  if (*((_BYTE *)a2 + v10) != 44)
    return 0;
  v13 = v9 + 1;
  if (a3 == v9 + 1)
    return 0;
  v12 = WebCore::MediaFragmentURIParser::parseNPTTime(a2, a3, &v13, (uint64_t)a5);
  result = 0;
  if (v12)
  {
    if (a3 == v13)
      return WTF::MediaTime::compare((WTF::MediaTime *)a4, a5) >> 31;
  }
  return result;
}

WTF::StringImpl *WebCore::MediaFragmentURIParser::parseNPTTime(WTF::StringImpl *a1, unint64_t a2, _DWORD *a3, uint64_t a4)
{
  WTF::StringImpl *v4;
  unint64_t v5;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  WTF::MediaTime *v25;
  double v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  WTF::MediaTime *v43;
  double v44;
  int v45;
  char v46;
  uint64_t v47;
  _BOOL4 v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  _DWORD *v53;
  int v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::MediaTime *v59;
  int v60;
  char v61;
  WTF::StringImpl *v62;

  v5 = *a3;
  if (a2 <= v5 || *((unsigned __int8 *)a1 + v5) - 48 > 9)
    return 0;
  WebCore::collectDigits(&v62, a1, a2, a3);
  v10 = v62;
  if (v62)
  {
    v11 = *((_QWORD *)v62 + 1);
    v12 = *((unsigned int *)v62 + 1);
    if ((*((_BYTE *)v62 + 16) & 4) == 0)
    {
      v13 = WTF::parseInteger<int,char16_t>(v11, v12, 10, 0);
      goto LABEL_9;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::parseInteger<int,unsigned char>(v11, v12, 10, 0);
LABEL_9:
  if ((v13 & 0xFF00000000) != 0)
    v16 = (WTF::StringImpl *)v13;
  else
    v16 = 0;
  v17 = *a3;
  if (a2 <= v17 || (v13 = (uint64_t)a1 + v17, v18 = *((unsigned __int8 *)a1 + v17), v18 == 44))
  {
    v19 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v13, (double)(int)v16);
LABEL_15:
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = (_DWORD)v14;
    *(_BYTE *)(a4 + 12) = BYTE4(v14);
    v15 = 1;
    goto LABEL_16;
  }
  v59 = 0;
  v60 = 10000000;
  v21 = 1;
  v61 = 1;
  if (v18 != 46)
  {
    if (!v10
      || !*((_DWORD *)v10 + 1)
      || (v30 = (v17 + 1), *a3 = v30, *(_BYTE *)v13 != 58)
      || a2 <= v30
      || *((unsigned __int8 *)a1 + v30) - 48 > 9
      || (WebCore::collectDigits(&v56, a1, a2, a3), (v4 = v56) == 0))
    {
      v15 = 0;
      goto LABEL_16;
    }
    if (*((_DWORD *)v56 + 1) != 2)
      goto LABEL_74;
    v31 = *((_QWORD *)v56 + 1);
    if ((*((_BYTE *)v56 + 16) & 4) != 0)
      v13 = WTF::parseInteger<int,unsigned char>(v31, 2, 10, 0);
    else
      v13 = WTF::parseInteger<int,char16_t>(v31, 2, 10, 0);
    if ((v13 & 0xFF00000000) == 0)
      goto LABEL_81;
    v32 = *a3;
    if (a2 <= v32 || *((_BYTE *)a1 + v32) != 58)
    {
      if (*((_DWORD *)v10 + 1) != 2)
        goto LABEL_74;
      v15 = 0;
      if ((int)v16 > 59 || (int)v13 > 59)
        goto LABEL_75;
      if (a2 <= v32 || *((_BYTE *)a1 + v32) != 58)
      {
        v34 = (WTF::StringImpl *)v13;
        v35 = (int)v16;
        v36 = 0;
        goto LABEL_53;
      }
    }
    v33 = (v32 + 1);
    *a3 = v33;
    if (*((_BYTE *)a1 + v32) == 58 && a2 > v33)
    {
      v55 = (int)v16;
      v54 = v13;
      if (*((unsigned __int8 *)a1 + v33) - 48 <= 9)
      {
        WebCore::collectDigits(&v57, a1, a2, a3);
        v16 = v57;
        if (v57)
        {
          if (*((_DWORD *)v57 + 1) == 2)
          {
            v13 = *((_QWORD *)v57 + 1);
            if ((*((_BYTE *)v57 + 16) & 4) == 0)
            {
              v13 = WTF::parseInteger<int,char16_t>(v13, 2, 10, 0);
              goto LABEL_65;
            }
            goto LABEL_64;
          }
          if (*(_DWORD *)v57 != 2)
          {
            v15 = 0;
            *(_DWORD *)v57 -= 2;
            goto LABEL_75;
          }
          WTF::StringImpl::destroy(v57, v14);
        }
      }
    }
LABEL_74:
    v15 = 0;
LABEL_75:
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v14);
    else
      *(_DWORD *)v4 -= 2;
LABEL_16:
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v14);
      else
        *(_DWORD *)v10 -= 2;
    }
    return (WTF::StringImpl *)v15;
  }
  do
  {
    v22 = v21;
    v23 = (v17 + v21);
    *a3 = v23;
    if (a2 <= v23)
      break;
    v24 = *((unsigned __int8 *)a1 + v23) - 48;
    v21 = v22 + 1;
  }
  while (v24 < 0xA);
  if (a2 - v17 >= v22)
  {
    LOBYTE(v56) = 0;
    v25 = (WTF::MediaTime *)WTF::charactersToDouble();
    v59 = (WTF::MediaTime *)WTF::MediaTime::createWithDouble(v25, v26);
    v60 = v27;
    v61 = v28;
    v57 = (WTF::StringImpl *)WTF::MediaTime::createWithDouble(v59, (double)(int)v16);
    v58 = v29;
    v19 = WTF::MediaTime::operator+();
    goto LABEL_15;
  }
  while (1)
  {
    __break(1u);
LABEL_64:
    v13 = WTF::parseInteger<int,unsigned char>(v13, 2, 10, 0);
LABEL_65:
    v34 = (WTF::StringImpl *)v13;
    if ((v13 & 0xFF00000000) == 0)
      break;
    v49 = v54 < 60 && (int)v13 < 60;
    if (*(_DWORD *)v16 == 2)
    {
      v13 = WTF::StringImpl::destroy(v16, v14);
      v35 = v54;
      v36 = v55;
      if (!v49)
        goto LABEL_74;
    }
    else
    {
      *(_DWORD *)v16 -= 2;
      v35 = v54;
      v36 = v55;
      if (!v49)
        goto LABEL_74;
    }
LABEL_53:
    v37 = *a3;
    if (a2 <= v37)
      goto LABEL_60;
    v13 = (uint64_t)a1 + v37;
    if (*((_BYTE *)a1 + v37) != 46)
      goto LABEL_60;
    v55 = v36;
    v16 = v34;
    v38 = v35;
    LOBYTE(v57) = 0;
    v39 = 1;
    do
    {
      v40 = v39;
      v41 = (v37 + v39);
      *a3 = v41;
      if (a2 <= v41)
        break;
      v42 = *((unsigned __int8 *)a1 + v41) - 48;
      v39 = v40 + 1;
    }
    while (v42 < 0xA);
    if (a2 - v37 >= v40)
    {
      v43 = (WTF::MediaTime *)WTF::charactersToDouble();
      v13 = WTF::MediaTime::createWithDouble(v43, v44);
      v59 = (WTF::MediaTime *)v13;
      v60 = v45;
      v61 = v46;
      v35 = v38;
      LODWORD(v34) = (_DWORD)v16;
      v36 = v55;
LABEL_60:
      v57 = (WTF::StringImpl *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)v13, (double)((int)v34 + 60 * v35 + 3600 * v36));
      v58 = v47;
      *(_QWORD *)a4 = WTF::MediaTime::operator+();
      *(_DWORD *)(a4 + 8) = (_DWORD)v14;
      *(_BYTE *)(a4 + 12) = BYTE4(v14);
      v15 = 1;
      goto LABEL_75;
    }
  }
LABEL_81:
  v50 = (WTF::StringImpl **)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::collectDigits(v50, v51, v52, v53);
}

WTF::StringImpl *WebCore::collectDigits(WTF::StringImpl **a1, WTF::StringImpl *a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v5;
  __int16 v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  char v19;
  char v20;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v5 = *a4;
  if (a3 > v5)
  {
    do
    {
      if (*((unsigned __int8 *)a2 + v5) - 48 > 9)
        break;
      *a4 = v5 + 1;
      v9 = *((unsigned __int8 *)a2 + v5);
      v20 = v9;
      if (v17 && ((v10 = v18, v18 < *((_DWORD *)v17 + 1)) ? (v11 = v16 == 0) : (v11 = 0), v11))
      {
        v12 = *((_DWORD *)v17 + 4);
        v13 = *((_QWORD *)v17 + 1);
        ++v18;
        if ((v12 & 4) != 0)
          *(_BYTE *)(v13 + v10) = v9;
        else
          *(_WORD *)(v13 + 2 * v10) = v9;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      v5 = *a4;
    }
    while (a3 > v5);
    result = v16;
    if (v16)
      goto LABEL_16;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16);
  result = v16;
  if (v16)
LABEL_16:
    *(_DWORD *)result += 2;
  *a1 = result;
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, a2);
      result = v16;
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::ModelDocumentParser::appendBytes(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  void *v52;
  WebCore::HTMLLabelElement *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  WebCore::HTMLLabelElement *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WebCore::HTMLLabelElement *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::FrameLoader *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF *v106;
  uint64_t v107;
  WTF *v108;
  WTF::StringImpl *v109[5];
  _BYTE v110[8];
  WTF::StringImpl *v111;
  char v112;
  _BYTE v113[8];
  WTF::StringImpl *v114;
  char v115;
  WebCore::HTMLLabelElement *v116;
  WebCore::HTMLLabelElement *v117;
  _BYTE v118[8];
  WTF::StringImpl *v119;
  char v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  char v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  char v129;
  _BYTE v130[8];
  WTF::StringImpl *v131;
  char v132;
  _BYTE v133[8];
  WTF::StringImpl *v134;
  char v135;

  v1 = result;
  v2 = *((_QWORD *)result + 3);
  if (v2 && *(_QWORD *)(v2 + 8))
    return result;
  v3 = *((_QWORD *)result + 2);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = v4 + 96;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v8 = WebCore::HTMLNames::htmlTag;
  if (WebCore::HTMLNames::htmlTag)
    ++*(_DWORD *)WebCore::HTMLNames::htmlTag;
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33BF070;
  WebCore::ContainerNode::appendChild(v4, (WebCore::Node *)v5, (uint64_t)v133);
  if (v135)
  {
    v10 = v134;
    v134 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  WebCore::Document::setCSSTarget(v4, (WebCore::Element *)v6);
  v11 = *(_QWORD *)(v4 + 528);
  if (v11)
  {
    v12 = *(unsigned int **)(v11 + 8);
    if (v12)
      WebCore::LocalFrame::injectUserScripts(v12, 0);
  }
  v13 = bmalloc::api::isoAllocate();
  v14 = v13;
  *(_OWORD *)(v13 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v13 + 24) = 0x101C00000002;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v7;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  v15 = WebCore::HTMLNames::headTag;
  if (WebCore::HTMLNames::headTag)
    ++*(_DWORD *)WebCore::HTMLNames::headTag;
  *(_QWORD *)(v13 + 96) = v15;
  *(_QWORD *)(v13 + 104) = 0;
  *(_QWORD *)v13 = off_1E33BDFC0;
  WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v13, (uint64_t)v130);
  if (v132)
  {
    v17 = v131;
    v131 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  v18 = bmalloc::api::isoAllocate();
  v19 = v18;
  *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v18 + 24) = 0x101C00000002;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = v7;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  v20 = WebCore::HTMLNames::metaTag;
  if (WebCore::HTMLNames::metaTag)
    ++*(_DWORD *)WebCore::HTMLNames::metaTag;
  *(_QWORD *)(v18 + 96) = v20;
  *(_QWORD *)(v18 + 104) = 0;
  *(_QWORD *)v18 = off_1E33C41B0;
  *(_BYTE *)(v18 + 112) = 0;
  *(_BYTE *)(v18 + 128) = 0;
  *(_BYTE *)(v18 + 136) = 0;
  *(_BYTE *)(v18 + 144) = 0;
  WTF::AtomStringImpl::add();
  v127 = v109[0];
  v21 = *(_QWORD *)(v19 + 104);
  if (!v21)
    goto LABEL_34;
  v22 = *(_DWORD *)(v21 + 4);
  if ((v22 & 1) != 0)
  {
    v23 = *(uint64_t **)(v21 + 40);
    v24 = *(_DWORD *)(v21 + 52);
    if (!v24)
    {
LABEL_34:
      v25 = 0xFFFFFFFFLL;
      goto LABEL_35;
    }
  }
  else
  {
    v23 = (uint64_t *)(v21 + 32);
    v24 = v22 >> 5;
    if (!v24)
      goto LABEL_34;
  }
  v25 = 0;
  while (1)
  {
    v26 = *v23;
    if (*v23 == WebCore::HTMLNames::nameAttr
      || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
      && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
    {
      break;
    }
    ++v25;
    v23 += 2;
    if (v24 == v25)
      goto LABEL_34;
  }
LABEL_35:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v19, v25, (WebCore::TreeScope *)&WebCore::HTMLNames::nameAttr, &v127, 0);
  v28 = v127;
  v127 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::AtomStringImpl::add();
  v127 = v109[0];
  v29 = *(_QWORD *)(v19 + 104);
  if (!v29)
    goto LABEL_50;
  v30 = *(_DWORD *)(v29 + 4);
  if ((v30 & 1) == 0)
  {
    v31 = (uint64_t *)(v29 + 32);
    v32 = v30 >> 5;
    if (!v32)
      goto LABEL_50;
LABEL_43:
    v33 = 0;
    while (1)
    {
      v34 = *v31;
      if (*v31 == WebCore::HTMLNames::contentAttr
        || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 24)
        && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 32))
      {
        goto LABEL_51;
      }
      ++v33;
      v31 += 2;
      if (v32 == v33)
        goto LABEL_50;
    }
  }
  v31 = *(uint64_t **)(v29 + 40);
  v32 = *(_DWORD *)(v29 + 52);
  if (v32)
    goto LABEL_43;
LABEL_50:
  v33 = 0xFFFFFFFFLL;
LABEL_51:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v19, v33, (WebCore::TreeScope *)&WebCore::HTMLNames::contentAttr, &v127, 0);
  v36 = v127;
  v127 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  WebCore::ContainerNode::appendChild(v14, (WebCore::Node *)v19, (uint64_t)&v127);
  if (v129)
  {
    v38 = v128;
    v128 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  v39 = bmalloc::api::isoAllocate();
  v40 = v39;
  *(_OWORD *)(v39 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v39 + 24) = 0x101C00000002;
  *(_QWORD *)(v39 + 32) = 0;
  *(_QWORD *)(v39 + 40) = v7;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)(v39 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v39 + 80) = 0;
  *(_QWORD *)(v39 + 88) = 0;
  v41 = WebCore::HTMLNames::styleTag;
  if (WebCore::HTMLNames::styleTag)
    ++*(_DWORD *)WebCore::HTMLNames::styleTag;
  *(_QWORD *)(v39 + 96) = v41;
  *(_QWORD *)(v39 + 104) = 0;
  *(_QWORD *)v39 = off_1E33CD4C8;
  *(_WORD *)(v39 + 112) = 0;
  *(_DWORD *)(v39 + 116) = 0;
  *(_DWORD *)(v39 + 120) = 0;
  *(_OWORD *)(v39 + 128) = 0uLL;
  *(_OWORD *)(v39 + 144) = 0uLL;
  *(_BYTE *)(v39 + 160) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v121 = v109[0];
  v43 = *(unsigned __int16 *)(v40 + 28) >> 12;
  if (v43 == 1)
    goto LABEL_61;
  if (v43 > 0xB)
    goto LABEL_62;
  if (v43 == 11)
  {
LABEL_61:
    WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v40, (uint64_t)&v121);
LABEL_62:
    v124 = 0;
    v125 = 0;
    v126 = 0;
    goto LABEL_63;
  }
  if (((1 << v43) & 0x19C) == 0)
    goto LABEL_62;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v40 + 120))(&v124, v40, &v121);
  if ((_BYTE)v126)
  {
    v104 = v125;
    v125 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, v42);
      else
        *(_DWORD *)v104 -= 2;
    }
  }
LABEL_63:
  v44 = v121;
  v121 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v42);
    else
      *(_DWORD *)v44 -= 2;
  }
  WebCore::ContainerNode::appendChild(v14, (WebCore::Node *)v40, (uint64_t)&v121);
  if (v123)
  {
    v46 = v122;
    v122 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  v47 = bmalloc::api::isoAllocate();
  v48 = v47;
  *(_OWORD *)(v47 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v47 + 24) = 0x101C00000002;
  *(_QWORD *)(v47 + 32) = 0;
  *(_QWORD *)(v47 + 40) = v7;
  *(_OWORD *)(v47 + 48) = 0u;
  *(_OWORD *)(v47 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v47 + 80) = 0;
  *(_QWORD *)(v47 + 88) = 0;
  v49 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(v47 + 96) = v49;
  *(_QWORD *)(v47 + 104) = 0;
  *(_QWORD *)v47 = off_1E33B5118;
  WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v47, (uint64_t)v118);
  if (v120)
  {
    v51 = v119;
    v119 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  WebCore::HTMLModelElement::create((WebCore::HTMLModelElement *)&WebCore::HTMLNames::modelTag, (const WebCore::QualifiedName *)v4, (uint64_t *)&v117);
  v53 = v117;
  if ((*((_QWORD *)v117 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v54 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v54 = 1;
    *(_QWORD *)(v54 + 16) = 0;
    *(_QWORD *)(v54 + 24) = 0;
    *(_QWORD *)(v54 + 8) = v53;
    *(_BYTE *)(v54 + 32) = 0;
    v55 = *((_QWORD *)v53 + 2);
    *((_QWORD *)v53 + 2) = v55 & 0xFFFF000000000000 | v54;
    v56 = v55 & 0xFFFFFFFFFFFFLL;
    if ((v55 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v57 = __ldaxr((unsigned int *)v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, (unsigned int *)v56));
      if (!v58)
      {
        atomic_store(1u, (unsigned int *)v56);
        v107 = *(unsigned int *)(v56 + 28);
        if ((_DWORD)v107)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v56 + 16), (WTF::StringImpl *)(*(_QWORD *)(v56 + 16) + 32 * v107));
        v108 = *(WTF **)(v56 + 16);
        if (v108)
        {
          *(_QWORD *)(v56 + 16) = 0;
          *(_DWORD *)(v56 + 24) = 0;
          WTF::fastFree(v108, v52);
        }
        WTF::fastFree((WTF *)v56, v52);
      }
    }
  }
  v59 = (unsigned int *)(*((_QWORD *)v53 + 2) & 0xFFFFFFFFFFFFLL);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v61 = *((_QWORD *)v1 + 3);
  *((_QWORD *)v1 + 3) = v59;
  if (v61)
  {
    do
    {
      v62 = __ldaxr((unsigned int *)v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, (unsigned int *)v61));
    if (!v63)
    {
      atomic_store(1u, (unsigned int *)v61);
      v105 = *(unsigned int *)(v61 + 28);
      if ((_DWORD)v105)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v61 + 16), (WTF::StringImpl *)(*(_QWORD *)(v61 + 16) + 32 * v105));
      v106 = *(WTF **)(v61 + 16);
      if (v106)
      {
        *(_QWORD *)(v61 + 16) = 0;
        *(_DWORD *)(v61 + 24) = 0;
        WTF::fastFree(v106, v52);
      }
      WTF::fastFree((WTF *)v61, v52);
    }
  }
  v64 = v117;
  v65 = *((_QWORD *)v117 + 13);
  if (!v65)
    goto LABEL_97;
  v66 = *(_DWORD *)(v65 + 4);
  if ((v66 & 1) != 0)
  {
    v67 = *(uint64_t **)(v65 + 40);
    v68 = *(_DWORD *)(v65 + 52);
    if (!v68)
    {
LABEL_97:
      v69 = 0xFFFFFFFFLL;
      goto LABEL_98;
    }
  }
  else
  {
    v67 = (uint64_t *)(v65 + 32);
    v68 = v66 >> 5;
    if (!v68)
      goto LABEL_97;
  }
  v69 = 0;
  while (1)
  {
    v70 = *v67;
    if (*v67 == WebCore::HTMLNames::interactiveAttr
      || *(_QWORD *)(v70 + 24) == *(_QWORD *)(WebCore::HTMLNames::interactiveAttr + 24)
      && *(_QWORD *)(v70 + 32) == *(_QWORD *)(WebCore::HTMLNames::interactiveAttr + 32))
    {
      break;
    }
    ++v69;
    v67 += 2;
    if (v68 == v69)
      goto LABEL_97;
  }
LABEL_98:
  WebCore::Element::setAttributeInternal(v117, v69, (WebCore::TreeScope *)&WebCore::HTMLNames::interactiveAttr, MEMORY[0x1E0CBF3B8], 0);
  WebCore::HTMLSourceElement::create((WebCore::HTMLSourceElement *)&WebCore::HTMLNames::sourceTag, (const WebCore::QualifiedName *)v4, (uint64_t *)&v116);
  v72 = v116;
  v73 = *(WTF::StringImpl **)(v4 + 736);
  if (v73)
  {
    if ((*((_BYTE *)v73 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v73 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v73, v71);
      v73 = v109[0];
    }
  }
  v109[0] = v73;
  v74 = *((_QWORD *)v72 + 13);
  if (!v74)
    goto LABEL_113;
  v75 = *(_DWORD *)(v74 + 4);
  if ((v75 & 1) != 0)
  {
    v76 = *(uint64_t **)(v74 + 40);
    v77 = *(_DWORD *)(v74 + 52);
    if (!v77)
    {
LABEL_113:
      v78 = 0xFFFFFFFFLL;
      goto LABEL_114;
    }
  }
  else
  {
    v76 = (uint64_t *)(v74 + 32);
    v77 = v75 >> 5;
    if (!v77)
      goto LABEL_113;
  }
  v78 = 0;
  while (1)
  {
    v79 = *v76;
    if (*v76 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v79 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v79 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    ++v78;
    v76 += 2;
    if (v77 == v78)
      goto LABEL_113;
  }
LABEL_114:
  WebCore::Element::setAttributeInternal(v72, v78, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, v109, 0);
  v81 = v109[0];
  v109[0] = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v80);
    else
      *(_DWORD *)v81 -= 2;
  }
  v82 = *(_QWORD *)(v4 + 528);
  if (!v82)
    goto LABEL_142;
  v83 = *(_QWORD *)(v82 + 8);
  if (!v83)
    goto LABEL_142;
  v84 = *(_QWORD *)(*(_QWORD *)(v83 + 280) + 88);
  if (!v84 || *(_QWORD *)(v83 + 296) != v4)
    goto LABEL_142;
  ++*(_DWORD *)(v84 + 24);
  WebCore::ResourceResponse::platformLazyInit(v84 + 1272, 1);
  v86 = *(WTF::StringImpl **)(v84 + 1312);
  if (v86)
  {
    if ((*((_BYTE *)v86 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v86 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v86, v85);
      v86 = v109[0];
    }
  }
  v109[0] = v86;
  v87 = *((_QWORD *)v72 + 13);
  if (!v87)
    goto LABEL_136;
  v88 = *(_DWORD *)(v87 + 4);
  if ((v88 & 1) == 0)
  {
    v89 = (uint64_t *)(v87 + 32);
    v90 = v88 >> 5;
    if (!v90)
      goto LABEL_136;
LABEL_129:
    v91 = 0;
    while (1)
    {
      v92 = *v89;
      if (*v89 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v92 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v92 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        goto LABEL_137;
      }
      ++v91;
      v89 += 2;
      if (v90 == v91)
        goto LABEL_136;
    }
  }
  v89 = *(uint64_t **)(v87 + 40);
  v90 = *(_DWORD *)(v87 + 52);
  if (v90)
    goto LABEL_129;
LABEL_136:
  v91 = 0xFFFFFFFFLL;
LABEL_137:
  WebCore::Element::setAttributeInternal(v72, v91, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, v109, 0);
  v94 = v109[0];
  v109[0] = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v93);
    else
      *(_DWORD *)v94 -= 2;
  }
  if (*(_DWORD *)(v84 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84);
  else
    --*(_DWORD *)(v84 + 24);
LABEL_142:
  WebCore::ContainerNode::appendChild((uint64_t)v64, v72, (uint64_t)v113);
  if (v115)
  {
    v96 = v114;
    v114 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
        WTF::StringImpl::destroy(v96, v95);
      else
        *(_DWORD *)v96 -= 2;
    }
  }
  result = (unsigned int *)WebCore::ContainerNode::appendChild(v48, v64, (uint64_t)v110);
  if (v112)
  {
    result = (unsigned int *)v111;
    v111 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v97);
      else
        *result -= 2;
    }
  }
  *(_BYTE *)(v4 + 3436) = 1;
  v98 = *(_QWORD *)(v4 + 528);
  if (v98)
  {
    v99 = *(_QWORD *)(v98 + 8);
    if (v99)
    {
      v100 = *(WebCore::FrameLoader **)(v99 + 280);
      v101 = 88;
      if (!*((_BYTE *)v100 + 80))
        v101 = 96;
      v102 = *(_QWORD *)(*(_QWORD *)((char *)v100 + v101) + 80);
      if (v102)
      {
        v103 = *(_QWORD *)(v102 + 8);
        if (v103)
        {
          *(_DWORD *)(v103 + 130) |= 8u;
          v100 = *(WebCore::FrameLoader **)(v99 + 280);
        }
      }
      WebCore::Document::completeURL((WebCore::Document *)v4, (_QWORD *)v1 + 4, v4 + 848, 0, (WTF::URL *)v109);
      WebCore::FrameLoader::setOutgoingReferrer(v100, (const WTF::URL *)v109);
      result = (unsigned int *)v109[0];
      v109[0] = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v97);
        else
          *result -= 2;
      }
    }
  }
  if (*((_DWORD *)v72 + 6) == 2)
  {
    if ((*((_WORD *)v72 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(v72, v97);
  }
  else
  {
    *((_DWORD *)v72 + 6) -= 2;
  }
  if (*((_DWORD *)v64 + 6) == 2)
  {
    if ((*((_WORD *)v64 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef(v64, v97);
  }
  else
  {
    *((_DWORD *)v64 + 6) -= 2;
  }
  if (*(_DWORD *)(v48 + 24) == 2)
  {
    if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v48, v97);
  }
  else
  {
    *(_DWORD *)(v48 + 24) -= 2;
  }
  if (*(_DWORD *)(v40 + 24) == 2)
  {
    if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v40, v97);
  }
  else
  {
    *(_DWORD *)(v40 + 24) -= 2;
  }
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v19, v97);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v14, v97);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v97);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::ModelDocumentParser::finish(WebCore::ModelDocumentParser *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  return WebCore::Document::finishedParsing(v3, a2);
}

WebCore::ModelDocument *WebCore::ModelDocument::ModelDocument(WTF::StringImpl **this, uint64_t **a2, const WebCore::Settings *a3, const WTF::URL *a4)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v20 = 0u;
  v6 = WebCore::Document::Document(this, a2, a3, a4, 257, 0, &v20);
  *(_QWORD *)v6 = off_1E33BA1B0;
  *(_QWORD *)(v6 + 192) = &unk_1E33BA500;
  *(_QWORD *)(v6 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v6 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v6 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v6 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v6 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v6 + 3512) = 0u;
  v8 = *(WTF::StringImpl **)(v6 + 1704);
  this[213] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  *this = (WTF::StringImpl *)off_1E33D6578;
  this[24] = (WTF::StringImpl *)&unk_1E33D68C8;
  this[36] = (WTF::StringImpl *)&unk_1E33D6A88;
  this[63] = (WTF::StringImpl *)&unk_1E33D6AB0;
  this[64] = (WTF::StringImpl *)&unk_1E33D6AD8;
  this[68] = (WTF::StringImpl *)&unk_1E33D6B08;
  this[69] = (WTF::StringImpl *)&unk_1E33D6B30;
  this[441] = 0;
  if (a2)
  {
    WebCore::FrameLoader::nonSrcdocFrame(a2[35], &v19);
    v10 = v19;
    if (v19)
    {
      v11 = *(WTF::StringImpl **)(*(_QWORD *)(v19 + 280) + 160);
      if (v11)
        *(_DWORD *)v11 += 2;
      v19 = 0;
      v12 = (unsigned int *)(v10 + 8);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v17 = off_1E31FE290;
        v17[1] = v12;
        *(_QWORD *)&v20 = v17;
        WTF::ensureOnMainThread();
        v18 = v20;
        *(_QWORD *)&v20 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    else
    {
      v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v11 += 2;
    }
    v15 = this[441];
    this[441] = v11;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v9);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return (WebCore::ModelDocument *)this;
}

unsigned int *WebCore::ModelDocument::createParser@<X0>(WebCore::ModelDocument *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int v6;
  _DWORD *v7;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A3D50;
  *(_WORD *)(v4 + 12) = 0;
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (result)
  {
    do
      v6 = __ldaxr(result);
    while (__stlxr(v6 + 1, result));
  }
  *(_QWORD *)v4 = off_1E33D6E58;
  *(_QWORD *)(v4 + 16) = result;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = (_DWORD *)*((_QWORD *)this + 441);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v4 + 32) = v7;
  *a2 = v4;
  return result;
}

WTF::StringImpl **WebCore::MonthInputType::formControlType(WebCore::MonthInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "month";
    v2[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::month(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::month(void)::name;
}

uint64_t WebCore::MonthInputType::dateType(WebCore::MonthInputType *this)
{
  return 3;
}

double WebCore::MonthInputType::valueAsDate(WebCore::MonthInputType *this)
{
  uint64_t v1;
  _QWORD *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  _BYTE v17[40];

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD **)(v1 + 8);
  else
    v2 = 0;
  v3 = (_DWORD *)v2[30];
  if (v3[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v3, &v16);
    goto LABEL_19;
  }
  v4 = (WTF::StringImpl *)v2[27];
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v16 = v4;
    goto LABEL_24;
  }
  v5 = v2[13];
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_8:
        v8 = v8;
        v9 = (_QWORD *)(v7 + 8);
        while (1)
        {
          v10 = *(v9 - 1);
          if (v10 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v9 += 2;
          if (!--v8)
          {
            v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_8;
    }
  }
  v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (*v9)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 296))(&v16);
    v4 = v16;
    if (v16)
      goto LABEL_24;
    v16 = 0;
    v3 = (_DWORD *)v2[30];
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 64))(&v16);
LABEL_19:
  v4 = v16;
  if (!v16)
  {
    v11 = 0;
    v12 = 0x100000000;
    goto LABEL_25;
  }
LABEL_24:
  v11 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
  v12 = *((unsigned int *)v4 + 1) | ((unint64_t)((*((_DWORD *)v4 + 4) >> 2) & 1) << 32);
LABEL_25:
  WebCore::DateComponents::fromParsingMonth(v11, v12, (uint64_t)v17);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v17[36])
    return WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v17) / 1000.0;
  else
    return NAN;
}

unsigned __int16 *WebCore::MonthInputType::parseToDateComponents@<X0>(unsigned __int16 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return WebCore::DateComponents::fromParsingMonth(a1, a2, a3);
}

uint64_t *WebCore::MonthInputType::serializeWithMilliseconds@<X0>(uint64_t *this@<X0>, double a2@<D0>, uint64_t *a3@<X8>)
{
  WebCore::BaseDateAndTimeInputType *v4;
  BOOL v5;
  int8x16_t v6[2];
  int v7;
  char v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;

  LOBYTE(v11) = 0;
  v9 = 0u;
  v10 = 0u;
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (WebCore::BaseDateAndTimeInputType *)this,
        this = (uint64_t *)WebCore::DateComponents::setMillisecondsSinceEpochForDateInternal((WebCore::DateComponents *)&v9, round(a2)), v10.i32[2] >= 1)&& (v10.i32[2] >= 0x43530u ? (v5 = v10.i32[1] < 9) : (v5 = 1), v5))
  {
    LOBYTE(v11) = 3;
    v6[0] = v9;
    v6[1] = v10;
    v7 = v11;
    v8 = 1;
    return WebCore::BaseDateAndTimeInputType::serializeWithComponents(v4, v6, a3);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::MonthInputType::defaultValueForStepUp@<X0>(WebCore::MonthInputType *this@<X0>, uint64_t a2@<X8>)
{
  double v3;
  double v4;
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WTF::WallTime::now(this);
  v4 = v3 * 1000.0;
  result = WTF::calculateLocalTimeOffset();
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  if (COERCE__INT64(fabs(v4 + (double)(int)((double)SHIDWORD(result) / 60000.0) * 60000.0)) <= 0x7FEFFFFFFFFFFFFFLL
    && (result = WebCore::DateComponents::setMillisecondsSinceEpochForDateInternal((WebCore::DateComponents *)&v10, round(v4 + (double)(int)((double)SHIDWORD(result) / 60000.0) * 60000.0)), SDWORD2(v11) >= 1)&& (DWORD2(v11) < 0x43530 || SDWORD1(v11) < 9))
  {
    if ((unint64_t)(COERCE__INT64(fabs((double)(DWORD1(v11) + 12 * DWORD2(v11) - 23640))) - 0x10000000000000) >> 53 <= 0x3FE
      || COERCE__INT64((double)(DWORD1(v11) + 12 * DWORD2(v11) - 23640)) == 0)
    {
      v7 = (const char *)WTF::numberToString();
      v8 = (uint64_t)v7;
      v9 = 0x100000000;
      if (v7)
        v9 = strlen(v7) | 0x100000000;
      return WebCore::Decimal::fromString(v8, v9, a2);
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_WORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 12) = 2;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 12) = 3;
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a2 + 8) = 0;
  }
  return result;
}

void WebCore::MonthInputType::createStepRange(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unint64_t v36;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[24];
  _BYTE v54[24];
  __int128 v55;
  uint64_t v56;
  _BYTE v57[20];
  int v58;
  int v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = (const char *)WTF::numberToString();
  v7 = (uint64_t)v6;
  v8 = 0x100000000;
  if (v6)
    v8 = strlen(v6) | 0x100000000;
  WebCore::Decimal::fromString(v7, v8, (uint64_t)v57);
  WebCore::InputType::findStepBase(a1, (uint64_t)v57, (uint64_t)&v55);
  v9 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (!v9)
    goto LABEL_14;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_6;
LABEL_14:
    v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_14;
LABEL_6:
  v12 = v12;
  v13 = (uint64_t *)(v11 + 8);
  while (1)
  {
    v14 = *(v13 - 1);
    if (v14 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_15:
  v15 = (const char *)WTF::numberToString();
  v16 = (uint64_t)v15;
  v17 = 0x100000000;
  if (v15)
    v17 = strlen(v15) | 0x100000000;
  WebCore::Decimal::fromString(v16, v17, (uint64_t)v53);
  v18 = *v13;
  if (*v13)
  {
    v19 = *(unsigned __int16 **)(v18 + 8);
    v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v19 = 0;
    v20 = 0x100000000;
  }
  WebCore::DateComponents::fromParsingMonth(v19, v20, (uint64_t)v57);
  if (v60)
  {
    if ((unint64_t)(COERCE__INT64(fabs((double)(v58 + 12 * v59 - 23640))) - 0x10000000000000) >> 53 <= 0x3FE
      || COERCE__INT64((double)(v58 + 12 * v59 - 23640)) == 0)
    {
      v22 = (const char *)WTF::numberToString();
      v23 = (uint64_t)v22;
      v24 = 0x100000000;
      if (v22)
        v24 = strlen(v22) | 0x100000000;
      WebCore::Decimal::fromString(v23, v24, (uint64_t)v54);
    }
    else
    {
      *(_QWORD *)v54 = 0;
      *(_WORD *)&v54[8] = 0;
      *(_QWORD *)&v54[12] = 2;
    }
  }
  else
  {
    *(_OWORD *)v54 = *(_OWORD *)v53;
    *(_QWORD *)&v54[16] = *(_QWORD *)&v53[16];
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (!v25)
    goto LABEL_40;
  v26 = *(_DWORD *)(v25 + 4);
  if ((v26 & 1) == 0)
  {
    v27 = v25 + 32;
    LODWORD(v28) = v26 >> 5;
    if ((_DWORD)v28)
      goto LABEL_32;
LABEL_40:
    v29 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_41;
  }
  v27 = *(_QWORD *)(v25 + 40);
  LODWORD(v28) = *(_DWORD *)(v25 + 52);
  if (!(_DWORD)v28)
    goto LABEL_40;
LABEL_32:
  v28 = v28;
  v29 = (uint64_t *)(v27 + 8);
  while (1)
  {
    v30 = *(v29 - 1);
    if (v30 == WebCore::HTMLNames::maxAttr
      || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
      && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
    {
      break;
    }
    v29 += 2;
    if (!--v28)
    {
      v29 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_41:
  v31 = (const char *)WTF::numberToString();
  v32 = (uint64_t)v31;
  v33 = 0x100000000;
  if (v31)
    v33 = strlen(v31) | 0x100000000;
  WebCore::Decimal::fromString(v32, v33, (uint64_t)&v51);
  v34 = *v29;
  if (*v29)
  {
    v35 = *(unsigned __int16 **)(v34 + 8);
    v36 = *(unsigned int *)(v34 + 4) | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v35 = 0;
    v36 = 0x100000000;
  }
  WebCore::DateComponents::fromParsingMonth(v35, v36, (uint64_t)v57);
  if (v60)
  {
    if ((unint64_t)(COERCE__INT64(fabs((double)(v58 + 12 * v59 - 23640))) - 0x10000000000000) >> 53 <= 0x3FE
      || COERCE__INT64((double)(v58 + 12 * v59 - 23640)) == 0)
    {
      v38 = (const char *)WTF::numberToString();
      v39 = (uint64_t)v38;
      v40 = 0x100000000;
      if (v38)
        v40 = strlen(v38) | 0x100000000;
      WebCore::Decimal::fromString(v39, v40, (uint64_t)v53);
    }
    else
    {
      *(_QWORD *)v53 = 0;
      *(_WORD *)&v53[8] = 0;
      *(_QWORD *)&v53[12] = 2;
    }
  }
  else
  {
    *(_OWORD *)v53 = v51;
    *(_QWORD *)&v53[16] = v52;
  }
  v41 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (!v41)
    goto LABEL_66;
  v42 = *(_DWORD *)(v41 + 4);
  if ((v42 & 1) == 0)
  {
    v43 = v41 + 32;
    LODWORD(v44) = v42 >> 5;
    if ((_DWORD)v44)
      goto LABEL_58;
LABEL_66:
    v45 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_67;
  }
  v43 = *(_QWORD *)(v41 + 40);
  LODWORD(v44) = *(_DWORD *)(v41 + 52);
  if (!(_DWORD)v44)
    goto LABEL_66;
LABEL_58:
  v44 = v44;
  v45 = (uint64_t *)(v43 + 8);
  while (1)
  {
    v46 = *(v45 - 1);
    if (v46 == WebCore::HTMLNames::stepAttr
      || *(_QWORD *)(v46 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
      && *(_QWORD *)(v46 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
    {
      break;
    }
    v45 += 2;
    if (!--v44)
    {
      v45 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_67:
  v47 = *v45;
  if (v47)
  {
    v48 = *(_QWORD *)(v47 + 8);
    v49 = *(unsigned int *)(v47 + 4) | ((unint64_t)((*(_DWORD *)(v47 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v48 = 0;
    v49 = 0x100000000;
  }
  WebCore::StepRange::parseStep(a2, (int *)&WebCore::monthStepDescription, v48, v49, (uint64_t)&v61);
  *(_OWORD *)a3 = *(_OWORD *)v53;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v53[16];
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v54;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)&v54[16];
  v50 = HIDWORD(v61) & 0xFFFFFFFD;
  if ((HIDWORD(v61) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 48) = v61;
    *(_QWORD *)(a3 + 64) = v62;
  }
  else
  {
    *(_QWORD *)(a3 + 60) = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *(_WORD *)(a3 + 56) = 0;
  }
  if ((HIDWORD(v55) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 72) = v55;
    *(_QWORD *)(a3 + 88) = v56;
  }
  else
  {
    *(_QWORD *)(a3 + 84) = 1;
    *(_QWORD *)(a3 + 72) = 1;
    *(_WORD *)(a3 + 80) = 0;
  }
  *(_OWORD *)(a3 + 96) = WebCore::monthStepDescription;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 113) = v50 != 0;
  *(_BYTE *)(a3 + 114) = 0;
}

double WebCore::MonthInputType::parseToNumber@<D0>(const WTF::String *a1@<X1>, const WebCore::Decimal *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v15[20];
  int v16;
  int v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = *(unsigned __int16 **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  WebCore::DateComponents::fromParsingMonth(v7, v8, (uint64_t)v15);
  if (v18)
  {
    if ((unint64_t)(COERCE__INT64(fabs((double)(v16 + 12 * v17 - 23640))) - 0x10000000000000) >> 53 <= 0x3FE
      || COERCE__INT64((double)(v16 + 12 * v17 - 23640)) == 0)
    {
      v10 = (const char *)WTF::numberToString();
      v11 = (uint64_t)v10;
      v12 = 0x100000000;
      if (v10)
        v12 = strlen(v10) | 0x100000000;
      WebCore::Decimal::fromString(v11, v12, a3);
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
      *(_QWORD *)&v13 = 2;
      *(_QWORD *)(a3 + 12) = 2;
    }
  }
  else
  {
    v13 = *(_OWORD *)a2;
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)a2 + 2);
  }
  return *(double *)&v13;
}

void WebCore::MonthInputType::setMillisecondToDateComponents(double a1@<D0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  int v7;
  BOOL v8;
  char v9;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_11;
  v4 = round(a1);
  v5 = fmod(v4, 12.0);
  if (v5 < 0.0)
    v5 = v5 + 12.0;
  v6 = (v4 - v5) / 12.0 + 1970.0;
  if (v6 < 1.0
    || ((v7 = (int)v6, v6 <= 275760.0) ? (v8 = v7 < 1) : (v8 = 1), v8 || (int)v5 >= 9 && v7 >= 0x43530))
  {
LABEL_11:
    v9 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 20) = (int)v5;
    *(_DWORD *)(a2 + 24) = v7;
    *(_DWORD *)(a2 + 28) = 0;
    v9 = 1;
    *(_BYTE *)(a2 + 32) = 3;
  }
  *(_BYTE *)(a2 + 36) = v9;
}

BOOL WebCore::MonthInputType::isValidFormat(uint64_t a1, int a2)
{
  return (~a2 & 3) == 0;
}

void WebCore::MonthInputType::formatDateTimeFieldsState(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  BOOL v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  if (*(_BYTE *)(a1 + 4))
    v3 = *(_BYTE *)(a1 + 12) == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v5 = 0;
    v6 = *(_DWORD *)a1;
    v7 = *(_DWORD *)(a1 + 8);
    v8 = v7;
    v18 = 0x400000030;
    v19 = v6;
    v16 = 0x200000030;
    v17 = v7;
    v9 = v6;
    do
    {
      ++v5;
      v10 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v10);
    v11 = 0;
    do
    {
      ++v11;
      v10 = v8 > 9;
      v8 /= 0xAu;
    }
    while (v10);
    if (v5 <= 4)
      v5 = 4;
    if (v11 <= 2)
      v12 = 2;
    else
      v12 = v11;
    if (v12 < 0
      || ((v13 = __OFADD__(v12, 1), v14 = v12 + 1, !v13) ? (v15 = 0) : (v15 = 1),
          (v5 & 0x80000000) != 0 || (v15 & 1) != 0 || __OFADD__(v5, v14)))
    {
      *a2 = 0;
    }
    else
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(v5 + v14, 1, (unsigned __int8 *)&v18, v6, 45, (unsigned __int8 *)&v16, v7, a2);
      if (*a2)
        return;
    }
    __break(0xC471u);
    return;
  }
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  *a2 = v4;
}

WTF::StringImpl *WebCore::MonthInputType::setupLayoutParameters(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 16) + 16))(&v10);
  v4 = v10;
  v10 = 0;
  v5 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v4;
  if (v5)
  {
    v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 != 2)
    {
LABEL_3:
      *(_DWORD *)v5 = v6;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v5, v3);
    v5 = v10;
    v10 = 0;
    if (v5)
    {
      v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 != 2)
        goto LABEL_3;
      WTF::StringImpl::destroy(v5, v9);
    }
  }
LABEL_4:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::NavigatorUserActivation::~NavigatorUserActivation(WebCore::NavigatorUserActivation *this, void *a2)
{
  bmalloc::api *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;

  v3 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = v3;
          WTF::fastFree((WTF *)v4, a2);
          v3 = v7;
        }
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

{
  bmalloc::api *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;

  v3 = (bmalloc::api *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          v7 = v3;
          WTF::fastFree((WTF *)v4, a2);
          v3 = v7;
        }
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WTF::fastFree(this, a2);
}

const char **WebCore::NavigatorUserActivation::userActivation@<X0>(WebCore::NavigatorUserActivation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v5;
  const char **result;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned __int8 *v12[2];

  v5 = (uint64_t *)((char *)this + 72);
  v12[0] = "NavigatorUserActivation";
  v12[1] = (unsigned __int8 *)24;
  result = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v12);
  if (!result || (v7 = (uint64_t)result[2]) == 0)
  {
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E33D6B70;
    v8 = bmalloc::api::isoAllocate();
    *(_DWORD *)v8 = 1;
    WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this);
    v9 = (unsigned int *)*((_QWORD *)this + 3);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    *(_QWORD *)(v8 + 8) = v9;
    *(_QWORD *)(v7 + 8) = v8;
    v12[0] = (unsigned __int8 *)v7;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v5, "NavigatorUserActivation", (unsigned __int8 *)0x18, (const char **)v12);
    result = (const char **)v12[0];
    v12[0] = 0;
    if (result)
      result = (const char **)(*((uint64_t (**)(const char **))*result + 1))(result);
  }
  v11 = *(_DWORD **)(v7 + 8);
  ++*v11;
  *a2 = v11;
  return result;
}

WTF::StringImpl **WebCore::NumberInputType::formControlType(WebCore::NumberInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "number";
    v2[1] = 7;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::number(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::number(void)::name;
}

void WebCore::NumberInputType::setValue(_QWORD *a1, WTF::StringImpl *a2, int a3, int a4, int a5)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if ((a3 & 1) == 0 && (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4)))
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1[3] + 8) + 1408))(&v15);
    v10 = v15;
    if (v15)
    {
      WebCore::innerTextValueFrom((WebCore *)&v14, (unint64_t)v15);
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, v10);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      v11 = v14;
    }
    else
    {
      v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v11 += 2;
    }
    if (v11)
    {
      v12 = *((_DWORD *)v11 + 1);
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v10);
        if (!v12)
          goto LABEL_7;
      }
      else
      {
        *(_DWORD *)v11 -= 2;
        if (!v12)
          goto LABEL_7;
      }
      WebCore::TextFieldInputType::updateInnerTextValue(a1);
    }
  }
LABEL_7:
  WebCore::TextFieldInputType::setValue(a1, a2, a3, a4, a5);
}

double WebCore::NumberInputType::valueAsDouble(WebCore::NumberInputType *this)
{
  uint64_t v1;
  _QWORD *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  double v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD **)(v1 + 8);
  else
    v2 = 0;
  v3 = (_DWORD *)v2[30];
  if (v3[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v3, &v17);
    goto LABEL_19;
  }
  v4 = (WTF::StringImpl *)v2[27];
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v17 = v4;
    goto LABEL_24;
  }
  v5 = v2[13];
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_8:
        v8 = v8;
        v9 = (_QWORD *)(v7 + 8);
        while (1)
        {
          v10 = *(v9 - 1);
          if (v10 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v9 += 2;
          if (!--v8)
          {
            v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_8;
    }
  }
  v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (*v9)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 296))(&v17);
    v4 = v17;
    if (v17)
      goto LABEL_24;
    v17 = 0;
    v3 = (_DWORD *)v2[30];
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 64))(&v17);
LABEL_19:
  v4 = v17;
  if (!v17)
  {
    v11 = 0;
    v12 = 0x100000000;
    goto LABEL_25;
  }
LABEL_24:
  v11 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
  v12 = *((unsigned int *)v4 + 1) | ((unint64_t)((*((_DWORD *)v4 + 4) >> 2) & 1) << 32);
LABEL_25:
  v14 = WebCore::parseToDoubleForNumberType(v11, v12, NAN);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v14;
}

WTF::StringImpl *WebCore::NumberInputType::setValueAsDouble@<X0>(WTF::String *a1@<X0>, const WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  _BYTE v12[8];
  WTF::StringImpl *v13;
  char v14;

  v6 = *((_QWORD *)a1 + 3);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  WTF::String::number(a1, a4);
  WebCore::HTMLInputElement::setValue(v7, (uint64_t)&v11, a2, 0, (uint64_t)v12);
  if (v14)
  {
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

WTF::StringImpl *WebCore::NumberInputType::setValueAsDecimal@<X0>(WebCore::Decimal *this@<X1>, uint64_t a2@<X0>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  int v11;
  const char *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _BYTE v15[8];
  WTF::StringImpl *v16;
  char v17;

  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if (*((_DWORD *)this + 3) == 3)
  {
    v11 = *((_DWORD *)this + 4);
    if (v11 == 1)
      v12 = "-0";
    else
      v12 = "0";
    if (v11 == 1)
      v13 = 3;
    else
      v13 = 2;
    WTF::String::String(&v14, (uint64_t)v12, v13);
  }
  else
  {
    WebCore::Decimal::toString(this, &v14);
  }
  WebCore::HTMLInputElement::setValue(v7, (uint64_t)&v14, a3, 0, (uint64_t)v15);
  if (v17)
  {
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return result;
}

BOOL WebCore::NumberInputType::typeMismatchFor(WebCore::NumberInputType *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (v4 = *(unsigned int *)(v2 + 4), (_DWORD)v4))
    return (COERCE_UNSIGNED_INT64(WebCore::parseToDoubleForNumberType(*(unsigned __int8 **)(v2 + 8), v4 | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32), NAN)) & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL;
  else
    return 0;
}

uint64_t WebCore::NumberInputType::typeMismatch(WebCore::NumberInputType *this)
{
  return 0;
}

void WebCore::NumberInputType::createStepRange(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  __int128 v34;
  int v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[20];
  int v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _BYTE v45[24];

  if ((_MergedGlobals_194 & 1) == 0)
  {
    xmmword_1ECE83660 = xmmword_1969F12B0;
    _MergedGlobals_194 = 1;
  }
  *(_QWORD *)&v45[12] = 3;
  *(_QWORD *)v45 = 0;
  *(_WORD *)&v45[8] = 0;
  WebCore::InputType::findStepBase(a1, (uint64_t)v45, (uint64_t)&v41);
  *(_QWORD *)v39 = 0x3FDDEC7F2FAF35;
  *(_WORD *)&v39[8] = 292;
  *(_QWORD *)&v39[12] = 1;
  v6 = a1[3];
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v36 = v40;
  v34 = *(_OWORD *)v39;
  v35 = 1;
  v8 = *(_QWORD *)(v7 + 104);
  if (v8
    && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
      ? (v10 = *(_QWORD *)(v8 + 40), LODWORD(v11) = *(_DWORD *)(v8 + 52))
      : (v10 = v8 + 32, LODWORD(v11) = v9 >> 5),
        (_DWORD)v11))
  {
    v11 = v11;
    v12 = v10 + 8;
    while (1)
    {
      v13 = *(_QWORD *)(v12 - 8);
      if (v13 == WebCore::HTMLNames::minAttr
        || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
        && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
      {
        break;
      }
      v12 += 16;
      if (!--v11)
      {
        v12 = MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v12 = MEMORY[0x1E0CBF2F8];
  }
  *(_QWORD *)v45 = 0;
  *(_WORD *)&v45[8] = 0;
  *(_QWORD *)&v45[12] = 2;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _BYTE *))(*a1 + 856))(&v43, a1, v12, v45);
  v14 = HIDWORD(v43);
  v15 = &v34;
  if ((HIDWORD(v43) & 0xFFFFFFFD) != 0)
    v15 = &v43;
  v37 = *v15;
  v38 = *((_QWORD *)v15 + 2);
  v16 = *(_QWORD *)(v7 + 104);
  if (v16
    && ((v17 = *(_DWORD *)(v16 + 4), (v17 & 1) != 0)
      ? (v18 = *(_QWORD *)(v16 + 40), LODWORD(v19) = *(_DWORD *)(v16 + 52))
      : (v18 = v16 + 32, LODWORD(v19) = v17 >> 5),
        (_DWORD)v19))
  {
    v19 = v19;
    v20 = v18 + 8;
    while (1)
    {
      v21 = *(_QWORD *)(v20 - 8);
      if (v21 == WebCore::HTMLNames::maxAttr
        || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
        && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
      {
        break;
      }
      v20 += 16;
      if (!--v19)
      {
        v20 = MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v20 = MEMORY[0x1E0CBF2F8];
  }
  *(_QWORD *)v45 = 0;
  *(_WORD *)&v45[8] = 0;
  *(_QWORD *)&v45[12] = 2;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _BYTE *))(*a1 + 856))(&v43, a1, v20, v45);
  v22 = HIDWORD(v43);
  v23 = (__int128 *)v39;
  if ((HIDWORD(v43) & 0xFFFFFFFD) != 0)
    v23 = &v43;
  *(_OWORD *)v45 = *v23;
  *(_QWORD *)&v45[16] = *((_QWORD *)v23 + 2);
  v24 = *(_QWORD *)(v7 + 104);
  if (v24
    && ((v25 = *(_DWORD *)(v24 + 4), (v25 & 1) != 0)
      ? (v26 = *(_QWORD *)(v24 + 40), LODWORD(v27) = *(_DWORD *)(v24 + 52))
      : (v26 = v24 + 32, LODWORD(v27) = v25 >> 5),
        (_DWORD)v27))
  {
    v27 = v27;
    v28 = (uint64_t *)(v26 + 8);
    while (1)
    {
      v29 = *(v28 - 1);
      if (v29 == WebCore::HTMLNames::stepAttr
        || *(_QWORD *)(v29 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
        && *(_QWORD *)(v29 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
      {
        break;
      }
      v28 += 2;
      if (!--v27)
      {
        v28 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v28 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v30 = *v28;
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 8);
    v32 = *(unsigned int *)(v30 + 4) | ((unint64_t)((*(_DWORD *)(v30 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v31 = 0;
    v32 = 0x100000000;
  }
  WebCore::StepRange::parseStep(a2, (int *)&xmmword_1ECE83660, v31, v32, (uint64_t)&v43);
  *(_OWORD *)a3 = *(_OWORD *)v45;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v45[16];
  *(_OWORD *)(a3 + 24) = v37;
  *(_QWORD *)(a3 + 40) = v38;
  v33 = HIDWORD(v43) & 0xFFFFFFFD;
  if ((HIDWORD(v43) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 48) = v43;
    *(_QWORD *)(a3 + 64) = v44;
  }
  else
  {
    *(_QWORD *)(a3 + 60) = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *(_WORD *)(a3 + 56) = 0;
  }
  if ((HIDWORD(v41) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 72) = v41;
    *(_QWORD *)(a3 + 88) = v42;
  }
  else
  {
    *(_QWORD *)(a3 + 84) = 1;
    *(_QWORD *)(a3 + 72) = 1;
    *(_WORD *)(a3 + 80) = 0;
  }
  *(_OWORD *)(a3 + 96) = xmmword_1ECE83660;
  *(_BYTE *)(a3 + 112) = ((v22 | v14) & 0xFFFFFFFD) != 0;
  *(_BYTE *)(a3 + 113) = v33 != 0;
  *(_BYTE *)(a3 + 114) = 0;
}

BOOL WebCore::NumberInputType::sizeShouldIncludeDecoration(WebCore::NumberInputType *this, int a2, int *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  _BOOL4 v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  _BOOL4 v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  _BOOL4 v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  WTF::StringImpl *v63;
  __int16 v64;
  uint64_t v65;
  WTF::String *v66;
  __int16 v67;
  int v68;
  int v69;
  WTF::String *v70;
  __int16 v71;
  int v72;
  int v73;
  WTF::String *v74;
  __int16 v75;
  uint64_t v76;

  *a3 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (!v5)
    goto LABEL_12;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if (v6 >> 5)
      goto LABEL_4;
LABEL_12:
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_12;
LABEL_4:
  v8 = v8;
  v9 = (uint64_t *)(v7 + 8);
  while (1)
  {
    v10 = *(v9 - 1);
    if (v10 == WebCore::HTMLNames::stepAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
    {
      break;
    }
    v9 += 2;
    if (!--v8)
    {
      v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v11 = *v9;
  if (*v9 && *(_DWORD *)(v11 + 4) == 3)
  {
    v60 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v60 & 0xDF) != 0x41 || (*(_BYTE *)(v60 + 1) & 0xDF) != 0x4E)
        goto LABEL_14;
      v61 = *(unsigned __int8 *)(v60 + 2);
    }
    else
    {
      if ((*(_WORD *)v60 & 0xFFDF) != 0x41 || (*(_WORD *)(v60 + 2) & 0xFFDF) != 0x4E)
        goto LABEL_14;
      v61 = *(unsigned __int16 *)(v60 + 4);
    }
    if ((v61 & 0xFFFFFFDF) == 0x59)
      return 0;
  }
LABEL_14:
  if (!v5)
    goto LABEL_25;
  v12 = *(_DWORD *)(v5 + 4);
  if ((v12 & 1) == 0)
  {
    v13 = v5 + 32;
    v14 = v12 >> 5;
    if (v12 >> 5)
      goto LABEL_17;
LABEL_25:
    v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_26;
  }
  v13 = *(_QWORD *)(v5 + 40);
  v14 = *(_DWORD *)(v5 + 52);
  if (!v14)
    goto LABEL_25;
LABEL_17:
  v15 = v14;
  v16 = (uint64_t *)(v13 + 8);
  while (1)
  {
    v17 = *(v16 - 1);
    if (v17 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v16 += 2;
    if (!--v15)
    {
      v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_26:
  v18 = *v16;
  if (v18)
  {
    v19 = *(unsigned int *)(v18 + 16);
    v20 = *(unsigned __int8 **)(v18 + 8);
    LODWORD(v18) = *(_DWORD *)(v18 + 4);
    v21 = (v19 >> 2) & 1;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v74 = 0;
  v75 = 0;
  v76 = 2;
  WebCore::parseToDecimalForNumberType(v20, v18 | (unint64_t)(v21 << 32), (__int128 *)&v74, (uint64_t)&v70);
  if ((v72 & 0xFFFFFFFD) == 0)
    return 0;
  v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
  if (v22)
  {
    v23 = *(_DWORD *)(v22 + 4);
    if ((v23 & 1) != 0)
    {
      v24 = *(_QWORD *)(v22 + 40);
      LODWORD(v25) = *(_DWORD *)(v22 + 52);
      if ((_DWORD)v25)
      {
LABEL_32:
        v25 = v25;
        v26 = (uint64_t *)(v24 + 8);
        while (1)
        {
          v27 = *(v26 - 1);
          if (v27 == WebCore::HTMLNames::maxAttr
            || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
            && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
          {
            goto LABEL_41;
          }
          v26 += 2;
          if (!--v25)
          {
            v26 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_41;
          }
        }
      }
    }
    else
    {
      v24 = v22 + 32;
      LODWORD(v25) = v23 >> 5;
      if ((_DWORD)v25)
        goto LABEL_32;
    }
  }
  v26 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_41:
  v28 = *v26;
  if (v28)
  {
    v29 = *(unsigned __int8 **)(v28 + 8);
    v30 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v29 = 0;
    v30 = 0x100000000;
  }
  v74 = 0;
  v75 = 0;
  v76 = 2;
  WebCore::parseToDecimalForNumberType(v29, v30, (__int128 *)&v74, (uint64_t)&v66);
  v31 = (v68 & 0xFFFFFFFD) != 0;
  if ((v68 & 0xFFFFFFFD) != 0)
  {
    v32 = *v9;
    if (*v9)
    {
      v33 = *(unsigned __int8 **)(v32 + 8);
      v34 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v33 = 0;
      v34 = 0x100000000;
    }
    v65 = 1;
    v63 = (WTF::StringImpl *)1;
    v64 = 0;
    WebCore::parseToDecimalForNumberType(v33, v34, (__int128 *)&v63, (uint64_t)&v74);
    WTF::String::number(v70);
    v36 = v63;
    if (v63)
    {
      v37 = *((_DWORD *)v63 + 1);
      v63 = 0;
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    else
    {
      v37 = 0;
    }
    v38 = v73 == 1;
    if (v71 < 0)
    {
      v41 = v37 + v71 + v38;
      if (v73 == 1)
        v42 = 2;
      else
        v42 = 1;
      if (v37 + v71 <= 0)
        v40 = v42;
      else
        v40 = v41;
      v39 = -v71;
    }
    else
    {
      v39 = 0;
      v40 = v37 + v38;
    }
    WTF::String::number(v66);
    v44 = v63;
    if (v63)
    {
      v45 = *((_DWORD *)v63 + 1);
      v63 = 0;
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v43);
      else
        *(_DWORD *)v44 -= 2;
    }
    else
    {
      v45 = 0;
    }
    v46 = v69 == 1;
    if (v67 < 0)
    {
      v49 = v45 + v67 + v46;
      if (v69 == 1)
        v50 = 2;
      else
        v50 = 1;
      if (v45 + v67 <= 0)
        v48 = v50;
      else
        v48 = v49;
      v47 = -v67;
    }
    else
    {
      v47 = 0;
      v48 = v45 + v46;
    }
    WTF::String::number(v74);
    v52 = v63;
    if (v63)
    {
      v53 = *((_DWORD *)v63 + 1);
      v63 = 0;
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v51);
      else
        *(_DWORD *)v52 -= 2;
    }
    else
    {
      v53 = 0;
    }
    v54 = HIDWORD(v76) == 1;
    v55 = v53 + v75;
    if (HIDWORD(v76) == 1)
      v56 = 2;
    else
      v56 = 1;
    if (v55 > 0)
      v56 = v55 + v54;
    v57 = v53 + v54;
    if (v75 < 0)
    {
      v58 = -v75;
    }
    else
    {
      v56 = v57;
      v58 = 0;
    }
    if (v48 > v56)
      v56 = v48;
    if (v47 > v58)
      v58 = v47;
    if (v40 > v56)
      v56 = v40;
    if (v39 > v58)
      v58 = v39;
    v59 = v58 + v56;
    if (v58)
      ++v59;
    *a3 = v59;
  }
  return v31;
}

float WebCore::NumberInputType::decorationWidth(WebCore::NumberInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  _WORD *v4;
  int v5;
  float v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  float v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  _BYTE v23[8];
  WTF::StringImpl *v24;
  char v25;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 240);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 552))(v1);
  if (!v2)
    return 0.0;
  v4 = (_WORD *)v2;
  v5 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v5 + 2;
  v6 = 0.0;
  v7 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
  if (v7 && (*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1064))(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1072))(v7);
    if (__OFADD__(v8, v9))
      v10 = (v8 >> 31) + 0x7FFFFFFF;
    else
      v10 = v8 + v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 976))(v7);
    if (__OFADD__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    else
      v12 = v10 + v11;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 984))(v7);
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
      v14 = (v12 >> 31) + 0x7FFFFFFF;
    v15 = (float)v14 * 0.015625;
    v23[0] = 0;
    v25 = 0;
    v16 = (*(uint64_t (**)(_WORD *, _BYTE *))(*(_QWORD *)v4 + 264))(v4, v23);
    if (v25)
    {
      v17 = v24;
      v24 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v3);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8);
    v19 = v18 + 12;
    v20 = v18 + 4;
    if (((*(_DWORD *)(v16 + 44) >> 13) & 6u) - 2 >= 4)
      v19 = v20;
    if (*(_BYTE *)(v19 + 6))
      v21 = *(float *)v19;
    else
      v21 = (float)*(int *)v19;
    v6 = (float)(v15 + 0.0) + v21;
    v5 = *((_DWORD *)v4 + 6) - 2;
  }
  if (v5)
  {
    *((_DWORD *)v4 + 6) = v5;
  }
  else if ((v4[15] & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
  }
  return v6;
}

uint64_t WebCore::NumberInputType::handleKeydownEvent(WebCore::NumberInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v4 + 160) & 0x18) == 0
    && (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 112) + 288))(v4 + 112)
     || (*(_BYTE *)(v4 + 160) & 0x20) == 0)
    && !*((_QWORD *)this + 14))
  {
    if ((MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Up", 2) & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      if (!MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Down", 4))
        goto LABEL_10;
      v5 = 0xFFFFFFFFLL;
    }
    (*(void (**)(WebCore::NumberInputType *, uint64_t))(*(_QWORD *)this + 224))(this, v5);
    *((_DWORD *)a2 + 5) |= 0x80u;
  }
LABEL_10:
  if ((*((_BYTE *)a2 + 20) & 0x80) != 0)
    return 1;
  else
    return WebCore::TextFieldInputType::handleKeydownEvent(this, a2);
}

double WebCore::NumberInputType::parseToNumber@<D0>(const WTF::String *a1@<X1>, const WebCore::Decimal *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned __int8 **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  return WebCore::parseToDecimalForNumberType(v5, v6, (__int128 *)a2, a3);
}

WTF::StringImpl *WebCore::NumberInputType::serialize@<X0>(const WebCore::Decimal *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  int v3;
  WTF::StringImpl *result;
  int v5;
  const char *v6;
  uint64_t v7;

  v3 = *((_DWORD *)a1 + 3);
  if ((v3 & 0xFFFFFFFD) != 0)
  {
    if (v3 == 3)
    {
      v5 = *((_DWORD *)a1 + 4);
      if (v5 == 1)
        v6 = "-0";
      else
        v6 = "0";
      if (v5 == 1)
        v7 = 3;
      else
        v7 = 2;
      return (WTF::StringImpl *)WTF::String::String(a2, (uint64_t)v6, v7);
    }
    else
    {
      return WebCore::Decimal::toString(a1, a2);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::NumberInputType::localizeValue@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned __int16 *v7;
  int v8;
  uint64_t v9;
  WebCore::Element *v10;
  WTF::StringImpl *v11;
  int v12;

  v4 = *a2;
  if (*a2)
  {
    v5 = *((unsigned int *)v4 + 1);
    if ((_DWORD)v5)
    {
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if ((*((_BYTE *)v4 + 16) & 4) != 0)
      {
        while (1)
        {
          v8 = *(unsigned __int8 *)v7;
          v7 = (unsigned __int16 *)((char *)v7 + 1);
          if ((v8 & 0xFFFFFFDF) == 0x45)
            break;
          if (!--v5)
            goto LABEL_7;
        }
      }
      else
      {
        while (1)
        {
          v12 = *v7++;
          if ((v12 & 0xFFFFFFDF) == 0x45)
            break;
          if (!--v5)
          {
LABEL_7:
            v9 = *((_QWORD *)this + 3);
            if (v9)
              v10 = *(WebCore::Element **)(v9 + 8);
            else
              v10 = 0;
            v11 = WebCore::Element::locale(v10);
            return WebCore::Locale::convertToLocalizedNumber(v11, a2, a3);
          }
        }
      }
    }
    *(_DWORD *)v4 += 2;
  }
  *a3 = v4;
  return this;
}

_QWORD *WebCore::NumberInputType::visibleValue@<X0>(WebCore::NumberInputType *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  void *v21;
  WTF::StringImpl *CachedLocale;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  v5 = *((_QWORD *)this + 3);
  if (v5)
    v6 = *(_QWORD **)(v5 + 8);
  else
    v6 = 0;
  result = (_QWORD *)v6[30];
  if (*((_DWORD *)result + 3) == 64)
  {
    result = (_QWORD *)WebCore::FileInputType::firstElementPathForInputValue((uint64_t)result, &v25);
  }
  else
  {
    v8 = (WTF::StringImpl *)v6[27];
    if (v8)
    {
      *(_DWORD *)v8 += 2;
      v25 = v8;
      goto LABEL_24;
    }
    v9 = v6[13];
    if (v9
      && ((v10 = *(_DWORD *)(v9 + 4), (v10 & 1) != 0)
        ? (v11 = *(_QWORD *)(v9 + 40), LODWORD(v12) = *(_DWORD *)(v9 + 52))
        : (v11 = v9 + 32, LODWORD(v12) = v10 >> 5),
          (_DWORD)v12))
    {
      v12 = v12;
      v13 = (_QWORD *)(v11 + 8);
      while (1)
      {
        v14 = *(v13 - 1);
        if (v14 == WebCore::HTMLNames::valueAttr
          || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
          && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
        {
          break;
        }
        v13 += 2;
        if (!--v12)
        {
          v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
    if (*v13)
    {
      result = (*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*result + 296))(&v25);
      v8 = v25;
      if (v25)
        goto LABEL_24;
      v25 = 0;
      result = (_QWORD *)v6[30];
    }
    result = (*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*result + 64))(&v25);
  }
  v8 = v25;
  if (v25)
  {
LABEL_24:
    v15 = *((unsigned int *)v8 + 1);
    if (!(_DWORD)v15)
    {
      *(_DWORD *)v8 += 2;
      goto LABEL_17;
    }
    v16 = (unsigned __int16 *)*((_QWORD *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) != 0)
    {
      while (1)
      {
        v17 = *(unsigned __int8 *)v16;
        v16 = (unsigned __int16 *)((char *)v16 + 1);
        if ((v17 & 0xFFFFFFDF) == 0x45)
          break;
        if (!--v15)
          goto LABEL_28;
      }
LABEL_41:
      *(_DWORD *)v8 += 2;
      *a3 = v8;
      v25 = 0;
      goto LABEL_19;
    }
    do
    {
      v23 = *v16++;
      if ((v23 & 0xFFFFFFDF) == 0x45)
        goto LABEL_41;
      --v15;
    }
    while (v15);
LABEL_28:
    v18 = *((_QWORD *)this + 3);
    if (v18)
      v18 = *(_QWORD *)(v18 + 8);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8);
    *(_DWORD *)(v19 + 24) += 2;
    if ((*(_BYTE *)(v18 + 30) & 8) != 0)
      goto LABEL_58;
    v24 = *(_QWORD *)(v18 + 72) & 0xFFFFFFFFFFFFLL;
    if (v24)
    {
      v20 = (WTF::StringImpl **)(v24 + 64);
      if (*(_QWORD *)((*(_QWORD *)(v18 + 72) & 0xFFFFFFFFFFFFLL) + 0x40))
        goto LABEL_34;
    }
    if ((*(_BYTE *)(v18 + 22) & 8) != 0)
    {
LABEL_58:
      if (*(_QWORD *)(v19 + 1720))
        v20 = (WTF::StringImpl **)(v19 + 1720);
      else
        v20 = (WTF::StringImpl **)(v19 + 1712);
    }
    else
    {
      v20 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
LABEL_34:
    CachedLocale = WebCore::Document::getCachedLocale((WebCore::Document *)v19, v20);
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, v21);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
    result = WebCore::Locale::convertToLocalizedNumber(CachedLocale, &v25, a3);
    v8 = v25;
    goto LABEL_18;
  }
LABEL_17:
  *a3 = v8;
LABEL_18:
  v25 = 0;
  if (v8)
  {
LABEL_19:
    if (*(_DWORD *)v8 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t WebCore::NumberInputType::convertFromVisibleValue@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  WebCore::Element *v9;
  WTF::StringImpl *v10;
  int v11;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(unsigned int *)(v4 + 4);
    if ((_DWORD)v5)
    {
      v6 = *(unsigned __int16 **)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        while (1)
        {
          v7 = *(unsigned __int8 *)v6;
          v6 = (unsigned __int16 *)((char *)v6 + 1);
          if ((v7 & 0xFFFFFFDF) == 0x45)
            break;
          if (!--v5)
            goto LABEL_7;
        }
      }
      else
      {
        while (1)
        {
          v11 = *v6++;
          if ((v11 & 0xFFFFFFDF) == 0x45)
            break;
          if (!--v5)
          {
LABEL_7:
            v8 = *(_QWORD *)(this + 24);
            if (v8)
              v9 = *(WebCore::Element **)(v8 + 8);
            else
              v9 = 0;
            v10 = WebCore::Element::locale(v9);
            return WebCore::Locale::convertFromLocalizedNumber(v10, a3);
          }
        }
      }
    }
    *(_DWORD *)v4 += 2;
  }
  *a3 = (WTF::StringImpl *)v4;
  return this;
}

void WebCore::NumberInputType::sanitizeValue(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const WTF::String *v7;

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(v4 + 4);
    if (!(_DWORD)v5
      || ((COERCE_UNSIGNED_INT64(WebCore::parseToDoubleForNumberType(*(unsigned __int8 **)(v4 + 8), v5 | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32), NAN)) & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000? (v7 = (const WTF::String *)MEMORY[0x1E0CBF738]): (v7 = a1), (v4 = *(_QWORD *)v7) != 0))
    {
      *(_DWORD *)v4 += 2;
    }
  }
  *a2 = v4;
}

BOOL WebCore::NumberInputType::hasBadInput(WebCore::NumberInputType *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  _BOOL8 v6;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  void *v14;
  WTF::StringImpl *CachedLocale;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 1408))(&v21);
  v2 = v21;
  if (v21)
  {
    WebCore::innerTextValueFrom((WebCore *)&v20, (unint64_t)v21);
    v19 = v21;
    v21 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v2);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v3 = v20;
  }
  else
  {
    v3 = *MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v3 += 2;
    v20 = v3;
  }
  if (!v3)
    goto LABEL_6;
  v8 = *(unsigned int *)(v3 + 4);
  if ((_DWORD)v8)
  {
    v9 = *(unsigned __int16 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      while (1)
      {
        v10 = *(unsigned __int8 *)v9;
        v9 = (unsigned __int16 *)((char *)v9 + 1);
        if ((v10 & 0xFFFFFFDF) == 0x45)
          break;
        if (!--v8)
          goto LABEL_18;
      }
LABEL_34:
      v4 = *(_DWORD *)v3;
      *(_DWORD *)v3 += 2;
      v20 = 0;
      v21 = (WTF::StringImpl *)v3;
      goto LABEL_9;
    }
    do
    {
      v16 = *v9++;
      if ((v16 & 0xFFFFFFDF) == 0x45)
        goto LABEL_34;
      --v8;
    }
    while (v8);
LABEL_18:
    v11 = *((_QWORD *)this + 3);
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
    *(_DWORD *)(v12 + 24) += 2;
    if ((*(_BYTE *)(v11 + 30) & 8) != 0)
      goto LABEL_53;
    v18 = *(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
      v13 = (WTF::StringImpl **)(v18 + 64);
      if (*(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x40))
        goto LABEL_24;
    }
    if ((*(_BYTE *)(v11 + 22) & 8) != 0)
    {
LABEL_53:
      if (*(_QWORD *)(v12 + 1720))
        v13 = (WTF::StringImpl **)(v12 + 1720);
      else
        v13 = (WTF::StringImpl **)(v12 + 1712);
    }
    else
    {
      v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
LABEL_24:
    CachedLocale = WebCore::Document::getCachedLocale((WebCore::Document *)v12, v13);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v14);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    WebCore::Locale::convertFromLocalizedNumber(CachedLocale, &v21);
    v3 = v20;
    goto LABEL_7;
  }
  *(_DWORD *)v3 += 2;
LABEL_6:
  v21 = (WTF::StringImpl *)v3;
LABEL_7:
  v20 = 0;
  if (v3)
  {
    v4 = *(_DWORD *)v3 - 2;
LABEL_9:
    if (v4)
      *(_DWORD *)v3 = v4;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v3, v2);
  }
  v5 = v21;
  if (!v21)
    return 0;
  v17 = *((unsigned int *)v21 + 1);
  if ((_DWORD)v17)
  {
    v6 = (COERCE_UNSIGNED_INT64(WebCore::parseToDoubleForNumberType(*((unsigned __int8 **)v21 + 1), v17 | ((unint64_t)((*((_DWORD *)v21 + 4) >> 2) & 1) << 32), NAN)) & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL;
    v5 = v21;
    v21 = 0;
    if (!v5)
      return v6;
  }
  else
  {
    v6 = 0;
    v21 = 0;
  }
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v2);
  else
    *(_DWORD *)v5 -= 2;
  return v6;
}

uint64_t WebCore::NumberInputType::supportsPlaceholder(WebCore::NumberInputType *this)
{
  return 1;
}

void WebCore::NumberInputType::attributeChanged(WebCore::NumberInputType *this, const WebCore::QualifiedName *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::HTMLTextFormControlElement *v17;
  uint64_t v18;
  WebCore::Node *ElementSibling;
  WebCore::Element *v20;
  WTF::StringImpl *v21;

  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v4 <= 0x248)
  {
    if (v4 == 578)
      goto LABEL_12;
    if (v4 != 391)
      goto LABEL_18;
LABEL_7:
    v5 = *((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_18;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      goto LABEL_18;
    v7 = (WebCore::RenderObject *)(*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL);
    if (!v7)
      goto LABEL_18;
    if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CAE67CLL);
    }
    goto LABEL_17;
  }
  if (v4 == 852)
    goto LABEL_7;
  if (v4 != 585)
    goto LABEL_18;
LABEL_12:
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      WebCore::Node::invalidateStyle(*(_QWORD *)(v8 + 8), 4u, 0);
      v10 = *(_QWORD *)(v9 + 64);
      if ((v10 & 0x100000000000000) != 0)
      {
        v18 = *(_QWORD *)(v9 + 32);
        if (!v18 || (*(_WORD *)(v18 + 28) & 8) == 0 || (*(_BYTE *)(v18 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v9);
          WebCore::invalidateForSiblingCombinators(ElementSibling, v20);
          v10 = *(_QWORD *)(v9 + 64);
        }
      }
      v7 = (WebCore::RenderObject *)(v10 & 0xFFFFFFFFFFFFLL);
      if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195CAE790);
        }
LABEL_17:
        WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(v7);
      }
    }
  }
LABEL_18:
  if (*(_QWORD *)a2 == WebCore::HTMLNames::valueAttr || *(_QWORD *)a2 == WebCore::HTMLNames::placeholderAttr)
  {
    v12 = *((_QWORD *)this + 3);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        if ((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && *(_QWORD *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
          && (*(_BYTE *)(v13 + 168) & 2) == 0)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::NumberInputType *))(*(_QWORD *)this + 272))(&v21, this);
          WebCore::HTMLTextFormControlElement::setInnerTextValue((WebCore::HTMLTextFormControlElement *)v13, &v21);
          v15 = v21;
          v21 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v14);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = *((_QWORD *)this + 3);
          if (v16)
            v17 = *(WebCore::HTMLTextFormControlElement **)(v16 + 8);
          else
            v17 = 0;
          WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v17);
        }
      }
    }
  }
}

void *WebCore::OffscreenCanvas::bisoHeap(WebCore::OffscreenCanvas *this)
{
  return &WebCore::OffscreenCanvas::bisoHeap(void)::heap;
}

uint64_t WebCore::OffscreenCanvas::operator new(uint64_t this)
{
  if (this == 208)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

void WebCore::DetachedOffscreenCanvas::~DetachedOffscreenCanvas(unsigned int **this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

_QWORD *WebCore::OffscreenCanvas::create@<X0>(WebCore::OffscreenCanvas *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v5;
  WebCore::ContextDestructionObserver *v8;
  uint64_t v9;
  WebCore::OffscreenCanvas *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  v5 = a2;
  v8 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v9 = (uint64_t)v8;
  v10 = this;
  if (!*((_BYTE *)this + 274))
  {
    v11 = (char *)this - 192;
    v12 = *((_QWORD *)this + 64);
    if (v12)
    {
      v13 = *(char **)(v12 + 8);
      if (v13)
        v11 = v13;
    }
    v10 = (WebCore::OffscreenCanvas *)(v11 + 192);
  }
  *(_QWORD *)v8 = &off_1E33A18C0;
  *((_QWORD *)v8 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v8, v10);
  *(_QWORD *)v9 = &off_1E33A0540;
  *(_QWORD *)(v9 + 16) = 0;
  if (*((_BYTE *)v10 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195CAEA14);
  }
  v14 = v5 | (unint64_t)(a3 << 32);
  v20 = v9;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v10 + 16, &v20, (uint64_t)&v19);
  *(_DWORD *)(v9 + 24) = 1;
  v15 = (*(uint64_t (**)(WebCore::OffscreenCanvas *))(*(_QWORD *)this + 216))(this);
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  v16 = 0x7FFFFFFFFFFFFFFFLL;
  if (v17)
    v16 = v15;
  *(_QWORD *)(v9 + 96) = v16;
  *(_WORD *)(v9 + 104) = 1;
  *(_OWORD *)(v9 + 112) = 0uLL;
  *(_OWORD *)(v9 + 128) = 0uLL;
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 168) = 0;
  *(_QWORD *)v9 = &off_1E33D6B90;
  *(_QWORD *)(v9 + 32) = &unk_1E33D6C80;
  *(_QWORD *)(v9 + 40) = v14;
  *(_QWORD *)(v9 + 144) = &unk_1E33D6D38;
  *(_QWORD *)(v9 + 152) = 0;
  *(_QWORD *)(v9 + 200) = 0;
  *(_QWORD *)(v9 + 176) = 0;
  *(_QWORD *)(v9 + 184) = 0;
  *(_WORD *)(v9 + 192) = 0;
  *a4 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9);
}

_QWORD *WebCore::OffscreenCanvas::create@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::ContextDestructionObserver *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v6 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v7 = (uint64_t)v6;
  v8 = **a2;
  v9 = (*a2)[1];
  **a2 = 0;
  v10 = a1;
  if (!*(_BYTE *)(a1 + 274))
  {
    v11 = a1 - 192;
    v12 = *(_QWORD *)(a1 + 512);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        v11 = v13;
    }
    v10 = v11 + 192;
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *((_QWORD *)v6 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v6, (WebCore::ScriptExecutionContext *)v10);
  *(_QWORD *)v7 = &off_1E33A0540;
  *(_QWORD *)(v7 + 16) = 0;
  if (*(_BYTE *)(v10 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195CAEB90);
  }
  v18 = v7;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v10 + 128), &v18, (uint64_t)&v17);
  *(_DWORD *)(v7 + 24) = 1;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  *(_QWORD *)(v7 + 40) = v9;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  if (!v15)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v7 + 96) = v14;
  *(_WORD *)(v7 + 104) = 1;
  *(_OWORD *)(v7 + 112) = 0uLL;
  *(_OWORD *)(v7 + 128) = 0uLL;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 168) = 0;
  *(_QWORD *)v7 = &off_1E33D6B90;
  *(_QWORD *)(v7 + 32) = &unk_1E33D6C80;
  *(_QWORD *)(v7 + 144) = &unk_1E33D6D38;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 176) = v8;
  *(_QWORD *)(v7 + 184) = 0;
  *(_WORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 200) = 0;
  *a3 = v7;
  if (!*((_BYTE *)*a2 + 16))
    *(_BYTE *)(v7 + 104) = 0;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v7);
}

_QWORD *WebCore::OffscreenCanvas::create@<X0>(WebCore::OffscreenCanvas *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::ContextDestructionObserver *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::OffscreenCanvas *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;

  v7 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v8 = (uint64_t)v7;
  v9 = *((_QWORD *)a2 + 4);
  v10 = (unsigned int *)*((_QWORD *)a2 + 5);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v10 + 2;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 + 1, v12));
  v15 = this;
  if (!*((_BYTE *)this + 274))
  {
    v16 = (char *)this - 192;
    v17 = *((_QWORD *)this + 64);
    if (v17)
    {
      v18 = *(char **)(v17 + 8);
      if (v18)
        v16 = v18;
    }
    v15 = (WebCore::OffscreenCanvas *)(v16 + 192);
  }
  *(_QWORD *)v7 = &off_1E33A18C0;
  *((_QWORD *)v7 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v7, v15);
  *(_QWORD *)v8 = &off_1E33A0540;
  *(_QWORD *)(v8 + 16) = 0;
  if (*((_BYTE *)v15 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195CAED30);
  }
  v26 = v8;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v15 + 16, &v26, (uint64_t)&v25);
  *(_DWORD *)(v8 + 24) = 1;
  v19 = (*(uint64_t (**)(WebCore::OffscreenCanvas *))(*(_QWORD *)this + 216))(this);
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  if (v21)
    v20 = v19;
  *(_QWORD *)(v8 + 96) = v20;
  *(_WORD *)(v8 + 104) = 1;
  *(_OWORD *)(v8 + 112) = 0uLL;
  *(_OWORD *)(v8 + 128) = 0uLL;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)v8 = &off_1E33D6B90;
  *(_QWORD *)(v8 + 32) = &unk_1E33D6C80;
  *(_QWORD *)(v8 + 40) = v11;
  *(_QWORD *)(v8 + 144) = &unk_1E33D6D38;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 176) = v10;
  *(_QWORD *)(v8 + 184) = 0;
  *(_WORD *)(v8 + 192) = 0;
  *(_QWORD *)(v8 + 200) = 0;
  *a3 = v8;
  if (v10)
  {
    do
    {
      v22 = __ldaxr(v12);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v12));
    if (!v23)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)*a3);
}

void WebCore::OffscreenCanvas::~OffscreenCanvas(WebCore::OffscreenCanvas *this)
{
  WebCore::CanvasBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = (WebCore::OffscreenCanvas *)((char *)this + 32);
  WebCore::CanvasBase::notifyObserversCanvasDestroyed((WebCore::OffscreenCanvas *)((char *)this + 32));
  WebCore::CanvasBase::removeCanvasNeedingPreparationForDisplayOrFlush(v2);
  v3 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v34 = 0;
  WebCore::CanvasBase::setImageBuffer(v2, &v34, &v35);
  v5 = v35;
  v35 = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_8:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v32 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v32 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          goto LABEL_20;
LABEL_16:
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, v4);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_20:
  v13 = v34;
  v34 = 0;
  if (!v13)
    goto LABEL_37;
  v14 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_25:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v33 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v33 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 != 1)
  {
    __clrex();
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17)
      goto LABEL_37;
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    goto LABEL_32;
  if (v17)
    goto LABEL_37;
LABEL_33:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v4);
LABEL_37:
  v21 = (WTF::StringImpl **)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v21)
  {
    v22 = v21[5];
    v21[5] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = *v21;
    *v21 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v23 -= 2;
    }
    WTF::fastFree((WTF *)v21, v4);
  }
  v24 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = (unsigned int *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  v29 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  WebCore::EventTarget::~EventTarget((WebCore::OffscreenCanvas *)((char *)this + 144), v4);
  WebCore::CanvasBase::~CanvasBase(v2, v30);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v31);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::OffscreenCanvas::~OffscreenCanvas(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::OffscreenCanvas::~OffscreenCanvas(WebCore::OffscreenCanvas *this)
{
  WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)((char *)this - 32));
}

{
  WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)((char *)this - 144));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)((char *)this - 144));
  bmalloc::api::isoDeallocate(v1, v2);
}

WebCore::OffscreenCanvas *WebCore::OffscreenCanvas::setWidth(WebCore::OffscreenCanvas *this, unsigned int a2)
{
  WebCore::OffscreenCanvas *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  WebCore::InspectorInstrumentation *v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  WebCore::CanvasRenderingContext *v10;

  if (!*((_BYTE *)this + 192))
  {
    v2 = this;
    if (*((_DWORD *)this + 10) != a2)
    {
      v3 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 5) = a2 | ((unint64_t)*((unsigned int *)this + 11) << 32);
      v4 = (*(uint64_t (**)(void))(v3 + 88))();
      if (v4)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v10 = (WebCore::CanvasRenderingContext *)v4;
          v7 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 144))(*(_QWORD *)(v4 + 32));
          if (v7)
          {
            v9 = WebCore::InspectorInstrumentation::instrumentingAgents(v7, v8);
            if (v9)
              WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl(v9, v10);
          }
        }
      }
    }
    this = (WebCore::OffscreenCanvas *)WebCore::OffscreenCanvas::reset(v2);
    v5 = (_QWORD **)*((_QWORD *)v2 + 21);
    if (v5)
    {
      this = (WebCore::OffscreenCanvas *)((uint64_t (*)(_QWORD **))(*v5)[7])(v5);
      if ((_DWORD)this)
      {
        (*(void (**)(_QWORD *))(*v5[4] + 16))(v5[4]);
        ((void (*)(_QWORD **))(*v5)[30])(v5);
        return (WebCore::OffscreenCanvas *)(*(uint64_t (**)(_QWORD *))(*v5[4] + 24))(v5[4]);
      }
    }
  }
  return this;
}

_QWORD *WebCore::OffscreenCanvas::setSize(WebCore::OffscreenCanvas *this, const WebCore::IntSize *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD **v7;
  WebCore::InspectorInstrumentation *v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v11;
  WebCore::CanvasRenderingContext *v12;

  if (*(_DWORD *)a2 != *((_DWORD *)this + 10) || *((_DWORD *)a2 + 1) != *((_DWORD *)this + 11))
  {
    v4 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 5) = *(_QWORD *)a2;
    v5 = (*(uint64_t (**)(void))(v4 + 88))();
    if (v5)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v12 = (WebCore::CanvasRenderingContext *)v5;
        v9 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 144))(*(_QWORD *)(v5 + 32));
        if (v9)
        {
          v11 = WebCore::InspectorInstrumentation::instrumentingAgents(v9, v10);
          if (v11)
            WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl(v11, v12);
        }
      }
    }
  }
  result = WebCore::OffscreenCanvas::reset(this);
  v7 = (_QWORD **)*((_QWORD *)this + 21);
  if (v7)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD **))(*v7)[7])(v7);
    if ((_DWORD)result)
    {
      (*(void (**)(_QWORD *))(*v7[4] + 16))(v7[4]);
      ((void (*)(_QWORD **))(*v7)[30])(v7);
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7[4] + 24))(v7[4]);
    }
  }
  return result;
}

WebCore::OffscreenCanvas *WebCore::OffscreenCanvas::setHeight(WebCore::OffscreenCanvas *this, uint64_t a2)
{
  WebCore::OffscreenCanvas *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  WebCore::InspectorInstrumentation *v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  WebCore::CanvasRenderingContext *v10;

  if (!*((_BYTE *)this + 192))
  {
    v2 = this;
    if (*((_DWORD *)this + 11) != (_DWORD)a2)
    {
      v3 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 5) = *((unsigned int *)this + 10) | (unint64_t)(a2 << 32);
      v4 = (*(uint64_t (**)(void))(v3 + 88))();
      if (v4)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v10 = (WebCore::CanvasRenderingContext *)v4;
          v7 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 144))(*(_QWORD *)(v4 + 32));
          if (v7)
          {
            v9 = WebCore::InspectorInstrumentation::instrumentingAgents(v7, v8);
            if (v9)
              WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl(v9, v10);
          }
        }
      }
    }
    this = (WebCore::OffscreenCanvas *)WebCore::OffscreenCanvas::reset(v2);
    v5 = (_QWORD **)*((_QWORD *)v2 + 21);
    if (v5)
    {
      this = (WebCore::OffscreenCanvas *)((uint64_t (*)(_QWORD **))(*v5)[7])(v5);
      if ((_DWORD)this)
      {
        (*(void (**)(_QWORD *))(*v5[4] + 16))(v5[4]);
        ((void (*)(_QWORD **))(*v5)[30])(v5);
        return (WebCore::OffscreenCanvas *)(*(uint64_t (**)(_QWORD *))(*v5[4] + 24))(v5[4]);
      }
    }
  }
  return this;
}

_QWORD *WebCore::OffscreenCanvas::reset(WebCore::OffscreenCanvas *this)
{
  _DWORD *v2;
  _BYTE *v3;
  WebCore::CanvasRenderingContext2DBase *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  _DWORD *v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;

  v2 = (_DWORD *)((char *)this + 32);
  v3 = (_BYTE *)*((_QWORD *)this + 8);
  if (v3)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v3 + 104))(*(_QWORD *)v3, 1);
    v3[8] = 0;
    v29 = (_BYTE *)*((_QWORD *)this + 8);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v29 + 96))(*(_QWORD *)v29, 1);
    v29[8] = 1;
  }
  v4 = (WebCore::CanvasRenderingContext2DBase *)*((_QWORD *)this + 21);
  if (v4 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v4 + 80))(*((_QWORD *)this + 21)))
  {
    (*(void (**)(_QWORD *))(**((_QWORD **)v4 + 4) + 16))(*((_QWORD **)v4 + 4));
    WebCore::CanvasRenderingContext2DBase::reset(v4, v5);
    (*(void (**)(_QWORD *))(**((_QWORD **)v4 + 4) + 24))(*((_QWORD **)v4 + 4));
  }
  *((_BYTE *)this + 105) = 0;
  v33 = 0;
  WebCore::CanvasBase::setImageBuffer(v2, (uint64_t *)&v33, &v32);
  v7 = v32;
  v32 = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_11:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v30 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v30 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          goto LABEL_23;
LABEL_19:
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          WTF::fastFree((WTF *)v8, v6);
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_23:
  v15 = (uint64_t)v33;
  v33 = 0;
  if (!v15)
    goto LABEL_40;
  v16 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_28;
  }
  MEMORY[0x19AEA534C](v16);
LABEL_28:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v31 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v31 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 != 1)
  {
    __clrex();
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (v19)
      goto LABEL_40;
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
    goto LABEL_35;
  if (v19)
    goto LABEL_40;
LABEL_36:
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (!v21)
    WTF::fastFree((WTF *)v16, v6);
LABEL_40:
  v23 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  result = WebCore::CanvasBase::notifyObserversCanvasResized(v2);
  if (!*((_BYTE *)this + 193) && *((_QWORD *)this + 22))
  {
    v25 = *((_QWORD *)this + 1);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v27 = v26 - 96;
      else
        v27 = 0;
    }
    else
    {
      v27 = 0;
    }
    *((_BYTE *)this + 193) = 1;
    ++*((_DWORD *)this + 6);
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v28 = &off_1E33D6F98;
    v28[1] = this;
    v28[2] = this;
    v33 = v28;
    v34 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v27 + 336))(v27, &v33);
    result = v33;
    v33 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::OffscreenCanvas::setSize(WebCore::OffscreenCanvas *this, const WebCore::IntSize *a2)
{
  WebCore::OffscreenCanvas *v3;
  uint64_t v5;
  _QWORD *result;
  _QWORD **v7;
  WebCore::InspectorInstrumentation *v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v11;
  WebCore::CanvasRenderingContext *v12;

  v3 = (WebCore::OffscreenCanvas *)((char *)this - 32);
  if (*(_DWORD *)a2 != *((_DWORD *)this + 2) || *((_DWORD *)a2 + 1) != *((_DWORD *)this + 3))
  {
    *((_QWORD *)this + 1) = *(_QWORD *)a2;
    v5 = (*(uint64_t (**)(WebCore::OffscreenCanvas *))(*(_QWORD *)this + 88))(this);
    if (v5)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v12 = (WebCore::CanvasRenderingContext *)v5;
        v9 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 144))(*(_QWORD *)(v5 + 32));
        if (v9)
        {
          v11 = WebCore::InspectorInstrumentation::instrumentingAgents(v9, v10);
          if (v11)
            WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl(v11, v12);
        }
      }
    }
  }
  result = WebCore::OffscreenCanvas::reset(v3);
  v7 = (_QWORD **)*((_QWORD *)this + 17);
  if (v7)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD **))(*v7)[7])(v7);
    if ((_DWORD)result)
    {
      (*(void (**)(_QWORD *))(*v7[4] + 16))(v7[4]);
      ((void (*)(_QWORD **))(*v7)[30])(v7);
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7[4] + 24))(v7[4]);
    }
  }
  return result;
}

uint64_t WebCore::OffscreenCanvas::getContext@<X0>(WebCore::JSDOMGlobalObject *this@<X1>, uint64_t result@<X0>, unsigned int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char v6;
  _QWORD *v8;
  WebCore::CanvasRenderingContext *v9;
  int v10;
  _QWORD **v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  _DWORD *v19;
  _DWORD *v20;
  WebCore::GPU *v21;
  WebCore::GPUCanvasContextCocoa *v22;
  int v23;
  _QWORD **v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  WebCore::CanvasRenderingContext *v28;
  WebCore::CanvasRenderingContext *v29;
  uint64_t v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  bmalloc::api *v38;
  uint64_t v39;
  char v40;
  WTF::StringImpl *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  int v48;
  WebCore::LocalDOMWindow *v49;
  WebCore::Navigator *v50;
  WebCore::GPU *v51;
  WebCore::GPUCanvasContextCocoa *v52;
  int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  WebCore::InspectorInstrumentation *v57;
  WebCore::ScriptExecutionContext *v58;
  uint64_t v59;
  WebCore::InspectorCanvasAgent *v60;
  WebCore::InspectorInstrumentation *v61;
  uint64_t v62;
  WebCore::InspectorCanvasAgent *v63;
  _Unwind_Exception *v64;
  void *v65;
  bmalloc::api *v66;
  char v67[8];
  WTF::StringImpl *v68;
  char v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  int v74;

  if (*(_BYTE *)(result + 192))
  {
    v6 = 8;
LABEL_3:
    *(_BYTE *)(a5 + 8) = v6;
    *(_QWORD *)(a5 + 16) = 0;
    *(_DWORD *)(a5 + 32) = 1;
    return result;
  }
  v8 = (_QWORD *)result;
  switch(a3)
  {
    case 4u:
      v11 = *(_QWORD ***)(result + 168);
      if (v11)
      {
LABEL_104:
        result = ((uint64_t (*)(_QWORD **, WebCore::JSDOMGlobalObject *))(*v11)[6])(v11, this);
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(_QWORD *))(*v11[4] + 16))(v11[4]);
          *(_QWORD *)(a5 + 8) = v11;
          v10 = 2;
          goto LABEL_106;
        }
        goto LABEL_108;
      }
      v12 = (JSC::VM *)*((_QWORD *)this + 7);
      if (*((_DWORD *)v12 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
        if ((result & 1) != 0)
          goto LABEL_135;
      }
      v13 = v8[1];
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
          v15 = v14 - 96;
        else
          v15 = 0;
      }
      else
      {
        v15 = 0;
      }
      v16 = *(unsigned __int8 *)(v15 + 274);
      if (*(_BYTE *)(v15 + 274))
      {
        if (v16 == 1 || v16 == 2)
          *(_DWORD *)(v15 + 312) += 2;
      }
      else
      {
        *(_DWORD *)(v15 - 168) += 4;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
      if ((_DWORD)result)
      {
        v17 = *(_QWORD *)(v15 + 552);
        if (!v17)
        {
          v18 = *(_BYTE *)(v15 + 560);
          v17 = WTF::fastMalloc((WTF *)0x58);
          *(_DWORD *)(v17 + 16) = 1;
          *(_QWORD *)v17 = &off_1E33A18C0;
          *(_QWORD *)(v17 + 8) = 0;
          WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v17, (WebCore::ScriptExecutionContext *)v15);
          *(_QWORD *)(v17 + 56) = 0;
          *(_OWORD *)(v17 + 40) = 0u;
          *(_OWORD *)(v17 + 24) = 0u;
          *(_QWORD *)v17 = &off_1E3402F28;
          v19 = *(_DWORD **)(v15 + 536);
          if (v19)
            *v19 += 2;
          *(_QWORD *)(v17 + 64) = v19;
          *(_BYTE *)(v17 + 72) = v18;
          *(_QWORD *)(v17 + 80) = 0;
          v20 = *(_DWORD **)(v15 + 552);
          *(_QWORD *)(v15 + 552) = v17;
          if (v20)
          {
            if (v20[4] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
              v17 = *(_QWORD *)(v15 + 552);
            }
            else
            {
              --v20[4];
            }
          }
        }
        result = WebCore::WorkerNavigator::gpu((WebCore::WorkerNavigator *)v17);
        if (result)
        {
          v21 = (WebCore::GPU *)result;
          v22 = (WebCore::GPUCanvasContextCocoa *)bmalloc::api::isoAllocate();
          WebCore::GPUCanvasContextCocoa::GPUCanvasContextCocoa(v22, (WebCore::CanvasBase *)(v8 + 4), v21);
          if (v22)
            WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v22 + 5);
          result = v8[21];
          v8[21] = v22;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
        v23 = *(_DWORD *)(v15 + 312) - 1;
        if (*(_DWORD *)(v15 + 312) != 1)
          goto LABEL_31;
LABEL_165:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
        goto LABEL_100;
      }
      v48 = *(unsigned __int8 *)(v15 + 274);
      if (*(_BYTE *)(v15 + 274))
      {
        if (v48 == 1)
        {
          if (*(_DWORD *)(v15 + 312) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          else
            --*(_DWORD *)(v15 + 312);
        }
        else
        {
          if (v48 != 2)
          {
LABEL_89:
            if (v48)
            {
              if (v48 == 1)
              {
                v23 = *(_DWORD *)(v15 + 312);
                *(_DWORD *)(v15 + 312) = v23 + 1;
                if (v23)
                {
LABEL_31:
                  *(_DWORD *)(v15 + 312) = v23;
                  goto LABEL_100;
                }
                goto LABEL_165;
              }
              if (v48 == 2)
              {
                ++*(_DWORD *)(v15 + 312);
                result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
              }
            }
            else
            {
              *(_DWORD *)(v15 - 168) += 2;
              v49 = *(WebCore::LocalDOMWindow **)(v15 + 504);
              if (v49)
              {
                ++*((_DWORD *)v49 + 6);
                v50 = (WebCore::Navigator *)WebCore::LocalDOMWindow::navigator(v49);
                result = WebCore::Navigator::gpu(v50);
                if (result)
                {
                  v51 = (WebCore::GPU *)result;
                  v52 = (WebCore::GPUCanvasContextCocoa *)bmalloc::api::isoAllocate();
                  WebCore::GPUCanvasContextCocoa::GPUCanvasContextCocoa(v52, (WebCore::CanvasBase *)(v8 + 4), v51);
                  if (v52)
                    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v52 + 5);
                  result = v8[21];
                  v8[21] = v52;
                  if (result)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                }
                if (*((_DWORD *)v49 + 6) == 1)
                  result = (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v49 + 72))(v49);
                else
                  --*((_DWORD *)v49 + 6);
              }
              if (*(_DWORD *)(v15 - 168) == 2)
              {
                if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), this);
              }
              else
              {
                *(_DWORD *)(v15 - 168) -= 2;
              }
            }
LABEL_100:
            v53 = *(unsigned __int8 *)(v15 + 274);
            if (*(_BYTE *)(v15 + 274))
            {
              if (v53 == 1)
              {
                if (*(_DWORD *)(v15 + 312) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
                else
                  --*(_DWORD *)(v15 + 312);
              }
              else if (v53 == 2)
              {
                result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
              }
            }
            else if (*(_DWORD *)(v15 - 168) == 2)
            {
              if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), this);
            }
            else
            {
              *(_DWORD *)(v15 - 168) -= 2;
            }
            v11 = (_QWORD **)v8[21];
            if (!v11)
              goto LABEL_108;
            goto LABEL_104;
          }
          result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
        }
      }
      else if (*(_DWORD *)(v15 - 168) == 2)
      {
        if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), this);
      }
      else
      {
        *(_DWORD *)(v15 - 168) -= 2;
      }
      v48 = *(unsigned __int8 *)(v15 + 274);
      goto LABEL_89;
    case 3u:
      v24 = *(_QWORD ***)(result + 168);
      if (v24)
        goto LABEL_45;
      v25 = *a4;
      if (*a4 && *(_DWORD *)v25)
      {
        v54 = *(uint64_t **)(v25 + 8);
        if (v54)
        {
          v26 = *v54;
          if ((*v54 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v26 + 5) > 0x16u)
            goto LABEL_35;
          goto LABEL_147;
        }
        if (MEMORY[5] <= 0x16u)
        {
LABEL_147:
          v26 = 2;
          goto LABEL_35;
        }
        v26 = 0;
      }
      else
      {
        v26 = 10;
      }
LABEL_35:
      result = WebCore::convertDictionary<WebCore::ImageBitmapRenderingContextSettings>((JSC::JSCell *)v26, (unint64_t)this, (uint64_t)&v72);
      if (HIDWORD(v72))
        goto LABEL_135;
      v27 = (char)v72;
      v28 = (WebCore::CanvasRenderingContext *)bmalloc::api::isoAllocate();
      v29 = WebCore::CanvasRenderingContext::CanvasRenderingContext(v28, (WebCore::CanvasBase *)(v8 + 4));
      *(_QWORD *)v29 = off_1E33DD028;
      *((_DWORD *)v29 + 10) = 1;
      *((_BYTE *)v29 + 44) = v27;
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v57 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v28 + 4) + 144))(*((_QWORD **)v28 + 4));
        if (v57)
        {
          v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v57, v58);
          if (v59)
          {
            v60 = *(WebCore::InspectorCanvasAgent **)(v59 + 96);
            if (v60)
              WebCore::InspectorCanvasAgent::didCreateCanvasRenderingContext(v60, v28);
          }
        }
      }
      v31 = v8[21];
      v8[21] = v28;
      if (!v31
        || ((*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31),
            (v28 = (WebCore::CanvasRenderingContext *)v8[21]) != 0))
      {
        if (((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)v28 + 64))(v28) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195CAFF54);
        }
      }
      v66 = 0;
      result = (uint64_t)WebCore::ImageBitmapRenderingContext::transferFromImageBitmap(v28, &v66, (uint64_t)v67);
      if (v69)
      {
        result = (uint64_t)v68;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            result = WTF::StringImpl::destroy(v68, this);
          else
            *(_DWORD *)v68 -= 2;
        }
      }
      v24 = (_QWORD **)v8[21];
      if (!v24)
        goto LABEL_108;
LABEL_45:
      result = ((uint64_t (*)(_QWORD **, WebCore::JSDOMGlobalObject *))(*v24)[8])(v24, this);
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(_QWORD *))(*v24[4] + 16))(v24[4]);
        *(_QWORD *)(a5 + 8) = v24;
        v10 = 3;
        goto LABEL_106;
      }
LABEL_108:
      *(_BYTE *)(a5 + 8) = 0;
      *(_BYTE *)(a5 + 24) = 0;
      goto LABEL_109;
    case 0u:
      v9 = *(WebCore::CanvasRenderingContext **)(result + 168);
      if (v9)
      {
LABEL_8:
        result = (*(uint64_t (**)(WebCore::CanvasRenderingContext *, WebCore::JSDOMGlobalObject *))(*(_QWORD *)v9 + 80))(v9, this);
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v9 + 4) + 16))(*((_QWORD *)v9 + 4));
          *(_QWORD *)(a5 + 8) = v9;
          v10 = 4;
LABEL_106:
          *(_DWORD *)(a5 + 16) = v10;
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      v43 = *a4;
      if (!*a4 || !*(_DWORD *)v43)
      {
        v44 = 10;
        goto LABEL_77;
      }
      v55 = *(uint64_t **)(v43 + 8);
      if (v55)
      {
        v44 = *v55;
        if ((*v55 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v44 + 5) > 0x16u)
        {
LABEL_77:
          result = WebCore::convertDictionary<WebCore::CanvasRenderingContext2DSettings>(this, (JSC::JSCell *)v44, (uint64_t)&v72);
          if (!v74)
          {
            v70 = v72;
            v71 = v73;
            v9 = (WebCore::CanvasRenderingContext *)bmalloc::api::isoAllocate();
            v45 = (_QWORD *)WebCore::CanvasRenderingContext2DBase::CanvasRenderingContext2DBase((uint64_t)v9, (uint64_t)(v8 + 4), (uint64_t *)&v70, 0);
            *v45 = off_1E33DD398;
            v45[5] = &unk_1E33DD4D0;
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v61 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v9 + 4)
                                                                                           + 144))(*((_QWORD *)v9 + 4));
              if (v61)
              {
                v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v61, this);
                if (v62)
                {
                  v63 = *(WebCore::InspectorCanvasAgent **)(v62 + 96);
                  if (v63)
                    WebCore::InspectorCanvasAgent::didCreateCanvasRenderingContext(v63, v9);
                }
              }
            }
            v47 = v8[21];
            v8[21] = v9;
            if (v47)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
              v9 = (WebCore::CanvasRenderingContext *)v8[21];
              if (!v9)
                goto LABEL_108;
            }
            goto LABEL_8;
          }
LABEL_135:
          v6 = 37;
          goto LABEL_3;
        }
      }
      else if (MEMORY[5] > 0x16u)
      {
        v44 = 0;
        goto LABEL_77;
      }
      v44 = 2;
      goto LABEL_77;
  }
  if (a3 > 2)
  {
    v6 = 33;
    goto LABEL_3;
  }
  v32 = *(_QWORD ***)(result + 168);
  if (!v32)
  {
    v33 = *a4;
    if (*a4 && *(_DWORD *)v33)
    {
      v56 = *(uint64_t **)(v33 + 8);
      if (v56)
      {
        v34 = *v56;
        if ((*v56 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v34 + 5) > 0x16u)
          goto LABEL_51;
        goto LABEL_159;
      }
      if (MEMORY[5] <= 0x16u)
      {
LABEL_159:
        v34 = 2;
        goto LABEL_51;
      }
      v34 = 0;
    }
    else
    {
      v34 = 10;
    }
LABEL_51:
    result = WebCore::convertDictionary<WebCore::WebGLContextAttributes>(this, (JSC::JSCell *)v34, (uint64_t)&v72);
    if (v74)
      goto LABEL_135;
    v35 = v8[1];
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
        v37 = v36 - 96;
      else
        v37 = 0;
    }
    else
    {
      v37 = 0;
    }
    v38 = (bmalloc::api *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 136))(v37);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(v37);
    v39 = *((_QWORD *)v38 + 59);
    if (!(~*((_QWORD *)v38 + 60) & 0x8000000000000000 | ~(_DWORD)v39 & 0x200000))
    {
      v40 = (v39 & 0x2000000000000000) != 0 ? 0 : result;
      if ((*((_QWORD *)v38 + 54) & 0x10) != 0 && (v40 & 1) == 0)
      {
        if (v74)
        {
          v64 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
          bmalloc::api::isoDeallocate(v38, v65);
          _Unwind_Resume(v64);
        }
        WebCore::WebGLRenderingContextBase::create((WebCore::CanvasBase *)(v8 + 4), (uint64_t)v72, v73, a3 != 1, &v70);
        v41 = v70;
        v70 = 0;
        if (v41)
          v42 = (char *)v41 + 8;
        else
          v42 = 0;
        result = v8[21];
        v8[21] = v42;
        if (result)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          result = (uint64_t)v70;
          v70 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    v32 = (_QWORD **)v8[21];
  }
  if (a3 == 1)
  {
    if (!v32)
      goto LABEL_108;
    result = ((uint64_t (*)(_QWORD **, WebCore::JSDOMGlobalObject *))(*v32)[4])(v32, this);
    if (!(_DWORD)result)
      goto LABEL_108;
    result = (*(uint64_t (**)(_QWORD *))(*v32[4] + 16))(v32[4]);
    *(_QWORD *)(a5 + 8) = v32 - 1;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
    if (!v32)
      goto LABEL_108;
    result = ((uint64_t (*)(_QWORD **, WebCore::JSDOMGlobalObject *))(*v32)[5])(v32, this);
    if (!(_DWORD)result)
      goto LABEL_108;
    result = (*(uint64_t (**)(_QWORD *))(*v32[4] + 16))(v32[4]);
    *(_QWORD *)(a5 + 8) = v32 - 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
LABEL_107:
  *(_BYTE *)(a5 + 24) = 1;
LABEL_109:
  *(_DWORD *)(a5 + 32) = 0;
  return result;
}

uint64_t WebCore::OffscreenCanvas::scriptExecutionContext(WebCore::OffscreenCanvas *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

_QWORD *WebCore::OffscreenCanvas::transferToImageBitmap@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  char v3;
  int *v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (*((_BYTE *)this + 192) || (v4 = (int *)this, (this = (_QWORD *)this[21]) == 0))
  {
    v3 = 8;
LABEL_3:
    *(_BYTE *)a2 = v3;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  if (v4[10] < 1 || v4[11] <= 0)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return this;
  }
  v5 = (_DWORD *)*((_QWORD *)v4 + 23);
  *((_QWORD *)v4 + 23) = 0;
  if (v5)
  {
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      this = (_QWORD *)*((_QWORD *)v4 + 21);
    }
    else
    {
      --v5[2];
    }
  }
  this = (*(_QWORD *(**)(uint64_t *__return_ptr))(*this + 144))(&v18);
  v6 = v18;
  if (!v18)
  {
    v3 = 24;
    goto LABEL_3;
  }
  v18 = 0;
  v7 = *((_BYTE *)v4 + 104);
  this = (_QWORD *)bmalloc::api::isoAllocate();
  *this = 0;
  *((_DWORD *)this + 2) = 1;
  this[2] = v6;
  this[3] = 0;
  *((_BYTE *)this + 32) = this[4] & 0xF8 | v7;
  *(_QWORD *)a2 = this;
  *(_DWORD *)(a2 + 16) = 0;
  v9 = v18;
  v18 = 0;
  if (!v9)
    return this;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_19;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C](v10);
LABEL_19:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_25:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (!v13)
  {
    if (v14)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (!v15)
      return (_QWORD *)WTF::fastFree((WTF *)v10, v8);
  }
  return this;
}

_DWORD *WebCore::OffscreenCanvas::clearCopiedImage(WebCore::OffscreenCanvas *this)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *WebCore::OffscreenCanvas::convertToBlob(uint64_t a1, double *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore *v8;
  double v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ScriptExecutionContext *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WebCore::JSBlob **v24;
  WebCore::JSDOMGlobalObject *v25;
  unint64_t v26;
  objc_class *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  WebCore::ThreadGlobalData *v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v51;
  int v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  int v56;
  WTF::StringImpl *v57;
  int v58[2];
  _BYTE v59[8];
  WTF::StringImpl *v60;

  if (!*(_BYTE *)(a1 + 104))
  {
    v5 = *a3;
    v54 = 0;
    v6 = 14;
    goto LABEL_35;
  }
  if (*(_BYTE *)(a1 + 192))
  {
    v5 = *a3;
    v54 = 0;
    v6 = 8;
    goto LABEL_35;
  }
  if (*(int *)(a1 + 40) < 1 || *(int *)(a1 + 44) <= 0)
  {
    v5 = *a3;
    v54 = 0;
    v6 = 0;
LABEL_35:
    WebCore::DeferredPromise::reject(v5, (JSC::JSGlobalObject *)v6, (JSC::JSGlobalObject *)&v54, 0);
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  WebCore::CanvasBase::makeRenderingResultsAvailable(a1 + 32, 1, (uint64_t *)v58);
  if (!*(_QWORD *)v58)
  {
    v31 = *a3;
    v54 = 0;
    WebCore::DeferredPromise::reject(v31, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v54, 0);
    result = v54;
    v54 = 0;
    if (!result)
      goto LABEL_50;
    goto LABEL_48;
  }
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    goto LABEL_9;
  v43 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v43 || (v44 = *(WebCore::ThreadGlobalData **)(v43 + 96)) == 0)
    v44 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(v8);
  v45 = (uint64_t *)*((_QWORD *)v44 + 9);
  if (!v45)
  {
    WebCore::ThreadGlobalData::initializeMimeTypeRegistryThreadGlobalData(v44);
    v45 = (uint64_t *)*((_QWORD *)v44 + 9);
  }
  if (*v45
    && WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v45, (WTF::ASCIICaseInsensitiveHash *)a2))
  {
    WTF::String::convertToASCIILowercase((WTF::String *)a2);
  }
  else
  {
LABEL_9:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57 = v54;
  }
  v9 = a2[1];
  v10 = v9 >= 0.0;
  v11 = v9 <= 1.0;
  if (v10 && v11)
    v12 = *((_QWORD *)a2 + 1);
  else
    v12 = 0;
  WebCore::ImageBuffer::toData((WebCore *)&v57, *(uint64_t *)v58, v12, v10 & v11, 0, &v54);
  if (v56)
  {
    v13 = *(_QWORD *)(a1 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
        v15 = (WebCore::ScriptExecutionContext *)(v14 - 96);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    v16 = (WTF::StringImpl *)bmalloc::api::isoAllocate();
    v17 = WebCore::Blob::Blob((uint64_t)v16, v15, (uint64_t)&v54, &v57);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v17 + 24));
    v19 = *a3;
    v20 = *(_QWORD *)(v19 + 24);
    if (!v20 || !*(_QWORD *)v20 || (*(_BYTE *)(v20 + 8) & 3) != 0)
      goto LABEL_32;
    v21 = *(_QWORD *)(v19 + 32);
    if (!v21 || (*(_BYTE *)(v21 + 8) & 3) != 0)
      v22 = 0;
    else
      v22 = *(uint64_t **)v21;
    v23 = v22[7];
    MEMORY[0x19AEA3294](v59, v23);
    v24 = **(WebCore::JSBlob ****)(v19 + 32);
    ++*((_DWORD *)v16 + 4);
    v60 = v16;
    if ((*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 24))(v16))
      v26 = WebCore::createWrapper<WebCore::File,WebCore::Blob>((uint64_t)v24, (uint64_t *)&v60);
    else
      v26 = WebCore::createWrapper<WebCore::Blob,WebCore::Blob>(v24, (uint64_t *)&v60, v25);
    v27 = (objc_class *)v26;
    v28 = v60;
    v60 = 0;
    if (v28)
    {
      if (*((_DWORD *)v28 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
      else
        --*((_DWORD *)v28 + 4);
    }
    if (!*(_QWORD *)(v23 + 16))
    {
      WebCore::DeferredPromise::callFunction(v19, v22, 0, v27);
LABEL_31:
      MEMORY[0x19AEA32A0](v59);
LABEL_32:
      if (*((_DWORD *)v16 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
      else
        --*((_DWORD *)v16 + 4);
      goto LABEL_45;
    }
    v53 = *(_QWORD *)(v23 + 16);
    v47 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v22);
    if (!(*(unsigned int (**)(_QWORD *))(*v47 + 64))(v47))
    {
LABEL_84:
      WebCore::reportException((JSC::JSGlobalObject *)v22, v53, 0, 0, 0);
      goto LABEL_31;
    }
    v48 = v47[43];
    if (*(_QWORD *)(v23 + 24) == v53)
    {
LABEL_98:
      *(_BYTE *)(*(_QWORD *)(v48 + 8) + 93442) = 1;
      *(_BYTE *)(v19 + 44) = 1;
      goto LABEL_84;
    }
    if (!v48)
      goto LABEL_84;
    v49 = (unsigned __int8 *)(v48 + 40);
    if (__ldaxr((unsigned __int8 *)(v48 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v49))
    {
      goto LABEL_92;
    }
    MEMORY[0x19AEA534C](v48 + 40);
LABEL_92:
    v51 = *(unsigned __int8 *)(v48 + 41);
    v52 = __ldxr(v49);
    if (v52 == 1)
    {
      if (!__stlxr(0, v49))
      {
LABEL_97:
        if (!v51)
          goto LABEL_84;
        goto LABEL_98;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v48 + 40));
    goto LABEL_97;
  }
  v32 = *a3;
  v60 = 0;
  WebCore::DeferredPromise::reject(v32, (JSC::JSGlobalObject *)0x16, (JSC::JSGlobalObject *)&v60, 0);
  v33 = v60;
  v60 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v18);
    else
      *(_DWORD *)v33 -= 2;
  }
LABEL_45:
  v34 = v54;
  if (v54)
  {
    v54 = 0;
    v55 = 0;
    WTF::fastFree(v34, v18);
  }
  result = v57;
  v57 = 0;
  if (result)
  {
LABEL_48:
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_50:
  v35 = *(_QWORD *)v58;
  *(_QWORD *)v58 = 0;
  if (!v35)
    return result;
  v36 = *(_QWORD *)(v35 + 8);
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v36))
  {
    goto LABEL_55;
  }
  result = (WTF::StringImpl *)MEMORY[0x19AEA534C](v36);
LABEL_55:
  v38 = *(_QWORD *)(v36 + 8);
  v39 = v38 - 1;
  *(_QWORD *)(v36 + 8) = v38 - 1;
  if (v38 == 1)
  {
    v46 = *(_QWORD *)(v36 + 16);
    v40 = *(_QWORD *)(v36 + 24);
    *(_QWORD *)(v36 + 24) = 0;
    v41 = v46 != 0;
  }
  else
  {
    v40 = 0;
    v41 = 1;
  }
  v42 = __ldxr((unsigned __int8 *)v36);
  if (v42 != 1)
  {
    __clrex();
    goto LABEL_61;
  }
  if (__stlxr(0, (unsigned __int8 *)v36))
LABEL_61:
    result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v36);
  if (!v39)
  {
    if (v40)
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    if (!v41)
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v36, v18);
  }
  return result;
}

uint64_t WebCore::OffscreenCanvas::canvasBaseScriptExecutionContext(WebCore::OffscreenCanvas *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void WebCore::OffscreenCanvas::didDraw(int32x2_t *a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  v6 = (_DWORD *)a1[23];
  a1[23] = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  if (!a1[24].i8[1] && *(_QWORD *)&a1[22])
  {
    v7 = a1[1];
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)&v7 + 8);
      if (v8)
        v9 = v8 - 96;
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    a1[24].i8[1] = 1;
    ++a1[3].i32[0];
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E33D6F98;
    v10[1] = a1;
    v10[2] = a1;
    v12 = v10;
    v13 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v9 + 336))(v9, &v12);
    v11 = v12;
    v12 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  WebCore::CanvasBase::didDraw(a1 + 4, a2, a3);
}

void `non-virtual thunk to'WebCore::OffscreenCanvas::didDraw(uint64_t a1, uint64_t a2, int a3)
{
  WebCore::OffscreenCanvas::didDraw((int32x2_t *)(a1 - 32), a2, a3);
}

uint64_t WebCore::OffscreenCanvas::copiedImage(WebCore::OffscreenCanvas *this)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  if (*((_BYTE *)this + 192))
    return 0;
  result = *((_QWORD *)this + 23);
  if (!result)
  {
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 88))((char *)this + 32);
    if (v3)
    {
      (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v3 + 104))(&v31, v3, 0);
      v4 = v31;
      if (!v31)
        return *((_QWORD *)this + 23);
LABEL_6:
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + 48))(&v29, v4);
      WebCore::BitmapImage::create(&v29, &v30);
      v6 = v30;
      v30 = 0;
      v7 = (_DWORD *)*((_QWORD *)this + 23);
      *((_QWORD *)this + 23) = v6;
      if (v7)
      {
        if (v7[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
          v30 = 0;
        }
        else
        {
          --v7[2];
        }
      }
      v8 = v29;
      v29 = 0;
      if (!v8)
      {
LABEL_26:
        v16 = v31;
        v31 = 0;
        if (v16)
        {
          v17 = v16[1];
          if (__ldaxr((unsigned __int8 *)v17))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v17))
          {
            goto LABEL_31;
          }
          MEMORY[0x19AEA534C](v17);
LABEL_31:
          v19 = *(_QWORD *)(v17 + 8);
          v20 = v19 - 1;
          *(_QWORD *)(v17 + 8) = v19 - 1;
          if (v19 == 1)
          {
            v24 = *(_QWORD *)(v17 + 16);
            v21 = *(_QWORD *)(v17 + 24);
            *(_QWORD *)(v17 + 24) = 0;
            v22 = v24 != 0;
          }
          else
          {
            v21 = 0;
            v22 = 1;
          }
          v23 = __ldxr((unsigned __int8 *)v17);
          if (v23 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v17))
            {
LABEL_38:
              if (!v20)
              {
                if (v21)
                  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
                if (!v22)
                  WTF::fastFree((WTF *)v17, v5);
              }
              return *((_QWORD *)this + 23);
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v17);
          goto LABEL_38;
        }
        return *((_QWORD *)this + 23);
      }
      v9 = *(_QWORD *)(v8 + 8);
      if (__ldaxr((unsigned __int8 *)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v9))
      {
        goto LABEL_14;
      }
      MEMORY[0x19AEA534C](v9);
LABEL_14:
      v11 = *(_QWORD *)(v9 + 8);
      v12 = v11 - 1;
      *(_QWORD *)(v9 + 8) = v11 - 1;
      if (v11 == 1)
      {
        v25 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        v14 = v25 != 0;
      }
      else
      {
        v13 = 0;
        v14 = 1;
      }
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
LABEL_21:
          if (!v12)
          {
            if (v13)
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            if (!v14)
              WTF::fastFree((WTF *)v9, v5);
          }
          goto LABEL_26;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_21;
    }
    if (!*((_BYTE *)this + 105))
      (*(void (**)(char *))(*((_QWORD *)this + 4) + 160))((char *)this + 32);
    v4 = (_QWORD *)*((_QWORD *)this + 6);
    if (!v4)
    {
LABEL_60:
      v31 = v4;
      if (!v4)
        return *((_QWORD *)this + 23);
      goto LABEL_6;
    }
    v26 = v4[1];
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
      goto LABEL_55;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_55:
    ++*(_QWORD *)(v26 + 8);
    v28 = __ldxr((unsigned __int8 *)v26);
    if (v28 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
        goto LABEL_60;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
    goto LABEL_60;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::copiedImage(WebCore::OffscreenCanvas *this)
{
  return WebCore::OffscreenCanvas::copiedImage((WebCore::OffscreenCanvas *)((char *)this - 32));
}

_DWORD *`non-virtual thunk to'WebCore::OffscreenCanvas::clearCopiedImage(WebCore::OffscreenCanvas *this)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::OffscreenCanvas::securityOrigin(WebCore::OffscreenCanvas *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::SecurityContext *v3;
  WTF::StringImpl *v4;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = (WebCore::SecurityContext *)(v2 - 96);
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  if (!(*(unsigned int (**)(WebCore::SecurityContext *))(*(_QWORD *)v3 + 64))(v3))
  {
    if (*((_BYTE *)v3 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x195CB0C88);
    }
    WebCore::SecurityContext::securityOrigin(v3, v4);
  }
}

void `non-virtual thunk to'WebCore::OffscreenCanvas::securityOrigin(WebCore::OffscreenCanvas *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::SecurityContext *v3;
  WTF::StringImpl *v4;

  v1 = *((_QWORD *)this - 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = (WebCore::SecurityContext *)(v2 - 96);
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  if (!(*(unsigned int (**)(WebCore::SecurityContext *))(*(_QWORD *)v3 + 64))(v3))
  {
    if (*((_BYTE *)v3 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x195CB0D10);
    }
    WebCore::SecurityContext::securityOrigin(v3, v4);
  }
}

BOOL WebCore::OffscreenCanvas::canDetach(WebCore::OffscreenCanvas *this)
{
  return !*((_BYTE *)this + 192) && *((_QWORD *)this + 21) == 0;
}

_QWORD *WebCore::OffscreenCanvas::detach@<X0>(_QWORD *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  WebCore::CanvasRenderingContext *v10;
  WebCore::InspectorInstrumentation *v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;

  if (*((_BYTE *)this + 192) || (v3 = (uint64_t)this, this[21]))
  {
    *a2 = 0;
  }
  else
  {
    WebCore::CanvasBase::removeCanvasNeedingPreparationForDisplayOrFlush((WebCore::CanvasBase *)(this + 4));
    *(_BYTE *)(v3 + 192) = 1;
    v4 = *(_BYTE *)(v3 + 104);
    v5 = WTF::fastMalloc((WTF *)0x18);
    v6 = *(_QWORD *)(v3 + 176);
    *(_QWORD *)(v3 + 176) = 0;
    *(_QWORD *)v5 = v6;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 40);
    *(_BYTE *)(v5 + 16) = v4;
    *a2 = v5;
    if (*(_QWORD *)(v3 + 40))
    {
      *(_QWORD *)(v3 + 40) = 0;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32) + 88))(v3 + 32);
      if (v7)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v10 = (WebCore::CanvasRenderingContext *)v7;
          v11 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 32) + 144))(*(_QWORD *)(v7 + 32));
          if (v11)
          {
            v13 = WebCore::InspectorInstrumentation::instrumentingAgents(v11, v12);
            if (v13)
              WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl(v13, v10);
          }
        }
      }
    }
    this = WebCore::OffscreenCanvas::reset((WebCore::OffscreenCanvas *)v3);
    v8 = *(_QWORD ***)(v3 + 168);
    if (v8)
    {
      this = (_QWORD *)((uint64_t (*)(_QWORD **))(*v8)[7])(v8);
      if ((_DWORD)this)
      {
        (*(void (**)(_QWORD *))(*v8[4] + 16))(v8[4]);
        ((void (*)(_QWORD **))(*v8)[30])(v8);
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8[4] + 24))(v8[4]);
      }
    }
  }
  return this;
}

_QWORD *WebCore::OffscreenCanvas::commitToPlaceholderCanvas(_QWORD *this)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (this[22])
  {
    v1 = this;
    this = (_QWORD *)this[21];
    if (this)
    {
      if ((*(unsigned int (**)(_QWORD *))(*this + 168))(this))
        (*(void (**)(_QWORD))(*(_QWORD *)v1[21] + 184))(v1[21]);
      this = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v1[21] + 104))(&v12, v1[21], 1);
      if (v12)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[22] + 16))(v1[22]);
        v3 = v12;
        v12 = 0;
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (__ldaxr((unsigned __int8 *)v4))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v4))
          {
            goto LABEL_11;
          }
          this = (_QWORD *)MEMORY[0x19AEA534C](v4);
LABEL_11:
          v6 = *(_QWORD *)(v4 + 8);
          v7 = v6 - 1;
          *(_QWORD *)(v4 + 8) = v6 - 1;
          if (v6 == 1)
          {
            v11 = *(_QWORD *)(v4 + 16);
            v8 = *(_QWORD *)(v4 + 24);
            *(_QWORD *)(v4 + 24) = 0;
            v9 = v11 != 0;
          }
          else
          {
            v8 = 0;
            v9 = 1;
          }
          v10 = __ldxr((unsigned __int8 *)v4);
          if (v10 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v4))
            {
              if (v7)
                return this;
LABEL_19:
              if (v8)
                this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
              if (!v9)
                return (_QWORD *)WTF::fastFree((WTF *)v4, v2);
              return this;
            }
          }
          else
          {
            __clrex();
          }
          this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
          if (v7)
            return this;
          goto LABEL_19;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::OffscreenCanvas::createImageBuffer(int32x2_t *this)
{
  int32x2_t *v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = this + 4;
  this[13].i8[1] = 1;
  WebCore::CanvasBase::allocateImageBuffer(this + 4, &v22);
  result = (uint64_t)WebCore::CanvasBase::setImageBuffer(v1, &v22, &v23);
  v4 = v23;
  v23 = 0;
  if (!v4)
    goto LABEL_18;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_6:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v20 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v20 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
    goto LABEL_13;
  if (v8)
    goto LABEL_18;
LABEL_14:
  if (v9)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!v10)
    result = WTF::fastFree((WTF *)v5, v3);
LABEL_18:
  v12 = v22;
  v22 = 0;
  if (!v12)
    return result;
  v13 = *(_QWORD *)(v12 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_23;
  }
  result = MEMORY[0x19AEA534C](v13);
LABEL_23:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v21 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v21 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 != 1)
  {
    __clrex();
LABEL_30:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return result;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_30;
  if (v16)
    return result;
LABEL_31:
  if (v17)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (!v18)
    return WTF::fastFree((WTF *)v13, v3);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::createImageBuffer(int32x2_t *this)
{
  return WebCore::OffscreenCanvas::createImageBuffer(this - 4);
}

uint64_t WebCore::OffscreenCanvas::setImageBufferAndMarkDirty(int32x2_t *a1, uint64_t *a2)
{
  int32x2_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v3 = a1 + 4;
  a1[13].i8[1] = 1;
  WebCore::CanvasBase::setImageBuffer(&a1[4], a2, &v17);
  v5 = v17;
  v17 = 0;
  if (!v5)
    goto LABEL_18;
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 - 1;
  *(_QWORD *)(v6 + 8) = v8 - 1;
  if (v8 == 1)
  {
    v14 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    v11 = v14 != 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = __ldxr((unsigned __int8 *)v6);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
    {
      if (v9)
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (v9)
    goto LABEL_18;
LABEL_14:
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (!v11)
    WTF::fastFree((WTF *)v6, v4);
LABEL_18:
  v15[0] = 0;
  v15[1] = vcvt_f32_s32(a1[5]);
  v16 = 1;
  return (*(uint64_t (**)(int32x2_t *, _QWORD *, uint64_t))(*(_QWORD *)&a1[4] + 104))(v3, v15, 1);
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::setImageBufferAndMarkDirty(uint64_t a1, uint64_t *a2)
{
  return WebCore::OffscreenCanvas::setImageBufferAndMarkDirty((int32x2_t *)(a1 - 32), a2);
}

uint64_t (***WebCore::OffscreenCanvas::queueTaskKeepingObjectAlive(uint64_t a1, char a2, uint64_t (***a3)()))()
{
  uint64_t v6;
  int v7;
  uint64_t (**v8)();
  uint64_t (***result)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t (***v14)();

  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v7 + 2;
  v8 = *a3;
  *a3 = 0;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E33D6FC0;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v6;
  result[3] = v8;
  v14 = result;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
  {
    v14 = 0;
    v13 = off_1E33D6FC0;
    return (uint64_t (***)())v13[1]();
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v14 = 0;
    goto LABEL_6;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v12, a2, (uint64_t *)&v14);
  result = v14;
  v14 = 0;
  if (result)
  {
LABEL_6:
    v13 = *result;
    return (uint64_t (***)())v13[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::OffscreenCanvas::queueTaskKeepingObjectAlive(uint64_t a1, char a2, uint64_t (***a3)()))()
{
  uint64_t (**v6)();
  uint64_t v7;
  int v8;
  uint64_t (**v9)();
  uint64_t (***result)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t (***v15)();

  v6 = (uint64_t (**)())(a1 - 32);
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *(_DWORD *)(a1 - 8);
  *(_QWORD *)(v7 + 8) = v6;
  ++*(_QWORD *)(a1 - 16);
  *(_DWORD *)(a1 - 8) = v8 + 2;
  v9 = *a3;
  *a3 = 0;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E33D6FC0;
  result[1] = v6;
  result[2] = (uint64_t (**)())v7;
  result[3] = v9;
  v15 = result;
  v11 = *(_QWORD *)(a1 - 24);
  if (!v11)
  {
    v15 = 0;
    v14 = off_1E33D6FC0;
    return (uint64_t (***)())v14[1]();
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
  {
    v15 = 0;
    goto LABEL_6;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 - 96) + 104))(v12 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v13, a2, (uint64_t *)&v15);
  result = v15;
  v15 = 0;
  if (result)
  {
LABEL_6:
    v14 = *result;
    return (uint64_t (***)())v14[1]();
  }
  return result;
}

WTF *WebCore::OffscreenCanvas::dispatchEvent(WebCore::OffscreenCanvas *this, WebCore::Event *a2)
{
  char *v3;
  void *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;

  v3 = (char *)this + 144;
  v6 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v6 = v3;
  v7 = 0x100000001;
  WebCore::EventDispatcher::dispatchEvent((unsigned int *)&v6, a2);
  result = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::OffscreenCanvas::dispatchEvent(WebCore::OffscreenCanvas *this, WebCore::Event *a2)
{
  char *v3;
  void *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;

  v3 = (char *)this + 112;
  v6 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v6 = v3;
  v7 = 0x100000001;
  WebCore::EventDispatcher::dispatchEvent((unsigned int *)&v6, a2);
  result = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

{
  void *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;

  v6 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v6 = this;
  v7 = 0x100000001;
  WebCore::EventDispatcher::dispatchEvent((unsigned int *)&v6, a2);
  result = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebCore::OffscreenCanvas::cssParserContext(WebCore::OffscreenCanvas *this)
{
  uint64_t v1;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  __int128 v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char **v16;
  char *v17;

  v1 = *((_QWORD *)this + 25);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x40);
    v12 = 0;
    WTF::URL::invalidate((WTF::URL *)&v12);
    v4 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)v1 = v4;
    v5 = v13;
    *(_OWORD *)(v1 + 24) = v14;
    *(_OWORD *)(v1 + 8) = v5;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 46) = 0;
    *(_DWORD *)(v1 + 54) &= 0xC0000000;
    v6 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v6 != -1)
    {
      v17 = &v15;
      v16 = &v17;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
    v7 = v12;
    v12 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = (WTF::StringImpl **)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = v1;
    if (v8)
    {
      v9 = v8[5];
      v8[5] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v3);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v3);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::fastFree((WTF *)v8, v3);
      return *((_QWORD *)this + 25);
    }
  }
  return v1;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::cssParserContext(WebCore::OffscreenCanvas *this)
{
  return WebCore::OffscreenCanvas::cssParserContext((WebCore::OffscreenCanvas *)((char *)this - 32));
}

void WebCore::MediaDocumentParser::~MediaDocumentParser(WebCore::MediaDocumentParser *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  *(_QWORD *)this = off_1E33A3D50;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v10 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v10)
      {
        v13 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
        v7 = v13;
      }
      v11 = *(WTF **)(v7 + 16);
      if (v11)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v12 = v7;
        WTF::fastFree(v11, a2);
        v7 = v12;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  *(_QWORD *)this = off_1E33A3D50;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v10 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v10)
      {
        v13 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
        v7 = v13;
      }
      v11 = *(WTF **)(v7 + 16);
      if (v11)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v12 = v7;
        WTF::fastFree(v11, a2);
        v7 = v12;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WTF::fastFree(this, a2);
}

const char *`non-virtual thunk to'WebCore::MediaElementSession::logClassName(WebCore::MediaElementSession *this)
{
  return "MediaElementSession";
}

void WebCore::ModelDocumentParser::~ModelDocumentParser(WebCore::ModelDocumentParser *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v10 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v10)
      {
        v16 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v10));
        v4 = v16;
      }
      v11 = *(WTF **)(v4 + 16);
      if (v11)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v14 = v4;
        WTF::fastFree(v11, a2);
        v4 = v14;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  *(_QWORD *)this = off_1E33A3D50;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v12 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v12)
      {
        v17 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v12));
        v7 = v17;
      }
      v13 = *(WTF **)(v7 + 16);
      if (v13)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v15 = v7;
        WTF::fastFree(v13, a2);
        v7 = v15;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v10 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v10)
      {
        v16 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v10));
        v4 = v16;
      }
      v11 = *(WTF **)(v4 + 16);
      if (v11)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v14 = v4;
        WTF::fastFree(v11, a2);
        v4 = v14;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  *(_QWORD *)this = off_1E33A3D50;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v12 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v12)
      {
        v17 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v12));
        v7 = v17;
      }
      v13 = *(WTF **)(v7 + 16);
      if (v13)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v15 = v7;
        WTF::fastFree(v13, a2);
        v7 = v15;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::ModelDocument::~ModelDocument(WebCore::ModelDocument *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 440);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 439);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(this, a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 440);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 439);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::ModelDocument::~ModelDocument(WebCore::ModelDocument *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 24) = off_1E33BA1B0;
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 192), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 24) = off_1E33BA1B0;
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 288), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 504), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 504), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 512), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 512), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 544), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 544), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 552), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::ModelDocument *)((char *)this - 552), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::MonthInputType::~MonthInputType(WebCore::MonthInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::MonthInputType::~MonthInputType(WebCore::MonthInputType *this, void *a2)
{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::MonthInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::MonthInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::MonthInputType *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::MonthInputType *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::NumberInputType::~NumberInputType(WebCore::NumberInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::NumberInputType::~NumberInputType(WebCore::NumberInputType *this, void *a2)
{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::NumberInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::NumberInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::NumberInputType *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::NumberInputType *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::NumberInputType *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::NumberInputType *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::NumberInputType *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::NumberInputType *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::OffscreenCanvas::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::OffscreenCanvas::renderingContext(WebCore::OffscreenCanvas *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t WebCore::OffscreenCanvas::isOffscreenCanvas(WebCore::OffscreenCanvas *this)
{
  return 1;
}

uint64_t WebCore::OffscreenCanvas::eventTargetInterface(WebCore::OffscreenCanvas *this)
{
  return 16;
}

uint64_t WebCore::OffscreenCanvas::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::OffscreenCanvas *WebCore::OffscreenCanvas::derefEventTarget(WebCore::OffscreenCanvas *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::OffscreenCanvas::~OffscreenCanvas(this);
    return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::OffscreenCanvas::refCanvasBase(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::OffscreenCanvas *WebCore::OffscreenCanvas::derefCanvasBase(WebCore::OffscreenCanvas *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::OffscreenCanvas::~OffscreenCanvas(this);
    return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::refCanvasBase(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::derefCanvasBase(uint64_t this)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)(this - 32));
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::isOffscreenCanvas(WebCore::OffscreenCanvas *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::renderingContext(WebCore::OffscreenCanvas *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::canvasBaseScriptExecutionContext(WebCore::OffscreenCanvas *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::eventTargetInterface(WebCore::OffscreenCanvas *this)
{
  return 16;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::scriptExecutionContext(WebCore::OffscreenCanvas *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 17);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 120);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::OffscreenCanvas::derefEventTarget(uint64_t this)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)(this - 120) == 1)
  {
    WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)(this - 144));
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 120);
  }
  return this;
}

void WebCore::MediaElementSessionObserver::~MediaElementSessionObserver(WebCore::MediaElementSessionObserver *this)
{
  WTF *v1;
  void *v2;

  WebCore::MediaElementSessionObserver::~MediaElementSessionObserver(this);
  WTF::fastFree(v1, v2);
}

{
  void *v2;
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E33D6F00;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 3) + 144, this);
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v2);
    }
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::MediaElementSessionObserver::metadataChanged(uint64_t result)
{
  uint64_t v1;
  WebCore::PlatformMediaSession *v2;
  _DWORD *v3;
  WebCore::NavigatorMediaSession *v4;
  WebCore::Navigator *v5;
  WebCore::NavigatorMediaSession *v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(WebCore::PlatformMediaSession **)(v1 + 8);
    if (v2)
    {
      v3 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 10) + 40) + 8) + 696);
      if (v3)
      {
        WebCore::LocalDOMWindow::protectedNavigator(v3, &v6);
        v4 = v6;
        WebCore::NavigatorMediaSession::mediaSession(v6, v5);
        if (*((_DWORD *)v4 + 4) == 1)
          (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v4 + 16))(v4);
        else
          --*((_DWORD *)v4 + 4);
      }
      return WebCore::PlatformMediaSession::clientCharacteristicsChanged(v2, 0);
    }
  }
  return result;
}

uint64_t WebCore::MediaElementSessionObserver::positionStateChanged(uint64_t result)
{
  uint64_t v1;
  WebCore::PlatformMediaSession *v2;
  _DWORD *v3;
  WebCore::NavigatorMediaSession *v4;
  WebCore::Navigator *v5;
  WebCore::NavigatorMediaSession *v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(WebCore::PlatformMediaSession **)(v1 + 8);
    if (v2)
    {
      v3 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 10) + 40) + 8) + 696);
      if (v3)
      {
        WebCore::LocalDOMWindow::protectedNavigator(v3, &v6);
        v4 = v6;
        WebCore::NavigatorMediaSession::mediaSession(v6, v5);
        if (*((_DWORD *)v4 + 4) == 1)
          (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v4 + 16))(v4);
        else
          --*((_DWORD *)v4 + 4);
      }
      return WebCore::PlatformMediaSession::clientCharacteristicsChanged(v2, 0);
    }
  }
  return result;
}

uint64_t WebCore::MediaElementSessionObserver::actionHandlersChanged(uint64_t this)
{
  uint64_t v1;
  WebCore::PlatformMediaSession *v2;
  _DWORD *v3;
  WebCore::NavigatorMediaSession *v4;
  WebCore::Navigator *v5;
  WebCore::NavigatorMediaSession *v6;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(WebCore::PlatformMediaSession **)(v1 + 8);
    if (v2)
    {
      v3 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 10) + 40) + 8) + 696);
      if (v3)
      {
        WebCore::LocalDOMWindow::protectedNavigator(v3, &v6);
        v4 = v6;
        WebCore::NavigatorMediaSession::mediaSession(v6, v5);
        if (*((_DWORD *)v4 + 4) == 1)
          (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v4 + 16))(v4);
        else
          --*((_DWORD *)v4 + 4);
      }
      return WebCore::PlatformMediaSession::clientCharacteristicsChanged(v2, 0);
    }
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaElementSession::*&)(void),WebCore::MediaElementSession*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [85]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3)
{
  uint64_t result;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint8_t buf[4];
  _BYTE v43[12];
  int v44;
  WTF::StringImpl *v45[3];

  v45[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v39, a3);
  if (!v40)
  {
    v7 = 0;
    if (v39)
      goto LABEL_3;
LABEL_71:
    v8 = 0;
    goto LABEL_4;
  }
  v7 = *((_DWORD *)v40 + 1);
  if (!v39)
    goto LABEL_71;
LABEL_3:
  v8 = *((_DWORD *)v39 + 1);
LABEL_4:
  if ((v8 | v7) < 0 || (result = (v7 + v8), __OFADD__(v7, v8)))
  {
    v41 = 0;
    goto LABEL_75;
  }
  if (v40)
  {
    v9 = *((_DWORD *)v40 + 4);
    v10 = (v9 >> 2) & 1;
    if (v39 && (v9 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v39)
    {
LABEL_9:
      v10 = (*((unsigned __int8 *)v39 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v10 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v10, (uint64_t)v40, (uint64_t)v39, &v41);
  if (!v41)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v12 = v39;
  v39 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v40;
  v40 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(NSObject **)(a1 + 32);
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v15)
  {
    WTF::String::utf8();
    v17 = v37 ? (char *)v37 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v43 = v17;
    _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v15 = (uint64_t)v37;
    v37 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        v15 = WTF::fastFree((WTF *)v15, v16);
      else
        --*(_DWORD *)v15;
    }
  }
  if (*(_BYTE *)a1)
  {
    v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v19 = *v18;
      if ((v19 & 1) != 0)
        break;
      v20 = __ldaxr(v18);
      if (v20 == v19)
      {
        if (!__stxr(v19 | 1, v18))
        {
          v21 = WTF::Logger::observers((WTF::Logger *)v15);
          v22 = *(unsigned int *)(v21 + 12);
          if ((_DWORD)v22)
          {
            v23 = *(uint64_t **)v21;
            v24 = *(_QWORD *)v21 + 8 * v22;
            do
            {
              v25 = *v23;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v44 = 0;
              WTF::String::String((WTF::String *)v45, a3);
              v37 = 0;
              v38 = 0;
              v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v38) = 2;
              v37 = v26;
              v27 = HIDWORD(v38);
              *((_DWORD *)v26 + 4 * HIDWORD(v38)) = *(_DWORD *)buf;
              v28 = *(_QWORD *)&v43[4];
              if (*(_QWORD *)&v43[4])
                **(_DWORD **)&v43[4] += 2;
              *((_QWORD *)v26 + 2 * v27 + 1) = v28;
              *((_DWORD *)v26 + 4 * (v27 + 1)) = v44;
              v29 = v45[0];
              if (v45[0])
                *(_DWORD *)v45[0] += 2;
              *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
              HIDWORD(v38) = v27 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, a1, 0, &v37);
              v30 = v37;
              if (HIDWORD(v38))
              {
                v31 = 16 * HIDWORD(v38);
                v32 = (WTF::StringImpl **)((char *)v37 + 8);
                do
                {
                  v33 = *v32;
                  *v32 = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  v32 += 2;
                  v31 -= 16;
                }
                while (v31);
                v30 = v37;
              }
              if (v30)
              {
                v37 = 0;
                LODWORD(v38) = 0;
                WTF::fastFree(v30, v16);
              }
              v34 = v45[0];
              v45[0] = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v35 = *(WTF::StringImpl **)&v43[4];
              *(_QWORD *)&v43[4] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v35 -= 2;
              }
              ++v23;
            }
            while (v23 != (uint64_t *)v24);
          }
          v36 = __ldxr(v18);
          if (v36 == 1)
          {
            if (!__stlxr(0, v18))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::OffscreenCanvas::scheduleCommitToPlaceholderCanvas(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  WebCore::OffscreenCanvas *v2;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::OffscreenCanvas *)a1[1];
  *a1 = &off_1E33D6F98;
  a1[1] = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(v2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v2 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::OffscreenCanvas::scheduleCommitToPlaceholderCanvas(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::OffscreenCanvas *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::OffscreenCanvas *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33D6F98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(v3);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::OffscreenCanvas::scheduleCommitToPlaceholderCanvas(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 193) = 0;
  return WebCore::OffscreenCanvas::commitToPlaceholderCanvas((_QWORD *)v1);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::OffscreenCanvas>(WebCore::OffscreenCanvas &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::OffscreenCanvas>(WebCore::OffscreenCanvas &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::OffscreenCanvas>(WebCore::OffscreenCanvas &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::OffscreenCanvas>(WebCore::OffscreenCanvas &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::OffscreenCanvas *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E33D6FC0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)v7);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::OffscreenCanvas *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(v5);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

WTF::StringImpl **WebCore::PasswordInputType::formControlType(WebCore::PasswordInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "password";
    v2[1] = 9;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::password(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::password(void)::name;
}

uint64_t WebCore::PasswordInputType::shouldSaveAndRestoreFormControlState(WebCore::PasswordInputType *this)
{
  return 0;
}

void WebCore::PasswordInputType::saveFormControlState(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::PasswordInputType::shouldUseInputMethod(WebCore::PasswordInputType *this)
{
  return 0;
}

uint64_t WebCore::PasswordInputType::shouldResetOnDocumentActivation(WebCore::PasswordInputType *this)
{
  return 1;
}

uint64_t WebCore::PasswordInputType::shouldRespectListAttribute(WebCore::PasswordInputType *this)
{
  return 0;
}

uint64_t WebCore::PermissionsPolicy::processPermissionsPolicyAttribute@<X0>(WebCore::PermissionsPolicy *this@<X0>, const WebCore::HTMLIFrameElement *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  WTF *v29;
  WebCore::Quirks *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::String *v33;
  __n128 v34;
  unint64_t v35;
  unsigned int v36;
  WTF *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF::String *v41;
  __n128 v42;
  uint64_t result;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  BOOL v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v70;
  unsigned int v72;
  uint64_t v73;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v105;
  uint64_t v106;
  const char *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned __int8 *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  unsigned __int8 *v124;
  int v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  unint64_t v134;
  WTF::StringImpl *v135;
  unint64_t v136;
  WTF::StringImpl *v137;
  int v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  WTF::StringImpl *v142;
  unint64_t v143;
  unint64_t v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  unint64_t v151;
  WTF::StringImpl *v152;
  unint64_t v153;
  WTF::StringImpl *v154;
  unint64_t v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  unint64_t v162;
  WTF::StringImpl *v163;
  unint64_t v164;
  WTF::StringImpl *v165;
  unint64_t v166;
  unint64_t v167;
  WTF::StringImpl *v168;
  unint64_t v169;
  unint64_t v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int16 v176;
  unint64_t v177;
  WTF::StringImpl *v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int v182;
  _QWORD *Attribute;
  int v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  char *v191;
  _BOOL4 shouldStarBePermissionsPolicyDefaultValue;
  uint64_t *v193;
  WTF *v194;
  const char **v195;
  unsigned int v196;
  unsigned int v197;
  BOOL v198;
  uint64_t v199;
  unint64_t v200;
  __int16 v201;
  char v202;
  WTF::StringImpl *v203[3];
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  uint64_t v206;
  unsigned int v207;
  WTF::StringImpl **v208;
  uint64_t v209;
  int v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 13);
  if (v5
    && ((v6 = *(_DWORD *)(v5 + 4), (v6 & 1) != 0)
      ? (v7 = *(_QWORD *)(v5 + 40), LODWORD(v8) = *(_DWORD *)(v5 + 52))
      : (v7 = v5 + 32, LODWORD(v8) = v6 >> 5),
        (_DWORD)v8))
  {
    v8 = v8;
    v9 = (uint64_t *)(v7 + 8);
    while (1)
    {
      v10 = *(v9 - 1);
      if (v10 == WebCore::HTMLNames::allowAttr
        || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::allowAttr + 24)
        && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::allowAttr + 32))
      {
        break;
      }
      v9 += 2;
      if (!--v8)
      {
        v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v11 = *v9;
  if (*v9)
  {
    v12 = *(_DWORD *)(v11 + 4);
    *(_DWORD *)v11 += 2;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = ((unint64_t)*(unsigned int *)(v11 + 16) >> 2) & 1;
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v14 = 1;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192), a2);
  v17 = v16;
  v18 = *(_BYTE **)(*((_QWORD *)this + 5) + 8);
  if ((v18[268] & 4) != 0 || (*((_BYTE *)this + 120) & 4) != 0)
  {
    WebCore::SecurityOrigin::createOpaque((uint64_t *)&v194);
    goto LABEL_32;
  }
  v19 = *((_QWORD *)this + 13);
  if (!v19)
    goto LABEL_29;
  v20 = *(_DWORD *)(v19 + 4);
  LODWORD(v21) = v20 >> 5;
  if ((v20 & 1) != 0)
  {
    v22 = *(uint64_t **)(v19 + 40);
    LODWORD(v23) = *(_DWORD *)(v19 + 52);
  }
  else
  {
    v22 = (uint64_t *)(v19 + 32);
    LODWORD(v23) = v20 >> 5;
  }
  if ((_DWORD)v23)
  {
    v23 = v23;
    while (1)
    {
      v24 = *v22;
      if (*v22 == WebCore::HTMLNames::srcdocAttr
        || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcdocAttr + 24)
        && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcdocAttr + 32))
      {
        break;
      }
      v22 += 2;
      if (!--v23)
        goto LABEL_22;
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v18 + 192), v15);
    do
      v182 = __ldaxr(v27);
    while (__stlxr(v182 + 1, v27));
    goto LABEL_31;
  }
LABEL_22:
  if ((v20 & 1) != 0)
  {
    v25 = *(uint64_t **)(v19 + 40);
    LODWORD(v21) = *(_DWORD *)(v19 + 52);
  }
  else
  {
    v25 = (uint64_t *)(v19 + 32);
  }
  if (!(_DWORD)v21)
  {
LABEL_29:
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v18 + 192), v15);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
LABEL_31:
    v194 = (WTF *)v27;
    goto LABEL_32;
  }
  v21 = v21;
  while (1)
  {
    v26 = *v25;
    if (*v25 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v25 += 2;
    if (!--v21)
      goto LABEL_29;
  }
  Attribute = (_QWORD *)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr);
  WebCore::Document::completeURL((WebCore::Document *)v18, Attribute, (uint64_t)(v18 + 848), 0, (WTF::URL *)&v208);
  if ((v209 & 1) == 0)
    goto LABEL_512;
  if ((v209 & 2) != 0)
  {
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v208, (uint64_t *)&v194);
    v184 = 0;
    goto LABEL_502;
  }
  v186 = WebCore::HTMLFrameOwnerElement::contentDocument(this);
  if (v186)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v186 + 192), v15);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 + 1, v187));
    v184 = 0;
    v194 = (WTF *)v187;
  }
  else
  {
LABEL_512:
    v184 = 1;
  }
LABEL_502:
  v185 = (WTF::StringImpl *)v208;
  v208 = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
      WTF::StringImpl::destroy(v185, v15);
    else
      *(_DWORD *)v185 -= 2;
  }
  if (v184)
  {
    v18 = *(_BYTE **)(*((_QWORD *)this + 5) + 8);
    goto LABEL_29;
  }
LABEL_32:
  v29 = v194;
  v30 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 688);
  if (!v30)
    v30 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
  shouldStarBePermissionsPolicyDefaultValue = WebCore::Quirks::shouldStarBePermissionsPolicyDefaultValue(v30, v15);
  *a3 = 0;
  v199 = v13;
  v200 = v12 | (v14 << 32);
  v201 = 59;
  v202 = 0;
  v195 = (const char **)&v199;
  v196 = 0;
  v198 = v12 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v195);
  v35 = v200;
  v36 = v196;
  if (v196 != (_DWORD)v200 || !v198)
  {
    v191 = (char *)v29 + 8;
    v193 = a3;
    do
    {
      v45 = *((unsigned int *)v195 + 2);
      if (v45 <= v36)
      {
        v46 = 0x100000000;
        v209 = 0x100000000;
LABEL_291:
        v49 = "";
        goto LABEL_53;
      }
      LODWORD(v46) = v197;
      if (v45 - v36 <= v197)
      {
        if (!v36)
        {
          v49 = *v195;
          v46 = (unint64_t)v195[1];
          goto LABEL_51;
        }
        LODWORD(v46) = v45 - v36;
      }
      v47 = v36;
      v46 = v46;
      v48 = v45 - v36;
      if (*((_BYTE *)v195 + 12))
      {
        if (v48 < v46)
          goto LABEL_425;
        v49 = &(*v195)[v47];
        v46 = v46 | 0x100000000;
      }
      else
      {
        if (v48 < v46)
          goto LABEL_425;
        v49 = &(*v195)[2 * v47];
      }
LABEL_51:
      v209 = v46;
      v50 = v46;
      if ((v46 & 0xFF00000000) != 0)
      {
        if (!(_DWORD)v46)
          goto LABEL_53;
        v97 = 0;
        while (1)
        {
          v98 = v49[v97];
          v69 = v98 > 0x20;
          v99 = (1 << v98) & 0x100003600;
          if (v69 || v99 == 0)
            break;
          if (v46 == ++v97)
            goto LABEL_290;
        }
        if ((_DWORD)v46 == 1)
        {
          if (!(_DWORD)v97)
            goto LABEL_53;
          LODWORD(v101) = 0;
        }
        else
        {
          v101 = (v46 - 1);
          do
          {
            if (v101 >= v46)
              goto LABEL_425;
            v102 = v49[v101];
            v69 = v102 > 0x20;
            v103 = (1 << v102) & 0x100003600;
            if (v69 || v103 == 0)
              break;
            --v101;
          }
          while ((_DWORD)v101);
          if (!(_DWORD)v97 && (_DWORD)v101 == (_DWORD)v46 - 1)
            goto LABEL_53;
        }
        v169 = (v101 - v97 + 1);
        if (v50 - v97 < v169)
          goto LABEL_425;
        v49 += v97;
        v46 = v169 | 0x100000000;
      }
      else
      {
        if (!(_DWORD)v46)
          goto LABEL_53;
        v106 = 0;
        v107 = v49;
        while (1)
        {
          v108 = *(unsigned __int16 *)v107;
          v69 = v108 > 0x20;
          v109 = (1 << v108) & 0x100003600;
          if (v69 || v109 == 0)
            break;
          ++v106;
          v107 += 2;
          if (v46 == v106)
          {
LABEL_290:
            v46 = 0x100000000;
            goto LABEL_291;
          }
        }
        if ((_DWORD)v46 == 1)
        {
          if (!(_DWORD)v106)
            goto LABEL_53;
          LODWORD(v126) = 0;
        }
        else
        {
          v126 = (v46 - 1);
          do
          {
            if (v126 >= v46)
              goto LABEL_425;
            v127 = *(unsigned __int16 *)&v49[2 * v126];
            v69 = v127 > 0x20;
            v128 = (1 << v127) & 0x100003600;
            if (v69 || v128 == 0)
              break;
            --v126;
          }
          while ((_DWORD)v126);
          if (!(_DWORD)v106 && (_DWORD)v126 == (_DWORD)v46 - 1)
            goto LABEL_53;
        }
        v46 = (v126 - v106 + 1);
        v49 = v107;
        if (v50 - v106 < v46)
          goto LABEL_425;
      }
LABEL_53:
      v208 = (WTF::StringImpl **)v49;
      LODWORD(v209) = v46;
      BYTE4(v209) = BYTE4(v46);
      v205 = 0;
      LODWORD(v206) = 0;
      BYTE4(v206) = 1;
      if (WTF::StringView::startsWith())
      {
        if (v209 < 7)
        {
          v51 = 0x100000000;
          v53 = (WTF::StringImpl *)"";
        }
        else
        {
          v52 = v209 - 6;
          v51 = v52;
          if (BYTE4(v209))
          {
            if (v52 < v52)
              goto LABEL_425;
            v53 = (WTF::StringImpl *)((char *)v208 + 6);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v52 < v52)
              goto LABEL_425;
            v53 = (WTF::StringImpl *)((char *)v208 + 12);
          }
        }
        v54 = 0;
        v205 = v53;
LABEL_59:
        LODWORD(v206) = v51;
        BYTE4(v206) = BYTE4(v51);
        goto LABEL_60;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0xB)
        {
          v51 = 0x100000000;
          v60 = (WTF::StringImpl *)"";
        }
        else
        {
          v59 = v209 - 10;
          v51 = v59;
          if (BYTE4(v209))
          {
            if (v59 < v59)
              goto LABEL_425;
            v60 = (WTF::StringImpl *)((char *)v208 + 10);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v59 < v59)
              goto LABEL_425;
            v60 = (WTF::StringImpl *)((char *)v208 + 20);
          }
        }
        v205 = v60;
        v54 = 1;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0x12)
        {
          v51 = 0x100000000;
          v133 = (WTF::StringImpl *)"";
        }
        else
        {
          v96 = v209 - 17;
          v51 = v96;
          if (BYTE4(v209))
          {
            if (v96 < v96)
              goto LABEL_425;
            v133 = (WTF::StringImpl *)((char *)v208 + 17);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v96 < v96)
              goto LABEL_425;
            v133 = (WTF::StringImpl *)((char *)v208 + 34);
          }
        }
        v205 = v133;
        v54 = 2;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0x10)
        {
          v51 = 0x100000000;
          v135 = (WTF::StringImpl *)"";
        }
        else
        {
          v134 = v209 - 15;
          v51 = v134;
          if (BYTE4(v209))
          {
            if (v134 < v134)
              goto LABEL_425;
            v135 = (WTF::StringImpl *)((char *)v208 + 15);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v134 < v134)
              goto LABEL_425;
            v135 = (WTF::StringImpl *)((char *)v208 + 30);
          }
        }
        v205 = v135;
        v54 = 3;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 8)
          goto LABEL_426;
        v136 = v209 - 7;
        v51 = v136;
        if (BYTE4(v209))
        {
          if (v136 < v136)
            goto LABEL_425;
          v137 = (WTF::StringImpl *)((char *)v208 + 7);
          v51 |= 0x100000000uLL;
        }
        else
        {
          if (v136 < v136)
            goto LABEL_425;
          v137 = (WTF::StringImpl *)((char *)v208 + 14);
        }
LABEL_267:
        v205 = v137;
        v54 = 4;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0xC)
        {
          v51 = 0x100000000;
          v142 = (WTF::StringImpl *)"";
        }
        else
        {
          v141 = v209 - 11;
          v51 = v141;
          if (BYTE4(v209))
          {
            if (v141 < v141)
              goto LABEL_425;
            v142 = (WTF::StringImpl *)((char *)v208 + 11);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v141 < v141)
              goto LABEL_425;
            v142 = (WTF::StringImpl *)((char *)v208 + 22);
          }
        }
        v205 = v142;
        v54 = 5;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 8)
        {
          v51 = 0x100000000;
          v145 = (WTF::StringImpl *)"";
        }
        else
        {
          v144 = v209 - 7;
          v51 = v144;
          if (BYTE4(v209))
          {
            if (v144 < v144)
              goto LABEL_425;
            v145 = (WTF::StringImpl *)((char *)v208 + 7);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v144 < v144)
              goto LABEL_425;
            v145 = (WTF::StringImpl *)((char *)v208 + 14);
          }
        }
        v205 = v145;
        v54 = 6;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0x11)
        {
          v51 = 0x100000000;
          v152 = (WTF::StringImpl *)"";
        }
        else
        {
          v151 = v209 - 16;
          v51 = v151;
          if (BYTE4(v209))
          {
            if (v151 < v151)
              goto LABEL_425;
            v152 = (WTF::StringImpl *)(v208 + 2);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v151 < v151)
              goto LABEL_425;
            v152 = (WTF::StringImpl *)(v208 + 4);
          }
        }
        v205 = v152;
        v54 = 7;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 9)
        {
          v51 = 0x100000000;
          v154 = (WTF::StringImpl *)"";
        }
        else
        {
          v153 = v209 - 8;
          v51 = v153;
          if (BYTE4(v209))
          {
            if (v153 < v153)
              goto LABEL_425;
            v154 = (WTF::StringImpl *)(v208 + 1);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v153 < v153)
              goto LABEL_425;
            v154 = (WTF::StringImpl *)(v208 + 2);
          }
        }
        v205 = v154;
        v54 = 8;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0xB)
        {
          v51 = 0x100000000;
          v156 = (WTF::StringImpl *)"";
        }
        else
        {
          v155 = v209 - 10;
          v51 = v155;
          if (BYTE4(v209))
          {
            if (v155 < v155)
              goto LABEL_425;
            v156 = (WTF::StringImpl *)((char *)v208 + 10);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v155 < v155)
              goto LABEL_425;
            v156 = (WTF::StringImpl *)((char *)v208 + 20);
          }
        }
        v205 = v156;
        v54 = 9;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0xA)
        {
          v51 = 0x100000000;
          v158 = (WTF::StringImpl *)"";
        }
        else
        {
          v157 = v209 - 9;
          v51 = v157;
          if (BYTE4(v209))
          {
            if (v157 < v157)
              goto LABEL_425;
            v158 = (WTF::StringImpl *)((char *)v208 + 9);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v157 < v157)
              goto LABEL_425;
            v158 = (WTF::StringImpl *)((char *)v208 + 18);
          }
        }
        v205 = v158;
        v54 = 10;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0xA)
        {
          v51 = 0x100000000;
          v163 = (WTF::StringImpl *)"";
        }
        else
        {
          v162 = v209 - 9;
          v51 = v162;
          if (BYTE4(v209))
          {
            if (v162 < v162)
              goto LABEL_425;
            v163 = (WTF::StringImpl *)((char *)v208 + 9);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v162 < v162)
              goto LABEL_425;
            v163 = (WTF::StringImpl *)((char *)v208 + 18);
          }
        }
        v205 = v163;
        v54 = 11;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0xE)
        {
          v51 = 0x100000000;
          v165 = (WTF::StringImpl *)"";
        }
        else
        {
          v164 = v209 - 13;
          v51 = v164;
          if (BYTE4(v209))
          {
            if (v164 < v164)
              goto LABEL_425;
            v165 = (WTF::StringImpl *)((char *)v208 + 13);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v164 < v164)
              goto LABEL_425;
            v165 = (WTF::StringImpl *)((char *)v208 + 26);
          }
        }
        v205 = v165;
        v54 = 12;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0xD)
        {
          v51 = 0x100000000;
          v168 = (WTF::StringImpl *)"";
        }
        else
        {
          v167 = v209 - 12;
          v51 = v167;
          if (BYTE4(v209))
          {
            if (v167 < v167)
              goto LABEL_425;
            v168 = (WTF::StringImpl *)((char *)v208 + 12);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v167 < v167)
              goto LABEL_425;
            v168 = (WTF::StringImpl *)(v208 + 3);
          }
        }
        v205 = v168;
        v54 = 13;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0x1A)
        {
          v51 = 0x100000000;
          v171 = (WTF::StringImpl *)"";
        }
        else
        {
          v170 = v209 - 25;
          v51 = v170;
          if (BYTE4(v209))
          {
            if (v170 < v170)
              goto LABEL_425;
            v171 = (WTF::StringImpl *)((char *)v208 + 25);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v170 < v170)
              goto LABEL_425;
            v171 = (WTF::StringImpl *)((char *)v208 + 50);
          }
        }
        v205 = v171;
        v54 = 14;
        goto LABEL_59;
      }
      if (WTF::StringView::startsWith())
      {
        if (v209 < 0xE)
        {
          v51 = 0x100000000;
          v178 = (WTF::StringImpl *)"";
        }
        else
        {
          v177 = v209 - 13;
          v51 = v177;
          if (BYTE4(v209))
          {
            if (v177 < v177)
              goto LABEL_425;
            v178 = (WTF::StringImpl *)((char *)v208 + 13);
            v51 |= 0x100000000uLL;
          }
          else
          {
            if (v177 < v177)
              goto LABEL_425;
            v178 = (WTF::StringImpl *)((char *)v208 + 26);
          }
        }
        v205 = v178;
        v54 = 15;
        goto LABEL_59;
      }
      v54 = 16;
LABEL_60:
      if ((WTF::StringView::startsWith() & 1) != 0)
      {
        if (v206 < 2)
        {
          v56 = 0x100000000;
          v58 = (WTF::StringImpl *)"";
        }
        else
        {
          v57 = v206 - 1;
          v56 = v57;
          if (BYTE4(v206))
          {
            if (v57 < v57)
              goto LABEL_425;
            v58 = (WTF::StringImpl *)((char *)v205 + 1);
            v56 = v57 | 0x100000000;
          }
          else
          {
            if (v57 < v57)
              goto LABEL_425;
            v58 = (WTF::StringImpl *)((char *)v205 + 2);
          }
        }
        v205 = v58;
        LODWORD(v206) = v56;
        BYTE4(v206) = BYTE4(v56);
      }
      else
      {
        v58 = v205;
      }
      if (v54 == 16)
        goto LABEL_74;
      v62 = v206;
      if ((_DWORD)v206)
      {
        v190 = v35;
        v35 = v206 & 0xFFFFFFFF00000000;
        v204 = 0;
        while (1)
        {
          v63 = v62;
          v64 = v62 - 1;
          v65 = v35 & 0xFF00000000;
          v66 = v35 & 0xFF00000000 | v62;
          if ((v35 & 0xFF00000000) != 0)
          {
            v67 = 0;
            while (1)
            {
              v68 = *((unsigned __int8 *)v58 + v67);
              v69 = v68 > 0x20;
              v70 = (1 << v68) & 0x100003600;
              if (v69 || v70 == 0)
                break;
              if (v63 == ++v67)
                goto LABEL_271;
            }
            if ((_DWORD)v64)
            {
              v75 = v64;
              while (v75 < v63)
              {
                v76 = *((unsigned __int8 *)v58 + v75);
                v69 = v76 > 0x20;
                v77 = (1 << v76) & 0x100003600;
                if (!v69 && v77 != 0)
                {
                  if ((_DWORD)--v75)
                    continue;
                }
                if (!(_DWORD)v67 && (_DWORD)v75 == (_DWORD)v64)
                {
                  v79 = (unsigned int *)v29;
                  goto LABEL_107;
                }
                goto LABEL_407;
              }
              goto LABEL_425;
            }
            v79 = (unsigned int *)v29;
            if (!(_DWORD)v67)
              goto LABEL_107;
            LODWORD(v75) = 0;
LABEL_407:
            v166 = (v75 - v67 + 1);
            if (v63 - v67 < v166)
              goto LABEL_425;
            v79 = (unsigned int *)v29;
            v29 = (WTF::StringImpl *)((char *)v58 + v67);
            v66 = v166 | 0x100000000;
          }
          else
          {
            while (1)
            {
              v72 = *((unsigned __int16 *)v58 + v65);
              v69 = v72 > 0x20;
              v73 = (1 << v72) & 0x100003600;
              if (v69 || v73 == 0)
                break;
              if (v63 == ++v65)
                goto LABEL_271;
            }
            if ((_DWORD)v64)
            {
              v92 = v64;
              while (v92 < v63)
              {
                v93 = *((unsigned __int16 *)v58 + v92);
                v69 = v93 > 0x20;
                v94 = (1 << v93) & 0x100003600;
                if (!v69 && v94 != 0)
                {
                  if ((_DWORD)--v92)
                    continue;
                }
                v79 = (unsigned int *)v29;
                if (!(_DWORD)v65 && (_DWORD)v92 == (_DWORD)v64)
                  goto LABEL_107;
                goto LABEL_437;
              }
LABEL_425:
              __break(1u);
LABEL_426:
              v51 = 0x100000000;
              v137 = (WTF::StringImpl *)"";
              goto LABEL_267;
            }
            v79 = (unsigned int *)v29;
            if (!(_DWORD)v65)
            {
LABEL_107:
              v29 = v58;
              goto LABEL_108;
            }
            LODWORD(v92) = 0;
LABEL_437:
            v66 = (v92 - v65 + 1);
            if (v63 - v65 < v66)
              goto LABEL_425;
            v29 = (WTF::StringImpl *)((char *)v58 + 2 * v65);
          }
LABEL_108:
          v80 = v66 & 0xFF00000000;
          if ((v66 & 0xFF00000000) != 0)
          {
            if (!(_DWORD)v66)
              goto LABEL_117;
            v81 = 0;
            while (1)
            {
              v82 = *((unsigned __int8 *)v29 + v81);
              v69 = v82 > 0x20;
              v83 = (1 << v82) & 0x100003600;
              if (!v69 && v83 != 0)
                break;
              if (v66 == ++v81)
                goto LABEL_117;
            }
          }
          else
          {
            if (!(_DWORD)v66)
            {
LABEL_117:
              v58 = 0;
              v35 = 0x100000000;
              goto LABEL_127;
            }
            v81 = 0;
            while (1)
            {
              v179 = *((unsigned __int16 *)v29 + v81);
              v69 = v179 > 0x20;
              v180 = (1 << v179) & 0x100003600;
              if (!v69 && v180 != 0)
                break;
              ++v81;
              v35 = 0x100000000;
              if (v66 == v81)
              {
                v58 = 0;
                goto LABEL_127;
              }
            }
          }
          v85 = v81;
          if (v80)
            v85 = v81 | 0x100000000;
          if (v66 > v81)
            v86 = v85;
          else
            v86 = v66;
          if (v66 <= v81)
          {
            v35 = 0x100000000;
            v58 = (WTF::StringImpl *)"";
          }
          else if ((_DWORD)v81)
          {
            v35 = (v66 - v81);
            v143 = v66 - (unint64_t)v81;
            if (v80)
            {
              if (v143 < v35)
                goto LABEL_425;
              v58 = (WTF *)((char *)v29 + v81);
              v35 |= 0x100000000uLL;
            }
            else
            {
              if (v143 < v35)
                goto LABEL_425;
              v58 = (WTF *)((char *)v29 + 2 * v81);
            }
          }
          else
          {
            v35 = v66;
            v58 = v29;
          }
          v66 = v86;
LABEL_127:
          if ((_DWORD)v66)
          {
            if (v29 != (WTF *)"*" && (_DWORD)v66 == 1)
            {
              if ((v66 & 0xFF00000000) != 0)
              {
                if (*(_BYTE *)v29 != 42)
                {
LABEL_312:
                  v146 = 1;
                  goto LABEL_313;
                }
LABEL_197:
                LODWORD(v206) = 1;
LABEL_198:
                v35 = (unint64_t)v204;
                v105 = v193;
                v58 = (WTF::StringImpl *)24;
                if (!v204)
                  goto LABEL_199;
                v172 = *((unsigned int *)v204 - 1);
                if (!(_DWORD)v172)
                {
LABEL_449:
                  WTF::fastFree((WTF *)(v35 - 16), v55);
                  goto LABEL_272;
                }
                v173 = v204;
                while (1)
                {
                  v174 = *((unsigned int *)v173 + 6);
                  if ((_DWORD)v174 == -1)
                    break;
                  v208 = v203;
                  if ((((uint64_t (*)(WTF::StringImpl ***, WTF::StringImpl *))off_1E33D84A0[v174])(&v208, v173) & 1) == 0)
                  {
                    v175 = *((unsigned int *)v173 + 6);
                    if ((_DWORD)v175 != -1)
                      ((void (*)(WTF::StringImpl ***, WTF::StringImpl *))off_1E33D84D0[v175])(&v208, v173);
                    *((_DWORD *)v173 + 6) = -1;
                  }
                  v173 = (WTF::StringImpl *)((char *)v173 + 32);
                  if (!--v172)
                    goto LABEL_449;
                }
                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_525:
                v146 = v66 & 0xFF00000000;
LABEL_313:
                v189 = v146;
              }
              else
              {
                if (*(_WORD *)v29 == 42)
                  goto LABEL_197;
LABEL_491:
                v189 = 0;
              }
              v205 = 0;
              WTF::URL::invalidate((WTF::URL *)&v205);
              if (v189)
                WTF::String::String();
              else
                WTF::String::String();
              MEMORY[0x19AEA52F8](&v208, &v205, v203, 0);
              v147 = v203[0];
              v203[0] = 0;
              if (v147)
              {
                if (*(_DWORD *)v147 == 2)
                  WTF::StringImpl::destroy(v147, (WTF::StringImpl *)v55);
                else
                  *(_DWORD *)v147 -= 2;
              }
              v148 = v205;
              v205 = 0;
              if (v148)
              {
                if (*(_DWORD *)v148 == 2)
                  WTF::StringImpl::destroy(v148, (WTF::StringImpl *)v55);
                else
                  *(_DWORD *)v148 -= 2;
              }
              if ((v209 & 1) == 0)
              {
LABEL_323:
                v149 = (WTF::StringImpl *)v208;
                v208 = 0;
                if (v149)
                {
                  if (*(_DWORD *)v149 == 2)
                    WTF::StringImpl::destroy(v149, (WTF::StringImpl *)v55);
                  else
                    *(_DWORD *)v149 -= 2;
                }
                goto LABEL_133;
              }
              WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)&v208, (const WTF::URL *)v55, (uint64_t)&v205);
              if (v207 == 1)
              {
                v150 = 1;
              }
              else
              {
                WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v204, (uint64_t)&v205, (uint64_t)v203);
                v150 = v207;
                if (v207 == -1)
                  goto LABEL_323;
              }
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33D84D0[v150])(v203, &v205);
              goto LABEL_323;
            }
            if (v29 == (WTF *)"*" && (_DWORD)v66 == 1)
              goto LABEL_197;
            v87 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 39);
            if ((_DWORD)v66 == 6)
            {
              v88 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110);
              v89 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111);
              v90 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101);
              if ((v66 & 0xFF00000000) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v29) != v87)
                  goto LABEL_312;
                v91 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 1));
                if (v91 == v88
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 2)) == v89
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 3)) == v88
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 4)) == v90
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 5)) == v87)
                {
                  goto LABEL_464;
                }
                if (v91 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 2)) != v90
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 3)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 4)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 5)) != v87)
                {
                  goto LABEL_312;
                }
              }
              else
              {
                if (v87 != (unsigned __int16)(*(_WORD *)v29 | (32 * (*(unsigned __int16 *)v29 - 65 < 0x1A))))
                  goto LABEL_491;
                v176 = *((_WORD *)v29 + 1) | (32 * (*((unsigned __int16 *)v29 + 1) - 65 < 0x1A));
                if (v88 == v176
                  && v89 == (unsigned __int16)(*((_WORD *)v29 + 2) | (32
                                                                    * (*((unsigned __int16 *)v29 + 2) - 65 < 0x1A)))
                  && v88 == (unsigned __int16)(*((_WORD *)v29 + 3) | (32
                                                                    * (*((unsigned __int16 *)v29 + 3) - 65 < 0x1A)))
                  && v90 == (unsigned __int16)(*((_WORD *)v29 + 4) | (32
                                                                    * (*((unsigned __int16 *)v29 + 4) - 65 < 0x1A)))
                  && v87 == (unsigned __int16)(*((_WORD *)v29 + 5) | (32
                                                                    * (*((unsigned __int16 *)v29 + 5) - 65 < 0x1A))))
                {
LABEL_464:
                  v205 = 0;
                  v206 = 0;
                  goto LABEL_198;
                }
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115) != v176
                  || v90 != (unsigned __int16)(*((_WORD *)v29 + 2) | (32
                                                                    * (*((unsigned __int16 *)v29 + 2) - 65 < 0x1A)))
                  || (*((unsigned __int16 *)v29 + 3) | (32 * (*((unsigned __int16 *)v29 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                  || (*((unsigned __int16 *)v29 + 4) | (32 * (*((unsigned __int16 *)v29 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                  || v87 != (unsigned __int16)(*((_WORD *)v29 + 5) | (32
                                                                    * (*((unsigned __int16 *)v29 + 5) - 65 < 0x1A))))
                {
                  goto LABEL_491;
                }
              }
              v140 = v17 + 8;
            }
            else
            {
              if ((_DWORD)v66 != 5)
                goto LABEL_525;
              v138 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
              v139 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114);
              if ((v66 & 0xFF00000000) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v29) != v87
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 1)) != v138
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 2)) != v139
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 3)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v29 + 4)) != v87)
                {
                  goto LABEL_312;
                }
              }
              else if (v87 != (unsigned __int16)(*(_WORD *)v29 | (32
                                                                 * (*(unsigned __int16 *)v29 - 65 < 0x1A)))
                     || v138 != (unsigned __int16)(*((_WORD *)v29 + 1) | (32
                                                                        * (*((unsigned __int16 *)v29 + 1)
                                                                         - 65 < 0x1A)))
                     || v139 != (unsigned __int16)(*((_WORD *)v29 + 2) | (32
                                                                        * (*((unsigned __int16 *)v29 + 2)
                                                                         - 65 < 0x1A)))
                     || (*((unsigned __int16 *)v29 + 3) | (32
                                                         * (*((unsigned __int16 *)v29 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                     || v87 != (unsigned __int16)(*((_WORD *)v29 + 4) | (32
                                                                       * (*((unsigned __int16 *)v29 + 4)
                                                                        - 65 < 0x1A))))
              {
                goto LABEL_491;
              }
              v140 = (uint64_t)v191;
            }
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v204, v140, (uint64_t)&v208);
          }
LABEL_133:
          v62 = v35;
          v29 = (WTF *)v79;
          if (!(_DWORD)v35)
          {
LABEL_271:
            v79 = (unsigned int *)v29;
            v205 = v204;
            LODWORD(v206) = 0;
LABEL_272:
            v105 = v193;
LABEL_199:
            v35 = v190;
            goto LABEL_200;
          }
        }
      }
      v79 = (unsigned int *)v29;
      v105 = v193;
      if (shouldStarBePermissionsPolicyDefaultValue)
      {
        LODWORD(v206) = 1;
      }
      else
      {
        v130 = v35;
        LOBYTE(v208) = 0;
        v210 = -1;
        v131 = v79[8];
        if ((_DWORD)v131 != -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl ***, char *))off_1E33D84F0[v131])(&v205, &v208, v191);
          v210 = v131;
        }
        v203[0] = 0;
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)v203, (uint64_t)&v208, (uint64_t)&v205);
        v132 = v203[0];
        v203[0] = 0;
        v205 = v132;
        LODWORD(v206) = 0;
        if (v210 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl ***))off_1E33D84D0[v210])(&v204, &v208);
        v35 = v130;
      }
LABEL_200:
      v111 = *v105;
      if (*v105
        || (WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::rehash(v105, 8u, 0), (v111 = *v105) != 0))
      {
        v112 = *(_DWORD *)(v111 - 8);
      }
      else
      {
        v112 = 0;
      }
      v113 = 9 * ((~(v54 << 15) + v54) ^ ((~(v54 << 15) + v54) >> 10));
      v114 = (v113 ^ (v113 >> 6)) + ~((v113 ^ (v113 >> 6)) << 11);
      v115 = v112 & (v114 ^ HIWORD(v114));
      v116 = (unsigned __int8 *)(v111 + 24 * v115);
      v117 = *v116;
      if (v117 != 255)
      {
        v124 = 0;
        v125 = 1;
        while (v117 != v54)
        {
          if (v117 == 254)
            v124 = v116;
          v115 = (v115 + v125) & v112;
          v116 = (unsigned __int8 *)(v111 + 24 * v115);
          v117 = *v116;
          ++v125;
          if (v117 == 255)
          {
            if (v124)
            {
              *v124 = -1;
              *((_QWORD *)v124 + 1) = 0;
              *((_QWORD *)v124 + 2) = 0;
              --*(_DWORD *)(*v105 - 16);
              v116 = v124;
            }
            goto LABEL_203;
          }
        }
        goto LABEL_213;
      }
LABEL_203:
      *v116 = v54;
      v118 = *((unsigned int *)v116 + 4);
      if ((_DWORD)v118 == -1)
      {
        if ((_DWORD)v206 != -1)
        {
LABEL_205:
          v208 = (WTF::StringImpl **)(v116 + 8);
          ((void (*)(WTF::StringImpl ***))off_1E33D84C0[v206])(&v208);
        }
      }
      else
      {
        if ((_DWORD)v206 != -1)
          goto LABEL_205;
        ((void (*)(WTF::StringImpl ***, unsigned __int8 *))off_1E33D8490[v118])(&v208, v116 + 8);
        *((_DWORD *)v116 + 4) = -1;
      }
      v119 = *v105;
      if (*v105)
        v120 = *(_DWORD *)(v119 - 12) + 1;
      else
        v120 = 1;
      *(_DWORD *)(v119 - 12) = v120;
      v121 = (*(_DWORD *)(v119 - 16) + v120);
      v122 = *(unsigned int *)(v119 - 4);
      if (v122 > 0x400)
      {
        if (v122 > 2 * v121)
          goto LABEL_213;
LABEL_211:
        v123 = (_DWORD)v122 << (6 * v120 >= (2 * v122));
LABEL_212:
        WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::rehash(v105, v123, v116);
        goto LABEL_213;
      }
      if (3 * v122 <= 4 * v121)
      {
        if ((_DWORD)v122)
          goto LABEL_211;
        v123 = 8;
        goto LABEL_212;
      }
LABEL_213:
      if ((_DWORD)v206 != -1)
        ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E33D8490[v206])(&v208, &v205);
      v29 = (WTF *)v79;
LABEL_74:
      WTF::StringView::SplitResult::Iterator::operator++();
      v36 = v196;
      v61 = v196 != (_DWORD)v35 || !v198;
      a3 = v193;
    }
    while (v61);
  }
  v37 = v194;
  v194 = 0;
  if (v37)
  {
    do
    {
      v38 = __ldaxr((unsigned int *)v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, (unsigned int *)v37));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)v37);
      v159 = (WTF::StringImpl *)*((_QWORD *)v37 + 6);
      *((_QWORD *)v37 + 6) = 0;
      if (v159)
      {
        if (*(_DWORD *)v159 == 2)
          WTF::StringImpl::destroy(v159, v31);
        else
          *(_DWORD *)v159 -= 2;
      }
      v160 = (WTF::StringImpl *)*((_QWORD *)v37 + 5);
      *((_QWORD *)v37 + 5) = 0;
      if (v160)
      {
        if (*(_DWORD *)v160 == 2)
          WTF::StringImpl::destroy(v160, v31);
        else
          *(_DWORD *)v160 -= 2;
      }
      v161 = *((unsigned int *)v37 + 8);
      if ((_DWORD)v161 != -1)
        ((void (*)(WTF::StringImpl ***, char *))off_1E33D84D0[v161])(&v208, (char *)v37 + 8);
      *((_DWORD *)v37 + 8) = -1;
      WTF::fastFree(v37, v31);
    }
  }
  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::allowfullscreenAttr, v32, v33, v34)|| (result = WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::webkitallowfullscreenAttr, v40, v41, v42), (_DWORD)result))
  {
    LOBYTE(v205) = 9;
    result = (uint64_t)WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::add<WebCore::Allowlist::AllowAllOrigins>(&v208, a3, &v205);
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v11, v44);
    else
      *(_DWORD *)v11 -= 2;
  }
  return result;
}

_BYTE *WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::add<WebCore::Allowlist::AllowAllOrigins>(_BYTE *result, uint64_t *a2, _BYTE *a3)
{
  _BYTE *v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  char v28;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (unsigned __int8 *)(v6 + 24 * v12);
  v14 = *v13;
  if (v14 != 255)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(_DWORD *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 24 * v25;
        goto LABEL_32;
      }
      if (v14 == 254)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (unsigned __int8 *)(v6 + 24 * v12);
      v14 = *v13;
      ++v16;
    }
    while (v14 != 255);
    if (v15)
    {
      *v15 = -1;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v9) = *a3;
      v13 = v15;
    }
  }
  *v13 = v9;
  v17 = *((unsigned int *)v13 + 4);
  if ((_DWORD)v17 != -1)
  {
    if ((_DWORD)v17 == 1)
      goto LABEL_16;
    result = (_BYTE *)((uint64_t (*)(char *, unsigned __int8 *))off_1E33D8490[v17])(&v28, v13 + 8);
  }
  *((_DWORD *)v13 + 4) = 1;
LABEL_16:
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_23;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
LABEL_29:
      result = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::rehash(a2, v24, v13);
      v13 = result;
      v20 = *a2;
      if (*a2)
        LODWORD(v23) = *(_DWORD *)(v20 - 4);
      else
        LODWORD(v23) = 0;
      goto LABEL_31;
    }
LABEL_23:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_29;
  }
LABEL_31:
  v27 = v20 + 24 * v23;
  v26 = 1;
LABEL_32:
  *(_QWORD *)v5 = v13;
  *((_QWORD *)v5 + 1) = v27;
  v5[16] = v26;
  return result;
}

uint64_t WebCore::PermissionsPolicy::computeInheritedPolicyValueInContainer(unsigned int a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _BOOL4 v36;
  WebCore::PermissionsPolicy *v37;
  const WebCore::Document *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE v43[24];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 48))
    return 1;
  WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(&v40, (unsigned __int8 **)(a2 + 32));
  v7 = (const char *)*(unsigned __int8 *)(a2 + 48);
  if (!*(_BYTE *)(a2 + 48))
    goto LABEL_34;
  v43[0] = 0;
  v44 = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E33D84F0[v8])(&v42, v43, a2);
    v44 = v8;
  }
  if (!v40)
  {
LABEL_36:
    v21 = 0;
LABEL_24:
    if ((_DWORD)v8 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E33D84D0[v8])(&v42, v43);
    if (v40)
      WTF::fastFree((WTF *)(v40 - 16), v6);
    return v21;
  }
  v9 = *(_DWORD *)(v40 - 8);
  v10 = 9 * ((~(a1 << 15) + a1) ^ ((~(a1 << 15) + a1) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v11 ^ HIWORD(v11);
  LODWORD(v13) = v9 & v12;
  v14 = *(unsigned __int8 *)(v40 + (v9 & v12));
  if (v14 != a1)
  {
    v15 = 1;
    v16 = *(unsigned __int8 *)(v40 + v13);
    LODWORD(v17) = v9 & v12;
    while (v16 != 255)
    {
      v17 = ((_DWORD)v17 + v15) & v9;
      v16 = *(unsigned __int8 *)(v40 + v17);
      ++v15;
      if (v16 == a1)
      {
        v18 = 1;
        while (v14 != 255)
        {
          v13 = ((_DWORD)v13 + v18) & v9;
          v14 = *(unsigned __int8 *)(v40 + v13);
          ++v18;
          if (v14 == a1)
            goto LABEL_13;
        }
        goto LABEL_36;
      }
    }
    goto LABEL_36;
  }
LABEL_13:
  v7 = (const char *)*(unsigned __int8 *)(a2 + 48);
  if (!*(_BYTE *)(a2 + 48))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(&v39, (unsigned __int8 **)(a2 + 40));
  if (!v39)
    goto LABEL_15;
  v24 = *(_DWORD *)(v39 - 8);
  v25 = v24 & v12;
  v26 = (unsigned __int8 *)(v39 + 24 * (v24 & v12));
  v27 = *v26;
  if (v27 != a1)
  {
    v28 = 1;
    while (v27 != 255)
    {
      v25 = (v25 + v28) & v24;
      v26 = (unsigned __int8 *)(v39 + 24 * v25);
      v27 = *v26;
      ++v28;
      if (v27 == a1)
        goto LABEL_51;
    }
    v26 = (unsigned __int8 *)(v39 + 24 * *(unsigned int *)(v39 - 4));
  }
LABEL_51:
  if (v26 == (unsigned __int8 *)(v39 + 24 * *(unsigned int *)(v39 - 4)))
  {
LABEL_15:
    v7 = "*";
    if (a1 <= 0x10)
    {
      if (((1 << a1) & 0xFEEF) != 0)
      {
        v19 = "'self'";
        goto LABEL_18;
      }
      if (((1 << a1) & 0x110) != 0)
      {
        v20 = 2;
        v19 = "*";
        if ("*")
        {
LABEL_19:
          if (!strcmp(v19, "*"))
            goto LABEL_33;
          goto LABEL_20;
        }
LABEL_32:
        if (v19 == v7)
          goto LABEL_33;
LABEL_20:
        if (v20 != 7
          || (v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v19),
              v34 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 39))
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v19 + 1)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v19 + 2)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v19 + 3)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v19 + 4)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v19 + 5)) != v34)
        {
          v21 = 0;
LABEL_22:
          v22 = v39;
          if (v39)
          {
            v29 = *(unsigned int *)(v39 - 4);
            if ((_DWORD)v29)
            {
              v30 = v39 + 8;
              do
              {
                if (*(unsigned __int8 *)(v30 - 8) != 254)
                {
                  v31 = *(unsigned int *)(v30 + 8);
                  if ((_DWORD)v31 != -1)
                    ((void (*)(uint64_t **, uint64_t))off_1E33D8490[v31])(&v42, v30);
                  *(_DWORD *)(v30 + 8) = -1;
                }
                v30 += 24;
                --v29;
              }
              while (v29);
            }
            WTF::fastFree((WTF *)(v22 - 16), v6);
          }
          LODWORD(v8) = v44;
          goto LABEL_24;
        }
        if (v43 != (_BYTE *)a3)
        {
          v35 = *(unsigned int *)(a3 + 24);
          v36 = v44 != -1 && v44 == v35;
          if ((_DWORD)v35 == -1)
            v21 = v44 == -1;
          else
            v21 = v36;
          if ((_DWORD)v35 == -1 || !v36)
            goto LABEL_22;
          v42 = &v41;
          v33 = ((uint64_t (*)(uint64_t **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v35])(&v42, a3, v43);
          goto LABEL_54;
        }
LABEL_33:
        v21 = 1;
        goto LABEL_22;
      }
    }
LABEL_35:
    v19 = "'none'";
LABEL_18:
    v20 = 7;
    if (v19)
      goto LABEL_19;
    goto LABEL_32;
  }
  v41 = a3;
  v32 = *((unsigned int *)v26 + 4);
  if ((_DWORD)v32 != -1)
  {
    v42 = &v41;
    v33 = ((uint64_t (*)(uint64_t **, unsigned __int8 *))off_1E33D8510[v32])(&v42, v26 + 8);
LABEL_54:
    v21 = v33;
    goto LABEL_22;
  }
  v37 = (WebCore::PermissionsPolicy *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::PermissionsPolicy::PermissionsPolicy(v37, v38);
}

WebCore::PermissionsPolicy *WebCore::PermissionsPolicy::PermissionsPolicy(WebCore::PermissionsPolicy *this, const WebCore::Document *a2)
{
  _QWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[31];
  char v14;
  _BYTE v15[24];
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  WebCore::Document::ownerPermissionsPolicy((uint64_t)a2, a2, v15);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E33D8530;
  v4[1] = this;
  v4[2] = v15;
  v4[3] = a2;
  v14 = 0;
  WebCore::SecurityContext::securityOrigin((const WebCore::Document *)((char *)a2 + 192), v5);
  if (WebCore::PermissionsPolicy::computeInheritedPolicyValueInContainer(0, (uint64_t)v15, v6 + 8))
    WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::add(v13, (uint64_t *)this, &v14);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 1);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 2);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 3);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 4);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 5);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 6);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 7);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 8);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 9);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 10);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 11);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 12);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 13);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 14);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, 15);
  (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  if (v19)
  {
    v8 = v18;
    if (v18)
    {
      v10 = *(unsigned int *)(v18 - 4);
      if ((_DWORD)v10)
      {
        v11 = v18 + 8;
        do
        {
          if (*(unsigned __int8 *)(v11 - 8) != 254)
          {
            v12 = *(unsigned int *)(v11 + 8);
            if ((_DWORD)v12 != -1)
              ((void (*)(_BYTE *, uint64_t))off_1E33D8490[v12])(v13, v11);
            *(_DWORD *)(v11 + 8) = -1;
          }
          v11 += 24;
          --v10;
        }
        while (v10);
      }
      WTF::fastFree((WTF *)(v8 - 16), v7);
    }
    if (v17)
      WTF::fastFree((WTF *)(v17 - 16), v7);
    if (v16 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E33D84D0[v16])(v13, v15);
  }
  return this;
}

uint64_t WebCore::PermissionsPolicy::isFeatureEnabled(unsigned int a1, _QWORD *a2, int a3)
{
  WebCore::SecurityContext *v6;
  uint64_t v7;
  WebCore::SecurityOriginData *v8;
  WebCore::PermissionsPolicy *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  WebCore::PermissionsPolicy *v25;
  void *v26;
  WTF *v27;
  _DWORD *v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  v6 = (WebCore::SecurityContext *)(a2 + 24);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 24), (WTF::StringImpl *)a2);
  v8 = (WebCore::SecurityOriginData *)(v7 + 8);
  v9 = (WebCore::PermissionsPolicy *)a2[438];
  if (!v9)
  {
    v9 = (WebCore::PermissionsPolicy *)WTF::fastMalloc((WTF *)8);
    v25 = WebCore::PermissionsPolicy::PermissionsPolicy(v9, (const WebCore::Document *)a2);
    v27 = (WTF *)a2[438];
    a2[438] = v25;
    if (v27)
    {
      if (*(_QWORD *)v27)
        WTF::fastFree((WTF *)(*(_QWORD *)v27 - 16), v26);
      WTF::fastFree(v27, v26);
      v9 = (WebCore::PermissionsPolicy *)a2[438];
    }
  }
  WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)&v37, (unsigned __int8 **)v9);
  WebCore::SecurityContext::securityOrigin(v6, v10);
  v13 = v37;
  if (!v37)
  {
    v22 = 0;
    goto LABEL_13;
  }
  v14 = v11;
  v15 = *((_DWORD *)v37 - 2);
  v16 = 9 * ((~(a1 << 15) + a1) ^ ((~(a1 << 15) + a1) >> 10));
  LODWORD(v17) = v15 & (((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) ^ (((v16 ^ (v16 >> 6))
                                                                             + ~((v16 ^ (v16 >> 6)) << 11)) >> 16));
  v18 = *((unsigned __int8 *)v37 + v17);
  if (v18 == a1)
  {
LABEL_4:
    if (a1 > 0x10)
    {
      v20 = "'none'";
    }
    else
    {
      v19 = 1 << a1;
      if (((1 << a1) & 0xFEEF) == 0)
      {
        if ((v19 & 0x110) != 0)
          v20 = "*";
        else
          v20 = "'none'";
        if ((v19 & 0x110) != 0)
          v21 = 2;
        else
          v21 = 7;
LABEL_8:
        if (v20)
        {
          if (strcmp(v20, "*"))
          {
LABEL_10:
            if (v21 == 7)
            {
              v35 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v20);
              if (v35 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 39)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v20 + 1)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v20 + 2)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v20 + 3)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v20 + 4)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v20 + 5)) == v35)
              {
                v22 = WebCore::operator==((uint64_t)v8, v14 + 8);
                v13 = v37;
                if (!v37)
                  goto LABEL_13;
                goto LABEL_12;
              }
            }
            goto LABEL_11;
          }
        }
        else if ("*")
        {
          goto LABEL_10;
        }
        v22 = 1;
        goto LABEL_12;
      }
      v20 = "'self'";
    }
    v21 = 7;
    goto LABEL_8;
  }
  v24 = 1;
  while ((_BYTE)v18 != 0xFF)
  {
    v17 = ((_DWORD)v17 + v24) & v15;
    v18 = *((unsigned __int8 *)v37 + v17);
    ++v24;
    if (v18 == a1)
      goto LABEL_4;
  }
LABEL_11:
  v22 = 0;
LABEL_12:
  WTF::fastFree((WTF::StringImpl *)((char *)v13 - 16), v12);
LABEL_13:
  if ((v22 & 1) == 0)
  {
    if (a3)
    {
      v28 = (_DWORD *)a2[87];
      if (v28)
      {
        ++v28[6];
        v29 = (int8x16_t *)WebCore::toFeatureNameForLogging(a1);
        v31 = v30;
        WebCore::SecurityOriginData::toString(v8, &v36);
        WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((char *)&v37, v29, v31, (uint64_t)v36);
        WebCore::LocalDOMWindow::printErrorMessage((uint64_t)v28, (const WTF::String *)&v37);
        v33 = v37;
        v37 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v32);
          else
            *(_DWORD *)v33 -= 2;
        }
        v34 = v36;
        v36 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v32);
          else
            *(_DWORD *)v34 -= 2;
        }
        if (v28[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 72))(v28);
        else
          --v28[6];
      }
    }
  }
  return v22;
}

WTF::StringImpl *WebCore::PluginDocumentParser::appendBytes(WTF::StringImpl *result)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::HTMLFrameOwnerElement *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  WTF *v99;
  char *v100;
  uint64_t v101;
  WTF *v102;
  _QWORD *v103;
  _QWORD *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  char v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  const char *v112;
  WTF::StringImpl *v113;
  char v114;
  _BYTE v115[8];
  WTF::StringImpl *v116;
  char v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;

  v1 = result;
  v2 = *((_QWORD *)result + 3);
  if (v2 && *(_QWORD *)(v2 + 8))
    return result;
  v3 = *((_QWORD *)result + 2);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if ((*(_WORD *)(v4 + 3358) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CB6050);
  }
  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = v4 + 96;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v8 = WebCore::HTMLNames::htmlTag;
  if (WebCore::HTMLNames::htmlTag)
    ++*(_DWORD *)WebCore::HTMLNames::htmlTag;
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33BF070;
  WebCore::ContainerNode::appendChild(v4, (WebCore::Node *)v5, (uint64_t)v115);
  if (v117)
  {
    v10 = v116;
    v116 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = bmalloc::api::isoAllocate();
  v12 = v11;
  *(_OWORD *)(v11 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v11 + 24) = 0x101C00000002;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v7;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  v13 = WebCore::HTMLNames::headTag;
  if (WebCore::HTMLNames::headTag)
    ++*(_DWORD *)WebCore::HTMLNames::headTag;
  *(_QWORD *)(v11 + 96) = v13;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)v11 = off_1E33BDFC0;
  v14 = bmalloc::api::isoAllocate();
  v15 = v14;
  *(_OWORD *)(v14 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v14 + 24) = 0x101C00000002;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = v7;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  v16 = WebCore::HTMLNames::styleTag;
  if (WebCore::HTMLNames::styleTag)
    ++*(_DWORD *)WebCore::HTMLNames::styleTag;
  *(_QWORD *)(v14 + 96) = v16;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)v14 = off_1E33CD4C8;
  *(_WORD *)(v14 + 112) = 0;
  *(_DWORD *)(v14 + 116) = 0;
  *(_DWORD *)(v14 + 120) = 0;
  *(_OWORD *)(v14 + 128) = 0uLL;
  *(_OWORD *)(v14 + 144) = 0uLL;
  *(_BYTE *)(v14 + 160) = 0;
  v118 = "html, body, embed { width: 100%; height: 100%; }\nbody { margin: 0; overflow: hidden; }\n";
  v119 = 88;
  v112 = "body { background-color: rgb(217, 224, 233) }";
  v113 = (WTF::StringImpl *)46;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v118, (uint64_t)&v112, &v109);
  if (!v109)
  {
    __break(0xC471u);
    JUMPOUT(0x195CB6180);
  }
  v18 = *(unsigned __int16 *)(v15 + 28) >> 12;
  if (v18 == 1)
    goto LABEL_18;
  if (v18 > 0xB)
    goto LABEL_19;
  if (v18 == 11)
  {
LABEL_18:
    WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v15, (uint64_t)&v109);
LABEL_19:
    v118 = 0;
    v119 = 0;
    v120 = 0;
    goto LABEL_20;
  }
  if (((1 << v18) & 0x19C) == 0)
    goto LABEL_19;
  (*(void (**)(const char **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 120))(&v118, v15, &v109);
  if ((_BYTE)v120)
  {
    v97 = (WTF::StringImpl *)v119;
    v119 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, v17);
      else
        *(_DWORD *)v97 -= 2;
    }
  }
LABEL_20:
  v19 = v109;
  v109 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  WebCore::ContainerNode::appendChild(v12, (WebCore::Node *)v15, (uint64_t)&v118);
  if ((_BYTE)v120)
  {
    v21 = (WTF::StringImpl *)v119;
    v119 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v12, (uint64_t)&v112);
  if (v114)
  {
    v23 = v113;
    v113 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_QWORD *)(v4 + 528);
  if (v24)
  {
    v25 = *(unsigned int **)(v24 + 8);
    if (v25)
      WebCore::LocalFrame::injectUserScripts(v25, 0);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = v109;
  v105 = v109;
  WebCore::Document::processViewport(v4, (uint64_t *)&v105, 1u);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
  v28 = bmalloc::api::isoAllocate();
  v29 = v28;
  *(_OWORD *)(v28 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v28 + 24) = 0x101C00000002;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = v7;
  *(_OWORD *)(v28 + 48) = 0u;
  *(_OWORD *)(v28 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v28 + 80) = 0;
  *(_QWORD *)(v28 + 88) = 0;
  v30 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(v28 + 96) = v30;
  *(_QWORD *)(v28 + 104) = 0;
  *(_QWORD *)v28 = off_1E33B5118;
  WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v28, (uint64_t)&v109);
  if (v111)
  {
    v32 = v110;
    v110 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  v33 = bmalloc::api::isoAllocate();
  v34 = (_QWORD *)WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement(v33, (_DWORD **)&WebCore::HTMLNames::embedTag, v4);
  *v34 = off_1E33BB388;
  if ((v34[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v36 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v36 = 1;
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = 0;
    *(_QWORD *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 32) = 0;
    v37 = *(_QWORD *)(v33 + 16);
    *(_QWORD *)(v33 + 16) = v37 & 0xFFFF000000000000 | v36;
    v38 = v37 & 0xFFFFFFFFFFFFLL;
    if ((v37 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v39 = __ldaxr((unsigned int *)v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unsigned int *)v38));
      if (!v40)
      {
        atomic_store(1u, (unsigned int *)v38);
        v101 = *(unsigned int *)(v38 + 28);
        if ((_DWORD)v101)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v38 + 16), (WTF::StringImpl *)(*(_QWORD *)(v38 + 16) + 32 * v101));
        v102 = *(WTF **)(v38 + 16);
        if (v102)
        {
          *(_QWORD *)(v38 + 16) = 0;
          *(_DWORD *)(v38 + 24) = 0;
          WTF::fastFree(v102, v35);
        }
        WTF::fastFree((WTF *)v38, v35);
      }
    }
  }
  v41 = (unsigned int *)(*(_QWORD *)(v33 + 16) & 0xFFFFFFFFFFFFLL);
  if (v41)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  v43 = *((_QWORD *)v1 + 3);
  *((_QWORD *)v1 + 3) = v41;
  if (v43)
  {
    do
    {
      v44 = __ldaxr((unsigned int *)v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)v43));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)v43);
      v98 = *(unsigned int *)(v43 + 28);
      if ((_DWORD)v98)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v43 + 16), (WTF::StringImpl *)(*(_QWORD *)(v43 + 16) + 32 * v98));
      v99 = *(WTF **)(v43 + 16);
      if (v99)
      {
        *(_QWORD *)(v43 + 16) = 0;
        *(_DWORD *)(v43 + 24) = 0;
        WTF::fastFree(v99, v35);
      }
      WTF::fastFree((WTF *)v43, v35);
    }
  }
  WTF::AtomStringImpl::add();
  v108 = v105;
  v46 = *(_QWORD *)(v33 + 104);
  if (!v46)
    goto LABEL_64;
  v47 = *(_DWORD *)(v46 + 4);
  if ((v47 & 1) != 0)
  {
    v48 = *(uint64_t **)(v46 + 40);
    v49 = *(_DWORD *)(v46 + 52);
    if (!v49)
    {
LABEL_64:
      v50 = 0xFFFFFFFFLL;
      goto LABEL_65;
    }
  }
  else
  {
    v48 = (uint64_t *)(v46 + 32);
    v49 = v47 >> 5;
    if (!v49)
      goto LABEL_64;
  }
  v50 = 0;
  while (1)
  {
    v51 = *v48;
    if (*v48 == WebCore::HTMLNames::nameAttr
      || *(_QWORD *)(v51 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
      && *(_QWORD *)(v51 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
    {
      break;
    }
    ++v50;
    v48 += 2;
    if (v49 == v50)
      goto LABEL_64;
  }
LABEL_65:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v33, v50, (WebCore::TreeScope *)&WebCore::HTMLNames::nameAttr, &v108, 0);
  v53 = v108;
  v108 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *(WTF::StringImpl **)(v4 + 736);
  if (v54)
  {
    if ((*((_BYTE *)v54 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v54 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v54, v52);
      v54 = v105;
    }
  }
  v105 = v54;
  v55 = *(_QWORD *)(v33 + 104);
  if (!v55)
    goto LABEL_83;
  v56 = *(_DWORD *)(v55 + 4);
  if ((v56 & 1) != 0)
  {
    v57 = *(uint64_t **)(v55 + 40);
    v58 = *(_DWORD *)(v55 + 52);
    if (!v58)
    {
LABEL_83:
      v59 = 0xFFFFFFFFLL;
      goto LABEL_84;
    }
  }
  else
  {
    v57 = (uint64_t *)(v55 + 32);
    v58 = v56 >> 5;
    if (!v58)
      goto LABEL_83;
  }
  v59 = 0;
  while (1)
  {
    v60 = *v57;
    if (*v57 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v60 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v60 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    ++v59;
    v57 += 2;
    if (v58 == v59)
      goto LABEL_83;
  }
LABEL_84:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v33, v59, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v105, 0);
  v62 = v105;
  v105 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v61);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = *(_QWORD *)(v4 + 528);
  if (!v63)
    goto LABEL_115;
  v64 = *(_QWORD *)(v63 + 8);
  if (!v64)
    goto LABEL_115;
  v65 = *(_QWORD *)(*(_QWORD *)(v64 + 280) + 88);
  if (!v65 || *(_QWORD *)(v64 + 296) != v4)
    goto LABEL_115;
  ++*(_DWORD *)(v65 + 24);
  v66 = *((_QWORD *)v1 + 3);
  if (v66)
    v67 = *(WTF::StringImpl **)(v66 + 8);
  else
    v67 = 0;
  v68 = *(WTF::StringImpl **)(v65 + 120);
  if (v68)
  {
    if ((*((_BYTE *)v68 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v68 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v68, v61);
      v68 = v105;
    }
  }
  v105 = v68;
  v69 = *((_QWORD *)v67 + 13);
  if (!v69)
    goto LABEL_109;
  v70 = *(_DWORD *)(v69 + 4);
  if ((v70 & 1) == 0)
  {
    v71 = (uint64_t *)(v69 + 32);
    v72 = v70 >> 5;
    if (!v72)
      goto LABEL_109;
LABEL_102:
    v73 = 0;
    while (1)
    {
      v74 = *v71;
      if (*v71 == WebCore::HTMLNames::typeAttr
        || *(_QWORD *)(v74 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
        && *(_QWORD *)(v74 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
      {
        goto LABEL_110;
      }
      ++v73;
      v71 += 2;
      if (v72 == v73)
        goto LABEL_109;
    }
  }
  v71 = *(uint64_t **)(v69 + 40);
  v72 = *(_DWORD *)(v69 + 52);
  if (v72)
    goto LABEL_102;
LABEL_109:
  v73 = 0xFFFFFFFFLL;
LABEL_110:
  WebCore::Element::setAttributeInternal(v67, v73, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, &v105, 0);
  v75 = v105;
  v105 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v61);
    else
      *(_DWORD *)v75 -= 2;
  }
  if (*(_DWORD *)(v65 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
  else
    --*(_DWORD *)(v65 + 24);
LABEL_115:
  v76 = *((_QWORD *)v1 + 3);
  if (v76)
    v76 = *(_QWORD *)(v76 + 8);
  *(_DWORD *)(v76 + 24) += 2;
  v77 = *(_QWORD *)(v4 + 3528);
  *(_QWORD *)(v4 + 3528) = v76;
  if (v77)
  {
    if (*(_DWORD *)(v77 + 24) == 2)
    {
      if ((*(_WORD *)(v77 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v77, v61);
    }
    else
    {
      *(_DWORD *)(v77 + 24) -= 2;
    }
  }
  result = (WTF::StringImpl *)WebCore::ContainerNode::appendChild(v29, (WebCore::Node *)v33, (uint64_t)&v105);
  if (v107)
  {
    result = v106;
    v106 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v78);
      else
        *(_DWORD *)result -= 2;
    }
  }
  *(_BYTE *)(v4 + 3436) = 1;
  if (*(_DWORD *)(v33 + 24) == 2)
  {
    if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v33, v78);
  }
  else
  {
    *(_DWORD *)(v33 + 24) -= 2;
  }
  if (*(_DWORD *)(v29 + 24) == 2)
  {
    if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v29, v78);
  }
  else
  {
    *(_DWORD *)(v29 + 24) -= 2;
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v15, v78);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v12, v78);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v6, v78);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  v79 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 2) + 8) + 528);
  if (v79)
  {
    v80 = *(_QWORD *)(v79 + 8);
    if (v80)
    {
      v81 = (unsigned int *)(v80 + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 + 1, v81));
      v83 = *((_QWORD *)v1 + 2);
      if (v83)
        v84 = *(_QWORD *)(v83 + 8);
      else
        v84 = 0;
      WebCore::Document::updateLayout(v84, 0, 0);
      v86 = *(_QWORD *)(v80 + 288);
      if ((*(_QWORD *)(v86 + 440) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v86 + 440) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
      {
        WebCore::LocalFrameViewLayoutContext::runPostLayoutTasks((_QWORD *)(v86 + 336), v85);
      }
      if ((*(_QWORD *)(v86 + 704) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v86 + 704) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
      {
        ++*(_DWORD *)(v86 + 8);
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v86 + 672));
        if (!WebCore::LocalFrameView::updateEmbeddedObjects((WebCore::LocalFrameView *)v86, v103))
          WebCore::LocalFrameView::updateEmbeddedObjects((WebCore::LocalFrameView *)v86, v104);
        if (*(_DWORD *)(v86 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
        else
          --*(_DWORD *)(v86 + 8);
      }
      v87 = *((_QWORD *)v1 + 3);
      if (v87)
        v88 = *(WebCore::HTMLFrameOwnerElement **)(v87 + 8);
      else
        v88 = 0;
      result = (WTF::StringImpl *)WebCore::HTMLFrameOwnerElement::renderWidget(v88);
      if (result)
      {
        v89 = (_DWORD *)*((_QWORD *)result + 29);
        if (v89)
        {
          ++v89[2];
          result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(*(_QWORD *)(v80 + 280)
                                                                                                + 16)
                                                                                  + 880))(*(_QWORD *)(*(_QWORD *)(v80 + 280) + 16), v89);
          v90 = *(_QWORD *)(v80 + 280);
          v91 = 88;
          if (!*(_BYTE *)(v90 + 80))
            v91 = 96;
          v92 = *(_QWORD *)(v90 + v91);
          if (v92)
          {
            v93 = *(_QWORD *)(v92 + 80);
            if (v93)
            {
              v94 = *(_QWORD *)(v93 + 8);
              if (v94)
                *(_DWORD *)(v94 + 130) |= 8u;
            }
          }
          if (v89[2] == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v89 + 8))(v89);
          else
            --v89[2];
        }
      }
      do
      {
        v95 = __ldaxr(v81);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v81));
      if (!v96)
      {
        atomic_store(1u, v81);
        v100 = (char *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v100 = off_1E31FE290;
        *((_QWORD *)v100 + 1) = v81;
        v118 = v100;
        WTF::ensureOnMainThread();
        result = (WTF::StringImpl *)v118;
        v118 = 0;
        if (result)
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebCore::PluginDocument::createParser@<X0>(WebCore::PluginDocument *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int v6;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A3D50;
  *(_WORD *)(v4 + 12) = 0;
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (result)
  {
    do
      v6 = __ldaxr(result);
    while (__stlxr(v6 + 1, result));
  }
  *(_QWORD *)v4 = off_1E33D83F8;
  *(_QWORD *)(v4 + 16) = result;
  *(_QWORD *)(v4 + 24) = 0;
  *a2 = v4;
  return result;
}

uint64_t WebCore::PluginDocument::pluginWidget(WebCore::PluginDocument *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 441);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  if (*(_BYTE *)(v2 + 46) != 7)
    return 0;
  v3 = *(_QWORD *)(v2 + 232);
  if (!v3)
    return 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3))
    return v3;
  else
    return 0;
}

_QWORD *WebCore::PublicURLManager::create@<X0>(WebCore::PublicURLManager *this@<X0>, WebCore::ActiveDOMObject **a2@<X8>)
{
  WebCore::ActiveDOMObject *v5;
  WebCore::ActiveDOMObject *v6;

  v5 = (WebCore::ActiveDOMObject *)WTF::fastMalloc((WTF *)0x20);
  *((_DWORD *)v5 + 6) = 1;
  v6 = WebCore::ActiveDOMObject::ActiveDOMObject(v5, this);
  *(_QWORD *)v6 = &off_1E33D7F80;
  *((_BYTE *)v6 + 28) = 0;
  *a2 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v6);
}

void WebCore::PublicURLManager::revoke(WebCore::PublicURLManager *this, const WTF::URL *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::SecurityOrigin *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  WebCore::SecurityOrigin *v24;

  if (!*((_BYTE *)this + 28))
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 - 96), a2);
        if (v6)
        {
          v7 = v6;
          do
            v8 = __ldaxr(v6);
          while (__stlxr(v8 + 1, v6));
          WebCore::SecurityOrigin::create(a2, (uint64_t *)&v24);
          v9 = v24;
          if (WebCore::SecurityOrigin::isSameOriginAs(v24, (const WebCore::SecurityOrigin *)v7))
          {
            v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v11 = off_1E33D8568;
            v11[1] = this;
            v11[2] = a2;
            v23 = v11;
            WebCore::URLRegistry::forEach(&v23);
            v12 = v23;
            v23 = 0;
            if (v12)
              (*(void (**)(_QWORD *))(*v12 + 8))(v12);
          }
          v24 = 0;
          if (v9)
          {
            do
            {
              v13 = __ldaxr((unsigned int *)v9);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, (unsigned int *)v9));
            if (!v14)
            {
              atomic_store(1u, (unsigned int *)v9);
              v20 = (WTF::StringImpl *)*((_QWORD *)v9 + 6);
              *((_QWORD *)v9 + 6) = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v10);
                else
                  *(_DWORD *)v20 -= 2;
              }
              v21 = (WTF::StringImpl *)*((_QWORD *)v9 + 5);
              *((_QWORD *)v9 + 5) = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v10);
                else
                  *(_DWORD *)v21 -= 2;
              }
              v22 = *((unsigned int *)v9 + 8);
              if ((_DWORD)v22 != -1)
                ((void (*)(_QWORD **, char *))off_1E33D84D0[v22])(&v23, (char *)v9 + 8);
              *((_DWORD *)v9 + 8) = -1;
              WTF::fastFree(v9, v10);
            }
          }
          do
          {
            v15 = __ldaxr(v7);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v7));
          if (!v16)
          {
            atomic_store(1u, v7);
            v17 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
            *((_QWORD *)v7 + 6) = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v10);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
            *((_QWORD *)v7 + 5) = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v10);
              else
                *(_DWORD *)v18 -= 2;
            }
            v19 = v7[8];
            if ((_DWORD)v19 != -1)
              ((void (*)(WebCore::SecurityOrigin **, unsigned int *))off_1E33D84D0[v19])(&v24, v7 + 2);
            v7[8] = -1;
            WTF::fastFree((WTF *)v7, v10);
          }
        }
      }
    }
  }
}

unsigned int *WebCore::PublicURLManager::stop(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  unsigned int *v9;

  if (!*((_BYTE *)this + 28))
  {
    *((_BYTE *)this + 28) = 1;
    v1 = *((_QWORD *)this + 1);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        v3 = *(unsigned __int8 *)(v2 + 178);
        if (*(_BYTE *)(v2 + 178))
        {
          if (v3 == 1 || v3 == 2)
            ++*(_DWORD *)(v2 + 216);
        }
        else
        {
          *(_DWORD *)(v2 - 264) += 2;
        }
        v9 = (unsigned int *)(v2 - 96);
        v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v4 = off_1E33D8590;
        v4[1] = &v9;
        v8 = v4;
        WebCore::URLRegistry::forEach(&v8);
        v6 = v8;
        v8 = 0;
        if (v6)
          (*(void (**)(_QWORD *))(*v6 + 8))(v6);
        this = v9;
        v9 = 0;
        if (this)
        {
          v7 = *((unsigned __int8 *)this + 274);
          if (*((_BYTE *)this + 274))
          {
            if (v7 == 1)
            {
              if (this[78] == 1)
                return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 40))(this);
              else
                --this[78];
            }
            else if (v7 == 2)
            {
              return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(this + 78);
            }
          }
          else if (*(this - 42) == 2)
          {
            if ((*((_WORD *)this - 81) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)(this - 48), v5);
          }
          else
          {
            *(this - 42) -= 2;
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl **WebCore::RadioInputType::formControlType(WebCore::RadioInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "radio";
    v2[1] = 6;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::radio(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::radio(void)::name;
}

uint64_t WebCore::RadioInputType::forEachButtonInDetachedGroup(uint64_t result, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  __int16 v14;
  BOOL v15;
  BOOL v16;

  v5 = result;
  v6 = result;
  if ((*(_WORD *)(result + 28) & 0x10) != 0)
  {
    while (1)
    {
LABEL_17:
      v10 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
      if (v10 == *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      {
        result = WebCore::Traversal<WebCore::HTMLElement>::nextSkippingChildren(v6, v5);
        v6 = result;
      }
      else
      {
        if (v10 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) && *(_DWORD *)(*(_QWORD *)(v6 + 240) + 12) == 4096)
        {
          v11 = *(_QWORD *)(v6 + 120);
          if (!v11 || !*(_QWORD *)(v11 + 8))
          {
            v12 = *(WTF **)(v6 + 208);
            if (!v12)
              v12 = (WTF *)*MEMORY[0x1E0CBF3B8];
            result = WTF::equal(v12, *a2, a3);
            if ((_DWORD)result)
            {
              result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a3 + 16))(*(_QWORD *)a3, v6);
              if (!(_DWORD)result)
                return result;
            }
          }
        }
        v13 = *(_QWORD *)(v6 + 80);
        if (!v13)
        {
          if (v6 == v5)
            return result;
          while (1)
          {
            v13 = *(_QWORD *)(v6 + 56);
            if (v13)
              break;
            v6 = *(_QWORD *)(v6 + 32);
            if (v6)
              v16 = v6 == v5;
            else
              v16 = 1;
            if (v16)
              return result;
          }
        }
        v14 = *(_WORD *)(v13 + 28);
        if ((v14 & 0x10) != 0)
        {
          v6 = v13;
        }
        else
        {
          do
          {
            if ((v14 & 4) == 0 || (v6 = *(_QWORD *)(v13 + 80)) == 0)
            {
              if (v13 == v5)
                return result;
              while (1)
              {
                v6 = *(_QWORD *)(v13 + 56);
                if (v6)
                  break;
                v13 = *(_QWORD *)(v13 + 32);
                if (v13)
                  v15 = v13 == v5;
                else
                  v15 = 1;
                if (v15)
                  return result;
              }
            }
            v14 = *(_WORD *)(v6 + 28);
            v13 = v6;
          }
          while ((v14 & 0x10) == 0);
        }
      }
      if (!v6)
        return result;
    }
  }
  v7 = *(_QWORD *)(result + 80);
  if (v7)
  {
    v8 = *(_WORD *)(v7 + 28);
    if ((v8 & 0x10) != 0)
    {
      v6 = *(_QWORD *)(result + 80);
      goto LABEL_17;
    }
    while (1)
    {
      if ((v8 & 4) == 0 || (v6 = *(_QWORD *)(v7 + 80)) == 0)
      {
        if (v7 == result)
          return result;
        while (1)
        {
          v6 = *(_QWORD *)(v7 + 56);
          if (v6)
            break;
          v7 = *(_QWORD *)(v7 + 32);
          if (v7)
            v9 = v7 == result;
          else
            v9 = 1;
          if (v9)
            return result;
        }
      }
      v8 = *(_WORD *)(v6 + 28);
      v7 = v6;
      if ((v8 & 0x10) != 0)
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t WebCore::Traversal<WebCore::HTMLElement>::nextSkippingChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  BOOL v5;

  if (a1 == a2)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(a1 + 56);
    if (v2)
      break;
    a1 = *(_QWORD *)(a1 + 32);
    if (a1)
      v3 = a1 == a2;
    else
      v3 = 1;
    if (v3)
      return 0;
  }
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
  {
    while (v2 != a2)
    {
      while (1)
      {
        result = *(_QWORD *)(v2 + 56);
        if (result)
          break;
        v2 = *(_QWORD *)(v2 + 32);
        if (v2)
          v5 = v2 == a2;
        else
          v5 = 1;
        if (v5)
          return 0;
      }
      v2 = *(_QWORD *)(v2 + 56);
      if ((*(_WORD *)(result + 28) & 0x10) != 0)
        return result;
    }
    return 0;
  }
  return *(_QWORD *)(a1 + 56);
}

unsigned int *WebCore::RadioInputType::willUpdateCheckedness(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *v5;

  if ((_DWORD)a2)
  {
    v2 = *((_QWORD *)result + 3);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
        *(_DWORD *)(v3 + 24) += 2;
    }
    else
    {
      v3 = 0;
    }
    if (*(_DWORD *)(*(_QWORD *)(v3 + 240) + 12) != 4096)
      goto LABEL_6;
    v4 = *(_QWORD *)(v3 + 120);
    if (!v4 || !*(_QWORD *)(v4 + 8))
    {
      if ((*(_BYTE *)(v3 + 22) & 0x18) == 0)
      {
LABEL_6:
        WebCore::HTMLInputElement::checkedRadioButtonForGroup((WTF::StringImpl *)v3, &v5);
        result = (unsigned int *)v5;
        if (v5)
        {
          WebCore::HTMLInputElement::setChecked((unsigned __int8 *)v5, 0);
          result = (unsigned int *)v5;
          v5 = 0;
          if (result)
          {
            if (result[6] == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
            }
            else
            {
              result[6] -= 2;
            }
          }
        }
        goto LABEL_7;
      }
      result = (unsigned int *)WebCore::TreeScope::radioButtonGroups(*(WebCore::TreeScope **)(v3 + 40));
    }
LABEL_7:
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

void WebCore::RadioInputType::handleClickEvent(WebCore::RadioInputType *this, WebCore::MouseEvent *a2)
{
  *((_DWORD *)a2 + 5) |= 0x80u;
}

uint64_t WebCore::RadioInputType::handleKeydownEvent(WebCore::RadioInputType *this, WebCore::KeyboardEvent *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  int v28;
  __int16 v29;

  v4 = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6);
  if (v4)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    WebCore::Element::setActive(v6, (void *)1, 0);
    return v4 ^ 1u;
  }
  if ((*((_BYTE *)a2 + 20) & 0x80) != 0
    || (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Up", 2) & 1) == 0
    && (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Down", 4) & 1) == 0
    && (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Left", 4) & 1) == 0
    && !MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Right", 5))
  {
    return v4 ^ 1u;
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = 0;
      *(_DWORD *)(v9 + 24) += 2;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 1;
LABEL_13:
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 528);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v12 + 136) + 696) & 0x8000000000) != 0)
        goto LABEL_75;
    }
  }
  if ((MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Down", 4) & 1) != 0)
    v13 = 1;
  else
    v13 = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Right", 5);
  if ((v10 & 1) == 0)
    *(_DWORD *)(v9 + 24) += 2;
  v14 = v9;
  while (1)
  {
    if (v13)
    {
      if ((*(_WORD *)(v14 + 28) & 4) != 0)
      {
        v15 = *(_QWORD *)(v14 + 80);
        if (v15)
          goto LABEL_32;
      }
      v15 = *(_QWORD *)(v14 + 56);
      if (v15)
        goto LABEL_32;
      v16 = v14;
      while (1)
      {
        v16 = *(_QWORD *)(v16 + 32);
        if (!v16)
          break;
        v15 = *(_QWORD *)(v16 + 56);
        if (v15)
          goto LABEL_32;
      }
      v15 = 0;
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
      if (v15)
      {
        if ((*(_WORD *)((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          do
          {
            v26 = *(_QWORD *)(v15 + 88);
            if (!v26)
              break;
            v15 = *(_QWORD *)(v15 + 88);
          }
          while ((*(_WORD *)(v26 + 28) & 4) != 0);
        }
LABEL_32:
        v17 = 0;
        *(_DWORD *)(v15 + 24) += 2;
        goto LABEL_33;
      }
      v15 = *(_QWORD *)(v14 + 32);
      if (v15)
        goto LABEL_32;
    }
    v17 = 1;
LABEL_33:
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v7);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    if (!v15)
      break;
    v14 = v15;
    if ((*(_WORD *)(v15 + 28) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24);
      if (v18 == *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
        break;
      v14 = v15;
      if (v18 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        *(_DWORD *)(v15 + 24) += 2;
        v19 = *(_QWORD *)(v15 + 120);
        if (v19)
          v19 = *(_QWORD *)(v19 + 8);
        v20 = *(_QWORD *)(v9 + 120);
        if (v20)
          v20 = *(_QWORD *)(v20 + 8);
        if (v19 == v20)
        {
          if (*(_DWORD *)(*(_QWORD *)(v15 + 240) + 12) != 4096)
            goto LABEL_55;
          v22 = (_QWORD *)(v15 + 208);
          if (!*(_QWORD *)(v15 + 208))
            v22 = (_QWORD *)MEMORY[0x1E0CBF3B8];
          v23 = *(_QWORD *)(v9 + 208);
          if (!v23)
            v23 = *MEMORY[0x1E0CBF3B8];
          if (*v22 == v23 && WebCore::Element::isFocusable((WebCore::Element *)v15))
          {
            v24 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
            *(_DWORD *)(v24 + 24) += 2;
            v29 = 0;
            v28 = 0;
            WebCore::Document::setFocusedElement((WebCore::Document *)v24, v15, &v28);
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v24, v25);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
            v21 = 1;
            WebCore::simulateClick((WebCore *)v15, (uint64_t)a2, 0, 0, 1);
            *((_DWORD *)a2 + 5) |= 0x80u;
          }
          else
          {
LABEL_55:
            v21 = 0;
          }
        }
        else
        {
          v21 = 3;
        }
        if (*(_DWORD *)(v15 + 24) == 2)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v15, v7);
        }
        else
        {
          *(_DWORD *)(v15 + 24) -= 2;
        }
        v14 = v15;
        if ((v21 | 2) != 2)
          break;
      }
    }
  }
  if ((v17 & 1) == 0)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v7);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
LABEL_75:
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return v4 ^ 1u;
}

void WebCore::RadioInputType::handleKeyupEvent(WebCore::RadioInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;

  if (!MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0020", 6))
    return;
  v4 = *((_QWORD *)this + 3);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_15;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
  {
LABEL_15:
    v6 = 1;
    goto LABEL_5;
  }
  v6 = 0;
  *(_DWORD *)(v5 + 24) += 2;
LABEL_5:
  if ((*(_WORD *)(v5 + 230) & 1) != 0)
    WebCore::Element::setActive(v5, 0, 0);
  else
    WebCore::InputType::dispatchSimulatedClickIfActive(this, a2);
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
}

BOOL WebCore::RadioInputType::isKeyboardFocusable(WebCore::RadioInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Element *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  WebCore::Node *v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Node *v26;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v5 + 112) + 288))(v5 + 112)
    && (*(_BYTE *)(v5 + 160) & 0x20) != 0)
  {
    return 0;
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = *(WebCore::Element **)(v6 + 8);
  else
    v7 = 0;
  if ((WebCore::Element::tabIndexSetExplicitly(v7) & 0xFF00000000) != 0)
  {
    if ((WebCore::Element::isKeyboardFocusable(v7, a2) & 1) != 0)
      goto LABEL_9;
    return 0;
  }
  if (!(*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)v7 + 552))(v7))
    return 0;
  v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 5) + 8) + 528);
  if (!v23)
    return 0;
  v24 = *(_QWORD *)(v23 + 8);
  if (!v24 || !WebCore::EventHandler::tabsToAllFormControls(*(WebCore::EventHandler **)(v24 + 640), a2))
    return 0;
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if (!v9)
  {
    v10 = 0;
    goto LABEL_57;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
LABEL_57:
    v11 = 1;
    goto LABEL_12;
  }
  v11 = 0;
  *(_DWORD *)(v10 + 24) += 2;
LABEL_12:
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
  v13 = *(_QWORD *)(v12 + 528);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0 || (*(_QWORD *)(*(_QWORD *)(v14 + 136) + 696) & 0x8000000000) == 0)
  {
    v15 = *(_QWORD *)(v12 + 1248);
    if (!v15)
      goto LABEL_29;
    v16 = *(_DWORD *)(v15 + 24);
    *(_DWORD *)(v15 + 24) = v16 + 2;
    if ((*(_WORD *)(v15 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
      || *(_DWORD *)(*(_QWORD *)(v15 + 240) + 12) != 4096)
    {
      goto LABEL_29;
    }
    v17 = *(_QWORD *)(v15 + 120);
    if (v17)
      v17 = *(_QWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v10 + 120);
    if (v18)
      v18 = *(_QWORD *)(v18 + 8);
    if (v17 != v18)
      goto LABEL_29;
    v19 = (_QWORD *)(v15 + 208);
    if (!*(_QWORD *)(v15 + 208))
      v19 = (_QWORD *)MEMORY[0x1E0CBF3B8];
    v20 = *(_QWORD *)(v10 + 208);
    if (!v20)
      v20 = *MEMORY[0x1E0CBF3B8];
    if (*v19 == v20)
    {
      v22 = 0;
      if (v16)
      {
LABEL_42:
        *(_DWORD *)(v15 + 24) = v16;
        goto LABEL_44;
      }
    }
    else
    {
LABEL_29:
      if ((*(_WORD *)(v10 + 230) & 1) != 0)
      {
        v22 = 1;
      }
      else
      {
        WebCore::HTMLInputElement::checkedRadioButtonForGroup((WTF::StringImpl *)v10, &v26);
        v21 = v26;
        v22 = v26 == 0;
        v26 = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 6) == 2)
          {
            if ((*((_WORD *)v21 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v21, v8);
          }
          else
          {
            *((_DWORD *)v21 + 6) -= 2;
          }
        }
      }
      if (!v15)
        goto LABEL_44;
      v16 = *(_DWORD *)(v15 + 24) - 2;
      if (*(_DWORD *)(v15 + 24) != 2)
        goto LABEL_42;
    }
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v8);
    goto LABEL_44;
  }
  v22 = 1;
LABEL_44:
  if ((v11 & 1) == 0)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  return v22;
}

uint64_t WebCore::RadioInputType::shouldSendChangeEventAfterCheckedChanged(WebCore::RadioInputType *this)
{
  return *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 230) & 1;
}

unsigned __int8 *WebCore::RadioInputType::willDispatchClick(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  int v9;
  unsigned __int8 *result;
  void *v11;
  void *v12;
  WebCore::Node *v13;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = 0;
      *(_DWORD *)(v4 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_4:
  *(_BYTE *)(a2 + 1) = *(_BYTE *)(v4 + 230) & 1;
  WebCore::HTMLInputElement::checkedRadioButtonForGroup((WTF::StringImpl *)v4, &v13);
  v7 = v13;
  v13 = 0;
  v8 = *(WebCore::Node **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7;
  if (!v8)
    goto LABEL_7;
  v9 = *((_DWORD *)v8 + 6) - 2;
  if (*((_DWORD *)v8 + 6) != 2)
    goto LABEL_6;
  if ((*((_WORD *)v8 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v8, v6);
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      v9 = *((_DWORD *)v8 + 6) - 2;
      if (*((_DWORD *)v8 + 6) != 2)
      {
LABEL_6:
        *((_DWORD *)v8 + 6) = v9;
        goto LABEL_7;
      }
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v12);
    }
  }
LABEL_7:
  result = WebCore::HTMLInputElement::setChecked((unsigned __int8 *)v4, 1);
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v4, v11);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::RadioInputType::didDispatchClick(unsigned int *result, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;

  v4 = *((_QWORD *)result + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = 0;
      *(_DWORD *)(v5 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 1;
LABEL_4:
  if ((a2[20] & 0xC0) != 0)
  {
    v7 = *(_QWORD *)(a3 + 8);
    if (!v7 || *(_DWORD *)(*(_QWORD *)(v7 + 240) + 12) != 4096)
      goto LABEL_17;
    v8 = *(_QWORD *)(v7 + 120);
    if (v8)
      v8 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v5 + 120);
    if (v9)
      v9 = *(_QWORD *)(v9 + 8);
    if (v8 != v9)
      goto LABEL_17;
    v10 = (_QWORD *)(v7 + 208);
    if (!*(_QWORD *)(v7 + 208))
      v10 = (_QWORD *)MEMORY[0x1E0CBF3B8];
    v11 = *(_QWORD *)(v5 + 208);
    if (!v11)
      v11 = *MEMORY[0x1E0CBF3B8];
    if (*v10 == v11)
    {
      v12 = 1;
    }
    else
    {
LABEL_17:
      v7 = v5;
      v12 = 0;
    }
    result = (unsigned int *)WebCore::HTMLInputElement::setChecked((unsigned __int8 *)v7, v12);
  }
  else if (*(_BYTE *)(a3 + 1) != (*(_BYTE *)(v5 + 230) & 1))
  {
    result = WebCore::BaseCheckableInputType::fireInputAndChangeEvents(result);
  }
  *((_DWORD *)a2 + 5) |= 0x80u;
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RadioInputType::matchesIndeterminatePseudoClass(WebCore::RadioInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::RadioButtonGroups *v3;
  void *v4;
  int hasCheckedButton;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  v3 = (WebCore::RadioButtonGroups *)WebCore::HTMLInputElement::radioButtonGroups((WebCore::HTMLInputElement *)v2);
  if (v3)
  {
    *(_DWORD *)(v2 + 24) += 2;
    hasCheckedButton = WebCore::RadioButtonGroups::hasCheckedButton(v3, (const WebCore::HTMLInputElement *)v2);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  else
  {
    hasCheckedButton = *(_WORD *)(v2 + 230) & 1;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return hasCheckedButton ^ 1u;
}

void WebCore::RadioNodeList::~RadioNodeList(WebCore::RadioNodeList *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WebCore::NodeListsNodeData **v5;
  WebCore::NodeListsNodeData *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  WebCore::NodeListsNodeData *v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl *v21;
  unsigned __int8 *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned __int8 v26[8];
  WTF::StringImpl *v27;

  v3 = (uint64_t *)((char *)this + 24);
  v4 = *((_QWORD *)this + 3);
  v5 = (WebCore::NodeListsNodeData **)(*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL);
  if (v5)
    v6 = *v5;
  else
    v6 = 0;
  v7 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 2;
  v8 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    LODWORD(v8) = *(_QWORD *)(v8 + 8) != 0;
  v9 = *((_QWORD *)v6 + 1);
  if (v9)
    LODWORD(v9) = *(_QWORD *)(v9 + 8) != 0;
  v10 = v9 + v8;
  v12 = (uint64_t *)((char *)v6 + 16);
  v11 = *((_QWORD *)v6 + 2);
  if (v11)
    LODWORD(v11) = *(_DWORD *)(v11 - 12);
  v13 = v10 + v11;
  v14 = *((_QWORD *)v6 + 3);
  if (v14)
    LODWORD(v14) = *(_DWORD *)(v14 - 12);
  v15 = v13 + v14;
  v16 = *((_QWORD *)v6 + 4);
  if (v16)
    LODWORD(v16) = *(_DWORD *)(v16 - 12);
  v17 = v15 + v16;
  if (v15 + (_DWORD)v16 == 1)
  {
    v18 = *v5;
    *v5 = 0;
    if (v18)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v18, a2);
      WTF::fastFree(v19, v20);
      v7 = *(_DWORD *)(v4 + 24) - 2;
    }
  }
  if (v7)
  {
    *(_DWORD *)(v4 + 24) = v7;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  if (v17 != 1)
  {
    v26[0] = 1;
    v21 = (WTF::StringImpl *)*((_QWORD *)this + 11);
    if (v21)
      *(_DWORD *)v21 += 2;
    v27 = v21;
    v22 = WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>,std::pair<unsigned char,WTF::AtomString>>(v12, v26);
    WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::remove(v12, (WTF::StringImpl *)v22);
    v23 = v27;
    v27 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, a2);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  *(_QWORD *)this = off_1E33D85F0;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
    WebCore::Document::unregisterNodeListForInvalidation(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  *(_QWORD *)this = off_1E33A53E8;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v3);
  v25 = *((_QWORD *)this + 1);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RadioNodeList::~RadioNodeList(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::RadioNodeList::value@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v2 = this;
  v4 = (uint64_t)(this + 10);
  if ((this[20] & 1) != 0)
  {
    v7 = this[15];
    if (!v7)
    {
LABEL_43:
      *a2 = 0;
      return this;
    }
  }
  else
  {
    if ((this[20] & 2) == 0 && !*((_QWORD *)this + 6))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
      *(_DWORD *)(v5 + 24) += 2;
      WebCore::Document::registerNodeListForInvalidation((WebCore::Document *)v5, (WebCore::LiveNodeList *)this);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    this = (unsigned int *)WebCore::CollectionIndexCache<WebCore::RadioNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(v4, (WebCore::RadioNodeList *)v2);
    v7 = this;
    v2[15] = this;
    *((_BYTE *)v2 + 80) |= 1u;
    if (!(_DWORD)this)
      goto LABEL_43;
  }
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  while (1)
  {
    this = (unsigned int *)WebCore::CollectionIndexCache<WebCore::RadioNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt(v4, (WebCore::RadioNodeList *)v2, v8);
    if ((this[7] & 0x10) == 0)
      goto LABEL_29;
    v11 = this;
    if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      goto LABEL_29;
    this = (unsigned int *)*((_QWORD *)this + 30);
    if (this[3] != 4096)
      goto LABEL_29;
    v12 = (WTF::StringImpl *)*((_QWORD *)v11 + 27);
    if (v12)
    {
      *(_DWORD *)v12 += 2;
      goto LABEL_34;
    }
    v13 = *((_QWORD *)v11 + 13);
    if (v13)
    {
      v14 = *(unsigned int *)(v13 + 4);
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD *)(v13 + 40);
        v16 = *(unsigned int *)(v13 + 52);
        if (v16)
        {
LABEL_19:
          v17 = (_QWORD *)(v15 + 8);
          do
          {
            v18 = *(v17 - 1);
            if (v18 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              goto LABEL_27;
            }
            v17 += 2;
          }
          while (--v16);
        }
      }
      else
      {
        v15 = v13 + 32;
        v16 = v14 >> 5;
        if (v14 >> 5)
          goto LABEL_19;
      }
    }
    v17 = v9;
LABEL_27:
    if (*v17)
    {
      this = (unsigned int *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 296))(&v28);
      v12 = v28;
      if (v28)
        goto LABEL_34;
      v28 = 0;
      this = (unsigned int *)*((_QWORD *)v11 + 30);
    }
    this = (unsigned int *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 64))(&v28);
    v12 = v28;
    if (!v28)
      goto LABEL_29;
LABEL_34:
    v28 = 0;
    v19 = *((_DWORD *)v12 + 1);
    if (*(_DWORD *)v12 == 2)
      break;
    *(_DWORD *)v12 -= 2;
    if (v19)
      goto LABEL_36;
LABEL_29:
    if (++v8 == v7)
      goto LABEL_43;
  }
  this = (unsigned int *)WTF::StringImpl::destroy(v12, v10);
  if (!v19)
    goto LABEL_29;
LABEL_36:
  v20 = v11[6];
  v11[6] = v20 + 2;
  if ((*((_WORD *)v11 + 115) & 1) == 0)
  {
    if (v20)
    {
      v11[6] = v20;
    }
    else if ((*((_WORD *)v11 + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
    }
    goto LABEL_29;
  }
  this = (unsigned int *)*((_QWORD *)v11 + 30);
  if (this[3] == 64)
  {
    this = (unsigned int *)WebCore::FileInputType::firstElementPathForInputValue((uint64_t)this, a2);
  }
  else
  {
    v21 = (_DWORD *)*((_QWORD *)v11 + 27);
    if (v21)
    {
      *v21 += 2;
      *a2 = v21;
    }
    else
    {
      v22 = *((_QWORD *)v11 + 13);
      if (v22
        && ((v23 = *(_DWORD *)(v22 + 4), (v23 & 1) != 0)
          ? (v24 = *(_QWORD *)(v22 + 40), LODWORD(v25) = *(_DWORD *)(v22 + 52))
          : (v24 = v22 + 32, LODWORD(v25) = v23 >> 5),
            (_DWORD)v25))
      {
        v25 = v25;
        v26 = (_QWORD *)(v24 + 8);
        while (1)
        {
          v27 = *(v26 - 1);
          if (v27 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v26 += 2;
          if (!--v25)
          {
            v26 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v26 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (*v26)
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 296))(this);
        if (!*a2)
        {
          *a2 = 0;
          this = (unsigned int *)*((_QWORD *)v11 + 30);
          goto LABEL_63;
        }
      }
      else
      {
LABEL_63:
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 64))(this);
      }
    }
  }
  if (v11[6] == 2)
  {
    if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
  }
  else
  {
    v11[6] -= 2;
  }
  return this;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::RadioNodeList>::length(WebCore::LiveNodeList *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t result;

  if ((*((_BYTE *)a1 + 80) & 1) != 0)
    return *((unsigned int *)a1 + 15);
  if ((*((_BYTE *)a1 + 80) & 2) == 0 && !*((_QWORD *)a1 + 6))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8);
    *(_DWORD *)(v2 + 24) += 2;
    WebCore::Document::registerNodeListForInvalidation((WebCore::Document *)v2, a1);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  result = WebCore::CollectionIndexCache<WebCore::RadioNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache((uint64_t)a1 + 40, a1);
  *((_DWORD *)a1 + 15) = result;
  *((_BYTE *)a1 + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::RadioNodeList>::item(WebCore::RadioNodeList *a1, unsigned int a2)
{
  return WebCore::CollectionIndexCache<WebCore::RadioNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt((uint64_t)a1 + 40, a1, a2);
}

unsigned int *WebCore::RadioNodeList::setValue(unsigned int *this, const WTF::StringImpl **a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  void *v31;
  WTF::StringImpl *v32;

  v3 = this;
  v4 = (uint64_t)(this + 10);
  if ((this[20] & 1) != 0)
  {
    v7 = this[15];
    if (!v7)
      return this;
    goto LABEL_9;
  }
  if ((this[20] & 2) == 0 && !*((_QWORD *)this + 6))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    *(_DWORD *)(v5 + 24) += 2;
    WebCore::Document::registerNodeListForInvalidation((WebCore::Document *)v5, (WebCore::LiveNodeList *)this);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  this = (unsigned int *)WebCore::CollectionIndexCache<WebCore::RadioNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(v4, (WebCore::RadioNodeList *)v3);
  v7 = this;
  v3[15] = this;
  *((_BYTE *)v3 + 80) |= 1u;
  if ((_DWORD)this)
  {
LABEL_9:
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      this = (unsigned int *)WebCore::CollectionIndexCache<WebCore::RadioNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt(v4, (WebCore::RadioNodeList *)v3, v8);
      if ((this[7] & 0x10) == 0)
        goto LABEL_29;
      v12 = (uint64_t)this;
      if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        goto LABEL_29;
      this = (unsigned int *)*((_QWORD *)this + 30);
      if (this[3] != 4096)
        goto LABEL_29;
      v13 = *(WTF::StringImpl **)(v12 + 216);
      if (v13)
      {
        *(_DWORD *)v13 += 2;
        goto LABEL_34;
      }
      v14 = *(_QWORD *)(v12 + 104);
      if (!v14)
        break;
      v15 = *(unsigned int *)(v14 + 4);
      if ((v15 & 1) != 0)
      {
        v16 = *(_QWORD *)(v14 + 40);
        v17 = *(unsigned int *)(v14 + 52);
        if (!v17)
          break;
      }
      else
      {
        v16 = v14 + 32;
        v17 = v15 >> 5;
        if (!(v15 >> 5))
          break;
      }
      v18 = (_QWORD *)(v16 + 8);
      while (1)
      {
        v19 = *(v18 - 1);
        if (v19 == WebCore::HTMLNames::valueAttr
          || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
          && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
        {
          break;
        }
        v18 += 2;
        if (!--v17)
          goto LABEL_26;
      }
LABEL_27:
      if (!*v18)
        goto LABEL_28;
      this = (unsigned int *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 296))(&v32);
      v13 = v32;
      if (!v32)
      {
        v32 = 0;
        this = *(unsigned int **)(v12 + 240);
LABEL_28:
        this = (unsigned int *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 64))(&v32);
        v13 = v32;
        if (!v32)
          goto LABEL_29;
      }
LABEL_34:
      v20 = *((_DWORD *)v13 + 1);
      v32 = 0;
      if (*(_DWORD *)v13 == 2)
      {
        this = (unsigned int *)WTF::StringImpl::destroy(v13, v10);
        if (v20)
        {
LABEL_36:
          *(_DWORD *)(v12 + 24) += 2;
          v21 = *(_DWORD **)(v12 + 240);
          if (v21[3] == 64)
          {
            WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v21, &v32);
          }
          else
          {
            v22 = *(WTF::StringImpl **)(v12 + 216);
            if (v22)
            {
              *(_DWORD *)v22 += 2;
              v32 = v22;
            }
            else
            {
              v23 = *(_QWORD *)(v12 + 104);
              if (!v23)
                goto LABEL_50;
              v24 = *(unsigned int *)(v23 + 4);
              if ((v24 & 1) != 0)
              {
                v25 = *(_QWORD *)(v23 + 40);
                v26 = *(unsigned int *)(v23 + 52);
                if (!v26)
                  goto LABEL_50;
              }
              else
              {
                v25 = v23 + 32;
                v26 = v24 >> 5;
                if (!(v24 >> 5))
                {
LABEL_50:
                  v27 = v9;
                  goto LABEL_51;
                }
              }
              v27 = (_QWORD *)(v25 + 8);
              while (1)
              {
                v28 = *(v27 - 1);
                if (v28 == WebCore::HTMLNames::valueAttr
                  || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
                  && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
                {
                  break;
                }
                v27 += 2;
                if (!--v26)
                  goto LABEL_50;
              }
LABEL_51:
              if (*v27)
              {
                (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v21 + 296))(&v32);
                if (!v32)
                {
                  v32 = 0;
                  v21 = *(_DWORD **)(v12 + 240);
                  goto LABEL_52;
                }
              }
              else
              {
LABEL_52:
                (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v21 + 64))(&v32);
              }
            }
          }
          v30 = WTF::equal(v32, *a2, v11);
          this = (unsigned int *)v32;
          v32 = 0;
          if (this)
          {
            if (*this != 2)
            {
              *this -= 2;
              goto LABEL_61;
            }
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v29);
            if (v30)
            {
LABEL_69:
              this = (unsigned int *)WebCore::HTMLInputElement::setChecked((unsigned __int8 *)v12, 1);
              if (*(_DWORD *)(v12 + 24) == 2)
              {
                if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                  return WebCore::Node::removedLastRef((WebCore::Node *)v12, v31);
              }
              else
              {
                *(_DWORD *)(v12 + 24) -= 2;
              }
              return this;
            }
          }
          else
          {
LABEL_61:
            if (v30)
              goto LABEL_69;
          }
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)v12, v29);
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v13 -= 2;
        if (v20)
          goto LABEL_36;
      }
LABEL_29:
      if (++v8 == v7)
        return this;
    }
LABEL_26:
    v18 = v9;
    goto LABEL_27;
  }
  return this;
}

uint64_t WebCore::RadioNodeList::elementMatches(WebCore::RadioNodeList *this, WebCore::Element *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 832))(a2);
  if (!(_DWORD)result)
    return result;
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
    && *(_DWORD *)(*((_QWORD *)a2 + 30) + 12) == 256)
  {
    return 0;
  }
  v5 = *((_QWORD *)this + 3);
  if ((*(_WORD *)(v5 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
  {
    goto LABEL_7;
  }
  v11 = *(_QWORD *)((*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 456))(a2) + 8);
  if (v11)
  {
    v21 = *(_QWORD *)(v11 + 8);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 24);
      *(_DWORD *)(v21 + 24) = v22 + 2;
      v23 = *((_QWORD *)this + 3);
      if (v22)
      {
        *(_DWORD *)(v21 + 24) = v22;
        if (v21 == v23)
          goto LABEL_7;
      }
      else
      {
        v26 = *((_QWORD *)this + 3);
        v25 = v21;
        if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v21, v10);
        if (v25 == v26)
          goto LABEL_7;
      }
      return 0;
    }
  }
  if (*((_QWORD *)this + 3))
    return 0;
LABEL_7:
  v6 = *((_QWORD *)a2 + 13);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 24))
    {
      v8 = *(_DWORD *)(v6 + 4);
      if ((v8 & 1) != 0)
      {
        v12 = *(uint64_t **)(v6 + 40);
        v13 = *(_DWORD *)(v6 + 52);
      }
      else
      {
        v12 = (uint64_t *)(v6 + 32);
        v13 = v8 >> 5;
      }
      if (v13)
      {
        v14 = *v12;
        if (*v12 == WebCore::HTMLNames::idAttr)
        {
          v15 = 0;
        }
        else
        {
          v15 = 0;
          v16 = v12 + 2;
          do
          {
            if (*(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
              && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
            {
              break;
            }
            ++v15;
            v17 = *v16;
            v16 += 2;
            v14 = v17;
          }
          while (v17 != WebCore::HTMLNames::idAttr);
        }
        v18 = v12[2 * v15 + 1];
      }
      else
      {
        v18 = MEMORY[8];
      }
      v7 = *((_QWORD *)this + 11);
      if (v18 != v7)
      {
LABEL_11:
        if ((v8 & 2) != 0)
        {
          if ((v8 & 1) != 0)
          {
            v19 = *(uint64_t **)(v6 + 40);
            LODWORD(v20) = *(_DWORD *)(v6 + 52);
          }
          else
          {
            v19 = (uint64_t *)(v6 + 32);
            LODWORD(v20) = v8 >> 5;
          }
          if ((_DWORD)v20)
          {
            v20 = v20;
            while (1)
            {
              v24 = *v19;
              if (*v19 == WebCore::HTMLNames::nameAttr
                || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
              {
                break;
              }
              v19 += 2;
              if (!--v20)
                goto LABEL_51;
            }
          }
          else
          {
LABEL_51:
            v19 = 0;
          }
          v9 = v19 + 1;
        }
        else
        {
          v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        }
        return *v9 == v7;
      }
    }
    else
    {
      v7 = *((_QWORD *)this + 11);
      if (*MEMORY[0x1E0CBF2F8] != v7)
      {
        v8 = *(_DWORD *)(v6 + 4);
        goto LABEL_11;
      }
    }
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    v7 = *((_QWORD *)this + 11);
    if (*MEMORY[0x1E0CBF2F8] != v7)
      return *v9 == v7;
  }
  return 1;
}

WebCore::RangeInputType *WebCore::RangeInputType::RangeInputType(WebCore::RangeInputType *this, WebCore::HTMLInputElement *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E33D5AC0;
  *((_QWORD *)this + 1) = 0x200000000001;
  *((_BYTE *)this + 16) = 0;
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = a2;
    *(_BYTE *)(v7 + 32) = 0;
    v9 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v9 & 0xFFFF000000000000 | v7;
    v10 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v9 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v10);
        v13 = *(unsigned int *)(v10 + 28);
        if ((_DWORD)v13)
        {
          v16 = v10;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
          v10 = v16;
        }
        v14 = *(WTF **)(v10 + 16);
        if (v14)
        {
          *(_QWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 24) = 0;
          v15 = v10;
          WTF::fastFree(v14, v8);
          v10 = v15;
        }
        WTF::fastFree((WTF *)v10, v8);
      }
    }
  }
  v4 = (unsigned int *)(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 3) = v4;
  *(_QWORD *)this = off_1E33D8040;
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

double WebCore::RangeInputType::valueAsDouble(WebCore::RangeInputType *this)
{
  uint64_t v1;
  _QWORD *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  double v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD **)(v1 + 8);
  else
    v2 = 0;
  v3 = (_DWORD *)v2[30];
  if (v3[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v3, &v17);
    goto LABEL_19;
  }
  v4 = (WTF::StringImpl *)v2[27];
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v17 = v4;
    goto LABEL_24;
  }
  v5 = v2[13];
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_8:
        v8 = v8;
        v9 = (_QWORD *)(v7 + 8);
        while (1)
        {
          v10 = *(v9 - 1);
          if (v10 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_17;
          }
          v9 += 2;
          if (!--v8)
          {
            v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_8;
    }
  }
  v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
  if (*v9)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 296))(&v17);
    v4 = v17;
    if (v17)
      goto LABEL_24;
    v17 = 0;
    v3 = (_DWORD *)v2[30];
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 64))(&v17);
LABEL_19:
  v4 = v17;
  if (!v17)
  {
    v11 = 0;
    v12 = 0x100000000;
    goto LABEL_25;
  }
LABEL_24:
  v11 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
  v12 = *((unsigned int *)v4 + 1) | ((unint64_t)((*((_DWORD *)v4 + 4) >> 2) & 1) << 32);
LABEL_25:
  v14 = WebCore::parseToDoubleForNumberType(v11, v12, NAN);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v14;
}

WTF::StringImpl *WebCore::RangeInputType::setValueAsDecimal@<X0>(WebCore::Decimal *this@<X1>, uint64_t a2@<X0>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  int v12;
  const char *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = *((_DWORD *)this + 3);
  if ((v8 & 0xFFFFFFFD) != 0)
  {
    if (v8 == 3)
    {
      v12 = *((_DWORD *)this + 4);
      if (v12 == 1)
        v13 = "-0";
      else
        v13 = "0";
      if (v12 == 1)
        v14 = 3;
      else
        v14 = 2;
      WTF::String::String(&v15, (uint64_t)v13, v14);
    }
    else
    {
      WebCore::Decimal::toString(this, &v15);
    }
  }
  else
  {
    v15 = 0;
  }
  WebCore::HTMLInputElement::setValue(v7, (uint64_t)&v15, a3, 0, (uint64_t)v16);
  if (v18)
  {
    v10 = v17;
    v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return result;
}

WTF::StringImpl *WebCore::RangeInputType::serialize@<X0>(const WebCore::Decimal *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  int v3;
  WTF::StringImpl *result;
  int v5;
  const char *v6;
  uint64_t v7;

  v3 = *((_DWORD *)a1 + 3);
  if ((v3 & 0xFFFFFFFD) != 0)
  {
    if (v3 == 3)
    {
      v5 = *((_DWORD *)a1 + 4);
      if (v5 == 1)
        v6 = "-0";
      else
        v6 = "0";
      if (v5 == 1)
        v7 = 3;
      else
        v7 = 2;
      return (WTF::StringImpl *)WTF::String::String(a2, (uint64_t)v6, v7);
    }
    else
    {
      return WebCore::Decimal::toString(a1, a2);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

BOOL WebCore::RangeInputType::typeMismatchFor(WebCore::RangeInputType *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (v4 = *(unsigned int *)(v2 + 4), (_DWORD)v4))
    return (COERCE_UNSIGNED_INT64(WebCore::parseToDoubleForNumberType(*(unsigned __int8 **)(v2 + 8), v4 | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32), NAN)) & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL;
  else
    return 0;
}

uint64_t WebCore::RangeInputType::supportsRequired(WebCore::RangeInputType *this)
{
  return 0;
}

void WebCore::RangeInputType::createStepRange(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE v40[24];
  __int128 v41;
  uint64_t v42;
  _BYTE v43[24];

  *(_QWORD *)&v43[12] = 3;
  *(_QWORD *)v43 = 0;
  *(_WORD *)&v43[8] = 0;
  WebCore::InputType::findStepBase(a1, (uint64_t)v43, (uint64_t)&v41);
  v6 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v6
    && ((v7 = *(_DWORD *)(v6 + 4), (v7 & 1) != 0)
      ? (v8 = *(_QWORD *)(v6 + 40), LODWORD(v9) = *(_DWORD *)(v6 + 52))
      : (v8 = v6 + 32, LODWORD(v9) = v7 >> 5),
        (_DWORD)v9))
  {
    v9 = v9;
    v10 = (uint64_t *)(v8 + 8);
    while (1)
    {
      v11 = *(v10 - 1);
      if (v11 == WebCore::HTMLNames::minAttr
        || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
        && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
      {
        break;
      }
      v10 += 2;
      if (!--v9)
      {
        v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  *(_QWORD *)&v43[12] = 3;
  *(_QWORD *)v43 = 0;
  *(_WORD *)&v43[8] = 0;
  v12 = *v10;
  if (v12)
  {
    v13 = *(unsigned __int8 **)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  WebCore::parseToDecimalForNumberType(v13, v14, (__int128 *)v43, (uint64_t)v40);
  v15 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v15
    && ((v16 = *(_DWORD *)(v15 + 4), (v16 & 1) != 0)
      ? (v17 = *(_QWORD *)(v15 + 40), LODWORD(v18) = *(_DWORD *)(v15 + 52))
      : (v17 = v15 + 32, LODWORD(v18) = v16 >> 5),
        (_DWORD)v18))
  {
    v18 = v18;
    v19 = (uint64_t *)(v17 + 8);
    while (1)
    {
      v20 = *(v19 - 1);
      if (v20 == WebCore::HTMLNames::maxAttr
        || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
        && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
      {
        break;
      }
      v19 += 2;
      if (!--v18)
      {
        v19 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v19 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v38 = 1;
  v36 = 100;
  v37 = 0;
  v21 = *v19;
  if (v21)
  {
    v22 = *(unsigned __int8 **)(v21 + 8);
    v23 = *(unsigned int *)(v21 + 4) | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v22 = 0;
    v23 = 0x100000000;
  }
  WebCore::parseToDecimalForNumberType(v22, v23, (__int128 *)&v36, (uint64_t)v39);
  if (*(_QWORD *)v39 == *(_QWORD *)v40
    && *(unsigned __int16 *)&v39[8] == *(unsigned __int16 *)&v40[8]
    && *(_QWORD *)&v39[12] == *(_QWORD *)&v40[12])
  {
    goto LABEL_38;
  }
  WebCore::Decimal::operator-((__int128 *)v39, (__int128 *)v40, (uint64_t)v43);
  if ((*(_DWORD *)&v43[12] - 1) >= 2)
  {
    if (*(_DWORD *)&v43[12] == 3)
      goto LABEL_38;
    if (*(_DWORD *)&v43[12])
      goto LABEL_30;
    v24 = *(_DWORD *)&v43[16] == 1;
LABEL_29:
    if (v24 == 1)
      goto LABEL_30;
LABEL_38:
    v25 = v39;
    goto LABEL_39;
  }
  if (*(_DWORD *)&v43[12] != 2)
  {
    v24 = *(_DWORD *)&v43[16];
    goto LABEL_29;
  }
LABEL_30:
  v25 = v40;
LABEL_39:
  *(_OWORD *)v43 = *(_OWORD *)v25;
  *(_QWORD *)&v43[16] = *((_QWORD *)v25 + 2);
  v26 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v26
    && ((v27 = *(_DWORD *)(v26 + 4), (v27 & 1) != 0)
      ? (v28 = *(_QWORD *)(v26 + 40), LODWORD(v29) = *(_DWORD *)(v26 + 52))
      : (v28 = v26 + 32, LODWORD(v29) = v27 >> 5),
        (_DWORD)v29))
  {
    v29 = v29;
    v30 = (uint64_t *)(v28 + 8);
    while (1)
    {
      v31 = *(v30 - 1);
      if (v31 == WebCore::HTMLNames::stepAttr
        || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
        && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
      {
        break;
      }
      v30 += 2;
      if (!--v29)
      {
        v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v30 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v32 = *v30;
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 8);
    v34 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v33 = 0;
    v34 = 0x100000000;
  }
  WebCore::StepRange::parseStep(a2, (int *)&WebCore::rangeStepDescription, v33, v34, (uint64_t)v39);
  *(_OWORD *)a3 = *(_OWORD *)v43;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v43[16];
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v40;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)&v40[16];
  v35 = *(_DWORD *)&v39[12] & 0xFFFFFFFD;
  if ((*(_DWORD *)&v39[12] & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v39;
    *(_QWORD *)(a3 + 64) = *(_QWORD *)&v39[16];
  }
  else
  {
    *(_QWORD *)(a3 + 60) = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *(_WORD *)(a3 + 56) = 0;
  }
  if ((HIDWORD(v41) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 72) = v41;
    *(_QWORD *)(a3 + 88) = v42;
  }
  else
  {
    *(_QWORD *)(a3 + 84) = 1;
    *(_QWORD *)(a3 + 72) = 1;
    *(_WORD *)(a3 + 80) = 0;
  }
  *(_OWORD *)(a3 + 96) = WebCore::rangeStepDescription;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 113) = v35 != 0;
  *(_BYTE *)(a3 + 114) = 0;
}

double WebCore::RangeInputType::parseToNumber@<D0>(const WTF::String *a1@<X1>, const WebCore::Decimal *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned __int8 **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  return WebCore::parseToDecimalForNumberType(v5, v6, (__int128 *)a2, a3);
}

uint64_t *WebCore::RangeInputType::handleMouseDownEvent(uint64_t *this, WebCore::MouseEvent *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int *v19;

  if (*((_BYTE *)this + 16))
  {
    v2 = *(_QWORD *)(this[3] + 8);
    if ((*(_BYTE *)(v2 + 160) & 0x18) == 0)
    {
      v4 = *((_QWORD *)a2 + 6);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 16);
        if ((v5 & 0x2000000000000) != 0)
        {
          *(_DWORD *)(v4 + 24) += 2;
          if (v4 == v2)
          {
LABEL_24:
            v13 = *(unsigned int **)(WebCore::RangeInputType::sliderTrackElement((WebCore::RangeInputType *)this, a2)
                                   + 80);
            v14 = v13[6];
            v13[6] = v14 + 2;
            v18 = v13;
            if ((unsigned int *)v4 != v13)
            {
              v13[6] = v14 + 4;
              v19 = v13;
              WebCore::SliderThumbElement::setPositionFromPoint(v13, (WebCore::MouseEvent *)((char *)a2 + 144));
              WebCore::SliderThumbElement::startDragging(v13, v15);
              WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v19);
            }
            this = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v18);
            goto LABEL_27;
          }
          v6 = *(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL;
          if (!v6 || (v7 = *(_QWORD *)(v6 + 88)) == 0)
          {
LABEL_27:
            if (*(_DWORD *)(v4 + 24) == 2)
            {
              if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
            }
            else
            {
              *(_DWORD *)(v4 + 24) -= 2;
            }
            return this;
          }
          v8 = *(_DWORD *)(v7 + 24);
          *(_DWORD *)(v7 + 24) = v8 + 2;
          v9 = *(_WORD *)(v7 + 28);
          if ((v9 & 0xF000) == 0x9000)
          {
            if (**(_QWORD **)(v4 + 40) == v7)
            {
              v16 = (v5 >> 51) & 1;
              if ((*(_WORD *)(v4 + 28) & 0xF000) == 0x9000)
                v11 = 0;
              else
                v11 = v16;
              if (v8)
              {
LABEL_23:
                *(_DWORD *)(v7 + 24) = v8;
                if (v11)
                  goto LABEL_24;
                goto LABEL_27;
              }
LABEL_35:
              v17 = this;
              if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
              {
                if (v11)
                  goto LABEL_24;
              }
              else
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
                this = v17;
                if (v11)
                  goto LABEL_24;
              }
              goto LABEL_27;
            }
          }
          else if ((v9 & 4) != 0
                 && *(_QWORD *)(v7 + 80)
                 && ((v5 >> 51) & 1) == (*(_BYTE *)(v7 + 22) & 8) >> 3)
          {
            v10 = v4;
            do
            {
              v10 = *(_QWORD *)(v10 + 32);
              v11 = v10 != 0;
            }
            while (v10 != v7 && v10 != 0);
LABEL_22:
            if (v8)
              goto LABEL_23;
            goto LABEL_35;
          }
          v11 = 0;
          goto LABEL_22;
        }
      }
    }
  }
  return this;
}

void WebCore::RangeInputType::handleTouchEvent(WebCore::RangeInputType *this, WebCore::TouchEvent *a2)
{
  uint64_t v3;

  if (*((_BYTE *)this + 16))
  {
    v3 = WebCore::RangeInputType::sliderTrackElement(this, a2);
    WebCore::SliderThumbElement::handleTouchEvent(*(WebCore::SliderThumbElement **)(v3 + 80), a2);
  }
}

WebCore::RangeInputType *WebCore::RangeInputType::disabledStateChanged(WebCore::RangeInputType *this, void *a2)
{
  uint64_t v2;
  void *v3;

  if (*((_BYTE *)this + 16))
  {
    v2 = WebCore::RangeInputType::sliderTrackElement(this, a2);
    return (WebCore::RangeInputType *)WebCore::SliderThumbElement::hostDisabledStateChanged(*(WebCore::SliderThumbElement **)(v2 + 80), v3);
  }
  return this;
}

uint64_t WebCore::RangeInputType::handleKeydownEvent(WebCore::RangeInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  BOOL v24;
  __int128 *v25;
  _BOOL4 v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  char v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  _BYTE v55[24];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _BYTE v60[24];
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 v66;
  uint64_t v67;
  __n128 v68;
  _BOOL8 v69;

  v4 = *((_QWORD *)this + 3);
  if (!v4)
  {
    if ((MEMORY[0xA0] & 0x18) != 0)
      return 1;
    v5 = 0;
LABEL_3:
    v6 = *(_DWORD **)(v5 + 240);
    if (v6[3] == 64)
    {
      WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v6, &v68);
      goto LABEL_22;
    }
    v7 = *(_DWORD **)(v5 + 216);
    if (v7)
    {
      *v7 += 2;
      v68.n128_u64[0] = (unint64_t)v7;
      goto LABEL_22;
    }
    v8 = *(_QWORD *)(v5 + 104);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      if ((v9 & 1) != 0)
      {
        v10 = *(_QWORD *)(v8 + 40);
        LODWORD(v11) = *(_DWORD *)(v8 + 52);
        if ((_DWORD)v11)
        {
LABEL_8:
          v11 = v11;
          v12 = (_QWORD *)(v10 + 8);
          while (1)
          {
            v13 = *(v12 - 1);
            if (v13 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              goto LABEL_17;
            }
            v12 += 2;
            if (!--v11)
            {
              v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              goto LABEL_17;
            }
          }
        }
      }
      else
      {
        v10 = v8 + 32;
        LODWORD(v11) = v9 >> 5;
        if ((_DWORD)v11)
          goto LABEL_8;
      }
    }
    v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
    if (!*v12)
    {
LABEL_18:
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v6 + 64))(&v68);
      goto LABEL_22;
    }
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v6 + 296))(&v68);
    if (!v68.n128_u64[0])
    {
      v68.n128_u64[0] = 0;
      v6 = *(_DWORD **)(v5 + 240);
      goto LABEL_18;
    }
LABEL_22:
    *(_QWORD *)v60 = 0;
    *(_WORD *)&v60[8] = 0;
    *(_QWORD *)&v60[12] = 2;
    (*(void (**)(uint64_t *__return_ptr, WebCore::RangeInputType *, __n128 *, _BYTE *))(*(_QWORD *)this + 856))(&v65, this, &v68, v60);
    v15 = (WTF::StringImpl *)v68.n128_u64[0];
    v68.n128_u64[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WebCore::RangeInputType::createStepRange(this, 0, (uint64_t)v60);
    v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 4);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(v16 + 40);
        LODWORD(v19) = *(_DWORD *)(v16 + 52);
        if ((_DWORD)v19)
        {
LABEL_28:
          v19 = v19;
          v20 = (uint64_t *)(v18 + 8);
          while (1)
          {
            v21 = *(v20 - 1);
            if (v21 == WebCore::HTMLNames::stepAttr
              || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
              && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
            {
              break;
            }
            v20 += 2;
            if (!--v19)
            {
              v20 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_37:
          v22 = *v20;
          if (!*v20 || *(_DWORD *)(v22 + 4) != 3)
            goto LABEL_38;
          v36 = *(_QWORD *)(v22 + 8);
          if ((*(_BYTE *)(v22 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v36 & 0xDF) != 0x41 || (*(_BYTE *)(v36 + 1) & 0xDF) != 0x4E)
              goto LABEL_38;
            v37 = *(unsigned __int8 *)(v36 + 2);
          }
          else
          {
            if ((*(_WORD *)v36 & 0xFFDF) != 0x41 || (*(_WORD *)(v36 + 2) & 0xFFDF) != 0x4E)
              goto LABEL_38;
            v37 = *(unsigned __int16 *)(v36 + 4);
          }
          if ((v37 & 0xFFFFFFDF) == 0x59)
          {
            v56 = *(_OWORD *)v60;
            v57 = *(_QWORD *)&v60[16];
            *(_OWORD *)v55 = v61;
            *(_QWORD *)&v55[16] = v62;
            WebCore::Decimal::operator-(&v56, (__int128 *)v55, (uint64_t)&v68);
            v54 = 1;
            v52 = 100;
            v53 = 0;
            WebCore::Decimal::operator/((unint64_t)&v68, (unint64_t)&v52, (uint64_t)&v58);
LABEL_39:
            v50 = *(_OWORD *)v60;
            v51 = *(_QWORD *)&v60[16];
            v48 = v61;
            v49 = v62;
            WebCore::Decimal::operator-(&v50, &v48, (uint64_t)&v52);
            v47 = 1;
            v45 = 10;
            v46 = 0;
            WebCore::Decimal::operator/((unint64_t)&v52, (unint64_t)&v45, (uint64_t)v55);
            WebCore::Decimal::operator-((__int128 *)v55, &v58, (uint64_t)&v68);
            if (v68.n128_u32[3] - 1 >= 2)
            {
              if (!v68.n128_u32[3])
              {
                v23 = v69;
LABEL_42:
                v24 = v23;
                v25 = (__int128 *)v55;
                if (v24)
                  v25 = &v58;
LABEL_44:
                v56 = *v25;
                v57 = *((_QWORD *)v25 + 2);
                if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL)
                                 + 0x2D) & 2) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195CB9320);
                  }
                  v26 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL)
                                                           + 0x58)
                                               + 32)
                                   + 148) & 0x1FC000) == 229376;
                }
                else
                {
                  v26 = 0;
                }
                *(_QWORD *)&v55[12] = 3;
                *(_QWORD *)v55 = 0;
                *(_WORD *)&v55[8] = 0;
                if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Up", 2))
                {
                  v27 = &v58;
LABEL_49:
                  WebCore::Decimal::operator+((__int128 *)&v65, v27, (uint64_t)v55);
LABEL_62:
                  WebCore::StepRange::clampValue((WebCore::StepRange *)v60, (const WebCore::Decimal *)v55, &v68);
                  *(__n128 *)v55 = v68;
                  *(_QWORD *)&v55[16] = v69;
                  if (v68.n128_u64[0] == v65 && *(unsigned __int16 *)&v55[8] == v66 && *(_QWORD *)&v55[12] == v67)
                    goto LABEL_77;
                  WebCore::Decimal::operator-((__int128 *)v55, (__int128 *)&v65, (uint64_t)&v68);
                  if (v68.n128_u32[3] - 1 >= 2)
                  {
                    if (v68.n128_u32[3])
                      goto LABEL_77;
                  }
                  else if (v68.n128_u32[3] == 2)
                  {
                    goto LABEL_77;
                  }
                  {
                    v30 = qword_1EE2F5808 + 1;
                  }
                  else
                  {
                    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
                    unk_1EE2F5800 = 0;
                    qword_1EE2F5808 = 0;
                    v30 = 1;
                  }
                  LODWORD(qword_1EE2F5808) = v30;
                  v31 = (uint64_t)WebCore::RangeInputType::setValueAsDecimal((WebCore::Decimal *)v55, (uint64_t)this, (const WTF::StringImpl *)2, &v42);
                  if (v44)
                  {
                    v31 = (uint64_t)v43;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        v31 = WTF::StringImpl::destroy(v43, v32);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                  }
                  {
                    unk_1EE2F5800 = 0;
                    qword_1EE2F5808 = 0xFFFFFFFFLL;
                    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
                    goto LABEL_77;
                  }
                  LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
                  if (!(_DWORD)qword_1EE2F5808)
                  {
                    v33 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
                    v34 = dword_1EE2F5804;
                    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
                    unk_1EE2F5800 = 0;
                    if ((_DWORD)v34)
                    {
                      v39 = 0;
                      v40 = 16 * v34;
                      v41 = (_DWORD *)((char *)v33 + 16 * v34);
                      do
                      {
                        v31 = WebCore::ScopedEventQueue::dispatchEvent(v31, (WTF *)((char *)v33 + v39));
                        v39 += 16;
                      }
                      while (v40 != v39);
                      WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v33, v41);
                      if (!v33)
                        goto LABEL_77;
                    }
                    else if (!v33)
                    {
                      goto LABEL_77;
                    }
                    WTF::fastFree(v33, v32);
                  }
LABEL_77:
                  *((_DWORD *)a2 + 5) |= 0x80u;
                  return 1;
                }
                if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Down", 4))
                {
                  v28 = &v58;
LABEL_52:
                  WebCore::Decimal::operator-((__int128 *)&v65, v28, (uint64_t)v55);
                  goto LABEL_62;
                }
                if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Left", 4))
                {
                  if (v26)
                  {
LABEL_55:
                    WebCore::Decimal::operator+((__int128 *)&v65, &v58, (uint64_t)&v68);
LABEL_60:
                    *(__n128 *)v55 = v68;
                    v29 = v69;
                    goto LABEL_61;
                  }
                }
                else
                {
                  if (!MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Right", 5))
                  {
                    if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "PageUp", 6))
                    {
                      v27 = &v56;
                      goto LABEL_49;
                    }
                    if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "PageDown", 8))
                    {
                      v28 = &v56;
                      goto LABEL_52;
                    }
                    if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Home", 4))
                    {
                      v38 = (__int128 *)v60;
                      if (!v26)
                        v38 = &v61;
                    }
                    else
                    {
                      if (!MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "End", 3))
                        return 1;
                      v38 = (__int128 *)v60;
                      if (v26)
                        v38 = &v61;
                    }
                    *(_OWORD *)v55 = *v38;
                    v29 = *((_QWORD *)v38 + 2);
LABEL_61:
                    *(_QWORD *)&v55[16] = v29;
                    goto LABEL_62;
                  }
                  if (!v26)
                    goto LABEL_55;
                }
                WebCore::Decimal::operator-((__int128 *)&v65, &v58, (uint64_t)&v68);
                goto LABEL_60;
              }
            }
            else if (v68.n128_u32[3] != 2)
            {
              v23 = v69;
              goto LABEL_42;
            }
            v25 = (__int128 *)v55;
            goto LABEL_44;
          }
LABEL_38:
          v58 = v63;
          v59 = v64;
          goto LABEL_39;
        }
      }
      else
      {
        v18 = v16 + 32;
        LODWORD(v19) = v17 >> 5;
        if ((_DWORD)v19)
          goto LABEL_28;
      }
    }
    v20 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_37;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v5 + 160) & 0x18) == 0)
    goto LABEL_3;
  return 1;
}

uint64_t *WebCore::RangeInputType::createShadowSubtree(WebCore::RangeInputType *this)
{
  uint64_t v1;
  WebCore::HTMLDivElement *v2;
  uint64_t v3;
  WTF::String *v4;
  WTF::StringImpl *v5;
  WTF::String *v6;
  WTF::StringImpl *v7;
  WebCore::UserAgentParts *v8;
  WebCore::Element *v9;
  WTF::StringImpl **v10;
  WebCore::Node *v11;
  WTF::String *v12;
  WTF::StringImpl *v13;
  WebCore::Node *v15;
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  WebCore::UserAgentParts *v19;
  WebCore::Node *v20;
  uint64_t v21;
  WebCore::HTMLDivElement *v22;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v2 = *(WebCore::HTMLDivElement **)(*(_QWORD *)(v1 + 40) + 8);
  *((_DWORD *)v2 + 6) += 2;
  v3 = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  *(_DWORD *)(v3 + 24) += 2;
  v21 = v3;
  v22 = v2;
  WebCore::HTMLDivElement::create(v2, &v20);
  WebCore::SliderContainerElement::create(v2, &v19);
  WebCore::ContainerNode::appendChild(v19, v3, 0, v4, v18);
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v18, v5);
  WebCore::ContainerNode::appendChild(v20, (uint64_t)v19, 0, v6, v17);
  v8 = (WebCore::UserAgentParts *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v17, v7);
  v9 = v20;
  v10 = (WTF::StringImpl **)WebCore::UserAgentParts::webkitSliderRunnableTrack(v8);
  WebCore::Element::setUserAgentPart(v9, v10);
  v11 = v20;
  WebCore::SliderThumbElement::create(v2, (uint64_t *)&v15);
  WebCore::ContainerNode::appendChild(v15, (uint64_t)v11, 0, v12, v16);
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v16, v13);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v15);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v19);
  WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v20);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v21);
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v22);
}

uint64_t WebCore::RangeInputType::sliderTrackElement(WebCore::RangeInputType *this, void *a2)
{
  uint64_t i;
  uint64_t v4;
  _WORD *v5;
  int v6;

  if (!*((_BYTE *)this + 16))
    return 0;
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v4 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v4)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_WORD **)(v4 + 80);
  if (v5)
  {
    while ((v5[14] & 8) == 0 || ((*(uint64_t (**)(_WORD *))(*(_QWORD *)v5 + 936))(v5) & 1) == 0)
    {
      v5 = (_WORD *)*((_QWORD *)v5 + 7);
      if (!v5)
        goto LABEL_10;
    }
    v6 = *((_DWORD *)v5 + 6);
    *((_DWORD *)v5 + 6) = v6 + 2;
    for (i = *((_QWORD *)v5 + 10); i; i = *(_QWORD *)(i + 56))
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0)
        break;
    }
    if (v6)
    {
      *((_DWORD *)v5 + 6) = v6;
    }
    else if ((v5[15] & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
  }
  else
  {
LABEL_10:
    i = 0;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return i;
}

uint64_t WebCore::RangeInputType::sliderThumbElement(WebCore::RangeInputType *this, void *a2)
{
  return *(_QWORD *)(WebCore::RangeInputType::sliderTrackElement(this, a2) + 80);
}

void WebCore::RangeInputType::createInputRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v7 = WebCore::RenderSlider::operator new(408);
  WebCore::RenderSlider::RenderSlider(v7, v6, a2);
  *a3 = v8;
}

uint64_t WebCore::RangeInputType::accessKeyAction(WebCore::RangeInputType *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  char *v7;
  char v8;
  int v9;
  char v10;
  char v11;
  int v12;
  char v13;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    v11 = 1;
    v12 = 0;
    v13 = 0;
    v7 = &v11;
LABEL_9:
    WebCore::Element::focus(0, v7);
    return 0;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
  {
    v8 = 1;
    v9 = 0;
    v10 = 0;
    v7 = &v8;
    goto LABEL_9;
  }
  *(_DWORD *)(v3 + 24) += 2;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  WebCore::Element::focus((unsigned int *)v3, &v8);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return WebCore::simulateClick((WebCore *)v3, 0, a2, 1, 1);
}

void WebCore::RangeInputType::attributeChanged(WebCore::RangeInputType *this, const WebCore::QualifiedName *a2)
{
  int v3;
  uint64_t v4;
  WebCore::HTMLInputElement *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _BYTE v10[24];

  v3 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v3 == 578 || v3 == 585 || v3 == 899)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
    {
      v5 = *(WebCore::HTMLInputElement **)(v4 + 8);
      if (v5)
      {
        if (*((_QWORD *)v5 + 27))
        {
          WebCore::HTMLInputElement::value(v5, &v9);
          WebCore::HTMLInputElement::setValue((uint64_t)v5, (uint64_t)&v9, 0, 0, (uint64_t)v10);
          WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v10, v6);
          v7 = v9;
          v9 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
      }
    }
    if (*((_BYTE *)this + 16))
    {
      v8 = WebCore::RangeInputType::sliderTrackElement(this, a2);
      WebCore::SliderThumbElement::setPositionFromValue(*(WebCore::SliderThumbElement **)(v8 + 80));
    }
  }
}

void WebCore::RangeInputType::setValue(uint64_t a1, WTF::StringImpl *a2, int a3, int a4)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  WebCore::InputType::setValue(a1, a2, a3, a4);
  if (a3)
  {
    if (!a4)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (v9)
        v9 = *(_QWORD *)(v9 + 8);
      v10 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v10 += 2;
      v11 = *(WTF::StringImpl **)(v9 + 200);
      *(_QWORD *)(v9 + 200) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v8);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    if (*(_BYTE *)(a1 + 16))
    {
      v12 = WebCore::RangeInputType::sliderTrackElement((WebCore::RangeInputType *)a1, v8);
      WebCore::SliderThumbElement::setPositionFromValue(*(WebCore::SliderThumbElement **)(v12 + 80));
    }
  }
}

WTF::StringImpl *WebCore::RangeInputType::fallbackValue@<X0>(WebCore::RangeInputType *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  const char *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7[6];
  __n128 v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];

  WebCore::RangeInputType::createStepRange(this, 0, (uint64_t)&v6);
  WebCore::Decimal::operator+(v7, &v6, (uint64_t)v13);
  v12 = 1;
  v10 = 2;
  v11 = 0;
  WebCore::Decimal::operator/((unint64_t)v13, (unint64_t)&v10, (uint64_t)v14);
  WebCore::StepRange::clampValue((WebCore::StepRange *)&v6, (const WebCore::Decimal *)v14, &v8);
  if (v8.n128_u32[3] != 3)
    return WebCore::Decimal::toString((WTF::StringImpl *)&v8, a2);
  if (v9 == 1)
    v4 = "-0";
  else
    v4 = "0";
  if (v9 == 1)
    v5 = 3;
  else
    v5 = 2;
  return (WTF::StringImpl *)WTF::String::String(a2, (uint64_t)v4, v5);
}

WTF::StringImpl *WebCore::RangeInputType::sanitizeValue@<X0>(WebCore::RangeInputType *this@<X0>, const WTF::String *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  const char *v9;
  uint64_t v10;
  __n128 v11;
  __int128 v12;
  __int128 v13[6];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  _BYTE v19[24];

  WebCore::RangeInputType::createStepRange(this, 0, (uint64_t)&v12);
  WebCore::Decimal::operator+(v13, &v12, (uint64_t)&v17);
  v16 = 1;
  v14 = 2;
  v15 = 0;
  WebCore::Decimal::operator/((unint64_t)&v17, (unint64_t)&v14, (uint64_t)v19);
  WebCore::StepRange::clampValue((WebCore::StepRange *)&v12, (const WebCore::Decimal *)v19, &v11);
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(unsigned __int8 **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::parseToDecimalForNumberType(v6, v7, (__int128 *)&v11, (uint64_t)v19);
  WebCore::StepRange::clampValue((WebCore::StepRange *)&v12, (const WebCore::Decimal *)v19, &v17);
  if (v17.n128_u32[3] != 3)
    return WebCore::Decimal::toString((WTF::StringImpl *)&v17, a3);
  if (v18 == 1)
    v9 = "-0";
  else
    v9 = "0";
  if (v18 == 1)
    v10 = 3;
  else
    v10 = 2;
  return (WTF::StringImpl *)WTF::String::String(a3, (uint64_t)v9, v10);
}

uint64_t WebCore::RangeInputType::shouldRespectListAttribute(WebCore::RangeInputType *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 680) + 704) >> 46) & 1;
  else
    return 0;
}

void WebCore::RangeInputType::dataListMayHaveChanged(WebCore::RangeInputType *this, void *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::RenderElement *v7;
  uint64_t v8;
  int v9;

  *((_BYTE *)this + 32) = 1;
  v2 = WebCore::RangeInputType::sliderTrackElement(this, a2);
  if (v2)
  {
    v4 = v2;
    *(_DWORD *)(v2 + 24) += 2;
    v5 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_19;
      v6 = *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x14);
      if ((v6 & 8) != 0)
        goto LABEL_11;
      *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) = v6 | 8;
      v7 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v5, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v5, v7);
      if ((*(_BYTE *)(v5 + 21) & 0x80) == 0)
        goto LABEL_11;
      if ((*(_BYTE *)(v5 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CB9BE0);
      }
      v8 = *(_QWORD *)(v5 + 144);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v9;
      }
      else
      {
        v9 = MEMORY[8];
      }
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v9)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x195CB9BC0);
      }
      *(_DWORD *)(v8 + 8) = v9 - 1;
    }
LABEL_11:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
}

void WebCore::RangeInputType::findClosestTickMarkValue(WebCore::RangeInputType *this@<X0>, const WebCore::Decimal *a2@<X1>, uint64_t a3@<X8>)
{
  WTF **v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  __int128 v19;
  void *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int isValidValue;
  WTF::StringImpl *v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  double v53;
  _DWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BOOL4 v59;
  unint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  _BOOL4 v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  __int128 v75;
  _BOOL4 v76;
  BOOL v77;
  WTF::StringImpl *v78[3];
  __int128 v79;
  _BYTE v80[24];
  char v81;
  __int128 v82;
  _BOOL8 v83;
  char v84;
  WebCore::Node *v85;
  int v86;
  _BOOL4 v87;

  if (*((_BYTE *)this + 32))
  {
    v6 = (WTF **)((char *)this + 40);
    if (*((_DWORD *)this + 12))
    {
      if (*((_DWORD *)this + 13))
        *((_DWORD *)this + 13) = 0;
      v7 = *v6;
      if (*v6)
      {
        *((_QWORD *)this + 5) = 0;
        *((_DWORD *)this + 12) = 0;
        WTF::fastFree(v7, a2);
      }
    }
    *((_BYTE *)this + 32) = 0;
    v8 = *((_QWORD *)this + 3);
    v9 = v8 ? *(_QWORD *)(v8 + 8) : 0;
    WebCore::HTMLInputElement::dataList(v9, &v85);
    if (v85)
    {
      WebCore::HTMLDataListElement::options(v85, v10, &v79);
      v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v79 + 16))(v79);
      if (*((_DWORD *)this + 12) < v11)
      {
        if (v11 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          JUMPOUT(0x195CBA480);
        }
        v12 = (WTF *)*((_QWORD *)this + 5);
        v13 = *((unsigned int *)this + 13);
        v14 = 24 * v11;
        v15 = WTF::fastMalloc((WTF *)(24 * v11));
        *((_DWORD *)this + 12) = (v14 & 0xFFFFFFF8) / 0x18;
        *((_QWORD *)this + 5) = v15;
        if ((_DWORD)v13)
        {
          v17 = 24 * v13;
          v18 = v12;
          do
          {
            v19 = *(_OWORD *)v18;
            *(_QWORD *)(v15 + 16) = *((_QWORD *)v18 + 2);
            *(_OWORD *)v15 = v19;
            v15 += 24;
            v18 = (WTF *)((char *)v18 + 24);
            v17 -= 24;
          }
          while (v17);
        }
        if (v12)
        {
          if (*v6 == v12)
          {
            *((_QWORD *)this + 5) = 0;
            *((_DWORD *)this + 12) = 0;
          }
          WTF::fastFree(v12, v16);
        }
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v79 + 16))(v79))
      {
        v22 = 0;
        while (1)
        {
          v23 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v79 + 24))(v79, v22);
          v25 = v23;
          if (v23)
            *(_DWORD *)(v23 + 24) += 2;
          if ((*(_WORD *)(v23 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          {
            goto LABEL_159;
          }
          WebCore::HTMLOptionElement::value((WTF::StringImpl *)v23, v24, v78);
          v26 = *((_QWORD *)this + 3);
          v27 = v26 ? *(_QWORD *)(v26 + 8) : 0;
          isValidValue = WebCore::InputType::isValidValue(*(WebCore::InputType **)(v27 + 240), (const WTF::String *)v78);
          v30 = v78[0];
          if (isValidValue)
          {
            v31 = v78[0] ? *((_DWORD *)v78[0] + 1) : 0;
            v32 = *(_DWORD *)(*(_QWORD *)(v27 + 240) + 12) & 0x2A8820;
            if (!v32)
              break;
            v33 = *(_DWORD *)(v27 + 176);
            if (v33 < 1 || !v31 || v33 <= v31)
              break;
          }
LABEL_43:
          v78[0] = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v28);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25, v28);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
          v22 = (v22 + 1);
          if (v22 >= (*(unsigned int (**)(_QWORD))(*(_QWORD *)v79 + 16))(v79))
            goto LABEL_59;
        }
        if (v78[0])
        {
          v34 = *((_DWORD *)v78[0] + 1);
          if (v32)
            goto LABEL_31;
        }
        else
        {
          v34 = 0;
          if (v32)
          {
LABEL_31:
            v35 = *(_DWORD *)(v27 + 172);
            if (v35 >= 0x80000)
              v35 = 0x80000;
            if (v35 < v34)
              goto LABEL_43;
          }
        }
        *(_QWORD *)v80 = 0;
        *(_WORD *)&v80[8] = 0;
        *(_QWORD *)&v80[12] = 2;
        if (v78[0])
        {
          v36 = (unsigned __int8 *)*((_QWORD *)v78[0] + 1);
          v37 = *((unsigned int *)v78[0] + 1) | ((unint64_t)((*((_DWORD *)v78[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          v36 = 0;
          v37 = 0x100000000;
        }
        WebCore::parseToDecimalForNumberType(v36, v37, (__int128 *)v80, (uint64_t)&v82);
        v38 = *((unsigned int *)this + 13);
        if ((_DWORD)v38 == *((_DWORD *)this + 12))
        {
          v39 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 40, v38 + 1, (unint64_t)&v82);
          v40 = *((_QWORD *)this + 5) + 24 * *((unsigned int *)this + 13);
          v41 = *(_OWORD *)v39;
          v42 = *((_QWORD *)v39 + 2);
        }
        else
        {
          v40 = (uint64_t)*v6 + 24 * v38;
          v41 = v82;
          v42 = v83;
        }
        *(_QWORD *)(v40 + 16) = v42;
        *(_OWORD *)v40 = v41;
        ++*((_DWORD *)this + 13);
        v30 = v78[0];
        goto LABEL_43;
      }
LABEL_59:
      v43 = *((unsigned int *)this + 13);
      v44 = (WTF *)*((_QWORD *)this + 5);
      if (*((_DWORD *)this + 12) > v43)
      {
        v45 = (WTF *)*((_QWORD *)this + 5);
        if ((_DWORD)v43)
        {
          if (v43 >= 0xAAAAAAB)
          {
LABEL_159:
            __break(0xC471u);
            JUMPOUT(0x195CB9F60);
          }
          v46 = 24 * v43;
          v47 = WTF::fastMalloc((WTF *)(24 * v43));
          *((_DWORD *)this + 12) = (v46 & 0xFFFFFFF8) / 0x18;
          *((_QWORD *)this + 5) = v47;
          v45 = v44;
          if ((WTF *)v47 != v44)
          {
            v48 = (__n128 *)v44;
            do
            {
              v21 = *v48;
              *(_QWORD *)(v47 + 16) = v48[1].n128_u64[0];
              *(__n128 *)v47 = v21;
              v47 += 24;
              v48 = (__n128 *)((char *)v48 + 24);
              v46 -= 24;
            }
            while (v46);
            v45 = *v6;
          }
        }
        if (v44)
        {
          if (v45 == v44)
          {
            *((_QWORD *)this + 5) = 0;
            *((_DWORD *)this + 12) = 0;
          }
          WTF::fastFree(v44, v20);
          v44 = *v6;
        }
        else
        {
          v44 = v45;
        }
      }
      v49 = *((unsigned int *)this + 13);
      v50 = 126 - 2 * __clz(v49);
      if ((_DWORD)v49)
        v51 = v50;
      else
        v51 = 0;
      v53 = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *,false>((uint64_t)v44, (unint64_t)v44 + 24 * v49, v51, 1, v21);
      v54 = (_DWORD *)v79;
      *(_QWORD *)&v79 = 0;
      if (v54)
      {
        if (v54[4] == 1)
          (*(void (**)(_DWORD *, double))(*(_QWORD *)v54 + 8))(v54, v53);
        else
          --v54[4];
      }
      if (v85)
      {
        if (*((_DWORD *)v85 + 6) == 2)
        {
          if ((*((_WORD *)v85 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v85, v52);
        }
        else
        {
          *((_DWORD *)v85 + 6) -= 2;
        }
      }
    }
  }
  v55 = *((unsigned int *)this + 13);
  if (!(_DWORD)v55)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  if ((_DWORD)v55 == 1)
  {
LABEL_125:
    v66 = *((_QWORD *)this + 5);
    v67 = *(_QWORD *)(v66 + 16);
    *(_OWORD *)v80 = *(_OWORD *)v66;
    *(_QWORD *)&v80[16] = v67;
    LOBYTE(v66) = 1;
    goto LABEL_126;
  }
  v56 = 0;
  v57 = v55 >> 1;
  do
  {
    v58 = *((unsigned int *)this + 13);
    if (v57 != v58 - 1)
      goto LABEL_87;
    if (v57 >= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x195CBA470);
    }
    WebCore::Decimal::operator-((__int128 *)(*((_QWORD *)this + 5) + 24 * v57), (__int128 *)a2, (uint64_t)&v82);
    if ((HIDWORD(v82) - 1) >= 2)
    {
      if (HIDWORD(v82))
        goto LABEL_86;
      v59 = v83;
LABEL_85:
      if (!v59)
        goto LABEL_86;
      v60 = v57++;
LABEL_129:
      v70 = *((unsigned int *)this + 13);
      if (v60 >= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x195CBA488);
      }
      v71 = *((_QWORD *)this + 5);
      v72 = v71 + 24 * v60;
      v73 = *(_QWORD *)(v72 + 16);
      v82 = *(_OWORD *)v72;
      v83 = v73;
      v84 = 1;
      if (v57 == v70)
      {
LABEL_131:
        v68 = &v82;
        goto LABEL_127;
      }
      if (v57 >= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x195CBA490);
      }
      v74 = (__int128 *)(v71 + 24 * v57);
      v75 = *v74;
      *(_QWORD *)&v80[16] = *((_QWORD *)v74 + 2);
      *(_OWORD *)v80 = v75;
      v81 = 1;
      WebCore::Decimal::operator-((__int128 *)v80, (__int128 *)a2, (uint64_t)&v79);
      WebCore::Decimal::operator-((__int128 *)a2, &v82, (uint64_t)v78);
      WebCore::Decimal::operator-(&v79, (__int128 *)v78, (uint64_t)&v85);
      if ((v86 - 1) >= 2)
      {
        if (v86)
          goto LABEL_131;
        v76 = v87;
      }
      else
      {
        if (v86 == 2)
          goto LABEL_131;
        v76 = v87;
      }
      v77 = v76;
      v68 = &v82;
      if (v77)
        v68 = (__int128 *)v80;
      goto LABEL_127;
    }
    if (HIDWORD(v82) != 2)
    {
      v59 = v83;
      goto LABEL_85;
    }
LABEL_86:
    v58 = *((unsigned int *)this + 13);
LABEL_87:
    v60 = v57 - 1;
    if (v57 - 1 >= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x195CBA460);
    }
    v61 = *((_QWORD *)this + 5) + 24 * v60;
    if (*(_QWORD *)v61 != *(_QWORD *)a2
      || *(unsigned __int16 *)(v61 + 8) != *((unsigned __int16 *)a2 + 4)
      || *(_DWORD *)(v61 + 12) != *((_DWORD *)a2 + 3)
      || *(_DWORD *)(v61 + 16) != *((_DWORD *)a2 + 4))
    {
      WebCore::Decimal::operator-((__int128 *)v61, (__int128 *)a2, (uint64_t)&v82);
      if ((HIDWORD(v82) - 1) >= 2)
      {
        if (HIDWORD(v82) == 3)
          goto LABEL_96;
        if (HIDWORD(v82))
          goto LABEL_105;
        v62 = v83;
      }
      else
      {
        if (HIDWORD(v82) == 2)
          goto LABEL_105;
        v62 = v83;
      }
      if (!v62)
        goto LABEL_105;
    }
LABEL_96:
    if (v57 >= *((unsigned int *)this + 13))
    {
      __break(0xC471u);
      JUMPOUT(0x195CBA478);
    }
    v63 = *((_QWORD *)this + 5) + 24 * v57;
    if (*(_QWORD *)v63 == *(_QWORD *)a2
      && *(unsigned __int16 *)(v63 + 8) == *((unsigned __int16 *)a2 + 4)
      && *(_DWORD *)(v63 + 12) == *((_DWORD *)a2 + 3)
      && *(_DWORD *)(v63 + 16) == *((_DWORD *)a2 + 4))
    {
      goto LABEL_129;
    }
    WebCore::Decimal::operator-((__int128 *)v63, (__int128 *)a2, (uint64_t)&v82);
    if ((HIDWORD(v82) - 1) < 2)
    {
      if (HIDWORD(v82) == 2)
        goto LABEL_105;
      v64 = v83;
      goto LABEL_104;
    }
    if (HIDWORD(v82) == 3)
      goto LABEL_129;
    if (!HIDWORD(v82))
    {
      v64 = v83;
LABEL_104:
      if (!v64)
        goto LABEL_129;
    }
LABEL_105:
    if (v57 >= *((unsigned int *)this + 13))
    {
      __break(0xC471u);
      JUMPOUT(0x195CBA468);
    }
    WebCore::Decimal::operator-((__int128 *)(*((_QWORD *)this + 5) + 24 * v57), (__int128 *)a2, (uint64_t)&v82);
    if ((HIDWORD(v82) - 1) >= 2)
    {
      if (HIDWORD(v82))
        goto LABEL_111;
      v65 = v83;
    }
    else
    {
      if (HIDWORD(v82) == 2)
        goto LABEL_111;
      v65 = v83;
    }
    if (v65)
    {
      v56 = v57;
      v57 = v55;
    }
LABEL_111:
    v55 = v57;
    v57 = v56 + ((v57 - v56) >> 1);
  }
  while (v57);
  LODWORD(v66) = *((_DWORD *)this + 13);
  if ((_DWORD)v66)
    goto LABEL_125;
  v80[0] = 0;
LABEL_126:
  v81 = v66;
  v68 = (__int128 *)v80;
LABEL_127:
  v69 = v68[1];
  *(_OWORD *)a3 = *v68;
  *(_OWORD *)(a3 + 16) = v69;
}

void WebCore::PasswordInputType::~PasswordInputType(WebCore::PasswordInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::PasswordInputType::~PasswordInputType(WebCore::PasswordInputType *this, void *a2)
{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::PasswordInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::PasswordInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::PasswordInputType *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::PasswordInputType *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::PasswordInputType *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::PasswordInputType *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::PasswordInputType *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::PasswordInputType *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::PluginDocumentParser::~PluginDocumentParser(WebCore::PluginDocumentParser *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v9)
      {
        v15 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v15;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v13 = v3;
        WTF::fastFree(v10, a2);
        v3 = v13;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33A3D50;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
      {
        v16 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
        v6 = v16;
      }
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v14 = v6;
        WTF::fastFree(v12, a2);
        v6 = v14;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v9)
      {
        v15 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v15;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v13 = v3;
        WTF::fastFree(v10, a2);
        v3 = v13;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33A3D50;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
      {
        v16 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
        v6 = v16;
      }
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v14 = v6;
        WTF::fastFree(v12, a2);
        v6 = v14;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::PluginDocument::~PluginDocument(WebCore::PluginDocument *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 440);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 439);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 440);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 439);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::PluginDocument::~PluginDocument(WebCore::PluginDocument *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 24) = off_1E33BA1B0;
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 192), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 24) = off_1E33BA1B0;
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 288), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 504), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 504), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 512), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 512), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 544), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 544), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 552), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document((WebCore::PluginDocument *)((char *)this - 552), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::PublicURLManager::~PublicURLManager(WebCore::PublicURLManager *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::PublicURLManager::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::CachedLiveNodeList<WebCore::RadioNodeList>::memoryCost(uint64_t a1)
{
  return 8 * *(unsigned int *)(a1 + 72);
}

uint64_t WebCore::RadioNodeList::isRootedAtTreeScope(WebCore::RadioNodeList *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t WebCore::CachedLiveNodeList<WebCore::RadioNodeList>::invalidateCacheForDocument(uint64_t result, WebCore::Document *this)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = result;
  if (*(_QWORD *)(result + 48) || (*(_BYTE *)(result + 80) & 3) != 0)
  {
    v3 = (_QWORD *)(result + 40);
    result = WebCore::Document::unregisterNodeListForInvalidation((uint64_t)this, (WebCore::LiveNodeList *)result);
    *v3 = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v2 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v2 + 64);
      v7 = &v6[v5];
      do
      {
        result = *v6;
        *v6 = 0;
        if (result)
        {
          do
          {
            v8 = __ldaxr((unsigned int *)result);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, (unsigned int *)result));
          if (!v9)
          {
            atomic_store(1u, (unsigned int *)result);
            v10 = *(unsigned int *)(result + 28);
            if ((_DWORD)v10)
            {
              v13 = result;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v10));
              result = v13;
            }
            v11 = *(WTF **)(result + 16);
            if (v11)
            {
              *(_QWORD *)(result + 16) = 0;
              *(_DWORD *)(result + 24) = 0;
              v12 = result;
              WTF::fastFree(v11, v4);
              result = v12;
            }
            result = WTF::fastFree((WTF *)result, v4);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v2 + 76) = 0;
  }
  return result;
}

void WebCore::RangeInputType::~RangeInputType(WebCore::RangeInputType *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E33D5AC0;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E33D5AC0;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, a2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::fastFree(this, a2);
}

_BYTE *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::rehash(uint64_t *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *result;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 24);
    do
    {
      *((_BYTE *)v10 - 8) = -1;
      *v10 = 0;
      v10[1] = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (_BYTE *)(v4 + 24 * v11);
      v15 = *v14;
      if (v15 != 254)
      {
        if (v15 == 255)
        {
          v16 = v4 + 24 * v11;
          v19 = *(_DWORD *)(v16 + 16);
          v18 = (_DWORD *)(v16 + 16);
          v17 = v19;
          if (v19 != -1)
            ((void (*)(char *, uint64_t))off_1E33D8490[v17])(&v41, v4 + 24 * v11 + 8);
          *v18 = -1;
        }
        else
        {
          v20 = *a1;
          v40 = v12;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
          v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
          do
          {
            v25 = v24 & v21;
            v26 = (_BYTE *)(v20 + 24 * (v24 & v21));
            v24 = ++v22 + (v24 & v21);
          }
          while (*v26 != 255);
          v27 = v20 + 24 * v25;
          v30 = *(_DWORD *)(v27 + 16);
          v29 = (_DWORD *)(v27 + 16);
          v28 = v30;
          if (v30 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E33D8490[v28])(&v42, v20 + 24 * v25 + 8);
            LOBYTE(v15) = *v14;
          }
          v31 = v20 + 24 * v25;
          *(_BYTE *)(v31 + 8) = 0;
          v8 = (void *)(v31 + 8);
          *v26 = v15;
          *v29 = -1;
          v32 = v4 + 24 * v11;
          v35 = *(_DWORD *)(v32 + 16);
          v33 = (_DWORD *)(v32 + 16);
          v34 = v35;
          if (v35 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_1E33D84B0[v34])(&v43, v8, v4 + 24 * v11 + 8);
            *v29 = v34;
            v36 = *v33;
            if ((_DWORD)v36 != -1)
              ((void (*)(char *, uint64_t))off_1E33D8490[v36])(&v44, v4 + 24 * v11 + 8);
          }
          *v33 = -1;
          v12 = v40;
          if (v14 == a3)
            v12 = v26;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      *((_BYTE *)v5 - 8) = -1;
      *v5 = 0;
      v5[1] = 0;
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::PermissionsPolicy::Feature>>,WebCore::PermissionsPolicy::Feature>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned __int8 *result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v6 ^ HIWORD(v6);
  do
  {
    v8 = v7 & v3;
    result = (unsigned __int8 *)(v2 + 24 * v8);
    v7 = ++v4 + v8;
  }
  while (*result != 255);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;
  char v9;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = *a2;
      do
      {
        v5 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v5 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          JUMPOUT(0x195CBB7F8);
        }
        v8 = &v7;
        if ((((uint64_t (*)(char **, uint64_t))off_1E33D84A0[v5])(&v8, v4) & 1) == 0)
        {
          v6 = *(unsigned int *)(v4 + 24);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_1E33D84D0[v6])(&v9, v4);
          *(_DWORD *)(v4 + 24) = -1;
        }
        v4 += 32;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  *a2 = 0;
  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;
  char v16;
  char v17;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33D8490[v5])(&v17, v4);
LABEL_14:
    *(_QWORD *)v4 = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      for (i = v7; ; i += 32)
      {
        v10 = *(unsigned int *)(i + 24);
        if ((_DWORD)v10 == -1)
          break;
        v15 = &v14;
        if ((((uint64_t (*)(char **, uint64_t))off_1E33D84A0[v10])(&v15, i) & 1) == 0)
        {
          v11 = *(unsigned int *)(i + 24);
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, uint64_t))off_1E33D84D0[v11])(&v16, i);
          *(_DWORD *)(i + 24) = -1;
        }
        if (!--v8)
          return WTF::fastFree((WTF *)(v7 - 16), a2);
      }
      v13 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEEOSY_EEEDcSQ_DpT0_(v13);
    }
    else
    {
      return WTF::fastFree((WTF *)(v7 - 16), a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33D8490[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 1;
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData const&>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  v5 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      return result;
  }
  else if ((_DWORD)v5 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33D84D0[v4])(&v7, result);
    *(_DWORD *)(v3 + 24) = -1;
    return result;
  }
  v6 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t))off_1E33D84E0[v5])(&v6, result);
}

uint64_t *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  int v5;
  unsigned int v7;
  uint64_t Table;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      Table = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::allocateTable(v7);
      *a1 = Table;
      *(_DWORD *)(Table - 4) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::begin(a2);
      v10 = v9;
      v11 = a2;
      v13 = v12;
      v14 = *v11;
      v15 = v14 ? (uint64_t)&v14[24 * *((unsigned int *)v14 - 1)] : 0;
      if ((unsigned __int8 *)v15 != v9)
      {
        do
        {
          v16 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::PermissionsPolicy::Feature>>,WebCore::PermissionsPolicy::Feature>(a1, v10);
          WTF::IdentityHashTranslator<WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::PermissionsPolicy::Feature>>::translate<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist> const&>((uint64_t)v16, (uint64_t)v10, (uint64_t)v10);
          while (1)
          {
            v10 += 24;
            if (v10 == v13)
              break;
            if (*v10 < 0xFEu)
              goto LABEL_12;
          }
          v10 = v13;
LABEL_12:
          ;
        }
        while (v10 != (unsigned __int8 *)v15);
      }
    }
  }
  return a1;
}

unsigned __int8 *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::begin(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[24 * v3];
  if (!*((_DWORD *)result - 3))
    return &result[24 * v3];
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    while (*result >= 0xFEu)
    {
      result += 24;
      v5 -= 24;
      if (!v5)
        return v4;
    }
  }
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::PermissionsPolicy::Feature>>::translate<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist> const&>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)result = *(_BYTE *)a3;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    v5 = result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33D8490[v3])(&v7, result + 8);
    *(_DWORD *)(v5 + 16) = -1;
    return result;
  }
  v6 = result + 8;
  return ((uint64_t (*)(uint64_t *))off_1E33D8500[v4])(&v6);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, uint64_t *a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__assign_alt[abi:sn180100]<0ul,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> const&>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF7HashSetIN7WebCore18SecurityOriginDataENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENS8_15HashTableTraitsEEENSA_9Allowlist15AllowAllOriginsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E33D8490[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 1;
  return result;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__assign_alt[abi:sn180100]<0ul,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> const&>(uint64_t a1, uint64_t *a2, unsigned int **a3)
{
  uint64_t v5;
  uint64_t *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5)
  {
    ((void (*)(char **, uint64_t))off_1E33D8490[v5])(&v17, a1);
LABEL_14:
    *(_DWORD *)(a1 + 8) = -1;
    result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)a1, a3);
    *(_DWORD *)(a1 + 8) = 0;
    return result;
  }
  result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(&v15, a3);
  v9 = *a2;
  *a2 = v15;
  v15 = v9;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = v9; ; i += 32)
      {
        v12 = *(unsigned int *)(i + 24);
        if ((_DWORD)v12 == -1)
          break;
        v17 = &v16;
        if ((((uint64_t (*)(char **, uint64_t))off_1E33D84A0[v12])(&v17, i) & 1) == 0)
        {
          v13 = *(unsigned int *)(i + 24);
          if ((_DWORD)v13 != -1)
            ((void (*)(char **, uint64_t))off_1E33D84D0[v13])(&v17, i);
          *(_DWORD *)(i + 24) = -1;
        }
        if (!--v10)
          return (uint64_t *)WTF::fastFree((WTF *)(v9 - 16), v8);
      }
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9Allowlist7matchesERKNSA_18SecurityOriginDataEEUlRKNS8_7HashSetISC_NS8_11DefaultHashISC_EENS8_10HashTraitsISC_EENS8_15HashTableTraitsEEEE_JZNKSB_7matchesESE_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_NSB_15AllowAllOriginsEEEEEEEDcSP_DpT0_(v14);
    }
    else
    {
      return (uint64_t *)WTF::fastFree((WTF *)(v9 - 16), v8);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9Allowlist7matchesERKNSA_18SecurityOriginDataEEUlRKNS8_7HashSetISC_NS8_11DefaultHashISC_EENS8_10HashTraitsISC_EENS8_15HashTableTraitsEEEE_JZNKSB_7matchesESE_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_NSB_15AllowAllOriginsEEEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;
  BOOL v14;
  char v15;
  int isNull;
  char v17;
  char *v18;

  v2 = *a2;
  if (!*a2)
    return 0;
  v4 = **a1;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v4) & v5;
  v7 = (unsigned int *)(v2 + 32 * v6);
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v7) & 1) != 0)
    return 0;
  for (i = 1; ; ++i)
  {
    v9 = v7[6];
    if ((_DWORD)v9 == -1)
      break;
    v18 = &v17;
    if ((((uint64_t (*)(char **, unsigned int *))off_1E33D84A0[v9])(&v18, v7) & 1) == 0)
    {
      if (v7 == (unsigned int *)v4)
        return 1;
      v10 = v7[6];
      v11 = *(_DWORD *)(v4 + 24);
      v13 = v11 == (_DWORD)v10 && v11 != -1;
      if ((_DWORD)v10 == -1 || !v13)
      {
        v14 = v11 == -1;
        if ((_DWORD)v10 == -1)
          v15 = v14;
        else
          v15 = v13;
        if ((v15 & 1) != 0)
          return 1;
      }
      else
      {
        v18 = &v17;
        if ((((uint64_t (*)(char **, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v10])(&v18, v7, v4) & 1) != 0)return 1;
      }
    }
    v6 = ((_DWORD)v6 + i) & v5;
    v7 = (unsigned int *)(v2 + 32 * v6);
    isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v7);
    result = 0;
    if (isNull)
      return result;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9Allowlist7matchesERKNSA_18SecurityOriginDataEEUlRKNS8_7HashSetISC_NS8_11DefaultHashISC_EENS8_10HashTraitsISC_EENS8_15HashTableTraitsEEEE_JZNKSB_7matchesESE_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_NSB_15AllowAllOriginsEEEEEEEDcSP_DpT0_();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9Allowlist7matchesERKNSA_18SecurityOriginDataEEUlRKNS8_7HashSetISC_NS8_11DefaultHashISC_EENS8_10HashTraitsISC_EENS8_15HashTableTraitsEEEE_JZNKSB_7matchesESE_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_NSB_15AllowAllOriginsEEEEEEEDcSP_DpT0_()
{
  return 1;
}

char *WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(char *result, int8x16_t *a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  size_t v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v6 = result;
  if (a3)
  {
    v7 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195CBC38CLL);
    }
  }
  else
  {
    v7 = 0;
  }
  if (a4)
  {
    v8 = *(_DWORD *)(a4 + 4);
    if (v8 < 0)
      goto LABEL_26;
  }
  else
  {
    v8 = 0;
  }
  v9 = __OFADD__(v8, 2);
  v10 = v8 + 2;
  if (v9
    || (v9 = __OFADD__(v10, 41), v11 = v10 + 41, v9)
    || (v9 = __OFADD__((_DWORD)v7, v11), v12 = v7 + v11, v9)
    || (v13 = (v12 + 19), __OFADD__(v12, 19)))
  {
LABEL_26:
    *(_QWORD *)v6 = 0;
    __break(0xC471u);
    JUMPOUT(0x195CBC360);
  }
  if (a4 && (*(_BYTE *)(a4 + 16) & 4) == 0)
  {
    if (v12 != -19)
    {
      if (v13 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v13 + 20));
        v14 = v16;
        if (v16)
        {
          *(_DWORD *)v16 = 2;
          *(_DWORD *)(v16 + 4) = v13;
          *(_OWORD *)(v16 + 20) = xmmword_1969F1320;
          *(_QWORD *)(v16 + 8) = v16 + 20;
          *(_DWORD *)(v16 + 16) = 0;
          *(_OWORD *)(v16 + 36) = xmmword_1969F1330;
          *(_DWORD *)(v16 + 52) = 2097273;
          *(_WORD *)(v16 + 56) = 39;
          result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v16 + 58), a2, v7, (int8x16_t *)"' check failed for document with origin '", 41, a4, (int8x16_t *)"'.", 2);
          goto LABEL_22;
        }
      }
      goto LABEL_26;
    }
LABEL_25:
    v14 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_22;
  }
  if (v12 == -19)
    goto LABEL_25;
  if ((v13 & 0x80000000) != 0)
    goto LABEL_26;
  WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
  v14 = v16;
  if (!v16)
    goto LABEL_26;
  *(_DWORD *)v16 = 2;
  *(_DWORD *)(v16 + 4) = v13;
  *(_QWORD *)(v16 + 8) = v16 + 20;
  *(_DWORD *)(v16 + 16) = 4;
  *(_DWORD *)(v16 + 35) = 656439651;
  *(_OWORD *)(v16 + 20) = *(_OWORD *)"Permission policy '";
  v15 = (_BYTE *)(v16 + 39);
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 == 1)
      *v15 = a2->i8[0];
    else
      memcpy((void *)(v16 + 39), a2, v7);
  }
  result = WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v15[v7], "' check failed for document with origin '", 0x29u, a4, "'.", 2u);
LABEL_22:
  *(_QWORD *)v6 = v14;
  return result;
}

const char *WebCore::toFeatureNameForLogging(int a1)
{
  const char *result;

  result = "Camera";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "Microphone";
      break;
    case 2:
      result = "SpeakerSelection";
      break;
    case 3:
      result = "DisplayCapture";
      break;
    case 4:
      result = "Gamepad";
      break;
    case 5:
      result = "Geolocation";
      break;
    case 6:
      result = "Payment";
      break;
    case 7:
      result = "ScreenWakeLock";
      break;
    case 8:
      result = "SyncXHR";
      break;
    case 9:
      result = "Fullscreen";
      break;
    case 10:
      result = "WebShare";
      break;
    case 11:
      result = "Gyroscope";
      break;
    case 12:
      result = "Accelerometer";
      break;
    case 13:
      result = "Magnetometer";
      break;
    case 14:
      result = "PublickeyCredentialsGet";
      break;
    case 15:
      result = "PrivateToken";
      break;
    case 16:
      result = "Invalid";
      break;
    default:
      result = "";
      break;
  }
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v8;
  __n128 *v9;
  unint64_t j;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  _BOOL4 v17;
  _BOOL4 v18;
  __int128 v19;
  __int128 v20;
  _BOOL4 v21;
  BOOL v22;
  _BOOL4 v23;
  _BOOL4 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  _BOOL4 v30;
  __n128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  _BOOL4 v37;
  __int128 v38;
  __int128 v39;
  __n128 v40;
  __n128 v41;
  __int128 v42;
  __n128 v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  __n128 v47;
  __int128 *v48;
  uint64_t v49;
  _BOOL4 v50;
  BOOL v51;
  _BOOL4 v52;
  _BOOL4 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __n128 v66;
  _BOOL4 v67;
  __int128 v68;
  __int128 v69;
  __n128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BOOL4 v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  uint64_t v79;
  _BOOL4 v80;
  BOOL v81;
  _BOOL4 v82;
  _BOOL4 v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  __int128 v91;
  __n128 v92;
  __int128 v93;
  __n128 v94;
  __n128 v95;
  _BOOL4 v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  BOOL v101;
  _BOOL4 v102;
  _BOOL4 v103;
  __int128 v104;
  __int128 v105;
  __n128 v106;
  _BOOL4 v107;
  __int128 v108;
  __n128 v109;
  __int128 v110;
  __n128 v111;
  _BOOL4 v112;
  __int128 v113;
  __n128 v114;
  __int128 v115;
  __int128 v116;
  __n128 v117;
  _BOOL4 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 *v122;
  _BOOL4 v123;
  uint64_t v124;
  unint64_t v125;
  __int128 *k;
  _BOOL4 v127;
  _BOOL4 v128;
  unint64_t v129;
  __int128 *v130;
  __int128 v131;
  __int128 v132;
  __n128 v133;
  _BOOL4 v134;
  _BOOL4 v135;
  __int128 v136;
  __int128 v137;
  BOOL v138;
  __int128 v139;
  _BOOL4 v140;
  _BOOL4 v141;
  _BOOL4 v142;
  unint64_t v143;
  _BOOL4 v144;
  __int128 v145;
  __int128 v146;
  __n128 v147;
  _BOOL4 v148;
  _BOOL4 v149;
  __n128 *v150;
  __n128 v151;
  _BOOL4 v152;
  _BOOL4 v153;
  BOOL v154;
  _BOOL4 v155;
  _BOOL4 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  unint64_t v160;
  BOOL v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _BOOL4 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BOOL4 v171;
  int64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BOOL4 v176;
  uint64_t v177;
  _BOOL4 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BOOL4 v184;
  _BOOL4 v185;
  __int128 v186;
  __int128 v187;
  int64_t i;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BOOL4 v194;
  __int128 v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _BOOL4 v199;
  __int128 v200;
  __n128 *v201;
  __int128 v202;
  _BOOL4 v203;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 *v209;
  _BOOL4 v210;
  __int128 v211;
  uint64_t v212;
  unint64_t v213;
  _BOOL4 v215;
  __int128 v216;
  _BOOL4 v217;
  uint64_t v218;
  __n128 v219;
  uint64_t v220;
  uint64_t v221;
  _BOOL4 v222;
  __int128 *v224;
  int64_t v226;
  __int128 v227;
  uint64_t v228;
  __n128 v229;
  unint64_t v230;
  __n128 v231;
  uint64_t v232;

  while (1)
  {
    v8 = a2 - 24;
    v224 = (__int128 *)(a2 - 48);
    v9 = (__n128 *)(a2 - 72);
    j = a1;
    while (2)
    {
      a1 = j;
      v11 = a2 - j;
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - j) >> 3);
      switch(v12)
      {
        case 0:
        case 1:
          return a5.n128_f64[0];
        case 2:
          a5.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)(a2 - 24), (__int128 *)j, (uint64_t)&v231);
          if (v231.n128_u32[3] - 1 >= 2)
          {
            if (v231.n128_u32[3])
              return a5.n128_f64[0];
            v152 = v232 == 1;
          }
          else
          {
            if (v231.n128_u32[3] == 2)
              return a5.n128_f64[0];
            v152 = v232;
          }
          if (v152)
            goto LABEL_302;
          return a5.n128_f64[0];
        case 3:
          a2 = j + 24;
          WebCore::Decimal::operator-((__int128 *)(j + 24), (__int128 *)j, (uint64_t)&v231);
          if (v231.n128_u32[3] - 1 >= 2)
          {
            if (!v231.n128_u32[3])
            {
              v153 = v232 == 1;
              goto LABEL_296;
            }
          }
          else if (v231.n128_u32[3] != 2)
          {
            v153 = v232;
LABEL_296:
            v154 = v153;
            goto LABEL_297;
          }
          v154 = 0;
LABEL_297:
          a5.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)v8, (__int128 *)(j + 24), (uint64_t)&v231);
          if (v231.n128_u32[3] - 1 < 2)
          {
            if (v231.n128_u32[3] != 2)
            {
              v155 = v232;
              goto LABEL_300;
            }
LABEL_437:
            v156 = 0;
            if (v154)
              goto LABEL_301;
            goto LABEL_438;
          }
          if (v231.n128_u32[3])
            goto LABEL_437;
          v155 = v232 == 1;
LABEL_300:
          v156 = v155;
          if (v154)
          {
LABEL_301:
            if (!v156)
              goto LABEL_427;
LABEL_302:
            v157 = *(_OWORD *)j;
            v232 = *(_QWORD *)(j + 16);
            v231 = (__n128)v157;
            v158 = *(_OWORD *)v8;
            *(_QWORD *)(j + 16) = *(_QWORD *)(v8 + 16);
            *(_OWORD *)j = v158;
            a5 = v231;
            v159 = v232;
            goto LABEL_303;
          }
LABEL_438:
          if (v156)
          {
            v231 = *(__n128 *)a2;
            v219 = v231;
            v232 = *(_QWORD *)(j + 40);
            v220 = v232;
            v221 = *(_QWORD *)(v8 + 16);
            *(_OWORD *)a2 = *(_OWORD *)v8;
            *(_QWORD *)(j + 40) = v221;
            *(_QWORD *)(v8 + 16) = v220;
            *(__n128 *)v8 = v219;
            a5.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)(j + 24), (__int128 *)j, (uint64_t)&v231);
            if (v231.n128_u32[3] - 1 >= 2)
            {
              if (v231.n128_u32[3])
                return a5.n128_f64[0];
              v222 = v232 == 1;
            }
            else
            {
              if (v231.n128_u32[3] == 2)
                return a5.n128_f64[0];
              v222 = v232;
            }
            if (v222)
            {
              a5 = *(__n128 *)j;
              v232 = *(_QWORD *)(j + 16);
              v231 = a5;
              *(_OWORD *)j = *(_OWORD *)a2;
              *(_QWORD *)(j + 16) = *(_QWORD *)(j + 40);
              a5.n128_u64[0] = v231.n128_u64[0];
              *(__n128 *)a2 = v231;
              *(_QWORD *)(j + 40) = v232;
            }
          }
          return a5.n128_f64[0];
        case 4:
          a5.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(j, j + 24, j + 48, a2 - 24).n128_u64[0];
          return a5.n128_f64[0];
        case 5:
          a5.n128_u64[0] = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(j, j + 24, j + 48, j + 72, a2 - 24).n128_u64[0];
          return a5.n128_f64[0];
        default:
          if (v11 <= 575)
          {
            v160 = j + 24;
            v162 = j == a2 || v160 == a2;
            if ((a4 & 1) != 0)
            {
              if (v162)
                return a5.n128_f64[0];
              v163 = 0;
              v164 = j;
              while (1)
              {
                v165 = v164;
                v164 = v160;
                a5.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)v160, (__int128 *)v165, (uint64_t)&v231);
                if (v231.n128_u32[3] - 1 >= 2)
                {
                  if (v231.n128_u32[3])
                    goto LABEL_331;
                  v166 = v232 == 1;
                }
                else
                {
                  if (v231.n128_u32[3] == 2)
                    goto LABEL_331;
                  v166 = v232;
                }
                if (v166)
                {
                  v167 = *(_OWORD *)v160;
                  v230 = *(_QWORD *)(v160 + 16);
                  v229 = (__n128)v167;
                  v168 = v163;
                  while (1)
                  {
                    v169 = v168;
                    v170 = j + v168;
                    *(_OWORD *)(v170 + 24) = *(_OWORD *)(j + v168);
                    *(_QWORD *)(v170 + 40) = *(_QWORD *)(j + v168 + 16);
                    if (!v168)
                      break;
                    WebCore::Decimal::operator-((__int128 *)&v229, (__int128 *)(v170 - 24), (uint64_t)&v231);
                    if (v231.n128_u32[3] - 1 >= 2)
                    {
                      if (v231.n128_u32[3])
                      {
LABEL_328:
                        v165 = j + v169;
                        goto LABEL_330;
                      }
                      v171 = v232 == 1;
                    }
                    else
                    {
                      if (v231.n128_u32[3] == 2)
                        goto LABEL_330;
                      v171 = v232;
                    }
                    v165 -= 24;
                    v168 = v169 - 24;
                    if (!v171)
                      goto LABEL_328;
                  }
                  v165 = j;
LABEL_330:
                  a5 = v229;
                  *(_QWORD *)(v165 + 16) = v230;
                  *(__n128 *)v165 = a5;
                }
LABEL_331:
                v160 = v164 + 24;
                v163 += 24;
                if (v164 + 24 == a2)
                  return a5.n128_f64[0];
              }
            }
            if (v162)
              return a5.n128_f64[0];
            v205 = 0;
            v206 = j - 24;
            v207 = -2;
            v208 = 1;
            while (1)
            {
              v209 = (__int128 *)(j + 24 * v205);
              v205 = v208;
              a5.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)v160, v209, (uint64_t)&v231);
              if (v231.n128_u32[3] - 1 >= 2)
              {
                if (v231.n128_u32[3])
                  goto LABEL_422;
                v210 = v232 == 1;
              }
              else
              {
                if (v231.n128_u32[3] == 2)
                  goto LABEL_422;
                v210 = v232;
              }
              if (v210)
              {
                v211 = *(_OWORD *)v160;
                v230 = *(_QWORD *)(v160 + 16);
                v229 = (__n128)v211;
                v212 = v207;
                v213 = v206;
                while (1)
                {
                  *(_OWORD *)(v213 + 48) = *(_OWORD *)(v213 + 24);
                  *(_QWORD *)(v213 + 64) = *(_QWORD *)(v213 + 40);
                  if (__CFADD__(v212++, 1))
                    goto LABEL_426;
                  v8 = v213;
                  WebCore::Decimal::operator-((__int128 *)&v229, (__int128 *)v213, (uint64_t)&v231);
                  if (v231.n128_u32[3] - 1 >= 2)
                  {
                    if (v231.n128_u32[3])
                    {
LABEL_421:
                      a5 = v229;
                      *(_QWORD *)(v8 + 40) = v230;
                      *(__n128 *)(v8 + 24) = a5;
                      break;
                    }
                    v215 = v232 == 1;
                  }
                  else
                  {
                    if (v231.n128_u32[3] == 2)
                      goto LABEL_421;
                    v215 = v232;
                  }
                  v213 = v8 - 24;
                  if (!v215)
                    goto LABEL_421;
                }
              }
LABEL_422:
              v208 = v205 + 1;
              v160 = j + 24 * (v205 + 1);
              v206 += 24;
              --v207;
              if (v160 == a2)
                return a5.n128_f64[0];
            }
          }
          if (!a3)
          {
            if (j == a2)
              return a5.n128_f64[0];
            v172 = (unint64_t)(v12 - 2) >> 1;
            v226 = v172;
            while (1)
            {
              v173 = v172;
              if (v226 < v172)
                goto LABEL_367;
              v174 = (2 * v172) | 1;
              v175 = a1 + 24 * v174;
              if (2 * v172 + 2 < v12)
              {
                WebCore::Decimal::operator-((__int128 *)(a1 + 24 * v174), (__int128 *)(v175 + 24), (uint64_t)&v231);
                if (v231.n128_u32[3] - 1 >= 2)
                {
                  if (v231.n128_u32[3])
                    goto LABEL_344;
                  v176 = v232 == 1;
                }
                else
                {
                  if (v231.n128_u32[3] == 2)
                    goto LABEL_344;
                  v176 = v232;
                }
                if (v176)
                {
                  v175 += 24;
                  v174 = 2 * v173 + 2;
                }
              }
LABEL_344:
              v177 = a1 + 24 * v173;
              WebCore::Decimal::operator-((__int128 *)v175, (__int128 *)v177, (uint64_t)&v231);
              if (v231.n128_u32[3] - 1 >= 2)
              {
                if (!v231.n128_u32[3])
                {
                  v178 = v232 == 1;
LABEL_347:
                  if (v178)
                    goto LABEL_367;
                }
              }
              else if (v231.n128_u32[3] != 2)
              {
                v178 = v232;
                goto LABEL_347;
              }
              v179 = *(_OWORD *)v177;
              v230 = *(_QWORD *)(v177 + 16);
              v229 = (__n128)v179;
              v180 = *(_OWORD *)v175;
              *(_QWORD *)(v177 + 16) = *(_QWORD *)(v175 + 16);
              *(_OWORD *)v177 = v180;
              while (1)
              {
                if (v226 < v174)
                  goto LABEL_366;
                v181 = v175;
                v182 = 2 * v174;
                v174 = (2 * v174) | 1;
                v175 = a1 + 24 * v174;
                v183 = v182 + 2;
                if (v182 + 2 < v12)
                {
                  WebCore::Decimal::operator-((__int128 *)(a1 + 24 * v174), (__int128 *)(v175 + 24), (uint64_t)&v231);
                  if (v231.n128_u32[3] - 1 >= 2)
                  {
                    if (v231.n128_u32[3])
                      goto LABEL_356;
                    v184 = v232 == 1;
                  }
                  else
                  {
                    if (v231.n128_u32[3] == 2)
                      goto LABEL_356;
                    v184 = v232;
                  }
                  if (v184)
                  {
                    v175 += 24;
                    v174 = v183;
                  }
                }
LABEL_356:
                WebCore::Decimal::operator-((__int128 *)v175, (__int128 *)&v229, (uint64_t)&v231);
                if (v231.n128_u32[3] - 1 < 2)
                  break;
                if (!v231.n128_u32[3])
                {
                  v185 = v232 == 1;
                  goto LABEL_359;
                }
LABEL_360:
                v186 = *(_OWORD *)v175;
                *(_QWORD *)(v181 + 16) = *(_QWORD *)(v175 + 16);
                *(_OWORD *)v181 = v186;
              }
              if (v231.n128_u32[3] == 2)
                goto LABEL_360;
              v185 = v232;
LABEL_359:
              if (!v185)
                goto LABEL_360;
              v175 = v181;
LABEL_366:
              v187 = (__int128)v229;
              *(_QWORD *)(v175 + 16) = v230;
              *(_OWORD *)v175 = v187;
LABEL_367:
              v172 = v173 - 1;
              if (!v173)
              {
                for (i = v11 / 0x18uLL; ; --i)
                {
                  v189 = 0;
                  v228 = *(_QWORD *)(a1 + 16);
                  v227 = *(_OWORD *)a1;
                  v190 = a1;
                  do
                  {
                    v191 = v190;
                    v190 += 24 * v189 + 24;
                    v192 = 2 * v189;
                    v189 = (2 * v189) | 1;
                    v193 = v192 + 2;
                    if (v192 + 2 >= i)
                      goto LABEL_380;
                    WebCore::Decimal::operator-((__int128 *)v190, (__int128 *)(v190 + 24), (uint64_t)&v231);
                    if (v231.n128_u32[3] - 1 >= 2)
                    {
                      if (v231.n128_u32[3])
                        goto LABEL_380;
                      v194 = v232 == 1;
                    }
                    else
                    {
                      if (v231.n128_u32[3] == 2)
                        goto LABEL_380;
                      v194 = v232;
                    }
                    if (v194)
                    {
                      v190 += 24;
                      v189 = v193;
                    }
LABEL_380:
                    v195 = *(_OWORD *)v190;
                    *(_QWORD *)(v191 + 16) = *(_QWORD *)(v190 + 16);
                    *(_OWORD *)v191 = v195;
                  }
                  while (v189 <= (uint64_t)((unint64_t)(i - 2) >> 1));
                  a2 -= 24;
                  if (v190 == a2)
                  {
                    a5.n128_u64[0] = v227;
                    *(_QWORD *)(v190 + 16) = v228;
                    *(_OWORD *)v190 = v227;
                  }
                  else
                  {
                    a5 = *(__n128 *)a2;
                    *(_QWORD *)(v190 + 16) = *(_QWORD *)(a2 + 16);
                    *(__n128 *)v190 = a5;
                    a5.n128_u64[0] = v227;
                    *(_QWORD *)(a2 + 16) = v228;
                    *(_OWORD *)a2 = v227;
                    v196 = v190 - a1 + 24;
                    if (v196 >= 25)
                    {
                      v197 = (v196 / 0x18uLL - 2) >> 1;
                      v198 = a1 + 24 * v197;
                      a5.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)v198, (__int128 *)v190, (uint64_t)&v231);
                      if (v231.n128_u32[3] - 1 >= 2)
                      {
                        if (!v231.n128_u32[3])
                        {
                          v199 = v232 == 1;
                          goto LABEL_389;
                        }
                      }
                      else if (v231.n128_u32[3] != 2)
                      {
                        v199 = v232;
LABEL_389:
                        if (v199)
                        {
                          v200 = *(_OWORD *)v190;
                          v230 = *(_QWORD *)(v190 + 16);
                          v229 = (__n128)v200;
                          do
                          {
                            v201 = (__n128 *)v198;
                            v202 = *(_OWORD *)v198;
                            *(_QWORD *)(v190 + 16) = *(_QWORD *)(v198 + 16);
                            *(_OWORD *)v190 = v202;
                            if (!v197)
                              break;
                            v197 = (v197 - 1) >> 1;
                            v198 = a1 + 24 * v197;
                            WebCore::Decimal::operator-((__int128 *)v198, (__int128 *)&v229, (uint64_t)&v231);
                            if (v231.n128_u32[3] - 1 >= 2)
                            {
                              if (v231.n128_u32[3])
                                break;
                              v203 = v232 == 1;
                            }
                            else
                            {
                              if (v231.n128_u32[3] == 2)
                                break;
                              v203 = v232;
                            }
                            v190 = (uint64_t)v201;
                          }
                          while (v203);
                          a5 = v229;
                          v201[1].n128_u64[0] = v230;
                          *v201 = a5;
                        }
                      }
                    }
                  }
                  if (i <= 2)
                    return a5.n128_f64[0];
                }
              }
            }
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = j + 24 * v13;
          if ((unint64_t)v11 >= 0xC01)
          {
            WebCore::Decimal::operator-((__int128 *)(a1 + 24 * v13), (__int128 *)a1, (uint64_t)&v231);
            if (v231.n128_u32[3] - 1 >= 2)
            {
              if (!v231.n128_u32[3])
              {
                v15 = v232 == 1;
                goto LABEL_9;
              }
            }
            else if (v231.n128_u32[3] != 2)
            {
              v15 = v232;
LABEL_9:
              v16 = v15;
              goto LABEL_10;
            }
            v16 = 0;
LABEL_10:
            WebCore::Decimal::operator-((__int128 *)(a2 - 24), (__int128 *)(a1 + 24 * v13), (uint64_t)&v231);
            if (v231.n128_u32[3] - 1 >= 2)
            {
              if (!v231.n128_u32[3])
              {
                v17 = v232 == 1;
LABEL_13:
                v18 = v17;
                if (v16)
                {
LABEL_14:
                  if (v18)
                  {
                    v19 = *(_OWORD *)a1;
                    v232 = *(_QWORD *)(a1 + 16);
                    v231 = (__n128)v19;
                    v20 = *(_OWORD *)v8;
                    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
                    *(_OWORD *)a1 = v20;
LABEL_31:
                    v33 = v231;
                    *(_QWORD *)(a2 - 8) = v232;
                    *(__n128 *)v8 = v33;
                    goto LABEL_48;
                  }
                  v27 = *(_OWORD *)a1;
                  v232 = *(_QWORD *)(a1 + 16);
                  v231 = (__n128)v27;
                  v28 = *(_OWORD *)v14;
                  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v14 + 16);
                  *(_OWORD *)a1 = v28;
                  v29 = v231;
                  *(_QWORD *)(v14 + 16) = v232;
                  *(__n128 *)v14 = v29;
                  WebCore::Decimal::operator-((__int128 *)(a2 - 24), (__int128 *)(a1 + 24 * v13), (uint64_t)&v231);
                  if (v231.n128_u32[3] - 1 < 2)
                  {
                    if (v231.n128_u32[3] == 2)
                      goto LABEL_48;
                    v30 = v232;
                    goto LABEL_29;
                  }
                  if (!v231.n128_u32[3])
                  {
                    v30 = v232 == 1;
LABEL_29:
                    if (!v30)
                      goto LABEL_48;
                    v31 = *(__n128 *)v14;
                    v232 = *(_QWORD *)(v14 + 16);
                    v231 = v31;
                    v32 = *(_OWORD *)v8;
                    *(_QWORD *)(v14 + 16) = *(_QWORD *)(a2 - 8);
                    *(_OWORD *)v14 = v32;
                    goto LABEL_31;
                  }
                  goto LABEL_48;
                }
LABEL_42:
                if (!v18)
                  goto LABEL_48;
                v41 = *(__n128 *)v14;
                v232 = *(_QWORD *)(v14 + 16);
                v231 = v41;
                v42 = *(_OWORD *)v8;
                *(_QWORD *)(v14 + 16) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)v14 = v42;
                v43 = v231;
                *(_QWORD *)(a2 - 8) = v232;
                *(__n128 *)v8 = v43;
                WebCore::Decimal::operator-((__int128 *)(a1 + 24 * v13), (__int128 *)a1, (uint64_t)&v231);
                if (v231.n128_u32[3] - 1 >= 2)
                {
                  if (v231.n128_u32[3])
                    goto LABEL_48;
                  v44 = v232 == 1;
                }
                else
                {
                  if (v231.n128_u32[3] == 2)
                    goto LABEL_48;
                  v44 = v232;
                }
                if (v44)
                {
                  v45 = *(_OWORD *)a1;
                  v232 = *(_QWORD *)(a1 + 16);
                  v231 = (__n128)v45;
                  v46 = *(_OWORD *)v14;
                  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v14 + 16);
                  *(_OWORD *)a1 = v46;
                  v47 = v231;
                  *(_QWORD *)(v14 + 16) = v232;
                  *(__n128 *)v14 = v47;
                }
LABEL_48:
                v48 = (__int128 *)(a1 + 24);
                v49 = a1 + 24 * v13 - 24;
                WebCore::Decimal::operator-((__int128 *)v49, (__int128 *)(a1 + 24), (uint64_t)&v231);
                if (v231.n128_u32[3] - 1 >= 2)
                {
                  if (!v231.n128_u32[3])
                  {
                    v50 = v232 == 1;
                    goto LABEL_51;
                  }
                }
                else if (v231.n128_u32[3] != 2)
                {
                  v50 = v232;
LABEL_51:
                  v51 = v50;
                  goto LABEL_52;
                }
                v51 = 0;
LABEL_52:
                WebCore::Decimal::operator-(v224, (__int128 *)(a1 + 24 * v13 - 24), (uint64_t)&v231);
                if (v231.n128_u32[3] - 1 >= 2)
                {
                  if (!v231.n128_u32[3])
                  {
                    v52 = v232 == 1;
LABEL_55:
                    v53 = v52;
                    if (v51)
                    {
LABEL_56:
                      if (v53)
                      {
                        v231 = (__n128)*v48;
                        v54 = (__int128)v231;
                        v232 = *(_QWORD *)(a1 + 40);
                        v55 = v232;
                        v56 = *(_QWORD *)(a2 - 32);
                        *v48 = *v224;
                        *(_QWORD *)(a1 + 40) = v56;
                        *(_QWORD *)(a2 - 32) = v55;
                        *v224 = v54;
                        goto LABEL_83;
                      }
                      v231 = (__n128)*v48;
                      v57 = v231;
                      v232 = *(_QWORD *)(a1 + 40);
                      v58 = v232;
                      v59 = *(_QWORD *)(a1 + 24 * v13 - 8);
                      *v48 = *(_OWORD *)v49;
                      *(_QWORD *)(a1 + 40) = v59;
                      *(_QWORD *)(a1 + 24 * v13 - 8) = v58;
                      *(__n128 *)v49 = v57;
                      WebCore::Decimal::operator-(v224, (__int128 *)(a1 + 24 * v13 - 24), (uint64_t)&v231);
                      if (v231.n128_u32[3] - 1 >= 2)
                      {
                        if (v231.n128_u32[3])
                          goto LABEL_83;
                        v60 = v232 == 1;
                      }
                      else
                      {
                        if (v231.n128_u32[3] == 2)
                          goto LABEL_83;
                        v60 = v232;
                      }
                      if (v60)
                      {
                        v61 = *(_OWORD *)v49;
                        v232 = *(_QWORD *)(a1 + 24 * v13 - 8);
                        v231 = (__n128)v61;
                        v62 = *v224;
                        *(_QWORD *)(a1 + 24 * v13 - 8) = *(_QWORD *)(a2 - 32);
                        *(_OWORD *)v49 = v62;
                        v63 = (__int128)v231;
                        *(_QWORD *)(a2 - 32) = v232;
                        *v224 = v63;
                      }
                      goto LABEL_83;
                    }
LABEL_77:
                    if (!v53)
                      goto LABEL_83;
                    v71 = *(_OWORD *)v49;
                    v232 = *(_QWORD *)(a1 + 24 * v13 - 8);
                    v231 = (__n128)v71;
                    v72 = *v224;
                    *(_QWORD *)(a1 + 24 * v13 - 8) = *(_QWORD *)(a2 - 32);
                    *(_OWORD *)v49 = v72;
                    v73 = (__int128)v231;
                    *(_QWORD *)(a2 - 32) = v232;
                    *v224 = v73;
                    WebCore::Decimal::operator-((__int128 *)(a1 + 24 * v13 - 24), (__int128 *)(a1 + 24), (uint64_t)&v231);
                    if (v231.n128_u32[3] - 1 >= 2)
                    {
                      if (v231.n128_u32[3])
                        goto LABEL_83;
                      v74 = v232 == 1;
                    }
                    else
                    {
                      if (v231.n128_u32[3] == 2)
                        goto LABEL_83;
                      v74 = v232;
                    }
                    if (v74)
                    {
                      v231 = (__n128)*v48;
                      v75 = v231;
                      v232 = *(_QWORD *)(a1 + 40);
                      v76 = v232;
                      v77 = *(_QWORD *)(a1 + 24 * v13 - 8);
                      *v48 = *(_OWORD *)v49;
                      *(_QWORD *)(a1 + 40) = v77;
                      *(_QWORD *)(a1 + 24 * v13 - 8) = v76;
                      *(__n128 *)v49 = v75;
                    }
LABEL_83:
                    v78 = (__n128 *)(a1 + 48);
                    v79 = a1 + 24 * v13 + 24;
                    WebCore::Decimal::operator-((__int128 *)v79, (__int128 *)(a1 + 48), (uint64_t)&v231);
                    if (v231.n128_u32[3] - 1 >= 2)
                    {
                      if (!v231.n128_u32[3])
                      {
                        v80 = v232 == 1;
                        goto LABEL_86;
                      }
                    }
                    else if (v231.n128_u32[3] != 2)
                    {
                      v80 = v232;
LABEL_86:
                      v81 = v80;
                      goto LABEL_87;
                    }
                    v81 = 0;
LABEL_87:
                    WebCore::Decimal::operator-((__int128 *)(a2 - 72), (__int128 *)v79, (uint64_t)&v231);
                    if (v231.n128_u32[3] - 1 >= 2)
                    {
                      if (!v231.n128_u32[3])
                      {
                        v82 = v232 == 1;
LABEL_90:
                        v83 = v82;
                        if (v81)
                        {
LABEL_91:
                          if (v83)
                          {
                            v84 = *v78;
                            v231 = *v78;
                            v85 = *(_QWORD *)(a1 + 64);
                            v232 = v85;
                            v86 = *(_QWORD *)(a2 - 56);
                            *v78 = *v9;
                            *(_QWORD *)(a1 + 64) = v86;
LABEL_98:
                            *(_QWORD *)(a2 - 56) = v85;
                            *v9 = v84;
                            goto LABEL_109;
                          }
                          v231 = *v78;
                          v87 = v231;
                          v232 = *(_QWORD *)(a1 + 64);
                          v88 = v232;
                          v89 = *(_QWORD *)(v79 + 16);
                          *v78 = *(__n128 *)v79;
                          *(_QWORD *)(a1 + 64) = v89;
                          *(_QWORD *)(v79 + 16) = v88;
                          *(__n128 *)v79 = v87;
                          WebCore::Decimal::operator-((__int128 *)(a2 - 72), (__int128 *)v79, (uint64_t)&v231);
                          if (v231.n128_u32[3] - 1 < 2)
                          {
                            if (v231.n128_u32[3] == 2)
                              goto LABEL_109;
                            v90 = v232;
                            goto LABEL_96;
                          }
                          if (!v231.n128_u32[3])
                          {
                            v90 = v232 == 1;
LABEL_96:
                            if (!v90)
                              goto LABEL_109;
                            v91 = *(_OWORD *)v79;
                            v232 = *(_QWORD *)(v79 + 16);
                            v231 = (__n128)v91;
                            v92 = *v9;
                            *(_QWORD *)(v79 + 16) = *(_QWORD *)(a2 - 56);
                            *(__n128 *)v79 = v92;
                            v84 = v231;
                            v85 = v232;
                            goto LABEL_98;
                          }
                          goto LABEL_109;
                        }
LABEL_103:
                        if (!v83)
                          goto LABEL_109;
                        v93 = *(_OWORD *)v79;
                        v232 = *(_QWORD *)(v79 + 16);
                        v231 = (__n128)v93;
                        v94 = *v9;
                        *(_QWORD *)(v79 + 16) = *(_QWORD *)(a2 - 56);
                        *(__n128 *)v79 = v94;
                        v95 = v231;
                        *(_QWORD *)(a2 - 56) = v232;
                        *v9 = v95;
                        WebCore::Decimal::operator-((__int128 *)v79, (__int128 *)(a1 + 48), (uint64_t)&v231);
                        if (v231.n128_u32[3] - 1 >= 2)
                        {
                          if (v231.n128_u32[3])
                            goto LABEL_109;
                          v96 = v232 == 1;
                        }
                        else
                        {
                          if (v231.n128_u32[3] == 2)
                            goto LABEL_109;
                          v96 = v232;
                        }
                        if (v96)
                        {
                          v231 = *v78;
                          v97 = v231;
                          v232 = *(_QWORD *)(a1 + 64);
                          v98 = v232;
                          v99 = *(_QWORD *)(v79 + 16);
                          *v78 = *(__n128 *)v79;
                          *(_QWORD *)(a1 + 64) = v99;
                          *(_QWORD *)(v79 + 16) = v98;
                          *(__n128 *)v79 = v97;
                        }
LABEL_109:
                        WebCore::Decimal::operator-((__int128 *)v14, (__int128 *)v49, (uint64_t)&v231);
                        if (v231.n128_u32[3] - 1 >= 2)
                        {
                          if (!v231.n128_u32[3])
                          {
                            v100 = v232 == 1;
                            goto LABEL_112;
                          }
                        }
                        else if (v231.n128_u32[3] != 2)
                        {
                          v100 = v232;
LABEL_112:
                          v101 = v100;
                          goto LABEL_113;
                        }
                        v101 = 0;
LABEL_113:
                        WebCore::Decimal::operator-((__int128 *)v79, (__int128 *)v14, (uint64_t)&v231);
                        if (v231.n128_u32[3] - 1 >= 2)
                        {
                          if (!v231.n128_u32[3])
                          {
                            v102 = v232 == 1;
LABEL_116:
                            v103 = v102;
                            if (v101)
                            {
LABEL_117:
                              if (v103)
                              {
                                v104 = *(_OWORD *)v49;
                                v232 = *(_QWORD *)(v49 + 16);
                                v231 = (__n128)v104;
                                *(_OWORD *)v49 = *(_OWORD *)v79;
                                *(_QWORD *)(v49 + 16) = *(_QWORD *)(v79 + 16);
LABEL_124:
                                v109 = v231;
                                *(_QWORD *)(v79 + 16) = v232;
                                *(__n128 *)v79 = v109;
                                goto LABEL_135;
                              }
                              v105 = *(_OWORD *)v49;
                              v232 = *(_QWORD *)(v49 + 16);
                              v231 = (__n128)v105;
                              *(_OWORD *)v49 = *(_OWORD *)v14;
                              *(_QWORD *)(v49 + 16) = *(_QWORD *)(v14 + 16);
                              v106 = v231;
                              *(_QWORD *)(v14 + 16) = v232;
                              *(__n128 *)v14 = v106;
                              WebCore::Decimal::operator-((__int128 *)v79, (__int128 *)v14, (uint64_t)&v231);
                              if (v231.n128_u32[3] - 1 >= 2)
                              {
                                if (v231.n128_u32[3])
                                  goto LABEL_135;
                                v107 = v232 == 1;
                              }
                              else
                              {
                                if (v231.n128_u32[3] == 2)
                                  goto LABEL_135;
                                v107 = v232;
                              }
                              if (v107)
                              {
                                v108 = *(_OWORD *)v14;
                                v232 = *(_QWORD *)(v14 + 16);
                                v231 = (__n128)v108;
                                *(_OWORD *)v14 = *(_OWORD *)v79;
                                *(_QWORD *)(v14 + 16) = *(_QWORD *)(v79 + 16);
                                goto LABEL_124;
                              }
LABEL_135:
                              v115 = *(_OWORD *)a1;
                              v232 = *(_QWORD *)(a1 + 16);
                              v231 = (__n128)v115;
                              v116 = *(_OWORD *)v14;
                              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v14 + 16);
                              *(_OWORD *)a1 = v116;
                              v117 = v231;
                              *(_QWORD *)(v14 + 16) = v232;
                              *(__n128 *)v14 = v117;
                              goto LABEL_136;
                            }
LABEL_129:
                            if (v103)
                            {
                              v110 = *(_OWORD *)v14;
                              v232 = *(_QWORD *)(v14 + 16);
                              v231 = (__n128)v110;
                              *(_OWORD *)v14 = *(_OWORD *)v79;
                              *(_QWORD *)(v14 + 16) = *(_QWORD *)(v79 + 16);
                              v111 = v231;
                              *(_QWORD *)(v79 + 16) = v232;
                              *(__n128 *)v79 = v111;
                              WebCore::Decimal::operator-((__int128 *)v14, (__int128 *)v49, (uint64_t)&v231);
                              if (v231.n128_u32[3] - 1 >= 2)
                              {
                                if (v231.n128_u32[3])
                                  goto LABEL_135;
                                v112 = v232 == 1;
                              }
                              else
                              {
                                if (v231.n128_u32[3] == 2)
                                  goto LABEL_135;
                                v112 = v232;
                              }
                              if (v112)
                              {
                                v113 = *(_OWORD *)v49;
                                v232 = *(_QWORD *)(v49 + 16);
                                v231 = (__n128)v113;
                                *(_OWORD *)v49 = *(_OWORD *)v14;
                                *(_QWORD *)(v49 + 16) = *(_QWORD *)(v14 + 16);
                                v114 = v231;
                                *(_QWORD *)(v14 + 16) = v232;
                                *(__n128 *)v14 = v114;
                              }
                              goto LABEL_135;
                            }
                            goto LABEL_135;
                          }
                        }
                        else if (v231.n128_u32[3] != 2)
                        {
                          v102 = v232;
                          goto LABEL_116;
                        }
                        v103 = 0;
                        if (v101)
                          goto LABEL_117;
                        goto LABEL_129;
                      }
                    }
                    else if (v231.n128_u32[3] != 2)
                    {
                      v82 = v232;
                      goto LABEL_90;
                    }
                    v83 = 0;
                    if (v81)
                      goto LABEL_91;
                    goto LABEL_103;
                  }
                }
                else if (v231.n128_u32[3] != 2)
                {
                  v52 = v232;
                  goto LABEL_55;
                }
                v53 = 0;
                if (v51)
                  goto LABEL_56;
                goto LABEL_77;
              }
            }
            else if (v231.n128_u32[3] != 2)
            {
              v17 = v232;
              goto LABEL_13;
            }
            v18 = 0;
            if (v16)
              goto LABEL_14;
            goto LABEL_42;
          }
          WebCore::Decimal::operator-((__int128 *)a1, (__int128 *)(a1 + 24 * v13), (uint64_t)&v231);
          if (v231.n128_u32[3] - 1 >= 2)
          {
            if (!v231.n128_u32[3])
            {
              v21 = v232 == 1;
              goto LABEL_19;
            }
          }
          else if (v231.n128_u32[3] != 2)
          {
            v21 = v232;
LABEL_19:
            v22 = v21;
            goto LABEL_20;
          }
          v22 = 0;
LABEL_20:
          WebCore::Decimal::operator-((__int128 *)(a2 - 24), (__int128 *)a1, (uint64_t)&v231);
          if (v231.n128_u32[3] - 1 >= 2)
          {
            if (!v231.n128_u32[3])
            {
              v23 = v232 == 1;
LABEL_23:
              v24 = v23;
              if (v22)
                goto LABEL_24;
              goto LABEL_67;
            }
          }
          else if (v231.n128_u32[3] != 2)
          {
            v23 = v232;
            goto LABEL_23;
          }
          v24 = 0;
          if (v22)
          {
LABEL_24:
            if (v24)
            {
              v25 = *(_OWORD *)v14;
              v232 = *(_QWORD *)(v14 + 16);
              v231 = (__n128)v25;
              v26 = *(_OWORD *)v8;
              *(_QWORD *)(v14 + 16) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)v14 = v26;
LABEL_37:
              v40 = v231;
              *(_QWORD *)(a2 - 8) = v232;
              *(__n128 *)v8 = v40;
              goto LABEL_136;
            }
            v34 = *(_OWORD *)v14;
            v232 = *(_QWORD *)(v14 + 16);
            v231 = (__n128)v34;
            v35 = *(_OWORD *)a1;
            *(_QWORD *)(v14 + 16) = *(_QWORD *)(a1 + 16);
            *(_OWORD *)v14 = v35;
            v36 = v231;
            *(_QWORD *)(a1 + 16) = v232;
            *(__n128 *)a1 = v36;
            WebCore::Decimal::operator-((__int128 *)(a2 - 24), (__int128 *)a1, (uint64_t)&v231);
            if (v231.n128_u32[3] - 1 < 2)
            {
              if (v231.n128_u32[3] == 2)
                goto LABEL_136;
              v37 = v232;
              goto LABEL_35;
            }
            if (!v231.n128_u32[3])
            {
              v37 = v232 == 1;
LABEL_35:
              if (!v37)
                goto LABEL_136;
              v38 = *(_OWORD *)a1;
              v232 = *(_QWORD *)(a1 + 16);
              v231 = (__n128)v38;
              v39 = *(_OWORD *)v8;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)a1 = v39;
              goto LABEL_37;
            }
            goto LABEL_136;
          }
LABEL_67:
          if (!v24)
            goto LABEL_136;
          v64 = *(_OWORD *)a1;
          v232 = *(_QWORD *)(a1 + 16);
          v231 = (__n128)v64;
          v65 = *(_OWORD *)v8;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)a1 = v65;
          v66 = v231;
          *(_QWORD *)(a2 - 8) = v232;
          *(__n128 *)v8 = v66;
          WebCore::Decimal::operator-((__int128 *)a1, (__int128 *)v14, (uint64_t)&v231);
          if (v231.n128_u32[3] - 1 >= 2)
          {
            if (v231.n128_u32[3])
              goto LABEL_136;
            v67 = v232 == 1;
          }
          else
          {
            if (v231.n128_u32[3] == 2)
              goto LABEL_136;
            v67 = v232;
          }
          if (v67)
          {
            v68 = *(_OWORD *)v14;
            v232 = *(_QWORD *)(v14 + 16);
            v231 = (__n128)v68;
            v69 = *(_OWORD *)a1;
            *(_QWORD *)(v14 + 16) = *(_QWORD *)(a1 + 16);
            *(_OWORD *)v14 = v69;
            v70 = v231;
            *(_QWORD *)(a1 + 16) = v232;
            *(__n128 *)a1 = v70;
          }
LABEL_136:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_141;
          WebCore::Decimal::operator-((__int128 *)(a1 - 24), (__int128 *)a1, (uint64_t)&v231);
          if (v231.n128_u32[3] - 1 >= 2)
          {
            if (!v231.n128_u32[3])
            {
              v118 = v232 == 1;
              goto LABEL_140;
            }
LABEL_200:
            v139 = *(_OWORD *)a1;
            v230 = *(_QWORD *)(a1 + 16);
            v229 = (__n128)v139;
            WebCore::Decimal::operator-((__int128 *)&v229, (__int128 *)(a2 - 24), (uint64_t)&v231);
            if (v231.n128_u32[3] - 1 >= 2)
            {
              if (!v231.n128_u32[3])
              {
                v140 = v232 == 1;
LABEL_203:
                if (v140)
                {
                  for (j = a1 + 24; ; j += 24)
                  {
                    if (j == a2)
                      goto LABEL_426;
                    WebCore::Decimal::operator-((__int128 *)&v229, (__int128 *)j, (uint64_t)&v231);
                    if (v231.n128_u32[3] - 1 >= 2)
                    {
                      if (v231.n128_u32[3])
                        continue;
                      v141 = v232 == 1;
                    }
                    else
                    {
                      if (v231.n128_u32[3] == 2)
                        continue;
                      v141 = v232;
                    }
                    if (v141)
                      goto LABEL_243;
                  }
                }
              }
            }
            else if (v231.n128_u32[3] != 2)
            {
              v140 = v232;
              goto LABEL_203;
            }
            for (j = a1 + 24; j < a2; j += 24)
            {
              WebCore::Decimal::operator-((__int128 *)&v229, (__int128 *)j, (uint64_t)&v231);
              if (v231.n128_u32[3] - 1 >= 2)
              {
                if (v231.n128_u32[3])
                  continue;
                v142 = v232 == 1;
              }
              else
              {
                if (v231.n128_u32[3] == 2)
                  continue;
                v142 = v232;
              }
              if (v142)
                break;
            }
LABEL_243:
            v143 = a2;
            if (j < a2)
            {
              v143 = a2;
              while (v143 != a1)
              {
                v143 -= 24;
                WebCore::Decimal::operator-((__int128 *)&v229, (__int128 *)v143, (uint64_t)&v231);
                if (v231.n128_u32[3] - 1 >= 2)
                {
                  if (v231.n128_u32[3])
                    goto LABEL_269;
                  v144 = v232 == 1;
                }
                else
                {
                  if (v231.n128_u32[3] == 2)
                    goto LABEL_269;
                  v144 = v232;
                }
                if (!v144)
                  goto LABEL_269;
              }
LABEL_426:
              __break(1u);
LABEL_427:
              v216 = *(_OWORD *)a1;
              v232 = *(_QWORD *)(a1 + 16);
              v231 = (__n128)v216;
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
              *(__n128 *)a2 = v231;
              *(_QWORD *)(a2 + 16) = v232;
              a5.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)v8, (__int128 *)a2, (uint64_t)&v231);
              if (v231.n128_u32[3] - 1 >= 2)
              {
                if (!v231.n128_u32[3])
                {
                  v217 = v232 == 1;
                  goto LABEL_430;
                }
              }
              else if (v231.n128_u32[3] != 2)
              {
                v217 = v232;
LABEL_430:
                if (v217)
                {
                  a5 = *(__n128 *)a2;
                  v231 = *(__n128 *)a2;
                  v159 = *(_QWORD *)(a2 + 16);
                  v232 = v159;
                  v218 = *(_QWORD *)(v8 + 16);
                  *(_OWORD *)a2 = *(_OWORD *)v8;
                  *(_QWORD *)(a2 + 16) = v218;
LABEL_303:
                  *(_QWORD *)(v8 + 16) = v159;
                  *(__n128 *)v8 = a5;
                }
              }
              return a5.n128_f64[0];
            }
LABEL_269:
            if (j < v143)
            {
              v145 = *(_OWORD *)j;
              v232 = *(_QWORD *)(j + 16);
              v231 = (__n128)v145;
              v146 = *(_OWORD *)v143;
              *(_QWORD *)(j + 16) = *(_QWORD *)(v143 + 16);
              *(_OWORD *)j = v146;
              v147 = v231;
              *(_QWORD *)(v143 + 16) = v232;
              *(__n128 *)v143 = v147;
              while (1)
              {
                while (1)
                {
                  j += 24;
                  if (j == a2)
                    goto LABEL_426;
                  WebCore::Decimal::operator-((__int128 *)&v229, (__int128 *)j, (uint64_t)&v231);
                  if (v231.n128_u32[3] - 1 >= 2)
                    break;
                  if (v231.n128_u32[3] != 2)
                  {
                    v148 = v232;
LABEL_258:
                    if (v148)
                    {
                      while (v143 != a1)
                      {
                        v143 -= 24;
                        WebCore::Decimal::operator-((__int128 *)&v229, (__int128 *)v143, (uint64_t)&v231);
                        if (v231.n128_u32[3] - 1 >= 2)
                        {
                          if (v231.n128_u32[3])
                            goto LABEL_269;
                          v149 = v232 == 1;
                        }
                        else
                        {
                          if (v231.n128_u32[3] == 2)
                            goto LABEL_269;
                          v149 = v232;
                        }
                        if (!v149)
                          goto LABEL_269;
                      }
                      goto LABEL_426;
                    }
                  }
                }
                if (!v231.n128_u32[3])
                {
                  v148 = v232 == 1;
                  goto LABEL_258;
                }
              }
            }
            v150 = (__n128 *)(j - 24);
            if (j - 24 != a1)
            {
              v151 = *v150;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
              *(__n128 *)a1 = v151;
            }
            a4 = 0;
            a5 = v229;
            *(_QWORD *)(j - 8) = v230;
            *v150 = a5;
            continue;
          }
          if (v231.n128_u32[3] == 2)
            goto LABEL_200;
          v118 = v232;
LABEL_140:
          if (!v118)
            goto LABEL_200;
LABEL_141:
          v119 = 0;
          v120 = *(_OWORD *)a1;
          v230 = *(_QWORD *)(a1 + 16);
          v229 = (__n128)v120;
          do
          {
            v121 = v119;
            v122 = (__int128 *)(a1 + v119 + 24);
            if (v122 == (__int128 *)a2)
              goto LABEL_426;
            WebCore::Decimal::operator-(v122, (__int128 *)&v229, (uint64_t)&v231);
            if (v231.n128_u32[3] - 1 < 2)
            {
              if (v231.n128_u32[3] == 2)
                break;
              v123 = v232;
              goto LABEL_146;
            }
            if (v231.n128_u32[3])
              break;
            v123 = v232 == 1;
LABEL_146:
            v119 = v121 + 24;
          }
          while (v123);
          v124 = a1 + v121;
          v125 = a1 + v121 + 24;
          k = (__int128 *)a2;
          if (v121)
          {
            if (a2 == a1)
              goto LABEL_426;
            while (2)
            {
              k = (__int128 *)((char *)k - 24);
              WebCore::Decimal::operator-(k, (__int128 *)&v229, (uint64_t)&v231);
              if (v231.n128_u32[3] - 1 >= 2)
              {
                if (!v231.n128_u32[3])
                {
                  v127 = v232 == 1;
                  goto LABEL_155;
                }
              }
              else if (v231.n128_u32[3] != 2)
              {
                v127 = v232;
LABEL_155:
                if (v127)
                  goto LABEL_172;
              }
              if (k == (__int128 *)a1)
                goto LABEL_426;
              continue;
            }
          }
          if (v125 < a2)
          {
            for (k = (__int128 *)(a2 - 24); ; k = (__int128 *)((char *)k - 24))
            {
              WebCore::Decimal::operator-(k, (__int128 *)&v229, (uint64_t)&v231);
              if (v231.n128_u32[3] - 1 >= 2)
              {
                if (v231.n128_u32[3])
                {
LABEL_169:
                  if (v125 >= (unint64_t)k)
                    break;
                  continue;
                }
                v128 = v232 == 1;
              }
              else
              {
                if (v231.n128_u32[3] == 2)
                  goto LABEL_169;
                v128 = v232;
              }
              if (v125 >= (unint64_t)k || v128)
                break;
            }
          }
LABEL_172:
          if (v125 >= (unint64_t)k)
            goto LABEL_193;
          v129 = a1 + v121 + 24;
          v130 = k;
          do
          {
            v131 = *(_OWORD *)v129;
            v232 = *(_QWORD *)(v129 + 16);
            v231 = (__n128)v131;
            v132 = *v130;
            *(_QWORD *)(v129 + 16) = *((_QWORD *)v130 + 2);
            *(_OWORD *)v129 = v132;
            v133 = v231;
            *((_QWORD *)v130 + 2) = v232;
            *v130 = (__int128)v133;
            do
            {
              v124 = v129;
              v129 += 24;
              if (v129 == a2)
                goto LABEL_426;
              WebCore::Decimal::operator-((__int128 *)v129, (__int128 *)&v229, (uint64_t)&v231);
              if (v231.n128_u32[3] - 1 < 2)
              {
                if (v231.n128_u32[3] == 2)
                  break;
                v134 = v232;
                continue;
              }
              if (v231.n128_u32[3])
                break;
              v134 = v232 == 1;
            }
            while (v134);
            v129 = v124 + 24;
            while (1)
            {
              while (1)
              {
                if (v130 == (__int128 *)a1)
                  goto LABEL_426;
                v130 = (__int128 *)((char *)v130 - 24);
                WebCore::Decimal::operator-(v130, (__int128 *)&v229, (uint64_t)&v231);
                if (v231.n128_u32[3] - 1 >= 2)
                  break;
                if (v231.n128_u32[3] != 2)
                {
                  v135 = v232;
                  goto LABEL_188;
                }
              }
              if (!v231.n128_u32[3])
              {
                v135 = v232 == 1;
LABEL_188:
                if (v135)
                  break;
              }
            }
          }
          while (v129 < (unint64_t)v130);
LABEL_193:
          if (v124 != a1)
          {
            v136 = *(_OWORD *)v124;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v124 + 16);
            *(_OWORD *)a1 = v136;
          }
          v137 = (__int128)v229;
          *(_QWORD *)(v124 + 16) = v230;
          *(_OWORD *)v124 = v137;
          if (v125 < (unint64_t)k)
          {
LABEL_198:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *,false>(a1, v124, a3, a4 & 1);
            a4 = 0;
            j = v124 + 24;
            continue;
          }
          v138 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(a1, v124);
          j = v124 + 24;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(v124 + 24, a2))
          {
            if (!v138)
              goto LABEL_198;
            continue;
          }
          a2 = v124;
          if (v138)
            return a5.n128_f64[0];
          break;
      }
      break;
    }
  }
}

